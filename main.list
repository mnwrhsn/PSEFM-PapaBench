
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 80 01 20 19 87 01 00 5d 87 01 00 5d 87 01 00     ... ....]...]...
      10:	5d 87 01 00 5d 87 01 00 5d 87 01 00 00 00 00 00     ]...]...].......
	...
      2c:	fd 59 00 00 5d 87 01 00 00 00 00 00 09 5b 00 00     .Y..]........[..
      3c:	45 5b 00 00 5d 87 01 00 5d 87 01 00 5d 87 01 00     E[..]...]...]...
      4c:	5d 87 01 00 5d 87 01 00 5d 87 01 00 5d 87 01 00     ]...]...]...]...
      5c:	5d 87 01 00 5d 87 01 00 5d 87 01 00 5d 87 01 00     ]...]...]...]...
      6c:	5d 87 01 00 5d 87 01 00 5d 87 01 00 5d 87 01 00     ]...]...]...]...
      7c:	5d 87 01 00 5d 87 01 00 5d 87 01 00 5d 87 01 00     ]...]...]...]...
      8c:	5d 87 01 00 5d 87 01 00 5d 87 01 00 5d 87 01 00     ]...]...]...]...
      9c:	5d 87 01 00 5d 87 01 00 5d 87 01 00 5d 87 01 00     ]...]...]...]...
      ac:	5d 87 01 00 5d 87 01 00 5d 87 01 00 5d 87 01 00     ]...]...]...]...
      bc:	5d 87 01 00 5d 87 01 00 5d 87 01 00 5d 87 01 00     ]...]...]...]...
      cc:	5d 87 01 00 5d 87 01 00 5d 87 01 00 5d 87 01 00     ]...]...]...]...
      dc:	5d 87 01 00 5d 87 01 00 5d 87 01 00 5d 87 01 00     ]...]...]...]...
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	000188b8 	.word	0x000188b8
     6d0:	20000000 	.word	0x20000000
     6d4:	20000488 	.word	0x20000488
     6d8:	20000488 	.word	0x20000488
     6dc:	2000b780 	.word	0x2000b780

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f003 fbcd 	bl	5b98 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 43f4 	movw	r3, #1268	; 0x4f4
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f001 fd0c 	bl	3e68 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f001 fd07 	bl	3e68 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0214 	rsb	r2, r3, #20
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 43f8 	movw	r3, #1272	; 0x4f8
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 43f8 	movw	r3, #1272	; 0x4f8
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 4288 	movw	r2, #1160	; 0x488
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f001 fce7 	bl	3e80 <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 43fc 	movw	r3, #1276	; 0x4fc
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 43f4 	movw	r3, #1268	; 0x4f4
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f001 fd26 	bl	3f40 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 43f4 	movw	r3, #1268	; 0x4f4
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 43dc 	movw	r3, #1244	; 0x4dc
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f001 fcd0 	bl	3ed0 <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f001 fcc0 	bl	3ed0 <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 43f4 	movw	r3, #1268	; 0x4f4
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f001 fcb3 	bl	3ed0 <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 43e0 	movw	r3, #1248	; 0x4e0
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f001 fcd4 	bl	3f40 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f001 fccb 	bl	3f40 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 43f8 	movw	r3, #1272	; 0x4f8
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 43f8 	movw	r3, #1272	; 0x4f8
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 4288 	movw	r2, #1160	; 0x488
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f001 fc4a 	bl	3e80 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 43e0 	movw	r3, #1248	; 0x4e0
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f002 fd19 	bl	503c <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 5300 	movw	r3, #1280	; 0x500
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 5304 	movw	r3, #1284	; 0x504
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 5304 	movw	r3, #1284	; 0x504
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 5304 	movw	r3, #1284	; 0x504
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 43dc 	movw	r3, #1244	; 0x4dc
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 43dc 	movw	r3, #1244	; 0x4dc
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 43fc 	movw	r3, #1276	; 0x4fc
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f001 fc3e 	bl	3f40 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f001 fc35 	bl	3f40 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 43f8 	movw	r3, #1272	; 0x4f8
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 43f8 	movw	r3, #1272	; 0x4f8
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 4288 	movw	r2, #1160	; 0x488
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f001 fbb0 	bl	3e80 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 5304 	movw	r3, #1284	; 0x504
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 5300 	movw	r3, #1280	; 0x500
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 43f8 	movw	r3, #1272	; 0x4f8
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 43f8 	movw	r3, #1272	; 0x4f8
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 43f8 	movw	r3, #1272	; 0x4f8
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 43f8 	movw	r3, #1272	; 0x4f8
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 4288 	movw	r2, #1160	; 0x488
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 43f8 	movw	r3, #1272	; 0x4f8
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 4288 	movw	r2, #1160	; 0x488
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 43f4 	movw	r3, #1268	; 0x4f4
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 43f4 	movw	r3, #1268	; 0x4f4
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 4288 	movw	r2, #1160	; 0x488
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f001 fae7 	bl	3e28 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 40b0 	movw	r0, #1200	; 0x4b0
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f001 fadb 	bl	3e28 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 40c4 	movw	r0, #1220	; 0x4c4
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f001 fad5 	bl	3e28 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 40e0 	movw	r0, #1248	; 0x4e0
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f001 facf 	bl	3e28 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 43d8 	movw	r3, #1240	; 0x4d8
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 42b0 	movw	r2, #1200	; 0x4b0
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 43dc 	movw	r3, #1244	; 0x4dc
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 42c4 	movw	r2, #1220	; 0x4c4
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f001 fb39 	bl	3f40 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 40e0 	movw	r0, #1248	; 0x4e0
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f001 fad0 	bl	3e80 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 43f4 	movw	r3, #1268	; 0x4f4
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <prvInitialiseEventLists>:
static void vEventSetxTimeStamp( xEventHandle pxNewEvent );

static xList * pxGetReadyList( void );

static void prvInitialiseEventLists(void )
{
    2908:	b580      	push	{r7, lr}
    290a:	b084      	sub	sp, #16
    290c:	af00      	add	r7, sp, #0
    volatile portBASE_TYPE xCPU;

    vListInitialise( ( xList * ) &xEventList );
    290e:	f240 5008 	movw	r0, #1288	; 0x508
    2912:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2916:	f001 fa87 	bl	3e28 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutableList );
    291a:	f240 501c 	movw	r0, #1308	; 0x51c
    291e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2922:	f001 fa81 	bl	3e28 <vListInitialise>

    // init the xEventReadyList[configCPU_NUMBER].
    for ( xCPU = 0; xCPU < configCPU_NUMBER; xCPU ++ )
    2926:	2300      	movs	r3, #0
    2928:	607b      	str	r3, [r7, #4]
    292a:	e00f      	b.n	294c <prvInitialiseEventLists+0x44>
    {
        vListInitialise( (xList * ) & xEventReadyList[xCPU] );
    292c:	687a      	ldr	r2, [r7, #4]
    292e:	4613      	mov	r3, r2
    2930:	009b      	lsls	r3, r3, #2
    2932:	4413      	add	r3, r2
    2934:	009b      	lsls	r3, r3, #2
    2936:	f240 5230 	movw	r2, #1328	; 0x530
    293a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    293e:	4413      	add	r3, r2
    2940:	4618      	mov	r0, r3
    2942:	f001 fa71 	bl	3e28 <vListInitialise>

    vListInitialise( ( xList * ) &xEventList );
    vListInitialise( ( xList * ) &xEventExecutableList );

    // init the xEventReadyList[configCPU_NUMBER].
    for ( xCPU = 0; xCPU < configCPU_NUMBER; xCPU ++ )
    2946:	687b      	ldr	r3, [r7, #4]
    2948:	3301      	adds	r3, #1
    294a:	607b      	str	r3, [r7, #4]
    294c:	687b      	ldr	r3, [r7, #4]
    294e:	2b00      	cmp	r3, #0
    2950:	ddec      	ble.n	292c <prvInitialiseEventLists+0x24>
    {
        vListInitialise( (xList * ) & xEventReadyList[xCPU] );
    }

    // Creating an End FLag Event and insert into the end of xEventList.
    eveECB * pxEndFlagEvent = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    2952:	203c      	movs	r0, #60	; 0x3c
    2954:	f003 f920 	bl	5b98 <pvPortMalloc>
    2958:	60f8      	str	r0, [r7, #12]
    if( pxEndFlagEvent != NULL )
    295a:	68fb      	ldr	r3, [r7, #12]
    295c:	2b00      	cmp	r3, #0
    295e:	d01e      	beq.n	299e <prvInitialiseEventLists+0x96>
    {
       // pxEndFlagEvent->pxSource = pxEndFlagEvent->pxDestination = NULL;
        // there may be some problem here because of this assignment way
        pxEndFlagEvent->xTimeStamp.xDeadline= portMAX_DELAY;
    2960:	68fb      	ldr	r3, [r7, #12]
    2962:	f04f 32ff 	mov.w	r2, #4294967295
    2966:	609a      	str	r2, [r3, #8]
        pxEndFlagEvent->xTimeStamp.xTime = portMAX_DELAY;
    2968:	68fb      	ldr	r3, [r7, #12]
    296a:	f04f 32ff 	mov.w	r2, #4294967295
    296e:	60da      	str	r2, [r3, #12]
        pxEndFlagEvent->xTimeStamp.xMicroStep = portMAX_DELAY;
    2970:	68fb      	ldr	r3, [r7, #12]
    2972:	f04f 32ff 	mov.w	r2, #4294967295
    2976:	611a      	str	r2, [r3, #16]
        pxEndFlagEvent->xTimeStamp.xLevel = portMAX_DELAY;
    2978:	68fb      	ldr	r3, [r7, #12]
    297a:	f04f 32ff 	mov.w	r2, #4294967295
    297e:	615a      	str	r2, [r3, #20]
        vListIntialiseEventItem( pxEndFlagEvent, (xListItem *) & pxEndFlagEvent->xEventListItem );
    2980:	68fb      	ldr	r3, [r7, #12]
    2982:	3318      	adds	r3, #24
    2984:	68f8      	ldr	r0, [r7, #12]
    2986:	4619      	mov	r1, r3
    2988:	f000 f9be 	bl	2d08 <vListIntialiseEventItem>
        vListInsertEnd(&xEventList, &pxEndFlagEvent->xEventListItem); 
    298c:	68fb      	ldr	r3, [r7, #12]
    298e:	3318      	adds	r3, #24
    2990:	f240 5008 	movw	r0, #1288	; 0x508
    2994:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2998:	4619      	mov	r1, r3
    299a:	f001 fa71 	bl	3e80 <vListInsertEnd>
    }

    // Creating an End FLag Event and insert into the end of xEventExecutableList
    eveECB * pxEndFlagEvent1 = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    299e:	203c      	movs	r0, #60	; 0x3c
    29a0:	f003 f8fa 	bl	5b98 <pvPortMalloc>
    29a4:	60b8      	str	r0, [r7, #8]
    if( pxEndFlagEvent1 != NULL )
    29a6:	68bb      	ldr	r3, [r7, #8]
    29a8:	2b00      	cmp	r3, #0
    29aa:	d01e      	beq.n	29ea <prvInitialiseEventLists+0xe2>
    {
        // there may be some problem here because of this assignment way
        pxEndFlagEvent1->xTimeStamp.xDeadline= portMAX_DELAY;
    29ac:	68bb      	ldr	r3, [r7, #8]
    29ae:	f04f 32ff 	mov.w	r2, #4294967295
    29b2:	609a      	str	r2, [r3, #8]
        pxEndFlagEvent1->xTimeStamp.xTime = portMAX_DELAY;
    29b4:	68bb      	ldr	r3, [r7, #8]
    29b6:	f04f 32ff 	mov.w	r2, #4294967295
    29ba:	60da      	str	r2, [r3, #12]
        pxEndFlagEvent1->xTimeStamp.xMicroStep = portMAX_DELAY;
    29bc:	68bb      	ldr	r3, [r7, #8]
    29be:	f04f 32ff 	mov.w	r2, #4294967295
    29c2:	611a      	str	r2, [r3, #16]
        pxEndFlagEvent1->xTimeStamp.xLevel = portMAX_DELAY;
    29c4:	68bb      	ldr	r3, [r7, #8]
    29c6:	f04f 32ff 	mov.w	r2, #4294967295
    29ca:	615a      	str	r2, [r3, #20]
        vListIntialiseEventItem( pxEndFlagEvent1, (xListItem *) & pxEndFlagEvent1->xEventListItem );
    29cc:	68bb      	ldr	r3, [r7, #8]
    29ce:	3318      	adds	r3, #24
    29d0:	68b8      	ldr	r0, [r7, #8]
    29d2:	4619      	mov	r1, r3
    29d4:	f000 f998 	bl	2d08 <vListIntialiseEventItem>
        vListInsertEnd(&xEventExecutableList, &pxEndFlagEvent1->xEventListItem); 
    29d8:	68bb      	ldr	r3, [r7, #8]
    29da:	3318      	adds	r3, #24
    29dc:	f240 501c 	movw	r0, #1308	; 0x51c
    29e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    29e4:	4619      	mov	r1, r3
    29e6:	f001 fa4b 	bl	3e80 <vListInsertEnd>
    }
}
    29ea:	3710      	adds	r7, #16
    29ec:	46bd      	mov	sp, r7
    29ee:	bd80      	pop	{r7, pc}

000029f0 <xCompareFunction1>:

/* unexecutable event comparison function is used in xEventList. 
 * The event with earlist timestamp will be proceeded first*/
static portBASE_TYPE xCompareFunction1( const struct timeStamp t1, const struct timeStamp t2 )
{
    29f0:	b490      	push	{r4, r7}
    29f2:	b084      	sub	sp, #16
    29f4:	af00      	add	r7, sp, #0
    29f6:	463c      	mov	r4, r7
    29f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xTime < t2.xTime)
    29fc:	687a      	ldr	r2, [r7, #4]
    29fe:	69fb      	ldr	r3, [r7, #28]
    2a00:	429a      	cmp	r2, r3
    2a02:	d201      	bcs.n	2a08 <xCompareFunction1+0x18>
    {
        return pdTRUE;
    2a04:	2301      	movs	r3, #1
    2a06:	e014      	b.n	2a32 <xCompareFunction1+0x42>
    }
    else if( t1.xTime == t2.xTime)
    2a08:	687a      	ldr	r2, [r7, #4]
    2a0a:	69fb      	ldr	r3, [r7, #28]
    2a0c:	429a      	cmp	r2, r3
    2a0e:	d10f      	bne.n	2a30 <xCompareFunction1+0x40>
    {
        if( t1.xDeadline < t2.xDeadline )
    2a10:	683a      	ldr	r2, [r7, #0]
    2a12:	69bb      	ldr	r3, [r7, #24]
    2a14:	429a      	cmp	r2, r3
    2a16:	d201      	bcs.n	2a1c <xCompareFunction1+0x2c>
        {
            return pdTRUE;
    2a18:	2301      	movs	r3, #1
    2a1a:	e00a      	b.n	2a32 <xCompareFunction1+0x42>
        }
        else if( t1.xDeadline == t2.xDeadline )
    2a1c:	683a      	ldr	r2, [r7, #0]
    2a1e:	69bb      	ldr	r3, [r7, #24]
    2a20:	429a      	cmp	r2, r3
    2a22:	d105      	bne.n	2a30 <xCompareFunction1+0x40>
        {
            if( t1.xLevel < t2.xLevel )
    2a24:	68fa      	ldr	r2, [r7, #12]
    2a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a28:	429a      	cmp	r2, r3
    2a2a:	da01      	bge.n	2a30 <xCompareFunction1+0x40>
            {
                return pdTRUE;
    2a2c:	2301      	movs	r3, #1
    2a2e:	e000      	b.n	2a32 <xCompareFunction1+0x42>
            }
        }
    }
    return pdFALSE;
    2a30:	2300      	movs	r3, #0
}
    2a32:	4618      	mov	r0, r3
    2a34:	3710      	adds	r7, #16
    2a36:	46bd      	mov	sp, r7
    2a38:	bc90      	pop	{r4, r7}
    2a3a:	4770      	bx	lr

00002a3c <xCompareFunction2>:

/* executable event comparison function is used in xEventExecutableList. 
 * The event with earlist deadline will be scheduled to execute first */
static portBASE_TYPE xCompareFunction2( const struct timeStamp t1, const struct timeStamp t2 )
{
    2a3c:	b490      	push	{r4, r7}
    2a3e:	b084      	sub	sp, #16
    2a40:	af00      	add	r7, sp, #0
    2a42:	463c      	mov	r4, r7
    2a44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xDeadline < t2.xDeadline)
    2a48:	683a      	ldr	r2, [r7, #0]
    2a4a:	69bb      	ldr	r3, [r7, #24]
    2a4c:	429a      	cmp	r2, r3
    2a4e:	d201      	bcs.n	2a54 <xCompareFunction2+0x18>
    {
        return pdTRUE;
    2a50:	2301      	movs	r3, #1
    2a52:	e014      	b.n	2a7e <xCompareFunction2+0x42>
    }
    else if( t1.xDeadline == t2.xDeadline)
    2a54:	683a      	ldr	r2, [r7, #0]
    2a56:	69bb      	ldr	r3, [r7, #24]
    2a58:	429a      	cmp	r2, r3
    2a5a:	d10f      	bne.n	2a7c <xCompareFunction2+0x40>
    {
        if( t1.xTime < t2.xTime )
    2a5c:	687a      	ldr	r2, [r7, #4]
    2a5e:	69fb      	ldr	r3, [r7, #28]
    2a60:	429a      	cmp	r2, r3
    2a62:	d201      	bcs.n	2a68 <xCompareFunction2+0x2c>
        {
            return pdTRUE;
    2a64:	2301      	movs	r3, #1
    2a66:	e00a      	b.n	2a7e <xCompareFunction2+0x42>
        }
        else if( t1.xTime == t2.xTime )
    2a68:	687a      	ldr	r2, [r7, #4]
    2a6a:	69fb      	ldr	r3, [r7, #28]
    2a6c:	429a      	cmp	r2, r3
    2a6e:	d105      	bne.n	2a7c <xCompareFunction2+0x40>
        {
            if( t1.xLevel < t2.xLevel )
    2a70:	68fa      	ldr	r2, [r7, #12]
    2a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a74:	429a      	cmp	r2, r3
    2a76:	da01      	bge.n	2a7c <xCompareFunction2+0x40>
            {
                return pdTRUE;
    2a78:	2301      	movs	r3, #1
    2a7a:	e000      	b.n	2a7e <xCompareFunction2+0x42>
            }
        }
    }

    return pdFALSE;
    2a7c:	2300      	movs	r3, #0
}
    2a7e:	4618      	mov	r0, r3
    2a80:	3710      	adds	r7, #16
    2a82:	46bd      	mov	sp, r7
    2a84:	bc90      	pop	{r4, r7}
    2a86:	4770      	bx	lr

00002a88 <xEventGetpxSource>:



xTaskHandle xEventGetpxSource( xEventHandle pxEvent )
{
    2a88:	b480      	push	{r7}
    2a8a:	b083      	sub	sp, #12
    2a8c:	af00      	add	r7, sp, #0
    2a8e:	6078      	str	r0, [r7, #4]
    return ((eveECB *)pxEvent)->pxSource;
    2a90:	687b      	ldr	r3, [r7, #4]
    2a92:	681b      	ldr	r3, [r3, #0]
}
    2a94:	4618      	mov	r0, r3
    2a96:	370c      	adds	r7, #12
    2a98:	46bd      	mov	sp, r7
    2a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a9e:	4770      	bx	lr

00002aa0 <xEventGetpxDestination>:

xTaskHandle xEventGetpxDestination( xEventHandle pxEvent)
{
    2aa0:	b480      	push	{r7}
    2aa2:	b083      	sub	sp, #12
    2aa4:	af00      	add	r7, sp, #0
    2aa6:	6078      	str	r0, [r7, #4]
    return ((eveECB *) pxEvent)->pxDestination;
    2aa8:	687b      	ldr	r3, [r7, #4]
    2aaa:	685b      	ldr	r3, [r3, #4]
}
    2aac:	4618      	mov	r0, r3
    2aae:	370c      	adds	r7, #12
    2ab0:	46bd      	mov	sp, r7
    2ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ab6:	4770      	bx	lr

00002ab8 <xEventGetxTimeStamp>:

struct timeStamp xEventGetxTimeStamp( xEventHandle pxEvent)
{
    2ab8:	b490      	push	{r4, r7}
    2aba:	b082      	sub	sp, #8
    2abc:	af00      	add	r7, sp, #0
    2abe:	6078      	str	r0, [r7, #4]
    2ac0:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xTimeStamp;
    2ac2:	687a      	ldr	r2, [r7, #4]
    2ac4:	683b      	ldr	r3, [r7, #0]
    2ac6:	4614      	mov	r4, r2
    2ac8:	3308      	adds	r3, #8
    2aca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2acc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2ad0:	6878      	ldr	r0, [r7, #4]
    2ad2:	3708      	adds	r7, #8
    2ad4:	46bd      	mov	sp, r7
    2ad6:	bc90      	pop	{r4, r7}
    2ad8:	4770      	bx	lr
    2ada:	bf00      	nop

00002adc <xEventGetxData>:

struct eventData xEventGetxData( xEventHandle pxEvent)
{
    2adc:	b490      	push	{r4, r7}
    2ade:	b082      	sub	sp, #8
    2ae0:	af00      	add	r7, sp, #0
    2ae2:	6078      	str	r0, [r7, #4]
    2ae4:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xData;
    2ae6:	687a      	ldr	r2, [r7, #4]
    2ae8:	683b      	ldr	r3, [r7, #0]
    2aea:	4614      	mov	r4, r2
    2aec:	332c      	adds	r3, #44	; 0x2c
    2aee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2af0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2af4:	6878      	ldr	r0, [r7, #4]
    2af6:	3708      	adds	r7, #8
    2af8:	46bd      	mov	sp, r7
    2afa:	bc90      	pop	{r4, r7}
    2afc:	4770      	bx	lr
    2afe:	bf00      	nop

00002b00 <vEventSetxTimeStamp>:

static void vEventSetxTimeStamp( xEventHandle pxNewEvent )
{
    2b00:	b580      	push	{r7, lr}
    2b02:	b086      	sub	sp, #24
    2b04:	af00      	add	r7, sp, #0
    2b06:	6078      	str	r0, [r7, #4]
    eveECB * pxEvent =(eveECB *) pxNewEvent;
    2b08:	687b      	ldr	r3, [r7, #4]
    2b0a:	617b      	str	r3, [r7, #20]
    portTickType xDestxLet = xTaskGetxLet(pxEvent->pxDestination);
    2b0c:	697b      	ldr	r3, [r7, #20]
    2b0e:	685b      	ldr	r3, [r3, #4]
    2b10:	4618      	mov	r0, r3
    2b12:	f002 ff21 	bl	5958 <xTaskGetxLet>
    2b16:	6138      	str	r0, [r7, #16]
    portTickType xDeadline = pxEvent->xData.xNextPeriod;
    2b18:	697b      	ldr	r3, [r7, #20]
    2b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2b1c:	60fb      	str	r3, [r7, #12]

    /* set the xDeadline of this event */
    portTickType xCurrentTime = xTaskGetTickCount();
    2b1e:	f002 fa8d 	bl	503c <xTaskGetTickCount>
    2b22:	60b8      	str	r0, [r7, #8]
    /* LST is too complicated to be implemented in embedded system where computing resources are precious */
    //pxEvent->xTimeStamp.xDeadline = xDeadline - ( xCurrentTime + xDestxLet );
    /* EDF scheduling algorithm */
    pxEvent->xTimeStamp.xDeadline= xDeadline ;
    2b24:	697b      	ldr	r3, [r7, #20]
    2b26:	68fa      	ldr	r2, [r7, #12]
    2b28:	609a      	str	r2, [r3, #8]

    /*set the time of this event to be processed */
    if( pxEvent->xData.IS_LAST_SERVANT == 1 )
    2b2a:	697b      	ldr	r3, [r7, #20]
    2b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2b2e:	2b01      	cmp	r3, #1
    2b30:	d103      	bne.n	2b3a <vEventSetxTimeStamp+0x3a>
    {
        pxEvent->xTimeStamp.xTime = xDeadline;
    2b32:	697b      	ldr	r3, [r7, #20]
    2b34:	68fa      	ldr	r2, [r7, #12]
    2b36:	60da      	str	r2, [r3, #12]
    2b38:	e003      	b.n	2b42 <vEventSetxTimeStamp+0x42>
    }
    else
    {
        pxEvent->xTimeStamp.xTime = pxEvent->xData.xTime ;
    2b3a:	697b      	ldr	r3, [r7, #20]
    2b3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2b3e:	697b      	ldr	r3, [r7, #20]
    2b40:	60da      	str	r2, [r3, #12]
    }

    /*the microstep is not used now*/
    pxEvent->xTimeStamp.xMicroStep = 0;
    2b42:	697b      	ldr	r3, [r7, #20]
    2b44:	2200      	movs	r2, #0
    2b46:	611a      	str	r2, [r3, #16]

    /* set the level of timestamp according to the topology sort result*/
    pxEvent->xTimeStamp.xLevel = xEventSerialNumber;
    2b48:	f240 5344 	movw	r3, #1348	; 0x544
    2b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b50:	681b      	ldr	r3, [r3, #0]
    2b52:	461a      	mov	r2, r3
    2b54:	697b      	ldr	r3, [r7, #20]
    2b56:	615a      	str	r2, [r3, #20]

    xEventSerialNumber++;
    2b58:	f240 5344 	movw	r3, #1348	; 0x544
    2b5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b60:	681b      	ldr	r3, [r3, #0]
    2b62:	1c5a      	adds	r2, r3, #1
    2b64:	f240 5344 	movw	r3, #1348	; 0x544
    2b68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b6c:	601a      	str	r2, [r3, #0]
}
    2b6e:	3718      	adds	r7, #24
    2b70:	46bd      	mov	sp, r7
    2b72:	bd80      	pop	{r7, pc}

00002b74 <vEventSetxData>:

static void vEventSetxData( xEventHandle pxEvent, struct eventData xData)
{
    2b74:	b084      	sub	sp, #16
    2b76:	b490      	push	{r4, r7}
    2b78:	b082      	sub	sp, #8
    2b7a:	af00      	add	r7, sp, #0
    2b7c:	6078      	str	r0, [r7, #4]
    2b7e:	f107 0014 	add.w	r0, r7, #20
    2b82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ((eveECB *) pxEvent)->xData = xData;
    2b86:	687b      	ldr	r3, [r7, #4]
    2b88:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    2b8c:	f107 0314 	add.w	r3, r7, #20
    2b90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2b92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2b96:	3708      	adds	r7, #8
    2b98:	46bd      	mov	sp, r7
    2b9a:	bc90      	pop	{r4, r7}
    2b9c:	b004      	add	sp, #16
    2b9e:	4770      	bx	lr

00002ba0 <pxGetReadyList>:
* Get the event ready list according to the multicore scheduling algorithm.
*
* @return the address of the event ready list.
* */
static xList * pxGetReadyList( void )
{
    2ba0:	b480      	push	{r7}
    2ba2:	af00      	add	r7, sp, #0
    return &xEventReadyList[0];
    2ba4:	f240 5330 	movw	r3, #1328	; 0x530
    2ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
    2bac:	4618      	mov	r0, r3
    2bae:	46bd      	mov	sp, r7
    2bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2bb4:	4770      	bx	lr
    2bb6:	bf00      	nop

00002bb8 <prvEventListGenericInsert1>:


/* insert event to xEventList in terms of comparison function 1 */
static void prvEventListGenericInsert1( xListItem *pxNewListItem )
{
    2bb8:	b590      	push	{r4, r7, lr}
    2bba:	b091      	sub	sp, #68	; 0x44
    2bbc:	af04      	add	r7, sp, #16
    2bbe:	6078      	str	r0, [r7, #4]
    volatile xListItem *pxIterator;
    struct timeStamp xTimeStampOfInsertion;
    xList * pxList = &xEventList;
    2bc0:	f240 5308 	movw	r3, #1288	; 0x508
    2bc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bc8:	62bb      	str	r3, [r7, #40]	; 0x28

    xTimeStampOfInsertion = xEventGetxTimeStamp(pxNewListItem->pvOwner);
    2bca:	687b      	ldr	r3, [r7, #4]
    2bcc:	68db      	ldr	r3, [r3, #12]
    2bce:	f107 0208 	add.w	r2, r7, #8
    2bd2:	4610      	mov	r0, r2
    2bd4:	4619      	mov	r1, r3
    2bd6:	f7ff ff6f 	bl	2ab8 <xEventGetxTimeStamp>

    if( xTimeStampOfInsertion.xTime == portMAX_DELAY )
    2bda:	68fb      	ldr	r3, [r7, #12]
    2bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
    2be0:	d103      	bne.n	2bea <prvEventListGenericInsert1+0x32>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    2be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2be4:	691b      	ldr	r3, [r3, #16]
    2be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    2be8:	e021      	b.n	2c2e <prvEventListGenericInsert1+0x76>
    }
    else
    {
        taskENTER_CRITICAL();
    2bea:	f002 ff5b 	bl	5aa4 <vPortEnterCritical>
        // There must already be a End Flag Event with max timeStamp in xEventList.
        // The End Flag Event can be the last Event to be processed, and new events
        // are inserted before it in xEventList.
        // The End Flag Event has been inserted when xEventList is initialised.
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); xCompareFunction1( xEventGetxTimeStamp( pxIterator->pxNext->pvOwner ), xTimeStampOfInsertion ); pxIterator = pxIterator->pxNext ) 
    2bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2bf0:	3308      	adds	r3, #8
    2bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    2bf4:	e002      	b.n	2bfc <prvEventListGenericInsert1+0x44>
    2bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2bf8:	685b      	ldr	r3, [r3, #4]
    2bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    2bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2bfe:	685b      	ldr	r3, [r3, #4]
    2c00:	68db      	ldr	r3, [r3, #12]
    2c02:	f107 0218 	add.w	r2, r7, #24
    2c06:	4610      	mov	r0, r2
    2c08:	4619      	mov	r1, r3
    2c0a:	f7ff ff55 	bl	2ab8 <xEventGetxTimeStamp>
    2c0e:	466c      	mov	r4, sp
    2c10:	f107 0308 	add.w	r3, r7, #8
    2c14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2c16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2c1a:	f107 0318 	add.w	r3, r7, #24
    2c1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2c20:	f7ff fee6 	bl	29f0 <xCompareFunction1>
    2c24:	4603      	mov	r3, r0
    2c26:	2b00      	cmp	r3, #0
    2c28:	d1e5      	bne.n	2bf6 <prvEventListGenericInsert1+0x3e>
        {
        }
        taskEXIT_CRITICAL();
    2c2a:	f002 ff51 	bl	5ad0 <vPortExitCritical>
    }

    // insert the new event before a bigger one.
    pxNewListItem->pxNext = pxIterator->pxNext;
    2c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2c30:	685a      	ldr	r2, [r3, #4]
    2c32:	687b      	ldr	r3, [r7, #4]
    2c34:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2c36:	687b      	ldr	r3, [r7, #4]
    2c38:	685b      	ldr	r3, [r3, #4]
    2c3a:	687a      	ldr	r2, [r7, #4]
    2c3c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2c3e:	687b      	ldr	r3, [r7, #4]
    2c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2c42:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2c46:	687a      	ldr	r2, [r7, #4]
    2c48:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2c4a:	687b      	ldr	r3, [r7, #4]
    2c4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2c4e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c52:	681b      	ldr	r3, [r3, #0]
    2c54:	1c5a      	adds	r2, r3, #1
    2c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c58:	601a      	str	r2, [r3, #0]
}
    2c5a:	3734      	adds	r7, #52	; 0x34
    2c5c:	46bd      	mov	sp, r7
    2c5e:	bd90      	pop	{r4, r7, pc}

00002c60 <prvEventListGenericInsert2>:

/* insert event to xEventExecutableList in terms of comparison function 2 */
static void prvEventListGenericInsert2( xListItem *pxNewListItem )
{
    2c60:	b590      	push	{r4, r7, lr}
    2c62:	b091      	sub	sp, #68	; 0x44
    2c64:	af04      	add	r7, sp, #16
    2c66:	6078      	str	r0, [r7, #4]
    volatile xListItem *pxIterator;
    struct timeStamp xTimeStampOfInsertion;
    xList * pxList = &xEventExecutableList;
    2c68:	f240 531c 	movw	r3, #1308	; 0x51c
    2c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c70:	62bb      	str	r3, [r7, #40]	; 0x28

    xTimeStampOfInsertion = xEventGetxTimeStamp(pxNewListItem->pvOwner);
    2c72:	687b      	ldr	r3, [r7, #4]
    2c74:	68db      	ldr	r3, [r3, #12]
    2c76:	f107 0208 	add.w	r2, r7, #8
    2c7a:	4610      	mov	r0, r2
    2c7c:	4619      	mov	r1, r3
    2c7e:	f7ff ff1b 	bl	2ab8 <xEventGetxTimeStamp>

    if( xTimeStampOfInsertion.xTime == portMAX_DELAY )
    2c82:	68fb      	ldr	r3, [r7, #12]
    2c84:	f1b3 3fff 	cmp.w	r3, #4294967295
    2c88:	d103      	bne.n	2c92 <prvEventListGenericInsert2+0x32>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    2c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c8c:	691b      	ldr	r3, [r3, #16]
    2c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    2c90:	e021      	b.n	2cd6 <prvEventListGenericInsert2+0x76>
    }
    else
    {
        taskENTER_CRITICAL();
    2c92:	f002 ff07 	bl	5aa4 <vPortEnterCritical>
        // There must already be a End Flag Event with max timeStamp in xEventList.
        // The End Flag Event can be the last Event to be processed, and new events
        // are inserted before it in xEventList.
        // The End Flag Event has been inserted when xEventList is initialised.
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); xCompareFunction2( xEventGetxTimeStamp( pxIterator->pxNext->pvOwner ), xTimeStampOfInsertion ); pxIterator = pxIterator->pxNext ) 
    2c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c98:	3308      	adds	r3, #8
    2c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    2c9c:	e002      	b.n	2ca4 <prvEventListGenericInsert2+0x44>
    2c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ca0:	685b      	ldr	r3, [r3, #4]
    2ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    2ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ca6:	685b      	ldr	r3, [r3, #4]
    2ca8:	68db      	ldr	r3, [r3, #12]
    2caa:	f107 0218 	add.w	r2, r7, #24
    2cae:	4610      	mov	r0, r2
    2cb0:	4619      	mov	r1, r3
    2cb2:	f7ff ff01 	bl	2ab8 <xEventGetxTimeStamp>
    2cb6:	466c      	mov	r4, sp
    2cb8:	f107 0308 	add.w	r3, r7, #8
    2cbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2cbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2cc2:	f107 0318 	add.w	r3, r7, #24
    2cc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2cc8:	f7ff feb8 	bl	2a3c <xCompareFunction2>
    2ccc:	4603      	mov	r3, r0
    2cce:	2b00      	cmp	r3, #0
    2cd0:	d1e5      	bne.n	2c9e <prvEventListGenericInsert2+0x3e>
        {
        }
        taskEXIT_CRITICAL();
    2cd2:	f002 fefd 	bl	5ad0 <vPortExitCritical>
    }

    // insert the new event before a bigger one.
    pxNewListItem->pxNext = pxIterator->pxNext;
    2cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2cd8:	685a      	ldr	r2, [r3, #4]
    2cda:	687b      	ldr	r3, [r7, #4]
    2cdc:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2cde:	687b      	ldr	r3, [r7, #4]
    2ce0:	685b      	ldr	r3, [r3, #4]
    2ce2:	687a      	ldr	r2, [r7, #4]
    2ce4:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2ce6:	687b      	ldr	r3, [r7, #4]
    2ce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2cea:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2cee:	687a      	ldr	r2, [r7, #4]
    2cf0:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2cf2:	687b      	ldr	r3, [r7, #4]
    2cf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2cf6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2cfa:	681b      	ldr	r3, [r3, #0]
    2cfc:	1c5a      	adds	r2, r3, #1
    2cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2d00:	601a      	str	r2, [r3, #0]
}
    2d02:	3734      	adds	r7, #52	; 0x34
    2d04:	46bd      	mov	sp, r7
    2d06:	bd90      	pop	{r4, r7, pc}

00002d08 <vListIntialiseEventItem>:


static void vListIntialiseEventItem( xEventHandle pvOwner, xListItem * pxNewEventItem)
{
    2d08:	b480      	push	{r7}
    2d0a:	b083      	sub	sp, #12
    2d0c:	af00      	add	r7, sp, #0
    2d0e:	6078      	str	r0, [r7, #4]
    2d10:	6039      	str	r1, [r7, #0]
    /* set the pvOwner of the EventItem as a event*/
    listSET_LIST_ITEM_OWNER( pxNewEventItem, pvOwner );
    2d12:	683b      	ldr	r3, [r7, #0]
    2d14:	687a      	ldr	r2, [r7, #4]
    2d16:	60da      	str	r2, [r3, #12]
    //pxNewEventItem->pvContainer = (void *) &xEventList;
}
    2d18:	370c      	adds	r7, #12
    2d1a:	46bd      	mov	sp, r7
    2d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d20:	4770      	bx	lr
    2d22:	bf00      	nop

00002d24 <vEventGenericCreate>:


void vEventGenericCreate( xTaskHandle pxDestination, struct eventData pdData)
{
    2d24:	b084      	sub	sp, #16
    2d26:	b580      	push	{r7, lr}
    2d28:	b086      	sub	sp, #24
    2d2a:	af02      	add	r7, sp, #8
    2d2c:	6078      	str	r0, [r7, #4]
    2d2e:	f107 001c 	add.w	r0, r7, #28
    2d32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    eveECB * pxNewEvent = NULL;
    2d36:	2300      	movs	r3, #0
    2d38:	60fb      	str	r3, [r7, #12]

    /* using the pxCurrentTCB, current task should not be changed */
    taskENTER_CRITICAL();
    2d3a:	f002 feb3 	bl	5aa4 <vPortEnterCritical>

    if ( IS_FIRST_EVENT == 1 )
    2d3e:	f240 0328 	movw	r3, #40	; 0x28
    2d42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d46:	681b      	ldr	r3, [r3, #0]
    2d48:	2b01      	cmp	r3, #1
    2d4a:	d107      	bne.n	2d5c <vEventGenericCreate+0x38>
    {
        IS_FIRST_EVENT = 0;
    2d4c:	f240 0328 	movw	r3, #40	; 0x28
    2d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d54:	2200      	movs	r2, #0
    2d56:	601a      	str	r2, [r3, #0]
        prvInitialiseEventLists();
    2d58:	f7ff fdd6 	bl	2908 <prvInitialiseEventLists>
    }

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    2d5c:	f002 fd3a 	bl	57d4 <xTaskGetCurrentTaskHandle>
    2d60:	60b8      	str	r0, [r7, #8]
    pxNewEvent = (eveECB *)pvPortMalloc( sizeof( eveECB ));
    2d62:	203c      	movs	r0, #60	; 0x3c
    2d64:	f002 ff18 	bl	5b98 <pvPortMalloc>
    2d68:	60f8      	str	r0, [r7, #12]
    if( pxNewEvent == NULL )
    2d6a:	68fb      	ldr	r3, [r7, #12]
    2d6c:	2b00      	cmp	r3, #0
    2d6e:	d105      	bne.n	2d7c <vEventGenericCreate+0x58>
    {
        vPrintString("malloc for event stack failed\n\r");
    2d70:	f248 7060 	movw	r0, #34656	; 0x8760
    2d74:	f2c0 0001 	movt	r0, #1
    2d78:	f014 fa20 	bl	171bc <vPrintString>
    }
    if ( pxNewEvent != NULL )
    2d7c:	68fb      	ldr	r3, [r7, #12]
    2d7e:	2b00      	cmp	r3, #0
    2d80:	d01b      	beq.n	2dba <vEventGenericCreate+0x96>
    {
        pxNewEvent->pxSource = pxCurrentTCBLocal;
    2d82:	68fb      	ldr	r3, [r7, #12]
    2d84:	68ba      	ldr	r2, [r7, #8]
    2d86:	601a      	str	r2, [r3, #0]
        pxNewEvent->pxDestination = pxDestination;
    2d88:	68fb      	ldr	r3, [r7, #12]
    2d8a:	687a      	ldr	r2, [r7, #4]
    2d8c:	605a      	str	r2, [r3, #4]

        /* initialise the time stamp of an event item according to the sort algorithm.*/
        vEventSetxData( pxNewEvent, pdData );
    2d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2d90:	9300      	str	r3, [sp, #0]
    2d92:	f107 031c 	add.w	r3, r7, #28
    2d96:	cb0e      	ldmia	r3, {r1, r2, r3}
    2d98:	68f8      	ldr	r0, [r7, #12]
    2d9a:	f7ff feeb 	bl	2b74 <vEventSetxData>

        vEventSetxTimeStamp( pxNewEvent );
    2d9e:	68f8      	ldr	r0, [r7, #12]
    2da0:	f7ff feae 	bl	2b00 <vEventSetxTimeStamp>

        vListIntialiseEventItem( pxNewEvent, (xListItem *) &pxNewEvent->xEventListItem );
    2da4:	68fb      	ldr	r3, [r7, #12]
    2da6:	3318      	adds	r3, #24
    2da8:	68f8      	ldr	r0, [r7, #12]
    2daa:	4619      	mov	r1, r3
    2dac:	f7ff ffac 	bl	2d08 <vListIntialiseEventItem>

        /*how to call this funciton: vEventListInsert( newListItem ). This function add the new item into the xEventList as default*/
        prvEventListGenericInsert1( (xListItem *) &(pxNewEvent->xEventListItem));
    2db0:	68fb      	ldr	r3, [r7, #12]
    2db2:	3318      	adds	r3, #24
    2db4:	4618      	mov	r0, r3
    2db6:	f7ff feff 	bl	2bb8 <prvEventListGenericInsert1>
    
    }
    taskEXIT_CRITICAL();
    2dba:	f002 fe89 	bl	5ad0 <vPortExitCritical>

}
    2dbe:	3710      	adds	r7, #16
    2dc0:	46bd      	mov	sp, r7
    2dc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    2dc6:	b004      	add	sp, #16
    2dc8:	4770      	bx	lr
    2dca:	bf00      	nop

00002dcc <xEventListGenericTransit>:

/* An API to transfer all executable Event Items from xEventList to xEventExecutableList.
* Then, choose the first executable event item in xEventExecutableList to proceed, which means
* transfer the executable to specific xEventReadyList according to the condition of CPU*/
portBASE_TYPE xEventListGenericTransit( xListItem ** pxEventListItem, xList ** pxCurrentReadyList)
{
    2dcc:	b580      	push	{r7, lr}
    2dce:	b088      	sub	sp, #32
    2dd0:	af00      	add	r7, sp, #0
    2dd2:	6078      	str	r0, [r7, #4]
    2dd4:	6039      	str	r1, [r7, #0]
    //if( listLIST_IS_EMPTY(&xEventList) )
    // if there is only End Flag Event in xEventList, then return NULL.

    if( listCURRENT_LIST_LENGTH(&xEventList) == 1 )
    2dd6:	f240 5308 	movw	r3, #1288	; 0x508
    2dda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2dde:	681b      	ldr	r3, [r3, #0]
    2de0:	2b01      	cmp	r3, #1
    2de2:	d108      	bne.n	2df6 <xEventListGenericTransit+0x2a>
    {
        *pxEventListItem  = NULL;
    2de4:	687b      	ldr	r3, [r7, #4]
    2de6:	2200      	movs	r2, #0
    2de8:	601a      	str	r2, [r3, #0]
        *pxCurrentReadyList = NULL;
    2dea:	683b      	ldr	r3, [r7, #0]
    2dec:	2200      	movs	r2, #0
    2dee:	601a      	str	r2, [r3, #0]
        return -1;
    2df0:	f04f 33ff 	mov.w	r3, #4294967295
    2df4:	e055      	b.n	2ea2 <xEventListGenericTransit+0xd6>
        
    xListItem * temp_pxEventListItem;
    struct timeStamp xTimeStamp;
    portTickType xCurrentTime;
    // transmit the executable event from xEventList to xEventExecutableList 
    while( listCURRENT_LIST_LENGTH( &xEventList ) > 1 )
    2df6:	e020      	b.n	2e3a <xEventListGenericTransit+0x6e>
    {
        temp_pxEventListItem = (xListItem *)xEventList.xListEnd.pxNext;
    2df8:	f240 5308 	movw	r3, #1288	; 0x508
    2dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e00:	68db      	ldr	r3, [r3, #12]
    2e02:	61fb      	str	r3, [r7, #28]
        xTimeStamp = xEventGetxTimeStamp( (xEventHandle) (temp_pxEventListItem)->pvOwner );
    2e04:	69fb      	ldr	r3, [r7, #28]
    2e06:	68db      	ldr	r3, [r3, #12]
    2e08:	f107 0208 	add.w	r2, r7, #8
    2e0c:	4610      	mov	r0, r2
    2e0e:	4619      	mov	r1, r3
    2e10:	f7ff fe52 	bl	2ab8 <xEventGetxTimeStamp>
        xCurrentTime = xTaskGetTickCount();
    2e14:	f002 f912 	bl	503c <xTaskGetTickCount>
    2e18:	61b8      	str	r0, [r7, #24]

        // the event is executable
        if( xTimeStamp.xTime <= xCurrentTime )
    2e1a:	68fa      	ldr	r2, [r7, #12]
    2e1c:	69bb      	ldr	r3, [r7, #24]
    2e1e:	429a      	cmp	r2, r3
    2e20:	d80a      	bhi.n	2e38 <xEventListGenericTransit+0x6c>
        {
            taskENTER_CRITICAL();
    2e22:	f002 fe3f 	bl	5aa4 <vPortEnterCritical>
            /* remove pxListItem from xEventList */ 
            vListRemove(temp_pxEventListItem);
    2e26:	69f8      	ldr	r0, [r7, #28]
    2e28:	f001 f88a 	bl	3f40 <vListRemove>
            /* insert the executable event into the xEventExecutableList*/
            prvEventListGenericInsert2(temp_pxEventListItem);
    2e2c:	69f8      	ldr	r0, [r7, #28]
    2e2e:	f7ff ff17 	bl	2c60 <prvEventListGenericInsert2>
            taskEXIT_CRITICAL();
    2e32:	f002 fe4d 	bl	5ad0 <vPortExitCritical>
    2e36:	e000      	b.n	2e3a <xEventListGenericTransit+0x6e>
        }
        else
        {
          // no executable event in xEventList
           break; 
    2e38:	e006      	b.n	2e48 <xEventListGenericTransit+0x7c>
        
    xListItem * temp_pxEventListItem;
    struct timeStamp xTimeStamp;
    portTickType xCurrentTime;
    // transmit the executable event from xEventList to xEventExecutableList 
    while( listCURRENT_LIST_LENGTH( &xEventList ) > 1 )
    2e3a:	f240 5308 	movw	r3, #1288	; 0x508
    2e3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e42:	681b      	ldr	r3, [r3, #0]
    2e44:	2b01      	cmp	r3, #1
    2e46:	d8d7      	bhi.n	2df8 <xEventListGenericTransit+0x2c>
        }

    }

    // if no executable event, then return NULL and information about not time yet
    if( listCURRENT_LIST_LENGTH(& xEventExecutableList) == 1 )
    2e48:	f240 531c 	movw	r3, #1308	; 0x51c
    2e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e50:	681b      	ldr	r3, [r3, #0]
    2e52:	2b01      	cmp	r3, #1
    2e54:	d107      	bne.n	2e66 <xEventListGenericTransit+0x9a>
    {
        *pxCurrentReadyList = NULL;
    2e56:	683b      	ldr	r3, [r7, #0]
    2e58:	2200      	movs	r2, #0
    2e5a:	601a      	str	r2, [r3, #0]
        *pxEventListItem = NULL;
    2e5c:	687b      	ldr	r3, [r7, #4]
    2e5e:	2200      	movs	r2, #0
    2e60:	601a      	str	r2, [r3, #0]
        return 0;
    2e62:	2300      	movs	r3, #0
    2e64:	e01d      	b.n	2ea2 <xEventListGenericTransit+0xd6>
    }
    // transmit the first executable event from xEventExecutableList to specific xEventReadyList
    else
    {
        *pxCurrentReadyList = pxGetReadyList();
    2e66:	f7ff fe9b 	bl	2ba0 <pxGetReadyList>
    2e6a:	4602      	mov	r2, r0
    2e6c:	683b      	ldr	r3, [r7, #0]
    2e6e:	601a      	str	r2, [r3, #0]
        *pxEventListItem = (xListItem *) xEventExecutableList.xListEnd.pxNext;
    2e70:	f240 531c 	movw	r3, #1308	; 0x51c
    2e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e78:	68da      	ldr	r2, [r3, #12]
    2e7a:	687b      	ldr	r3, [r7, #4]
    2e7c:	601a      	str	r2, [r3, #0]
        
        taskENTER_CRITICAL();
    2e7e:	f002 fe11 	bl	5aa4 <vPortEnterCritical>
        /* remove pxListItem from xEventList */ 
        vListRemove(*pxEventListItem);
    2e82:	687b      	ldr	r3, [r7, #4]
    2e84:	681b      	ldr	r3, [r3, #0]
    2e86:	4618      	mov	r0, r3
    2e88:	f001 f85a 	bl	3f40 <vListRemove>
        /* insert the pxListItem into the specified pxList */
        vListInsertEnd(*pxCurrentReadyList, *pxEventListItem);
    2e8c:	683b      	ldr	r3, [r7, #0]
    2e8e:	681a      	ldr	r2, [r3, #0]
    2e90:	687b      	ldr	r3, [r7, #4]
    2e92:	681b      	ldr	r3, [r3, #0]
    2e94:	4610      	mov	r0, r2
    2e96:	4619      	mov	r1, r3
    2e98:	f000 fff2 	bl	3e80 <vListInsertEnd>
        taskEXIT_CRITICAL();
    2e9c:	f002 fe18 	bl	5ad0 <vPortExitCritical>
    }

    return 1;
    2ea0:	2301      	movs	r3, #1
}
    2ea2:	4618      	mov	r0, r3
    2ea4:	3720      	adds	r7, #32
    2ea6:	46bd      	mov	sp, r7
    2ea8:	bd80      	pop	{r7, pc}
    2eaa:	bf00      	nop

00002eac <vEventGenericReceive>:

void vEventGenericReceive( xEventHandle * pxEvent, xTaskHandle pxSource, xList * pxList )
{
    2eac:	b580      	push	{r7, lr}
    2eae:	b088      	sub	sp, #32
    2eb0:	af00      	add	r7, sp, #0
    2eb2:	60f8      	str	r0, [r7, #12]
    2eb4:	60b9      	str	r1, [r7, #8]
    2eb6:	607a      	str	r2, [r7, #4]
    xList * const pxConstList = pxList; 
    2eb8:	687b      	ldr	r3, [r7, #4]
    2eba:	61bb      	str	r3, [r7, #24]
    {
        //successful.
        //helloworld();
    }

    if( listLIST_IS_EMPTY( pxList ) )
    2ebc:	687b      	ldr	r3, [r7, #4]
    2ebe:	681b      	ldr	r3, [r3, #0]
    2ec0:	2b00      	cmp	r3, #0
    2ec2:	d103      	bne.n	2ecc <vEventGenericReceive+0x20>
    {
        *pxEvent = NULL;
    2ec4:	68fb      	ldr	r3, [r7, #12]
    2ec6:	2200      	movs	r2, #0
    2ec8:	601a      	str	r2, [r3, #0]
        return;
    2eca:	e04d      	b.n	2f68 <vEventGenericReceive+0xbc>
    }

    volatile xListItem * pxFlag = pxConstList->xListEnd.pxNext;
    2ecc:	69bb      	ldr	r3, [r7, #24]
    2ece:	68db      	ldr	r3, [r3, #12]
    2ed0:	61fb      	str	r3, [r7, #28]


    taskENTER_CRITICAL();
    2ed2:	f002 fde7 	bl	5aa4 <vPortEnterCritical>

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    2ed6:	f002 fc7d 	bl	57d4 <xTaskGetCurrentTaskHandle>
    2eda:	6178      	str	r0, [r7, #20]

    /* look up in the specified xEventReadyList. */
    for(; pxFlag != (xListItem *) ( pxConstList->xListEnd.pxPrevious); pxFlag = pxFlag->pxNext)
    2edc:	e01e      	b.n	2f1c <vEventGenericReceive+0x70>
    {
        if( xEventGetpxSource((xEventHandle) pxFlag->pvOwner) == pxSource && xEventGetpxDestination((xEventHandle) pxFlag->pvOwner) == pxCurrentTCBLocal )
    2ede:	69fb      	ldr	r3, [r7, #28]
    2ee0:	68db      	ldr	r3, [r3, #12]
    2ee2:	4618      	mov	r0, r3
    2ee4:	f7ff fdd0 	bl	2a88 <xEventGetpxSource>
    2ee8:	4602      	mov	r2, r0
    2eea:	68bb      	ldr	r3, [r7, #8]
    2eec:	429a      	cmp	r2, r3
    2eee:	d112      	bne.n	2f16 <vEventGenericReceive+0x6a>
    2ef0:	69fb      	ldr	r3, [r7, #28]
    2ef2:	68db      	ldr	r3, [r3, #12]
    2ef4:	4618      	mov	r0, r3
    2ef6:	f7ff fdd3 	bl	2aa0 <xEventGetpxDestination>
    2efa:	4602      	mov	r2, r0
    2efc:	697b      	ldr	r3, [r7, #20]
    2efe:	429a      	cmp	r2, r3
    2f00:	d109      	bne.n	2f16 <vEventGenericReceive+0x6a>
        {
            *pxEvent = pxFlag->pvOwner;
    2f02:	69fb      	ldr	r3, [r7, #28]
    2f04:	68da      	ldr	r2, [r3, #12]
    2f06:	68fb      	ldr	r3, [r7, #12]
    2f08:	601a      	str	r2, [r3, #0]
            vListRemove((xListItem *)pxFlag);
    2f0a:	69f8      	ldr	r0, [r7, #28]
    2f0c:	f001 f818 	bl	3f40 <vListRemove>
            taskEXIT_CRITICAL();
    2f10:	f002 fdde 	bl	5ad0 <vPortExitCritical>
            return;
    2f14:	e028      	b.n	2f68 <vEventGenericReceive+0xbc>
    taskENTER_CRITICAL();

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();

    /* look up in the specified xEventReadyList. */
    for(; pxFlag != (xListItem *) ( pxConstList->xListEnd.pxPrevious); pxFlag = pxFlag->pxNext)
    2f16:	69fb      	ldr	r3, [r7, #28]
    2f18:	685b      	ldr	r3, [r3, #4]
    2f1a:	61fb      	str	r3, [r7, #28]
    2f1c:	69bb      	ldr	r3, [r7, #24]
    2f1e:	691a      	ldr	r2, [r3, #16]
    2f20:	69fb      	ldr	r3, [r7, #28]
    2f22:	429a      	cmp	r2, r3
    2f24:	d1db      	bne.n	2ede <vEventGenericReceive+0x32>
            return;
        }
    }

    /* we can't forget the last one item of the list. */
    if( xEventGetpxSource((xEventHandle) pxFlag->pvOwner) == pxSource && xEventGetpxDestination((xEventHandle) pxFlag->pvOwner) == pxCurrentTCBLocal )
    2f26:	69fb      	ldr	r3, [r7, #28]
    2f28:	68db      	ldr	r3, [r3, #12]
    2f2a:	4618      	mov	r0, r3
    2f2c:	f7ff fdac 	bl	2a88 <xEventGetpxSource>
    2f30:	4602      	mov	r2, r0
    2f32:	68bb      	ldr	r3, [r7, #8]
    2f34:	429a      	cmp	r2, r3
    2f36:	d112      	bne.n	2f5e <vEventGenericReceive+0xb2>
    2f38:	69fb      	ldr	r3, [r7, #28]
    2f3a:	68db      	ldr	r3, [r3, #12]
    2f3c:	4618      	mov	r0, r3
    2f3e:	f7ff fdaf 	bl	2aa0 <xEventGetpxDestination>
    2f42:	4602      	mov	r2, r0
    2f44:	697b      	ldr	r3, [r7, #20]
    2f46:	429a      	cmp	r2, r3
    2f48:	d109      	bne.n	2f5e <vEventGenericReceive+0xb2>
    {
        *pxEvent = pxFlag->pvOwner;
    2f4a:	69fb      	ldr	r3, [r7, #28]
    2f4c:	68da      	ldr	r2, [r3, #12]
    2f4e:	68fb      	ldr	r3, [r7, #12]
    2f50:	601a      	str	r2, [r3, #0]
        vListRemove((xListItem *)pxFlag);
    2f52:	69f8      	ldr	r0, [r7, #28]
    2f54:	f000 fff4 	bl	3f40 <vListRemove>
        taskEXIT_CRITICAL();
    2f58:	f002 fdba 	bl	5ad0 <vPortExitCritical>
        return;
    2f5c:	e004      	b.n	2f68 <vEventGenericReceive+0xbc>
    }
    else
    {
        // cannot find the specified event.
        *pxEvent = NULL;
    2f5e:	68fb      	ldr	r3, [r7, #12]
    2f60:	2200      	movs	r2, #0
    2f62:	601a      	str	r2, [r3, #0]
    }

    taskEXIT_CRITICAL();
    2f64:	f002 fdb4 	bl	5ad0 <vPortExitCritical>
}
    2f68:	3720      	adds	r7, #32
    2f6a:	46bd      	mov	sp, r7
    2f6c:	bd80      	pop	{r7, pc}
    2f6e:	bf00      	nop

00002f70 <vEventGenericDelete>:

void vEventGenericDelete( xEventHandle xEvent)
{
    2f70:	b580      	push	{r7, lr}
    2f72:	b082      	sub	sp, #8
    2f74:	af00      	add	r7, sp, #0
    2f76:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
    2f78:	f002 fd94 	bl	5aa4 <vPortEnterCritical>

    vPortFree( xEvent );
    2f7c:	6878      	ldr	r0, [r7, #4]
    2f7e:	f002 fecf 	bl	5d20 <vPortFree>

    taskEXIT_CRITICAL();
    2f82:	f002 fda5 	bl	5ad0 <vPortExitCritical>
}
    2f86:	3708      	adds	r7, #8
    2f88:	46bd      	mov	sp, r7
    2f8a:	bd80      	pop	{r7, pc}

00002f8c <vSemaphoreInitialise>:
}
*/

/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    2f8c:	b580      	push	{r7, lr}
    2f8e:	b082      	sub	sp, #8
    2f90:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2f92:	2300      	movs	r3, #0
    2f94:	607b      	str	r3, [r7, #4]
    2f96:	e033      	b.n	3000 <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
    2f98:	2001      	movs	r0, #1
    2f9a:	2100      	movs	r1, #0
    2f9c:	2203      	movs	r2, #3
    2f9e:	f001 f845 	bl	402c <xQueueGenericCreate>
    2fa2:	4601      	mov	r1, r0
    2fa4:	f640 3350 	movw	r3, #2896	; 0xb50
    2fa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fac:	687a      	ldr	r2, [r7, #4]
    2fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    2fb2:	f640 3350 	movw	r3, #2896	; 0xb50
    2fb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fba:	687a      	ldr	r2, [r7, #4]
    2fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2fc0:	2b00      	cmp	r3, #0
    2fc2:	d00c      	beq.n	2fde <vSemaphoreInitialise+0x52>
    2fc4:	f640 3350 	movw	r3, #2896	; 0xb50
    2fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fcc:	687a      	ldr	r2, [r7, #4]
    2fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2fd2:	4618      	mov	r0, r3
    2fd4:	2100      	movs	r1, #0
    2fd6:	2200      	movs	r2, #0
    2fd8:	2300      	movs	r3, #0
    2fda:	f001 f8b5 	bl	4148 <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    2fde:	f640 3350 	movw	r3, #2896	; 0xb50
    2fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fe6:	687a      	ldr	r2, [r7, #4]
    2fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2fec:	4618      	mov	r0, r3
    2fee:	2100      	movs	r1, #0
    2ff0:	f04f 32ff 	mov.w	r2, #4294967295
    2ff4:	2300      	movs	r3, #0
    2ff6:	f001 f96d 	bl	42d4 <xQueueGenericReceive>
/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2ffa:	687b      	ldr	r3, [r7, #4]
    2ffc:	3301      	adds	r3, #1
    2ffe:	607b      	str	r3, [r7, #4]
    3000:	687b      	ldr	r3, [r7, #4]
    3002:	2b22      	cmp	r3, #34	; 0x22
    3004:	ddc8      	ble.n	2f98 <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    }
}
    3006:	3708      	adds	r7, #8
    3008:	46bd      	mov	sp, r7
    300a:	bd80      	pop	{r7, pc}

0000300c <vParameterInitialise>:
/*
 * Set all the parameters of S-Servants.
 *
 * */
void vParameterInitialise()
{
    300c:	b480      	push	{r7}
    300e:	b085      	sub	sp, #20
    3010:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    3012:	2300      	movs	r3, #0
    3014:	60fb      	str	r3, [r7, #12]
    3016:	e073      	b.n	3100 <vParameterInitialise+0xf4>
    {
        pvParameters[i].xMyFlag = i;
    3018:	f240 534c 	movw	r3, #1356	; 0x54c
    301c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3020:	68fa      	ldr	r2, [r7, #12]
    3022:	212c      	movs	r1, #44	; 0x2c
    3024:	fb01 f202 	mul.w	r2, r1, r2
    3028:	4413      	add	r3, r2
    302a:	68fa      	ldr	r2, [r7, #12]
    302c:	601a      	str	r2, [r3, #0]
        pvParameters[i].xNumOfIn = 0;
    302e:	f240 534c 	movw	r3, #1356	; 0x54c
    3032:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3036:	68fa      	ldr	r2, [r7, #12]
    3038:	212c      	movs	r1, #44	; 0x2c
    303a:	fb01 f202 	mul.w	r2, r1, r2
    303e:	4413      	add	r3, r2
    3040:	3304      	adds	r3, #4
    3042:	2200      	movs	r2, #0
    3044:	601a      	str	r2, [r3, #0]
        pvParameters[i].xNumOfOut = 0;
    3046:	f240 534c 	movw	r3, #1356	; 0x54c
    304a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    304e:	68fa      	ldr	r2, [r7, #12]
    3050:	212c      	movs	r1, #44	; 0x2c
    3052:	fb01 f202 	mul.w	r2, r1, r2
    3056:	4413      	add	r3, r2
    3058:	3308      	adds	r3, #8
    305a:	2200      	movs	r2, #0
    305c:	601a      	str	r2, [r3, #0]
        pvParameters[i].xLet = xLetOfServant[i]/portTICK_RATE_MS;
    305e:	f240 0394 	movw	r3, #148	; 0x94
    3062:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3066:	68fa      	ldr	r2, [r7, #12]
    3068:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    306c:	f240 534c 	movw	r3, #1356	; 0x54c
    3070:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3074:	68f9      	ldr	r1, [r7, #12]
    3076:	202c      	movs	r0, #44	; 0x2c
    3078:	fb00 f101 	mul.w	r1, r0, r1
    307c:	440b      	add	r3, r1
    307e:	331c      	adds	r3, #28
    3080:	601a      	str	r2, [r3, #0]
        pvParameters[i].xFp = xServantTable[i];
    3082:	f240 3354 	movw	r3, #852	; 0x354
    3086:	f2c2 0300 	movt	r3, #8192	; 0x2000
    308a:	68fa      	ldr	r2, [r7, #12]
    308c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3090:	f240 534c 	movw	r3, #1356	; 0x54c
    3094:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3098:	68f9      	ldr	r1, [r7, #12]
    309a:	202c      	movs	r0, #44	; 0x2c
    309c:	fb00 f101 	mul.w	r1, r0, r1
    30a0:	440b      	add	r3, r1
    30a2:	3320      	adds	r3, #32
    30a4:	601a      	str	r2, [r3, #0]
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
    30a6:	f240 1320 	movw	r3, #288	; 0x120
    30aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30ae:	68fa      	ldr	r2, [r7, #12]
    30b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    30b4:	f240 534c 	movw	r3, #1356	; 0x54c
    30b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30bc:	68f9      	ldr	r1, [r7, #12]
    30be:	202c      	movs	r0, #44	; 0x2c
    30c0:	fb00 f101 	mul.w	r1, r0, r1
    30c4:	440b      	add	r3, r1
    30c6:	3328      	adds	r3, #40	; 0x28
    30c8:	601a      	str	r2, [r3, #0]
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    30ca:	f240 1320 	movw	r3, #288	; 0x120
    30ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30d2:	68fa      	ldr	r2, [r7, #12]
    30d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    30d8:	f240 032c 	movw	r3, #44	; 0x2c
    30dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    30e4:	f240 534c 	movw	r3, #1356	; 0x54c
    30e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30ec:	68f9      	ldr	r1, [r7, #12]
    30ee:	202c      	movs	r0, #44	; 0x2c
    30f0:	fb00 f101 	mul.w	r1, r0, r1
    30f4:	440b      	add	r3, r1
    30f6:	3324      	adds	r3, #36	; 0x24
    30f8:	601a      	str	r2, [r3, #0]
{
    portBASE_TYPE i;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    30fa:	68fb      	ldr	r3, [r7, #12]
    30fc:	3301      	adds	r3, #1
    30fe:	60fb      	str	r3, [r7, #12]
    3100:	68fb      	ldr	r3, [r7, #12]
    3102:	2b22      	cmp	r3, #34	; 0x22
    3104:	dd88      	ble.n	3018 <vParameterInitialise+0xc>
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3106:	2300      	movs	r3, #0
    3108:	60fb      	str	r3, [r7, #12]
    310a:	e080      	b.n	320e <vParameterInitialise+0x202>
    {
        xSource = xRelations.xRelation[i].xInFlag;
    310c:	f240 12ac 	movw	r2, #428	; 0x1ac
    3110:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3114:	68f9      	ldr	r1, [r7, #12]
    3116:	460b      	mov	r3, r1
    3118:	005b      	lsls	r3, r3, #1
    311a:	440b      	add	r3, r1
    311c:	009b      	lsls	r3, r3, #2
    311e:	4413      	add	r3, r2
    3120:	3304      	adds	r3, #4
    3122:	681b      	ldr	r3, [r3, #0]
    3124:	60bb      	str	r3, [r7, #8]
        xDest   = xRelations.xRelation[i].xOutFlag;
    3126:	f240 12ac 	movw	r2, #428	; 0x1ac
    312a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    312e:	68f9      	ldr	r1, [r7, #12]
    3130:	460b      	mov	r3, r1
    3132:	005b      	lsls	r3, r3, #1
    3134:	440b      	add	r3, r1
    3136:	009b      	lsls	r3, r3, #2
    3138:	4413      	add	r3, r2
    313a:	3308      	adds	r3, #8
    313c:	681b      	ldr	r3, [r3, #0]
    313e:	607b      	str	r3, [r7, #4]

        pvParameters[xSource].xOutFlag[pvParameters[xSource].xNumOfOut] = xDest;
    3140:	f240 534c 	movw	r3, #1356	; 0x54c
    3144:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3148:	68ba      	ldr	r2, [r7, #8]
    314a:	212c      	movs	r1, #44	; 0x2c
    314c:	fb01 f202 	mul.w	r2, r1, r2
    3150:	4413      	add	r3, r2
    3152:	3308      	adds	r3, #8
    3154:	6818      	ldr	r0, [r3, #0]
    3156:	f240 524c 	movw	r2, #1356	; 0x54c
    315a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    315e:	68b9      	ldr	r1, [r7, #8]
    3160:	460b      	mov	r3, r1
    3162:	009b      	lsls	r3, r3, #2
    3164:	440b      	add	r3, r1
    3166:	005b      	lsls	r3, r3, #1
    3168:	440b      	add	r3, r1
    316a:	4403      	add	r3, r0
    316c:	3304      	adds	r3, #4
    316e:	009b      	lsls	r3, r3, #2
    3170:	4413      	add	r3, r2
    3172:	687a      	ldr	r2, [r7, #4]
    3174:	605a      	str	r2, [r3, #4]
        pvParameters[xSource].xNumOfOut ++;
    3176:	f240 534c 	movw	r3, #1356	; 0x54c
    317a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    317e:	68ba      	ldr	r2, [r7, #8]
    3180:	212c      	movs	r1, #44	; 0x2c
    3182:	fb01 f202 	mul.w	r2, r1, r2
    3186:	4413      	add	r3, r2
    3188:	3308      	adds	r3, #8
    318a:	681b      	ldr	r3, [r3, #0]
    318c:	1c5a      	adds	r2, r3, #1
    318e:	f240 534c 	movw	r3, #1356	; 0x54c
    3192:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3196:	68b9      	ldr	r1, [r7, #8]
    3198:	202c      	movs	r0, #44	; 0x2c
    319a:	fb00 f101 	mul.w	r1, r0, r1
    319e:	440b      	add	r3, r1
    31a0:	3308      	adds	r3, #8
    31a2:	601a      	str	r2, [r3, #0]

        pvParameters[xDest].xInFlag[pvParameters[xDest].xNumOfIn] = xSource;
    31a4:	f240 534c 	movw	r3, #1356	; 0x54c
    31a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31ac:	687a      	ldr	r2, [r7, #4]
    31ae:	212c      	movs	r1, #44	; 0x2c
    31b0:	fb01 f202 	mul.w	r2, r1, r2
    31b4:	4413      	add	r3, r2
    31b6:	3304      	adds	r3, #4
    31b8:	6818      	ldr	r0, [r3, #0]
    31ba:	f240 524c 	movw	r2, #1356	; 0x54c
    31be:	f2c2 0200 	movt	r2, #8192	; 0x2000
    31c2:	6879      	ldr	r1, [r7, #4]
    31c4:	460b      	mov	r3, r1
    31c6:	009b      	lsls	r3, r3, #2
    31c8:	440b      	add	r3, r1
    31ca:	005b      	lsls	r3, r3, #1
    31cc:	440b      	add	r3, r1
    31ce:	4403      	add	r3, r0
    31d0:	3302      	adds	r3, #2
    31d2:	009b      	lsls	r3, r3, #2
    31d4:	4413      	add	r3, r2
    31d6:	68ba      	ldr	r2, [r7, #8]
    31d8:	605a      	str	r2, [r3, #4]
        pvParameters[xDest].xNumOfIn ++;
    31da:	f240 534c 	movw	r3, #1356	; 0x54c
    31de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31e2:	687a      	ldr	r2, [r7, #4]
    31e4:	212c      	movs	r1, #44	; 0x2c
    31e6:	fb01 f202 	mul.w	r2, r1, r2
    31ea:	4413      	add	r3, r2
    31ec:	3304      	adds	r3, #4
    31ee:	681b      	ldr	r3, [r3, #0]
    31f0:	1c5a      	adds	r2, r3, #1
    31f2:	f240 534c 	movw	r3, #1356	; 0x54c
    31f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31fa:	6879      	ldr	r1, [r7, #4]
    31fc:	202c      	movs	r0, #44	; 0x2c
    31fe:	fb00 f101 	mul.w	r1, r0, r1
    3202:	440b      	add	r3, r1
    3204:	3304      	adds	r3, #4
    3206:	601a      	str	r2, [r3, #0]
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3208:	68fb      	ldr	r3, [r7, #12]
    320a:	3301      	adds	r3, #1
    320c:	60fb      	str	r3, [r7, #12]
    320e:	f240 13ac 	movw	r3, #428	; 0x1ac
    3212:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3216:	681a      	ldr	r2, [r3, #0]
    3218:	68fb      	ldr	r3, [r7, #12]
    321a:	429a      	cmp	r2, r3
    321c:	f73f af76 	bgt.w	310c <vParameterInitialise+0x100>
        pvParameters[xSource].xNumOfOut ++;

        pvParameters[xDest].xInFlag[pvParameters[xDest].xNumOfIn] = xSource;
        pvParameters[xDest].xNumOfIn ++;
    }
}
    3220:	3714      	adds	r7, #20
    3222:	46bd      	mov	sp, r7
    3224:	f85d 7b04 	ldr.w	r7, [sp], #4
    3228:	4770      	bx	lr
    322a:	bf00      	nop

0000322c <vTaskDelayLET>:

void vTaskDelayLET()
{
    322c:	b580      	push	{r7, lr}
    322e:	b084      	sub	sp, #16
    3230:	af00      	add	r7, sp, #0
    xTaskHandle pxTaskCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    3232:	f002 facf 	bl	57d4 <xTaskGetCurrentTaskHandle>
    3236:	60b8      	str	r0, [r7, #8]
    portTickType xStartTime = xTaskGetxStartTime( pxTaskCurrentTCBLocal );
    3238:	68b8      	ldr	r0, [r7, #8]
    323a:	f002 fb81 	bl	5940 <xTaskGetxStartTime>
    323e:	6078      	str	r0, [r7, #4]
    portTickType xOutputTime = xTaskGetxLet( pxTaskCurrentTCBLocal ) + xStartTime;
    3240:	68b8      	ldr	r0, [r7, #8]
    3242:	f002 fb89 	bl	5958 <xTaskGetxLet>
    3246:	4602      	mov	r2, r0
    3248:	687b      	ldr	r3, [r7, #4]
    324a:	4413      	add	r3, r2
    324c:	603b      	str	r3, [r7, #0]
    portTickType xCurrentTime = xTaskGetTickCount();
    324e:	f001 fef5 	bl	503c <xTaskGetTickCount>
    3252:	60f8      	str	r0, [r7, #12]

    while( xCurrentTime <  xOutputTime)
    3254:	e002      	b.n	325c <vTaskDelayLET+0x30>
    {
        xCurrentTime = xTaskGetTickCount();
    3256:	f001 fef1 	bl	503c <xTaskGetTickCount>
    325a:	60f8      	str	r0, [r7, #12]
    xTaskHandle pxTaskCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    portTickType xStartTime = xTaskGetxStartTime( pxTaskCurrentTCBLocal );
    portTickType xOutputTime = xTaskGetxLet( pxTaskCurrentTCBLocal ) + xStartTime;
    portTickType xCurrentTime = xTaskGetTickCount();

    while( xCurrentTime <  xOutputTime)
    325c:	68fa      	ldr	r2, [r7, #12]
    325e:	683b      	ldr	r3, [r7, #0]
    3260:	429a      	cmp	r2, r3
    3262:	d3f8      	bcc.n	3256 <vTaskDelayLET+0x2a>
    {
        xCurrentTime = xTaskGetTickCount();
    }
}
    3264:	3710      	adds	r7, #16
    3266:	46bd      	mov	sp, r7
    3268:	bd80      	pop	{r7, pc}
    326a:	bf00      	nop

0000326c <vEventReceiveAll>:

// receive all Events from sources servant, and return them through the point
void vEventReceiveAll( void * pvParameter, xEventHandle *pxEvent )
{
    326c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3270:	b088      	sub	sp, #32
    3272:	af00      	add	r7, sp, #0
    3274:	6078      	str	r0, [r7, #4]
    3276:	6039      	str	r1, [r7, #0]
    3278:	4669      	mov	r1, sp
    327a:	4688      	mov	r8, r1
    portBASE_TYPE i ;

    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;
    327c:	6879      	ldr	r1, [r7, #4]
    327e:	6849      	ldr	r1, [r1, #4]
    3280:	61b9      	str	r1, [r7, #24]
    portBASE_TYPE xInFlag[NUM]; 
    3282:	69be      	ldr	r6, [r7, #24]
    3284:	1e71      	subs	r1, r6, #1
    3286:	6179      	str	r1, [r7, #20]
    3288:	4631      	mov	r1, r6
    328a:	4608      	mov	r0, r1
    328c:	f04f 0100 	mov.w	r1, #0
    3290:	014d      	lsls	r5, r1, #5
    3292:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    3296:	0144      	lsls	r4, r0, #5
    3298:	4631      	mov	r1, r6
    329a:	4608      	mov	r0, r1
    329c:	f04f 0100 	mov.w	r1, #0
    32a0:	014b      	lsls	r3, r1, #5
    32a2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    32a6:	0142      	lsls	r2, r0, #5
    32a8:	4633      	mov	r3, r6
    32aa:	009b      	lsls	r3, r3, #2
    32ac:	3303      	adds	r3, #3
    32ae:	3307      	adds	r3, #7
    32b0:	08db      	lsrs	r3, r3, #3
    32b2:	00db      	lsls	r3, r3, #3
    32b4:	ebad 0d03 	sub.w	sp, sp, r3
    32b8:	466b      	mov	r3, sp
    32ba:	3303      	adds	r3, #3
    32bc:	089b      	lsrs	r3, r3, #2
    32be:	009b      	lsls	r3, r3, #2
    32c0:	613b      	str	r3, [r7, #16]
    portBASE_TYPE xMyFlag = ((struct xParam *) pvParameter)->xMyFlag;
    32c2:	687b      	ldr	r3, [r7, #4]
    32c4:	681b      	ldr	r3, [r3, #0]
    32c6:	60fb      	str	r3, [r7, #12]
    portTickType xCurrentTime;
   
    xSemaphoreTake( xBinarySemaphore[xMyFlag],portMAX_DELAY );
    32c8:	f640 3350 	movw	r3, #2896	; 0xb50
    32cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32d0:	68fa      	ldr	r2, [r7, #12]
    32d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    32d6:	4618      	mov	r0, r3
    32d8:	2100      	movs	r1, #0
    32da:	f04f 32ff 	mov.w	r2, #4294967295
    32de:	2300      	movs	r3, #0
    32e0:	f000 fff8 	bl	42d4 <xQueueGenericReceive>

    xCurrentTime = xTaskGetTickCount(); 
    32e4:	f001 feaa 	bl	503c <xTaskGetTickCount>
    32e8:	60b8      	str	r0, [r7, #8]
    vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    32ea:	f640 33dc 	movw	r3, #3036	; 0xbdc
    32ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32f2:	68fa      	ldr	r2, [r7, #12]
    32f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    32f8:	4618      	mov	r0, r3
    32fa:	68b9      	ldr	r1, [r7, #8]
    32fc:	f002 fb38 	bl	5970 <vTaskSetxStartTime>

    for( i = 0; i < NUM; i ++ )
    3300:	2300      	movs	r3, #0
    3302:	61fb      	str	r3, [r7, #28]
    3304:	e024      	b.n	3350 <vEventReceiveAll+0xe4>
    {
        // get all the in flag
        xInFlag[i] = ((struct xParam *) pvParameter)->xInFlag[i];
    3306:	687a      	ldr	r2, [r7, #4]
    3308:	69fb      	ldr	r3, [r7, #28]
    330a:	3302      	adds	r3, #2
    330c:	009b      	lsls	r3, r3, #2
    330e:	4413      	add	r3, r2
    3310:	6859      	ldr	r1, [r3, #4]
    3312:	693b      	ldr	r3, [r7, #16]
    3314:	69fa      	ldr	r2, [r7, #28]
    3316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        // receive all events which are created by source servants and return 
        // them back to current Servant through the inout point
        vEventReceive( &pxEvent[i], xTaskOfHandle[xInFlag[i]], pxCurrentReadyList );
    331a:	69fb      	ldr	r3, [r7, #28]
    331c:	009b      	lsls	r3, r3, #2
    331e:	683a      	ldr	r2, [r7, #0]
    3320:	18d1      	adds	r1, r2, r3
    3322:	693b      	ldr	r3, [r7, #16]
    3324:	69fa      	ldr	r2, [r7, #28]
    3326:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    332a:	f640 33dc 	movw	r3, #3036	; 0xbdc
    332e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3332:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3336:	f240 5348 	movw	r3, #1352	; 0x548
    333a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    333e:	681b      	ldr	r3, [r3, #0]
    3340:	4608      	mov	r0, r1
    3342:	4611      	mov	r1, r2
    3344:	461a      	mov	r2, r3
    3346:	f7ff fdb1 	bl	2eac <vEventGenericReceive>
    xSemaphoreTake( xBinarySemaphore[xMyFlag],portMAX_DELAY );

    xCurrentTime = xTaskGetTickCount(); 
    vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );

    for( i = 0; i < NUM; i ++ )
    334a:	69fb      	ldr	r3, [r7, #28]
    334c:	3301      	adds	r3, #1
    334e:	61fb      	str	r3, [r7, #28]
    3350:	69fa      	ldr	r2, [r7, #28]
    3352:	69bb      	ldr	r3, [r7, #24]
    3354:	429a      	cmp	r2, r3
    3356:	dbd6      	blt.n	3306 <vEventReceiveAll+0x9a>
    3358:	46c5      	mov	sp, r8
        xInFlag[i] = ((struct xParam *) pvParameter)->xInFlag[i];
        // receive all events which are created by source servants and return 
        // them back to current Servant through the inout point
        vEventReceive( &pxEvent[i], xTaskOfHandle[xInFlag[i]], pxCurrentReadyList );
    }
}
    335a:	3720      	adds	r7, #32
    335c:	46bd      	mov	sp, r7
    335e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3362:	bf00      	nop

00003364 <vEventDeleteAll>:

void vEventDeleteAll( void * pvParameter, xEventHandle * pxEvent )
{
    3364:	b580      	push	{r7, lr}
    3366:	b084      	sub	sp, #16
    3368:	af00      	add	r7, sp, #0
    336a:	6078      	str	r0, [r7, #4]
    336c:	6039      	str	r1, [r7, #0]
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;
    336e:	687b      	ldr	r3, [r7, #4]
    3370:	685b      	ldr	r3, [r3, #4]
    3372:	60bb      	str	r3, [r7, #8]

    for( i = 0; i < NUM; ++i )
    3374:	2300      	movs	r3, #0
    3376:	60fb      	str	r3, [r7, #12]
    3378:	e00a      	b.n	3390 <vEventDeleteAll+0x2c>
    {
        vEventDelete( pxEvent[i] );
    337a:	68fb      	ldr	r3, [r7, #12]
    337c:	009b      	lsls	r3, r3, #2
    337e:	683a      	ldr	r2, [r7, #0]
    3380:	4413      	add	r3, r2
    3382:	681b      	ldr	r3, [r3, #0]
    3384:	4618      	mov	r0, r3
    3386:	f7ff fdf3 	bl	2f70 <vEventGenericDelete>
void vEventDeleteAll( void * pvParameter, xEventHandle * pxEvent )
{
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;

    for( i = 0; i < NUM; ++i )
    338a:	68fb      	ldr	r3, [r7, #12]
    338c:	3301      	adds	r3, #1
    338e:	60fb      	str	r3, [r7, #12]
    3390:	68fa      	ldr	r2, [r7, #12]
    3392:	68bb      	ldr	r3, [r7, #8]
    3394:	429a      	cmp	r2, r3
    3396:	dbf0      	blt.n	337a <vEventDeleteAll+0x16>
    {
        vEventDelete( pxEvent[i] );
    }
}
    3398:	3710      	adds	r7, #16
    339a:	46bd      	mov	sp, r7
    339c:	bd80      	pop	{r7, pc}
    339e:	bf00      	nop

000033a0 <vEventCreateAll>:


void vEventCreateAll( void * pvParameter, struct eventData *xDatas )
{
    33a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    33a4:	b08a      	sub	sp, #40	; 0x28
    33a6:	af02      	add	r7, sp, #8
    33a8:	6078      	str	r0, [r7, #4]
    33aa:	6039      	str	r1, [r7, #0]
    33ac:	4669      	mov	r1, sp
    33ae:	4688      	mov	r8, r1
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfOut;
    33b0:	6879      	ldr	r1, [r7, #4]
    33b2:	6889      	ldr	r1, [r1, #8]
    33b4:	61b9      	str	r1, [r7, #24]
    portBASE_TYPE xMyFlag = ((struct xParam *)pvParameter)->xMyFlag;
    33b6:	6879      	ldr	r1, [r7, #4]
    33b8:	6809      	ldr	r1, [r1, #0]
    33ba:	6179      	str	r1, [r7, #20]
    portTickType xPeriod = ((struct xParam *) pvParameter)->xPeriod;
    33bc:	6879      	ldr	r1, [r7, #4]
    33be:	6a49      	ldr	r1, [r1, #36]	; 0x24
    33c0:	6139      	str	r1, [r7, #16]
    portBASE_TYPE xFlags[NUM];
    33c2:	69be      	ldr	r6, [r7, #24]
    33c4:	1e71      	subs	r1, r6, #1
    33c6:	60f9      	str	r1, [r7, #12]
    33c8:	4631      	mov	r1, r6
    33ca:	4608      	mov	r0, r1
    33cc:	f04f 0100 	mov.w	r1, #0
    33d0:	014d      	lsls	r5, r1, #5
    33d2:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    33d6:	0144      	lsls	r4, r0, #5
    33d8:	4631      	mov	r1, r6
    33da:	4608      	mov	r0, r1
    33dc:	f04f 0100 	mov.w	r1, #0
    33e0:	014b      	lsls	r3, r1, #5
    33e2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    33e6:	0142      	lsls	r2, r0, #5
    33e8:	4633      	mov	r3, r6
    33ea:	009b      	lsls	r3, r3, #2
    33ec:	3303      	adds	r3, #3
    33ee:	3307      	adds	r3, #7
    33f0:	08db      	lsrs	r3, r3, #3
    33f2:	00db      	lsls	r3, r3, #3
    33f4:	ebad 0d03 	sub.w	sp, sp, r3
    33f8:	ab02      	add	r3, sp, #8
    33fa:	3303      	adds	r3, #3
    33fc:	089b      	lsrs	r3, r3, #2
    33fe:	009b      	lsls	r3, r3, #2
    3400:	60bb      	str	r3, [r7, #8]

    for( i = 0; i < NUM; i ++ )
    3402:	2300      	movs	r3, #0
    3404:	61fb      	str	r3, [r7, #28]
    3406:	e033      	b.n	3470 <vEventCreateAll+0xd0>
    {
        // get all flags of destination servants
        xFlags[i] = ((struct xParam *) pvParameter)->xOutFlag[i]; 
    3408:	687a      	ldr	r2, [r7, #4]
    340a:	69fb      	ldr	r3, [r7, #28]
    340c:	3304      	adds	r3, #4
    340e:	009b      	lsls	r3, r3, #2
    3410:	4413      	add	r3, r2
    3412:	6859      	ldr	r1, [r3, #4]
    3414:	68bb      	ldr	r3, [r7, #8]
    3416:	69fa      	ldr	r2, [r7, #28]
    3418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        // if current servant is the last one of task, then the event will be proceeded at the deadline
        if( xFlags[i] <= xMyFlag )
    341c:	68bb      	ldr	r3, [r7, #8]
    341e:	69fa      	ldr	r2, [r7, #28]
    3420:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3424:	697b      	ldr	r3, [r7, #20]
    3426:	429a      	cmp	r2, r3
    3428:	dc06      	bgt.n	3438 <vEventCreateAll+0x98>
        {
            xDatas[i].IS_LAST_SERVANT = 1;
    342a:	69fb      	ldr	r3, [r7, #28]
    342c:	011b      	lsls	r3, r3, #4
    342e:	683a      	ldr	r2, [r7, #0]
    3430:	4413      	add	r3, r2
    3432:	2201      	movs	r2, #1
    3434:	609a      	str	r2, [r3, #8]
    3436:	e005      	b.n	3444 <vEventCreateAll+0xa4>
        }
        else
        {
            xDatas[i].IS_LAST_SERVANT = 0;
    3438:	69fb      	ldr	r3, [r7, #28]
    343a:	011b      	lsls	r3, r3, #4
    343c:	683a      	ldr	r2, [r7, #0]
    343e:	4413      	add	r3, r2
    3440:	2200      	movs	r2, #0
    3442:	609a      	str	r2, [r3, #8]
        }
        // create events which would be sent to destination servants.
        vEventCreate(xTaskOfHandle[xFlags[i]], xDatas[i]) ;
    3444:	68bb      	ldr	r3, [r7, #8]
    3446:	69fa      	ldr	r2, [r7, #28]
    3448:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    344c:	f640 33dc 	movw	r3, #3036	; 0xbdc
    3450:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3454:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    3458:	69fb      	ldr	r3, [r7, #28]
    345a:	011b      	lsls	r3, r3, #4
    345c:	683a      	ldr	r2, [r7, #0]
    345e:	4413      	add	r3, r2
    3460:	68da      	ldr	r2, [r3, #12]
    3462:	9200      	str	r2, [sp, #0]
    3464:	cb0e      	ldmia	r3, {r1, r2, r3}
    3466:	f7ff fc5d 	bl	2d24 <vEventGenericCreate>
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfOut;
    portBASE_TYPE xMyFlag = ((struct xParam *)pvParameter)->xMyFlag;
    portTickType xPeriod = ((struct xParam *) pvParameter)->xPeriod;
    portBASE_TYPE xFlags[NUM];

    for( i = 0; i < NUM; i ++ )
    346a:	69fb      	ldr	r3, [r7, #28]
    346c:	3301      	adds	r3, #1
    346e:	61fb      	str	r3, [r7, #28]
    3470:	69fa      	ldr	r2, [r7, #28]
    3472:	69bb      	ldr	r3, [r7, #24]
    3474:	429a      	cmp	r2, r3
    3476:	dbc7      	blt.n	3408 <vEventCreateAll+0x68>
    3478:	46c5      	mov	sp, r8
            xDatas[i].IS_LAST_SERVANT = 0;
        }
        // create events which would be sent to destination servants.
        vEventCreate(xTaskOfHandle[xFlags[i]], xDatas[i]) ;
    }
}
    347a:	3720      	adds	r7, #32
    347c:	46bd      	mov	sp, r7
    347e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3482:	bf00      	nop

00003484 <vSensor>:
*
* @param pvParameter is parameter from programmer.
*
* */
void vSensor( void * pvParameter )
{
    3484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3488:	b095      	sub	sp, #84	; 0x54
    348a:	af00      	add	r7, sp, #0
    348c:	60f8      	str	r0, [r7, #12]
    348e:	466b      	mov	r3, sp
    3490:	461e      	mov	r6, r3
    portTickType xCurrentTime;
    portTickType deadline;
    portBASE_TYPE i;
    portBASE_TYPE IS_FIRST_TIME_TO_EXE = 1;
    3492:	2301      	movs	r3, #1
    3494:	647b      	str	r3, [r7, #68]	; 0x44
    portBASE_TYPE xCount = 1;
    3496:	2301      	movs	r3, #1
    3498:	643b      	str	r3, [r7, #64]	; 0x40

    /* store the paramter into stack of servant */
    void * pvMyParameter = pvParameter;
    349a:	68fb      	ldr	r3, [r7, #12]
    349c:	63fb      	str	r3, [r7, #60]	; 0x3c

    portBASE_TYPE NUM = ((struct xParam *) pvMyParameter)->xNumOfOut;
    349e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    34a0:	689b      	ldr	r3, [r3, #8]
    34a2:	63bb      	str	r3, [r7, #56]	; 0x38
    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    34a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    34a6:	681b      	ldr	r3, [r3, #0]
    34a8:	637b      	str	r3, [r7, #52]	; 0x34
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    34aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    34ac:	69db      	ldr	r3, [r3, #28]
    34ae:	633b      	str	r3, [r7, #48]	; 0x30
    portTickType xPeriod = ((struct xParam *) pvMyParameter)->xPeriod;
    34b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    34b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    34b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pvServantFunType xMyFun = ((struct xParam *) pvMyParameter)->xFp;
    34b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    34b8:	6a1b      	ldr	r3, [r3, #32]
    34ba:	62bb      	str	r3, [r7, #40]	; 0x28

    /* set the LET of Servant when it is created */
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    34bc:	f640 33dc 	movw	r3, #3036	; 0xbdc
    34c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    34c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    34ca:	4618      	mov	r0, r3
    34cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
    34ce:	f002 fa5d 	bl	598c <vTaskSetxLet>
    
    /* receive the events created by the last servant of this task. */
    xEventHandle pxEvent[NUM];
    34d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    34d4:	1e4b      	subs	r3, r1, #1
    34d6:	627b      	str	r3, [r7, #36]	; 0x24
    34d8:	460b      	mov	r3, r1
    34da:	461a      	mov	r2, r3
    34dc:	f04f 0300 	mov.w	r3, #0
    34e0:	0158      	lsls	r0, r3, #5
    34e2:	6078      	str	r0, [r7, #4]
    34e4:	6878      	ldr	r0, [r7, #4]
    34e6:	ea40 60d2 	orr.w	r0, r0, r2, lsr #27
    34ea:	6078      	str	r0, [r7, #4]
    34ec:	0150      	lsls	r0, r2, #5
    34ee:	460b      	mov	r3, r1
    34f0:	461a      	mov	r2, r3
    34f2:	f04f 0300 	mov.w	r3, #0
    34f6:	ea4f 1b43 	mov.w	fp, r3, lsl #5
    34fa:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
    34fe:	ea4f 1a42 	mov.w	sl, r2, lsl #5
    3502:	460b      	mov	r3, r1
    3504:	009b      	lsls	r3, r3, #2
    3506:	3303      	adds	r3, #3
    3508:	3307      	adds	r3, #7
    350a:	08db      	lsrs	r3, r3, #3
    350c:	00db      	lsls	r3, r3, #3
    350e:	ebad 0d03 	sub.w	sp, sp, r3
    3512:	466b      	mov	r3, sp
    3514:	3303      	adds	r3, #3
    3516:	089b      	lsrs	r3, r3, #2
    3518:	009b      	lsls	r3, r3, #2
    351a:	623b      	str	r3, [r7, #32]
    
    /* create data for destination servants and initialise them */
    struct eventData xDatas[NUM];
    351c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    351e:	1e4b      	subs	r3, r1, #1
    3520:	61fb      	str	r3, [r7, #28]
    3522:	460b      	mov	r3, r1
    3524:	461a      	mov	r2, r3
    3526:	f04f 0300 	mov.w	r3, #0
    352a:	ea4f 19c3 	mov.w	r9, r3, lsl #7
    352e:	ea49 6952 	orr.w	r9, r9, r2, lsr #25
    3532:	ea4f 18c2 	mov.w	r8, r2, lsl #7
    3536:	460b      	mov	r3, r1
    3538:	461a      	mov	r2, r3
    353a:	f04f 0300 	mov.w	r3, #0
    353e:	01dd      	lsls	r5, r3, #7
    3540:	ea45 6552 	orr.w	r5, r5, r2, lsr #25
    3544:	01d4      	lsls	r4, r2, #7
    3546:	460b      	mov	r3, r1
    3548:	011b      	lsls	r3, r3, #4
    354a:	3303      	adds	r3, #3
    354c:	3307      	adds	r3, #7
    354e:	08db      	lsrs	r3, r3, #3
    3550:	00db      	lsls	r3, r3, #3
    3552:	ebad 0d03 	sub.w	sp, sp, r3
    3556:	466b      	mov	r3, sp
    3558:	3303      	adds	r3, #3
    355a:	089b      	lsrs	r3, r3, #2
    355c:	009b      	lsls	r3, r3, #2
    355e:	61bb      	str	r3, [r7, #24]


    while(1)
    {

        if( IS_FIRST_TIME_TO_EXE == 1 )
    3560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3562:	2b01      	cmp	r3, #1
    3564:	d124      	bne.n	35b0 <vSensor+0x12c>
        {
            /* Waiting for the start time of task period */
            xSemaphoreTake(xBinarySemaphore[xMyFlag], portMAX_DELAY);
    3566:	f640 3350 	movw	r3, #2896	; 0xb50
    356a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    356e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3574:	4618      	mov	r0, r3
    3576:	2100      	movs	r1, #0
    3578:	f04f 32ff 	mov.w	r2, #4294967295
    357c:	2300      	movs	r3, #0
    357e:	f000 fea9 	bl	42d4 <xQueueGenericReceive>
#ifdef SENSOR_PRINT
            vPrintNumber( xMyFlag );
    3582:	6b78      	ldr	r0, [r7, #52]	; 0x34
    3584:	f013 fe34 	bl	171f0 <vPrintNumber>
#endif 

            xCurrentTime = xTaskGetTickCount();
    3588:	f001 fd58 	bl	503c <xTaskGetTickCount>
    358c:	64f8      	str	r0, [r7, #76]	; 0x4c
            vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    358e:	f640 33dc 	movw	r3, #3036	; 0xbdc
    3592:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3596:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    3598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    359c:	4618      	mov	r0, r3
    359e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    35a0:	f002 f9e6 	bl	5970 <vTaskSetxStartTime>

#ifdef SENSOR_PRINT
            vPrintNumber( xCurrentTime );
    35a4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    35a6:	f013 fe23 	bl	171f0 <vPrintNumber>
#endif

            IS_FIRST_TIME_TO_EXE = 0;
    35aa:	2300      	movs	r3, #0
    35ac:	647b      	str	r3, [r7, #68]	; 0x44
    35ae:	e01d      	b.n	35ec <vSensor+0x168>
        {
            /* When system started, the first servant of every task is triggered to
             * execute by the init events created by tick hook. After that, the first
             * servant of every task is triggered by the last servant of corresponding task.
            * */
            vEventReceiveAll( pvMyParameter, pxEvent );
    35b0:	6a3b      	ldr	r3, [r7, #32]
    35b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    35b4:	4619      	mov	r1, r3
    35b6:	f7ff fe59 	bl	326c <vEventReceiveAll>

#ifdef SENSOR_PRINT
            vPrintNumber( xMyFlag );
    35ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
    35bc:	f013 fe18 	bl	171f0 <vPrintNumber>
#endif 

            xCurrentTime = xTaskGetTickCount();
    35c0:	f001 fd3c 	bl	503c <xTaskGetTickCount>
    35c4:	64f8      	str	r0, [r7, #76]	; 0x4c
            vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    35c6:	f640 33dc 	movw	r3, #3036	; 0xbdc
    35ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    35d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35d4:	4618      	mov	r0, r3
    35d6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    35d8:	f002 f9ca 	bl	5970 <vTaskSetxStartTime>

#ifdef SENSOR_PRINT
            vPrintNumber( xCurrentTime );
    35dc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    35de:	f013 fe07 	bl	171f0 <vPrintNumber>

            // deal with the output things and seeing whether current task misses deadline
#ifdef SENSOR_FUN
            xMyFun( NULL, 0, xDatas, NUM);
#endif
            vEventDeleteAll(pvMyParameter, pxEvent);
    35e2:	6a3b      	ldr	r3, [r7, #32]
    35e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    35e6:	4619      	mov	r1, r3
    35e8:	f7ff febc 	bl	3364 <vEventDeleteAll>
        }

        // xStartTime is the start time of next period which is also the deadline of current period
        xCount ++;
    35ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    35ee:	3301      	adds	r3, #1
    35f0:	643b      	str	r3, [r7, #64]	; 0x40
        deadline = xCount * xPeriod; 
    35f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    35f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    35f6:	fb02 f303 	mul.w	r3, r2, r3
    35fa:	617b      	str	r3, [r7, #20]

        for( i = 0; i < NUM; i ++ )
    35fc:	2300      	movs	r3, #0
    35fe:	64bb      	str	r3, [r7, #72]	; 0x48
    3600:	e011      	b.n	3626 <vSensor+0x1a2>
        {
            xDatas[i].xNextPeriod = deadline;
    3602:	69ba      	ldr	r2, [r7, #24]
    3604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3606:	011b      	lsls	r3, r3, #4
    3608:	4413      	add	r3, r2
    360a:	697a      	ldr	r2, [r7, #20]
    360c:	601a      	str	r2, [r3, #0]
            xDatas[i].xTime = xCurrentTime + xLet;
    360e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3612:	441a      	add	r2, r3
    3614:	69b9      	ldr	r1, [r7, #24]
    3616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3618:	011b      	lsls	r3, r3, #4
    361a:	440b      	add	r3, r1
    361c:	3304      	adds	r3, #4
    361e:	601a      	str	r2, [r3, #0]

        // xStartTime is the start time of next period which is also the deadline of current period
        xCount ++;
        deadline = xCount * xPeriod; 

        for( i = 0; i < NUM; i ++ )
    3620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3622:	3301      	adds	r3, #1
    3624:	64bb      	str	r3, [r7, #72]	; 0x48
    3626:	6cba      	ldr	r2, [r7, #72]	; 0x48
    3628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    362a:	429a      	cmp	r2, r3
    362c:	dbe9      	blt.n	3602 <vSensor+0x17e>
            xDatas[i].xNextPeriod = deadline;
            xDatas[i].xTime = xCurrentTime + xLet;
        }

        // create events for all destination servants of this servant. 
        vEventCreateAll( pvMyParameter, xDatas );
    362e:	69bb      	ldr	r3, [r7, #24]
    3630:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    3632:	4619      	mov	r1, r3
    3634:	f7ff feb4 	bl	33a0 <vEventCreateAll>

#ifdef SENSOR_LET
        vTaskDelayLET();
#endif
        
        if( xCurrentTime > xDatas[0].xNextPeriod )
    3638:	69bb      	ldr	r3, [r7, #24]
    363a:	681a      	ldr	r2, [r3, #0]
    363c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    363e:	429a      	cmp	r2, r3
    3640:	d20a      	bcs.n	3658 <vSensor+0x1d4>
        {
            vPrintNumber(xDatas[0].xNextPeriod);
    3642:	69bb      	ldr	r3, [r7, #24]
    3644:	681b      	ldr	r3, [r3, #0]
    3646:	4618      	mov	r0, r3
    3648:	f013 fdd2 	bl	171f0 <vPrintNumber>
            vPrintString("there are sensor missing deadline\n\r");
    364c:	f248 7080 	movw	r0, #34688	; 0x8780
    3650:	f2c0 0001 	movt	r0, #1
    3654:	f013 fdb2 	bl	171bc <vPrintString>
        }

#ifdef SENSOR_PRINT
        xCurrentTime = xTaskGetTickCount();
    3658:	f001 fcf0 	bl	503c <xTaskGetTickCount>
    365c:	64f8      	str	r0, [r7, #76]	; 0x4c
        vPrintNumber( xCurrentTime );
    365e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    3660:	f013 fdc6 	bl	171f0 <vPrintNumber>
        vPrintNumber( ( xMyFlag + 10 ) * 3 );
    3664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3666:	f103 020a 	add.w	r2, r3, #10
    366a:	4613      	mov	r3, r2
    366c:	005b      	lsls	r3, r3, #1
    366e:	4413      	add	r3, r2
    3670:	4618      	mov	r0, r3
    3672:	f013 fdbd 	bl	171f0 <vPrintNumber>
#endif

        xCurrentTime = xTaskGetTickCount();
    3676:	f001 fce1 	bl	503c <xTaskGetTickCount>
    367a:	64f8      	str	r0, [r7, #76]	; 0x4c
        if( xCurrentTime > 1000000 )
    367c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    367e:	f244 2340 	movw	r3, #16960	; 0x4240
    3682:	f2c0 030f 	movt	r3, #15
    3686:	429a      	cmp	r2, r3
    3688:	d900      	bls.n	368c <vSensor+0x208>
        {
            break;
    368a:	e00c      	b.n	36a6 <vSensor+0x222>
        }
        // triggered R-Servant to execute 
        xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] );
    368c:	f640 3350 	movw	r3, #2896	; 0xb50
    3690:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    3698:	4618      	mov	r0, r3
    369a:	2100      	movs	r1, #0
    369c:	2200      	movs	r2, #0
    369e:	2300      	movs	r3, #0
    36a0:	f000 fd52 	bl	4148 <xQueueGenericSend>
    }
    36a4:	e75c      	b.n	3560 <vSensor+0xdc>
    36a6:	46b5      	mov	sp, r6
}
    36a8:	3754      	adds	r7, #84	; 0x54
    36aa:	46bd      	mov	sp, r7
    36ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000036b0 <vServant>:
*  @param pvParameter is parameter from programmer
*
* */

void vServant( void * pvParameter )
{
    36b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    36b4:	b097      	sub	sp, #92	; 0x5c
    36b6:	af00      	add	r7, sp, #0
    36b8:	61f8      	str	r0, [r7, #28]
    36ba:	4669      	mov	r1, sp
    36bc:	6079      	str	r1, [r7, #4]
    portBASE_TYPE i;
    void * pvMyParameter = pvParameter;
    36be:	69f9      	ldr	r1, [r7, #28]
    36c0:	6539      	str	r1, [r7, #80]	; 0x50
    portTickType xCurrentTime;
    
    portBASE_TYPE xNumOfIn = ((struct xParam *) pvMyParameter)->xNumOfIn;
    36c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
    36c4:	6849      	ldr	r1, [r1, #4]
    36c6:	64f9      	str	r1, [r7, #76]	; 0x4c
    portBASE_TYPE xNumOfOut = ((struct xParam *) pvMyParameter)->xNumOfOut;
    36c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
    36ca:	6889      	ldr	r1, [r1, #8]
    36cc:	64b9      	str	r1, [r7, #72]	; 0x48
    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    36ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
    36d0:	6809      	ldr	r1, [r1, #0]
    36d2:	6479      	str	r1, [r7, #68]	; 0x44
    portTickType xPeriod = ((struct xParam *) pvMyParameter)->xPeriod;
    36d4:	6d39      	ldr	r1, [r7, #80]	; 0x50
    36d6:	6a49      	ldr	r1, [r1, #36]	; 0x24
    36d8:	6439      	str	r1, [r7, #64]	; 0x40
    pvServantFunType xMyFun = ((struct xParam *) pvMyParameter)->xFp;
    36da:	6d39      	ldr	r1, [r7, #80]	; 0x50
    36dc:	6a09      	ldr	r1, [r1, #32]
    36de:	63f9      	str	r1, [r7, #60]	; 0x3c

    xEventHandle pxEvent[xNumOfIn];
    36e0:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
    36e2:	1e71      	subs	r1, r6, #1
    36e4:	63b9      	str	r1, [r7, #56]	; 0x38
    36e6:	4631      	mov	r1, r6
    36e8:	4608      	mov	r0, r1
    36ea:	f04f 0100 	mov.w	r1, #0
    36ee:	ea4f 1b41 	mov.w	fp, r1, lsl #5
    36f2:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
    36f6:	ea4f 1a40 	mov.w	sl, r0, lsl #5
    36fa:	4631      	mov	r1, r6
    36fc:	4608      	mov	r0, r1
    36fe:	f04f 0100 	mov.w	r1, #0
    3702:	ea4f 1941 	mov.w	r9, r1, lsl #5
    3706:	ea49 69d0 	orr.w	r9, r9, r0, lsr #27
    370a:	ea4f 1840 	mov.w	r8, r0, lsl #5
    370e:	4631      	mov	r1, r6
    3710:	0089      	lsls	r1, r1, #2
    3712:	3103      	adds	r1, #3
    3714:	3107      	adds	r1, #7
    3716:	08c9      	lsrs	r1, r1, #3
    3718:	00c9      	lsls	r1, r1, #3
    371a:	ebad 0d01 	sub.w	sp, sp, r1
    371e:	4669      	mov	r1, sp
    3720:	3103      	adds	r1, #3
    3722:	0889      	lsrs	r1, r1, #2
    3724:	0089      	lsls	r1, r1, #2
    3726:	6379      	str	r1, [r7, #52]	; 0x34
    struct eventData xDatas[xNumOfOut];
    3728:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    372a:	1e71      	subs	r1, r6, #1
    372c:	6339      	str	r1, [r7, #48]	; 0x30
    372e:	4631      	mov	r1, r6
    3730:	4608      	mov	r0, r1
    3732:	f04f 0100 	mov.w	r1, #0
    3736:	01cd      	lsls	r5, r1, #7
    3738:	ea45 6550 	orr.w	r5, r5, r0, lsr #25
    373c:	01c4      	lsls	r4, r0, #7
    373e:	4631      	mov	r1, r6
    3740:	4608      	mov	r0, r1
    3742:	f04f 0100 	mov.w	r1, #0
    3746:	01cb      	lsls	r3, r1, #7
    3748:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
    374c:	01c2      	lsls	r2, r0, #7
    374e:	4633      	mov	r3, r6
    3750:	011b      	lsls	r3, r3, #4
    3752:	3303      	adds	r3, #3
    3754:	3307      	adds	r3, #7
    3756:	08db      	lsrs	r3, r3, #3
    3758:	00db      	lsls	r3, r3, #3
    375a:	ebad 0d03 	sub.w	sp, sp, r3
    375e:	466b      	mov	r3, sp
    3760:	3303      	adds	r3, #3
    3762:	089b      	lsrs	r3, r3, #2
    3764:	009b      	lsls	r3, r3, #2
    3766:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* get the LET of current servant */
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    3768:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    376a:	69db      	ldr	r3, [r3, #28]
    376c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* set the LET of current servant */
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    376e:	f640 33dc 	movw	r3, #3036	; 0xbdc
    3772:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3776:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    377c:	4618      	mov	r0, r3
    377e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3780:	f002 f904 	bl	598c <vTaskSetxLet>

    while(1)
    {
        vEventReceiveAll( pvMyParameter, pxEvent );
    3784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3786:	6d38      	ldr	r0, [r7, #80]	; 0x50
    3788:	4619      	mov	r1, r3
    378a:	f7ff fd6f 	bl	326c <vEventReceiveAll>

#ifdef SERVANT_PRINT
        vPrintNumber(xMyFlag);
    378e:	6c78      	ldr	r0, [r7, #68]	; 0x44
    3790:	f013 fd2e 	bl	171f0 <vPrintNumber>
#endif

        xCurrentTime = xTaskGetTickCountFromISR();
    3794:	f001 fc64 	bl	5060 <xTaskGetTickCountFromISR>
    3798:	6278      	str	r0, [r7, #36]	; 0x24
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    379a:	f640 33dc 	movw	r3, #3036	; 0xbdc
    379e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    37a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    37a8:	4618      	mov	r0, r3
    37aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
    37ac:	f002 f8e0 	bl	5970 <vTaskSetxStartTime>

#ifdef SERVANT_PRINT
        vPrintNumber( xCurrentTime );
    37b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
    37b2:	f013 fd1d 	bl	171f0 <vPrintNumber>
#endif
        /* Here are coding for processing data of events */
        for( i = 0; i < xNumOfOut; i ++ )
    37b6:	2300      	movs	r3, #0
    37b8:	657b      	str	r3, [r7, #84]	; 0x54
    37ba:	e01e      	b.n	37fa <vServant+0x14a>
        {
            xDatas[i] = xEventGetxData(pxEvent[i]);
    37bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    37be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    37c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    37c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    37c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    37c8:	0112      	lsls	r2, r2, #4
    37ca:	188c      	adds	r4, r1, r2
    37cc:	f107 0208 	add.w	r2, r7, #8
    37d0:	4610      	mov	r0, r2
    37d2:	4619      	mov	r1, r3
    37d4:	f7ff f982 	bl	2adc <xEventGetxData>
    37d8:	f107 0308 	add.w	r3, r7, #8
    37dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    37de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            xDatas[i].xTime = xCurrentTime + xLet;
    37e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    37e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    37e6:	441a      	add	r2, r3
    37e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    37ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    37ec:	011b      	lsls	r3, r3, #4
    37ee:	440b      	add	r3, r1
    37f0:	3304      	adds	r3, #4
    37f2:	601a      	str	r2, [r3, #0]

#ifdef SERVANT_PRINT
        vPrintNumber( xCurrentTime );
#endif
        /* Here are coding for processing data of events */
        for( i = 0; i < xNumOfOut; i ++ )
    37f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    37f6:	3301      	adds	r3, #1
    37f8:	657b      	str	r3, [r7, #84]	; 0x54
    37fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    37fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    37fe:	429a      	cmp	r2, r3
    3800:	dbdc      	blt.n	37bc <vServant+0x10c>
        {
            xMyFun(pxEvent, xNumOfIn, xDatas, xNumOfOut);
        }
#endif

        vEventDeleteAll( pvMyParameter, pxEvent );        
    3802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3804:	6d38      	ldr	r0, [r7, #80]	; 0x50
    3806:	4619      	mov	r1, r3
    3808:	f7ff fdac 	bl	3364 <vEventDeleteAll>

        vEventCreateAll( pvMyParameter, xDatas );
    380c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    380e:	6d38      	ldr	r0, [r7, #80]	; 0x50
    3810:	4619      	mov	r1, r3
    3812:	f7ff fdc5 	bl	33a0 <vEventCreateAll>

        if( xCurrentTime > xDatas[0].xNextPeriod )
    3816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3818:	681a      	ldr	r2, [r3, #0]
    381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    381c:	429a      	cmp	r2, r3
    381e:	d20a      	bcs.n	3836 <vServant+0x186>
        {
            vPrintNumber(xDatas[0].xNextPeriod);
    3820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3822:	681b      	ldr	r3, [r3, #0]
    3824:	4618      	mov	r0, r3
    3826:	f013 fce3 	bl	171f0 <vPrintNumber>
            vPrintString("there are servants missing deadline\n\r");
    382a:	f248 70a4 	movw	r0, #34724	; 0x87a4
    382e:	f2c0 0001 	movt	r0, #1
    3832:	f013 fcc3 	bl	171bc <vPrintString>
        }
#ifdef SERVANT_LET
        vTaskDelayLET();
    3836:	f7ff fcf9 	bl	322c <vTaskDelayLET>

        //vPrintNumber( xCurrentTime );
        //vPrintNumber( xDatas[0].xNextPeriod - xPeriod ); // output the ready time of task
        //vPrintNumber( xDatas[0].xNextPeriod );  // output the deadline of task
#ifdef SERVANT_PRINT
        xCurrentTime = xTaskGetTickCount();
    383a:	f001 fbff 	bl	503c <xTaskGetTickCount>
    383e:	6278      	str	r0, [r7, #36]	; 0x24
        vPrintNumber( xCurrentTime );
    3840:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3842:	f013 fcd5 	bl	171f0 <vPrintNumber>
        vPrintNumber( (xMyFlag + 10) * 3 );
    3846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3848:	f103 020a 	add.w	r2, r3, #10
    384c:	4613      	mov	r3, r2
    384e:	005b      	lsls	r3, r3, #1
    3850:	4413      	add	r3, r2
    3852:	4618      	mov	r0, r3
    3854:	f013 fccc 	bl	171f0 <vPrintNumber>
#endif

        xCurrentTime = xTaskGetTickCount();
    3858:	f001 fbf0 	bl	503c <xTaskGetTickCount>
    385c:	6278      	str	r0, [r7, #36]	; 0x24
        if( xCurrentTime > 1000000 )
    385e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3860:	f244 2340 	movw	r3, #16960	; 0x4240
    3864:	f2c0 030f 	movt	r3, #15
    3868:	429a      	cmp	r2, r3
    386a:	d900      	bls.n	386e <vServant+0x1be>
        {
            break;
    386c:	e00c      	b.n	3888 <vServant+0x1d8>
        }

        // triggered R-Servant to execute 
        xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] );
    386e:	f640 3350 	movw	r3, #2896	; 0xb50
    3872:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    387a:	4618      	mov	r0, r3
    387c:	2100      	movs	r1, #0
    387e:	2200      	movs	r2, #0
    3880:	2300      	movs	r3, #0
    3882:	f000 fc61 	bl	4148 <xQueueGenericSend>
    }
    3886:	e77d      	b.n	3784 <vServant+0xd4>
    3888:	687b      	ldr	r3, [r7, #4]
    388a:	469d      	mov	sp, r3
}
    388c:	375c      	adds	r7, #92	; 0x5c
    388e:	46bd      	mov	sp, r7
    3890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003894 <vR_Servant>:

void vR_Servant( void * pvParameter)
{
    3894:	b580      	push	{r7, lr}
    3896:	b090      	sub	sp, #64	; 0x40
    3898:	af00      	add	r7, sp, #0
    389a:	6078      	str	r0, [r7, #4]
    portBASE_TYPE xSource, xDest;
    portBASE_TYPE HAVE_TO_SEND_SEMAPHORE; // could the semaphore be sent? 1 means yes , 0 means no
    portBASE_TYPE xResult;

    portTickType xCurrentTime;
    void * pvMyParameter = pvParameter;
    389c:	687b      	ldr	r3, [r7, #4]
    389e:	62bb      	str	r3, [r7, #40]	; 0x28

    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    38a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    38a2:	681b      	ldr	r3, [r3, #0]
    38a4:	627b      	str	r3, [r7, #36]	; 0x24
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    38a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    38a8:	69db      	ldr	r3, [r3, #28]
    38aa:	623b      	str	r3, [r7, #32]
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    38ac:	f640 33dc 	movw	r3, #3036	; 0xbdc
    38b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    38b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    38ba:	4618      	mov	r0, r3
    38bc:	6a39      	ldr	r1, [r7, #32]
    38be:	f002 f865 	bl	598c <vTaskSetxLet>
    xTaskHandle destinationTCB, sourceTCB;

    while(1)
    {
        // waiting for events created by tick hook or S-Servant
        xSemaphoreTake( xBinarySemaphore[xMyFlag], portMAX_DELAY );
    38c2:	f640 3350 	movw	r3, #2896	; 0xb50
    38c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    38cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    38d0:	4618      	mov	r0, r3
    38d2:	2100      	movs	r1, #0
    38d4:	f04f 32ff 	mov.w	r2, #4294967295
    38d8:	2300      	movs	r3, #0
    38da:	f000 fcfb 	bl	42d4 <xQueueGenericReceive>
#ifdef RSERVANT_PRINT
        vPrintNumber( xMyFlag );
#endif
        
        xCurrentTime = xTaskGetTickCount();
    38de:	f001 fbad 	bl	503c <xTaskGetTickCount>
    38e2:	61f8      	str	r0, [r7, #28]
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    38e4:	f640 33dc 	movw	r3, #3036	; 0xbdc
    38e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    38ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    38f2:	4618      	mov	r0, r3
    38f4:	69f9      	ldr	r1, [r7, #28]
    38f6:	f002 f83b 	bl	5970 <vTaskSetxStartTime>
#ifdef RSERVANT_PRINT
        vPrintNumber( xCurrentTime );
#endif

        // init to zero
        HAVE_TO_SEND_SEMAPHORE = 0;
    38fa:	2300      	movs	r3, #0
    38fc:	637b      	str	r3, [r7, #52]	; 0x34

        // to see whether there is a servant need to be triggered.
        // This process could be preempted by Sensor servant.
        while(! HAVE_TO_SEND_SEMAPHORE)
    38fe:	e094      	b.n	3a2a <vR_Servant+0x196>
            /*
             * transit the event item, whose timestamp bigger or equal to current Tick Count, 
             * from xEventList to the idlest xEvestReadyList
             *
             * */
            xResult = xEventListTransit( &pxEventListItem, &pxCurrentReadyList);
    3900:	f107 030c 	add.w	r3, r7, #12
    3904:	4618      	mov	r0, r3
    3906:	f240 5148 	movw	r1, #1352	; 0x548
    390a:	f2c2 0100 	movt	r1, #8192	; 0x2000
    390e:	f7ff fa5d 	bl	2dcc <xEventListGenericTransit>
    3912:	6338      	str	r0, [r7, #48]	; 0x30
            if( xResult == -1 )
    3914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3916:	f1b3 3fff 	cmp.w	r3, #4294967295
    391a:	d100      	bne.n	391e <vR_Servant+0x8a>
            {
                // no event
                break;
    391c:	e089      	b.n	3a32 <vR_Servant+0x19e>
            }
            else if( xResult == 0 )
    391e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3920:	2b00      	cmp	r3, #0
    3922:	d100      	bne.n	3926 <vR_Servant+0x92>
            {
                // not time yet
                //break;
                continue;
    3924:	e081      	b.n	3a2a <vR_Servant+0x196>
            else
            {
                // transmit success
            }

            destinationTCB = xEventGetpxDestination( pxEventListItem->pvOwner);
    3926:	68fb      	ldr	r3, [r7, #12]
    3928:	68db      	ldr	r3, [r3, #12]
    392a:	4618      	mov	r0, r3
    392c:	f7ff f8b8 	bl	2aa0 <xEventGetpxDestination>
    3930:	62f8      	str	r0, [r7, #44]	; 0x2c
            sourceTCB = xEventGetpxSource( pxEventListItem->pvOwner );
    3932:	68fb      	ldr	r3, [r7, #12]
    3934:	68db      	ldr	r3, [r3, #12]
    3936:	4618      	mov	r0, r3
    3938:	f7ff f8a6 	bl	2a88 <xEventGetpxSource>
    393c:	61b8      	str	r0, [r7, #24]
            HAVE_TO_SEND_SEMAPHORE = 1;  // set default 1
    393e:	2301      	movs	r3, #1
    3940:	637b      	str	r3, [r7, #52]	; 0x34

            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3942:	2300      	movs	r3, #0
    3944:	63fb      	str	r3, [r7, #60]	; 0x3c
    3946:	e068      	b.n	3a1a <vR_Servant+0x186>
            {
                xSource = xRelations.xRelation[i].xInFlag;
    3948:	f240 12ac 	movw	r2, #428	; 0x1ac
    394c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3950:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3952:	460b      	mov	r3, r1
    3954:	005b      	lsls	r3, r3, #1
    3956:	440b      	add	r3, r1
    3958:	009b      	lsls	r3, r3, #2
    395a:	4413      	add	r3, r2
    395c:	3304      	adds	r3, #4
    395e:	681b      	ldr	r3, [r3, #0]
    3960:	617b      	str	r3, [r7, #20]
                xDest   = xRelations.xRelation[i].xOutFlag;
    3962:	f240 12ac 	movw	r2, #428	; 0x1ac
    3966:	f2c2 0200 	movt	r2, #8192	; 0x2000
    396a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    396c:	460b      	mov	r3, r1
    396e:	005b      	lsls	r3, r3, #1
    3970:	440b      	add	r3, r1
    3972:	009b      	lsls	r3, r3, #2
    3974:	4413      	add	r3, r2
    3976:	3308      	adds	r3, #8
    3978:	681b      	ldr	r3, [r3, #0]
    397a:	613b      	str	r3, [r7, #16]

                if( destinationTCB == xTaskOfHandle[xDest] )
    397c:	f640 33dc 	movw	r3, #3036	; 0xbdc
    3980:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3984:	693a      	ldr	r2, [r7, #16]
    3986:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    398a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    398c:	429a      	cmp	r2, r3
    398e:	d141      	bne.n	3a14 <vR_Servant+0x180>
                {
                    // find the right relation
                    if( sourceTCB == xTaskOfHandle[xSource] )
    3990:	f640 33dc 	movw	r3, #3036	; 0xbdc
    3994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3998:	697a      	ldr	r2, [r7, #20]
    399a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    399e:	69bb      	ldr	r3, [r7, #24]
    39a0:	429a      	cmp	r2, r3
    39a2:	d127      	bne.n	39f4 <vR_Servant+0x160>
                    {
                        if( xRelations.xRelation[i].xFlag == 2 )
    39a4:	f240 12ac 	movw	r2, #428	; 0x1ac
    39a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    39ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    39ae:	460b      	mov	r3, r1
    39b0:	005b      	lsls	r3, r3, #1
    39b2:	440b      	add	r3, r1
    39b4:	009b      	lsls	r3, r3, #2
    39b6:	4413      	add	r3, r2
    39b8:	330c      	adds	r3, #12
    39ba:	681b      	ldr	r3, [r3, #0]
    39bc:	2b02      	cmp	r3, #2
    39be:	d10b      	bne.n	39d8 <vR_Servant+0x144>
                        {
                            vPrintString("Error: This event has arrived!!\n\r") ;
    39c0:	f248 70cc 	movw	r0, #34764	; 0x87cc
    39c4:	f2c0 0001 	movt	r0, #1
    39c8:	f013 fbf8 	bl	171bc <vPrintString>
                            vEventDelete( (xEventHandle) pxEventListItem->pvOwner );
    39cc:	68fb      	ldr	r3, [r7, #12]
    39ce:	68db      	ldr	r3, [r3, #12]
    39d0:	4618      	mov	r0, r3
    39d2:	f7ff facd 	bl	2f70 <vEventGenericDelete>
    39d6:	e01d      	b.n	3a14 <vR_Servant+0x180>
                        }
                        else
                        {
                            // set the relation to 2
                            xRelations.xRelation[i].xFlag = 2;
    39d8:	f240 12ac 	movw	r2, #428	; 0x1ac
    39dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    39e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    39e2:	460b      	mov	r3, r1
    39e4:	005b      	lsls	r3, r3, #1
    39e6:	440b      	add	r3, r1
    39e8:	009b      	lsls	r3, r3, #2
    39ea:	4413      	add	r3, r2
    39ec:	330c      	adds	r3, #12
    39ee:	2202      	movs	r2, #2
    39f0:	601a      	str	r2, [r3, #0]
    39f2:	e00f      	b.n	3a14 <vR_Servant+0x180>
                    }
                    // find other relation which is relative to destinationtcb
                    else
                    {
                        // waiting for an events that is not arriving yet
                        if( xRelations.xRelation[i].xFlag == 1 )
    39f4:	f240 12ac 	movw	r2, #428	; 0x1ac
    39f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    39fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    39fe:	460b      	mov	r3, r1
    3a00:	005b      	lsls	r3, r3, #1
    3a02:	440b      	add	r3, r1
    3a04:	009b      	lsls	r3, r3, #2
    3a06:	4413      	add	r3, r2
    3a08:	330c      	adds	r3, #12
    3a0a:	681b      	ldr	r3, [r3, #0]
    3a0c:	2b01      	cmp	r3, #1
    3a0e:	d101      	bne.n	3a14 <vR_Servant+0x180>
                        {
                            HAVE_TO_SEND_SEMAPHORE = 0;
    3a10:	2300      	movs	r3, #0
    3a12:	637b      	str	r3, [r7, #52]	; 0x34

            destinationTCB = xEventGetpxDestination( pxEventListItem->pvOwner);
            sourceTCB = xEventGetpxSource( pxEventListItem->pvOwner );
            HAVE_TO_SEND_SEMAPHORE = 1;  // set default 1

            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3a16:	3301      	adds	r3, #1
    3a18:	63fb      	str	r3, [r7, #60]	; 0x3c
    3a1a:	f240 13ac 	movw	r3, #428	; 0x1ac
    3a1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a22:	681a      	ldr	r2, [r3, #0]
    3a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3a26:	429a      	cmp	r2, r3
    3a28:	dc8e      	bgt.n	3948 <vR_Servant+0xb4>
        // init to zero
        HAVE_TO_SEND_SEMAPHORE = 0;

        // to see whether there is a servant need to be triggered.
        // This process could be preempted by Sensor servant.
        while(! HAVE_TO_SEND_SEMAPHORE)
    3a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3a2c:	2b00      	cmp	r3, #0
    3a2e:	f43f af67 	beq.w	3900 <vR_Servant+0x6c>
                }
            }
        } //  end inner while(1)

        // not time yet, R-Servant should be sleep until next period of any task
        if( xResult == -1 )
    3a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3a34:	f1b3 3fff 	cmp.w	r3, #4294967295
    3a38:	d100      	bne.n	3a3c <vR_Servant+0x1a8>
#ifdef RSERVANT_PRINT
            xCurrentTime = xTaskGetTickCount();
            vPrintNumber( xCurrentTime );
            vPrintNumber( (xMyFlag + 10) * 3 );
#endif
            continue; 
    3a3a:	e045      	b.n	3ac8 <vR_Servant+0x234>
        }
        else if ( xResult == 0 )
    3a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3a3e:	2b00      	cmp	r3, #0
    3a40:	d100      	bne.n	3a44 <vR_Servant+0x1b0>
#ifdef RSERVANT_PRINT
            xCurrentTime = xTaskGetTickCount();
            vPrintNumber( xCurrentTime );
            vPrintNumber( (xMyFlag + 10) * 3 );
#endif
            continue;
    3a42:	e041      	b.n	3ac8 <vR_Servant+0x234>
        }
        else
        {
            // set all the relations whose destination S-Servant is xTaskOfHandle[i] to 1.
            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3a44:	2300      	movs	r3, #0
    3a46:	63fb      	str	r3, [r7, #60]	; 0x3c
    3a48:	e028      	b.n	3a9c <vR_Servant+0x208>
            {
                xDest = xRelations.xRelation[i].xOutFlag;
    3a4a:	f240 12ac 	movw	r2, #428	; 0x1ac
    3a4e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3a54:	460b      	mov	r3, r1
    3a56:	005b      	lsls	r3, r3, #1
    3a58:	440b      	add	r3, r1
    3a5a:	009b      	lsls	r3, r3, #2
    3a5c:	4413      	add	r3, r2
    3a5e:	3308      	adds	r3, #8
    3a60:	681b      	ldr	r3, [r3, #0]
    3a62:	613b      	str	r3, [r7, #16]
                if( destinationTCB == xTaskOfHandle[xDest] )
    3a64:	f640 33dc 	movw	r3, #3036	; 0xbdc
    3a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a6c:	693a      	ldr	r2, [r7, #16]
    3a6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3a74:	429a      	cmp	r2, r3
    3a76:	d10e      	bne.n	3a96 <vR_Servant+0x202>
                {
                    xRelations.xRelation[i].xFlag = 1;
    3a78:	f240 12ac 	movw	r2, #428	; 0x1ac
    3a7c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3a82:	460b      	mov	r3, r1
    3a84:	005b      	lsls	r3, r3, #1
    3a86:	440b      	add	r3, r1
    3a88:	009b      	lsls	r3, r3, #2
    3a8a:	4413      	add	r3, r2
    3a8c:	330c      	adds	r3, #12
    3a8e:	2201      	movs	r2, #1
    3a90:	601a      	str	r2, [r3, #0]
                    // record the number of destinationtcb in xTaskOfHandle array.
                    j = xDest;
    3a92:	693b      	ldr	r3, [r7, #16]
    3a94:	63bb      	str	r3, [r7, #56]	; 0x38
            continue;
        }
        else
        {
            // set all the relations whose destination S-Servant is xTaskOfHandle[i] to 1.
            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3a98:	3301      	adds	r3, #1
    3a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    3a9c:	f240 13ac 	movw	r3, #428	; 0x1ac
    3aa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3aa4:	681a      	ldr	r2, [r3, #0]
    3aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3aa8:	429a      	cmp	r2, r3
    3aaa:	dcce      	bgt.n	3a4a <vR_Servant+0x1b6>
            xCurrentTime = xTaskGetTickCount();
            vPrintNumber( xCurrentTime );
            vPrintNumber( (xMyFlag + 10) * 3 );
#endif
            // send semaphore to destinationtcb
            xSemaphoreGive( xBinarySemaphore[j] );
    3aac:	f640 3350 	movw	r3, #2896	; 0xb50
    3ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ab4:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3aba:	4618      	mov	r0, r3
    3abc:	2100      	movs	r1, #0
    3abe:	2200      	movs	r2, #0
    3ac0:	2300      	movs	r3, #0
    3ac2:	f000 fb41 	bl	4148 <xQueueGenericSend>
        }
    }
    3ac6:	e6fc      	b.n	38c2 <vR_Servant+0x2e>
    3ac8:	e6fb      	b.n	38c2 <vR_Servant+0x2e>
    3aca:	bf00      	nop

00003acc <s_0>:
#define SUNNYBEIKE 1
#ifdef SUNNYBEIKE

/*task0, servant 0, 1, 2*/
void s_0(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3acc:	b480      	push	{r7}
    3ace:	b085      	sub	sp, #20
    3ad0:	af00      	add	r7, sp, #0
    3ad2:	60f8      	str	r0, [r7, #12]
    3ad4:	60b9      	str	r1, [r7, #8]
    3ad6:	607a      	str	r2, [r7, #4]
    3ad8:	603b      	str	r3, [r7, #0]
    // do actuator
    // do sensor
}
    3ada:	3714      	adds	r7, #20
    3adc:	46bd      	mov	sp, r7
    3ade:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ae2:	4770      	bx	lr

00003ae4 <s_1>:
void s_1(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3ae4:	b580      	push	{r7, lr}
    3ae6:	b084      	sub	sp, #16
    3ae8:	af00      	add	r7, sp, #0
    3aea:	60f8      	str	r0, [r7, #12]
    3aec:	60b9      	str	r1, [r7, #8]
    3aee:	607a      	str	r2, [r7, #4]
    3af0:	603b      	str	r3, [r7, #0]
    last_radio_from_ppm(); // ppm.h
    3af2:	f012 f9a1 	bl	15e38 <last_radio_from_ppm>
}
    3af6:	3710      	adds	r7, #16
    3af8:	46bd      	mov	sp, r7
    3afa:	bd80      	pop	{r7, pc}

00003afc <s_2>:
void s_2(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3afc:	b480      	push	{r7}
    3afe:	b085      	sub	sp, #20
    3b00:	af00      	add	r7, sp, #0
    3b02:	60f8      	str	r0, [r7, #12]
    3b04:	60b9      	str	r1, [r7, #8]
    3b06:	607a      	str	r2, [r7, #4]
    3b08:	603b      	str	r3, [r7, #0]
    //servo_set();  // servo.h, this function is used by multitask which in terms of multiuse of Servant. And this
                    // is not implemented now. So cancel.
}
    3b0a:	3714      	adds	r7, #20
    3b0c:	46bd      	mov	sp, r7
    3b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b12:	4770      	bx	lr

00003b14 <s_3>:

/*task1, servant 3, 4, 5*/

void s_3(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b14:	b480      	push	{r7}
    3b16:	b085      	sub	sp, #20
    3b18:	af00      	add	r7, sp, #0
    3b1a:	60f8      	str	r0, [r7, #12]
    3b1c:	60b9      	str	r1, [r7, #8]
    3b1e:	607a      	str	r2, [r7, #4]
    3b20:	603b      	str	r3, [r7, #0]
}
    3b22:	3714      	adds	r7, #20
    3b24:	46bd      	mov	sp, r7
    3b26:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b2a:	4770      	bx	lr

00003b2c <s_4>:
void s_4(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b2c:	b580      	push	{r7, lr}
    3b2e:	b084      	sub	sp, #16
    3b30:	af00      	add	r7, sp, #0
    3b32:	60f8      	str	r0, [r7, #12]
    3b34:	60b9      	str	r1, [r7, #8]
    3b36:	607a      	str	r2, [r7, #4]
    3b38:	603b      	str	r3, [r7, #0]
    to_autopilot_from_last_radio(); // main.c
    3b3a:	f012 fd37 	bl	165ac <to_autopilot_from_last_radio>
}
    3b3e:	3710      	adds	r7, #16
    3b40:	46bd      	mov	sp, r7
    3b42:	bd80      	pop	{r7, pc}

00003b44 <s_5>:
void s_5(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b44:	b580      	push	{r7, lr}
    3b46:	b084      	sub	sp, #16
    3b48:	af00      	add	r7, sp, #0
    3b4a:	60f8      	str	r0, [r7, #12]
    3b4c:	60b9      	str	r1, [r7, #8]
    3b4e:	607a      	str	r2, [r7, #4]
    3b50:	603b      	str	r3, [r7, #0]
    spi_reset(); // spi_fbw.h
    3b52:	f012 fc69 	bl	16428 <spi_reset>
}
    3b56:	3710      	adds	r7, #16
    3b58:	46bd      	mov	sp, r7
    3b5a:	bd80      	pop	{r7, pc}

00003b5c <s_6>:

/*task 2, servant 6, 7*/
void s_6(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b5c:	b480      	push	{r7}
    3b5e:	b085      	sub	sp, #20
    3b60:	af00      	add	r7, sp, #0
    3b62:	60f8      	str	r0, [r7, #12]
    3b64:	60b9      	str	r1, [r7, #8]
    3b66:	607a      	str	r2, [r7, #4]
    3b68:	603b      	str	r3, [r7, #0]
}
    3b6a:	3714      	adds	r7, #20
    3b6c:	46bd      	mov	sp, r7
    3b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b72:	4770      	bx	lr

00003b74 <s_7>:
void s_7(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b74:	b580      	push	{r7, lr}
    3b76:	b084      	sub	sp, #16
    3b78:	af00      	add	r7, sp, #0
    3b7a:	60f8      	str	r0, [r7, #12]
    3b7c:	60b9      	str	r1, [r7, #8]
    3b7e:	607a      	str	r2, [r7, #4]
    3b80:	603b      	str	r3, [r7, #0]
    check_mega128_values_task(); // main.c
    3b82:	f012 fe5b 	bl	1683c <check_mega128_values_task>
}
    3b86:	3710      	adds	r7, #16
    3b88:	46bd      	mov	sp, r7
    3b8a:	bd80      	pop	{r7, pc}

00003b8c <s_8>:

/*task 3, servant 8, 9*/ 
void s_8(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b8c:	b480      	push	{r7}
    3b8e:	b085      	sub	sp, #20
    3b90:	af00      	add	r7, sp, #0
    3b92:	60f8      	str	r0, [r7, #12]
    3b94:	60b9      	str	r1, [r7, #8]
    3b96:	607a      	str	r2, [r7, #4]
    3b98:	603b      	str	r3, [r7, #0]
}
    3b9a:	3714      	adds	r7, #20
    3b9c:	46bd      	mov	sp, r7
    3b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ba2:	4770      	bx	lr

00003ba4 <s_9>:
void s_9(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3ba4:	b580      	push	{r7, lr}
    3ba6:	b084      	sub	sp, #16
    3ba8:	af00      	add	r7, sp, #0
    3baa:	60f8      	str	r0, [r7, #12]
    3bac:	60b9      	str	r1, [r7, #8]
    3bae:	607a      	str	r2, [r7, #4]
    3bb0:	603b      	str	r3, [r7, #0]
    servo_transmit(); //servo.h
    3bb2:	f012 ff1b 	bl	169ec <servo_transmit>
}
    3bb6:	3710      	adds	r7, #16
    3bb8:	46bd      	mov	sp, r7
    3bba:	bd80      	pop	{r7, pc}

00003bbc <s_10>:

/*task 4, servant 10, 11*/
void s_10(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3bbc:	b480      	push	{r7}
    3bbe:	b085      	sub	sp, #20
    3bc0:	af00      	add	r7, sp, #0
    3bc2:	60f8      	str	r0, [r7, #12]
    3bc4:	60b9      	str	r1, [r7, #8]
    3bc6:	607a      	str	r2, [r7, #4]
    3bc8:	603b      	str	r3, [r7, #0]
}
    3bca:	3714      	adds	r7, #20
    3bcc:	46bd      	mov	sp, r7
    3bce:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bd2:	4770      	bx	lr

00003bd4 <s_11>:
void s_11(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3bd4:	b580      	push	{r7, lr}
    3bd6:	b084      	sub	sp, #16
    3bd8:	af00      	add	r7, sp, #0
    3bda:	60f8      	str	r0, [r7, #12]
    3bdc:	60b9      	str	r1, [r7, #8]
    3bde:	607a      	str	r2, [r7, #4]
    3be0:	603b      	str	r3, [r7, #0]
    check_failsafe_task(); // main.c
    3be2:	f012 fe21 	bl	16828 <check_failsafe_task>
}
    3be6:	3710      	adds	r7, #16
    3be8:	46bd      	mov	sp, r7
    3bea:	bd80      	pop	{r7, pc}

00003bec <s_12>:

/*task 5, servant 12, 13, 14*/
void s_12(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3bec:	b480      	push	{r7}
    3bee:	b085      	sub	sp, #20
    3bf0:	af00      	add	r7, sp, #0
    3bf2:	60f8      	str	r0, [r7, #12]
    3bf4:	60b9      	str	r1, [r7, #8]
    3bf6:	607a      	str	r2, [r7, #4]
    3bf8:	603b      	str	r3, [r7, #0]
}
    3bfa:	3714      	adds	r7, #20
    3bfc:	46bd      	mov	sp, r7
    3bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c02:	4770      	bx	lr

00003c04 <s_13>:
void s_13(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c04:	b580      	push	{r7, lr}
    3c06:	b084      	sub	sp, #16
    3c08:	af00      	add	r7, sp, #0
    3c0a:	60f8      	str	r0, [r7, #12]
    3c0c:	60b9      	str	r1, [r7, #8]
    3c0e:	607a      	str	r2, [r7, #4]
    3c10:	603b      	str	r3, [r7, #0]
     //inflight_calib(pdTRUE); // inflight_calib.h
     //inflight_calib(pdTRUE); // main_auto.c , we transfer this function into main.c because of bugs if not 
     radio_control_task();
    3c12:	f009 f8a3 	bl	cd5c <radio_control_task>
}
    3c16:	3710      	adds	r7, #16
    3c18:	46bd      	mov	sp, r7
    3c1a:	bd80      	pop	{r7, pc}

00003c1c <s_14>:
void s_14(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c1c:	b580      	push	{r7, lr}
    3c1e:	b084      	sub	sp, #16
    3c20:	af00      	add	r7, sp, #0
    3c22:	60f8      	str	r0, [r7, #12]
    3c24:	60b9      	str	r1, [r7, #8]
    3c26:	607a      	str	r2, [r7, #4]
    3c28:	603b      	str	r3, [r7, #0]
    ir_gain_calib(); //infrared.h
    3c2a:	f00d ff49 	bl	11ac0 <ir_gain_calib>
}
    3c2e:	3710      	adds	r7, #16
    3c30:	46bd      	mov	sp, r7
    3c32:	bd80      	pop	{r7, pc}

00003c34 <s_15>:

/*task 6, servant 15,16,17,18*/ 
void s_15(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3c34:	b480      	push	{r7}
    3c36:	b085      	sub	sp, #20
    3c38:	af00      	add	r7, sp, #0
    3c3a:	60f8      	str	r0, [r7, #12]
    3c3c:	60b9      	str	r1, [r7, #8]
    3c3e:	607a      	str	r2, [r7, #4]
    3c40:	603b      	str	r3, [r7, #0]
}
    3c42:	3714      	adds	r7, #20
    3c44:	46bd      	mov	sp, r7
    3c46:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c4a:	4770      	bx	lr

00003c4c <s_16>:
void s_16(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3c4c:	b580      	push	{r7, lr}
    3c4e:	b084      	sub	sp, #16
    3c50:	af00      	add	r7, sp, #0
    3c52:	60f8      	str	r0, [r7, #12]
    3c54:	60b9      	str	r1, [r7, #8]
    3c56:	607a      	str	r2, [r7, #4]
    3c58:	603b      	str	r3, [r7, #0]
    ir_update(); // infrared.h
    3c5a:	f00d fef3 	bl	11a44 <ir_update>
}
    3c5e:	3710      	adds	r7, #16
    3c60:	46bd      	mov	sp, r7
    3c62:	bd80      	pop	{r7, pc}

00003c64 <s_17>:
void s_17(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c64:	b580      	push	{r7, lr}
    3c66:	b084      	sub	sp, #16
    3c68:	af00      	add	r7, sp, #0
    3c6a:	60f8      	str	r0, [r7, #12]
    3c6c:	60b9      	str	r1, [r7, #8]
    3c6e:	607a      	str	r2, [r7, #4]
    3c70:	603b      	str	r3, [r7, #0]
    //servo_transmit();  // servo.h
    estimator_update_state_infrared(); //estimator.h
    3c72:	f011 f96f 	bl	14f54 <estimator_update_state_infrared>
}
    3c76:	3710      	adds	r7, #16
    3c78:	46bd      	mov	sp, r7
    3c7a:	bd80      	pop	{r7, pc}

00003c7c <s_18>:
void s_18(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c7c:	b580      	push	{r7, lr}
    3c7e:	b084      	sub	sp, #16
    3c80:	af00      	add	r7, sp, #0
    3c82:	60f8      	str	r0, [r7, #12]
    3c84:	60b9      	str	r1, [r7, #8]
    3c86:	607a      	str	r2, [r7, #4]
    3c88:	603b      	str	r3, [r7, #0]
    roll_pitch_pid_run(); // pid.h
    3c8a:	f00d ff49 	bl	11b20 <roll_pitch_pid_run>
}
    3c8e:	3710      	adds	r7, #16
    3c90:	46bd      	mov	sp, r7
    3c92:	bd80      	pop	{r7, pc}

00003c94 <s_19>:

/*task 7, servant 19, 20*/
void s_19(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c94:	b480      	push	{r7}
    3c96:	b085      	sub	sp, #20
    3c98:	af00      	add	r7, sp, #0
    3c9a:	60f8      	str	r0, [r7, #12]
    3c9c:	60b9      	str	r1, [r7, #8]
    3c9e:	607a      	str	r2, [r7, #4]
    3ca0:	603b      	str	r3, [r7, #0]
}
    3ca2:	3714      	adds	r7, #20
    3ca4:	46bd      	mov	sp, r7
    3ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3caa:	4770      	bx	lr

00003cac <s_20>:
void s_20(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3cac:	b580      	push	{r7, lr}
    3cae:	b084      	sub	sp, #16
    3cb0:	af00      	add	r7, sp, #0
    3cb2:	60f8      	str	r0, [r7, #12]
    3cb4:	60b9      	str	r1, [r7, #8]
    3cb6:	607a      	str	r2, [r7, #4]
    3cb8:	603b      	str	r3, [r7, #0]
    link_fbw_send(); //link_fbw.h
    3cba:	f00d f935 	bl	10f28 <link_fbw_send>
}
    3cbe:	3710      	adds	r7, #16
    3cc0:	46bd      	mov	sp, r7
    3cc2:	bd80      	pop	{r7, pc}

00003cc4 <s_21>:

/*task 8, sevrvant 21,22,23*/
void s_21(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3cc4:	b480      	push	{r7}
    3cc6:	b085      	sub	sp, #20
    3cc8:	af00      	add	r7, sp, #0
    3cca:	60f8      	str	r0, [r7, #12]
    3ccc:	60b9      	str	r1, [r7, #8]
    3cce:	607a      	str	r2, [r7, #4]
    3cd0:	603b      	str	r3, [r7, #0]
}
    3cd2:	3714      	adds	r7, #20
    3cd4:	46bd      	mov	sp, r7
    3cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cda:	4770      	bx	lr

00003cdc <s_22>:
void s_22(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3cdc:	b580      	push	{r7, lr}
    3cde:	b084      	sub	sp, #16
    3ce0:	af00      	add	r7, sp, #0
    3ce2:	60f8      	str	r0, [r7, #12]
    3ce4:	60b9      	str	r1, [r7, #8]
    3ce6:	607a      	str	r2, [r7, #4]
    3ce8:	603b      	str	r3, [r7, #0]
    parse_gps_msg(); //gps.h
    3cea:	f00d fbf5 	bl	114d8 <parse_gps_msg>
}
    3cee:	3710      	adds	r7, #16
    3cf0:	46bd      	mov	sp, r7
    3cf2:	bd80      	pop	{r7, pc}

00003cf4 <s_23>:
void s_23(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3cf4:	b580      	push	{r7, lr}
    3cf6:	b084      	sub	sp, #16
    3cf8:	af00      	add	r7, sp, #0
    3cfa:	60f8      	str	r0, [r7, #12]
    3cfc:	60b9      	str	r1, [r7, #8]
    3cfe:	607a      	str	r2, [r7, #4]
    3d00:	603b      	str	r3, [r7, #0]
    //use_gps_pos(); // autopilot.h  is not implemeted.
    send_gps_pos();
    3d02:	f00a fe11 	bl	e928 <send_gps_pos>
    send_radIR();
    3d06:	f00b ffd5 	bl	fcb4 <send_radIR>
    send_takeOff();
    3d0a:	f00c fdcd 	bl	108a8 <send_takeOff>
}
    3d0e:	3710      	adds	r7, #16
    3d10:	46bd      	mov	sp, r7
    3d12:	bd80      	pop	{r7, pc}

00003d14 <s_24>:

/*task 9, servant 24, 25, 26, 27*/
void s_24(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d14:	b480      	push	{r7}
    3d16:	b085      	sub	sp, #20
    3d18:	af00      	add	r7, sp, #0
    3d1a:	60f8      	str	r0, [r7, #12]
    3d1c:	60b9      	str	r1, [r7, #8]
    3d1e:	607a      	str	r2, [r7, #4]
    3d20:	603b      	str	r3, [r7, #0]
}
    3d22:	3714      	adds	r7, #20
    3d24:	46bd      	mov	sp, r7
    3d26:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d2a:	4770      	bx	lr

00003d2c <s_25>:
void s_25(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d2c:	b580      	push	{r7, lr}
    3d2e:	b084      	sub	sp, #16
    3d30:	af00      	add	r7, sp, #0
    3d32:	60f8      	str	r0, [r7, #12]
    3d34:	60b9      	str	r1, [r7, #8]
    3d36:	607a      	str	r2, [r7, #4]
    3d38:	603b      	str	r3, [r7, #0]
    nav_home(); // nav.h
    3d3a:	f010 fe8d 	bl	14a58 <nav_home>
}
    3d3e:	3710      	adds	r7, #16
    3d40:	46bd      	mov	sp, r7
    3d42:	bd80      	pop	{r7, pc}

00003d44 <s_26>:
void s_26(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d44:	b580      	push	{r7, lr}
    3d46:	b084      	sub	sp, #16
    3d48:	af00      	add	r7, sp, #0
    3d4a:	60f8      	str	r0, [r7, #12]
    3d4c:	60b9      	str	r1, [r7, #8]
    3d4e:	607a      	str	r2, [r7, #4]
    3d50:	603b      	str	r3, [r7, #0]
    nav_update(); // nav.h
    3d52:	f010 fea7 	bl	14aa4 <nav_update>
}
    3d56:	3710      	adds	r7, #16
    3d58:	46bd      	mov	sp, r7
    3d5a:	bd80      	pop	{r7, pc}

00003d5c <s_27>:
void s_27(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d5c:	b580      	push	{r7, lr}
    3d5e:	b084      	sub	sp, #16
    3d60:	af00      	add	r7, sp, #0
    3d62:	60f8      	str	r0, [r7, #12]
    3d64:	60b9      	str	r1, [r7, #8]
    3d66:	607a      	str	r2, [r7, #4]
    3d68:	603b      	str	r3, [r7, #0]
    course_pid_run(); // pid.h
    3d6a:	f00d ffc5 	bl	11cf8 <course_pid_run>
}
    3d6e:	3710      	adds	r7, #16
    3d70:	46bd      	mov	sp, r7
    3d72:	bd80      	pop	{r7, pc}

00003d74 <s_28>:

/*task 10, servant 28, 29*/
void s_28(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d74:	b480      	push	{r7}
    3d76:	b085      	sub	sp, #20
    3d78:	af00      	add	r7, sp, #0
    3d7a:	60f8      	str	r0, [r7, #12]
    3d7c:	60b9      	str	r1, [r7, #8]
    3d7e:	607a      	str	r2, [r7, #4]
    3d80:	603b      	str	r3, [r7, #0]
}
    3d82:	3714      	adds	r7, #20
    3d84:	46bd      	mov	sp, r7
    3d86:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d8a:	4770      	bx	lr

00003d8c <s_29>:
void s_29(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d8c:	b580      	push	{r7, lr}
    3d8e:	b084      	sub	sp, #16
    3d90:	af00      	add	r7, sp, #0
    3d92:	60f8      	str	r0, [r7, #12]
    3d94:	60b9      	str	r1, [r7, #8]
    3d96:	607a      	str	r2, [r7, #4]
    3d98:	603b      	str	r3, [r7, #0]
    altitude_pid_run(); // pid.h
    3d9a:	f00e fa35 	bl	12208 <altitude_pid_run>
}
    3d9e:	3710      	adds	r7, #16
    3da0:	46bd      	mov	sp, r7
    3da2:	bd80      	pop	{r7, pc}

00003da4 <s_30>:

/*task 11, servant 30, 31*/
void s_30(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3da4:	b480      	push	{r7}
    3da6:	b085      	sub	sp, #20
    3da8:	af00      	add	r7, sp, #0
    3daa:	60f8      	str	r0, [r7, #12]
    3dac:	60b9      	str	r1, [r7, #8]
    3dae:	607a      	str	r2, [r7, #4]
    3db0:	603b      	str	r3, [r7, #0]
}
    3db2:	3714      	adds	r7, #20
    3db4:	46bd      	mov	sp, r7
    3db6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dba:	4770      	bx	lr

00003dbc <s_31>:
void s_31(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3dbc:	b580      	push	{r7, lr}
    3dbe:	b084      	sub	sp, #16
    3dc0:	af00      	add	r7, sp, #0
    3dc2:	60f8      	str	r0, [r7, #12]
    3dc4:	60b9      	str	r1, [r7, #8]
    3dc6:	607a      	str	r2, [r7, #4]
    3dc8:	603b      	str	r3, [r7, #0]
    climb_pid_run(); // pid.h
    3dca:	f00e f84d 	bl	11e68 <climb_pid_run>
}
    3dce:	3710      	adds	r7, #16
    3dd0:	46bd      	mov	sp, r7
    3dd2:	bd80      	pop	{r7, pc}

00003dd4 <s_32>:

/*task 12, servant 32, 33*/
void s_32(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3dd4:	b480      	push	{r7}
    3dd6:	b085      	sub	sp, #20
    3dd8:	af00      	add	r7, sp, #0
    3dda:	60f8      	str	r0, [r7, #12]
    3ddc:	60b9      	str	r1, [r7, #8]
    3dde:	607a      	str	r2, [r7, #4]
    3de0:	603b      	str	r3, [r7, #0]
}
    3de2:	3714      	adds	r7, #20
    3de4:	46bd      	mov	sp, r7
    3de6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dea:	4770      	bx	lr

00003dec <s_33>:
void s_33(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3dec:	b580      	push	{r7, lr}
    3dee:	b084      	sub	sp, #16
    3df0:	af00      	add	r7, sp, #0
    3df2:	60f8      	str	r0, [r7, #12]
    3df4:	60b9      	str	r1, [r7, #8]
    3df6:	607a      	str	r2, [r7, #4]
    3df8:	603b      	str	r3, [r7, #0]
    // main.c
    send_boot();
    3dfa:	f003 fa77 	bl	72ec <send_boot>
    send_attitude();
    3dfe:	f004 fa45 	bl	828c <send_attitude>
    send_adc();
    3e02:	f004 ff37 	bl	8c74 <send_adc>
    send_settings();
    3e06:	f005 f9bd 	bl	9184 <send_settings>
    send_desired();
    3e0a:	f005 fdbf 	bl	998c <send_desired>
    send_bat();
    3e0e:	f006 fced 	bl	a7ec <send_bat>
    send_climb();
    3e12:	f007 f8a1 	bl	af58 <send_climb>
    send_mode();
    3e16:	f007 fe11 	bl	ba3c <send_mode>
    send_debug();
    3e1a:	f008 f8e3 	bl	bfe4 <send_debug>
    send_nav_ref();
    3e1e:	f008 fbb7 	bl	c590 <send_nav_ref>
}
    3e22:	3710      	adds	r7, #16
    3e24:	46bd      	mov	sp, r7
    3e26:	bd80      	pop	{r7, pc}

00003e28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    3e28:	b480      	push	{r7}
    3e2a:	b083      	sub	sp, #12
    3e2c:	af00      	add	r7, sp, #0
    3e2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    3e30:	687b      	ldr	r3, [r7, #4]
    3e32:	f103 0208 	add.w	r2, r3, #8
    3e36:	687b      	ldr	r3, [r7, #4]
    3e38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    3e3a:	687b      	ldr	r3, [r7, #4]
    3e3c:	f04f 32ff 	mov.w	r2, #4294967295
    3e40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    3e42:	687b      	ldr	r3, [r7, #4]
    3e44:	f103 0208 	add.w	r2, r3, #8
    3e48:	687b      	ldr	r3, [r7, #4]
    3e4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    3e4c:	687b      	ldr	r3, [r7, #4]
    3e4e:	f103 0208 	add.w	r2, r3, #8
    3e52:	687b      	ldr	r3, [r7, #4]
    3e54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    3e56:	687b      	ldr	r3, [r7, #4]
    3e58:	2200      	movs	r2, #0
    3e5a:	601a      	str	r2, [r3, #0]
}
    3e5c:	370c      	adds	r7, #12
    3e5e:	46bd      	mov	sp, r7
    3e60:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e64:	4770      	bx	lr
    3e66:	bf00      	nop

00003e68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    3e68:	b480      	push	{r7}
    3e6a:	b083      	sub	sp, #12
    3e6c:	af00      	add	r7, sp, #0
    3e6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    3e70:	687b      	ldr	r3, [r7, #4]
    3e72:	2200      	movs	r2, #0
    3e74:	611a      	str	r2, [r3, #16]
}
    3e76:	370c      	adds	r7, #12
    3e78:	46bd      	mov	sp, r7
    3e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e7e:	4770      	bx	lr

00003e80 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    3e80:	b480      	push	{r7}
    3e82:	b085      	sub	sp, #20
    3e84:	af00      	add	r7, sp, #0
    3e86:	6078      	str	r0, [r7, #4]
    3e88:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    3e8a:	687b      	ldr	r3, [r7, #4]
    3e8c:	685b      	ldr	r3, [r3, #4]
    3e8e:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    3e90:	68fb      	ldr	r3, [r7, #12]
    3e92:	685a      	ldr	r2, [r3, #4]
    3e94:	683b      	ldr	r3, [r7, #0]
    3e96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    3e98:	687b      	ldr	r3, [r7, #4]
    3e9a:	685a      	ldr	r2, [r3, #4]
    3e9c:	683b      	ldr	r3, [r7, #0]
    3e9e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    3ea0:	68fb      	ldr	r3, [r7, #12]
    3ea2:	685b      	ldr	r3, [r3, #4]
    3ea4:	683a      	ldr	r2, [r7, #0]
    3ea6:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    3ea8:	68fb      	ldr	r3, [r7, #12]
    3eaa:	683a      	ldr	r2, [r7, #0]
    3eac:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    3eae:	687b      	ldr	r3, [r7, #4]
    3eb0:	683a      	ldr	r2, [r7, #0]
    3eb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3eb4:	683b      	ldr	r3, [r7, #0]
    3eb6:	687a      	ldr	r2, [r7, #4]
    3eb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    3eba:	687b      	ldr	r3, [r7, #4]
    3ebc:	681b      	ldr	r3, [r3, #0]
    3ebe:	1c5a      	adds	r2, r3, #1
    3ec0:	687b      	ldr	r3, [r7, #4]
    3ec2:	601a      	str	r2, [r3, #0]
}
    3ec4:	3714      	adds	r7, #20
    3ec6:	46bd      	mov	sp, r7
    3ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ecc:	4770      	bx	lr
    3ece:	bf00      	nop

00003ed0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    3ed0:	b480      	push	{r7}
    3ed2:	b085      	sub	sp, #20
    3ed4:	af00      	add	r7, sp, #0
    3ed6:	6078      	str	r0, [r7, #4]
    3ed8:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    3eda:	683b      	ldr	r3, [r7, #0]
    3edc:	681b      	ldr	r3, [r3, #0]
    3ede:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    3ee0:	68bb      	ldr	r3, [r7, #8]
    3ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
    3ee6:	d103      	bne.n	3ef0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    3ee8:	687b      	ldr	r3, [r7, #4]
    3eea:	691b      	ldr	r3, [r3, #16]
    3eec:	60fb      	str	r3, [r7, #12]
    3eee:	e00c      	b.n	3f0a <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    3ef0:	687b      	ldr	r3, [r7, #4]
    3ef2:	3308      	adds	r3, #8
    3ef4:	60fb      	str	r3, [r7, #12]
    3ef6:	e002      	b.n	3efe <vListInsert+0x2e>
    3ef8:	68fb      	ldr	r3, [r7, #12]
    3efa:	685b      	ldr	r3, [r3, #4]
    3efc:	60fb      	str	r3, [r7, #12]
    3efe:	68fb      	ldr	r3, [r7, #12]
    3f00:	685b      	ldr	r3, [r3, #4]
    3f02:	681a      	ldr	r2, [r3, #0]
    3f04:	68bb      	ldr	r3, [r7, #8]
    3f06:	429a      	cmp	r2, r3
    3f08:	d9f6      	bls.n	3ef8 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    3f0a:	68fb      	ldr	r3, [r7, #12]
    3f0c:	685a      	ldr	r2, [r3, #4]
    3f0e:	683b      	ldr	r3, [r7, #0]
    3f10:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    3f12:	683b      	ldr	r3, [r7, #0]
    3f14:	685b      	ldr	r3, [r3, #4]
    3f16:	683a      	ldr	r2, [r7, #0]
    3f18:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    3f1a:	683b      	ldr	r3, [r7, #0]
    3f1c:	68fa      	ldr	r2, [r7, #12]
    3f1e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    3f20:	68fb      	ldr	r3, [r7, #12]
    3f22:	683a      	ldr	r2, [r7, #0]
    3f24:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3f26:	683b      	ldr	r3, [r7, #0]
    3f28:	687a      	ldr	r2, [r7, #4]
    3f2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    3f2c:	687b      	ldr	r3, [r7, #4]
    3f2e:	681b      	ldr	r3, [r3, #0]
    3f30:	1c5a      	adds	r2, r3, #1
    3f32:	687b      	ldr	r3, [r7, #4]
    3f34:	601a      	str	r2, [r3, #0]
}
    3f36:	3714      	adds	r7, #20
    3f38:	46bd      	mov	sp, r7
    3f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f3e:	4770      	bx	lr

00003f40 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    3f40:	b480      	push	{r7}
    3f42:	b085      	sub	sp, #20
    3f44:	af00      	add	r7, sp, #0
    3f46:	6078      	str	r0, [r7, #4]
    xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    3f48:	687b      	ldr	r3, [r7, #4]
    3f4a:	685b      	ldr	r3, [r3, #4]
    3f4c:	687a      	ldr	r2, [r7, #4]
    3f4e:	6892      	ldr	r2, [r2, #8]
    3f50:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    3f52:	687b      	ldr	r3, [r7, #4]
    3f54:	689b      	ldr	r3, [r3, #8]
    3f56:	687a      	ldr	r2, [r7, #4]
    3f58:	6852      	ldr	r2, [r2, #4]
    3f5a:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    3f5c:	687b      	ldr	r3, [r7, #4]
    3f5e:	691b      	ldr	r3, [r3, #16]
    3f60:	60fb      	str	r3, [r7, #12]
	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    3f62:	68fb      	ldr	r3, [r7, #12]
    3f64:	685a      	ldr	r2, [r3, #4]
    3f66:	687b      	ldr	r3, [r7, #4]
    3f68:	429a      	cmp	r2, r3
    3f6a:	d103      	bne.n	3f74 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    3f6c:	687b      	ldr	r3, [r7, #4]
    3f6e:	689a      	ldr	r2, [r3, #8]
    3f70:	68fb      	ldr	r3, [r7, #12]
    3f72:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    3f74:	687b      	ldr	r3, [r7, #4]
    3f76:	2200      	movs	r2, #0
    3f78:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
    3f7a:	68fb      	ldr	r3, [r7, #12]
    3f7c:	681b      	ldr	r3, [r3, #0]
    3f7e:	1e5a      	subs	r2, r3, #1
    3f80:	68fb      	ldr	r3, [r7, #12]
    3f82:	601a      	str	r2, [r3, #0]
}
    3f84:	3714      	adds	r7, #20
    3f86:	46bd      	mov	sp, r7
    3f88:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f8c:	4770      	bx	lr
    3f8e:	bf00      	nop

00003f90 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    3f90:	b580      	push	{r7, lr}
    3f92:	b084      	sub	sp, #16
    3f94:	af00      	add	r7, sp, #0
    3f96:	6078      	str	r0, [r7, #4]
    3f98:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    3f9a:	2301      	movs	r3, #1
    3f9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    3f9e:	683b      	ldr	r3, [r7, #0]
    3fa0:	2b01      	cmp	r3, #1
    3fa2:	d00b      	beq.n	3fbc <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3fa4:	687b      	ldr	r3, [r7, #4]
    3fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3fa8:	2b00      	cmp	r3, #0
    3faa:	d001      	beq.n	3fb0 <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    3fac:	2300      	movs	r3, #0
    3fae:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3fb0:	687b      	ldr	r3, [r7, #4]
    3fb2:	691b      	ldr	r3, [r3, #16]
    3fb4:	2b00      	cmp	r3, #0
    3fb6:	d001      	beq.n	3fbc <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    3fb8:	2300      	movs	r3, #0
    3fba:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    3fbc:	68fb      	ldr	r3, [r7, #12]
    3fbe:	2b01      	cmp	r3, #1
    3fc0:	d12f      	bne.n	4022 <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    3fc2:	687b      	ldr	r3, [r7, #4]
    3fc4:	681a      	ldr	r2, [r3, #0]
    3fc6:	687b      	ldr	r3, [r7, #4]
    3fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3fca:	6879      	ldr	r1, [r7, #4]
    3fcc:	6c09      	ldr	r1, [r1, #64]	; 0x40
    3fce:	fb01 f303 	mul.w	r3, r1, r3
    3fd2:	441a      	add	r2, r3
    3fd4:	687b      	ldr	r3, [r7, #4]
    3fd6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    3fd8:	687b      	ldr	r3, [r7, #4]
    3fda:	2200      	movs	r2, #0
    3fdc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    3fde:	687b      	ldr	r3, [r7, #4]
    3fe0:	681a      	ldr	r2, [r3, #0]
    3fe2:	687b      	ldr	r3, [r7, #4]
    3fe4:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    3fe6:	687b      	ldr	r3, [r7, #4]
    3fe8:	681a      	ldr	r2, [r3, #0]
    3fea:	687b      	ldr	r3, [r7, #4]
    3fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3fee:	3b01      	subs	r3, #1
    3ff0:	6879      	ldr	r1, [r7, #4]
    3ff2:	6c09      	ldr	r1, [r1, #64]	; 0x40
    3ff4:	fb01 f303 	mul.w	r3, r1, r3
    3ff8:	441a      	add	r2, r3
    3ffa:	687b      	ldr	r3, [r7, #4]
    3ffc:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    3ffe:	687b      	ldr	r3, [r7, #4]
    4000:	f04f 32ff 	mov.w	r2, #4294967295
    4004:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    4006:	687b      	ldr	r3, [r7, #4]
    4008:	f04f 32ff 	mov.w	r2, #4294967295
    400c:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    400e:	687b      	ldr	r3, [r7, #4]
    4010:	3310      	adds	r3, #16
    4012:	4618      	mov	r0, r3
    4014:	f7ff ff08 	bl	3e28 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    4018:	687b      	ldr	r3, [r7, #4]
    401a:	3324      	adds	r3, #36	; 0x24
    401c:	4618      	mov	r0, r3
    401e:	f7ff ff03 	bl	3e28 <vListInitialise>
	}

	return xReturn;
    4022:	68fb      	ldr	r3, [r7, #12]
}
    4024:	4618      	mov	r0, r3
    4026:	3710      	adds	r7, #16
    4028:	46bd      	mov	sp, r7
    402a:	bd80      	pop	{r7, pc}

0000402c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    402c:	b580      	push	{r7, lr}
    402e:	b088      	sub	sp, #32
    4030:	af00      	add	r7, sp, #0
    4032:	60f8      	str	r0, [r7, #12]
    4034:	60b9      	str	r1, [r7, #8]
    4036:	4613      	mov	r3, r2
    4038:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    403a:	2300      	movs	r3, #0
    403c:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    403e:	68fb      	ldr	r3, [r7, #12]
    4040:	2b00      	cmp	r3, #0
    4042:	d026      	beq.n	4092 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    4044:	204c      	movs	r0, #76	; 0x4c
    4046:	f001 fda7 	bl	5b98 <pvPortMalloc>
    404a:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    404c:	69bb      	ldr	r3, [r7, #24]
    404e:	2b00      	cmp	r3, #0
    4050:	d01f      	beq.n	4092 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    4052:	68fb      	ldr	r3, [r7, #12]
    4054:	68ba      	ldr	r2, [r7, #8]
    4056:	fb02 f303 	mul.w	r3, r2, r3
    405a:	3301      	adds	r3, #1
    405c:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    405e:	6978      	ldr	r0, [r7, #20]
    4060:	f001 fd9a 	bl	5b98 <pvPortMalloc>
    4064:	4602      	mov	r2, r0
    4066:	69bb      	ldr	r3, [r7, #24]
    4068:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    406a:	69bb      	ldr	r3, [r7, #24]
    406c:	681b      	ldr	r3, [r3, #0]
    406e:	2b00      	cmp	r3, #0
    4070:	d00c      	beq.n	408c <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    4072:	69bb      	ldr	r3, [r7, #24]
    4074:	68fa      	ldr	r2, [r7, #12]
    4076:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    4078:	69bb      	ldr	r3, [r7, #24]
    407a:	68ba      	ldr	r2, [r7, #8]
    407c:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    407e:	69b8      	ldr	r0, [r7, #24]
    4080:	2101      	movs	r1, #1
    4082:	f7ff ff85 	bl	3f90 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    4086:	69bb      	ldr	r3, [r7, #24]
    4088:	61fb      	str	r3, [r7, #28]
    408a:	e002      	b.n	4092 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    408c:	69b8      	ldr	r0, [r7, #24]
    408e:	f001 fe47 	bl	5d20 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    4092:	69fb      	ldr	r3, [r7, #28]
}
    4094:	4618      	mov	r0, r3
    4096:	3720      	adds	r7, #32
    4098:	46bd      	mov	sp, r7
    409a:	bd80      	pop	{r7, pc}

0000409c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    409c:	b580      	push	{r7, lr}
    409e:	b084      	sub	sp, #16
    40a0:	af00      	add	r7, sp, #0
    40a2:	4603      	mov	r3, r0
    40a4:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    40a6:	204c      	movs	r0, #76	; 0x4c
    40a8:	f001 fd76 	bl	5b98 <pvPortMalloc>
    40ac:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    40ae:	68fb      	ldr	r3, [r7, #12]
    40b0:	2b00      	cmp	r3, #0
    40b2:	d02c      	beq.n	410e <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    40b4:	68fb      	ldr	r3, [r7, #12]
    40b6:	2200      	movs	r2, #0
    40b8:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    40ba:	68fb      	ldr	r3, [r7, #12]
    40bc:	2200      	movs	r2, #0
    40be:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    40c0:	68fb      	ldr	r3, [r7, #12]
    40c2:	2200      	movs	r2, #0
    40c4:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    40c6:	68fb      	ldr	r3, [r7, #12]
    40c8:	2200      	movs	r2, #0
    40ca:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    40cc:	68fb      	ldr	r3, [r7, #12]
    40ce:	2200      	movs	r2, #0
    40d0:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    40d2:	68fb      	ldr	r3, [r7, #12]
    40d4:	2201      	movs	r2, #1
    40d6:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    40d8:	68fb      	ldr	r3, [r7, #12]
    40da:	2200      	movs	r2, #0
    40dc:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    40de:	68fb      	ldr	r3, [r7, #12]
    40e0:	f04f 32ff 	mov.w	r2, #4294967295
    40e4:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    40e6:	68fb      	ldr	r3, [r7, #12]
    40e8:	f04f 32ff 	mov.w	r2, #4294967295
    40ec:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    40ee:	68fb      	ldr	r3, [r7, #12]
    40f0:	3310      	adds	r3, #16
    40f2:	4618      	mov	r0, r3
    40f4:	f7ff fe98 	bl	3e28 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    40f8:	68fb      	ldr	r3, [r7, #12]
    40fa:	3324      	adds	r3, #36	; 0x24
    40fc:	4618      	mov	r0, r3
    40fe:	f7ff fe93 	bl	3e28 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    4102:	68f8      	ldr	r0, [r7, #12]
    4104:	2100      	movs	r1, #0
    4106:	2200      	movs	r2, #0
    4108:	2300      	movs	r3, #0
    410a:	f000 f81d 	bl	4148 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    410e:	68fb      	ldr	r3, [r7, #12]
	}
    4110:	4618      	mov	r0, r3
    4112:	3710      	adds	r7, #16
    4114:	46bd      	mov	sp, r7
    4116:	bd80      	pop	{r7, pc}

00004118 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    4118:	b580      	push	{r7, lr}
    411a:	b084      	sub	sp, #16
    411c:	af00      	add	r7, sp, #0
    411e:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    4120:	f001 fcc0 	bl	5aa4 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    4124:	687b      	ldr	r3, [r7, #4]
    4126:	681b      	ldr	r3, [r3, #0]
    4128:	2b00      	cmp	r3, #0
    412a:	d103      	bne.n	4134 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    412c:	687b      	ldr	r3, [r7, #4]
    412e:	685b      	ldr	r3, [r3, #4]
    4130:	60fb      	str	r3, [r7, #12]
    4132:	e001      	b.n	4138 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    4134:	2300      	movs	r3, #0
    4136:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    4138:	f001 fcca 	bl	5ad0 <vPortExitCritical>
		
		return pxReturn;
    413c:	68fb      	ldr	r3, [r7, #12]
	}
    413e:	4618      	mov	r0, r3
    4140:	3710      	adds	r7, #16
    4142:	46bd      	mov	sp, r7
    4144:	bd80      	pop	{r7, pc}
    4146:	bf00      	nop

00004148 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    4148:	b580      	push	{r7, lr}
    414a:	b088      	sub	sp, #32
    414c:	af00      	add	r7, sp, #0
    414e:	60f8      	str	r0, [r7, #12]
    4150:	60b9      	str	r1, [r7, #8]
    4152:	607a      	str	r2, [r7, #4]
    4154:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    4156:	2300      	movs	r3, #0
    4158:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    415a:	f001 fca3 	bl	5aa4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    415e:	68fb      	ldr	r3, [r7, #12]
    4160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4162:	68fb      	ldr	r3, [r7, #12]
    4164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4166:	429a      	cmp	r2, r3
    4168:	d216      	bcs.n	4198 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    416a:	68f8      	ldr	r0, [r7, #12]
    416c:	68b9      	ldr	r1, [r7, #8]
    416e:	683a      	ldr	r2, [r7, #0]
    4170:	f000 f9d6 	bl	4520 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4174:	68fb      	ldr	r3, [r7, #12]
    4176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4178:	2b00      	cmp	r3, #0
    417a:	d009      	beq.n	4190 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    417c:	68fb      	ldr	r3, [r7, #12]
    417e:	3324      	adds	r3, #36	; 0x24
    4180:	4618      	mov	r0, r3
    4182:	f001 f905 	bl	5390 <xTaskRemoveFromEventList>
    4186:	4603      	mov	r3, r0
    4188:	2b01      	cmp	r3, #1
    418a:	d101      	bne.n	4190 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    418c:	f001 fc7c 	bl	5a88 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    4190:	f001 fc9e 	bl	5ad0 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    4194:	2301      	movs	r3, #1
    4196:	e059      	b.n	424c <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    4198:	687b      	ldr	r3, [r7, #4]
    419a:	2b00      	cmp	r3, #0
    419c:	d103      	bne.n	41a6 <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    419e:	f001 fc97 	bl	5ad0 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    41a2:	2300      	movs	r3, #0
    41a4:	e052      	b.n	424c <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    41a6:	69fb      	ldr	r3, [r7, #28]
    41a8:	2b00      	cmp	r3, #0
    41aa:	d106      	bne.n	41ba <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    41ac:	f107 0314 	add.w	r3, r7, #20
    41b0:	4618      	mov	r0, r3
    41b2:	f001 f945 	bl	5440 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    41b6:	2301      	movs	r3, #1
    41b8:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    41ba:	f001 fc89 	bl	5ad0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    41be:	f000 fe93 	bl	4ee8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    41c2:	f001 fc6f 	bl	5aa4 <vPortEnterCritical>
    41c6:	68fb      	ldr	r3, [r7, #12]
    41c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    41ca:	f1b3 3fff 	cmp.w	r3, #4294967295
    41ce:	d102      	bne.n	41d6 <xQueueGenericSend+0x8e>
    41d0:	68fb      	ldr	r3, [r7, #12]
    41d2:	2200      	movs	r2, #0
    41d4:	645a      	str	r2, [r3, #68]	; 0x44
    41d6:	68fb      	ldr	r3, [r7, #12]
    41d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    41da:	f1b3 3fff 	cmp.w	r3, #4294967295
    41de:	d102      	bne.n	41e6 <xQueueGenericSend+0x9e>
    41e0:	68fb      	ldr	r3, [r7, #12]
    41e2:	2200      	movs	r2, #0
    41e4:	649a      	str	r2, [r3, #72]	; 0x48
    41e6:	f001 fc73 	bl	5ad0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    41ea:	f107 0214 	add.w	r2, r7, #20
    41ee:	1d3b      	adds	r3, r7, #4
    41f0:	4610      	mov	r0, r2
    41f2:	4619      	mov	r1, r3
    41f4:	f001 f93c 	bl	5470 <xTaskCheckForTimeOut>
    41f8:	4603      	mov	r3, r0
    41fa:	2b00      	cmp	r3, #0
    41fc:	d11e      	bne.n	423c <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    41fe:	68f8      	ldr	r0, [r7, #12]
    4200:	f000 fa86 	bl	4710 <prvIsQueueFull>
    4204:	4603      	mov	r3, r0
    4206:	2b00      	cmp	r3, #0
    4208:	d012      	beq.n	4230 <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    420a:	68fb      	ldr	r3, [r7, #12]
    420c:	f103 0210 	add.w	r2, r3, #16
    4210:	687b      	ldr	r3, [r7, #4]
    4212:	4610      	mov	r0, r2
    4214:	4619      	mov	r1, r3
    4216:	f001 f883 	bl	5320 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    421a:	68f8      	ldr	r0, [r7, #12]
    421c:	f000 fa02 	bl	4624 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    4220:	f000 fe74 	bl	4f0c <xTaskResumeAll>
    4224:	4603      	mov	r3, r0
    4226:	2b00      	cmp	r3, #0
    4228:	d10f      	bne.n	424a <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    422a:	f001 fc2d 	bl	5a88 <vPortYieldFromISR>
    422e:	e00c      	b.n	424a <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    4230:	68f8      	ldr	r0, [r7, #12]
    4232:	f000 f9f7 	bl	4624 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    4236:	f000 fe69 	bl	4f0c <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    423a:	e78e      	b.n	415a <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    423c:	68f8      	ldr	r0, [r7, #12]
    423e:	f000 f9f1 	bl	4624 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    4242:	f000 fe63 	bl	4f0c <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    4246:	2300      	movs	r3, #0
    4248:	e000      	b.n	424c <xQueueGenericSend+0x104>
		}
	}
    424a:	e786      	b.n	415a <xQueueGenericSend+0x12>
}
    424c:	4618      	mov	r0, r3
    424e:	3720      	adds	r7, #32
    4250:	46bd      	mov	sp, r7
    4252:	bd80      	pop	{r7, pc}

00004254 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    4254:	b580      	push	{r7, lr}
    4256:	b086      	sub	sp, #24
    4258:	af00      	add	r7, sp, #0
    425a:	60f8      	str	r0, [r7, #12]
    425c:	60b9      	str	r1, [r7, #8]
    425e:	607a      	str	r2, [r7, #4]
    4260:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4262:	2300      	movs	r3, #0
    4264:	613b      	str	r3, [r7, #16]
    4266:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    426a:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    426e:	68fb      	ldr	r3, [r7, #12]
    4270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4272:	68fb      	ldr	r3, [r7, #12]
    4274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4276:	429a      	cmp	r2, r3
    4278:	d221      	bcs.n	42be <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    427a:	68f8      	ldr	r0, [r7, #12]
    427c:	68b9      	ldr	r1, [r7, #8]
    427e:	683a      	ldr	r2, [r7, #0]
    4280:	f000 f94e 	bl	4520 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    4284:	68fb      	ldr	r3, [r7, #12]
    4286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4288:	f1b3 3fff 	cmp.w	r3, #4294967295
    428c:	d10f      	bne.n	42ae <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    428e:	68fb      	ldr	r3, [r7, #12]
    4290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4292:	2b00      	cmp	r3, #0
    4294:	d010      	beq.n	42b8 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4296:	68fb      	ldr	r3, [r7, #12]
    4298:	3324      	adds	r3, #36	; 0x24
    429a:	4618      	mov	r0, r3
    429c:	f001 f878 	bl	5390 <xTaskRemoveFromEventList>
    42a0:	4603      	mov	r3, r0
    42a2:	2b00      	cmp	r3, #0
    42a4:	d008      	beq.n	42b8 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    42a6:	687b      	ldr	r3, [r7, #4]
    42a8:	2201      	movs	r2, #1
    42aa:	601a      	str	r2, [r3, #0]
    42ac:	e004      	b.n	42b8 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    42ae:	68fb      	ldr	r3, [r7, #12]
    42b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    42b2:	1c5a      	adds	r2, r3, #1
    42b4:	68fb      	ldr	r3, [r7, #12]
    42b6:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    42b8:	2301      	movs	r3, #1
    42ba:	617b      	str	r3, [r7, #20]
    42bc:	e001      	b.n	42c2 <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    42be:	2300      	movs	r3, #0
    42c0:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    42c2:	f04f 0000 	mov.w	r0, #0
    42c6:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    42ca:	697b      	ldr	r3, [r7, #20]
}
    42cc:	4618      	mov	r0, r3
    42ce:	3718      	adds	r7, #24
    42d0:	46bd      	mov	sp, r7
    42d2:	bd80      	pop	{r7, pc}

000042d4 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    42d4:	b580      	push	{r7, lr}
    42d6:	b088      	sub	sp, #32
    42d8:	af00      	add	r7, sp, #0
    42da:	60f8      	str	r0, [r7, #12]
    42dc:	60b9      	str	r1, [r7, #8]
    42de:	607a      	str	r2, [r7, #4]
    42e0:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    42e2:	2300      	movs	r3, #0
    42e4:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    42e6:	f001 fbdd 	bl	5aa4 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    42ea:	68fb      	ldr	r3, [r7, #12]
    42ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    42ee:	2b00      	cmp	r3, #0
    42f0:	d03b      	beq.n	436a <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    42f2:	68fb      	ldr	r3, [r7, #12]
    42f4:	68db      	ldr	r3, [r3, #12]
    42f6:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    42f8:	68f8      	ldr	r0, [r7, #12]
    42fa:	68b9      	ldr	r1, [r7, #8]
    42fc:	f000 f96c 	bl	45d8 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    4300:	683b      	ldr	r3, [r7, #0]
    4302:	2b00      	cmp	r3, #0
    4304:	d11c      	bne.n	4340 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    4306:	68fb      	ldr	r3, [r7, #12]
    4308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    430a:	1e5a      	subs	r2, r3, #1
    430c:	68fb      	ldr	r3, [r7, #12]
    430e:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4310:	68fb      	ldr	r3, [r7, #12]
    4312:	681b      	ldr	r3, [r3, #0]
    4314:	2b00      	cmp	r3, #0
    4316:	d104      	bne.n	4322 <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    4318:	f001 fa5c 	bl	57d4 <xTaskGetCurrentTaskHandle>
    431c:	4602      	mov	r2, r0
    431e:	68fb      	ldr	r3, [r7, #12]
    4320:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4322:	68fb      	ldr	r3, [r7, #12]
    4324:	691b      	ldr	r3, [r3, #16]
    4326:	2b00      	cmp	r3, #0
    4328:	d01b      	beq.n	4362 <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    432a:	68fb      	ldr	r3, [r7, #12]
    432c:	3310      	adds	r3, #16
    432e:	4618      	mov	r0, r3
    4330:	f001 f82e 	bl	5390 <xTaskRemoveFromEventList>
    4334:	4603      	mov	r3, r0
    4336:	2b01      	cmp	r3, #1
    4338:	d113      	bne.n	4362 <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    433a:	f001 fba5 	bl	5a88 <vPortYieldFromISR>
    433e:	e010      	b.n	4362 <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    4340:	68fb      	ldr	r3, [r7, #12]
    4342:	69ba      	ldr	r2, [r7, #24]
    4344:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4346:	68fb      	ldr	r3, [r7, #12]
    4348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    434a:	2b00      	cmp	r3, #0
    434c:	d009      	beq.n	4362 <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    434e:	68fb      	ldr	r3, [r7, #12]
    4350:	3324      	adds	r3, #36	; 0x24
    4352:	4618      	mov	r0, r3
    4354:	f001 f81c 	bl	5390 <xTaskRemoveFromEventList>
    4358:	4603      	mov	r3, r0
    435a:	2b00      	cmp	r3, #0
    435c:	d001      	beq.n	4362 <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    435e:	f001 fb93 	bl	5a88 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    4362:	f001 fbb5 	bl	5ad0 <vPortExitCritical>
				return pdPASS;
    4366:	2301      	movs	r3, #1
    4368:	e066      	b.n	4438 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    436a:	687b      	ldr	r3, [r7, #4]
    436c:	2b00      	cmp	r3, #0
    436e:	d103      	bne.n	4378 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    4370:	f001 fbae 	bl	5ad0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    4374:	2300      	movs	r3, #0
    4376:	e05f      	b.n	4438 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    4378:	69fb      	ldr	r3, [r7, #28]
    437a:	2b00      	cmp	r3, #0
    437c:	d106      	bne.n	438c <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    437e:	f107 0310 	add.w	r3, r7, #16
    4382:	4618      	mov	r0, r3
    4384:	f001 f85c 	bl	5440 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4388:	2301      	movs	r3, #1
    438a:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    438c:	f001 fba0 	bl	5ad0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4390:	f000 fdaa 	bl	4ee8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    4394:	f001 fb86 	bl	5aa4 <vPortEnterCritical>
    4398:	68fb      	ldr	r3, [r7, #12]
    439a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    439c:	f1b3 3fff 	cmp.w	r3, #4294967295
    43a0:	d102      	bne.n	43a8 <xQueueGenericReceive+0xd4>
    43a2:	68fb      	ldr	r3, [r7, #12]
    43a4:	2200      	movs	r2, #0
    43a6:	645a      	str	r2, [r3, #68]	; 0x44
    43a8:	68fb      	ldr	r3, [r7, #12]
    43aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    43ac:	f1b3 3fff 	cmp.w	r3, #4294967295
    43b0:	d102      	bne.n	43b8 <xQueueGenericReceive+0xe4>
    43b2:	68fb      	ldr	r3, [r7, #12]
    43b4:	2200      	movs	r2, #0
    43b6:	649a      	str	r2, [r3, #72]	; 0x48
    43b8:	f001 fb8a 	bl	5ad0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    43bc:	f107 0210 	add.w	r2, r7, #16
    43c0:	1d3b      	adds	r3, r7, #4
    43c2:	4610      	mov	r0, r2
    43c4:	4619      	mov	r1, r3
    43c6:	f001 f853 	bl	5470 <xTaskCheckForTimeOut>
    43ca:	4603      	mov	r3, r0
    43cc:	2b00      	cmp	r3, #0
    43ce:	d12b      	bne.n	4428 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    43d0:	68f8      	ldr	r0, [r7, #12]
    43d2:	f000 f973 	bl	46bc <prvIsQueueEmpty>
    43d6:	4603      	mov	r3, r0
    43d8:	2b00      	cmp	r3, #0
    43da:	d01f      	beq.n	441c <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    43dc:	68fb      	ldr	r3, [r7, #12]
    43de:	681b      	ldr	r3, [r3, #0]
    43e0:	2b00      	cmp	r3, #0
    43e2:	d108      	bne.n	43f6 <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    43e4:	f001 fb5e 	bl	5aa4 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    43e8:	68fb      	ldr	r3, [r7, #12]
    43ea:	685b      	ldr	r3, [r3, #4]
    43ec:	4618      	mov	r0, r3
    43ee:	f001 fa01 	bl	57f4 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    43f2:	f001 fb6d 	bl	5ad0 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    43f6:	68fb      	ldr	r3, [r7, #12]
    43f8:	f103 0224 	add.w	r2, r3, #36	; 0x24
    43fc:	687b      	ldr	r3, [r7, #4]
    43fe:	4610      	mov	r0, r2
    4400:	4619      	mov	r1, r3
    4402:	f000 ff8d 	bl	5320 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    4406:	68f8      	ldr	r0, [r7, #12]
    4408:	f000 f90c 	bl	4624 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    440c:	f000 fd7e 	bl	4f0c <xTaskResumeAll>
    4410:	4603      	mov	r3, r0
    4412:	2b00      	cmp	r3, #0
    4414:	d10f      	bne.n	4436 <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    4416:	f001 fb37 	bl	5a88 <vPortYieldFromISR>
    441a:	e00c      	b.n	4436 <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    441c:	68f8      	ldr	r0, [r7, #12]
    441e:	f000 f901 	bl	4624 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    4422:	f000 fd73 	bl	4f0c <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    4426:	e75e      	b.n	42e6 <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    4428:	68f8      	ldr	r0, [r7, #12]
    442a:	f000 f8fb 	bl	4624 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    442e:	f000 fd6d 	bl	4f0c <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    4432:	2300      	movs	r3, #0
    4434:	e000      	b.n	4438 <xQueueGenericReceive+0x164>
		}
	}
    4436:	e756      	b.n	42e6 <xQueueGenericReceive+0x12>
}
    4438:	4618      	mov	r0, r3
    443a:	3720      	adds	r7, #32
    443c:	46bd      	mov	sp, r7
    443e:	bd80      	pop	{r7, pc}

00004440 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    4440:	b580      	push	{r7, lr}
    4442:	b086      	sub	sp, #24
    4444:	af00      	add	r7, sp, #0
    4446:	60f8      	str	r0, [r7, #12]
    4448:	60b9      	str	r1, [r7, #8]
    444a:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    444c:	2300      	movs	r3, #0
    444e:	613b      	str	r3, [r7, #16]
    4450:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4454:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    4458:	68fb      	ldr	r3, [r7, #12]
    445a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    445c:	2b00      	cmp	r3, #0
    445e:	d025      	beq.n	44ac <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    4460:	68f8      	ldr	r0, [r7, #12]
    4462:	68b9      	ldr	r1, [r7, #8]
    4464:	f000 f8b8 	bl	45d8 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    4468:	68fb      	ldr	r3, [r7, #12]
    446a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    446c:	1e5a      	subs	r2, r3, #1
    446e:	68fb      	ldr	r3, [r7, #12]
    4470:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    4472:	68fb      	ldr	r3, [r7, #12]
    4474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4476:	f1b3 3fff 	cmp.w	r3, #4294967295
    447a:	d10f      	bne.n	449c <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    447c:	68fb      	ldr	r3, [r7, #12]
    447e:	691b      	ldr	r3, [r3, #16]
    4480:	2b00      	cmp	r3, #0
    4482:	d010      	beq.n	44a6 <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4484:	68fb      	ldr	r3, [r7, #12]
    4486:	3310      	adds	r3, #16
    4488:	4618      	mov	r0, r3
    448a:	f000 ff81 	bl	5390 <xTaskRemoveFromEventList>
    448e:	4603      	mov	r3, r0
    4490:	2b00      	cmp	r3, #0
    4492:	d008      	beq.n	44a6 <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    4494:	687b      	ldr	r3, [r7, #4]
    4496:	2201      	movs	r2, #1
    4498:	601a      	str	r2, [r3, #0]
    449a:	e004      	b.n	44a6 <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    449c:	68fb      	ldr	r3, [r7, #12]
    449e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    44a0:	1c5a      	adds	r2, r3, #1
    44a2:	68fb      	ldr	r3, [r7, #12]
    44a4:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    44a6:	2301      	movs	r3, #1
    44a8:	617b      	str	r3, [r7, #20]
    44aa:	e001      	b.n	44b0 <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    44ac:	2300      	movs	r3, #0
    44ae:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    44b0:	f04f 0000 	mov.w	r0, #0
    44b4:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    44b8:	697b      	ldr	r3, [r7, #20]
}
    44ba:	4618      	mov	r0, r3
    44bc:	3718      	adds	r7, #24
    44be:	46bd      	mov	sp, r7
    44c0:	bd80      	pop	{r7, pc}
    44c2:	bf00      	nop

000044c4 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    44c4:	b580      	push	{r7, lr}
    44c6:	b084      	sub	sp, #16
    44c8:	af00      	add	r7, sp, #0
    44ca:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    44cc:	f001 faea 	bl	5aa4 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    44d0:	687b      	ldr	r3, [r7, #4]
    44d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    44d4:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    44d6:	f001 fafb 	bl	5ad0 <vPortExitCritical>

	return uxReturn;
    44da:	68fb      	ldr	r3, [r7, #12]
}
    44dc:	4618      	mov	r0, r3
    44de:	3710      	adds	r7, #16
    44e0:	46bd      	mov	sp, r7
    44e2:	bd80      	pop	{r7, pc}

000044e4 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    44e4:	b480      	push	{r7}
    44e6:	b085      	sub	sp, #20
    44e8:	af00      	add	r7, sp, #0
    44ea:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    44ec:	687b      	ldr	r3, [r7, #4]
    44ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    44f0:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    44f2:	68fb      	ldr	r3, [r7, #12]
}
    44f4:	4618      	mov	r0, r3
    44f6:	3714      	adds	r7, #20
    44f8:	46bd      	mov	sp, r7
    44fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    44fe:	4770      	bx	lr

00004500 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    4500:	b580      	push	{r7, lr}
    4502:	b082      	sub	sp, #8
    4504:	af00      	add	r7, sp, #0
    4506:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    4508:	687b      	ldr	r3, [r7, #4]
    450a:	681b      	ldr	r3, [r3, #0]
    450c:	4618      	mov	r0, r3
    450e:	f001 fc07 	bl	5d20 <vPortFree>
	vPortFree( pxQueue );
    4512:	6878      	ldr	r0, [r7, #4]
    4514:	f001 fc04 	bl	5d20 <vPortFree>
}
    4518:	3708      	adds	r7, #8
    451a:	46bd      	mov	sp, r7
    451c:	bd80      	pop	{r7, pc}
    451e:	bf00      	nop

00004520 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    4520:	b580      	push	{r7, lr}
    4522:	b084      	sub	sp, #16
    4524:	af00      	add	r7, sp, #0
    4526:	60f8      	str	r0, [r7, #12]
    4528:	60b9      	str	r1, [r7, #8]
    452a:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    452c:	68fb      	ldr	r3, [r7, #12]
    452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4530:	2b00      	cmp	r3, #0
    4532:	d10c      	bne.n	454e <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4534:	68fb      	ldr	r3, [r7, #12]
    4536:	681b      	ldr	r3, [r3, #0]
    4538:	2b00      	cmp	r3, #0
    453a:	d145      	bne.n	45c8 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    453c:	68fb      	ldr	r3, [r7, #12]
    453e:	685b      	ldr	r3, [r3, #4]
    4540:	4618      	mov	r0, r3
    4542:	f001 f9bb 	bl	58bc <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    4546:	68fb      	ldr	r3, [r7, #12]
    4548:	2200      	movs	r2, #0
    454a:	605a      	str	r2, [r3, #4]
    454c:	e03c      	b.n	45c8 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    454e:	687b      	ldr	r3, [r7, #4]
    4550:	2b00      	cmp	r3, #0
    4552:	d11a      	bne.n	458a <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    4554:	68fb      	ldr	r3, [r7, #12]
    4556:	689a      	ldr	r2, [r3, #8]
    4558:	68fb      	ldr	r3, [r7, #12]
    455a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    455c:	4610      	mov	r0, r2
    455e:	68b9      	ldr	r1, [r7, #8]
    4560:	461a      	mov	r2, r3
    4562:	f014 f801 	bl	18568 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    4566:	68fb      	ldr	r3, [r7, #12]
    4568:	689a      	ldr	r2, [r3, #8]
    456a:	68fb      	ldr	r3, [r7, #12]
    456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    456e:	441a      	add	r2, r3
    4570:	68fb      	ldr	r3, [r7, #12]
    4572:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    4574:	68fb      	ldr	r3, [r7, #12]
    4576:	689a      	ldr	r2, [r3, #8]
    4578:	68fb      	ldr	r3, [r7, #12]
    457a:	685b      	ldr	r3, [r3, #4]
    457c:	429a      	cmp	r2, r3
    457e:	d323      	bcc.n	45c8 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    4580:	68fb      	ldr	r3, [r7, #12]
    4582:	681a      	ldr	r2, [r3, #0]
    4584:	68fb      	ldr	r3, [r7, #12]
    4586:	609a      	str	r2, [r3, #8]
    4588:	e01e      	b.n	45c8 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    458a:	68fb      	ldr	r3, [r7, #12]
    458c:	68da      	ldr	r2, [r3, #12]
    458e:	68fb      	ldr	r3, [r7, #12]
    4590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4592:	4610      	mov	r0, r2
    4594:	68b9      	ldr	r1, [r7, #8]
    4596:	461a      	mov	r2, r3
    4598:	f013 ffe6 	bl	18568 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    459c:	68fb      	ldr	r3, [r7, #12]
    459e:	68da      	ldr	r2, [r3, #12]
    45a0:	68fb      	ldr	r3, [r7, #12]
    45a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    45a4:	425b      	negs	r3, r3
    45a6:	441a      	add	r2, r3
    45a8:	68fb      	ldr	r3, [r7, #12]
    45aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    45ac:	68fb      	ldr	r3, [r7, #12]
    45ae:	68da      	ldr	r2, [r3, #12]
    45b0:	68fb      	ldr	r3, [r7, #12]
    45b2:	681b      	ldr	r3, [r3, #0]
    45b4:	429a      	cmp	r2, r3
    45b6:	d207      	bcs.n	45c8 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    45b8:	68fb      	ldr	r3, [r7, #12]
    45ba:	685a      	ldr	r2, [r3, #4]
    45bc:	68fb      	ldr	r3, [r7, #12]
    45be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    45c0:	425b      	negs	r3, r3
    45c2:	441a      	add	r2, r3
    45c4:	68fb      	ldr	r3, [r7, #12]
    45c6:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    45c8:	68fb      	ldr	r3, [r7, #12]
    45ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    45cc:	1c5a      	adds	r2, r3, #1
    45ce:	68fb      	ldr	r3, [r7, #12]
    45d0:	639a      	str	r2, [r3, #56]	; 0x38
}
    45d2:	3710      	adds	r7, #16
    45d4:	46bd      	mov	sp, r7
    45d6:	bd80      	pop	{r7, pc}

000045d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    45d8:	b580      	push	{r7, lr}
    45da:	b082      	sub	sp, #8
    45dc:	af00      	add	r7, sp, #0
    45de:	6078      	str	r0, [r7, #4]
    45e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    45e2:	687b      	ldr	r3, [r7, #4]
    45e4:	681b      	ldr	r3, [r3, #0]
    45e6:	2b00      	cmp	r3, #0
    45e8:	d019      	beq.n	461e <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    45ea:	687b      	ldr	r3, [r7, #4]
    45ec:	68da      	ldr	r2, [r3, #12]
    45ee:	687b      	ldr	r3, [r7, #4]
    45f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    45f2:	441a      	add	r2, r3
    45f4:	687b      	ldr	r3, [r7, #4]
    45f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    45f8:	687b      	ldr	r3, [r7, #4]
    45fa:	68da      	ldr	r2, [r3, #12]
    45fc:	687b      	ldr	r3, [r7, #4]
    45fe:	685b      	ldr	r3, [r3, #4]
    4600:	429a      	cmp	r2, r3
    4602:	d303      	bcc.n	460c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    4604:	687b      	ldr	r3, [r7, #4]
    4606:	681a      	ldr	r2, [r3, #0]
    4608:	687b      	ldr	r3, [r7, #4]
    460a:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    460c:	687b      	ldr	r3, [r7, #4]
    460e:	68da      	ldr	r2, [r3, #12]
    4610:	687b      	ldr	r3, [r7, #4]
    4612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4614:	6838      	ldr	r0, [r7, #0]
    4616:	4611      	mov	r1, r2
    4618:	461a      	mov	r2, r3
    461a:	f013 ffa5 	bl	18568 <memcpy>
	}
}
    461e:	3708      	adds	r7, #8
    4620:	46bd      	mov	sp, r7
    4622:	bd80      	pop	{r7, pc}

00004624 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    4624:	b580      	push	{r7, lr}
    4626:	b082      	sub	sp, #8
    4628:	af00      	add	r7, sp, #0
    462a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    462c:	f001 fa3a 	bl	5aa4 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    4630:	e014      	b.n	465c <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4632:	687b      	ldr	r3, [r7, #4]
    4634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4636:	2b00      	cmp	r3, #0
    4638:	d00f      	beq.n	465a <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    463a:	687b      	ldr	r3, [r7, #4]
    463c:	3324      	adds	r3, #36	; 0x24
    463e:	4618      	mov	r0, r3
    4640:	f000 fea6 	bl	5390 <xTaskRemoveFromEventList>
    4644:	4603      	mov	r3, r0
    4646:	2b00      	cmp	r3, #0
    4648:	d001      	beq.n	464e <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    464a:	f000 ff5d 	bl	5508 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    464e:	687b      	ldr	r3, [r7, #4]
    4650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4652:	1e5a      	subs	r2, r3, #1
    4654:	687b      	ldr	r3, [r7, #4]
    4656:	649a      	str	r2, [r3, #72]	; 0x48
    4658:	e000      	b.n	465c <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    465a:	e003      	b.n	4664 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    465c:	687b      	ldr	r3, [r7, #4]
    465e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4660:	2b00      	cmp	r3, #0
    4662:	dce6      	bgt.n	4632 <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    4664:	687b      	ldr	r3, [r7, #4]
    4666:	f04f 32ff 	mov.w	r2, #4294967295
    466a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    466c:	f001 fa30 	bl	5ad0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    4670:	f001 fa18 	bl	5aa4 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4674:	e014      	b.n	46a0 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4676:	687b      	ldr	r3, [r7, #4]
    4678:	691b      	ldr	r3, [r3, #16]
    467a:	2b00      	cmp	r3, #0
    467c:	d00f      	beq.n	469e <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    467e:	687b      	ldr	r3, [r7, #4]
    4680:	3310      	adds	r3, #16
    4682:	4618      	mov	r0, r3
    4684:	f000 fe84 	bl	5390 <xTaskRemoveFromEventList>
    4688:	4603      	mov	r3, r0
    468a:	2b00      	cmp	r3, #0
    468c:	d001      	beq.n	4692 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    468e:	f000 ff3b 	bl	5508 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    4692:	687b      	ldr	r3, [r7, #4]
    4694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4696:	1e5a      	subs	r2, r3, #1
    4698:	687b      	ldr	r3, [r7, #4]
    469a:	645a      	str	r2, [r3, #68]	; 0x44
    469c:	e000      	b.n	46a0 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    469e:	e003      	b.n	46a8 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    46a0:	687b      	ldr	r3, [r7, #4]
    46a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    46a4:	2b00      	cmp	r3, #0
    46a6:	dce6      	bgt.n	4676 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    46a8:	687b      	ldr	r3, [r7, #4]
    46aa:	f04f 32ff 	mov.w	r2, #4294967295
    46ae:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    46b0:	f001 fa0e 	bl	5ad0 <vPortExitCritical>
}
    46b4:	3708      	adds	r7, #8
    46b6:	46bd      	mov	sp, r7
    46b8:	bd80      	pop	{r7, pc}
    46ba:	bf00      	nop

000046bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    46bc:	b580      	push	{r7, lr}
    46be:	b084      	sub	sp, #16
    46c0:	af00      	add	r7, sp, #0
    46c2:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    46c4:	f001 f9ee 	bl	5aa4 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    46c8:	687b      	ldr	r3, [r7, #4]
    46ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    46cc:	2b00      	cmp	r3, #0
    46ce:	bf14      	ite	ne
    46d0:	2300      	movne	r3, #0
    46d2:	2301      	moveq	r3, #1
    46d4:	b2db      	uxtb	r3, r3
    46d6:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    46d8:	f001 f9fa 	bl	5ad0 <vPortExitCritical>

	return xReturn;
    46dc:	68fb      	ldr	r3, [r7, #12]
}
    46de:	4618      	mov	r0, r3
    46e0:	3710      	adds	r7, #16
    46e2:	46bd      	mov	sp, r7
    46e4:	bd80      	pop	{r7, pc}
    46e6:	bf00      	nop

000046e8 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    46e8:	b480      	push	{r7}
    46ea:	b085      	sub	sp, #20
    46ec:	af00      	add	r7, sp, #0
    46ee:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    46f0:	687b      	ldr	r3, [r7, #4]
    46f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    46f4:	2b00      	cmp	r3, #0
    46f6:	bf14      	ite	ne
    46f8:	2300      	movne	r3, #0
    46fa:	2301      	moveq	r3, #1
    46fc:	b2db      	uxtb	r3, r3
    46fe:	60fb      	str	r3, [r7, #12]

	return xReturn;
    4700:	68fb      	ldr	r3, [r7, #12]
}
    4702:	4618      	mov	r0, r3
    4704:	3714      	adds	r7, #20
    4706:	46bd      	mov	sp, r7
    4708:	f85d 7b04 	ldr.w	r7, [sp], #4
    470c:	4770      	bx	lr
    470e:	bf00      	nop

00004710 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    4710:	b580      	push	{r7, lr}
    4712:	b084      	sub	sp, #16
    4714:	af00      	add	r7, sp, #0
    4716:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    4718:	f001 f9c4 	bl	5aa4 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    471c:	687b      	ldr	r3, [r7, #4]
    471e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4720:	687b      	ldr	r3, [r7, #4]
    4722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4724:	429a      	cmp	r2, r3
    4726:	bf14      	ite	ne
    4728:	2300      	movne	r3, #0
    472a:	2301      	moveq	r3, #1
    472c:	b2db      	uxtb	r3, r3
    472e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4730:	f001 f9ce 	bl	5ad0 <vPortExitCritical>

	return xReturn;
    4734:	68fb      	ldr	r3, [r7, #12]
}
    4736:	4618      	mov	r0, r3
    4738:	3710      	adds	r7, #16
    473a:	46bd      	mov	sp, r7
    473c:	bd80      	pop	{r7, pc}
    473e:	bf00      	nop

00004740 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    4740:	b480      	push	{r7}
    4742:	b085      	sub	sp, #20
    4744:	af00      	add	r7, sp, #0
    4746:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    4748:	687b      	ldr	r3, [r7, #4]
    474a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    474c:	687b      	ldr	r3, [r7, #4]
    474e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4750:	429a      	cmp	r2, r3
    4752:	bf14      	ite	ne
    4754:	2300      	movne	r3, #0
    4756:	2301      	moveq	r3, #1
    4758:	b2db      	uxtb	r3, r3
    475a:	60fb      	str	r3, [r7, #12]

	return xReturn;
    475c:	68fb      	ldr	r3, [r7, #12]
}
    475e:	4618      	mov	r0, r3
    4760:	3714      	adds	r7, #20
    4762:	46bd      	mov	sp, r7
    4764:	f85d 7b04 	ldr.w	r7, [sp], #4
    4768:	4770      	bx	lr
    476a:	bf00      	nop

0000476c <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    476c:	b580      	push	{r7, lr}
    476e:	b08a      	sub	sp, #40	; 0x28
    4770:	af02      	add	r7, sp, #8
    4772:	60f8      	str	r0, [r7, #12]
    4774:	60b9      	str	r1, [r7, #8]
    4776:	603b      	str	r3, [r7, #0]
    4778:	4613      	mov	r3, r2
    477a:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    477c:	88fb      	ldrh	r3, [r7, #6]
    477e:	4618      	mov	r0, r3
    4780:	6b39      	ldr	r1, [r7, #48]	; 0x30
    4782:	f000 ffe5 	bl	5750 <prvAllocateTCBAndStack>
    4786:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    4788:	69bb      	ldr	r3, [r7, #24]
    478a:	2b00      	cmp	r3, #0
    478c:	f000 80a1 	beq.w	48d2 <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    4790:	69bb      	ldr	r3, [r7, #24]
    4792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4794:	88fb      	ldrh	r3, [r7, #6]
    4796:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    479a:	3b01      	subs	r3, #1
    479c:	009b      	lsls	r3, r3, #2
    479e:	4413      	add	r3, r2
    47a0:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    47a2:	697b      	ldr	r3, [r7, #20]
    47a4:	f023 0307 	bic.w	r3, r3, #7
    47a8:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    47aa:	88fb      	ldrh	r3, [r7, #6]
    47ac:	9300      	str	r3, [sp, #0]
    47ae:	69b8      	ldr	r0, [r7, #24]
    47b0:	68b9      	ldr	r1, [r7, #8]
    47b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    47b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    47b6:	f000 febd 	bl	5534 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    47ba:	6978      	ldr	r0, [r7, #20]
    47bc:	68f9      	ldr	r1, [r7, #12]
    47be:	683a      	ldr	r2, [r7, #0]
    47c0:	f001 f8f2 	bl	59a8 <pxPortInitialiseStack>
    47c4:	4602      	mov	r2, r0
    47c6:	69bb      	ldr	r3, [r7, #24]
    47c8:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    47ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    47cc:	2b00      	cmp	r3, #0
    47ce:	d002      	beq.n	47d6 <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    47d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    47d2:	69ba      	ldr	r2, [r7, #24]
    47d4:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    47d6:	f001 f965 	bl	5aa4 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    47da:	f640 636c 	movw	r3, #3692	; 0xe6c
    47de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47e2:	681b      	ldr	r3, [r3, #0]
    47e4:	1c5a      	adds	r2, r3, #1
    47e6:	f640 636c 	movw	r3, #3692	; 0xe6c
    47ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47ee:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    47f0:	f640 4368 	movw	r3, #3176	; 0xc68
    47f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47f8:	681b      	ldr	r3, [r3, #0]
    47fa:	2b00      	cmp	r3, #0
    47fc:	d10f      	bne.n	481e <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    47fe:	f640 4368 	movw	r3, #3176	; 0xc68
    4802:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4806:	69ba      	ldr	r2, [r7, #24]
    4808:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    480a:	f640 636c 	movw	r3, #3692	; 0xe6c
    480e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4812:	681b      	ldr	r3, [r3, #0]
    4814:	2b01      	cmp	r3, #1
    4816:	d118      	bne.n	484a <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    4818:	f000 fec2 	bl	55a0 <prvInitialiseTaskLists>
    481c:	e015      	b.n	484a <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    481e:	f640 637c 	movw	r3, #3708	; 0xe7c
    4822:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4826:	681b      	ldr	r3, [r3, #0]
    4828:	2b00      	cmp	r3, #0
    482a:	d10e      	bne.n	484a <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    482c:	f640 4368 	movw	r3, #3176	; 0xc68
    4830:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4834:	681b      	ldr	r3, [r3, #0]
    4836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4838:	6abb      	ldr	r3, [r7, #40]	; 0x28
    483a:	429a      	cmp	r2, r3
    483c:	d805      	bhi.n	484a <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    483e:	f640 4368 	movw	r3, #3176	; 0xc68
    4842:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4846:	69ba      	ldr	r2, [r7, #24]
    4848:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    484a:	69bb      	ldr	r3, [r7, #24]
    484c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    484e:	f640 6374 	movw	r3, #3700	; 0xe74
    4852:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4856:	681b      	ldr	r3, [r3, #0]
    4858:	429a      	cmp	r2, r3
    485a:	d906      	bls.n	486a <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    485c:	69bb      	ldr	r3, [r7, #24]
    485e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4860:	f640 6374 	movw	r3, #3700	; 0xe74
    4864:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4868:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    486a:	f640 6390 	movw	r3, #3728	; 0xe90
    486e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4872:	681b      	ldr	r3, [r3, #0]
    4874:	1c5a      	adds	r2, r3, #1
    4876:	f640 6390 	movw	r3, #3728	; 0xe90
    487a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    487e:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    4880:	69bb      	ldr	r3, [r7, #24]
    4882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4884:	f640 6378 	movw	r3, #3704	; 0xe78
    4888:	f2c2 0300 	movt	r3, #8192	; 0x2000
    488c:	681b      	ldr	r3, [r3, #0]
    488e:	429a      	cmp	r2, r3
    4890:	d906      	bls.n	48a0 <xTaskGenericCreate+0x134>
    4892:	69bb      	ldr	r3, [r7, #24]
    4894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4896:	f640 6378 	movw	r3, #3704	; 0xe78
    489a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    489e:	601a      	str	r2, [r3, #0]
    48a0:	69bb      	ldr	r3, [r7, #24]
    48a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    48a4:	4613      	mov	r3, r2
    48a6:	009b      	lsls	r3, r3, #2
    48a8:	4413      	add	r3, r2
    48aa:	009b      	lsls	r3, r3, #2
    48ac:	f640 426c 	movw	r2, #3180	; 0xc6c
    48b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    48b4:	441a      	add	r2, r3
    48b6:	69bb      	ldr	r3, [r7, #24]
    48b8:	3304      	adds	r3, #4
    48ba:	4610      	mov	r0, r2
    48bc:	4619      	mov	r1, r3
    48be:	f7ff fadf 	bl	3e80 <vListInsertEnd>

			xReturn = pdPASS;
    48c2:	2301      	movs	r3, #1
    48c4:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    48c6:	69b8      	ldr	r0, [r7, #24]
    48c8:	f012 fdc2 	bl	17450 <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    48cc:	f001 f900 	bl	5ad0 <vPortExitCritical>
    48d0:	e002      	b.n	48d8 <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    48d2:	f04f 33ff 	mov.w	r3, #4294967295
    48d6:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    48d8:	69fb      	ldr	r3, [r7, #28]
    48da:	2b01      	cmp	r3, #1
    48dc:	d111      	bne.n	4902 <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    48de:	f640 637c 	movw	r3, #3708	; 0xe7c
    48e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48e6:	681b      	ldr	r3, [r3, #0]
    48e8:	2b00      	cmp	r3, #0
    48ea:	d00a      	beq.n	4902 <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    48ec:	f640 4368 	movw	r3, #3176	; 0xc68
    48f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48f4:	681b      	ldr	r3, [r3, #0]
    48f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    48f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    48fa:	429a      	cmp	r2, r3
    48fc:	d201      	bcs.n	4902 <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    48fe:	f001 f8c3 	bl	5a88 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    4902:	69fb      	ldr	r3, [r7, #28]
}
    4904:	4618      	mov	r0, r3
    4906:	3720      	adds	r7, #32
    4908:	46bd      	mov	sp, r7
    490a:	bd80      	pop	{r7, pc}

0000490c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    490c:	b580      	push	{r7, lr}
    490e:	b084      	sub	sp, #16
    4910:	af00      	add	r7, sp, #0
    4912:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4914:	f001 f8c6 	bl	5aa4 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    4918:	f640 4368 	movw	r3, #3176	; 0xc68
    491c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4920:	681b      	ldr	r3, [r3, #0]
    4922:	687a      	ldr	r2, [r7, #4]
    4924:	429a      	cmp	r2, r3
    4926:	d101      	bne.n	492c <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    4928:	2300      	movs	r3, #0
    492a:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    492c:	687b      	ldr	r3, [r7, #4]
    492e:	2b00      	cmp	r3, #0
    4930:	d105      	bne.n	493e <vTaskDelete+0x32>
    4932:	f640 4368 	movw	r3, #3176	; 0xc68
    4936:	f2c2 0300 	movt	r3, #8192	; 0x2000
    493a:	681b      	ldr	r3, [r3, #0]
    493c:	e000      	b.n	4940 <vTaskDelete+0x34>
    493e:	687b      	ldr	r3, [r7, #4]
    4940:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4942:	68fb      	ldr	r3, [r7, #12]
    4944:	3304      	adds	r3, #4
    4946:	4618      	mov	r0, r3
    4948:	f7ff fafa 	bl	3f40 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    494c:	68fb      	ldr	r3, [r7, #12]
    494e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4950:	2b00      	cmp	r3, #0
    4952:	d004      	beq.n	495e <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4954:	68fb      	ldr	r3, [r7, #12]
    4956:	3318      	adds	r3, #24
    4958:	4618      	mov	r0, r3
    495a:	f7ff faf1 	bl	3f40 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    495e:	68fb      	ldr	r3, [r7, #12]
    4960:	3304      	adds	r3, #4
    4962:	f640 6040 	movw	r0, #3648	; 0xe40
    4966:	f2c2 0000 	movt	r0, #8192	; 0x2000
    496a:	4619      	mov	r1, r3
    496c:	f7ff fa88 	bl	3e80 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    4970:	f640 6354 	movw	r3, #3668	; 0xe54
    4974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4978:	681b      	ldr	r3, [r3, #0]
    497a:	1c5a      	adds	r2, r3, #1
    497c:	f640 6354 	movw	r3, #3668	; 0xe54
    4980:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4984:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    4986:	f640 6390 	movw	r3, #3728	; 0xe90
    498a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    498e:	681b      	ldr	r3, [r3, #0]
    4990:	1c5a      	adds	r2, r3, #1
    4992:	f640 6390 	movw	r3, #3728	; 0xe90
    4996:	f2c2 0300 	movt	r3, #8192	; 0x2000
    499a:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    499c:	f001 f898 	bl	5ad0 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    49a0:	f640 637c 	movw	r3, #3708	; 0xe7c
    49a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49a8:	681b      	ldr	r3, [r3, #0]
    49aa:	2b00      	cmp	r3, #0
    49ac:	d004      	beq.n	49b8 <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    49ae:	687b      	ldr	r3, [r7, #4]
    49b0:	2b00      	cmp	r3, #0
    49b2:	d101      	bne.n	49b8 <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    49b4:	f001 f868 	bl	5a88 <vPortYieldFromISR>
			}
		}
	}
    49b8:	3710      	adds	r7, #16
    49ba:	46bd      	mov	sp, r7
    49bc:	bd80      	pop	{r7, pc}
    49be:	bf00      	nop

000049c0 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    49c0:	b580      	push	{r7, lr}
    49c2:	b086      	sub	sp, #24
    49c4:	af00      	add	r7, sp, #0
    49c6:	6078      	str	r0, [r7, #4]
    49c8:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    49ca:	2300      	movs	r3, #0
    49cc:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    49ce:	f000 fa8b 	bl	4ee8 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    49d2:	687b      	ldr	r3, [r7, #4]
    49d4:	681a      	ldr	r2, [r3, #0]
    49d6:	683b      	ldr	r3, [r7, #0]
    49d8:	4413      	add	r3, r2
    49da:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    49dc:	687b      	ldr	r3, [r7, #4]
    49de:	681a      	ldr	r2, [r3, #0]
    49e0:	f640 6370 	movw	r3, #3696	; 0xe70
    49e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49e8:	681b      	ldr	r3, [r3, #0]
    49ea:	429a      	cmp	r2, r3
    49ec:	d90f      	bls.n	4a0e <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    49ee:	687b      	ldr	r3, [r7, #4]
    49f0:	681a      	ldr	r2, [r3, #0]
    49f2:	693b      	ldr	r3, [r7, #16]
    49f4:	429a      	cmp	r2, r3
    49f6:	d919      	bls.n	4a2c <vTaskDelayUntil+0x6c>
    49f8:	f640 6370 	movw	r3, #3696	; 0xe70
    49fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a00:	681b      	ldr	r3, [r3, #0]
    4a02:	693a      	ldr	r2, [r7, #16]
    4a04:	429a      	cmp	r2, r3
    4a06:	d911      	bls.n	4a2c <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4a08:	2301      	movs	r3, #1
    4a0a:	617b      	str	r3, [r7, #20]
    4a0c:	e00e      	b.n	4a2c <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    4a0e:	687b      	ldr	r3, [r7, #4]
    4a10:	681a      	ldr	r2, [r3, #0]
    4a12:	693b      	ldr	r3, [r7, #16]
    4a14:	429a      	cmp	r2, r3
    4a16:	d807      	bhi.n	4a28 <vTaskDelayUntil+0x68>
    4a18:	f640 6370 	movw	r3, #3696	; 0xe70
    4a1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a20:	681b      	ldr	r3, [r3, #0]
    4a22:	693a      	ldr	r2, [r7, #16]
    4a24:	429a      	cmp	r2, r3
    4a26:	d901      	bls.n	4a2c <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4a28:	2301      	movs	r3, #1
    4a2a:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    4a2c:	687b      	ldr	r3, [r7, #4]
    4a2e:	693a      	ldr	r2, [r7, #16]
    4a30:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    4a32:	697b      	ldr	r3, [r7, #20]
    4a34:	2b00      	cmp	r3, #0
    4a36:	d00b      	beq.n	4a50 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4a38:	f640 4368 	movw	r3, #3176	; 0xc68
    4a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a40:	681b      	ldr	r3, [r3, #0]
    4a42:	3304      	adds	r3, #4
    4a44:	4618      	mov	r0, r3
    4a46:	f7ff fa7b 	bl	3f40 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4a4a:	6938      	ldr	r0, [r7, #16]
    4a4c:	f000 fe3c 	bl	56c8 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    4a50:	f000 fa5c 	bl	4f0c <xTaskResumeAll>
    4a54:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4a56:	68fb      	ldr	r3, [r7, #12]
    4a58:	2b00      	cmp	r3, #0
    4a5a:	d101      	bne.n	4a60 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    4a5c:	f001 f814 	bl	5a88 <vPortYieldFromISR>
		}
	}
    4a60:	3718      	adds	r7, #24
    4a62:	46bd      	mov	sp, r7
    4a64:	bd80      	pop	{r7, pc}
    4a66:	bf00      	nop

00004a68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    4a68:	b580      	push	{r7, lr}
    4a6a:	b084      	sub	sp, #16
    4a6c:	af00      	add	r7, sp, #0
    4a6e:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4a70:	2300      	movs	r3, #0
    4a72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    4a74:	687b      	ldr	r3, [r7, #4]
    4a76:	2b00      	cmp	r3, #0
    4a78:	d018      	beq.n	4aac <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    4a7a:	f000 fa35 	bl	4ee8 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    4a7e:	f640 6370 	movw	r3, #3696	; 0xe70
    4a82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a86:	681a      	ldr	r2, [r3, #0]
    4a88:	687b      	ldr	r3, [r7, #4]
    4a8a:	4413      	add	r3, r2
    4a8c:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4a8e:	f640 4368 	movw	r3, #3176	; 0xc68
    4a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a96:	681b      	ldr	r3, [r3, #0]
    4a98:	3304      	adds	r3, #4
    4a9a:	4618      	mov	r0, r3
    4a9c:	f7ff fa50 	bl	3f40 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4aa0:	68b8      	ldr	r0, [r7, #8]
    4aa2:	f000 fe11 	bl	56c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    4aa6:	f000 fa31 	bl	4f0c <xTaskResumeAll>
    4aaa:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4aac:	68fb      	ldr	r3, [r7, #12]
    4aae:	2b00      	cmp	r3, #0
    4ab0:	d101      	bne.n	4ab6 <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    4ab2:	f000 ffe9 	bl	5a88 <vPortYieldFromISR>
		}
	}
    4ab6:	3710      	adds	r7, #16
    4ab8:	46bd      	mov	sp, r7
    4aba:	bd80      	pop	{r7, pc}

00004abc <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    4abc:	b580      	push	{r7, lr}
    4abe:	b084      	sub	sp, #16
    4ac0:	af00      	add	r7, sp, #0
    4ac2:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    4ac4:	f000 ffee 	bl	5aa4 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4ac8:	687b      	ldr	r3, [r7, #4]
    4aca:	2b00      	cmp	r3, #0
    4acc:	d105      	bne.n	4ada <uxTaskPriorityGet+0x1e>
    4ace:	f640 4368 	movw	r3, #3176	; 0xc68
    4ad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ad6:	681b      	ldr	r3, [r3, #0]
    4ad8:	e000      	b.n	4adc <uxTaskPriorityGet+0x20>
    4ada:	687b      	ldr	r3, [r7, #4]
    4adc:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    4ade:	68fb      	ldr	r3, [r7, #12]
    4ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4ae2:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    4ae4:	f000 fff4 	bl	5ad0 <vPortExitCritical>

		return uxReturn;
    4ae8:	68bb      	ldr	r3, [r7, #8]
	}
    4aea:	4618      	mov	r0, r3
    4aec:	3710      	adds	r7, #16
    4aee:	46bd      	mov	sp, r7
    4af0:	bd80      	pop	{r7, pc}
    4af2:	bf00      	nop

00004af4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    4af4:	b580      	push	{r7, lr}
    4af6:	b086      	sub	sp, #24
    4af8:	af00      	add	r7, sp, #0
    4afa:	6078      	str	r0, [r7, #4]
    4afc:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    4afe:	2300      	movs	r3, #0
    4b00:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    4b02:	683b      	ldr	r3, [r7, #0]
    4b04:	2b13      	cmp	r3, #19
    4b06:	d901      	bls.n	4b0c <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4b08:	2313      	movs	r3, #19
    4b0a:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    4b0c:	f000 ffca 	bl	5aa4 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    4b10:	f640 4368 	movw	r3, #3176	; 0xc68
    4b14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b18:	681b      	ldr	r3, [r3, #0]
    4b1a:	687a      	ldr	r2, [r7, #4]
    4b1c:	429a      	cmp	r2, r3
    4b1e:	d101      	bne.n	4b24 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    4b20:	2300      	movs	r3, #0
    4b22:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4b24:	687b      	ldr	r3, [r7, #4]
    4b26:	2b00      	cmp	r3, #0
    4b28:	d105      	bne.n	4b36 <vTaskPrioritySet+0x42>
    4b2a:	f640 4368 	movw	r3, #3176	; 0xc68
    4b2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b32:	681b      	ldr	r3, [r3, #0]
    4b34:	e000      	b.n	4b38 <vTaskPrioritySet+0x44>
    4b36:	687b      	ldr	r3, [r7, #4]
    4b38:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    4b3a:	693b      	ldr	r3, [r7, #16]
    4b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4b3e:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    4b40:	68fa      	ldr	r2, [r7, #12]
    4b42:	683b      	ldr	r3, [r7, #0]
    4b44:	429a      	cmp	r2, r3
    4b46:	d058      	beq.n	4bfa <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    4b48:	683a      	ldr	r2, [r7, #0]
    4b4a:	68fb      	ldr	r3, [r7, #12]
    4b4c:	429a      	cmp	r2, r3
    4b4e:	d905      	bls.n	4b5c <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    4b50:	687b      	ldr	r3, [r7, #4]
    4b52:	2b00      	cmp	r3, #0
    4b54:	d007      	beq.n	4b66 <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    4b56:	2301      	movs	r3, #1
    4b58:	617b      	str	r3, [r7, #20]
    4b5a:	e004      	b.n	4b66 <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    4b5c:	687b      	ldr	r3, [r7, #4]
    4b5e:	2b00      	cmp	r3, #0
    4b60:	d101      	bne.n	4b66 <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    4b62:	2301      	movs	r3, #1
    4b64:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    4b66:	693b      	ldr	r3, [r7, #16]
    4b68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4b6a:	693b      	ldr	r3, [r7, #16]
    4b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4b6e:	429a      	cmp	r2, r3
    4b70:	d102      	bne.n	4b78 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    4b72:	693b      	ldr	r3, [r7, #16]
    4b74:	683a      	ldr	r2, [r7, #0]
    4b76:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    4b78:	693b      	ldr	r3, [r7, #16]
    4b7a:	683a      	ldr	r2, [r7, #0]
    4b7c:	64da      	str	r2, [r3, #76]	; 0x4c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    4b7e:	683b      	ldr	r3, [r7, #0]
    4b80:	f1c3 0214 	rsb	r2, r3, #20
    4b84:	693b      	ldr	r3, [r7, #16]
    4b86:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    4b88:	693b      	ldr	r3, [r7, #16]
    4b8a:	6959      	ldr	r1, [r3, #20]
    4b8c:	68fa      	ldr	r2, [r7, #12]
    4b8e:	4613      	mov	r3, r2
    4b90:	009b      	lsls	r3, r3, #2
    4b92:	4413      	add	r3, r2
    4b94:	009b      	lsls	r3, r3, #2
    4b96:	f640 426c 	movw	r2, #3180	; 0xc6c
    4b9a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4b9e:	4413      	add	r3, r2
    4ba0:	4299      	cmp	r1, r3
    4ba2:	d125      	bne.n	4bf0 <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    4ba4:	693b      	ldr	r3, [r7, #16]
    4ba6:	3304      	adds	r3, #4
    4ba8:	4618      	mov	r0, r3
    4baa:	f7ff f9c9 	bl	3f40 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4bae:	693b      	ldr	r3, [r7, #16]
    4bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bb2:	f640 6378 	movw	r3, #3704	; 0xe78
    4bb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bba:	681b      	ldr	r3, [r3, #0]
    4bbc:	429a      	cmp	r2, r3
    4bbe:	d906      	bls.n	4bce <vTaskPrioritySet+0xda>
    4bc0:	693b      	ldr	r3, [r7, #16]
    4bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bc4:	f640 6378 	movw	r3, #3704	; 0xe78
    4bc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bcc:	601a      	str	r2, [r3, #0]
    4bce:	693b      	ldr	r3, [r7, #16]
    4bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bd2:	4613      	mov	r3, r2
    4bd4:	009b      	lsls	r3, r3, #2
    4bd6:	4413      	add	r3, r2
    4bd8:	009b      	lsls	r3, r3, #2
    4bda:	f640 426c 	movw	r2, #3180	; 0xc6c
    4bde:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4be2:	441a      	add	r2, r3
    4be4:	693b      	ldr	r3, [r7, #16]
    4be6:	3304      	adds	r3, #4
    4be8:	4610      	mov	r0, r2
    4bea:	4619      	mov	r1, r3
    4bec:	f7ff f948 	bl	3e80 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    4bf0:	697b      	ldr	r3, [r7, #20]
    4bf2:	2b01      	cmp	r3, #1
    4bf4:	d101      	bne.n	4bfa <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    4bf6:	f000 ff47 	bl	5a88 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    4bfa:	f000 ff69 	bl	5ad0 <vPortExitCritical>
	}
    4bfe:	3718      	adds	r7, #24
    4c00:	46bd      	mov	sp, r7
    4c02:	bd80      	pop	{r7, pc}

00004c04 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    4c04:	b580      	push	{r7, lr}
    4c06:	b084      	sub	sp, #16
    4c08:	af00      	add	r7, sp, #0
    4c0a:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4c0c:	f000 ff4a 	bl	5aa4 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    4c10:	f640 4368 	movw	r3, #3176	; 0xc68
    4c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c18:	681b      	ldr	r3, [r3, #0]
    4c1a:	687a      	ldr	r2, [r7, #4]
    4c1c:	429a      	cmp	r2, r3
    4c1e:	d101      	bne.n	4c24 <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    4c20:	2300      	movs	r3, #0
    4c22:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    4c24:	687b      	ldr	r3, [r7, #4]
    4c26:	2b00      	cmp	r3, #0
    4c28:	d105      	bne.n	4c36 <vTaskSuspend+0x32>
    4c2a:	f640 4368 	movw	r3, #3176	; 0xc68
    4c2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c32:	681b      	ldr	r3, [r3, #0]
    4c34:	e000      	b.n	4c38 <vTaskSuspend+0x34>
    4c36:	687b      	ldr	r3, [r7, #4]
    4c38:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4c3a:	68fb      	ldr	r3, [r7, #12]
    4c3c:	3304      	adds	r3, #4
    4c3e:	4618      	mov	r0, r3
    4c40:	f7ff f97e 	bl	3f40 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4c44:	68fb      	ldr	r3, [r7, #12]
    4c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c48:	2b00      	cmp	r3, #0
    4c4a:	d004      	beq.n	4c56 <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4c4c:	68fb      	ldr	r3, [r7, #12]
    4c4e:	3318      	adds	r3, #24
    4c50:	4618      	mov	r0, r3
    4c52:	f7ff f975 	bl	3f40 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    4c56:	68fb      	ldr	r3, [r7, #12]
    4c58:	3304      	adds	r3, #4
    4c5a:	f640 6058 	movw	r0, #3672	; 0xe58
    4c5e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4c62:	4619      	mov	r1, r3
    4c64:	f7ff f90c 	bl	3e80 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    4c68:	f000 ff32 	bl	5ad0 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    4c6c:	687b      	ldr	r3, [r7, #4]
    4c6e:	2b00      	cmp	r3, #0
    4c70:	d11e      	bne.n	4cb0 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    4c72:	f640 637c 	movw	r3, #3708	; 0xe7c
    4c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c7a:	681b      	ldr	r3, [r3, #0]
    4c7c:	2b00      	cmp	r3, #0
    4c7e:	d002      	beq.n	4c86 <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    4c80:	f000 ff02 	bl	5a88 <vPortYieldFromISR>
    4c84:	e014      	b.n	4cb0 <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    4c86:	f640 6358 	movw	r3, #3672	; 0xe58
    4c8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c8e:	681a      	ldr	r2, [r3, #0]
    4c90:	f640 636c 	movw	r3, #3692	; 0xe6c
    4c94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c98:	681b      	ldr	r3, [r3, #0]
    4c9a:	429a      	cmp	r2, r3
    4c9c:	d106      	bne.n	4cac <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    4c9e:	f640 4368 	movw	r3, #3176	; 0xc68
    4ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ca6:	2200      	movs	r2, #0
    4ca8:	601a      	str	r2, [r3, #0]
    4caa:	e001      	b.n	4cb0 <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    4cac:	f000 fadc 	bl	5268 <vTaskSwitchContext>
				}
			}
		}
	}
    4cb0:	3710      	adds	r7, #16
    4cb2:	46bd      	mov	sp, r7
    4cb4:	bd80      	pop	{r7, pc}
    4cb6:	bf00      	nop

00004cb8 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    4cb8:	b480      	push	{r7}
    4cba:	b085      	sub	sp, #20
    4cbc:	af00      	add	r7, sp, #0
    4cbe:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    4cc0:	2300      	movs	r3, #0
    4cc2:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    4cc4:	687b      	ldr	r3, [r7, #4]
    4cc6:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4cc8:	68bb      	ldr	r3, [r7, #8]
    4cca:	695a      	ldr	r2, [r3, #20]
    4ccc:	f640 6358 	movw	r3, #3672	; 0xe58
    4cd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cd4:	429a      	cmp	r2, r3
    4cd6:	d10d      	bne.n	4cf4 <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    4cd8:	68bb      	ldr	r3, [r7, #8]
    4cda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4cdc:	f640 632c 	movw	r3, #3628	; 0xe2c
    4ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ce4:	429a      	cmp	r2, r3
    4ce6:	d005      	beq.n	4cf4 <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    4ce8:	68bb      	ldr	r3, [r7, #8]
    4cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4cec:	2b00      	cmp	r3, #0
    4cee:	d101      	bne.n	4cf4 <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    4cf0:	2301      	movs	r3, #1
    4cf2:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    4cf4:	68fb      	ldr	r3, [r7, #12]
	}
    4cf6:	4618      	mov	r0, r3
    4cf8:	3714      	adds	r7, #20
    4cfa:	46bd      	mov	sp, r7
    4cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d00:	4770      	bx	lr
    4d02:	bf00      	nop

00004d04 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    4d04:	b580      	push	{r7, lr}
    4d06:	b084      	sub	sp, #16
    4d08:	af00      	add	r7, sp, #0
    4d0a:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    4d0c:	687b      	ldr	r3, [r7, #4]
    4d0e:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    4d10:	68fb      	ldr	r3, [r7, #12]
    4d12:	2b00      	cmp	r3, #0
    4d14:	d043      	beq.n	4d9e <vTaskResume+0x9a>
    4d16:	f640 4368 	movw	r3, #3176	; 0xc68
    4d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d1e:	681b      	ldr	r3, [r3, #0]
    4d20:	68fa      	ldr	r2, [r7, #12]
    4d22:	429a      	cmp	r2, r3
    4d24:	d03b      	beq.n	4d9e <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    4d26:	f000 febd 	bl	5aa4 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4d2a:	68f8      	ldr	r0, [r7, #12]
    4d2c:	f7ff ffc4 	bl	4cb8 <xTaskIsTaskSuspended>
    4d30:	4603      	mov	r3, r0
    4d32:	2b01      	cmp	r3, #1
    4d34:	d131      	bne.n	4d9a <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4d36:	68fb      	ldr	r3, [r7, #12]
    4d38:	3304      	adds	r3, #4
    4d3a:	4618      	mov	r0, r3
    4d3c:	f7ff f900 	bl	3f40 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4d40:	68fb      	ldr	r3, [r7, #12]
    4d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4d44:	f640 6378 	movw	r3, #3704	; 0xe78
    4d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d4c:	681b      	ldr	r3, [r3, #0]
    4d4e:	429a      	cmp	r2, r3
    4d50:	d906      	bls.n	4d60 <vTaskResume+0x5c>
    4d52:	68fb      	ldr	r3, [r7, #12]
    4d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4d56:	f640 6378 	movw	r3, #3704	; 0xe78
    4d5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d5e:	601a      	str	r2, [r3, #0]
    4d60:	68fb      	ldr	r3, [r7, #12]
    4d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4d64:	4613      	mov	r3, r2
    4d66:	009b      	lsls	r3, r3, #2
    4d68:	4413      	add	r3, r2
    4d6a:	009b      	lsls	r3, r3, #2
    4d6c:	f640 426c 	movw	r2, #3180	; 0xc6c
    4d70:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4d74:	441a      	add	r2, r3
    4d76:	68fb      	ldr	r3, [r7, #12]
    4d78:	3304      	adds	r3, #4
    4d7a:	4610      	mov	r0, r2
    4d7c:	4619      	mov	r1, r3
    4d7e:	f7ff f87f 	bl	3e80 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4d82:	68fb      	ldr	r3, [r7, #12]
    4d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4d86:	f640 4368 	movw	r3, #3176	; 0xc68
    4d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d8e:	681b      	ldr	r3, [r3, #0]
    4d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4d92:	429a      	cmp	r2, r3
    4d94:	d301      	bcc.n	4d9a <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    4d96:	f000 fe77 	bl	5a88 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    4d9a:	f000 fe99 	bl	5ad0 <vPortExitCritical>
		}
	}
    4d9e:	3710      	adds	r7, #16
    4da0:	46bd      	mov	sp, r7
    4da2:	bd80      	pop	{r7, pc}

00004da4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    4da4:	b580      	push	{r7, lr}
    4da6:	b086      	sub	sp, #24
    4da8:	af00      	add	r7, sp, #0
    4daa:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    4dac:	2300      	movs	r3, #0
    4dae:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    4db0:	687b      	ldr	r3, [r7, #4]
    4db2:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4db4:	2300      	movs	r3, #0
    4db6:	60fb      	str	r3, [r7, #12]
    4db8:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4dbc:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4dc0:	6938      	ldr	r0, [r7, #16]
    4dc2:	f7ff ff79 	bl	4cb8 <xTaskIsTaskSuspended>
    4dc6:	4603      	mov	r3, r0
    4dc8:	2b01      	cmp	r3, #1
    4dca:	d144      	bne.n	4e56 <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4dcc:	f640 6380 	movw	r3, #3712	; 0xe80
    4dd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dd4:	681b      	ldr	r3, [r3, #0]
    4dd6:	2b00      	cmp	r3, #0
    4dd8:	d134      	bne.n	4e44 <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    4dda:	693b      	ldr	r3, [r7, #16]
    4ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4dde:	f640 4368 	movw	r3, #3176	; 0xc68
    4de2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4de6:	681b      	ldr	r3, [r3, #0]
    4de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4dea:	429a      	cmp	r2, r3
    4dec:	bf34      	ite	cc
    4dee:	2300      	movcc	r3, #0
    4df0:	2301      	movcs	r3, #1
    4df2:	b2db      	uxtb	r3, r3
    4df4:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4df6:	693b      	ldr	r3, [r7, #16]
    4df8:	3304      	adds	r3, #4
    4dfa:	4618      	mov	r0, r3
    4dfc:	f7ff f8a0 	bl	3f40 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4e00:	693b      	ldr	r3, [r7, #16]
    4e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e04:	f640 6378 	movw	r3, #3704	; 0xe78
    4e08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e0c:	681b      	ldr	r3, [r3, #0]
    4e0e:	429a      	cmp	r2, r3
    4e10:	d906      	bls.n	4e20 <xTaskResumeFromISR+0x7c>
    4e12:	693b      	ldr	r3, [r7, #16]
    4e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e16:	f640 6378 	movw	r3, #3704	; 0xe78
    4e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e1e:	601a      	str	r2, [r3, #0]
    4e20:	693b      	ldr	r3, [r7, #16]
    4e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e24:	4613      	mov	r3, r2
    4e26:	009b      	lsls	r3, r3, #2
    4e28:	4413      	add	r3, r2
    4e2a:	009b      	lsls	r3, r3, #2
    4e2c:	f640 426c 	movw	r2, #3180	; 0xc6c
    4e30:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4e34:	441a      	add	r2, r3
    4e36:	693b      	ldr	r3, [r7, #16]
    4e38:	3304      	adds	r3, #4
    4e3a:	4610      	mov	r0, r2
    4e3c:	4619      	mov	r1, r3
    4e3e:	f7ff f81f 	bl	3e80 <vListInsertEnd>
    4e42:	e008      	b.n	4e56 <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4e44:	693b      	ldr	r3, [r7, #16]
    4e46:	3318      	adds	r3, #24
    4e48:	f640 602c 	movw	r0, #3628	; 0xe2c
    4e4c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4e50:	4619      	mov	r1, r3
    4e52:	f7ff f815 	bl	3e80 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4e56:	f04f 0000 	mov.w	r0, #0
    4e5a:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    4e5e:	697b      	ldr	r3, [r7, #20]
	}
    4e60:	4618      	mov	r0, r3
    4e62:	3718      	adds	r7, #24
    4e64:	46bd      	mov	sp, r7
    4e66:	bd80      	pop	{r7, pc}

00004e68 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    4e68:	b580      	push	{r7, lr}
    4e6a:	b086      	sub	sp, #24
    4e6c:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    4e6e:	2300      	movs	r3, #0
    4e70:	9300      	str	r3, [sp, #0]
    4e72:	2300      	movs	r3, #0
    4e74:	9301      	str	r3, [sp, #4]
    4e76:	2300      	movs	r3, #0
    4e78:	9302      	str	r3, [sp, #8]
    4e7a:	2300      	movs	r3, #0
    4e7c:	9303      	str	r3, [sp, #12]
    4e7e:	f245 5021 	movw	r0, #21793	; 0x5521
    4e82:	f2c0 0000 	movt	r0, #0
    4e86:	f248 71f0 	movw	r1, #34800	; 0x87f0
    4e8a:	f2c0 0101 	movt	r1, #1
    4e8e:	2280      	movs	r2, #128	; 0x80
    4e90:	2300      	movs	r3, #0
    4e92:	f7ff fc6b 	bl	476c <xTaskGenericCreate>
    4e96:	6078      	str	r0, [r7, #4]
            
		}
	}
	#endif

	if( xReturn == pdPASS )
    4e98:	687b      	ldr	r3, [r7, #4]
    4e9a:	2b01      	cmp	r3, #1
    4e9c:	d111      	bne.n	4ec2 <vTaskStartScheduler+0x5a>
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */

		portDISABLE_INTERRUPTS();
    4e9e:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4ea2:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    4ea6:	f640 637c 	movw	r3, #3708	; 0xe7c
    4eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eae:	2201      	movs	r2, #1
    4eb0:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    4eb2:	f640 6370 	movw	r3, #3696	; 0xe70
    4eb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eba:	2200      	movs	r2, #0
    4ebc:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    4ebe:	f000 fdb5 	bl	5a2c <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    4ec2:	3708      	adds	r7, #8
    4ec4:	46bd      	mov	sp, r7
    4ec6:	bd80      	pop	{r7, pc}

00004ec8 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    4ec8:	b580      	push	{r7, lr}
    4eca:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    4ecc:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4ed0:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    4ed4:	f640 637c 	movw	r3, #3708	; 0xe7c
    4ed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4edc:	2200      	movs	r2, #0
    4ede:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    4ee0:	f000 fdcc 	bl	5a7c <vPortEndScheduler>
}
    4ee4:	bd80      	pop	{r7, pc}
    4ee6:	bf00      	nop

00004ee8 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    4ee8:	b480      	push	{r7}
    4eea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    4eec:	f640 6380 	movw	r3, #3712	; 0xe80
    4ef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ef4:	681b      	ldr	r3, [r3, #0]
    4ef6:	1c5a      	adds	r2, r3, #1
    4ef8:	f640 6380 	movw	r3, #3712	; 0xe80
    4efc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f00:	601a      	str	r2, [r3, #0]
}
    4f02:	46bd      	mov	sp, r7
    4f04:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f08:	4770      	bx	lr
    4f0a:	bf00      	nop

00004f0c <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    4f0c:	b590      	push	{r4, r7, lr}
    4f0e:	b083      	sub	sp, #12
    4f10:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4f12:	2300      	movs	r3, #0
    4f14:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    4f16:	f000 fdc5 	bl	5aa4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    4f1a:	f640 6380 	movw	r3, #3712	; 0xe80
    4f1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f22:	681b      	ldr	r3, [r3, #0]
    4f24:	1e5a      	subs	r2, r3, #1
    4f26:	f640 6380 	movw	r3, #3712	; 0xe80
    4f2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f2e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4f30:	f640 6380 	movw	r3, #3712	; 0xe80
    4f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f38:	681b      	ldr	r3, [r3, #0]
    4f3a:	2b00      	cmp	r3, #0
    4f3c:	d177      	bne.n	502e <xTaskResumeAll+0x122>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    4f3e:	f640 636c 	movw	r3, #3692	; 0xe6c
    4f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f46:	681b      	ldr	r3, [r3, #0]
    4f48:	2b00      	cmp	r3, #0
    4f4a:	d070      	beq.n	502e <xTaskResumeAll+0x122>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    4f4c:	2300      	movs	r3, #0
    4f4e:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    4f50:	e036      	b.n	4fc0 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    4f52:	f640 632c 	movw	r3, #3628	; 0xe2c
    4f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f5a:	68db      	ldr	r3, [r3, #12]
    4f5c:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    4f5e:	f104 0318 	add.w	r3, r4, #24
    4f62:	4618      	mov	r0, r3
    4f64:	f7fe ffec 	bl	3f40 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    4f68:	1d23      	adds	r3, r4, #4
    4f6a:	4618      	mov	r0, r3
    4f6c:	f7fe ffe8 	bl	3f40 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4f70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4f72:	f640 6378 	movw	r3, #3704	; 0xe78
    4f76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f7a:	681b      	ldr	r3, [r3, #0]
    4f7c:	429a      	cmp	r2, r3
    4f7e:	d905      	bls.n	4f8c <xTaskResumeAll+0x80>
    4f80:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4f82:	f640 6378 	movw	r3, #3704	; 0xe78
    4f86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f8a:	601a      	str	r2, [r3, #0]
    4f8c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4f8e:	4613      	mov	r3, r2
    4f90:	009b      	lsls	r3, r3, #2
    4f92:	4413      	add	r3, r2
    4f94:	009b      	lsls	r3, r3, #2
    4f96:	f640 426c 	movw	r2, #3180	; 0xc6c
    4f9a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4f9e:	441a      	add	r2, r3
    4fa0:	1d23      	adds	r3, r4, #4
    4fa2:	4610      	mov	r0, r2
    4fa4:	4619      	mov	r1, r3
    4fa6:	f7fe ff6b 	bl	3e80 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4faa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4fac:	f640 4368 	movw	r3, #3176	; 0xc68
    4fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fb4:	681b      	ldr	r3, [r3, #0]
    4fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4fb8:	429a      	cmp	r2, r3
    4fba:	d301      	bcc.n	4fc0 <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    4fbc:	2301      	movs	r3, #1
    4fbe:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    4fc0:	f640 632c 	movw	r3, #3628	; 0xe2c
    4fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fc8:	681b      	ldr	r3, [r3, #0]
    4fca:	2b00      	cmp	r3, #0
    4fcc:	d1c1      	bne.n	4f52 <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4fce:	f640 6384 	movw	r3, #3716	; 0xe84
    4fd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fd6:	681b      	ldr	r3, [r3, #0]
    4fd8:	2b00      	cmp	r3, #0
    4fda:	d014      	beq.n	5006 <xTaskResumeAll+0xfa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4fdc:	e00c      	b.n	4ff8 <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    4fde:	f000 f865 	bl	50ac <vTaskIncrementTick>
						--uxMissedTicks;
    4fe2:	f640 6384 	movw	r3, #3716	; 0xe84
    4fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fea:	681b      	ldr	r3, [r3, #0]
    4fec:	1e5a      	subs	r2, r3, #1
    4fee:	f640 6384 	movw	r3, #3716	; 0xe84
    4ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ff6:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4ff8:	f640 6384 	movw	r3, #3716	; 0xe84
    4ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5000:	681b      	ldr	r3, [r3, #0]
    5002:	2b00      	cmp	r3, #0
    5004:	d1eb      	bne.n	4fde <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    5006:	683b      	ldr	r3, [r7, #0]
    5008:	2b01      	cmp	r3, #1
    500a:	d006      	beq.n	501a <xTaskResumeAll+0x10e>
    500c:	f640 6388 	movw	r3, #3720	; 0xe88
    5010:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5014:	681b      	ldr	r3, [r3, #0]
    5016:	2b01      	cmp	r3, #1
    5018:	d109      	bne.n	502e <xTaskResumeAll+0x122>
				{
					xAlreadyYielded = pdTRUE;
    501a:	2301      	movs	r3, #1
    501c:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    501e:	f640 6388 	movw	r3, #3720	; 0xe88
    5022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5026:	2200      	movs	r2, #0
    5028:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    502a:	f000 fd2d 	bl	5a88 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    502e:	f000 fd4f 	bl	5ad0 <vPortExitCritical>

	return xAlreadyYielded;
    5032:	687b      	ldr	r3, [r7, #4]
}
    5034:	4618      	mov	r0, r3
    5036:	370c      	adds	r7, #12
    5038:	46bd      	mov	sp, r7
    503a:	bd90      	pop	{r4, r7, pc}

0000503c <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    503c:	b580      	push	{r7, lr}
    503e:	b082      	sub	sp, #8
    5040:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    5042:	f000 fd2f 	bl	5aa4 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    5046:	f640 6370 	movw	r3, #3696	; 0xe70
    504a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    504e:	681b      	ldr	r3, [r3, #0]
    5050:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    5052:	f000 fd3d 	bl	5ad0 <vPortExitCritical>

	return xTicks;
    5056:	687b      	ldr	r3, [r7, #4]
}
    5058:	4618      	mov	r0, r3
    505a:	3708      	adds	r7, #8
    505c:	46bd      	mov	sp, r7
    505e:	bd80      	pop	{r7, pc}

00005060 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    5060:	b480      	push	{r7}
    5062:	b083      	sub	sp, #12
    5064:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    5066:	2300      	movs	r3, #0
    5068:	607b      	str	r3, [r7, #4]
    506a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    506e:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    5072:	f640 6370 	movw	r3, #3696	; 0xe70
    5076:	f2c2 0300 	movt	r3, #8192	; 0x2000
    507a:	681b      	ldr	r3, [r3, #0]
    507c:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    507e:	f04f 0000 	mov.w	r0, #0
    5082:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    5086:	683b      	ldr	r3, [r7, #0]
}
    5088:	4618      	mov	r0, r3
    508a:	370c      	adds	r7, #12
    508c:	46bd      	mov	sp, r7
    508e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5092:	4770      	bx	lr

00005094 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    5094:	b480      	push	{r7}
    5096:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    5098:	f640 636c 	movw	r3, #3692	; 0xe6c
    509c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50a0:	681b      	ldr	r3, [r3, #0]
}
    50a2:	4618      	mov	r0, r3
    50a4:	46bd      	mov	sp, r7
    50a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    50aa:	4770      	bx	lr

000050ac <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    50ac:	b580      	push	{r7, lr}
    50ae:	b084      	sub	sp, #16
    50b0:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    50b2:	f640 6380 	movw	r3, #3712	; 0xe80
    50b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50ba:	681b      	ldr	r3, [r3, #0]
    50bc:	2b00      	cmp	r3, #0
    50be:	f040 80b9 	bne.w	5234 <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    50c2:	f640 6370 	movw	r3, #3696	; 0xe70
    50c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50ca:	681b      	ldr	r3, [r3, #0]
    50cc:	1c5a      	adds	r2, r3, #1
    50ce:	f640 6370 	movw	r3, #3696	; 0xe70
    50d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50d6:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    50d8:	f640 6370 	movw	r3, #3696	; 0xe70
    50dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50e0:	681b      	ldr	r3, [r3, #0]
    50e2:	2b00      	cmp	r3, #0
    50e4:	d13f      	bne.n	5166 <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    50e6:	f640 6324 	movw	r3, #3620	; 0xe24
    50ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50ee:	681b      	ldr	r3, [r3, #0]
    50f0:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    50f2:	f640 6328 	movw	r3, #3624	; 0xe28
    50f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50fa:	681a      	ldr	r2, [r3, #0]
    50fc:	f640 6324 	movw	r3, #3620	; 0xe24
    5100:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5104:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    5106:	f640 6328 	movw	r3, #3624	; 0xe28
    510a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    510e:	68fa      	ldr	r2, [r7, #12]
    5110:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    5112:	f640 638c 	movw	r3, #3724	; 0xe8c
    5116:	f2c2 0300 	movt	r3, #8192	; 0x2000
    511a:	681b      	ldr	r3, [r3, #0]
    511c:	1c5a      	adds	r2, r3, #1
    511e:	f640 638c 	movw	r3, #3724	; 0xe8c
    5122:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5126:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    5128:	f640 6324 	movw	r3, #3620	; 0xe24
    512c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5130:	681b      	ldr	r3, [r3, #0]
    5132:	681b      	ldr	r3, [r3, #0]
    5134:	2b00      	cmp	r3, #0
    5136:	d107      	bne.n	5148 <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    5138:	f240 33e0 	movw	r3, #992	; 0x3e0
    513c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5140:	f04f 32ff 	mov.w	r2, #4294967295
    5144:	601a      	str	r2, [r3, #0]
    5146:	e00e      	b.n	5166 <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    5148:	f640 6324 	movw	r3, #3620	; 0xe24
    514c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5150:	681b      	ldr	r3, [r3, #0]
    5152:	68db      	ldr	r3, [r3, #12]
    5154:	68db      	ldr	r3, [r3, #12]
    5156:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    5158:	68bb      	ldr	r3, [r7, #8]
    515a:	685a      	ldr	r2, [r3, #4]
    515c:	f240 33e0 	movw	r3, #992	; 0x3e0
    5160:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5164:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    5166:	f640 6370 	movw	r3, #3696	; 0xe70
    516a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    516e:	681a      	ldr	r2, [r3, #0]
    5170:	f240 33e0 	movw	r3, #992	; 0x3e0
    5174:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5178:	681b      	ldr	r3, [r3, #0]
    517a:	429a      	cmp	r2, r3
    517c:	d359      	bcc.n	5232 <vTaskIncrementTick+0x186>
    517e:	f640 6324 	movw	r3, #3620	; 0xe24
    5182:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5186:	681b      	ldr	r3, [r3, #0]
    5188:	681b      	ldr	r3, [r3, #0]
    518a:	2b00      	cmp	r3, #0
    518c:	d107      	bne.n	519e <vTaskIncrementTick+0xf2>
    518e:	f240 33e0 	movw	r3, #992	; 0x3e0
    5192:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5196:	f04f 32ff 	mov.w	r2, #4294967295
    519a:	601a      	str	r2, [r3, #0]
    519c:	e049      	b.n	5232 <vTaskIncrementTick+0x186>
    519e:	f640 6324 	movw	r3, #3620	; 0xe24
    51a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51a6:	681b      	ldr	r3, [r3, #0]
    51a8:	68db      	ldr	r3, [r3, #12]
    51aa:	68db      	ldr	r3, [r3, #12]
    51ac:	60bb      	str	r3, [r7, #8]
    51ae:	68bb      	ldr	r3, [r7, #8]
    51b0:	685b      	ldr	r3, [r3, #4]
    51b2:	607b      	str	r3, [r7, #4]
    51b4:	f640 6370 	movw	r3, #3696	; 0xe70
    51b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51bc:	681a      	ldr	r2, [r3, #0]
    51be:	687b      	ldr	r3, [r7, #4]
    51c0:	429a      	cmp	r2, r3
    51c2:	d206      	bcs.n	51d2 <vTaskIncrementTick+0x126>
    51c4:	f240 33e0 	movw	r3, #992	; 0x3e0
    51c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51cc:	687a      	ldr	r2, [r7, #4]
    51ce:	601a      	str	r2, [r3, #0]
    51d0:	e02f      	b.n	5232 <vTaskIncrementTick+0x186>
    51d2:	68bb      	ldr	r3, [r7, #8]
    51d4:	3304      	adds	r3, #4
    51d6:	4618      	mov	r0, r3
    51d8:	f7fe feb2 	bl	3f40 <vListRemove>
    51dc:	68bb      	ldr	r3, [r7, #8]
    51de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    51e0:	2b00      	cmp	r3, #0
    51e2:	d004      	beq.n	51ee <vTaskIncrementTick+0x142>
    51e4:	68bb      	ldr	r3, [r7, #8]
    51e6:	3318      	adds	r3, #24
    51e8:	4618      	mov	r0, r3
    51ea:	f7fe fea9 	bl	3f40 <vListRemove>
    51ee:	68bb      	ldr	r3, [r7, #8]
    51f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    51f2:	f640 6378 	movw	r3, #3704	; 0xe78
    51f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51fa:	681b      	ldr	r3, [r3, #0]
    51fc:	429a      	cmp	r2, r3
    51fe:	d906      	bls.n	520e <vTaskIncrementTick+0x162>
    5200:	68bb      	ldr	r3, [r7, #8]
    5202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5204:	f640 6378 	movw	r3, #3704	; 0xe78
    5208:	f2c2 0300 	movt	r3, #8192	; 0x2000
    520c:	601a      	str	r2, [r3, #0]
    520e:	68bb      	ldr	r3, [r7, #8]
    5210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5212:	4613      	mov	r3, r2
    5214:	009b      	lsls	r3, r3, #2
    5216:	4413      	add	r3, r2
    5218:	009b      	lsls	r3, r3, #2
    521a:	f640 426c 	movw	r2, #3180	; 0xc6c
    521e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5222:	441a      	add	r2, r3
    5224:	68bb      	ldr	r3, [r7, #8]
    5226:	3304      	adds	r3, #4
    5228:	4610      	mov	r0, r2
    522a:	4619      	mov	r1, r3
    522c:	f7fe fe28 	bl	3e80 <vListInsertEnd>
    5230:	e7a5      	b.n	517e <vTaskIncrementTick+0xd2>
    5232:	e00c      	b.n	524e <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    5234:	f640 6384 	movw	r3, #3716	; 0xe84
    5238:	f2c2 0300 	movt	r3, #8192	; 0x2000
    523c:	681b      	ldr	r3, [r3, #0]
    523e:	1c5a      	adds	r2, r3, #1
    5240:	f640 6384 	movw	r3, #3716	; 0xe84
    5244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5248:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    524a:	f012 f913 	bl	17474 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    524e:	f640 6384 	movw	r3, #3716	; 0xe84
    5252:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5256:	681b      	ldr	r3, [r3, #0]
    5258:	2b00      	cmp	r3, #0
    525a:	d101      	bne.n	5260 <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    525c:	f012 f90a 	bl	17474 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    5260:	3710      	adds	r7, #16
    5262:	46bd      	mov	sp, r7
    5264:	bd80      	pop	{r7, pc}
    5266:	bf00      	nop

00005268 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    5268:	b580      	push	{r7, lr}
    526a:	b082      	sub	sp, #8
    526c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    526e:	f640 6380 	movw	r3, #3712	; 0xe80
    5272:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5276:	681b      	ldr	r3, [r3, #0]
    5278:	2b00      	cmp	r3, #0
    527a:	d006      	beq.n	528a <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    527c:	f640 6388 	movw	r3, #3720	; 0xe88
    5280:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5284:	2201      	movs	r2, #1
    5286:	601a      	str	r2, [r3, #0]
    5288:	e047      	b.n	531a <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    528a:	f012 f8ed 	bl	17468 <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    528e:	e00a      	b.n	52a6 <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    5290:	f640 6378 	movw	r3, #3704	; 0xe78
    5294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5298:	681b      	ldr	r3, [r3, #0]
    529a:	1e5a      	subs	r2, r3, #1
    529c:	f640 6378 	movw	r3, #3704	; 0xe78
    52a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52a4:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    52a6:	f640 6378 	movw	r3, #3704	; 0xe78
    52aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52ae:	6819      	ldr	r1, [r3, #0]
    52b0:	f640 426c 	movw	r2, #3180	; 0xc6c
    52b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    52b8:	460b      	mov	r3, r1
    52ba:	009b      	lsls	r3, r3, #2
    52bc:	440b      	add	r3, r1
    52be:	009b      	lsls	r3, r3, #2
    52c0:	4413      	add	r3, r2
    52c2:	681b      	ldr	r3, [r3, #0]
    52c4:	2b00      	cmp	r3, #0
    52c6:	d0e3      	beq.n	5290 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    52c8:	f640 6378 	movw	r3, #3704	; 0xe78
    52cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52d0:	681a      	ldr	r2, [r3, #0]
    52d2:	4613      	mov	r3, r2
    52d4:	009b      	lsls	r3, r3, #2
    52d6:	4413      	add	r3, r2
    52d8:	009b      	lsls	r3, r3, #2
    52da:	f640 426c 	movw	r2, #3180	; 0xc6c
    52de:	f2c2 0200 	movt	r2, #8192	; 0x2000
    52e2:	4413      	add	r3, r2
    52e4:	607b      	str	r3, [r7, #4]
    52e6:	687b      	ldr	r3, [r7, #4]
    52e8:	685b      	ldr	r3, [r3, #4]
    52ea:	685a      	ldr	r2, [r3, #4]
    52ec:	687b      	ldr	r3, [r7, #4]
    52ee:	605a      	str	r2, [r3, #4]
    52f0:	687b      	ldr	r3, [r7, #4]
    52f2:	685a      	ldr	r2, [r3, #4]
    52f4:	687b      	ldr	r3, [r7, #4]
    52f6:	3308      	adds	r3, #8
    52f8:	429a      	cmp	r2, r3
    52fa:	d104      	bne.n	5306 <vTaskSwitchContext+0x9e>
    52fc:	687b      	ldr	r3, [r7, #4]
    52fe:	685b      	ldr	r3, [r3, #4]
    5300:	685a      	ldr	r2, [r3, #4]
    5302:	687b      	ldr	r3, [r7, #4]
    5304:	605a      	str	r2, [r3, #4]
    5306:	687b      	ldr	r3, [r7, #4]
    5308:	685b      	ldr	r3, [r3, #4]
    530a:	68da      	ldr	r2, [r3, #12]
    530c:	f640 4368 	movw	r3, #3176	; 0xc68
    5310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5314:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
    5316:	f012 f8a1 	bl	1745c <myTraceSwitchedIn>
	}
}
    531a:	3708      	adds	r7, #8
    531c:	46bd      	mov	sp, r7
    531e:	bd80      	pop	{r7, pc}

00005320 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    5320:	b580      	push	{r7, lr}
    5322:	b084      	sub	sp, #16
    5324:	af00      	add	r7, sp, #0
    5326:	6078      	str	r0, [r7, #4]
    5328:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    532a:	f640 4368 	movw	r3, #3176	; 0xc68
    532e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5332:	681b      	ldr	r3, [r3, #0]
    5334:	3318      	adds	r3, #24
    5336:	6878      	ldr	r0, [r7, #4]
    5338:	4619      	mov	r1, r3
    533a:	f7fe fdc9 	bl	3ed0 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    533e:	f640 4368 	movw	r3, #3176	; 0xc68
    5342:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5346:	681b      	ldr	r3, [r3, #0]
    5348:	3304      	adds	r3, #4
    534a:	4618      	mov	r0, r3
    534c:	f7fe fdf8 	bl	3f40 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    5350:	683b      	ldr	r3, [r7, #0]
    5352:	f1b3 3fff 	cmp.w	r3, #4294967295
    5356:	d10d      	bne.n	5374 <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5358:	f640 4368 	movw	r3, #3176	; 0xc68
    535c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5360:	681b      	ldr	r3, [r3, #0]
    5362:	3304      	adds	r3, #4
    5364:	f640 6058 	movw	r0, #3672	; 0xe58
    5368:	f2c2 0000 	movt	r0, #8192	; 0x2000
    536c:	4619      	mov	r1, r3
    536e:	f7fe fd87 	bl	3e80 <vListInsertEnd>
    5372:	e00a      	b.n	538a <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    5374:	f640 6370 	movw	r3, #3696	; 0xe70
    5378:	f2c2 0300 	movt	r3, #8192	; 0x2000
    537c:	681a      	ldr	r2, [r3, #0]
    537e:	683b      	ldr	r3, [r7, #0]
    5380:	4413      	add	r3, r2
    5382:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    5384:	68f8      	ldr	r0, [r7, #12]
    5386:	f000 f99f 	bl	56c8 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    538a:	3710      	adds	r7, #16
    538c:	46bd      	mov	sp, r7
    538e:	bd80      	pop	{r7, pc}

00005390 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    5390:	b580      	push	{r7, lr}
    5392:	b084      	sub	sp, #16
    5394:	af00      	add	r7, sp, #0
    5396:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    5398:	687b      	ldr	r3, [r7, #4]
    539a:	68db      	ldr	r3, [r3, #12]
    539c:	68db      	ldr	r3, [r3, #12]
    539e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    53a0:	68bb      	ldr	r3, [r7, #8]
    53a2:	3318      	adds	r3, #24
    53a4:	4618      	mov	r0, r3
    53a6:	f7fe fdcb 	bl	3f40 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    53aa:	f640 6380 	movw	r3, #3712	; 0xe80
    53ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53b2:	681b      	ldr	r3, [r3, #0]
    53b4:	2b00      	cmp	r3, #0
    53b6:	d126      	bne.n	5406 <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    53b8:	68bb      	ldr	r3, [r7, #8]
    53ba:	3304      	adds	r3, #4
    53bc:	4618      	mov	r0, r3
    53be:	f7fe fdbf 	bl	3f40 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    53c2:	68bb      	ldr	r3, [r7, #8]
    53c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    53c6:	f640 6378 	movw	r3, #3704	; 0xe78
    53ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ce:	681b      	ldr	r3, [r3, #0]
    53d0:	429a      	cmp	r2, r3
    53d2:	d906      	bls.n	53e2 <xTaskRemoveFromEventList+0x52>
    53d4:	68bb      	ldr	r3, [r7, #8]
    53d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    53d8:	f640 6378 	movw	r3, #3704	; 0xe78
    53dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53e0:	601a      	str	r2, [r3, #0]
    53e2:	68bb      	ldr	r3, [r7, #8]
    53e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    53e6:	4613      	mov	r3, r2
    53e8:	009b      	lsls	r3, r3, #2
    53ea:	4413      	add	r3, r2
    53ec:	009b      	lsls	r3, r3, #2
    53ee:	f640 426c 	movw	r2, #3180	; 0xc6c
    53f2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    53f6:	441a      	add	r2, r3
    53f8:	68bb      	ldr	r3, [r7, #8]
    53fa:	3304      	adds	r3, #4
    53fc:	4610      	mov	r0, r2
    53fe:	4619      	mov	r1, r3
    5400:	f7fe fd3e 	bl	3e80 <vListInsertEnd>
    5404:	e008      	b.n	5418 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    5406:	68bb      	ldr	r3, [r7, #8]
    5408:	3318      	adds	r3, #24
    540a:	f640 602c 	movw	r0, #3628	; 0xe2c
    540e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5412:	4619      	mov	r1, r3
    5414:	f7fe fd34 	bl	3e80 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5418:	68bb      	ldr	r3, [r7, #8]
    541a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    541c:	f640 4368 	movw	r3, #3176	; 0xc68
    5420:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5424:	681b      	ldr	r3, [r3, #0]
    5426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5428:	429a      	cmp	r2, r3
    542a:	d302      	bcc.n	5432 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    542c:	2301      	movs	r3, #1
    542e:	60fb      	str	r3, [r7, #12]
    5430:	e001      	b.n	5436 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    5432:	2300      	movs	r3, #0
    5434:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    5436:	68fb      	ldr	r3, [r7, #12]
}
    5438:	4618      	mov	r0, r3
    543a:	3710      	adds	r7, #16
    543c:	46bd      	mov	sp, r7
    543e:	bd80      	pop	{r7, pc}

00005440 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    5440:	b480      	push	{r7}
    5442:	b083      	sub	sp, #12
    5444:	af00      	add	r7, sp, #0
    5446:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    5448:	f640 638c 	movw	r3, #3724	; 0xe8c
    544c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5450:	681a      	ldr	r2, [r3, #0]
    5452:	687b      	ldr	r3, [r7, #4]
    5454:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    5456:	f640 6370 	movw	r3, #3696	; 0xe70
    545a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    545e:	681a      	ldr	r2, [r3, #0]
    5460:	687b      	ldr	r3, [r7, #4]
    5462:	605a      	str	r2, [r3, #4]
}
    5464:	370c      	adds	r7, #12
    5466:	46bd      	mov	sp, r7
    5468:	f85d 7b04 	ldr.w	r7, [sp], #4
    546c:	4770      	bx	lr
    546e:	bf00      	nop

00005470 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    5470:	b580      	push	{r7, lr}
    5472:	b084      	sub	sp, #16
    5474:	af00      	add	r7, sp, #0
    5476:	6078      	str	r0, [r7, #4]
    5478:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    547a:	f000 fb13 	bl	5aa4 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    547e:	683b      	ldr	r3, [r7, #0]
    5480:	681b      	ldr	r3, [r3, #0]
    5482:	f1b3 3fff 	cmp.w	r3, #4294967295
    5486:	d102      	bne.n	548e <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    5488:	2300      	movs	r3, #0
    548a:	60fb      	str	r3, [r7, #12]
    548c:	e035      	b.n	54fa <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    548e:	687b      	ldr	r3, [r7, #4]
    5490:	681a      	ldr	r2, [r3, #0]
    5492:	f640 638c 	movw	r3, #3724	; 0xe8c
    5496:	f2c2 0300 	movt	r3, #8192	; 0x2000
    549a:	681b      	ldr	r3, [r3, #0]
    549c:	429a      	cmp	r2, r3
    549e:	d00b      	beq.n	54b8 <xTaskCheckForTimeOut+0x48>
    54a0:	687b      	ldr	r3, [r7, #4]
    54a2:	685a      	ldr	r2, [r3, #4]
    54a4:	f640 6370 	movw	r3, #3696	; 0xe70
    54a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54ac:	681b      	ldr	r3, [r3, #0]
    54ae:	429a      	cmp	r2, r3
    54b0:	d802      	bhi.n	54b8 <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    54b2:	2301      	movs	r3, #1
    54b4:	60fb      	str	r3, [r7, #12]
    54b6:	e020      	b.n	54fa <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    54b8:	f640 6370 	movw	r3, #3696	; 0xe70
    54bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54c0:	681a      	ldr	r2, [r3, #0]
    54c2:	687b      	ldr	r3, [r7, #4]
    54c4:	685b      	ldr	r3, [r3, #4]
    54c6:	1ad2      	subs	r2, r2, r3
    54c8:	683b      	ldr	r3, [r7, #0]
    54ca:	681b      	ldr	r3, [r3, #0]
    54cc:	429a      	cmp	r2, r3
    54ce:	d212      	bcs.n	54f6 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    54d0:	683b      	ldr	r3, [r7, #0]
    54d2:	681a      	ldr	r2, [r3, #0]
    54d4:	687b      	ldr	r3, [r7, #4]
    54d6:	6859      	ldr	r1, [r3, #4]
    54d8:	f640 6370 	movw	r3, #3696	; 0xe70
    54dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54e0:	681b      	ldr	r3, [r3, #0]
    54e2:	1acb      	subs	r3, r1, r3
    54e4:	441a      	add	r2, r3
    54e6:	683b      	ldr	r3, [r7, #0]
    54e8:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    54ea:	6878      	ldr	r0, [r7, #4]
    54ec:	f7ff ffa8 	bl	5440 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    54f0:	2300      	movs	r3, #0
    54f2:	60fb      	str	r3, [r7, #12]
    54f4:	e001      	b.n	54fa <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    54f6:	2301      	movs	r3, #1
    54f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    54fa:	f000 fae9 	bl	5ad0 <vPortExitCritical>

	return xReturn;
    54fe:	68fb      	ldr	r3, [r7, #12]
}
    5500:	4618      	mov	r0, r3
    5502:	3710      	adds	r7, #16
    5504:	46bd      	mov	sp, r7
    5506:	bd80      	pop	{r7, pc}

00005508 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    5508:	b480      	push	{r7}
    550a:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    550c:	f640 6388 	movw	r3, #3720	; 0xe88
    5510:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5514:	2201      	movs	r2, #1
    5516:	601a      	str	r2, [r3, #0]
}
    5518:	46bd      	mov	sp, r7
    551a:	f85d 7b04 	ldr.w	r7, [sp], #4
    551e:	4770      	bx	lr

00005520 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    5520:	b580      	push	{r7, lr}
    5522:	b082      	sub	sp, #8
    5524:	af00      	add	r7, sp, #0
    5526:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    5528:	f000 f886 	bl	5638 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    552c:	f000 faac 	bl	5a88 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    5530:	e7fa      	b.n	5528 <prvIdleTask+0x8>
    5532:	bf00      	nop

00005534 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    5534:	b580      	push	{r7, lr}
    5536:	b084      	sub	sp, #16
    5538:	af00      	add	r7, sp, #0
    553a:	60f8      	str	r0, [r7, #12]
    553c:	60b9      	str	r1, [r7, #8]
    553e:	607a      	str	r2, [r7, #4]
    5540:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    5542:	68fb      	ldr	r3, [r7, #12]
    5544:	3334      	adds	r3, #52	; 0x34
    5546:	4618      	mov	r0, r3
    5548:	68b9      	ldr	r1, [r7, #8]
    554a:	2210      	movs	r2, #16
    554c:	f013 f8b0 	bl	186b0 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    5550:	68fb      	ldr	r3, [r7, #12]
    5552:	2200      	movs	r2, #0
    5554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    5558:	687b      	ldr	r3, [r7, #4]
    555a:	2b13      	cmp	r3, #19
    555c:	d901      	bls.n	5562 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    555e:	2313      	movs	r3, #19
    5560:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    5562:	68fb      	ldr	r3, [r7, #12]
    5564:	687a      	ldr	r2, [r7, #4]
    5566:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    5568:	68fb      	ldr	r3, [r7, #12]
    556a:	687a      	ldr	r2, [r7, #4]
    556c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    556e:	68fb      	ldr	r3, [r7, #12]
    5570:	3304      	adds	r3, #4
    5572:	4618      	mov	r0, r3
    5574:	f7fe fc78 	bl	3e68 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    5578:	68fb      	ldr	r3, [r7, #12]
    557a:	3318      	adds	r3, #24
    557c:	4618      	mov	r0, r3
    557e:	f7fe fc73 	bl	3e68 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    5582:	68fb      	ldr	r3, [r7, #12]
    5584:	68fa      	ldr	r2, [r7, #12]
    5586:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    5588:	687b      	ldr	r3, [r7, #4]
    558a:	f1c3 0214 	rsb	r2, r3, #20
    558e:	68fb      	ldr	r3, [r7, #12]
    5590:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    5592:	68fb      	ldr	r3, [r7, #12]
    5594:	68fa      	ldr	r2, [r7, #12]
    5596:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    5598:	3710      	adds	r7, #16
    559a:	46bd      	mov	sp, r7
    559c:	bd80      	pop	{r7, pc}
    559e:	bf00      	nop

000055a0 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    55a0:	b580      	push	{r7, lr}
    55a2:	b082      	sub	sp, #8
    55a4:	af00      	add	r7, sp, #0
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    55a6:	2300      	movs	r3, #0
    55a8:	607b      	str	r3, [r7, #4]
    55aa:	e00f      	b.n	55cc <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    55ac:	687a      	ldr	r2, [r7, #4]
    55ae:	4613      	mov	r3, r2
    55b0:	009b      	lsls	r3, r3, #2
    55b2:	4413      	add	r3, r2
    55b4:	009b      	lsls	r3, r3, #2
    55b6:	f640 426c 	movw	r2, #3180	; 0xc6c
    55ba:	f2c2 0200 	movt	r2, #8192	; 0x2000
    55be:	4413      	add	r3, r2
    55c0:	4618      	mov	r0, r3
    55c2:	f7fe fc31 	bl	3e28 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    55c6:	687b      	ldr	r3, [r7, #4]
    55c8:	3301      	adds	r3, #1
    55ca:	607b      	str	r3, [r7, #4]
    55cc:	687b      	ldr	r3, [r7, #4]
    55ce:	2b13      	cmp	r3, #19
    55d0:	d9ec      	bls.n	55ac <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    55d2:	f640 50fc 	movw	r0, #3580	; 0xdfc
    55d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    55da:	f7fe fc25 	bl	3e28 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    55de:	f640 6010 	movw	r0, #3600	; 0xe10
    55e2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    55e6:	f7fe fc1f 	bl	3e28 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    55ea:	f640 602c 	movw	r0, #3628	; 0xe2c
    55ee:	f2c2 0000 	movt	r0, #8192	; 0x2000
    55f2:	f7fe fc19 	bl	3e28 <vListInitialise>


	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    55f6:	f640 6040 	movw	r0, #3648	; 0xe40
    55fa:	f2c2 0000 	movt	r0, #8192	; 0x2000
    55fe:	f7fe fc13 	bl	3e28 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    5602:	f640 6058 	movw	r0, #3672	; 0xe58
    5606:	f2c2 0000 	movt	r0, #8192	; 0x2000
    560a:	f7fe fc0d 	bl	3e28 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    560e:	f640 6324 	movw	r3, #3620	; 0xe24
    5612:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5616:	f640 52fc 	movw	r2, #3580	; 0xdfc
    561a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    561e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    5620:	f640 6328 	movw	r3, #3624	; 0xe28
    5624:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5628:	f640 6210 	movw	r2, #3600	; 0xe10
    562c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5630:	601a      	str	r2, [r3, #0]
}
    5632:	3708      	adds	r7, #8
    5634:	46bd      	mov	sp, r7
    5636:	bd80      	pop	{r7, pc}

00005638 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    5638:	b580      	push	{r7, lr}
    563a:	b082      	sub	sp, #8
    563c:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    563e:	f640 6354 	movw	r3, #3668	; 0xe54
    5642:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5646:	681b      	ldr	r3, [r3, #0]
    5648:	2b00      	cmp	r3, #0
    564a:	d03a      	beq.n	56c2 <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    564c:	f7ff fc4c 	bl	4ee8 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    5650:	f640 6340 	movw	r3, #3648	; 0xe40
    5654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5658:	681b      	ldr	r3, [r3, #0]
    565a:	2b00      	cmp	r3, #0
    565c:	bf14      	ite	ne
    565e:	2300      	movne	r3, #0
    5660:	2301      	moveq	r3, #1
    5662:	b2db      	uxtb	r3, r3
    5664:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    5666:	f7ff fc51 	bl	4f0c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    566a:	687b      	ldr	r3, [r7, #4]
    566c:	2b00      	cmp	r3, #0
    566e:	d128      	bne.n	56c2 <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    5670:	f000 fa18 	bl	5aa4 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    5674:	f640 6340 	movw	r3, #3648	; 0xe40
    5678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    567c:	68db      	ldr	r3, [r3, #12]
    567e:	68db      	ldr	r3, [r3, #12]
    5680:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    5682:	683b      	ldr	r3, [r7, #0]
    5684:	3304      	adds	r3, #4
    5686:	4618      	mov	r0, r3
    5688:	f7fe fc5a 	bl	3f40 <vListRemove>
					--uxCurrentNumberOfTasks;
    568c:	f640 636c 	movw	r3, #3692	; 0xe6c
    5690:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5694:	681b      	ldr	r3, [r3, #0]
    5696:	1e5a      	subs	r2, r3, #1
    5698:	f640 636c 	movw	r3, #3692	; 0xe6c
    569c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56a0:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    56a2:	f640 6354 	movw	r3, #3668	; 0xe54
    56a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56aa:	681b      	ldr	r3, [r3, #0]
    56ac:	1e5a      	subs	r2, r3, #1
    56ae:	f640 6354 	movw	r3, #3668	; 0xe54
    56b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56b6:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    56b8:	f000 fa0a 	bl	5ad0 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    56bc:	6838      	ldr	r0, [r7, #0]
    56be:	f000 f879 	bl	57b4 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    56c2:	3708      	adds	r7, #8
    56c4:	46bd      	mov	sp, r7
    56c6:	bd80      	pop	{r7, pc}

000056c8 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    56c8:	b580      	push	{r7, lr}
    56ca:	b082      	sub	sp, #8
    56cc:	af00      	add	r7, sp, #0
    56ce:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    56d0:	f640 4368 	movw	r3, #3176	; 0xc68
    56d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56d8:	681b      	ldr	r3, [r3, #0]
    56da:	687a      	ldr	r2, [r7, #4]
    56dc:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    56de:	f640 6370 	movw	r3, #3696	; 0xe70
    56e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56e6:	681b      	ldr	r3, [r3, #0]
    56e8:	687a      	ldr	r2, [r7, #4]
    56ea:	429a      	cmp	r2, r3
    56ec:	d20f      	bcs.n	570e <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    56ee:	f640 6328 	movw	r3, #3624	; 0xe28
    56f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56f6:	681a      	ldr	r2, [r3, #0]
    56f8:	f640 4368 	movw	r3, #3176	; 0xc68
    56fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5700:	681b      	ldr	r3, [r3, #0]
    5702:	3304      	adds	r3, #4
    5704:	4610      	mov	r0, r2
    5706:	4619      	mov	r1, r3
    5708:	f7fe fbe2 	bl	3ed0 <vListInsert>
    570c:	e01c      	b.n	5748 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    570e:	f640 6324 	movw	r3, #3620	; 0xe24
    5712:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5716:	681a      	ldr	r2, [r3, #0]
    5718:	f640 4368 	movw	r3, #3176	; 0xc68
    571c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5720:	681b      	ldr	r3, [r3, #0]
    5722:	3304      	adds	r3, #4
    5724:	4610      	mov	r0, r2
    5726:	4619      	mov	r1, r3
    5728:	f7fe fbd2 	bl	3ed0 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    572c:	f240 33e0 	movw	r3, #992	; 0x3e0
    5730:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5734:	681b      	ldr	r3, [r3, #0]
    5736:	687a      	ldr	r2, [r7, #4]
    5738:	429a      	cmp	r2, r3
    573a:	d205      	bcs.n	5748 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    573c:	f240 33e0 	movw	r3, #992	; 0x3e0
    5740:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5744:	687a      	ldr	r2, [r7, #4]
    5746:	601a      	str	r2, [r3, #0]
		}
	}
}
    5748:	3708      	adds	r7, #8
    574a:	46bd      	mov	sp, r7
    574c:	bd80      	pop	{r7, pc}
    574e:	bf00      	nop

00005750 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    5750:	b580      	push	{r7, lr}
    5752:	b084      	sub	sp, #16
    5754:	af00      	add	r7, sp, #0
    5756:	4603      	mov	r3, r0
    5758:	6039      	str	r1, [r7, #0]
    575a:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    575c:	2050      	movs	r0, #80	; 0x50
    575e:	f000 fa1b 	bl	5b98 <pvPortMalloc>
    5762:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    5764:	68fb      	ldr	r3, [r7, #12]
    5766:	2b00      	cmp	r3, #0
    5768:	d01f      	beq.n	57aa <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    576a:	683b      	ldr	r3, [r7, #0]
    576c:	2b00      	cmp	r3, #0
    576e:	d106      	bne.n	577e <prvAllocateTCBAndStack+0x2e>
    5770:	88fb      	ldrh	r3, [r7, #6]
    5772:	009b      	lsls	r3, r3, #2
    5774:	4618      	mov	r0, r3
    5776:	f000 fa0f 	bl	5b98 <pvPortMalloc>
    577a:	4603      	mov	r3, r0
    577c:	e000      	b.n	5780 <prvAllocateTCBAndStack+0x30>
    577e:	683b      	ldr	r3, [r7, #0]
    5780:	68fa      	ldr	r2, [r7, #12]
    5782:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    5784:	68fb      	ldr	r3, [r7, #12]
    5786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5788:	2b00      	cmp	r3, #0
    578a:	d105      	bne.n	5798 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    578c:	68f8      	ldr	r0, [r7, #12]
    578e:	f000 fac7 	bl	5d20 <vPortFree>
			pxNewTCB = NULL;
    5792:	2300      	movs	r3, #0
    5794:	60fb      	str	r3, [r7, #12]
    5796:	e008      	b.n	57aa <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    5798:	68fb      	ldr	r3, [r7, #12]
    579a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    579c:	88fb      	ldrh	r3, [r7, #6]
    579e:	009b      	lsls	r3, r3, #2
    57a0:	4610      	mov	r0, r2
    57a2:	21a5      	movs	r1, #165	; 0xa5
    57a4:	461a      	mov	r2, r3
    57a6:	f012 ff33 	bl	18610 <memset>
		}
	}

	return pxNewTCB;
    57aa:	68fb      	ldr	r3, [r7, #12]
}
    57ac:	4618      	mov	r0, r3
    57ae:	3710      	adds	r7, #16
    57b0:	46bd      	mov	sp, r7
    57b2:	bd80      	pop	{r7, pc}

000057b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    57b4:	b580      	push	{r7, lr}
    57b6:	b082      	sub	sp, #8
    57b8:	af00      	add	r7, sp, #0
    57ba:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    57bc:	687b      	ldr	r3, [r7, #4]
    57be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    57c0:	4618      	mov	r0, r3
    57c2:	f000 faad 	bl	5d20 <vPortFree>
		vPortFree( pxTCB );
    57c6:	6878      	ldr	r0, [r7, #4]
    57c8:	f000 faaa 	bl	5d20 <vPortFree>
	}
    57cc:	3708      	adds	r7, #8
    57ce:	46bd      	mov	sp, r7
    57d0:	bd80      	pop	{r7, pc}
    57d2:	bf00      	nop

000057d4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    57d4:	b480      	push	{r7}
    57d6:	b083      	sub	sp, #12
    57d8:	af00      	add	r7, sp, #0
        xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    57da:	f640 4368 	movw	r3, #3176	; 0xc68
    57de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57e2:	681b      	ldr	r3, [r3, #0]
    57e4:	607b      	str	r3, [r7, #4]

		return xReturn;
    57e6:	687b      	ldr	r3, [r7, #4]
	}
    57e8:	4618      	mov	r0, r3
    57ea:	370c      	adds	r7, #12
    57ec:	46bd      	mov	sp, r7
    57ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    57f2:	4770      	bx	lr

000057f4 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    57f4:	b580      	push	{r7, lr}
    57f6:	b084      	sub	sp, #16
    57f8:	af00      	add	r7, sp, #0
    57fa:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    57fc:	687b      	ldr	r3, [r7, #4]
    57fe:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    5800:	68fb      	ldr	r3, [r7, #12]
    5802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5804:	f640 4368 	movw	r3, #3176	; 0xc68
    5808:	f2c2 0300 	movt	r3, #8192	; 0x2000
    580c:	681b      	ldr	r3, [r3, #0]
    580e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5810:	429a      	cmp	r2, r3
    5812:	d24f      	bcs.n	58b4 <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    5814:	f640 4368 	movw	r3, #3176	; 0xc68
    5818:	f2c2 0300 	movt	r3, #8192	; 0x2000
    581c:	681b      	ldr	r3, [r3, #0]
    581e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5820:	f1c3 0214 	rsb	r2, r3, #20
    5824:	68fb      	ldr	r3, [r7, #12]
    5826:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    5828:	68fb      	ldr	r3, [r7, #12]
    582a:	6959      	ldr	r1, [r3, #20]
    582c:	68fb      	ldr	r3, [r7, #12]
    582e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5830:	4613      	mov	r3, r2
    5832:	009b      	lsls	r3, r3, #2
    5834:	4413      	add	r3, r2
    5836:	009b      	lsls	r3, r3, #2
    5838:	f640 426c 	movw	r2, #3180	; 0xc6c
    583c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5840:	4413      	add	r3, r2
    5842:	4299      	cmp	r1, r3
    5844:	d12e      	bne.n	58a4 <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    5846:	68fb      	ldr	r3, [r7, #12]
    5848:	3304      	adds	r3, #4
    584a:	4618      	mov	r0, r3
    584c:	f7fe fb78 	bl	3f40 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5850:	f640 4368 	movw	r3, #3176	; 0xc68
    5854:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5858:	681b      	ldr	r3, [r3, #0]
    585a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    585c:	68fb      	ldr	r3, [r7, #12]
    585e:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    5860:	68fb      	ldr	r3, [r7, #12]
    5862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5864:	f640 6378 	movw	r3, #3704	; 0xe78
    5868:	f2c2 0300 	movt	r3, #8192	; 0x2000
    586c:	681b      	ldr	r3, [r3, #0]
    586e:	429a      	cmp	r2, r3
    5870:	d906      	bls.n	5880 <vTaskPriorityInherit+0x8c>
    5872:	68fb      	ldr	r3, [r7, #12]
    5874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5876:	f640 6378 	movw	r3, #3704	; 0xe78
    587a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    587e:	601a      	str	r2, [r3, #0]
    5880:	68fb      	ldr	r3, [r7, #12]
    5882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5884:	4613      	mov	r3, r2
    5886:	009b      	lsls	r3, r3, #2
    5888:	4413      	add	r3, r2
    588a:	009b      	lsls	r3, r3, #2
    588c:	f640 426c 	movw	r2, #3180	; 0xc6c
    5890:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5894:	441a      	add	r2, r3
    5896:	68fb      	ldr	r3, [r7, #12]
    5898:	3304      	adds	r3, #4
    589a:	4610      	mov	r0, r2
    589c:	4619      	mov	r1, r3
    589e:	f7fe faef 	bl	3e80 <vListInsertEnd>
    58a2:	e007      	b.n	58b4 <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    58a4:	f640 4368 	movw	r3, #3176	; 0xc68
    58a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58ac:	681b      	ldr	r3, [r3, #0]
    58ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    58b0:	68fb      	ldr	r3, [r7, #12]
    58b2:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    58b4:	3710      	adds	r7, #16
    58b6:	46bd      	mov	sp, r7
    58b8:	bd80      	pop	{r7, pc}
    58ba:	bf00      	nop

000058bc <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    58bc:	b580      	push	{r7, lr}
    58be:	b084      	sub	sp, #16
    58c0:	af00      	add	r7, sp, #0
    58c2:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    58c4:	687b      	ldr	r3, [r7, #4]
    58c6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    58c8:	687b      	ldr	r3, [r7, #4]
    58ca:	2b00      	cmp	r3, #0
    58cc:	d035      	beq.n	593a <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    58ce:	68fb      	ldr	r3, [r7, #12]
    58d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    58d2:	68fb      	ldr	r3, [r7, #12]
    58d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    58d6:	429a      	cmp	r2, r3
    58d8:	d02f      	beq.n	593a <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    58da:	68fb      	ldr	r3, [r7, #12]
    58dc:	3304      	adds	r3, #4
    58de:	4618      	mov	r0, r3
    58e0:	f7fe fb2e 	bl	3f40 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    58e4:	68fb      	ldr	r3, [r7, #12]
    58e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    58e8:	68fb      	ldr	r3, [r7, #12]
    58ea:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    58ec:	68fb      	ldr	r3, [r7, #12]
    58ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    58f0:	f1c3 0214 	rsb	r2, r3, #20
    58f4:	68fb      	ldr	r3, [r7, #12]
    58f6:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    58f8:	68fb      	ldr	r3, [r7, #12]
    58fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    58fc:	f640 6378 	movw	r3, #3704	; 0xe78
    5900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5904:	681b      	ldr	r3, [r3, #0]
    5906:	429a      	cmp	r2, r3
    5908:	d906      	bls.n	5918 <vTaskPriorityDisinherit+0x5c>
    590a:	68fb      	ldr	r3, [r7, #12]
    590c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    590e:	f640 6378 	movw	r3, #3704	; 0xe78
    5912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5916:	601a      	str	r2, [r3, #0]
    5918:	68fb      	ldr	r3, [r7, #12]
    591a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    591c:	4613      	mov	r3, r2
    591e:	009b      	lsls	r3, r3, #2
    5920:	4413      	add	r3, r2
    5922:	009b      	lsls	r3, r3, #2
    5924:	f640 426c 	movw	r2, #3180	; 0xc6c
    5928:	f2c2 0200 	movt	r2, #8192	; 0x2000
    592c:	441a      	add	r2, r3
    592e:	68fb      	ldr	r3, [r7, #12]
    5930:	3304      	adds	r3, #4
    5932:	4610      	mov	r0, r2
    5934:	4619      	mov	r1, r3
    5936:	f7fe faa3 	bl	3e80 <vListInsertEnd>
			}
		}
	}
    593a:	3710      	adds	r7, #16
    593c:	46bd      	mov	sp, r7
    593e:	bd80      	pop	{r7, pc}

00005940 <xTaskGetxStartTime>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_SEFM == 1)

    portTickType xTaskGetxStartTime( xTaskHandle pxTCB )
    {
    5940:	b480      	push	{r7}
    5942:	b083      	sub	sp, #12
    5944:	af00      	add	r7, sp, #0
    5946:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xStartTime;
    5948:	687b      	ldr	r3, [r7, #4]
    594a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    }
    594c:	4618      	mov	r0, r3
    594e:	370c      	adds	r7, #12
    5950:	46bd      	mov	sp, r7
    5952:	f85d 7b04 	ldr.w	r7, [sp], #4
    5956:	4770      	bx	lr

00005958 <xTaskGetxLet>:

    portTickType xTaskGetxLet( xTaskHandle pxTCB )
    {
    5958:	b480      	push	{r7}
    595a:	b083      	sub	sp, #12
    595c:	af00      	add	r7, sp, #0
    595e:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xLet;
    5960:	687b      	ldr	r3, [r7, #4]
    5962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
    5964:	4618      	mov	r0, r3
    5966:	370c      	adds	r7, #12
    5968:	46bd      	mov	sp, r7
    596a:	f85d 7b04 	ldr.w	r7, [sp], #4
    596e:	4770      	bx	lr

00005970 <vTaskSetxStartTime>:

    void vTaskSetxStartTime ( xTaskHandle pxTCB, portTickType xStartTime )
    {
    5970:	b480      	push	{r7}
    5972:	b083      	sub	sp, #12
    5974:	af00      	add	r7, sp, #0
    5976:	6078      	str	r0, [r7, #4]
    5978:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xStartTime = xStartTime; 
    597a:	687b      	ldr	r3, [r7, #4]
    597c:	683a      	ldr	r2, [r7, #0]
    597e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    5980:	370c      	adds	r7, #12
    5982:	46bd      	mov	sp, r7
    5984:	f85d 7b04 	ldr.w	r7, [sp], #4
    5988:	4770      	bx	lr
    598a:	bf00      	nop

0000598c <vTaskSetxLet>:

    void vTaskSetxLet( xTaskHandle pxTCB, portTickType xLet )
    {
    598c:	b480      	push	{r7}
    598e:	b083      	sub	sp, #12
    5990:	af00      	add	r7, sp, #0
    5992:	6078      	str	r0, [r7, #4]
    5994:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xLet = xLet;
    5996:	687b      	ldr	r3, [r7, #4]
    5998:	683a      	ldr	r2, [r7, #0]
    599a:	649a      	str	r2, [r3, #72]	; 0x48
    }
    599c:	370c      	adds	r7, #12
    599e:	46bd      	mov	sp, r7
    59a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    59a4:	4770      	bx	lr
    59a6:	bf00      	nop

000059a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    59a8:	b480      	push	{r7}
    59aa:	b085      	sub	sp, #20
    59ac:	af00      	add	r7, sp, #0
    59ae:	60f8      	str	r0, [r7, #12]
    59b0:	60b9      	str	r1, [r7, #8]
    59b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    59b4:	68fb      	ldr	r3, [r7, #12]
    59b6:	3b04      	subs	r3, #4
    59b8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    59ba:	68fb      	ldr	r3, [r7, #12]
    59bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    59c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    59c2:	68fb      	ldr	r3, [r7, #12]
    59c4:	3b04      	subs	r3, #4
    59c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    59c8:	68ba      	ldr	r2, [r7, #8]
    59ca:	68fb      	ldr	r3, [r7, #12]
    59cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    59ce:	68fb      	ldr	r3, [r7, #12]
    59d0:	3b04      	subs	r3, #4
    59d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    59d4:	68fb      	ldr	r3, [r7, #12]
    59d6:	2200      	movs	r2, #0
    59d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    59da:	68fb      	ldr	r3, [r7, #12]
    59dc:	3b14      	subs	r3, #20
    59de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    59e0:	687a      	ldr	r2, [r7, #4]
    59e2:	68fb      	ldr	r3, [r7, #12]
    59e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    59e6:	68fb      	ldr	r3, [r7, #12]
    59e8:	3b20      	subs	r3, #32
    59ea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    59ec:	68fb      	ldr	r3, [r7, #12]
}
    59ee:	4618      	mov	r0, r3
    59f0:	3714      	adds	r7, #20
    59f2:	46bd      	mov	sp, r7
    59f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    59f8:	4770      	bx	lr
    59fa:	bf00      	nop

000059fc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    59fc:	4b06      	ldr	r3, [pc, #24]	; (5a18 <pxCurrentTCBConst2>)
    59fe:	6819      	ldr	r1, [r3, #0]
    5a00:	6808      	ldr	r0, [r1, #0]
    5a02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5a06:	f380 8809 	msr	PSP, r0
    5a0a:	f04f 0000 	mov.w	r0, #0
    5a0e:	f380 8811 	msr	BASEPRI, r0
    5a12:	f04e 0e0d 	orr.w	lr, lr, #13
    5a16:	4770      	bx	lr

00005a18 <pxCurrentTCBConst2>:
    5a18:	20000c68 	.word	0x20000c68

00005a1c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    5a1c:	485d      	ldr	r0, [pc, #372]	; (5b94 <prvSetupTimerInterrupt+0x2c>)
    5a1e:	6800      	ldr	r0, [r0, #0]
    5a20:	6800      	ldr	r0, [r0, #0]
    5a22:	f380 8808 	msr	MSP, r0
    5a26:	b662      	cpsie	i
    5a28:	df00      	svc	0
    5a2a:	bf00      	nop

00005a2c <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    5a2c:	b580      	push	{r7, lr}
    5a2e:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    5a30:	f64e 5320 	movw	r3, #60704	; 0xed20
    5a34:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5a38:	f64e 5220 	movw	r2, #60704	; 0xed20
    5a3c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5a40:	6812      	ldr	r2, [r2, #0]
    5a42:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    5a46:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    5a48:	f64e 5320 	movw	r3, #60704	; 0xed20
    5a4c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5a50:	f64e 5220 	movw	r2, #60704	; 0xed20
    5a54:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5a58:	6812      	ldr	r2, [r2, #0]
    5a5a:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    5a5e:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    5a60:	f000 f882 	bl	5b68 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    5a64:	f240 33e4 	movw	r3, #996	; 0x3e4
    5a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a6c:	2200      	movs	r2, #0
    5a6e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    5a70:	f7ff ffd4 	bl	5a1c <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    5a74:	2300      	movs	r3, #0
}
    5a76:	4618      	mov	r0, r3
    5a78:	bd80      	pop	{r7, pc}
    5a7a:	bf00      	nop

00005a7c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    5a7c:	b480      	push	{r7}
    5a7e:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    5a80:	46bd      	mov	sp, r7
    5a82:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a86:	4770      	bx	lr

00005a88 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    5a88:	b480      	push	{r7}
    5a8a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    5a8c:	f64e 5304 	movw	r3, #60676	; 0xed04
    5a90:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5a98:	601a      	str	r2, [r3, #0]
}
    5a9a:	46bd      	mov	sp, r7
    5a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5aa0:	4770      	bx	lr
    5aa2:	bf00      	nop

00005aa4 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    5aa4:	b480      	push	{r7}
    5aa6:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    5aa8:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5aac:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    5ab0:	f240 33e4 	movw	r3, #996	; 0x3e4
    5ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ab8:	681b      	ldr	r3, [r3, #0]
    5aba:	1c5a      	adds	r2, r3, #1
    5abc:	f240 33e4 	movw	r3, #996	; 0x3e4
    5ac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ac4:	601a      	str	r2, [r3, #0]
}
    5ac6:	46bd      	mov	sp, r7
    5ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5acc:	4770      	bx	lr
    5ace:	bf00      	nop

00005ad0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    5ad0:	b480      	push	{r7}
    5ad2:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    5ad4:	f240 33e4 	movw	r3, #996	; 0x3e4
    5ad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5adc:	681b      	ldr	r3, [r3, #0]
    5ade:	1e5a      	subs	r2, r3, #1
    5ae0:	f240 33e4 	movw	r3, #996	; 0x3e4
    5ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ae8:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    5aea:	f240 33e4 	movw	r3, #996	; 0x3e4
    5aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5af2:	681b      	ldr	r3, [r3, #0]
    5af4:	2b00      	cmp	r3, #0
    5af6:	d103      	bne.n	5b00 <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    5af8:	f04f 0000 	mov.w	r0, #0
    5afc:	f380 8811 	msr	BASEPRI, r0
	}
}
    5b00:	46bd      	mov	sp, r7
    5b02:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b06:	4770      	bx	lr

00005b08 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    5b08:	f3ef 8009 	mrs	r0, PSP
    5b0c:	4b0c      	ldr	r3, [pc, #48]	; (5b40 <pxCurrentTCBConst>)
    5b0e:	681a      	ldr	r2, [r3, #0]
    5b10:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5b14:	6010      	str	r0, [r2, #0]
    5b16:	e92d 4008 	stmdb	sp!, {r3, lr}
    5b1a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5b1e:	f380 8811 	msr	BASEPRI, r0
    5b22:	f7ff fba1 	bl	5268 <vTaskSwitchContext>
    5b26:	f04f 0000 	mov.w	r0, #0
    5b2a:	f380 8811 	msr	BASEPRI, r0
    5b2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5b32:	6819      	ldr	r1, [r3, #0]
    5b34:	6808      	ldr	r0, [r1, #0]
    5b36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5b3a:	f380 8809 	msr	PSP, r0
    5b3e:	4770      	bx	lr

00005b40 <pxCurrentTCBConst>:
    5b40:	20000c68 	.word	0x20000c68

00005b44 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    5b44:	b580      	push	{r7, lr}
    5b46:	b082      	sub	sp, #8
    5b48:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    5b4a:	2300      	movs	r3, #0
    5b4c:	607b      	str	r3, [r7, #4]
    5b4e:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5b52:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    5b56:	f7ff faa9 	bl	50ac <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    5b5a:	f04f 0000 	mov.w	r0, #0
    5b5e:	f380 8811 	msr	BASEPRI, r0
}
    5b62:	3708      	adds	r7, #8
    5b64:	46bd      	mov	sp, r7
    5b66:	bd80      	pop	{r7, pc}

00005b68 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    5b68:	b480      	push	{r7}
    5b6a:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    5b6c:	f24e 0314 	movw	r3, #57364	; 0xe014
    5b70:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5b74:	f641 123f 	movw	r2, #6463	; 0x193f
    5b78:	f2c0 0201 	movt	r2, #1
    5b7c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    5b7e:	f24e 0310 	movw	r3, #57360	; 0xe010
    5b82:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5b86:	2207      	movs	r2, #7
    5b88:	601a      	str	r2, [r3, #0]
}
    5b8a:	46bd      	mov	sp, r7
    5b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b90:	4770      	bx	lr
    5b92:	0000      	.short	0x0000
    5b94:	e000ed08 	.word	0xe000ed08

00005b98 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5b98:	b580      	push	{r7, lr}
    5b9a:	b08a      	sub	sp, #40	; 0x28
    5b9c:	af00      	add	r7, sp, #0
    5b9e:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    5ba0:	2300      	movs	r3, #0
    5ba2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    5ba4:	f7ff f9a0 	bl	4ee8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    5ba8:	f64a 63a8 	movw	r3, #44712	; 0xaea8
    5bac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bb0:	681b      	ldr	r3, [r3, #0]
    5bb2:	2b00      	cmp	r3, #0
    5bb4:	d130      	bne.n	5c18 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    5bb6:	f64a 6398 	movw	r3, #44696	; 0xae98
    5bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bbe:	f640 6298 	movw	r2, #3736	; 0xe98
    5bc2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5bc6:	601a      	str	r2, [r3, #0]
    5bc8:	f64a 6398 	movw	r3, #44696	; 0xae98
    5bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bd0:	2200      	movs	r2, #0
    5bd2:	605a      	str	r2, [r3, #4]
    5bd4:	f64a 63a0 	movw	r3, #44704	; 0xaea0
    5bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bdc:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    5be0:	605a      	str	r2, [r3, #4]
    5be2:	f64a 63a0 	movw	r3, #44704	; 0xaea0
    5be6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bea:	2200      	movs	r2, #0
    5bec:	601a      	str	r2, [r3, #0]
    5bee:	f640 6398 	movw	r3, #3736	; 0xe98
    5bf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bf6:	617b      	str	r3, [r7, #20]
    5bf8:	697b      	ldr	r3, [r7, #20]
    5bfa:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    5bfe:	605a      	str	r2, [r3, #4]
    5c00:	697a      	ldr	r2, [r7, #20]
    5c02:	f64a 63a0 	movw	r3, #44704	; 0xaea0
    5c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c0a:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    5c0c:	f64a 63a8 	movw	r3, #44712	; 0xaea8
    5c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c14:	2201      	movs	r2, #1
    5c16:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    5c18:	687b      	ldr	r3, [r7, #4]
    5c1a:	2b00      	cmp	r3, #0
    5c1c:	d00d      	beq.n	5c3a <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    5c1e:	2310      	movs	r3, #16
    5c20:	687a      	ldr	r2, [r7, #4]
    5c22:	4413      	add	r3, r2
    5c24:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    5c26:	687b      	ldr	r3, [r7, #4]
    5c28:	f003 0307 	and.w	r3, r3, #7
    5c2c:	2b00      	cmp	r3, #0
    5c2e:	d004      	beq.n	5c3a <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    5c30:	687b      	ldr	r3, [r7, #4]
    5c32:	f023 0307 	bic.w	r3, r3, #7
    5c36:	3308      	adds	r3, #8
    5c38:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    5c3a:	687b      	ldr	r3, [r7, #4]
    5c3c:	2b00      	cmp	r3, #0
    5c3e:	d068      	beq.n	5d12 <pvPortMalloc+0x17a>
    5c40:	687b      	ldr	r3, [r7, #4]
    5c42:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
    5c46:	d264      	bcs.n	5d12 <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    5c48:	f64a 6398 	movw	r3, #44696	; 0xae98
    5c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c50:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    5c52:	f64a 6398 	movw	r3, #44696	; 0xae98
    5c56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c5a:	681b      	ldr	r3, [r3, #0]
    5c5c:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5c5e:	e004      	b.n	5c6a <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    5c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c62:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    5c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c66:	681b      	ldr	r3, [r3, #0]
    5c68:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c6c:	685a      	ldr	r2, [r3, #4]
    5c6e:	687b      	ldr	r3, [r7, #4]
    5c70:	429a      	cmp	r2, r3
    5c72:	d203      	bcs.n	5c7c <pvPortMalloc+0xe4>
    5c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c76:	681b      	ldr	r3, [r3, #0]
    5c78:	2b00      	cmp	r3, #0
    5c7a:	d1f1      	bne.n	5c60 <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    5c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5c7e:	f64a 63a0 	movw	r3, #44704	; 0xaea0
    5c82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c86:	429a      	cmp	r2, r3
    5c88:	d043      	beq.n	5d12 <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    5c8a:	6a3b      	ldr	r3, [r7, #32]
    5c8c:	681a      	ldr	r2, [r3, #0]
    5c8e:	2310      	movs	r3, #16
    5c90:	4413      	add	r3, r2
    5c92:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    5c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c96:	681a      	ldr	r2, [r3, #0]
    5c98:	6a3b      	ldr	r3, [r7, #32]
    5c9a:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    5c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c9e:	685a      	ldr	r2, [r3, #4]
    5ca0:	687b      	ldr	r3, [r7, #4]
    5ca2:	1ad2      	subs	r2, r2, r3
    5ca4:	2310      	movs	r3, #16
    5ca6:	005b      	lsls	r3, r3, #1
    5ca8:	429a      	cmp	r2, r3
    5caa:	d925      	bls.n	5cf8 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    5cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5cae:	687b      	ldr	r3, [r7, #4]
    5cb0:	4413      	add	r3, r2
    5cb2:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    5cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5cb6:	685a      	ldr	r2, [r3, #4]
    5cb8:	687b      	ldr	r3, [r7, #4]
    5cba:	1ad2      	subs	r2, r2, r3
    5cbc:	693b      	ldr	r3, [r7, #16]
    5cbe:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    5cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5cc2:	687a      	ldr	r2, [r7, #4]
    5cc4:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    5cc6:	693b      	ldr	r3, [r7, #16]
    5cc8:	685b      	ldr	r3, [r3, #4]
    5cca:	60fb      	str	r3, [r7, #12]
    5ccc:	f64a 6398 	movw	r3, #44696	; 0xae98
    5cd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cd4:	61bb      	str	r3, [r7, #24]
    5cd6:	e002      	b.n	5cde <pvPortMalloc+0x146>
    5cd8:	69bb      	ldr	r3, [r7, #24]
    5cda:	681b      	ldr	r3, [r3, #0]
    5cdc:	61bb      	str	r3, [r7, #24]
    5cde:	69bb      	ldr	r3, [r7, #24]
    5ce0:	681b      	ldr	r3, [r3, #0]
    5ce2:	685a      	ldr	r2, [r3, #4]
    5ce4:	68fb      	ldr	r3, [r7, #12]
    5ce6:	429a      	cmp	r2, r3
    5ce8:	d3f6      	bcc.n	5cd8 <pvPortMalloc+0x140>
    5cea:	69bb      	ldr	r3, [r7, #24]
    5cec:	681a      	ldr	r2, [r3, #0]
    5cee:	693b      	ldr	r3, [r7, #16]
    5cf0:	601a      	str	r2, [r3, #0]
    5cf2:	69bb      	ldr	r3, [r7, #24]
    5cf4:	693a      	ldr	r2, [r7, #16]
    5cf6:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    5cf8:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d00:	681a      	ldr	r2, [r3, #0]
    5d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d04:	685b      	ldr	r3, [r3, #4]
    5d06:	1ad2      	subs	r2, r2, r3
    5d08:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d10:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    5d12:	f7ff f8fb 	bl	4f0c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    5d16:	69fb      	ldr	r3, [r7, #28]
}
    5d18:	4618      	mov	r0, r3
    5d1a:	3728      	adds	r7, #40	; 0x28
    5d1c:	46bd      	mov	sp, r7
    5d1e:	bd80      	pop	{r7, pc}

00005d20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    5d20:	b580      	push	{r7, lr}
    5d22:	b086      	sub	sp, #24
    5d24:	af00      	add	r7, sp, #0
    5d26:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    5d28:	687b      	ldr	r3, [r7, #4]
    5d2a:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    5d2c:	687b      	ldr	r3, [r7, #4]
    5d2e:	2b00      	cmp	r3, #0
    5d30:	d030      	beq.n	5d94 <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    5d32:	2310      	movs	r3, #16
    5d34:	425b      	negs	r3, r3
    5d36:	693a      	ldr	r2, [r7, #16]
    5d38:	4413      	add	r3, r2
    5d3a:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    5d3c:	693b      	ldr	r3, [r7, #16]
    5d3e:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    5d40:	f7ff f8d2 	bl	4ee8 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    5d44:	68fb      	ldr	r3, [r7, #12]
    5d46:	685b      	ldr	r3, [r3, #4]
    5d48:	60bb      	str	r3, [r7, #8]
    5d4a:	f64a 6398 	movw	r3, #44696	; 0xae98
    5d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d52:	617b      	str	r3, [r7, #20]
    5d54:	e002      	b.n	5d5c <vPortFree+0x3c>
    5d56:	697b      	ldr	r3, [r7, #20]
    5d58:	681b      	ldr	r3, [r3, #0]
    5d5a:	617b      	str	r3, [r7, #20]
    5d5c:	697b      	ldr	r3, [r7, #20]
    5d5e:	681b      	ldr	r3, [r3, #0]
    5d60:	685a      	ldr	r2, [r3, #4]
    5d62:	68bb      	ldr	r3, [r7, #8]
    5d64:	429a      	cmp	r2, r3
    5d66:	d3f6      	bcc.n	5d56 <vPortFree+0x36>
    5d68:	697b      	ldr	r3, [r7, #20]
    5d6a:	681a      	ldr	r2, [r3, #0]
    5d6c:	68fb      	ldr	r3, [r7, #12]
    5d6e:	601a      	str	r2, [r3, #0]
    5d70:	697b      	ldr	r3, [r7, #20]
    5d72:	68fa      	ldr	r2, [r7, #12]
    5d74:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    5d76:	68fb      	ldr	r3, [r7, #12]
    5d78:	685a      	ldr	r2, [r3, #4]
    5d7a:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d82:	681b      	ldr	r3, [r3, #0]
    5d84:	441a      	add	r2, r3
    5d86:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d8e:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    5d90:	f7ff f8bc 	bl	4f0c <xTaskResumeAll>
	}
}
    5d94:	3718      	adds	r7, #24
    5d96:	46bd      	mov	sp, r7
    5d98:	bd80      	pop	{r7, pc}
    5d9a:	bf00      	nop

00005d9c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    5d9c:	b480      	push	{r7}
    5d9e:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    5da0:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5da8:	681b      	ldr	r3, [r3, #0]
}
    5daa:	4618      	mov	r0, r3
    5dac:	46bd      	mov	sp, r7
    5dae:	f85d 7b04 	ldr.w	r7, [sp], #4
    5db2:	4770      	bx	lr

00005db4 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    5db4:	b480      	push	{r7}
    5db6:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    5db8:	46bd      	mov	sp, r7
    5dba:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dbe:	4770      	bx	lr

00005dc0 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    5dc0:	b580      	push	{r7, lr}
    5dc2:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    5dc4:	f64a 63ca 	movw	r3, #44746	; 0xaeca
    5dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dcc:	781b      	ldrb	r3, [r3, #0]
    5dce:	2b00      	cmp	r3, #0
    5dd0:	f040 815d 	bne.w	608e <ground_calibrate+0x2ce>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    5dd4:	f64a 63b2 	movw	r3, #44722	; 0xaeb2
    5dd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ddc:	881b      	ldrh	r3, [r3, #0]
    5dde:	2b09      	cmp	r3, #9
    5de0:	f201 8145 	bhi.w	706e <ground_calibrate+0x12ae>
    5de4:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    5de8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dec:	781b      	ldrb	r3, [r3, #0]
    5dee:	2b01      	cmp	r3, #1
    5df0:	f041 813d 	bne.w	706e <ground_calibrate+0x12ae>
      calib_status = WAITING_CALIB_CONTRAST;
    5df4:	f64a 63ca 	movw	r3, #44746	; 0xaeca
    5df8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dfc:	2201      	movs	r2, #1
    5dfe:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_START();
    5e00:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e08:	781a      	ldrb	r2, [r3, #0]
    5e0a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    5e0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e12:	781b      	ldrb	r3, [r3, #0]
    5e14:	b2db      	uxtb	r3, r3
    5e16:	429a      	cmp	r2, r3
    5e18:	d313      	bcc.n	5e42 <ground_calibrate+0x82>
    5e1a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    5e1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e22:	781b      	ldrb	r3, [r3, #0]
    5e24:	b2db      	uxtb	r3, r3
    5e26:	461a      	mov	r2, r3
    5e28:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e30:	781b      	ldrb	r3, [r3, #0]
    5e32:	1ad3      	subs	r3, r2, r3
    5e34:	33ff      	adds	r3, #255	; 0xff
    5e36:	2b04      	cmp	r3, #4
    5e38:	bfd4      	ite	le
    5e3a:	2300      	movle	r3, #0
    5e3c:	2301      	movgt	r3, #1
    5e3e:	b2db      	uxtb	r3, r3
    5e40:	e011      	b.n	5e66 <ground_calibrate+0xa6>
    5e42:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    5e46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e4a:	781b      	ldrb	r3, [r3, #0]
    5e4c:	b2db      	uxtb	r3, r3
    5e4e:	461a      	mov	r2, r3
    5e50:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e58:	781b      	ldrb	r3, [r3, #0]
    5e5a:	1ad3      	subs	r3, r2, r3
    5e5c:	2b04      	cmp	r3, #4
    5e5e:	bfd4      	ite	le
    5e60:	2300      	movle	r3, #0
    5e62:	2301      	movgt	r3, #1
    5e64:	b2db      	uxtb	r3, r3
    5e66:	2b00      	cmp	r3, #0
    5e68:	f000 8103 	beq.w	6072 <ground_calibrate+0x2b2>
    5e6c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5e70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e74:	781b      	ldrb	r3, [r3, #0]
    5e76:	461a      	mov	r2, r3
    5e78:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    5e7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e80:	2105      	movs	r1, #5
    5e82:	5499      	strb	r1, [r3, r2]
    5e84:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e8c:	781b      	ldrb	r3, [r3, #0]
    5e8e:	3301      	adds	r3, #1
    5e90:	b2da      	uxtb	r2, r3
    5e92:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5e96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e9a:	701a      	strb	r2, [r3, #0]
    5e9c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ea4:	781b      	ldrb	r3, [r3, #0]
    5ea6:	2bff      	cmp	r3, #255	; 0xff
    5ea8:	d105      	bne.n	5eb6 <ground_calibrate+0xf6>
    5eaa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5eae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5eb2:	2200      	movs	r2, #0
    5eb4:	701a      	strb	r2, [r3, #0]
    5eb6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5eba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ebe:	781b      	ldrb	r3, [r3, #0]
    5ec0:	461a      	mov	r2, r3
    5ec2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    5ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5eca:	2102      	movs	r1, #2
    5ecc:	5499      	strb	r1, [r3, r2]
    5ece:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5ed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ed6:	781b      	ldrb	r3, [r3, #0]
    5ed8:	3301      	adds	r3, #1
    5eda:	b2da      	uxtb	r2, r3
    5edc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5ee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ee4:	701a      	strb	r2, [r3, #0]
    5ee6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5eea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5eee:	781b      	ldrb	r3, [r3, #0]
    5ef0:	2bff      	cmp	r3, #255	; 0xff
    5ef2:	d105      	bne.n	5f00 <ground_calibrate+0x140>
    5ef4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5ef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5efc:	2200      	movs	r2, #0
    5efe:	701a      	strb	r2, [r3, #0]
    5f00:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    5f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f08:	2202      	movs	r2, #2
    5f0a:	701a      	strb	r2, [r3, #0]
    5f0c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    5f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f14:	2202      	movs	r2, #2
    5f16:	701a      	strb	r2, [r3, #0]
    5f18:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5f1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f20:	781b      	ldrb	r3, [r3, #0]
    5f22:	461a      	mov	r2, r3
    5f24:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    5f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f2c:	7819      	ldrb	r1, [r3, #0]
    5f2e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    5f32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f36:	5499      	strb	r1, [r3, r2]
    5f38:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5f3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f40:	781b      	ldrb	r3, [r3, #0]
    5f42:	3301      	adds	r3, #1
    5f44:	b2da      	uxtb	r2, r3
    5f46:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5f4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f4e:	701a      	strb	r2, [r3, #0]
    5f50:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f58:	781b      	ldrb	r3, [r3, #0]
    5f5a:	2bff      	cmp	r3, #255	; 0xff
    5f5c:	d105      	bne.n	5f6a <ground_calibrate+0x1aa>
    5f5e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f66:	2200      	movs	r2, #0
    5f68:	701a      	strb	r2, [r3, #0]
    5f6a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f72:	781b      	ldrb	r3, [r3, #0]
    5f74:	461a      	mov	r2, r3
    5f76:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    5f7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f7e:	7819      	ldrb	r1, [r3, #0]
    5f80:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    5f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f88:	5499      	strb	r1, [r3, r2]
    5f8a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f92:	781b      	ldrb	r3, [r3, #0]
    5f94:	3301      	adds	r3, #1
    5f96:	b2da      	uxtb	r2, r3
    5f98:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fa0:	701a      	strb	r2, [r3, #0]
    5fa2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5faa:	781b      	ldrb	r3, [r3, #0]
    5fac:	2bff      	cmp	r3, #255	; 0xff
    5fae:	d105      	bne.n	5fbc <ground_calibrate+0x1fc>
    5fb0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    5fb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fb8:	2200      	movs	r2, #0
    5fba:	701a      	strb	r2, [r3, #0]
    5fbc:	f242 0339 	movw	r3, #8249	; 0x2039
    5fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fc4:	781b      	ldrb	r3, [r3, #0]
    5fc6:	b2db      	uxtb	r3, r3
    5fc8:	f003 0310 	and.w	r3, r3, #16
    5fcc:	2b00      	cmp	r3, #0
    5fce:	f041 804e 	bne.w	706e <ground_calibrate+0x12ae>
    5fd2:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    5fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fda:	781b      	ldrb	r3, [r3, #0]
    5fdc:	b2db      	uxtb	r3, r3
    5fde:	461a      	mov	r2, r3
    5fe0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    5fe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fe8:	5c9a      	ldrb	r2, [r3, r2]
    5fea:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    5fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ff2:	701a      	strb	r2, [r3, #0]
    5ff4:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    5ff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ffc:	2200      	movs	r2, #0
    5ffe:	701a      	strb	r2, [r3, #0]
    6000:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6008:	781b      	ldrb	r3, [r3, #0]
    600a:	b2db      	uxtb	r3, r3
    600c:	3301      	adds	r3, #1
    600e:	b2da      	uxtb	r2, r3
    6010:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6014:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6018:	701a      	strb	r2, [r3, #0]
    601a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    601e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6022:	781b      	ldrb	r3, [r3, #0]
    6024:	b2db      	uxtb	r3, r3
    6026:	2bff      	cmp	r3, #255	; 0xff
    6028:	d105      	bne.n	6036 <ground_calibrate+0x276>
    602a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    602e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6032:	2200      	movs	r2, #0
    6034:	701a      	strb	r2, [r3, #0]
    6036:	f242 0338 	movw	r3, #8248	; 0x2038
    603a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    603e:	f242 0238 	movw	r2, #8248	; 0x2038
    6042:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6046:	7812      	ldrb	r2, [r2, #0]
    6048:	b2d2      	uxtb	r2, r2
    604a:	f042 0201 	orr.w	r2, r2, #1
    604e:	b2d2      	uxtb	r2, r2
    6050:	701a      	strb	r2, [r3, #0]
    6052:	f242 0339 	movw	r3, #8249	; 0x2039
    6056:	f2c2 0300 	movt	r3, #8192	; 0x2000
    605a:	f242 0239 	movw	r2, #8249	; 0x2039
    605e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6062:	7812      	ldrb	r2, [r2, #0]
    6064:	b2d2      	uxtb	r2, r2
    6066:	f042 0210 	orr.w	r2, r2, #16
    606a:	b2d2      	uxtb	r2, r2
    606c:	701a      	strb	r2, [r3, #0]
    606e:	f000 bffe 	b.w	706e <ground_calibrate+0x12ae>
    6072:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    6076:	f2c2 0300 	movt	r3, #8192	; 0x2000
    607a:	781b      	ldrb	r3, [r3, #0]
    607c:	3301      	adds	r3, #1
    607e:	b2da      	uxtb	r2, r3
    6080:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    6084:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6088:	701a      	strb	r2, [r3, #0]
    608a:	f000 bff0 	b.w	706e <ground_calibrate+0x12ae>
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    608e:	f64a 63ca 	movw	r3, #44746	; 0xaeca
    6092:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6096:	781b      	ldrb	r3, [r3, #0]
    6098:	2b01      	cmp	r3, #1
    609a:	f040 87e8 	bne.w	706e <ground_calibrate+0x12ae>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    609e:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    60a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60a6:	885b      	ldrh	r3, [r3, #2]
    60a8:	b21b      	sxth	r3, r3
    60aa:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    60ae:	db09      	blt.n	60c4 <ground_calibrate+0x304>
    60b0:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    60b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60b8:	885b      	ldrh	r3, [r3, #2]
    60ba:	b21b      	sxth	r3, r3
    60bc:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    60c0:	f340 87d5 	ble.w	706e <ground_calibrate+0x12ae>
      ir_gain_calib();
    60c4:	f00b fcfc 	bl	11ac0 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    60c8:	f240 33f8 	movw	r3, #1016	; 0x3f8
    60cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60d0:	681a      	ldr	r2, [r3, #0]
    60d2:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    60d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60da:	601a      	str	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    60dc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    60e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60e4:	781a      	ldrb	r2, [r3, #0]
    60e6:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    60ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60ee:	781b      	ldrb	r3, [r3, #0]
    60f0:	b2db      	uxtb	r3, r3
    60f2:	429a      	cmp	r2, r3
    60f4:	d313      	bcc.n	611e <ground_calibrate+0x35e>
    60f6:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    60fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60fe:	781b      	ldrb	r3, [r3, #0]
    6100:	b2db      	uxtb	r3, r3
    6102:	461a      	mov	r2, r3
    6104:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6108:	f2c2 0300 	movt	r3, #8192	; 0x2000
    610c:	781b      	ldrb	r3, [r3, #0]
    610e:	1ad3      	subs	r3, r2, r3
    6110:	33ff      	adds	r3, #255	; 0xff
    6112:	2b14      	cmp	r3, #20
    6114:	bfd4      	ite	le
    6116:	2300      	movle	r3, #0
    6118:	2301      	movgt	r3, #1
    611a:	b2db      	uxtb	r3, r3
    611c:	e011      	b.n	6142 <ground_calibrate+0x382>
    611e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6122:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6126:	781b      	ldrb	r3, [r3, #0]
    6128:	b2db      	uxtb	r3, r3
    612a:	461a      	mov	r2, r3
    612c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6130:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6134:	781b      	ldrb	r3, [r3, #0]
    6136:	1ad3      	subs	r3, r2, r3
    6138:	2b14      	cmp	r3, #20
    613a:	bfd4      	ite	le
    613c:	2300      	movle	r3, #0
    613e:	2301      	movgt	r3, #1
    6140:	b2db      	uxtb	r3, r3
    6142:	2b00      	cmp	r3, #0
    6144:	f000 85a6 	beq.w	6c94 <ground_calibrate+0xed4>
    6148:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    614c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6150:	781b      	ldrb	r3, [r3, #0]
    6152:	461a      	mov	r2, r3
    6154:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6158:	f2c2 0300 	movt	r3, #8192	; 0x2000
    615c:	2105      	movs	r1, #5
    615e:	5499      	strb	r1, [r3, r2]
    6160:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6164:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6168:	781b      	ldrb	r3, [r3, #0]
    616a:	3301      	adds	r3, #1
    616c:	b2da      	uxtb	r2, r3
    616e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6172:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6176:	701a      	strb	r2, [r3, #0]
    6178:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    617c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6180:	781b      	ldrb	r3, [r3, #0]
    6182:	2bff      	cmp	r3, #255	; 0xff
    6184:	d105      	bne.n	6192 <ground_calibrate+0x3d2>
    6186:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    618a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    618e:	2200      	movs	r2, #0
    6190:	701a      	strb	r2, [r3, #0]
    6192:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6196:	f2c2 0300 	movt	r3, #8192	; 0x2000
    619a:	781b      	ldrb	r3, [r3, #0]
    619c:	461a      	mov	r2, r3
    619e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    61a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61a6:	2105      	movs	r1, #5
    61a8:	5499      	strb	r1, [r3, r2]
    61aa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    61ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61b2:	781b      	ldrb	r3, [r3, #0]
    61b4:	3301      	adds	r3, #1
    61b6:	b2da      	uxtb	r2, r3
    61b8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    61bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61c0:	701a      	strb	r2, [r3, #0]
    61c2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    61c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61ca:	781b      	ldrb	r3, [r3, #0]
    61cc:	2bff      	cmp	r3, #255	; 0xff
    61ce:	d105      	bne.n	61dc <ground_calibrate+0x41c>
    61d0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    61d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61d8:	2200      	movs	r2, #0
    61da:	701a      	strb	r2, [r3, #0]
    61dc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    61e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61e4:	2205      	movs	r2, #5
    61e6:	701a      	strb	r2, [r3, #0]
    61e8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    61ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61f0:	2205      	movs	r2, #5
    61f2:	701a      	strb	r2, [r3, #0]
    61f4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    61f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61fc:	781b      	ldrb	r3, [r3, #0]
    61fe:	461a      	mov	r2, r3
    6200:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    6204:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6208:	7819      	ldrb	r1, [r3, #0]
    620a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    620e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6212:	5499      	strb	r1, [r3, r2]
    6214:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    6218:	f2c2 0300 	movt	r3, #8192	; 0x2000
    621c:	781a      	ldrb	r2, [r3, #0]
    621e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6222:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6226:	781b      	ldrb	r3, [r3, #0]
    6228:	4413      	add	r3, r2
    622a:	b2da      	uxtb	r2, r3
    622c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6230:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6234:	701a      	strb	r2, [r3, #0]
    6236:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    623a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    623e:	781a      	ldrb	r2, [r3, #0]
    6240:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6248:	781b      	ldrb	r3, [r3, #0]
    624a:	4413      	add	r3, r2
    624c:	b2da      	uxtb	r2, r3
    624e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6252:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6256:	701a      	strb	r2, [r3, #0]
    6258:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    625c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6260:	781b      	ldrb	r3, [r3, #0]
    6262:	3301      	adds	r3, #1
    6264:	b2da      	uxtb	r2, r3
    6266:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    626a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    626e:	701a      	strb	r2, [r3, #0]
    6270:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6278:	781b      	ldrb	r3, [r3, #0]
    627a:	2bff      	cmp	r3, #255	; 0xff
    627c:	d105      	bne.n	628a <ground_calibrate+0x4ca>
    627e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6282:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6286:	2200      	movs	r2, #0
    6288:	701a      	strb	r2, [r3, #0]
    628a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    628e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6292:	781b      	ldrb	r3, [r3, #0]
    6294:	461a      	mov	r2, r3
    6296:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    629a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    629e:	7859      	ldrb	r1, [r3, #1]
    62a0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    62a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62a8:	5499      	strb	r1, [r3, r2]
    62aa:	4bd2      	ldr	r3, [pc, #840]	; (65f4 <ground_calibrate+0x834>)
    62ac:	781a      	ldrb	r2, [r3, #0]
    62ae:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    62b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62b6:	781b      	ldrb	r3, [r3, #0]
    62b8:	4413      	add	r3, r2
    62ba:	b2da      	uxtb	r2, r3
    62bc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    62c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62c4:	701a      	strb	r2, [r3, #0]
    62c6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    62ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62ce:	781a      	ldrb	r2, [r3, #0]
    62d0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    62d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62d8:	781b      	ldrb	r3, [r3, #0]
    62da:	4413      	add	r3, r2
    62dc:	b2da      	uxtb	r2, r3
    62de:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    62e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62e6:	701a      	strb	r2, [r3, #0]
    62e8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    62ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62f0:	781b      	ldrb	r3, [r3, #0]
    62f2:	3301      	adds	r3, #1
    62f4:	b2da      	uxtb	r2, r3
    62f6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    62fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62fe:	701a      	strb	r2, [r3, #0]
    6300:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6308:	781b      	ldrb	r3, [r3, #0]
    630a:	2bff      	cmp	r3, #255	; 0xff
    630c:	d105      	bne.n	631a <ground_calibrate+0x55a>
    630e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6312:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6316:	2200      	movs	r2, #0
    6318:	701a      	strb	r2, [r3, #0]
    631a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    631e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6322:	781b      	ldrb	r3, [r3, #0]
    6324:	461a      	mov	r2, r3
    6326:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    632a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    632e:	7899      	ldrb	r1, [r3, #2]
    6330:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6338:	5499      	strb	r1, [r3, r2]
    633a:	4baf      	ldr	r3, [pc, #700]	; (65f8 <ground_calibrate+0x838>)
    633c:	781a      	ldrb	r2, [r3, #0]
    633e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6342:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6346:	781b      	ldrb	r3, [r3, #0]
    6348:	4413      	add	r3, r2
    634a:	b2da      	uxtb	r2, r3
    634c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6350:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6354:	701a      	strb	r2, [r3, #0]
    6356:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    635a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    635e:	781a      	ldrb	r2, [r3, #0]
    6360:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6368:	781b      	ldrb	r3, [r3, #0]
    636a:	4413      	add	r3, r2
    636c:	b2da      	uxtb	r2, r3
    636e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6372:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6376:	701a      	strb	r2, [r3, #0]
    6378:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    637c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6380:	781b      	ldrb	r3, [r3, #0]
    6382:	3301      	adds	r3, #1
    6384:	b2da      	uxtb	r2, r3
    6386:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    638a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    638e:	701a      	strb	r2, [r3, #0]
    6390:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6394:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6398:	781b      	ldrb	r3, [r3, #0]
    639a:	2bff      	cmp	r3, #255	; 0xff
    639c:	d105      	bne.n	63aa <ground_calibrate+0x5ea>
    639e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    63a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63a6:	2200      	movs	r2, #0
    63a8:	701a      	strb	r2, [r3, #0]
    63aa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    63ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63b2:	781b      	ldrb	r3, [r3, #0]
    63b4:	461a      	mov	r2, r3
    63b6:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    63ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63be:	78d9      	ldrb	r1, [r3, #3]
    63c0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    63c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63c8:	5499      	strb	r1, [r3, r2]
    63ca:	4b8c      	ldr	r3, [pc, #560]	; (65fc <ground_calibrate+0x83c>)
    63cc:	781a      	ldrb	r2, [r3, #0]
    63ce:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    63d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63d6:	781b      	ldrb	r3, [r3, #0]
    63d8:	4413      	add	r3, r2
    63da:	b2da      	uxtb	r2, r3
    63dc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    63e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63e4:	701a      	strb	r2, [r3, #0]
    63e6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    63ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63ee:	781a      	ldrb	r2, [r3, #0]
    63f0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    63f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63f8:	781b      	ldrb	r3, [r3, #0]
    63fa:	4413      	add	r3, r2
    63fc:	b2da      	uxtb	r2, r3
    63fe:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6406:	701a      	strb	r2, [r3, #0]
    6408:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    640c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6410:	781b      	ldrb	r3, [r3, #0]
    6412:	3301      	adds	r3, #1
    6414:	b2da      	uxtb	r2, r3
    6416:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    641a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    641e:	701a      	strb	r2, [r3, #0]
    6420:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6428:	781b      	ldrb	r3, [r3, #0]
    642a:	2bff      	cmp	r3, #255	; 0xff
    642c:	d105      	bne.n	643a <ground_calibrate+0x67a>
    642e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6436:	2200      	movs	r2, #0
    6438:	701a      	strb	r2, [r3, #0]
    643a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    643e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6442:	781b      	ldrb	r3, [r3, #0]
    6444:	461a      	mov	r2, r3
    6446:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    644a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    644e:	7819      	ldrb	r1, [r3, #0]
    6450:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6454:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6458:	5499      	strb	r1, [r3, r2]
    645a:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    645e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6462:	781a      	ldrb	r2, [r3, #0]
    6464:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6468:	f2c2 0300 	movt	r3, #8192	; 0x2000
    646c:	781b      	ldrb	r3, [r3, #0]
    646e:	4413      	add	r3, r2
    6470:	b2da      	uxtb	r2, r3
    6472:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6476:	f2c2 0300 	movt	r3, #8192	; 0x2000
    647a:	701a      	strb	r2, [r3, #0]
    647c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6480:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6484:	781a      	ldrb	r2, [r3, #0]
    6486:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    648a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    648e:	781b      	ldrb	r3, [r3, #0]
    6490:	4413      	add	r3, r2
    6492:	b2da      	uxtb	r2, r3
    6494:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6498:	f2c2 0300 	movt	r3, #8192	; 0x2000
    649c:	701a      	strb	r2, [r3, #0]
    649e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    64a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64a6:	781b      	ldrb	r3, [r3, #0]
    64a8:	3301      	adds	r3, #1
    64aa:	b2da      	uxtb	r2, r3
    64ac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    64b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64b4:	701a      	strb	r2, [r3, #0]
    64b6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    64ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64be:	781b      	ldrb	r3, [r3, #0]
    64c0:	2bff      	cmp	r3, #255	; 0xff
    64c2:	d105      	bne.n	64d0 <ground_calibrate+0x710>
    64c4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    64c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64cc:	2200      	movs	r2, #0
    64ce:	701a      	strb	r2, [r3, #0]
    64d0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    64d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64d8:	781b      	ldrb	r3, [r3, #0]
    64da:	461a      	mov	r2, r3
    64dc:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    64e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64e4:	7859      	ldrb	r1, [r3, #1]
    64e6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    64ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64ee:	5499      	strb	r1, [r3, r2]
    64f0:	4b43      	ldr	r3, [pc, #268]	; (6600 <ground_calibrate+0x840>)
    64f2:	781a      	ldrb	r2, [r3, #0]
    64f4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    64f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64fc:	781b      	ldrb	r3, [r3, #0]
    64fe:	4413      	add	r3, r2
    6500:	b2da      	uxtb	r2, r3
    6502:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    650a:	701a      	strb	r2, [r3, #0]
    650c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6510:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6514:	781a      	ldrb	r2, [r3, #0]
    6516:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    651a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    651e:	781b      	ldrb	r3, [r3, #0]
    6520:	4413      	add	r3, r2
    6522:	b2da      	uxtb	r2, r3
    6524:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6528:	f2c2 0300 	movt	r3, #8192	; 0x2000
    652c:	701a      	strb	r2, [r3, #0]
    652e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6532:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6536:	781b      	ldrb	r3, [r3, #0]
    6538:	3301      	adds	r3, #1
    653a:	b2da      	uxtb	r2, r3
    653c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6544:	701a      	strb	r2, [r3, #0]
    6546:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    654a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    654e:	781b      	ldrb	r3, [r3, #0]
    6550:	2bff      	cmp	r3, #255	; 0xff
    6552:	d105      	bne.n	6560 <ground_calibrate+0x7a0>
    6554:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6558:	f2c2 0300 	movt	r3, #8192	; 0x2000
    655c:	2200      	movs	r2, #0
    655e:	701a      	strb	r2, [r3, #0]
    6560:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6564:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6568:	781b      	ldrb	r3, [r3, #0]
    656a:	461a      	mov	r2, r3
    656c:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    6570:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6574:	7899      	ldrb	r1, [r3, #2]
    6576:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    657a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    657e:	5499      	strb	r1, [r3, r2]
    6580:	4b20      	ldr	r3, [pc, #128]	; (6604 <ground_calibrate+0x844>)
    6582:	781a      	ldrb	r2, [r3, #0]
    6584:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6588:	f2c2 0300 	movt	r3, #8192	; 0x2000
    658c:	781b      	ldrb	r3, [r3, #0]
    658e:	4413      	add	r3, r2
    6590:	b2da      	uxtb	r2, r3
    6592:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6596:	f2c2 0300 	movt	r3, #8192	; 0x2000
    659a:	701a      	strb	r2, [r3, #0]
    659c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    65a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65a4:	781a      	ldrb	r2, [r3, #0]
    65a6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    65aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65ae:	781b      	ldrb	r3, [r3, #0]
    65b0:	4413      	add	r3, r2
    65b2:	b2da      	uxtb	r2, r3
    65b4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    65b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65bc:	701a      	strb	r2, [r3, #0]
    65be:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    65c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65c6:	781b      	ldrb	r3, [r3, #0]
    65c8:	3301      	adds	r3, #1
    65ca:	b2da      	uxtb	r2, r3
    65cc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    65d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65d4:	701a      	strb	r2, [r3, #0]
    65d6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    65da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65de:	781b      	ldrb	r3, [r3, #0]
    65e0:	2bff      	cmp	r3, #255	; 0xff
    65e2:	d111      	bne.n	6608 <ground_calibrate+0x848>
    65e4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    65e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65ec:	2200      	movs	r2, #0
    65ee:	701a      	strb	r2, [r3, #0]
    65f0:	e00a      	b.n	6608 <ground_calibrate+0x848>
    65f2:	bf00      	nop
    65f4:	2000b4c9 	.word	0x2000b4c9
    65f8:	2000b4ca 	.word	0x2000b4ca
    65fc:	2000b4cb 	.word	0x2000b4cb
    6600:	2000b4cd 	.word	0x2000b4cd
    6604:	2000b4ce 	.word	0x2000b4ce
    6608:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    660c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6610:	781b      	ldrb	r3, [r3, #0]
    6612:	461a      	mov	r2, r3
    6614:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    6618:	f2c2 0300 	movt	r3, #8192	; 0x2000
    661c:	78d9      	ldrb	r1, [r3, #3]
    661e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6622:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6626:	5499      	strb	r1, [r3, r2]
    6628:	4bd3      	ldr	r3, [pc, #844]	; (6978 <ground_calibrate+0xbb8>)
    662a:	781a      	ldrb	r2, [r3, #0]
    662c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6630:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6634:	781b      	ldrb	r3, [r3, #0]
    6636:	4413      	add	r3, r2
    6638:	b2da      	uxtb	r2, r3
    663a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    663e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6642:	701a      	strb	r2, [r3, #0]
    6644:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6648:	f2c2 0300 	movt	r3, #8192	; 0x2000
    664c:	781a      	ldrb	r2, [r3, #0]
    664e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6652:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6656:	781b      	ldrb	r3, [r3, #0]
    6658:	4413      	add	r3, r2
    665a:	b2da      	uxtb	r2, r3
    665c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6660:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6664:	701a      	strb	r2, [r3, #0]
    6666:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    666a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    666e:	781b      	ldrb	r3, [r3, #0]
    6670:	3301      	adds	r3, #1
    6672:	b2da      	uxtb	r2, r3
    6674:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    667c:	701a      	strb	r2, [r3, #0]
    667e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6686:	781b      	ldrb	r3, [r3, #0]
    6688:	2bff      	cmp	r3, #255	; 0xff
    668a:	d105      	bne.n	6698 <ground_calibrate+0x8d8>
    668c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6690:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6694:	2200      	movs	r2, #0
    6696:	701a      	strb	r2, [r3, #0]
    6698:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    669c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66a0:	781b      	ldrb	r3, [r3, #0]
    66a2:	461a      	mov	r2, r3
    66a4:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    66a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66ac:	7819      	ldrb	r1, [r3, #0]
    66ae:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    66b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66b6:	5499      	strb	r1, [r3, r2]
    66b8:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    66bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66c0:	781a      	ldrb	r2, [r3, #0]
    66c2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    66c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66ca:	781b      	ldrb	r3, [r3, #0]
    66cc:	4413      	add	r3, r2
    66ce:	b2da      	uxtb	r2, r3
    66d0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    66d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66d8:	701a      	strb	r2, [r3, #0]
    66da:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    66de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66e2:	781a      	ldrb	r2, [r3, #0]
    66e4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    66e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66ec:	781b      	ldrb	r3, [r3, #0]
    66ee:	4413      	add	r3, r2
    66f0:	b2da      	uxtb	r2, r3
    66f2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    66f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66fa:	701a      	strb	r2, [r3, #0]
    66fc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6700:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6704:	781b      	ldrb	r3, [r3, #0]
    6706:	3301      	adds	r3, #1
    6708:	b2da      	uxtb	r2, r3
    670a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    670e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6712:	701a      	strb	r2, [r3, #0]
    6714:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6718:	f2c2 0300 	movt	r3, #8192	; 0x2000
    671c:	781b      	ldrb	r3, [r3, #0]
    671e:	2bff      	cmp	r3, #255	; 0xff
    6720:	d105      	bne.n	672e <ground_calibrate+0x96e>
    6722:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6726:	f2c2 0300 	movt	r3, #8192	; 0x2000
    672a:	2200      	movs	r2, #0
    672c:	701a      	strb	r2, [r3, #0]
    672e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6732:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6736:	781b      	ldrb	r3, [r3, #0]
    6738:	461a      	mov	r2, r3
    673a:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    673e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6742:	7859      	ldrb	r1, [r3, #1]
    6744:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6748:	f2c2 0300 	movt	r3, #8192	; 0x2000
    674c:	5499      	strb	r1, [r3, r2]
    674e:	4b8b      	ldr	r3, [pc, #556]	; (697c <ground_calibrate+0xbbc>)
    6750:	781a      	ldrb	r2, [r3, #0]
    6752:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6756:	f2c2 0300 	movt	r3, #8192	; 0x2000
    675a:	781b      	ldrb	r3, [r3, #0]
    675c:	4413      	add	r3, r2
    675e:	b2da      	uxtb	r2, r3
    6760:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6764:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6768:	701a      	strb	r2, [r3, #0]
    676a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    676e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6772:	781a      	ldrb	r2, [r3, #0]
    6774:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6778:	f2c2 0300 	movt	r3, #8192	; 0x2000
    677c:	781b      	ldrb	r3, [r3, #0]
    677e:	4413      	add	r3, r2
    6780:	b2da      	uxtb	r2, r3
    6782:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6786:	f2c2 0300 	movt	r3, #8192	; 0x2000
    678a:	701a      	strb	r2, [r3, #0]
    678c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6790:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6794:	781b      	ldrb	r3, [r3, #0]
    6796:	3301      	adds	r3, #1
    6798:	b2da      	uxtb	r2, r3
    679a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    679e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67a2:	701a      	strb	r2, [r3, #0]
    67a4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    67a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67ac:	781b      	ldrb	r3, [r3, #0]
    67ae:	2bff      	cmp	r3, #255	; 0xff
    67b0:	d105      	bne.n	67be <ground_calibrate+0x9fe>
    67b2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    67b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67ba:	2200      	movs	r2, #0
    67bc:	701a      	strb	r2, [r3, #0]
    67be:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    67c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67c6:	781b      	ldrb	r3, [r3, #0]
    67c8:	461a      	mov	r2, r3
    67ca:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    67ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67d2:	7899      	ldrb	r1, [r3, #2]
    67d4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    67d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67dc:	5499      	strb	r1, [r3, r2]
    67de:	4b68      	ldr	r3, [pc, #416]	; (6980 <ground_calibrate+0xbc0>)
    67e0:	781a      	ldrb	r2, [r3, #0]
    67e2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    67e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67ea:	781b      	ldrb	r3, [r3, #0]
    67ec:	4413      	add	r3, r2
    67ee:	b2da      	uxtb	r2, r3
    67f0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    67f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67f8:	701a      	strb	r2, [r3, #0]
    67fa:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    67fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6802:	781a      	ldrb	r2, [r3, #0]
    6804:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6808:	f2c2 0300 	movt	r3, #8192	; 0x2000
    680c:	781b      	ldrb	r3, [r3, #0]
    680e:	4413      	add	r3, r2
    6810:	b2da      	uxtb	r2, r3
    6812:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6816:	f2c2 0300 	movt	r3, #8192	; 0x2000
    681a:	701a      	strb	r2, [r3, #0]
    681c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6820:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6824:	781b      	ldrb	r3, [r3, #0]
    6826:	3301      	adds	r3, #1
    6828:	b2da      	uxtb	r2, r3
    682a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    682e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6832:	701a      	strb	r2, [r3, #0]
    6834:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6838:	f2c2 0300 	movt	r3, #8192	; 0x2000
    683c:	781b      	ldrb	r3, [r3, #0]
    683e:	2bff      	cmp	r3, #255	; 0xff
    6840:	d105      	bne.n	684e <ground_calibrate+0xa8e>
    6842:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6846:	f2c2 0300 	movt	r3, #8192	; 0x2000
    684a:	2200      	movs	r2, #0
    684c:	701a      	strb	r2, [r3, #0]
    684e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6852:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6856:	781b      	ldrb	r3, [r3, #0]
    6858:	461a      	mov	r2, r3
    685a:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    685e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6862:	78d9      	ldrb	r1, [r3, #3]
    6864:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6868:	f2c2 0300 	movt	r3, #8192	; 0x2000
    686c:	5499      	strb	r1, [r3, r2]
    686e:	4b45      	ldr	r3, [pc, #276]	; (6984 <ground_calibrate+0xbc4>)
    6870:	781a      	ldrb	r2, [r3, #0]
    6872:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6876:	f2c2 0300 	movt	r3, #8192	; 0x2000
    687a:	781b      	ldrb	r3, [r3, #0]
    687c:	4413      	add	r3, r2
    687e:	b2da      	uxtb	r2, r3
    6880:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6884:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6888:	701a      	strb	r2, [r3, #0]
    688a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    688e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6892:	781a      	ldrb	r2, [r3, #0]
    6894:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6898:	f2c2 0300 	movt	r3, #8192	; 0x2000
    689c:	781b      	ldrb	r3, [r3, #0]
    689e:	4413      	add	r3, r2
    68a0:	b2da      	uxtb	r2, r3
    68a2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    68a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68aa:	701a      	strb	r2, [r3, #0]
    68ac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    68b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68b4:	781b      	ldrb	r3, [r3, #0]
    68b6:	3301      	adds	r3, #1
    68b8:	b2da      	uxtb	r2, r3
    68ba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    68be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68c2:	701a      	strb	r2, [r3, #0]
    68c4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    68c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68cc:	781b      	ldrb	r3, [r3, #0]
    68ce:	2bff      	cmp	r3, #255	; 0xff
    68d0:	d105      	bne.n	68de <ground_calibrate+0xb1e>
    68d2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    68d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68da:	2200      	movs	r2, #0
    68dc:	701a      	strb	r2, [r3, #0]
    68de:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    68e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68e6:	781b      	ldrb	r3, [r3, #0]
    68e8:	461a      	mov	r2, r3
    68ea:	f240 33f2 	movw	r3, #1010	; 0x3f2
    68ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68f2:	7819      	ldrb	r1, [r3, #0]
    68f4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    68f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68fc:	5499      	strb	r1, [r3, r2]
    68fe:	f240 33f2 	movw	r3, #1010	; 0x3f2
    6902:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6906:	781a      	ldrb	r2, [r3, #0]
    6908:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    690c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6910:	781b      	ldrb	r3, [r3, #0]
    6912:	4413      	add	r3, r2
    6914:	b2da      	uxtb	r2, r3
    6916:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    691a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    691e:	701a      	strb	r2, [r3, #0]
    6920:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6924:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6928:	781a      	ldrb	r2, [r3, #0]
    692a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    692e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6932:	781b      	ldrb	r3, [r3, #0]
    6934:	4413      	add	r3, r2
    6936:	b2da      	uxtb	r2, r3
    6938:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    693c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6940:	701a      	strb	r2, [r3, #0]
    6942:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6946:	f2c2 0300 	movt	r3, #8192	; 0x2000
    694a:	781b      	ldrb	r3, [r3, #0]
    694c:	3301      	adds	r3, #1
    694e:	b2da      	uxtb	r2, r3
    6950:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6954:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6958:	701a      	strb	r2, [r3, #0]
    695a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    695e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6962:	781b      	ldrb	r3, [r3, #0]
    6964:	2bff      	cmp	r3, #255	; 0xff
    6966:	d10f      	bne.n	6988 <ground_calibrate+0xbc8>
    6968:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    696c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6970:	2200      	movs	r2, #0
    6972:	701a      	strb	r2, [r3, #0]
    6974:	e008      	b.n	6988 <ground_calibrate+0xbc8>
    6976:	bf00      	nop
    6978:	2000b4cf 	.word	0x2000b4cf
    697c:	2000b4c5 	.word	0x2000b4c5
    6980:	2000b4c6 	.word	0x2000b4c6
    6984:	2000b4c7 	.word	0x2000b4c7
    6988:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    698c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6990:	781b      	ldrb	r3, [r3, #0]
    6992:	461a      	mov	r2, r3
    6994:	f240 33f2 	movw	r3, #1010	; 0x3f2
    6998:	f2c2 0300 	movt	r3, #8192	; 0x2000
    699c:	7859      	ldrb	r1, [r3, #1]
    699e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    69a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69a6:	5499      	strb	r1, [r3, r2]
    69a8:	4bd4      	ldr	r3, [pc, #848]	; (6cfc <ground_calibrate+0xf3c>)
    69aa:	781a      	ldrb	r2, [r3, #0]
    69ac:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    69b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69b4:	781b      	ldrb	r3, [r3, #0]
    69b6:	4413      	add	r3, r2
    69b8:	b2da      	uxtb	r2, r3
    69ba:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    69be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69c2:	701a      	strb	r2, [r3, #0]
    69c4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    69c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69cc:	781a      	ldrb	r2, [r3, #0]
    69ce:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    69d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69d6:	781b      	ldrb	r3, [r3, #0]
    69d8:	4413      	add	r3, r2
    69da:	b2da      	uxtb	r2, r3
    69dc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    69e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69e4:	701a      	strb	r2, [r3, #0]
    69e6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    69ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69ee:	781b      	ldrb	r3, [r3, #0]
    69f0:	3301      	adds	r3, #1
    69f2:	b2da      	uxtb	r2, r3
    69f4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    69f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69fc:	701a      	strb	r2, [r3, #0]
    69fe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a06:	781b      	ldrb	r3, [r3, #0]
    6a08:	2bff      	cmp	r3, #255	; 0xff
    6a0a:	d105      	bne.n	6a18 <ground_calibrate+0xc58>
    6a0c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6a10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a14:	2200      	movs	r2, #0
    6a16:	701a      	strb	r2, [r3, #0]
    6a18:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6a1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a20:	781b      	ldrb	r3, [r3, #0]
    6a22:	461a      	mov	r2, r3
    6a24:	f240 33f4 	movw	r3, #1012	; 0x3f4
    6a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a2c:	7819      	ldrb	r1, [r3, #0]
    6a2e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a36:	5499      	strb	r1, [r3, r2]
    6a38:	f240 33f4 	movw	r3, #1012	; 0x3f4
    6a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a40:	781a      	ldrb	r2, [r3, #0]
    6a42:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a4a:	781b      	ldrb	r3, [r3, #0]
    6a4c:	4413      	add	r3, r2
    6a4e:	b2da      	uxtb	r2, r3
    6a50:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a58:	701a      	strb	r2, [r3, #0]
    6a5a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a62:	781a      	ldrb	r2, [r3, #0]
    6a64:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a6c:	781b      	ldrb	r3, [r3, #0]
    6a6e:	4413      	add	r3, r2
    6a70:	b2da      	uxtb	r2, r3
    6a72:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a7a:	701a      	strb	r2, [r3, #0]
    6a7c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a84:	781b      	ldrb	r3, [r3, #0]
    6a86:	3301      	adds	r3, #1
    6a88:	b2da      	uxtb	r2, r3
    6a8a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6a8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a92:	701a      	strb	r2, [r3, #0]
    6a94:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6a98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a9c:	781b      	ldrb	r3, [r3, #0]
    6a9e:	2bff      	cmp	r3, #255	; 0xff
    6aa0:	d105      	bne.n	6aae <ground_calibrate+0xcee>
    6aa2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6aaa:	2200      	movs	r2, #0
    6aac:	701a      	strb	r2, [r3, #0]
    6aae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ab6:	781b      	ldrb	r3, [r3, #0]
    6ab8:	461a      	mov	r2, r3
    6aba:	f240 33f4 	movw	r3, #1012	; 0x3f4
    6abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ac2:	7859      	ldrb	r1, [r3, #1]
    6ac4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6acc:	5499      	strb	r1, [r3, r2]
    6ace:	4b8c      	ldr	r3, [pc, #560]	; (6d00 <ground_calibrate+0xf40>)
    6ad0:	781a      	ldrb	r2, [r3, #0]
    6ad2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ada:	781b      	ldrb	r3, [r3, #0]
    6adc:	4413      	add	r3, r2
    6ade:	b2da      	uxtb	r2, r3
    6ae0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ae8:	701a      	strb	r2, [r3, #0]
    6aea:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6af2:	781a      	ldrb	r2, [r3, #0]
    6af4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6afc:	781b      	ldrb	r3, [r3, #0]
    6afe:	4413      	add	r3, r2
    6b00:	b2da      	uxtb	r2, r3
    6b02:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6b06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b0a:	701a      	strb	r2, [r3, #0]
    6b0c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b14:	781b      	ldrb	r3, [r3, #0]
    6b16:	3301      	adds	r3, #1
    6b18:	b2da      	uxtb	r2, r3
    6b1a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6b1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b22:	701a      	strb	r2, [r3, #0]
    6b24:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6b28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b2c:	781b      	ldrb	r3, [r3, #0]
    6b2e:	2bff      	cmp	r3, #255	; 0xff
    6b30:	d105      	bne.n	6b3e <ground_calibrate+0xd7e>
    6b32:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b3a:	2200      	movs	r2, #0
    6b3c:	701a      	strb	r2, [r3, #0]
    6b3e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6b42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b46:	781b      	ldrb	r3, [r3, #0]
    6b48:	461a      	mov	r2, r3
    6b4a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b52:	7819      	ldrb	r1, [r3, #0]
    6b54:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6b58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b5c:	5499      	strb	r1, [r3, r2]
    6b5e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b66:	781b      	ldrb	r3, [r3, #0]
    6b68:	3301      	adds	r3, #1
    6b6a:	b2da      	uxtb	r2, r3
    6b6c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b74:	701a      	strb	r2, [r3, #0]
    6b76:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b7e:	781b      	ldrb	r3, [r3, #0]
    6b80:	2bff      	cmp	r3, #255	; 0xff
    6b82:	d105      	bne.n	6b90 <ground_calibrate+0xdd0>
    6b84:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b8c:	2200      	movs	r2, #0
    6b8e:	701a      	strb	r2, [r3, #0]
    6b90:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b98:	781b      	ldrb	r3, [r3, #0]
    6b9a:	461a      	mov	r2, r3
    6b9c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ba4:	7819      	ldrb	r1, [r3, #0]
    6ba6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bae:	5499      	strb	r1, [r3, r2]
    6bb0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bb8:	781b      	ldrb	r3, [r3, #0]
    6bba:	3301      	adds	r3, #1
    6bbc:	b2da      	uxtb	r2, r3
    6bbe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6bc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bc6:	701a      	strb	r2, [r3, #0]
    6bc8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bd0:	781b      	ldrb	r3, [r3, #0]
    6bd2:	2bff      	cmp	r3, #255	; 0xff
    6bd4:	d105      	bne.n	6be2 <ground_calibrate+0xe22>
    6bd6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6bda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bde:	2200      	movs	r2, #0
    6be0:	701a      	strb	r2, [r3, #0]
    6be2:	f242 0339 	movw	r3, #8249	; 0x2039
    6be6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bea:	781b      	ldrb	r3, [r3, #0]
    6bec:	b2db      	uxtb	r3, r3
    6bee:	f003 0310 	and.w	r3, r3, #16
    6bf2:	2b00      	cmp	r3, #0
    6bf4:	d15a      	bne.n	6cac <ground_calibrate+0xeec>
    6bf6:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6bfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bfe:	781b      	ldrb	r3, [r3, #0]
    6c00:	b2db      	uxtb	r3, r3
    6c02:	461a      	mov	r2, r3
    6c04:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c0c:	5c9a      	ldrb	r2, [r3, r2]
    6c0e:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    6c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c16:	701a      	strb	r2, [r3, #0]
    6c18:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    6c1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c20:	2200      	movs	r2, #0
    6c22:	701a      	strb	r2, [r3, #0]
    6c24:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6c28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c2c:	781b      	ldrb	r3, [r3, #0]
    6c2e:	b2db      	uxtb	r3, r3
    6c30:	3301      	adds	r3, #1
    6c32:	b2da      	uxtb	r2, r3
    6c34:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6c38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c3c:	701a      	strb	r2, [r3, #0]
    6c3e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6c42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c46:	781b      	ldrb	r3, [r3, #0]
    6c48:	b2db      	uxtb	r3, r3
    6c4a:	2bff      	cmp	r3, #255	; 0xff
    6c4c:	d105      	bne.n	6c5a <ground_calibrate+0xe9a>
    6c4e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6c52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c56:	2200      	movs	r2, #0
    6c58:	701a      	strb	r2, [r3, #0]
    6c5a:	f242 0338 	movw	r3, #8248	; 0x2038
    6c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c62:	f242 0238 	movw	r2, #8248	; 0x2038
    6c66:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6c6a:	7812      	ldrb	r2, [r2, #0]
    6c6c:	b2d2      	uxtb	r2, r2
    6c6e:	f042 0201 	orr.w	r2, r2, #1
    6c72:	b2d2      	uxtb	r2, r2
    6c74:	701a      	strb	r2, [r3, #0]
    6c76:	f242 0339 	movw	r3, #8249	; 0x2039
    6c7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c7e:	f242 0239 	movw	r2, #8249	; 0x2039
    6c82:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6c86:	7812      	ldrb	r2, [r2, #0]
    6c88:	b2d2      	uxtb	r2, r2
    6c8a:	f042 0210 	orr.w	r2, r2, #16
    6c8e:	b2d2      	uxtb	r2, r2
    6c90:	701a      	strb	r2, [r3, #0]
    6c92:	e00b      	b.n	6cac <ground_calibrate+0xeec>
    6c94:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    6c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c9c:	781b      	ldrb	r3, [r3, #0]
    6c9e:	3301      	adds	r3, #1
    6ca0:	b2da      	uxtb	r2, r3
    6ca2:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    6ca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6caa:	701a      	strb	r2, [r3, #0]
      calib_status = CALIB_DONE;
    6cac:	f64a 63ca 	movw	r3, #44746	; 0xaeca
    6cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cb4:	2202      	movs	r2, #2
    6cb6:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_CONTRAST(&ir_contrast);
    6cb8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6cbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cc0:	781a      	ldrb	r2, [r3, #0]
    6cc2:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6cc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cca:	781b      	ldrb	r3, [r3, #0]
    6ccc:	b2db      	uxtb	r3, r3
    6cce:	429a      	cmp	r2, r3
    6cd0:	d318      	bcc.n	6d04 <ground_calibrate+0xf44>
    6cd2:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6cd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cda:	781b      	ldrb	r3, [r3, #0]
    6cdc:	b2db      	uxtb	r3, r3
    6cde:	461a      	mov	r2, r3
    6ce0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ce8:	781b      	ldrb	r3, [r3, #0]
    6cea:	1ad3      	subs	r3, r2, r3
    6cec:	33ff      	adds	r3, #255	; 0xff
    6cee:	2b06      	cmp	r3, #6
    6cf0:	bfd4      	ite	le
    6cf2:	2300      	movle	r3, #0
    6cf4:	2301      	movgt	r3, #1
    6cf6:	b2db      	uxtb	r3, r3
    6cf8:	e016      	b.n	6d28 <ground_calibrate+0xf68>
    6cfa:	bf00      	nop
    6cfc:	200003f3 	.word	0x200003f3
    6d00:	200003f5 	.word	0x200003f5
    6d04:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6d08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d0c:	781b      	ldrb	r3, [r3, #0]
    6d0e:	b2db      	uxtb	r3, r3
    6d10:	461a      	mov	r2, r3
    6d12:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6d16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d1a:	781b      	ldrb	r3, [r3, #0]
    6d1c:	1ad3      	subs	r3, r2, r3
    6d1e:	2b06      	cmp	r3, #6
    6d20:	bfd4      	ite	le
    6d22:	2300      	movle	r3, #0
    6d24:	2301      	movgt	r3, #1
    6d26:	b2db      	uxtb	r3, r3
    6d28:	2b00      	cmp	r3, #0
    6d2a:	f000 8194 	beq.w	7056 <ground_calibrate+0x1296>
    6d2e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d36:	781b      	ldrb	r3, [r3, #0]
    6d38:	461a      	mov	r2, r3
    6d3a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6d3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d42:	2105      	movs	r1, #5
    6d44:	5499      	strb	r1, [r3, r2]
    6d46:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d4e:	781b      	ldrb	r3, [r3, #0]
    6d50:	3301      	adds	r3, #1
    6d52:	b2da      	uxtb	r2, r3
    6d54:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6d58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d5c:	701a      	strb	r2, [r3, #0]
    6d5e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6d62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d66:	781b      	ldrb	r3, [r3, #0]
    6d68:	2bff      	cmp	r3, #255	; 0xff
    6d6a:	d105      	bne.n	6d78 <ground_calibrate+0xfb8>
    6d6c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d74:	2200      	movs	r2, #0
    6d76:	701a      	strb	r2, [r3, #0]
    6d78:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d80:	781b      	ldrb	r3, [r3, #0]
    6d82:	461a      	mov	r2, r3
    6d84:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6d88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d8c:	2103      	movs	r1, #3
    6d8e:	5499      	strb	r1, [r3, r2]
    6d90:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6d94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d98:	781b      	ldrb	r3, [r3, #0]
    6d9a:	3301      	adds	r3, #1
    6d9c:	b2da      	uxtb	r2, r3
    6d9e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6da6:	701a      	strb	r2, [r3, #0]
    6da8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6db0:	781b      	ldrb	r3, [r3, #0]
    6db2:	2bff      	cmp	r3, #255	; 0xff
    6db4:	d105      	bne.n	6dc2 <ground_calibrate+0x1002>
    6db6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dbe:	2200      	movs	r2, #0
    6dc0:	701a      	strb	r2, [r3, #0]
    6dc2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6dc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dca:	2203      	movs	r2, #3
    6dcc:	701a      	strb	r2, [r3, #0]
    6dce:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dd6:	2203      	movs	r2, #3
    6dd8:	701a      	strb	r2, [r3, #0]
    6dda:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6de2:	781b      	ldrb	r3, [r3, #0]
    6de4:	461a      	mov	r2, r3
    6de6:	f240 33f0 	movw	r3, #1008	; 0x3f0
    6dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dee:	7819      	ldrb	r1, [r3, #0]
    6df0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6df8:	5499      	strb	r1, [r3, r2]
    6dfa:	f240 33f0 	movw	r3, #1008	; 0x3f0
    6dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e02:	781a      	ldrb	r2, [r3, #0]
    6e04:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6e08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e0c:	781b      	ldrb	r3, [r3, #0]
    6e0e:	4413      	add	r3, r2
    6e10:	b2da      	uxtb	r2, r3
    6e12:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6e16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e1a:	701a      	strb	r2, [r3, #0]
    6e1c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e24:	781a      	ldrb	r2, [r3, #0]
    6e26:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e2e:	781b      	ldrb	r3, [r3, #0]
    6e30:	4413      	add	r3, r2
    6e32:	b2da      	uxtb	r2, r3
    6e34:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e3c:	701a      	strb	r2, [r3, #0]
    6e3e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e46:	781b      	ldrb	r3, [r3, #0]
    6e48:	3301      	adds	r3, #1
    6e4a:	b2da      	uxtb	r2, r3
    6e4c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6e50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e54:	701a      	strb	r2, [r3, #0]
    6e56:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e5e:	781b      	ldrb	r3, [r3, #0]
    6e60:	2bff      	cmp	r3, #255	; 0xff
    6e62:	d105      	bne.n	6e70 <ground_calibrate+0x10b0>
    6e64:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e6c:	2200      	movs	r2, #0
    6e6e:	701a      	strb	r2, [r3, #0]
    6e70:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e78:	781b      	ldrb	r3, [r3, #0]
    6e7a:	461a      	mov	r2, r3
    6e7c:	f240 33f0 	movw	r3, #1008	; 0x3f0
    6e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e84:	7859      	ldrb	r1, [r3, #1]
    6e86:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6e8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e8e:	5499      	strb	r1, [r3, r2]
    6e90:	4b77      	ldr	r3, [pc, #476]	; (7070 <ground_calibrate+0x12b0>)
    6e92:	781a      	ldrb	r2, [r3, #0]
    6e94:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e9c:	781b      	ldrb	r3, [r3, #0]
    6e9e:	4413      	add	r3, r2
    6ea0:	b2da      	uxtb	r2, r3
    6ea2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6eaa:	701a      	strb	r2, [r3, #0]
    6eac:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6eb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6eb4:	781a      	ldrb	r2, [r3, #0]
    6eb6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6eba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ebe:	781b      	ldrb	r3, [r3, #0]
    6ec0:	4413      	add	r3, r2
    6ec2:	b2da      	uxtb	r2, r3
    6ec4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ecc:	701a      	strb	r2, [r3, #0]
    6ece:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6ed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ed6:	781b      	ldrb	r3, [r3, #0]
    6ed8:	3301      	adds	r3, #1
    6eda:	b2da      	uxtb	r2, r3
    6edc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6ee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ee4:	701a      	strb	r2, [r3, #0]
    6ee6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6eea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6eee:	781b      	ldrb	r3, [r3, #0]
    6ef0:	2bff      	cmp	r3, #255	; 0xff
    6ef2:	d105      	bne.n	6f00 <ground_calibrate+0x1140>
    6ef4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6ef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6efc:	2200      	movs	r2, #0
    6efe:	701a      	strb	r2, [r3, #0]
    6f00:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f08:	781b      	ldrb	r3, [r3, #0]
    6f0a:	461a      	mov	r2, r3
    6f0c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    6f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f14:	7819      	ldrb	r1, [r3, #0]
    6f16:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f1e:	5499      	strb	r1, [r3, r2]
    6f20:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6f24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f28:	781b      	ldrb	r3, [r3, #0]
    6f2a:	3301      	adds	r3, #1
    6f2c:	b2da      	uxtb	r2, r3
    6f2e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6f32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f36:	701a      	strb	r2, [r3, #0]
    6f38:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6f3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f40:	781b      	ldrb	r3, [r3, #0]
    6f42:	2bff      	cmp	r3, #255	; 0xff
    6f44:	d105      	bne.n	6f52 <ground_calibrate+0x1192>
    6f46:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6f4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f4e:	2200      	movs	r2, #0
    6f50:	701a      	strb	r2, [r3, #0]
    6f52:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f5a:	781b      	ldrb	r3, [r3, #0]
    6f5c:	461a      	mov	r2, r3
    6f5e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    6f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f66:	7819      	ldrb	r1, [r3, #0]
    6f68:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f70:	5499      	strb	r1, [r3, r2]
    6f72:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6f76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f7a:	781b      	ldrb	r3, [r3, #0]
    6f7c:	3301      	adds	r3, #1
    6f7e:	b2da      	uxtb	r2, r3
    6f80:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f88:	701a      	strb	r2, [r3, #0]
    6f8a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f92:	781b      	ldrb	r3, [r3, #0]
    6f94:	2bff      	cmp	r3, #255	; 0xff
    6f96:	d105      	bne.n	6fa4 <ground_calibrate+0x11e4>
    6f98:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    6f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fa0:	2200      	movs	r2, #0
    6fa2:	701a      	strb	r2, [r3, #0]
    6fa4:	f242 0339 	movw	r3, #8249	; 0x2039
    6fa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fac:	781b      	ldrb	r3, [r3, #0]
    6fae:	b2db      	uxtb	r3, r3
    6fb0:	f003 0310 	and.w	r3, r3, #16
    6fb4:	2b00      	cmp	r3, #0
    6fb6:	d15a      	bne.n	706e <ground_calibrate+0x12ae>
    6fb8:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fc0:	781b      	ldrb	r3, [r3, #0]
    6fc2:	b2db      	uxtb	r3, r3
    6fc4:	461a      	mov	r2, r3
    6fc6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    6fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fce:	5c9a      	ldrb	r2, [r3, r2]
    6fd0:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    6fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fd8:	701a      	strb	r2, [r3, #0]
    6fda:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    6fde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fe2:	2200      	movs	r2, #0
    6fe4:	701a      	strb	r2, [r3, #0]
    6fe6:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fee:	781b      	ldrb	r3, [r3, #0]
    6ff0:	b2db      	uxtb	r3, r3
    6ff2:	3301      	adds	r3, #1
    6ff4:	b2da      	uxtb	r2, r3
    6ff6:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    6ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ffe:	701a      	strb	r2, [r3, #0]
    7000:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    7004:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7008:	781b      	ldrb	r3, [r3, #0]
    700a:	b2db      	uxtb	r3, r3
    700c:	2bff      	cmp	r3, #255	; 0xff
    700e:	d105      	bne.n	701c <ground_calibrate+0x125c>
    7010:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    7014:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7018:	2200      	movs	r2, #0
    701a:	701a      	strb	r2, [r3, #0]
    701c:	f242 0338 	movw	r3, #8248	; 0x2038
    7020:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7024:	f242 0238 	movw	r2, #8248	; 0x2038
    7028:	f2c2 0200 	movt	r2, #8192	; 0x2000
    702c:	7812      	ldrb	r2, [r2, #0]
    702e:	b2d2      	uxtb	r2, r2
    7030:	f042 0201 	orr.w	r2, r2, #1
    7034:	b2d2      	uxtb	r2, r2
    7036:	701a      	strb	r2, [r3, #0]
    7038:	f242 0339 	movw	r3, #8249	; 0x2039
    703c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7040:	f242 0239 	movw	r2, #8249	; 0x2039
    7044:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7048:	7812      	ldrb	r2, [r2, #0]
    704a:	b2d2      	uxtb	r2, r2
    704c:	f042 0210 	orr.w	r2, r2, #16
    7050:	b2d2      	uxtb	r2, r2
    7052:	701a      	strb	r2, [r3, #0]
    7054:	e00b      	b.n	706e <ground_calibrate+0x12ae>
    7056:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    705a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    705e:	781b      	ldrb	r3, [r3, #0]
    7060:	3301      	adds	r3, #1
    7062:	b2da      	uxtb	r2, r3
    7064:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    7068:	f2c2 0300 	movt	r3, #8192	; 0x2000
    706c:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    706e:	bd80      	pop	{r7, pc}
    7070:	200003f1 	.word	0x200003f1

00007074 <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    7074:	b480      	push	{r7}
    7076:	b083      	sub	sp, #12
    7078:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    707a:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    707e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7082:	781b      	ldrb	r3, [r3, #0]
    7084:	2b03      	cmp	r3, #3
    7086:	d10c      	bne.n	70a2 <pprz_mode_update+0x2e>
    7088:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    708c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7090:	781b      	ldrb	r3, [r3, #0]
    7092:	2b00      	cmp	r3, #0
    7094:	d032      	beq.n	70fc <pprz_mode_update+0x88>
    7096:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    709a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    709e:	2200      	movs	r2, #0
    70a0:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    70a2:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    70a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70aa:	891b      	ldrh	r3, [r3, #8]
    70ac:	b21b      	sxth	r3, r3
    70ae:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    70b2:	dc0f      	bgt.n	70d4 <pprz_mode_update+0x60>
    70b4:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    70b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70bc:	891b      	ldrh	r3, [r3, #8]
    70be:	b21a      	sxth	r2, r3
    70c0:	f64e 5341 	movw	r3, #60737	; 0xed41
    70c4:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    70c8:	429a      	cmp	r2, r3
    70ca:	bfb4      	ite	lt
    70cc:	2300      	movlt	r3, #0
    70ce:	2301      	movge	r3, #1
    70d0:	b2db      	uxtb	r3, r3
    70d2:	e000      	b.n	70d6 <pprz_mode_update+0x62>
    70d4:	2302      	movs	r3, #2
    70d6:	71fb      	strb	r3, [r7, #7]
    70d8:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    70dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70e0:	781b      	ldrb	r3, [r3, #0]
    70e2:	79fa      	ldrb	r2, [r7, #7]
    70e4:	429a      	cmp	r2, r3
    70e6:	d007      	beq.n	70f8 <pprz_mode_update+0x84>
    70e8:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    70ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70f0:	79fa      	ldrb	r2, [r7, #7]
    70f2:	701a      	strb	r2, [r3, #0]
    70f4:	2301      	movs	r3, #1
    70f6:	e002      	b.n	70fe <pprz_mode_update+0x8a>
    70f8:	2300      	movs	r3, #0
    70fa:	e000      	b.n	70fe <pprz_mode_update+0x8a>
  } else
    return FALSE;
    70fc:	2300      	movs	r3, #0
}
    70fe:	4618      	mov	r0, r3
    7100:	370c      	adds	r7, #12
    7102:	46bd      	mov	sp, r7
    7104:	f85d 7b04 	ldr.w	r7, [sp], #4
    7108:	4770      	bx	lr
    710a:	bf00      	nop

0000710c <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    710c:	b480      	push	{r7}
    710e:	b083      	sub	sp, #12
    7110:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    7112:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    7116:	f2c2 0300 	movt	r3, #8192	; 0x2000
    711a:	89db      	ldrh	r3, [r3, #14]
    711c:	b21a      	sxth	r2, r3
    711e:	f640 437f 	movw	r3, #3199	; 0xc7f
    7122:	429a      	cmp	r2, r3
    7124:	bfd4      	ite	le
    7126:	2300      	movle	r3, #0
    7128:	2301      	movgt	r3, #1
    712a:	b2db      	uxtb	r3, r3
    712c:	71fb      	strb	r3, [r7, #7]
    712e:	f240 33ec 	movw	r3, #1004	; 0x3ec
    7132:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7136:	781b      	ldrb	r3, [r3, #0]
    7138:	79fa      	ldrb	r2, [r7, #7]
    713a:	429a      	cmp	r2, r3
    713c:	d007      	beq.n	714e <ir_estim_mode_update+0x42>
    713e:	f240 33ec 	movw	r3, #1004	; 0x3ec
    7142:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7146:	79fa      	ldrb	r2, [r7, #7]
    7148:	701a      	strb	r2, [r3, #0]
    714a:	2301      	movs	r3, #1
    714c:	e000      	b.n	7150 <ir_estim_mode_update+0x44>
    714e:	2300      	movs	r3, #0
}
    7150:	4618      	mov	r0, r3
    7152:	370c      	adds	r7, #12
    7154:	46bd      	mov	sp, r7
    7156:	f85d 7b04 	ldr.w	r7, [sp], #4
    715a:	4770      	bx	lr

0000715c <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    715c:	b480      	push	{r7}
    715e:	b083      	sub	sp, #12
    7160:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    7162:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    7166:	f2c2 0300 	movt	r3, #8192	; 0x2000
    716a:	7cdb      	ldrb	r3, [r3, #19]
    716c:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    716e:	f64a 63bb 	movw	r3, #44731	; 0xaebb
    7172:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7176:	781b      	ldrb	r3, [r3, #0]
    7178:	79fa      	ldrb	r2, [r7, #7]
    717a:	429a      	cmp	r2, r3
    717c:	d017      	beq.n	71ae <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    717e:	f64a 63bb 	movw	r3, #44731	; 0xaebb
    7182:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7186:	781b      	ldrb	r3, [r3, #0]
    7188:	461a      	mov	r2, r3
    718a:	79fb      	ldrb	r3, [r7, #7]
    718c:	4053      	eors	r3, r2
    718e:	f003 0303 	and.w	r3, r3, #3
    7192:	2b00      	cmp	r3, #0
    7194:	bf0c      	ite	eq
    7196:	2300      	moveq	r3, #0
    7198:	2301      	movne	r3, #1
    719a:	b2db      	uxtb	r3, r3
    719c:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    719e:	f64a 63bb 	movw	r3, #44731	; 0xaebb
    71a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71a6:	79fa      	ldrb	r2, [r7, #7]
    71a8:	701a      	strb	r2, [r3, #0]
    return changed;
    71aa:	79bb      	ldrb	r3, [r7, #6]
    71ac:	e000      	b.n	71b0 <mcu1_status_update+0x54>
  }
  return FALSE;
    71ae:	2300      	movs	r3, #0
}
    71b0:	4618      	mov	r0, r3
    71b2:	370c      	adds	r7, #12
    71b4:	46bd      	mov	sp, r7
    71b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    71ba:	4770      	bx	lr

000071bc <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    71bc:	b480      	push	{r7}
    71be:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    71c0:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    71c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71c8:	781b      	ldrb	r3, [r3, #0]
    71ca:	2b00      	cmp	r3, #0
    71cc:	d12a      	bne.n	7224 <events_update+0x68>
    71ce:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    71d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71d6:	895b      	ldrh	r3, [r3, #10]
    71d8:	b21b      	sxth	r3, r3
    71da:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    71de:	dd21      	ble.n	7224 <events_update+0x68>
    71e0:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    71e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71e8:	881b      	ldrh	r3, [r3, #0]
    71ea:	2b13      	cmp	r3, #19
    71ec:	d819      	bhi.n	7222 <events_update+0x66>
    71ee:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    71f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71f6:	881b      	ldrh	r3, [r3, #0]
    71f8:	3301      	adds	r3, #1
    71fa:	b29a      	uxth	r2, r3
    71fc:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    7200:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7204:	801a      	strh	r2, [r3, #0]
    7206:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    720a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    720e:	881b      	ldrh	r3, [r3, #0]
    7210:	2b14      	cmp	r3, #20
    7212:	d106      	bne.n	7222 <events_update+0x66>
    7214:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    7218:	f2c2 0300 	movt	r3, #8192	; 0x2000
    721c:	2201      	movs	r2, #1
    721e:	701a      	strb	r2, [r3, #0]
    7220:	e00c      	b.n	723c <events_update+0x80>
    7222:	e00b      	b.n	723c <events_update+0x80>
    7224:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    7228:	f2c2 0300 	movt	r3, #8192	; 0x2000
    722c:	2200      	movs	r2, #0
    722e:	801a      	strh	r2, [r3, #0]
    7230:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    7234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7238:	2200      	movs	r2, #0
    723a:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    723c:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    7240:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7244:	781b      	ldrb	r3, [r3, #0]
    7246:	2b00      	cmp	r3, #0
    7248:	d12a      	bne.n	72a0 <events_update+0xe4>
    724a:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    724e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7252:	895b      	ldrh	r3, [r3, #10]
    7254:	b21b      	sxth	r3, r3
    7256:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    725a:	da21      	bge.n	72a0 <events_update+0xe4>
    725c:	f64a 63ce 	movw	r3, #44750	; 0xaece
    7260:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7264:	881b      	ldrh	r3, [r3, #0]
    7266:	2b13      	cmp	r3, #19
    7268:	d819      	bhi.n	729e <events_update+0xe2>
    726a:	f64a 63ce 	movw	r3, #44750	; 0xaece
    726e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7272:	881b      	ldrh	r3, [r3, #0]
    7274:	3301      	adds	r3, #1
    7276:	b29a      	uxth	r2, r3
    7278:	f64a 63ce 	movw	r3, #44750	; 0xaece
    727c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7280:	801a      	strh	r2, [r3, #0]
    7282:	f64a 63ce 	movw	r3, #44750	; 0xaece
    7286:	f2c2 0300 	movt	r3, #8192	; 0x2000
    728a:	881b      	ldrh	r3, [r3, #0]
    728c:	2b14      	cmp	r3, #20
    728e:	d106      	bne.n	729e <events_update+0xe2>
    7290:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    7294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7298:	2201      	movs	r2, #1
    729a:	701a      	strb	r2, [r3, #0]
    729c:	e00c      	b.n	72b8 <events_update+0xfc>
    729e:	e00b      	b.n	72b8 <events_update+0xfc>
    72a0:	f64a 63ce 	movw	r3, #44750	; 0xaece
    72a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72a8:	2200      	movs	r2, #0
    72aa:	801a      	strh	r2, [r3, #0]
    72ac:	f64a 63b9 	movw	r3, #44729	; 0xaeb9
    72b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72b4:	2200      	movs	r2, #0
    72b6:	701a      	strb	r2, [r3, #0]
}  
    72b8:	46bd      	mov	sp, r7
    72ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    72be:	4770      	bx	lr

000072c0 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    72c0:	b480      	push	{r7}
    72c2:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    72c4:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    72c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72cc:	88da      	ldrh	r2, [r3, #6]
    72ce:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    72d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72d6:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    72d8:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    72dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72e0:	2200      	movs	r2, #0
    72e2:	74da      	strb	r2, [r3, #19]
}
    72e4:	46bd      	mov	sp, r7
    72e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    72ea:	4770      	bx	lr

000072ec <send_boot>:
/** \fn inline void reporting_task( void )
 *  \brief Send a serie of initialisation messages followed by a stream of periodic ones\n
 * Called at 20Hz.
 */

void send_boot(void){
    72ec:	b480      	push	{r7}
    72ee:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  //if (boot) 
  {
      DOWNLINK_SEND_BOOT(&version);
    72f0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    72f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72f8:	781a      	ldrb	r2, [r3, #0]
    72fa:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    72fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7302:	781b      	ldrb	r3, [r3, #0]
    7304:	b2db      	uxtb	r3, r3
    7306:	429a      	cmp	r2, r3
    7308:	d313      	bcc.n	7332 <send_boot+0x46>
    730a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    730e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7312:	781b      	ldrb	r3, [r3, #0]
    7314:	b2db      	uxtb	r3, r3
    7316:	461a      	mov	r2, r3
    7318:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    731c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7320:	781b      	ldrb	r3, [r3, #0]
    7322:	1ad3      	subs	r3, r2, r3
    7324:	33ff      	adds	r3, #255	; 0xff
    7326:	2b06      	cmp	r3, #6
    7328:	bfd4      	ite	le
    732a:	2300      	movle	r3, #0
    732c:	2301      	movgt	r3, #1
    732e:	b2db      	uxtb	r3, r3
    7330:	e011      	b.n	7356 <send_boot+0x6a>
    7332:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    7336:	f2c2 0300 	movt	r3, #8192	; 0x2000
    733a:	781b      	ldrb	r3, [r3, #0]
    733c:	b2db      	uxtb	r3, r3
    733e:	461a      	mov	r2, r3
    7340:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7344:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7348:	781b      	ldrb	r3, [r3, #0]
    734a:	1ad3      	subs	r3, r2, r3
    734c:	2b06      	cmp	r3, #6
    734e:	bfd4      	ite	le
    7350:	2300      	movle	r3, #0
    7352:	2301      	movgt	r3, #1
    7354:	b2db      	uxtb	r3, r3
    7356:	2b00      	cmp	r3, #0
    7358:	f000 8194 	beq.w	7684 <send_boot+0x398>
    735c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7360:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7364:	781b      	ldrb	r3, [r3, #0]
    7366:	461a      	mov	r2, r3
    7368:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    736c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7370:	2105      	movs	r1, #5
    7372:	5499      	strb	r1, [r3, r2]
    7374:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7378:	f2c2 0300 	movt	r3, #8192	; 0x2000
    737c:	781b      	ldrb	r3, [r3, #0]
    737e:	3301      	adds	r3, #1
    7380:	b2da      	uxtb	r2, r3
    7382:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7386:	f2c2 0300 	movt	r3, #8192	; 0x2000
    738a:	701a      	strb	r2, [r3, #0]
    738c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7390:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7394:	781b      	ldrb	r3, [r3, #0]
    7396:	2bff      	cmp	r3, #255	; 0xff
    7398:	d105      	bne.n	73a6 <send_boot+0xba>
    739a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    739e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73a2:	2200      	movs	r2, #0
    73a4:	701a      	strb	r2, [r3, #0]
    73a6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    73aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73ae:	781b      	ldrb	r3, [r3, #0]
    73b0:	461a      	mov	r2, r3
    73b2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    73b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73ba:	2101      	movs	r1, #1
    73bc:	5499      	strb	r1, [r3, r2]
    73be:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    73c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73c6:	781b      	ldrb	r3, [r3, #0]
    73c8:	3301      	adds	r3, #1
    73ca:	b2da      	uxtb	r2, r3
    73cc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    73d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73d4:	701a      	strb	r2, [r3, #0]
    73d6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    73da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73de:	781b      	ldrb	r3, [r3, #0]
    73e0:	2bff      	cmp	r3, #255	; 0xff
    73e2:	d105      	bne.n	73f0 <send_boot+0x104>
    73e4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    73e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73ec:	2200      	movs	r2, #0
    73ee:	701a      	strb	r2, [r3, #0]
    73f0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    73f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73f8:	2201      	movs	r2, #1
    73fa:	701a      	strb	r2, [r3, #0]
    73fc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7400:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7404:	2201      	movs	r2, #1
    7406:	701a      	strb	r2, [r3, #0]
    7408:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    740c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7410:	781b      	ldrb	r3, [r3, #0]
    7412:	461a      	mov	r2, r3
    7414:	f248 73fe 	movw	r3, #34814	; 0x87fe
    7418:	f2c0 0301 	movt	r3, #1
    741c:	7819      	ldrb	r1, [r3, #0]
    741e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7422:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7426:	5499      	strb	r1, [r3, r2]
    7428:	f248 73fe 	movw	r3, #34814	; 0x87fe
    742c:	f2c0 0301 	movt	r3, #1
    7430:	781a      	ldrb	r2, [r3, #0]
    7432:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7436:	f2c2 0300 	movt	r3, #8192	; 0x2000
    743a:	781b      	ldrb	r3, [r3, #0]
    743c:	4413      	add	r3, r2
    743e:	b2da      	uxtb	r2, r3
    7440:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7444:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7448:	701a      	strb	r2, [r3, #0]
    744a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    744e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7452:	781a      	ldrb	r2, [r3, #0]
    7454:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7458:	f2c2 0300 	movt	r3, #8192	; 0x2000
    745c:	781b      	ldrb	r3, [r3, #0]
    745e:	4413      	add	r3, r2
    7460:	b2da      	uxtb	r2, r3
    7462:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7466:	f2c2 0300 	movt	r3, #8192	; 0x2000
    746a:	701a      	strb	r2, [r3, #0]
    746c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7470:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7474:	781b      	ldrb	r3, [r3, #0]
    7476:	3301      	adds	r3, #1
    7478:	b2da      	uxtb	r2, r3
    747a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    747e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7482:	701a      	strb	r2, [r3, #0]
    7484:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7488:	f2c2 0300 	movt	r3, #8192	; 0x2000
    748c:	781b      	ldrb	r3, [r3, #0]
    748e:	2bff      	cmp	r3, #255	; 0xff
    7490:	d105      	bne.n	749e <send_boot+0x1b2>
    7492:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7496:	f2c2 0300 	movt	r3, #8192	; 0x2000
    749a:	2200      	movs	r2, #0
    749c:	701a      	strb	r2, [r3, #0]
    749e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    74a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74a6:	781b      	ldrb	r3, [r3, #0]
    74a8:	461a      	mov	r2, r3
    74aa:	f248 73fe 	movw	r3, #34814	; 0x87fe
    74ae:	f2c0 0301 	movt	r3, #1
    74b2:	7859      	ldrb	r1, [r3, #1]
    74b4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    74b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74bc:	5499      	strb	r1, [r3, r2]
    74be:	4b88      	ldr	r3, [pc, #544]	; (76e0 <send_boot+0x3f4>)
    74c0:	781a      	ldrb	r2, [r3, #0]
    74c2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    74c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74ca:	781b      	ldrb	r3, [r3, #0]
    74cc:	4413      	add	r3, r2
    74ce:	b2da      	uxtb	r2, r3
    74d0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    74d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74d8:	701a      	strb	r2, [r3, #0]
    74da:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    74de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74e2:	781a      	ldrb	r2, [r3, #0]
    74e4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    74e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74ec:	781b      	ldrb	r3, [r3, #0]
    74ee:	4413      	add	r3, r2
    74f0:	b2da      	uxtb	r2, r3
    74f2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    74f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74fa:	701a      	strb	r2, [r3, #0]
    74fc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7500:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7504:	781b      	ldrb	r3, [r3, #0]
    7506:	3301      	adds	r3, #1
    7508:	b2da      	uxtb	r2, r3
    750a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    750e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7512:	701a      	strb	r2, [r3, #0]
    7514:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7518:	f2c2 0300 	movt	r3, #8192	; 0x2000
    751c:	781b      	ldrb	r3, [r3, #0]
    751e:	2bff      	cmp	r3, #255	; 0xff
    7520:	d105      	bne.n	752e <send_boot+0x242>
    7522:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7526:	f2c2 0300 	movt	r3, #8192	; 0x2000
    752a:	2200      	movs	r2, #0
    752c:	701a      	strb	r2, [r3, #0]
    752e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7532:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7536:	781b      	ldrb	r3, [r3, #0]
    7538:	461a      	mov	r2, r3
    753a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    753e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7542:	7819      	ldrb	r1, [r3, #0]
    7544:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7548:	f2c2 0300 	movt	r3, #8192	; 0x2000
    754c:	5499      	strb	r1, [r3, r2]
    754e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7552:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7556:	781b      	ldrb	r3, [r3, #0]
    7558:	3301      	adds	r3, #1
    755a:	b2da      	uxtb	r2, r3
    755c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7560:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7564:	701a      	strb	r2, [r3, #0]
    7566:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    756a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    756e:	781b      	ldrb	r3, [r3, #0]
    7570:	2bff      	cmp	r3, #255	; 0xff
    7572:	d105      	bne.n	7580 <send_boot+0x294>
    7574:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7578:	f2c2 0300 	movt	r3, #8192	; 0x2000
    757c:	2200      	movs	r2, #0
    757e:	701a      	strb	r2, [r3, #0]
    7580:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7588:	781b      	ldrb	r3, [r3, #0]
    758a:	461a      	mov	r2, r3
    758c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7590:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7594:	7819      	ldrb	r1, [r3, #0]
    7596:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    759a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    759e:	5499      	strb	r1, [r3, r2]
    75a0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    75a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75a8:	781b      	ldrb	r3, [r3, #0]
    75aa:	3301      	adds	r3, #1
    75ac:	b2da      	uxtb	r2, r3
    75ae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    75b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75b6:	701a      	strb	r2, [r3, #0]
    75b8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    75bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75c0:	781b      	ldrb	r3, [r3, #0]
    75c2:	2bff      	cmp	r3, #255	; 0xff
    75c4:	d105      	bne.n	75d2 <send_boot+0x2e6>
    75c6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    75ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75ce:	2200      	movs	r2, #0
    75d0:	701a      	strb	r2, [r3, #0]
    75d2:	f242 0339 	movw	r3, #8249	; 0x2039
    75d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75da:	781b      	ldrb	r3, [r3, #0]
    75dc:	b2db      	uxtb	r3, r3
    75de:	f003 0310 	and.w	r3, r3, #16
    75e2:	2b00      	cmp	r3, #0
    75e4:	d15a      	bne.n	769c <send_boot+0x3b0>
    75e6:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    75ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75ee:	781b      	ldrb	r3, [r3, #0]
    75f0:	b2db      	uxtb	r3, r3
    75f2:	461a      	mov	r2, r3
    75f4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    75f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75fc:	5c9a      	ldrb	r2, [r3, r2]
    75fe:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    7602:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7606:	701a      	strb	r2, [r3, #0]
    7608:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    760c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7610:	2200      	movs	r2, #0
    7612:	701a      	strb	r2, [r3, #0]
    7614:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    7618:	f2c2 0300 	movt	r3, #8192	; 0x2000
    761c:	781b      	ldrb	r3, [r3, #0]
    761e:	b2db      	uxtb	r3, r3
    7620:	3301      	adds	r3, #1
    7622:	b2da      	uxtb	r2, r3
    7624:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    7628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    762c:	701a      	strb	r2, [r3, #0]
    762e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    7632:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7636:	781b      	ldrb	r3, [r3, #0]
    7638:	b2db      	uxtb	r3, r3
    763a:	2bff      	cmp	r3, #255	; 0xff
    763c:	d105      	bne.n	764a <send_boot+0x35e>
    763e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    7642:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7646:	2200      	movs	r2, #0
    7648:	701a      	strb	r2, [r3, #0]
    764a:	f242 0338 	movw	r3, #8248	; 0x2038
    764e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7652:	f242 0238 	movw	r2, #8248	; 0x2038
    7656:	f2c2 0200 	movt	r2, #8192	; 0x2000
    765a:	7812      	ldrb	r2, [r2, #0]
    765c:	b2d2      	uxtb	r2, r2
    765e:	f042 0201 	orr.w	r2, r2, #1
    7662:	b2d2      	uxtb	r2, r2
    7664:	701a      	strb	r2, [r3, #0]
    7666:	f242 0339 	movw	r3, #8249	; 0x2039
    766a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    766e:	f242 0239 	movw	r2, #8249	; 0x2039
    7672:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7676:	7812      	ldrb	r2, [r2, #0]
    7678:	b2d2      	uxtb	r2, r2
    767a:	f042 0210 	orr.w	r2, r2, #16
    767e:	b2d2      	uxtb	r2, r2
    7680:	701a      	strb	r2, [r3, #0]
    7682:	e00b      	b.n	769c <send_boot+0x3b0>
    7684:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    7688:	f2c2 0300 	movt	r3, #8192	; 0x2000
    768c:	781b      	ldrb	r3, [r3, #0]
    768e:	3301      	adds	r3, #1
    7690:	b2da      	uxtb	r2, r3
    7692:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    7696:	f2c2 0300 	movt	r3, #8192	; 0x2000
    769a:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    769c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    76a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76a4:	781a      	ldrb	r2, [r3, #0]
    76a6:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    76aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76ae:	781b      	ldrb	r3, [r3, #0]
    76b0:	b2db      	uxtb	r3, r3
    76b2:	429a      	cmp	r2, r3
    76b4:	d316      	bcc.n	76e4 <send_boot+0x3f8>
    76b6:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    76ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76be:	781b      	ldrb	r3, [r3, #0]
    76c0:	b2db      	uxtb	r3, r3
    76c2:	461a      	mov	r2, r3
    76c4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    76c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76cc:	781b      	ldrb	r3, [r3, #0]
    76ce:	1ad3      	subs	r3, r2, r3
    76d0:	33ff      	adds	r3, #255	; 0xff
    76d2:	2b14      	cmp	r3, #20
    76d4:	bfd4      	ite	le
    76d6:	2300      	movle	r3, #0
    76d8:	2301      	movgt	r3, #1
    76da:	b2db      	uxtb	r3, r3
    76dc:	e014      	b.n	7708 <send_boot+0x41c>
    76de:	bf00      	nop
    76e0:	000187ff 	.word	0x000187ff
    76e4:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    76e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76ec:	781b      	ldrb	r3, [r3, #0]
    76ee:	b2db      	uxtb	r3, r3
    76f0:	461a      	mov	r2, r3
    76f2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    76f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76fa:	781b      	ldrb	r3, [r3, #0]
    76fc:	1ad3      	subs	r3, r2, r3
    76fe:	2b14      	cmp	r3, #20
    7700:	bfd4      	ite	le
    7702:	2300      	movle	r3, #0
    7704:	2301      	movgt	r3, #1
    7706:	b2db      	uxtb	r3, r3
    7708:	2b00      	cmp	r3, #0
    770a:	f000 85a5 	beq.w	8258 <send_boot+0xf6c>
    770e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7712:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7716:	781b      	ldrb	r3, [r3, #0]
    7718:	461a      	mov	r2, r3
    771a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    771e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7722:	2105      	movs	r1, #5
    7724:	5499      	strb	r1, [r3, r2]
    7726:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    772a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    772e:	781b      	ldrb	r3, [r3, #0]
    7730:	3301      	adds	r3, #1
    7732:	b2da      	uxtb	r2, r3
    7734:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7738:	f2c2 0300 	movt	r3, #8192	; 0x2000
    773c:	701a      	strb	r2, [r3, #0]
    773e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7742:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7746:	781b      	ldrb	r3, [r3, #0]
    7748:	2bff      	cmp	r3, #255	; 0xff
    774a:	d105      	bne.n	7758 <send_boot+0x46c>
    774c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7750:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7754:	2200      	movs	r2, #0
    7756:	701a      	strb	r2, [r3, #0]
    7758:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    775c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7760:	781b      	ldrb	r3, [r3, #0]
    7762:	461a      	mov	r2, r3
    7764:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7768:	f2c2 0300 	movt	r3, #8192	; 0x2000
    776c:	2105      	movs	r1, #5
    776e:	5499      	strb	r1, [r3, r2]
    7770:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7774:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7778:	781b      	ldrb	r3, [r3, #0]
    777a:	3301      	adds	r3, #1
    777c:	b2da      	uxtb	r2, r3
    777e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7782:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7786:	701a      	strb	r2, [r3, #0]
    7788:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    778c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7790:	781b      	ldrb	r3, [r3, #0]
    7792:	2bff      	cmp	r3, #255	; 0xff
    7794:	d105      	bne.n	77a2 <send_boot+0x4b6>
    7796:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    779a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    779e:	2200      	movs	r2, #0
    77a0:	701a      	strb	r2, [r3, #0]
    77a2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    77a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77aa:	2205      	movs	r2, #5
    77ac:	701a      	strb	r2, [r3, #0]
    77ae:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    77b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77b6:	2205      	movs	r2, #5
    77b8:	701a      	strb	r2, [r3, #0]
    77ba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    77be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77c2:	781b      	ldrb	r3, [r3, #0]
    77c4:	461a      	mov	r2, r3
    77c6:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    77ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77ce:	7819      	ldrb	r1, [r3, #0]
    77d0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    77d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77d8:	5499      	strb	r1, [r3, r2]
    77da:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    77de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77e2:	781a      	ldrb	r2, [r3, #0]
    77e4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    77e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77ec:	781b      	ldrb	r3, [r3, #0]
    77ee:	4413      	add	r3, r2
    77f0:	b2da      	uxtb	r2, r3
    77f2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    77f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77fa:	701a      	strb	r2, [r3, #0]
    77fc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7800:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7804:	781a      	ldrb	r2, [r3, #0]
    7806:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    780a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    780e:	781b      	ldrb	r3, [r3, #0]
    7810:	4413      	add	r3, r2
    7812:	b2da      	uxtb	r2, r3
    7814:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7818:	f2c2 0300 	movt	r3, #8192	; 0x2000
    781c:	701a      	strb	r2, [r3, #0]
    781e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7822:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7826:	781b      	ldrb	r3, [r3, #0]
    7828:	3301      	adds	r3, #1
    782a:	b2da      	uxtb	r2, r3
    782c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7830:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7834:	701a      	strb	r2, [r3, #0]
    7836:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    783a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    783e:	781b      	ldrb	r3, [r3, #0]
    7840:	2bff      	cmp	r3, #255	; 0xff
    7842:	d105      	bne.n	7850 <send_boot+0x564>
    7844:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7848:	f2c2 0300 	movt	r3, #8192	; 0x2000
    784c:	2200      	movs	r2, #0
    784e:	701a      	strb	r2, [r3, #0]
    7850:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7854:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7858:	781b      	ldrb	r3, [r3, #0]
    785a:	461a      	mov	r2, r3
    785c:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    7860:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7864:	7859      	ldrb	r1, [r3, #1]
    7866:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    786a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    786e:	5499      	strb	r1, [r3, r2]
    7870:	4bd1      	ldr	r3, [pc, #836]	; (7bb8 <send_boot+0x8cc>)
    7872:	781a      	ldrb	r2, [r3, #0]
    7874:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    787c:	781b      	ldrb	r3, [r3, #0]
    787e:	4413      	add	r3, r2
    7880:	b2da      	uxtb	r2, r3
    7882:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7886:	f2c2 0300 	movt	r3, #8192	; 0x2000
    788a:	701a      	strb	r2, [r3, #0]
    788c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7890:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7894:	781a      	ldrb	r2, [r3, #0]
    7896:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    789a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    789e:	781b      	ldrb	r3, [r3, #0]
    78a0:	4413      	add	r3, r2
    78a2:	b2da      	uxtb	r2, r3
    78a4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    78a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78ac:	701a      	strb	r2, [r3, #0]
    78ae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    78b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78b6:	781b      	ldrb	r3, [r3, #0]
    78b8:	3301      	adds	r3, #1
    78ba:	b2da      	uxtb	r2, r3
    78bc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    78c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78c4:	701a      	strb	r2, [r3, #0]
    78c6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    78ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78ce:	781b      	ldrb	r3, [r3, #0]
    78d0:	2bff      	cmp	r3, #255	; 0xff
    78d2:	d105      	bne.n	78e0 <send_boot+0x5f4>
    78d4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    78d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78dc:	2200      	movs	r2, #0
    78de:	701a      	strb	r2, [r3, #0]
    78e0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    78e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78e8:	781b      	ldrb	r3, [r3, #0]
    78ea:	461a      	mov	r2, r3
    78ec:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    78f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78f4:	7899      	ldrb	r1, [r3, #2]
    78f6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    78fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78fe:	5499      	strb	r1, [r3, r2]
    7900:	4bae      	ldr	r3, [pc, #696]	; (7bbc <send_boot+0x8d0>)
    7902:	781a      	ldrb	r2, [r3, #0]
    7904:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7908:	f2c2 0300 	movt	r3, #8192	; 0x2000
    790c:	781b      	ldrb	r3, [r3, #0]
    790e:	4413      	add	r3, r2
    7910:	b2da      	uxtb	r2, r3
    7912:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7916:	f2c2 0300 	movt	r3, #8192	; 0x2000
    791a:	701a      	strb	r2, [r3, #0]
    791c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7924:	781a      	ldrb	r2, [r3, #0]
    7926:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    792a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    792e:	781b      	ldrb	r3, [r3, #0]
    7930:	4413      	add	r3, r2
    7932:	b2da      	uxtb	r2, r3
    7934:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7938:	f2c2 0300 	movt	r3, #8192	; 0x2000
    793c:	701a      	strb	r2, [r3, #0]
    793e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7942:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7946:	781b      	ldrb	r3, [r3, #0]
    7948:	3301      	adds	r3, #1
    794a:	b2da      	uxtb	r2, r3
    794c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7950:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7954:	701a      	strb	r2, [r3, #0]
    7956:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    795a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    795e:	781b      	ldrb	r3, [r3, #0]
    7960:	2bff      	cmp	r3, #255	; 0xff
    7962:	d105      	bne.n	7970 <send_boot+0x684>
    7964:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7968:	f2c2 0300 	movt	r3, #8192	; 0x2000
    796c:	2200      	movs	r2, #0
    796e:	701a      	strb	r2, [r3, #0]
    7970:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7978:	781b      	ldrb	r3, [r3, #0]
    797a:	461a      	mov	r2, r3
    797c:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    7980:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7984:	78d9      	ldrb	r1, [r3, #3]
    7986:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    798a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    798e:	5499      	strb	r1, [r3, r2]
    7990:	4b8b      	ldr	r3, [pc, #556]	; (7bc0 <send_boot+0x8d4>)
    7992:	781a      	ldrb	r2, [r3, #0]
    7994:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7998:	f2c2 0300 	movt	r3, #8192	; 0x2000
    799c:	781b      	ldrb	r3, [r3, #0]
    799e:	4413      	add	r3, r2
    79a0:	b2da      	uxtb	r2, r3
    79a2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    79a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79aa:	701a      	strb	r2, [r3, #0]
    79ac:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    79b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79b4:	781a      	ldrb	r2, [r3, #0]
    79b6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    79ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79be:	781b      	ldrb	r3, [r3, #0]
    79c0:	4413      	add	r3, r2
    79c2:	b2da      	uxtb	r2, r3
    79c4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    79c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79cc:	701a      	strb	r2, [r3, #0]
    79ce:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    79d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79d6:	781b      	ldrb	r3, [r3, #0]
    79d8:	3301      	adds	r3, #1
    79da:	b2da      	uxtb	r2, r3
    79dc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    79e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79e4:	701a      	strb	r2, [r3, #0]
    79e6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    79ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79ee:	781b      	ldrb	r3, [r3, #0]
    79f0:	2bff      	cmp	r3, #255	; 0xff
    79f2:	d105      	bne.n	7a00 <send_boot+0x714>
    79f4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    79f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79fc:	2200      	movs	r2, #0
    79fe:	701a      	strb	r2, [r3, #0]
    7a00:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a08:	781b      	ldrb	r3, [r3, #0]
    7a0a:	461a      	mov	r2, r3
    7a0c:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    7a10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a14:	7819      	ldrb	r1, [r3, #0]
    7a16:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7a1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a1e:	5499      	strb	r1, [r3, r2]
    7a20:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    7a24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a28:	781a      	ldrb	r2, [r3, #0]
    7a2a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7a2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a32:	781b      	ldrb	r3, [r3, #0]
    7a34:	4413      	add	r3, r2
    7a36:	b2da      	uxtb	r2, r3
    7a38:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a40:	701a      	strb	r2, [r3, #0]
    7a42:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a4a:	781a      	ldrb	r2, [r3, #0]
    7a4c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7a50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a54:	781b      	ldrb	r3, [r3, #0]
    7a56:	4413      	add	r3, r2
    7a58:	b2da      	uxtb	r2, r3
    7a5a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a62:	701a      	strb	r2, [r3, #0]
    7a64:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a6c:	781b      	ldrb	r3, [r3, #0]
    7a6e:	3301      	adds	r3, #1
    7a70:	b2da      	uxtb	r2, r3
    7a72:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a7a:	701a      	strb	r2, [r3, #0]
    7a7c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a84:	781b      	ldrb	r3, [r3, #0]
    7a86:	2bff      	cmp	r3, #255	; 0xff
    7a88:	d105      	bne.n	7a96 <send_boot+0x7aa>
    7a8a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7a8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a92:	2200      	movs	r2, #0
    7a94:	701a      	strb	r2, [r3, #0]
    7a96:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7a9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a9e:	781b      	ldrb	r3, [r3, #0]
    7aa0:	461a      	mov	r2, r3
    7aa2:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    7aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7aaa:	7859      	ldrb	r1, [r3, #1]
    7aac:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ab4:	5499      	strb	r1, [r3, r2]
    7ab6:	4b43      	ldr	r3, [pc, #268]	; (7bc4 <send_boot+0x8d8>)
    7ab8:	781a      	ldrb	r2, [r3, #0]
    7aba:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ac2:	781b      	ldrb	r3, [r3, #0]
    7ac4:	4413      	add	r3, r2
    7ac6:	b2da      	uxtb	r2, r3
    7ac8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ad0:	701a      	strb	r2, [r3, #0]
    7ad2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ada:	781a      	ldrb	r2, [r3, #0]
    7adc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7ae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ae4:	781b      	ldrb	r3, [r3, #0]
    7ae6:	4413      	add	r3, r2
    7ae8:	b2da      	uxtb	r2, r3
    7aea:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7af2:	701a      	strb	r2, [r3, #0]
    7af4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7afc:	781b      	ldrb	r3, [r3, #0]
    7afe:	3301      	adds	r3, #1
    7b00:	b2da      	uxtb	r2, r3
    7b02:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7b06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b0a:	701a      	strb	r2, [r3, #0]
    7b0c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7b10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b14:	781b      	ldrb	r3, [r3, #0]
    7b16:	2bff      	cmp	r3, #255	; 0xff
    7b18:	d105      	bne.n	7b26 <send_boot+0x83a>
    7b1a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7b1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b22:	2200      	movs	r2, #0
    7b24:	701a      	strb	r2, [r3, #0]
    7b26:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7b2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b2e:	781b      	ldrb	r3, [r3, #0]
    7b30:	461a      	mov	r2, r3
    7b32:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    7b36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b3a:	7899      	ldrb	r1, [r3, #2]
    7b3c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b44:	5499      	strb	r1, [r3, r2]
    7b46:	4b20      	ldr	r3, [pc, #128]	; (7bc8 <send_boot+0x8dc>)
    7b48:	781a      	ldrb	r2, [r3, #0]
    7b4a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b52:	781b      	ldrb	r3, [r3, #0]
    7b54:	4413      	add	r3, r2
    7b56:	b2da      	uxtb	r2, r3
    7b58:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7b5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b60:	701a      	strb	r2, [r3, #0]
    7b62:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7b66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b6a:	781a      	ldrb	r2, [r3, #0]
    7b6c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b74:	781b      	ldrb	r3, [r3, #0]
    7b76:	4413      	add	r3, r2
    7b78:	b2da      	uxtb	r2, r3
    7b7a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b82:	701a      	strb	r2, [r3, #0]
    7b84:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b8c:	781b      	ldrb	r3, [r3, #0]
    7b8e:	3301      	adds	r3, #1
    7b90:	b2da      	uxtb	r2, r3
    7b92:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7b96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b9a:	701a      	strb	r2, [r3, #0]
    7b9c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ba4:	781b      	ldrb	r3, [r3, #0]
    7ba6:	2bff      	cmp	r3, #255	; 0xff
    7ba8:	d110      	bne.n	7bcc <send_boot+0x8e0>
    7baa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bb2:	2200      	movs	r2, #0
    7bb4:	701a      	strb	r2, [r3, #0]
    7bb6:	e009      	b.n	7bcc <send_boot+0x8e0>
    7bb8:	2000b4c9 	.word	0x2000b4c9
    7bbc:	2000b4ca 	.word	0x2000b4ca
    7bc0:	2000b4cb 	.word	0x2000b4cb
    7bc4:	2000b4cd 	.word	0x2000b4cd
    7bc8:	2000b4ce 	.word	0x2000b4ce
    7bcc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bd4:	781b      	ldrb	r3, [r3, #0]
    7bd6:	461a      	mov	r2, r3
    7bd8:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    7bdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7be0:	78d9      	ldrb	r1, [r3, #3]
    7be2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7be6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bea:	5499      	strb	r1, [r3, r2]
    7bec:	4bd3      	ldr	r3, [pc, #844]	; (7f3c <send_boot+0xc50>)
    7bee:	781a      	ldrb	r2, [r3, #0]
    7bf0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bf8:	781b      	ldrb	r3, [r3, #0]
    7bfa:	4413      	add	r3, r2
    7bfc:	b2da      	uxtb	r2, r3
    7bfe:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c06:	701a      	strb	r2, [r3, #0]
    7c08:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c10:	781a      	ldrb	r2, [r3, #0]
    7c12:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7c16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c1a:	781b      	ldrb	r3, [r3, #0]
    7c1c:	4413      	add	r3, r2
    7c1e:	b2da      	uxtb	r2, r3
    7c20:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7c24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c28:	701a      	strb	r2, [r3, #0]
    7c2a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7c2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c32:	781b      	ldrb	r3, [r3, #0]
    7c34:	3301      	adds	r3, #1
    7c36:	b2da      	uxtb	r2, r3
    7c38:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c40:	701a      	strb	r2, [r3, #0]
    7c42:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c4a:	781b      	ldrb	r3, [r3, #0]
    7c4c:	2bff      	cmp	r3, #255	; 0xff
    7c4e:	d105      	bne.n	7c5c <send_boot+0x970>
    7c50:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c58:	2200      	movs	r2, #0
    7c5a:	701a      	strb	r2, [r3, #0]
    7c5c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7c60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c64:	781b      	ldrb	r3, [r3, #0]
    7c66:	461a      	mov	r2, r3
    7c68:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    7c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c70:	7819      	ldrb	r1, [r3, #0]
    7c72:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c7a:	5499      	strb	r1, [r3, r2]
    7c7c:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    7c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c84:	781a      	ldrb	r2, [r3, #0]
    7c86:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7c8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c8e:	781b      	ldrb	r3, [r3, #0]
    7c90:	4413      	add	r3, r2
    7c92:	b2da      	uxtb	r2, r3
    7c94:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c9c:	701a      	strb	r2, [r3, #0]
    7c9e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ca6:	781a      	ldrb	r2, [r3, #0]
    7ca8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cb0:	781b      	ldrb	r3, [r3, #0]
    7cb2:	4413      	add	r3, r2
    7cb4:	b2da      	uxtb	r2, r3
    7cb6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7cba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cbe:	701a      	strb	r2, [r3, #0]
    7cc0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7cc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cc8:	781b      	ldrb	r3, [r3, #0]
    7cca:	3301      	adds	r3, #1
    7ccc:	b2da      	uxtb	r2, r3
    7cce:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cd6:	701a      	strb	r2, [r3, #0]
    7cd8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7cdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ce0:	781b      	ldrb	r3, [r3, #0]
    7ce2:	2bff      	cmp	r3, #255	; 0xff
    7ce4:	d105      	bne.n	7cf2 <send_boot+0xa06>
    7ce6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cee:	2200      	movs	r2, #0
    7cf0:	701a      	strb	r2, [r3, #0]
    7cf2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7cf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cfa:	781b      	ldrb	r3, [r3, #0]
    7cfc:	461a      	mov	r2, r3
    7cfe:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    7d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d06:	7859      	ldrb	r1, [r3, #1]
    7d08:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d10:	5499      	strb	r1, [r3, r2]
    7d12:	4b8b      	ldr	r3, [pc, #556]	; (7f40 <send_boot+0xc54>)
    7d14:	781a      	ldrb	r2, [r3, #0]
    7d16:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d1e:	781b      	ldrb	r3, [r3, #0]
    7d20:	4413      	add	r3, r2
    7d22:	b2da      	uxtb	r2, r3
    7d24:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7d28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d2c:	701a      	strb	r2, [r3, #0]
    7d2e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d36:	781a      	ldrb	r2, [r3, #0]
    7d38:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d40:	781b      	ldrb	r3, [r3, #0]
    7d42:	4413      	add	r3, r2
    7d44:	b2da      	uxtb	r2, r3
    7d46:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d4e:	701a      	strb	r2, [r3, #0]
    7d50:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d58:	781b      	ldrb	r3, [r3, #0]
    7d5a:	3301      	adds	r3, #1
    7d5c:	b2da      	uxtb	r2, r3
    7d5e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7d62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d66:	701a      	strb	r2, [r3, #0]
    7d68:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d70:	781b      	ldrb	r3, [r3, #0]
    7d72:	2bff      	cmp	r3, #255	; 0xff
    7d74:	d105      	bne.n	7d82 <send_boot+0xa96>
    7d76:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7d7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d7e:	2200      	movs	r2, #0
    7d80:	701a      	strb	r2, [r3, #0]
    7d82:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7d86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d8a:	781b      	ldrb	r3, [r3, #0]
    7d8c:	461a      	mov	r2, r3
    7d8e:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    7d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d96:	7899      	ldrb	r1, [r3, #2]
    7d98:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7da0:	5499      	strb	r1, [r3, r2]
    7da2:	4b68      	ldr	r3, [pc, #416]	; (7f44 <send_boot+0xc58>)
    7da4:	781a      	ldrb	r2, [r3, #0]
    7da6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dae:	781b      	ldrb	r3, [r3, #0]
    7db0:	4413      	add	r3, r2
    7db2:	b2da      	uxtb	r2, r3
    7db4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dbc:	701a      	strb	r2, [r3, #0]
    7dbe:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7dc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dc6:	781a      	ldrb	r2, [r3, #0]
    7dc8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7dcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dd0:	781b      	ldrb	r3, [r3, #0]
    7dd2:	4413      	add	r3, r2
    7dd4:	b2da      	uxtb	r2, r3
    7dd6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7dda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dde:	701a      	strb	r2, [r3, #0]
    7de0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7de4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7de8:	781b      	ldrb	r3, [r3, #0]
    7dea:	3301      	adds	r3, #1
    7dec:	b2da      	uxtb	r2, r3
    7dee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7df6:	701a      	strb	r2, [r3, #0]
    7df8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e00:	781b      	ldrb	r3, [r3, #0]
    7e02:	2bff      	cmp	r3, #255	; 0xff
    7e04:	d105      	bne.n	7e12 <send_boot+0xb26>
    7e06:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e0e:	2200      	movs	r2, #0
    7e10:	701a      	strb	r2, [r3, #0]
    7e12:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7e16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e1a:	781b      	ldrb	r3, [r3, #0]
    7e1c:	461a      	mov	r2, r3
    7e1e:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
    7e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e26:	78d9      	ldrb	r1, [r3, #3]
    7e28:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e30:	5499      	strb	r1, [r3, r2]
    7e32:	4b45      	ldr	r3, [pc, #276]	; (7f48 <send_boot+0xc5c>)
    7e34:	781a      	ldrb	r2, [r3, #0]
    7e36:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7e3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e3e:	781b      	ldrb	r3, [r3, #0]
    7e40:	4413      	add	r3, r2
    7e42:	b2da      	uxtb	r2, r3
    7e44:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e4c:	701a      	strb	r2, [r3, #0]
    7e4e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e56:	781a      	ldrb	r2, [r3, #0]
    7e58:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e60:	781b      	ldrb	r3, [r3, #0]
    7e62:	4413      	add	r3, r2
    7e64:	b2da      	uxtb	r2, r3
    7e66:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e6e:	701a      	strb	r2, [r3, #0]
    7e70:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e78:	781b      	ldrb	r3, [r3, #0]
    7e7a:	3301      	adds	r3, #1
    7e7c:	b2da      	uxtb	r2, r3
    7e7e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e86:	701a      	strb	r2, [r3, #0]
    7e88:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e90:	781b      	ldrb	r3, [r3, #0]
    7e92:	2bff      	cmp	r3, #255	; 0xff
    7e94:	d105      	bne.n	7ea2 <send_boot+0xbb6>
    7e96:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e9e:	2200      	movs	r2, #0
    7ea0:	701a      	strb	r2, [r3, #0]
    7ea2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7eaa:	781b      	ldrb	r3, [r3, #0]
    7eac:	461a      	mov	r2, r3
    7eae:	f240 33f2 	movw	r3, #1010	; 0x3f2
    7eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7eb6:	7819      	ldrb	r1, [r3, #0]
    7eb8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ec0:	5499      	strb	r1, [r3, r2]
    7ec2:	f240 33f2 	movw	r3, #1010	; 0x3f2
    7ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7eca:	781a      	ldrb	r2, [r3, #0]
    7ecc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7ed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ed4:	781b      	ldrb	r3, [r3, #0]
    7ed6:	4413      	add	r3, r2
    7ed8:	b2da      	uxtb	r2, r3
    7eda:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7ede:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ee2:	701a      	strb	r2, [r3, #0]
    7ee4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7eec:	781a      	ldrb	r2, [r3, #0]
    7eee:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ef6:	781b      	ldrb	r3, [r3, #0]
    7ef8:	4413      	add	r3, r2
    7efa:	b2da      	uxtb	r2, r3
    7efc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7f00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f04:	701a      	strb	r2, [r3, #0]
    7f06:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7f0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f0e:	781b      	ldrb	r3, [r3, #0]
    7f10:	3301      	adds	r3, #1
    7f12:	b2da      	uxtb	r2, r3
    7f14:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7f18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f1c:	701a      	strb	r2, [r3, #0]
    7f1e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f26:	781b      	ldrb	r3, [r3, #0]
    7f28:	2bff      	cmp	r3, #255	; 0xff
    7f2a:	d10f      	bne.n	7f4c <send_boot+0xc60>
    7f2c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f34:	2200      	movs	r2, #0
    7f36:	701a      	strb	r2, [r3, #0]
    7f38:	e008      	b.n	7f4c <send_boot+0xc60>
    7f3a:	bf00      	nop
    7f3c:	2000b4cf 	.word	0x2000b4cf
    7f40:	2000b4c5 	.word	0x2000b4c5
    7f44:	2000b4c6 	.word	0x2000b4c6
    7f48:	2000b4c7 	.word	0x2000b4c7
    7f4c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f54:	781b      	ldrb	r3, [r3, #0]
    7f56:	461a      	mov	r2, r3
    7f58:	f240 33f2 	movw	r3, #1010	; 0x3f2
    7f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f60:	7859      	ldrb	r1, [r3, #1]
    7f62:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7f66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f6a:	5499      	strb	r1, [r3, r2]
    7f6c:	4bc5      	ldr	r3, [pc, #788]	; (8284 <send_boot+0xf98>)
    7f6e:	781a      	ldrb	r2, [r3, #0]
    7f70:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f78:	781b      	ldrb	r3, [r3, #0]
    7f7a:	4413      	add	r3, r2
    7f7c:	b2da      	uxtb	r2, r3
    7f7e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f86:	701a      	strb	r2, [r3, #0]
    7f88:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7f8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f90:	781a      	ldrb	r2, [r3, #0]
    7f92:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    7f96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f9a:	781b      	ldrb	r3, [r3, #0]
    7f9c:	4413      	add	r3, r2
    7f9e:	b2da      	uxtb	r2, r3
    7fa0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    7fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fa8:	701a      	strb	r2, [r3, #0]
    7faa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7fae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fb2:	781b      	ldrb	r3, [r3, #0]
    7fb4:	3301      	adds	r3, #1
    7fb6:	b2da      	uxtb	r2, r3
    7fb8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fc0:	701a      	strb	r2, [r3, #0]
    7fc2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7fc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fca:	781b      	ldrb	r3, [r3, #0]
    7fcc:	2bff      	cmp	r3, #255	; 0xff
    7fce:	d105      	bne.n	7fdc <send_boot+0xcf0>
    7fd0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fd8:	2200      	movs	r2, #0
    7fda:	701a      	strb	r2, [r3, #0]
    7fdc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7fe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fe4:	781b      	ldrb	r3, [r3, #0]
    7fe6:	461a      	mov	r2, r3
    7fe8:	f240 33f4 	movw	r3, #1012	; 0x3f4
    7fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ff0:	7819      	ldrb	r1, [r3, #0]
    7ff2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    7ff6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ffa:	5499      	strb	r1, [r3, r2]
    7ffc:	f240 33f4 	movw	r3, #1012	; 0x3f4
    8000:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8004:	781a      	ldrb	r2, [r3, #0]
    8006:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    800a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    800e:	781b      	ldrb	r3, [r3, #0]
    8010:	4413      	add	r3, r2
    8012:	b2da      	uxtb	r2, r3
    8014:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8018:	f2c2 0300 	movt	r3, #8192	; 0x2000
    801c:	701a      	strb	r2, [r3, #0]
    801e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8026:	781a      	ldrb	r2, [r3, #0]
    8028:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    802c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8030:	781b      	ldrb	r3, [r3, #0]
    8032:	4413      	add	r3, r2
    8034:	b2da      	uxtb	r2, r3
    8036:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    803a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    803e:	701a      	strb	r2, [r3, #0]
    8040:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8044:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8048:	781b      	ldrb	r3, [r3, #0]
    804a:	3301      	adds	r3, #1
    804c:	b2da      	uxtb	r2, r3
    804e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8052:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8056:	701a      	strb	r2, [r3, #0]
    8058:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    805c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8060:	781b      	ldrb	r3, [r3, #0]
    8062:	2bff      	cmp	r3, #255	; 0xff
    8064:	d105      	bne.n	8072 <send_boot+0xd86>
    8066:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    806a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    806e:	2200      	movs	r2, #0
    8070:	701a      	strb	r2, [r3, #0]
    8072:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8076:	f2c2 0300 	movt	r3, #8192	; 0x2000
    807a:	781b      	ldrb	r3, [r3, #0]
    807c:	461a      	mov	r2, r3
    807e:	f240 33f4 	movw	r3, #1012	; 0x3f4
    8082:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8086:	7859      	ldrb	r1, [r3, #1]
    8088:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    808c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8090:	5499      	strb	r1, [r3, r2]
    8092:	4b7d      	ldr	r3, [pc, #500]	; (8288 <send_boot+0xf9c>)
    8094:	781a      	ldrb	r2, [r3, #0]
    8096:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    809a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    809e:	781b      	ldrb	r3, [r3, #0]
    80a0:	4413      	add	r3, r2
    80a2:	b2da      	uxtb	r2, r3
    80a4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    80a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80ac:	701a      	strb	r2, [r3, #0]
    80ae:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    80b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80b6:	781a      	ldrb	r2, [r3, #0]
    80b8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    80bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80c0:	781b      	ldrb	r3, [r3, #0]
    80c2:	4413      	add	r3, r2
    80c4:	b2da      	uxtb	r2, r3
    80c6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    80ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80ce:	701a      	strb	r2, [r3, #0]
    80d0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    80d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80d8:	781b      	ldrb	r3, [r3, #0]
    80da:	3301      	adds	r3, #1
    80dc:	b2da      	uxtb	r2, r3
    80de:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    80e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80e6:	701a      	strb	r2, [r3, #0]
    80e8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    80ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80f0:	781b      	ldrb	r3, [r3, #0]
    80f2:	2bff      	cmp	r3, #255	; 0xff
    80f4:	d105      	bne.n	8102 <send_boot+0xe16>
    80f6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    80fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80fe:	2200      	movs	r2, #0
    8100:	701a      	strb	r2, [r3, #0]
    8102:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8106:	f2c2 0300 	movt	r3, #8192	; 0x2000
    810a:	781b      	ldrb	r3, [r3, #0]
    810c:	461a      	mov	r2, r3
    810e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8112:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8116:	7819      	ldrb	r1, [r3, #0]
    8118:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    811c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8120:	5499      	strb	r1, [r3, r2]
    8122:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8126:	f2c2 0300 	movt	r3, #8192	; 0x2000
    812a:	781b      	ldrb	r3, [r3, #0]
    812c:	3301      	adds	r3, #1
    812e:	b2da      	uxtb	r2, r3
    8130:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8134:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8138:	701a      	strb	r2, [r3, #0]
    813a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    813e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8142:	781b      	ldrb	r3, [r3, #0]
    8144:	2bff      	cmp	r3, #255	; 0xff
    8146:	d105      	bne.n	8154 <send_boot+0xe68>
    8148:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    814c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8150:	2200      	movs	r2, #0
    8152:	701a      	strb	r2, [r3, #0]
    8154:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8158:	f2c2 0300 	movt	r3, #8192	; 0x2000
    815c:	781b      	ldrb	r3, [r3, #0]
    815e:	461a      	mov	r2, r3
    8160:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8164:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8168:	7819      	ldrb	r1, [r3, #0]
    816a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    816e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8172:	5499      	strb	r1, [r3, r2]
    8174:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8178:	f2c2 0300 	movt	r3, #8192	; 0x2000
    817c:	781b      	ldrb	r3, [r3, #0]
    817e:	3301      	adds	r3, #1
    8180:	b2da      	uxtb	r2, r3
    8182:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8186:	f2c2 0300 	movt	r3, #8192	; 0x2000
    818a:	701a      	strb	r2, [r3, #0]
    818c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8190:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8194:	781b      	ldrb	r3, [r3, #0]
    8196:	2bff      	cmp	r3, #255	; 0xff
    8198:	d105      	bne.n	81a6 <send_boot+0xeba>
    819a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    819e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81a2:	2200      	movs	r2, #0
    81a4:	701a      	strb	r2, [r3, #0]
    81a6:	f242 0339 	movw	r3, #8249	; 0x2039
    81aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81ae:	781b      	ldrb	r3, [r3, #0]
    81b0:	b2db      	uxtb	r3, r3
    81b2:	f003 0310 	and.w	r3, r3, #16
    81b6:	2b00      	cmp	r3, #0
    81b8:	d15a      	bne.n	8270 <send_boot+0xf84>
    81ba:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    81be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81c2:	781b      	ldrb	r3, [r3, #0]
    81c4:	b2db      	uxtb	r3, r3
    81c6:	461a      	mov	r2, r3
    81c8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    81cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81d0:	5c9a      	ldrb	r2, [r3, r2]
    81d2:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    81d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81da:	701a      	strb	r2, [r3, #0]
    81dc:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    81e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81e4:	2200      	movs	r2, #0
    81e6:	701a      	strb	r2, [r3, #0]
    81e8:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    81ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81f0:	781b      	ldrb	r3, [r3, #0]
    81f2:	b2db      	uxtb	r3, r3
    81f4:	3301      	adds	r3, #1
    81f6:	b2da      	uxtb	r2, r3
    81f8:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    81fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8200:	701a      	strb	r2, [r3, #0]
    8202:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8206:	f2c2 0300 	movt	r3, #8192	; 0x2000
    820a:	781b      	ldrb	r3, [r3, #0]
    820c:	b2db      	uxtb	r3, r3
    820e:	2bff      	cmp	r3, #255	; 0xff
    8210:	d105      	bne.n	821e <send_boot+0xf32>
    8212:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8216:	f2c2 0300 	movt	r3, #8192	; 0x2000
    821a:	2200      	movs	r2, #0
    821c:	701a      	strb	r2, [r3, #0]
    821e:	f242 0338 	movw	r3, #8248	; 0x2038
    8222:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8226:	f242 0238 	movw	r2, #8248	; 0x2038
    822a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    822e:	7812      	ldrb	r2, [r2, #0]
    8230:	b2d2      	uxtb	r2, r2
    8232:	f042 0201 	orr.w	r2, r2, #1
    8236:	b2d2      	uxtb	r2, r2
    8238:	701a      	strb	r2, [r3, #0]
    823a:	f242 0339 	movw	r3, #8249	; 0x2039
    823e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8242:	f242 0239 	movw	r2, #8249	; 0x2039
    8246:	f2c2 0200 	movt	r2, #8192	; 0x2000
    824a:	7812      	ldrb	r2, [r2, #0]
    824c:	b2d2      	uxtb	r2, r2
    824e:	f042 0210 	orr.w	r2, r2, #16
    8252:	b2d2      	uxtb	r2, r2
    8254:	701a      	strb	r2, [r3, #0]
    8256:	e00b      	b.n	8270 <send_boot+0xf84>
    8258:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    825c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8260:	781b      	ldrb	r3, [r3, #0]
    8262:	3301      	adds	r3, #1
    8264:	b2da      	uxtb	r2, r3
    8266:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    826a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    826e:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    8270:	f240 33ed 	movw	r3, #1005	; 0x3ed
    8274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8278:	2200      	movs	r2, #0
    827a:	701a      	strb	r2, [r3, #0]
  }
}
    827c:	46bd      	mov	sp, r7
    827e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8282:	4770      	bx	lr
    8284:	200003f3 	.word	0x200003f3
    8288:	200003f5 	.word	0x200003f5

0000828c <send_attitude>:
void send_attitude(void){ //499ms
    828c:	b480      	push	{r7}
    828e:	af00      	add	r7, sp, #0
    // add by wanbo
  //if(!boot)
  {
    count++;
    8290:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    8294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8298:	781b      	ldrb	r3, [r3, #0]
    829a:	3301      	adds	r3, #1
    829c:	b2da      	uxtb	r2, r3
    829e:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    82a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82a6:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    82a8:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    82ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82b0:	781b      	ldrb	r3, [r3, #0]
    82b2:	2bfa      	cmp	r3, #250	; 0xfa
    82b4:	d105      	bne.n	82c2 <send_attitude+0x36>
    82b6:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    82ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82be:	2200      	movs	r2, #0
    82c0:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    82c2:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    82c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82ca:	781a      	ldrb	r2, [r3, #0]
    82cc:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    82d0:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    82d4:	fba3 1302 	umull	r1, r3, r3, r2
    82d8:	0899      	lsrs	r1, r3, #2
    82da:	460b      	mov	r3, r1
    82dc:	009b      	lsls	r3, r3, #2
    82de:	440b      	add	r3, r1
    82e0:	1ad3      	subs	r3, r2, r3
    82e2:	b2db      	uxtb	r3, r3
    82e4:	2b00      	cmp	r3, #0
    82e6:	f040 84c1 	bne.w	8c6c <send_attitude+0x9e0>
       PERIODIC_SEND_ATTITUDE(); 
    82ea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    82ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82f2:	781a      	ldrb	r2, [r3, #0]
    82f4:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    82f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82fc:	781b      	ldrb	r3, [r3, #0]
    82fe:	b2db      	uxtb	r3, r3
    8300:	429a      	cmp	r2, r3
    8302:	d313      	bcc.n	832c <send_attitude+0xa0>
    8304:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8308:	f2c2 0300 	movt	r3, #8192	; 0x2000
    830c:	781b      	ldrb	r3, [r3, #0]
    830e:	b2db      	uxtb	r3, r3
    8310:	461a      	mov	r2, r3
    8312:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8316:	f2c2 0300 	movt	r3, #8192	; 0x2000
    831a:	781b      	ldrb	r3, [r3, #0]
    831c:	1ad3      	subs	r3, r2, r3
    831e:	33ff      	adds	r3, #255	; 0xff
    8320:	2b10      	cmp	r3, #16
    8322:	bfd4      	ite	le
    8324:	2300      	movle	r3, #0
    8326:	2301      	movgt	r3, #1
    8328:	b2db      	uxtb	r3, r3
    832a:	e011      	b.n	8350 <send_attitude+0xc4>
    832c:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8334:	781b      	ldrb	r3, [r3, #0]
    8336:	b2db      	uxtb	r3, r3
    8338:	461a      	mov	r2, r3
    833a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    833e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8342:	781b      	ldrb	r3, [r3, #0]
    8344:	1ad3      	subs	r3, r2, r3
    8346:	2b10      	cmp	r3, #16
    8348:	bfd4      	ite	le
    834a:	2300      	movle	r3, #0
    834c:	2301      	movgt	r3, #1
    834e:	b2db      	uxtb	r3, r3
    8350:	2b00      	cmp	r3, #0
    8352:	f000 847f 	beq.w	8c54 <send_attitude+0x9c8>
    8356:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    835a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    835e:	781b      	ldrb	r3, [r3, #0]
    8360:	461a      	mov	r2, r3
    8362:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8366:	f2c2 0300 	movt	r3, #8192	; 0x2000
    836a:	2105      	movs	r1, #5
    836c:	5499      	strb	r1, [r3, r2]
    836e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8372:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8376:	781b      	ldrb	r3, [r3, #0]
    8378:	3301      	adds	r3, #1
    837a:	b2da      	uxtb	r2, r3
    837c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8380:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8384:	701a      	strb	r2, [r3, #0]
    8386:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    838a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    838e:	781b      	ldrb	r3, [r3, #0]
    8390:	2bff      	cmp	r3, #255	; 0xff
    8392:	d105      	bne.n	83a0 <send_attitude+0x114>
    8394:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8398:	f2c2 0300 	movt	r3, #8192	; 0x2000
    839c:	2200      	movs	r2, #0
    839e:	701a      	strb	r2, [r3, #0]
    83a0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    83a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83a8:	781b      	ldrb	r3, [r3, #0]
    83aa:	461a      	mov	r2, r3
    83ac:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    83b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83b4:	2106      	movs	r1, #6
    83b6:	5499      	strb	r1, [r3, r2]
    83b8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    83bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83c0:	781b      	ldrb	r3, [r3, #0]
    83c2:	3301      	adds	r3, #1
    83c4:	b2da      	uxtb	r2, r3
    83c6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    83ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83ce:	701a      	strb	r2, [r3, #0]
    83d0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    83d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83d8:	781b      	ldrb	r3, [r3, #0]
    83da:	2bff      	cmp	r3, #255	; 0xff
    83dc:	d105      	bne.n	83ea <send_attitude+0x15e>
    83de:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    83e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83e6:	2200      	movs	r2, #0
    83e8:	701a      	strb	r2, [r3, #0]
    83ea:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    83ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83f2:	2206      	movs	r2, #6
    83f4:	701a      	strb	r2, [r3, #0]
    83f6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    83fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83fe:	2206      	movs	r2, #6
    8400:	701a      	strb	r2, [r3, #0]
    8402:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8406:	f2c2 0300 	movt	r3, #8192	; 0x2000
    840a:	781b      	ldrb	r3, [r3, #0]
    840c:	461a      	mov	r2, r3
    840e:	f24b 4390 	movw	r3, #46224	; 0xb490
    8412:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8416:	7819      	ldrb	r1, [r3, #0]
    8418:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    841c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8420:	5499      	strb	r1, [r3, r2]
    8422:	f24b 4390 	movw	r3, #46224	; 0xb490
    8426:	f2c2 0300 	movt	r3, #8192	; 0x2000
    842a:	781a      	ldrb	r2, [r3, #0]
    842c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8434:	781b      	ldrb	r3, [r3, #0]
    8436:	4413      	add	r3, r2
    8438:	b2da      	uxtb	r2, r3
    843a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    843e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8442:	701a      	strb	r2, [r3, #0]
    8444:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8448:	f2c2 0300 	movt	r3, #8192	; 0x2000
    844c:	781a      	ldrb	r2, [r3, #0]
    844e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8452:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8456:	781b      	ldrb	r3, [r3, #0]
    8458:	4413      	add	r3, r2
    845a:	b2da      	uxtb	r2, r3
    845c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8460:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8464:	701a      	strb	r2, [r3, #0]
    8466:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    846a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    846e:	781b      	ldrb	r3, [r3, #0]
    8470:	3301      	adds	r3, #1
    8472:	b2da      	uxtb	r2, r3
    8474:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    847c:	701a      	strb	r2, [r3, #0]
    847e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8482:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8486:	781b      	ldrb	r3, [r3, #0]
    8488:	2bff      	cmp	r3, #255	; 0xff
    848a:	d105      	bne.n	8498 <send_attitude+0x20c>
    848c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8490:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8494:	2200      	movs	r2, #0
    8496:	701a      	strb	r2, [r3, #0]
    8498:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    849c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84a0:	781b      	ldrb	r3, [r3, #0]
    84a2:	461a      	mov	r2, r3
    84a4:	f24b 4390 	movw	r3, #46224	; 0xb490
    84a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84ac:	7859      	ldrb	r1, [r3, #1]
    84ae:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    84b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84b6:	5499      	strb	r1, [r3, r2]
    84b8:	4bd1      	ldr	r3, [pc, #836]	; (8800 <send_attitude+0x574>)
    84ba:	781a      	ldrb	r2, [r3, #0]
    84bc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    84c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84c4:	781b      	ldrb	r3, [r3, #0]
    84c6:	4413      	add	r3, r2
    84c8:	b2da      	uxtb	r2, r3
    84ca:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    84ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84d2:	701a      	strb	r2, [r3, #0]
    84d4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    84d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84dc:	781a      	ldrb	r2, [r3, #0]
    84de:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    84e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84e6:	781b      	ldrb	r3, [r3, #0]
    84e8:	4413      	add	r3, r2
    84ea:	b2da      	uxtb	r2, r3
    84ec:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    84f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84f4:	701a      	strb	r2, [r3, #0]
    84f6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    84fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84fe:	781b      	ldrb	r3, [r3, #0]
    8500:	3301      	adds	r3, #1
    8502:	b2da      	uxtb	r2, r3
    8504:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8508:	f2c2 0300 	movt	r3, #8192	; 0x2000
    850c:	701a      	strb	r2, [r3, #0]
    850e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8512:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8516:	781b      	ldrb	r3, [r3, #0]
    8518:	2bff      	cmp	r3, #255	; 0xff
    851a:	d105      	bne.n	8528 <send_attitude+0x29c>
    851c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8524:	2200      	movs	r2, #0
    8526:	701a      	strb	r2, [r3, #0]
    8528:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    852c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8530:	781b      	ldrb	r3, [r3, #0]
    8532:	461a      	mov	r2, r3
    8534:	f24b 4390 	movw	r3, #46224	; 0xb490
    8538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    853c:	7899      	ldrb	r1, [r3, #2]
    853e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8542:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8546:	5499      	strb	r1, [r3, r2]
    8548:	4bae      	ldr	r3, [pc, #696]	; (8804 <send_attitude+0x578>)
    854a:	781a      	ldrb	r2, [r3, #0]
    854c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8550:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8554:	781b      	ldrb	r3, [r3, #0]
    8556:	4413      	add	r3, r2
    8558:	b2da      	uxtb	r2, r3
    855a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    855e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8562:	701a      	strb	r2, [r3, #0]
    8564:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8568:	f2c2 0300 	movt	r3, #8192	; 0x2000
    856c:	781a      	ldrb	r2, [r3, #0]
    856e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8572:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8576:	781b      	ldrb	r3, [r3, #0]
    8578:	4413      	add	r3, r2
    857a:	b2da      	uxtb	r2, r3
    857c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8580:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8584:	701a      	strb	r2, [r3, #0]
    8586:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    858a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    858e:	781b      	ldrb	r3, [r3, #0]
    8590:	3301      	adds	r3, #1
    8592:	b2da      	uxtb	r2, r3
    8594:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8598:	f2c2 0300 	movt	r3, #8192	; 0x2000
    859c:	701a      	strb	r2, [r3, #0]
    859e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    85a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85a6:	781b      	ldrb	r3, [r3, #0]
    85a8:	2bff      	cmp	r3, #255	; 0xff
    85aa:	d105      	bne.n	85b8 <send_attitude+0x32c>
    85ac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    85b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85b4:	2200      	movs	r2, #0
    85b6:	701a      	strb	r2, [r3, #0]
    85b8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    85bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85c0:	781b      	ldrb	r3, [r3, #0]
    85c2:	461a      	mov	r2, r3
    85c4:	f24b 4390 	movw	r3, #46224	; 0xb490
    85c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85cc:	78d9      	ldrb	r1, [r3, #3]
    85ce:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    85d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85d6:	5499      	strb	r1, [r3, r2]
    85d8:	4b8b      	ldr	r3, [pc, #556]	; (8808 <send_attitude+0x57c>)
    85da:	781a      	ldrb	r2, [r3, #0]
    85dc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    85e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85e4:	781b      	ldrb	r3, [r3, #0]
    85e6:	4413      	add	r3, r2
    85e8:	b2da      	uxtb	r2, r3
    85ea:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    85ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85f2:	701a      	strb	r2, [r3, #0]
    85f4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    85f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85fc:	781a      	ldrb	r2, [r3, #0]
    85fe:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8602:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8606:	781b      	ldrb	r3, [r3, #0]
    8608:	4413      	add	r3, r2
    860a:	b2da      	uxtb	r2, r3
    860c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8614:	701a      	strb	r2, [r3, #0]
    8616:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    861a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    861e:	781b      	ldrb	r3, [r3, #0]
    8620:	3301      	adds	r3, #1
    8622:	b2da      	uxtb	r2, r3
    8624:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    862c:	701a      	strb	r2, [r3, #0]
    862e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8632:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8636:	781b      	ldrb	r3, [r3, #0]
    8638:	2bff      	cmp	r3, #255	; 0xff
    863a:	d105      	bne.n	8648 <send_attitude+0x3bc>
    863c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8640:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8644:	2200      	movs	r2, #0
    8646:	701a      	strb	r2, [r3, #0]
    8648:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    864c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8650:	781b      	ldrb	r3, [r3, #0]
    8652:	461a      	mov	r2, r3
    8654:	f24b 4394 	movw	r3, #46228	; 0xb494
    8658:	f2c2 0300 	movt	r3, #8192	; 0x2000
    865c:	7819      	ldrb	r1, [r3, #0]
    865e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8666:	5499      	strb	r1, [r3, r2]
    8668:	f24b 4394 	movw	r3, #46228	; 0xb494
    866c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8670:	781a      	ldrb	r2, [r3, #0]
    8672:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8676:	f2c2 0300 	movt	r3, #8192	; 0x2000
    867a:	781b      	ldrb	r3, [r3, #0]
    867c:	4413      	add	r3, r2
    867e:	b2da      	uxtb	r2, r3
    8680:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8684:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8688:	701a      	strb	r2, [r3, #0]
    868a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    868e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8692:	781a      	ldrb	r2, [r3, #0]
    8694:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8698:	f2c2 0300 	movt	r3, #8192	; 0x2000
    869c:	781b      	ldrb	r3, [r3, #0]
    869e:	4413      	add	r3, r2
    86a0:	b2da      	uxtb	r2, r3
    86a2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    86a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86aa:	701a      	strb	r2, [r3, #0]
    86ac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    86b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86b4:	781b      	ldrb	r3, [r3, #0]
    86b6:	3301      	adds	r3, #1
    86b8:	b2da      	uxtb	r2, r3
    86ba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    86be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86c2:	701a      	strb	r2, [r3, #0]
    86c4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    86c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86cc:	781b      	ldrb	r3, [r3, #0]
    86ce:	2bff      	cmp	r3, #255	; 0xff
    86d0:	d105      	bne.n	86de <send_attitude+0x452>
    86d2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    86d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86da:	2200      	movs	r2, #0
    86dc:	701a      	strb	r2, [r3, #0]
    86de:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    86e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86e6:	781b      	ldrb	r3, [r3, #0]
    86e8:	461a      	mov	r2, r3
    86ea:	f24b 4394 	movw	r3, #46228	; 0xb494
    86ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86f2:	7859      	ldrb	r1, [r3, #1]
    86f4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    86f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86fc:	5499      	strb	r1, [r3, r2]
    86fe:	4b43      	ldr	r3, [pc, #268]	; (880c <send_attitude+0x580>)
    8700:	781a      	ldrb	r2, [r3, #0]
    8702:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8706:	f2c2 0300 	movt	r3, #8192	; 0x2000
    870a:	781b      	ldrb	r3, [r3, #0]
    870c:	4413      	add	r3, r2
    870e:	b2da      	uxtb	r2, r3
    8710:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8714:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8718:	701a      	strb	r2, [r3, #0]
    871a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    871e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8722:	781a      	ldrb	r2, [r3, #0]
    8724:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8728:	f2c2 0300 	movt	r3, #8192	; 0x2000
    872c:	781b      	ldrb	r3, [r3, #0]
    872e:	4413      	add	r3, r2
    8730:	b2da      	uxtb	r2, r3
    8732:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8736:	f2c2 0300 	movt	r3, #8192	; 0x2000
    873a:	701a      	strb	r2, [r3, #0]
    873c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8740:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8744:	781b      	ldrb	r3, [r3, #0]
    8746:	3301      	adds	r3, #1
    8748:	b2da      	uxtb	r2, r3
    874a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    874e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8752:	701a      	strb	r2, [r3, #0]
    8754:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8758:	f2c2 0300 	movt	r3, #8192	; 0x2000
    875c:	781b      	ldrb	r3, [r3, #0]
    875e:	2bff      	cmp	r3, #255	; 0xff
    8760:	d105      	bne.n	876e <send_attitude+0x4e2>
    8762:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8766:	f2c2 0300 	movt	r3, #8192	; 0x2000
    876a:	2200      	movs	r2, #0
    876c:	701a      	strb	r2, [r3, #0]
    876e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8772:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8776:	781b      	ldrb	r3, [r3, #0]
    8778:	461a      	mov	r2, r3
    877a:	f24b 4394 	movw	r3, #46228	; 0xb494
    877e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8782:	7899      	ldrb	r1, [r3, #2]
    8784:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8788:	f2c2 0300 	movt	r3, #8192	; 0x2000
    878c:	5499      	strb	r1, [r3, r2]
    878e:	4b20      	ldr	r3, [pc, #128]	; (8810 <send_attitude+0x584>)
    8790:	781a      	ldrb	r2, [r3, #0]
    8792:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    879a:	781b      	ldrb	r3, [r3, #0]
    879c:	4413      	add	r3, r2
    879e:	b2da      	uxtb	r2, r3
    87a0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    87a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87a8:	701a      	strb	r2, [r3, #0]
    87aa:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    87ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87b2:	781a      	ldrb	r2, [r3, #0]
    87b4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    87b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87bc:	781b      	ldrb	r3, [r3, #0]
    87be:	4413      	add	r3, r2
    87c0:	b2da      	uxtb	r2, r3
    87c2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    87c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87ca:	701a      	strb	r2, [r3, #0]
    87cc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    87d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87d4:	781b      	ldrb	r3, [r3, #0]
    87d6:	3301      	adds	r3, #1
    87d8:	b2da      	uxtb	r2, r3
    87da:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    87de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87e2:	701a      	strb	r2, [r3, #0]
    87e4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    87e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87ec:	781b      	ldrb	r3, [r3, #0]
    87ee:	2bff      	cmp	r3, #255	; 0xff
    87f0:	d110      	bne.n	8814 <send_attitude+0x588>
    87f2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    87f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87fa:	2200      	movs	r2, #0
    87fc:	701a      	strb	r2, [r3, #0]
    87fe:	e009      	b.n	8814 <send_attitude+0x588>
    8800:	2000b491 	.word	0x2000b491
    8804:	2000b492 	.word	0x2000b492
    8808:	2000b493 	.word	0x2000b493
    880c:	2000b495 	.word	0x2000b495
    8810:	2000b496 	.word	0x2000b496
    8814:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8818:	f2c2 0300 	movt	r3, #8192	; 0x2000
    881c:	781b      	ldrb	r3, [r3, #0]
    881e:	461a      	mov	r2, r3
    8820:	f24b 4394 	movw	r3, #46228	; 0xb494
    8824:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8828:	78d9      	ldrb	r1, [r3, #3]
    882a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    882e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8832:	5499      	strb	r1, [r3, r2]
    8834:	4bc2      	ldr	r3, [pc, #776]	; (8b40 <send_attitude+0x8b4>)
    8836:	781a      	ldrb	r2, [r3, #0]
    8838:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    883c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8840:	781b      	ldrb	r3, [r3, #0]
    8842:	4413      	add	r3, r2
    8844:	b2da      	uxtb	r2, r3
    8846:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    884a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    884e:	701a      	strb	r2, [r3, #0]
    8850:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8854:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8858:	781a      	ldrb	r2, [r3, #0]
    885a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    885e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8862:	781b      	ldrb	r3, [r3, #0]
    8864:	4413      	add	r3, r2
    8866:	b2da      	uxtb	r2, r3
    8868:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    886c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8870:	701a      	strb	r2, [r3, #0]
    8872:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8876:	f2c2 0300 	movt	r3, #8192	; 0x2000
    887a:	781b      	ldrb	r3, [r3, #0]
    887c:	3301      	adds	r3, #1
    887e:	b2da      	uxtb	r2, r3
    8880:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8884:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8888:	701a      	strb	r2, [r3, #0]
    888a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    888e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8892:	781b      	ldrb	r3, [r3, #0]
    8894:	2bff      	cmp	r3, #255	; 0xff
    8896:	d105      	bne.n	88a4 <send_attitude+0x618>
    8898:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    889c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88a0:	2200      	movs	r2, #0
    88a2:	701a      	strb	r2, [r3, #0]
    88a4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    88a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88ac:	781b      	ldrb	r3, [r3, #0]
    88ae:	461a      	mov	r2, r3
    88b0:	f24b 4398 	movw	r3, #46232	; 0xb498
    88b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88b8:	7819      	ldrb	r1, [r3, #0]
    88ba:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    88be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88c2:	5499      	strb	r1, [r3, r2]
    88c4:	f24b 4398 	movw	r3, #46232	; 0xb498
    88c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88cc:	781a      	ldrb	r2, [r3, #0]
    88ce:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    88d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88d6:	781b      	ldrb	r3, [r3, #0]
    88d8:	4413      	add	r3, r2
    88da:	b2da      	uxtb	r2, r3
    88dc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    88e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88e4:	701a      	strb	r2, [r3, #0]
    88e6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    88ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88ee:	781a      	ldrb	r2, [r3, #0]
    88f0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    88f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88f8:	781b      	ldrb	r3, [r3, #0]
    88fa:	4413      	add	r3, r2
    88fc:	b2da      	uxtb	r2, r3
    88fe:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8902:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8906:	701a      	strb	r2, [r3, #0]
    8908:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    890c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8910:	781b      	ldrb	r3, [r3, #0]
    8912:	3301      	adds	r3, #1
    8914:	b2da      	uxtb	r2, r3
    8916:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    891a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    891e:	701a      	strb	r2, [r3, #0]
    8920:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8924:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8928:	781b      	ldrb	r3, [r3, #0]
    892a:	2bff      	cmp	r3, #255	; 0xff
    892c:	d105      	bne.n	893a <send_attitude+0x6ae>
    892e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8932:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8936:	2200      	movs	r2, #0
    8938:	701a      	strb	r2, [r3, #0]
    893a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    893e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8942:	781b      	ldrb	r3, [r3, #0]
    8944:	461a      	mov	r2, r3
    8946:	f24b 4398 	movw	r3, #46232	; 0xb498
    894a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    894e:	7859      	ldrb	r1, [r3, #1]
    8950:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8954:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8958:	5499      	strb	r1, [r3, r2]
    895a:	4b7a      	ldr	r3, [pc, #488]	; (8b44 <send_attitude+0x8b8>)
    895c:	781a      	ldrb	r2, [r3, #0]
    895e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8962:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8966:	781b      	ldrb	r3, [r3, #0]
    8968:	4413      	add	r3, r2
    896a:	b2da      	uxtb	r2, r3
    896c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8970:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8974:	701a      	strb	r2, [r3, #0]
    8976:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    897a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    897e:	781a      	ldrb	r2, [r3, #0]
    8980:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8984:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8988:	781b      	ldrb	r3, [r3, #0]
    898a:	4413      	add	r3, r2
    898c:	b2da      	uxtb	r2, r3
    898e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8992:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8996:	701a      	strb	r2, [r3, #0]
    8998:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    899c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89a0:	781b      	ldrb	r3, [r3, #0]
    89a2:	3301      	adds	r3, #1
    89a4:	b2da      	uxtb	r2, r3
    89a6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    89aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89ae:	701a      	strb	r2, [r3, #0]
    89b0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    89b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89b8:	781b      	ldrb	r3, [r3, #0]
    89ba:	2bff      	cmp	r3, #255	; 0xff
    89bc:	d105      	bne.n	89ca <send_attitude+0x73e>
    89be:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    89c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89c6:	2200      	movs	r2, #0
    89c8:	701a      	strb	r2, [r3, #0]
    89ca:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    89ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89d2:	781b      	ldrb	r3, [r3, #0]
    89d4:	461a      	mov	r2, r3
    89d6:	f24b 4398 	movw	r3, #46232	; 0xb498
    89da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89de:	7899      	ldrb	r1, [r3, #2]
    89e0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    89e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89e8:	5499      	strb	r1, [r3, r2]
    89ea:	4b57      	ldr	r3, [pc, #348]	; (8b48 <send_attitude+0x8bc>)
    89ec:	781a      	ldrb	r2, [r3, #0]
    89ee:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    89f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89f6:	781b      	ldrb	r3, [r3, #0]
    89f8:	4413      	add	r3, r2
    89fa:	b2da      	uxtb	r2, r3
    89fc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8a00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a04:	701a      	strb	r2, [r3, #0]
    8a06:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8a0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a0e:	781a      	ldrb	r2, [r3, #0]
    8a10:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a18:	781b      	ldrb	r3, [r3, #0]
    8a1a:	4413      	add	r3, r2
    8a1c:	b2da      	uxtb	r2, r3
    8a1e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a26:	701a      	strb	r2, [r3, #0]
    8a28:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a30:	781b      	ldrb	r3, [r3, #0]
    8a32:	3301      	adds	r3, #1
    8a34:	b2da      	uxtb	r2, r3
    8a36:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8a3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a3e:	701a      	strb	r2, [r3, #0]
    8a40:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8a44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a48:	781b      	ldrb	r3, [r3, #0]
    8a4a:	2bff      	cmp	r3, #255	; 0xff
    8a4c:	d105      	bne.n	8a5a <send_attitude+0x7ce>
    8a4e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8a52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a56:	2200      	movs	r2, #0
    8a58:	701a      	strb	r2, [r3, #0]
    8a5a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a62:	781b      	ldrb	r3, [r3, #0]
    8a64:	461a      	mov	r2, r3
    8a66:	f24b 4398 	movw	r3, #46232	; 0xb498
    8a6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a6e:	78d9      	ldrb	r1, [r3, #3]
    8a70:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8a74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a78:	5499      	strb	r1, [r3, r2]
    8a7a:	4b34      	ldr	r3, [pc, #208]	; (8b4c <send_attitude+0x8c0>)
    8a7c:	781a      	ldrb	r2, [r3, #0]
    8a7e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8a82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a86:	781b      	ldrb	r3, [r3, #0]
    8a88:	4413      	add	r3, r2
    8a8a:	b2da      	uxtb	r2, r3
    8a8c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a94:	701a      	strb	r2, [r3, #0]
    8a96:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8a9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a9e:	781a      	ldrb	r2, [r3, #0]
    8aa0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8aa8:	781b      	ldrb	r3, [r3, #0]
    8aaa:	4413      	add	r3, r2
    8aac:	b2da      	uxtb	r2, r3
    8aae:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ab6:	701a      	strb	r2, [r3, #0]
    8ab8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ac0:	781b      	ldrb	r3, [r3, #0]
    8ac2:	3301      	adds	r3, #1
    8ac4:	b2da      	uxtb	r2, r3
    8ac6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ace:	701a      	strb	r2, [r3, #0]
    8ad0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8ad4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ad8:	781b      	ldrb	r3, [r3, #0]
    8ada:	2bff      	cmp	r3, #255	; 0xff
    8adc:	d105      	bne.n	8aea <send_attitude+0x85e>
    8ade:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8ae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ae6:	2200      	movs	r2, #0
    8ae8:	701a      	strb	r2, [r3, #0]
    8aea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8af2:	781b      	ldrb	r3, [r3, #0]
    8af4:	461a      	mov	r2, r3
    8af6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8afa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8afe:	7819      	ldrb	r1, [r3, #0]
    8b00:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b08:	5499      	strb	r1, [r3, r2]
    8b0a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8b0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b12:	781b      	ldrb	r3, [r3, #0]
    8b14:	3301      	adds	r3, #1
    8b16:	b2da      	uxtb	r2, r3
    8b18:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b20:	701a      	strb	r2, [r3, #0]
    8b22:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b2a:	781b      	ldrb	r3, [r3, #0]
    8b2c:	2bff      	cmp	r3, #255	; 0xff
    8b2e:	d10f      	bne.n	8b50 <send_attitude+0x8c4>
    8b30:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b38:	2200      	movs	r2, #0
    8b3a:	701a      	strb	r2, [r3, #0]
    8b3c:	e008      	b.n	8b50 <send_attitude+0x8c4>
    8b3e:	bf00      	nop
    8b40:	2000b497 	.word	0x2000b497
    8b44:	2000b499 	.word	0x2000b499
    8b48:	2000b49a 	.word	0x2000b49a
    8b4c:	2000b49b 	.word	0x2000b49b
    8b50:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8b54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b58:	781b      	ldrb	r3, [r3, #0]
    8b5a:	461a      	mov	r2, r3
    8b5c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8b60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b64:	7819      	ldrb	r1, [r3, #0]
    8b66:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8b6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b6e:	5499      	strb	r1, [r3, r2]
    8b70:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b78:	781b      	ldrb	r3, [r3, #0]
    8b7a:	3301      	adds	r3, #1
    8b7c:	b2da      	uxtb	r2, r3
    8b7e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b86:	701a      	strb	r2, [r3, #0]
    8b88:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b90:	781b      	ldrb	r3, [r3, #0]
    8b92:	2bff      	cmp	r3, #255	; 0xff
    8b94:	d105      	bne.n	8ba2 <send_attitude+0x916>
    8b96:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b9e:	2200      	movs	r2, #0
    8ba0:	701a      	strb	r2, [r3, #0]
    8ba2:	f242 0339 	movw	r3, #8249	; 0x2039
    8ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8baa:	781b      	ldrb	r3, [r3, #0]
    8bac:	b2db      	uxtb	r3, r3
    8bae:	f003 0310 	and.w	r3, r3, #16
    8bb2:	2b00      	cmp	r3, #0
    8bb4:	d15a      	bne.n	8c6c <send_attitude+0x9e0>
    8bb6:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bbe:	781b      	ldrb	r3, [r3, #0]
    8bc0:	b2db      	uxtb	r3, r3
    8bc2:	461a      	mov	r2, r3
    8bc4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8bc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bcc:	5c9a      	ldrb	r2, [r3, r2]
    8bce:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    8bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bd6:	701a      	strb	r2, [r3, #0]
    8bd8:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    8bdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8be0:	2200      	movs	r2, #0
    8be2:	701a      	strb	r2, [r3, #0]
    8be4:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8be8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bec:	781b      	ldrb	r3, [r3, #0]
    8bee:	b2db      	uxtb	r3, r3
    8bf0:	3301      	adds	r3, #1
    8bf2:	b2da      	uxtb	r2, r3
    8bf4:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bfc:	701a      	strb	r2, [r3, #0]
    8bfe:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c06:	781b      	ldrb	r3, [r3, #0]
    8c08:	b2db      	uxtb	r3, r3
    8c0a:	2bff      	cmp	r3, #255	; 0xff
    8c0c:	d105      	bne.n	8c1a <send_attitude+0x98e>
    8c0e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c16:	2200      	movs	r2, #0
    8c18:	701a      	strb	r2, [r3, #0]
    8c1a:	f242 0338 	movw	r3, #8248	; 0x2038
    8c1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c22:	f242 0238 	movw	r2, #8248	; 0x2038
    8c26:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8c2a:	7812      	ldrb	r2, [r2, #0]
    8c2c:	b2d2      	uxtb	r2, r2
    8c2e:	f042 0201 	orr.w	r2, r2, #1
    8c32:	b2d2      	uxtb	r2, r2
    8c34:	701a      	strb	r2, [r3, #0]
    8c36:	f242 0339 	movw	r3, #8249	; 0x2039
    8c3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c3e:	f242 0239 	movw	r2, #8249	; 0x2039
    8c42:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8c46:	7812      	ldrb	r2, [r2, #0]
    8c48:	b2d2      	uxtb	r2, r2
    8c4a:	f042 0210 	orr.w	r2, r2, #16
    8c4e:	b2d2      	uxtb	r2, r2
    8c50:	701a      	strb	r2, [r3, #0]
    8c52:	e00b      	b.n	8c6c <send_attitude+0x9e0>
    8c54:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    8c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c5c:	781b      	ldrb	r3, [r3, #0]
    8c5e:	3301      	adds	r3, #1
    8c60:	b2da      	uxtb	r2, r3
    8c62:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    8c66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c6a:	701a      	strb	r2, [r3, #0]
  }
}
    8c6c:	46bd      	mov	sp, r7
    8c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c72:	4770      	bx	lr

00008c74 <send_adc>:
  
void send_adc(void){  //500ms
    8c74:	b480      	push	{r7}
    8c76:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    8c78:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    8c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c80:	781a      	ldrb	r2, [r3, #0]
    8c82:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8c86:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8c8a:	fba3 1302 	umull	r1, r3, r3, r2
    8c8e:	0899      	lsrs	r1, r3, #2
    8c90:	460b      	mov	r3, r1
    8c92:	009b      	lsls	r3, r3, #2
    8c94:	440b      	add	r3, r1
    8c96:	1ad3      	subs	r3, r2, r3
    8c98:	b2db      	uxtb	r3, r3
    8c9a:	2b01      	cmp	r3, #1
    8c9c:	f040 8269 	bne.w	9172 <send_adc+0x4fe>
    8ca0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ca8:	781a      	ldrb	r2, [r3, #0]
    8caa:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8cae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cb2:	781b      	ldrb	r3, [r3, #0]
    8cb4:	b2db      	uxtb	r3, r3
    8cb6:	429a      	cmp	r2, r3
    8cb8:	d313      	bcc.n	8ce2 <send_adc+0x6e>
    8cba:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cc2:	781b      	ldrb	r3, [r3, #0]
    8cc4:	b2db      	uxtb	r3, r3
    8cc6:	461a      	mov	r2, r3
    8cc8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8ccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cd0:	781b      	ldrb	r3, [r3, #0]
    8cd2:	1ad3      	subs	r3, r2, r3
    8cd4:	33ff      	adds	r3, #255	; 0xff
    8cd6:	2b08      	cmp	r3, #8
    8cd8:	bfd4      	ite	le
    8cda:	2300      	movle	r3, #0
    8cdc:	2301      	movgt	r3, #1
    8cde:	b2db      	uxtb	r3, r3
    8ce0:	e011      	b.n	8d06 <send_adc+0x92>
    8ce2:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    8ce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cea:	781b      	ldrb	r3, [r3, #0]
    8cec:	b2db      	uxtb	r3, r3
    8cee:	461a      	mov	r2, r3
    8cf0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cf8:	781b      	ldrb	r3, [r3, #0]
    8cfa:	1ad3      	subs	r3, r2, r3
    8cfc:	2b08      	cmp	r3, #8
    8cfe:	bfd4      	ite	le
    8d00:	2300      	movle	r3, #0
    8d02:	2301      	movgt	r3, #1
    8d04:	b2db      	uxtb	r3, r3
    8d06:	2b00      	cmp	r3, #0
    8d08:	f000 8227 	beq.w	915a <send_adc+0x4e6>
    8d0c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d14:	781b      	ldrb	r3, [r3, #0]
    8d16:	461a      	mov	r2, r3
    8d18:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d20:	2105      	movs	r1, #5
    8d22:	5499      	strb	r1, [r3, r2]
    8d24:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8d28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d2c:	781b      	ldrb	r3, [r3, #0]
    8d2e:	3301      	adds	r3, #1
    8d30:	b2da      	uxtb	r2, r3
    8d32:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d3a:	701a      	strb	r2, [r3, #0]
    8d3c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8d40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d44:	781b      	ldrb	r3, [r3, #0]
    8d46:	2bff      	cmp	r3, #255	; 0xff
    8d48:	d105      	bne.n	8d56 <send_adc+0xe2>
    8d4a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d52:	2200      	movs	r2, #0
    8d54:	701a      	strb	r2, [r3, #0]
    8d56:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8d5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d5e:	781b      	ldrb	r3, [r3, #0]
    8d60:	461a      	mov	r2, r3
    8d62:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8d66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d6a:	2107      	movs	r1, #7
    8d6c:	5499      	strb	r1, [r3, r2]
    8d6e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8d72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d76:	781b      	ldrb	r3, [r3, #0]
    8d78:	3301      	adds	r3, #1
    8d7a:	b2da      	uxtb	r2, r3
    8d7c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d84:	701a      	strb	r2, [r3, #0]
    8d86:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d8e:	781b      	ldrb	r3, [r3, #0]
    8d90:	2bff      	cmp	r3, #255	; 0xff
    8d92:	d105      	bne.n	8da0 <send_adc+0x12c>
    8d94:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d9c:	2200      	movs	r2, #0
    8d9e:	701a      	strb	r2, [r3, #0]
    8da0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8da8:	2207      	movs	r2, #7
    8daa:	701a      	strb	r2, [r3, #0]
    8dac:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8db4:	2207      	movs	r2, #7
    8db6:	701a      	strb	r2, [r3, #0]
    8db8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8dbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dc0:	781b      	ldrb	r3, [r3, #0]
    8dc2:	461a      	mov	r2, r3
    8dc4:	f24b 1370 	movw	r3, #45424	; 0xb170
    8dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dcc:	7819      	ldrb	r1, [r3, #0]
    8dce:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dd6:	5499      	strb	r1, [r3, r2]
    8dd8:	f24b 1370 	movw	r3, #45424	; 0xb170
    8ddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8de0:	781a      	ldrb	r2, [r3, #0]
    8de2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8de6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dea:	781b      	ldrb	r3, [r3, #0]
    8dec:	4413      	add	r3, r2
    8dee:	b2da      	uxtb	r2, r3
    8df0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8df8:	701a      	strb	r2, [r3, #0]
    8dfa:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e02:	781a      	ldrb	r2, [r3, #0]
    8e04:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8e08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e0c:	781b      	ldrb	r3, [r3, #0]
    8e0e:	4413      	add	r3, r2
    8e10:	b2da      	uxtb	r2, r3
    8e12:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8e16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e1a:	701a      	strb	r2, [r3, #0]
    8e1c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e24:	781b      	ldrb	r3, [r3, #0]
    8e26:	3301      	adds	r3, #1
    8e28:	b2da      	uxtb	r2, r3
    8e2a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8e2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e32:	701a      	strb	r2, [r3, #0]
    8e34:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e3c:	781b      	ldrb	r3, [r3, #0]
    8e3e:	2bff      	cmp	r3, #255	; 0xff
    8e40:	d105      	bne.n	8e4e <send_adc+0x1da>
    8e42:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8e46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e4a:	2200      	movs	r2, #0
    8e4c:	701a      	strb	r2, [r3, #0]
    8e4e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e56:	781b      	ldrb	r3, [r3, #0]
    8e58:	461a      	mov	r2, r3
    8e5a:	f24b 1370 	movw	r3, #45424	; 0xb170
    8e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e62:	7859      	ldrb	r1, [r3, #1]
    8e64:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e6c:	5499      	strb	r1, [r3, r2]
    8e6e:	4bc3      	ldr	r3, [pc, #780]	; (917c <send_adc+0x508>)
    8e70:	781a      	ldrb	r2, [r3, #0]
    8e72:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8e76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e7a:	781b      	ldrb	r3, [r3, #0]
    8e7c:	4413      	add	r3, r2
    8e7e:	b2da      	uxtb	r2, r3
    8e80:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e88:	701a      	strb	r2, [r3, #0]
    8e8a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8e8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e92:	781a      	ldrb	r2, [r3, #0]
    8e94:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e9c:	781b      	ldrb	r3, [r3, #0]
    8e9e:	4413      	add	r3, r2
    8ea0:	b2da      	uxtb	r2, r3
    8ea2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8eaa:	701a      	strb	r2, [r3, #0]
    8eac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8eb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8eb4:	781b      	ldrb	r3, [r3, #0]
    8eb6:	3301      	adds	r3, #1
    8eb8:	b2da      	uxtb	r2, r3
    8eba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8ebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ec2:	701a      	strb	r2, [r3, #0]
    8ec4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ecc:	781b      	ldrb	r3, [r3, #0]
    8ece:	2bff      	cmp	r3, #255	; 0xff
    8ed0:	d105      	bne.n	8ede <send_adc+0x26a>
    8ed2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8eda:	2200      	movs	r2, #0
    8edc:	701a      	strb	r2, [r3, #0]
    8ede:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ee6:	781b      	ldrb	r3, [r3, #0]
    8ee8:	461a      	mov	r2, r3
    8eea:	f24b 1372 	movw	r3, #45426	; 0xb172
    8eee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ef2:	7819      	ldrb	r1, [r3, #0]
    8ef4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8ef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8efc:	5499      	strb	r1, [r3, r2]
    8efe:	f24b 1372 	movw	r3, #45426	; 0xb172
    8f02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f06:	781a      	ldrb	r2, [r3, #0]
    8f08:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8f0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f10:	781b      	ldrb	r3, [r3, #0]
    8f12:	4413      	add	r3, r2
    8f14:	b2da      	uxtb	r2, r3
    8f16:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f1e:	701a      	strb	r2, [r3, #0]
    8f20:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8f24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f28:	781a      	ldrb	r2, [r3, #0]
    8f2a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f32:	781b      	ldrb	r3, [r3, #0]
    8f34:	4413      	add	r3, r2
    8f36:	b2da      	uxtb	r2, r3
    8f38:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8f3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f40:	701a      	strb	r2, [r3, #0]
    8f42:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f4a:	781b      	ldrb	r3, [r3, #0]
    8f4c:	3301      	adds	r3, #1
    8f4e:	b2da      	uxtb	r2, r3
    8f50:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f58:	701a      	strb	r2, [r3, #0]
    8f5a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8f5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f62:	781b      	ldrb	r3, [r3, #0]
    8f64:	2bff      	cmp	r3, #255	; 0xff
    8f66:	d105      	bne.n	8f74 <send_adc+0x300>
    8f68:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f70:	2200      	movs	r2, #0
    8f72:	701a      	strb	r2, [r3, #0]
    8f74:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f7c:	781b      	ldrb	r3, [r3, #0]
    8f7e:	461a      	mov	r2, r3
    8f80:	f24b 1372 	movw	r3, #45426	; 0xb172
    8f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f88:	7859      	ldrb	r1, [r3, #1]
    8f8a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    8f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f92:	5499      	strb	r1, [r3, r2]
    8f94:	4b7a      	ldr	r3, [pc, #488]	; (9180 <send_adc+0x50c>)
    8f96:	781a      	ldrb	r2, [r3, #0]
    8f98:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fa0:	781b      	ldrb	r3, [r3, #0]
    8fa2:	4413      	add	r3, r2
    8fa4:	b2da      	uxtb	r2, r3
    8fa6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fae:	701a      	strb	r2, [r3, #0]
    8fb0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8fb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fb8:	781a      	ldrb	r2, [r3, #0]
    8fba:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    8fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fc2:	781b      	ldrb	r3, [r3, #0]
    8fc4:	4413      	add	r3, r2
    8fc6:	b2da      	uxtb	r2, r3
    8fc8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    8fcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fd0:	701a      	strb	r2, [r3, #0]
    8fd2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fda:	781b      	ldrb	r3, [r3, #0]
    8fdc:	3301      	adds	r3, #1
    8fde:	b2da      	uxtb	r2, r3
    8fe0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8fe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fe8:	701a      	strb	r2, [r3, #0]
    8fea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ff2:	781b      	ldrb	r3, [r3, #0]
    8ff4:	2bff      	cmp	r3, #255	; 0xff
    8ff6:	d105      	bne.n	9004 <send_adc+0x390>
    8ff8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    8ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9000:	2200      	movs	r2, #0
    9002:	701a      	strb	r2, [r3, #0]
    9004:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9008:	f2c2 0300 	movt	r3, #8192	; 0x2000
    900c:	781b      	ldrb	r3, [r3, #0]
    900e:	461a      	mov	r2, r3
    9010:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9014:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9018:	7819      	ldrb	r1, [r3, #0]
    901a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    901e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9022:	5499      	strb	r1, [r3, r2]
    9024:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9028:	f2c2 0300 	movt	r3, #8192	; 0x2000
    902c:	781b      	ldrb	r3, [r3, #0]
    902e:	3301      	adds	r3, #1
    9030:	b2da      	uxtb	r2, r3
    9032:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9036:	f2c2 0300 	movt	r3, #8192	; 0x2000
    903a:	701a      	strb	r2, [r3, #0]
    903c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9040:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9044:	781b      	ldrb	r3, [r3, #0]
    9046:	2bff      	cmp	r3, #255	; 0xff
    9048:	d105      	bne.n	9056 <send_adc+0x3e2>
    904a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    904e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9052:	2200      	movs	r2, #0
    9054:	701a      	strb	r2, [r3, #0]
    9056:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    905a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    905e:	781b      	ldrb	r3, [r3, #0]
    9060:	461a      	mov	r2, r3
    9062:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9066:	f2c2 0300 	movt	r3, #8192	; 0x2000
    906a:	7819      	ldrb	r1, [r3, #0]
    906c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9070:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9074:	5499      	strb	r1, [r3, r2]
    9076:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    907a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    907e:	781b      	ldrb	r3, [r3, #0]
    9080:	3301      	adds	r3, #1
    9082:	b2da      	uxtb	r2, r3
    9084:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9088:	f2c2 0300 	movt	r3, #8192	; 0x2000
    908c:	701a      	strb	r2, [r3, #0]
    908e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9092:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9096:	781b      	ldrb	r3, [r3, #0]
    9098:	2bff      	cmp	r3, #255	; 0xff
    909a:	d105      	bne.n	90a8 <send_adc+0x434>
    909c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    90a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90a4:	2200      	movs	r2, #0
    90a6:	701a      	strb	r2, [r3, #0]
    90a8:	f242 0339 	movw	r3, #8249	; 0x2039
    90ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90b0:	781b      	ldrb	r3, [r3, #0]
    90b2:	b2db      	uxtb	r3, r3
    90b4:	f003 0310 	and.w	r3, r3, #16
    90b8:	2b00      	cmp	r3, #0
    90ba:	d15a      	bne.n	9172 <send_adc+0x4fe>
    90bc:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    90c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90c4:	781b      	ldrb	r3, [r3, #0]
    90c6:	b2db      	uxtb	r3, r3
    90c8:	461a      	mov	r2, r3
    90ca:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    90ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90d2:	5c9a      	ldrb	r2, [r3, r2]
    90d4:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    90d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90dc:	701a      	strb	r2, [r3, #0]
    90de:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    90e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90e6:	2200      	movs	r2, #0
    90e8:	701a      	strb	r2, [r3, #0]
    90ea:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    90ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90f2:	781b      	ldrb	r3, [r3, #0]
    90f4:	b2db      	uxtb	r3, r3
    90f6:	3301      	adds	r3, #1
    90f8:	b2da      	uxtb	r2, r3
    90fa:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    90fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9102:	701a      	strb	r2, [r3, #0]
    9104:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    9108:	f2c2 0300 	movt	r3, #8192	; 0x2000
    910c:	781b      	ldrb	r3, [r3, #0]
    910e:	b2db      	uxtb	r3, r3
    9110:	2bff      	cmp	r3, #255	; 0xff
    9112:	d105      	bne.n	9120 <send_adc+0x4ac>
    9114:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    9118:	f2c2 0300 	movt	r3, #8192	; 0x2000
    911c:	2200      	movs	r2, #0
    911e:	701a      	strb	r2, [r3, #0]
    9120:	f242 0338 	movw	r3, #8248	; 0x2038
    9124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9128:	f242 0238 	movw	r2, #8248	; 0x2038
    912c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9130:	7812      	ldrb	r2, [r2, #0]
    9132:	b2d2      	uxtb	r2, r2
    9134:	f042 0201 	orr.w	r2, r2, #1
    9138:	b2d2      	uxtb	r2, r2
    913a:	701a      	strb	r2, [r3, #0]
    913c:	f242 0339 	movw	r3, #8249	; 0x2039
    9140:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9144:	f242 0239 	movw	r2, #8249	; 0x2039
    9148:	f2c2 0200 	movt	r2, #8192	; 0x2000
    914c:	7812      	ldrb	r2, [r2, #0]
    914e:	b2d2      	uxtb	r2, r2
    9150:	f042 0210 	orr.w	r2, r2, #16
    9154:	b2d2      	uxtb	r2, r2
    9156:	701a      	strb	r2, [r3, #0]
    9158:	e00b      	b.n	9172 <send_adc+0x4fe>
    915a:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    915e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9162:	781b      	ldrb	r3, [r3, #0]
    9164:	3301      	adds	r3, #1
    9166:	b2da      	uxtb	r2, r3
    9168:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    916c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9170:	701a      	strb	r2, [r3, #0]
}
    9172:	46bd      	mov	sp, r7
    9174:	f85d 7b04 	ldr.w	r7, [sp], #4
    9178:	4770      	bx	lr
    917a:	bf00      	nop
    917c:	2000b171 	.word	0x2000b171
    9180:	2000b173 	.word	0x2000b173

00009184 <send_settings>:
void send_settings(void){ //500ms
    9184:	b480      	push	{r7}
    9186:	af00      	add	r7, sp, #0
  //if(!boot)
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    9188:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    918c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9190:	781a      	ldrb	r2, [r3, #0]
    9192:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9196:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    919a:	fba3 1302 	umull	r1, r3, r3, r2
    919e:	0899      	lsrs	r1, r3, #2
    91a0:	460b      	mov	r3, r1
    91a2:	009b      	lsls	r3, r3, #2
    91a4:	440b      	add	r3, r1
    91a6:	1ad3      	subs	r3, r2, r3
    91a8:	b2db      	uxtb	r3, r3
    91aa:	2b02      	cmp	r3, #2
    91ac:	f040 83e7 	bne.w	997e <send_settings+0x7fa>
    91b0:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    91b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91b8:	781b      	ldrb	r3, [r3, #0]
    91ba:	2b00      	cmp	r3, #0
    91bc:	f000 83df 	beq.w	997e <send_settings+0x7fa>
    91c0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    91c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91c8:	781a      	ldrb	r2, [r3, #0]
    91ca:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    91ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91d2:	781b      	ldrb	r3, [r3, #0]
    91d4:	b2db      	uxtb	r3, r3
    91d6:	429a      	cmp	r2, r3
    91d8:	d313      	bcc.n	9202 <send_settings+0x7e>
    91da:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    91de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91e2:	781b      	ldrb	r3, [r3, #0]
    91e4:	b2db      	uxtb	r3, r3
    91e6:	461a      	mov	r2, r3
    91e8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    91ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91f0:	781b      	ldrb	r3, [r3, #0]
    91f2:	1ad3      	subs	r3, r2, r3
    91f4:	33ff      	adds	r3, #255	; 0xff
    91f6:	2b0d      	cmp	r3, #13
    91f8:	bfd4      	ite	le
    91fa:	2300      	movle	r3, #0
    91fc:	2301      	movgt	r3, #1
    91fe:	b2db      	uxtb	r3, r3
    9200:	e011      	b.n	9226 <send_settings+0xa2>
    9202:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    9206:	f2c2 0300 	movt	r3, #8192	; 0x2000
    920a:	781b      	ldrb	r3, [r3, #0]
    920c:	b2db      	uxtb	r3, r3
    920e:	461a      	mov	r2, r3
    9210:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9214:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9218:	781b      	ldrb	r3, [r3, #0]
    921a:	1ad3      	subs	r3, r2, r3
    921c:	2b0d      	cmp	r3, #13
    921e:	bfd4      	ite	le
    9220:	2300      	movle	r3, #0
    9222:	2301      	movgt	r3, #1
    9224:	b2db      	uxtb	r3, r3
    9226:	2b00      	cmp	r3, #0
    9228:	f000 839d 	beq.w	9966 <send_settings+0x7e2>
    922c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9230:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9234:	781b      	ldrb	r3, [r3, #0]
    9236:	461a      	mov	r2, r3
    9238:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    923c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9240:	2105      	movs	r1, #5
    9242:	5499      	strb	r1, [r3, r2]
    9244:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9248:	f2c2 0300 	movt	r3, #8192	; 0x2000
    924c:	781b      	ldrb	r3, [r3, #0]
    924e:	3301      	adds	r3, #1
    9250:	b2da      	uxtb	r2, r3
    9252:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    925a:	701a      	strb	r2, [r3, #0]
    925c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9260:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9264:	781b      	ldrb	r3, [r3, #0]
    9266:	2bff      	cmp	r3, #255	; 0xff
    9268:	d105      	bne.n	9276 <send_settings+0xf2>
    926a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    926e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9272:	2200      	movs	r2, #0
    9274:	701a      	strb	r2, [r3, #0]
    9276:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    927a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    927e:	781b      	ldrb	r3, [r3, #0]
    9280:	461a      	mov	r2, r3
    9282:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9286:	f2c2 0300 	movt	r3, #8192	; 0x2000
    928a:	2111      	movs	r1, #17
    928c:	5499      	strb	r1, [r3, r2]
    928e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9296:	781b      	ldrb	r3, [r3, #0]
    9298:	3301      	adds	r3, #1
    929a:	b2da      	uxtb	r2, r3
    929c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    92a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92a4:	701a      	strb	r2, [r3, #0]
    92a6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    92aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92ae:	781b      	ldrb	r3, [r3, #0]
    92b0:	2bff      	cmp	r3, #255	; 0xff
    92b2:	d105      	bne.n	92c0 <send_settings+0x13c>
    92b4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    92b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92bc:	2200      	movs	r2, #0
    92be:	701a      	strb	r2, [r3, #0]
    92c0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    92c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92c8:	2211      	movs	r2, #17
    92ca:	701a      	strb	r2, [r3, #0]
    92cc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    92d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92d4:	2211      	movs	r2, #17
    92d6:	701a      	strb	r2, [r3, #0]
    92d8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    92dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92e0:	781b      	ldrb	r3, [r3, #0]
    92e2:	461a      	mov	r2, r3
    92e4:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    92e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92ec:	7819      	ldrb	r1, [r3, #0]
    92ee:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    92f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92f6:	5499      	strb	r1, [r3, r2]
    92f8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    92fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9300:	781a      	ldrb	r2, [r3, #0]
    9302:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    9306:	f2c2 0300 	movt	r3, #8192	; 0x2000
    930a:	781b      	ldrb	r3, [r3, #0]
    930c:	4413      	add	r3, r2
    930e:	b2da      	uxtb	r2, r3
    9310:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9314:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9318:	701a      	strb	r2, [r3, #0]
    931a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    931e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9322:	781a      	ldrb	r2, [r3, #0]
    9324:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9328:	f2c2 0300 	movt	r3, #8192	; 0x2000
    932c:	781b      	ldrb	r3, [r3, #0]
    932e:	4413      	add	r3, r2
    9330:	b2da      	uxtb	r2, r3
    9332:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9336:	f2c2 0300 	movt	r3, #8192	; 0x2000
    933a:	701a      	strb	r2, [r3, #0]
    933c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9344:	781b      	ldrb	r3, [r3, #0]
    9346:	3301      	adds	r3, #1
    9348:	b2da      	uxtb	r2, r3
    934a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    934e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9352:	701a      	strb	r2, [r3, #0]
    9354:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9358:	f2c2 0300 	movt	r3, #8192	; 0x2000
    935c:	781b      	ldrb	r3, [r3, #0]
    935e:	2bff      	cmp	r3, #255	; 0xff
    9360:	d105      	bne.n	936e <send_settings+0x1ea>
    9362:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9366:	f2c2 0300 	movt	r3, #8192	; 0x2000
    936a:	2200      	movs	r2, #0
    936c:	701a      	strb	r2, [r3, #0]
    936e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9372:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9376:	781b      	ldrb	r3, [r3, #0]
    9378:	461a      	mov	r2, r3
    937a:	f64a 63c0 	movw	r3, #44736	; 0xaec0
    937e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9382:	7819      	ldrb	r1, [r3, #0]
    9384:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9388:	f2c2 0300 	movt	r3, #8192	; 0x2000
    938c:	5499      	strb	r1, [r3, r2]
    938e:	f64a 63c0 	movw	r3, #44736	; 0xaec0
    9392:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9396:	781a      	ldrb	r2, [r3, #0]
    9398:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    939c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93a0:	781b      	ldrb	r3, [r3, #0]
    93a2:	4413      	add	r3, r2
    93a4:	b2da      	uxtb	r2, r3
    93a6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    93aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93ae:	701a      	strb	r2, [r3, #0]
    93b0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    93b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93b8:	781a      	ldrb	r2, [r3, #0]
    93ba:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    93be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93c2:	781b      	ldrb	r3, [r3, #0]
    93c4:	4413      	add	r3, r2
    93c6:	b2da      	uxtb	r2, r3
    93c8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    93cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93d0:	701a      	strb	r2, [r3, #0]
    93d2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    93d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93da:	781b      	ldrb	r3, [r3, #0]
    93dc:	3301      	adds	r3, #1
    93de:	b2da      	uxtb	r2, r3
    93e0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    93e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93e8:	701a      	strb	r2, [r3, #0]
    93ea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    93ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93f2:	781b      	ldrb	r3, [r3, #0]
    93f4:	2bff      	cmp	r3, #255	; 0xff
    93f6:	d105      	bne.n	9404 <send_settings+0x280>
    93f8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    93fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9400:	2200      	movs	r2, #0
    9402:	701a      	strb	r2, [r3, #0]
    9404:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9408:	f2c2 0300 	movt	r3, #8192	; 0x2000
    940c:	781b      	ldrb	r3, [r3, #0]
    940e:	461a      	mov	r2, r3
    9410:	f64a 63c0 	movw	r3, #44736	; 0xaec0
    9414:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9418:	7859      	ldrb	r1, [r3, #1]
    941a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    941e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9422:	5499      	strb	r1, [r3, r2]
    9424:	4bd1      	ldr	r3, [pc, #836]	; (976c <send_settings+0x5e8>)
    9426:	781a      	ldrb	r2, [r3, #0]
    9428:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    942c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9430:	781b      	ldrb	r3, [r3, #0]
    9432:	4413      	add	r3, r2
    9434:	b2da      	uxtb	r2, r3
    9436:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    943a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    943e:	701a      	strb	r2, [r3, #0]
    9440:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9444:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9448:	781a      	ldrb	r2, [r3, #0]
    944a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    944e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9452:	781b      	ldrb	r3, [r3, #0]
    9454:	4413      	add	r3, r2
    9456:	b2da      	uxtb	r2, r3
    9458:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    945c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9460:	701a      	strb	r2, [r3, #0]
    9462:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9466:	f2c2 0300 	movt	r3, #8192	; 0x2000
    946a:	781b      	ldrb	r3, [r3, #0]
    946c:	3301      	adds	r3, #1
    946e:	b2da      	uxtb	r2, r3
    9470:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9474:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9478:	701a      	strb	r2, [r3, #0]
    947a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    947e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9482:	781b      	ldrb	r3, [r3, #0]
    9484:	2bff      	cmp	r3, #255	; 0xff
    9486:	d105      	bne.n	9494 <send_settings+0x310>
    9488:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    948c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9490:	2200      	movs	r2, #0
    9492:	701a      	strb	r2, [r3, #0]
    9494:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9498:	f2c2 0300 	movt	r3, #8192	; 0x2000
    949c:	781b      	ldrb	r3, [r3, #0]
    949e:	461a      	mov	r2, r3
    94a0:	f64a 63c0 	movw	r3, #44736	; 0xaec0
    94a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94a8:	7899      	ldrb	r1, [r3, #2]
    94aa:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    94ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94b2:	5499      	strb	r1, [r3, r2]
    94b4:	4bae      	ldr	r3, [pc, #696]	; (9770 <send_settings+0x5ec>)
    94b6:	781a      	ldrb	r2, [r3, #0]
    94b8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    94bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94c0:	781b      	ldrb	r3, [r3, #0]
    94c2:	4413      	add	r3, r2
    94c4:	b2da      	uxtb	r2, r3
    94c6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    94ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94ce:	701a      	strb	r2, [r3, #0]
    94d0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    94d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94d8:	781a      	ldrb	r2, [r3, #0]
    94da:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    94de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94e2:	781b      	ldrb	r3, [r3, #0]
    94e4:	4413      	add	r3, r2
    94e6:	b2da      	uxtb	r2, r3
    94e8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    94ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94f0:	701a      	strb	r2, [r3, #0]
    94f2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    94f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94fa:	781b      	ldrb	r3, [r3, #0]
    94fc:	3301      	adds	r3, #1
    94fe:	b2da      	uxtb	r2, r3
    9500:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9504:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9508:	701a      	strb	r2, [r3, #0]
    950a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    950e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9512:	781b      	ldrb	r3, [r3, #0]
    9514:	2bff      	cmp	r3, #255	; 0xff
    9516:	d105      	bne.n	9524 <send_settings+0x3a0>
    9518:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    951c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9520:	2200      	movs	r2, #0
    9522:	701a      	strb	r2, [r3, #0]
    9524:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9528:	f2c2 0300 	movt	r3, #8192	; 0x2000
    952c:	781b      	ldrb	r3, [r3, #0]
    952e:	461a      	mov	r2, r3
    9530:	f64a 63c0 	movw	r3, #44736	; 0xaec0
    9534:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9538:	78d9      	ldrb	r1, [r3, #3]
    953a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    953e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9542:	5499      	strb	r1, [r3, r2]
    9544:	4b8b      	ldr	r3, [pc, #556]	; (9774 <send_settings+0x5f0>)
    9546:	781a      	ldrb	r2, [r3, #0]
    9548:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    954c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9550:	781b      	ldrb	r3, [r3, #0]
    9552:	4413      	add	r3, r2
    9554:	b2da      	uxtb	r2, r3
    9556:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    955a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    955e:	701a      	strb	r2, [r3, #0]
    9560:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9564:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9568:	781a      	ldrb	r2, [r3, #0]
    956a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    956e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9572:	781b      	ldrb	r3, [r3, #0]
    9574:	4413      	add	r3, r2
    9576:	b2da      	uxtb	r2, r3
    9578:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    957c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9580:	701a      	strb	r2, [r3, #0]
    9582:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9586:	f2c2 0300 	movt	r3, #8192	; 0x2000
    958a:	781b      	ldrb	r3, [r3, #0]
    958c:	3301      	adds	r3, #1
    958e:	b2da      	uxtb	r2, r3
    9590:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9594:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9598:	701a      	strb	r2, [r3, #0]
    959a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    959e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95a2:	781b      	ldrb	r3, [r3, #0]
    95a4:	2bff      	cmp	r3, #255	; 0xff
    95a6:	d105      	bne.n	95b4 <send_settings+0x430>
    95a8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    95ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95b0:	2200      	movs	r2, #0
    95b2:	701a      	strb	r2, [r3, #0]
    95b4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    95b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95bc:	781b      	ldrb	r3, [r3, #0]
    95be:	461a      	mov	r2, r3
    95c0:	f64a 63c4 	movw	r3, #44740	; 0xaec4
    95c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95c8:	7819      	ldrb	r1, [r3, #0]
    95ca:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    95ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95d2:	5499      	strb	r1, [r3, r2]
    95d4:	f64a 63c4 	movw	r3, #44740	; 0xaec4
    95d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95dc:	781a      	ldrb	r2, [r3, #0]
    95de:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    95e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95e6:	781b      	ldrb	r3, [r3, #0]
    95e8:	4413      	add	r3, r2
    95ea:	b2da      	uxtb	r2, r3
    95ec:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    95f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95f4:	701a      	strb	r2, [r3, #0]
    95f6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    95fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95fe:	781a      	ldrb	r2, [r3, #0]
    9600:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9604:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9608:	781b      	ldrb	r3, [r3, #0]
    960a:	4413      	add	r3, r2
    960c:	b2da      	uxtb	r2, r3
    960e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9612:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9616:	701a      	strb	r2, [r3, #0]
    9618:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    961c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9620:	781b      	ldrb	r3, [r3, #0]
    9622:	3301      	adds	r3, #1
    9624:	b2da      	uxtb	r2, r3
    9626:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    962a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    962e:	701a      	strb	r2, [r3, #0]
    9630:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9638:	781b      	ldrb	r3, [r3, #0]
    963a:	2bff      	cmp	r3, #255	; 0xff
    963c:	d105      	bne.n	964a <send_settings+0x4c6>
    963e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9642:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9646:	2200      	movs	r2, #0
    9648:	701a      	strb	r2, [r3, #0]
    964a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    964e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9652:	781b      	ldrb	r3, [r3, #0]
    9654:	461a      	mov	r2, r3
    9656:	f64a 63c4 	movw	r3, #44740	; 0xaec4
    965a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    965e:	7859      	ldrb	r1, [r3, #1]
    9660:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9664:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9668:	5499      	strb	r1, [r3, r2]
    966a:	4b43      	ldr	r3, [pc, #268]	; (9778 <send_settings+0x5f4>)
    966c:	781a      	ldrb	r2, [r3, #0]
    966e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9672:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9676:	781b      	ldrb	r3, [r3, #0]
    9678:	4413      	add	r3, r2
    967a:	b2da      	uxtb	r2, r3
    967c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9680:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9684:	701a      	strb	r2, [r3, #0]
    9686:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    968a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    968e:	781a      	ldrb	r2, [r3, #0]
    9690:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9694:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9698:	781b      	ldrb	r3, [r3, #0]
    969a:	4413      	add	r3, r2
    969c:	b2da      	uxtb	r2, r3
    969e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    96a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96a6:	701a      	strb	r2, [r3, #0]
    96a8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    96ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96b0:	781b      	ldrb	r3, [r3, #0]
    96b2:	3301      	adds	r3, #1
    96b4:	b2da      	uxtb	r2, r3
    96b6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    96ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96be:	701a      	strb	r2, [r3, #0]
    96c0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    96c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96c8:	781b      	ldrb	r3, [r3, #0]
    96ca:	2bff      	cmp	r3, #255	; 0xff
    96cc:	d105      	bne.n	96da <send_settings+0x556>
    96ce:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    96d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96d6:	2200      	movs	r2, #0
    96d8:	701a      	strb	r2, [r3, #0]
    96da:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    96de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96e2:	781b      	ldrb	r3, [r3, #0]
    96e4:	461a      	mov	r2, r3
    96e6:	f64a 63c4 	movw	r3, #44740	; 0xaec4
    96ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96ee:	7899      	ldrb	r1, [r3, #2]
    96f0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    96f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96f8:	5499      	strb	r1, [r3, r2]
    96fa:	4b20      	ldr	r3, [pc, #128]	; (977c <send_settings+0x5f8>)
    96fc:	781a      	ldrb	r2, [r3, #0]
    96fe:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9702:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9706:	781b      	ldrb	r3, [r3, #0]
    9708:	4413      	add	r3, r2
    970a:	b2da      	uxtb	r2, r3
    970c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9710:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9714:	701a      	strb	r2, [r3, #0]
    9716:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    971a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    971e:	781a      	ldrb	r2, [r3, #0]
    9720:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9728:	781b      	ldrb	r3, [r3, #0]
    972a:	4413      	add	r3, r2
    972c:	b2da      	uxtb	r2, r3
    972e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9732:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9736:	701a      	strb	r2, [r3, #0]
    9738:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    973c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9740:	781b      	ldrb	r3, [r3, #0]
    9742:	3301      	adds	r3, #1
    9744:	b2da      	uxtb	r2, r3
    9746:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    974a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    974e:	701a      	strb	r2, [r3, #0]
    9750:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9754:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9758:	781b      	ldrb	r3, [r3, #0]
    975a:	2bff      	cmp	r3, #255	; 0xff
    975c:	d110      	bne.n	9780 <send_settings+0x5fc>
    975e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9762:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9766:	2200      	movs	r2, #0
    9768:	701a      	strb	r2, [r3, #0]
    976a:	e009      	b.n	9780 <send_settings+0x5fc>
    976c:	2000aec1 	.word	0x2000aec1
    9770:	2000aec2 	.word	0x2000aec2
    9774:	2000aec3 	.word	0x2000aec3
    9778:	2000aec5 	.word	0x2000aec5
    977c:	2000aec6 	.word	0x2000aec6
    9780:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9784:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9788:	781b      	ldrb	r3, [r3, #0]
    978a:	461a      	mov	r2, r3
    978c:	f64a 63c4 	movw	r3, #44740	; 0xaec4
    9790:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9794:	78d9      	ldrb	r1, [r3, #3]
    9796:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    979a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    979e:	5499      	strb	r1, [r3, r2]
    97a0:	4b79      	ldr	r3, [pc, #484]	; (9988 <send_settings+0x804>)
    97a2:	781a      	ldrb	r2, [r3, #0]
    97a4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    97a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97ac:	781b      	ldrb	r3, [r3, #0]
    97ae:	4413      	add	r3, r2
    97b0:	b2da      	uxtb	r2, r3
    97b2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    97b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97ba:	701a      	strb	r2, [r3, #0]
    97bc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    97c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97c4:	781a      	ldrb	r2, [r3, #0]
    97c6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    97ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97ce:	781b      	ldrb	r3, [r3, #0]
    97d0:	4413      	add	r3, r2
    97d2:	b2da      	uxtb	r2, r3
    97d4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    97d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97dc:	701a      	strb	r2, [r3, #0]
    97de:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    97e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97e6:	781b      	ldrb	r3, [r3, #0]
    97e8:	3301      	adds	r3, #1
    97ea:	b2da      	uxtb	r2, r3
    97ec:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    97f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97f4:	701a      	strb	r2, [r3, #0]
    97f6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    97fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97fe:	781b      	ldrb	r3, [r3, #0]
    9800:	2bff      	cmp	r3, #255	; 0xff
    9802:	d105      	bne.n	9810 <send_settings+0x68c>
    9804:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9808:	f2c2 0300 	movt	r3, #8192	; 0x2000
    980c:	2200      	movs	r2, #0
    980e:	701a      	strb	r2, [r3, #0]
    9810:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9814:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9818:	781b      	ldrb	r3, [r3, #0]
    981a:	461a      	mov	r2, r3
    981c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9820:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9824:	7819      	ldrb	r1, [r3, #0]
    9826:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    982a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    982e:	5499      	strb	r1, [r3, r2]
    9830:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9834:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9838:	781b      	ldrb	r3, [r3, #0]
    983a:	3301      	adds	r3, #1
    983c:	b2da      	uxtb	r2, r3
    983e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9842:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9846:	701a      	strb	r2, [r3, #0]
    9848:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    984c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9850:	781b      	ldrb	r3, [r3, #0]
    9852:	2bff      	cmp	r3, #255	; 0xff
    9854:	d105      	bne.n	9862 <send_settings+0x6de>
    9856:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    985a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    985e:	2200      	movs	r2, #0
    9860:	701a      	strb	r2, [r3, #0]
    9862:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9866:	f2c2 0300 	movt	r3, #8192	; 0x2000
    986a:	781b      	ldrb	r3, [r3, #0]
    986c:	461a      	mov	r2, r3
    986e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9872:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9876:	7819      	ldrb	r1, [r3, #0]
    9878:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    987c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9880:	5499      	strb	r1, [r3, r2]
    9882:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9886:	f2c2 0300 	movt	r3, #8192	; 0x2000
    988a:	781b      	ldrb	r3, [r3, #0]
    988c:	3301      	adds	r3, #1
    988e:	b2da      	uxtb	r2, r3
    9890:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9898:	701a      	strb	r2, [r3, #0]
    989a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    989e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98a2:	781b      	ldrb	r3, [r3, #0]
    98a4:	2bff      	cmp	r3, #255	; 0xff
    98a6:	d105      	bne.n	98b4 <send_settings+0x730>
    98a8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    98ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98b0:	2200      	movs	r2, #0
    98b2:	701a      	strb	r2, [r3, #0]
    98b4:	f242 0339 	movw	r3, #8249	; 0x2039
    98b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98bc:	781b      	ldrb	r3, [r3, #0]
    98be:	b2db      	uxtb	r3, r3
    98c0:	f003 0310 	and.w	r3, r3, #16
    98c4:	2b00      	cmp	r3, #0
    98c6:	d15a      	bne.n	997e <send_settings+0x7fa>
    98c8:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    98cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98d0:	781b      	ldrb	r3, [r3, #0]
    98d2:	b2db      	uxtb	r3, r3
    98d4:	461a      	mov	r2, r3
    98d6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    98da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98de:	5c9a      	ldrb	r2, [r3, r2]
    98e0:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    98e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98e8:	701a      	strb	r2, [r3, #0]
    98ea:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    98ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98f2:	2200      	movs	r2, #0
    98f4:	701a      	strb	r2, [r3, #0]
    98f6:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    98fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98fe:	781b      	ldrb	r3, [r3, #0]
    9900:	b2db      	uxtb	r3, r3
    9902:	3301      	adds	r3, #1
    9904:	b2da      	uxtb	r2, r3
    9906:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    990a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    990e:	701a      	strb	r2, [r3, #0]
    9910:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    9914:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9918:	781b      	ldrb	r3, [r3, #0]
    991a:	b2db      	uxtb	r3, r3
    991c:	2bff      	cmp	r3, #255	; 0xff
    991e:	d105      	bne.n	992c <send_settings+0x7a8>
    9920:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    9924:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9928:	2200      	movs	r2, #0
    992a:	701a      	strb	r2, [r3, #0]
    992c:	f242 0338 	movw	r3, #8248	; 0x2038
    9930:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9934:	f242 0238 	movw	r2, #8248	; 0x2038
    9938:	f2c2 0200 	movt	r2, #8192	; 0x2000
    993c:	7812      	ldrb	r2, [r2, #0]
    993e:	b2d2      	uxtb	r2, r2
    9940:	f042 0201 	orr.w	r2, r2, #1
    9944:	b2d2      	uxtb	r2, r2
    9946:	701a      	strb	r2, [r3, #0]
    9948:	f242 0339 	movw	r3, #8249	; 0x2039
    994c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9950:	f242 0239 	movw	r2, #8249	; 0x2039
    9954:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9958:	7812      	ldrb	r2, [r2, #0]
    995a:	b2d2      	uxtb	r2, r2
    995c:	f042 0210 	orr.w	r2, r2, #16
    9960:	b2d2      	uxtb	r2, r2
    9962:	701a      	strb	r2, [r3, #0]
    9964:	e00b      	b.n	997e <send_settings+0x7fa>
    9966:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    996a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    996e:	781b      	ldrb	r3, [r3, #0]
    9970:	3301      	adds	r3, #1
    9972:	b2da      	uxtb	r2, r3
    9974:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    9978:	f2c2 0300 	movt	r3, #8192	; 0x2000
    997c:	701a      	strb	r2, [r3, #0]
}
    997e:	46bd      	mov	sp, r7
    9980:	f85d 7b04 	ldr.w	r7, [sp], #4
    9984:	4770      	bx	lr
    9986:	bf00      	nop
    9988:	2000aec7 	.word	0x2000aec7

0000998c <send_desired>:
void send_desired(void){  //1000ms
    998c:	b480      	push	{r7}
    998e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    9990:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    9994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9998:	781a      	ldrb	r2, [r3, #0]
    999a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    999e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    99a2:	fba3 1302 	umull	r1, r3, r3, r2
    99a6:	08d9      	lsrs	r1, r3, #3
    99a8:	460b      	mov	r3, r1
    99aa:	009b      	lsls	r3, r3, #2
    99ac:	440b      	add	r3, r1
    99ae:	005b      	lsls	r3, r3, #1
    99b0:	1ad3      	subs	r3, r2, r3
    99b2:	b2db      	uxtb	r3, r3
    99b4:	2b03      	cmp	r3, #3
    99b6:	f040 8712 	bne.w	a7de <send_desired+0xe52>
    99ba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    99be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99c2:	781a      	ldrb	r2, [r3, #0]
    99c4:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    99c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99cc:	781b      	ldrb	r3, [r3, #0]
    99ce:	b2db      	uxtb	r3, r3
    99d0:	429a      	cmp	r2, r3
    99d2:	d313      	bcc.n	99fc <send_desired+0x70>
    99d4:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    99d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99dc:	781b      	ldrb	r3, [r3, #0]
    99de:	b2db      	uxtb	r3, r3
    99e0:	461a      	mov	r2, r3
    99e2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    99e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99ea:	781b      	ldrb	r3, [r3, #0]
    99ec:	1ad3      	subs	r3, r2, r3
    99ee:	33ff      	adds	r3, #255	; 0xff
    99f0:	2b18      	cmp	r3, #24
    99f2:	bfd4      	ite	le
    99f4:	2300      	movle	r3, #0
    99f6:	2301      	movgt	r3, #1
    99f8:	b2db      	uxtb	r3, r3
    99fa:	e011      	b.n	9a20 <send_desired+0x94>
    99fc:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    9a00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a04:	781b      	ldrb	r3, [r3, #0]
    9a06:	b2db      	uxtb	r3, r3
    9a08:	461a      	mov	r2, r3
    9a0a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9a0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a12:	781b      	ldrb	r3, [r3, #0]
    9a14:	1ad3      	subs	r3, r2, r3
    9a16:	2b18      	cmp	r3, #24
    9a18:	bfd4      	ite	le
    9a1a:	2300      	movle	r3, #0
    9a1c:	2301      	movgt	r3, #1
    9a1e:	b2db      	uxtb	r3, r3
    9a20:	2b00      	cmp	r3, #0
    9a22:	f000 86d0 	beq.w	a7c6 <send_desired+0xe3a>
    9a26:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a2e:	781b      	ldrb	r3, [r3, #0]
    9a30:	461a      	mov	r2, r3
    9a32:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a3a:	2105      	movs	r1, #5
    9a3c:	5499      	strb	r1, [r3, r2]
    9a3e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a46:	781b      	ldrb	r3, [r3, #0]
    9a48:	3301      	adds	r3, #1
    9a4a:	b2da      	uxtb	r2, r3
    9a4c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9a50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a54:	701a      	strb	r2, [r3, #0]
    9a56:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9a5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a5e:	781b      	ldrb	r3, [r3, #0]
    9a60:	2bff      	cmp	r3, #255	; 0xff
    9a62:	d105      	bne.n	9a70 <send_desired+0xe4>
    9a64:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a6c:	2200      	movs	r2, #0
    9a6e:	701a      	strb	r2, [r3, #0]
    9a70:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9a74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a78:	781b      	ldrb	r3, [r3, #0]
    9a7a:	461a      	mov	r2, r3
    9a7c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a84:	2112      	movs	r1, #18
    9a86:	5499      	strb	r1, [r3, r2]
    9a88:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a90:	781b      	ldrb	r3, [r3, #0]
    9a92:	3301      	adds	r3, #1
    9a94:	b2da      	uxtb	r2, r3
    9a96:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9a9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a9e:	701a      	strb	r2, [r3, #0]
    9aa0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9aa8:	781b      	ldrb	r3, [r3, #0]
    9aaa:	2bff      	cmp	r3, #255	; 0xff
    9aac:	d105      	bne.n	9aba <send_desired+0x12e>
    9aae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ab6:	2200      	movs	r2, #0
    9ab8:	701a      	strb	r2, [r3, #0]
    9aba:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ac2:	2212      	movs	r2, #18
    9ac4:	701a      	strb	r2, [r3, #0]
    9ac6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ace:	2212      	movs	r2, #18
    9ad0:	701a      	strb	r2, [r3, #0]
    9ad2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ada:	781b      	ldrb	r3, [r3, #0]
    9adc:	461a      	mov	r2, r3
    9ade:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
    9ae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ae6:	7819      	ldrb	r1, [r3, #0]
    9ae8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9af0:	5499      	strb	r1, [r3, r2]
    9af2:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
    9af6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9afa:	781a      	ldrb	r2, [r3, #0]
    9afc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9b00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b04:	781b      	ldrb	r3, [r3, #0]
    9b06:	4413      	add	r3, r2
    9b08:	b2da      	uxtb	r2, r3
    9b0a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9b0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b12:	701a      	strb	r2, [r3, #0]
    9b14:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9b18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b1c:	781a      	ldrb	r2, [r3, #0]
    9b1e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b26:	781b      	ldrb	r3, [r3, #0]
    9b28:	4413      	add	r3, r2
    9b2a:	b2da      	uxtb	r2, r3
    9b2c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b34:	701a      	strb	r2, [r3, #0]
    9b36:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b3e:	781b      	ldrb	r3, [r3, #0]
    9b40:	3301      	adds	r3, #1
    9b42:	b2da      	uxtb	r2, r3
    9b44:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9b48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b4c:	701a      	strb	r2, [r3, #0]
    9b4e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b56:	781b      	ldrb	r3, [r3, #0]
    9b58:	2bff      	cmp	r3, #255	; 0xff
    9b5a:	d105      	bne.n	9b68 <send_desired+0x1dc>
    9b5c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9b60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b64:	2200      	movs	r2, #0
    9b66:	701a      	strb	r2, [r3, #0]
    9b68:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b70:	781b      	ldrb	r3, [r3, #0]
    9b72:	461a      	mov	r2, r3
    9b74:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
    9b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b7c:	7859      	ldrb	r1, [r3, #1]
    9b7e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b86:	5499      	strb	r1, [r3, r2]
    9b88:	4bd1      	ldr	r3, [pc, #836]	; (9ed0 <send_desired+0x544>)
    9b8a:	781a      	ldrb	r2, [r3, #0]
    9b8c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9b90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b94:	781b      	ldrb	r3, [r3, #0]
    9b96:	4413      	add	r3, r2
    9b98:	b2da      	uxtb	r2, r3
    9b9a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ba2:	701a      	strb	r2, [r3, #0]
    9ba4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bac:	781a      	ldrb	r2, [r3, #0]
    9bae:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9bb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bb6:	781b      	ldrb	r3, [r3, #0]
    9bb8:	4413      	add	r3, r2
    9bba:	b2da      	uxtb	r2, r3
    9bbc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9bc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bc4:	701a      	strb	r2, [r3, #0]
    9bc6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bce:	781b      	ldrb	r3, [r3, #0]
    9bd0:	3301      	adds	r3, #1
    9bd2:	b2da      	uxtb	r2, r3
    9bd4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bdc:	701a      	strb	r2, [r3, #0]
    9bde:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9be2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9be6:	781b      	ldrb	r3, [r3, #0]
    9be8:	2bff      	cmp	r3, #255	; 0xff
    9bea:	d105      	bne.n	9bf8 <send_desired+0x26c>
    9bec:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bf4:	2200      	movs	r2, #0
    9bf6:	701a      	strb	r2, [r3, #0]
    9bf8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c00:	781b      	ldrb	r3, [r3, #0]
    9c02:	461a      	mov	r2, r3
    9c04:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
    9c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c0c:	7899      	ldrb	r1, [r3, #2]
    9c0e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c16:	5499      	strb	r1, [r3, r2]
    9c18:	4bae      	ldr	r3, [pc, #696]	; (9ed4 <send_desired+0x548>)
    9c1a:	781a      	ldrb	r2, [r3, #0]
    9c1c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9c20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c24:	781b      	ldrb	r3, [r3, #0]
    9c26:	4413      	add	r3, r2
    9c28:	b2da      	uxtb	r2, r3
    9c2a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9c2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c32:	701a      	strb	r2, [r3, #0]
    9c34:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9c38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c3c:	781a      	ldrb	r2, [r3, #0]
    9c3e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9c42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c46:	781b      	ldrb	r3, [r3, #0]
    9c48:	4413      	add	r3, r2
    9c4a:	b2da      	uxtb	r2, r3
    9c4c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9c50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c54:	701a      	strb	r2, [r3, #0]
    9c56:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c5e:	781b      	ldrb	r3, [r3, #0]
    9c60:	3301      	adds	r3, #1
    9c62:	b2da      	uxtb	r2, r3
    9c64:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c6c:	701a      	strb	r2, [r3, #0]
    9c6e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c76:	781b      	ldrb	r3, [r3, #0]
    9c78:	2bff      	cmp	r3, #255	; 0xff
    9c7a:	d105      	bne.n	9c88 <send_desired+0x2fc>
    9c7c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c84:	2200      	movs	r2, #0
    9c86:	701a      	strb	r2, [r3, #0]
    9c88:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9c8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c90:	781b      	ldrb	r3, [r3, #0]
    9c92:	461a      	mov	r2, r3
    9c94:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
    9c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c9c:	78d9      	ldrb	r1, [r3, #3]
    9c9e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ca6:	5499      	strb	r1, [r3, r2]
    9ca8:	4b8b      	ldr	r3, [pc, #556]	; (9ed8 <send_desired+0x54c>)
    9caa:	781a      	ldrb	r2, [r3, #0]
    9cac:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cb4:	781b      	ldrb	r3, [r3, #0]
    9cb6:	4413      	add	r3, r2
    9cb8:	b2da      	uxtb	r2, r3
    9cba:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cc2:	701a      	strb	r2, [r3, #0]
    9cc4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ccc:	781a      	ldrb	r2, [r3, #0]
    9cce:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cd6:	781b      	ldrb	r3, [r3, #0]
    9cd8:	4413      	add	r3, r2
    9cda:	b2da      	uxtb	r2, r3
    9cdc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ce4:	701a      	strb	r2, [r3, #0]
    9ce6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cee:	781b      	ldrb	r3, [r3, #0]
    9cf0:	3301      	adds	r3, #1
    9cf2:	b2da      	uxtb	r2, r3
    9cf4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cfc:	701a      	strb	r2, [r3, #0]
    9cfe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d06:	781b      	ldrb	r3, [r3, #0]
    9d08:	2bff      	cmp	r3, #255	; 0xff
    9d0a:	d105      	bne.n	9d18 <send_desired+0x38c>
    9d0c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d14:	2200      	movs	r2, #0
    9d16:	701a      	strb	r2, [r3, #0]
    9d18:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d20:	781b      	ldrb	r3, [r3, #0]
    9d22:	461a      	mov	r2, r3
    9d24:	f24b 2300 	movw	r3, #45568	; 0xb200
    9d28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d2c:	7819      	ldrb	r1, [r3, #0]
    9d2e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d36:	5499      	strb	r1, [r3, r2]
    9d38:	f24b 2300 	movw	r3, #45568	; 0xb200
    9d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d40:	781a      	ldrb	r2, [r3, #0]
    9d42:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9d46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d4a:	781b      	ldrb	r3, [r3, #0]
    9d4c:	4413      	add	r3, r2
    9d4e:	b2da      	uxtb	r2, r3
    9d50:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d58:	701a      	strb	r2, [r3, #0]
    9d5a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d62:	781a      	ldrb	r2, [r3, #0]
    9d64:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d6c:	781b      	ldrb	r3, [r3, #0]
    9d6e:	4413      	add	r3, r2
    9d70:	b2da      	uxtb	r2, r3
    9d72:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9d76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d7a:	701a      	strb	r2, [r3, #0]
    9d7c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d84:	781b      	ldrb	r3, [r3, #0]
    9d86:	3301      	adds	r3, #1
    9d88:	b2da      	uxtb	r2, r3
    9d8a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d92:	701a      	strb	r2, [r3, #0]
    9d94:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d9c:	781b      	ldrb	r3, [r3, #0]
    9d9e:	2bff      	cmp	r3, #255	; 0xff
    9da0:	d105      	bne.n	9dae <send_desired+0x422>
    9da2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9da6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9daa:	2200      	movs	r2, #0
    9dac:	701a      	strb	r2, [r3, #0]
    9dae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9db2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9db6:	781b      	ldrb	r3, [r3, #0]
    9db8:	461a      	mov	r2, r3
    9dba:	f24b 2300 	movw	r3, #45568	; 0xb200
    9dbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dc2:	7859      	ldrb	r1, [r3, #1]
    9dc4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dcc:	5499      	strb	r1, [r3, r2]
    9dce:	4b43      	ldr	r3, [pc, #268]	; (9edc <send_desired+0x550>)
    9dd0:	781a      	ldrb	r2, [r3, #0]
    9dd2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9dd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dda:	781b      	ldrb	r3, [r3, #0]
    9ddc:	4413      	add	r3, r2
    9dde:	b2da      	uxtb	r2, r3
    9de0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9de4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9de8:	701a      	strb	r2, [r3, #0]
    9dea:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9df2:	781a      	ldrb	r2, [r3, #0]
    9df4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9df8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dfc:	781b      	ldrb	r3, [r3, #0]
    9dfe:	4413      	add	r3, r2
    9e00:	b2da      	uxtb	r2, r3
    9e02:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e0a:	701a      	strb	r2, [r3, #0]
    9e0c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9e10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e14:	781b      	ldrb	r3, [r3, #0]
    9e16:	3301      	adds	r3, #1
    9e18:	b2da      	uxtb	r2, r3
    9e1a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9e1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e22:	701a      	strb	r2, [r3, #0]
    9e24:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9e28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e2c:	781b      	ldrb	r3, [r3, #0]
    9e2e:	2bff      	cmp	r3, #255	; 0xff
    9e30:	d105      	bne.n	9e3e <send_desired+0x4b2>
    9e32:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9e36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e3a:	2200      	movs	r2, #0
    9e3c:	701a      	strb	r2, [r3, #0]
    9e3e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e46:	781b      	ldrb	r3, [r3, #0]
    9e48:	461a      	mov	r2, r3
    9e4a:	f24b 2300 	movw	r3, #45568	; 0xb200
    9e4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e52:	7899      	ldrb	r1, [r3, #2]
    9e54:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9e58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e5c:	5499      	strb	r1, [r3, r2]
    9e5e:	4b20      	ldr	r3, [pc, #128]	; (9ee0 <send_desired+0x554>)
    9e60:	781a      	ldrb	r2, [r3, #0]
    9e62:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e6a:	781b      	ldrb	r3, [r3, #0]
    9e6c:	4413      	add	r3, r2
    9e6e:	b2da      	uxtb	r2, r3
    9e70:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e78:	701a      	strb	r2, [r3, #0]
    9e7a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9e7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e82:	781a      	ldrb	r2, [r3, #0]
    9e84:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e8c:	781b      	ldrb	r3, [r3, #0]
    9e8e:	4413      	add	r3, r2
    9e90:	b2da      	uxtb	r2, r3
    9e92:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9e96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e9a:	701a      	strb	r2, [r3, #0]
    9e9c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ea4:	781b      	ldrb	r3, [r3, #0]
    9ea6:	3301      	adds	r3, #1
    9ea8:	b2da      	uxtb	r2, r3
    9eaa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9eae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9eb2:	701a      	strb	r2, [r3, #0]
    9eb4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9eb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ebc:	781b      	ldrb	r3, [r3, #0]
    9ebe:	2bff      	cmp	r3, #255	; 0xff
    9ec0:	d110      	bne.n	9ee4 <send_desired+0x558>
    9ec2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9eca:	2200      	movs	r2, #0
    9ecc:	701a      	strb	r2, [r3, #0]
    9ece:	e009      	b.n	9ee4 <send_desired+0x558>
    9ed0:	2000b1fd 	.word	0x2000b1fd
    9ed4:	2000b1fe 	.word	0x2000b1fe
    9ed8:	2000b1ff 	.word	0x2000b1ff
    9edc:	2000b201 	.word	0x2000b201
    9ee0:	2000b202 	.word	0x2000b202
    9ee4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9eec:	781b      	ldrb	r3, [r3, #0]
    9eee:	461a      	mov	r2, r3
    9ef0:	f24b 2300 	movw	r3, #45568	; 0xb200
    9ef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ef8:	78d9      	ldrb	r1, [r3, #3]
    9efa:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9efe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f02:	5499      	strb	r1, [r3, r2]
    9f04:	4bd3      	ldr	r3, [pc, #844]	; (a254 <send_desired+0x8c8>)
    9f06:	781a      	ldrb	r2, [r3, #0]
    9f08:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9f0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f10:	781b      	ldrb	r3, [r3, #0]
    9f12:	4413      	add	r3, r2
    9f14:	b2da      	uxtb	r2, r3
    9f16:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f1e:	701a      	strb	r2, [r3, #0]
    9f20:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9f24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f28:	781a      	ldrb	r2, [r3, #0]
    9f2a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f32:	781b      	ldrb	r3, [r3, #0]
    9f34:	4413      	add	r3, r2
    9f36:	b2da      	uxtb	r2, r3
    9f38:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9f3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f40:	701a      	strb	r2, [r3, #0]
    9f42:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f4a:	781b      	ldrb	r3, [r3, #0]
    9f4c:	3301      	adds	r3, #1
    9f4e:	b2da      	uxtb	r2, r3
    9f50:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f58:	701a      	strb	r2, [r3, #0]
    9f5a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9f5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f62:	781b      	ldrb	r3, [r3, #0]
    9f64:	2bff      	cmp	r3, #255	; 0xff
    9f66:	d105      	bne.n	9f74 <send_desired+0x5e8>
    9f68:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f70:	2200      	movs	r2, #0
    9f72:	701a      	strb	r2, [r3, #0]
    9f74:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f7c:	781b      	ldrb	r3, [r3, #0]
    9f7e:	461a      	mov	r2, r3
    9f80:	f24b 2348 	movw	r3, #45640	; 0xb248
    9f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f88:	7819      	ldrb	r1, [r3, #0]
    9f8a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    9f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f92:	5499      	strb	r1, [r3, r2]
    9f94:	f24b 2348 	movw	r3, #45640	; 0xb248
    9f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f9c:	781a      	ldrb	r2, [r3, #0]
    9f9e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9fa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fa6:	781b      	ldrb	r3, [r3, #0]
    9fa8:	4413      	add	r3, r2
    9faa:	b2da      	uxtb	r2, r3
    9fac:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fb4:	701a      	strb	r2, [r3, #0]
    9fb6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9fba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fbe:	781a      	ldrb	r2, [r3, #0]
    9fc0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    9fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fc8:	781b      	ldrb	r3, [r3, #0]
    9fca:	4413      	add	r3, r2
    9fcc:	b2da      	uxtb	r2, r3
    9fce:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    9fd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fd6:	701a      	strb	r2, [r3, #0]
    9fd8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fe0:	781b      	ldrb	r3, [r3, #0]
    9fe2:	3301      	adds	r3, #1
    9fe4:	b2da      	uxtb	r2, r3
    9fe6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fee:	701a      	strb	r2, [r3, #0]
    9ff0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    9ff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ff8:	781b      	ldrb	r3, [r3, #0]
    9ffa:	2bff      	cmp	r3, #255	; 0xff
    9ffc:	d105      	bne.n	a00a <send_desired+0x67e>
    9ffe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a002:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a006:	2200      	movs	r2, #0
    a008:	701a      	strb	r2, [r3, #0]
    a00a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a00e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a012:	781b      	ldrb	r3, [r3, #0]
    a014:	461a      	mov	r2, r3
    a016:	f24b 2348 	movw	r3, #45640	; 0xb248
    a01a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a01e:	7859      	ldrb	r1, [r3, #1]
    a020:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a024:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a028:	5499      	strb	r1, [r3, r2]
    a02a:	4b8b      	ldr	r3, [pc, #556]	; (a258 <send_desired+0x8cc>)
    a02c:	781a      	ldrb	r2, [r3, #0]
    a02e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a032:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a036:	781b      	ldrb	r3, [r3, #0]
    a038:	4413      	add	r3, r2
    a03a:	b2da      	uxtb	r2, r3
    a03c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a040:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a044:	701a      	strb	r2, [r3, #0]
    a046:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a04a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a04e:	781a      	ldrb	r2, [r3, #0]
    a050:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a054:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a058:	781b      	ldrb	r3, [r3, #0]
    a05a:	4413      	add	r3, r2
    a05c:	b2da      	uxtb	r2, r3
    a05e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a062:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a066:	701a      	strb	r2, [r3, #0]
    a068:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a06c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a070:	781b      	ldrb	r3, [r3, #0]
    a072:	3301      	adds	r3, #1
    a074:	b2da      	uxtb	r2, r3
    a076:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a07a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a07e:	701a      	strb	r2, [r3, #0]
    a080:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a084:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a088:	781b      	ldrb	r3, [r3, #0]
    a08a:	2bff      	cmp	r3, #255	; 0xff
    a08c:	d105      	bne.n	a09a <send_desired+0x70e>
    a08e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a092:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a096:	2200      	movs	r2, #0
    a098:	701a      	strb	r2, [r3, #0]
    a09a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a09e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0a2:	781b      	ldrb	r3, [r3, #0]
    a0a4:	461a      	mov	r2, r3
    a0a6:	f24b 2348 	movw	r3, #45640	; 0xb248
    a0aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0ae:	7899      	ldrb	r1, [r3, #2]
    a0b0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a0b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0b8:	5499      	strb	r1, [r3, r2]
    a0ba:	4b68      	ldr	r3, [pc, #416]	; (a25c <send_desired+0x8d0>)
    a0bc:	781a      	ldrb	r2, [r3, #0]
    a0be:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a0c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0c6:	781b      	ldrb	r3, [r3, #0]
    a0c8:	4413      	add	r3, r2
    a0ca:	b2da      	uxtb	r2, r3
    a0cc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a0d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0d4:	701a      	strb	r2, [r3, #0]
    a0d6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a0da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0de:	781a      	ldrb	r2, [r3, #0]
    a0e0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a0e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0e8:	781b      	ldrb	r3, [r3, #0]
    a0ea:	4413      	add	r3, r2
    a0ec:	b2da      	uxtb	r2, r3
    a0ee:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a0f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0f6:	701a      	strb	r2, [r3, #0]
    a0f8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a0fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a100:	781b      	ldrb	r3, [r3, #0]
    a102:	3301      	adds	r3, #1
    a104:	b2da      	uxtb	r2, r3
    a106:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a10a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a10e:	701a      	strb	r2, [r3, #0]
    a110:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a114:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a118:	781b      	ldrb	r3, [r3, #0]
    a11a:	2bff      	cmp	r3, #255	; 0xff
    a11c:	d105      	bne.n	a12a <send_desired+0x79e>
    a11e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a122:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a126:	2200      	movs	r2, #0
    a128:	701a      	strb	r2, [r3, #0]
    a12a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a12e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a132:	781b      	ldrb	r3, [r3, #0]
    a134:	461a      	mov	r2, r3
    a136:	f24b 2348 	movw	r3, #45640	; 0xb248
    a13a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a13e:	78d9      	ldrb	r1, [r3, #3]
    a140:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a144:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a148:	5499      	strb	r1, [r3, r2]
    a14a:	4b45      	ldr	r3, [pc, #276]	; (a260 <send_desired+0x8d4>)
    a14c:	781a      	ldrb	r2, [r3, #0]
    a14e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a152:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a156:	781b      	ldrb	r3, [r3, #0]
    a158:	4413      	add	r3, r2
    a15a:	b2da      	uxtb	r2, r3
    a15c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a160:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a164:	701a      	strb	r2, [r3, #0]
    a166:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a16a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a16e:	781a      	ldrb	r2, [r3, #0]
    a170:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a174:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a178:	781b      	ldrb	r3, [r3, #0]
    a17a:	4413      	add	r3, r2
    a17c:	b2da      	uxtb	r2, r3
    a17e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a182:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a186:	701a      	strb	r2, [r3, #0]
    a188:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a18c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a190:	781b      	ldrb	r3, [r3, #0]
    a192:	3301      	adds	r3, #1
    a194:	b2da      	uxtb	r2, r3
    a196:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a19a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a19e:	701a      	strb	r2, [r3, #0]
    a1a0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a1a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1a8:	781b      	ldrb	r3, [r3, #0]
    a1aa:	2bff      	cmp	r3, #255	; 0xff
    a1ac:	d105      	bne.n	a1ba <send_desired+0x82e>
    a1ae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a1b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1b6:	2200      	movs	r2, #0
    a1b8:	701a      	strb	r2, [r3, #0]
    a1ba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a1be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1c2:	781b      	ldrb	r3, [r3, #0]
    a1c4:	461a      	mov	r2, r3
    a1c6:	f24b 234c 	movw	r3, #45644	; 0xb24c
    a1ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1ce:	7819      	ldrb	r1, [r3, #0]
    a1d0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a1d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1d8:	5499      	strb	r1, [r3, r2]
    a1da:	f24b 234c 	movw	r3, #45644	; 0xb24c
    a1de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1e2:	781a      	ldrb	r2, [r3, #0]
    a1e4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a1e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1ec:	781b      	ldrb	r3, [r3, #0]
    a1ee:	4413      	add	r3, r2
    a1f0:	b2da      	uxtb	r2, r3
    a1f2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a1f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1fa:	701a      	strb	r2, [r3, #0]
    a1fc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a200:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a204:	781a      	ldrb	r2, [r3, #0]
    a206:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a20a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a20e:	781b      	ldrb	r3, [r3, #0]
    a210:	4413      	add	r3, r2
    a212:	b2da      	uxtb	r2, r3
    a214:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a218:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a21c:	701a      	strb	r2, [r3, #0]
    a21e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a222:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a226:	781b      	ldrb	r3, [r3, #0]
    a228:	3301      	adds	r3, #1
    a22a:	b2da      	uxtb	r2, r3
    a22c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a230:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a234:	701a      	strb	r2, [r3, #0]
    a236:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a23a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a23e:	781b      	ldrb	r3, [r3, #0]
    a240:	2bff      	cmp	r3, #255	; 0xff
    a242:	d10f      	bne.n	a264 <send_desired+0x8d8>
    a244:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a248:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a24c:	2200      	movs	r2, #0
    a24e:	701a      	strb	r2, [r3, #0]
    a250:	e008      	b.n	a264 <send_desired+0x8d8>
    a252:	bf00      	nop
    a254:	2000b203 	.word	0x2000b203
    a258:	2000b249 	.word	0x2000b249
    a25c:	2000b24a 	.word	0x2000b24a
    a260:	2000b24b 	.word	0x2000b24b
    a264:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a268:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a26c:	781b      	ldrb	r3, [r3, #0]
    a26e:	461a      	mov	r2, r3
    a270:	f24b 234c 	movw	r3, #45644	; 0xb24c
    a274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a278:	7859      	ldrb	r1, [r3, #1]
    a27a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a27e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a282:	5499      	strb	r1, [r3, r2]
    a284:	4bd1      	ldr	r3, [pc, #836]	; (a5cc <send_desired+0xc40>)
    a286:	781a      	ldrb	r2, [r3, #0]
    a288:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a28c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a290:	781b      	ldrb	r3, [r3, #0]
    a292:	4413      	add	r3, r2
    a294:	b2da      	uxtb	r2, r3
    a296:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a29a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a29e:	701a      	strb	r2, [r3, #0]
    a2a0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a2a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2a8:	781a      	ldrb	r2, [r3, #0]
    a2aa:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a2ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2b2:	781b      	ldrb	r3, [r3, #0]
    a2b4:	4413      	add	r3, r2
    a2b6:	b2da      	uxtb	r2, r3
    a2b8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a2bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2c0:	701a      	strb	r2, [r3, #0]
    a2c2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a2c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2ca:	781b      	ldrb	r3, [r3, #0]
    a2cc:	3301      	adds	r3, #1
    a2ce:	b2da      	uxtb	r2, r3
    a2d0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a2d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2d8:	701a      	strb	r2, [r3, #0]
    a2da:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a2de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2e2:	781b      	ldrb	r3, [r3, #0]
    a2e4:	2bff      	cmp	r3, #255	; 0xff
    a2e6:	d105      	bne.n	a2f4 <send_desired+0x968>
    a2e8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a2ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2f0:	2200      	movs	r2, #0
    a2f2:	701a      	strb	r2, [r3, #0]
    a2f4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a2f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2fc:	781b      	ldrb	r3, [r3, #0]
    a2fe:	461a      	mov	r2, r3
    a300:	f24b 234c 	movw	r3, #45644	; 0xb24c
    a304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a308:	7899      	ldrb	r1, [r3, #2]
    a30a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a30e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a312:	5499      	strb	r1, [r3, r2]
    a314:	4bae      	ldr	r3, [pc, #696]	; (a5d0 <send_desired+0xc44>)
    a316:	781a      	ldrb	r2, [r3, #0]
    a318:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a31c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a320:	781b      	ldrb	r3, [r3, #0]
    a322:	4413      	add	r3, r2
    a324:	b2da      	uxtb	r2, r3
    a326:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a32a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a32e:	701a      	strb	r2, [r3, #0]
    a330:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a338:	781a      	ldrb	r2, [r3, #0]
    a33a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a33e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a342:	781b      	ldrb	r3, [r3, #0]
    a344:	4413      	add	r3, r2
    a346:	b2da      	uxtb	r2, r3
    a348:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a34c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a350:	701a      	strb	r2, [r3, #0]
    a352:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a356:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a35a:	781b      	ldrb	r3, [r3, #0]
    a35c:	3301      	adds	r3, #1
    a35e:	b2da      	uxtb	r2, r3
    a360:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a368:	701a      	strb	r2, [r3, #0]
    a36a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a36e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a372:	781b      	ldrb	r3, [r3, #0]
    a374:	2bff      	cmp	r3, #255	; 0xff
    a376:	d105      	bne.n	a384 <send_desired+0x9f8>
    a378:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a37c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a380:	2200      	movs	r2, #0
    a382:	701a      	strb	r2, [r3, #0]
    a384:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a388:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a38c:	781b      	ldrb	r3, [r3, #0]
    a38e:	461a      	mov	r2, r3
    a390:	f24b 234c 	movw	r3, #45644	; 0xb24c
    a394:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a398:	78d9      	ldrb	r1, [r3, #3]
    a39a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a39e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3a2:	5499      	strb	r1, [r3, r2]
    a3a4:	4b8b      	ldr	r3, [pc, #556]	; (a5d4 <send_desired+0xc48>)
    a3a6:	781a      	ldrb	r2, [r3, #0]
    a3a8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a3ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3b0:	781b      	ldrb	r3, [r3, #0]
    a3b2:	4413      	add	r3, r2
    a3b4:	b2da      	uxtb	r2, r3
    a3b6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a3ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3be:	701a      	strb	r2, [r3, #0]
    a3c0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a3c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3c8:	781a      	ldrb	r2, [r3, #0]
    a3ca:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a3ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3d2:	781b      	ldrb	r3, [r3, #0]
    a3d4:	4413      	add	r3, r2
    a3d6:	b2da      	uxtb	r2, r3
    a3d8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a3dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3e0:	701a      	strb	r2, [r3, #0]
    a3e2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a3e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3ea:	781b      	ldrb	r3, [r3, #0]
    a3ec:	3301      	adds	r3, #1
    a3ee:	b2da      	uxtb	r2, r3
    a3f0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a3f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3f8:	701a      	strb	r2, [r3, #0]
    a3fa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a3fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a402:	781b      	ldrb	r3, [r3, #0]
    a404:	2bff      	cmp	r3, #255	; 0xff
    a406:	d105      	bne.n	a414 <send_desired+0xa88>
    a408:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a40c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a410:	2200      	movs	r2, #0
    a412:	701a      	strb	r2, [r3, #0]
    a414:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a41c:	781b      	ldrb	r3, [r3, #0]
    a41e:	461a      	mov	r2, r3
    a420:	f240 4324 	movw	r3, #1060	; 0x424
    a424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a428:	7819      	ldrb	r1, [r3, #0]
    a42a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a42e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a432:	5499      	strb	r1, [r3, r2]
    a434:	f240 4324 	movw	r3, #1060	; 0x424
    a438:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a43c:	781a      	ldrb	r2, [r3, #0]
    a43e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a442:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a446:	781b      	ldrb	r3, [r3, #0]
    a448:	4413      	add	r3, r2
    a44a:	b2da      	uxtb	r2, r3
    a44c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a450:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a454:	701a      	strb	r2, [r3, #0]
    a456:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a45a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a45e:	781a      	ldrb	r2, [r3, #0]
    a460:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a464:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a468:	781b      	ldrb	r3, [r3, #0]
    a46a:	4413      	add	r3, r2
    a46c:	b2da      	uxtb	r2, r3
    a46e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a472:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a476:	701a      	strb	r2, [r3, #0]
    a478:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a480:	781b      	ldrb	r3, [r3, #0]
    a482:	3301      	adds	r3, #1
    a484:	b2da      	uxtb	r2, r3
    a486:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a48a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a48e:	701a      	strb	r2, [r3, #0]
    a490:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a494:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a498:	781b      	ldrb	r3, [r3, #0]
    a49a:	2bff      	cmp	r3, #255	; 0xff
    a49c:	d105      	bne.n	a4aa <send_desired+0xb1e>
    a49e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a4a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4a6:	2200      	movs	r2, #0
    a4a8:	701a      	strb	r2, [r3, #0]
    a4aa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a4ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4b2:	781b      	ldrb	r3, [r3, #0]
    a4b4:	461a      	mov	r2, r3
    a4b6:	f240 4324 	movw	r3, #1060	; 0x424
    a4ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4be:	7859      	ldrb	r1, [r3, #1]
    a4c0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a4c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4c8:	5499      	strb	r1, [r3, r2]
    a4ca:	4b43      	ldr	r3, [pc, #268]	; (a5d8 <send_desired+0xc4c>)
    a4cc:	781a      	ldrb	r2, [r3, #0]
    a4ce:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a4d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4d6:	781b      	ldrb	r3, [r3, #0]
    a4d8:	4413      	add	r3, r2
    a4da:	b2da      	uxtb	r2, r3
    a4dc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a4e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4e4:	701a      	strb	r2, [r3, #0]
    a4e6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a4ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4ee:	781a      	ldrb	r2, [r3, #0]
    a4f0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4f8:	781b      	ldrb	r3, [r3, #0]
    a4fa:	4413      	add	r3, r2
    a4fc:	b2da      	uxtb	r2, r3
    a4fe:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a502:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a506:	701a      	strb	r2, [r3, #0]
    a508:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a50c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a510:	781b      	ldrb	r3, [r3, #0]
    a512:	3301      	adds	r3, #1
    a514:	b2da      	uxtb	r2, r3
    a516:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a51a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a51e:	701a      	strb	r2, [r3, #0]
    a520:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a524:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a528:	781b      	ldrb	r3, [r3, #0]
    a52a:	2bff      	cmp	r3, #255	; 0xff
    a52c:	d105      	bne.n	a53a <send_desired+0xbae>
    a52e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a532:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a536:	2200      	movs	r2, #0
    a538:	701a      	strb	r2, [r3, #0]
    a53a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a53e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a542:	781b      	ldrb	r3, [r3, #0]
    a544:	461a      	mov	r2, r3
    a546:	f240 4324 	movw	r3, #1060	; 0x424
    a54a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a54e:	7899      	ldrb	r1, [r3, #2]
    a550:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a554:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a558:	5499      	strb	r1, [r3, r2]
    a55a:	4b20      	ldr	r3, [pc, #128]	; (a5dc <send_desired+0xc50>)
    a55c:	781a      	ldrb	r2, [r3, #0]
    a55e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a566:	781b      	ldrb	r3, [r3, #0]
    a568:	4413      	add	r3, r2
    a56a:	b2da      	uxtb	r2, r3
    a56c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a570:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a574:	701a      	strb	r2, [r3, #0]
    a576:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a57a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a57e:	781a      	ldrb	r2, [r3, #0]
    a580:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a588:	781b      	ldrb	r3, [r3, #0]
    a58a:	4413      	add	r3, r2
    a58c:	b2da      	uxtb	r2, r3
    a58e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a592:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a596:	701a      	strb	r2, [r3, #0]
    a598:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a59c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5a0:	781b      	ldrb	r3, [r3, #0]
    a5a2:	3301      	adds	r3, #1
    a5a4:	b2da      	uxtb	r2, r3
    a5a6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a5aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5ae:	701a      	strb	r2, [r3, #0]
    a5b0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a5b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5b8:	781b      	ldrb	r3, [r3, #0]
    a5ba:	2bff      	cmp	r3, #255	; 0xff
    a5bc:	d110      	bne.n	a5e0 <send_desired+0xc54>
    a5be:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a5c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5c6:	2200      	movs	r2, #0
    a5c8:	701a      	strb	r2, [r3, #0]
    a5ca:	e009      	b.n	a5e0 <send_desired+0xc54>
    a5cc:	2000b24d 	.word	0x2000b24d
    a5d0:	2000b24e 	.word	0x2000b24e
    a5d4:	2000b24f 	.word	0x2000b24f
    a5d8:	20000425 	.word	0x20000425
    a5dc:	20000426 	.word	0x20000426
    a5e0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a5e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5e8:	781b      	ldrb	r3, [r3, #0]
    a5ea:	461a      	mov	r2, r3
    a5ec:	f240 4324 	movw	r3, #1060	; 0x424
    a5f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5f4:	78d9      	ldrb	r1, [r3, #3]
    a5f6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a5fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5fe:	5499      	strb	r1, [r3, r2]
    a600:	4b79      	ldr	r3, [pc, #484]	; (a7e8 <send_desired+0xe5c>)
    a602:	781a      	ldrb	r2, [r3, #0]
    a604:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a608:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a60c:	781b      	ldrb	r3, [r3, #0]
    a60e:	4413      	add	r3, r2
    a610:	b2da      	uxtb	r2, r3
    a612:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a616:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a61a:	701a      	strb	r2, [r3, #0]
    a61c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a620:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a624:	781a      	ldrb	r2, [r3, #0]
    a626:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a62a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a62e:	781b      	ldrb	r3, [r3, #0]
    a630:	4413      	add	r3, r2
    a632:	b2da      	uxtb	r2, r3
    a634:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a63c:	701a      	strb	r2, [r3, #0]
    a63e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a642:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a646:	781b      	ldrb	r3, [r3, #0]
    a648:	3301      	adds	r3, #1
    a64a:	b2da      	uxtb	r2, r3
    a64c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a650:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a654:	701a      	strb	r2, [r3, #0]
    a656:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a65a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a65e:	781b      	ldrb	r3, [r3, #0]
    a660:	2bff      	cmp	r3, #255	; 0xff
    a662:	d105      	bne.n	a670 <send_desired+0xce4>
    a664:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a668:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a66c:	2200      	movs	r2, #0
    a66e:	701a      	strb	r2, [r3, #0]
    a670:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a674:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a678:	781b      	ldrb	r3, [r3, #0]
    a67a:	461a      	mov	r2, r3
    a67c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a680:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a684:	7819      	ldrb	r1, [r3, #0]
    a686:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a68a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a68e:	5499      	strb	r1, [r3, r2]
    a690:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a694:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a698:	781b      	ldrb	r3, [r3, #0]
    a69a:	3301      	adds	r3, #1
    a69c:	b2da      	uxtb	r2, r3
    a69e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a6a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6a6:	701a      	strb	r2, [r3, #0]
    a6a8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a6ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6b0:	781b      	ldrb	r3, [r3, #0]
    a6b2:	2bff      	cmp	r3, #255	; 0xff
    a6b4:	d105      	bne.n	a6c2 <send_desired+0xd36>
    a6b6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a6ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6be:	2200      	movs	r2, #0
    a6c0:	701a      	strb	r2, [r3, #0]
    a6c2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a6c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6ca:	781b      	ldrb	r3, [r3, #0]
    a6cc:	461a      	mov	r2, r3
    a6ce:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a6d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6d6:	7819      	ldrb	r1, [r3, #0]
    a6d8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a6dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6e0:	5499      	strb	r1, [r3, r2]
    a6e2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a6e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6ea:	781b      	ldrb	r3, [r3, #0]
    a6ec:	3301      	adds	r3, #1
    a6ee:	b2da      	uxtb	r2, r3
    a6f0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a6f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6f8:	701a      	strb	r2, [r3, #0]
    a6fa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a6fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a702:	781b      	ldrb	r3, [r3, #0]
    a704:	2bff      	cmp	r3, #255	; 0xff
    a706:	d105      	bne.n	a714 <send_desired+0xd88>
    a708:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a70c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a710:	2200      	movs	r2, #0
    a712:	701a      	strb	r2, [r3, #0]
    a714:	f242 0339 	movw	r3, #8249	; 0x2039
    a718:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a71c:	781b      	ldrb	r3, [r3, #0]
    a71e:	b2db      	uxtb	r3, r3
    a720:	f003 0310 	and.w	r3, r3, #16
    a724:	2b00      	cmp	r3, #0
    a726:	d15a      	bne.n	a7de <send_desired+0xe52>
    a728:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    a72c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a730:	781b      	ldrb	r3, [r3, #0]
    a732:	b2db      	uxtb	r3, r3
    a734:	461a      	mov	r2, r3
    a736:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a73a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a73e:	5c9a      	ldrb	r2, [r3, r2]
    a740:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    a744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a748:	701a      	strb	r2, [r3, #0]
    a74a:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    a74e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a752:	2200      	movs	r2, #0
    a754:	701a      	strb	r2, [r3, #0]
    a756:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    a75a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a75e:	781b      	ldrb	r3, [r3, #0]
    a760:	b2db      	uxtb	r3, r3
    a762:	3301      	adds	r3, #1
    a764:	b2da      	uxtb	r2, r3
    a766:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    a76a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a76e:	701a      	strb	r2, [r3, #0]
    a770:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    a774:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a778:	781b      	ldrb	r3, [r3, #0]
    a77a:	b2db      	uxtb	r3, r3
    a77c:	2bff      	cmp	r3, #255	; 0xff
    a77e:	d105      	bne.n	a78c <send_desired+0xe00>
    a780:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    a784:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a788:	2200      	movs	r2, #0
    a78a:	701a      	strb	r2, [r3, #0]
    a78c:	f242 0338 	movw	r3, #8248	; 0x2038
    a790:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a794:	f242 0238 	movw	r2, #8248	; 0x2038
    a798:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a79c:	7812      	ldrb	r2, [r2, #0]
    a79e:	b2d2      	uxtb	r2, r2
    a7a0:	f042 0201 	orr.w	r2, r2, #1
    a7a4:	b2d2      	uxtb	r2, r2
    a7a6:	701a      	strb	r2, [r3, #0]
    a7a8:	f242 0339 	movw	r3, #8249	; 0x2039
    a7ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7b0:	f242 0239 	movw	r2, #8249	; 0x2039
    a7b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a7b8:	7812      	ldrb	r2, [r2, #0]
    a7ba:	b2d2      	uxtb	r2, r2
    a7bc:	f042 0210 	orr.w	r2, r2, #16
    a7c0:	b2d2      	uxtb	r2, r2
    a7c2:	701a      	strb	r2, [r3, #0]
    a7c4:	e00b      	b.n	a7de <send_desired+0xe52>
    a7c6:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    a7ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7ce:	781b      	ldrb	r3, [r3, #0]
    a7d0:	3301      	adds	r3, #1
    a7d2:	b2da      	uxtb	r2, r3
    a7d4:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    a7d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7dc:	701a      	strb	r2, [r3, #0]
}
    a7de:	46bd      	mov	sp, r7
    a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    a7e4:	4770      	bx	lr
    a7e6:	bf00      	nop
    a7e8:	20000427 	.word	0x20000427

0000a7ec <send_bat>:
void send_bat(void){  //2000ms
    a7ec:	b480      	push	{r7}
    a7ee:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    a7f0:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    a7f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7f8:	781a      	ldrb	r2, [r3, #0]
    a7fa:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    a7fe:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    a802:	fba3 1302 	umull	r1, r3, r3, r2
    a806:	0919      	lsrs	r1, r3, #4
    a808:	460b      	mov	r3, r1
    a80a:	009b      	lsls	r3, r3, #2
    a80c:	440b      	add	r3, r1
    a80e:	009b      	lsls	r3, r3, #2
    a810:	1ad3      	subs	r3, r2, r3
    a812:	b2db      	uxtb	r3, r3
    a814:	2b08      	cmp	r3, #8
    a816:	f040 839a 	bne.w	af4e <send_bat+0x762>
    a81a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a81e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a822:	781a      	ldrb	r2, [r3, #0]
    a824:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    a828:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a82c:	781b      	ldrb	r3, [r3, #0]
    a82e:	b2db      	uxtb	r3, r3
    a830:	429a      	cmp	r2, r3
    a832:	d313      	bcc.n	a85c <send_bat+0x70>
    a834:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    a838:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a83c:	781b      	ldrb	r3, [r3, #0]
    a83e:	b2db      	uxtb	r3, r3
    a840:	461a      	mov	r2, r3
    a842:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a846:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a84a:	781b      	ldrb	r3, [r3, #0]
    a84c:	1ad3      	subs	r3, r2, r3
    a84e:	33ff      	adds	r3, #255	; 0xff
    a850:	2b0c      	cmp	r3, #12
    a852:	bfd4      	ite	le
    a854:	2300      	movle	r3, #0
    a856:	2301      	movgt	r3, #1
    a858:	b2db      	uxtb	r3, r3
    a85a:	e011      	b.n	a880 <send_bat+0x94>
    a85c:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    a860:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a864:	781b      	ldrb	r3, [r3, #0]
    a866:	b2db      	uxtb	r3, r3
    a868:	461a      	mov	r2, r3
    a86a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a86e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a872:	781b      	ldrb	r3, [r3, #0]
    a874:	1ad3      	subs	r3, r2, r3
    a876:	2b0c      	cmp	r3, #12
    a878:	bfd4      	ite	le
    a87a:	2300      	movle	r3, #0
    a87c:	2301      	movgt	r3, #1
    a87e:	b2db      	uxtb	r3, r3
    a880:	2b00      	cmp	r3, #0
    a882:	f000 8358 	beq.w	af36 <send_bat+0x74a>
    a886:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a88a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a88e:	781b      	ldrb	r3, [r3, #0]
    a890:	461a      	mov	r2, r3
    a892:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a896:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a89a:	2105      	movs	r1, #5
    a89c:	5499      	strb	r1, [r3, r2]
    a89e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a8a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8a6:	781b      	ldrb	r3, [r3, #0]
    a8a8:	3301      	adds	r3, #1
    a8aa:	b2da      	uxtb	r2, r3
    a8ac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a8b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8b4:	701a      	strb	r2, [r3, #0]
    a8b6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a8ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8be:	781b      	ldrb	r3, [r3, #0]
    a8c0:	2bff      	cmp	r3, #255	; 0xff
    a8c2:	d105      	bne.n	a8d0 <send_bat+0xe4>
    a8c4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a8c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8cc:	2200      	movs	r2, #0
    a8ce:	701a      	strb	r2, [r3, #0]
    a8d0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a8d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8d8:	781b      	ldrb	r3, [r3, #0]
    a8da:	461a      	mov	r2, r3
    a8dc:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a8e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8e4:	210c      	movs	r1, #12
    a8e6:	5499      	strb	r1, [r3, r2]
    a8e8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a8ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8f0:	781b      	ldrb	r3, [r3, #0]
    a8f2:	3301      	adds	r3, #1
    a8f4:	b2da      	uxtb	r2, r3
    a8f6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a8fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8fe:	701a      	strb	r2, [r3, #0]
    a900:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a904:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a908:	781b      	ldrb	r3, [r3, #0]
    a90a:	2bff      	cmp	r3, #255	; 0xff
    a90c:	d105      	bne.n	a91a <send_bat+0x12e>
    a90e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a916:	2200      	movs	r2, #0
    a918:	701a      	strb	r2, [r3, #0]
    a91a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a91e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a922:	220c      	movs	r2, #12
    a924:	701a      	strb	r2, [r3, #0]
    a926:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a92a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a92e:	220c      	movs	r2, #12
    a930:	701a      	strb	r2, [r3, #0]
    a932:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a936:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a93a:	781b      	ldrb	r3, [r3, #0]
    a93c:	461a      	mov	r2, r3
    a93e:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    a942:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a946:	7819      	ldrb	r1, [r3, #0]
    a948:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a94c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a950:	5499      	strb	r1, [r3, r2]
    a952:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a956:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a95a:	781a      	ldrb	r2, [r3, #0]
    a95c:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    a960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a964:	781b      	ldrb	r3, [r3, #0]
    a966:	4413      	add	r3, r2
    a968:	b2da      	uxtb	r2, r3
    a96a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a96e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a972:	701a      	strb	r2, [r3, #0]
    a974:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a978:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a97c:	781a      	ldrb	r2, [r3, #0]
    a97e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a982:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a986:	781b      	ldrb	r3, [r3, #0]
    a988:	4413      	add	r3, r2
    a98a:	b2da      	uxtb	r2, r3
    a98c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    a990:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a994:	701a      	strb	r2, [r3, #0]
    a996:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a99a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a99e:	781b      	ldrb	r3, [r3, #0]
    a9a0:	3301      	adds	r3, #1
    a9a2:	b2da      	uxtb	r2, r3
    a9a4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a9a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9ac:	701a      	strb	r2, [r3, #0]
    a9ae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a9b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9b6:	781b      	ldrb	r3, [r3, #0]
    a9b8:	2bff      	cmp	r3, #255	; 0xff
    a9ba:	d105      	bne.n	a9c8 <send_bat+0x1dc>
    a9bc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a9c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9c4:	2200      	movs	r2, #0
    a9c6:	701a      	strb	r2, [r3, #0]
    a9c8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    a9cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9d0:	781b      	ldrb	r3, [r3, #0]
    a9d2:	461a      	mov	r2, r3
    a9d4:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    a9d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9dc:	7819      	ldrb	r1, [r3, #0]
    a9de:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    a9e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9e6:	5499      	strb	r1, [r3, r2]
    a9e8:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    a9ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9f0:	781a      	ldrb	r2, [r3, #0]
    a9f2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    a9f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9fa:	781b      	ldrb	r3, [r3, #0]
    a9fc:	4413      	add	r3, r2
    a9fe:	b2da      	uxtb	r2, r3
    aa00:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    aa04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa08:	701a      	strb	r2, [r3, #0]
    aa0a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    aa0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa12:	781a      	ldrb	r2, [r3, #0]
    aa14:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    aa18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa1c:	781b      	ldrb	r3, [r3, #0]
    aa1e:	4413      	add	r3, r2
    aa20:	b2da      	uxtb	r2, r3
    aa22:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    aa26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa2a:	701a      	strb	r2, [r3, #0]
    aa2c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aa30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa34:	781b      	ldrb	r3, [r3, #0]
    aa36:	3301      	adds	r3, #1
    aa38:	b2da      	uxtb	r2, r3
    aa3a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aa3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa42:	701a      	strb	r2, [r3, #0]
    aa44:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aa48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa4c:	781b      	ldrb	r3, [r3, #0]
    aa4e:	2bff      	cmp	r3, #255	; 0xff
    aa50:	d105      	bne.n	aa5e <send_bat+0x272>
    aa52:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aa56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa5a:	2200      	movs	r2, #0
    aa5c:	701a      	strb	r2, [r3, #0]
    aa5e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aa62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa66:	781b      	ldrb	r3, [r3, #0]
    aa68:	461a      	mov	r2, r3
    aa6a:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    aa6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa72:	7859      	ldrb	r1, [r3, #1]
    aa74:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    aa78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa7c:	5499      	strb	r1, [r3, r2]
    aa7e:	4bd5      	ldr	r3, [pc, #852]	; (add4 <send_bat+0x5e8>)
    aa80:	781a      	ldrb	r2, [r3, #0]
    aa82:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    aa86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa8a:	781b      	ldrb	r3, [r3, #0]
    aa8c:	4413      	add	r3, r2
    aa8e:	b2da      	uxtb	r2, r3
    aa90:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    aa94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa98:	701a      	strb	r2, [r3, #0]
    aa9a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    aa9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaa2:	781a      	ldrb	r2, [r3, #0]
    aaa4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    aaa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaac:	781b      	ldrb	r3, [r3, #0]
    aaae:	4413      	add	r3, r2
    aab0:	b2da      	uxtb	r2, r3
    aab2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    aab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaba:	701a      	strb	r2, [r3, #0]
    aabc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aac4:	781b      	ldrb	r3, [r3, #0]
    aac6:	3301      	adds	r3, #1
    aac8:	b2da      	uxtb	r2, r3
    aaca:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aace:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aad2:	701a      	strb	r2, [r3, #0]
    aad4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aadc:	781b      	ldrb	r3, [r3, #0]
    aade:	2bff      	cmp	r3, #255	; 0xff
    aae0:	d105      	bne.n	aaee <send_bat+0x302>
    aae2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aae6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaea:	2200      	movs	r2, #0
    aaec:	701a      	strb	r2, [r3, #0]
    aaee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aaf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaf6:	781b      	ldrb	r3, [r3, #0]
    aaf8:	461a      	mov	r2, r3
    aafa:	f64a 63bd 	movw	r3, #44733	; 0xaebd
    aafe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab02:	7819      	ldrb	r1, [r3, #0]
    ab04:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ab08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab0c:	5499      	strb	r1, [r3, r2]
    ab0e:	f64a 63bd 	movw	r3, #44733	; 0xaebd
    ab12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab16:	781a      	ldrb	r2, [r3, #0]
    ab18:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ab1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab20:	781b      	ldrb	r3, [r3, #0]
    ab22:	4413      	add	r3, r2
    ab24:	b2da      	uxtb	r2, r3
    ab26:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ab2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab2e:	701a      	strb	r2, [r3, #0]
    ab30:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ab34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab38:	781a      	ldrb	r2, [r3, #0]
    ab3a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ab3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab42:	781b      	ldrb	r3, [r3, #0]
    ab44:	4413      	add	r3, r2
    ab46:	b2da      	uxtb	r2, r3
    ab48:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ab4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab50:	701a      	strb	r2, [r3, #0]
    ab52:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ab56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab5a:	781b      	ldrb	r3, [r3, #0]
    ab5c:	3301      	adds	r3, #1
    ab5e:	b2da      	uxtb	r2, r3
    ab60:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ab64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab68:	701a      	strb	r2, [r3, #0]
    ab6a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ab6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab72:	781b      	ldrb	r3, [r3, #0]
    ab74:	2bff      	cmp	r3, #255	; 0xff
    ab76:	d105      	bne.n	ab84 <send_bat+0x398>
    ab78:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ab7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab80:	2200      	movs	r2, #0
    ab82:	701a      	strb	r2, [r3, #0]
    ab84:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ab88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab8c:	781b      	ldrb	r3, [r3, #0]
    ab8e:	461a      	mov	r2, r3
    ab90:	f24b 233e 	movw	r3, #45630	; 0xb23e
    ab94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab98:	7819      	ldrb	r1, [r3, #0]
    ab9a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ab9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aba2:	5499      	strb	r1, [r3, r2]
    aba4:	f24b 233e 	movw	r3, #45630	; 0xb23e
    aba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abac:	781a      	ldrb	r2, [r3, #0]
    abae:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    abb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abb6:	781b      	ldrb	r3, [r3, #0]
    abb8:	4413      	add	r3, r2
    abba:	b2da      	uxtb	r2, r3
    abbc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    abc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abc4:	701a      	strb	r2, [r3, #0]
    abc6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    abca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abce:	781a      	ldrb	r2, [r3, #0]
    abd0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    abd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abd8:	781b      	ldrb	r3, [r3, #0]
    abda:	4413      	add	r3, r2
    abdc:	b2da      	uxtb	r2, r3
    abde:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    abe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abe6:	701a      	strb	r2, [r3, #0]
    abe8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    abec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abf0:	781b      	ldrb	r3, [r3, #0]
    abf2:	3301      	adds	r3, #1
    abf4:	b2da      	uxtb	r2, r3
    abf6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    abfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abfe:	701a      	strb	r2, [r3, #0]
    ac00:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ac04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac08:	781b      	ldrb	r3, [r3, #0]
    ac0a:	2bff      	cmp	r3, #255	; 0xff
    ac0c:	d105      	bne.n	ac1a <send_bat+0x42e>
    ac0e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ac12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac16:	2200      	movs	r2, #0
    ac18:	701a      	strb	r2, [r3, #0]
    ac1a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ac1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac22:	781b      	ldrb	r3, [r3, #0]
    ac24:	461a      	mov	r2, r3
    ac26:	f24b 233e 	movw	r3, #45630	; 0xb23e
    ac2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac2e:	7859      	ldrb	r1, [r3, #1]
    ac30:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ac34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac38:	5499      	strb	r1, [r3, r2]
    ac3a:	4b67      	ldr	r3, [pc, #412]	; (add8 <send_bat+0x5ec>)
    ac3c:	781a      	ldrb	r2, [r3, #0]
    ac3e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ac42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac46:	781b      	ldrb	r3, [r3, #0]
    ac48:	4413      	add	r3, r2
    ac4a:	b2da      	uxtb	r2, r3
    ac4c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ac50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac54:	701a      	strb	r2, [r3, #0]
    ac56:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ac5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac5e:	781a      	ldrb	r2, [r3, #0]
    ac60:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ac64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac68:	781b      	ldrb	r3, [r3, #0]
    ac6a:	4413      	add	r3, r2
    ac6c:	b2da      	uxtb	r2, r3
    ac6e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ac72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac76:	701a      	strb	r2, [r3, #0]
    ac78:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ac7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac80:	781b      	ldrb	r3, [r3, #0]
    ac82:	3301      	adds	r3, #1
    ac84:	b2da      	uxtb	r2, r3
    ac86:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ac8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac8e:	701a      	strb	r2, [r3, #0]
    ac90:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ac94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac98:	781b      	ldrb	r3, [r3, #0]
    ac9a:	2bff      	cmp	r3, #255	; 0xff
    ac9c:	d105      	bne.n	acaa <send_bat+0x4be>
    ac9e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aca6:	2200      	movs	r2, #0
    aca8:	701a      	strb	r2, [r3, #0]
    acaa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    acae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acb2:	781b      	ldrb	r3, [r3, #0]
    acb4:	461a      	mov	r2, r3
    acb6:	f24b 233c 	movw	r3, #45628	; 0xb23c
    acba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acbe:	7819      	ldrb	r1, [r3, #0]
    acc0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    acc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acc8:	5499      	strb	r1, [r3, r2]
    acca:	f24b 233c 	movw	r3, #45628	; 0xb23c
    acce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acd2:	781a      	ldrb	r2, [r3, #0]
    acd4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    acd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acdc:	781b      	ldrb	r3, [r3, #0]
    acde:	4413      	add	r3, r2
    ace0:	b2da      	uxtb	r2, r3
    ace2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ace6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acea:	701a      	strb	r2, [r3, #0]
    acec:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    acf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acf4:	781a      	ldrb	r2, [r3, #0]
    acf6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    acfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acfe:	781b      	ldrb	r3, [r3, #0]
    ad00:	4413      	add	r3, r2
    ad02:	b2da      	uxtb	r2, r3
    ad04:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ad08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad0c:	701a      	strb	r2, [r3, #0]
    ad0e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ad12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad16:	781b      	ldrb	r3, [r3, #0]
    ad18:	3301      	adds	r3, #1
    ad1a:	b2da      	uxtb	r2, r3
    ad1c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ad20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad24:	701a      	strb	r2, [r3, #0]
    ad26:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ad2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad2e:	781b      	ldrb	r3, [r3, #0]
    ad30:	2bff      	cmp	r3, #255	; 0xff
    ad32:	d105      	bne.n	ad40 <send_bat+0x554>
    ad34:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ad38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad3c:	2200      	movs	r2, #0
    ad3e:	701a      	strb	r2, [r3, #0]
    ad40:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ad44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad48:	781b      	ldrb	r3, [r3, #0]
    ad4a:	461a      	mov	r2, r3
    ad4c:	f24b 233c 	movw	r3, #45628	; 0xb23c
    ad50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad54:	7859      	ldrb	r1, [r3, #1]
    ad56:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ad5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad5e:	5499      	strb	r1, [r3, r2]
    ad60:	4b1e      	ldr	r3, [pc, #120]	; (addc <send_bat+0x5f0>)
    ad62:	781a      	ldrb	r2, [r3, #0]
    ad64:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ad68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad6c:	781b      	ldrb	r3, [r3, #0]
    ad6e:	4413      	add	r3, r2
    ad70:	b2da      	uxtb	r2, r3
    ad72:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ad76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad7a:	701a      	strb	r2, [r3, #0]
    ad7c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ad80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad84:	781a      	ldrb	r2, [r3, #0]
    ad86:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ad8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad8e:	781b      	ldrb	r3, [r3, #0]
    ad90:	4413      	add	r3, r2
    ad92:	b2da      	uxtb	r2, r3
    ad94:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ad98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad9c:	701a      	strb	r2, [r3, #0]
    ad9e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ada2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ada6:	781b      	ldrb	r3, [r3, #0]
    ada8:	3301      	adds	r3, #1
    adaa:	b2da      	uxtb	r2, r3
    adac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    adb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adb4:	701a      	strb	r2, [r3, #0]
    adb6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    adba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adbe:	781b      	ldrb	r3, [r3, #0]
    adc0:	2bff      	cmp	r3, #255	; 0xff
    adc2:	d10d      	bne.n	ade0 <send_bat+0x5f4>
    adc4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    adc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adcc:	2200      	movs	r2, #0
    adce:	701a      	strb	r2, [r3, #0]
    add0:	e006      	b.n	ade0 <send_bat+0x5f4>
    add2:	bf00      	nop
    add4:	2000b4b5 	.word	0x2000b4b5
    add8:	2000b23f 	.word	0x2000b23f
    addc:	2000b23d 	.word	0x2000b23d
    ade0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ade4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ade8:	781b      	ldrb	r3, [r3, #0]
    adea:	461a      	mov	r2, r3
    adec:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    adf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adf4:	7819      	ldrb	r1, [r3, #0]
    adf6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    adfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adfe:	5499      	strb	r1, [r3, r2]
    ae00:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ae04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae08:	781b      	ldrb	r3, [r3, #0]
    ae0a:	3301      	adds	r3, #1
    ae0c:	b2da      	uxtb	r2, r3
    ae0e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ae12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae16:	701a      	strb	r2, [r3, #0]
    ae18:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ae1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae20:	781b      	ldrb	r3, [r3, #0]
    ae22:	2bff      	cmp	r3, #255	; 0xff
    ae24:	d105      	bne.n	ae32 <send_bat+0x646>
    ae26:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ae2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae2e:	2200      	movs	r2, #0
    ae30:	701a      	strb	r2, [r3, #0]
    ae32:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ae36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae3a:	781b      	ldrb	r3, [r3, #0]
    ae3c:	461a      	mov	r2, r3
    ae3e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ae42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae46:	7819      	ldrb	r1, [r3, #0]
    ae48:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ae4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae50:	5499      	strb	r1, [r3, r2]
    ae52:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ae56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae5a:	781b      	ldrb	r3, [r3, #0]
    ae5c:	3301      	adds	r3, #1
    ae5e:	b2da      	uxtb	r2, r3
    ae60:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ae64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae68:	701a      	strb	r2, [r3, #0]
    ae6a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ae6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae72:	781b      	ldrb	r3, [r3, #0]
    ae74:	2bff      	cmp	r3, #255	; 0xff
    ae76:	d105      	bne.n	ae84 <send_bat+0x698>
    ae78:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ae7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae80:	2200      	movs	r2, #0
    ae82:	701a      	strb	r2, [r3, #0]
    ae84:	f242 0339 	movw	r3, #8249	; 0x2039
    ae88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae8c:	781b      	ldrb	r3, [r3, #0]
    ae8e:	b2db      	uxtb	r3, r3
    ae90:	f003 0310 	and.w	r3, r3, #16
    ae94:	2b00      	cmp	r3, #0
    ae96:	d15a      	bne.n	af4e <send_bat+0x762>
    ae98:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    ae9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aea0:	781b      	ldrb	r3, [r3, #0]
    aea2:	b2db      	uxtb	r3, r3
    aea4:	461a      	mov	r2, r3
    aea6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    aeaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aeae:	5c9a      	ldrb	r2, [r3, r2]
    aeb0:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    aeb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aeb8:	701a      	strb	r2, [r3, #0]
    aeba:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    aebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aec2:	2200      	movs	r2, #0
    aec4:	701a      	strb	r2, [r3, #0]
    aec6:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    aeca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aece:	781b      	ldrb	r3, [r3, #0]
    aed0:	b2db      	uxtb	r3, r3
    aed2:	3301      	adds	r3, #1
    aed4:	b2da      	uxtb	r2, r3
    aed6:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    aeda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aede:	701a      	strb	r2, [r3, #0]
    aee0:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    aee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aee8:	781b      	ldrb	r3, [r3, #0]
    aeea:	b2db      	uxtb	r3, r3
    aeec:	2bff      	cmp	r3, #255	; 0xff
    aeee:	d105      	bne.n	aefc <send_bat+0x710>
    aef0:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    aef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aef8:	2200      	movs	r2, #0
    aefa:	701a      	strb	r2, [r3, #0]
    aefc:	f242 0338 	movw	r3, #8248	; 0x2038
    af00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af04:	f242 0238 	movw	r2, #8248	; 0x2038
    af08:	f2c2 0200 	movt	r2, #8192	; 0x2000
    af0c:	7812      	ldrb	r2, [r2, #0]
    af0e:	b2d2      	uxtb	r2, r2
    af10:	f042 0201 	orr.w	r2, r2, #1
    af14:	b2d2      	uxtb	r2, r2
    af16:	701a      	strb	r2, [r3, #0]
    af18:	f242 0339 	movw	r3, #8249	; 0x2039
    af1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af20:	f242 0239 	movw	r2, #8249	; 0x2039
    af24:	f2c2 0200 	movt	r2, #8192	; 0x2000
    af28:	7812      	ldrb	r2, [r2, #0]
    af2a:	b2d2      	uxtb	r2, r2
    af2c:	f042 0210 	orr.w	r2, r2, #16
    af30:	b2d2      	uxtb	r2, r2
    af32:	701a      	strb	r2, [r3, #0]
    af34:	e00b      	b.n	af4e <send_bat+0x762>
    af36:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    af3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af3e:	781b      	ldrb	r3, [r3, #0]
    af40:	3301      	adds	r3, #1
    af42:	b2da      	uxtb	r2, r3
    af44:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    af48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af4c:	701a      	strb	r2, [r3, #0]
}
    af4e:	46bd      	mov	sp, r7
    af50:	f85d 7b04 	ldr.w	r7, [sp], #4
    af54:	4770      	bx	lr
    af56:	bf00      	nop

0000af58 <send_climb>:
void send_climb(void){  //2000ms
    af58:	b480      	push	{r7}
    af5a:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    af5c:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    af60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af64:	781a      	ldrb	r2, [r3, #0]
    af66:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    af6a:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    af6e:	fba3 1302 	umull	r1, r3, r3, r2
    af72:	0919      	lsrs	r1, r3, #4
    af74:	460b      	mov	r3, r1
    af76:	009b      	lsls	r3, r3, #2
    af78:	440b      	add	r3, r1
    af7a:	009b      	lsls	r3, r3, #2
    af7c:	1ad3      	subs	r3, r2, r3
    af7e:	b2db      	uxtb	r3, r3
    af80:	2b12      	cmp	r3, #18
    af82:	f040 8554 	bne.w	ba2e <send_climb+0xad6>
    af86:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    af8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af8e:	781a      	ldrb	r2, [r3, #0]
    af90:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    af94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af98:	781b      	ldrb	r3, [r3, #0]
    af9a:	b2db      	uxtb	r3, r3
    af9c:	429a      	cmp	r2, r3
    af9e:	d313      	bcc.n	afc8 <send_climb+0x70>
    afa0:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    afa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afa8:	781b      	ldrb	r3, [r3, #0]
    afaa:	b2db      	uxtb	r3, r3
    afac:	461a      	mov	r2, r3
    afae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    afb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afb6:	781b      	ldrb	r3, [r3, #0]
    afb8:	1ad3      	subs	r3, r2, r3
    afba:	33ff      	adds	r3, #255	; 0xff
    afbc:	2b12      	cmp	r3, #18
    afbe:	bfd4      	ite	le
    afc0:	2300      	movle	r3, #0
    afc2:	2301      	movgt	r3, #1
    afc4:	b2db      	uxtb	r3, r3
    afc6:	e011      	b.n	afec <send_climb+0x94>
    afc8:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    afcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afd0:	781b      	ldrb	r3, [r3, #0]
    afd2:	b2db      	uxtb	r3, r3
    afd4:	461a      	mov	r2, r3
    afd6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    afda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afde:	781b      	ldrb	r3, [r3, #0]
    afe0:	1ad3      	subs	r3, r2, r3
    afe2:	2b12      	cmp	r3, #18
    afe4:	bfd4      	ite	le
    afe6:	2300      	movle	r3, #0
    afe8:	2301      	movgt	r3, #1
    afea:	b2db      	uxtb	r3, r3
    afec:	2b00      	cmp	r3, #0
    afee:	f000 8512 	beq.w	ba16 <send_climb+0xabe>
    aff2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    aff6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    affa:	781b      	ldrb	r3, [r3, #0]
    affc:	461a      	mov	r2, r3
    affe:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b002:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b006:	2105      	movs	r1, #5
    b008:	5499      	strb	r1, [r3, r2]
    b00a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b00e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b012:	781b      	ldrb	r3, [r3, #0]
    b014:	3301      	adds	r3, #1
    b016:	b2da      	uxtb	r2, r3
    b018:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b01c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b020:	701a      	strb	r2, [r3, #0]
    b022:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b026:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b02a:	781b      	ldrb	r3, [r3, #0]
    b02c:	2bff      	cmp	r3, #255	; 0xff
    b02e:	d105      	bne.n	b03c <send_climb+0xe4>
    b030:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b038:	2200      	movs	r2, #0
    b03a:	701a      	strb	r2, [r3, #0]
    b03c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b040:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b044:	781b      	ldrb	r3, [r3, #0]
    b046:	461a      	mov	r2, r3
    b048:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b04c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b050:	210e      	movs	r1, #14
    b052:	5499      	strb	r1, [r3, r2]
    b054:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b058:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b05c:	781b      	ldrb	r3, [r3, #0]
    b05e:	3301      	adds	r3, #1
    b060:	b2da      	uxtb	r2, r3
    b062:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b066:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b06a:	701a      	strb	r2, [r3, #0]
    b06c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b070:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b074:	781b      	ldrb	r3, [r3, #0]
    b076:	2bff      	cmp	r3, #255	; 0xff
    b078:	d105      	bne.n	b086 <send_climb+0x12e>
    b07a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b07e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b082:	2200      	movs	r2, #0
    b084:	701a      	strb	r2, [r3, #0]
    b086:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b08a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b08e:	220e      	movs	r2, #14
    b090:	701a      	strb	r2, [r3, #0]
    b092:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b096:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b09a:	220e      	movs	r2, #14
    b09c:	701a      	strb	r2, [r3, #0]
    b09e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b0a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0a6:	781b      	ldrb	r3, [r3, #0]
    b0a8:	461a      	mov	r2, r3
    b0aa:	f24b 2304 	movw	r3, #45572	; 0xb204
    b0ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0b2:	7819      	ldrb	r1, [r3, #0]
    b0b4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b0b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0bc:	5499      	strb	r1, [r3, r2]
    b0be:	f24b 2304 	movw	r3, #45572	; 0xb204
    b0c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0c6:	781a      	ldrb	r2, [r3, #0]
    b0c8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b0cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0d0:	781b      	ldrb	r3, [r3, #0]
    b0d2:	4413      	add	r3, r2
    b0d4:	b2da      	uxtb	r2, r3
    b0d6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b0da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0de:	701a      	strb	r2, [r3, #0]
    b0e0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b0e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0e8:	781a      	ldrb	r2, [r3, #0]
    b0ea:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b0ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0f2:	781b      	ldrb	r3, [r3, #0]
    b0f4:	4413      	add	r3, r2
    b0f6:	b2da      	uxtb	r2, r3
    b0f8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b0fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b100:	701a      	strb	r2, [r3, #0]
    b102:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b106:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b10a:	781b      	ldrb	r3, [r3, #0]
    b10c:	3301      	adds	r3, #1
    b10e:	b2da      	uxtb	r2, r3
    b110:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b114:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b118:	701a      	strb	r2, [r3, #0]
    b11a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b11e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b122:	781b      	ldrb	r3, [r3, #0]
    b124:	2bff      	cmp	r3, #255	; 0xff
    b126:	d105      	bne.n	b134 <send_climb+0x1dc>
    b128:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b12c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b130:	2200      	movs	r2, #0
    b132:	701a      	strb	r2, [r3, #0]
    b134:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b138:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b13c:	781b      	ldrb	r3, [r3, #0]
    b13e:	461a      	mov	r2, r3
    b140:	f24b 2304 	movw	r3, #45572	; 0xb204
    b144:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b148:	7859      	ldrb	r1, [r3, #1]
    b14a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b14e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b152:	5499      	strb	r1, [r3, r2]
    b154:	4bd3      	ldr	r3, [pc, #844]	; (b4a4 <send_climb+0x54c>)
    b156:	781a      	ldrb	r2, [r3, #0]
    b158:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b15c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b160:	781b      	ldrb	r3, [r3, #0]
    b162:	4413      	add	r3, r2
    b164:	b2da      	uxtb	r2, r3
    b166:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b16a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b16e:	701a      	strb	r2, [r3, #0]
    b170:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b174:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b178:	781a      	ldrb	r2, [r3, #0]
    b17a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b17e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b182:	781b      	ldrb	r3, [r3, #0]
    b184:	4413      	add	r3, r2
    b186:	b2da      	uxtb	r2, r3
    b188:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b18c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b190:	701a      	strb	r2, [r3, #0]
    b192:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b196:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b19a:	781b      	ldrb	r3, [r3, #0]
    b19c:	3301      	adds	r3, #1
    b19e:	b2da      	uxtb	r2, r3
    b1a0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b1a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1a8:	701a      	strb	r2, [r3, #0]
    b1aa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b1ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1b2:	781b      	ldrb	r3, [r3, #0]
    b1b4:	2bff      	cmp	r3, #255	; 0xff
    b1b6:	d105      	bne.n	b1c4 <send_climb+0x26c>
    b1b8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b1bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1c0:	2200      	movs	r2, #0
    b1c2:	701a      	strb	r2, [r3, #0]
    b1c4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b1c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1cc:	781b      	ldrb	r3, [r3, #0]
    b1ce:	461a      	mov	r2, r3
    b1d0:	f24b 2318 	movw	r3, #45592	; 0xb218
    b1d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1d8:	7819      	ldrb	r1, [r3, #0]
    b1da:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b1de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1e2:	5499      	strb	r1, [r3, r2]
    b1e4:	f24b 2318 	movw	r3, #45592	; 0xb218
    b1e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1ec:	781a      	ldrb	r2, [r3, #0]
    b1ee:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b1f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1f6:	781b      	ldrb	r3, [r3, #0]
    b1f8:	4413      	add	r3, r2
    b1fa:	b2da      	uxtb	r2, r3
    b1fc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b200:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b204:	701a      	strb	r2, [r3, #0]
    b206:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b20a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b20e:	781a      	ldrb	r2, [r3, #0]
    b210:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b214:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b218:	781b      	ldrb	r3, [r3, #0]
    b21a:	4413      	add	r3, r2
    b21c:	b2da      	uxtb	r2, r3
    b21e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b222:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b226:	701a      	strb	r2, [r3, #0]
    b228:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b22c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b230:	781b      	ldrb	r3, [r3, #0]
    b232:	3301      	adds	r3, #1
    b234:	b2da      	uxtb	r2, r3
    b236:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b23a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b23e:	701a      	strb	r2, [r3, #0]
    b240:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b248:	781b      	ldrb	r3, [r3, #0]
    b24a:	2bff      	cmp	r3, #255	; 0xff
    b24c:	d105      	bne.n	b25a <send_climb+0x302>
    b24e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b252:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b256:	2200      	movs	r2, #0
    b258:	701a      	strb	r2, [r3, #0]
    b25a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b25e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b262:	781b      	ldrb	r3, [r3, #0]
    b264:	461a      	mov	r2, r3
    b266:	f24b 2318 	movw	r3, #45592	; 0xb218
    b26a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b26e:	7859      	ldrb	r1, [r3, #1]
    b270:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b278:	5499      	strb	r1, [r3, r2]
    b27a:	4b8b      	ldr	r3, [pc, #556]	; (b4a8 <send_climb+0x550>)
    b27c:	781a      	ldrb	r2, [r3, #0]
    b27e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b282:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b286:	781b      	ldrb	r3, [r3, #0]
    b288:	4413      	add	r3, r2
    b28a:	b2da      	uxtb	r2, r3
    b28c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b290:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b294:	701a      	strb	r2, [r3, #0]
    b296:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b29a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b29e:	781a      	ldrb	r2, [r3, #0]
    b2a0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b2a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2a8:	781b      	ldrb	r3, [r3, #0]
    b2aa:	4413      	add	r3, r2
    b2ac:	b2da      	uxtb	r2, r3
    b2ae:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b2b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2b6:	701a      	strb	r2, [r3, #0]
    b2b8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b2bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2c0:	781b      	ldrb	r3, [r3, #0]
    b2c2:	3301      	adds	r3, #1
    b2c4:	b2da      	uxtb	r2, r3
    b2c6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b2ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2ce:	701a      	strb	r2, [r3, #0]
    b2d0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b2d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2d8:	781b      	ldrb	r3, [r3, #0]
    b2da:	2bff      	cmp	r3, #255	; 0xff
    b2dc:	d105      	bne.n	b2ea <send_climb+0x392>
    b2de:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b2e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2e6:	2200      	movs	r2, #0
    b2e8:	701a      	strb	r2, [r3, #0]
    b2ea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b2ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2f2:	781b      	ldrb	r3, [r3, #0]
    b2f4:	461a      	mov	r2, r3
    b2f6:	f24b 2318 	movw	r3, #45592	; 0xb218
    b2fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2fe:	7899      	ldrb	r1, [r3, #2]
    b300:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b308:	5499      	strb	r1, [r3, r2]
    b30a:	4b68      	ldr	r3, [pc, #416]	; (b4ac <send_climb+0x554>)
    b30c:	781a      	ldrb	r2, [r3, #0]
    b30e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b312:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b316:	781b      	ldrb	r3, [r3, #0]
    b318:	4413      	add	r3, r2
    b31a:	b2da      	uxtb	r2, r3
    b31c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b320:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b324:	701a      	strb	r2, [r3, #0]
    b326:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b32a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b32e:	781a      	ldrb	r2, [r3, #0]
    b330:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b338:	781b      	ldrb	r3, [r3, #0]
    b33a:	4413      	add	r3, r2
    b33c:	b2da      	uxtb	r2, r3
    b33e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b342:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b346:	701a      	strb	r2, [r3, #0]
    b348:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b34c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b350:	781b      	ldrb	r3, [r3, #0]
    b352:	3301      	adds	r3, #1
    b354:	b2da      	uxtb	r2, r3
    b356:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b35a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b35e:	701a      	strb	r2, [r3, #0]
    b360:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b368:	781b      	ldrb	r3, [r3, #0]
    b36a:	2bff      	cmp	r3, #255	; 0xff
    b36c:	d105      	bne.n	b37a <send_climb+0x422>
    b36e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b372:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b376:	2200      	movs	r2, #0
    b378:	701a      	strb	r2, [r3, #0]
    b37a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b37e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b382:	781b      	ldrb	r3, [r3, #0]
    b384:	461a      	mov	r2, r3
    b386:	f24b 2318 	movw	r3, #45592	; 0xb218
    b38a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b38e:	78d9      	ldrb	r1, [r3, #3]
    b390:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b394:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b398:	5499      	strb	r1, [r3, r2]
    b39a:	4b45      	ldr	r3, [pc, #276]	; (b4b0 <send_climb+0x558>)
    b39c:	781a      	ldrb	r2, [r3, #0]
    b39e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b3a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3a6:	781b      	ldrb	r3, [r3, #0]
    b3a8:	4413      	add	r3, r2
    b3aa:	b2da      	uxtb	r2, r3
    b3ac:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b3b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3b4:	701a      	strb	r2, [r3, #0]
    b3b6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b3ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3be:	781a      	ldrb	r2, [r3, #0]
    b3c0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b3c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3c8:	781b      	ldrb	r3, [r3, #0]
    b3ca:	4413      	add	r3, r2
    b3cc:	b2da      	uxtb	r2, r3
    b3ce:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b3d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3d6:	701a      	strb	r2, [r3, #0]
    b3d8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b3dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3e0:	781b      	ldrb	r3, [r3, #0]
    b3e2:	3301      	adds	r3, #1
    b3e4:	b2da      	uxtb	r2, r3
    b3e6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b3ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3ee:	701a      	strb	r2, [r3, #0]
    b3f0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b3f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3f8:	781b      	ldrb	r3, [r3, #0]
    b3fa:	2bff      	cmp	r3, #255	; 0xff
    b3fc:	d105      	bne.n	b40a <send_climb+0x4b2>
    b3fe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b406:	2200      	movs	r2, #0
    b408:	701a      	strb	r2, [r3, #0]
    b40a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b40e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b412:	781b      	ldrb	r3, [r3, #0]
    b414:	461a      	mov	r2, r3
    b416:	f24b 2320 	movw	r3, #45600	; 0xb220
    b41a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b41e:	7819      	ldrb	r1, [r3, #0]
    b420:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b428:	5499      	strb	r1, [r3, r2]
    b42a:	f24b 2320 	movw	r3, #45600	; 0xb220
    b42e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b432:	781a      	ldrb	r2, [r3, #0]
    b434:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b438:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b43c:	781b      	ldrb	r3, [r3, #0]
    b43e:	4413      	add	r3, r2
    b440:	b2da      	uxtb	r2, r3
    b442:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b446:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b44a:	701a      	strb	r2, [r3, #0]
    b44c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b450:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b454:	781a      	ldrb	r2, [r3, #0]
    b456:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b45a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b45e:	781b      	ldrb	r3, [r3, #0]
    b460:	4413      	add	r3, r2
    b462:	b2da      	uxtb	r2, r3
    b464:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b468:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b46c:	701a      	strb	r2, [r3, #0]
    b46e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b472:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b476:	781b      	ldrb	r3, [r3, #0]
    b478:	3301      	adds	r3, #1
    b47a:	b2da      	uxtb	r2, r3
    b47c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b480:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b484:	701a      	strb	r2, [r3, #0]
    b486:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b48a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b48e:	781b      	ldrb	r3, [r3, #0]
    b490:	2bff      	cmp	r3, #255	; 0xff
    b492:	d10f      	bne.n	b4b4 <send_climb+0x55c>
    b494:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b498:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b49c:	2200      	movs	r2, #0
    b49e:	701a      	strb	r2, [r3, #0]
    b4a0:	e008      	b.n	b4b4 <send_climb+0x55c>
    b4a2:	bf00      	nop
    b4a4:	2000b205 	.word	0x2000b205
    b4a8:	2000b219 	.word	0x2000b219
    b4ac:	2000b21a 	.word	0x2000b21a
    b4b0:	2000b21b 	.word	0x2000b21b
    b4b4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b4b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4bc:	781b      	ldrb	r3, [r3, #0]
    b4be:	461a      	mov	r2, r3
    b4c0:	f24b 2320 	movw	r3, #45600	; 0xb220
    b4c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4c8:	7859      	ldrb	r1, [r3, #1]
    b4ca:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b4ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4d2:	5499      	strb	r1, [r3, r2]
    b4d4:	4bd1      	ldr	r3, [pc, #836]	; (b81c <send_climb+0x8c4>)
    b4d6:	781a      	ldrb	r2, [r3, #0]
    b4d8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b4dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4e0:	781b      	ldrb	r3, [r3, #0]
    b4e2:	4413      	add	r3, r2
    b4e4:	b2da      	uxtb	r2, r3
    b4e6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b4ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4ee:	701a      	strb	r2, [r3, #0]
    b4f0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4f8:	781a      	ldrb	r2, [r3, #0]
    b4fa:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b4fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b502:	781b      	ldrb	r3, [r3, #0]
    b504:	4413      	add	r3, r2
    b506:	b2da      	uxtb	r2, r3
    b508:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b50c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b510:	701a      	strb	r2, [r3, #0]
    b512:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b51a:	781b      	ldrb	r3, [r3, #0]
    b51c:	3301      	adds	r3, #1
    b51e:	b2da      	uxtb	r2, r3
    b520:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b524:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b528:	701a      	strb	r2, [r3, #0]
    b52a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b52e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b532:	781b      	ldrb	r3, [r3, #0]
    b534:	2bff      	cmp	r3, #255	; 0xff
    b536:	d105      	bne.n	b544 <send_climb+0x5ec>
    b538:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b53c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b540:	2200      	movs	r2, #0
    b542:	701a      	strb	r2, [r3, #0]
    b544:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b548:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b54c:	781b      	ldrb	r3, [r3, #0]
    b54e:	461a      	mov	r2, r3
    b550:	f24b 2320 	movw	r3, #45600	; 0xb220
    b554:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b558:	7899      	ldrb	r1, [r3, #2]
    b55a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b55e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b562:	5499      	strb	r1, [r3, r2]
    b564:	4bae      	ldr	r3, [pc, #696]	; (b820 <send_climb+0x8c8>)
    b566:	781a      	ldrb	r2, [r3, #0]
    b568:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b56c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b570:	781b      	ldrb	r3, [r3, #0]
    b572:	4413      	add	r3, r2
    b574:	b2da      	uxtb	r2, r3
    b576:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b57a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b57e:	701a      	strb	r2, [r3, #0]
    b580:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b588:	781a      	ldrb	r2, [r3, #0]
    b58a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b58e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b592:	781b      	ldrb	r3, [r3, #0]
    b594:	4413      	add	r3, r2
    b596:	b2da      	uxtb	r2, r3
    b598:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b59c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5a0:	701a      	strb	r2, [r3, #0]
    b5a2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b5a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5aa:	781b      	ldrb	r3, [r3, #0]
    b5ac:	3301      	adds	r3, #1
    b5ae:	b2da      	uxtb	r2, r3
    b5b0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b5b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5b8:	701a      	strb	r2, [r3, #0]
    b5ba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b5be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5c2:	781b      	ldrb	r3, [r3, #0]
    b5c4:	2bff      	cmp	r3, #255	; 0xff
    b5c6:	d105      	bne.n	b5d4 <send_climb+0x67c>
    b5c8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b5cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5d0:	2200      	movs	r2, #0
    b5d2:	701a      	strb	r2, [r3, #0]
    b5d4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b5d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5dc:	781b      	ldrb	r3, [r3, #0]
    b5de:	461a      	mov	r2, r3
    b5e0:	f24b 2320 	movw	r3, #45600	; 0xb220
    b5e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5e8:	78d9      	ldrb	r1, [r3, #3]
    b5ea:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b5ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5f2:	5499      	strb	r1, [r3, r2]
    b5f4:	4b8b      	ldr	r3, [pc, #556]	; (b824 <send_climb+0x8cc>)
    b5f6:	781a      	ldrb	r2, [r3, #0]
    b5f8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b5fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b600:	781b      	ldrb	r3, [r3, #0]
    b602:	4413      	add	r3, r2
    b604:	b2da      	uxtb	r2, r3
    b606:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b60a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b60e:	701a      	strb	r2, [r3, #0]
    b610:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b614:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b618:	781a      	ldrb	r2, [r3, #0]
    b61a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b61e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b622:	781b      	ldrb	r3, [r3, #0]
    b624:	4413      	add	r3, r2
    b626:	b2da      	uxtb	r2, r3
    b628:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b62c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b630:	701a      	strb	r2, [r3, #0]
    b632:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b636:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b63a:	781b      	ldrb	r3, [r3, #0]
    b63c:	3301      	adds	r3, #1
    b63e:	b2da      	uxtb	r2, r3
    b640:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b644:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b648:	701a      	strb	r2, [r3, #0]
    b64a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b64e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b652:	781b      	ldrb	r3, [r3, #0]
    b654:	2bff      	cmp	r3, #255	; 0xff
    b656:	d105      	bne.n	b664 <send_climb+0x70c>
    b658:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b65c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b660:	2200      	movs	r2, #0
    b662:	701a      	strb	r2, [r3, #0]
    b664:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b668:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b66c:	781b      	ldrb	r3, [r3, #0]
    b66e:	461a      	mov	r2, r3
    b670:	f648 0308 	movw	r3, #34824	; 0x8808
    b674:	f2c0 0301 	movt	r3, #1
    b678:	7819      	ldrb	r1, [r3, #0]
    b67a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b67e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b682:	5499      	strb	r1, [r3, r2]
    b684:	f648 0308 	movw	r3, #34824	; 0x8808
    b688:	f2c0 0301 	movt	r3, #1
    b68c:	781a      	ldrb	r2, [r3, #0]
    b68e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b696:	781b      	ldrb	r3, [r3, #0]
    b698:	4413      	add	r3, r2
    b69a:	b2da      	uxtb	r2, r3
    b69c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b6a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6a4:	701a      	strb	r2, [r3, #0]
    b6a6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b6aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6ae:	781a      	ldrb	r2, [r3, #0]
    b6b0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b6b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6b8:	781b      	ldrb	r3, [r3, #0]
    b6ba:	4413      	add	r3, r2
    b6bc:	b2da      	uxtb	r2, r3
    b6be:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b6c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6c6:	701a      	strb	r2, [r3, #0]
    b6c8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b6cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6d0:	781b      	ldrb	r3, [r3, #0]
    b6d2:	3301      	adds	r3, #1
    b6d4:	b2da      	uxtb	r2, r3
    b6d6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b6da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6de:	701a      	strb	r2, [r3, #0]
    b6e0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b6e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6e8:	781b      	ldrb	r3, [r3, #0]
    b6ea:	2bff      	cmp	r3, #255	; 0xff
    b6ec:	d105      	bne.n	b6fa <send_climb+0x7a2>
    b6ee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b6f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6f6:	2200      	movs	r2, #0
    b6f8:	701a      	strb	r2, [r3, #0]
    b6fa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b6fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b702:	781b      	ldrb	r3, [r3, #0]
    b704:	461a      	mov	r2, r3
    b706:	f648 0308 	movw	r3, #34824	; 0x8808
    b70a:	f2c0 0301 	movt	r3, #1
    b70e:	7859      	ldrb	r1, [r3, #1]
    b710:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b714:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b718:	5499      	strb	r1, [r3, r2]
    b71a:	4b43      	ldr	r3, [pc, #268]	; (b828 <send_climb+0x8d0>)
    b71c:	781a      	ldrb	r2, [r3, #0]
    b71e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b722:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b726:	781b      	ldrb	r3, [r3, #0]
    b728:	4413      	add	r3, r2
    b72a:	b2da      	uxtb	r2, r3
    b72c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b730:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b734:	701a      	strb	r2, [r3, #0]
    b736:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b73a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b73e:	781a      	ldrb	r2, [r3, #0]
    b740:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b748:	781b      	ldrb	r3, [r3, #0]
    b74a:	4413      	add	r3, r2
    b74c:	b2da      	uxtb	r2, r3
    b74e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b756:	701a      	strb	r2, [r3, #0]
    b758:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b75c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b760:	781b      	ldrb	r3, [r3, #0]
    b762:	3301      	adds	r3, #1
    b764:	b2da      	uxtb	r2, r3
    b766:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b76a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b76e:	701a      	strb	r2, [r3, #0]
    b770:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b774:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b778:	781b      	ldrb	r3, [r3, #0]
    b77a:	2bff      	cmp	r3, #255	; 0xff
    b77c:	d105      	bne.n	b78a <send_climb+0x832>
    b77e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b782:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b786:	2200      	movs	r2, #0
    b788:	701a      	strb	r2, [r3, #0]
    b78a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b78e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b792:	781b      	ldrb	r3, [r3, #0]
    b794:	461a      	mov	r2, r3
    b796:	f648 0308 	movw	r3, #34824	; 0x8808
    b79a:	f2c0 0301 	movt	r3, #1
    b79e:	7899      	ldrb	r1, [r3, #2]
    b7a0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b7a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7a8:	5499      	strb	r1, [r3, r2]
    b7aa:	4b20      	ldr	r3, [pc, #128]	; (b82c <send_climb+0x8d4>)
    b7ac:	781a      	ldrb	r2, [r3, #0]
    b7ae:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b7b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7b6:	781b      	ldrb	r3, [r3, #0]
    b7b8:	4413      	add	r3, r2
    b7ba:	b2da      	uxtb	r2, r3
    b7bc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b7c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7c4:	701a      	strb	r2, [r3, #0]
    b7c6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b7ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7ce:	781a      	ldrb	r2, [r3, #0]
    b7d0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b7d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7d8:	781b      	ldrb	r3, [r3, #0]
    b7da:	4413      	add	r3, r2
    b7dc:	b2da      	uxtb	r2, r3
    b7de:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b7e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7e6:	701a      	strb	r2, [r3, #0]
    b7e8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b7ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7f0:	781b      	ldrb	r3, [r3, #0]
    b7f2:	3301      	adds	r3, #1
    b7f4:	b2da      	uxtb	r2, r3
    b7f6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b7fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7fe:	701a      	strb	r2, [r3, #0]
    b800:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b804:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b808:	781b      	ldrb	r3, [r3, #0]
    b80a:	2bff      	cmp	r3, #255	; 0xff
    b80c:	d110      	bne.n	b830 <send_climb+0x8d8>
    b80e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b816:	2200      	movs	r2, #0
    b818:	701a      	strb	r2, [r3, #0]
    b81a:	e009      	b.n	b830 <send_climb+0x8d8>
    b81c:	2000b221 	.word	0x2000b221
    b820:	2000b222 	.word	0x2000b222
    b824:	2000b223 	.word	0x2000b223
    b828:	00018809 	.word	0x00018809
    b82c:	0001880a 	.word	0x0001880a
    b830:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b834:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b838:	781b      	ldrb	r3, [r3, #0]
    b83a:	461a      	mov	r2, r3
    b83c:	f648 0308 	movw	r3, #34824	; 0x8808
    b840:	f2c0 0301 	movt	r3, #1
    b844:	78d9      	ldrb	r1, [r3, #3]
    b846:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b84a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b84e:	5499      	strb	r1, [r3, r2]
    b850:	4b79      	ldr	r3, [pc, #484]	; (ba38 <send_climb+0xae0>)
    b852:	781a      	ldrb	r2, [r3, #0]
    b854:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b858:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b85c:	781b      	ldrb	r3, [r3, #0]
    b85e:	4413      	add	r3, r2
    b860:	b2da      	uxtb	r2, r3
    b862:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b866:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b86a:	701a      	strb	r2, [r3, #0]
    b86c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b870:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b874:	781a      	ldrb	r2, [r3, #0]
    b876:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b87a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b87e:	781b      	ldrb	r3, [r3, #0]
    b880:	4413      	add	r3, r2
    b882:	b2da      	uxtb	r2, r3
    b884:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b888:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b88c:	701a      	strb	r2, [r3, #0]
    b88e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b892:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b896:	781b      	ldrb	r3, [r3, #0]
    b898:	3301      	adds	r3, #1
    b89a:	b2da      	uxtb	r2, r3
    b89c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b8a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8a4:	701a      	strb	r2, [r3, #0]
    b8a6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b8aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8ae:	781b      	ldrb	r3, [r3, #0]
    b8b0:	2bff      	cmp	r3, #255	; 0xff
    b8b2:	d105      	bne.n	b8c0 <send_climb+0x968>
    b8b4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b8b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8bc:	2200      	movs	r2, #0
    b8be:	701a      	strb	r2, [r3, #0]
    b8c0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b8c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8c8:	781b      	ldrb	r3, [r3, #0]
    b8ca:	461a      	mov	r2, r3
    b8cc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    b8d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8d4:	7819      	ldrb	r1, [r3, #0]
    b8d6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b8da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8de:	5499      	strb	r1, [r3, r2]
    b8e0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b8e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8e8:	781b      	ldrb	r3, [r3, #0]
    b8ea:	3301      	adds	r3, #1
    b8ec:	b2da      	uxtb	r2, r3
    b8ee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b8f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8f6:	701a      	strb	r2, [r3, #0]
    b8f8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b8fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b900:	781b      	ldrb	r3, [r3, #0]
    b902:	2bff      	cmp	r3, #255	; 0xff
    b904:	d105      	bne.n	b912 <send_climb+0x9ba>
    b906:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b90a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b90e:	2200      	movs	r2, #0
    b910:	701a      	strb	r2, [r3, #0]
    b912:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b916:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b91a:	781b      	ldrb	r3, [r3, #0]
    b91c:	461a      	mov	r2, r3
    b91e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    b922:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b926:	7819      	ldrb	r1, [r3, #0]
    b928:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b92c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b930:	5499      	strb	r1, [r3, r2]
    b932:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b936:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b93a:	781b      	ldrb	r3, [r3, #0]
    b93c:	3301      	adds	r3, #1
    b93e:	b2da      	uxtb	r2, r3
    b940:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b944:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b948:	701a      	strb	r2, [r3, #0]
    b94a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b94e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b952:	781b      	ldrb	r3, [r3, #0]
    b954:	2bff      	cmp	r3, #255	; 0xff
    b956:	d105      	bne.n	b964 <send_climb+0xa0c>
    b958:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    b95c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b960:	2200      	movs	r2, #0
    b962:	701a      	strb	r2, [r3, #0]
    b964:	f242 0339 	movw	r3, #8249	; 0x2039
    b968:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b96c:	781b      	ldrb	r3, [r3, #0]
    b96e:	b2db      	uxtb	r3, r3
    b970:	f003 0310 	and.w	r3, r3, #16
    b974:	2b00      	cmp	r3, #0
    b976:	d15a      	bne.n	ba2e <send_climb+0xad6>
    b978:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    b97c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b980:	781b      	ldrb	r3, [r3, #0]
    b982:	b2db      	uxtb	r3, r3
    b984:	461a      	mov	r2, r3
    b986:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    b98a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b98e:	5c9a      	ldrb	r2, [r3, r2]
    b990:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    b994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b998:	701a      	strb	r2, [r3, #0]
    b99a:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    b99e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9a2:	2200      	movs	r2, #0
    b9a4:	701a      	strb	r2, [r3, #0]
    b9a6:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    b9aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9ae:	781b      	ldrb	r3, [r3, #0]
    b9b0:	b2db      	uxtb	r3, r3
    b9b2:	3301      	adds	r3, #1
    b9b4:	b2da      	uxtb	r2, r3
    b9b6:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    b9ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9be:	701a      	strb	r2, [r3, #0]
    b9c0:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    b9c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9c8:	781b      	ldrb	r3, [r3, #0]
    b9ca:	b2db      	uxtb	r3, r3
    b9cc:	2bff      	cmp	r3, #255	; 0xff
    b9ce:	d105      	bne.n	b9dc <send_climb+0xa84>
    b9d0:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    b9d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9d8:	2200      	movs	r2, #0
    b9da:	701a      	strb	r2, [r3, #0]
    b9dc:	f242 0338 	movw	r3, #8248	; 0x2038
    b9e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9e4:	f242 0238 	movw	r2, #8248	; 0x2038
    b9e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b9ec:	7812      	ldrb	r2, [r2, #0]
    b9ee:	b2d2      	uxtb	r2, r2
    b9f0:	f042 0201 	orr.w	r2, r2, #1
    b9f4:	b2d2      	uxtb	r2, r2
    b9f6:	701a      	strb	r2, [r3, #0]
    b9f8:	f242 0339 	movw	r3, #8249	; 0x2039
    b9fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba00:	f242 0239 	movw	r2, #8249	; 0x2039
    ba04:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ba08:	7812      	ldrb	r2, [r2, #0]
    ba0a:	b2d2      	uxtb	r2, r2
    ba0c:	f042 0210 	orr.w	r2, r2, #16
    ba10:	b2d2      	uxtb	r2, r2
    ba12:	701a      	strb	r2, [r3, #0]
    ba14:	e00b      	b.n	ba2e <send_climb+0xad6>
    ba16:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    ba1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba1e:	781b      	ldrb	r3, [r3, #0]
    ba20:	3301      	adds	r3, #1
    ba22:	b2da      	uxtb	r2, r3
    ba24:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    ba28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba2c:	701a      	strb	r2, [r3, #0]
}
    ba2e:	46bd      	mov	sp, r7
    ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba34:	4770      	bx	lr
    ba36:	bf00      	nop
    ba38:	0001880b 	.word	0x0001880b

0000ba3c <send_mode>:
void send_mode(void){  //5000ms
    ba3c:	b480      	push	{r7}
    ba3e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    ba40:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    ba44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba48:	781a      	ldrb	r2, [r3, #0]
    ba4a:	f248 531f 	movw	r3, #34079	; 0x851f
    ba4e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    ba52:	fba3 1302 	umull	r1, r3, r3, r2
    ba56:	091b      	lsrs	r3, r3, #4
    ba58:	2132      	movs	r1, #50	; 0x32
    ba5a:	fb01 f303 	mul.w	r3, r1, r3
    ba5e:	1ad3      	subs	r3, r2, r3
    ba60:	b2db      	uxtb	r3, r3
    ba62:	2b09      	cmp	r3, #9
    ba64:	f040 82ba 	bne.w	bfdc <send_mode+0x5a0>
    ba68:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ba6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba70:	781a      	ldrb	r2, [r3, #0]
    ba72:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    ba76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba7a:	781b      	ldrb	r3, [r3, #0]
    ba7c:	b2db      	uxtb	r3, r3
    ba7e:	429a      	cmp	r2, r3
    ba80:	d313      	bcc.n	baaa <send_mode+0x6e>
    ba82:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    ba86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba8a:	781b      	ldrb	r3, [r3, #0]
    ba8c:	b2db      	uxtb	r3, r3
    ba8e:	461a      	mov	r2, r3
    ba90:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ba94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba98:	781b      	ldrb	r3, [r3, #0]
    ba9a:	1ad3      	subs	r3, r2, r3
    ba9c:	33ff      	adds	r3, #255	; 0xff
    ba9e:	2b09      	cmp	r3, #9
    baa0:	bfd4      	ite	le
    baa2:	2300      	movle	r3, #0
    baa4:	2301      	movgt	r3, #1
    baa6:	b2db      	uxtb	r3, r3
    baa8:	e011      	b.n	bace <send_mode+0x92>
    baaa:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    baae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bab2:	781b      	ldrb	r3, [r3, #0]
    bab4:	b2db      	uxtb	r3, r3
    bab6:	461a      	mov	r2, r3
    bab8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    babc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bac0:	781b      	ldrb	r3, [r3, #0]
    bac2:	1ad3      	subs	r3, r2, r3
    bac4:	2b09      	cmp	r3, #9
    bac6:	bfd4      	ite	le
    bac8:	2300      	movle	r3, #0
    baca:	2301      	movgt	r3, #1
    bacc:	b2db      	uxtb	r3, r3
    bace:	2b00      	cmp	r3, #0
    bad0:	f000 8278 	beq.w	bfc4 <send_mode+0x588>
    bad4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    badc:	781b      	ldrb	r3, [r3, #0]
    bade:	461a      	mov	r2, r3
    bae0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    bae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bae8:	2105      	movs	r1, #5
    baea:	5499      	strb	r1, [r3, r2]
    baec:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    baf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    baf4:	781b      	ldrb	r3, [r3, #0]
    baf6:	3301      	adds	r3, #1
    baf8:	b2da      	uxtb	r2, r3
    bafa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bafe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb02:	701a      	strb	r2, [r3, #0]
    bb04:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bb08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb0c:	781b      	ldrb	r3, [r3, #0]
    bb0e:	2bff      	cmp	r3, #255	; 0xff
    bb10:	d105      	bne.n	bb1e <send_mode+0xe2>
    bb12:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bb16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb1a:	2200      	movs	r2, #0
    bb1c:	701a      	strb	r2, [r3, #0]
    bb1e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bb22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb26:	781b      	ldrb	r3, [r3, #0]
    bb28:	461a      	mov	r2, r3
    bb2a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    bb2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb32:	210b      	movs	r1, #11
    bb34:	5499      	strb	r1, [r3, r2]
    bb36:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bb3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb3e:	781b      	ldrb	r3, [r3, #0]
    bb40:	3301      	adds	r3, #1
    bb42:	b2da      	uxtb	r2, r3
    bb44:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bb48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb4c:	701a      	strb	r2, [r3, #0]
    bb4e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bb52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb56:	781b      	ldrb	r3, [r3, #0]
    bb58:	2bff      	cmp	r3, #255	; 0xff
    bb5a:	d105      	bne.n	bb68 <send_mode+0x12c>
    bb5c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bb60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb64:	2200      	movs	r2, #0
    bb66:	701a      	strb	r2, [r3, #0]
    bb68:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bb6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb70:	220b      	movs	r2, #11
    bb72:	701a      	strb	r2, [r3, #0]
    bb74:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    bb78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb7c:	220b      	movs	r2, #11
    bb7e:	701a      	strb	r2, [r3, #0]
    bb80:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bb84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb88:	781b      	ldrb	r3, [r3, #0]
    bb8a:	461a      	mov	r2, r3
    bb8c:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    bb90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb94:	7819      	ldrb	r1, [r3, #0]
    bb96:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    bb9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb9e:	5499      	strb	r1, [r3, r2]
    bba0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bba8:	781a      	ldrb	r2, [r3, #0]
    bbaa:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    bbae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbb2:	781b      	ldrb	r3, [r3, #0]
    bbb4:	4413      	add	r3, r2
    bbb6:	b2da      	uxtb	r2, r3
    bbb8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bbbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbc0:	701a      	strb	r2, [r3, #0]
    bbc2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    bbc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbca:	781a      	ldrb	r2, [r3, #0]
    bbcc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bbd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbd4:	781b      	ldrb	r3, [r3, #0]
    bbd6:	4413      	add	r3, r2
    bbd8:	b2da      	uxtb	r2, r3
    bbda:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    bbde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbe2:	701a      	strb	r2, [r3, #0]
    bbe4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bbe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbec:	781b      	ldrb	r3, [r3, #0]
    bbee:	3301      	adds	r3, #1
    bbf0:	b2da      	uxtb	r2, r3
    bbf2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bbf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbfa:	701a      	strb	r2, [r3, #0]
    bbfc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bc00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc04:	781b      	ldrb	r3, [r3, #0]
    bc06:	2bff      	cmp	r3, #255	; 0xff
    bc08:	d105      	bne.n	bc16 <send_mode+0x1da>
    bc0a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bc0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc12:	2200      	movs	r2, #0
    bc14:	701a      	strb	r2, [r3, #0]
    bc16:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bc1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc1e:	781b      	ldrb	r3, [r3, #0]
    bc20:	461a      	mov	r2, r3
    bc22:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
    bc26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc2a:	7819      	ldrb	r1, [r3, #0]
    bc2c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    bc30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc34:	5499      	strb	r1, [r3, r2]
    bc36:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bc3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc3e:	781a      	ldrb	r2, [r3, #0]
    bc40:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
    bc44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc48:	781b      	ldrb	r3, [r3, #0]
    bc4a:	4413      	add	r3, r2
    bc4c:	b2da      	uxtb	r2, r3
    bc4e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bc52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc56:	701a      	strb	r2, [r3, #0]
    bc58:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    bc5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc60:	781a      	ldrb	r2, [r3, #0]
    bc62:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bc66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc6a:	781b      	ldrb	r3, [r3, #0]
    bc6c:	4413      	add	r3, r2
    bc6e:	b2da      	uxtb	r2, r3
    bc70:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    bc74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc78:	701a      	strb	r2, [r3, #0]
    bc7a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bc7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc82:	781b      	ldrb	r3, [r3, #0]
    bc84:	3301      	adds	r3, #1
    bc86:	b2da      	uxtb	r2, r3
    bc88:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bc8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc90:	701a      	strb	r2, [r3, #0]
    bc92:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bc96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc9a:	781b      	ldrb	r3, [r3, #0]
    bc9c:	2bff      	cmp	r3, #255	; 0xff
    bc9e:	d105      	bne.n	bcac <send_mode+0x270>
    bca0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bca8:	2200      	movs	r2, #0
    bcaa:	701a      	strb	r2, [r3, #0]
    bcac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bcb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcb4:	781b      	ldrb	r3, [r3, #0]
    bcb6:	461a      	mov	r2, r3
    bcb8:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    bcbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcc0:	7819      	ldrb	r1, [r3, #0]
    bcc2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    bcc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcca:	5499      	strb	r1, [r3, r2]
    bccc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bcd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcd4:	781a      	ldrb	r2, [r3, #0]
    bcd6:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    bcda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcde:	781b      	ldrb	r3, [r3, #0]
    bce0:	4413      	add	r3, r2
    bce2:	b2da      	uxtb	r2, r3
    bce4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcec:	701a      	strb	r2, [r3, #0]
    bcee:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    bcf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcf6:	781a      	ldrb	r2, [r3, #0]
    bcf8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bcfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd00:	781b      	ldrb	r3, [r3, #0]
    bd02:	4413      	add	r3, r2
    bd04:	b2da      	uxtb	r2, r3
    bd06:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    bd0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd0e:	701a      	strb	r2, [r3, #0]
    bd10:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bd14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd18:	781b      	ldrb	r3, [r3, #0]
    bd1a:	3301      	adds	r3, #1
    bd1c:	b2da      	uxtb	r2, r3
    bd1e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bd22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd26:	701a      	strb	r2, [r3, #0]
    bd28:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bd2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd30:	781b      	ldrb	r3, [r3, #0]
    bd32:	2bff      	cmp	r3, #255	; 0xff
    bd34:	d105      	bne.n	bd42 <send_mode+0x306>
    bd36:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bd3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd3e:	2200      	movs	r2, #0
    bd40:	701a      	strb	r2, [r3, #0]
    bd42:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bd46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd4a:	781b      	ldrb	r3, [r3, #0]
    bd4c:	461a      	mov	r2, r3
    bd4e:	f64a 63bb 	movw	r3, #44731	; 0xaebb
    bd52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd56:	7819      	ldrb	r1, [r3, #0]
    bd58:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    bd5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd60:	5499      	strb	r1, [r3, r2]
    bd62:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bd66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd6a:	781a      	ldrb	r2, [r3, #0]
    bd6c:	f64a 63bb 	movw	r3, #44731	; 0xaebb
    bd70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd74:	781b      	ldrb	r3, [r3, #0]
    bd76:	4413      	add	r3, r2
    bd78:	b2da      	uxtb	r2, r3
    bd7a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bd7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd82:	701a      	strb	r2, [r3, #0]
    bd84:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    bd88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd8c:	781a      	ldrb	r2, [r3, #0]
    bd8e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bd92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd96:	781b      	ldrb	r3, [r3, #0]
    bd98:	4413      	add	r3, r2
    bd9a:	b2da      	uxtb	r2, r3
    bd9c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    bda0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bda4:	701a      	strb	r2, [r3, #0]
    bda6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bdaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdae:	781b      	ldrb	r3, [r3, #0]
    bdb0:	3301      	adds	r3, #1
    bdb2:	b2da      	uxtb	r2, r3
    bdb4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bdb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdbc:	701a      	strb	r2, [r3, #0]
    bdbe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bdc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdc6:	781b      	ldrb	r3, [r3, #0]
    bdc8:	2bff      	cmp	r3, #255	; 0xff
    bdca:	d105      	bne.n	bdd8 <send_mode+0x39c>
    bdcc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bdd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdd4:	2200      	movs	r2, #0
    bdd6:	701a      	strb	r2, [r3, #0]
    bdd8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bde0:	781b      	ldrb	r3, [r3, #0]
    bde2:	461a      	mov	r2, r3
    bde4:	f240 33ec 	movw	r3, #1004	; 0x3ec
    bde8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdec:	7819      	ldrb	r1, [r3, #0]
    bdee:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    bdf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdf6:	5499      	strb	r1, [r3, r2]
    bdf8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    bdfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be00:	781a      	ldrb	r2, [r3, #0]
    be02:	f240 33ec 	movw	r3, #1004	; 0x3ec
    be06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be0a:	781b      	ldrb	r3, [r3, #0]
    be0c:	4413      	add	r3, r2
    be0e:	b2da      	uxtb	r2, r3
    be10:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    be14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be18:	701a      	strb	r2, [r3, #0]
    be1a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    be1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be22:	781a      	ldrb	r2, [r3, #0]
    be24:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    be28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be2c:	781b      	ldrb	r3, [r3, #0]
    be2e:	4413      	add	r3, r2
    be30:	b2da      	uxtb	r2, r3
    be32:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    be36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be3a:	701a      	strb	r2, [r3, #0]
    be3c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    be40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be44:	781b      	ldrb	r3, [r3, #0]
    be46:	3301      	adds	r3, #1
    be48:	b2da      	uxtb	r2, r3
    be4a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    be4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be52:	701a      	strb	r2, [r3, #0]
    be54:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    be58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be5c:	781b      	ldrb	r3, [r3, #0]
    be5e:	2bff      	cmp	r3, #255	; 0xff
    be60:	d105      	bne.n	be6e <send_mode+0x432>
    be62:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    be66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be6a:	2200      	movs	r2, #0
    be6c:	701a      	strb	r2, [r3, #0]
    be6e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    be72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be76:	781b      	ldrb	r3, [r3, #0]
    be78:	461a      	mov	r2, r3
    be7a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    be7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be82:	7819      	ldrb	r1, [r3, #0]
    be84:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    be88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be8c:	5499      	strb	r1, [r3, r2]
    be8e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    be92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be96:	781b      	ldrb	r3, [r3, #0]
    be98:	3301      	adds	r3, #1
    be9a:	b2da      	uxtb	r2, r3
    be9c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bea4:	701a      	strb	r2, [r3, #0]
    bea6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    beaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    beae:	781b      	ldrb	r3, [r3, #0]
    beb0:	2bff      	cmp	r3, #255	; 0xff
    beb2:	d105      	bne.n	bec0 <send_mode+0x484>
    beb4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    beb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bebc:	2200      	movs	r2, #0
    bebe:	701a      	strb	r2, [r3, #0]
    bec0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bec8:	781b      	ldrb	r3, [r3, #0]
    beca:	461a      	mov	r2, r3
    becc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    bed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bed4:	7819      	ldrb	r1, [r3, #0]
    bed6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    beda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bede:	5499      	strb	r1, [r3, r2]
    bee0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bee8:	781b      	ldrb	r3, [r3, #0]
    beea:	3301      	adds	r3, #1
    beec:	b2da      	uxtb	r2, r3
    beee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bef6:	701a      	strb	r2, [r3, #0]
    bef8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    befc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf00:	781b      	ldrb	r3, [r3, #0]
    bf02:	2bff      	cmp	r3, #255	; 0xff
    bf04:	d105      	bne.n	bf12 <send_mode+0x4d6>
    bf06:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    bf0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf0e:	2200      	movs	r2, #0
    bf10:	701a      	strb	r2, [r3, #0]
    bf12:	f242 0339 	movw	r3, #8249	; 0x2039
    bf16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf1a:	781b      	ldrb	r3, [r3, #0]
    bf1c:	b2db      	uxtb	r3, r3
    bf1e:	f003 0310 	and.w	r3, r3, #16
    bf22:	2b00      	cmp	r3, #0
    bf24:	d15a      	bne.n	bfdc <send_mode+0x5a0>
    bf26:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    bf2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf2e:	781b      	ldrb	r3, [r3, #0]
    bf30:	b2db      	uxtb	r3, r3
    bf32:	461a      	mov	r2, r3
    bf34:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    bf38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf3c:	5c9a      	ldrb	r2, [r3, r2]
    bf3e:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    bf42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf46:	701a      	strb	r2, [r3, #0]
    bf48:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    bf4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf50:	2200      	movs	r2, #0
    bf52:	701a      	strb	r2, [r3, #0]
    bf54:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    bf58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf5c:	781b      	ldrb	r3, [r3, #0]
    bf5e:	b2db      	uxtb	r3, r3
    bf60:	3301      	adds	r3, #1
    bf62:	b2da      	uxtb	r2, r3
    bf64:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    bf68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf6c:	701a      	strb	r2, [r3, #0]
    bf6e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    bf72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf76:	781b      	ldrb	r3, [r3, #0]
    bf78:	b2db      	uxtb	r3, r3
    bf7a:	2bff      	cmp	r3, #255	; 0xff
    bf7c:	d105      	bne.n	bf8a <send_mode+0x54e>
    bf7e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    bf82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf86:	2200      	movs	r2, #0
    bf88:	701a      	strb	r2, [r3, #0]
    bf8a:	f242 0338 	movw	r3, #8248	; 0x2038
    bf8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf92:	f242 0238 	movw	r2, #8248	; 0x2038
    bf96:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bf9a:	7812      	ldrb	r2, [r2, #0]
    bf9c:	b2d2      	uxtb	r2, r2
    bf9e:	f042 0201 	orr.w	r2, r2, #1
    bfa2:	b2d2      	uxtb	r2, r2
    bfa4:	701a      	strb	r2, [r3, #0]
    bfa6:	f242 0339 	movw	r3, #8249	; 0x2039
    bfaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfae:	f242 0239 	movw	r2, #8249	; 0x2039
    bfb2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bfb6:	7812      	ldrb	r2, [r2, #0]
    bfb8:	b2d2      	uxtb	r2, r2
    bfba:	f042 0210 	orr.w	r2, r2, #16
    bfbe:	b2d2      	uxtb	r2, r2
    bfc0:	701a      	strb	r2, [r3, #0]
    bfc2:	e00b      	b.n	bfdc <send_mode+0x5a0>
    bfc4:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    bfc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfcc:	781b      	ldrb	r3, [r3, #0]
    bfce:	3301      	adds	r3, #1
    bfd0:	b2da      	uxtb	r2, r3
    bfd2:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    bfd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfda:	701a      	strb	r2, [r3, #0]
}
    bfdc:	46bd      	mov	sp, r7
    bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
    bfe2:	4770      	bx	lr

0000bfe4 <send_debug>:
void send_debug(void){  //5000ms
    bfe4:	b480      	push	{r7}
    bfe6:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    bfe8:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    bfec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bff0:	781a      	ldrb	r2, [r3, #0]
    bff2:	f248 531f 	movw	r3, #34079	; 0x851f
    bff6:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    bffa:	fba3 1302 	umull	r1, r3, r3, r2
    bffe:	091b      	lsrs	r3, r3, #4
    c000:	2132      	movs	r1, #50	; 0x32
    c002:	fb01 f303 	mul.w	r3, r1, r3
    c006:	1ad3      	subs	r3, r2, r3
    c008:	b2db      	uxtb	r3, r3
    c00a:	2b1d      	cmp	r3, #29
    c00c:	f040 82bb 	bne.w	c586 <send_debug+0x5a2>
    c010:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c014:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c018:	781a      	ldrb	r2, [r3, #0]
    c01a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    c01e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c022:	781b      	ldrb	r3, [r3, #0]
    c024:	b2db      	uxtb	r3, r3
    c026:	429a      	cmp	r2, r3
    c028:	d313      	bcc.n	c052 <send_debug+0x6e>
    c02a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    c02e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c032:	781b      	ldrb	r3, [r3, #0]
    c034:	b2db      	uxtb	r3, r3
    c036:	461a      	mov	r2, r3
    c038:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c03c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c040:	781b      	ldrb	r3, [r3, #0]
    c042:	1ad3      	subs	r3, r2, r3
    c044:	33ff      	adds	r3, #255	; 0xff
    c046:	2b09      	cmp	r3, #9
    c048:	bfd4      	ite	le
    c04a:	2300      	movle	r3, #0
    c04c:	2301      	movgt	r3, #1
    c04e:	b2db      	uxtb	r3, r3
    c050:	e011      	b.n	c076 <send_debug+0x92>
    c052:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    c056:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c05a:	781b      	ldrb	r3, [r3, #0]
    c05c:	b2db      	uxtb	r3, r3
    c05e:	461a      	mov	r2, r3
    c060:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c068:	781b      	ldrb	r3, [r3, #0]
    c06a:	1ad3      	subs	r3, r2, r3
    c06c:	2b09      	cmp	r3, #9
    c06e:	bfd4      	ite	le
    c070:	2300      	movle	r3, #0
    c072:	2301      	movgt	r3, #1
    c074:	b2db      	uxtb	r3, r3
    c076:	2b00      	cmp	r3, #0
    c078:	f000 8279 	beq.w	c56e <send_debug+0x58a>
    c07c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c080:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c084:	781b      	ldrb	r3, [r3, #0]
    c086:	461a      	mov	r2, r3
    c088:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c08c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c090:	2105      	movs	r1, #5
    c092:	5499      	strb	r1, [r3, r2]
    c094:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c098:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c09c:	781b      	ldrb	r3, [r3, #0]
    c09e:	3301      	adds	r3, #1
    c0a0:	b2da      	uxtb	r2, r3
    c0a2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c0a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0aa:	701a      	strb	r2, [r3, #0]
    c0ac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c0b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0b4:	781b      	ldrb	r3, [r3, #0]
    c0b6:	2bff      	cmp	r3, #255	; 0xff
    c0b8:	d105      	bne.n	c0c6 <send_debug+0xe2>
    c0ba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c0be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0c2:	2200      	movs	r2, #0
    c0c4:	701a      	strb	r2, [r3, #0]
    c0c6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c0ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0ce:	781b      	ldrb	r3, [r3, #0]
    c0d0:	461a      	mov	r2, r3
    c0d2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c0d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0da:	210d      	movs	r1, #13
    c0dc:	5499      	strb	r1, [r3, r2]
    c0de:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c0e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0e6:	781b      	ldrb	r3, [r3, #0]
    c0e8:	3301      	adds	r3, #1
    c0ea:	b2da      	uxtb	r2, r3
    c0ec:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c0f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0f4:	701a      	strb	r2, [r3, #0]
    c0f6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c0fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0fe:	781b      	ldrb	r3, [r3, #0]
    c100:	2bff      	cmp	r3, #255	; 0xff
    c102:	d105      	bne.n	c110 <send_debug+0x12c>
    c104:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c108:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c10c:	2200      	movs	r2, #0
    c10e:	701a      	strb	r2, [r3, #0]
    c110:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c114:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c118:	220d      	movs	r2, #13
    c11a:	701a      	strb	r2, [r3, #0]
    c11c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c120:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c124:	220d      	movs	r2, #13
    c126:	701a      	strb	r2, [r3, #0]
    c128:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c12c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c130:	781b      	ldrb	r3, [r3, #0]
    c132:	461a      	mov	r2, r3
    c134:	f24b 0307 	movw	r3, #45063	; 0xb007
    c138:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c13c:	781b      	ldrb	r3, [r3, #0]
    c13e:	b2d9      	uxtb	r1, r3
    c140:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c144:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c148:	5499      	strb	r1, [r3, r2]
    c14a:	f24b 0307 	movw	r3, #45063	; 0xb007
    c14e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c152:	781a      	ldrb	r2, [r3, #0]
    c154:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c158:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c15c:	781b      	ldrb	r3, [r3, #0]
    c15e:	4413      	add	r3, r2
    c160:	b2da      	uxtb	r2, r3
    c162:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c166:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c16a:	701a      	strb	r2, [r3, #0]
    c16c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c170:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c174:	781a      	ldrb	r2, [r3, #0]
    c176:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c17a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c17e:	781b      	ldrb	r3, [r3, #0]
    c180:	4413      	add	r3, r2
    c182:	b2da      	uxtb	r2, r3
    c184:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c188:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c18c:	701a      	strb	r2, [r3, #0]
    c18e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c192:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c196:	781b      	ldrb	r3, [r3, #0]
    c198:	3301      	adds	r3, #1
    c19a:	b2da      	uxtb	r2, r3
    c19c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c1a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1a4:	701a      	strb	r2, [r3, #0]
    c1a6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c1aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1ae:	781b      	ldrb	r3, [r3, #0]
    c1b0:	2bff      	cmp	r3, #255	; 0xff
    c1b2:	d105      	bne.n	c1c0 <send_debug+0x1dc>
    c1b4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c1b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1bc:	2200      	movs	r2, #0
    c1be:	701a      	strb	r2, [r3, #0]
    c1c0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c1c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1c8:	781b      	ldrb	r3, [r3, #0]
    c1ca:	461a      	mov	r2, r3
    c1cc:	f24b 0308 	movw	r3, #45064	; 0xb008
    c1d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1d4:	7819      	ldrb	r1, [r3, #0]
    c1d6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c1da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1de:	5499      	strb	r1, [r3, r2]
    c1e0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c1e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1e8:	781a      	ldrb	r2, [r3, #0]
    c1ea:	f24b 0308 	movw	r3, #45064	; 0xb008
    c1ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1f2:	781b      	ldrb	r3, [r3, #0]
    c1f4:	4413      	add	r3, r2
    c1f6:	b2da      	uxtb	r2, r3
    c1f8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c1fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c200:	701a      	strb	r2, [r3, #0]
    c202:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c206:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c20a:	781a      	ldrb	r2, [r3, #0]
    c20c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c210:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c214:	781b      	ldrb	r3, [r3, #0]
    c216:	4413      	add	r3, r2
    c218:	b2da      	uxtb	r2, r3
    c21a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c21e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c222:	701a      	strb	r2, [r3, #0]
    c224:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c228:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c22c:	781b      	ldrb	r3, [r3, #0]
    c22e:	3301      	adds	r3, #1
    c230:	b2da      	uxtb	r2, r3
    c232:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c236:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c23a:	701a      	strb	r2, [r3, #0]
    c23c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c240:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c244:	781b      	ldrb	r3, [r3, #0]
    c246:	2bff      	cmp	r3, #255	; 0xff
    c248:	d105      	bne.n	c256 <send_debug+0x272>
    c24a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c24e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c252:	2200      	movs	r2, #0
    c254:	701a      	strb	r2, [r3, #0]
    c256:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c25a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c25e:	781b      	ldrb	r3, [r3, #0]
    c260:	461a      	mov	r2, r3
    c262:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    c266:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c26a:	7819      	ldrb	r1, [r3, #0]
    c26c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c270:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c274:	5499      	strb	r1, [r3, r2]
    c276:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c27a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c27e:	781a      	ldrb	r2, [r3, #0]
    c280:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    c284:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c288:	781b      	ldrb	r3, [r3, #0]
    c28a:	4413      	add	r3, r2
    c28c:	b2da      	uxtb	r2, r3
    c28e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c296:	701a      	strb	r2, [r3, #0]
    c298:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c29c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2a0:	781a      	ldrb	r2, [r3, #0]
    c2a2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c2a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2aa:	781b      	ldrb	r3, [r3, #0]
    c2ac:	4413      	add	r3, r2
    c2ae:	b2da      	uxtb	r2, r3
    c2b0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c2b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2b8:	701a      	strb	r2, [r3, #0]
    c2ba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c2be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2c2:	781b      	ldrb	r3, [r3, #0]
    c2c4:	3301      	adds	r3, #1
    c2c6:	b2da      	uxtb	r2, r3
    c2c8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c2cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2d0:	701a      	strb	r2, [r3, #0]
    c2d2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c2d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2da:	781b      	ldrb	r3, [r3, #0]
    c2dc:	2bff      	cmp	r3, #255	; 0xff
    c2de:	d105      	bne.n	c2ec <send_debug+0x308>
    c2e0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c2e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2e8:	2200      	movs	r2, #0
    c2ea:	701a      	strb	r2, [r3, #0]
    c2ec:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c2f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2f4:	781b      	ldrb	r3, [r3, #0]
    c2f6:	461a      	mov	r2, r3
    c2f8:	f24b 136f 	movw	r3, #45423	; 0xb16f
    c2fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c300:	7819      	ldrb	r1, [r3, #0]
    c302:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c306:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c30a:	5499      	strb	r1, [r3, r2]
    c30c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c314:	781a      	ldrb	r2, [r3, #0]
    c316:	f24b 136f 	movw	r3, #45423	; 0xb16f
    c31a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c31e:	781b      	ldrb	r3, [r3, #0]
    c320:	4413      	add	r3, r2
    c322:	b2da      	uxtb	r2, r3
    c324:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c328:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c32c:	701a      	strb	r2, [r3, #0]
    c32e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c336:	781a      	ldrb	r2, [r3, #0]
    c338:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c33c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c340:	781b      	ldrb	r3, [r3, #0]
    c342:	4413      	add	r3, r2
    c344:	b2da      	uxtb	r2, r3
    c346:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c34a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c34e:	701a      	strb	r2, [r3, #0]
    c350:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c354:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c358:	781b      	ldrb	r3, [r3, #0]
    c35a:	3301      	adds	r3, #1
    c35c:	b2da      	uxtb	r2, r3
    c35e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c362:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c366:	701a      	strb	r2, [r3, #0]
    c368:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c36c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c370:	781b      	ldrb	r3, [r3, #0]
    c372:	2bff      	cmp	r3, #255	; 0xff
    c374:	d105      	bne.n	c382 <send_debug+0x39e>
    c376:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c37a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c37e:	2200      	movs	r2, #0
    c380:	701a      	strb	r2, [r3, #0]
    c382:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c386:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c38a:	781b      	ldrb	r3, [r3, #0]
    c38c:	461a      	mov	r2, r3
    c38e:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    c392:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c396:	7819      	ldrb	r1, [r3, #0]
    c398:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c39c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3a0:	5499      	strb	r1, [r3, r2]
    c3a2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c3a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3aa:	781a      	ldrb	r2, [r3, #0]
    c3ac:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    c3b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3b4:	781b      	ldrb	r3, [r3, #0]
    c3b6:	4413      	add	r3, r2
    c3b8:	b2da      	uxtb	r2, r3
    c3ba:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c3be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3c2:	701a      	strb	r2, [r3, #0]
    c3c4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c3c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3cc:	781a      	ldrb	r2, [r3, #0]
    c3ce:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c3d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3d6:	781b      	ldrb	r3, [r3, #0]
    c3d8:	4413      	add	r3, r2
    c3da:	b2da      	uxtb	r2, r3
    c3dc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c3e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3e4:	701a      	strb	r2, [r3, #0]
    c3e6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c3ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3ee:	781b      	ldrb	r3, [r3, #0]
    c3f0:	3301      	adds	r3, #1
    c3f2:	b2da      	uxtb	r2, r3
    c3f4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c3f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3fc:	701a      	strb	r2, [r3, #0]
    c3fe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c406:	781b      	ldrb	r3, [r3, #0]
    c408:	2bff      	cmp	r3, #255	; 0xff
    c40a:	d105      	bne.n	c418 <send_debug+0x434>
    c40c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c410:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c414:	2200      	movs	r2, #0
    c416:	701a      	strb	r2, [r3, #0]
    c418:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c41c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c420:	781b      	ldrb	r3, [r3, #0]
    c422:	461a      	mov	r2, r3
    c424:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c428:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c42c:	7819      	ldrb	r1, [r3, #0]
    c42e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c436:	5499      	strb	r1, [r3, r2]
    c438:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c43c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c440:	781b      	ldrb	r3, [r3, #0]
    c442:	3301      	adds	r3, #1
    c444:	b2da      	uxtb	r2, r3
    c446:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c44a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c44e:	701a      	strb	r2, [r3, #0]
    c450:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c454:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c458:	781b      	ldrb	r3, [r3, #0]
    c45a:	2bff      	cmp	r3, #255	; 0xff
    c45c:	d105      	bne.n	c46a <send_debug+0x486>
    c45e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c462:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c466:	2200      	movs	r2, #0
    c468:	701a      	strb	r2, [r3, #0]
    c46a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c46e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c472:	781b      	ldrb	r3, [r3, #0]
    c474:	461a      	mov	r2, r3
    c476:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c47a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c47e:	7819      	ldrb	r1, [r3, #0]
    c480:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c488:	5499      	strb	r1, [r3, r2]
    c48a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c48e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c492:	781b      	ldrb	r3, [r3, #0]
    c494:	3301      	adds	r3, #1
    c496:	b2da      	uxtb	r2, r3
    c498:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c49c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4a0:	701a      	strb	r2, [r3, #0]
    c4a2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c4a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4aa:	781b      	ldrb	r3, [r3, #0]
    c4ac:	2bff      	cmp	r3, #255	; 0xff
    c4ae:	d105      	bne.n	c4bc <send_debug+0x4d8>
    c4b0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c4b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4b8:	2200      	movs	r2, #0
    c4ba:	701a      	strb	r2, [r3, #0]
    c4bc:	f242 0339 	movw	r3, #8249	; 0x2039
    c4c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4c4:	781b      	ldrb	r3, [r3, #0]
    c4c6:	b2db      	uxtb	r3, r3
    c4c8:	f003 0310 	and.w	r3, r3, #16
    c4cc:	2b00      	cmp	r3, #0
    c4ce:	d15a      	bne.n	c586 <send_debug+0x5a2>
    c4d0:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    c4d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4d8:	781b      	ldrb	r3, [r3, #0]
    c4da:	b2db      	uxtb	r3, r3
    c4dc:	461a      	mov	r2, r3
    c4de:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c4e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4e6:	5c9a      	ldrb	r2, [r3, r2]
    c4e8:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    c4ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4f0:	701a      	strb	r2, [r3, #0]
    c4f2:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    c4f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4fa:	2200      	movs	r2, #0
    c4fc:	701a      	strb	r2, [r3, #0]
    c4fe:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    c502:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c506:	781b      	ldrb	r3, [r3, #0]
    c508:	b2db      	uxtb	r3, r3
    c50a:	3301      	adds	r3, #1
    c50c:	b2da      	uxtb	r2, r3
    c50e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    c512:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c516:	701a      	strb	r2, [r3, #0]
    c518:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    c51c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c520:	781b      	ldrb	r3, [r3, #0]
    c522:	b2db      	uxtb	r3, r3
    c524:	2bff      	cmp	r3, #255	; 0xff
    c526:	d105      	bne.n	c534 <send_debug+0x550>
    c528:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    c52c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c530:	2200      	movs	r2, #0
    c532:	701a      	strb	r2, [r3, #0]
    c534:	f242 0338 	movw	r3, #8248	; 0x2038
    c538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c53c:	f242 0238 	movw	r2, #8248	; 0x2038
    c540:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c544:	7812      	ldrb	r2, [r2, #0]
    c546:	b2d2      	uxtb	r2, r2
    c548:	f042 0201 	orr.w	r2, r2, #1
    c54c:	b2d2      	uxtb	r2, r2
    c54e:	701a      	strb	r2, [r3, #0]
    c550:	f242 0339 	movw	r3, #8249	; 0x2039
    c554:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c558:	f242 0239 	movw	r2, #8249	; 0x2039
    c55c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c560:	7812      	ldrb	r2, [r2, #0]
    c562:	b2d2      	uxtb	r2, r2
    c564:	f042 0210 	orr.w	r2, r2, #16
    c568:	b2d2      	uxtb	r2, r2
    c56a:	701a      	strb	r2, [r3, #0]
    c56c:	e00b      	b.n	c586 <send_debug+0x5a2>
    c56e:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    c572:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c576:	781b      	ldrb	r3, [r3, #0]
    c578:	3301      	adds	r3, #1
    c57a:	b2da      	uxtb	r2, r3
    c57c:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    c580:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c584:	701a      	strb	r2, [r3, #0]
}
    c586:	46bd      	mov	sp, r7
    c588:	f85d 7b04 	ldr.w	r7, [sp], #4
    c58c:	4770      	bx	lr
    c58e:	bf00      	nop

0000c590 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    c590:	b480      	push	{r7}
    c592:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    c594:	f64a 63c9 	movw	r3, #44745	; 0xaec9
    c598:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c59c:	781a      	ldrb	r2, [r3, #0]
    c59e:	f248 531f 	movw	r3, #34079	; 0x851f
    c5a2:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c5a6:	fba3 1302 	umull	r1, r3, r3, r2
    c5aa:	095b      	lsrs	r3, r3, #5
    c5ac:	2164      	movs	r1, #100	; 0x64
    c5ae:	fb01 f303 	mul.w	r3, r1, r3
    c5b2:	1ad3      	subs	r3, r2, r3
    c5b4:	b2db      	uxtb	r3, r3
    c5b6:	2b31      	cmp	r3, #49	; 0x31
    c5b8:	f040 8395 	bne.w	cce6 <send_nav_ref+0x756>
    c5bc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c5c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5c4:	781a      	ldrb	r2, [r3, #0]
    c5c6:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    c5ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5ce:	781b      	ldrb	r3, [r3, #0]
    c5d0:	b2db      	uxtb	r3, r3
    c5d2:	429a      	cmp	r2, r3
    c5d4:	d313      	bcc.n	c5fe <send_nav_ref+0x6e>
    c5d6:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    c5da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5de:	781b      	ldrb	r3, [r3, #0]
    c5e0:	b2db      	uxtb	r3, r3
    c5e2:	461a      	mov	r2, r3
    c5e4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c5e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5ec:	781b      	ldrb	r3, [r3, #0]
    c5ee:	1ad3      	subs	r3, r2, r3
    c5f0:	33ff      	adds	r3, #255	; 0xff
    c5f2:	2b0c      	cmp	r3, #12
    c5f4:	bfd4      	ite	le
    c5f6:	2300      	movle	r3, #0
    c5f8:	2301      	movgt	r3, #1
    c5fa:	b2db      	uxtb	r3, r3
    c5fc:	e011      	b.n	c622 <send_nav_ref+0x92>
    c5fe:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    c602:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c606:	781b      	ldrb	r3, [r3, #0]
    c608:	b2db      	uxtb	r3, r3
    c60a:	461a      	mov	r2, r3
    c60c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c614:	781b      	ldrb	r3, [r3, #0]
    c616:	1ad3      	subs	r3, r2, r3
    c618:	2b0c      	cmp	r3, #12
    c61a:	bfd4      	ite	le
    c61c:	2300      	movle	r3, #0
    c61e:	2301      	movgt	r3, #1
    c620:	b2db      	uxtb	r3, r3
    c622:	2b00      	cmp	r3, #0
    c624:	f000 8353 	beq.w	ccce <send_nav_ref+0x73e>
    c628:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c62c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c630:	781b      	ldrb	r3, [r3, #0]
    c632:	461a      	mov	r2, r3
    c634:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c63c:	2105      	movs	r1, #5
    c63e:	5499      	strb	r1, [r3, r2]
    c640:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c644:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c648:	781b      	ldrb	r3, [r3, #0]
    c64a:	3301      	adds	r3, #1
    c64c:	b2da      	uxtb	r2, r3
    c64e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c652:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c656:	701a      	strb	r2, [r3, #0]
    c658:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c65c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c660:	781b      	ldrb	r3, [r3, #0]
    c662:	2bff      	cmp	r3, #255	; 0xff
    c664:	d105      	bne.n	c672 <send_nav_ref+0xe2>
    c666:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c66a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c66e:	2200      	movs	r2, #0
    c670:	701a      	strb	r2, [r3, #0]
    c672:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c676:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c67a:	781b      	ldrb	r3, [r3, #0]
    c67c:	461a      	mov	r2, r3
    c67e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c686:	2109      	movs	r1, #9
    c688:	5499      	strb	r1, [r3, r2]
    c68a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c68e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c692:	781b      	ldrb	r3, [r3, #0]
    c694:	3301      	adds	r3, #1
    c696:	b2da      	uxtb	r2, r3
    c698:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c69c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6a0:	701a      	strb	r2, [r3, #0]
    c6a2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c6a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6aa:	781b      	ldrb	r3, [r3, #0]
    c6ac:	2bff      	cmp	r3, #255	; 0xff
    c6ae:	d105      	bne.n	c6bc <send_nav_ref+0x12c>
    c6b0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c6b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6b8:	2200      	movs	r2, #0
    c6ba:	701a      	strb	r2, [r3, #0]
    c6bc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c6c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6c4:	2209      	movs	r2, #9
    c6c6:	701a      	strb	r2, [r3, #0]
    c6c8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c6cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6d0:	2209      	movs	r2, #9
    c6d2:	701a      	strb	r2, [r3, #0]
    c6d4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c6d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6dc:	781b      	ldrb	r3, [r3, #0]
    c6de:	461a      	mov	r2, r3
    c6e0:	f648 0300 	movw	r3, #34816	; 0x8800
    c6e4:	f2c0 0301 	movt	r3, #1
    c6e8:	7819      	ldrb	r1, [r3, #0]
    c6ea:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c6ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6f2:	5499      	strb	r1, [r3, r2]
    c6f4:	f648 0300 	movw	r3, #34816	; 0x8800
    c6f8:	f2c0 0301 	movt	r3, #1
    c6fc:	781a      	ldrb	r2, [r3, #0]
    c6fe:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c702:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c706:	781b      	ldrb	r3, [r3, #0]
    c708:	4413      	add	r3, r2
    c70a:	b2da      	uxtb	r2, r3
    c70c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c710:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c714:	701a      	strb	r2, [r3, #0]
    c716:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c71a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c71e:	781a      	ldrb	r2, [r3, #0]
    c720:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c728:	781b      	ldrb	r3, [r3, #0]
    c72a:	4413      	add	r3, r2
    c72c:	b2da      	uxtb	r2, r3
    c72e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c732:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c736:	701a      	strb	r2, [r3, #0]
    c738:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c73c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c740:	781b      	ldrb	r3, [r3, #0]
    c742:	3301      	adds	r3, #1
    c744:	b2da      	uxtb	r2, r3
    c746:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c74a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c74e:	701a      	strb	r2, [r3, #0]
    c750:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c754:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c758:	781b      	ldrb	r3, [r3, #0]
    c75a:	2bff      	cmp	r3, #255	; 0xff
    c75c:	d105      	bne.n	c76a <send_nav_ref+0x1da>
    c75e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c762:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c766:	2200      	movs	r2, #0
    c768:	701a      	strb	r2, [r3, #0]
    c76a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c76e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c772:	781b      	ldrb	r3, [r3, #0]
    c774:	461a      	mov	r2, r3
    c776:	f648 0300 	movw	r3, #34816	; 0x8800
    c77a:	f2c0 0301 	movt	r3, #1
    c77e:	7859      	ldrb	r1, [r3, #1]
    c780:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c784:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c788:	5499      	strb	r1, [r3, r2]
    c78a:	4bd2      	ldr	r3, [pc, #840]	; (cad4 <send_nav_ref+0x544>)
    c78c:	781a      	ldrb	r2, [r3, #0]
    c78e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c792:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c796:	781b      	ldrb	r3, [r3, #0]
    c798:	4413      	add	r3, r2
    c79a:	b2da      	uxtb	r2, r3
    c79c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c7a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7a4:	701a      	strb	r2, [r3, #0]
    c7a6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c7aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7ae:	781a      	ldrb	r2, [r3, #0]
    c7b0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c7b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7b8:	781b      	ldrb	r3, [r3, #0]
    c7ba:	4413      	add	r3, r2
    c7bc:	b2da      	uxtb	r2, r3
    c7be:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c7c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7c6:	701a      	strb	r2, [r3, #0]
    c7c8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c7cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7d0:	781b      	ldrb	r3, [r3, #0]
    c7d2:	3301      	adds	r3, #1
    c7d4:	b2da      	uxtb	r2, r3
    c7d6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c7da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7de:	701a      	strb	r2, [r3, #0]
    c7e0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c7e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7e8:	781b      	ldrb	r3, [r3, #0]
    c7ea:	2bff      	cmp	r3, #255	; 0xff
    c7ec:	d105      	bne.n	c7fa <send_nav_ref+0x26a>
    c7ee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c7f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7f6:	2200      	movs	r2, #0
    c7f8:	701a      	strb	r2, [r3, #0]
    c7fa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c7fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c802:	781b      	ldrb	r3, [r3, #0]
    c804:	461a      	mov	r2, r3
    c806:	f648 0300 	movw	r3, #34816	; 0x8800
    c80a:	f2c0 0301 	movt	r3, #1
    c80e:	7899      	ldrb	r1, [r3, #2]
    c810:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c814:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c818:	5499      	strb	r1, [r3, r2]
    c81a:	4baf      	ldr	r3, [pc, #700]	; (cad8 <send_nav_ref+0x548>)
    c81c:	781a      	ldrb	r2, [r3, #0]
    c81e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c822:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c826:	781b      	ldrb	r3, [r3, #0]
    c828:	4413      	add	r3, r2
    c82a:	b2da      	uxtb	r2, r3
    c82c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c830:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c834:	701a      	strb	r2, [r3, #0]
    c836:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c83a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c83e:	781a      	ldrb	r2, [r3, #0]
    c840:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c844:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c848:	781b      	ldrb	r3, [r3, #0]
    c84a:	4413      	add	r3, r2
    c84c:	b2da      	uxtb	r2, r3
    c84e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c852:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c856:	701a      	strb	r2, [r3, #0]
    c858:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c85c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c860:	781b      	ldrb	r3, [r3, #0]
    c862:	3301      	adds	r3, #1
    c864:	b2da      	uxtb	r2, r3
    c866:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c86a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c86e:	701a      	strb	r2, [r3, #0]
    c870:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c874:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c878:	781b      	ldrb	r3, [r3, #0]
    c87a:	2bff      	cmp	r3, #255	; 0xff
    c87c:	d105      	bne.n	c88a <send_nav_ref+0x2fa>
    c87e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c882:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c886:	2200      	movs	r2, #0
    c888:	701a      	strb	r2, [r3, #0]
    c88a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c88e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c892:	781b      	ldrb	r3, [r3, #0]
    c894:	461a      	mov	r2, r3
    c896:	f648 0300 	movw	r3, #34816	; 0x8800
    c89a:	f2c0 0301 	movt	r3, #1
    c89e:	78d9      	ldrb	r1, [r3, #3]
    c8a0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c8a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8a8:	5499      	strb	r1, [r3, r2]
    c8aa:	4b8c      	ldr	r3, [pc, #560]	; (cadc <send_nav_ref+0x54c>)
    c8ac:	781a      	ldrb	r2, [r3, #0]
    c8ae:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c8b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8b6:	781b      	ldrb	r3, [r3, #0]
    c8b8:	4413      	add	r3, r2
    c8ba:	b2da      	uxtb	r2, r3
    c8bc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c8c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8c4:	701a      	strb	r2, [r3, #0]
    c8c6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c8ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8ce:	781a      	ldrb	r2, [r3, #0]
    c8d0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c8d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8d8:	781b      	ldrb	r3, [r3, #0]
    c8da:	4413      	add	r3, r2
    c8dc:	b2da      	uxtb	r2, r3
    c8de:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c8e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8e6:	701a      	strb	r2, [r3, #0]
    c8e8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c8ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8f0:	781b      	ldrb	r3, [r3, #0]
    c8f2:	3301      	adds	r3, #1
    c8f4:	b2da      	uxtb	r2, r3
    c8f6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c8fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8fe:	701a      	strb	r2, [r3, #0]
    c900:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c904:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c908:	781b      	ldrb	r3, [r3, #0]
    c90a:	2bff      	cmp	r3, #255	; 0xff
    c90c:	d105      	bne.n	c91a <send_nav_ref+0x38a>
    c90e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c916:	2200      	movs	r2, #0
    c918:	701a      	strb	r2, [r3, #0]
    c91a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c91e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c922:	781b      	ldrb	r3, [r3, #0]
    c924:	461a      	mov	r2, r3
    c926:	f648 0304 	movw	r3, #34820	; 0x8804
    c92a:	f2c0 0301 	movt	r3, #1
    c92e:	7819      	ldrb	r1, [r3, #0]
    c930:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c938:	5499      	strb	r1, [r3, r2]
    c93a:	f648 0304 	movw	r3, #34820	; 0x8804
    c93e:	f2c0 0301 	movt	r3, #1
    c942:	781a      	ldrb	r2, [r3, #0]
    c944:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c948:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c94c:	781b      	ldrb	r3, [r3, #0]
    c94e:	4413      	add	r3, r2
    c950:	b2da      	uxtb	r2, r3
    c952:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c956:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c95a:	701a      	strb	r2, [r3, #0]
    c95c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c964:	781a      	ldrb	r2, [r3, #0]
    c966:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c96a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c96e:	781b      	ldrb	r3, [r3, #0]
    c970:	4413      	add	r3, r2
    c972:	b2da      	uxtb	r2, r3
    c974:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c978:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c97c:	701a      	strb	r2, [r3, #0]
    c97e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c982:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c986:	781b      	ldrb	r3, [r3, #0]
    c988:	3301      	adds	r3, #1
    c98a:	b2da      	uxtb	r2, r3
    c98c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c990:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c994:	701a      	strb	r2, [r3, #0]
    c996:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c99a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c99e:	781b      	ldrb	r3, [r3, #0]
    c9a0:	2bff      	cmp	r3, #255	; 0xff
    c9a2:	d105      	bne.n	c9b0 <send_nav_ref+0x420>
    c9a4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c9a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9ac:	2200      	movs	r2, #0
    c9ae:	701a      	strb	r2, [r3, #0]
    c9b0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    c9b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9b8:	781b      	ldrb	r3, [r3, #0]
    c9ba:	461a      	mov	r2, r3
    c9bc:	f648 0304 	movw	r3, #34820	; 0x8804
    c9c0:	f2c0 0301 	movt	r3, #1
    c9c4:	7859      	ldrb	r1, [r3, #1]
    c9c6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c9ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9ce:	5499      	strb	r1, [r3, r2]
    c9d0:	4b43      	ldr	r3, [pc, #268]	; (cae0 <send_nav_ref+0x550>)
    c9d2:	781a      	ldrb	r2, [r3, #0]
    c9d4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c9d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9dc:	781b      	ldrb	r3, [r3, #0]
    c9de:	4413      	add	r3, r2
    c9e0:	b2da      	uxtb	r2, r3
    c9e2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c9e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9ea:	701a      	strb	r2, [r3, #0]
    c9ec:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    c9f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9f4:	781a      	ldrb	r2, [r3, #0]
    c9f6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    c9fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9fe:	781b      	ldrb	r3, [r3, #0]
    ca00:	4413      	add	r3, r2
    ca02:	b2da      	uxtb	r2, r3
    ca04:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ca08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca0c:	701a      	strb	r2, [r3, #0]
    ca0e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ca12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca16:	781b      	ldrb	r3, [r3, #0]
    ca18:	3301      	adds	r3, #1
    ca1a:	b2da      	uxtb	r2, r3
    ca1c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ca20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca24:	701a      	strb	r2, [r3, #0]
    ca26:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ca2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca2e:	781b      	ldrb	r3, [r3, #0]
    ca30:	2bff      	cmp	r3, #255	; 0xff
    ca32:	d105      	bne.n	ca40 <send_nav_ref+0x4b0>
    ca34:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ca38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca3c:	2200      	movs	r2, #0
    ca3e:	701a      	strb	r2, [r3, #0]
    ca40:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ca44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca48:	781b      	ldrb	r3, [r3, #0]
    ca4a:	461a      	mov	r2, r3
    ca4c:	f648 0304 	movw	r3, #34820	; 0x8804
    ca50:	f2c0 0301 	movt	r3, #1
    ca54:	7899      	ldrb	r1, [r3, #2]
    ca56:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ca5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca5e:	5499      	strb	r1, [r3, r2]
    ca60:	4b20      	ldr	r3, [pc, #128]	; (cae4 <send_nav_ref+0x554>)
    ca62:	781a      	ldrb	r2, [r3, #0]
    ca64:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ca68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca6c:	781b      	ldrb	r3, [r3, #0]
    ca6e:	4413      	add	r3, r2
    ca70:	b2da      	uxtb	r2, r3
    ca72:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ca76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca7a:	701a      	strb	r2, [r3, #0]
    ca7c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ca80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca84:	781a      	ldrb	r2, [r3, #0]
    ca86:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ca8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca8e:	781b      	ldrb	r3, [r3, #0]
    ca90:	4413      	add	r3, r2
    ca92:	b2da      	uxtb	r2, r3
    ca94:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ca98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca9c:	701a      	strb	r2, [r3, #0]
    ca9e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    caa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    caa6:	781b      	ldrb	r3, [r3, #0]
    caa8:	3301      	adds	r3, #1
    caaa:	b2da      	uxtb	r2, r3
    caac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cab4:	701a      	strb	r2, [r3, #0]
    cab6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    caba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cabe:	781b      	ldrb	r3, [r3, #0]
    cac0:	2bff      	cmp	r3, #255	; 0xff
    cac2:	d111      	bne.n	cae8 <send_nav_ref+0x558>
    cac4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cacc:	2200      	movs	r2, #0
    cace:	701a      	strb	r2, [r3, #0]
    cad0:	e00a      	b.n	cae8 <send_nav_ref+0x558>
    cad2:	bf00      	nop
    cad4:	00018801 	.word	0x00018801
    cad8:	00018802 	.word	0x00018802
    cadc:	00018803 	.word	0x00018803
    cae0:	00018805 	.word	0x00018805
    cae4:	00018806 	.word	0x00018806
    cae8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    caec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    caf0:	781b      	ldrb	r3, [r3, #0]
    caf2:	461a      	mov	r2, r3
    caf4:	f648 0304 	movw	r3, #34820	; 0x8804
    caf8:	f2c0 0301 	movt	r3, #1
    cafc:	78d9      	ldrb	r1, [r3, #3]
    cafe:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    cb02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb06:	5499      	strb	r1, [r3, r2]
    cb08:	4b79      	ldr	r3, [pc, #484]	; (ccf0 <send_nav_ref+0x760>)
    cb0a:	781a      	ldrb	r2, [r3, #0]
    cb0c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    cb10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb14:	781b      	ldrb	r3, [r3, #0]
    cb16:	4413      	add	r3, r2
    cb18:	b2da      	uxtb	r2, r3
    cb1a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    cb1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb22:	701a      	strb	r2, [r3, #0]
    cb24:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    cb28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb2c:	781a      	ldrb	r2, [r3, #0]
    cb2e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    cb32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb36:	781b      	ldrb	r3, [r3, #0]
    cb38:	4413      	add	r3, r2
    cb3a:	b2da      	uxtb	r2, r3
    cb3c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    cb40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb44:	701a      	strb	r2, [r3, #0]
    cb46:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cb4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb4e:	781b      	ldrb	r3, [r3, #0]
    cb50:	3301      	adds	r3, #1
    cb52:	b2da      	uxtb	r2, r3
    cb54:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cb58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb5c:	701a      	strb	r2, [r3, #0]
    cb5e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cb62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb66:	781b      	ldrb	r3, [r3, #0]
    cb68:	2bff      	cmp	r3, #255	; 0xff
    cb6a:	d105      	bne.n	cb78 <send_nav_ref+0x5e8>
    cb6c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cb70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb74:	2200      	movs	r2, #0
    cb76:	701a      	strb	r2, [r3, #0]
    cb78:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cb7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb80:	781b      	ldrb	r3, [r3, #0]
    cb82:	461a      	mov	r2, r3
    cb84:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    cb88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb8c:	7819      	ldrb	r1, [r3, #0]
    cb8e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    cb92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb96:	5499      	strb	r1, [r3, r2]
    cb98:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cb9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cba0:	781b      	ldrb	r3, [r3, #0]
    cba2:	3301      	adds	r3, #1
    cba4:	b2da      	uxtb	r2, r3
    cba6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cbaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbae:	701a      	strb	r2, [r3, #0]
    cbb0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cbb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbb8:	781b      	ldrb	r3, [r3, #0]
    cbba:	2bff      	cmp	r3, #255	; 0xff
    cbbc:	d105      	bne.n	cbca <send_nav_ref+0x63a>
    cbbe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cbc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbc6:	2200      	movs	r2, #0
    cbc8:	701a      	strb	r2, [r3, #0]
    cbca:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cbce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbd2:	781b      	ldrb	r3, [r3, #0]
    cbd4:	461a      	mov	r2, r3
    cbd6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    cbda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbde:	7819      	ldrb	r1, [r3, #0]
    cbe0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    cbe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbe8:	5499      	strb	r1, [r3, r2]
    cbea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cbee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbf2:	781b      	ldrb	r3, [r3, #0]
    cbf4:	3301      	adds	r3, #1
    cbf6:	b2da      	uxtb	r2, r3
    cbf8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cbfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc00:	701a      	strb	r2, [r3, #0]
    cc02:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cc06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc0a:	781b      	ldrb	r3, [r3, #0]
    cc0c:	2bff      	cmp	r3, #255	; 0xff
    cc0e:	d105      	bne.n	cc1c <send_nav_ref+0x68c>
    cc10:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cc14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc18:	2200      	movs	r2, #0
    cc1a:	701a      	strb	r2, [r3, #0]
    cc1c:	f242 0339 	movw	r3, #8249	; 0x2039
    cc20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc24:	781b      	ldrb	r3, [r3, #0]
    cc26:	b2db      	uxtb	r3, r3
    cc28:	f003 0310 	and.w	r3, r3, #16
    cc2c:	2b00      	cmp	r3, #0
    cc2e:	d15a      	bne.n	cce6 <send_nav_ref+0x756>
    cc30:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    cc34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc38:	781b      	ldrb	r3, [r3, #0]
    cc3a:	b2db      	uxtb	r3, r3
    cc3c:	461a      	mov	r2, r3
    cc3e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    cc42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc46:	5c9a      	ldrb	r2, [r3, r2]
    cc48:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    cc4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc50:	701a      	strb	r2, [r3, #0]
    cc52:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    cc56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc5a:	2200      	movs	r2, #0
    cc5c:	701a      	strb	r2, [r3, #0]
    cc5e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    cc62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc66:	781b      	ldrb	r3, [r3, #0]
    cc68:	b2db      	uxtb	r3, r3
    cc6a:	3301      	adds	r3, #1
    cc6c:	b2da      	uxtb	r2, r3
    cc6e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    cc72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc76:	701a      	strb	r2, [r3, #0]
    cc78:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    cc7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc80:	781b      	ldrb	r3, [r3, #0]
    cc82:	b2db      	uxtb	r3, r3
    cc84:	2bff      	cmp	r3, #255	; 0xff
    cc86:	d105      	bne.n	cc94 <send_nav_ref+0x704>
    cc88:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    cc8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc90:	2200      	movs	r2, #0
    cc92:	701a      	strb	r2, [r3, #0]
    cc94:	f242 0338 	movw	r3, #8248	; 0x2038
    cc98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc9c:	f242 0238 	movw	r2, #8248	; 0x2038
    cca0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    cca4:	7812      	ldrb	r2, [r2, #0]
    cca6:	b2d2      	uxtb	r2, r2
    cca8:	f042 0201 	orr.w	r2, r2, #1
    ccac:	b2d2      	uxtb	r2, r2
    ccae:	701a      	strb	r2, [r3, #0]
    ccb0:	f242 0339 	movw	r3, #8249	; 0x2039
    ccb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccb8:	f242 0239 	movw	r2, #8249	; 0x2039
    ccbc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ccc0:	7812      	ldrb	r2, [r2, #0]
    ccc2:	b2d2      	uxtb	r2, r2
    ccc4:	f042 0210 	orr.w	r2, r2, #16
    ccc8:	b2d2      	uxtb	r2, r2
    ccca:	701a      	strb	r2, [r3, #0]
    cccc:	e00b      	b.n	cce6 <send_nav_ref+0x756>
    ccce:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    ccd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccd6:	781b      	ldrb	r3, [r3, #0]
    ccd8:	3301      	adds	r3, #1
    ccda:	b2da      	uxtb	r2, r3
    ccdc:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    cce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cce4:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    cce6:	46bd      	mov	sp, r7
    cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
    ccec:	4770      	bx	lr
    ccee:	bf00      	nop
    ccf0:	00018807 	.word	0x00018807

0000ccf4 <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    ccf4:	b480      	push	{r7}
    ccf6:	b083      	sub	sp, #12
    ccf8:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    ccfa:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    ccfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd02:	8a1b      	ldrh	r3, [r3, #16]
    cd04:	b21b      	sxth	r3, r3
    cd06:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    cd0a:	db0d      	blt.n	cd28 <inflight_calib_mode_update+0x34>
    cd0c:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    cd10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd14:	8a1b      	ldrh	r3, [r3, #16]
    cd16:	b21a      	sxth	r2, r3
    cd18:	f640 437f 	movw	r3, #3199	; 0xc7f
    cd1c:	429a      	cmp	r2, r3
    cd1e:	bfd4      	ite	le
    cd20:	2300      	movle	r3, #0
    cd22:	2301      	movgt	r3, #1
    cd24:	b2db      	uxtb	r3, r3
    cd26:	e000      	b.n	cd2a <inflight_calib_mode_update+0x36>
    cd28:	2302      	movs	r3, #2
    cd2a:	71fb      	strb	r3, [r7, #7]
    cd2c:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    cd30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd34:	781b      	ldrb	r3, [r3, #0]
    cd36:	79fa      	ldrb	r2, [r7, #7]
    cd38:	429a      	cmp	r2, r3
    cd3a:	d007      	beq.n	cd4c <inflight_calib_mode_update+0x58>
    cd3c:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    cd40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd44:	79fa      	ldrb	r2, [r7, #7]
    cd46:	701a      	strb	r2, [r3, #0]
    cd48:	2301      	movs	r3, #1
    cd4a:	e000      	b.n	cd4e <inflight_calib_mode_update+0x5a>
    cd4c:	2300      	movs	r3, #0
}
    cd4e:	4618      	mov	r0, r3
    cd50:	370c      	adds	r7, #12
    cd52:	46bd      	mov	sp, r7
    cd54:	f85d 7b04 	ldr.w	r7, [sp], #4
    cd58:	4770      	bx	lr
    cd5a:	bf00      	nop

0000cd5c <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    cd5c:	b580      	push	{r7, lr}
    cd5e:	b082      	sub	sp, #8
    cd60:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    cd62:	f24b 0306 	movw	r3, #45062	; 0xb006
    cd66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd6a:	2201      	movs	r2, #1
    cd6c:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    cd6e:	f24b 0306 	movw	r3, #45062	; 0xb006
    cd72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd76:	781b      	ldrb	r3, [r3, #0]
    cd78:	b2db      	uxtb	r3, r3
    cd7a:	2b00      	cmp	r3, #0
    cd7c:	f000 83b8 	beq.w	d4f0 <radio_control_task+0x794>
    uint8_t mode_changed = FALSE;
    cd80:	2300      	movs	r3, #0
    cd82:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    cd84:	f7fa fa9c 	bl	72c0 <copy_from_to_fbw>
    if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) {
    cd88:	4b3a      	ldr	r3, [pc, #232]	; (ce74 <radio_control_task+0x118>)
    cd8a:	781b      	ldrb	r3, [r3, #0]
    cd8c:	b2db      	uxtb	r3, r3
    cd8e:	f003 0302 	and.w	r3, r3, #2
    cd92:	2b00      	cmp	r3, #0
    cd94:	d00d      	beq.n	cdb2 <radio_control_task+0x56>
    cd96:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    cd9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd9e:	781b      	ldrb	r3, [r3, #0]
    cda0:	2b01      	cmp	r3, #1
    cda2:	d00d      	beq.n	cdc0 <radio_control_task+0x64>
    cda4:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    cda8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdac:	781b      	ldrb	r3, [r3, #0]
    cdae:	2b00      	cmp	r3, #0
    cdb0:	d006      	beq.n	cdc0 <radio_control_task+0x64>
    cdb2:	f24b 2364 	movw	r3, #45668	; 0xb264
    cdb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdba:	781b      	ldrb	r3, [r3, #0]
    cdbc:	2b00      	cmp	r3, #0
    cdbe:	d007      	beq.n	cdd0 <radio_control_task+0x74>
      pprz_mode = PPRZ_MODE_HOME;
    cdc0:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    cdc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdc8:	2203      	movs	r2, #3
    cdca:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    cdcc:	2301      	movs	r3, #1
    cdce:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    //if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    cdd0:	f7fa f950 	bl	7074 <pprz_mode_update>
    cdd4:	4603      	mov	r3, r0
    cdd6:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    cdd8:	79fa      	ldrb	r2, [r7, #7]
    cdda:	79bb      	ldrb	r3, [r7, #6]
    cddc:	4313      	orrs	r3, r2
    cdde:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    cde0:	f7fa f994 	bl	710c <ir_estim_mode_update>
    cde4:	4603      	mov	r3, r0
    cde6:	461a      	mov	r2, r3
    cde8:	79fb      	ldrb	r3, [r7, #7]
    cdea:	4313      	orrs	r3, r2
    cdec:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    cdee:	f7ff ff81 	bl	ccf4 <inflight_calib_mode_update>
    cdf2:	4603      	mov	r3, r0
    cdf4:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    cdf6:	797b      	ldrb	r3, [r7, #5]
    cdf8:	2b00      	cmp	r3, #0
    cdfa:	d102      	bne.n	ce02 <radio_control_task+0xa6>
    cdfc:	79bb      	ldrb	r3, [r7, #6]
    cdfe:	2b00      	cmp	r3, #0
    ce00:	d001      	beq.n	ce06 <radio_control_task+0xaa>
    ce02:	2301      	movs	r3, #1
    ce04:	e000      	b.n	ce08 <radio_control_task+0xac>
    ce06:	2300      	movs	r3, #0
    ce08:	b2db      	uxtb	r3, r3
    ce0a:	4618      	mov	r0, r3
    ce0c:	f008 fba0 	bl	15550 <inflight_calib>
      mode_changed |= calib_mode_changed;
    ce10:	79fa      	ldrb	r2, [r7, #7]
    ce12:	797b      	ldrb	r3, [r7, #5]
    ce14:	4313      	orrs	r3, r2
    ce16:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    ce18:	f7fa f9a0 	bl	715c <mcu1_status_update>
    ce1c:	4603      	mov	r3, r0
    ce1e:	461a      	mov	r2, r3
    ce20:	79fb      	ldrb	r3, [r7, #7]
    ce22:	4313      	orrs	r3, r2
    ce24:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    ce26:	2301      	movs	r3, #1
    ce28:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    ce2a:	79fb      	ldrb	r3, [r7, #7]
    ce2c:	2b00      	cmp	r3, #0
    ce2e:	f000 82bc 	beq.w	d3aa <radio_control_task+0x64e>
      DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
    ce32:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ce36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce3a:	781a      	ldrb	r2, [r3, #0]
    ce3c:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    ce40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce44:	781b      	ldrb	r3, [r3, #0]
    ce46:	b2db      	uxtb	r3, r3
    ce48:	429a      	cmp	r2, r3
    ce4a:	d315      	bcc.n	ce78 <radio_control_task+0x11c>
    ce4c:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    ce50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce54:	781b      	ldrb	r3, [r3, #0]
    ce56:	b2db      	uxtb	r3, r3
    ce58:	461a      	mov	r2, r3
    ce5a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ce5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce62:	781b      	ldrb	r3, [r3, #0]
    ce64:	1ad3      	subs	r3, r2, r3
    ce66:	33ff      	adds	r3, #255	; 0xff
    ce68:	2b09      	cmp	r3, #9
    ce6a:	bfd4      	ite	le
    ce6c:	2300      	movle	r3, #0
    ce6e:	2301      	movgt	r3, #1
    ce70:	b2db      	uxtb	r3, r3
    ce72:	e013      	b.n	ce9c <radio_control_task+0x140>
    ce74:	2000afeb 	.word	0x2000afeb
    ce78:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    ce7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce80:	781b      	ldrb	r3, [r3, #0]
    ce82:	b2db      	uxtb	r3, r3
    ce84:	461a      	mov	r2, r3
    ce86:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ce8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce8e:	781b      	ldrb	r3, [r3, #0]
    ce90:	1ad3      	subs	r3, r2, r3
    ce92:	2b09      	cmp	r3, #9
    ce94:	bfd4      	ite	le
    ce96:	2300      	movle	r3, #0
    ce98:	2301      	movgt	r3, #1
    ce9a:	b2db      	uxtb	r3, r3
    ce9c:	2b00      	cmp	r3, #0
    ce9e:	f000 8278 	beq.w	d392 <radio_control_task+0x636>
    cea2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ceaa:	781b      	ldrb	r3, [r3, #0]
    ceac:	461a      	mov	r2, r3
    ceae:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ceb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ceb6:	2105      	movs	r1, #5
    ceb8:	5499      	strb	r1, [r3, r2]
    ceba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cec2:	781b      	ldrb	r3, [r3, #0]
    cec4:	3301      	adds	r3, #1
    cec6:	b2da      	uxtb	r2, r3
    cec8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cecc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ced0:	701a      	strb	r2, [r3, #0]
    ced2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ced6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ceda:	781b      	ldrb	r3, [r3, #0]
    cedc:	2bff      	cmp	r3, #255	; 0xff
    cede:	d105      	bne.n	ceec <radio_control_task+0x190>
    cee0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cee8:	2200      	movs	r2, #0
    ceea:	701a      	strb	r2, [r3, #0]
    ceec:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cef4:	781b      	ldrb	r3, [r3, #0]
    cef6:	461a      	mov	r2, r3
    cef8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    cefc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf00:	210b      	movs	r1, #11
    cf02:	5499      	strb	r1, [r3, r2]
    cf04:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cf08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf0c:	781b      	ldrb	r3, [r3, #0]
    cf0e:	3301      	adds	r3, #1
    cf10:	b2da      	uxtb	r2, r3
    cf12:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cf16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf1a:	701a      	strb	r2, [r3, #0]
    cf1c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cf20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf24:	781b      	ldrb	r3, [r3, #0]
    cf26:	2bff      	cmp	r3, #255	; 0xff
    cf28:	d105      	bne.n	cf36 <radio_control_task+0x1da>
    cf2a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cf2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf32:	2200      	movs	r2, #0
    cf34:	701a      	strb	r2, [r3, #0]
    cf36:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    cf3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf3e:	220b      	movs	r2, #11
    cf40:	701a      	strb	r2, [r3, #0]
    cf42:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    cf46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf4a:	220b      	movs	r2, #11
    cf4c:	701a      	strb	r2, [r3, #0]
    cf4e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cf52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf56:	781b      	ldrb	r3, [r3, #0]
    cf58:	461a      	mov	r2, r3
    cf5a:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    cf5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf62:	7819      	ldrb	r1, [r3, #0]
    cf64:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    cf68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf6c:	5499      	strb	r1, [r3, r2]
    cf6e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    cf72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf76:	781a      	ldrb	r2, [r3, #0]
    cf78:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    cf7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf80:	781b      	ldrb	r3, [r3, #0]
    cf82:	4413      	add	r3, r2
    cf84:	b2da      	uxtb	r2, r3
    cf86:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    cf8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf8e:	701a      	strb	r2, [r3, #0]
    cf90:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    cf94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf98:	781a      	ldrb	r2, [r3, #0]
    cf9a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    cf9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfa2:	781b      	ldrb	r3, [r3, #0]
    cfa4:	4413      	add	r3, r2
    cfa6:	b2da      	uxtb	r2, r3
    cfa8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    cfac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfb0:	701a      	strb	r2, [r3, #0]
    cfb2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cfb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfba:	781b      	ldrb	r3, [r3, #0]
    cfbc:	3301      	adds	r3, #1
    cfbe:	b2da      	uxtb	r2, r3
    cfc0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cfc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfc8:	701a      	strb	r2, [r3, #0]
    cfca:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cfce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfd2:	781b      	ldrb	r3, [r3, #0]
    cfd4:	2bff      	cmp	r3, #255	; 0xff
    cfd6:	d105      	bne.n	cfe4 <radio_control_task+0x288>
    cfd8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cfdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfe0:	2200      	movs	r2, #0
    cfe2:	701a      	strb	r2, [r3, #0]
    cfe4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    cfe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfec:	781b      	ldrb	r3, [r3, #0]
    cfee:	461a      	mov	r2, r3
    cff0:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
    cff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cff8:	7819      	ldrb	r1, [r3, #0]
    cffa:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    cffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d002:	5499      	strb	r1, [r3, r2]
    d004:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d008:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d00c:	781a      	ldrb	r2, [r3, #0]
    d00e:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
    d012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d016:	781b      	ldrb	r3, [r3, #0]
    d018:	4413      	add	r3, r2
    d01a:	b2da      	uxtb	r2, r3
    d01c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d020:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d024:	701a      	strb	r2, [r3, #0]
    d026:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d02a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d02e:	781a      	ldrb	r2, [r3, #0]
    d030:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d038:	781b      	ldrb	r3, [r3, #0]
    d03a:	4413      	add	r3, r2
    d03c:	b2da      	uxtb	r2, r3
    d03e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d042:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d046:	701a      	strb	r2, [r3, #0]
    d048:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d04c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d050:	781b      	ldrb	r3, [r3, #0]
    d052:	3301      	adds	r3, #1
    d054:	b2da      	uxtb	r2, r3
    d056:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d05a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d05e:	701a      	strb	r2, [r3, #0]
    d060:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d068:	781b      	ldrb	r3, [r3, #0]
    d06a:	2bff      	cmp	r3, #255	; 0xff
    d06c:	d105      	bne.n	d07a <radio_control_task+0x31e>
    d06e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d072:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d076:	2200      	movs	r2, #0
    d078:	701a      	strb	r2, [r3, #0]
    d07a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d07e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d082:	781b      	ldrb	r3, [r3, #0]
    d084:	461a      	mov	r2, r3
    d086:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    d08a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d08e:	7819      	ldrb	r1, [r3, #0]
    d090:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d094:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d098:	5499      	strb	r1, [r3, r2]
    d09a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d09e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0a2:	781a      	ldrb	r2, [r3, #0]
    d0a4:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    d0a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0ac:	781b      	ldrb	r3, [r3, #0]
    d0ae:	4413      	add	r3, r2
    d0b0:	b2da      	uxtb	r2, r3
    d0b2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d0b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0ba:	701a      	strb	r2, [r3, #0]
    d0bc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d0c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0c4:	781a      	ldrb	r2, [r3, #0]
    d0c6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d0ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0ce:	781b      	ldrb	r3, [r3, #0]
    d0d0:	4413      	add	r3, r2
    d0d2:	b2da      	uxtb	r2, r3
    d0d4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d0d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0dc:	701a      	strb	r2, [r3, #0]
    d0de:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d0e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0e6:	781b      	ldrb	r3, [r3, #0]
    d0e8:	3301      	adds	r3, #1
    d0ea:	b2da      	uxtb	r2, r3
    d0ec:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d0f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0f4:	701a      	strb	r2, [r3, #0]
    d0f6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d0fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0fe:	781b      	ldrb	r3, [r3, #0]
    d100:	2bff      	cmp	r3, #255	; 0xff
    d102:	d105      	bne.n	d110 <radio_control_task+0x3b4>
    d104:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d108:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d10c:	2200      	movs	r2, #0
    d10e:	701a      	strb	r2, [r3, #0]
    d110:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d114:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d118:	781b      	ldrb	r3, [r3, #0]
    d11a:	461a      	mov	r2, r3
    d11c:	f64a 63bb 	movw	r3, #44731	; 0xaebb
    d120:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d124:	7819      	ldrb	r1, [r3, #0]
    d126:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d12a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d12e:	5499      	strb	r1, [r3, r2]
    d130:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d134:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d138:	781a      	ldrb	r2, [r3, #0]
    d13a:	f64a 63bb 	movw	r3, #44731	; 0xaebb
    d13e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d142:	781b      	ldrb	r3, [r3, #0]
    d144:	4413      	add	r3, r2
    d146:	b2da      	uxtb	r2, r3
    d148:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d14c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d150:	701a      	strb	r2, [r3, #0]
    d152:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d156:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d15a:	781a      	ldrb	r2, [r3, #0]
    d15c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d160:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d164:	781b      	ldrb	r3, [r3, #0]
    d166:	4413      	add	r3, r2
    d168:	b2da      	uxtb	r2, r3
    d16a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d16e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d172:	701a      	strb	r2, [r3, #0]
    d174:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d178:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d17c:	781b      	ldrb	r3, [r3, #0]
    d17e:	3301      	adds	r3, #1
    d180:	b2da      	uxtb	r2, r3
    d182:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d186:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d18a:	701a      	strb	r2, [r3, #0]
    d18c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d190:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d194:	781b      	ldrb	r3, [r3, #0]
    d196:	2bff      	cmp	r3, #255	; 0xff
    d198:	d105      	bne.n	d1a6 <radio_control_task+0x44a>
    d19a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d19e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1a2:	2200      	movs	r2, #0
    d1a4:	701a      	strb	r2, [r3, #0]
    d1a6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d1aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1ae:	781b      	ldrb	r3, [r3, #0]
    d1b0:	461a      	mov	r2, r3
    d1b2:	f240 33ec 	movw	r3, #1004	; 0x3ec
    d1b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1ba:	7819      	ldrb	r1, [r3, #0]
    d1bc:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d1c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1c4:	5499      	strb	r1, [r3, r2]
    d1c6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d1ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1ce:	781a      	ldrb	r2, [r3, #0]
    d1d0:	f240 33ec 	movw	r3, #1004	; 0x3ec
    d1d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1d8:	781b      	ldrb	r3, [r3, #0]
    d1da:	4413      	add	r3, r2
    d1dc:	b2da      	uxtb	r2, r3
    d1de:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d1e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1e6:	701a      	strb	r2, [r3, #0]
    d1e8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d1ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1f0:	781a      	ldrb	r2, [r3, #0]
    d1f2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d1f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1fa:	781b      	ldrb	r3, [r3, #0]
    d1fc:	4413      	add	r3, r2
    d1fe:	b2da      	uxtb	r2, r3
    d200:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d204:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d208:	701a      	strb	r2, [r3, #0]
    d20a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d20e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d212:	781b      	ldrb	r3, [r3, #0]
    d214:	3301      	adds	r3, #1
    d216:	b2da      	uxtb	r2, r3
    d218:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d21c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d220:	701a      	strb	r2, [r3, #0]
    d222:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d22a:	781b      	ldrb	r3, [r3, #0]
    d22c:	2bff      	cmp	r3, #255	; 0xff
    d22e:	d105      	bne.n	d23c <radio_control_task+0x4e0>
    d230:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d238:	2200      	movs	r2, #0
    d23a:	701a      	strb	r2, [r3, #0]
    d23c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d240:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d244:	781b      	ldrb	r3, [r3, #0]
    d246:	461a      	mov	r2, r3
    d248:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d24c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d250:	7819      	ldrb	r1, [r3, #0]
    d252:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d25a:	5499      	strb	r1, [r3, r2]
    d25c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d260:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d264:	781b      	ldrb	r3, [r3, #0]
    d266:	3301      	adds	r3, #1
    d268:	b2da      	uxtb	r2, r3
    d26a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d26e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d272:	701a      	strb	r2, [r3, #0]
    d274:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d278:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d27c:	781b      	ldrb	r3, [r3, #0]
    d27e:	2bff      	cmp	r3, #255	; 0xff
    d280:	d105      	bne.n	d28e <radio_control_task+0x532>
    d282:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d286:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d28a:	2200      	movs	r2, #0
    d28c:	701a      	strb	r2, [r3, #0]
    d28e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d296:	781b      	ldrb	r3, [r3, #0]
    d298:	461a      	mov	r2, r3
    d29a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d29e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2a2:	7819      	ldrb	r1, [r3, #0]
    d2a4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d2a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2ac:	5499      	strb	r1, [r3, r2]
    d2ae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d2b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2b6:	781b      	ldrb	r3, [r3, #0]
    d2b8:	3301      	adds	r3, #1
    d2ba:	b2da      	uxtb	r2, r3
    d2bc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d2c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2c4:	701a      	strb	r2, [r3, #0]
    d2c6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d2ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2ce:	781b      	ldrb	r3, [r3, #0]
    d2d0:	2bff      	cmp	r3, #255	; 0xff
    d2d2:	d105      	bne.n	d2e0 <radio_control_task+0x584>
    d2d4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d2d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2dc:	2200      	movs	r2, #0
    d2de:	701a      	strb	r2, [r3, #0]
    d2e0:	f242 0339 	movw	r3, #8249	; 0x2039
    d2e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2e8:	781b      	ldrb	r3, [r3, #0]
    d2ea:	b2db      	uxtb	r3, r3
    d2ec:	f003 0310 	and.w	r3, r3, #16
    d2f0:	2b00      	cmp	r3, #0
    d2f2:	d15a      	bne.n	d3aa <radio_control_task+0x64e>
    d2f4:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    d2f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2fc:	781b      	ldrb	r3, [r3, #0]
    d2fe:	b2db      	uxtb	r3, r3
    d300:	461a      	mov	r2, r3
    d302:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d306:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d30a:	5c9a      	ldrb	r2, [r3, r2]
    d30c:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    d310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d314:	701a      	strb	r2, [r3, #0]
    d316:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    d31a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d31e:	2200      	movs	r2, #0
    d320:	701a      	strb	r2, [r3, #0]
    d322:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    d326:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d32a:	781b      	ldrb	r3, [r3, #0]
    d32c:	b2db      	uxtb	r3, r3
    d32e:	3301      	adds	r3, #1
    d330:	b2da      	uxtb	r2, r3
    d332:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    d336:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d33a:	701a      	strb	r2, [r3, #0]
    d33c:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    d340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d344:	781b      	ldrb	r3, [r3, #0]
    d346:	b2db      	uxtb	r3, r3
    d348:	2bff      	cmp	r3, #255	; 0xff
    d34a:	d105      	bne.n	d358 <radio_control_task+0x5fc>
    d34c:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    d350:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d354:	2200      	movs	r2, #0
    d356:	701a      	strb	r2, [r3, #0]
    d358:	f242 0338 	movw	r3, #8248	; 0x2038
    d35c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d360:	f242 0238 	movw	r2, #8248	; 0x2038
    d364:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d368:	7812      	ldrb	r2, [r2, #0]
    d36a:	b2d2      	uxtb	r2, r2
    d36c:	f042 0201 	orr.w	r2, r2, #1
    d370:	b2d2      	uxtb	r2, r2
    d372:	701a      	strb	r2, [r3, #0]
    d374:	f242 0339 	movw	r3, #8249	; 0x2039
    d378:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d37c:	f242 0239 	movw	r2, #8249	; 0x2039
    d380:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d384:	7812      	ldrb	r2, [r2, #0]
    d386:	b2d2      	uxtb	r2, r2
    d388:	f042 0210 	orr.w	r2, r2, #16
    d38c:	b2d2      	uxtb	r2, r2
    d38e:	701a      	strb	r2, [r3, #0]
    d390:	e00b      	b.n	d3aa <radio_control_task+0x64e>
    d392:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    d396:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d39a:	781b      	ldrb	r3, [r3, #0]
    d39c:	3301      	adds	r3, #1
    d39e:	b2da      	uxtb	r2, r3
    d3a0:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    d3a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3a8:	701a      	strb	r2, [r3, #0]
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    d3aa:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    d3ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3b2:	885b      	ldrh	r3, [r3, #2]
    d3b4:	b21b      	sxth	r3, r3
    d3b6:	4618      	mov	r0, r3
    d3b8:	f00a fe96 	bl	180e8 <__aeabi_i2f>
    d3bc:	4603      	mov	r3, r0
    d3be:	4618      	mov	r0, r3
    d3c0:	f04f 0100 	mov.w	r1, #0
    d3c4:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d3c8:	f00a ff96 	bl	182f8 <__aeabi_fdiv>
    d3cc:	4603      	mov	r3, r0
    d3ce:	4618      	mov	r0, r3
    d3d0:	f00a fa4a 	bl	17868 <__aeabi_f2d>
    d3d4:	4602      	mov	r2, r0
    d3d6:	460b      	mov	r3, r1
    d3d8:	4610      	mov	r0, r2
    d3da:	4619      	mov	r1, r3
    d3dc:	a346      	add	r3, pc, #280	; (adr r3, d4f8 <radio_control_task+0x79c>)
    d3de:	e9d3 2300 	ldrd	r2, r3, [r3]
    d3e2:	f00a fa95 	bl	17910 <__aeabi_dmul>
    d3e6:	4602      	mov	r2, r0
    d3e8:	460b      	mov	r3, r1
    d3ea:	4610      	mov	r0, r2
    d3ec:	4619      	mov	r1, r3
    d3ee:	f04f 0200 	mov.w	r2, #0
    d3f2:	f04f 0300 	mov.w	r3, #0
    d3f6:	f00a f8d9 	bl	175ac <__adddf3>
    d3fa:	4602      	mov	r2, r0
    d3fc:	460b      	mov	r3, r1
    d3fe:	4610      	mov	r0, r2
    d400:	4619      	mov	r1, r3
    d402:	f00a fd67 	bl	17ed4 <__aeabi_d2f>
    d406:	4602      	mov	r2, r0
    d408:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
    d40c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d410:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    d412:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    d416:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d41a:	889b      	ldrh	r3, [r3, #4]
    d41c:	b21b      	sxth	r3, r3
    d41e:	4618      	mov	r0, r3
    d420:	f00a fe62 	bl	180e8 <__aeabi_i2f>
    d424:	4603      	mov	r3, r0
    d426:	4618      	mov	r0, r3
    d428:	f04f 0100 	mov.w	r1, #0
    d42c:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d430:	f00a ff62 	bl	182f8 <__aeabi_fdiv>
    d434:	4603      	mov	r3, r0
    d436:	4618      	mov	r0, r3
    d438:	f00a fa16 	bl	17868 <__aeabi_f2d>
    d43c:	4602      	mov	r2, r0
    d43e:	460b      	mov	r3, r1
    d440:	4610      	mov	r0, r2
    d442:	4619      	mov	r1, r3
    d444:	f04f 0200 	mov.w	r2, #0
    d448:	f04f 0300 	mov.w	r3, #0
    d44c:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    d450:	f00a fa5e 	bl	17910 <__aeabi_dmul>
    d454:	4602      	mov	r2, r0
    d456:	460b      	mov	r3, r1
    d458:	4610      	mov	r0, r2
    d45a:	4619      	mov	r1, r3
    d45c:	f04f 0200 	mov.w	r2, #0
    d460:	f04f 0300 	mov.w	r3, #0
    d464:	f00a f8a2 	bl	175ac <__adddf3>
    d468:	4602      	mov	r2, r0
    d46a:	460b      	mov	r3, r1
    d46c:	4610      	mov	r0, r2
    d46e:	4619      	mov	r1, r3
    d470:	f00a fd30 	bl	17ed4 <__aeabi_d2f>
    d474:	4602      	mov	r2, r0
    d476:	f24b 2300 	movw	r3, #45568	; 0xb200
    d47a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d47e:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    d480:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    d484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d488:	881a      	ldrh	r2, [r3, #0]
    d48a:	f24b 2304 	movw	r3, #45572	; 0xb204
    d48e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d492:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    d494:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    d498:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d49c:	7c9a      	ldrb	r2, [r3, #18]
    d49e:	f64a 63bc 	movw	r3, #44732	; 0xaebc
    d4a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4a6:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    d4a8:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    d4ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4b0:	7d5a      	ldrb	r2, [r3, #21]
    d4b2:	f64a 63ba 	movw	r3, #44730	; 0xaeba
    d4b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4ba:	701a      	strb	r2, [r3, #0]

    events_update();
    d4bc:	f7f9 fe7e 	bl	71bc <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    d4c0:	f7f8 fc7e 	bl	5dc0 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    d4c4:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    d4c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4cc:	781b      	ldrb	r3, [r3, #0]
    d4ce:	2b02      	cmp	r3, #2
    d4d0:	d10e      	bne.n	d4f0 <radio_control_task+0x794>
    d4d2:	f64a 73d8 	movw	r3, #45016	; 0xafd8
    d4d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4da:	881b      	ldrh	r3, [r3, #0]
    d4dc:	b21b      	sxth	r3, r3
    d4de:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    d4e2:	dd05      	ble.n	d4f0 <radio_control_task+0x794>
	launch = TRUE;
    d4e4:	f64a 63c8 	movw	r3, #44744	; 0xaec8
    d4e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4ec:	2201      	movs	r2, #1
    d4ee:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    d4f0:	3708      	adds	r7, #8
    d4f2:	46bd      	mov	sp, r7
    d4f4:	bd80      	pop	{r7, pc}
    d4f6:	bf00      	nop
    d4f8:	33333333 	.word	0x33333333
    d4fc:	bfe33333 	.word	0xbfe33333

0000d500 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    d500:	b580      	push	{r7, lr}
    d502:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    d504:	f64a 63b6 	movw	r3, #44726	; 0xaeb6
    d508:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d50c:	2203      	movs	r2, #3
    d50e:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    d510:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    d514:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d518:	781b      	ldrb	r3, [r3, #0]
    d51a:	2b03      	cmp	r3, #3
    d51c:	d102      	bne.n	d524 <navigation_update+0x24>
    nav_home();
    d51e:	f007 fa9b 	bl	14a58 <nav_home>
    d522:	e001      	b.n	d528 <navigation_update+0x28>
  else
    nav_update();
    d524:	f007 fabe 	bl	14aa4 <nav_update>
}
    d528:	bd80      	pop	{r7, pc}
    d52a:	bf00      	nop

0000d52c <send_nav_values>:

void send_nav_values(void){
    d52c:	b480      	push	{r7}
    d52e:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    d530:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d534:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d538:	781a      	ldrb	r2, [r3, #0]
    d53a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    d53e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d542:	781b      	ldrb	r3, [r3, #0]
    d544:	b2db      	uxtb	r3, r3
    d546:	429a      	cmp	r2, r3
    d548:	d313      	bcc.n	d572 <send_nav_values+0x46>
    d54a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    d54e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d552:	781b      	ldrb	r3, [r3, #0]
    d554:	b2db      	uxtb	r3, r3
    d556:	461a      	mov	r2, r3
    d558:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d55c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d560:	781b      	ldrb	r3, [r3, #0]
    d562:	1ad3      	subs	r3, r2, r3
    d564:	33ff      	adds	r3, #255	; 0xff
    d566:	2b1e      	cmp	r3, #30
    d568:	bfd4      	ite	le
    d56a:	2300      	movle	r3, #0
    d56c:	2301      	movgt	r3, #1
    d56e:	b2db      	uxtb	r3, r3
    d570:	e011      	b.n	d596 <send_nav_values+0x6a>
    d572:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    d576:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d57a:	781b      	ldrb	r3, [r3, #0]
    d57c:	b2db      	uxtb	r3, r3
    d57e:	461a      	mov	r2, r3
    d580:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d588:	781b      	ldrb	r3, [r3, #0]
    d58a:	1ad3      	subs	r3, r2, r3
    d58c:	2b1e      	cmp	r3, #30
    d58e:	bfd4      	ite	le
    d590:	2300      	movle	r3, #0
    d592:	2301      	movgt	r3, #1
    d594:	b2db      	uxtb	r3, r3
    d596:	2b00      	cmp	r3, #0
    d598:	f001 8094 	beq.w	e6c4 <send_nav_values+0x1198>
    d59c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d5a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5a4:	781b      	ldrb	r3, [r3, #0]
    d5a6:	461a      	mov	r2, r3
    d5a8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d5ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5b0:	2105      	movs	r1, #5
    d5b2:	5499      	strb	r1, [r3, r2]
    d5b4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d5b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5bc:	781b      	ldrb	r3, [r3, #0]
    d5be:	3301      	adds	r3, #1
    d5c0:	b2da      	uxtb	r2, r3
    d5c2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d5c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5ca:	701a      	strb	r2, [r3, #0]
    d5cc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d5d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5d4:	781b      	ldrb	r3, [r3, #0]
    d5d6:	2bff      	cmp	r3, #255	; 0xff
    d5d8:	d105      	bne.n	d5e6 <send_nav_values+0xba>
    d5da:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d5de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5e2:	2200      	movs	r2, #0
    d5e4:	701a      	strb	r2, [r3, #0]
    d5e6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d5ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5ee:	781b      	ldrb	r3, [r3, #0]
    d5f0:	461a      	mov	r2, r3
    d5f2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d5f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5fa:	210a      	movs	r1, #10
    d5fc:	5499      	strb	r1, [r3, r2]
    d5fe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d602:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d606:	781b      	ldrb	r3, [r3, #0]
    d608:	3301      	adds	r3, #1
    d60a:	b2da      	uxtb	r2, r3
    d60c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d614:	701a      	strb	r2, [r3, #0]
    d616:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d61a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d61e:	781b      	ldrb	r3, [r3, #0]
    d620:	2bff      	cmp	r3, #255	; 0xff
    d622:	d105      	bne.n	d630 <send_nav_values+0x104>
    d624:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d62c:	2200      	movs	r2, #0
    d62e:	701a      	strb	r2, [r3, #0]
    d630:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d638:	220a      	movs	r2, #10
    d63a:	701a      	strb	r2, [r3, #0]
    d63c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d640:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d644:	220a      	movs	r2, #10
    d646:	701a      	strb	r2, [r3, #0]
    d648:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d64c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d650:	781b      	ldrb	r3, [r3, #0]
    d652:	461a      	mov	r2, r3
    d654:	f24b 2329 	movw	r3, #45609	; 0xb229
    d658:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d65c:	7819      	ldrb	r1, [r3, #0]
    d65e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d666:	5499      	strb	r1, [r3, r2]
    d668:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d66c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d670:	781a      	ldrb	r2, [r3, #0]
    d672:	f24b 2329 	movw	r3, #45609	; 0xb229
    d676:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d67a:	781b      	ldrb	r3, [r3, #0]
    d67c:	4413      	add	r3, r2
    d67e:	b2da      	uxtb	r2, r3
    d680:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d684:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d688:	701a      	strb	r2, [r3, #0]
    d68a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d68e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d692:	781a      	ldrb	r2, [r3, #0]
    d694:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d698:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d69c:	781b      	ldrb	r3, [r3, #0]
    d69e:	4413      	add	r3, r2
    d6a0:	b2da      	uxtb	r2, r3
    d6a2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d6a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6aa:	701a      	strb	r2, [r3, #0]
    d6ac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d6b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6b4:	781b      	ldrb	r3, [r3, #0]
    d6b6:	3301      	adds	r3, #1
    d6b8:	b2da      	uxtb	r2, r3
    d6ba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d6be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6c2:	701a      	strb	r2, [r3, #0]
    d6c4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d6c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6cc:	781b      	ldrb	r3, [r3, #0]
    d6ce:	2bff      	cmp	r3, #255	; 0xff
    d6d0:	d105      	bne.n	d6de <send_nav_values+0x1b2>
    d6d2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d6d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6da:	2200      	movs	r2, #0
    d6dc:	701a      	strb	r2, [r3, #0]
    d6de:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d6e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6e6:	781b      	ldrb	r3, [r3, #0]
    d6e8:	461a      	mov	r2, r3
    d6ea:	f24b 2328 	movw	r3, #45608	; 0xb228
    d6ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6f2:	7819      	ldrb	r1, [r3, #0]
    d6f4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d6f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6fc:	5499      	strb	r1, [r3, r2]
    d6fe:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d702:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d706:	781a      	ldrb	r2, [r3, #0]
    d708:	f24b 2328 	movw	r3, #45608	; 0xb228
    d70c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d710:	781b      	ldrb	r3, [r3, #0]
    d712:	4413      	add	r3, r2
    d714:	b2da      	uxtb	r2, r3
    d716:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d71a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d71e:	701a      	strb	r2, [r3, #0]
    d720:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d728:	781a      	ldrb	r2, [r3, #0]
    d72a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d72e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d732:	781b      	ldrb	r3, [r3, #0]
    d734:	4413      	add	r3, r2
    d736:	b2da      	uxtb	r2, r3
    d738:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d73c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d740:	701a      	strb	r2, [r3, #0]
    d742:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d746:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d74a:	781b      	ldrb	r3, [r3, #0]
    d74c:	3301      	adds	r3, #1
    d74e:	b2da      	uxtb	r2, r3
    d750:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d754:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d758:	701a      	strb	r2, [r3, #0]
    d75a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d75e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d762:	781b      	ldrb	r3, [r3, #0]
    d764:	2bff      	cmp	r3, #255	; 0xff
    d766:	d105      	bne.n	d774 <send_nav_values+0x248>
    d768:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d76c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d770:	2200      	movs	r2, #0
    d772:	701a      	strb	r2, [r3, #0]
    d774:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d778:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d77c:	781b      	ldrb	r3, [r3, #0]
    d77e:	461a      	mov	r2, r3
    d780:	f24b 4384 	movw	r3, #46212	; 0xb484
    d784:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d788:	7819      	ldrb	r1, [r3, #0]
    d78a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d78e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d792:	5499      	strb	r1, [r3, r2]
    d794:	f24b 4384 	movw	r3, #46212	; 0xb484
    d798:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d79c:	781a      	ldrb	r2, [r3, #0]
    d79e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d7a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7a6:	781b      	ldrb	r3, [r3, #0]
    d7a8:	4413      	add	r3, r2
    d7aa:	b2da      	uxtb	r2, r3
    d7ac:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d7b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7b4:	701a      	strb	r2, [r3, #0]
    d7b6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d7ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7be:	781a      	ldrb	r2, [r3, #0]
    d7c0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d7c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7c8:	781b      	ldrb	r3, [r3, #0]
    d7ca:	4413      	add	r3, r2
    d7cc:	b2da      	uxtb	r2, r3
    d7ce:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d7d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7d6:	701a      	strb	r2, [r3, #0]
    d7d8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d7dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7e0:	781b      	ldrb	r3, [r3, #0]
    d7e2:	3301      	adds	r3, #1
    d7e4:	b2da      	uxtb	r2, r3
    d7e6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d7ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7ee:	701a      	strb	r2, [r3, #0]
    d7f0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d7f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7f8:	781b      	ldrb	r3, [r3, #0]
    d7fa:	2bff      	cmp	r3, #255	; 0xff
    d7fc:	d105      	bne.n	d80a <send_nav_values+0x2de>
    d7fe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d802:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d806:	2200      	movs	r2, #0
    d808:	701a      	strb	r2, [r3, #0]
    d80a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d80e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d812:	781b      	ldrb	r3, [r3, #0]
    d814:	461a      	mov	r2, r3
    d816:	f24b 4384 	movw	r3, #46212	; 0xb484
    d81a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d81e:	7859      	ldrb	r1, [r3, #1]
    d820:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d824:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d828:	5499      	strb	r1, [r3, r2]
    d82a:	4bd2      	ldr	r3, [pc, #840]	; (db74 <send_nav_values+0x648>)
    d82c:	781a      	ldrb	r2, [r3, #0]
    d82e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d832:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d836:	781b      	ldrb	r3, [r3, #0]
    d838:	4413      	add	r3, r2
    d83a:	b2da      	uxtb	r2, r3
    d83c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d840:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d844:	701a      	strb	r2, [r3, #0]
    d846:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d84a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d84e:	781a      	ldrb	r2, [r3, #0]
    d850:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d854:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d858:	781b      	ldrb	r3, [r3, #0]
    d85a:	4413      	add	r3, r2
    d85c:	b2da      	uxtb	r2, r3
    d85e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d862:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d866:	701a      	strb	r2, [r3, #0]
    d868:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d86c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d870:	781b      	ldrb	r3, [r3, #0]
    d872:	3301      	adds	r3, #1
    d874:	b2da      	uxtb	r2, r3
    d876:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d87a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d87e:	701a      	strb	r2, [r3, #0]
    d880:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d884:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d888:	781b      	ldrb	r3, [r3, #0]
    d88a:	2bff      	cmp	r3, #255	; 0xff
    d88c:	d105      	bne.n	d89a <send_nav_values+0x36e>
    d88e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d892:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d896:	2200      	movs	r2, #0
    d898:	701a      	strb	r2, [r3, #0]
    d89a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d89e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8a2:	781b      	ldrb	r3, [r3, #0]
    d8a4:	461a      	mov	r2, r3
    d8a6:	f24b 4384 	movw	r3, #46212	; 0xb484
    d8aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8ae:	7899      	ldrb	r1, [r3, #2]
    d8b0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d8b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8b8:	5499      	strb	r1, [r3, r2]
    d8ba:	4baf      	ldr	r3, [pc, #700]	; (db78 <send_nav_values+0x64c>)
    d8bc:	781a      	ldrb	r2, [r3, #0]
    d8be:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d8c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8c6:	781b      	ldrb	r3, [r3, #0]
    d8c8:	4413      	add	r3, r2
    d8ca:	b2da      	uxtb	r2, r3
    d8cc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d8d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8d4:	701a      	strb	r2, [r3, #0]
    d8d6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d8da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8de:	781a      	ldrb	r2, [r3, #0]
    d8e0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d8e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8e8:	781b      	ldrb	r3, [r3, #0]
    d8ea:	4413      	add	r3, r2
    d8ec:	b2da      	uxtb	r2, r3
    d8ee:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d8f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8f6:	701a      	strb	r2, [r3, #0]
    d8f8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d8fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d900:	781b      	ldrb	r3, [r3, #0]
    d902:	3301      	adds	r3, #1
    d904:	b2da      	uxtb	r2, r3
    d906:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d90a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d90e:	701a      	strb	r2, [r3, #0]
    d910:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d914:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d918:	781b      	ldrb	r3, [r3, #0]
    d91a:	2bff      	cmp	r3, #255	; 0xff
    d91c:	d105      	bne.n	d92a <send_nav_values+0x3fe>
    d91e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d922:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d926:	2200      	movs	r2, #0
    d928:	701a      	strb	r2, [r3, #0]
    d92a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d92e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d932:	781b      	ldrb	r3, [r3, #0]
    d934:	461a      	mov	r2, r3
    d936:	f24b 4384 	movw	r3, #46212	; 0xb484
    d93a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d93e:	78d9      	ldrb	r1, [r3, #3]
    d940:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d944:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d948:	5499      	strb	r1, [r3, r2]
    d94a:	4b8c      	ldr	r3, [pc, #560]	; (db7c <send_nav_values+0x650>)
    d94c:	781a      	ldrb	r2, [r3, #0]
    d94e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d952:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d956:	781b      	ldrb	r3, [r3, #0]
    d958:	4413      	add	r3, r2
    d95a:	b2da      	uxtb	r2, r3
    d95c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d964:	701a      	strb	r2, [r3, #0]
    d966:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d96a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d96e:	781a      	ldrb	r2, [r3, #0]
    d970:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d978:	781b      	ldrb	r3, [r3, #0]
    d97a:	4413      	add	r3, r2
    d97c:	b2da      	uxtb	r2, r3
    d97e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    d982:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d986:	701a      	strb	r2, [r3, #0]
    d988:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d98c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d990:	781b      	ldrb	r3, [r3, #0]
    d992:	3301      	adds	r3, #1
    d994:	b2da      	uxtb	r2, r3
    d996:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d99a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d99e:	701a      	strb	r2, [r3, #0]
    d9a0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d9a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9a8:	781b      	ldrb	r3, [r3, #0]
    d9aa:	2bff      	cmp	r3, #255	; 0xff
    d9ac:	d105      	bne.n	d9ba <send_nav_values+0x48e>
    d9ae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d9b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9b6:	2200      	movs	r2, #0
    d9b8:	701a      	strb	r2, [r3, #0]
    d9ba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    d9be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9c2:	781b      	ldrb	r3, [r3, #0]
    d9c4:	461a      	mov	r2, r3
    d9c6:	f24b 4388 	movw	r3, #46216	; 0xb488
    d9ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9ce:	7819      	ldrb	r1, [r3, #0]
    d9d0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d9d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9d8:	5499      	strb	r1, [r3, r2]
    d9da:	f24b 4388 	movw	r3, #46216	; 0xb488
    d9de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9e2:	781a      	ldrb	r2, [r3, #0]
    d9e4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d9e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9ec:	781b      	ldrb	r3, [r3, #0]
    d9ee:	4413      	add	r3, r2
    d9f0:	b2da      	uxtb	r2, r3
    d9f2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    d9f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9fa:	701a      	strb	r2, [r3, #0]
    d9fc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    da00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da04:	781a      	ldrb	r2, [r3, #0]
    da06:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    da0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da0e:	781b      	ldrb	r3, [r3, #0]
    da10:	4413      	add	r3, r2
    da12:	b2da      	uxtb	r2, r3
    da14:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    da18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da1c:	701a      	strb	r2, [r3, #0]
    da1e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    da22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da26:	781b      	ldrb	r3, [r3, #0]
    da28:	3301      	adds	r3, #1
    da2a:	b2da      	uxtb	r2, r3
    da2c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    da30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da34:	701a      	strb	r2, [r3, #0]
    da36:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    da3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da3e:	781b      	ldrb	r3, [r3, #0]
    da40:	2bff      	cmp	r3, #255	; 0xff
    da42:	d105      	bne.n	da50 <send_nav_values+0x524>
    da44:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    da48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da4c:	2200      	movs	r2, #0
    da4e:	701a      	strb	r2, [r3, #0]
    da50:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    da54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da58:	781b      	ldrb	r3, [r3, #0]
    da5a:	461a      	mov	r2, r3
    da5c:	f24b 4388 	movw	r3, #46216	; 0xb488
    da60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da64:	7859      	ldrb	r1, [r3, #1]
    da66:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    da6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da6e:	5499      	strb	r1, [r3, r2]
    da70:	4b43      	ldr	r3, [pc, #268]	; (db80 <send_nav_values+0x654>)
    da72:	781a      	ldrb	r2, [r3, #0]
    da74:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    da78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da7c:	781b      	ldrb	r3, [r3, #0]
    da7e:	4413      	add	r3, r2
    da80:	b2da      	uxtb	r2, r3
    da82:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    da86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da8a:	701a      	strb	r2, [r3, #0]
    da8c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    da90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da94:	781a      	ldrb	r2, [r3, #0]
    da96:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    da9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da9e:	781b      	ldrb	r3, [r3, #0]
    daa0:	4413      	add	r3, r2
    daa2:	b2da      	uxtb	r2, r3
    daa4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    daa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daac:	701a      	strb	r2, [r3, #0]
    daae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dab6:	781b      	ldrb	r3, [r3, #0]
    dab8:	3301      	adds	r3, #1
    daba:	b2da      	uxtb	r2, r3
    dabc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dac4:	701a      	strb	r2, [r3, #0]
    dac6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    daca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dace:	781b      	ldrb	r3, [r3, #0]
    dad0:	2bff      	cmp	r3, #255	; 0xff
    dad2:	d105      	bne.n	dae0 <send_nav_values+0x5b4>
    dad4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dadc:	2200      	movs	r2, #0
    dade:	701a      	strb	r2, [r3, #0]
    dae0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dae8:	781b      	ldrb	r3, [r3, #0]
    daea:	461a      	mov	r2, r3
    daec:	f24b 4388 	movw	r3, #46216	; 0xb488
    daf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daf4:	7899      	ldrb	r1, [r3, #2]
    daf6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    dafa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dafe:	5499      	strb	r1, [r3, r2]
    db00:	4b20      	ldr	r3, [pc, #128]	; (db84 <send_nav_values+0x658>)
    db02:	781a      	ldrb	r2, [r3, #0]
    db04:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    db08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db0c:	781b      	ldrb	r3, [r3, #0]
    db0e:	4413      	add	r3, r2
    db10:	b2da      	uxtb	r2, r3
    db12:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    db16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db1a:	701a      	strb	r2, [r3, #0]
    db1c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    db20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db24:	781a      	ldrb	r2, [r3, #0]
    db26:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    db2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db2e:	781b      	ldrb	r3, [r3, #0]
    db30:	4413      	add	r3, r2
    db32:	b2da      	uxtb	r2, r3
    db34:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    db38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db3c:	701a      	strb	r2, [r3, #0]
    db3e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    db42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db46:	781b      	ldrb	r3, [r3, #0]
    db48:	3301      	adds	r3, #1
    db4a:	b2da      	uxtb	r2, r3
    db4c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    db50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db54:	701a      	strb	r2, [r3, #0]
    db56:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    db5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db5e:	781b      	ldrb	r3, [r3, #0]
    db60:	2bff      	cmp	r3, #255	; 0xff
    db62:	d111      	bne.n	db88 <send_nav_values+0x65c>
    db64:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    db68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db6c:	2200      	movs	r2, #0
    db6e:	701a      	strb	r2, [r3, #0]
    db70:	e00a      	b.n	db88 <send_nav_values+0x65c>
    db72:	bf00      	nop
    db74:	2000b485 	.word	0x2000b485
    db78:	2000b486 	.word	0x2000b486
    db7c:	2000b487 	.word	0x2000b487
    db80:	2000b489 	.word	0x2000b489
    db84:	2000b48a 	.word	0x2000b48a
    db88:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    db8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db90:	781b      	ldrb	r3, [r3, #0]
    db92:	461a      	mov	r2, r3
    db94:	f24b 4388 	movw	r3, #46216	; 0xb488
    db98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db9c:	78d9      	ldrb	r1, [r3, #3]
    db9e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    dba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dba6:	5499      	strb	r1, [r3, r2]
    dba8:	4bd3      	ldr	r3, [pc, #844]	; (def8 <send_nav_values+0x9cc>)
    dbaa:	781a      	ldrb	r2, [r3, #0]
    dbac:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dbb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbb4:	781b      	ldrb	r3, [r3, #0]
    dbb6:	4413      	add	r3, r2
    dbb8:	b2da      	uxtb	r2, r3
    dbba:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dbbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbc2:	701a      	strb	r2, [r3, #0]
    dbc4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    dbc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbcc:	781a      	ldrb	r2, [r3, #0]
    dbce:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dbd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbd6:	781b      	ldrb	r3, [r3, #0]
    dbd8:	4413      	add	r3, r2
    dbda:	b2da      	uxtb	r2, r3
    dbdc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    dbe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbe4:	701a      	strb	r2, [r3, #0]
    dbe6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dbea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbee:	781b      	ldrb	r3, [r3, #0]
    dbf0:	3301      	adds	r3, #1
    dbf2:	b2da      	uxtb	r2, r3
    dbf4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dbf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbfc:	701a      	strb	r2, [r3, #0]
    dbfe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dc02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc06:	781b      	ldrb	r3, [r3, #0]
    dc08:	2bff      	cmp	r3, #255	; 0xff
    dc0a:	d105      	bne.n	dc18 <send_nav_values+0x6ec>
    dc0c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dc10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc14:	2200      	movs	r2, #0
    dc16:	701a      	strb	r2, [r3, #0]
    dc18:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dc1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc20:	781b      	ldrb	r3, [r3, #0]
    dc22:	461a      	mov	r2, r3
    dc24:	f24b 2314 	movw	r3, #45588	; 0xb214
    dc28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc2c:	7819      	ldrb	r1, [r3, #0]
    dc2e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    dc32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc36:	5499      	strb	r1, [r3, r2]
    dc38:	f24b 2314 	movw	r3, #45588	; 0xb214
    dc3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc40:	781a      	ldrb	r2, [r3, #0]
    dc42:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dc46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc4a:	781b      	ldrb	r3, [r3, #0]
    dc4c:	4413      	add	r3, r2
    dc4e:	b2da      	uxtb	r2, r3
    dc50:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dc54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc58:	701a      	strb	r2, [r3, #0]
    dc5a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    dc5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc62:	781a      	ldrb	r2, [r3, #0]
    dc64:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dc68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc6c:	781b      	ldrb	r3, [r3, #0]
    dc6e:	4413      	add	r3, r2
    dc70:	b2da      	uxtb	r2, r3
    dc72:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    dc76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc7a:	701a      	strb	r2, [r3, #0]
    dc7c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dc80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc84:	781b      	ldrb	r3, [r3, #0]
    dc86:	3301      	adds	r3, #1
    dc88:	b2da      	uxtb	r2, r3
    dc8a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dc8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc92:	701a      	strb	r2, [r3, #0]
    dc94:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dc98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc9c:	781b      	ldrb	r3, [r3, #0]
    dc9e:	2bff      	cmp	r3, #255	; 0xff
    dca0:	d105      	bne.n	dcae <send_nav_values+0x782>
    dca2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcaa:	2200      	movs	r2, #0
    dcac:	701a      	strb	r2, [r3, #0]
    dcae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dcb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcb6:	781b      	ldrb	r3, [r3, #0]
    dcb8:	461a      	mov	r2, r3
    dcba:	f24b 2314 	movw	r3, #45588	; 0xb214
    dcbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcc2:	7859      	ldrb	r1, [r3, #1]
    dcc4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    dcc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dccc:	5499      	strb	r1, [r3, r2]
    dcce:	4b8b      	ldr	r3, [pc, #556]	; (defc <send_nav_values+0x9d0>)
    dcd0:	781a      	ldrb	r2, [r3, #0]
    dcd2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dcd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcda:	781b      	ldrb	r3, [r3, #0]
    dcdc:	4413      	add	r3, r2
    dcde:	b2da      	uxtb	r2, r3
    dce0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dce8:	701a      	strb	r2, [r3, #0]
    dcea:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    dcee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcf2:	781a      	ldrb	r2, [r3, #0]
    dcf4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dcf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcfc:	781b      	ldrb	r3, [r3, #0]
    dcfe:	4413      	add	r3, r2
    dd00:	b2da      	uxtb	r2, r3
    dd02:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    dd06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd0a:	701a      	strb	r2, [r3, #0]
    dd0c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dd10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd14:	781b      	ldrb	r3, [r3, #0]
    dd16:	3301      	adds	r3, #1
    dd18:	b2da      	uxtb	r2, r3
    dd1a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dd1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd22:	701a      	strb	r2, [r3, #0]
    dd24:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dd28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd2c:	781b      	ldrb	r3, [r3, #0]
    dd2e:	2bff      	cmp	r3, #255	; 0xff
    dd30:	d105      	bne.n	dd3e <send_nav_values+0x812>
    dd32:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dd36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd3a:	2200      	movs	r2, #0
    dd3c:	701a      	strb	r2, [r3, #0]
    dd3e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dd42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd46:	781b      	ldrb	r3, [r3, #0]
    dd48:	461a      	mov	r2, r3
    dd4a:	f24b 2314 	movw	r3, #45588	; 0xb214
    dd4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd52:	7899      	ldrb	r1, [r3, #2]
    dd54:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    dd58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd5c:	5499      	strb	r1, [r3, r2]
    dd5e:	4b68      	ldr	r3, [pc, #416]	; (df00 <send_nav_values+0x9d4>)
    dd60:	781a      	ldrb	r2, [r3, #0]
    dd62:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dd66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd6a:	781b      	ldrb	r3, [r3, #0]
    dd6c:	4413      	add	r3, r2
    dd6e:	b2da      	uxtb	r2, r3
    dd70:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dd74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd78:	701a      	strb	r2, [r3, #0]
    dd7a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    dd7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd82:	781a      	ldrb	r2, [r3, #0]
    dd84:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dd88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd8c:	781b      	ldrb	r3, [r3, #0]
    dd8e:	4413      	add	r3, r2
    dd90:	b2da      	uxtb	r2, r3
    dd92:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    dd96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd9a:	701a      	strb	r2, [r3, #0]
    dd9c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dda0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dda4:	781b      	ldrb	r3, [r3, #0]
    dda6:	3301      	adds	r3, #1
    dda8:	b2da      	uxtb	r2, r3
    ddaa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ddae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddb2:	701a      	strb	r2, [r3, #0]
    ddb4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ddb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddbc:	781b      	ldrb	r3, [r3, #0]
    ddbe:	2bff      	cmp	r3, #255	; 0xff
    ddc0:	d105      	bne.n	ddce <send_nav_values+0x8a2>
    ddc2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ddc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddca:	2200      	movs	r2, #0
    ddcc:	701a      	strb	r2, [r3, #0]
    ddce:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ddd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddd6:	781b      	ldrb	r3, [r3, #0]
    ddd8:	461a      	mov	r2, r3
    ddda:	f24b 2314 	movw	r3, #45588	; 0xb214
    ddde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dde2:	78d9      	ldrb	r1, [r3, #3]
    dde4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    dde8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddec:	5499      	strb	r1, [r3, r2]
    ddee:	4b45      	ldr	r3, [pc, #276]	; (df04 <send_nav_values+0x9d8>)
    ddf0:	781a      	ldrb	r2, [r3, #0]
    ddf2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ddf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddfa:	781b      	ldrb	r3, [r3, #0]
    ddfc:	4413      	add	r3, r2
    ddfe:	b2da      	uxtb	r2, r3
    de00:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    de04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de08:	701a      	strb	r2, [r3, #0]
    de0a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    de0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de12:	781a      	ldrb	r2, [r3, #0]
    de14:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    de18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de1c:	781b      	ldrb	r3, [r3, #0]
    de1e:	4413      	add	r3, r2
    de20:	b2da      	uxtb	r2, r3
    de22:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    de26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de2a:	701a      	strb	r2, [r3, #0]
    de2c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    de30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de34:	781b      	ldrb	r3, [r3, #0]
    de36:	3301      	adds	r3, #1
    de38:	b2da      	uxtb	r2, r3
    de3a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    de3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de42:	701a      	strb	r2, [r3, #0]
    de44:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    de48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de4c:	781b      	ldrb	r3, [r3, #0]
    de4e:	2bff      	cmp	r3, #255	; 0xff
    de50:	d105      	bne.n	de5e <send_nav_values+0x932>
    de52:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    de56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de5a:	2200      	movs	r2, #0
    de5c:	701a      	strb	r2, [r3, #0]
    de5e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    de62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de66:	781b      	ldrb	r3, [r3, #0]
    de68:	461a      	mov	r2, r3
    de6a:	f24b 235c 	movw	r3, #45660	; 0xb25c
    de6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de72:	7819      	ldrb	r1, [r3, #0]
    de74:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    de78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de7c:	5499      	strb	r1, [r3, r2]
    de7e:	f24b 235c 	movw	r3, #45660	; 0xb25c
    de82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de86:	781a      	ldrb	r2, [r3, #0]
    de88:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    de8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de90:	781b      	ldrb	r3, [r3, #0]
    de92:	4413      	add	r3, r2
    de94:	b2da      	uxtb	r2, r3
    de96:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    de9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de9e:	701a      	strb	r2, [r3, #0]
    dea0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    dea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dea8:	781a      	ldrb	r2, [r3, #0]
    deaa:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    deae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    deb2:	781b      	ldrb	r3, [r3, #0]
    deb4:	4413      	add	r3, r2
    deb6:	b2da      	uxtb	r2, r3
    deb8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    debc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dec0:	701a      	strb	r2, [r3, #0]
    dec2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    deca:	781b      	ldrb	r3, [r3, #0]
    decc:	3301      	adds	r3, #1
    dece:	b2da      	uxtb	r2, r3
    ded0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ded4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ded8:	701a      	strb	r2, [r3, #0]
    deda:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dede:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dee2:	781b      	ldrb	r3, [r3, #0]
    dee4:	2bff      	cmp	r3, #255	; 0xff
    dee6:	d10f      	bne.n	df08 <send_nav_values+0x9dc>
    dee8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    deec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    def0:	2200      	movs	r2, #0
    def2:	701a      	strb	r2, [r3, #0]
    def4:	e008      	b.n	df08 <send_nav_values+0x9dc>
    def6:	bf00      	nop
    def8:	2000b48b 	.word	0x2000b48b
    defc:	2000b215 	.word	0x2000b215
    df00:	2000b216 	.word	0x2000b216
    df04:	2000b217 	.word	0x2000b217
    df08:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    df0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df10:	781b      	ldrb	r3, [r3, #0]
    df12:	461a      	mov	r2, r3
    df14:	f24b 235c 	movw	r3, #45660	; 0xb25c
    df18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df1c:	7859      	ldrb	r1, [r3, #1]
    df1e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    df22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df26:	5499      	strb	r1, [r3, r2]
    df28:	4bd1      	ldr	r3, [pc, #836]	; (e270 <send_nav_values+0xd44>)
    df2a:	781a      	ldrb	r2, [r3, #0]
    df2c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    df30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df34:	781b      	ldrb	r3, [r3, #0]
    df36:	4413      	add	r3, r2
    df38:	b2da      	uxtb	r2, r3
    df3a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    df3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df42:	701a      	strb	r2, [r3, #0]
    df44:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    df48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df4c:	781a      	ldrb	r2, [r3, #0]
    df4e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    df52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df56:	781b      	ldrb	r3, [r3, #0]
    df58:	4413      	add	r3, r2
    df5a:	b2da      	uxtb	r2, r3
    df5c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    df60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df64:	701a      	strb	r2, [r3, #0]
    df66:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    df6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df6e:	781b      	ldrb	r3, [r3, #0]
    df70:	3301      	adds	r3, #1
    df72:	b2da      	uxtb	r2, r3
    df74:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    df78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df7c:	701a      	strb	r2, [r3, #0]
    df7e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    df82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df86:	781b      	ldrb	r3, [r3, #0]
    df88:	2bff      	cmp	r3, #255	; 0xff
    df8a:	d105      	bne.n	df98 <send_nav_values+0xa6c>
    df8c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    df90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df94:	2200      	movs	r2, #0
    df96:	701a      	strb	r2, [r3, #0]
    df98:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    df9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfa0:	781b      	ldrb	r3, [r3, #0]
    dfa2:	461a      	mov	r2, r3
    dfa4:	f24b 235c 	movw	r3, #45660	; 0xb25c
    dfa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfac:	7899      	ldrb	r1, [r3, #2]
    dfae:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    dfb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfb6:	5499      	strb	r1, [r3, r2]
    dfb8:	4bae      	ldr	r3, [pc, #696]	; (e274 <send_nav_values+0xd48>)
    dfba:	781a      	ldrb	r2, [r3, #0]
    dfbc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dfc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfc4:	781b      	ldrb	r3, [r3, #0]
    dfc6:	4413      	add	r3, r2
    dfc8:	b2da      	uxtb	r2, r3
    dfca:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dfce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfd2:	701a      	strb	r2, [r3, #0]
    dfd4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    dfd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfdc:	781a      	ldrb	r2, [r3, #0]
    dfde:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    dfe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfe6:	781b      	ldrb	r3, [r3, #0]
    dfe8:	4413      	add	r3, r2
    dfea:	b2da      	uxtb	r2, r3
    dfec:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    dff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dff4:	701a      	strb	r2, [r3, #0]
    dff6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    dffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dffe:	781b      	ldrb	r3, [r3, #0]
    e000:	3301      	adds	r3, #1
    e002:	b2da      	uxtb	r2, r3
    e004:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e008:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e00c:	701a      	strb	r2, [r3, #0]
    e00e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e016:	781b      	ldrb	r3, [r3, #0]
    e018:	2bff      	cmp	r3, #255	; 0xff
    e01a:	d105      	bne.n	e028 <send_nav_values+0xafc>
    e01c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e020:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e024:	2200      	movs	r2, #0
    e026:	701a      	strb	r2, [r3, #0]
    e028:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e02c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e030:	781b      	ldrb	r3, [r3, #0]
    e032:	461a      	mov	r2, r3
    e034:	f24b 235c 	movw	r3, #45660	; 0xb25c
    e038:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e03c:	78d9      	ldrb	r1, [r3, #3]
    e03e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e042:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e046:	5499      	strb	r1, [r3, r2]
    e048:	4b8b      	ldr	r3, [pc, #556]	; (e278 <send_nav_values+0xd4c>)
    e04a:	781a      	ldrb	r2, [r3, #0]
    e04c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e050:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e054:	781b      	ldrb	r3, [r3, #0]
    e056:	4413      	add	r3, r2
    e058:	b2da      	uxtb	r2, r3
    e05a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e05e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e062:	701a      	strb	r2, [r3, #0]
    e064:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e068:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e06c:	781a      	ldrb	r2, [r3, #0]
    e06e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e072:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e076:	781b      	ldrb	r3, [r3, #0]
    e078:	4413      	add	r3, r2
    e07a:	b2da      	uxtb	r2, r3
    e07c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e080:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e084:	701a      	strb	r2, [r3, #0]
    e086:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e08a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e08e:	781b      	ldrb	r3, [r3, #0]
    e090:	3301      	adds	r3, #1
    e092:	b2da      	uxtb	r2, r3
    e094:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e098:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e09c:	701a      	strb	r2, [r3, #0]
    e09e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e0a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0a6:	781b      	ldrb	r3, [r3, #0]
    e0a8:	2bff      	cmp	r3, #255	; 0xff
    e0aa:	d105      	bne.n	e0b8 <send_nav_values+0xb8c>
    e0ac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e0b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0b4:	2200      	movs	r2, #0
    e0b6:	701a      	strb	r2, [r3, #0]
    e0b8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e0bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0c0:	781b      	ldrb	r3, [r3, #0]
    e0c2:	461a      	mov	r2, r3
    e0c4:	f240 4308 	movw	r3, #1032	; 0x408
    e0c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0cc:	7819      	ldrb	r1, [r3, #0]
    e0ce:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e0d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0d6:	5499      	strb	r1, [r3, r2]
    e0d8:	f240 4308 	movw	r3, #1032	; 0x408
    e0dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0e0:	781a      	ldrb	r2, [r3, #0]
    e0e2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e0e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0ea:	781b      	ldrb	r3, [r3, #0]
    e0ec:	4413      	add	r3, r2
    e0ee:	b2da      	uxtb	r2, r3
    e0f0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e0f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0f8:	701a      	strb	r2, [r3, #0]
    e0fa:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e0fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e102:	781a      	ldrb	r2, [r3, #0]
    e104:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e108:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e10c:	781b      	ldrb	r3, [r3, #0]
    e10e:	4413      	add	r3, r2
    e110:	b2da      	uxtb	r2, r3
    e112:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e116:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e11a:	701a      	strb	r2, [r3, #0]
    e11c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e120:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e124:	781b      	ldrb	r3, [r3, #0]
    e126:	3301      	adds	r3, #1
    e128:	b2da      	uxtb	r2, r3
    e12a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e12e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e132:	701a      	strb	r2, [r3, #0]
    e134:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e138:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e13c:	781b      	ldrb	r3, [r3, #0]
    e13e:	2bff      	cmp	r3, #255	; 0xff
    e140:	d105      	bne.n	e14e <send_nav_values+0xc22>
    e142:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e146:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e14a:	2200      	movs	r2, #0
    e14c:	701a      	strb	r2, [r3, #0]
    e14e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e152:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e156:	781b      	ldrb	r3, [r3, #0]
    e158:	461a      	mov	r2, r3
    e15a:	f240 4308 	movw	r3, #1032	; 0x408
    e15e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e162:	7859      	ldrb	r1, [r3, #1]
    e164:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e168:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e16c:	5499      	strb	r1, [r3, r2]
    e16e:	4b43      	ldr	r3, [pc, #268]	; (e27c <send_nav_values+0xd50>)
    e170:	781a      	ldrb	r2, [r3, #0]
    e172:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e176:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e17a:	781b      	ldrb	r3, [r3, #0]
    e17c:	4413      	add	r3, r2
    e17e:	b2da      	uxtb	r2, r3
    e180:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e184:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e188:	701a      	strb	r2, [r3, #0]
    e18a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e18e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e192:	781a      	ldrb	r2, [r3, #0]
    e194:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e198:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e19c:	781b      	ldrb	r3, [r3, #0]
    e19e:	4413      	add	r3, r2
    e1a0:	b2da      	uxtb	r2, r3
    e1a2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e1a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1aa:	701a      	strb	r2, [r3, #0]
    e1ac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e1b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1b4:	781b      	ldrb	r3, [r3, #0]
    e1b6:	3301      	adds	r3, #1
    e1b8:	b2da      	uxtb	r2, r3
    e1ba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e1be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1c2:	701a      	strb	r2, [r3, #0]
    e1c4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e1c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1cc:	781b      	ldrb	r3, [r3, #0]
    e1ce:	2bff      	cmp	r3, #255	; 0xff
    e1d0:	d105      	bne.n	e1de <send_nav_values+0xcb2>
    e1d2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e1d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1da:	2200      	movs	r2, #0
    e1dc:	701a      	strb	r2, [r3, #0]
    e1de:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e1e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1e6:	781b      	ldrb	r3, [r3, #0]
    e1e8:	461a      	mov	r2, r3
    e1ea:	f240 4308 	movw	r3, #1032	; 0x408
    e1ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1f2:	7899      	ldrb	r1, [r3, #2]
    e1f4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e1f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1fc:	5499      	strb	r1, [r3, r2]
    e1fe:	4b20      	ldr	r3, [pc, #128]	; (e280 <send_nav_values+0xd54>)
    e200:	781a      	ldrb	r2, [r3, #0]
    e202:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e206:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e20a:	781b      	ldrb	r3, [r3, #0]
    e20c:	4413      	add	r3, r2
    e20e:	b2da      	uxtb	r2, r3
    e210:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e214:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e218:	701a      	strb	r2, [r3, #0]
    e21a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e21e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e222:	781a      	ldrb	r2, [r3, #0]
    e224:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e228:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e22c:	781b      	ldrb	r3, [r3, #0]
    e22e:	4413      	add	r3, r2
    e230:	b2da      	uxtb	r2, r3
    e232:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e236:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e23a:	701a      	strb	r2, [r3, #0]
    e23c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e240:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e244:	781b      	ldrb	r3, [r3, #0]
    e246:	3301      	adds	r3, #1
    e248:	b2da      	uxtb	r2, r3
    e24a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e24e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e252:	701a      	strb	r2, [r3, #0]
    e254:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e25c:	781b      	ldrb	r3, [r3, #0]
    e25e:	2bff      	cmp	r3, #255	; 0xff
    e260:	d110      	bne.n	e284 <send_nav_values+0xd58>
    e262:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e266:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e26a:	2200      	movs	r2, #0
    e26c:	701a      	strb	r2, [r3, #0]
    e26e:	e009      	b.n	e284 <send_nav_values+0xd58>
    e270:	2000b25d 	.word	0x2000b25d
    e274:	2000b25e 	.word	0x2000b25e
    e278:	2000b25f 	.word	0x2000b25f
    e27c:	20000409 	.word	0x20000409
    e280:	2000040a 	.word	0x2000040a
    e284:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e288:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e28c:	781b      	ldrb	r3, [r3, #0]
    e28e:	461a      	mov	r2, r3
    e290:	f240 4308 	movw	r3, #1032	; 0x408
    e294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e298:	78d9      	ldrb	r1, [r3, #3]
    e29a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e29e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2a2:	5499      	strb	r1, [r3, r2]
    e2a4:	4bc2      	ldr	r3, [pc, #776]	; (e5b0 <send_nav_values+0x1084>)
    e2a6:	781a      	ldrb	r2, [r3, #0]
    e2a8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e2ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2b0:	781b      	ldrb	r3, [r3, #0]
    e2b2:	4413      	add	r3, r2
    e2b4:	b2da      	uxtb	r2, r3
    e2b6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e2ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2be:	701a      	strb	r2, [r3, #0]
    e2c0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e2c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2c8:	781a      	ldrb	r2, [r3, #0]
    e2ca:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e2ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2d2:	781b      	ldrb	r3, [r3, #0]
    e2d4:	4413      	add	r3, r2
    e2d6:	b2da      	uxtb	r2, r3
    e2d8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e2dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2e0:	701a      	strb	r2, [r3, #0]
    e2e2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e2e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2ea:	781b      	ldrb	r3, [r3, #0]
    e2ec:	3301      	adds	r3, #1
    e2ee:	b2da      	uxtb	r2, r3
    e2f0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e2f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2f8:	701a      	strb	r2, [r3, #0]
    e2fa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e2fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e302:	781b      	ldrb	r3, [r3, #0]
    e304:	2bff      	cmp	r3, #255	; 0xff
    e306:	d105      	bne.n	e314 <send_nav_values+0xde8>
    e308:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e30c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e310:	2200      	movs	r2, #0
    e312:	701a      	strb	r2, [r3, #0]
    e314:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e318:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e31c:	781b      	ldrb	r3, [r3, #0]
    e31e:	461a      	mov	r2, r3
    e320:	f24b 2360 	movw	r3, #45664	; 0xb260
    e324:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e328:	7819      	ldrb	r1, [r3, #0]
    e32a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e32e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e332:	5499      	strb	r1, [r3, r2]
    e334:	f24b 2360 	movw	r3, #45664	; 0xb260
    e338:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e33c:	781a      	ldrb	r2, [r3, #0]
    e33e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e342:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e346:	781b      	ldrb	r3, [r3, #0]
    e348:	4413      	add	r3, r2
    e34a:	b2da      	uxtb	r2, r3
    e34c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e350:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e354:	701a      	strb	r2, [r3, #0]
    e356:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e35a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e35e:	781a      	ldrb	r2, [r3, #0]
    e360:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e368:	781b      	ldrb	r3, [r3, #0]
    e36a:	4413      	add	r3, r2
    e36c:	b2da      	uxtb	r2, r3
    e36e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e372:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e376:	701a      	strb	r2, [r3, #0]
    e378:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e37c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e380:	781b      	ldrb	r3, [r3, #0]
    e382:	3301      	adds	r3, #1
    e384:	b2da      	uxtb	r2, r3
    e386:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e38a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e38e:	701a      	strb	r2, [r3, #0]
    e390:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e394:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e398:	781b      	ldrb	r3, [r3, #0]
    e39a:	2bff      	cmp	r3, #255	; 0xff
    e39c:	d105      	bne.n	e3aa <send_nav_values+0xe7e>
    e39e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e3a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3a6:	2200      	movs	r2, #0
    e3a8:	701a      	strb	r2, [r3, #0]
    e3aa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e3ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3b2:	781b      	ldrb	r3, [r3, #0]
    e3b4:	461a      	mov	r2, r3
    e3b6:	f24b 2360 	movw	r3, #45664	; 0xb260
    e3ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3be:	7859      	ldrb	r1, [r3, #1]
    e3c0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e3c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3c8:	5499      	strb	r1, [r3, r2]
    e3ca:	4b7a      	ldr	r3, [pc, #488]	; (e5b4 <send_nav_values+0x1088>)
    e3cc:	781a      	ldrb	r2, [r3, #0]
    e3ce:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e3d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3d6:	781b      	ldrb	r3, [r3, #0]
    e3d8:	4413      	add	r3, r2
    e3da:	b2da      	uxtb	r2, r3
    e3dc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e3e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3e4:	701a      	strb	r2, [r3, #0]
    e3e6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e3ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3ee:	781a      	ldrb	r2, [r3, #0]
    e3f0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e3f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3f8:	781b      	ldrb	r3, [r3, #0]
    e3fa:	4413      	add	r3, r2
    e3fc:	b2da      	uxtb	r2, r3
    e3fe:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e406:	701a      	strb	r2, [r3, #0]
    e408:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e40c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e410:	781b      	ldrb	r3, [r3, #0]
    e412:	3301      	adds	r3, #1
    e414:	b2da      	uxtb	r2, r3
    e416:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e41a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e41e:	701a      	strb	r2, [r3, #0]
    e420:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e424:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e428:	781b      	ldrb	r3, [r3, #0]
    e42a:	2bff      	cmp	r3, #255	; 0xff
    e42c:	d105      	bne.n	e43a <send_nav_values+0xf0e>
    e42e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e436:	2200      	movs	r2, #0
    e438:	701a      	strb	r2, [r3, #0]
    e43a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e43e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e442:	781b      	ldrb	r3, [r3, #0]
    e444:	461a      	mov	r2, r3
    e446:	f24b 2360 	movw	r3, #45664	; 0xb260
    e44a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e44e:	7899      	ldrb	r1, [r3, #2]
    e450:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e454:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e458:	5499      	strb	r1, [r3, r2]
    e45a:	4b57      	ldr	r3, [pc, #348]	; (e5b8 <send_nav_values+0x108c>)
    e45c:	781a      	ldrb	r2, [r3, #0]
    e45e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e462:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e466:	781b      	ldrb	r3, [r3, #0]
    e468:	4413      	add	r3, r2
    e46a:	b2da      	uxtb	r2, r3
    e46c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e470:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e474:	701a      	strb	r2, [r3, #0]
    e476:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e47a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e47e:	781a      	ldrb	r2, [r3, #0]
    e480:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e488:	781b      	ldrb	r3, [r3, #0]
    e48a:	4413      	add	r3, r2
    e48c:	b2da      	uxtb	r2, r3
    e48e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e492:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e496:	701a      	strb	r2, [r3, #0]
    e498:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e49c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4a0:	781b      	ldrb	r3, [r3, #0]
    e4a2:	3301      	adds	r3, #1
    e4a4:	b2da      	uxtb	r2, r3
    e4a6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e4aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4ae:	701a      	strb	r2, [r3, #0]
    e4b0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e4b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4b8:	781b      	ldrb	r3, [r3, #0]
    e4ba:	2bff      	cmp	r3, #255	; 0xff
    e4bc:	d105      	bne.n	e4ca <send_nav_values+0xf9e>
    e4be:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4c6:	2200      	movs	r2, #0
    e4c8:	701a      	strb	r2, [r3, #0]
    e4ca:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e4ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4d2:	781b      	ldrb	r3, [r3, #0]
    e4d4:	461a      	mov	r2, r3
    e4d6:	f24b 2360 	movw	r3, #45664	; 0xb260
    e4da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4de:	78d9      	ldrb	r1, [r3, #3]
    e4e0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e4e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4e8:	5499      	strb	r1, [r3, r2]
    e4ea:	4b34      	ldr	r3, [pc, #208]	; (e5bc <send_nav_values+0x1090>)
    e4ec:	781a      	ldrb	r2, [r3, #0]
    e4ee:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e4f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4f6:	781b      	ldrb	r3, [r3, #0]
    e4f8:	4413      	add	r3, r2
    e4fa:	b2da      	uxtb	r2, r3
    e4fc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e500:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e504:	701a      	strb	r2, [r3, #0]
    e506:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e50a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e50e:	781a      	ldrb	r2, [r3, #0]
    e510:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e514:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e518:	781b      	ldrb	r3, [r3, #0]
    e51a:	4413      	add	r3, r2
    e51c:	b2da      	uxtb	r2, r3
    e51e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e522:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e526:	701a      	strb	r2, [r3, #0]
    e528:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e52c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e530:	781b      	ldrb	r3, [r3, #0]
    e532:	3301      	adds	r3, #1
    e534:	b2da      	uxtb	r2, r3
    e536:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e53a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e53e:	701a      	strb	r2, [r3, #0]
    e540:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e548:	781b      	ldrb	r3, [r3, #0]
    e54a:	2bff      	cmp	r3, #255	; 0xff
    e54c:	d105      	bne.n	e55a <send_nav_values+0x102e>
    e54e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e552:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e556:	2200      	movs	r2, #0
    e558:	701a      	strb	r2, [r3, #0]
    e55a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e55e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e562:	781b      	ldrb	r3, [r3, #0]
    e564:	461a      	mov	r2, r3
    e566:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    e56a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e56e:	7819      	ldrb	r1, [r3, #0]
    e570:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e574:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e578:	5499      	strb	r1, [r3, r2]
    e57a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e57e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e582:	781b      	ldrb	r3, [r3, #0]
    e584:	3301      	adds	r3, #1
    e586:	b2da      	uxtb	r2, r3
    e588:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e58c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e590:	701a      	strb	r2, [r3, #0]
    e592:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e596:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e59a:	781b      	ldrb	r3, [r3, #0]
    e59c:	2bff      	cmp	r3, #255	; 0xff
    e59e:	d10f      	bne.n	e5c0 <send_nav_values+0x1094>
    e5a0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e5a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5a8:	2200      	movs	r2, #0
    e5aa:	701a      	strb	r2, [r3, #0]
    e5ac:	e008      	b.n	e5c0 <send_nav_values+0x1094>
    e5ae:	bf00      	nop
    e5b0:	2000040b 	.word	0x2000040b
    e5b4:	2000b261 	.word	0x2000b261
    e5b8:	2000b262 	.word	0x2000b262
    e5bc:	2000b263 	.word	0x2000b263
    e5c0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e5c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5c8:	781b      	ldrb	r3, [r3, #0]
    e5ca:	461a      	mov	r2, r3
    e5cc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    e5d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5d4:	7819      	ldrb	r1, [r3, #0]
    e5d6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e5da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5de:	5499      	strb	r1, [r3, r2]
    e5e0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e5e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5e8:	781b      	ldrb	r3, [r3, #0]
    e5ea:	3301      	adds	r3, #1
    e5ec:	b2da      	uxtb	r2, r3
    e5ee:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e5f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5f6:	701a      	strb	r2, [r3, #0]
    e5f8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e5fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e600:	781b      	ldrb	r3, [r3, #0]
    e602:	2bff      	cmp	r3, #255	; 0xff
    e604:	d105      	bne.n	e612 <send_nav_values+0x10e6>
    e606:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e60a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e60e:	2200      	movs	r2, #0
    e610:	701a      	strb	r2, [r3, #0]
    e612:	f242 0339 	movw	r3, #8249	; 0x2039
    e616:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e61a:	781b      	ldrb	r3, [r3, #0]
    e61c:	b2db      	uxtb	r3, r3
    e61e:	f003 0310 	and.w	r3, r3, #16
    e622:	2b00      	cmp	r3, #0
    e624:	d15a      	bne.n	e6dc <send_nav_values+0x11b0>
    e626:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    e62a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e62e:	781b      	ldrb	r3, [r3, #0]
    e630:	b2db      	uxtb	r3, r3
    e632:	461a      	mov	r2, r3
    e634:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e63c:	5c9a      	ldrb	r2, [r3, r2]
    e63e:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    e642:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e646:	701a      	strb	r2, [r3, #0]
    e648:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    e64c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e650:	2200      	movs	r2, #0
    e652:	701a      	strb	r2, [r3, #0]
    e654:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    e658:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e65c:	781b      	ldrb	r3, [r3, #0]
    e65e:	b2db      	uxtb	r3, r3
    e660:	3301      	adds	r3, #1
    e662:	b2da      	uxtb	r2, r3
    e664:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    e668:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e66c:	701a      	strb	r2, [r3, #0]
    e66e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    e672:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e676:	781b      	ldrb	r3, [r3, #0]
    e678:	b2db      	uxtb	r3, r3
    e67a:	2bff      	cmp	r3, #255	; 0xff
    e67c:	d105      	bne.n	e68a <send_nav_values+0x115e>
    e67e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    e682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e686:	2200      	movs	r2, #0
    e688:	701a      	strb	r2, [r3, #0]
    e68a:	f242 0338 	movw	r3, #8248	; 0x2038
    e68e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e692:	f242 0238 	movw	r2, #8248	; 0x2038
    e696:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e69a:	7812      	ldrb	r2, [r2, #0]
    e69c:	b2d2      	uxtb	r2, r2
    e69e:	f042 0201 	orr.w	r2, r2, #1
    e6a2:	b2d2      	uxtb	r2, r2
    e6a4:	701a      	strb	r2, [r3, #0]
    e6a6:	f242 0339 	movw	r3, #8249	; 0x2039
    e6aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6ae:	f242 0239 	movw	r2, #8249	; 0x2039
    e6b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e6b6:	7812      	ldrb	r2, [r2, #0]
    e6b8:	b2d2      	uxtb	r2, r2
    e6ba:	f042 0210 	orr.w	r2, r2, #16
    e6be:	b2d2      	uxtb	r2, r2
    e6c0:	701a      	strb	r2, [r3, #0]
    e6c2:	e00b      	b.n	e6dc <send_nav_values+0x11b0>
    e6c4:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    e6c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6cc:	781b      	ldrb	r3, [r3, #0]
    e6ce:	3301      	adds	r3, #1
    e6d0:	b2da      	uxtb	r2, r3
    e6d2:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    e6d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6da:	701a      	strb	r2, [r3, #0]
}
    e6dc:	46bd      	mov	sp, r7
    e6de:	f85d 7b04 	ldr.w	r7, [sp], #4
    e6e2:	4770      	bx	lr

0000e6e4 <course_run>:

void course_run(void){
    e6e4:	b580      	push	{r7, lr}
    e6e6:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e6e8:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    e6ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6f0:	781b      	ldrb	r3, [r3, #0]
    e6f2:	2b02      	cmp	r3, #2
    e6f4:	d006      	beq.n	e704 <course_run+0x20>
    e6f6:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    e6fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6fe:	781b      	ldrb	r3, [r3, #0]
    e700:	2b03      	cmp	r3, #3
    e702:	d112      	bne.n	e72a <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    e704:	f64a 63b6 	movw	r3, #44726	; 0xaeb6
    e708:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e70c:	781b      	ldrb	r3, [r3, #0]
    e70e:	2b02      	cmp	r3, #2
    e710:	d901      	bls.n	e716 <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    e712:	f003 faf1 	bl	11cf8 <course_pid_run>
    desired_roll = nav_desired_roll;
    e716:	f24b 2358 	movw	r3, #45656	; 0xb258
    e71a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e71e:	681a      	ldr	r2, [r3, #0]
    e720:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
    e724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e728:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    e72a:	bd80      	pop	{r7, pc}

0000e72c <altitude_control_task>:

void altitude_control_task(void)
{
    e72c:	b580      	push	{r7, lr}
    e72e:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    e730:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    e734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e738:	781b      	ldrb	r3, [r3, #0]
    e73a:	2b02      	cmp	r3, #2
    e73c:	d006      	beq.n	e74c <altitude_control_task+0x20>
    e73e:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    e742:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e746:	781b      	ldrb	r3, [r3, #0]
    e748:	2b03      	cmp	r3, #3
    e74a:	d108      	bne.n	e75e <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    e74c:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
    e750:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e754:	781b      	ldrb	r3, [r3, #0]
    e756:	2b03      	cmp	r3, #3
    e758:	d101      	bne.n	e75e <altitude_control_task+0x32>
      			altitude_pid_run();
    e75a:	f003 fd55 	bl	12208 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    e75e:	bd80      	pop	{r7, pc}

0000e760 <climb_control_task>:
void climb_control_task(void)
{
    e760:	b580      	push	{r7, lr}
    e762:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e764:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    e768:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e76c:	781b      	ldrb	r3, [r3, #0]
    e76e:	2b02      	cmp	r3, #2
    e770:	d006      	beq.n	e780 <climb_control_task+0x20>
    e772:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
    e776:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e77a:	781b      	ldrb	r3, [r3, #0]
    e77c:	2b03      	cmp	r3, #3
    e77e:	d135      	bne.n	e7ec <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    e780:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
    e784:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e788:	781b      	ldrb	r3, [r3, #0]
    e78a:	2b01      	cmp	r3, #1
    e78c:	d901      	bls.n	e792 <climb_control_task+0x32>
        	climb_pid_run();
    e78e:	f003 fb6b 	bl	11e68 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    e792:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
    e796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e79a:	781b      	ldrb	r3, [r3, #0]
    e79c:	2b01      	cmp	r3, #1
    e79e:	d10a      	bne.n	e7b6 <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    e7a0:	f24b 2350 	movw	r3, #45648	; 0xb250
    e7a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7a8:	881b      	ldrh	r3, [r3, #0]
    e7aa:	b29a      	uxth	r2, r3
    e7ac:	f24b 2304 	movw	r3, #45572	; 0xb204
    e7b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7b4:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    e7b6:	f64a 63bd 	movw	r3, #44733	; 0xaebd
    e7ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7be:	781b      	ldrb	r3, [r3, #0]
    e7c0:	2b00      	cmp	r3, #0
    e7c2:	d10d      	bne.n	e7e0 <climb_control_task+0x80>
    e7c4:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
    e7c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7cc:	881b      	ldrh	r3, [r3, #0]
    e7ce:	2b00      	cmp	r3, #0
    e7d0:	d10c      	bne.n	e7ec <climb_control_task+0x8c>
    e7d2:	f64a 63c8 	movw	r3, #44744	; 0xaec8
    e7d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7da:	781b      	ldrb	r3, [r3, #0]
    e7dc:	2b00      	cmp	r3, #0
    e7de:	d105      	bne.n	e7ec <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    e7e0:	f24b 2304 	movw	r3, #45572	; 0xb204
    e7e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7e8:	2200      	movs	r2, #0
    e7ea:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    e7ec:	bd80      	pop	{r7, pc}
    e7ee:	bf00      	nop

0000e7f0 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    e7f0:	b580      	push	{r7, lr}
    e7f2:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    e7f4:	f003 f926 	bl	11a44 <ir_update>
    estimator_update_state_infrared();
    e7f8:	f006 fbac 	bl	14f54 <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    e7fc:	f003 f990 	bl	11b20 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    e800:	f24b 2304 	movw	r3, #45572	; 0xb204
    e804:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e808:	881a      	ldrh	r2, [r3, #0]
    e80a:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    e80e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e812:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    e814:	f24b 2306 	movw	r3, #45574	; 0xb206
    e818:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e81c:	881a      	ldrh	r2, [r3, #0]
    e81e:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    e822:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e826:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    e828:	f24b 2308 	movw	r3, #45576	; 0xb208
    e82c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e830:	881a      	ldrh	r2, [r3, #0]
    e832:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    e836:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e83a:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    e83c:	f24b 4390 	movw	r3, #46224	; 0xb490
    e840:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e844:	681b      	ldr	r3, [r3, #0]
    e846:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e84a:	4618      	mov	r0, r3
    e84c:	f009 f80c 	bl	17868 <__aeabi_f2d>
    e850:	4602      	mov	r2, r0
    e852:	460b      	mov	r3, r1
    e854:	4610      	mov	r0, r2
    e856:	4619      	mov	r1, r3
    e858:	f04f 0200 	mov.w	r2, #0
    e85c:	f04f 0300 	mov.w	r3, #0
    e860:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e864:	f009 f854 	bl	17910 <__aeabi_dmul>
    e868:	4602      	mov	r2, r0
    e86a:	460b      	mov	r3, r1
    e86c:	4610      	mov	r0, r2
    e86e:	4619      	mov	r1, r3
    e870:	f04f 0200 	mov.w	r2, #0
    e874:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    e878:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    e87c:	f009 faba 	bl	17df4 <__aeabi_dcmplt>
    e880:	4603      	mov	r3, r0
    e882:	2b00      	cmp	r3, #0
    e884:	d002      	beq.n	e88c <stabilisation_task+0x9c>
    e886:	f64d 2280 	movw	r2, #55936	; 0xda80
    e88a:	e046      	b.n	e91a <stabilisation_task+0x12a>
    e88c:	f24b 4390 	movw	r3, #46224	; 0xb490
    e890:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e894:	681b      	ldr	r3, [r3, #0]
    e896:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e89a:	4618      	mov	r0, r3
    e89c:	f008 ffe4 	bl	17868 <__aeabi_f2d>
    e8a0:	4602      	mov	r2, r0
    e8a2:	460b      	mov	r3, r1
    e8a4:	4610      	mov	r0, r2
    e8a6:	4619      	mov	r1, r3
    e8a8:	f04f 0200 	mov.w	r2, #0
    e8ac:	f04f 0300 	mov.w	r3, #0
    e8b0:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e8b4:	f009 f82c 	bl	17910 <__aeabi_dmul>
    e8b8:	4602      	mov	r2, r0
    e8ba:	460b      	mov	r3, r1
    e8bc:	4610      	mov	r0, r2
    e8be:	4619      	mov	r1, r3
    e8c0:	f04f 0200 	mov.w	r2, #0
    e8c4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    e8c8:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    e8cc:	f009 fab0 	bl	17e30 <__aeabi_dcmpgt>
    e8d0:	4603      	mov	r3, r0
    e8d2:	2b00      	cmp	r3, #0
    e8d4:	d002      	beq.n	e8dc <stabilisation_task+0xec>
    e8d6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    e8da:	e01d      	b.n	e918 <stabilisation_task+0x128>
    e8dc:	f24b 4390 	movw	r3, #46224	; 0xb490
    e8e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8e4:	681b      	ldr	r3, [r3, #0]
    e8e6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e8ea:	4618      	mov	r0, r3
    e8ec:	f008 ffbc 	bl	17868 <__aeabi_f2d>
    e8f0:	4602      	mov	r2, r0
    e8f2:	460b      	mov	r3, r1
    e8f4:	4610      	mov	r0, r2
    e8f6:	4619      	mov	r1, r3
    e8f8:	f04f 0200 	mov.w	r2, #0
    e8fc:	f04f 0300 	mov.w	r3, #0
    e900:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e904:	f009 f804 	bl	17910 <__aeabi_dmul>
    e908:	4602      	mov	r2, r0
    e90a:	460b      	mov	r3, r1
    e90c:	4610      	mov	r0, r2
    e90e:	4619      	mov	r1, r3
    e910:	f009 fa98 	bl	17e44 <__aeabi_d2iz>
    e914:	4603      	mov	r3, r0
    e916:	b29b      	uxth	r3, r3
    e918:	b29a      	uxth	r2, r3
    e91a:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    e91e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e922:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    e924:	bd80      	pop	{r7, pc}
    e926:	bf00      	nop

0000e928 <send_gps_pos>:
 * If \a estimator_flight_time is null and \a estimator_hspeed_mod is greater
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void send_gps_pos( void ) {
    e928:	b580      	push	{r7, lr}
    e92a:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    e92c:	f24b 0365 	movw	r3, #45157	; 0xb065
    e930:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e934:	2200      	movs	r2, #0
    e936:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    e938:	f24b 0366 	movw	r3, #45158	; 0xb066
    e93c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e940:	781b      	ldrb	r3, [r3, #0]
    e942:	2b00      	cmp	r3, #0
    e944:	f001 81af 	beq.w	fca6 <send_gps_pos+0x137e>
     DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
    e948:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e94c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e950:	781a      	ldrb	r2, [r3, #0]
    e952:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    e956:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e95a:	781b      	ldrb	r3, [r3, #0]
    e95c:	b2db      	uxtb	r3, r3
    e95e:	429a      	cmp	r2, r3
    e960:	d313      	bcc.n	e98a <send_gps_pos+0x62>
    e962:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    e966:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e96a:	781b      	ldrb	r3, [r3, #0]
    e96c:	b2db      	uxtb	r3, r3
    e96e:	461a      	mov	r2, r3
    e970:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e978:	781b      	ldrb	r3, [r3, #0]
    e97a:	1ad3      	subs	r3, r2, r3
    e97c:	33ff      	adds	r3, #255	; 0xff
    e97e:	2b21      	cmp	r3, #33	; 0x21
    e980:	bfd4      	ite	le
    e982:	2300      	movle	r3, #0
    e984:	2301      	movgt	r3, #1
    e986:	b2db      	uxtb	r3, r3
    e988:	e011      	b.n	e9ae <send_gps_pos+0x86>
    e98a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    e98e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e992:	781b      	ldrb	r3, [r3, #0]
    e994:	b2db      	uxtb	r3, r3
    e996:	461a      	mov	r2, r3
    e998:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e99c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9a0:	781b      	ldrb	r3, [r3, #0]
    e9a2:	1ad3      	subs	r3, r2, r3
    e9a4:	2b21      	cmp	r3, #33	; 0x21
    e9a6:	bfd4      	ite	le
    e9a8:	2300      	movle	r3, #0
    e9aa:	2301      	movgt	r3, #1
    e9ac:	b2db      	uxtb	r3, r3
    e9ae:	2b00      	cmp	r3, #0
    e9b0:	f001 816b 	beq.w	fc8a <send_gps_pos+0x1362>
    e9b4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e9b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9bc:	781b      	ldrb	r3, [r3, #0]
    e9be:	461a      	mov	r2, r3
    e9c0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    e9c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9c8:	2105      	movs	r1, #5
    e9ca:	5499      	strb	r1, [r3, r2]
    e9cc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e9d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9d4:	781b      	ldrb	r3, [r3, #0]
    e9d6:	3301      	adds	r3, #1
    e9d8:	b2da      	uxtb	r2, r3
    e9da:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e9de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9e2:	701a      	strb	r2, [r3, #0]
    e9e4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e9e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9ec:	781b      	ldrb	r3, [r3, #0]
    e9ee:	2bff      	cmp	r3, #255	; 0xff
    e9f0:	d105      	bne.n	e9fe <send_gps_pos+0xd6>
    e9f2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    e9f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9fa:	2200      	movs	r2, #0
    e9fc:	701a      	strb	r2, [r3, #0]
    e9fe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ea02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea06:	781b      	ldrb	r3, [r3, #0]
    ea08:	461a      	mov	r2, r3
    ea0a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ea0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea12:	2108      	movs	r1, #8
    ea14:	5499      	strb	r1, [r3, r2]
    ea16:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ea1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea1e:	781b      	ldrb	r3, [r3, #0]
    ea20:	3301      	adds	r3, #1
    ea22:	b2da      	uxtb	r2, r3
    ea24:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ea28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea2c:	701a      	strb	r2, [r3, #0]
    ea2e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ea32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea36:	781b      	ldrb	r3, [r3, #0]
    ea38:	2bff      	cmp	r3, #255	; 0xff
    ea3a:	d105      	bne.n	ea48 <send_gps_pos+0x120>
    ea3c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ea40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea44:	2200      	movs	r2, #0
    ea46:	701a      	strb	r2, [r3, #0]
    ea48:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ea4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea50:	2208      	movs	r2, #8
    ea52:	701a      	strb	r2, [r3, #0]
    ea54:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ea58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea5c:	2208      	movs	r2, #8
    ea5e:	701a      	strb	r2, [r3, #0]
    ea60:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ea64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea68:	781b      	ldrb	r3, [r3, #0]
    ea6a:	461a      	mov	r2, r3
    ea6c:	f24b 0364 	movw	r3, #45156	; 0xb064
    ea70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea74:	7819      	ldrb	r1, [r3, #0]
    ea76:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ea7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea7e:	5499      	strb	r1, [r3, r2]
    ea80:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ea84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea88:	781a      	ldrb	r2, [r3, #0]
    ea8a:	f24b 0364 	movw	r3, #45156	; 0xb064
    ea8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea92:	781b      	ldrb	r3, [r3, #0]
    ea94:	4413      	add	r3, r2
    ea96:	b2da      	uxtb	r2, r3
    ea98:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ea9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eaa0:	701a      	strb	r2, [r3, #0]
    eaa2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    eaa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eaaa:	781a      	ldrb	r2, [r3, #0]
    eaac:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    eab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eab4:	781b      	ldrb	r3, [r3, #0]
    eab6:	4413      	add	r3, r2
    eab8:	b2da      	uxtb	r2, r3
    eaba:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    eabe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eac2:	701a      	strb	r2, [r3, #0]
    eac4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eacc:	781b      	ldrb	r3, [r3, #0]
    eace:	3301      	adds	r3, #1
    ead0:	b2da      	uxtb	r2, r3
    ead2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ead6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eada:	701a      	strb	r2, [r3, #0]
    eadc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eae4:	781b      	ldrb	r3, [r3, #0]
    eae6:	2bff      	cmp	r3, #255	; 0xff
    eae8:	d105      	bne.n	eaf6 <send_gps_pos+0x1ce>
    eaea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eaee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eaf2:	2200      	movs	r2, #0
    eaf4:	701a      	strb	r2, [r3, #0]
    eaf6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eafa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eafe:	781b      	ldrb	r3, [r3, #0]
    eb00:	461a      	mov	r2, r3
    eb02:	f24b 0354 	movw	r3, #45140	; 0xb054
    eb06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb0a:	7819      	ldrb	r1, [r3, #0]
    eb0c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    eb10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb14:	5499      	strb	r1, [r3, r2]
    eb16:	f24b 0354 	movw	r3, #45140	; 0xb054
    eb1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb1e:	781a      	ldrb	r2, [r3, #0]
    eb20:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    eb24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb28:	781b      	ldrb	r3, [r3, #0]
    eb2a:	4413      	add	r3, r2
    eb2c:	b2da      	uxtb	r2, r3
    eb2e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    eb32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb36:	701a      	strb	r2, [r3, #0]
    eb38:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    eb3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb40:	781a      	ldrb	r2, [r3, #0]
    eb42:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    eb46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb4a:	781b      	ldrb	r3, [r3, #0]
    eb4c:	4413      	add	r3, r2
    eb4e:	b2da      	uxtb	r2, r3
    eb50:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    eb54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb58:	701a      	strb	r2, [r3, #0]
    eb5a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eb5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb62:	781b      	ldrb	r3, [r3, #0]
    eb64:	3301      	adds	r3, #1
    eb66:	b2da      	uxtb	r2, r3
    eb68:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eb6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb70:	701a      	strb	r2, [r3, #0]
    eb72:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eb76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb7a:	781b      	ldrb	r3, [r3, #0]
    eb7c:	2bff      	cmp	r3, #255	; 0xff
    eb7e:	d105      	bne.n	eb8c <send_gps_pos+0x264>
    eb80:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eb84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb88:	2200      	movs	r2, #0
    eb8a:	701a      	strb	r2, [r3, #0]
    eb8c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eb90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb94:	781b      	ldrb	r3, [r3, #0]
    eb96:	461a      	mov	r2, r3
    eb98:	f24b 0354 	movw	r3, #45140	; 0xb054
    eb9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eba0:	7859      	ldrb	r1, [r3, #1]
    eba2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    eba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebaa:	5499      	strb	r1, [r3, r2]
    ebac:	4bd1      	ldr	r3, [pc, #836]	; (eef4 <send_gps_pos+0x5cc>)
    ebae:	781a      	ldrb	r2, [r3, #0]
    ebb0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ebb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebb8:	781b      	ldrb	r3, [r3, #0]
    ebba:	4413      	add	r3, r2
    ebbc:	b2da      	uxtb	r2, r3
    ebbe:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ebc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebc6:	701a      	strb	r2, [r3, #0]
    ebc8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ebcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebd0:	781a      	ldrb	r2, [r3, #0]
    ebd2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ebd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebda:	781b      	ldrb	r3, [r3, #0]
    ebdc:	4413      	add	r3, r2
    ebde:	b2da      	uxtb	r2, r3
    ebe0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ebe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebe8:	701a      	strb	r2, [r3, #0]
    ebea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ebee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebf2:	781b      	ldrb	r3, [r3, #0]
    ebf4:	3301      	adds	r3, #1
    ebf6:	b2da      	uxtb	r2, r3
    ebf8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ebfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec00:	701a      	strb	r2, [r3, #0]
    ec02:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ec06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec0a:	781b      	ldrb	r3, [r3, #0]
    ec0c:	2bff      	cmp	r3, #255	; 0xff
    ec0e:	d105      	bne.n	ec1c <send_gps_pos+0x2f4>
    ec10:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ec14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec18:	2200      	movs	r2, #0
    ec1a:	701a      	strb	r2, [r3, #0]
    ec1c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ec20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec24:	781b      	ldrb	r3, [r3, #0]
    ec26:	461a      	mov	r2, r3
    ec28:	f24b 0354 	movw	r3, #45140	; 0xb054
    ec2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec30:	7899      	ldrb	r1, [r3, #2]
    ec32:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ec36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec3a:	5499      	strb	r1, [r3, r2]
    ec3c:	4bae      	ldr	r3, [pc, #696]	; (eef8 <send_gps_pos+0x5d0>)
    ec3e:	781a      	ldrb	r2, [r3, #0]
    ec40:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ec44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec48:	781b      	ldrb	r3, [r3, #0]
    ec4a:	4413      	add	r3, r2
    ec4c:	b2da      	uxtb	r2, r3
    ec4e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ec52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec56:	701a      	strb	r2, [r3, #0]
    ec58:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ec5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec60:	781a      	ldrb	r2, [r3, #0]
    ec62:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ec66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec6a:	781b      	ldrb	r3, [r3, #0]
    ec6c:	4413      	add	r3, r2
    ec6e:	b2da      	uxtb	r2, r3
    ec70:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ec74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec78:	701a      	strb	r2, [r3, #0]
    ec7a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ec7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec82:	781b      	ldrb	r3, [r3, #0]
    ec84:	3301      	adds	r3, #1
    ec86:	b2da      	uxtb	r2, r3
    ec88:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ec8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec90:	701a      	strb	r2, [r3, #0]
    ec92:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ec96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec9a:	781b      	ldrb	r3, [r3, #0]
    ec9c:	2bff      	cmp	r3, #255	; 0xff
    ec9e:	d105      	bne.n	ecac <send_gps_pos+0x384>
    eca0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eca8:	2200      	movs	r2, #0
    ecaa:	701a      	strb	r2, [r3, #0]
    ecac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ecb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecb4:	781b      	ldrb	r3, [r3, #0]
    ecb6:	461a      	mov	r2, r3
    ecb8:	f24b 0354 	movw	r3, #45140	; 0xb054
    ecbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecc0:	78d9      	ldrb	r1, [r3, #3]
    ecc2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ecc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecca:	5499      	strb	r1, [r3, r2]
    eccc:	4b8b      	ldr	r3, [pc, #556]	; (eefc <send_gps_pos+0x5d4>)
    ecce:	781a      	ldrb	r2, [r3, #0]
    ecd0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ecd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecd8:	781b      	ldrb	r3, [r3, #0]
    ecda:	4413      	add	r3, r2
    ecdc:	b2da      	uxtb	r2, r3
    ecde:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ece2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ece6:	701a      	strb	r2, [r3, #0]
    ece8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ecec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecf0:	781a      	ldrb	r2, [r3, #0]
    ecf2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ecf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecfa:	781b      	ldrb	r3, [r3, #0]
    ecfc:	4413      	add	r3, r2
    ecfe:	b2da      	uxtb	r2, r3
    ed00:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ed04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed08:	701a      	strb	r2, [r3, #0]
    ed0a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ed0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed12:	781b      	ldrb	r3, [r3, #0]
    ed14:	3301      	adds	r3, #1
    ed16:	b2da      	uxtb	r2, r3
    ed18:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ed1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed20:	701a      	strb	r2, [r3, #0]
    ed22:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ed26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed2a:	781b      	ldrb	r3, [r3, #0]
    ed2c:	2bff      	cmp	r3, #255	; 0xff
    ed2e:	d105      	bne.n	ed3c <send_gps_pos+0x414>
    ed30:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ed34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed38:	2200      	movs	r2, #0
    ed3a:	701a      	strb	r2, [r3, #0]
    ed3c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ed40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed44:	781b      	ldrb	r3, [r3, #0]
    ed46:	461a      	mov	r2, r3
    ed48:	f24b 0358 	movw	r3, #45144	; 0xb058
    ed4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed50:	7819      	ldrb	r1, [r3, #0]
    ed52:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ed56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed5a:	5499      	strb	r1, [r3, r2]
    ed5c:	f24b 0358 	movw	r3, #45144	; 0xb058
    ed60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed64:	781a      	ldrb	r2, [r3, #0]
    ed66:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ed6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed6e:	781b      	ldrb	r3, [r3, #0]
    ed70:	4413      	add	r3, r2
    ed72:	b2da      	uxtb	r2, r3
    ed74:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ed78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed7c:	701a      	strb	r2, [r3, #0]
    ed7e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ed82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed86:	781a      	ldrb	r2, [r3, #0]
    ed88:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ed8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed90:	781b      	ldrb	r3, [r3, #0]
    ed92:	4413      	add	r3, r2
    ed94:	b2da      	uxtb	r2, r3
    ed96:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ed9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed9e:	701a      	strb	r2, [r3, #0]
    eda0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eda4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eda8:	781b      	ldrb	r3, [r3, #0]
    edaa:	3301      	adds	r3, #1
    edac:	b2da      	uxtb	r2, r3
    edae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    edb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edb6:	701a      	strb	r2, [r3, #0]
    edb8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    edbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edc0:	781b      	ldrb	r3, [r3, #0]
    edc2:	2bff      	cmp	r3, #255	; 0xff
    edc4:	d105      	bne.n	edd2 <send_gps_pos+0x4aa>
    edc6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    edca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edce:	2200      	movs	r2, #0
    edd0:	701a      	strb	r2, [r3, #0]
    edd2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    edd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edda:	781b      	ldrb	r3, [r3, #0]
    eddc:	461a      	mov	r2, r3
    edde:	f24b 0358 	movw	r3, #45144	; 0xb058
    ede2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ede6:	7859      	ldrb	r1, [r3, #1]
    ede8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    edec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edf0:	5499      	strb	r1, [r3, r2]
    edf2:	4b43      	ldr	r3, [pc, #268]	; (ef00 <send_gps_pos+0x5d8>)
    edf4:	781a      	ldrb	r2, [r3, #0]
    edf6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    edfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edfe:	781b      	ldrb	r3, [r3, #0]
    ee00:	4413      	add	r3, r2
    ee02:	b2da      	uxtb	r2, r3
    ee04:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ee08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee0c:	701a      	strb	r2, [r3, #0]
    ee0e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ee12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee16:	781a      	ldrb	r2, [r3, #0]
    ee18:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ee1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee20:	781b      	ldrb	r3, [r3, #0]
    ee22:	4413      	add	r3, r2
    ee24:	b2da      	uxtb	r2, r3
    ee26:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ee2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee2e:	701a      	strb	r2, [r3, #0]
    ee30:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ee34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee38:	781b      	ldrb	r3, [r3, #0]
    ee3a:	3301      	adds	r3, #1
    ee3c:	b2da      	uxtb	r2, r3
    ee3e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ee42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee46:	701a      	strb	r2, [r3, #0]
    ee48:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ee4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee50:	781b      	ldrb	r3, [r3, #0]
    ee52:	2bff      	cmp	r3, #255	; 0xff
    ee54:	d105      	bne.n	ee62 <send_gps_pos+0x53a>
    ee56:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ee5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee5e:	2200      	movs	r2, #0
    ee60:	701a      	strb	r2, [r3, #0]
    ee62:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ee66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee6a:	781b      	ldrb	r3, [r3, #0]
    ee6c:	461a      	mov	r2, r3
    ee6e:	f24b 0358 	movw	r3, #45144	; 0xb058
    ee72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee76:	7899      	ldrb	r1, [r3, #2]
    ee78:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ee7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee80:	5499      	strb	r1, [r3, r2]
    ee82:	4b20      	ldr	r3, [pc, #128]	; (ef04 <send_gps_pos+0x5dc>)
    ee84:	781a      	ldrb	r2, [r3, #0]
    ee86:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ee8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee8e:	781b      	ldrb	r3, [r3, #0]
    ee90:	4413      	add	r3, r2
    ee92:	b2da      	uxtb	r2, r3
    ee94:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ee98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee9c:	701a      	strb	r2, [r3, #0]
    ee9e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    eea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eea6:	781a      	ldrb	r2, [r3, #0]
    eea8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    eeac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eeb0:	781b      	ldrb	r3, [r3, #0]
    eeb2:	4413      	add	r3, r2
    eeb4:	b2da      	uxtb	r2, r3
    eeb6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    eeba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eebe:	701a      	strb	r2, [r3, #0]
    eec0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eec8:	781b      	ldrb	r3, [r3, #0]
    eeca:	3301      	adds	r3, #1
    eecc:	b2da      	uxtb	r2, r3
    eece:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eed6:	701a      	strb	r2, [r3, #0]
    eed8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eedc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eee0:	781b      	ldrb	r3, [r3, #0]
    eee2:	2bff      	cmp	r3, #255	; 0xff
    eee4:	d110      	bne.n	ef08 <send_gps_pos+0x5e0>
    eee6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    eeea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eeee:	2200      	movs	r2, #0
    eef0:	701a      	strb	r2, [r3, #0]
    eef2:	e009      	b.n	ef08 <send_gps_pos+0x5e0>
    eef4:	2000b055 	.word	0x2000b055
    eef8:	2000b056 	.word	0x2000b056
    eefc:	2000b057 	.word	0x2000b057
    ef00:	2000b059 	.word	0x2000b059
    ef04:	2000b05a 	.word	0x2000b05a
    ef08:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ef0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef10:	781b      	ldrb	r3, [r3, #0]
    ef12:	461a      	mov	r2, r3
    ef14:	f24b 0358 	movw	r3, #45144	; 0xb058
    ef18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef1c:	78d9      	ldrb	r1, [r3, #3]
    ef1e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ef22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef26:	5499      	strb	r1, [r3, r2]
    ef28:	4bd3      	ldr	r3, [pc, #844]	; (f278 <send_gps_pos+0x950>)
    ef2a:	781a      	ldrb	r2, [r3, #0]
    ef2c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ef30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef34:	781b      	ldrb	r3, [r3, #0]
    ef36:	4413      	add	r3, r2
    ef38:	b2da      	uxtb	r2, r3
    ef3a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ef3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef42:	701a      	strb	r2, [r3, #0]
    ef44:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ef48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef4c:	781a      	ldrb	r2, [r3, #0]
    ef4e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ef52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef56:	781b      	ldrb	r3, [r3, #0]
    ef58:	4413      	add	r3, r2
    ef5a:	b2da      	uxtb	r2, r3
    ef5c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ef60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef64:	701a      	strb	r2, [r3, #0]
    ef66:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ef6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef6e:	781b      	ldrb	r3, [r3, #0]
    ef70:	3301      	adds	r3, #1
    ef72:	b2da      	uxtb	r2, r3
    ef74:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ef78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef7c:	701a      	strb	r2, [r3, #0]
    ef7e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ef82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef86:	781b      	ldrb	r3, [r3, #0]
    ef88:	2bff      	cmp	r3, #255	; 0xff
    ef8a:	d105      	bne.n	ef98 <send_gps_pos+0x670>
    ef8c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ef90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef94:	2200      	movs	r2, #0
    ef96:	701a      	strb	r2, [r3, #0]
    ef98:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ef9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efa0:	781b      	ldrb	r3, [r3, #0]
    efa2:	461a      	mov	r2, r3
    efa4:	f24b 0350 	movw	r3, #45136	; 0xb050
    efa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efac:	7819      	ldrb	r1, [r3, #0]
    efae:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    efb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efb6:	5499      	strb	r1, [r3, r2]
    efb8:	f24b 0350 	movw	r3, #45136	; 0xb050
    efbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efc0:	781a      	ldrb	r2, [r3, #0]
    efc2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    efc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efca:	781b      	ldrb	r3, [r3, #0]
    efcc:	4413      	add	r3, r2
    efce:	b2da      	uxtb	r2, r3
    efd0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    efd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efd8:	701a      	strb	r2, [r3, #0]
    efda:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    efde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efe2:	781a      	ldrb	r2, [r3, #0]
    efe4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    efe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efec:	781b      	ldrb	r3, [r3, #0]
    efee:	4413      	add	r3, r2
    eff0:	b2da      	uxtb	r2, r3
    eff2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    eff6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    effa:	701a      	strb	r2, [r3, #0]
    effc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f000:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f004:	781b      	ldrb	r3, [r3, #0]
    f006:	3301      	adds	r3, #1
    f008:	b2da      	uxtb	r2, r3
    f00a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f00e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f012:	701a      	strb	r2, [r3, #0]
    f014:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f018:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f01c:	781b      	ldrb	r3, [r3, #0]
    f01e:	2bff      	cmp	r3, #255	; 0xff
    f020:	d105      	bne.n	f02e <send_gps_pos+0x706>
    f022:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f026:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f02a:	2200      	movs	r2, #0
    f02c:	701a      	strb	r2, [r3, #0]
    f02e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f032:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f036:	781b      	ldrb	r3, [r3, #0]
    f038:	461a      	mov	r2, r3
    f03a:	f24b 0350 	movw	r3, #45136	; 0xb050
    f03e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f042:	7859      	ldrb	r1, [r3, #1]
    f044:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f048:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f04c:	5499      	strb	r1, [r3, r2]
    f04e:	4b8b      	ldr	r3, [pc, #556]	; (f27c <send_gps_pos+0x954>)
    f050:	781a      	ldrb	r2, [r3, #0]
    f052:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f056:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f05a:	781b      	ldrb	r3, [r3, #0]
    f05c:	4413      	add	r3, r2
    f05e:	b2da      	uxtb	r2, r3
    f060:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f068:	701a      	strb	r2, [r3, #0]
    f06a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f06e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f072:	781a      	ldrb	r2, [r3, #0]
    f074:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f078:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f07c:	781b      	ldrb	r3, [r3, #0]
    f07e:	4413      	add	r3, r2
    f080:	b2da      	uxtb	r2, r3
    f082:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f086:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f08a:	701a      	strb	r2, [r3, #0]
    f08c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f090:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f094:	781b      	ldrb	r3, [r3, #0]
    f096:	3301      	adds	r3, #1
    f098:	b2da      	uxtb	r2, r3
    f09a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f09e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0a2:	701a      	strb	r2, [r3, #0]
    f0a4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f0a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0ac:	781b      	ldrb	r3, [r3, #0]
    f0ae:	2bff      	cmp	r3, #255	; 0xff
    f0b0:	d105      	bne.n	f0be <send_gps_pos+0x796>
    f0b2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f0b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0ba:	2200      	movs	r2, #0
    f0bc:	701a      	strb	r2, [r3, #0]
    f0be:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f0c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0c6:	781b      	ldrb	r3, [r3, #0]
    f0c8:	461a      	mov	r2, r3
    f0ca:	f24b 0350 	movw	r3, #45136	; 0xb050
    f0ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0d2:	7899      	ldrb	r1, [r3, #2]
    f0d4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f0d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0dc:	5499      	strb	r1, [r3, r2]
    f0de:	4b68      	ldr	r3, [pc, #416]	; (f280 <send_gps_pos+0x958>)
    f0e0:	781a      	ldrb	r2, [r3, #0]
    f0e2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f0e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0ea:	781b      	ldrb	r3, [r3, #0]
    f0ec:	4413      	add	r3, r2
    f0ee:	b2da      	uxtb	r2, r3
    f0f0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f0f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0f8:	701a      	strb	r2, [r3, #0]
    f0fa:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f0fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f102:	781a      	ldrb	r2, [r3, #0]
    f104:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f108:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f10c:	781b      	ldrb	r3, [r3, #0]
    f10e:	4413      	add	r3, r2
    f110:	b2da      	uxtb	r2, r3
    f112:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f116:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f11a:	701a      	strb	r2, [r3, #0]
    f11c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f120:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f124:	781b      	ldrb	r3, [r3, #0]
    f126:	3301      	adds	r3, #1
    f128:	b2da      	uxtb	r2, r3
    f12a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f12e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f132:	701a      	strb	r2, [r3, #0]
    f134:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f138:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f13c:	781b      	ldrb	r3, [r3, #0]
    f13e:	2bff      	cmp	r3, #255	; 0xff
    f140:	d105      	bne.n	f14e <send_gps_pos+0x826>
    f142:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f146:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f14a:	2200      	movs	r2, #0
    f14c:	701a      	strb	r2, [r3, #0]
    f14e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f152:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f156:	781b      	ldrb	r3, [r3, #0]
    f158:	461a      	mov	r2, r3
    f15a:	f24b 0350 	movw	r3, #45136	; 0xb050
    f15e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f162:	78d9      	ldrb	r1, [r3, #3]
    f164:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f168:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f16c:	5499      	strb	r1, [r3, r2]
    f16e:	4b45      	ldr	r3, [pc, #276]	; (f284 <send_gps_pos+0x95c>)
    f170:	781a      	ldrb	r2, [r3, #0]
    f172:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f176:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f17a:	781b      	ldrb	r3, [r3, #0]
    f17c:	4413      	add	r3, r2
    f17e:	b2da      	uxtb	r2, r3
    f180:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f184:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f188:	701a      	strb	r2, [r3, #0]
    f18a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f18e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f192:	781a      	ldrb	r2, [r3, #0]
    f194:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f198:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f19c:	781b      	ldrb	r3, [r3, #0]
    f19e:	4413      	add	r3, r2
    f1a0:	b2da      	uxtb	r2, r3
    f1a2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f1a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1aa:	701a      	strb	r2, [r3, #0]
    f1ac:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f1b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1b4:	781b      	ldrb	r3, [r3, #0]
    f1b6:	3301      	adds	r3, #1
    f1b8:	b2da      	uxtb	r2, r3
    f1ba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f1be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1c2:	701a      	strb	r2, [r3, #0]
    f1c4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f1c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1cc:	781b      	ldrb	r3, [r3, #0]
    f1ce:	2bff      	cmp	r3, #255	; 0xff
    f1d0:	d105      	bne.n	f1de <send_gps_pos+0x8b6>
    f1d2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f1d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1da:	2200      	movs	r2, #0
    f1dc:	701a      	strb	r2, [r3, #0]
    f1de:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f1e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1e6:	781b      	ldrb	r3, [r3, #0]
    f1e8:	461a      	mov	r2, r3
    f1ea:	f24b 0344 	movw	r3, #45124	; 0xb044
    f1ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1f2:	7819      	ldrb	r1, [r3, #0]
    f1f4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f1f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1fc:	5499      	strb	r1, [r3, r2]
    f1fe:	f24b 0344 	movw	r3, #45124	; 0xb044
    f202:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f206:	781a      	ldrb	r2, [r3, #0]
    f208:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f20c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f210:	781b      	ldrb	r3, [r3, #0]
    f212:	4413      	add	r3, r2
    f214:	b2da      	uxtb	r2, r3
    f216:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f21a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f21e:	701a      	strb	r2, [r3, #0]
    f220:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f224:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f228:	781a      	ldrb	r2, [r3, #0]
    f22a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f22e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f232:	781b      	ldrb	r3, [r3, #0]
    f234:	4413      	add	r3, r2
    f236:	b2da      	uxtb	r2, r3
    f238:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f23c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f240:	701a      	strb	r2, [r3, #0]
    f242:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f246:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f24a:	781b      	ldrb	r3, [r3, #0]
    f24c:	3301      	adds	r3, #1
    f24e:	b2da      	uxtb	r2, r3
    f250:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f254:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f258:	701a      	strb	r2, [r3, #0]
    f25a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f25e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f262:	781b      	ldrb	r3, [r3, #0]
    f264:	2bff      	cmp	r3, #255	; 0xff
    f266:	d10f      	bne.n	f288 <send_gps_pos+0x960>
    f268:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f26c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f270:	2200      	movs	r2, #0
    f272:	701a      	strb	r2, [r3, #0]
    f274:	e008      	b.n	f288 <send_gps_pos+0x960>
    f276:	bf00      	nop
    f278:	2000b05b 	.word	0x2000b05b
    f27c:	2000b051 	.word	0x2000b051
    f280:	2000b052 	.word	0x2000b052
    f284:	2000b053 	.word	0x2000b053
    f288:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f28c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f290:	781b      	ldrb	r3, [r3, #0]
    f292:	461a      	mov	r2, r3
    f294:	f24b 0344 	movw	r3, #45124	; 0xb044
    f298:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f29c:	7859      	ldrb	r1, [r3, #1]
    f29e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f2a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2a6:	5499      	strb	r1, [r3, r2]
    f2a8:	4bd1      	ldr	r3, [pc, #836]	; (f5f0 <send_gps_pos+0xcc8>)
    f2aa:	781a      	ldrb	r2, [r3, #0]
    f2ac:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f2b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2b4:	781b      	ldrb	r3, [r3, #0]
    f2b6:	4413      	add	r3, r2
    f2b8:	b2da      	uxtb	r2, r3
    f2ba:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f2be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2c2:	701a      	strb	r2, [r3, #0]
    f2c4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f2c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2cc:	781a      	ldrb	r2, [r3, #0]
    f2ce:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f2d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2d6:	781b      	ldrb	r3, [r3, #0]
    f2d8:	4413      	add	r3, r2
    f2da:	b2da      	uxtb	r2, r3
    f2dc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f2e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2e4:	701a      	strb	r2, [r3, #0]
    f2e6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f2ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2ee:	781b      	ldrb	r3, [r3, #0]
    f2f0:	3301      	adds	r3, #1
    f2f2:	b2da      	uxtb	r2, r3
    f2f4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f2f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2fc:	701a      	strb	r2, [r3, #0]
    f2fe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f302:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f306:	781b      	ldrb	r3, [r3, #0]
    f308:	2bff      	cmp	r3, #255	; 0xff
    f30a:	d105      	bne.n	f318 <send_gps_pos+0x9f0>
    f30c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f314:	2200      	movs	r2, #0
    f316:	701a      	strb	r2, [r3, #0]
    f318:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f31c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f320:	781b      	ldrb	r3, [r3, #0]
    f322:	461a      	mov	r2, r3
    f324:	f24b 0344 	movw	r3, #45124	; 0xb044
    f328:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f32c:	7899      	ldrb	r1, [r3, #2]
    f32e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f336:	5499      	strb	r1, [r3, r2]
    f338:	4bae      	ldr	r3, [pc, #696]	; (f5f4 <send_gps_pos+0xccc>)
    f33a:	781a      	ldrb	r2, [r3, #0]
    f33c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f344:	781b      	ldrb	r3, [r3, #0]
    f346:	4413      	add	r3, r2
    f348:	b2da      	uxtb	r2, r3
    f34a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f34e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f352:	701a      	strb	r2, [r3, #0]
    f354:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f358:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f35c:	781a      	ldrb	r2, [r3, #0]
    f35e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f362:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f366:	781b      	ldrb	r3, [r3, #0]
    f368:	4413      	add	r3, r2
    f36a:	b2da      	uxtb	r2, r3
    f36c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f370:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f374:	701a      	strb	r2, [r3, #0]
    f376:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f37a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f37e:	781b      	ldrb	r3, [r3, #0]
    f380:	3301      	adds	r3, #1
    f382:	b2da      	uxtb	r2, r3
    f384:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f388:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f38c:	701a      	strb	r2, [r3, #0]
    f38e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f392:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f396:	781b      	ldrb	r3, [r3, #0]
    f398:	2bff      	cmp	r3, #255	; 0xff
    f39a:	d105      	bne.n	f3a8 <send_gps_pos+0xa80>
    f39c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f3a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3a4:	2200      	movs	r2, #0
    f3a6:	701a      	strb	r2, [r3, #0]
    f3a8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f3ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3b0:	781b      	ldrb	r3, [r3, #0]
    f3b2:	461a      	mov	r2, r3
    f3b4:	f24b 0344 	movw	r3, #45124	; 0xb044
    f3b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3bc:	78d9      	ldrb	r1, [r3, #3]
    f3be:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f3c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3c6:	5499      	strb	r1, [r3, r2]
    f3c8:	4b8b      	ldr	r3, [pc, #556]	; (f5f8 <send_gps_pos+0xcd0>)
    f3ca:	781a      	ldrb	r2, [r3, #0]
    f3cc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f3d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3d4:	781b      	ldrb	r3, [r3, #0]
    f3d6:	4413      	add	r3, r2
    f3d8:	b2da      	uxtb	r2, r3
    f3da:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f3de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3e2:	701a      	strb	r2, [r3, #0]
    f3e4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f3e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3ec:	781a      	ldrb	r2, [r3, #0]
    f3ee:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f3f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3f6:	781b      	ldrb	r3, [r3, #0]
    f3f8:	4413      	add	r3, r2
    f3fa:	b2da      	uxtb	r2, r3
    f3fc:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f400:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f404:	701a      	strb	r2, [r3, #0]
    f406:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f40a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f40e:	781b      	ldrb	r3, [r3, #0]
    f410:	3301      	adds	r3, #1
    f412:	b2da      	uxtb	r2, r3
    f414:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f41c:	701a      	strb	r2, [r3, #0]
    f41e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f422:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f426:	781b      	ldrb	r3, [r3, #0]
    f428:	2bff      	cmp	r3, #255	; 0xff
    f42a:	d105      	bne.n	f438 <send_gps_pos+0xb10>
    f42c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f434:	2200      	movs	r2, #0
    f436:	701a      	strb	r2, [r3, #0]
    f438:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f43c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f440:	781b      	ldrb	r3, [r3, #0]
    f442:	461a      	mov	r2, r3
    f444:	f24b 0348 	movw	r3, #45128	; 0xb048
    f448:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f44c:	7819      	ldrb	r1, [r3, #0]
    f44e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f452:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f456:	5499      	strb	r1, [r3, r2]
    f458:	f24b 0348 	movw	r3, #45128	; 0xb048
    f45c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f460:	781a      	ldrb	r2, [r3, #0]
    f462:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f466:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f46a:	781b      	ldrb	r3, [r3, #0]
    f46c:	4413      	add	r3, r2
    f46e:	b2da      	uxtb	r2, r3
    f470:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f474:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f478:	701a      	strb	r2, [r3, #0]
    f47a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f47e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f482:	781a      	ldrb	r2, [r3, #0]
    f484:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f488:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f48c:	781b      	ldrb	r3, [r3, #0]
    f48e:	4413      	add	r3, r2
    f490:	b2da      	uxtb	r2, r3
    f492:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f496:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f49a:	701a      	strb	r2, [r3, #0]
    f49c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f4a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4a4:	781b      	ldrb	r3, [r3, #0]
    f4a6:	3301      	adds	r3, #1
    f4a8:	b2da      	uxtb	r2, r3
    f4aa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f4ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4b2:	701a      	strb	r2, [r3, #0]
    f4b4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f4b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4bc:	781b      	ldrb	r3, [r3, #0]
    f4be:	2bff      	cmp	r3, #255	; 0xff
    f4c0:	d105      	bne.n	f4ce <send_gps_pos+0xba6>
    f4c2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f4c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4ca:	2200      	movs	r2, #0
    f4cc:	701a      	strb	r2, [r3, #0]
    f4ce:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f4d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4d6:	781b      	ldrb	r3, [r3, #0]
    f4d8:	461a      	mov	r2, r3
    f4da:	f24b 0348 	movw	r3, #45128	; 0xb048
    f4de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4e2:	7859      	ldrb	r1, [r3, #1]
    f4e4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f4e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4ec:	5499      	strb	r1, [r3, r2]
    f4ee:	4b43      	ldr	r3, [pc, #268]	; (f5fc <send_gps_pos+0xcd4>)
    f4f0:	781a      	ldrb	r2, [r3, #0]
    f4f2:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f4f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4fa:	781b      	ldrb	r3, [r3, #0]
    f4fc:	4413      	add	r3, r2
    f4fe:	b2da      	uxtb	r2, r3
    f500:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f504:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f508:	701a      	strb	r2, [r3, #0]
    f50a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f50e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f512:	781a      	ldrb	r2, [r3, #0]
    f514:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f518:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f51c:	781b      	ldrb	r3, [r3, #0]
    f51e:	4413      	add	r3, r2
    f520:	b2da      	uxtb	r2, r3
    f522:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f526:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f52a:	701a      	strb	r2, [r3, #0]
    f52c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f530:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f534:	781b      	ldrb	r3, [r3, #0]
    f536:	3301      	adds	r3, #1
    f538:	b2da      	uxtb	r2, r3
    f53a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f53e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f542:	701a      	strb	r2, [r3, #0]
    f544:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f548:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f54c:	781b      	ldrb	r3, [r3, #0]
    f54e:	2bff      	cmp	r3, #255	; 0xff
    f550:	d105      	bne.n	f55e <send_gps_pos+0xc36>
    f552:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f556:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f55a:	2200      	movs	r2, #0
    f55c:	701a      	strb	r2, [r3, #0]
    f55e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f566:	781b      	ldrb	r3, [r3, #0]
    f568:	461a      	mov	r2, r3
    f56a:	f24b 0348 	movw	r3, #45128	; 0xb048
    f56e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f572:	7899      	ldrb	r1, [r3, #2]
    f574:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f578:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f57c:	5499      	strb	r1, [r3, r2]
    f57e:	4b20      	ldr	r3, [pc, #128]	; (f600 <send_gps_pos+0xcd8>)
    f580:	781a      	ldrb	r2, [r3, #0]
    f582:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f586:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f58a:	781b      	ldrb	r3, [r3, #0]
    f58c:	4413      	add	r3, r2
    f58e:	b2da      	uxtb	r2, r3
    f590:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f594:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f598:	701a      	strb	r2, [r3, #0]
    f59a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f59e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5a2:	781a      	ldrb	r2, [r3, #0]
    f5a4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f5a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5ac:	781b      	ldrb	r3, [r3, #0]
    f5ae:	4413      	add	r3, r2
    f5b0:	b2da      	uxtb	r2, r3
    f5b2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f5b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5ba:	701a      	strb	r2, [r3, #0]
    f5bc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f5c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5c4:	781b      	ldrb	r3, [r3, #0]
    f5c6:	3301      	adds	r3, #1
    f5c8:	b2da      	uxtb	r2, r3
    f5ca:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f5ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5d2:	701a      	strb	r2, [r3, #0]
    f5d4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f5d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5dc:	781b      	ldrb	r3, [r3, #0]
    f5de:	2bff      	cmp	r3, #255	; 0xff
    f5e0:	d110      	bne.n	f604 <send_gps_pos+0xcdc>
    f5e2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f5e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5ea:	2200      	movs	r2, #0
    f5ec:	701a      	strb	r2, [r3, #0]
    f5ee:	e009      	b.n	f604 <send_gps_pos+0xcdc>
    f5f0:	2000b045 	.word	0x2000b045
    f5f4:	2000b046 	.word	0x2000b046
    f5f8:	2000b047 	.word	0x2000b047
    f5fc:	2000b049 	.word	0x2000b049
    f600:	2000b04a 	.word	0x2000b04a
    f604:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f608:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f60c:	781b      	ldrb	r3, [r3, #0]
    f60e:	461a      	mov	r2, r3
    f610:	f24b 0348 	movw	r3, #45128	; 0xb048
    f614:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f618:	78d9      	ldrb	r1, [r3, #3]
    f61a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f61e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f622:	5499      	strb	r1, [r3, r2]
    f624:	4bd3      	ldr	r3, [pc, #844]	; (f974 <send_gps_pos+0x104c>)
    f626:	781a      	ldrb	r2, [r3, #0]
    f628:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f62c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f630:	781b      	ldrb	r3, [r3, #0]
    f632:	4413      	add	r3, r2
    f634:	b2da      	uxtb	r2, r3
    f636:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f63a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f63e:	701a      	strb	r2, [r3, #0]
    f640:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f644:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f648:	781a      	ldrb	r2, [r3, #0]
    f64a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f64e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f652:	781b      	ldrb	r3, [r3, #0]
    f654:	4413      	add	r3, r2
    f656:	b2da      	uxtb	r2, r3
    f658:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f65c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f660:	701a      	strb	r2, [r3, #0]
    f662:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f666:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f66a:	781b      	ldrb	r3, [r3, #0]
    f66c:	3301      	adds	r3, #1
    f66e:	b2da      	uxtb	r2, r3
    f670:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f674:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f678:	701a      	strb	r2, [r3, #0]
    f67a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f67e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f682:	781b      	ldrb	r3, [r3, #0]
    f684:	2bff      	cmp	r3, #255	; 0xff
    f686:	d105      	bne.n	f694 <send_gps_pos+0xd6c>
    f688:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f68c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f690:	2200      	movs	r2, #0
    f692:	701a      	strb	r2, [r3, #0]
    f694:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f698:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f69c:	781b      	ldrb	r3, [r3, #0]
    f69e:	461a      	mov	r2, r3
    f6a0:	f24b 034c 	movw	r3, #45132	; 0xb04c
    f6a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6a8:	7819      	ldrb	r1, [r3, #0]
    f6aa:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f6ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6b2:	5499      	strb	r1, [r3, r2]
    f6b4:	f24b 034c 	movw	r3, #45132	; 0xb04c
    f6b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6bc:	781a      	ldrb	r2, [r3, #0]
    f6be:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f6c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6c6:	781b      	ldrb	r3, [r3, #0]
    f6c8:	4413      	add	r3, r2
    f6ca:	b2da      	uxtb	r2, r3
    f6cc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f6d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6d4:	701a      	strb	r2, [r3, #0]
    f6d6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f6da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6de:	781a      	ldrb	r2, [r3, #0]
    f6e0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f6e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6e8:	781b      	ldrb	r3, [r3, #0]
    f6ea:	4413      	add	r3, r2
    f6ec:	b2da      	uxtb	r2, r3
    f6ee:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f6f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6f6:	701a      	strb	r2, [r3, #0]
    f6f8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f6fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f700:	781b      	ldrb	r3, [r3, #0]
    f702:	3301      	adds	r3, #1
    f704:	b2da      	uxtb	r2, r3
    f706:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f70a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f70e:	701a      	strb	r2, [r3, #0]
    f710:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f714:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f718:	781b      	ldrb	r3, [r3, #0]
    f71a:	2bff      	cmp	r3, #255	; 0xff
    f71c:	d105      	bne.n	f72a <send_gps_pos+0xe02>
    f71e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f722:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f726:	2200      	movs	r2, #0
    f728:	701a      	strb	r2, [r3, #0]
    f72a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f72e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f732:	781b      	ldrb	r3, [r3, #0]
    f734:	461a      	mov	r2, r3
    f736:	f24b 034c 	movw	r3, #45132	; 0xb04c
    f73a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f73e:	7859      	ldrb	r1, [r3, #1]
    f740:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f748:	5499      	strb	r1, [r3, r2]
    f74a:	4b8b      	ldr	r3, [pc, #556]	; (f978 <send_gps_pos+0x1050>)
    f74c:	781a      	ldrb	r2, [r3, #0]
    f74e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f756:	781b      	ldrb	r3, [r3, #0]
    f758:	4413      	add	r3, r2
    f75a:	b2da      	uxtb	r2, r3
    f75c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f760:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f764:	701a      	strb	r2, [r3, #0]
    f766:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f76a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f76e:	781a      	ldrb	r2, [r3, #0]
    f770:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f774:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f778:	781b      	ldrb	r3, [r3, #0]
    f77a:	4413      	add	r3, r2
    f77c:	b2da      	uxtb	r2, r3
    f77e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f782:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f786:	701a      	strb	r2, [r3, #0]
    f788:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f78c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f790:	781b      	ldrb	r3, [r3, #0]
    f792:	3301      	adds	r3, #1
    f794:	b2da      	uxtb	r2, r3
    f796:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f79a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f79e:	701a      	strb	r2, [r3, #0]
    f7a0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f7a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7a8:	781b      	ldrb	r3, [r3, #0]
    f7aa:	2bff      	cmp	r3, #255	; 0xff
    f7ac:	d105      	bne.n	f7ba <send_gps_pos+0xe92>
    f7ae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f7b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7b6:	2200      	movs	r2, #0
    f7b8:	701a      	strb	r2, [r3, #0]
    f7ba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f7be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7c2:	781b      	ldrb	r3, [r3, #0]
    f7c4:	461a      	mov	r2, r3
    f7c6:	f24b 034c 	movw	r3, #45132	; 0xb04c
    f7ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7ce:	7899      	ldrb	r1, [r3, #2]
    f7d0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f7d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7d8:	5499      	strb	r1, [r3, r2]
    f7da:	4b68      	ldr	r3, [pc, #416]	; (f97c <send_gps_pos+0x1054>)
    f7dc:	781a      	ldrb	r2, [r3, #0]
    f7de:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f7e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7e6:	781b      	ldrb	r3, [r3, #0]
    f7e8:	4413      	add	r3, r2
    f7ea:	b2da      	uxtb	r2, r3
    f7ec:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f7f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7f4:	701a      	strb	r2, [r3, #0]
    f7f6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f7fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7fe:	781a      	ldrb	r2, [r3, #0]
    f800:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f804:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f808:	781b      	ldrb	r3, [r3, #0]
    f80a:	4413      	add	r3, r2
    f80c:	b2da      	uxtb	r2, r3
    f80e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f816:	701a      	strb	r2, [r3, #0]
    f818:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f81c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f820:	781b      	ldrb	r3, [r3, #0]
    f822:	3301      	adds	r3, #1
    f824:	b2da      	uxtb	r2, r3
    f826:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f82a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f82e:	701a      	strb	r2, [r3, #0]
    f830:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f834:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f838:	781b      	ldrb	r3, [r3, #0]
    f83a:	2bff      	cmp	r3, #255	; 0xff
    f83c:	d105      	bne.n	f84a <send_gps_pos+0xf22>
    f83e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f842:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f846:	2200      	movs	r2, #0
    f848:	701a      	strb	r2, [r3, #0]
    f84a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f84e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f852:	781b      	ldrb	r3, [r3, #0]
    f854:	461a      	mov	r2, r3
    f856:	f24b 034c 	movw	r3, #45132	; 0xb04c
    f85a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f85e:	78d9      	ldrb	r1, [r3, #3]
    f860:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f864:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f868:	5499      	strb	r1, [r3, r2]
    f86a:	4b45      	ldr	r3, [pc, #276]	; (f980 <send_gps_pos+0x1058>)
    f86c:	781a      	ldrb	r2, [r3, #0]
    f86e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f872:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f876:	781b      	ldrb	r3, [r3, #0]
    f878:	4413      	add	r3, r2
    f87a:	b2da      	uxtb	r2, r3
    f87c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f880:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f884:	701a      	strb	r2, [r3, #0]
    f886:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f88a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f88e:	781a      	ldrb	r2, [r3, #0]
    f890:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f898:	781b      	ldrb	r3, [r3, #0]
    f89a:	4413      	add	r3, r2
    f89c:	b2da      	uxtb	r2, r3
    f89e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f8a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8a6:	701a      	strb	r2, [r3, #0]
    f8a8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f8ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8b0:	781b      	ldrb	r3, [r3, #0]
    f8b2:	3301      	adds	r3, #1
    f8b4:	b2da      	uxtb	r2, r3
    f8b6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f8ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8be:	701a      	strb	r2, [r3, #0]
    f8c0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f8c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8c8:	781b      	ldrb	r3, [r3, #0]
    f8ca:	2bff      	cmp	r3, #255	; 0xff
    f8cc:	d105      	bne.n	f8da <send_gps_pos+0xfb2>
    f8ce:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f8d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8d6:	2200      	movs	r2, #0
    f8d8:	701a      	strb	r2, [r3, #0]
    f8da:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f8de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8e2:	781b      	ldrb	r3, [r3, #0]
    f8e4:	461a      	mov	r2, r3
    f8e6:	f24b 0340 	movw	r3, #45120	; 0xb040
    f8ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8ee:	7819      	ldrb	r1, [r3, #0]
    f8f0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f8f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8f8:	5499      	strb	r1, [r3, r2]
    f8fa:	f24b 0340 	movw	r3, #45120	; 0xb040
    f8fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f902:	781a      	ldrb	r2, [r3, #0]
    f904:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f908:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f90c:	781b      	ldrb	r3, [r3, #0]
    f90e:	4413      	add	r3, r2
    f910:	b2da      	uxtb	r2, r3
    f912:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f916:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f91a:	701a      	strb	r2, [r3, #0]
    f91c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f924:	781a      	ldrb	r2, [r3, #0]
    f926:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f92a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f92e:	781b      	ldrb	r3, [r3, #0]
    f930:	4413      	add	r3, r2
    f932:	b2da      	uxtb	r2, r3
    f934:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f938:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f93c:	701a      	strb	r2, [r3, #0]
    f93e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f942:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f946:	781b      	ldrb	r3, [r3, #0]
    f948:	3301      	adds	r3, #1
    f94a:	b2da      	uxtb	r2, r3
    f94c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f950:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f954:	701a      	strb	r2, [r3, #0]
    f956:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f95a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f95e:	781b      	ldrb	r3, [r3, #0]
    f960:	2bff      	cmp	r3, #255	; 0xff
    f962:	d10f      	bne.n	f984 <send_gps_pos+0x105c>
    f964:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f968:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f96c:	2200      	movs	r2, #0
    f96e:	701a      	strb	r2, [r3, #0]
    f970:	e008      	b.n	f984 <send_gps_pos+0x105c>
    f972:	bf00      	nop
    f974:	2000b04b 	.word	0x2000b04b
    f978:	2000b04d 	.word	0x2000b04d
    f97c:	2000b04e 	.word	0x2000b04e
    f980:	2000b04f 	.word	0x2000b04f
    f984:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f988:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f98c:	781b      	ldrb	r3, [r3, #0]
    f98e:	461a      	mov	r2, r3
    f990:	f24b 0340 	movw	r3, #45120	; 0xb040
    f994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f998:	7859      	ldrb	r1, [r3, #1]
    f99a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    f99e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9a2:	5499      	strb	r1, [r3, r2]
    f9a4:	4bc0      	ldr	r3, [pc, #768]	; (fca8 <send_gps_pos+0x1380>)
    f9a6:	781a      	ldrb	r2, [r3, #0]
    f9a8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f9ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9b0:	781b      	ldrb	r3, [r3, #0]
    f9b2:	4413      	add	r3, r2
    f9b4:	b2da      	uxtb	r2, r3
    f9b6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f9ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9be:	701a      	strb	r2, [r3, #0]
    f9c0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f9c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9c8:	781a      	ldrb	r2, [r3, #0]
    f9ca:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    f9ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9d2:	781b      	ldrb	r3, [r3, #0]
    f9d4:	4413      	add	r3, r2
    f9d6:	b2da      	uxtb	r2, r3
    f9d8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    f9dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9e0:	701a      	strb	r2, [r3, #0]
    f9e2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f9e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9ea:	781b      	ldrb	r3, [r3, #0]
    f9ec:	3301      	adds	r3, #1
    f9ee:	b2da      	uxtb	r2, r3
    f9f0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f9f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9f8:	701a      	strb	r2, [r3, #0]
    f9fa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    f9fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa02:	781b      	ldrb	r3, [r3, #0]
    fa04:	2bff      	cmp	r3, #255	; 0xff
    fa06:	d105      	bne.n	fa14 <send_gps_pos+0x10ec>
    fa08:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fa0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa10:	2200      	movs	r2, #0
    fa12:	701a      	strb	r2, [r3, #0]
    fa14:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fa18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa1c:	781b      	ldrb	r3, [r3, #0]
    fa1e:	461a      	mov	r2, r3
    fa20:	f24b 0340 	movw	r3, #45120	; 0xb040
    fa24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa28:	7899      	ldrb	r1, [r3, #2]
    fa2a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    fa2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa32:	5499      	strb	r1, [r3, r2]
    fa34:	4b9d      	ldr	r3, [pc, #628]	; (fcac <send_gps_pos+0x1384>)
    fa36:	781a      	ldrb	r2, [r3, #0]
    fa38:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fa3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa40:	781b      	ldrb	r3, [r3, #0]
    fa42:	4413      	add	r3, r2
    fa44:	b2da      	uxtb	r2, r3
    fa46:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fa4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa4e:	701a      	strb	r2, [r3, #0]
    fa50:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    fa54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa58:	781a      	ldrb	r2, [r3, #0]
    fa5a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fa5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa62:	781b      	ldrb	r3, [r3, #0]
    fa64:	4413      	add	r3, r2
    fa66:	b2da      	uxtb	r2, r3
    fa68:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    fa6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa70:	701a      	strb	r2, [r3, #0]
    fa72:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fa76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa7a:	781b      	ldrb	r3, [r3, #0]
    fa7c:	3301      	adds	r3, #1
    fa7e:	b2da      	uxtb	r2, r3
    fa80:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fa84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa88:	701a      	strb	r2, [r3, #0]
    fa8a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fa8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa92:	781b      	ldrb	r3, [r3, #0]
    fa94:	2bff      	cmp	r3, #255	; 0xff
    fa96:	d105      	bne.n	faa4 <send_gps_pos+0x117c>
    fa98:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fa9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    faa0:	2200      	movs	r2, #0
    faa2:	701a      	strb	r2, [r3, #0]
    faa4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    faa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    faac:	781b      	ldrb	r3, [r3, #0]
    faae:	461a      	mov	r2, r3
    fab0:	f24b 0340 	movw	r3, #45120	; 0xb040
    fab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fab8:	78d9      	ldrb	r1, [r3, #3]
    faba:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    fabe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fac2:	5499      	strb	r1, [r3, r2]
    fac4:	4b7a      	ldr	r3, [pc, #488]	; (fcb0 <send_gps_pos+0x1388>)
    fac6:	781a      	ldrb	r2, [r3, #0]
    fac8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    facc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fad0:	781b      	ldrb	r3, [r3, #0]
    fad2:	4413      	add	r3, r2
    fad4:	b2da      	uxtb	r2, r3
    fad6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fada:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fade:	701a      	strb	r2, [r3, #0]
    fae0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    fae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fae8:	781a      	ldrb	r2, [r3, #0]
    faea:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    faee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    faf2:	781b      	ldrb	r3, [r3, #0]
    faf4:	4413      	add	r3, r2
    faf6:	b2da      	uxtb	r2, r3
    faf8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    fafc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb00:	701a      	strb	r2, [r3, #0]
    fb02:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fb06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb0a:	781b      	ldrb	r3, [r3, #0]
    fb0c:	3301      	adds	r3, #1
    fb0e:	b2da      	uxtb	r2, r3
    fb10:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fb14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb18:	701a      	strb	r2, [r3, #0]
    fb1a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fb1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb22:	781b      	ldrb	r3, [r3, #0]
    fb24:	2bff      	cmp	r3, #255	; 0xff
    fb26:	d105      	bne.n	fb34 <send_gps_pos+0x120c>
    fb28:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fb2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb30:	2200      	movs	r2, #0
    fb32:	701a      	strb	r2, [r3, #0]
    fb34:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fb38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb3c:	781b      	ldrb	r3, [r3, #0]
    fb3e:	461a      	mov	r2, r3
    fb40:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fb44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb48:	7819      	ldrb	r1, [r3, #0]
    fb4a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    fb4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb52:	5499      	strb	r1, [r3, r2]
    fb54:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fb58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb5c:	781b      	ldrb	r3, [r3, #0]
    fb5e:	3301      	adds	r3, #1
    fb60:	b2da      	uxtb	r2, r3
    fb62:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fb66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb6a:	701a      	strb	r2, [r3, #0]
    fb6c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fb70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb74:	781b      	ldrb	r3, [r3, #0]
    fb76:	2bff      	cmp	r3, #255	; 0xff
    fb78:	d105      	bne.n	fb86 <send_gps_pos+0x125e>
    fb7a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fb7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb82:	2200      	movs	r2, #0
    fb84:	701a      	strb	r2, [r3, #0]
    fb86:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fb8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb8e:	781b      	ldrb	r3, [r3, #0]
    fb90:	461a      	mov	r2, r3
    fb92:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    fb96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb9a:	7819      	ldrb	r1, [r3, #0]
    fb9c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    fba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fba4:	5499      	strb	r1, [r3, r2]
    fba6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fbaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbae:	781b      	ldrb	r3, [r3, #0]
    fbb0:	3301      	adds	r3, #1
    fbb2:	b2da      	uxtb	r2, r3
    fbb4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fbb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbbc:	701a      	strb	r2, [r3, #0]
    fbbe:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fbc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbc6:	781b      	ldrb	r3, [r3, #0]
    fbc8:	2bff      	cmp	r3, #255	; 0xff
    fbca:	d105      	bne.n	fbd8 <send_gps_pos+0x12b0>
    fbcc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fbd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbd4:	2200      	movs	r2, #0
    fbd6:	701a      	strb	r2, [r3, #0]
    fbd8:	f242 0339 	movw	r3, #8249	; 0x2039
    fbdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbe0:	781b      	ldrb	r3, [r3, #0]
    fbe2:	b2db      	uxtb	r3, r3
    fbe4:	f003 0310 	and.w	r3, r3, #16
    fbe8:	2b00      	cmp	r3, #0
    fbea:	d15a      	bne.n	fca2 <send_gps_pos+0x137a>
    fbec:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    fbf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbf4:	781b      	ldrb	r3, [r3, #0]
    fbf6:	b2db      	uxtb	r3, r3
    fbf8:	461a      	mov	r2, r3
    fbfa:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    fbfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc02:	5c9a      	ldrb	r2, [r3, r2]
    fc04:	f64a 73d3 	movw	r3, #45011	; 0xafd3
    fc08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc0c:	701a      	strb	r2, [r3, #0]
    fc0e:	f64a 73d4 	movw	r3, #45012	; 0xafd4
    fc12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc16:	2200      	movs	r2, #0
    fc18:	701a      	strb	r2, [r3, #0]
    fc1a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    fc1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc22:	781b      	ldrb	r3, [r3, #0]
    fc24:	b2db      	uxtb	r3, r3
    fc26:	3301      	adds	r3, #1
    fc28:	b2da      	uxtb	r2, r3
    fc2a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    fc2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc32:	701a      	strb	r2, [r3, #0]
    fc34:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    fc38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc3c:	781b      	ldrb	r3, [r3, #0]
    fc3e:	b2db      	uxtb	r3, r3
    fc40:	2bff      	cmp	r3, #255	; 0xff
    fc42:	d105      	bne.n	fc50 <send_gps_pos+0x1328>
    fc44:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    fc48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc4c:	2200      	movs	r2, #0
    fc4e:	701a      	strb	r2, [r3, #0]
    fc50:	f242 0338 	movw	r3, #8248	; 0x2038
    fc54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc58:	f242 0238 	movw	r2, #8248	; 0x2038
    fc5c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fc60:	7812      	ldrb	r2, [r2, #0]
    fc62:	b2d2      	uxtb	r2, r2
    fc64:	f042 0201 	orr.w	r2, r2, #1
    fc68:	b2d2      	uxtb	r2, r2
    fc6a:	701a      	strb	r2, [r3, #0]
    fc6c:	f242 0339 	movw	r3, #8249	; 0x2039
    fc70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc74:	f242 0239 	movw	r2, #8249	; 0x2039
    fc78:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fc7c:	7812      	ldrb	r2, [r2, #0]
    fc7e:	b2d2      	uxtb	r2, r2
    fc80:	f042 0210 	orr.w	r2, r2, #16
    fc84:	b2d2      	uxtb	r2, r2
    fc86:	701a      	strb	r2, [r3, #0]
    fc88:	e00b      	b.n	fca2 <send_gps_pos+0x137a>
    fc8a:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    fc8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc92:	781b      	ldrb	r3, [r3, #0]
    fc94:	3301      	adds	r3, #1
    fc96:	b2da      	uxtb	r2, r3
    fc98:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    fc9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fca0:	701a      	strb	r2, [r3, #0]
     estimator_update_state_gps();
    fca2:	f005 fbfd 	bl	154a0 <estimator_update_state_gps>
  }
}
    fca6:	bd80      	pop	{r7, pc}
    fca8:	2000b041 	.word	0x2000b041
    fcac:	2000b042 	.word	0x2000b042
    fcb0:	2000b043 	.word	0x2000b043

0000fcb4 <send_radIR>:

void send_radIR(void){
    fcb4:	b480      	push	{r7}
    fcb6:	af00      	add	r7, sp, #0
  if (gps_pos_available)
    fcb8:	f24b 0366 	movw	r3, #45158	; 0xb066
    fcbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcc0:	781b      	ldrb	r3, [r3, #0]
    fcc2:	2b00      	cmp	r3, #0
    fcc4:	f000 85e8 	beq.w	10898 <send_radIR+0xbe4>
     DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    fcc8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcd0:	781a      	ldrb	r2, [r3, #0]
    fcd2:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    fcd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcda:	781b      	ldrb	r3, [r3, #0]
    fcdc:	b2db      	uxtb	r3, r3
    fcde:	429a      	cmp	r2, r3
    fce0:	d313      	bcc.n	fd0a <send_radIR+0x56>
    fce2:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    fce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcea:	781b      	ldrb	r3, [r3, #0]
    fcec:	b2db      	uxtb	r3, r3
    fcee:	461a      	mov	r2, r3
    fcf0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fcf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcf8:	781b      	ldrb	r3, [r3, #0]
    fcfa:	1ad3      	subs	r3, r2, r3
    fcfc:	33ff      	adds	r3, #255	; 0xff
    fcfe:	2b14      	cmp	r3, #20
    fd00:	bfd4      	ite	le
    fd02:	2300      	movle	r3, #0
    fd04:	2301      	movgt	r3, #1
    fd06:	b2db      	uxtb	r3, r3
    fd08:	e011      	b.n	fd2e <send_radIR+0x7a>
    fd0a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    fd0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd12:	781b      	ldrb	r3, [r3, #0]
    fd14:	b2db      	uxtb	r3, r3
    fd16:	461a      	mov	r2, r3
    fd18:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fd1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd20:	781b      	ldrb	r3, [r3, #0]
    fd22:	1ad3      	subs	r3, r2, r3
    fd24:	2b14      	cmp	r3, #20
    fd26:	bfd4      	ite	le
    fd28:	2300      	movle	r3, #0
    fd2a:	2301      	movgt	r3, #1
    fd2c:	b2db      	uxtb	r3, r3
    fd2e:	2b00      	cmp	r3, #0
    fd30:	f000 85a6 	beq.w	10880 <send_radIR+0xbcc>
    fd34:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fd38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd3c:	781b      	ldrb	r3, [r3, #0]
    fd3e:	461a      	mov	r2, r3
    fd40:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    fd44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd48:	2105      	movs	r1, #5
    fd4a:	5499      	strb	r1, [r3, r2]
    fd4c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fd50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd54:	781b      	ldrb	r3, [r3, #0]
    fd56:	3301      	adds	r3, #1
    fd58:	b2da      	uxtb	r2, r3
    fd5a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fd5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd62:	701a      	strb	r2, [r3, #0]
    fd64:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fd68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd6c:	781b      	ldrb	r3, [r3, #0]
    fd6e:	2bff      	cmp	r3, #255	; 0xff
    fd70:	d105      	bne.n	fd7e <send_radIR+0xca>
    fd72:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fd76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd7a:	2200      	movs	r2, #0
    fd7c:	701a      	strb	r2, [r3, #0]
    fd7e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fd82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd86:	781b      	ldrb	r3, [r3, #0]
    fd88:	461a      	mov	r2, r3
    fd8a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    fd8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd92:	2105      	movs	r1, #5
    fd94:	5499      	strb	r1, [r3, r2]
    fd96:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fd9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd9e:	781b      	ldrb	r3, [r3, #0]
    fda0:	3301      	adds	r3, #1
    fda2:	b2da      	uxtb	r2, r3
    fda4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fda8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdac:	701a      	strb	r2, [r3, #0]
    fdae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fdb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdb6:	781b      	ldrb	r3, [r3, #0]
    fdb8:	2bff      	cmp	r3, #255	; 0xff
    fdba:	d105      	bne.n	fdc8 <send_radIR+0x114>
    fdbc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fdc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdc4:	2200      	movs	r2, #0
    fdc6:	701a      	strb	r2, [r3, #0]
    fdc8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fdcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdd0:	2205      	movs	r2, #5
    fdd2:	701a      	strb	r2, [r3, #0]
    fdd4:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    fdd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fddc:	2205      	movs	r2, #5
    fdde:	701a      	strb	r2, [r3, #0]
    fde0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fde4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fde8:	781b      	ldrb	r3, [r3, #0]
    fdea:	461a      	mov	r2, r3
    fdec:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    fdf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdf4:	7819      	ldrb	r1, [r3, #0]
    fdf6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    fdfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdfe:	5499      	strb	r1, [r3, r2]
    fe00:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    fe04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe08:	781a      	ldrb	r2, [r3, #0]
    fe0a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fe0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe12:	781b      	ldrb	r3, [r3, #0]
    fe14:	4413      	add	r3, r2
    fe16:	b2da      	uxtb	r2, r3
    fe18:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fe1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe20:	701a      	strb	r2, [r3, #0]
    fe22:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    fe26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe2a:	781a      	ldrb	r2, [r3, #0]
    fe2c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fe30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe34:	781b      	ldrb	r3, [r3, #0]
    fe36:	4413      	add	r3, r2
    fe38:	b2da      	uxtb	r2, r3
    fe3a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    fe3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe42:	701a      	strb	r2, [r3, #0]
    fe44:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fe48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe4c:	781b      	ldrb	r3, [r3, #0]
    fe4e:	3301      	adds	r3, #1
    fe50:	b2da      	uxtb	r2, r3
    fe52:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fe56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe5a:	701a      	strb	r2, [r3, #0]
    fe5c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fe60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe64:	781b      	ldrb	r3, [r3, #0]
    fe66:	2bff      	cmp	r3, #255	; 0xff
    fe68:	d105      	bne.n	fe76 <send_radIR+0x1c2>
    fe6a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fe6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe72:	2200      	movs	r2, #0
    fe74:	701a      	strb	r2, [r3, #0]
    fe76:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fe7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe7e:	781b      	ldrb	r3, [r3, #0]
    fe80:	461a      	mov	r2, r3
    fe82:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    fe86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe8a:	7859      	ldrb	r1, [r3, #1]
    fe8c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    fe90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe94:	5499      	strb	r1, [r3, r2]
    fe96:	4bd2      	ldr	r3, [pc, #840]	; (101e0 <send_radIR+0x52c>)
    fe98:	781a      	ldrb	r2, [r3, #0]
    fe9a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fe9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fea2:	781b      	ldrb	r3, [r3, #0]
    fea4:	4413      	add	r3, r2
    fea6:	b2da      	uxtb	r2, r3
    fea8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    feac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    feb0:	701a      	strb	r2, [r3, #0]
    feb2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    feb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    feba:	781a      	ldrb	r2, [r3, #0]
    febc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    fec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fec4:	781b      	ldrb	r3, [r3, #0]
    fec6:	4413      	add	r3, r2
    fec8:	b2da      	uxtb	r2, r3
    feca:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    fece:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fed2:	701a      	strb	r2, [r3, #0]
    fed4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fedc:	781b      	ldrb	r3, [r3, #0]
    fede:	3301      	adds	r3, #1
    fee0:	b2da      	uxtb	r2, r3
    fee2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    feea:	701a      	strb	r2, [r3, #0]
    feec:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fef4:	781b      	ldrb	r3, [r3, #0]
    fef6:	2bff      	cmp	r3, #255	; 0xff
    fef8:	d105      	bne.n	ff06 <send_radIR+0x252>
    fefa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fefe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff02:	2200      	movs	r2, #0
    ff04:	701a      	strb	r2, [r3, #0]
    ff06:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ff0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff0e:	781b      	ldrb	r3, [r3, #0]
    ff10:	461a      	mov	r2, r3
    ff12:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    ff16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff1a:	7899      	ldrb	r1, [r3, #2]
    ff1c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ff20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff24:	5499      	strb	r1, [r3, r2]
    ff26:	4baf      	ldr	r3, [pc, #700]	; (101e4 <send_radIR+0x530>)
    ff28:	781a      	ldrb	r2, [r3, #0]
    ff2a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ff2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff32:	781b      	ldrb	r3, [r3, #0]
    ff34:	4413      	add	r3, r2
    ff36:	b2da      	uxtb	r2, r3
    ff38:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ff3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff40:	701a      	strb	r2, [r3, #0]
    ff42:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ff46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff4a:	781a      	ldrb	r2, [r3, #0]
    ff4c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ff50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff54:	781b      	ldrb	r3, [r3, #0]
    ff56:	4413      	add	r3, r2
    ff58:	b2da      	uxtb	r2, r3
    ff5a:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ff5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff62:	701a      	strb	r2, [r3, #0]
    ff64:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ff68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff6c:	781b      	ldrb	r3, [r3, #0]
    ff6e:	3301      	adds	r3, #1
    ff70:	b2da      	uxtb	r2, r3
    ff72:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ff76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff7a:	701a      	strb	r2, [r3, #0]
    ff7c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ff80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff84:	781b      	ldrb	r3, [r3, #0]
    ff86:	2bff      	cmp	r3, #255	; 0xff
    ff88:	d105      	bne.n	ff96 <send_radIR+0x2e2>
    ff8a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ff8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff92:	2200      	movs	r2, #0
    ff94:	701a      	strb	r2, [r3, #0]
    ff96:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    ff9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff9e:	781b      	ldrb	r3, [r3, #0]
    ffa0:	461a      	mov	r2, r3
    ffa2:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
    ffa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffaa:	78d9      	ldrb	r1, [r3, #3]
    ffac:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    ffb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffb4:	5499      	strb	r1, [r3, r2]
    ffb6:	4b8c      	ldr	r3, [pc, #560]	; (101e8 <send_radIR+0x534>)
    ffb8:	781a      	ldrb	r2, [r3, #0]
    ffba:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ffbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffc2:	781b      	ldrb	r3, [r3, #0]
    ffc4:	4413      	add	r3, r2
    ffc6:	b2da      	uxtb	r2, r3
    ffc8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ffcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffd0:	701a      	strb	r2, [r3, #0]
    ffd2:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ffd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffda:	781a      	ldrb	r2, [r3, #0]
    ffdc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
    ffe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffe4:	781b      	ldrb	r3, [r3, #0]
    ffe6:	4413      	add	r3, r2
    ffe8:	b2da      	uxtb	r2, r3
    ffea:	f64a 73d6 	movw	r3, #45014	; 0xafd6
    ffee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fff2:	701a      	strb	r2, [r3, #0]
    fff4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    fff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fffc:	781b      	ldrb	r3, [r3, #0]
    fffe:	3301      	adds	r3, #1
   10000:	b2da      	uxtb	r2, r3
   10002:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10006:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1000a:	701a      	strb	r2, [r3, #0]
   1000c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10010:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10014:	781b      	ldrb	r3, [r3, #0]
   10016:	2bff      	cmp	r3, #255	; 0xff
   10018:	d105      	bne.n	10026 <send_radIR+0x372>
   1001a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1001e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10022:	2200      	movs	r2, #0
   10024:	701a      	strb	r2, [r3, #0]
   10026:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1002a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1002e:	781b      	ldrb	r3, [r3, #0]
   10030:	461a      	mov	r2, r3
   10032:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
   10036:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1003a:	7819      	ldrb	r1, [r3, #0]
   1003c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10040:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10044:	5499      	strb	r1, [r3, r2]
   10046:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
   1004a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1004e:	781a      	ldrb	r2, [r3, #0]
   10050:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10054:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10058:	781b      	ldrb	r3, [r3, #0]
   1005a:	4413      	add	r3, r2
   1005c:	b2da      	uxtb	r2, r3
   1005e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10062:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10066:	701a      	strb	r2, [r3, #0]
   10068:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   1006c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10070:	781a      	ldrb	r2, [r3, #0]
   10072:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10076:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1007a:	781b      	ldrb	r3, [r3, #0]
   1007c:	4413      	add	r3, r2
   1007e:	b2da      	uxtb	r2, r3
   10080:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10084:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10088:	701a      	strb	r2, [r3, #0]
   1008a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1008e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10092:	781b      	ldrb	r3, [r3, #0]
   10094:	3301      	adds	r3, #1
   10096:	b2da      	uxtb	r2, r3
   10098:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1009c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100a0:	701a      	strb	r2, [r3, #0]
   100a2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   100a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100aa:	781b      	ldrb	r3, [r3, #0]
   100ac:	2bff      	cmp	r3, #255	; 0xff
   100ae:	d105      	bne.n	100bc <send_radIR+0x408>
   100b0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   100b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100b8:	2200      	movs	r2, #0
   100ba:	701a      	strb	r2, [r3, #0]
   100bc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   100c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100c4:	781b      	ldrb	r3, [r3, #0]
   100c6:	461a      	mov	r2, r3
   100c8:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
   100cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100d0:	7859      	ldrb	r1, [r3, #1]
   100d2:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   100d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100da:	5499      	strb	r1, [r3, r2]
   100dc:	4b43      	ldr	r3, [pc, #268]	; (101ec <send_radIR+0x538>)
   100de:	781a      	ldrb	r2, [r3, #0]
   100e0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   100e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100e8:	781b      	ldrb	r3, [r3, #0]
   100ea:	4413      	add	r3, r2
   100ec:	b2da      	uxtb	r2, r3
   100ee:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   100f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100f6:	701a      	strb	r2, [r3, #0]
   100f8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   100fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10100:	781a      	ldrb	r2, [r3, #0]
   10102:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10106:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1010a:	781b      	ldrb	r3, [r3, #0]
   1010c:	4413      	add	r3, r2
   1010e:	b2da      	uxtb	r2, r3
   10110:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10114:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10118:	701a      	strb	r2, [r3, #0]
   1011a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1011e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10122:	781b      	ldrb	r3, [r3, #0]
   10124:	3301      	adds	r3, #1
   10126:	b2da      	uxtb	r2, r3
   10128:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1012c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10130:	701a      	strb	r2, [r3, #0]
   10132:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10136:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1013a:	781b      	ldrb	r3, [r3, #0]
   1013c:	2bff      	cmp	r3, #255	; 0xff
   1013e:	d105      	bne.n	1014c <send_radIR+0x498>
   10140:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10144:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10148:	2200      	movs	r2, #0
   1014a:	701a      	strb	r2, [r3, #0]
   1014c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10150:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10154:	781b      	ldrb	r3, [r3, #0]
   10156:	461a      	mov	r2, r3
   10158:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
   1015c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10160:	7899      	ldrb	r1, [r3, #2]
   10162:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10166:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1016a:	5499      	strb	r1, [r3, r2]
   1016c:	4b20      	ldr	r3, [pc, #128]	; (101f0 <send_radIR+0x53c>)
   1016e:	781a      	ldrb	r2, [r3, #0]
   10170:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10174:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10178:	781b      	ldrb	r3, [r3, #0]
   1017a:	4413      	add	r3, r2
   1017c:	b2da      	uxtb	r2, r3
   1017e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10182:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10186:	701a      	strb	r2, [r3, #0]
   10188:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   1018c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10190:	781a      	ldrb	r2, [r3, #0]
   10192:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10196:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1019a:	781b      	ldrb	r3, [r3, #0]
   1019c:	4413      	add	r3, r2
   1019e:	b2da      	uxtb	r2, r3
   101a0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   101a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101a8:	701a      	strb	r2, [r3, #0]
   101aa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   101ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101b2:	781b      	ldrb	r3, [r3, #0]
   101b4:	3301      	adds	r3, #1
   101b6:	b2da      	uxtb	r2, r3
   101b8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   101bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101c0:	701a      	strb	r2, [r3, #0]
   101c2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   101c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101ca:	781b      	ldrb	r3, [r3, #0]
   101cc:	2bff      	cmp	r3, #255	; 0xff
   101ce:	d111      	bne.n	101f4 <send_radIR+0x540>
   101d0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   101d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101d8:	2200      	movs	r2, #0
   101da:	701a      	strb	r2, [r3, #0]
   101dc:	e00a      	b.n	101f4 <send_radIR+0x540>
   101de:	bf00      	nop
   101e0:	2000b4c9 	.word	0x2000b4c9
   101e4:	2000b4ca 	.word	0x2000b4ca
   101e8:	2000b4cb 	.word	0x2000b4cb
   101ec:	2000b4cd 	.word	0x2000b4cd
   101f0:	2000b4ce 	.word	0x2000b4ce
   101f4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   101f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101fc:	781b      	ldrb	r3, [r3, #0]
   101fe:	461a      	mov	r2, r3
   10200:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
   10204:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10208:	78d9      	ldrb	r1, [r3, #3]
   1020a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   1020e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10212:	5499      	strb	r1, [r3, r2]
   10214:	4bd3      	ldr	r3, [pc, #844]	; (10564 <send_radIR+0x8b0>)
   10216:	781a      	ldrb	r2, [r3, #0]
   10218:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   1021c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10220:	781b      	ldrb	r3, [r3, #0]
   10222:	4413      	add	r3, r2
   10224:	b2da      	uxtb	r2, r3
   10226:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   1022a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1022e:	701a      	strb	r2, [r3, #0]
   10230:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10234:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10238:	781a      	ldrb	r2, [r3, #0]
   1023a:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   1023e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10242:	781b      	ldrb	r3, [r3, #0]
   10244:	4413      	add	r3, r2
   10246:	b2da      	uxtb	r2, r3
   10248:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   1024c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10250:	701a      	strb	r2, [r3, #0]
   10252:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10256:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1025a:	781b      	ldrb	r3, [r3, #0]
   1025c:	3301      	adds	r3, #1
   1025e:	b2da      	uxtb	r2, r3
   10260:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10264:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10268:	701a      	strb	r2, [r3, #0]
   1026a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1026e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10272:	781b      	ldrb	r3, [r3, #0]
   10274:	2bff      	cmp	r3, #255	; 0xff
   10276:	d105      	bne.n	10284 <send_radIR+0x5d0>
   10278:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1027c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10280:	2200      	movs	r2, #0
   10282:	701a      	strb	r2, [r3, #0]
   10284:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10288:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1028c:	781b      	ldrb	r3, [r3, #0]
   1028e:	461a      	mov	r2, r3
   10290:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
   10294:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10298:	7819      	ldrb	r1, [r3, #0]
   1029a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   1029e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102a2:	5499      	strb	r1, [r3, r2]
   102a4:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
   102a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102ac:	781a      	ldrb	r2, [r3, #0]
   102ae:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   102b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102b6:	781b      	ldrb	r3, [r3, #0]
   102b8:	4413      	add	r3, r2
   102ba:	b2da      	uxtb	r2, r3
   102bc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   102c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102c4:	701a      	strb	r2, [r3, #0]
   102c6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   102ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102ce:	781a      	ldrb	r2, [r3, #0]
   102d0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   102d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102d8:	781b      	ldrb	r3, [r3, #0]
   102da:	4413      	add	r3, r2
   102dc:	b2da      	uxtb	r2, r3
   102de:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   102e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102e6:	701a      	strb	r2, [r3, #0]
   102e8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   102ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102f0:	781b      	ldrb	r3, [r3, #0]
   102f2:	3301      	adds	r3, #1
   102f4:	b2da      	uxtb	r2, r3
   102f6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   102fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102fe:	701a      	strb	r2, [r3, #0]
   10300:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10304:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10308:	781b      	ldrb	r3, [r3, #0]
   1030a:	2bff      	cmp	r3, #255	; 0xff
   1030c:	d105      	bne.n	1031a <send_radIR+0x666>
   1030e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10312:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10316:	2200      	movs	r2, #0
   10318:	701a      	strb	r2, [r3, #0]
   1031a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1031e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10322:	781b      	ldrb	r3, [r3, #0]
   10324:	461a      	mov	r2, r3
   10326:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
   1032a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1032e:	7859      	ldrb	r1, [r3, #1]
   10330:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10334:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10338:	5499      	strb	r1, [r3, r2]
   1033a:	4b8b      	ldr	r3, [pc, #556]	; (10568 <send_radIR+0x8b4>)
   1033c:	781a      	ldrb	r2, [r3, #0]
   1033e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10342:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10346:	781b      	ldrb	r3, [r3, #0]
   10348:	4413      	add	r3, r2
   1034a:	b2da      	uxtb	r2, r3
   1034c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10350:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10354:	701a      	strb	r2, [r3, #0]
   10356:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   1035a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1035e:	781a      	ldrb	r2, [r3, #0]
   10360:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10364:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10368:	781b      	ldrb	r3, [r3, #0]
   1036a:	4413      	add	r3, r2
   1036c:	b2da      	uxtb	r2, r3
   1036e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10372:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10376:	701a      	strb	r2, [r3, #0]
   10378:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1037c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10380:	781b      	ldrb	r3, [r3, #0]
   10382:	3301      	adds	r3, #1
   10384:	b2da      	uxtb	r2, r3
   10386:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1038a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1038e:	701a      	strb	r2, [r3, #0]
   10390:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10394:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10398:	781b      	ldrb	r3, [r3, #0]
   1039a:	2bff      	cmp	r3, #255	; 0xff
   1039c:	d105      	bne.n	103aa <send_radIR+0x6f6>
   1039e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   103a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103a6:	2200      	movs	r2, #0
   103a8:	701a      	strb	r2, [r3, #0]
   103aa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   103ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103b2:	781b      	ldrb	r3, [r3, #0]
   103b4:	461a      	mov	r2, r3
   103b6:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
   103ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103be:	7899      	ldrb	r1, [r3, #2]
   103c0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   103c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103c8:	5499      	strb	r1, [r3, r2]
   103ca:	4b68      	ldr	r3, [pc, #416]	; (1056c <send_radIR+0x8b8>)
   103cc:	781a      	ldrb	r2, [r3, #0]
   103ce:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   103d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103d6:	781b      	ldrb	r3, [r3, #0]
   103d8:	4413      	add	r3, r2
   103da:	b2da      	uxtb	r2, r3
   103dc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   103e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103e4:	701a      	strb	r2, [r3, #0]
   103e6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   103ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103ee:	781a      	ldrb	r2, [r3, #0]
   103f0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   103f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103f8:	781b      	ldrb	r3, [r3, #0]
   103fa:	4413      	add	r3, r2
   103fc:	b2da      	uxtb	r2, r3
   103fe:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10402:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10406:	701a      	strb	r2, [r3, #0]
   10408:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1040c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10410:	781b      	ldrb	r3, [r3, #0]
   10412:	3301      	adds	r3, #1
   10414:	b2da      	uxtb	r2, r3
   10416:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1041a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1041e:	701a      	strb	r2, [r3, #0]
   10420:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10424:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10428:	781b      	ldrb	r3, [r3, #0]
   1042a:	2bff      	cmp	r3, #255	; 0xff
   1042c:	d105      	bne.n	1043a <send_radIR+0x786>
   1042e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10432:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10436:	2200      	movs	r2, #0
   10438:	701a      	strb	r2, [r3, #0]
   1043a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1043e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10442:	781b      	ldrb	r3, [r3, #0]
   10444:	461a      	mov	r2, r3
   10446:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
   1044a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1044e:	78d9      	ldrb	r1, [r3, #3]
   10450:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10454:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10458:	5499      	strb	r1, [r3, r2]
   1045a:	4b45      	ldr	r3, [pc, #276]	; (10570 <send_radIR+0x8bc>)
   1045c:	781a      	ldrb	r2, [r3, #0]
   1045e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10462:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10466:	781b      	ldrb	r3, [r3, #0]
   10468:	4413      	add	r3, r2
   1046a:	b2da      	uxtb	r2, r3
   1046c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10470:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10474:	701a      	strb	r2, [r3, #0]
   10476:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   1047a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1047e:	781a      	ldrb	r2, [r3, #0]
   10480:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10484:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10488:	781b      	ldrb	r3, [r3, #0]
   1048a:	4413      	add	r3, r2
   1048c:	b2da      	uxtb	r2, r3
   1048e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10492:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10496:	701a      	strb	r2, [r3, #0]
   10498:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1049c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104a0:	781b      	ldrb	r3, [r3, #0]
   104a2:	3301      	adds	r3, #1
   104a4:	b2da      	uxtb	r2, r3
   104a6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   104aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104ae:	701a      	strb	r2, [r3, #0]
   104b0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   104b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104b8:	781b      	ldrb	r3, [r3, #0]
   104ba:	2bff      	cmp	r3, #255	; 0xff
   104bc:	d105      	bne.n	104ca <send_radIR+0x816>
   104be:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   104c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104c6:	2200      	movs	r2, #0
   104c8:	701a      	strb	r2, [r3, #0]
   104ca:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   104ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104d2:	781b      	ldrb	r3, [r3, #0]
   104d4:	461a      	mov	r2, r3
   104d6:	f240 33f2 	movw	r3, #1010	; 0x3f2
   104da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104de:	7819      	ldrb	r1, [r3, #0]
   104e0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   104e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104e8:	5499      	strb	r1, [r3, r2]
   104ea:	f240 33f2 	movw	r3, #1010	; 0x3f2
   104ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104f2:	781a      	ldrb	r2, [r3, #0]
   104f4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   104f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104fc:	781b      	ldrb	r3, [r3, #0]
   104fe:	4413      	add	r3, r2
   10500:	b2da      	uxtb	r2, r3
   10502:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10506:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1050a:	701a      	strb	r2, [r3, #0]
   1050c:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10510:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10514:	781a      	ldrb	r2, [r3, #0]
   10516:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   1051a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1051e:	781b      	ldrb	r3, [r3, #0]
   10520:	4413      	add	r3, r2
   10522:	b2da      	uxtb	r2, r3
   10524:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10528:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1052c:	701a      	strb	r2, [r3, #0]
   1052e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10532:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10536:	781b      	ldrb	r3, [r3, #0]
   10538:	3301      	adds	r3, #1
   1053a:	b2da      	uxtb	r2, r3
   1053c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10540:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10544:	701a      	strb	r2, [r3, #0]
   10546:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1054a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1054e:	781b      	ldrb	r3, [r3, #0]
   10550:	2bff      	cmp	r3, #255	; 0xff
   10552:	d10f      	bne.n	10574 <send_radIR+0x8c0>
   10554:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10558:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1055c:	2200      	movs	r2, #0
   1055e:	701a      	strb	r2, [r3, #0]
   10560:	e008      	b.n	10574 <send_radIR+0x8c0>
   10562:	bf00      	nop
   10564:	2000b4cf 	.word	0x2000b4cf
   10568:	2000b4c5 	.word	0x2000b4c5
   1056c:	2000b4c6 	.word	0x2000b4c6
   10570:	2000b4c7 	.word	0x2000b4c7
   10574:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10578:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1057c:	781b      	ldrb	r3, [r3, #0]
   1057e:	461a      	mov	r2, r3
   10580:	f240 33f2 	movw	r3, #1010	; 0x3f2
   10584:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10588:	7859      	ldrb	r1, [r3, #1]
   1058a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   1058e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10592:	5499      	strb	r1, [r3, r2]
   10594:	4bc2      	ldr	r3, [pc, #776]	; (108a0 <send_radIR+0xbec>)
   10596:	781a      	ldrb	r2, [r3, #0]
   10598:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   1059c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105a0:	781b      	ldrb	r3, [r3, #0]
   105a2:	4413      	add	r3, r2
   105a4:	b2da      	uxtb	r2, r3
   105a6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   105aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105ae:	701a      	strb	r2, [r3, #0]
   105b0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   105b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105b8:	781a      	ldrb	r2, [r3, #0]
   105ba:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   105be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105c2:	781b      	ldrb	r3, [r3, #0]
   105c4:	4413      	add	r3, r2
   105c6:	b2da      	uxtb	r2, r3
   105c8:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   105cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105d0:	701a      	strb	r2, [r3, #0]
   105d2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   105d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105da:	781b      	ldrb	r3, [r3, #0]
   105dc:	3301      	adds	r3, #1
   105de:	b2da      	uxtb	r2, r3
   105e0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   105e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105e8:	701a      	strb	r2, [r3, #0]
   105ea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   105ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105f2:	781b      	ldrb	r3, [r3, #0]
   105f4:	2bff      	cmp	r3, #255	; 0xff
   105f6:	d105      	bne.n	10604 <send_radIR+0x950>
   105f8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   105fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10600:	2200      	movs	r2, #0
   10602:	701a      	strb	r2, [r3, #0]
   10604:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10608:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1060c:	781b      	ldrb	r3, [r3, #0]
   1060e:	461a      	mov	r2, r3
   10610:	f240 33f4 	movw	r3, #1012	; 0x3f4
   10614:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10618:	7819      	ldrb	r1, [r3, #0]
   1061a:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   1061e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10622:	5499      	strb	r1, [r3, r2]
   10624:	f240 33f4 	movw	r3, #1012	; 0x3f4
   10628:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1062c:	781a      	ldrb	r2, [r3, #0]
   1062e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10632:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10636:	781b      	ldrb	r3, [r3, #0]
   10638:	4413      	add	r3, r2
   1063a:	b2da      	uxtb	r2, r3
   1063c:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10640:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10644:	701a      	strb	r2, [r3, #0]
   10646:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   1064a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1064e:	781a      	ldrb	r2, [r3, #0]
   10650:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10654:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10658:	781b      	ldrb	r3, [r3, #0]
   1065a:	4413      	add	r3, r2
   1065c:	b2da      	uxtb	r2, r3
   1065e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10662:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10666:	701a      	strb	r2, [r3, #0]
   10668:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1066c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10670:	781b      	ldrb	r3, [r3, #0]
   10672:	3301      	adds	r3, #1
   10674:	b2da      	uxtb	r2, r3
   10676:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1067a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1067e:	701a      	strb	r2, [r3, #0]
   10680:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10684:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10688:	781b      	ldrb	r3, [r3, #0]
   1068a:	2bff      	cmp	r3, #255	; 0xff
   1068c:	d105      	bne.n	1069a <send_radIR+0x9e6>
   1068e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10692:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10696:	2200      	movs	r2, #0
   10698:	701a      	strb	r2, [r3, #0]
   1069a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1069e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106a2:	781b      	ldrb	r3, [r3, #0]
   106a4:	461a      	mov	r2, r3
   106a6:	f240 33f4 	movw	r3, #1012	; 0x3f4
   106aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106ae:	7859      	ldrb	r1, [r3, #1]
   106b0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   106b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106b8:	5499      	strb	r1, [r3, r2]
   106ba:	4b7a      	ldr	r3, [pc, #488]	; (108a4 <send_radIR+0xbf0>)
   106bc:	781a      	ldrb	r2, [r3, #0]
   106be:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   106c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106c6:	781b      	ldrb	r3, [r3, #0]
   106c8:	4413      	add	r3, r2
   106ca:	b2da      	uxtb	r2, r3
   106cc:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   106d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106d4:	701a      	strb	r2, [r3, #0]
   106d6:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   106da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106de:	781a      	ldrb	r2, [r3, #0]
   106e0:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   106e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106e8:	781b      	ldrb	r3, [r3, #0]
   106ea:	4413      	add	r3, r2
   106ec:	b2da      	uxtb	r2, r3
   106ee:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   106f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106f6:	701a      	strb	r2, [r3, #0]
   106f8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   106fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10700:	781b      	ldrb	r3, [r3, #0]
   10702:	3301      	adds	r3, #1
   10704:	b2da      	uxtb	r2, r3
   10706:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1070a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1070e:	701a      	strb	r2, [r3, #0]
   10710:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10714:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10718:	781b      	ldrb	r3, [r3, #0]
   1071a:	2bff      	cmp	r3, #255	; 0xff
   1071c:	d105      	bne.n	1072a <send_radIR+0xa76>
   1071e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10722:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10726:	2200      	movs	r2, #0
   10728:	701a      	strb	r2, [r3, #0]
   1072a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1072e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10732:	781b      	ldrb	r3, [r3, #0]
   10734:	461a      	mov	r2, r3
   10736:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   1073a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1073e:	7819      	ldrb	r1, [r3, #0]
   10740:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10744:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10748:	5499      	strb	r1, [r3, r2]
   1074a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1074e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10752:	781b      	ldrb	r3, [r3, #0]
   10754:	3301      	adds	r3, #1
   10756:	b2da      	uxtb	r2, r3
   10758:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1075c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10760:	701a      	strb	r2, [r3, #0]
   10762:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10766:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1076a:	781b      	ldrb	r3, [r3, #0]
   1076c:	2bff      	cmp	r3, #255	; 0xff
   1076e:	d105      	bne.n	1077c <send_radIR+0xac8>
   10770:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10774:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10778:	2200      	movs	r2, #0
   1077a:	701a      	strb	r2, [r3, #0]
   1077c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10780:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10784:	781b      	ldrb	r3, [r3, #0]
   10786:	461a      	mov	r2, r3
   10788:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   1078c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10790:	7819      	ldrb	r1, [r3, #0]
   10792:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10796:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1079a:	5499      	strb	r1, [r3, r2]
   1079c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   107a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107a4:	781b      	ldrb	r3, [r3, #0]
   107a6:	3301      	adds	r3, #1
   107a8:	b2da      	uxtb	r2, r3
   107aa:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   107ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107b2:	701a      	strb	r2, [r3, #0]
   107b4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   107b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107bc:	781b      	ldrb	r3, [r3, #0]
   107be:	2bff      	cmp	r3, #255	; 0xff
   107c0:	d105      	bne.n	107ce <send_radIR+0xb1a>
   107c2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   107c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107ca:	2200      	movs	r2, #0
   107cc:	701a      	strb	r2, [r3, #0]
   107ce:	f242 0339 	movw	r3, #8249	; 0x2039
   107d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107d6:	781b      	ldrb	r3, [r3, #0]
   107d8:	b2db      	uxtb	r3, r3
   107da:	f003 0310 	and.w	r3, r3, #16
   107de:	2b00      	cmp	r3, #0
   107e0:	d15a      	bne.n	10898 <send_radIR+0xbe4>
   107e2:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   107e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107ea:	781b      	ldrb	r3, [r3, #0]
   107ec:	b2db      	uxtb	r3, r3
   107ee:	461a      	mov	r2, r3
   107f0:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   107f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107f8:	5c9a      	ldrb	r2, [r3, r2]
   107fa:	f64a 73d3 	movw	r3, #45011	; 0xafd3
   107fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10802:	701a      	strb	r2, [r3, #0]
   10804:	f64a 73d4 	movw	r3, #45012	; 0xafd4
   10808:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1080c:	2200      	movs	r2, #0
   1080e:	701a      	strb	r2, [r3, #0]
   10810:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10814:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10818:	781b      	ldrb	r3, [r3, #0]
   1081a:	b2db      	uxtb	r3, r3
   1081c:	3301      	adds	r3, #1
   1081e:	b2da      	uxtb	r2, r3
   10820:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10824:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10828:	701a      	strb	r2, [r3, #0]
   1082a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   1082e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10832:	781b      	ldrb	r3, [r3, #0]
   10834:	b2db      	uxtb	r3, r3
   10836:	2bff      	cmp	r3, #255	; 0xff
   10838:	d105      	bne.n	10846 <send_radIR+0xb92>
   1083a:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   1083e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10842:	2200      	movs	r2, #0
   10844:	701a      	strb	r2, [r3, #0]
   10846:	f242 0338 	movw	r3, #8248	; 0x2038
   1084a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1084e:	f242 0238 	movw	r2, #8248	; 0x2038
   10852:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10856:	7812      	ldrb	r2, [r2, #0]
   10858:	b2d2      	uxtb	r2, r2
   1085a:	f042 0201 	orr.w	r2, r2, #1
   1085e:	b2d2      	uxtb	r2, r2
   10860:	701a      	strb	r2, [r3, #0]
   10862:	f242 0339 	movw	r3, #8249	; 0x2039
   10866:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1086a:	f242 0239 	movw	r2, #8249	; 0x2039
   1086e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10872:	7812      	ldrb	r2, [r2, #0]
   10874:	b2d2      	uxtb	r2, r2
   10876:	f042 0210 	orr.w	r2, r2, #16
   1087a:	b2d2      	uxtb	r2, r2
   1087c:	701a      	strb	r2, [r3, #0]
   1087e:	e00b      	b.n	10898 <send_radIR+0xbe4>
   10880:	f64a 63d0 	movw	r3, #44752	; 0xaed0
   10884:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10888:	781b      	ldrb	r3, [r3, #0]
   1088a:	3301      	adds	r3, #1
   1088c:	b2da      	uxtb	r2, r3
   1088e:	f64a 63d0 	movw	r3, #44752	; 0xaed0
   10892:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10896:	701a      	strb	r2, [r3, #0]
}
   10898:	46bd      	mov	sp, r7
   1089a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1089e:	4770      	bx	lr
   108a0:	200003f3 	.word	0x200003f3
   108a4:	200003f5 	.word	0x200003f5

000108a8 <send_takeOff>:

void send_takeOff(void){
   108a8:	b580      	push	{r7, lr}
   108aa:	af00      	add	r7, sp, #0
  if (gps_pos_available){
   108ac:	f24b 0366 	movw	r3, #45158	; 0xb066
   108b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108b4:	781b      	ldrb	r3, [r3, #0]
   108b6:	2b00      	cmp	r3, #0
   108b8:	f000 8200 	beq.w	10cbc <send_takeOff+0x414>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
   108bc:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
   108c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108c4:	881b      	ldrh	r3, [r3, #0]
   108c6:	2b00      	cmp	r3, #0
   108c8:	f040 81f2 	bne.w	10cb0 <send_takeOff+0x408>
   108cc:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
   108d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108d4:	681b      	ldr	r3, [r3, #0]
   108d6:	4618      	mov	r0, r3
   108d8:	f04f 0100 	mov.w	r1, #0
   108dc:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   108e0:	f007 fe12 	bl	18508 <__aeabi_fcmpgt>
   108e4:	4603      	mov	r3, r0
   108e6:	2b00      	cmp	r3, #0
   108e8:	f000 81e2 	beq.w	10cb0 <send_takeOff+0x408>
        estimator_flight_time = 1;
   108ec:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
   108f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108f4:	2201      	movs	r2, #1
   108f6:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
   108f8:	f64a 63c8 	movw	r3, #44744	; 0xaec8
   108fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10900:	2201      	movs	r2, #1
   10902:	701a      	strb	r2, [r3, #0]
        DOWNLINK_SEND_TAKEOFF(&cputime);
   10904:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10908:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1090c:	781a      	ldrb	r2, [r3, #0]
   1090e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10912:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10916:	781b      	ldrb	r3, [r3, #0]
   10918:	b2db      	uxtb	r3, r3
   1091a:	429a      	cmp	r2, r3
   1091c:	d313      	bcc.n	10946 <send_takeOff+0x9e>
   1091e:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10922:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10926:	781b      	ldrb	r3, [r3, #0]
   10928:	b2db      	uxtb	r3, r3
   1092a:	461a      	mov	r2, r3
   1092c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10930:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10934:	781b      	ldrb	r3, [r3, #0]
   10936:	1ad3      	subs	r3, r2, r3
   10938:	33ff      	adds	r3, #255	; 0xff
   1093a:	2b06      	cmp	r3, #6
   1093c:	bfd4      	ite	le
   1093e:	2300      	movle	r3, #0
   10940:	2301      	movgt	r3, #1
   10942:	b2db      	uxtb	r3, r3
   10944:	e011      	b.n	1096a <send_takeOff+0xc2>
   10946:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   1094a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1094e:	781b      	ldrb	r3, [r3, #0]
   10950:	b2db      	uxtb	r3, r3
   10952:	461a      	mov	r2, r3
   10954:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10958:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1095c:	781b      	ldrb	r3, [r3, #0]
   1095e:	1ad3      	subs	r3, r2, r3
   10960:	2b06      	cmp	r3, #6
   10962:	bfd4      	ite	le
   10964:	2300      	movle	r3, #0
   10966:	2301      	movgt	r3, #1
   10968:	b2db      	uxtb	r3, r3
   1096a:	2b00      	cmp	r3, #0
   1096c:	f000 8194 	beq.w	10c98 <send_takeOff+0x3f0>
   10970:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10974:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10978:	781b      	ldrb	r3, [r3, #0]
   1097a:	461a      	mov	r2, r3
   1097c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10980:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10984:	2105      	movs	r1, #5
   10986:	5499      	strb	r1, [r3, r2]
   10988:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1098c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10990:	781b      	ldrb	r3, [r3, #0]
   10992:	3301      	adds	r3, #1
   10994:	b2da      	uxtb	r2, r3
   10996:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   1099a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1099e:	701a      	strb	r2, [r3, #0]
   109a0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   109a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109a8:	781b      	ldrb	r3, [r3, #0]
   109aa:	2bff      	cmp	r3, #255	; 0xff
   109ac:	d105      	bne.n	109ba <send_takeOff+0x112>
   109ae:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   109b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109b6:	2200      	movs	r2, #0
   109b8:	701a      	strb	r2, [r3, #0]
   109ba:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   109be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109c2:	781b      	ldrb	r3, [r3, #0]
   109c4:	461a      	mov	r2, r3
   109c6:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   109ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109ce:	2104      	movs	r1, #4
   109d0:	5499      	strb	r1, [r3, r2]
   109d2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   109d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109da:	781b      	ldrb	r3, [r3, #0]
   109dc:	3301      	adds	r3, #1
   109de:	b2da      	uxtb	r2, r3
   109e0:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   109e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109e8:	701a      	strb	r2, [r3, #0]
   109ea:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   109ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109f2:	781b      	ldrb	r3, [r3, #0]
   109f4:	2bff      	cmp	r3, #255	; 0xff
   109f6:	d105      	bne.n	10a04 <send_takeOff+0x15c>
   109f8:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   109fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a00:	2200      	movs	r2, #0
   10a02:	701a      	strb	r2, [r3, #0]
   10a04:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10a08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a0c:	2204      	movs	r2, #4
   10a0e:	701a      	strb	r2, [r3, #0]
   10a10:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a18:	2204      	movs	r2, #4
   10a1a:	701a      	strb	r2, [r3, #0]
   10a1c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a24:	781b      	ldrb	r3, [r3, #0]
   10a26:	461a      	mov	r2, r3
   10a28:	f64a 63b2 	movw	r3, #44722	; 0xaeb2
   10a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a30:	7819      	ldrb	r1, [r3, #0]
   10a32:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a3a:	5499      	strb	r1, [r3, r2]
   10a3c:	f64a 63b2 	movw	r3, #44722	; 0xaeb2
   10a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a44:	781a      	ldrb	r2, [r3, #0]
   10a46:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a4e:	781b      	ldrb	r3, [r3, #0]
   10a50:	4413      	add	r3, r2
   10a52:	b2da      	uxtb	r2, r3
   10a54:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10a58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a5c:	701a      	strb	r2, [r3, #0]
   10a5e:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a66:	781a      	ldrb	r2, [r3, #0]
   10a68:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10a6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a70:	781b      	ldrb	r3, [r3, #0]
   10a72:	4413      	add	r3, r2
   10a74:	b2da      	uxtb	r2, r3
   10a76:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a7e:	701a      	strb	r2, [r3, #0]
   10a80:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a88:	781b      	ldrb	r3, [r3, #0]
   10a8a:	3301      	adds	r3, #1
   10a8c:	b2da      	uxtb	r2, r3
   10a8e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a96:	701a      	strb	r2, [r3, #0]
   10a98:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10a9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10aa0:	781b      	ldrb	r3, [r3, #0]
   10aa2:	2bff      	cmp	r3, #255	; 0xff
   10aa4:	d105      	bne.n	10ab2 <send_takeOff+0x20a>
   10aa6:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10aae:	2200      	movs	r2, #0
   10ab0:	701a      	strb	r2, [r3, #0]
   10ab2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10ab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10aba:	781b      	ldrb	r3, [r3, #0]
   10abc:	461a      	mov	r2, r3
   10abe:	f64a 63b2 	movw	r3, #44722	; 0xaeb2
   10ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ac6:	7859      	ldrb	r1, [r3, #1]
   10ac8:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ad0:	5499      	strb	r1, [r3, r2]
   10ad2:	4b7b      	ldr	r3, [pc, #492]	; (10cc0 <send_takeOff+0x418>)
   10ad4:	781a      	ldrb	r2, [r3, #0]
   10ad6:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10ada:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ade:	781b      	ldrb	r3, [r3, #0]
   10ae0:	4413      	add	r3, r2
   10ae2:	b2da      	uxtb	r2, r3
   10ae4:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10ae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10aec:	701a      	strb	r2, [r3, #0]
   10aee:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10af6:	781a      	ldrb	r2, [r3, #0]
   10af8:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b00:	781b      	ldrb	r3, [r3, #0]
   10b02:	4413      	add	r3, r2
   10b04:	b2da      	uxtb	r2, r3
   10b06:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10b0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b0e:	701a      	strb	r2, [r3, #0]
   10b10:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10b14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b18:	781b      	ldrb	r3, [r3, #0]
   10b1a:	3301      	adds	r3, #1
   10b1c:	b2da      	uxtb	r2, r3
   10b1e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b26:	701a      	strb	r2, [r3, #0]
   10b28:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10b2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b30:	781b      	ldrb	r3, [r3, #0]
   10b32:	2bff      	cmp	r3, #255	; 0xff
   10b34:	d105      	bne.n	10b42 <send_takeOff+0x29a>
   10b36:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b3e:	2200      	movs	r2, #0
   10b40:	701a      	strb	r2, [r3, #0]
   10b42:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b4a:	781b      	ldrb	r3, [r3, #0]
   10b4c:	461a      	mov	r2, r3
   10b4e:	f64a 73d5 	movw	r3, #45013	; 0xafd5
   10b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b56:	7819      	ldrb	r1, [r3, #0]
   10b58:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10b5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b60:	5499      	strb	r1, [r3, r2]
   10b62:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10b66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b6a:	781b      	ldrb	r3, [r3, #0]
   10b6c:	3301      	adds	r3, #1
   10b6e:	b2da      	uxtb	r2, r3
   10b70:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b78:	701a      	strb	r2, [r3, #0]
   10b7a:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b82:	781b      	ldrb	r3, [r3, #0]
   10b84:	2bff      	cmp	r3, #255	; 0xff
   10b86:	d105      	bne.n	10b94 <send_takeOff+0x2ec>
   10b88:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b90:	2200      	movs	r2, #0
   10b92:	701a      	strb	r2, [r3, #0]
   10b94:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b9c:	781b      	ldrb	r3, [r3, #0]
   10b9e:	461a      	mov	r2, r3
   10ba0:	f64a 73d6 	movw	r3, #45014	; 0xafd6
   10ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ba8:	7819      	ldrb	r1, [r3, #0]
   10baa:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bb2:	5499      	strb	r1, [r3, r2]
   10bb4:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bbc:	781b      	ldrb	r3, [r3, #0]
   10bbe:	3301      	adds	r3, #1
   10bc0:	b2da      	uxtb	r2, r3
   10bc2:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bca:	701a      	strb	r2, [r3, #0]
   10bcc:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bd4:	781b      	ldrb	r3, [r3, #0]
   10bd6:	2bff      	cmp	r3, #255	; 0xff
   10bd8:	d105      	bne.n	10be6 <send_takeOff+0x33e>
   10bda:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10bde:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10be2:	2200      	movs	r2, #0
   10be4:	701a      	strb	r2, [r3, #0]
   10be6:	f242 0339 	movw	r3, #8249	; 0x2039
   10bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bee:	781b      	ldrb	r3, [r3, #0]
   10bf0:	b2db      	uxtb	r3, r3
   10bf2:	f003 0310 	and.w	r3, r3, #16
   10bf6:	2b00      	cmp	r3, #0
   10bf8:	d15a      	bne.n	10cb0 <send_takeOff+0x408>
   10bfa:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c02:	781b      	ldrb	r3, [r3, #0]
   10c04:	b2db      	uxtb	r3, r3
   10c06:	461a      	mov	r2, r3
   10c08:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c10:	5c9a      	ldrb	r2, [r3, r2]
   10c12:	f64a 73d3 	movw	r3, #45011	; 0xafd3
   10c16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c1a:	701a      	strb	r2, [r3, #0]
   10c1c:	f64a 73d4 	movw	r3, #45012	; 0xafd4
   10c20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c24:	2200      	movs	r2, #0
   10c26:	701a      	strb	r2, [r3, #0]
   10c28:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10c2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c30:	781b      	ldrb	r3, [r3, #0]
   10c32:	b2db      	uxtb	r3, r3
   10c34:	3301      	adds	r3, #1
   10c36:	b2da      	uxtb	r2, r3
   10c38:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c40:	701a      	strb	r2, [r3, #0]
   10c42:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c4a:	781b      	ldrb	r3, [r3, #0]
   10c4c:	b2db      	uxtb	r3, r3
   10c4e:	2bff      	cmp	r3, #255	; 0xff
   10c50:	d105      	bne.n	10c5e <send_takeOff+0x3b6>
   10c52:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10c56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c5a:	2200      	movs	r2, #0
   10c5c:	701a      	strb	r2, [r3, #0]
   10c5e:	f242 0338 	movw	r3, #8248	; 0x2038
   10c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c66:	f242 0238 	movw	r2, #8248	; 0x2038
   10c6a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10c6e:	7812      	ldrb	r2, [r2, #0]
   10c70:	b2d2      	uxtb	r2, r2
   10c72:	f042 0201 	orr.w	r2, r2, #1
   10c76:	b2d2      	uxtb	r2, r2
   10c78:	701a      	strb	r2, [r3, #0]
   10c7a:	f242 0339 	movw	r3, #8249	; 0x2039
   10c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c82:	f242 0239 	movw	r2, #8249	; 0x2039
   10c86:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10c8a:	7812      	ldrb	r2, [r2, #0]
   10c8c:	b2d2      	uxtb	r2, r2
   10c8e:	f042 0210 	orr.w	r2, r2, #16
   10c92:	b2d2      	uxtb	r2, r2
   10c94:	701a      	strb	r2, [r3, #0]
   10c96:	e00b      	b.n	10cb0 <send_takeOff+0x408>
   10c98:	f64a 63d0 	movw	r3, #44752	; 0xaed0
   10c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ca0:	781b      	ldrb	r3, [r3, #0]
   10ca2:	3301      	adds	r3, #1
   10ca4:	b2da      	uxtb	r2, r3
   10ca6:	f64a 63d0 	movw	r3, #44752	; 0xaed0
   10caa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cae:	701a      	strb	r2, [r3, #0]
     }
     gps_pos_available = FALSE; 
   10cb0:	f24b 0366 	movw	r3, #45158	; 0xb066
   10cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cb8:	2200      	movs	r2, #0
   10cba:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
   10cbc:	bd80      	pop	{r7, pc}
   10cbe:	bf00      	nop
   10cc0:	2000aeb3 	.word	0x2000aeb3
   10cc4:	f3af 8000 	nop.w

00010cc8 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
   10cc8:	b480      	push	{r7}
   10cca:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
   10ccc:	f242 0317 	movw	r3, #8215	; 0x2017
   10cd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cd4:	f242 0217 	movw	r2, #8215	; 0x2017
   10cd8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10cdc:	7812      	ldrb	r2, [r2, #0]
   10cde:	b2d2      	uxtb	r2, r2
   10ce0:	f042 0210 	orr.w	r2, r2, #16
   10ce4:	b2d2      	uxtb	r2, r2
   10ce6:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
   10ce8:	f242 0331 	movw	r3, #8241	; 0x2031
   10cec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cf0:	2201      	movs	r2, #1
   10cf2:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
   10cf4:	f242 0333 	movw	r3, #8243	; 0x2033
   10cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cfc:	2219      	movs	r2, #25
   10cfe:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
   10d00:	f242 0311 	movw	r3, #8209	; 0x2011
   10d04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d08:	f242 0211 	movw	r2, #8209	; 0x2011
   10d0c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d10:	7812      	ldrb	r2, [r2, #0]
   10d12:	b2d2      	uxtb	r2, r2
   10d14:	f062 023f 	orn	r2, r2, #63	; 0x3f
   10d18:	b2d2      	uxtb	r2, r2
   10d1a:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10d1c:	f242 0312 	movw	r3, #8210	; 0x2012
   10d20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d24:	f242 0212 	movw	r2, #8210	; 0x2012
   10d28:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d2c:	7812      	ldrb	r2, [r2, #0]
   10d2e:	b2d2      	uxtb	r2, r2
   10d30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10d34:	b2d2      	uxtb	r2, r2
   10d36:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
   10d38:	f242 0312 	movw	r3, #8210	; 0x2012
   10d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d40:	f242 0212 	movw	r2, #8210	; 0x2012
   10d44:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d48:	7812      	ldrb	r2, [r2, #0]
   10d4a:	b2d2      	uxtb	r2, r2
   10d4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   10d50:	b2d2      	uxtb	r2, r2
   10d52:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
   10d54:	f242 033a 	movw	r3, #8250	; 0x203a
   10d58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d5c:	f242 023a 	movw	r2, #8250	; 0x203a
   10d60:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d64:	7812      	ldrb	r2, [r2, #0]
   10d66:	b2d2      	uxtb	r2, r2
   10d68:	f042 0202 	orr.w	r2, r2, #2
   10d6c:	b2d2      	uxtb	r2, r2
   10d6e:	701a      	strb	r2, [r3, #0]
}
   10d70:	46bd      	mov	sp, r7
   10d72:	f85d 7b04 	ldr.w	r7, [sp], #4
   10d76:	4770      	bx	lr

00010d78 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
   10d78:	b480      	push	{r7}
   10d7a:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
   10d7c:	f64a 73d4 	movw	r3, #45012	; 0xafd4
   10d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d84:	781b      	ldrb	r3, [r3, #0]
   10d86:	2b00      	cmp	r3, #0
   10d88:	d10e      	bne.n	10da8 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10d8a:	f242 0312 	movw	r3, #8210	; 0x2012
   10d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d92:	f242 0212 	movw	r2, #8210	; 0x2012
   10d96:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d9a:	7812      	ldrb	r2, [r2, #0]
   10d9c:	b2d2      	uxtb	r2, r2
   10d9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10da2:	b2d2      	uxtb	r2, r2
   10da4:	701a      	strb	r2, [r3, #0]
   10da6:	e047      	b.n	10e38 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
   10da8:	f64a 73d4 	movw	r3, #45012	; 0xafd4
   10dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10db0:	781b      	ldrb	r3, [r3, #0]
   10db2:	2b08      	cmp	r3, #8
   10db4:	d832      	bhi.n	10e1c <__vector_5+0xa4>
    if (tx_byte & 0x01)
   10db6:	f64a 73d3 	movw	r3, #45011	; 0xafd3
   10dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dbe:	781b      	ldrb	r3, [r3, #0]
   10dc0:	f003 0301 	and.w	r3, r3, #1
   10dc4:	2b00      	cmp	r3, #0
   10dc6:	d00e      	beq.n	10de6 <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10dc8:	f242 0312 	movw	r3, #8210	; 0x2012
   10dcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dd0:	f242 0212 	movw	r2, #8210	; 0x2012
   10dd4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10dd8:	7812      	ldrb	r2, [r2, #0]
   10dda:	b2d2      	uxtb	r2, r2
   10ddc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10de0:	b2d2      	uxtb	r2, r2
   10de2:	701a      	strb	r2, [r3, #0]
   10de4:	e00d      	b.n	10e02 <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10de6:	f242 0312 	movw	r3, #8210	; 0x2012
   10dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dee:	f242 0212 	movw	r2, #8210	; 0x2012
   10df2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10df6:	7812      	ldrb	r2, [r2, #0]
   10df8:	b2d2      	uxtb	r2, r2
   10dfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10dfe:	b2d2      	uxtb	r2, r2
   10e00:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
   10e02:	f64a 73d3 	movw	r3, #45011	; 0xafd3
   10e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e0a:	781b      	ldrb	r3, [r3, #0]
   10e0c:	085b      	lsrs	r3, r3, #1
   10e0e:	b2da      	uxtb	r2, r3
   10e10:	f64a 73d3 	movw	r3, #45011	; 0xafd3
   10e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e18:	701a      	strb	r2, [r3, #0]
   10e1a:	e00d      	b.n	10e38 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
   10e1c:	f242 0312 	movw	r3, #8210	; 0x2012
   10e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e24:	f242 0212 	movw	r2, #8210	; 0x2012
   10e28:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10e2c:	7812      	ldrb	r2, [r2, #0]
   10e2e:	b2d2      	uxtb	r2, r2
   10e30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10e34:	b2d2      	uxtb	r2, r2
   10e36:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
   10e38:	f64a 73d4 	movw	r3, #45012	; 0xafd4
   10e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e40:	781b      	ldrb	r3, [r3, #0]
   10e42:	3301      	adds	r3, #1
   10e44:	b2da      	uxtb	r2, r3
   10e46:	f64a 73d4 	movw	r3, #45012	; 0xafd4
   10e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e4e:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
   10e50:	f64a 73d4 	movw	r3, #45012	; 0xafd4
   10e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e58:	781b      	ldrb	r3, [r3, #0]
   10e5a:	2b09      	cmp	r3, #9
   10e5c:	d94d      	bls.n	10efa <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
   10e5e:	f64a 63d1 	movw	r3, #44753	; 0xaed1
   10e62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e66:	781a      	ldrb	r2, [r3, #0]
   10e68:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e70:	781b      	ldrb	r3, [r3, #0]
   10e72:	b2db      	uxtb	r3, r3
   10e74:	429a      	cmp	r2, r3
   10e76:	d10e      	bne.n	10e96 <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
   10e78:	f242 0339 	movw	r3, #8249	; 0x2039
   10e7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e80:	f242 0239 	movw	r2, #8249	; 0x2039
   10e84:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10e88:	7812      	ldrb	r2, [r2, #0]
   10e8a:	b2d2      	uxtb	r2, r2
   10e8c:	f022 0210 	bic.w	r2, r2, #16
   10e90:	b2d2      	uxtb	r2, r2
   10e92:	701a      	strb	r2, [r3, #0]
   10e94:	e031      	b.n	10efa <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
   10e96:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e9e:	781b      	ldrb	r3, [r3, #0]
   10ea0:	b2db      	uxtb	r3, r3
   10ea2:	461a      	mov	r2, r3
   10ea4:	f64a 63d4 	movw	r3, #44756	; 0xaed4
   10ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eac:	5c9a      	ldrb	r2, [r3, r2]
   10eae:	f64a 73d3 	movw	r3, #45011	; 0xafd3
   10eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eb6:	701a      	strb	r2, [r3, #0]
   10eb8:	f64a 73d4 	movw	r3, #45012	; 0xafd4
   10ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ec0:	2200      	movs	r2, #0
   10ec2:	701a      	strb	r2, [r3, #0]
   10ec4:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ecc:	781b      	ldrb	r3, [r3, #0]
   10ece:	b2db      	uxtb	r3, r3
   10ed0:	3301      	adds	r3, #1
   10ed2:	b2da      	uxtb	r2, r3
   10ed4:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10ed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10edc:	701a      	strb	r2, [r3, #0]
   10ede:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ee6:	781b      	ldrb	r3, [r3, #0]
   10ee8:	b2db      	uxtb	r3, r3
   10eea:	2bff      	cmp	r3, #255	; 0xff
   10eec:	d105      	bne.n	10efa <__vector_5+0x182>
   10eee:	f64a 63d2 	movw	r3, #44754	; 0xaed2
   10ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ef6:	2200      	movs	r2, #0
   10ef8:	701a      	strb	r2, [r3, #0]
    }
  }
}
   10efa:	46bd      	mov	sp, r7
   10efc:	f85d 7b04 	ldr.w	r7, [sp], #4
   10f00:	4770      	bx	lr
   10f02:	bf00      	nop

00010f04 <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
   10f04:	b480      	push	{r7}
   10f06:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
   10f08:	f24b 0307 	movw	r3, #45063	; 0xb007
   10f0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f10:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
   10f12:	f240 33ee 	movw	r3, #1006	; 0x3ee
   10f16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f1a:	2200      	movs	r2, #0
   10f1c:	701a      	strb	r2, [r3, #0]
}
   10f1e:	46bd      	mov	sp, r7
   10f20:	f85d 7b04 	ldr.w	r7, [sp], #4
   10f24:	4770      	bx	lr
   10f26:	bf00      	nop

00010f28 <link_fbw_send>:

void link_fbw_send(void) {
   10f28:	b480      	push	{r7}
   10f2a:	b083      	sub	sp, #12
   10f2c:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
   10f2e:	f24b 030c 	movw	r3, #45068	; 0xb00c
   10f32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f36:	781b      	ldrb	r3, [r3, #0]
   10f38:	b2db      	uxtb	r3, r3
   10f3a:	2b00      	cmp	r3, #0
   10f3c:	d00c      	beq.n	10f58 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
   10f3e:	f24b 030d 	movw	r3, #45069	; 0xb00d
   10f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f46:	781b      	ldrb	r3, [r3, #0]
   10f48:	3301      	adds	r3, #1
   10f4a:	b2da      	uxtb	r2, r3
   10f4c:	f24b 030d 	movw	r3, #45069	; 0xb00d
   10f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f54:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
   10f56:	e064      	b.n	11022 <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
   10f58:	f242 030d 	movw	r3, #8205	; 0x200d
   10f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f60:	2251      	movs	r2, #81	; 0x51
   10f62:	701a      	strb	r2, [r3, #0]
   10f64:	f242 030e 	movw	r3, #8206	; 0x200e
   10f68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f6c:	781b      	ldrb	r3, [r3, #0]
   10f6e:	b2db      	uxtb	r3, r3
   10f70:	b2db      	uxtb	r3, r3
   10f72:	b25b      	sxtb	r3, r3
   10f74:	2b00      	cmp	r3, #0
   10f76:	da05      	bge.n	10f84 <link_fbw_send+0x5c>
   10f78:	f242 030f 	movw	r3, #8207	; 0x200f
   10f7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f80:	781b      	ldrb	r3, [r3, #0]
   10f82:	71fb      	strb	r3, [r7, #7]
   10f84:	f242 030d 	movw	r3, #8205	; 0x200d
   10f88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f8c:	f242 020d 	movw	r2, #8205	; 0x200d
   10f90:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f94:	7812      	ldrb	r2, [r2, #0]
   10f96:	b2d2      	uxtb	r2, r2
   10f98:	f062 027f 	orn	r2, r2, #127	; 0x7f
   10f9c:	b2d2      	uxtb	r2, r2
   10f9e:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
   10fa0:	f24b 030c 	movw	r3, #45068	; 0xb00c
   10fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fa8:	2201      	movs	r2, #1
   10faa:	701a      	strb	r2, [r3, #0]
   10fac:	f242 0318 	movw	r3, #8216	; 0x2018
   10fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fb4:	f242 0218 	movw	r2, #8216	; 0x2018
   10fb8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10fbc:	7812      	ldrb	r2, [r2, #0]
   10fbe:	b2d2      	uxtb	r2, r2
   10fc0:	f022 0201 	bic.w	r2, r2, #1
   10fc4:	b2d2      	uxtb	r2, r2
   10fc6:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
   10fc8:	f24b 0309 	movw	r3, #45065	; 0xb009
   10fcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fd0:	2200      	movs	r2, #0
   10fd2:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
   10fd4:	f24b 030a 	movw	r3, #45066	; 0xb00a
   10fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fdc:	2200      	movs	r2, #0
   10fde:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
   10fe0:	f24b 0309 	movw	r3, #45065	; 0xb009
   10fe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fe8:	781b      	ldrb	r3, [r3, #0]
   10fea:	461a      	mov	r2, r3
   10fec:	f64a 73f0 	movw	r3, #45040	; 0xaff0
   10ff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ff4:	4413      	add	r3, r2
   10ff6:	781a      	ldrb	r2, [r3, #0]
   10ff8:	f24b 030b 	movw	r3, #45067	; 0xb00b
   10ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11000:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
   11002:	f242 030f 	movw	r3, #8207	; 0x200f
   11006:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1100a:	f24b 020b 	movw	r2, #45067	; 0xb00b
   1100e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11012:	7812      	ldrb	r2, [r2, #0]
   11014:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
   11016:	f24b 0306 	movw	r3, #45062	; 0xb006
   1101a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1101e:	2200      	movs	r2, #0
   11020:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
   11022:	370c      	adds	r7, #12
   11024:	46bd      	mov	sp, r7
   11026:	f85d 7b04 	ldr.w	r7, [sp], #4
   1102a:	4770      	bx	lr

0001102c <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
   1102c:	b480      	push	{r7}
   1102e:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
   11030:	f242 032a 	movw	r3, #8234	; 0x202a
   11034:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11038:	f242 022c 	movw	r2, #8236	; 0x202c
   1103c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11040:	8812      	ldrh	r2, [r2, #0]
   11042:	b292      	uxth	r2, r2
   11044:	32c8      	adds	r2, #200	; 0xc8
   11046:	b292      	uxth	r2, r2
   11048:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
   1104a:	f242 0336 	movw	r3, #8246	; 0x2036
   1104e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11052:	f242 0236 	movw	r2, #8246	; 0x2036
   11056:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1105a:	7812      	ldrb	r2, [r2, #0]
   1105c:	b2d2      	uxtb	r2, r2
   1105e:	f042 0210 	orr.w	r2, r2, #16
   11062:	b2d2      	uxtb	r2, r2
   11064:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
   11066:	f242 0337 	movw	r3, #8247	; 0x2037
   1106a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1106e:	f242 0237 	movw	r2, #8247	; 0x2037
   11072:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11076:	7812      	ldrb	r2, [r2, #0]
   11078:	b2d2      	uxtb	r2, r2
   1107a:	f042 0210 	orr.w	r2, r2, #16
   1107e:	b2d2      	uxtb	r2, r2
   11080:	701a      	strb	r2, [r3, #0]
}
   11082:	46bd      	mov	sp, r7
   11084:	f85d 7b04 	ldr.w	r7, [sp], #4
   11088:	4770      	bx	lr
   1108a:	bf00      	nop

0001108c <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
   1108c:	b480      	push	{r7}
   1108e:	b083      	sub	sp, #12
   11090:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
   11092:	f242 0337 	movw	r3, #8247	; 0x2037
   11096:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1109a:	f242 0237 	movw	r2, #8247	; 0x2037
   1109e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110a2:	7812      	ldrb	r2, [r2, #0]
   110a4:	b2d2      	uxtb	r2, r2
   110a6:	f022 0210 	bic.w	r2, r2, #16
   110aa:	b2d2      	uxtb	r2, r2
   110ac:	701a      	strb	r2, [r3, #0]

  idx_buf++;
   110ae:	f24b 0309 	movw	r3, #45065	; 0xb009
   110b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110b6:	781b      	ldrb	r3, [r3, #0]
   110b8:	3301      	adds	r3, #1
   110ba:	b2da      	uxtb	r2, r3
   110bc:	f24b 0309 	movw	r3, #45065	; 0xb009
   110c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110c4:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
   110c6:	f24b 0309 	movw	r3, #45065	; 0xb009
   110ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110ce:	781b      	ldrb	r3, [r3, #0]
   110d0:	2b17      	cmp	r3, #23
   110d2:	d162      	bne.n	1119a <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
   110d4:	f242 030f 	movw	r3, #8207	; 0x200f
   110d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110dc:	781b      	ldrb	r3, [r3, #0]
   110de:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
   110e0:	f24b 030a 	movw	r3, #45066	; 0xb00a
   110e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110e8:	781b      	ldrb	r3, [r3, #0]
   110ea:	79fa      	ldrb	r2, [r7, #7]
   110ec:	429a      	cmp	r2, r3
   110ee:	d110      	bne.n	11112 <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
   110f0:	f24b 0306 	movw	r3, #45062	; 0xb006
   110f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110f8:	2201      	movs	r2, #1
   110fa:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
   110fc:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   11100:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11104:	7d1a      	ldrb	r2, [r3, #20]
   11106:	f24b 0308 	movw	r3, #45064	; 0xb008
   1110a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1110e:	701a      	strb	r2, [r3, #0]
   11110:	e00c      	b.n	1112c <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
   11112:	f24b 0307 	movw	r3, #45063	; 0xb007
   11116:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1111a:	781b      	ldrb	r3, [r3, #0]
   1111c:	b2db      	uxtb	r3, r3
   1111e:	3301      	adds	r3, #1
   11120:	b2da      	uxtb	r2, r3
   11122:	f24b 0307 	movw	r3, #45063	; 0xb007
   11126:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1112a:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
   1112c:	f240 33ee 	movw	r3, #1006	; 0x3ee
   11130:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11134:	2201      	movs	r2, #1
   11136:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
   11138:	f24b 030c 	movw	r3, #45068	; 0xb00c
   1113c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11140:	2200      	movs	r2, #0
   11142:	701a      	strb	r2, [r3, #0]
   11144:	f242 0318 	movw	r3, #8216	; 0x2018
   11148:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1114c:	f242 0218 	movw	r2, #8216	; 0x2018
   11150:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11154:	7812      	ldrb	r2, [r2, #0]
   11156:	b2d2      	uxtb	r2, r2
   11158:	f042 0201 	orr.w	r2, r2, #1
   1115c:	b2d2      	uxtb	r2, r2
   1115e:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
   11160:	f242 030d 	movw	r3, #8205	; 0x200d
   11164:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11168:	f242 020d 	movw	r2, #8205	; 0x200d
   1116c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11170:	7812      	ldrb	r2, [r2, #0]
   11172:	b2d2      	uxtb	r2, r2
   11174:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11178:	b2d2      	uxtb	r2, r2
   1117a:	701a      	strb	r2, [r3, #0]
   1117c:	f242 030d 	movw	r3, #8205	; 0x200d
   11180:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11184:	f242 020d 	movw	r2, #8205	; 0x200d
   11188:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1118c:	7812      	ldrb	r2, [r2, #0]
   1118e:	b2d2      	uxtb	r2, r2
   11190:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   11194:	b2d2      	uxtb	r2, r2
   11196:	701a      	strb	r2, [r3, #0]
    return;
   11198:	e051      	b.n	1123e <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
   1119a:	f24b 0309 	movw	r3, #45065	; 0xb009
   1119e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111a2:	781b      	ldrb	r3, [r3, #0]
   111a4:	2b15      	cmp	r3, #21
   111a6:	d820      	bhi.n	111ea <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
   111a8:	f24b 0309 	movw	r3, #45065	; 0xb009
   111ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111b0:	781b      	ldrb	r3, [r3, #0]
   111b2:	461a      	mov	r2, r3
   111b4:	f64a 73f0 	movw	r3, #45040	; 0xaff0
   111b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111bc:	4413      	add	r3, r2
   111be:	781b      	ldrb	r3, [r3, #0]
   111c0:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
   111c2:	f242 030f 	movw	r3, #8207	; 0x200f
   111c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111ca:	79fa      	ldrb	r2, [r7, #7]
   111cc:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
   111ce:	f24b 030b 	movw	r3, #45067	; 0xb00b
   111d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111d6:	781a      	ldrb	r2, [r3, #0]
   111d8:	79fb      	ldrb	r3, [r7, #7]
   111da:	4053      	eors	r3, r2
   111dc:	b2da      	uxtb	r2, r3
   111de:	f24b 030b 	movw	r3, #45067	; 0xb00b
   111e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111e6:	701a      	strb	r2, [r3, #0]
   111e8:	e009      	b.n	111fe <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
   111ea:	f242 030f 	movw	r3, #8207	; 0x200f
   111ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111f2:	f24b 020b 	movw	r2, #45067	; 0xb00b
   111f6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   111fa:	7812      	ldrb	r2, [r2, #0]
   111fc:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
   111fe:	f242 030f 	movw	r3, #8207	; 0x200f
   11202:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11206:	781b      	ldrb	r3, [r3, #0]
   11208:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
   1120a:	f24b 0309 	movw	r3, #45065	; 0xb009
   1120e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11212:	781b      	ldrb	r3, [r3, #0]
   11214:	1e5a      	subs	r2, r3, #1
   11216:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   1121a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1121e:	4413      	add	r3, r2
   11220:	79fa      	ldrb	r2, [r7, #7]
   11222:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
   11224:	f24b 030a 	movw	r3, #45066	; 0xb00a
   11228:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1122c:	781a      	ldrb	r2, [r3, #0]
   1122e:	79fb      	ldrb	r3, [r7, #7]
   11230:	4053      	eors	r3, r2
   11232:	b2da      	uxtb	r2, r3
   11234:	f24b 030a 	movw	r3, #45066	; 0xb00a
   11238:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1123c:	701a      	strb	r2, [r3, #0]
}
   1123e:	370c      	adds	r7, #12
   11240:	46bd      	mov	sp, r7
   11242:	f85d 7b04 	ldr.w	r7, [sp], #4
   11246:	4770      	bx	lr

00011248 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
   11248:	b480      	push	{r7}
   1124a:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
   1124c:	f242 0317 	movw	r3, #8215	; 0x2017
   11250:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11254:	f242 0217 	movw	r2, #8215	; 0x2017
   11258:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1125c:	7812      	ldrb	r2, [r2, #0]
   1125e:	b2d2      	uxtb	r2, r2
   11260:	f042 0206 	orr.w	r2, r2, #6
   11264:	b2d2      	uxtb	r2, r2
   11266:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
   11268:	f242 0317 	movw	r3, #8215	; 0x2017
   1126c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11270:	f242 0217 	movw	r2, #8215	; 0x2017
   11274:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11278:	7812      	ldrb	r2, [r2, #0]
   1127a:	b2d2      	uxtb	r2, r2
   1127c:	f042 0201 	orr.w	r2, r2, #1
   11280:	b2d2      	uxtb	r2, r2
   11282:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
   11284:	f24b 030c 	movw	r3, #45068	; 0xb00c
   11288:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1128c:	2200      	movs	r2, #0
   1128e:	701a      	strb	r2, [r3, #0]
   11290:	f242 0318 	movw	r3, #8216	; 0x2018
   11294:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11298:	f242 0218 	movw	r2, #8216	; 0x2018
   1129c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   112a0:	7812      	ldrb	r2, [r2, #0]
   112a2:	b2d2      	uxtb	r2, r2
   112a4:	f042 0201 	orr.w	r2, r2, #1
   112a8:	b2d2      	uxtb	r2, r2
   112aa:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
   112ac:	f242 0302 	movw	r3, #8194	; 0x2002
   112b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112b4:	f242 0202 	movw	r2, #8194	; 0x2002
   112b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   112bc:	7812      	ldrb	r2, [r2, #0]
   112be:	b2d2      	uxtb	r2, r2
   112c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
   112c4:	b2d2      	uxtb	r2, r2
   112c6:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
   112c8:	f24b 030c 	movw	r3, #45068	; 0xb00c
   112cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112d0:	2200      	movs	r2, #0
   112d2:	701a      	strb	r2, [r3, #0]
   112d4:	f242 0303 	movw	r3, #8195	; 0x2003
   112d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112dc:	f242 0203 	movw	r2, #8195	; 0x2003
   112e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   112e4:	7812      	ldrb	r2, [r2, #0]
   112e6:	b2d2      	uxtb	r2, r2
   112e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
   112ec:	b2d2      	uxtb	r2, r2
   112ee:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
   112f0:	f24b 030c 	movw	r3, #45068	; 0xb00c
   112f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112f8:	2200      	movs	r2, #0
   112fa:	701a      	strb	r2, [r3, #0]
}
   112fc:	46bd      	mov	sp, r7
   112fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   11302:	4770      	bx	lr

00011304 <__vector_17>:


SIGNAL(SIG_SPI) {
   11304:	b580      	push	{r7, lr}
   11306:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
   11308:	f24b 030c 	movw	r3, #45068	; 0xb00c
   1130c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11310:	781b      	ldrb	r3, [r3, #0]
   11312:	b2db      	uxtb	r3, r3
   11314:	2b01      	cmp	r3, #1
   11316:	d102      	bne.n	1131e <__vector_17+0x1a>
    link_fbw_on_spi_it();
   11318:	f7ff fe88 	bl	1102c <link_fbw_on_spi_it>
   1131c:	e00b      	b.n	11336 <__vector_17+0x32>
  else
    fatal_error_nb++;
   1131e:	f64a 63b0 	movw	r3, #44720	; 0xaeb0
   11322:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11326:	781b      	ldrb	r3, [r3, #0]
   11328:	3301      	adds	r3, #1
   1132a:	b2da      	uxtb	r2, r3
   1132c:	f64a 63b0 	movw	r3, #44720	; 0xaeb0
   11330:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11334:	701a      	strb	r2, [r3, #0]
}
   11336:	bd80      	pop	{r7, pc}

00011338 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
   11338:	b480      	push	{r7}
   1133a:	b083      	sub	sp, #12
   1133c:	af00      	add	r7, sp, #0
   1133e:	4603      	mov	r3, r0
   11340:	6039      	str	r1, [r7, #0]
   11342:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   11344:	79fa      	ldrb	r2, [r7, #7]
   11346:	f24b 0320 	movw	r3, #45088	; 0xb020
   1134a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1134e:	6839      	ldr	r1, [r7, #0]
   11350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   11354:	370c      	adds	r7, #12
   11356:	46bd      	mov	sp, r7
   11358:	f85d 7b04 	ldr.w	r7, [sp], #4
   1135c:	4770      	bx	lr
   1135e:	bf00      	nop

00011360 <adc_init>:

void 
adc_init( void )
{
   11360:	b480      	push	{r7}
   11362:	b083      	sub	sp, #12
   11364:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   11366:	f242 0362 	movw	r3, #8290	; 0x2062
   1136a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1136e:	2200      	movs	r2, #0
   11370:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   11372:	f242 0361 	movw	r3, #8289	; 0x2061
   11376:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1137a:	2200      	movs	r2, #0
   1137c:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
   1137e:	f242 0307 	movw	r3, #8199	; 0x2007
   11382:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11386:	2240      	movs	r2, #64	; 0x40
   11388:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
   1138a:	f242 0308 	movw	r3, #8200	; 0x2008
   1138e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11392:	f242 0208 	movw	r2, #8200	; 0x2008
   11396:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1139a:	7812      	ldrb	r2, [r2, #0]
   1139c:	b2d2      	uxtb	r2, r2
   1139e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   113a2:	b2d2      	uxtb	r2, r2
   113a4:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
   113a6:	f242 0306 	movw	r3, #8198	; 0x2006
   113aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113ae:	22cf      	movs	r2, #207	; 0xcf
   113b0:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   113b2:	2300      	movs	r3, #0
   113b4:	71fb      	strb	r3, [r7, #7]
   113b6:	e00a      	b.n	113ce <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
   113b8:	79fa      	ldrb	r2, [r7, #7]
   113ba:	f24b 0320 	movw	r3, #45088	; 0xb020
   113be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113c2:	2100      	movs	r1, #0
   113c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   113c8:	79fb      	ldrb	r3, [r7, #7]
   113ca:	3301      	adds	r3, #1
   113cc:	71fb      	strb	r3, [r7, #7]
   113ce:	79fb      	ldrb	r3, [r7, #7]
   113d0:	2b07      	cmp	r3, #7
   113d2:	d9f1      	bls.n	113b8 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
   113d4:	370c      	adds	r7, #12
   113d6:	46bd      	mov	sp, r7
   113d8:	f85d 7b04 	ldr.w	r7, [sp], #4
   113dc:	4770      	bx	lr
   113de:	bf00      	nop

000113e0 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
   113e0:	b480      	push	{r7}
   113e2:	b085      	sub	sp, #20
   113e4:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
   113e6:	f242 0307 	movw	r3, #8199	; 0x2007
   113ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113ee:	781b      	ldrb	r3, [r3, #0]
   113f0:	b2db      	uxtb	r3, r3
   113f2:	f003 0307 	and.w	r3, r3, #7
   113f6:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
   113f8:	7bfa      	ldrb	r2, [r7, #15]
   113fa:	f24b 0320 	movw	r3, #45088	; 0xb020
   113fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11406:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
   11408:	f242 0304 	movw	r3, #8196	; 0x2004
   1140c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11410:	881b      	ldrh	r3, [r3, #0]
   11412:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
   11414:	7bfa      	ldrb	r2, [r7, #15]
   11416:	f24b 0310 	movw	r3, #45072	; 0xb010
   1141a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1141e:	88f9      	ldrh	r1, [r7, #6]
   11420:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
   11424:	68bb      	ldr	r3, [r7, #8]
   11426:	2b00      	cmp	r3, #0
   11428:	d025      	beq.n	11476 <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
   1142a:	68bb      	ldr	r3, [r7, #8]
   1142c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   11430:	3301      	adds	r3, #1
   11432:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
   11434:	7bbb      	ldrb	r3, [r7, #14]
   11436:	2b1f      	cmp	r3, #31
   11438:	d901      	bls.n	1143e <__vector_21+0x5e>
   1143a:	2300      	movs	r3, #0
   1143c:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
   1143e:	68bb      	ldr	r3, [r7, #8]
   11440:	881a      	ldrh	r2, [r3, #0]
   11442:	7bbb      	ldrb	r3, [r7, #14]
   11444:	68b9      	ldr	r1, [r7, #8]
   11446:	005b      	lsls	r3, r3, #1
   11448:	440b      	add	r3, r1
   1144a:	885b      	ldrh	r3, [r3, #2]
   1144c:	1ad3      	subs	r3, r2, r3
   1144e:	b29a      	uxth	r2, r3
   11450:	68bb      	ldr	r3, [r7, #8]
   11452:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
   11454:	7bbb      	ldrb	r3, [r7, #14]
   11456:	68ba      	ldr	r2, [r7, #8]
   11458:	005b      	lsls	r3, r3, #1
   1145a:	4413      	add	r3, r2
   1145c:	88fa      	ldrh	r2, [r7, #6]
   1145e:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
   11460:	68bb      	ldr	r3, [r7, #8]
   11462:	881a      	ldrh	r2, [r3, #0]
   11464:	88fb      	ldrh	r3, [r7, #6]
   11466:	4413      	add	r3, r2
   11468:	b29a      	uxth	r2, r3
   1146a:	68bb      	ldr	r3, [r7, #8]
   1146c:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
   1146e:	68bb      	ldr	r3, [r7, #8]
   11470:	7bba      	ldrb	r2, [r7, #14]
   11472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
   11476:	7bfb      	ldrb	r3, [r7, #15]
   11478:	3301      	adds	r3, #1
   1147a:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
   1147c:	7bfb      	ldrb	r3, [r7, #15]
   1147e:	2b07      	cmp	r3, #7
   11480:	d901      	bls.n	11486 <__vector_21+0xa6>
    adc_input = 0;
   11482:	2300      	movs	r3, #0
   11484:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
   11486:	f242 0307 	movw	r3, #8199	; 0x2007
   1148a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1148e:	7bfa      	ldrb	r2, [r7, #15]
   11490:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11494:	b2d2      	uxtb	r2, r2
   11496:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
   11498:	f242 0306 	movw	r3, #8198	; 0x2006
   1149c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114a0:	f242 0206 	movw	r2, #8198	; 0x2006
   114a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   114a8:	7812      	ldrb	r2, [r2, #0]
   114aa:	b2d2      	uxtb	r2, r2
   114ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   114b0:	b2d2      	uxtb	r2, r2
   114b2:	701a      	strb	r2, [r3, #0]
  
}
   114b4:	3714      	adds	r7, #20
   114b6:	46bd      	mov	sp, r7
   114b8:	f85d 7b04 	ldr.w	r7, [sp], #4
   114bc:	4770      	bx	lr
   114be:	bf00      	nop

000114c0 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
   114c0:	b580      	push	{r7, lr}
   114c2:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
   114c4:	f003 fca8 	bl	14e18 <uart1_init>
#endif
  ubx_status = UNINIT;
   114c8:	f24b 1367 	movw	r3, #45415	; 0xb167
   114cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114d0:	2200      	movs	r2, #0
   114d2:	701a      	strb	r2, [r3, #0]
}
   114d4:	bd80      	pop	{r7, pc}
   114d6:	bf00      	nop

000114d8 <parse_gps_msg>:

void parse_gps_msg( void ) {
   114d8:	b580      	push	{r7, lr}
   114da:	af00      	add	r7, sp, #0
    ubx_class = 1;
    ubx_id = (ubx_id + 1)%0x40;
    */
    //end

  if (ubx_class == UBX_NAV_ID) {
   114dc:	f24b 136e 	movw	r3, #45422	; 0xb16e
   114e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114e4:	781b      	ldrb	r3, [r3, #0]
   114e6:	2b01      	cmp	r3, #1
   114e8:	f040 80f9 	bne.w	116de <parse_gps_msg+0x206>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
   114ec:	f24b 136d 	movw	r3, #45421	; 0xb16d
   114f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114f4:	781b      	ldrb	r3, [r3, #0]
   114f6:	2b08      	cmp	r3, #8
   114f8:	d128      	bne.n	1154c <parse_gps_msg+0x74>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
   114fa:	f24b 0368 	movw	r3, #45160	; 0xb068
   114fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11502:	685a      	ldr	r2, [r3, #4]
   11504:	f24b 0354 	movw	r3, #45140	; 0xb054
   11508:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1150c:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
   1150e:	f24b 0368 	movw	r3, #45160	; 0xb068
   11512:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11516:	689a      	ldr	r2, [r3, #8]
   11518:	f24b 0358 	movw	r3, #45144	; 0xb058
   1151c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11520:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
   11522:	4b73      	ldr	r3, [pc, #460]	; (116f0 <parse_gps_msg+0x218>)
   11524:	681b      	ldr	r3, [r3, #0]
   11526:	4618      	mov	r0, r3
   11528:	f006 fdde 	bl	180e8 <__aeabi_i2f>
   1152c:	4603      	mov	r3, r0
   1152e:	4618      	mov	r0, r3
   11530:	f04f 0100 	mov.w	r1, #0
   11534:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11538:	f006 fede 	bl	182f8 <__aeabi_fdiv>
   1153c:	4603      	mov	r3, r0
   1153e:	461a      	mov	r2, r3
   11540:	f24b 0344 	movw	r3, #45124	; 0xb044
   11544:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11548:	601a      	str	r2, [r3, #0]
   1154a:	e0c8      	b.n	116de <parse_gps_msg+0x206>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
   1154c:	f24b 136d 	movw	r3, #45421	; 0xb16d
   11550:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11554:	781b      	ldrb	r3, [r3, #0]
   11556:	2b03      	cmp	r3, #3
   11558:	d10a      	bne.n	11570 <parse_gps_msg+0x98>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
   1155a:	f24b 0368 	movw	r3, #45160	; 0xb068
   1155e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11562:	791a      	ldrb	r2, [r3, #4]
   11564:	f24b 0364 	movw	r3, #45156	; 0xb064
   11568:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1156c:	701a      	strb	r2, [r3, #0]
   1156e:	e0b6      	b.n	116de <parse_gps_msg+0x206>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
   11570:	f24b 136d 	movw	r3, #45421	; 0xb16d
   11574:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11578:	781b      	ldrb	r3, [r3, #0]
   1157a:	2b12      	cmp	r3, #18
   1157c:	f040 80af 	bne.w	116de <parse_gps_msg+0x206>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
   11580:	4b5c      	ldr	r3, [pc, #368]	; (116f4 <parse_gps_msg+0x21c>)
   11582:	681b      	ldr	r3, [r3, #0]
   11584:	4618      	mov	r0, r3
   11586:	f006 fdab 	bl	180e0 <__aeabi_ui2f>
   1158a:	4603      	mov	r3, r0
   1158c:	4618      	mov	r0, r3
   1158e:	f04f 0100 	mov.w	r1, #0
   11592:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11596:	f006 feaf 	bl	182f8 <__aeabi_fdiv>
   1159a:	4603      	mov	r3, r0
   1159c:	461a      	mov	r2, r3
   1159e:	f24b 0348 	movw	r3, #45128	; 0xb048
   115a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115a6:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
   115a8:	4b51      	ldr	r3, [pc, #324]	; (116f0 <parse_gps_msg+0x218>)
   115aa:	681b      	ldr	r3, [r3, #0]
   115ac:	4618      	mov	r0, r3
   115ae:	f006 fd9b 	bl	180e8 <__aeabi_i2f>
   115b2:	4603      	mov	r3, r0
   115b4:	4618      	mov	r0, r3
   115b6:	f04f 0100 	mov.w	r1, #0
   115ba:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   115be:	f006 fe9b 	bl	182f8 <__aeabi_fdiv>
   115c2:	4603      	mov	r3, r0
   115c4:	461a      	mov	r2, r3
   115c6:	f24b 034c 	movw	r3, #45132	; 0xb04c
   115ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115ce:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
   115d0:	4b49      	ldr	r3, [pc, #292]	; (116f8 <parse_gps_msg+0x220>)
   115d2:	681b      	ldr	r3, [r3, #0]
   115d4:	4618      	mov	r0, r3
   115d6:	f006 fd87 	bl	180e8 <__aeabi_i2f>
   115da:	4603      	mov	r3, r0
   115dc:	4618      	mov	r0, r3
   115de:	f006 f943 	bl	17868 <__aeabi_f2d>
   115e2:	4602      	mov	r2, r0
   115e4:	460b      	mov	r3, r1
   115e6:	4610      	mov	r0, r2
   115e8:	4619      	mov	r1, r3
   115ea:	a33d      	add	r3, pc, #244	; (adr r3, 116e0 <parse_gps_msg+0x208>)
   115ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   115f0:	f006 fab8 	bl	17b64 <__aeabi_ddiv>
   115f4:	4602      	mov	r2, r0
   115f6:	460b      	mov	r3, r1
   115f8:	4610      	mov	r0, r2
   115fa:	4619      	mov	r1, r3
   115fc:	f04f 0200 	mov.w	r2, #0
   11600:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   11604:	f2c4 0366 	movt	r3, #16486	; 0x4066
   11608:	f006 faac 	bl	17b64 <__aeabi_ddiv>
   1160c:	4602      	mov	r2, r0
   1160e:	460b      	mov	r3, r1
   11610:	4610      	mov	r0, r2
   11612:	4619      	mov	r1, r3
   11614:	a334      	add	r3, pc, #208	; (adr r3, 116e8 <parse_gps_msg+0x210>)
   11616:	e9d3 2300 	ldrd	r2, r3, [r3]
   1161a:	f006 f979 	bl	17910 <__aeabi_dmul>
   1161e:	4602      	mov	r2, r0
   11620:	460b      	mov	r3, r1
   11622:	4610      	mov	r0, r2
   11624:	4619      	mov	r1, r3
   11626:	f006 fc55 	bl	17ed4 <__aeabi_d2f>
   1162a:	4602      	mov	r2, r0
   1162c:	f24b 0350 	movw	r3, #45136	; 0xb050
   11630:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11634:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
   11636:	f24b 0368 	movw	r3, #45160	; 0xb068
   1163a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1163e:	681b      	ldr	r3, [r3, #0]
   11640:	4618      	mov	r0, r3
   11642:	f006 fd4d 	bl	180e0 <__aeabi_ui2f>
   11646:	4603      	mov	r3, r0
   11648:	4618      	mov	r0, r3
   1164a:	f04f 0100 	mov.w	r1, #0
   1164e:	f2c4 417a 	movt	r1, #17530	; 0x447a
   11652:	f006 fe51 	bl	182f8 <__aeabi_fdiv>
   11656:	4603      	mov	r3, r0
   11658:	461a      	mov	r2, r3
   1165a:	f24b 0340 	movw	r3, #45120	; 0xb040
   1165e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11662:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
   11664:	f24b 0354 	movw	r3, #45140	; 0xb054
   11668:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1166c:	681a      	ldr	r2, [r3, #0]
   1166e:	f248 531f 	movw	r3, #34079	; 0x851f
   11672:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   11676:	fb83 1302 	smull	r1, r3, r3, r2
   1167a:	1159      	asrs	r1, r3, #5
   1167c:	17d3      	asrs	r3, r2, #31
   1167e:	1acb      	subs	r3, r1, r3
   11680:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
   11684:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
   11688:	4618      	mov	r0, r3
   1168a:	f006 fd2d 	bl	180e8 <__aeabi_i2f>
   1168e:	4602      	mov	r2, r0
   11690:	f24b 035c 	movw	r3, #45148	; 0xb05c
   11694:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11698:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
   1169a:	f24b 0358 	movw	r3, #45144	; 0xb058
   1169e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116a2:	681a      	ldr	r2, [r3, #0]
   116a4:	f248 531f 	movw	r3, #34079	; 0x851f
   116a8:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   116ac:	fb83 1302 	smull	r1, r3, r3, r2
   116b0:	1159      	asrs	r1, r3, #5
   116b2:	17d3      	asrs	r3, r2, #31
   116b4:	1aca      	subs	r2, r1, r3
   116b6:	f648 231a 	movw	r3, #35354	; 0x8a1a
   116ba:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
   116be:	4413      	add	r3, r2
   116c0:	4618      	mov	r0, r3
   116c2:	f006 fd11 	bl	180e8 <__aeabi_i2f>
   116c6:	4602      	mov	r2, r0
   116c8:	f24b 0360 	movw	r3, #45152	; 0xb060
   116cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116d0:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
   116d2:	f24b 0366 	movw	r3, #45158	; 0xb066
   116d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116da:	2201      	movs	r2, #1
   116dc:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
   116de:	bd80      	pop	{r7, pc}
   116e0:	00000000 	.word	0x00000000
   116e4:	40f86a00 	.word	0x40f86a00
   116e8:	5a7ed197 	.word	0x5a7ed197
   116ec:	400921fb 	.word	0x400921fb
   116f0:	2000b074 	.word	0x2000b074
   116f4:	2000b07c 	.word	0x2000b07c
   116f8:	2000b080 	.word	0x2000b080

000116fc <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
   116fc:	b480      	push	{r7}
   116fe:	b083      	sub	sp, #12
   11700:	af00      	add	r7, sp, #0
   11702:	4603      	mov	r3, r0
   11704:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
   11706:	f24b 1367 	movw	r3, #45415	; 0xb167
   1170a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1170e:	781b      	ldrb	r3, [r3, #0]
   11710:	2b06      	cmp	r3, #6
   11712:	d81d      	bhi.n	11750 <parse_ubx+0x54>
    ck_a += c;
   11714:	f24b 136b 	movw	r3, #45419	; 0xb16b
   11718:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1171c:	781a      	ldrb	r2, [r3, #0]
   1171e:	79fb      	ldrb	r3, [r7, #7]
   11720:	4413      	add	r3, r2
   11722:	b2da      	uxtb	r2, r3
   11724:	f24b 136b 	movw	r3, #45419	; 0xb16b
   11728:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1172c:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
   1172e:	f24b 136c 	movw	r3, #45420	; 0xb16c
   11732:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11736:	781a      	ldrb	r2, [r3, #0]
   11738:	f24b 136b 	movw	r3, #45419	; 0xb16b
   1173c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11740:	781b      	ldrb	r3, [r3, #0]
   11742:	4413      	add	r3, r2
   11744:	b2da      	uxtb	r2, r3
   11746:	f24b 136c 	movw	r3, #45420	; 0xb16c
   1174a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1174e:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
   11750:	f24b 1367 	movw	r3, #45415	; 0xb167
   11754:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11758:	781b      	ldrb	r3, [r3, #0]
   1175a:	2b00      	cmp	r3, #0
   1175c:	d110      	bne.n	11780 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
   1175e:	79fb      	ldrb	r3, [r7, #7]
   11760:	2bb5      	cmp	r3, #181	; 0xb5
   11762:	f040 8135 	bne.w	119d0 <parse_ubx+0x2d4>
      ubx_status++;
   11766:	f24b 1367 	movw	r3, #45415	; 0xb167
   1176a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1176e:	781b      	ldrb	r3, [r3, #0]
   11770:	3301      	adds	r3, #1
   11772:	b2da      	uxtb	r2, r3
   11774:	f24b 1367 	movw	r3, #45415	; 0xb167
   11778:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1177c:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   1177e:	e12f      	b.n	119e0 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
   11780:	f24b 1367 	movw	r3, #45415	; 0xb167
   11784:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11788:	781b      	ldrb	r3, [r3, #0]
   1178a:	2b01      	cmp	r3, #1
   1178c:	d11c      	bne.n	117c8 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
   1178e:	79fb      	ldrb	r3, [r7, #7]
   11790:	2b62      	cmp	r3, #98	; 0x62
   11792:	d000      	beq.n	11796 <parse_ubx+0x9a>
      goto error;
   11794:	e11d      	b.n	119d2 <parse_ubx+0x2d6>
    ck_a = 0;
   11796:	f24b 136b 	movw	r3, #45419	; 0xb16b
   1179a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1179e:	2200      	movs	r2, #0
   117a0:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
   117a2:	f24b 136c 	movw	r3, #45420	; 0xb16c
   117a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117aa:	2200      	movs	r2, #0
   117ac:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   117ae:	f24b 1367 	movw	r3, #45415	; 0xb167
   117b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117b6:	781b      	ldrb	r3, [r3, #0]
   117b8:	3301      	adds	r3, #1
   117ba:	b2da      	uxtb	r2, r3
   117bc:	f24b 1367 	movw	r3, #45415	; 0xb167
   117c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117c4:	701a      	strb	r2, [r3, #0]
   117c6:	e103      	b.n	119d0 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
   117c8:	f24b 1367 	movw	r3, #45415	; 0xb167
   117cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117d0:	781b      	ldrb	r3, [r3, #0]
   117d2:	2b02      	cmp	r3, #2
   117d4:	d127      	bne.n	11826 <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
   117d6:	f24b 0365 	movw	r3, #45157	; 0xb065
   117da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117de:	781b      	ldrb	r3, [r3, #0]
   117e0:	b2db      	uxtb	r3, r3
   117e2:	2b00      	cmp	r3, #0
   117e4:	d00c      	beq.n	11800 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
   117e6:	f24b 136f 	movw	r3, #45423	; 0xb16f
   117ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117ee:	781b      	ldrb	r3, [r3, #0]
   117f0:	3301      	adds	r3, #1
   117f2:	b2da      	uxtb	r2, r3
   117f4:	f24b 136f 	movw	r3, #45423	; 0xb16f
   117f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117fc:	701a      	strb	r2, [r3, #0]
      goto error;
   117fe:	e0e8      	b.n	119d2 <parse_ubx+0x2d6>
    }
    ubx_class = c;
   11800:	f24b 136e 	movw	r3, #45422	; 0xb16e
   11804:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11808:	79fa      	ldrb	r2, [r7, #7]
   1180a:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   1180c:	f24b 1367 	movw	r3, #45415	; 0xb167
   11810:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11814:	781b      	ldrb	r3, [r3, #0]
   11816:	3301      	adds	r3, #1
   11818:	b2da      	uxtb	r2, r3
   1181a:	f24b 1367 	movw	r3, #45415	; 0xb167
   1181e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11822:	701a      	strb	r2, [r3, #0]
   11824:	e0d4      	b.n	119d0 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
   11826:	f24b 1367 	movw	r3, #45415	; 0xb167
   1182a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1182e:	781b      	ldrb	r3, [r3, #0]
   11830:	2b03      	cmp	r3, #3
   11832:	d112      	bne.n	1185a <parse_ubx+0x15e>
  {
    ubx_id = c;
   11834:	f24b 136d 	movw	r3, #45421	; 0xb16d
   11838:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1183c:	79fa      	ldrb	r2, [r7, #7]
   1183e:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11840:	f24b 1367 	movw	r3, #45415	; 0xb167
   11844:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11848:	781b      	ldrb	r3, [r3, #0]
   1184a:	3301      	adds	r3, #1
   1184c:	b2da      	uxtb	r2, r3
   1184e:	f24b 1367 	movw	r3, #45415	; 0xb167
   11852:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11856:	701a      	strb	r2, [r3, #0]
   11858:	e0ba      	b.n	119d0 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
   1185a:	f24b 1367 	movw	r3, #45415	; 0xb167
   1185e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11862:	781b      	ldrb	r3, [r3, #0]
   11864:	2b04      	cmp	r3, #4
   11866:	d113      	bne.n	11890 <parse_ubx+0x194>
  {
    ubx_len = c;
   11868:	79fb      	ldrb	r3, [r7, #7]
   1186a:	b29a      	uxth	r2, r3
   1186c:	f24b 1368 	movw	r3, #45416	; 0xb168
   11870:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11874:	801a      	strh	r2, [r3, #0]
    ubx_status++;
   11876:	f24b 1367 	movw	r3, #45415	; 0xb167
   1187a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1187e:	781b      	ldrb	r3, [r3, #0]
   11880:	3301      	adds	r3, #1
   11882:	b2da      	uxtb	r2, r3
   11884:	f24b 1367 	movw	r3, #45415	; 0xb167
   11888:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1188c:	701a      	strb	r2, [r3, #0]
   1188e:	e09f      	b.n	119d0 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
   11890:	f24b 1367 	movw	r3, #45415	; 0xb167
   11894:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11898:	781b      	ldrb	r3, [r3, #0]
   1189a:	2b05      	cmp	r3, #5
   1189c:	d12b      	bne.n	118f6 <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
   1189e:	79fb      	ldrb	r3, [r7, #7]
   118a0:	021b      	lsls	r3, r3, #8
   118a2:	b29a      	uxth	r2, r3
   118a4:	f24b 1368 	movw	r3, #45416	; 0xb168
   118a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118ac:	881b      	ldrh	r3, [r3, #0]
   118ae:	b29b      	uxth	r3, r3
   118b0:	4313      	orrs	r3, r2
   118b2:	b29b      	uxth	r3, r3
   118b4:	b29a      	uxth	r2, r3
   118b6:	f24b 1368 	movw	r3, #45416	; 0xb168
   118ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118be:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
   118c0:	f24b 1368 	movw	r3, #45416	; 0xb168
   118c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118c8:	881b      	ldrh	r3, [r3, #0]
   118ca:	2bff      	cmp	r3, #255	; 0xff
   118cc:	d900      	bls.n	118d0 <parse_ubx+0x1d4>
      goto error;
   118ce:	e080      	b.n	119d2 <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
   118d0:	f24b 136a 	movw	r3, #45418	; 0xb16a
   118d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118d8:	2200      	movs	r2, #0
   118da:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   118dc:	f24b 1367 	movw	r3, #45415	; 0xb167
   118e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118e4:	781b      	ldrb	r3, [r3, #0]
   118e6:	3301      	adds	r3, #1
   118e8:	b2da      	uxtb	r2, r3
   118ea:	f24b 1367 	movw	r3, #45415	; 0xb167
   118ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118f2:	701a      	strb	r2, [r3, #0]
   118f4:	e06c      	b.n	119d0 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
   118f6:	f24b 1367 	movw	r3, #45415	; 0xb167
   118fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118fe:	781b      	ldrb	r3, [r3, #0]
   11900:	2b06      	cmp	r3, #6
   11902:	d131      	bne.n	11968 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
   11904:	f24b 136a 	movw	r3, #45418	; 0xb16a
   11908:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1190c:	781b      	ldrb	r3, [r3, #0]
   1190e:	461a      	mov	r2, r3
   11910:	f24b 0368 	movw	r3, #45160	; 0xb068
   11914:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11918:	79f9      	ldrb	r1, [r7, #7]
   1191a:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
   1191c:	f24b 136a 	movw	r3, #45418	; 0xb16a
   11920:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11924:	781b      	ldrb	r3, [r3, #0]
   11926:	3301      	adds	r3, #1
   11928:	b2da      	uxtb	r2, r3
   1192a:	f24b 136a 	movw	r3, #45418	; 0xb16a
   1192e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11932:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
   11934:	f24b 136a 	movw	r3, #45418	; 0xb16a
   11938:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1193c:	781b      	ldrb	r3, [r3, #0]
   1193e:	461a      	mov	r2, r3
   11940:	f24b 1368 	movw	r3, #45416	; 0xb168
   11944:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11948:	881b      	ldrh	r3, [r3, #0]
   1194a:	429a      	cmp	r2, r3
   1194c:	d340      	bcc.n	119d0 <parse_ubx+0x2d4>
      ubx_status++;
   1194e:	f24b 1367 	movw	r3, #45415	; 0xb167
   11952:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11956:	781b      	ldrb	r3, [r3, #0]
   11958:	3301      	adds	r3, #1
   1195a:	b2da      	uxtb	r2, r3
   1195c:	f24b 1367 	movw	r3, #45415	; 0xb167
   11960:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11964:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11966:	e03b      	b.n	119e0 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
   11968:	f24b 1367 	movw	r3, #45415	; 0xb167
   1196c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11970:	781b      	ldrb	r3, [r3, #0]
   11972:	2b07      	cmp	r3, #7
   11974:	d115      	bne.n	119a2 <parse_ubx+0x2a6>
  {
    if (c != ck_a)
   11976:	f24b 136b 	movw	r3, #45419	; 0xb16b
   1197a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1197e:	781b      	ldrb	r3, [r3, #0]
   11980:	79fa      	ldrb	r2, [r7, #7]
   11982:	429a      	cmp	r2, r3
   11984:	d000      	beq.n	11988 <parse_ubx+0x28c>
      goto error;
   11986:	e024      	b.n	119d2 <parse_ubx+0x2d6>
    ubx_status++;
   11988:	f24b 1367 	movw	r3, #45415	; 0xb167
   1198c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11990:	781b      	ldrb	r3, [r3, #0]
   11992:	3301      	adds	r3, #1
   11994:	b2da      	uxtb	r2, r3
   11996:	f24b 1367 	movw	r3, #45415	; 0xb167
   1199a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1199e:	701a      	strb	r2, [r3, #0]
   119a0:	e016      	b.n	119d0 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
   119a2:	f24b 1367 	movw	r3, #45415	; 0xb167
   119a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119aa:	781b      	ldrb	r3, [r3, #0]
   119ac:	2b08      	cmp	r3, #8
   119ae:	d10f      	bne.n	119d0 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
   119b0:	f24b 136c 	movw	r3, #45420	; 0xb16c
   119b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119b8:	781b      	ldrb	r3, [r3, #0]
   119ba:	79fa      	ldrb	r2, [r7, #7]
   119bc:	429a      	cmp	r2, r3
   119be:	d000      	beq.n	119c2 <parse_ubx+0x2c6>
      goto error;
   119c0:	e007      	b.n	119d2 <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
   119c2:	f24b 0365 	movw	r3, #45157	; 0xb065
   119c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119ca:	2201      	movs	r2, #1
   119cc:	701a      	strb	r2, [r3, #0]
    goto restart;
   119ce:	e000      	b.n	119d2 <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
   119d0:	e006      	b.n	119e0 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
   119d2:	f24b 1367 	movw	r3, #45415	; 0xb167
   119d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119da:	2200      	movs	r2, #0
   119dc:	701a      	strb	r2, [r3, #0]
  return;
   119de:	bf00      	nop
}
   119e0:	370c      	adds	r7, #12
   119e2:	46bd      	mov	sp, r7
   119e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   119e8:	4770      	bx	lr
   119ea:	bf00      	nop

000119ec <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
   119ec:	b580      	push	{r7, lr}
   119ee:	b082      	sub	sp, #8
   119f0:	af00      	add	r7, sp, #0
   119f2:	f242 039c 	movw	r3, #8348	; 0x209c
   119f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119fa:	781b      	ldrb	r3, [r3, #0]
   119fc:	71fb      	strb	r3, [r7, #7]
   119fe:	79fb      	ldrb	r3, [r7, #7]
   11a00:	4618      	mov	r0, r3
   11a02:	f7ff fe7b 	bl	116fc <parse_ubx>
   11a06:	3708      	adds	r7, #8
   11a08:	46bd      	mov	sp, r7
   11a0a:	bd80      	pop	{r7, pc}
   11a0c:	f3af 8000 	nop.w

00011a10 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
   11a10:	b580      	push	{r7, lr}
   11a12:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
   11a14:	f240 33f8 	movw	r3, #1016	; 0x3f8
   11a18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a1c:	f24c 228f 	movw	r2, #49807	; 0xc28f
   11a20:	f6c3 3275 	movt	r2, #15221	; 0x3b75
   11a24:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
   11a26:	2001      	movs	r0, #1
   11a28:	f24b 1174 	movw	r1, #45428	; 0xb174
   11a2c:	f2c2 0100 	movt	r1, #8192	; 0x2000
   11a30:	f7ff fc82 	bl	11338 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
   11a34:	2002      	movs	r0, #2
   11a36:	f24b 11b8 	movw	r1, #45496	; 0xb1b8
   11a3a:	f2c2 0100 	movt	r1, #8192	; 0x2000
   11a3e:	f7ff fc7b 	bl	11338 <adc_buf_channel>
}
   11a42:	bd80      	pop	{r7, pc}

00011a44 <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
   11a44:	b480      	push	{r7}
   11a46:	b083      	sub	sp, #12
   11a48:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
   11a4a:	f24b 1374 	movw	r3, #45428	; 0xb174
   11a4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a52:	881b      	ldrh	r3, [r3, #0]
   11a54:	095b      	lsrs	r3, r3, #5
   11a56:	b29b      	uxth	r3, r3
   11a58:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
   11a5a:	f24b 13b8 	movw	r3, #45496	; 0xb1b8
   11a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a62:	881b      	ldrh	r3, [r3, #0]
   11a64:	095b      	lsrs	r3, r3, #5
   11a66:	b29b      	uxth	r3, r3
   11a68:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
   11a6a:	88fb      	ldrh	r3, [r7, #6]
   11a6c:	425b      	negs	r3, r3
   11a6e:	b29a      	uxth	r2, r3
   11a70:	88bb      	ldrh	r3, [r7, #4]
   11a72:	1ad3      	subs	r3, r2, r3
   11a74:	b29a      	uxth	r2, r3
   11a76:	f240 33f2 	movw	r3, #1010	; 0x3f2
   11a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a7e:	881b      	ldrh	r3, [r3, #0]
   11a80:	b29b      	uxth	r3, r3
   11a82:	1ad3      	subs	r3, r2, r3
   11a84:	b29b      	uxth	r3, r3
   11a86:	b29a      	uxth	r2, r3
   11a88:	f24b 1370 	movw	r3, #45424	; 0xb170
   11a8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a90:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
   11a92:	88ba      	ldrh	r2, [r7, #4]
   11a94:	88fb      	ldrh	r3, [r7, #6]
   11a96:	1ad3      	subs	r3, r2, r3
   11a98:	b29a      	uxth	r2, r3
   11a9a:	f240 33f4 	movw	r3, #1012	; 0x3f4
   11a9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11aa2:	881b      	ldrh	r3, [r3, #0]
   11aa4:	b29b      	uxth	r3, r3
   11aa6:	1ad3      	subs	r3, r2, r3
   11aa8:	b29b      	uxth	r3, r3
   11aaa:	b29a      	uxth	r2, r3
   11aac:	f24b 1372 	movw	r3, #45426	; 0xb172
   11ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ab4:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
   11ab6:	370c      	adds	r7, #12
   11ab8:	46bd      	mov	sp, r7
   11aba:	f85d 7b04 	ldr.w	r7, [sp], #4
   11abe:	4770      	bx	lr

00011ac0 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
   11ac0:	b580      	push	{r7, lr}
   11ac2:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
   11ac4:	f24b 1372 	movw	r3, #45426	; 0xb172
   11ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11acc:	881b      	ldrh	r3, [r3, #0]
   11ace:	b29b      	uxth	r3, r3
   11ad0:	425b      	negs	r3, r3
   11ad2:	b29b      	uxth	r3, r3
   11ad4:	b29a      	uxth	r2, r3
   11ad6:	f240 33f0 	movw	r3, #1008	; 0x3f0
   11ada:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ade:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
   11ae0:	f240 33f0 	movw	r3, #1008	; 0x3f0
   11ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ae8:	881b      	ldrh	r3, [r3, #0]
   11aea:	b21b      	sxth	r3, r3
   11aec:	4618      	mov	r0, r3
   11aee:	f005 fea9 	bl	17844 <__aeabi_i2d>
   11af2:	4602      	mov	r2, r0
   11af4:	460b      	mov	r3, r1
   11af6:	f04f 0000 	mov.w	r0, #0
   11afa:	f04f 0100 	mov.w	r1, #0
   11afe:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
   11b02:	f006 f82f 	bl	17b64 <__aeabi_ddiv>
   11b06:	4602      	mov	r2, r0
   11b08:	460b      	mov	r3, r1
   11b0a:	4610      	mov	r0, r2
   11b0c:	4619      	mov	r1, r3
   11b0e:	f006 f9e1 	bl	17ed4 <__aeabi_d2f>
   11b12:	4602      	mov	r2, r0
   11b14:	f240 33f8 	movw	r3, #1016	; 0x3f8
   11b18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b1c:	601a      	str	r2, [r3, #0]
}
   11b1e:	bd80      	pop	{r7, pc}

00011b20 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
   11b20:	b590      	push	{r4, r7, lr}
   11b22:	b083      	sub	sp, #12
   11b24:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
   11b26:	f24b 4390 	movw	r3, #46224	; 0xb490
   11b2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b2e:	681a      	ldr	r2, [r3, #0]
   11b30:	f24b 13fc 	movw	r3, #45564	; 0xb1fc
   11b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b38:	681b      	ldr	r3, [r3, #0]
   11b3a:	4610      	mov	r0, r2
   11b3c:	4619      	mov	r1, r3
   11b3e:	f006 fa1d 	bl	17f7c <__aeabi_fsub>
   11b42:	4603      	mov	r3, r0
   11b44:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
   11b46:	f240 33fc 	movw	r3, #1020	; 0x3fc
   11b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b4e:	681b      	ldr	r3, [r3, #0]
   11b50:	4618      	mov	r0, r3
   11b52:	6879      	ldr	r1, [r7, #4]
   11b54:	f006 fb1c 	bl	18190 <__aeabi_fmul>
   11b58:	4603      	mov	r3, r0
   11b5a:	4618      	mov	r0, r3
   11b5c:	f04f 0100 	mov.w	r1, #0
   11b60:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11b64:	f006 fcb2 	bl	184cc <__aeabi_fcmplt>
   11b68:	4603      	mov	r3, r0
   11b6a:	2b00      	cmp	r3, #0
   11b6c:	d002      	beq.n	11b74 <roll_pitch_pid_run+0x54>
   11b6e:	f64d 2280 	movw	r2, #55936	; 0xda80
   11b72:	e026      	b.n	11bc2 <roll_pitch_pid_run+0xa2>
   11b74:	f240 33fc 	movw	r3, #1020	; 0x3fc
   11b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b7c:	681b      	ldr	r3, [r3, #0]
   11b7e:	4618      	mov	r0, r3
   11b80:	6879      	ldr	r1, [r7, #4]
   11b82:	f006 fb05 	bl	18190 <__aeabi_fmul>
   11b86:	4603      	mov	r3, r0
   11b88:	4618      	mov	r0, r3
   11b8a:	f04f 0100 	mov.w	r1, #0
   11b8e:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11b92:	f006 fcb9 	bl	18508 <__aeabi_fcmpgt>
   11b96:	4603      	mov	r3, r0
   11b98:	2b00      	cmp	r3, #0
   11b9a:	d002      	beq.n	11ba2 <roll_pitch_pid_run+0x82>
   11b9c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11ba0:	e00e      	b.n	11bc0 <roll_pitch_pid_run+0xa0>
   11ba2:	f240 33fc 	movw	r3, #1020	; 0x3fc
   11ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11baa:	681b      	ldr	r3, [r3, #0]
   11bac:	4618      	mov	r0, r3
   11bae:	6879      	ldr	r1, [r7, #4]
   11bb0:	f006 faee 	bl	18190 <__aeabi_fmul>
   11bb4:	4603      	mov	r3, r0
   11bb6:	4618      	mov	r0, r3
   11bb8:	f006 fcb0 	bl	1851c <__aeabi_f2iz>
   11bbc:	4603      	mov	r3, r0
   11bbe:	b29b      	uxth	r3, r3
   11bc0:	b29a      	uxth	r2, r3
   11bc2:	f24b 2306 	movw	r3, #45574	; 0xb206
   11bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bca:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
   11bcc:	f24b 230c 	movw	r3, #45580	; 0xb20c
   11bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bd4:	681b      	ldr	r3, [r3, #0]
   11bd6:	4618      	mov	r0, r3
   11bd8:	f04f 0100 	mov.w	r1, #0
   11bdc:	f006 fc76 	bl	184cc <__aeabi_fcmplt>
   11be0:	4603      	mov	r3, r0
   11be2:	2b00      	cmp	r3, #0
   11be4:	d006      	beq.n	11bf4 <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
   11be6:	f24b 230c 	movw	r3, #45580	; 0xb20c
   11bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bee:	f04f 0200 	mov.w	r2, #0
   11bf2:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
   11bf4:	f24b 4398 	movw	r3, #46232	; 0xb498
   11bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bfc:	681a      	ldr	r2, [r3, #0]
   11bfe:	f24b 2300 	movw	r3, #45568	; 0xb200
   11c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c06:	681b      	ldr	r3, [r3, #0]
   11c08:	4610      	mov	r0, r2
   11c0a:	4619      	mov	r1, r3
   11c0c:	f006 f9b6 	bl	17f7c <__aeabi_fsub>
   11c10:	4603      	mov	r3, r0
   11c12:	461c      	mov	r4, r3
   11c14:	f24b 4390 	movw	r3, #46224	; 0xb490
   11c18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c1c:	681b      	ldr	r3, [r3, #0]
   11c1e:	4618      	mov	r0, r3
   11c20:	f04f 0100 	mov.w	r1, #0
   11c24:	f006 fc52 	bl	184cc <__aeabi_fcmplt>
   11c28:	4603      	mov	r3, r0
   11c2a:	2b00      	cmp	r3, #0
   11c2c:	d007      	beq.n	11c3e <roll_pitch_pid_run+0x11e>
   11c2e:	f24b 4390 	movw	r3, #46224	; 0xb490
   11c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c36:	681b      	ldr	r3, [r3, #0]
   11c38:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11c3c:	e004      	b.n	11c48 <roll_pitch_pid_run+0x128>
   11c3e:	f24b 4390 	movw	r3, #46224	; 0xb490
   11c42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c46:	681a      	ldr	r2, [r3, #0]
   11c48:	f24b 230c 	movw	r3, #45580	; 0xb20c
   11c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c50:	681b      	ldr	r3, [r3, #0]
   11c52:	4610      	mov	r0, r2
   11c54:	4619      	mov	r1, r3
   11c56:	f006 fa9b 	bl	18190 <__aeabi_fmul>
   11c5a:	4603      	mov	r3, r0
   11c5c:	4620      	mov	r0, r4
   11c5e:	4619      	mov	r1, r3
   11c60:	f006 f98c 	bl	17f7c <__aeabi_fsub>
   11c64:	4603      	mov	r3, r0
   11c66:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   11c6a:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
   11c6c:	f240 4300 	movw	r3, #1024	; 0x400
   11c70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c74:	681b      	ldr	r3, [r3, #0]
   11c76:	4618      	mov	r0, r3
   11c78:	6879      	ldr	r1, [r7, #4]
   11c7a:	f006 fa89 	bl	18190 <__aeabi_fmul>
   11c7e:	4603      	mov	r3, r0
   11c80:	4618      	mov	r0, r3
   11c82:	f04f 0100 	mov.w	r1, #0
   11c86:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11c8a:	f006 fc1f 	bl	184cc <__aeabi_fcmplt>
   11c8e:	4603      	mov	r3, r0
   11c90:	2b00      	cmp	r3, #0
   11c92:	d002      	beq.n	11c9a <roll_pitch_pid_run+0x17a>
   11c94:	f64d 2280 	movw	r2, #55936	; 0xda80
   11c98:	e026      	b.n	11ce8 <roll_pitch_pid_run+0x1c8>
   11c9a:	f240 4300 	movw	r3, #1024	; 0x400
   11c9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ca2:	681b      	ldr	r3, [r3, #0]
   11ca4:	4618      	mov	r0, r3
   11ca6:	6879      	ldr	r1, [r7, #4]
   11ca8:	f006 fa72 	bl	18190 <__aeabi_fmul>
   11cac:	4603      	mov	r3, r0
   11cae:	4618      	mov	r0, r3
   11cb0:	f04f 0100 	mov.w	r1, #0
   11cb4:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11cb8:	f006 fc26 	bl	18508 <__aeabi_fcmpgt>
   11cbc:	4603      	mov	r3, r0
   11cbe:	2b00      	cmp	r3, #0
   11cc0:	d002      	beq.n	11cc8 <roll_pitch_pid_run+0x1a8>
   11cc2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11cc6:	e00e      	b.n	11ce6 <roll_pitch_pid_run+0x1c6>
   11cc8:	f240 4300 	movw	r3, #1024	; 0x400
   11ccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cd0:	681b      	ldr	r3, [r3, #0]
   11cd2:	4618      	mov	r0, r3
   11cd4:	6879      	ldr	r1, [r7, #4]
   11cd6:	f006 fa5b 	bl	18190 <__aeabi_fmul>
   11cda:	4603      	mov	r3, r0
   11cdc:	4618      	mov	r0, r3
   11cde:	f006 fc1d 	bl	1851c <__aeabi_f2iz>
   11ce2:	4603      	mov	r3, r0
   11ce4:	b29b      	uxth	r3, r3
   11ce6:	b29a      	uxth	r2, r3
   11ce8:	f24b 2308 	movw	r3, #45576	; 0xb208
   11cec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cf0:	801a      	strh	r2, [r3, #0]
}
   11cf2:	370c      	adds	r7, #12
   11cf4:	46bd      	mov	sp, r7
   11cf6:	bd90      	pop	{r4, r7, pc}

00011cf8 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
   11cf8:	b580      	push	{r7, lr}
   11cfa:	b082      	sub	sp, #8
   11cfc:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
   11cfe:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
   11d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d06:	681a      	ldr	r2, [r3, #0]
   11d08:	f24b 2314 	movw	r3, #45588	; 0xb214
   11d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d10:	681b      	ldr	r3, [r3, #0]
   11d12:	4610      	mov	r0, r2
   11d14:	4619      	mov	r1, r3
   11d16:	f006 f931 	bl	17f7c <__aeabi_fsub>
   11d1a:	4603      	mov	r3, r0
   11d1c:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
   11d1e:	e013      	b.n	11d48 <course_pid_run+0x50>
   11d20:	6878      	ldr	r0, [r7, #4]
   11d22:	f005 fda1 	bl	17868 <__aeabi_f2d>
   11d26:	4602      	mov	r2, r0
   11d28:	460b      	mov	r3, r1
   11d2a:	4610      	mov	r0, r2
   11d2c:	4619      	mov	r1, r3
   11d2e:	a348      	add	r3, pc, #288	; (adr r3, 11e50 <course_pid_run+0x158>)
   11d30:	e9d3 2300 	ldrd	r2, r3, [r3]
   11d34:	f005 fc38 	bl	175a8 <__aeabi_dsub>
   11d38:	4602      	mov	r2, r0
   11d3a:	460b      	mov	r3, r1
   11d3c:	4610      	mov	r0, r2
   11d3e:	4619      	mov	r1, r3
   11d40:	f006 f8c8 	bl	17ed4 <__aeabi_d2f>
   11d44:	4603      	mov	r3, r0
   11d46:	607b      	str	r3, [r7, #4]
   11d48:	6878      	ldr	r0, [r7, #4]
   11d4a:	f005 fd8d 	bl	17868 <__aeabi_f2d>
   11d4e:	4602      	mov	r2, r0
   11d50:	460b      	mov	r3, r1
   11d52:	4610      	mov	r0, r2
   11d54:	4619      	mov	r1, r3
   11d56:	a340      	add	r3, pc, #256	; (adr r3, 11e58 <course_pid_run+0x160>)
   11d58:	e9d3 2300 	ldrd	r2, r3, [r3]
   11d5c:	f006 f868 	bl	17e30 <__aeabi_dcmpgt>
   11d60:	4603      	mov	r3, r0
   11d62:	2b00      	cmp	r3, #0
   11d64:	d1dc      	bne.n	11d20 <course_pid_run+0x28>
   11d66:	e013      	b.n	11d90 <course_pid_run+0x98>
   11d68:	6878      	ldr	r0, [r7, #4]
   11d6a:	f005 fd7d 	bl	17868 <__aeabi_f2d>
   11d6e:	4602      	mov	r2, r0
   11d70:	460b      	mov	r3, r1
   11d72:	4610      	mov	r0, r2
   11d74:	4619      	mov	r1, r3
   11d76:	a336      	add	r3, pc, #216	; (adr r3, 11e50 <course_pid_run+0x158>)
   11d78:	e9d3 2300 	ldrd	r2, r3, [r3]
   11d7c:	f005 fc16 	bl	175ac <__adddf3>
   11d80:	4602      	mov	r2, r0
   11d82:	460b      	mov	r3, r1
   11d84:	4610      	mov	r0, r2
   11d86:	4619      	mov	r1, r3
   11d88:	f006 f8a4 	bl	17ed4 <__aeabi_d2f>
   11d8c:	4603      	mov	r3, r0
   11d8e:	607b      	str	r3, [r7, #4]
   11d90:	6878      	ldr	r0, [r7, #4]
   11d92:	f005 fd69 	bl	17868 <__aeabi_f2d>
   11d96:	4602      	mov	r2, r0
   11d98:	460b      	mov	r3, r1
   11d9a:	4610      	mov	r0, r2
   11d9c:	4619      	mov	r1, r3
   11d9e:	a330      	add	r3, pc, #192	; (adr r3, 11e60 <course_pid_run+0x168>)
   11da0:	e9d3 2300 	ldrd	r2, r3, [r3]
   11da4:	f006 f826 	bl	17df4 <__aeabi_dcmplt>
   11da8:	4603      	mov	r3, r0
   11daa:	2b00      	cmp	r3, #0
   11dac:	d1dc      	bne.n	11d68 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
   11dae:	f240 4308 	movw	r3, #1032	; 0x408
   11db2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11db6:	681b      	ldr	r3, [r3, #0]
   11db8:	4618      	mov	r0, r3
   11dba:	6879      	ldr	r1, [r7, #4]
   11dbc:	f006 f9e8 	bl	18190 <__aeabi_fmul>
   11dc0:	4603      	mov	r3, r0
   11dc2:	461a      	mov	r2, r3
   11dc4:	f24b 2358 	movw	r3, #45656	; 0xb258
   11dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dcc:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
   11dce:	f24b 2358 	movw	r3, #45656	; 0xb258
   11dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dd6:	681a      	ldr	r2, [r3, #0]
   11dd8:	f240 430c 	movw	r3, #1036	; 0x40c
   11ddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11de0:	681b      	ldr	r3, [r3, #0]
   11de2:	4610      	mov	r0, r2
   11de4:	4619      	mov	r1, r3
   11de6:	f006 fb8f 	bl	18508 <__aeabi_fcmpgt>
   11dea:	4603      	mov	r3, r0
   11dec:	2b00      	cmp	r3, #0
   11dee:	d00a      	beq.n	11e06 <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
   11df0:	f240 430c 	movw	r3, #1036	; 0x40c
   11df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11df8:	681a      	ldr	r2, [r3, #0]
   11dfa:	f24b 2358 	movw	r3, #45656	; 0xb258
   11dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e02:	601a      	str	r2, [r3, #0]
   11e04:	e01e      	b.n	11e44 <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
   11e06:	f240 430c 	movw	r3, #1036	; 0x40c
   11e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e0e:	681b      	ldr	r3, [r3, #0]
   11e10:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11e14:	f24b 2358 	movw	r3, #45656	; 0xb258
   11e18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e1c:	681b      	ldr	r3, [r3, #0]
   11e1e:	4610      	mov	r0, r2
   11e20:	4619      	mov	r1, r3
   11e22:	f006 fb71 	bl	18508 <__aeabi_fcmpgt>
   11e26:	4603      	mov	r3, r0
   11e28:	2b00      	cmp	r3, #0
   11e2a:	d00b      	beq.n	11e44 <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
   11e2c:	f240 430c 	movw	r3, #1036	; 0x40c
   11e30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e34:	681b      	ldr	r3, [r3, #0]
   11e36:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11e3a:	f24b 2358 	movw	r3, #45656	; 0xb258
   11e3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e42:	601a      	str	r2, [r3, #0]
}
   11e44:	3708      	adds	r7, #8
   11e46:	46bd      	mov	sp, r7
   11e48:	bd80      	pop	{r7, pc}
   11e4a:	bf00      	nop
   11e4c:	f3af 8000 	nop.w
   11e50:	54442d18 	.word	0x54442d18
   11e54:	401921fb 	.word	0x401921fb
   11e58:	54442d18 	.word	0x54442d18
   11e5c:	400921fb 	.word	0x400921fb
   11e60:	54442d18 	.word	0x54442d18
   11e64:	c00921fb 	.word	0xc00921fb

00011e68 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
   11e68:	b5b0      	push	{r4, r5, r7, lr}
   11e6a:	b082      	sub	sp, #8
   11e6c:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
   11e6e:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
   11e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e76:	681a      	ldr	r2, [r3, #0]
   11e78:	f24b 2318 	movw	r3, #45592	; 0xb218
   11e7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e80:	681b      	ldr	r3, [r3, #0]
   11e82:	4610      	mov	r0, r2
   11e84:	4619      	mov	r1, r3
   11e86:	f006 f879 	bl	17f7c <__aeabi_fsub>
   11e8a:	4603      	mov	r3, r0
   11e8c:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
   11e8e:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   11e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e96:	781b      	ldrb	r3, [r3, #0]
   11e98:	2b00      	cmp	r3, #0
   11e9a:	f000 80a8 	beq.w	11fee <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
   11e9e:	f24b 2350 	movw	r3, #45648	; 0xb250
   11ea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ea6:	881b      	ldrh	r3, [r3, #0]
   11ea8:	b29a      	uxth	r2, r3
   11eaa:	f24b 2304 	movw	r3, #45572	; 0xb204
   11eae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11eb2:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
   11eb4:	f240 4314 	movw	r3, #1044	; 0x414
   11eb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ebc:	681a      	ldr	r2, [r3, #0]
   11ebe:	f24b 2324 	movw	r3, #45604	; 0xb224
   11ec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ec6:	681b      	ldr	r3, [r3, #0]
   11ec8:	4610      	mov	r0, r2
   11eca:	4619      	mov	r1, r3
   11ecc:	f006 f960 	bl	18190 <__aeabi_fmul>
   11ed0:	4603      	mov	r3, r0
   11ed2:	4618      	mov	r0, r3
   11ed4:	6879      	ldr	r1, [r7, #4]
   11ed6:	f006 f853 	bl	17f80 <__addsf3>
   11eda:	4603      	mov	r3, r0
   11edc:	461a      	mov	r2, r3
   11ede:	f240 4310 	movw	r3, #1040	; 0x410
   11ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ee6:	681b      	ldr	r3, [r3, #0]
   11ee8:	4610      	mov	r0, r2
   11eea:	4619      	mov	r1, r3
   11eec:	f006 f950 	bl	18190 <__aeabi_fmul>
   11ef0:	4603      	mov	r3, r0
   11ef2:	461a      	mov	r2, r3
   11ef4:	f24b 2300 	movw	r3, #45568	; 0xb200
   11ef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11efc:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
   11efe:	f24b 2300 	movw	r3, #45568	; 0xb200
   11f02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f06:	681a      	ldr	r2, [r3, #0]
   11f08:	f240 4318 	movw	r3, #1048	; 0x418
   11f0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f10:	681b      	ldr	r3, [r3, #0]
   11f12:	4610      	mov	r0, r2
   11f14:	4619      	mov	r1, r3
   11f16:	f006 faf7 	bl	18508 <__aeabi_fcmpgt>
   11f1a:	4603      	mov	r3, r0
   11f1c:	2b00      	cmp	r3, #0
   11f1e:	d009      	beq.n	11f34 <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
   11f20:	f240 4318 	movw	r3, #1048	; 0x418
   11f24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f28:	681a      	ldr	r2, [r3, #0]
   11f2a:	f24b 2300 	movw	r3, #45568	; 0xb200
   11f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f32:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
   11f34:	f24b 2300 	movw	r3, #45568	; 0xb200
   11f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f3c:	681a      	ldr	r2, [r3, #0]
   11f3e:	f240 431c 	movw	r3, #1052	; 0x41c
   11f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f46:	681b      	ldr	r3, [r3, #0]
   11f48:	4610      	mov	r0, r2
   11f4a:	4619      	mov	r1, r3
   11f4c:	f006 fabe 	bl	184cc <__aeabi_fcmplt>
   11f50:	4603      	mov	r3, r0
   11f52:	2b00      	cmp	r3, #0
   11f54:	d009      	beq.n	11f6a <climb_pid_run+0x102>
      desired_pitch = min_pitch;
   11f56:	f240 431c 	movw	r3, #1052	; 0x41c
   11f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f5e:	681a      	ldr	r2, [r3, #0]
   11f60:	f24b 2300 	movw	r3, #45568	; 0xb200
   11f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f68:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
   11f6a:	f24b 2324 	movw	r3, #45604	; 0xb224
   11f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f72:	681b      	ldr	r3, [r3, #0]
   11f74:	4618      	mov	r0, r3
   11f76:	6879      	ldr	r1, [r7, #4]
   11f78:	f006 f802 	bl	17f80 <__addsf3>
   11f7c:	4603      	mov	r3, r0
   11f7e:	461a      	mov	r2, r3
   11f80:	f24b 2324 	movw	r3, #45604	; 0xb224
   11f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f88:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
   11f8a:	f24b 2324 	movw	r3, #45604	; 0xb224
   11f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f92:	681b      	ldr	r3, [r3, #0]
   11f94:	4618      	mov	r0, r3
   11f96:	f04f 0100 	mov.w	r1, #0
   11f9a:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11f9e:	f006 fab3 	bl	18508 <__aeabi_fcmpgt>
   11fa2:	4603      	mov	r3, r0
   11fa4:	2b00      	cmp	r3, #0
   11fa6:	d008      	beq.n	11fba <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
   11fa8:	f24b 2324 	movw	r3, #45604	; 0xb224
   11fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fb0:	f04f 0200 	mov.w	r2, #0
   11fb4:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   11fb8:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
   11fba:	f24b 2324 	movw	r3, #45604	; 0xb224
   11fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fc2:	681b      	ldr	r3, [r3, #0]
   11fc4:	4618      	mov	r0, r3
   11fc6:	f04f 0100 	mov.w	r1, #0
   11fca:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   11fce:	f006 fa7d 	bl	184cc <__aeabi_fcmplt>
   11fd2:	4603      	mov	r3, r0
   11fd4:	2b00      	cmp	r3, #0
   11fd6:	d100      	bne.n	11fda <climb_pid_run+0x172>
   11fd8:	e109      	b.n	121ee <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
   11fda:	f24b 2324 	movw	r3, #45604	; 0xb224
   11fde:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fe2:	f04f 0200 	mov.w	r2, #0
   11fe6:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   11fea:	601a      	str	r2, [r3, #0]
   11fec:	e0ff      	b.n	121ee <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
   11fee:	f24b 2318 	movw	r3, #45592	; 0xb218
   11ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ff6:	681b      	ldr	r3, [r3, #0]
   11ff8:	4618      	mov	r0, r3
   11ffa:	f04f 0100 	mov.w	r1, #0
   11ffe:	f006 fa83 	bl	18508 <__aeabi_fcmpgt>
   12002:	4603      	mov	r3, r0
   12004:	2b00      	cmp	r3, #0
   12006:	d010      	beq.n	1202a <climb_pid_run+0x1c2>
   12008:	f24b 2318 	movw	r3, #45592	; 0xb218
   1200c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12010:	681a      	ldr	r2, [r3, #0]
   12012:	f240 4304 	movw	r3, #1028	; 0x404
   12016:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1201a:	681b      	ldr	r3, [r3, #0]
   1201c:	4610      	mov	r0, r2
   1201e:	4619      	mov	r1, r3
   12020:	f006 f8b6 	bl	18190 <__aeabi_fmul>
   12024:	4603      	mov	r3, r0
   12026:	461a      	mov	r2, r3
   12028:	e001      	b.n	1202e <climb_pid_run+0x1c6>
   1202a:	f04f 0200 	mov.w	r2, #0
   1202e:	f24b 2310 	movw	r3, #45584	; 0xb210
   12032:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12036:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
   12038:	f64c 42cd 	movw	r2, #52429	; 0xcccd
   1203c:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
   12040:	f24b 2320 	movw	r3, #45600	; 0xb220
   12044:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12048:	681b      	ldr	r3, [r3, #0]
   1204a:	4610      	mov	r0, r2
   1204c:	4619      	mov	r1, r3
   1204e:	f006 f89f 	bl	18190 <__aeabi_fmul>
   12052:	4603      	mov	r3, r0
   12054:	4618      	mov	r0, r3
   12056:	6879      	ldr	r1, [r7, #4]
   12058:	f005 ff92 	bl	17f80 <__addsf3>
   1205c:	4603      	mov	r3, r0
   1205e:	461a      	mov	r2, r3
   12060:	f24c 238f 	movw	r3, #49807	; 0xc28f
   12064:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
   12068:	4610      	mov	r0, r2
   1206a:	4619      	mov	r1, r3
   1206c:	f006 f890 	bl	18190 <__aeabi_fmul>
   12070:	4603      	mov	r3, r0
   12072:	4618      	mov	r0, r3
   12074:	f005 fbf8 	bl	17868 <__aeabi_f2d>
   12078:	4602      	mov	r2, r0
   1207a:	460b      	mov	r3, r1
   1207c:	4610      	mov	r0, r2
   1207e:	4619      	mov	r1, r3
   12080:	a35d      	add	r3, pc, #372	; (adr r3, 121f8 <climb_pid_run+0x390>)
   12082:	e9d3 2300 	ldrd	r2, r3, [r3]
   12086:	f005 fa91 	bl	175ac <__adddf3>
   1208a:	4602      	mov	r2, r0
   1208c:	460b      	mov	r3, r1
   1208e:	4614      	mov	r4, r2
   12090:	461d      	mov	r5, r3
   12092:	f24b 2318 	movw	r3, #45592	; 0xb218
   12096:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1209a:	681b      	ldr	r3, [r3, #0]
   1209c:	4618      	mov	r0, r3
   1209e:	f005 fbe3 	bl	17868 <__aeabi_f2d>
   120a2:	4602      	mov	r2, r0
   120a4:	460b      	mov	r3, r1
   120a6:	4610      	mov	r0, r2
   120a8:	4619      	mov	r1, r3
   120aa:	a355      	add	r3, pc, #340	; (adr r3, 12200 <climb_pid_run+0x398>)
   120ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   120b0:	f005 fc2e 	bl	17910 <__aeabi_dmul>
   120b4:	4602      	mov	r2, r0
   120b6:	460b      	mov	r3, r1
   120b8:	4620      	mov	r0, r4
   120ba:	4629      	mov	r1, r5
   120bc:	f005 fa76 	bl	175ac <__adddf3>
   120c0:	4602      	mov	r2, r0
   120c2:	460b      	mov	r3, r1
   120c4:	4610      	mov	r0, r2
   120c6:	4619      	mov	r1, r3
   120c8:	f005 ff04 	bl	17ed4 <__aeabi_d2f>
   120cc:	4603      	mov	r3, r0
   120ce:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
   120d0:	f24b 2320 	movw	r3, #45600	; 0xb220
   120d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120d8:	681b      	ldr	r3, [r3, #0]
   120da:	4618      	mov	r0, r3
   120dc:	6879      	ldr	r1, [r7, #4]
   120de:	f005 ff4f 	bl	17f80 <__addsf3>
   120e2:	4603      	mov	r3, r0
   120e4:	461a      	mov	r2, r3
   120e6:	f24b 2320 	movw	r3, #45600	; 0xb220
   120ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120ee:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
   120f0:	f24b 2320 	movw	r3, #45600	; 0xb220
   120f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120f8:	681b      	ldr	r3, [r3, #0]
   120fa:	4618      	mov	r0, r3
   120fc:	f04f 0100 	mov.w	r1, #0
   12100:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   12104:	f006 fa00 	bl	18508 <__aeabi_fcmpgt>
   12108:	4603      	mov	r3, r0
   1210a:	2b00      	cmp	r3, #0
   1210c:	d008      	beq.n	12120 <climb_pid_run+0x2b8>
   1210e:	f24b 2320 	movw	r3, #45600	; 0xb220
   12112:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12116:	f04f 0200 	mov.w	r2, #0
   1211a:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   1211e:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
   12120:	f24b 2320 	movw	r3, #45600	; 0xb220
   12124:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12128:	681b      	ldr	r3, [r3, #0]
   1212a:	4618      	mov	r0, r3
   1212c:	f04f 0100 	mov.w	r1, #0
   12130:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   12134:	f006 f9ca 	bl	184cc <__aeabi_fcmplt>
   12138:	4603      	mov	r3, r0
   1213a:	2b00      	cmp	r3, #0
   1213c:	d008      	beq.n	12150 <climb_pid_run+0x2e8>
   1213e:	f24b 2320 	movw	r3, #45600	; 0xb220
   12142:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12146:	f04f 0200 	mov.w	r2, #0
   1214a:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   1214e:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
   12150:	6838      	ldr	r0, [r7, #0]
   12152:	f04f 0100 	mov.w	r1, #0
   12156:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1215a:	f006 f819 	bl	18190 <__aeabi_fmul>
   1215e:	4603      	mov	r3, r0
   12160:	4618      	mov	r0, r3
   12162:	f04f 0100 	mov.w	r1, #0
   12166:	f006 f9b1 	bl	184cc <__aeabi_fcmplt>
   1216a:	4603      	mov	r3, r0
   1216c:	2b00      	cmp	r3, #0
   1216e:	d001      	beq.n	12174 <climb_pid_run+0x30c>
   12170:	2200      	movs	r2, #0
   12172:	e022      	b.n	121ba <climb_pid_run+0x352>
   12174:	6838      	ldr	r0, [r7, #0]
   12176:	f04f 0100 	mov.w	r1, #0
   1217a:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1217e:	f006 f807 	bl	18190 <__aeabi_fmul>
   12182:	4603      	mov	r3, r0
   12184:	4618      	mov	r0, r3
   12186:	f04f 0100 	mov.w	r1, #0
   1218a:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1218e:	f006 f9bb 	bl	18508 <__aeabi_fcmpgt>
   12192:	4603      	mov	r3, r0
   12194:	2b00      	cmp	r3, #0
   12196:	d002      	beq.n	1219e <climb_pid_run+0x336>
   12198:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   1219c:	e00c      	b.n	121b8 <climb_pid_run+0x350>
   1219e:	6838      	ldr	r0, [r7, #0]
   121a0:	f04f 0100 	mov.w	r1, #0
   121a4:	f2c4 6116 	movt	r1, #17942	; 0x4616
   121a8:	f005 fff2 	bl	18190 <__aeabi_fmul>
   121ac:	4603      	mov	r3, r0
   121ae:	4618      	mov	r0, r3
   121b0:	f006 f9b4 	bl	1851c <__aeabi_f2iz>
   121b4:	4603      	mov	r3, r0
   121b6:	b29b      	uxth	r3, r3
   121b8:	b29a      	uxth	r2, r3
   121ba:	f24b 2304 	movw	r3, #45572	; 0xb204
   121be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121c2:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
   121c4:	f24b 2354 	movw	r3, #45652	; 0xb254
   121c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121cc:	681a      	ldr	r2, [r3, #0]
   121ce:	f24b 2310 	movw	r3, #45584	; 0xb210
   121d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121d6:	681b      	ldr	r3, [r3, #0]
   121d8:	4610      	mov	r0, r2
   121da:	4619      	mov	r1, r3
   121dc:	f005 fed0 	bl	17f80 <__addsf3>
   121e0:	4603      	mov	r3, r0
   121e2:	461a      	mov	r2, r3
   121e4:	f24b 2300 	movw	r3, #45568	; 0xb200
   121e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121ec:	601a      	str	r2, [r3, #0]
  }
}
   121ee:	3708      	adds	r7, #8
   121f0:	46bd      	mov	sp, r7
   121f2:	bdb0      	pop	{r4, r5, r7, pc}
   121f4:	f3af 8000 	nop.w
   121f8:	3d70a3d7 	.word	0x3d70a3d7
   121fc:	3fd3d70a 	.word	0x3fd3d70a
   12200:	9999999a 	.word	0x9999999a
   12204:	3fc99999 	.word	0x3fc99999

00012208 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
   12208:	b580      	push	{r7, lr}
   1220a:	b082      	sub	sp, #8
   1220c:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
   1220e:	f24b 438c 	movw	r3, #46220	; 0xb48c
   12212:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12216:	681a      	ldr	r2, [r3, #0]
   12218:	f240 4324 	movw	r3, #1060	; 0x424
   1221c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12220:	681b      	ldr	r3, [r3, #0]
   12222:	4610      	mov	r0, r2
   12224:	4619      	mov	r1, r3
   12226:	f005 fea9 	bl	17f7c <__aeabi_fsub>
   1222a:	4603      	mov	r3, r0
   1222c:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
   1222e:	f240 4320 	movw	r3, #1056	; 0x420
   12232:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12236:	681b      	ldr	r3, [r3, #0]
   12238:	4618      	mov	r0, r3
   1223a:	6879      	ldr	r1, [r7, #4]
   1223c:	f005 ffa8 	bl	18190 <__aeabi_fmul>
   12240:	4603      	mov	r3, r0
   12242:	461a      	mov	r2, r3
   12244:	f24b 231c 	movw	r3, #45596	; 0xb21c
   12248:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1224c:	681b      	ldr	r3, [r3, #0]
   1224e:	4610      	mov	r0, r2
   12250:	4619      	mov	r1, r3
   12252:	f005 fe95 	bl	17f80 <__addsf3>
   12256:	4603      	mov	r3, r0
   12258:	461a      	mov	r2, r3
   1225a:	f24b 2318 	movw	r3, #45592	; 0xb218
   1225e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12262:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
   12264:	f24b 2318 	movw	r3, #45592	; 0xb218
   12268:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1226c:	681b      	ldr	r3, [r3, #0]
   1226e:	4618      	mov	r0, r3
   12270:	f04f 0100 	mov.w	r1, #0
   12274:	f6cb 7180 	movt	r1, #49024	; 0xbf80
   12278:	f006 f928 	bl	184cc <__aeabi_fcmplt>
   1227c:	4603      	mov	r3, r0
   1227e:	2b00      	cmp	r3, #0
   12280:	d008      	beq.n	12294 <altitude_pid_run+0x8c>
   12282:	f24b 2318 	movw	r3, #45592	; 0xb218
   12286:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1228a:	f04f 0200 	mov.w	r2, #0
   1228e:	f6cb 7280 	movt	r2, #49024	; 0xbf80
   12292:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
   12294:	f24b 2318 	movw	r3, #45592	; 0xb218
   12298:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1229c:	681b      	ldr	r3, [r3, #0]
   1229e:	4618      	mov	r0, r3
   122a0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   122a4:	f006 f930 	bl	18508 <__aeabi_fcmpgt>
   122a8:	4603      	mov	r3, r0
   122aa:	2b00      	cmp	r3, #0
   122ac:	d006      	beq.n	122bc <altitude_pid_run+0xb4>
   122ae:	f24b 2318 	movw	r3, #45592	; 0xb218
   122b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122b6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   122ba:	601a      	str	r2, [r3, #0]
}
   122bc:	3708      	adds	r7, #8
   122be:	46bd      	mov	sp, r7
   122c0:	bd80      	pop	{r7, pc}
   122c2:	bf00      	nop
   122c4:	f3af 8000 	nop.w

000122c8 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
   122c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   122ca:	b08b      	sub	sp, #44	; 0x2c
   122cc:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
   122ce:	f24b 2329 	movw	r3, #45609	; 0xb229
   122d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122d6:	781b      	ldrb	r3, [r3, #0]
   122d8:	2b00      	cmp	r3, #0
   122da:	f040 8169 	bne.w	125b0 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
   122de:	f24b 2328 	movw	r3, #45608	; 0xb228
   122e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122e6:	781b      	ldrb	r3, [r3, #0]
   122e8:	2b00      	cmp	r3, #0
   122ea:	d13c      	bne.n	12366 <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
   122ec:	f24b 2328 	movw	r3, #45608	; 0xb228
   122f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122f4:	2200      	movs	r2, #0
   122f6:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
   122f8:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
   122fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12300:	881b      	ldrh	r3, [r3, #0]
   12302:	2b00      	cmp	r3, #0
   12304:	d000      	beq.n	12308 <auto_nav+0x40>
   12306:	e03d      	b.n	12384 <auto_nav+0xbc>
	else NextStage(); 
   12308:	f24b 2328 	movw	r3, #45608	; 0xb228
   1230c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12310:	781b      	ldrb	r3, [r3, #0]
   12312:	3301      	adds	r3, #1
   12314:	b2da      	uxtb	r2, r3
   12316:	f24b 2328 	movw	r3, #45608	; 0xb228
   1231a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1231e:	701a      	strb	r2, [r3, #0]
   12320:	f24b 4384 	movw	r3, #46212	; 0xb484
   12324:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12328:	681a      	ldr	r2, [r3, #0]
   1232a:	f24b 232c 	movw	r3, #45612	; 0xb22c
   1232e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12332:	601a      	str	r2, [r3, #0]
   12334:	f24b 4388 	movw	r3, #46216	; 0xb488
   12338:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1233c:	681a      	ldr	r2, [r3, #0]
   1233e:	f24b 2330 	movw	r3, #45616	; 0xb230
   12342:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12346:	601a      	str	r2, [r3, #0]
   12348:	f24b 233c 	movw	r3, #45628	; 0xb23c
   1234c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12350:	2200      	movs	r2, #0
   12352:	801a      	strh	r2, [r3, #0]
   12354:	f24b 2340 	movw	r3, #45632	; 0xb240
   12358:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1235c:	f04f 0200 	mov.w	r2, #0
   12360:	601a      	str	r2, [r3, #0]
   12362:	f002 b883 	b.w	1446c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   12366:	f24b 2328 	movw	r3, #45608	; 0xb228
   1236a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1236e:	781b      	ldrb	r3, [r3, #0]
   12370:	2b01      	cmp	r3, #1
   12372:	d100      	bne.n	12376 <auto_nav+0xae>
    {   Goto(while_1)}
   12374:	e7ba      	b.n	122ec <auto_nav+0x24>
    else if (nav_stage == 2)
   12376:	f24b 2328 	movw	r3, #45608	; 0xb228
   1237a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1237e:	781b      	ldrb	r3, [r3, #0]
   12380:	2b02      	cmp	r3, #2
   12382:	d162      	bne.n	1244a <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
   12384:	f24b 2328 	movw	r3, #45608	; 0xb228
   12388:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1238c:	2202      	movs	r2, #2
   1238e:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
   12390:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
   12394:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12398:	881b      	ldrh	r3, [r3, #0]
   1239a:	2b08      	cmp	r3, #8
   1239c:	d92e      	bls.n	123fc <auto_nav+0x134>
   1239e:	f24b 2328 	movw	r3, #45608	; 0xb228
   123a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123a6:	781b      	ldrb	r3, [r3, #0]
   123a8:	3301      	adds	r3, #1
   123aa:	b2da      	uxtb	r2, r3
   123ac:	f24b 2328 	movw	r3, #45608	; 0xb228
   123b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123b4:	701a      	strb	r2, [r3, #0]
   123b6:	f24b 4384 	movw	r3, #46212	; 0xb484
   123ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123be:	681a      	ldr	r2, [r3, #0]
   123c0:	f24b 232c 	movw	r3, #45612	; 0xb22c
   123c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123c8:	601a      	str	r2, [r3, #0]
   123ca:	f24b 4388 	movw	r3, #46216	; 0xb488
   123ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123d2:	681a      	ldr	r2, [r3, #0]
   123d4:	f24b 2330 	movw	r3, #45616	; 0xb230
   123d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123dc:	601a      	str	r2, [r3, #0]
   123de:	f24b 233c 	movw	r3, #45628	; 0xb23c
   123e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123e6:	2200      	movs	r2, #0
   123e8:	801a      	strh	r2, [r3, #0]
   123ea:	f24b 2340 	movw	r3, #45632	; 0xb240
   123ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123f2:	f04f 0200 	mov.w	r2, #0
   123f6:	601a      	str	r2, [r3, #0]
   123f8:	f002 b838 	b.w	1446c <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   123fc:	f24b 2314 	movw	r3, #45588	; 0xb214
   12400:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12404:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   12408:	f2c4 0296 	movt	r2, #16534	; 0x4096
   1240c:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   1240e:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   12412:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12416:	2200      	movs	r2, #0
   12418:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
   1241a:	f24b 2354 	movw	r3, #45652	; 0xb254
   1241e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12422:	f649 129a 	movw	r2, #39322	; 0x999a
   12426:	f6c3 6219 	movt	r2, #15897	; 0x3e19
   1242a:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
   1242c:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   12430:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12434:	2201      	movs	r2, #1
   12436:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
   12438:	f24b 2350 	movw	r3, #45648	; 0xb250
   1243c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12440:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
   12444:	801a      	strh	r2, [r3, #0]
        }
        return;
   12446:	f002 b811 	b.w	1446c <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
   1244a:	f24b 2328 	movw	r3, #45608	; 0xb228
   1244e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12452:	781b      	ldrb	r3, [r3, #0]
   12454:	2b03      	cmp	r3, #3
   12456:	d168      	bne.n	1252a <auto_nav+0x262>
     {
	nav_stage = 3;	
   12458:	f24b 2328 	movw	r3, #45608	; 0xb228
   1245c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12460:	2203      	movs	r2, #3
   12462:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
   12464:	f24b 438c 	movw	r3, #46220	; 0xb48c
   12468:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1246c:	681b      	ldr	r3, [r3, #0]
   1246e:	4618      	mov	r0, r3
   12470:	f04f 0100 	mov.w	r1, #0
   12474:	f2c4 3116 	movt	r1, #17174	; 0x4316
   12478:	f006 f846 	bl	18508 <__aeabi_fcmpgt>
   1247c:	4603      	mov	r3, r0
   1247e:	2b00      	cmp	r3, #0
   12480:	d02e      	beq.n	124e0 <auto_nav+0x218>
   12482:	f24b 2328 	movw	r3, #45608	; 0xb228
   12486:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1248a:	781b      	ldrb	r3, [r3, #0]
   1248c:	3301      	adds	r3, #1
   1248e:	b2da      	uxtb	r2, r3
   12490:	f24b 2328 	movw	r3, #45608	; 0xb228
   12494:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12498:	701a      	strb	r2, [r3, #0]
   1249a:	f24b 4384 	movw	r3, #46212	; 0xb484
   1249e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124a2:	681a      	ldr	r2, [r3, #0]
   124a4:	f24b 232c 	movw	r3, #45612	; 0xb22c
   124a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124ac:	601a      	str	r2, [r3, #0]
   124ae:	f24b 4388 	movw	r3, #46216	; 0xb488
   124b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124b6:	681a      	ldr	r2, [r3, #0]
   124b8:	f24b 2330 	movw	r3, #45616	; 0xb230
   124bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124c0:	601a      	str	r2, [r3, #0]
   124c2:	f24b 233c 	movw	r3, #45628	; 0xb23c
   124c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124ca:	2200      	movs	r2, #0
   124cc:	801a      	strh	r2, [r3, #0]
   124ce:	f24b 2340 	movw	r3, #45632	; 0xb240
   124d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124d6:	f04f 0200 	mov.w	r2, #0
   124da:	601a      	str	r2, [r3, #0]
   124dc:	f001 bfc6 	b.w	1446c <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   124e0:	f24b 2314 	movw	r3, #45588	; 0xb214
   124e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124e8:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   124ec:	f2c4 0296 	movt	r2, #16534	; 0x4096
   124f0:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   124f2:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   124f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124fa:	2200      	movs	r2, #0
   124fc:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   124fe:	f24b 2354 	movw	r3, #45652	; 0xb254
   12502:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12506:	f04f 0200 	mov.w	r2, #0
   1250a:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
   1250c:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   12510:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12514:	2202      	movs	r2, #2
   12516:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
   12518:	f24b 2318 	movw	r3, #45592	; 0xb218
   1251c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12520:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12524:	601a      	str	r2, [r3, #0]
        }
        return;
   12526:	f001 bfa1 	b.w	1446c <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
   1252a:	f24b 2328 	movw	r3, #45608	; 0xb228
   1252e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12532:	781b      	ldrb	r3, [r3, #0]
   12534:	2b04      	cmp	r3, #4
   12536:	f041 8799 	bne.w	1446c <auto_nav+0x21a4>
        NextBlock()
   1253a:	f24b 2329 	movw	r3, #45609	; 0xb229
   1253e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12542:	781b      	ldrb	r3, [r3, #0]
   12544:	3301      	adds	r3, #1
   12546:	b2da      	uxtb	r2, r3
   12548:	f24b 2329 	movw	r3, #45609	; 0xb229
   1254c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12550:	701a      	strb	r2, [r3, #0]
   12552:	f24b 2328 	movw	r3, #45608	; 0xb228
   12556:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1255a:	2200      	movs	r2, #0
   1255c:	701a      	strb	r2, [r3, #0]
   1255e:	f24b 233e 	movw	r3, #45630	; 0xb23e
   12562:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12566:	2200      	movs	r2, #0
   12568:	801a      	strh	r2, [r3, #0]
   1256a:	f24b 4384 	movw	r3, #46212	; 0xb484
   1256e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12572:	681a      	ldr	r2, [r3, #0]
   12574:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12578:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1257c:	601a      	str	r2, [r3, #0]
   1257e:	f24b 4388 	movw	r3, #46216	; 0xb488
   12582:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12586:	681a      	ldr	r2, [r3, #0]
   12588:	f24b 2330 	movw	r3, #45616	; 0xb230
   1258c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12590:	601a      	str	r2, [r3, #0]
   12592:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12596:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1259a:	2200      	movs	r2, #0
   1259c:	801a      	strh	r2, [r3, #0]
   1259e:	f24b 2340 	movw	r3, #45632	; 0xb240
   125a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125a6:	f04f 0200 	mov.w	r2, #0
   125aa:	601a      	str	r2, [r3, #0]
   125ac:	f001 bf5e 	b.w	1446c <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
   125b0:	f24b 2329 	movw	r3, #45609	; 0xb229
   125b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125b8:	781b      	ldrb	r3, [r3, #0]
   125ba:	2b01      	cmp	r3, #1
   125bc:	f040 81bc 	bne.w	12938 <auto_nav+0x670>
{
    nav_block = 1;
   125c0:	f24b 2329 	movw	r3, #45609	; 0xb229
   125c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125c8:	2201      	movs	r2, #1
   125ca:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
   125cc:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   125d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125d4:	781b      	ldrb	r3, [r3, #0]
   125d6:	2b00      	cmp	r3, #0
   125d8:	d007      	beq.n	125ea <auto_nav+0x322>
   125da:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   125de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125e2:	2200      	movs	r2, #0
   125e4:	701a      	strb	r2, [r3, #0]
   125e6:	2301      	movs	r3, #1
   125e8:	e000      	b.n	125ec <auto_nav+0x324>
   125ea:	2300      	movs	r3, #0
   125ec:	2b00      	cmp	r3, #0
   125ee:	d034      	beq.n	1265a <auto_nav+0x392>
	{ GotoBlock(2) }
   125f0:	f24b 2329 	movw	r3, #45609	; 0xb229
   125f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125f8:	2202      	movs	r2, #2
   125fa:	701a      	strb	r2, [r3, #0]
   125fc:	f24b 2328 	movw	r3, #45608	; 0xb228
   12600:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12604:	2200      	movs	r2, #0
   12606:	701a      	strb	r2, [r3, #0]
   12608:	f24b 233e 	movw	r3, #45630	; 0xb23e
   1260c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12610:	2200      	movs	r2, #0
   12612:	801a      	strh	r2, [r3, #0]
   12614:	f24b 4384 	movw	r3, #46212	; 0xb484
   12618:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1261c:	681a      	ldr	r2, [r3, #0]
   1261e:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12622:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12626:	601a      	str	r2, [r3, #0]
   12628:	f24b 4388 	movw	r3, #46216	; 0xb488
   1262c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12630:	681a      	ldr	r2, [r3, #0]
   12632:	f24b 2330 	movw	r3, #45616	; 0xb230
   12636:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1263a:	601a      	str	r2, [r3, #0]
   1263c:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12640:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12644:	2200      	movs	r2, #0
   12646:	801a      	strh	r2, [r3, #0]
   12648:	f24b 2340 	movw	r3, #45632	; 0xb240
   1264c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12650:	f04f 0200 	mov.w	r2, #0
   12654:	601a      	str	r2, [r3, #0]
   12656:	f001 bf09 	b.w	1446c <auto_nav+0x21a4>
    if(nav_stage == 0)
   1265a:	f24b 2328 	movw	r3, #45608	; 0xb228
   1265e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12662:	781b      	ldrb	r3, [r3, #0]
   12664:	2b00      	cmp	r3, #0
   12666:	d12e      	bne.n	126c6 <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
   12668:	f24b 2328 	movw	r3, #45608	; 0xb228
   1266c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12670:	781b      	ldrb	r3, [r3, #0]
   12672:	3301      	adds	r3, #1
   12674:	b2da      	uxtb	r2, r3
   12676:	f24b 2328 	movw	r3, #45608	; 0xb228
   1267a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1267e:	701a      	strb	r2, [r3, #0]
   12680:	f24b 4384 	movw	r3, #46212	; 0xb484
   12684:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12688:	681a      	ldr	r2, [r3, #0]
   1268a:	f24b 232c 	movw	r3, #45612	; 0xb22c
   1268e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12692:	601a      	str	r2, [r3, #0]
   12694:	f24b 4388 	movw	r3, #46216	; 0xb488
   12698:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1269c:	681a      	ldr	r2, [r3, #0]
   1269e:	f24b 2330 	movw	r3, #45616	; 0xb230
   126a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126a6:	601a      	str	r2, [r3, #0]
   126a8:	f24b 233c 	movw	r3, #45628	; 0xb23c
   126ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126b0:	2200      	movs	r2, #0
   126b2:	801a      	strh	r2, [r3, #0]
   126b4:	f24b 2340 	movw	r3, #45632	; 0xb240
   126b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126bc:	f04f 0200 	mov.w	r2, #0
   126c0:	601a      	str	r2, [r3, #0]
   126c2:	f001 bed3 	b.w	1446c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   126c6:	f24b 2328 	movw	r3, #45608	; 0xb228
   126ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126ce:	781b      	ldrb	r3, [r3, #0]
   126d0:	2b01      	cmp	r3, #1
   126d2:	d169      	bne.n	127a8 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
   126d4:	f24b 2328 	movw	r3, #45608	; 0xb228
   126d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126dc:	2201      	movs	r2, #1
   126de:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
   126e0:	2001      	movs	r0, #1
   126e2:	f001 fed1 	bl	14488 <approaching>
   126e6:	4603      	mov	r3, r0
   126e8:	2b00      	cmp	r3, #0
   126ea:	d034      	beq.n	12756 <auto_nav+0x48e>
   126ec:	f24b 2334 	movw	r3, #45620	; 0xb234
   126f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126f4:	2201      	movs	r2, #1
   126f6:	701a      	strb	r2, [r3, #0]
   126f8:	f24b 2328 	movw	r3, #45608	; 0xb228
   126fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12700:	781b      	ldrb	r3, [r3, #0]
   12702:	3301      	adds	r3, #1
   12704:	b2da      	uxtb	r2, r3
   12706:	f24b 2328 	movw	r3, #45608	; 0xb228
   1270a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1270e:	701a      	strb	r2, [r3, #0]
   12710:	f24b 4384 	movw	r3, #46212	; 0xb484
   12714:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12718:	681a      	ldr	r2, [r3, #0]
   1271a:	f24b 232c 	movw	r3, #45612	; 0xb22c
   1271e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12722:	601a      	str	r2, [r3, #0]
   12724:	f24b 4388 	movw	r3, #46216	; 0xb488
   12728:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1272c:	681a      	ldr	r2, [r3, #0]
   1272e:	f24b 2330 	movw	r3, #45616	; 0xb230
   12732:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12736:	601a      	str	r2, [r3, #0]
   12738:	f24b 233c 	movw	r3, #45628	; 0xb23c
   1273c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12740:	2200      	movs	r2, #0
   12742:	801a      	strh	r2, [r3, #0]
   12744:	f24b 2340 	movw	r3, #45632	; 0xb240
   12748:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1274c:	f04f 0200 	mov.w	r2, #0
   12750:	601a      	str	r2, [r3, #0]
   12752:	f001 be8b 	b.w	1446c <auto_nav+0x21a4>
            fly_to(1);
   12756:	2001      	movs	r0, #1
   12758:	f001 ffca 	bl	146f0 <fly_to>
            auto_pitch = FALSE;
   1275c:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   12760:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12764:	2200      	movs	r2, #0
   12766:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12768:	f24b 2354 	movw	r3, #45652	; 0xb254
   1276c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12770:	f04f 0200 	mov.w	r2, #0
   12774:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12776:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   1277a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1277e:	2203      	movs	r2, #3
   12780:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12782:	f240 4328 	movw	r3, #1064	; 0x428
   12786:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1278a:	695a      	ldr	r2, [r3, #20]
   1278c:	f240 4324 	movw	r3, #1060	; 0x424
   12790:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12794:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12796:	f24b 231c 	movw	r3, #45596	; 0xb21c
   1279a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1279e:	f04f 0200 	mov.w	r2, #0
   127a2:	601a      	str	r2, [r3, #0]
          }
          return;
   127a4:	f001 be62 	b.w	1446c <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   127a8:	f24b 2328 	movw	r3, #45608	; 0xb228
   127ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127b0:	781b      	ldrb	r3, [r3, #0]
   127b2:	2b02      	cmp	r3, #2
   127b4:	d169      	bne.n	1288a <auto_nav+0x5c2>
     {
	  nav_stage = 2;
   127b6:	f24b 2328 	movw	r3, #45608	; 0xb228
   127ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127be:	2202      	movs	r2, #2
   127c0:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   127c2:	2004      	movs	r0, #4
   127c4:	f001 fe60 	bl	14488 <approaching>
   127c8:	4603      	mov	r3, r0
   127ca:	2b00      	cmp	r3, #0
   127cc:	d034      	beq.n	12838 <auto_nav+0x570>
   127ce:	f24b 2334 	movw	r3, #45620	; 0xb234
   127d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127d6:	2204      	movs	r2, #4
   127d8:	701a      	strb	r2, [r3, #0]
   127da:	f24b 2328 	movw	r3, #45608	; 0xb228
   127de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127e2:	781b      	ldrb	r3, [r3, #0]
   127e4:	3301      	adds	r3, #1
   127e6:	b2da      	uxtb	r2, r3
   127e8:	f24b 2328 	movw	r3, #45608	; 0xb228
   127ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127f0:	701a      	strb	r2, [r3, #0]
   127f2:	f24b 4384 	movw	r3, #46212	; 0xb484
   127f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127fa:	681a      	ldr	r2, [r3, #0]
   127fc:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12800:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12804:	601a      	str	r2, [r3, #0]
   12806:	f24b 4388 	movw	r3, #46216	; 0xb488
   1280a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1280e:	681a      	ldr	r2, [r3, #0]
   12810:	f24b 2330 	movw	r3, #45616	; 0xb230
   12814:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12818:	601a      	str	r2, [r3, #0]
   1281a:	f24b 233c 	movw	r3, #45628	; 0xb23c
   1281e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12822:	2200      	movs	r2, #0
   12824:	801a      	strh	r2, [r3, #0]
   12826:	f24b 2340 	movw	r3, #45632	; 0xb240
   1282a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1282e:	f04f 0200 	mov.w	r2, #0
   12832:	601a      	str	r2, [r3, #0]
   12834:	f001 be1a 	b.w	1446c <auto_nav+0x21a4>
            fly_to(4);
   12838:	2004      	movs	r0, #4
   1283a:	f001 ff59 	bl	146f0 <fly_to>
            auto_pitch = FALSE;
   1283e:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   12842:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12846:	2200      	movs	r2, #0
   12848:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   1284a:	f24b 2354 	movw	r3, #45652	; 0xb254
   1284e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12852:	f04f 0200 	mov.w	r2, #0
   12856:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12858:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   1285c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12860:	2203      	movs	r2, #3
   12862:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   12864:	f240 4328 	movw	r3, #1064	; 0x428
   12868:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1286c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1286e:	f240 4324 	movw	r3, #1060	; 0x424
   12872:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12876:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12878:	f24b 231c 	movw	r3, #45596	; 0xb21c
   1287c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12880:	f04f 0200 	mov.w	r2, #0
   12884:	601a      	str	r2, [r3, #0]
          }
          return;
   12886:	f001 bdf1 	b.w	1446c <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   1288a:	f24b 2328 	movw	r3, #45608	; 0xb228
   1288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12892:	781b      	ldrb	r3, [r3, #0]
   12894:	2b03      	cmp	r3, #3
   12896:	d106      	bne.n	128a6 <auto_nav+0x5de>
      {
	  nav_stage = 3;
   12898:	f24b 2328 	movw	r3, #45608	; 0xb228
   1289c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128a0:	2203      	movs	r2, #3
   128a2:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
   128a4:	e6e0      	b.n	12668 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
   128a6:	f24b 2328 	movw	r3, #45608	; 0xb228
   128aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128ae:	781b      	ldrb	r3, [r3, #0]
   128b0:	2b04      	cmp	r3, #4
   128b2:	f041 85db 	bne.w	1446c <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
   128b6:	f24b 2328 	movw	r3, #45608	; 0xb228
   128ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128be:	2204      	movs	r2, #4
   128c0:	701a      	strb	r2, [r3, #0]
        NextBlock()
   128c2:	f24b 2329 	movw	r3, #45609	; 0xb229
   128c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128ca:	781b      	ldrb	r3, [r3, #0]
   128cc:	3301      	adds	r3, #1
   128ce:	b2da      	uxtb	r2, r3
   128d0:	f24b 2329 	movw	r3, #45609	; 0xb229
   128d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128d8:	701a      	strb	r2, [r3, #0]
   128da:	f24b 2328 	movw	r3, #45608	; 0xb228
   128de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128e2:	2200      	movs	r2, #0
   128e4:	701a      	strb	r2, [r3, #0]
   128e6:	f24b 233e 	movw	r3, #45630	; 0xb23e
   128ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128ee:	2200      	movs	r2, #0
   128f0:	801a      	strh	r2, [r3, #0]
   128f2:	f24b 4384 	movw	r3, #46212	; 0xb484
   128f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128fa:	681a      	ldr	r2, [r3, #0]
   128fc:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12900:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12904:	601a      	str	r2, [r3, #0]
   12906:	f24b 4388 	movw	r3, #46216	; 0xb488
   1290a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1290e:	681a      	ldr	r2, [r3, #0]
   12910:	f24b 2330 	movw	r3, #45616	; 0xb230
   12914:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12918:	601a      	str	r2, [r3, #0]
   1291a:	f24b 233c 	movw	r3, #45628	; 0xb23c
   1291e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12922:	2200      	movs	r2, #0
   12924:	801a      	strh	r2, [r3, #0]
   12926:	f24b 2340 	movw	r3, #45632	; 0xb240
   1292a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1292e:	f04f 0200 	mov.w	r2, #0
   12932:	601a      	str	r2, [r3, #0]
   12934:	f001 bd9a 	b.w	1446c <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
   12938:	f24b 2329 	movw	r3, #45609	; 0xb229
   1293c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12940:	781b      	ldrb	r3, [r3, #0]
   12942:	2b02      	cmp	r3, #2
   12944:	f040 8392 	bne.w	1306c <auto_nav+0xda4>
{
	nav_block = 2;
   12948:	f24b 2329 	movw	r3, #45609	; 0xb229
   1294c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12950:	2202      	movs	r2, #2
   12952:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
   12954:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   12958:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1295c:	781b      	ldrb	r3, [r3, #0]
   1295e:	2b00      	cmp	r3, #0
   12960:	d007      	beq.n	12972 <auto_nav+0x6aa>
   12962:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   12966:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1296a:	2200      	movs	r2, #0
   1296c:	701a      	strb	r2, [r3, #0]
   1296e:	2301      	movs	r3, #1
   12970:	e000      	b.n	12974 <auto_nav+0x6ac>
   12972:	2300      	movs	r3, #0
   12974:	2b00      	cmp	r3, #0
   12976:	d034      	beq.n	129e2 <auto_nav+0x71a>
   12978:	f24b 2329 	movw	r3, #45609	; 0xb229
   1297c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12980:	2203      	movs	r2, #3
   12982:	701a      	strb	r2, [r3, #0]
   12984:	f24b 2328 	movw	r3, #45608	; 0xb228
   12988:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1298c:	2200      	movs	r2, #0
   1298e:	701a      	strb	r2, [r3, #0]
   12990:	f24b 233e 	movw	r3, #45630	; 0xb23e
   12994:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12998:	2200      	movs	r2, #0
   1299a:	801a      	strh	r2, [r3, #0]
   1299c:	f24b 4384 	movw	r3, #46212	; 0xb484
   129a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129a4:	681a      	ldr	r2, [r3, #0]
   129a6:	f24b 232c 	movw	r3, #45612	; 0xb22c
   129aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129ae:	601a      	str	r2, [r3, #0]
   129b0:	f24b 4388 	movw	r3, #46216	; 0xb488
   129b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129b8:	681a      	ldr	r2, [r3, #0]
   129ba:	f24b 2330 	movw	r3, #45616	; 0xb230
   129be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129c2:	601a      	str	r2, [r3, #0]
   129c4:	f24b 233c 	movw	r3, #45628	; 0xb23c
   129c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129cc:	2200      	movs	r2, #0
   129ce:	801a      	strh	r2, [r3, #0]
   129d0:	f24b 2340 	movw	r3, #45632	; 0xb240
   129d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129d8:	f04f 0200 	mov.w	r2, #0
   129dc:	601a      	str	r2, [r3, #0]
   129de:	f001 bd45 	b.w	1446c <auto_nav+0x21a4>
    
    if(nav_stage == 0)
   129e2:	f24b 2328 	movw	r3, #45608	; 0xb228
   129e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129ea:	781b      	ldrb	r3, [r3, #0]
   129ec:	2b00      	cmp	r3, #0
   129ee:	d134      	bne.n	12a5a <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
   129f0:	f24b 2328 	movw	r3, #45608	; 0xb228
   129f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129f8:	2200      	movs	r2, #0
   129fa:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
   129fc:	f24b 2328 	movw	r3, #45608	; 0xb228
   12a00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a04:	781b      	ldrb	r3, [r3, #0]
   12a06:	3301      	adds	r3, #1
   12a08:	b2da      	uxtb	r2, r3
   12a0a:	f24b 2328 	movw	r3, #45608	; 0xb228
   12a0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a12:	701a      	strb	r2, [r3, #0]
   12a14:	f24b 4384 	movw	r3, #46212	; 0xb484
   12a18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a1c:	681a      	ldr	r2, [r3, #0]
   12a1e:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a26:	601a      	str	r2, [r3, #0]
   12a28:	f24b 4388 	movw	r3, #46216	; 0xb488
   12a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a30:	681a      	ldr	r2, [r3, #0]
   12a32:	f24b 2330 	movw	r3, #45616	; 0xb230
   12a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a3a:	601a      	str	r2, [r3, #0]
   12a3c:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a44:	2200      	movs	r2, #0
   12a46:	801a      	strh	r2, [r3, #0]
   12a48:	f24b 2340 	movw	r3, #45632	; 0xb240
   12a4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a50:	f04f 0200 	mov.w	r2, #0
   12a54:	601a      	str	r2, [r3, #0]
   12a56:	f001 bd09 	b.w	1446c <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
   12a5a:	f24b 2328 	movw	r3, #45608	; 0xb228
   12a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a62:	781b      	ldrb	r3, [r3, #0]
   12a64:	2b01      	cmp	r3, #1
   12a66:	d169      	bne.n	12b3c <auto_nav+0x874>
    {
         nav_stage =1;
   12a68:	f24b 2328 	movw	r3, #45608	; 0xb228
   12a6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a70:	2201      	movs	r2, #1
   12a72:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
   12a74:	2006      	movs	r0, #6
   12a76:	f001 fd07 	bl	14488 <approaching>
   12a7a:	4603      	mov	r3, r0
   12a7c:	2b00      	cmp	r3, #0
   12a7e:	d034      	beq.n	12aea <auto_nav+0x822>
   12a80:	f24b 2334 	movw	r3, #45620	; 0xb234
   12a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a88:	2206      	movs	r2, #6
   12a8a:	701a      	strb	r2, [r3, #0]
   12a8c:	f24b 2328 	movw	r3, #45608	; 0xb228
   12a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a94:	781b      	ldrb	r3, [r3, #0]
   12a96:	3301      	adds	r3, #1
   12a98:	b2da      	uxtb	r2, r3
   12a9a:	f24b 2328 	movw	r3, #45608	; 0xb228
   12a9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12aa2:	701a      	strb	r2, [r3, #0]
   12aa4:	f24b 4384 	movw	r3, #46212	; 0xb484
   12aa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12aac:	681a      	ldr	r2, [r3, #0]
   12aae:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ab6:	601a      	str	r2, [r3, #0]
   12ab8:	f24b 4388 	movw	r3, #46216	; 0xb488
   12abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ac0:	681a      	ldr	r2, [r3, #0]
   12ac2:	f24b 2330 	movw	r3, #45616	; 0xb230
   12ac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12aca:	601a      	str	r2, [r3, #0]
   12acc:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ad4:	2200      	movs	r2, #0
   12ad6:	801a      	strh	r2, [r3, #0]
   12ad8:	f24b 2340 	movw	r3, #45632	; 0xb240
   12adc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ae0:	f04f 0200 	mov.w	r2, #0
   12ae4:	601a      	str	r2, [r3, #0]
   12ae6:	f001 bcc1 	b.w	1446c <auto_nav+0x21a4>
            fly_to(6);
   12aea:	2006      	movs	r0, #6
   12aec:	f001 fe00 	bl	146f0 <fly_to>
            auto_pitch = FALSE;
   12af0:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   12af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12af8:	2200      	movs	r2, #0
   12afa:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12afc:	f24b 2354 	movw	r3, #45652	; 0xb254
   12b00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b04:	f04f 0200 	mov.w	r2, #0
   12b08:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12b0a:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   12b0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b12:	2203      	movs	r2, #3
   12b14:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
   12b16:	f240 4328 	movw	r3, #1064	; 0x428
   12b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   12b20:	f240 4324 	movw	r3, #1060	; 0x424
   12b24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b28:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12b2a:	f24b 231c 	movw	r3, #45596	; 0xb21c
   12b2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b32:	f04f 0200 	mov.w	r2, #0
   12b36:	601a      	str	r2, [r3, #0]
          }
          return;
   12b38:	f001 bc98 	b.w	1446c <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12b3c:	f24b 2328 	movw	r3, #45608	; 0xb228
   12b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b44:	781b      	ldrb	r3, [r3, #0]
   12b46:	2b02      	cmp	r3, #2
   12b48:	d169      	bne.n	12c1e <auto_nav+0x956>
     {
         nav_stage =2; 
   12b4a:	f24b 2328 	movw	r3, #45608	; 0xb228
   12b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b52:	2202      	movs	r2, #2
   12b54:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
   12b56:	2001      	movs	r0, #1
   12b58:	f001 fc96 	bl	14488 <approaching>
   12b5c:	4603      	mov	r3, r0
   12b5e:	2b00      	cmp	r3, #0
   12b60:	d034      	beq.n	12bcc <auto_nav+0x904>
   12b62:	f24b 2334 	movw	r3, #45620	; 0xb234
   12b66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b6a:	2201      	movs	r2, #1
   12b6c:	701a      	strb	r2, [r3, #0]
   12b6e:	f24b 2328 	movw	r3, #45608	; 0xb228
   12b72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b76:	781b      	ldrb	r3, [r3, #0]
   12b78:	3301      	adds	r3, #1
   12b7a:	b2da      	uxtb	r2, r3
   12b7c:	f24b 2328 	movw	r3, #45608	; 0xb228
   12b80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b84:	701a      	strb	r2, [r3, #0]
   12b86:	f24b 4384 	movw	r3, #46212	; 0xb484
   12b8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b8e:	681a      	ldr	r2, [r3, #0]
   12b90:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b98:	601a      	str	r2, [r3, #0]
   12b9a:	f24b 4388 	movw	r3, #46216	; 0xb488
   12b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ba2:	681a      	ldr	r2, [r3, #0]
   12ba4:	f24b 2330 	movw	r3, #45616	; 0xb230
   12ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bac:	601a      	str	r2, [r3, #0]
   12bae:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12bb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bb6:	2200      	movs	r2, #0
   12bb8:	801a      	strh	r2, [r3, #0]
   12bba:	f24b 2340 	movw	r3, #45632	; 0xb240
   12bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bc2:	f04f 0200 	mov.w	r2, #0
   12bc6:	601a      	str	r2, [r3, #0]
   12bc8:	f001 bc50 	b.w	1446c <auto_nav+0x21a4>
            fly_to(1);
   12bcc:	2001      	movs	r0, #1
   12bce:	f001 fd8f 	bl	146f0 <fly_to>
            auto_pitch = FALSE;
   12bd2:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   12bd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bda:	2200      	movs	r2, #0
   12bdc:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12bde:	f24b 2354 	movw	r3, #45652	; 0xb254
   12be2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12be6:	f04f 0200 	mov.w	r2, #0
   12bea:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12bec:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   12bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bf4:	2203      	movs	r2, #3
   12bf6:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12bf8:	f240 4328 	movw	r3, #1064	; 0x428
   12bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c00:	695a      	ldr	r2, [r3, #20]
   12c02:	f240 4324 	movw	r3, #1060	; 0x424
   12c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c0a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12c0c:	f24b 231c 	movw	r3, #45596	; 0xb21c
   12c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c14:	f04f 0200 	mov.w	r2, #0
   12c18:	601a      	str	r2, [r3, #0]
          }
          return;
   12c1a:	f001 bc27 	b.w	1446c <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12c1e:	f24b 2328 	movw	r3, #45608	; 0xb228
   12c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c26:	781b      	ldrb	r3, [r3, #0]
   12c28:	2b03      	cmp	r3, #3
   12c2a:	d16f      	bne.n	12d0c <auto_nav+0xa44>
      {
	   nav_stage = 3;         
   12c2c:	f24b 2328 	movw	r3, #45608	; 0xb228
   12c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c34:	2203      	movs	r2, #3
   12c36:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
   12c38:	2002      	movs	r0, #2
   12c3a:	f001 fc25 	bl	14488 <approaching>
   12c3e:	4603      	mov	r3, r0
   12c40:	2b00      	cmp	r3, #0
   12c42:	d034      	beq.n	12cae <auto_nav+0x9e6>
   12c44:	f24b 2334 	movw	r3, #45620	; 0xb234
   12c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c4c:	2202      	movs	r2, #2
   12c4e:	701a      	strb	r2, [r3, #0]
   12c50:	f24b 2328 	movw	r3, #45608	; 0xb228
   12c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c58:	781b      	ldrb	r3, [r3, #0]
   12c5a:	3301      	adds	r3, #1
   12c5c:	b2da      	uxtb	r2, r3
   12c5e:	f24b 2328 	movw	r3, #45608	; 0xb228
   12c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c66:	701a      	strb	r2, [r3, #0]
   12c68:	f24b 4384 	movw	r3, #46212	; 0xb484
   12c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c70:	681a      	ldr	r2, [r3, #0]
   12c72:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c7a:	601a      	str	r2, [r3, #0]
   12c7c:	f24b 4388 	movw	r3, #46216	; 0xb488
   12c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c84:	681a      	ldr	r2, [r3, #0]
   12c86:	f24b 2330 	movw	r3, #45616	; 0xb230
   12c8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c8e:	601a      	str	r2, [r3, #0]
   12c90:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12c94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c98:	2200      	movs	r2, #0
   12c9a:	801a      	strh	r2, [r3, #0]
   12c9c:	f24b 2340 	movw	r3, #45632	; 0xb240
   12ca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ca4:	f04f 0200 	mov.w	r2, #0
   12ca8:	601a      	str	r2, [r3, #0]
   12caa:	f001 bbdf 	b.w	1446c <auto_nav+0x21a4>
            route_to(last_wp, 2);
   12cae:	f24b 2334 	movw	r3, #45620	; 0xb234
   12cb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cb6:	781b      	ldrb	r3, [r3, #0]
   12cb8:	4618      	mov	r0, r3
   12cba:	2102      	movs	r1, #2
   12cbc:	f001 fd3a 	bl	14734 <route_to>
            auto_pitch = FALSE;
   12cc0:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   12cc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cc8:	2200      	movs	r2, #0
   12cca:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12ccc:	f24b 2354 	movw	r3, #45652	; 0xb254
   12cd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cd4:	f04f 0200 	mov.w	r2, #0
   12cd8:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12cda:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   12cde:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ce2:	2203      	movs	r2, #3
   12ce4:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
   12ce6:	f240 4328 	movw	r3, #1064	; 0x428
   12cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cee:	6a1a      	ldr	r2, [r3, #32]
   12cf0:	f240 4324 	movw	r3, #1060	; 0x424
   12cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cf8:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12cfa:	f24b 231c 	movw	r3, #45596	; 0xb21c
   12cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d02:	f04f 0200 	mov.w	r2, #0
   12d06:	601a      	str	r2, [r3, #0]
          }
          return;
   12d08:	f001 bbb0 	b.w	1446c <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
   12d0c:	f24b 2328 	movw	r3, #45608	; 0xb228
   12d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d14:	781b      	ldrb	r3, [r3, #0]
   12d16:	2b04      	cmp	r3, #4
   12d18:	d169      	bne.n	12dee <auto_nav+0xb26>
       {
          nav_stage = 4;
   12d1a:	f24b 2328 	movw	r3, #45608	; 0xb228
   12d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d22:	2204      	movs	r2, #4
   12d24:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
   12d26:	2003      	movs	r0, #3
   12d28:	f001 fbae 	bl	14488 <approaching>
   12d2c:	4603      	mov	r3, r0
   12d2e:	2b00      	cmp	r3, #0
   12d30:	d034      	beq.n	12d9c <auto_nav+0xad4>
   12d32:	f24b 2334 	movw	r3, #45620	; 0xb234
   12d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d3a:	2203      	movs	r2, #3
   12d3c:	701a      	strb	r2, [r3, #0]
   12d3e:	f24b 2328 	movw	r3, #45608	; 0xb228
   12d42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d46:	781b      	ldrb	r3, [r3, #0]
   12d48:	3301      	adds	r3, #1
   12d4a:	b2da      	uxtb	r2, r3
   12d4c:	f24b 2328 	movw	r3, #45608	; 0xb228
   12d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d54:	701a      	strb	r2, [r3, #0]
   12d56:	f24b 4384 	movw	r3, #46212	; 0xb484
   12d5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d5e:	681a      	ldr	r2, [r3, #0]
   12d60:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d68:	601a      	str	r2, [r3, #0]
   12d6a:	f24b 4388 	movw	r3, #46216	; 0xb488
   12d6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d72:	681a      	ldr	r2, [r3, #0]
   12d74:	f24b 2330 	movw	r3, #45616	; 0xb230
   12d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d7c:	601a      	str	r2, [r3, #0]
   12d7e:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12d82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d86:	2200      	movs	r2, #0
   12d88:	801a      	strh	r2, [r3, #0]
   12d8a:	f24b 2340 	movw	r3, #45632	; 0xb240
   12d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d92:	f04f 0200 	mov.w	r2, #0
   12d96:	601a      	str	r2, [r3, #0]
   12d98:	f001 bb68 	b.w	1446c <auto_nav+0x21a4>
            fly_to(3);
   12d9c:	2003      	movs	r0, #3
   12d9e:	f001 fca7 	bl	146f0 <fly_to>
            auto_pitch = FALSE;
   12da2:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   12da6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12daa:	2200      	movs	r2, #0
   12dac:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12dae:	f24b 2354 	movw	r3, #45652	; 0xb254
   12db2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12db6:	f04f 0200 	mov.w	r2, #0
   12dba:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12dbc:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   12dc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dc4:	2203      	movs	r2, #3
   12dc6:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
   12dc8:	f240 4328 	movw	r3, #1064	; 0x428
   12dcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   12dd2:	f240 4324 	movw	r3, #1060	; 0x424
   12dd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dda:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12ddc:	f24b 231c 	movw	r3, #45596	; 0xb21c
   12de0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12de4:	f04f 0200 	mov.w	r2, #0
   12de8:	601a      	str	r2, [r3, #0]
          }
          return;
   12dea:	f001 bb3f 	b.w	1446c <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
   12dee:	f24b 2328 	movw	r3, #45608	; 0xb228
   12df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12df6:	781b      	ldrb	r3, [r3, #0]
   12df8:	2b05      	cmp	r3, #5
   12dfa:	d169      	bne.n	12ed0 <auto_nav+0xc08>
       {
          nav_stage =5;
   12dfc:	f24b 2328 	movw	r3, #45608	; 0xb228
   12e00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e04:	2205      	movs	r2, #5
   12e06:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   12e08:	2004      	movs	r0, #4
   12e0a:	f001 fb3d 	bl	14488 <approaching>
   12e0e:	4603      	mov	r3, r0
   12e10:	2b00      	cmp	r3, #0
   12e12:	d034      	beq.n	12e7e <auto_nav+0xbb6>
   12e14:	f24b 2334 	movw	r3, #45620	; 0xb234
   12e18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e1c:	2204      	movs	r2, #4
   12e1e:	701a      	strb	r2, [r3, #0]
   12e20:	f24b 2328 	movw	r3, #45608	; 0xb228
   12e24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e28:	781b      	ldrb	r3, [r3, #0]
   12e2a:	3301      	adds	r3, #1
   12e2c:	b2da      	uxtb	r2, r3
   12e2e:	f24b 2328 	movw	r3, #45608	; 0xb228
   12e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e36:	701a      	strb	r2, [r3, #0]
   12e38:	f24b 4384 	movw	r3, #46212	; 0xb484
   12e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e40:	681a      	ldr	r2, [r3, #0]
   12e42:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12e46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e4a:	601a      	str	r2, [r3, #0]
   12e4c:	f24b 4388 	movw	r3, #46216	; 0xb488
   12e50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e54:	681a      	ldr	r2, [r3, #0]
   12e56:	f24b 2330 	movw	r3, #45616	; 0xb230
   12e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e5e:	601a      	str	r2, [r3, #0]
   12e60:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12e64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e68:	2200      	movs	r2, #0
   12e6a:	801a      	strh	r2, [r3, #0]
   12e6c:	f24b 2340 	movw	r3, #45632	; 0xb240
   12e70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e74:	f04f 0200 	mov.w	r2, #0
   12e78:	601a      	str	r2, [r3, #0]
   12e7a:	f001 baf7 	b.w	1446c <auto_nav+0x21a4>
            fly_to(4);
   12e7e:	2004      	movs	r0, #4
   12e80:	f001 fc36 	bl	146f0 <fly_to>
            auto_pitch = FALSE;
   12e84:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   12e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e8c:	2200      	movs	r2, #0
   12e8e:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12e90:	f24b 2354 	movw	r3, #45652	; 0xb254
   12e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e98:	f04f 0200 	mov.w	r2, #0
   12e9c:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12e9e:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   12ea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ea6:	2203      	movs	r2, #3
   12ea8:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   12eaa:	f240 4328 	movw	r3, #1064	; 0x428
   12eae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12eb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12eb4:	f240 4324 	movw	r3, #1060	; 0x424
   12eb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ebc:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12ebe:	f24b 231c 	movw	r3, #45596	; 0xb21c
   12ec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ec6:	f04f 0200 	mov.w	r2, #0
   12eca:	601a      	str	r2, [r3, #0]
          }
          return;
   12ecc:	f001 bace 	b.w	1446c <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
   12ed0:	f24b 2328 	movw	r3, #45608	; 0xb228
   12ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ed8:	781b      	ldrb	r3, [r3, #0]
   12eda:	2b06      	cmp	r3, #6
   12edc:	d16f      	bne.n	12fbe <auto_nav+0xcf6>
       {
          nav_stage =6;
   12ede:	f24b 2328 	movw	r3, #45608	; 0xb228
   12ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ee6:	2206      	movs	r2, #6
   12ee8:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
   12eea:	2005      	movs	r0, #5
   12eec:	f001 facc 	bl	14488 <approaching>
   12ef0:	4603      	mov	r3, r0
   12ef2:	2b00      	cmp	r3, #0
   12ef4:	d034      	beq.n	12f60 <auto_nav+0xc98>
   12ef6:	f24b 2334 	movw	r3, #45620	; 0xb234
   12efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12efe:	2205      	movs	r2, #5
   12f00:	701a      	strb	r2, [r3, #0]
   12f02:	f24b 2328 	movw	r3, #45608	; 0xb228
   12f06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f0a:	781b      	ldrb	r3, [r3, #0]
   12f0c:	3301      	adds	r3, #1
   12f0e:	b2da      	uxtb	r2, r3
   12f10:	f24b 2328 	movw	r3, #45608	; 0xb228
   12f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f18:	701a      	strb	r2, [r3, #0]
   12f1a:	f24b 4384 	movw	r3, #46212	; 0xb484
   12f1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f22:	681a      	ldr	r2, [r3, #0]
   12f24:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f2c:	601a      	str	r2, [r3, #0]
   12f2e:	f24b 4388 	movw	r3, #46216	; 0xb488
   12f32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f36:	681a      	ldr	r2, [r3, #0]
   12f38:	f24b 2330 	movw	r3, #45616	; 0xb230
   12f3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f40:	601a      	str	r2, [r3, #0]
   12f42:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f4a:	2200      	movs	r2, #0
   12f4c:	801a      	strh	r2, [r3, #0]
   12f4e:	f24b 2340 	movw	r3, #45632	; 0xb240
   12f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f56:	f04f 0200 	mov.w	r2, #0
   12f5a:	601a      	str	r2, [r3, #0]
   12f5c:	f001 ba86 	b.w	1446c <auto_nav+0x21a4>
            route_to(last_wp, 5);
   12f60:	f24b 2334 	movw	r3, #45620	; 0xb234
   12f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f68:	781b      	ldrb	r3, [r3, #0]
   12f6a:	4618      	mov	r0, r3
   12f6c:	2105      	movs	r1, #5
   12f6e:	f001 fbe1 	bl	14734 <route_to>
            auto_pitch = FALSE;
   12f72:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   12f76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f7a:	2200      	movs	r2, #0
   12f7c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12f7e:	f24b 2354 	movw	r3, #45652	; 0xb254
   12f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f86:	f04f 0200 	mov.w	r2, #0
   12f8a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12f8c:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   12f90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f94:	2203      	movs	r2, #3
   12f96:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
   12f98:	f240 4328 	movw	r3, #1064	; 0x428
   12f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   12fa2:	f240 4324 	movw	r3, #1060	; 0x424
   12fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12faa:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12fac:	f24b 231c 	movw	r3, #45596	; 0xb21c
   12fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fb4:	f04f 0200 	mov.w	r2, #0
   12fb8:	601a      	str	r2, [r3, #0]
          }
          return;
   12fba:	f001 ba57 	b.w	1446c <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
   12fbe:	f24b 2328 	movw	r3, #45608	; 0xb228
   12fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fc6:	781b      	ldrb	r3, [r3, #0]
   12fc8:	2b07      	cmp	r3, #7
   12fca:	d106      	bne.n	12fda <auto_nav+0xd12>
       {
	   nav_stage =7;
   12fcc:	f24b 2328 	movw	r3, #45608	; 0xb228
   12fd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fd4:	2207      	movs	r2, #7
   12fd6:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
   12fd8:	e50a      	b.n	129f0 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
   12fda:	f24b 2328 	movw	r3, #45608	; 0xb228
   12fde:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fe2:	781b      	ldrb	r3, [r3, #0]
   12fe4:	2b08      	cmp	r3, #8
   12fe6:	f041 8241 	bne.w	1446c <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
   12fea:	f24b 2328 	movw	r3, #45608	; 0xb228
   12fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ff2:	2208      	movs	r2, #8
   12ff4:	701a      	strb	r2, [r3, #0]
          NextBlock();
   12ff6:	f24b 2329 	movw	r3, #45609	; 0xb229
   12ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ffe:	781b      	ldrb	r3, [r3, #0]
   13000:	3301      	adds	r3, #1
   13002:	b2da      	uxtb	r2, r3
   13004:	f24b 2329 	movw	r3, #45609	; 0xb229
   13008:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1300c:	701a      	strb	r2, [r3, #0]
   1300e:	f24b 2328 	movw	r3, #45608	; 0xb228
   13012:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13016:	2200      	movs	r2, #0
   13018:	701a      	strb	r2, [r3, #0]
   1301a:	f24b 233e 	movw	r3, #45630	; 0xb23e
   1301e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13022:	2200      	movs	r2, #0
   13024:	801a      	strh	r2, [r3, #0]
   13026:	f24b 4384 	movw	r3, #46212	; 0xb484
   1302a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1302e:	681a      	ldr	r2, [r3, #0]
   13030:	f24b 232c 	movw	r3, #45612	; 0xb22c
   13034:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13038:	601a      	str	r2, [r3, #0]
   1303a:	f24b 4388 	movw	r3, #46216	; 0xb488
   1303e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13042:	681a      	ldr	r2, [r3, #0]
   13044:	f24b 2330 	movw	r3, #45616	; 0xb230
   13048:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1304c:	601a      	str	r2, [r3, #0]
   1304e:	f24b 233c 	movw	r3, #45628	; 0xb23c
   13052:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13056:	2200      	movs	r2, #0
   13058:	801a      	strh	r2, [r3, #0]
   1305a:	f24b 2340 	movw	r3, #45632	; 0xb240
   1305e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13062:	f04f 0200 	mov.w	r2, #0
   13066:	601a      	str	r2, [r3, #0]
   13068:	f001 ba00 	b.w	1446c <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
   1306c:	f24b 2329 	movw	r3, #45609	; 0xb229
   13070:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13074:	781b      	ldrb	r3, [r3, #0]
   13076:	2b03      	cmp	r3, #3
   13078:	f040 8388 	bne.w	1378c <auto_nav+0x14c4>
{
    nav_block = 3;
   1307c:	f24b 2329 	movw	r3, #45609	; 0xb229
   13080:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13084:	2203      	movs	r2, #3
   13086:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
   13088:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   1308c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13090:	781b      	ldrb	r3, [r3, #0]
   13092:	2b00      	cmp	r3, #0
   13094:	d007      	beq.n	130a6 <auto_nav+0xdde>
   13096:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   1309a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1309e:	2200      	movs	r2, #0
   130a0:	701a      	strb	r2, [r3, #0]
   130a2:	2301      	movs	r3, #1
   130a4:	e000      	b.n	130a8 <auto_nav+0xde0>
   130a6:	2300      	movs	r3, #0
   130a8:	2b00      	cmp	r3, #0
   130aa:	d034      	beq.n	13116 <auto_nav+0xe4e>
   130ac:	f24b 2329 	movw	r3, #45609	; 0xb229
   130b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130b4:	2204      	movs	r2, #4
   130b6:	701a      	strb	r2, [r3, #0]
   130b8:	f24b 2328 	movw	r3, #45608	; 0xb228
   130bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130c0:	2200      	movs	r2, #0
   130c2:	701a      	strb	r2, [r3, #0]
   130c4:	f24b 233e 	movw	r3, #45630	; 0xb23e
   130c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130cc:	2200      	movs	r2, #0
   130ce:	801a      	strh	r2, [r3, #0]
   130d0:	f24b 4384 	movw	r3, #46212	; 0xb484
   130d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130d8:	681a      	ldr	r2, [r3, #0]
   130da:	f24b 232c 	movw	r3, #45612	; 0xb22c
   130de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130e2:	601a      	str	r2, [r3, #0]
   130e4:	f24b 4388 	movw	r3, #46216	; 0xb488
   130e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130ec:	681a      	ldr	r2, [r3, #0]
   130ee:	f24b 2330 	movw	r3, #45616	; 0xb230
   130f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130f6:	601a      	str	r2, [r3, #0]
   130f8:	f24b 233c 	movw	r3, #45628	; 0xb23c
   130fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13100:	2200      	movs	r2, #0
   13102:	801a      	strh	r2, [r3, #0]
   13104:	f24b 2340 	movw	r3, #45632	; 0xb240
   13108:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1310c:	f04f 0200 	mov.w	r2, #0
   13110:	601a      	str	r2, [r3, #0]
   13112:	f001 b9ab 	b.w	1446c <auto_nav+0x21a4>
    if(nav_stage == 0)
   13116:	f24b 2328 	movw	r3, #45608	; 0xb228
   1311a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1311e:	781b      	ldrb	r3, [r3, #0]
   13120:	2b00      	cmp	r3, #0
   13122:	f040 82ea 	bne.w	136fa <auto_nav+0x1432>
    {
        nav_stage = 0;
   13126:	f24b 2328 	movw	r3, #45608	; 0xb228
   1312a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1312e:	2200      	movs	r2, #0
   13130:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
   13132:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
   13136:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1313a:	781b      	ldrb	r3, [r3, #0]
   1313c:	2b02      	cmp	r3, #2
   1313e:	f040 81a5 	bne.w	1348c <auto_nav+0x11c4>
   13142:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   13146:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1314a:	88db      	ldrh	r3, [r3, #6]
   1314c:	84fb      	strh	r3, [r7, #38]	; 0x26
   1314e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   13152:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   13156:	dc04      	bgt.n	13162 <auto_nav+0xe9a>
   13158:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   1315c:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13160:	da7e      	bge.n	13260 <auto_nav+0xf98>
   13162:	f24b 2374 	movw	r3, #45684	; 0xb274
   13166:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1316a:	681b      	ldr	r3, [r3, #0]
   1316c:	4618      	mov	r0, r3
   1316e:	f004 fb7b 	bl	17868 <__aeabi_f2d>
   13172:	4604      	mov	r4, r0
   13174:	460d      	mov	r5, r1
   13176:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   1317a:	4618      	mov	r0, r3
   1317c:	f004 ffb4 	bl	180e8 <__aeabi_i2f>
   13180:	4603      	mov	r3, r0
   13182:	4618      	mov	r0, r3
   13184:	f04f 0100 	mov.w	r1, #0
   13188:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1318c:	f005 f8b4 	bl	182f8 <__aeabi_fdiv>
   13190:	4603      	mov	r3, r0
   13192:	4618      	mov	r0, r3
   13194:	f004 fb68 	bl	17868 <__aeabi_f2d>
   13198:	4602      	mov	r2, r0
   1319a:	460b      	mov	r3, r1
   1319c:	4610      	mov	r0, r2
   1319e:	4619      	mov	r1, r3
   131a0:	f04f 0200 	mov.w	r2, #0
   131a4:	f04f 0300 	mov.w	r3, #0
   131a8:	f2cc 0334 	movt	r3, #49204	; 0xc034
   131ac:	f004 fbb0 	bl	17910 <__aeabi_dmul>
   131b0:	4602      	mov	r2, r0
   131b2:	460b      	mov	r3, r1
   131b4:	4610      	mov	r0, r2
   131b6:	4619      	mov	r1, r3
   131b8:	f04f 0200 	mov.w	r2, #0
   131bc:	f04f 0300 	mov.w	r3, #0
   131c0:	f004 f9f4 	bl	175ac <__adddf3>
   131c4:	4602      	mov	r2, r0
   131c6:	460b      	mov	r3, r1
   131c8:	4620      	mov	r0, r4
   131ca:	4629      	mov	r1, r5
   131cc:	f004 f9ee 	bl	175ac <__adddf3>
   131d0:	4602      	mov	r2, r0
   131d2:	460b      	mov	r3, r1
   131d4:	4610      	mov	r0, r2
   131d6:	4619      	mov	r1, r3
   131d8:	f004 fe7c 	bl	17ed4 <__aeabi_d2f>
   131dc:	4602      	mov	r2, r0
   131de:	f24b 2374 	movw	r3, #45684	; 0xb274
   131e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131e6:	601a      	str	r2, [r3, #0]
   131e8:	f24b 2374 	movw	r3, #45684	; 0xb274
   131ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131f0:	681b      	ldr	r3, [r3, #0]
   131f2:	4618      	mov	r0, r3
   131f4:	f04f 0100 	mov.w	r1, #0
   131f8:	f2c4 317a 	movt	r1, #17274	; 0x437a
   131fc:	f005 f970 	bl	184e0 <__aeabi_fcmple>
   13200:	4603      	mov	r3, r0
   13202:	2b00      	cmp	r3, #0
   13204:	d005      	beq.n	13212 <auto_nav+0xf4a>
   13206:	f24b 2374 	movw	r3, #45684	; 0xb274
   1320a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1320e:	681a      	ldr	r2, [r3, #0]
   13210:	e003      	b.n	1321a <auto_nav+0xf52>
   13212:	f04f 0200 	mov.w	r2, #0
   13216:	f2c4 327a 	movt	r2, #17274	; 0x437a
   1321a:	f24b 2374 	movw	r3, #45684	; 0xb274
   1321e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13222:	601a      	str	r2, [r3, #0]
   13224:	f24b 2374 	movw	r3, #45684	; 0xb274
   13228:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1322c:	681b      	ldr	r3, [r3, #0]
   1322e:	4618      	mov	r0, r3
   13230:	f04f 0100 	mov.w	r1, #0
   13234:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   13238:	f005 f95c 	bl	184f4 <__aeabi_fcmpge>
   1323c:	4603      	mov	r3, r0
   1323e:	2b00      	cmp	r3, #0
   13240:	d005      	beq.n	1324e <auto_nav+0xf86>
   13242:	f24b 2374 	movw	r3, #45684	; 0xb274
   13246:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1324a:	681a      	ldr	r2, [r3, #0]
   1324c:	e003      	b.n	13256 <auto_nav+0xf8e>
   1324e:	f04f 0200 	mov.w	r2, #0
   13252:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   13256:	f24b 2374 	movw	r3, #45684	; 0xb274
   1325a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1325e:	601a      	str	r2, [r3, #0]
   13260:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   13264:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13268:	889b      	ldrh	r3, [r3, #4]
   1326a:	84bb      	strh	r3, [r7, #36]	; 0x24
   1326c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13270:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   13274:	dc04      	bgt.n	13280 <auto_nav+0xfb8>
   13276:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   1327a:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   1327e:	da7e      	bge.n	1337e <auto_nav+0x10b6>
   13280:	f24b 2378 	movw	r3, #45688	; 0xb278
   13284:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13288:	681b      	ldr	r3, [r3, #0]
   1328a:	4618      	mov	r0, r3
   1328c:	f004 faec 	bl	17868 <__aeabi_f2d>
   13290:	4604      	mov	r4, r0
   13292:	460d      	mov	r5, r1
   13294:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13298:	4618      	mov	r0, r3
   1329a:	f004 ff25 	bl	180e8 <__aeabi_i2f>
   1329e:	4603      	mov	r3, r0
   132a0:	4618      	mov	r0, r3
   132a2:	f04f 0100 	mov.w	r1, #0
   132a6:	f2c4 6116 	movt	r1, #17942	; 0x4616
   132aa:	f005 f825 	bl	182f8 <__aeabi_fdiv>
   132ae:	4603      	mov	r3, r0
   132b0:	4618      	mov	r0, r3
   132b2:	f004 fad9 	bl	17868 <__aeabi_f2d>
   132b6:	4602      	mov	r2, r0
   132b8:	460b      	mov	r3, r1
   132ba:	4610      	mov	r0, r2
   132bc:	4619      	mov	r1, r3
   132be:	f04f 0200 	mov.w	r2, #0
   132c2:	f04f 0300 	mov.w	r3, #0
   132c6:	f2cc 0334 	movt	r3, #49204	; 0xc034
   132ca:	f004 fb21 	bl	17910 <__aeabi_dmul>
   132ce:	4602      	mov	r2, r0
   132d0:	460b      	mov	r3, r1
   132d2:	4610      	mov	r0, r2
   132d4:	4619      	mov	r1, r3
   132d6:	f04f 0200 	mov.w	r2, #0
   132da:	f04f 0300 	mov.w	r3, #0
   132de:	f004 f965 	bl	175ac <__adddf3>
   132e2:	4602      	mov	r2, r0
   132e4:	460b      	mov	r3, r1
   132e6:	4620      	mov	r0, r4
   132e8:	4629      	mov	r1, r5
   132ea:	f004 f95f 	bl	175ac <__adddf3>
   132ee:	4602      	mov	r2, r0
   132f0:	460b      	mov	r3, r1
   132f2:	4610      	mov	r0, r2
   132f4:	4619      	mov	r1, r3
   132f6:	f004 fded 	bl	17ed4 <__aeabi_d2f>
   132fa:	4602      	mov	r2, r0
   132fc:	f24b 2378 	movw	r3, #45688	; 0xb278
   13300:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13304:	601a      	str	r2, [r3, #0]
   13306:	f24b 2378 	movw	r3, #45688	; 0xb278
   1330a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1330e:	681b      	ldr	r3, [r3, #0]
   13310:	4618      	mov	r0, r3
   13312:	f04f 0100 	mov.w	r1, #0
   13316:	f2c4 317a 	movt	r1, #17274	; 0x437a
   1331a:	f005 f8e1 	bl	184e0 <__aeabi_fcmple>
   1331e:	4603      	mov	r3, r0
   13320:	2b00      	cmp	r3, #0
   13322:	d005      	beq.n	13330 <auto_nav+0x1068>
   13324:	f24b 2378 	movw	r3, #45688	; 0xb278
   13328:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1332c:	681a      	ldr	r2, [r3, #0]
   1332e:	e003      	b.n	13338 <auto_nav+0x1070>
   13330:	f04f 0200 	mov.w	r2, #0
   13334:	f2c4 327a 	movt	r2, #17274	; 0x437a
   13338:	f24b 2378 	movw	r3, #45688	; 0xb278
   1333c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13340:	601a      	str	r2, [r3, #0]
   13342:	f24b 2378 	movw	r3, #45688	; 0xb278
   13346:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1334a:	681b      	ldr	r3, [r3, #0]
   1334c:	4618      	mov	r0, r3
   1334e:	f04f 0100 	mov.w	r1, #0
   13352:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   13356:	f005 f8cd 	bl	184f4 <__aeabi_fcmpge>
   1335a:	4603      	mov	r3, r0
   1335c:	2b00      	cmp	r3, #0
   1335e:	d005      	beq.n	1336c <auto_nav+0x10a4>
   13360:	f24b 2378 	movw	r3, #45688	; 0xb278
   13364:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13368:	681a      	ldr	r2, [r3, #0]
   1336a:	e003      	b.n	13374 <auto_nav+0x10ac>
   1336c:	f04f 0200 	mov.w	r2, #0
   13370:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   13374:	f24b 2378 	movw	r3, #45688	; 0xb278
   13378:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1337c:	601a      	str	r2, [r3, #0]
   1337e:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   13382:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13386:	2203      	movs	r2, #3
   13388:	701a      	strb	r2, [r3, #0]
   1338a:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   1338e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13392:	885b      	ldrh	r3, [r3, #2]
   13394:	847b      	strh	r3, [r7, #34]	; 0x22
   13396:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   1339a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   1339e:	dc04      	bgt.n	133aa <auto_nav+0x10e2>
   133a0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   133a4:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   133a8:	da70      	bge.n	1348c <auto_nav+0x11c4>
   133aa:	f240 4324 	movw	r3, #1060	; 0x424
   133ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133b2:	681b      	ldr	r3, [r3, #0]
   133b4:	4618      	mov	r0, r3
   133b6:	f004 fa57 	bl	17868 <__aeabi_f2d>
   133ba:	4604      	mov	r4, r0
   133bc:	460d      	mov	r5, r1
   133be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   133c2:	4618      	mov	r0, r3
   133c4:	f004 fe90 	bl	180e8 <__aeabi_i2f>
   133c8:	4603      	mov	r3, r0
   133ca:	4618      	mov	r0, r3
   133cc:	f04f 0100 	mov.w	r1, #0
   133d0:	f2c4 6116 	movt	r1, #17942	; 0x4616
   133d4:	f004 ff90 	bl	182f8 <__aeabi_fdiv>
   133d8:	4603      	mov	r3, r0
   133da:	4618      	mov	r0, r3
   133dc:	f004 fa44 	bl	17868 <__aeabi_f2d>
   133e0:	4602      	mov	r2, r0
   133e2:	460b      	mov	r3, r1
   133e4:	f04f 0000 	mov.w	r0, #0
   133e8:	f04f 0100 	mov.w	r1, #0
   133ec:	f004 f8dc 	bl	175a8 <__aeabi_dsub>
   133f0:	4602      	mov	r2, r0
   133f2:	460b      	mov	r3, r1
   133f4:	4620      	mov	r0, r4
   133f6:	4629      	mov	r1, r5
   133f8:	f004 f8d8 	bl	175ac <__adddf3>
   133fc:	4602      	mov	r2, r0
   133fe:	460b      	mov	r3, r1
   13400:	4610      	mov	r0, r2
   13402:	4619      	mov	r1, r3
   13404:	f004 fd66 	bl	17ed4 <__aeabi_d2f>
   13408:	4602      	mov	r2, r0
   1340a:	f240 4324 	movw	r3, #1060	; 0x424
   1340e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13412:	601a      	str	r2, [r3, #0]
   13414:	f240 4324 	movw	r3, #1060	; 0x424
   13418:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1341c:	681b      	ldr	r3, [r3, #0]
   1341e:	4618      	mov	r0, r3
   13420:	f04f 0100 	mov.w	r1, #0
   13424:	f2c4 312f 	movt	r1, #17199	; 0x432f
   13428:	f005 f864 	bl	184f4 <__aeabi_fcmpge>
   1342c:	4603      	mov	r3, r0
   1342e:	2b00      	cmp	r3, #0
   13430:	d005      	beq.n	1343e <auto_nav+0x1176>
   13432:	f240 4324 	movw	r3, #1060	; 0x424
   13436:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1343a:	681a      	ldr	r2, [r3, #0]
   1343c:	e003      	b.n	13446 <auto_nav+0x117e>
   1343e:	f04f 0200 	mov.w	r2, #0
   13442:	f2c4 322f 	movt	r2, #17199	; 0x432f
   13446:	f240 4324 	movw	r3, #1060	; 0x424
   1344a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1344e:	601a      	str	r2, [r3, #0]
   13450:	f240 4324 	movw	r3, #1060	; 0x424
   13454:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13458:	681b      	ldr	r3, [r3, #0]
   1345a:	4618      	mov	r0, r3
   1345c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13460:	f2c4 3189 	movt	r1, #17289	; 0x4389
   13464:	f005 f83c 	bl	184e0 <__aeabi_fcmple>
   13468:	4603      	mov	r3, r0
   1346a:	2b00      	cmp	r3, #0
   1346c:	d005      	beq.n	1347a <auto_nav+0x11b2>
   1346e:	f240 4324 	movw	r3, #1060	; 0x424
   13472:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13476:	681a      	ldr	r2, [r3, #0]
   13478:	e003      	b.n	13482 <auto_nav+0x11ba>
   1347a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1347e:	f2c4 3289 	movt	r2, #17289	; 0x4389
   13482:	f240 4324 	movw	r3, #1060	; 0x424
   13486:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1348a:	601a      	str	r2, [r3, #0]
   1348c:	f24b 4388 	movw	r3, #46216	; 0xb488
   13490:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13494:	681a      	ldr	r2, [r3, #0]
   13496:	f24b 2378 	movw	r3, #45688	; 0xb278
   1349a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1349e:	681b      	ldr	r3, [r3, #0]
   134a0:	4610      	mov	r0, r2
   134a2:	4619      	mov	r1, r3
   134a4:	f004 fd6a 	bl	17f7c <__aeabi_fsub>
   134a8:	4603      	mov	r3, r0
   134aa:	4618      	mov	r0, r3
   134ac:	f004 f9dc 	bl	17868 <__aeabi_f2d>
   134b0:	4604      	mov	r4, r0
   134b2:	460d      	mov	r5, r1
   134b4:	f24b 4384 	movw	r3, #46212	; 0xb484
   134b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134bc:	681a      	ldr	r2, [r3, #0]
   134be:	f24b 2374 	movw	r3, #45684	; 0xb274
   134c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134c6:	681b      	ldr	r3, [r3, #0]
   134c8:	4610      	mov	r0, r2
   134ca:	4619      	mov	r1, r3
   134cc:	f004 fd56 	bl	17f7c <__aeabi_fsub>
   134d0:	4603      	mov	r3, r0
   134d2:	4618      	mov	r0, r3
   134d4:	f004 f9c8 	bl	17868 <__aeabi_f2d>
   134d8:	4602      	mov	r2, r0
   134da:	460b      	mov	r3, r1
   134dc:	4620      	mov	r0, r4
   134de:	4629      	mov	r1, r5
   134e0:	f002 fa12 	bl	15908 <pp_atan2>
   134e4:	4602      	mov	r2, r0
   134e6:	460b      	mov	r3, r1
   134e8:	4610      	mov	r0, r2
   134ea:	4619      	mov	r1, r3
   134ec:	f004 fcf2 	bl	17ed4 <__aeabi_d2f>
   134f0:	4603      	mov	r3, r0
   134f2:	61fb      	str	r3, [r7, #28]
   134f4:	69f8      	ldr	r0, [r7, #28]
   134f6:	f004 f9b7 	bl	17868 <__aeabi_f2d>
   134fa:	4604      	mov	r4, r0
   134fc:	460d      	mov	r5, r1
   134fe:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
   13502:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13506:	681b      	ldr	r3, [r3, #0]
   13508:	4618      	mov	r0, r3
   1350a:	f04f 0100 	mov.w	r1, #0
   1350e:	f2cc 2148 	movt	r1, #49736	; 0xc248
   13512:	f004 fe3d 	bl	18190 <__aeabi_fmul>
   13516:	4603      	mov	r3, r0
   13518:	4618      	mov	r0, r3
   1351a:	f004 f9a5 	bl	17868 <__aeabi_f2d>
   1351e:	4602      	mov	r2, r0
   13520:	460b      	mov	r3, r1
   13522:	f04f 0000 	mov.w	r0, #0
   13526:	f04f 0100 	mov.w	r1, #0
   1352a:	f2c4 0114 	movt	r1, #16404	; 0x4014
   1352e:	f004 fb19 	bl	17b64 <__aeabi_ddiv>
   13532:	4602      	mov	r2, r0
   13534:	460b      	mov	r3, r1
   13536:	4620      	mov	r0, r4
   13538:	4629      	mov	r1, r5
   1353a:	f004 f837 	bl	175ac <__adddf3>
   1353e:	4602      	mov	r2, r0
   13540:	460b      	mov	r3, r1
   13542:	4610      	mov	r0, r2
   13544:	4619      	mov	r1, r3
   13546:	f004 fcc5 	bl	17ed4 <__aeabi_d2f>
   1354a:	4603      	mov	r3, r0
   1354c:	61bb      	str	r3, [r7, #24]
   1354e:	f24b 2374 	movw	r3, #45684	; 0xb274
   13552:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13556:	681b      	ldr	r3, [r3, #0]
   13558:	4618      	mov	r0, r3
   1355a:	f004 f985 	bl	17868 <__aeabi_f2d>
   1355e:	4604      	mov	r4, r0
   13560:	460d      	mov	r5, r1
   13562:	69b8      	ldr	r0, [r7, #24]
   13564:	f004 f980 	bl	17868 <__aeabi_f2d>
   13568:	4602      	mov	r2, r0
   1356a:	460b      	mov	r3, r1
   1356c:	4610      	mov	r0, r2
   1356e:	4619      	mov	r1, r3
   13570:	a3b1      	add	r3, pc, #708	; (adr r3, 13838 <auto_nav+0x1570>)
   13572:	e9d3 2300 	ldrd	r2, r3, [r3]
   13576:	f004 f819 	bl	175ac <__adddf3>
   1357a:	4602      	mov	r2, r0
   1357c:	460b      	mov	r3, r1
   1357e:	4610      	mov	r0, r2
   13580:	4619      	mov	r1, r3
   13582:	f002 fa81 	bl	15a88 <pp_sin>
   13586:	4602      	mov	r2, r0
   13588:	460b      	mov	r3, r1
   1358a:	4610      	mov	r0, r2
   1358c:	4619      	mov	r1, r3
   1358e:	f04f 0200 	mov.w	r2, #0
   13592:	f04f 0300 	mov.w	r3, #0
   13596:	f2c4 0349 	movt	r3, #16457	; 0x4049
   1359a:	f004 f9b9 	bl	17910 <__aeabi_dmul>
   1359e:	4602      	mov	r2, r0
   135a0:	460b      	mov	r3, r1
   135a2:	4620      	mov	r0, r4
   135a4:	4629      	mov	r1, r5
   135a6:	f004 f801 	bl	175ac <__adddf3>
   135aa:	4602      	mov	r2, r0
   135ac:	460b      	mov	r3, r1
   135ae:	4610      	mov	r0, r2
   135b0:	4619      	mov	r1, r3
   135b2:	f004 fc8f 	bl	17ed4 <__aeabi_d2f>
   135b6:	4606      	mov	r6, r0
   135b8:	f24b 2378 	movw	r3, #45688	; 0xb278
   135bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135c0:	681b      	ldr	r3, [r3, #0]
   135c2:	4618      	mov	r0, r3
   135c4:	f004 f950 	bl	17868 <__aeabi_f2d>
   135c8:	4604      	mov	r4, r0
   135ca:	460d      	mov	r5, r1
   135cc:	69b8      	ldr	r0, [r7, #24]
   135ce:	f004 f94b 	bl	17868 <__aeabi_f2d>
   135d2:	4602      	mov	r2, r0
   135d4:	460b      	mov	r3, r1
   135d6:	4610      	mov	r0, r2
   135d8:	4619      	mov	r1, r3
   135da:	f002 fa55 	bl	15a88 <pp_sin>
   135de:	4602      	mov	r2, r0
   135e0:	460b      	mov	r3, r1
   135e2:	4610      	mov	r0, r2
   135e4:	4619      	mov	r1, r3
   135e6:	f04f 0200 	mov.w	r2, #0
   135ea:	f04f 0300 	mov.w	r3, #0
   135ee:	f2c4 0349 	movt	r3, #16457	; 0x4049
   135f2:	f004 f98d 	bl	17910 <__aeabi_dmul>
   135f6:	4602      	mov	r2, r0
   135f8:	460b      	mov	r3, r1
   135fa:	4620      	mov	r0, r4
   135fc:	4629      	mov	r1, r5
   135fe:	f003 ffd5 	bl	175ac <__adddf3>
   13602:	4602      	mov	r2, r0
   13604:	460b      	mov	r3, r1
   13606:	4610      	mov	r0, r2
   13608:	4619      	mov	r1, r3
   1360a:	f004 fc63 	bl	17ed4 <__aeabi_d2f>
   1360e:	4603      	mov	r3, r0
   13610:	4630      	mov	r0, r6
   13612:	4619      	mov	r1, r3
   13614:	f001 f81c 	bl	14650 <fly_to_xy>
   13618:	69b8      	ldr	r0, [r7, #24]
   1361a:	f004 f925 	bl	17868 <__aeabi_f2d>
   1361e:	4602      	mov	r2, r0
   13620:	460b      	mov	r3, r1
   13622:	a185      	add	r1, pc, #532	; (adr r1, 13838 <auto_nav+0x1570>)
   13624:	e9d1 0100 	ldrd	r0, r1, [r1]
   13628:	f003 ffbe 	bl	175a8 <__aeabi_dsub>
   1362c:	4602      	mov	r2, r0
   1362e:	460b      	mov	r3, r1
   13630:	4610      	mov	r0, r2
   13632:	4619      	mov	r1, r3
   13634:	a382      	add	r3, pc, #520	; (adr r3, 13840 <auto_nav+0x1578>)
   13636:	e9d3 2300 	ldrd	r2, r3, [r3]
   1363a:	f004 fa93 	bl	17b64 <__aeabi_ddiv>
   1363e:	4602      	mov	r2, r0
   13640:	460b      	mov	r3, r1
   13642:	4610      	mov	r0, r2
   13644:	4619      	mov	r1, r3
   13646:	f04f 0200 	mov.w	r2, #0
   1364a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1364e:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13652:	f004 f95d 	bl	17910 <__aeabi_dmul>
   13656:	4602      	mov	r2, r0
   13658:	460b      	mov	r3, r1
   1365a:	4610      	mov	r0, r2
   1365c:	4619      	mov	r1, r3
   1365e:	f004 fc39 	bl	17ed4 <__aeabi_d2f>
   13662:	4602      	mov	r2, r0
   13664:	f24b 2344 	movw	r3, #45636	; 0xb244
   13668:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1366c:	601a      	str	r2, [r3, #0]
   1366e:	e012      	b.n	13696 <auto_nav+0x13ce>
   13670:	f24b 2344 	movw	r3, #45636	; 0xb244
   13674:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13678:	681b      	ldr	r3, [r3, #0]
   1367a:	4618      	mov	r0, r3
   1367c:	f04f 0100 	mov.w	r1, #0
   13680:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13684:	f004 fc7c 	bl	17f80 <__addsf3>
   13688:	4603      	mov	r3, r0
   1368a:	461a      	mov	r2, r3
   1368c:	f24b 2344 	movw	r3, #45636	; 0xb244
   13690:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13694:	601a      	str	r2, [r3, #0]
   13696:	f24b 2344 	movw	r3, #45636	; 0xb244
   1369a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1369e:	681b      	ldr	r3, [r3, #0]
   136a0:	4618      	mov	r0, r3
   136a2:	f04f 0100 	mov.w	r1, #0
   136a6:	f004 ff11 	bl	184cc <__aeabi_fcmplt>
   136aa:	4603      	mov	r3, r0
   136ac:	2b00      	cmp	r3, #0
   136ae:	d1df      	bne.n	13670 <auto_nav+0x13a8>
   136b0:	e012      	b.n	136d8 <auto_nav+0x1410>
   136b2:	f24b 2344 	movw	r3, #45636	; 0xb244
   136b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136ba:	681b      	ldr	r3, [r3, #0]
   136bc:	4618      	mov	r0, r3
   136be:	f04f 0100 	mov.w	r1, #0
   136c2:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   136c6:	f004 fc59 	bl	17f7c <__aeabi_fsub>
   136ca:	4603      	mov	r3, r0
   136cc:	461a      	mov	r2, r3
   136ce:	f24b 2344 	movw	r3, #45636	; 0xb244
   136d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136d6:	601a      	str	r2, [r3, #0]
   136d8:	f24b 2344 	movw	r3, #45636	; 0xb244
   136dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136e0:	681b      	ldr	r3, [r3, #0]
   136e2:	4618      	mov	r0, r3
   136e4:	f04f 0100 	mov.w	r1, #0
   136e8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   136ec:	f004 ff02 	bl	184f4 <__aeabi_fcmpge>
   136f0:	4603      	mov	r3, r0
   136f2:	2b00      	cmp	r3, #0
   136f4:	d1dd      	bne.n	136b2 <auto_nav+0x13ea>
        return;
   136f6:	f000 beb9 	b.w	1446c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   136fa:	f24b 2328 	movw	r3, #45608	; 0xb228
   136fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13702:	781b      	ldrb	r3, [r3, #0]
   13704:	2b01      	cmp	r3, #1
   13706:	f040 86b1 	bne.w	1446c <auto_nav+0x21a4>
    {
        nav_stage = 1;
   1370a:	f24b 2328 	movw	r3, #45608	; 0xb228
   1370e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13712:	2201      	movs	r2, #1
   13714:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13716:	f24b 2329 	movw	r3, #45609	; 0xb229
   1371a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1371e:	781b      	ldrb	r3, [r3, #0]
   13720:	3301      	adds	r3, #1
   13722:	b2da      	uxtb	r2, r3
   13724:	f24b 2329 	movw	r3, #45609	; 0xb229
   13728:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1372c:	701a      	strb	r2, [r3, #0]
   1372e:	f24b 2328 	movw	r3, #45608	; 0xb228
   13732:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13736:	2200      	movs	r2, #0
   13738:	701a      	strb	r2, [r3, #0]
   1373a:	f24b 233e 	movw	r3, #45630	; 0xb23e
   1373e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13742:	2200      	movs	r2, #0
   13744:	801a      	strh	r2, [r3, #0]
   13746:	f24b 4384 	movw	r3, #46212	; 0xb484
   1374a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1374e:	681a      	ldr	r2, [r3, #0]
   13750:	f24b 232c 	movw	r3, #45612	; 0xb22c
   13754:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13758:	601a      	str	r2, [r3, #0]
   1375a:	f24b 4388 	movw	r3, #46216	; 0xb488
   1375e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13762:	681a      	ldr	r2, [r3, #0]
   13764:	f24b 2330 	movw	r3, #45616	; 0xb230
   13768:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1376c:	601a      	str	r2, [r3, #0]
   1376e:	f24b 233c 	movw	r3, #45628	; 0xb23c
   13772:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13776:	2200      	movs	r2, #0
   13778:	801a      	strh	r2, [r3, #0]
   1377a:	f24b 2340 	movw	r3, #45632	; 0xb240
   1377e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13782:	f04f 0200 	mov.w	r2, #0
   13786:	601a      	str	r2, [r3, #0]
   13788:	f000 be70 	b.w	1446c <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
   1378c:	f24b 2329 	movw	r3, #45609	; 0xb229
   13790:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13794:	781b      	ldrb	r3, [r3, #0]
   13796:	2b04      	cmp	r3, #4
   13798:	f040 8202 	bne.w	13ba0 <auto_nav+0x18d8>
{
    nav_block = 4;
   1379c:	f24b 2329 	movw	r3, #45609	; 0xb229
   137a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137a4:	2204      	movs	r2, #4
   137a6:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
   137a8:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   137ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137b0:	781b      	ldrb	r3, [r3, #0]
   137b2:	2b00      	cmp	r3, #0
   137b4:	d007      	beq.n	137c6 <auto_nav+0x14fe>
   137b6:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   137ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137be:	2200      	movs	r2, #0
   137c0:	701a      	strb	r2, [r3, #0]
   137c2:	2301      	movs	r3, #1
   137c4:	e000      	b.n	137c8 <auto_nav+0x1500>
   137c6:	2300      	movs	r3, #0
   137c8:	2b00      	cmp	r3, #0
   137ca:	d03d      	beq.n	13848 <auto_nav+0x1580>
   137cc:	f24b 2329 	movw	r3, #45609	; 0xb229
   137d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137d4:	2205      	movs	r2, #5
   137d6:	701a      	strb	r2, [r3, #0]
   137d8:	f24b 2328 	movw	r3, #45608	; 0xb228
   137dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137e0:	2200      	movs	r2, #0
   137e2:	701a      	strb	r2, [r3, #0]
   137e4:	f24b 233e 	movw	r3, #45630	; 0xb23e
   137e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137ec:	2200      	movs	r2, #0
   137ee:	801a      	strh	r2, [r3, #0]
   137f0:	f24b 4384 	movw	r3, #46212	; 0xb484
   137f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137f8:	681a      	ldr	r2, [r3, #0]
   137fa:	f24b 232c 	movw	r3, #45612	; 0xb22c
   137fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13802:	601a      	str	r2, [r3, #0]
   13804:	f24b 4388 	movw	r3, #46216	; 0xb488
   13808:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1380c:	681a      	ldr	r2, [r3, #0]
   1380e:	f24b 2330 	movw	r3, #45616	; 0xb230
   13812:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13816:	601a      	str	r2, [r3, #0]
   13818:	f24b 233c 	movw	r3, #45628	; 0xb23c
   1381c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13820:	2200      	movs	r2, #0
   13822:	801a      	strh	r2, [r3, #0]
   13824:	f24b 2340 	movw	r3, #45632	; 0xb240
   13828:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1382c:	f04f 0200 	mov.w	r2, #0
   13830:	601a      	str	r2, [r3, #0]
   13832:	f000 be1b 	b.w	1446c <auto_nav+0x21a4>
   13836:	bf00      	nop
   13838:	54442d18 	.word	0x54442d18
   1383c:	3ff921fb 	.word	0x3ff921fb
   13840:	54442d18 	.word	0x54442d18
   13844:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
   13848:	f24b 2328 	movw	r3, #45608	; 0xb228
   1384c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13850:	781b      	ldrb	r3, [r3, #0]
   13852:	2b00      	cmp	r3, #0
   13854:	f040 815b 	bne.w	13b0e <auto_nav+0x1846>
    {
        nav_stage = 0;
   13858:	f24b 2328 	movw	r3, #45608	; 0xb228
   1385c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13860:	2200      	movs	r2, #0
   13862:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13864:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   13868:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1386c:	2200      	movs	r2, #0
   1386e:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13870:	f24b 2354 	movw	r3, #45652	; 0xb254
   13874:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13878:	f04f 0200 	mov.w	r2, #0
   1387c:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1387e:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   13882:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13886:	2203      	movs	r2, #3
   13888:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
   1388a:	f240 4328 	movw	r3, #1064	; 0x428
   1388e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13892:	689a      	ldr	r2, [r3, #8]
   13894:	f240 4324 	movw	r3, #1060	; 0x424
   13898:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1389c:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   1389e:	f24b 231c 	movw	r3, #45596	; 0xb21c
   138a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138a6:	f04f 0200 	mov.w	r2, #0
   138aa:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
   138ac:	f24b 4388 	movw	r3, #46216	; 0xb488
   138b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138b4:	681a      	ldr	r2, [r3, #0]
   138b6:	f240 4328 	movw	r3, #1064	; 0x428
   138ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138be:	685b      	ldr	r3, [r3, #4]
   138c0:	4610      	mov	r0, r2
   138c2:	4619      	mov	r1, r3
   138c4:	f004 fb5a 	bl	17f7c <__aeabi_fsub>
   138c8:	4603      	mov	r3, r0
   138ca:	4618      	mov	r0, r3
   138cc:	f003 ffcc 	bl	17868 <__aeabi_f2d>
   138d0:	4604      	mov	r4, r0
   138d2:	460d      	mov	r5, r1
   138d4:	f24b 4384 	movw	r3, #46212	; 0xb484
   138d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138dc:	681a      	ldr	r2, [r3, #0]
   138de:	f240 4328 	movw	r3, #1064	; 0x428
   138e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138e6:	681b      	ldr	r3, [r3, #0]
   138e8:	4610      	mov	r0, r2
   138ea:	4619      	mov	r1, r3
   138ec:	f004 fb46 	bl	17f7c <__aeabi_fsub>
   138f0:	4603      	mov	r3, r0
   138f2:	4618      	mov	r0, r3
   138f4:	f003 ffb8 	bl	17868 <__aeabi_f2d>
   138f8:	4602      	mov	r2, r0
   138fa:	460b      	mov	r3, r1
   138fc:	4620      	mov	r0, r4
   138fe:	4629      	mov	r1, r5
   13900:	f002 f802 	bl	15908 <pp_atan2>
   13904:	4602      	mov	r2, r0
   13906:	460b      	mov	r3, r1
   13908:	4610      	mov	r0, r2
   1390a:	4619      	mov	r1, r3
   1390c:	f004 fae2 	bl	17ed4 <__aeabi_d2f>
   13910:	4603      	mov	r3, r0
   13912:	617b      	str	r3, [r7, #20]
   13914:	6978      	ldr	r0, [r7, #20]
   13916:	f003 ffa7 	bl	17868 <__aeabi_f2d>
   1391a:	4604      	mov	r4, r0
   1391c:	460d      	mov	r5, r1
   1391e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
   13922:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13926:	681b      	ldr	r3, [r3, #0]
   13928:	4618      	mov	r0, r3
   1392a:	f04f 0100 	mov.w	r1, #0
   1392e:	f2cc 3116 	movt	r1, #49942	; 0xc316
   13932:	f004 fc2d 	bl	18190 <__aeabi_fmul>
   13936:	4603      	mov	r3, r0
   13938:	4618      	mov	r0, r3
   1393a:	f003 ff95 	bl	17868 <__aeabi_f2d>
   1393e:	4602      	mov	r2, r0
   13940:	460b      	mov	r3, r1
   13942:	f04f 0000 	mov.w	r0, #0
   13946:	f04f 0100 	mov.w	r1, #0
   1394a:	f2c4 0114 	movt	r1, #16404	; 0x4014
   1394e:	f004 f909 	bl	17b64 <__aeabi_ddiv>
   13952:	4602      	mov	r2, r0
   13954:	460b      	mov	r3, r1
   13956:	4620      	mov	r0, r4
   13958:	4629      	mov	r1, r5
   1395a:	f003 fe27 	bl	175ac <__adddf3>
   1395e:	4602      	mov	r2, r0
   13960:	460b      	mov	r3, r1
   13962:	4610      	mov	r0, r2
   13964:	4619      	mov	r1, r3
   13966:	f004 fab5 	bl	17ed4 <__aeabi_d2f>
   1396a:	4603      	mov	r3, r0
   1396c:	613b      	str	r3, [r7, #16]
   1396e:	f240 4328 	movw	r3, #1064	; 0x428
   13972:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13976:	681b      	ldr	r3, [r3, #0]
   13978:	4618      	mov	r0, r3
   1397a:	f003 ff75 	bl	17868 <__aeabi_f2d>
   1397e:	4604      	mov	r4, r0
   13980:	460d      	mov	r5, r1
   13982:	6938      	ldr	r0, [r7, #16]
   13984:	f003 ff70 	bl	17868 <__aeabi_f2d>
   13988:	4602      	mov	r2, r0
   1398a:	460b      	mov	r3, r1
   1398c:	4610      	mov	r0, r2
   1398e:	4619      	mov	r1, r3
   13990:	a3af      	add	r3, pc, #700	; (adr r3, 13c50 <auto_nav+0x1988>)
   13992:	e9d3 2300 	ldrd	r2, r3, [r3]
   13996:	f003 fe09 	bl	175ac <__adddf3>
   1399a:	4602      	mov	r2, r0
   1399c:	460b      	mov	r3, r1
   1399e:	4610      	mov	r0, r2
   139a0:	4619      	mov	r1, r3
   139a2:	f002 f871 	bl	15a88 <pp_sin>
   139a6:	4602      	mov	r2, r0
   139a8:	460b      	mov	r3, r1
   139aa:	4610      	mov	r0, r2
   139ac:	4619      	mov	r1, r3
   139ae:	a3aa      	add	r3, pc, #680	; (adr r3, 13c58 <auto_nav+0x1990>)
   139b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   139b4:	f003 ffac 	bl	17910 <__aeabi_dmul>
   139b8:	4602      	mov	r2, r0
   139ba:	460b      	mov	r3, r1
   139bc:	4620      	mov	r0, r4
   139be:	4629      	mov	r1, r5
   139c0:	f003 fdf4 	bl	175ac <__adddf3>
   139c4:	4602      	mov	r2, r0
   139c6:	460b      	mov	r3, r1
   139c8:	4610      	mov	r0, r2
   139ca:	4619      	mov	r1, r3
   139cc:	f004 fa82 	bl	17ed4 <__aeabi_d2f>
   139d0:	4606      	mov	r6, r0
   139d2:	f240 4328 	movw	r3, #1064	; 0x428
   139d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139da:	685b      	ldr	r3, [r3, #4]
   139dc:	4618      	mov	r0, r3
   139de:	f003 ff43 	bl	17868 <__aeabi_f2d>
   139e2:	4604      	mov	r4, r0
   139e4:	460d      	mov	r5, r1
   139e6:	6938      	ldr	r0, [r7, #16]
   139e8:	f003 ff3e 	bl	17868 <__aeabi_f2d>
   139ec:	4602      	mov	r2, r0
   139ee:	460b      	mov	r3, r1
   139f0:	4610      	mov	r0, r2
   139f2:	4619      	mov	r1, r3
   139f4:	f002 f848 	bl	15a88 <pp_sin>
   139f8:	4602      	mov	r2, r0
   139fa:	460b      	mov	r3, r1
   139fc:	4610      	mov	r0, r2
   139fe:	4619      	mov	r1, r3
   13a00:	a395      	add	r3, pc, #596	; (adr r3, 13c58 <auto_nav+0x1990>)
   13a02:	e9d3 2300 	ldrd	r2, r3, [r3]
   13a06:	f003 ff83 	bl	17910 <__aeabi_dmul>
   13a0a:	4602      	mov	r2, r0
   13a0c:	460b      	mov	r3, r1
   13a0e:	4620      	mov	r0, r4
   13a10:	4629      	mov	r1, r5
   13a12:	f003 fdcb 	bl	175ac <__adddf3>
   13a16:	4602      	mov	r2, r0
   13a18:	460b      	mov	r3, r1
   13a1a:	4610      	mov	r0, r2
   13a1c:	4619      	mov	r1, r3
   13a1e:	f004 fa59 	bl	17ed4 <__aeabi_d2f>
   13a22:	4603      	mov	r3, r0
   13a24:	4630      	mov	r0, r6
   13a26:	4619      	mov	r1, r3
   13a28:	f000 fe12 	bl	14650 <fly_to_xy>
   13a2c:	6938      	ldr	r0, [r7, #16]
   13a2e:	f003 ff1b 	bl	17868 <__aeabi_f2d>
   13a32:	4602      	mov	r2, r0
   13a34:	460b      	mov	r3, r1
   13a36:	a186      	add	r1, pc, #536	; (adr r1, 13c50 <auto_nav+0x1988>)
   13a38:	e9d1 0100 	ldrd	r0, r1, [r1]
   13a3c:	f003 fdb4 	bl	175a8 <__aeabi_dsub>
   13a40:	4602      	mov	r2, r0
   13a42:	460b      	mov	r3, r1
   13a44:	4610      	mov	r0, r2
   13a46:	4619      	mov	r1, r3
   13a48:	a385      	add	r3, pc, #532	; (adr r3, 13c60 <auto_nav+0x1998>)
   13a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   13a4e:	f004 f889 	bl	17b64 <__aeabi_ddiv>
   13a52:	4602      	mov	r2, r0
   13a54:	460b      	mov	r3, r1
   13a56:	4610      	mov	r0, r2
   13a58:	4619      	mov	r1, r3
   13a5a:	f04f 0200 	mov.w	r2, #0
   13a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13a62:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13a66:	f003 ff53 	bl	17910 <__aeabi_dmul>
   13a6a:	4602      	mov	r2, r0
   13a6c:	460b      	mov	r3, r1
   13a6e:	4610      	mov	r0, r2
   13a70:	4619      	mov	r1, r3
   13a72:	f004 fa2f 	bl	17ed4 <__aeabi_d2f>
   13a76:	4602      	mov	r2, r0
   13a78:	f24b 2344 	movw	r3, #45636	; 0xb244
   13a7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a80:	601a      	str	r2, [r3, #0]
   13a82:	e012      	b.n	13aaa <auto_nav+0x17e2>
   13a84:	f24b 2344 	movw	r3, #45636	; 0xb244
   13a88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a8c:	681b      	ldr	r3, [r3, #0]
   13a8e:	4618      	mov	r0, r3
   13a90:	f04f 0100 	mov.w	r1, #0
   13a94:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13a98:	f004 fa72 	bl	17f80 <__addsf3>
   13a9c:	4603      	mov	r3, r0
   13a9e:	461a      	mov	r2, r3
   13aa0:	f24b 2344 	movw	r3, #45636	; 0xb244
   13aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13aa8:	601a      	str	r2, [r3, #0]
   13aaa:	f24b 2344 	movw	r3, #45636	; 0xb244
   13aae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ab2:	681b      	ldr	r3, [r3, #0]
   13ab4:	4618      	mov	r0, r3
   13ab6:	f04f 0100 	mov.w	r1, #0
   13aba:	f004 fd07 	bl	184cc <__aeabi_fcmplt>
   13abe:	4603      	mov	r3, r0
   13ac0:	2b00      	cmp	r3, #0
   13ac2:	d1df      	bne.n	13a84 <auto_nav+0x17bc>
   13ac4:	e012      	b.n	13aec <auto_nav+0x1824>
   13ac6:	f24b 2344 	movw	r3, #45636	; 0xb244
   13aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ace:	681b      	ldr	r3, [r3, #0]
   13ad0:	4618      	mov	r0, r3
   13ad2:	f04f 0100 	mov.w	r1, #0
   13ad6:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13ada:	f004 fa4f 	bl	17f7c <__aeabi_fsub>
   13ade:	4603      	mov	r3, r0
   13ae0:	461a      	mov	r2, r3
   13ae2:	f24b 2344 	movw	r3, #45636	; 0xb244
   13ae6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13aea:	601a      	str	r2, [r3, #0]
   13aec:	f24b 2344 	movw	r3, #45636	; 0xb244
   13af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13af4:	681b      	ldr	r3, [r3, #0]
   13af6:	4618      	mov	r0, r3
   13af8:	f04f 0100 	mov.w	r1, #0
   13afc:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13b00:	f004 fcf8 	bl	184f4 <__aeabi_fcmpge>
   13b04:	4603      	mov	r3, r0
   13b06:	2b00      	cmp	r3, #0
   13b08:	d1dd      	bne.n	13ac6 <auto_nav+0x17fe>
        return;
   13b0a:	f000 bcaf 	b.w	1446c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13b0e:	f24b 2328 	movw	r3, #45608	; 0xb228
   13b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b16:	781b      	ldrb	r3, [r3, #0]
   13b18:	2b01      	cmp	r3, #1
   13b1a:	f040 84a7 	bne.w	1446c <auto_nav+0x21a4>
    {
        nav_stage =1;
   13b1e:	f24b 2328 	movw	r3, #45608	; 0xb228
   13b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b26:	2201      	movs	r2, #1
   13b28:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13b2a:	f24b 2329 	movw	r3, #45609	; 0xb229
   13b2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b32:	781b      	ldrb	r3, [r3, #0]
   13b34:	3301      	adds	r3, #1
   13b36:	b2da      	uxtb	r2, r3
   13b38:	f24b 2329 	movw	r3, #45609	; 0xb229
   13b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b40:	701a      	strb	r2, [r3, #0]
   13b42:	f24b 2328 	movw	r3, #45608	; 0xb228
   13b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b4a:	2200      	movs	r2, #0
   13b4c:	701a      	strb	r2, [r3, #0]
   13b4e:	f24b 233e 	movw	r3, #45630	; 0xb23e
   13b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b56:	2200      	movs	r2, #0
   13b58:	801a      	strh	r2, [r3, #0]
   13b5a:	f24b 4384 	movw	r3, #46212	; 0xb484
   13b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b62:	681a      	ldr	r2, [r3, #0]
   13b64:	f24b 232c 	movw	r3, #45612	; 0xb22c
   13b68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b6c:	601a      	str	r2, [r3, #0]
   13b6e:	f24b 4388 	movw	r3, #46216	; 0xb488
   13b72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b76:	681a      	ldr	r2, [r3, #0]
   13b78:	f24b 2330 	movw	r3, #45616	; 0xb230
   13b7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b80:	601a      	str	r2, [r3, #0]
   13b82:	f24b 233c 	movw	r3, #45628	; 0xb23c
   13b86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b8a:	2200      	movs	r2, #0
   13b8c:	801a      	strh	r2, [r3, #0]
   13b8e:	f24b 2340 	movw	r3, #45632	; 0xb240
   13b92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b96:	f04f 0200 	mov.w	r2, #0
   13b9a:	601a      	str	r2, [r3, #0]
   13b9c:	f000 bc66 	b.w	1446c <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
   13ba0:	f24b 2329 	movw	r3, #45609	; 0xb229
   13ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ba8:	781b      	ldrb	r3, [r3, #0]
   13baa:	2b05      	cmp	r3, #5
   13bac:	f040 845e 	bne.w	1446c <auto_nav+0x21a4>
{
    nav_block = 5;
   13bb0:	f24b 2329 	movw	r3, #45609	; 0xb229
   13bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bb8:	2205      	movs	r2, #5
   13bba:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
   13bbc:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   13bc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bc4:	781b      	ldrb	r3, [r3, #0]
   13bc6:	2b00      	cmp	r3, #0
   13bc8:	d007      	beq.n	13bda <auto_nav+0x1912>
   13bca:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
   13bce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bd2:	2200      	movs	r2, #0
   13bd4:	701a      	strb	r2, [r3, #0]
   13bd6:	2301      	movs	r3, #1
   13bd8:	e000      	b.n	13bdc <auto_nav+0x1914>
   13bda:	2300      	movs	r3, #0
   13bdc:	2b00      	cmp	r3, #0
   13bde:	d043      	beq.n	13c68 <auto_nav+0x19a0>
   13be0:	f24b 2329 	movw	r3, #45609	; 0xb229
   13be4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13be8:	2201      	movs	r2, #1
   13bea:	701a      	strb	r2, [r3, #0]
   13bec:	f24b 2328 	movw	r3, #45608	; 0xb228
   13bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bf4:	2200      	movs	r2, #0
   13bf6:	701a      	strb	r2, [r3, #0]
   13bf8:	f24b 233e 	movw	r3, #45630	; 0xb23e
   13bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c00:	2200      	movs	r2, #0
   13c02:	801a      	strh	r2, [r3, #0]
   13c04:	f24b 4384 	movw	r3, #46212	; 0xb484
   13c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c0c:	681a      	ldr	r2, [r3, #0]
   13c0e:	f24b 232c 	movw	r3, #45612	; 0xb22c
   13c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c16:	601a      	str	r2, [r3, #0]
   13c18:	f24b 4388 	movw	r3, #46216	; 0xb488
   13c1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c20:	681a      	ldr	r2, [r3, #0]
   13c22:	f24b 2330 	movw	r3, #45616	; 0xb230
   13c26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c2a:	601a      	str	r2, [r3, #0]
   13c2c:	f24b 233c 	movw	r3, #45628	; 0xb23c
   13c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c34:	2200      	movs	r2, #0
   13c36:	801a      	strh	r2, [r3, #0]
   13c38:	f24b 2340 	movw	r3, #45632	; 0xb240
   13c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c40:	f04f 0200 	mov.w	r2, #0
   13c44:	601a      	str	r2, [r3, #0]
   13c46:	f000 bc11 	b.w	1446c <auto_nav+0x21a4>
   13c4a:	bf00      	nop
   13c4c:	f3af 8000 	nop.w
   13c50:	54442d18 	.word	0x54442d18
   13c54:	3ff921fb 	.word	0x3ff921fb
   13c58:	00000000 	.word	0x00000000
   13c5c:	4062c000 	.word	0x4062c000
   13c60:	54442d18 	.word	0x54442d18
   13c64:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
   13c68:	f24b 2328 	movw	r3, #45608	; 0xb228
   13c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c70:	781b      	ldrb	r3, [r3, #0]
   13c72:	2b00      	cmp	r3, #0
   13c74:	d133      	bne.n	13cde <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
   13c76:	f24b 2328 	movw	r3, #45608	; 0xb228
   13c7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c7e:	2200      	movs	r2, #0
   13c80:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
   13c82:	f24b 2328 	movw	r3, #45608	; 0xb228
   13c86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c8a:	781b      	ldrb	r3, [r3, #0]
   13c8c:	3301      	adds	r3, #1
   13c8e:	b2da      	uxtb	r2, r3
   13c90:	f24b 2328 	movw	r3, #45608	; 0xb228
   13c94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c98:	701a      	strb	r2, [r3, #0]
   13c9a:	f24b 4384 	movw	r3, #46212	; 0xb484
   13c9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ca2:	681a      	ldr	r2, [r3, #0]
   13ca4:	f24b 232c 	movw	r3, #45612	; 0xb22c
   13ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13cac:	601a      	str	r2, [r3, #0]
   13cae:	f24b 4388 	movw	r3, #46216	; 0xb488
   13cb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13cb6:	681a      	ldr	r2, [r3, #0]
   13cb8:	f24b 2330 	movw	r3, #45616	; 0xb230
   13cbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13cc0:	601a      	str	r2, [r3, #0]
   13cc2:	f24b 233c 	movw	r3, #45628	; 0xb23c
   13cc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13cca:	2200      	movs	r2, #0
   13ccc:	801a      	strh	r2, [r3, #0]
   13cce:	f24b 2340 	movw	r3, #45632	; 0xb240
   13cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13cd6:	f04f 0200 	mov.w	r2, #0
   13cda:	601a      	str	r2, [r3, #0]
   13cdc:	e3c6      	b.n	1446c <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
   13cde:	f24b 2328 	movw	r3, #45608	; 0xb228
   13ce2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ce6:	781b      	ldrb	r3, [r3, #0]
   13ce8:	2b01      	cmp	r3, #1
   13cea:	f040 81b5 	bne.w	14058 <auto_nav+0x1d90>
    {
        nav_stage =1;
   13cee:	f24b 2328 	movw	r3, #45608	; 0xb228
   13cf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13cf6:	2201      	movs	r2, #1
   13cf8:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13cfa:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   13cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d02:	2200      	movs	r2, #0
   13d04:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13d06:	f24b 2354 	movw	r3, #45652	; 0xb254
   13d0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d0e:	f04f 0200 	mov.w	r2, #0
   13d12:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13d14:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   13d18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d1c:	2203      	movs	r2, #3
   13d1e:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
   13d20:	f240 4328 	movw	r3, #1064	; 0x428
   13d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d28:	695a      	ldr	r2, [r3, #20]
   13d2a:	f240 4324 	movw	r3, #1060	; 0x424
   13d2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d32:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13d34:	f24b 231c 	movw	r3, #45596	; 0xb21c
   13d38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d3c:	f04f 0200 	mov.w	r2, #0
   13d40:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
   13d42:	f24b 4388 	movw	r3, #46216	; 0xb488
   13d46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d4a:	681a      	ldr	r2, [r3, #0]
   13d4c:	f240 4328 	movw	r3, #1064	; 0x428
   13d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d54:	691b      	ldr	r3, [r3, #16]
   13d56:	4610      	mov	r0, r2
   13d58:	4619      	mov	r1, r3
   13d5a:	f004 f90f 	bl	17f7c <__aeabi_fsub>
   13d5e:	4603      	mov	r3, r0
   13d60:	4618      	mov	r0, r3
   13d62:	f003 fd81 	bl	17868 <__aeabi_f2d>
   13d66:	4604      	mov	r4, r0
   13d68:	460d      	mov	r5, r1
   13d6a:	f24b 4384 	movw	r3, #46212	; 0xb484
   13d6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d72:	681a      	ldr	r2, [r3, #0]
   13d74:	f240 4328 	movw	r3, #1064	; 0x428
   13d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d7c:	68db      	ldr	r3, [r3, #12]
   13d7e:	4610      	mov	r0, r2
   13d80:	4619      	mov	r1, r3
   13d82:	f004 f8fb 	bl	17f7c <__aeabi_fsub>
   13d86:	4603      	mov	r3, r0
   13d88:	4618      	mov	r0, r3
   13d8a:	f003 fd6d 	bl	17868 <__aeabi_f2d>
   13d8e:	4602      	mov	r2, r0
   13d90:	460b      	mov	r3, r1
   13d92:	4620      	mov	r0, r4
   13d94:	4629      	mov	r1, r5
   13d96:	f001 fdb7 	bl	15908 <pp_atan2>
   13d9a:	4602      	mov	r2, r0
   13d9c:	460b      	mov	r3, r1
   13d9e:	4610      	mov	r0, r2
   13da0:	4619      	mov	r1, r3
   13da2:	f004 f897 	bl	17ed4 <__aeabi_d2f>
   13da6:	4603      	mov	r3, r0
   13da8:	60fb      	str	r3, [r7, #12]
   13daa:	68f8      	ldr	r0, [r7, #12]
   13dac:	f003 fd5c 	bl	17868 <__aeabi_f2d>
   13db0:	4604      	mov	r4, r0
   13db2:	460d      	mov	r5, r1
   13db4:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
   13db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13dbc:	681b      	ldr	r3, [r3, #0]
   13dbe:	4618      	mov	r0, r3
   13dc0:	f04f 0100 	mov.w	r1, #0
   13dc4:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   13dc8:	f004 f9e2 	bl	18190 <__aeabi_fmul>
   13dcc:	4603      	mov	r3, r0
   13dce:	4618      	mov	r0, r3
   13dd0:	f003 fd4a 	bl	17868 <__aeabi_f2d>
   13dd4:	4602      	mov	r2, r0
   13dd6:	460b      	mov	r3, r1
   13dd8:	f04f 0000 	mov.w	r0, #0
   13ddc:	f04f 0100 	mov.w	r1, #0
   13de0:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13de4:	f003 febe 	bl	17b64 <__aeabi_ddiv>
   13de8:	4602      	mov	r2, r0
   13dea:	460b      	mov	r3, r1
   13dec:	4620      	mov	r0, r4
   13dee:	4629      	mov	r1, r5
   13df0:	f003 fbdc 	bl	175ac <__adddf3>
   13df4:	4602      	mov	r2, r0
   13df6:	460b      	mov	r3, r1
   13df8:	4610      	mov	r0, r2
   13dfa:	4619      	mov	r1, r3
   13dfc:	f004 f86a 	bl	17ed4 <__aeabi_d2f>
   13e00:	4603      	mov	r3, r0
   13e02:	60bb      	str	r3, [r7, #8]
   13e04:	f240 4328 	movw	r3, #1064	; 0x428
   13e08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e0c:	68db      	ldr	r3, [r3, #12]
   13e0e:	4618      	mov	r0, r3
   13e10:	f003 fd2a 	bl	17868 <__aeabi_f2d>
   13e14:	4604      	mov	r4, r0
   13e16:	460d      	mov	r5, r1
   13e18:	68b8      	ldr	r0, [r7, #8]
   13e1a:	f003 fd25 	bl	17868 <__aeabi_f2d>
   13e1e:	4602      	mov	r2, r0
   13e20:	460b      	mov	r3, r1
   13e22:	4610      	mov	r0, r2
   13e24:	4619      	mov	r1, r3
   13e26:	a388      	add	r3, pc, #544	; (adr r3, 14048 <auto_nav+0x1d80>)
   13e28:	e9d3 2300 	ldrd	r2, r3, [r3]
   13e2c:	f003 fbbe 	bl	175ac <__adddf3>
   13e30:	4602      	mov	r2, r0
   13e32:	460b      	mov	r3, r1
   13e34:	4610      	mov	r0, r2
   13e36:	4619      	mov	r1, r3
   13e38:	f001 fe26 	bl	15a88 <pp_sin>
   13e3c:	4602      	mov	r2, r0
   13e3e:	460b      	mov	r3, r1
   13e40:	4610      	mov	r0, r2
   13e42:	4619      	mov	r1, r3
   13e44:	f04f 0200 	mov.w	r2, #0
   13e48:	f04f 0300 	mov.w	r3, #0
   13e4c:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13e50:	f003 fd5e 	bl	17910 <__aeabi_dmul>
   13e54:	4602      	mov	r2, r0
   13e56:	460b      	mov	r3, r1
   13e58:	4620      	mov	r0, r4
   13e5a:	4629      	mov	r1, r5
   13e5c:	f003 fba6 	bl	175ac <__adddf3>
   13e60:	4602      	mov	r2, r0
   13e62:	460b      	mov	r3, r1
   13e64:	4610      	mov	r0, r2
   13e66:	4619      	mov	r1, r3
   13e68:	f004 f834 	bl	17ed4 <__aeabi_d2f>
   13e6c:	4606      	mov	r6, r0
   13e6e:	f240 4328 	movw	r3, #1064	; 0x428
   13e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e76:	691b      	ldr	r3, [r3, #16]
   13e78:	4618      	mov	r0, r3
   13e7a:	f003 fcf5 	bl	17868 <__aeabi_f2d>
   13e7e:	4604      	mov	r4, r0
   13e80:	460d      	mov	r5, r1
   13e82:	68b8      	ldr	r0, [r7, #8]
   13e84:	f003 fcf0 	bl	17868 <__aeabi_f2d>
   13e88:	4602      	mov	r2, r0
   13e8a:	460b      	mov	r3, r1
   13e8c:	4610      	mov	r0, r2
   13e8e:	4619      	mov	r1, r3
   13e90:	f001 fdfa 	bl	15a88 <pp_sin>
   13e94:	4602      	mov	r2, r0
   13e96:	460b      	mov	r3, r1
   13e98:	4610      	mov	r0, r2
   13e9a:	4619      	mov	r1, r3
   13e9c:	f04f 0200 	mov.w	r2, #0
   13ea0:	f04f 0300 	mov.w	r3, #0
   13ea4:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13ea8:	f003 fd32 	bl	17910 <__aeabi_dmul>
   13eac:	4602      	mov	r2, r0
   13eae:	460b      	mov	r3, r1
   13eb0:	4620      	mov	r0, r4
   13eb2:	4629      	mov	r1, r5
   13eb4:	f003 fb7a 	bl	175ac <__adddf3>
   13eb8:	4602      	mov	r2, r0
   13eba:	460b      	mov	r3, r1
   13ebc:	4610      	mov	r0, r2
   13ebe:	4619      	mov	r1, r3
   13ec0:	f004 f808 	bl	17ed4 <__aeabi_d2f>
   13ec4:	4603      	mov	r3, r0
   13ec6:	4630      	mov	r0, r6
   13ec8:	4619      	mov	r1, r3
   13eca:	f000 fbc1 	bl	14650 <fly_to_xy>
   13ece:	68b8      	ldr	r0, [r7, #8]
   13ed0:	f003 fcca 	bl	17868 <__aeabi_f2d>
   13ed4:	4602      	mov	r2, r0
   13ed6:	460b      	mov	r3, r1
   13ed8:	a15b      	add	r1, pc, #364	; (adr r1, 14048 <auto_nav+0x1d80>)
   13eda:	e9d1 0100 	ldrd	r0, r1, [r1]
   13ede:	f003 fb63 	bl	175a8 <__aeabi_dsub>
   13ee2:	4602      	mov	r2, r0
   13ee4:	460b      	mov	r3, r1
   13ee6:	4610      	mov	r0, r2
   13ee8:	4619      	mov	r1, r3
   13eea:	a359      	add	r3, pc, #356	; (adr r3, 14050 <auto_nav+0x1d88>)
   13eec:	e9d3 2300 	ldrd	r2, r3, [r3]
   13ef0:	f003 fe38 	bl	17b64 <__aeabi_ddiv>
   13ef4:	4602      	mov	r2, r0
   13ef6:	460b      	mov	r3, r1
   13ef8:	4610      	mov	r0, r2
   13efa:	4619      	mov	r1, r3
   13efc:	f04f 0200 	mov.w	r2, #0
   13f00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13f04:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13f08:	f003 fd02 	bl	17910 <__aeabi_dmul>
   13f0c:	4602      	mov	r2, r0
   13f0e:	460b      	mov	r3, r1
   13f10:	4610      	mov	r0, r2
   13f12:	4619      	mov	r1, r3
   13f14:	f003 ffde 	bl	17ed4 <__aeabi_d2f>
   13f18:	4602      	mov	r2, r0
   13f1a:	f24b 2344 	movw	r3, #45636	; 0xb244
   13f1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f22:	601a      	str	r2, [r3, #0]
   13f24:	e012      	b.n	13f4c <auto_nav+0x1c84>
   13f26:	f24b 2344 	movw	r3, #45636	; 0xb244
   13f2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f2e:	681b      	ldr	r3, [r3, #0]
   13f30:	4618      	mov	r0, r3
   13f32:	f04f 0100 	mov.w	r1, #0
   13f36:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13f3a:	f004 f821 	bl	17f80 <__addsf3>
   13f3e:	4603      	mov	r3, r0
   13f40:	461a      	mov	r2, r3
   13f42:	f24b 2344 	movw	r3, #45636	; 0xb244
   13f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f4a:	601a      	str	r2, [r3, #0]
   13f4c:	f24b 2344 	movw	r3, #45636	; 0xb244
   13f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f54:	681b      	ldr	r3, [r3, #0]
   13f56:	4618      	mov	r0, r3
   13f58:	f04f 0100 	mov.w	r1, #0
   13f5c:	f004 fab6 	bl	184cc <__aeabi_fcmplt>
   13f60:	4603      	mov	r3, r0
   13f62:	2b00      	cmp	r3, #0
   13f64:	d1df      	bne.n	13f26 <auto_nav+0x1c5e>
   13f66:	e012      	b.n	13f8e <auto_nav+0x1cc6>
   13f68:	f24b 2344 	movw	r3, #45636	; 0xb244
   13f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f70:	681b      	ldr	r3, [r3, #0]
   13f72:	4618      	mov	r0, r3
   13f74:	f04f 0100 	mov.w	r1, #0
   13f78:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13f7c:	f003 fffe 	bl	17f7c <__aeabi_fsub>
   13f80:	4603      	mov	r3, r0
   13f82:	461a      	mov	r2, r3
   13f84:	f24b 2344 	movw	r3, #45636	; 0xb244
   13f88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f8c:	601a      	str	r2, [r3, #0]
   13f8e:	f24b 2344 	movw	r3, #45636	; 0xb244
   13f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f96:	681b      	ldr	r3, [r3, #0]
   13f98:	4618      	mov	r0, r3
   13f9a:	f04f 0100 	mov.w	r1, #0
   13f9e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13fa2:	f004 faa7 	bl	184f4 <__aeabi_fcmpge>
   13fa6:	4603      	mov	r3, r0
   13fa8:	2b00      	cmp	r3, #0
   13faa:	d1dd      	bne.n	13f68 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
   13fac:	f24b 2344 	movw	r3, #45636	; 0xb244
   13fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fb4:	681b      	ldr	r3, [r3, #0]
   13fb6:	4618      	mov	r0, r3
   13fb8:	f04f 0100 	mov.w	r1, #0
   13fbc:	f004 faa4 	bl	18508 <__aeabi_fcmpgt>
   13fc0:	4603      	mov	r3, r0
   13fc2:	2b00      	cmp	r3, #0
   13fc4:	d100      	bne.n	13fc8 <auto_nav+0x1d00>
        return;
   13fc6:	e251      	b.n	1446c <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   13fc8:	f24b 2344 	movw	r3, #45636	; 0xb244
   13fcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fd0:	681b      	ldr	r3, [r3, #0]
   13fd2:	4618      	mov	r0, r3
   13fd4:	f04f 0100 	mov.w	r1, #0
   13fd8:	f2c4 1120 	movt	r1, #16672	; 0x4120
   13fdc:	f004 fa76 	bl	184cc <__aeabi_fcmplt>
   13fe0:	4603      	mov	r3, r0
   13fe2:	2b00      	cmp	r3, #0
   13fe4:	d100      	bne.n	13fe8 <auto_nav+0x1d20>
        return;
   13fe6:	e241      	b.n	1446c <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   13fe8:	f24b 2328 	movw	r3, #45608	; 0xb228
   13fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ff0:	781b      	ldrb	r3, [r3, #0]
   13ff2:	3301      	adds	r3, #1
   13ff4:	b2da      	uxtb	r2, r3
   13ff6:	f24b 2328 	movw	r3, #45608	; 0xb228
   13ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ffe:	701a      	strb	r2, [r3, #0]
   14000:	f24b 4384 	movw	r3, #46212	; 0xb484
   14004:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14008:	681a      	ldr	r2, [r3, #0]
   1400a:	f24b 232c 	movw	r3, #45612	; 0xb22c
   1400e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14012:	601a      	str	r2, [r3, #0]
   14014:	f24b 4388 	movw	r3, #46216	; 0xb488
   14018:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1401c:	681a      	ldr	r2, [r3, #0]
   1401e:	f24b 2330 	movw	r3, #45616	; 0xb230
   14022:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14026:	601a      	str	r2, [r3, #0]
   14028:	f24b 233c 	movw	r3, #45628	; 0xb23c
   1402c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14030:	2200      	movs	r2, #0
   14032:	801a      	strh	r2, [r3, #0]
   14034:	f24b 2340 	movw	r3, #45632	; 0xb240
   14038:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1403c:	f04f 0200 	mov.w	r2, #0
   14040:	601a      	str	r2, [r3, #0]
   14042:	e213      	b.n	1446c <auto_nav+0x21a4>
   14044:	f3af 8000 	nop.w
   14048:	54442d18 	.word	0x54442d18
   1404c:	3ff921fb 	.word	0x3ff921fb
   14050:	54442d18 	.word	0x54442d18
   14054:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
   14058:	f24b 2328 	movw	r3, #45608	; 0xb228
   1405c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14060:	781b      	ldrb	r3, [r3, #0]
   14062:	2b02      	cmp	r3, #2
   14064:	f040 81ad 	bne.w	143c2 <auto_nav+0x20fa>
    {
         nav_stage = 2;
   14068:	f24b 2328 	movw	r3, #45608	; 0xb228
   1406c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14070:	2202      	movs	r2, #2
   14072:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
   14074:	f64a 63b7 	movw	r3, #44727	; 0xaeb7
   14078:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1407c:	2200      	movs	r2, #0
   1407e:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   14080:	f24b 2354 	movw	r3, #45652	; 0xb254
   14084:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14088:	f04f 0200 	mov.w	r2, #0
   1408c:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1408e:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   14092:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14096:	2203      	movs	r2, #3
   14098:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
   1409a:	f240 4328 	movw	r3, #1064	; 0x428
   1409e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   140a4:	f240 4324 	movw	r3, #1060	; 0x424
   140a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140ac:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
   140ae:	f24b 231c 	movw	r3, #45596	; 0xb21c
   140b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140b6:	f04f 0200 	mov.w	r2, #0
   140ba:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
   140bc:	f24b 4388 	movw	r3, #46216	; 0xb488
   140c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140c4:	681a      	ldr	r2, [r3, #0]
   140c6:	f240 4328 	movw	r3, #1064	; 0x428
   140ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   140d0:	4610      	mov	r0, r2
   140d2:	4619      	mov	r1, r3
   140d4:	f003 ff52 	bl	17f7c <__aeabi_fsub>
   140d8:	4603      	mov	r3, r0
   140da:	4618      	mov	r0, r3
   140dc:	f003 fbc4 	bl	17868 <__aeabi_f2d>
   140e0:	4604      	mov	r4, r0
   140e2:	460d      	mov	r5, r1
   140e4:	f24b 4384 	movw	r3, #46212	; 0xb484
   140e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140ec:	681a      	ldr	r2, [r3, #0]
   140ee:	f240 4328 	movw	r3, #1064	; 0x428
   140f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   140f8:	4610      	mov	r0, r2
   140fa:	4619      	mov	r1, r3
   140fc:	f003 ff3e 	bl	17f7c <__aeabi_fsub>
   14100:	4603      	mov	r3, r0
   14102:	4618      	mov	r0, r3
   14104:	f003 fbb0 	bl	17868 <__aeabi_f2d>
   14108:	4602      	mov	r2, r0
   1410a:	460b      	mov	r3, r1
   1410c:	4620      	mov	r0, r4
   1410e:	4629      	mov	r1, r5
   14110:	f001 fbfa 	bl	15908 <pp_atan2>
   14114:	4602      	mov	r2, r0
   14116:	460b      	mov	r3, r1
   14118:	4610      	mov	r0, r2
   1411a:	4619      	mov	r1, r3
   1411c:	f003 feda 	bl	17ed4 <__aeabi_d2f>
   14120:	4603      	mov	r3, r0
   14122:	607b      	str	r3, [r7, #4]
   14124:	6878      	ldr	r0, [r7, #4]
   14126:	f003 fb9f 	bl	17868 <__aeabi_f2d>
   1412a:	4604      	mov	r4, r0
   1412c:	460d      	mov	r5, r1
   1412e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
   14132:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14136:	681b      	ldr	r3, [r3, #0]
   14138:	4618      	mov	r0, r3
   1413a:	f04f 0100 	mov.w	r1, #0
   1413e:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   14142:	f004 f825 	bl	18190 <__aeabi_fmul>
   14146:	4603      	mov	r3, r0
   14148:	4618      	mov	r0, r3
   1414a:	f003 fb8d 	bl	17868 <__aeabi_f2d>
   1414e:	4602      	mov	r2, r0
   14150:	460b      	mov	r3, r1
   14152:	f04f 0000 	mov.w	r0, #0
   14156:	f04f 0100 	mov.w	r1, #0
   1415a:	f2c4 0114 	movt	r1, #16404	; 0x4014
   1415e:	f003 fd01 	bl	17b64 <__aeabi_ddiv>
   14162:	4602      	mov	r2, r0
   14164:	460b      	mov	r3, r1
   14166:	4620      	mov	r0, r4
   14168:	4629      	mov	r1, r5
   1416a:	f003 fa1f 	bl	175ac <__adddf3>
   1416e:	4602      	mov	r2, r0
   14170:	460b      	mov	r3, r1
   14172:	4610      	mov	r0, r2
   14174:	4619      	mov	r1, r3
   14176:	f003 fead 	bl	17ed4 <__aeabi_d2f>
   1417a:	4603      	mov	r3, r0
   1417c:	603b      	str	r3, [r7, #0]
   1417e:	f240 4328 	movw	r3, #1064	; 0x428
   14182:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14188:	4618      	mov	r0, r3
   1418a:	f003 fb6d 	bl	17868 <__aeabi_f2d>
   1418e:	4604      	mov	r4, r0
   14190:	460d      	mov	r5, r1
   14192:	6838      	ldr	r0, [r7, #0]
   14194:	f003 fb68 	bl	17868 <__aeabi_f2d>
   14198:	4602      	mov	r2, r0
   1419a:	460b      	mov	r3, r1
   1419c:	4610      	mov	r0, r2
   1419e:	4619      	mov	r1, r3
   141a0:	a3b5      	add	r3, pc, #724	; (adr r3, 14478 <auto_nav+0x21b0>)
   141a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   141a6:	f003 fa01 	bl	175ac <__adddf3>
   141aa:	4602      	mov	r2, r0
   141ac:	460b      	mov	r3, r1
   141ae:	4610      	mov	r0, r2
   141b0:	4619      	mov	r1, r3
   141b2:	f001 fc69 	bl	15a88 <pp_sin>
   141b6:	4602      	mov	r2, r0
   141b8:	460b      	mov	r3, r1
   141ba:	4610      	mov	r0, r2
   141bc:	4619      	mov	r1, r3
   141be:	f04f 0200 	mov.w	r2, #0
   141c2:	f04f 0300 	mov.w	r3, #0
   141c6:	f2c4 0359 	movt	r3, #16473	; 0x4059
   141ca:	f003 fba1 	bl	17910 <__aeabi_dmul>
   141ce:	4602      	mov	r2, r0
   141d0:	460b      	mov	r3, r1
   141d2:	4620      	mov	r0, r4
   141d4:	4629      	mov	r1, r5
   141d6:	f003 f9e9 	bl	175ac <__adddf3>
   141da:	4602      	mov	r2, r0
   141dc:	460b      	mov	r3, r1
   141de:	4610      	mov	r0, r2
   141e0:	4619      	mov	r1, r3
   141e2:	f003 fe77 	bl	17ed4 <__aeabi_d2f>
   141e6:	4606      	mov	r6, r0
   141e8:	f240 4328 	movw	r3, #1064	; 0x428
   141ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   141f2:	4618      	mov	r0, r3
   141f4:	f003 fb38 	bl	17868 <__aeabi_f2d>
   141f8:	4604      	mov	r4, r0
   141fa:	460d      	mov	r5, r1
   141fc:	6838      	ldr	r0, [r7, #0]
   141fe:	f003 fb33 	bl	17868 <__aeabi_f2d>
   14202:	4602      	mov	r2, r0
   14204:	460b      	mov	r3, r1
   14206:	4610      	mov	r0, r2
   14208:	4619      	mov	r1, r3
   1420a:	f001 fc3d 	bl	15a88 <pp_sin>
   1420e:	4602      	mov	r2, r0
   14210:	460b      	mov	r3, r1
   14212:	4610      	mov	r0, r2
   14214:	4619      	mov	r1, r3
   14216:	f04f 0200 	mov.w	r2, #0
   1421a:	f04f 0300 	mov.w	r3, #0
   1421e:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14222:	f003 fb75 	bl	17910 <__aeabi_dmul>
   14226:	4602      	mov	r2, r0
   14228:	460b      	mov	r3, r1
   1422a:	4620      	mov	r0, r4
   1422c:	4629      	mov	r1, r5
   1422e:	f003 f9bd 	bl	175ac <__adddf3>
   14232:	4602      	mov	r2, r0
   14234:	460b      	mov	r3, r1
   14236:	4610      	mov	r0, r2
   14238:	4619      	mov	r1, r3
   1423a:	f003 fe4b 	bl	17ed4 <__aeabi_d2f>
   1423e:	4603      	mov	r3, r0
   14240:	4630      	mov	r0, r6
   14242:	4619      	mov	r1, r3
   14244:	f000 fa04 	bl	14650 <fly_to_xy>
   14248:	6838      	ldr	r0, [r7, #0]
   1424a:	f003 fb0d 	bl	17868 <__aeabi_f2d>
   1424e:	4602      	mov	r2, r0
   14250:	460b      	mov	r3, r1
   14252:	a189      	add	r1, pc, #548	; (adr r1, 14478 <auto_nav+0x21b0>)
   14254:	e9d1 0100 	ldrd	r0, r1, [r1]
   14258:	f003 f9a6 	bl	175a8 <__aeabi_dsub>
   1425c:	4602      	mov	r2, r0
   1425e:	460b      	mov	r3, r1
   14260:	4610      	mov	r0, r2
   14262:	4619      	mov	r1, r3
   14264:	a386      	add	r3, pc, #536	; (adr r3, 14480 <auto_nav+0x21b8>)
   14266:	e9d3 2300 	ldrd	r2, r3, [r3]
   1426a:	f003 fc7b 	bl	17b64 <__aeabi_ddiv>
   1426e:	4602      	mov	r2, r0
   14270:	460b      	mov	r3, r1
   14272:	4610      	mov	r0, r2
   14274:	4619      	mov	r1, r3
   14276:	f04f 0200 	mov.w	r2, #0
   1427a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1427e:	f2c4 0366 	movt	r3, #16486	; 0x4066
   14282:	f003 fb45 	bl	17910 <__aeabi_dmul>
   14286:	4602      	mov	r2, r0
   14288:	460b      	mov	r3, r1
   1428a:	4610      	mov	r0, r2
   1428c:	4619      	mov	r1, r3
   1428e:	f003 fe21 	bl	17ed4 <__aeabi_d2f>
   14292:	4602      	mov	r2, r0
   14294:	f24b 2344 	movw	r3, #45636	; 0xb244
   14298:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1429c:	601a      	str	r2, [r3, #0]
   1429e:	e012      	b.n	142c6 <auto_nav+0x1ffe>
   142a0:	f24b 2344 	movw	r3, #45636	; 0xb244
   142a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142a8:	681b      	ldr	r3, [r3, #0]
   142aa:	4618      	mov	r0, r3
   142ac:	f04f 0100 	mov.w	r1, #0
   142b0:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   142b4:	f003 fe64 	bl	17f80 <__addsf3>
   142b8:	4603      	mov	r3, r0
   142ba:	461a      	mov	r2, r3
   142bc:	f24b 2344 	movw	r3, #45636	; 0xb244
   142c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142c4:	601a      	str	r2, [r3, #0]
   142c6:	f24b 2344 	movw	r3, #45636	; 0xb244
   142ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142ce:	681b      	ldr	r3, [r3, #0]
   142d0:	4618      	mov	r0, r3
   142d2:	f04f 0100 	mov.w	r1, #0
   142d6:	f004 f8f9 	bl	184cc <__aeabi_fcmplt>
   142da:	4603      	mov	r3, r0
   142dc:	2b00      	cmp	r3, #0
   142de:	d1df      	bne.n	142a0 <auto_nav+0x1fd8>
   142e0:	e012      	b.n	14308 <auto_nav+0x2040>
   142e2:	f24b 2344 	movw	r3, #45636	; 0xb244
   142e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142ea:	681b      	ldr	r3, [r3, #0]
   142ec:	4618      	mov	r0, r3
   142ee:	f04f 0100 	mov.w	r1, #0
   142f2:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   142f6:	f003 fe41 	bl	17f7c <__aeabi_fsub>
   142fa:	4603      	mov	r3, r0
   142fc:	461a      	mov	r2, r3
   142fe:	f24b 2344 	movw	r3, #45636	; 0xb244
   14302:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14306:	601a      	str	r2, [r3, #0]
   14308:	f24b 2344 	movw	r3, #45636	; 0xb244
   1430c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14310:	681b      	ldr	r3, [r3, #0]
   14312:	4618      	mov	r0, r3
   14314:	f04f 0100 	mov.w	r1, #0
   14318:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1431c:	f004 f8ea 	bl	184f4 <__aeabi_fcmpge>
   14320:	4603      	mov	r3, r0
   14322:	2b00      	cmp	r3, #0
   14324:	d1dd      	bne.n	142e2 <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
   14326:	f24b 2344 	movw	r3, #45636	; 0xb244
   1432a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1432e:	681b      	ldr	r3, [r3, #0]
   14330:	4618      	mov	r0, r3
   14332:	f04f 0100 	mov.w	r1, #0
   14336:	f2c4 3134 	movt	r1, #17204	; 0x4334
   1433a:	f004 f8e5 	bl	18508 <__aeabi_fcmpgt>
   1433e:	4603      	mov	r3, r0
   14340:	2b00      	cmp	r3, #0
   14342:	d100      	bne.n	14346 <auto_nav+0x207e>
          return;
   14344:	e092      	b.n	1446c <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   14346:	f24b 2344 	movw	r3, #45636	; 0xb244
   1434a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1434e:	681b      	ldr	r3, [r3, #0]
   14350:	4618      	mov	r0, r3
   14352:	f04f 0100 	mov.w	r1, #0
   14356:	f2c4 313e 	movt	r1, #17214	; 0x433e
   1435a:	f004 f8b7 	bl	184cc <__aeabi_fcmplt>
   1435e:	4603      	mov	r3, r0
   14360:	2b00      	cmp	r3, #0
   14362:	d100      	bne.n	14366 <auto_nav+0x209e>
          return;
   14364:	e082      	b.n	1446c <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   14366:	f24b 2328 	movw	r3, #45608	; 0xb228
   1436a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1436e:	781b      	ldrb	r3, [r3, #0]
   14370:	3301      	adds	r3, #1
   14372:	b2da      	uxtb	r2, r3
   14374:	f24b 2328 	movw	r3, #45608	; 0xb228
   14378:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1437c:	701a      	strb	r2, [r3, #0]
   1437e:	f24b 4384 	movw	r3, #46212	; 0xb484
   14382:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14386:	681a      	ldr	r2, [r3, #0]
   14388:	f24b 232c 	movw	r3, #45612	; 0xb22c
   1438c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14390:	601a      	str	r2, [r3, #0]
   14392:	f24b 4388 	movw	r3, #46216	; 0xb488
   14396:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1439a:	681a      	ldr	r2, [r3, #0]
   1439c:	f24b 2330 	movw	r3, #45616	; 0xb230
   143a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143a4:	601a      	str	r2, [r3, #0]
   143a6:	f24b 233c 	movw	r3, #45628	; 0xb23c
   143aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143ae:	2200      	movs	r2, #0
   143b0:	801a      	strh	r2, [r3, #0]
   143b2:	f24b 2340 	movw	r3, #45632	; 0xb240
   143b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143ba:	f04f 0200 	mov.w	r2, #0
   143be:	601a      	str	r2, [r3, #0]
   143c0:	e054      	b.n	1446c <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
   143c2:	f24b 2328 	movw	r3, #45608	; 0xb228
   143c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143ca:	781b      	ldrb	r3, [r3, #0]
   143cc:	2b03      	cmp	r3, #3
   143ce:	d106      	bne.n	143de <auto_nav+0x2116>
    {
	  nav_stage = 3;
   143d0:	f24b 2328 	movw	r3, #45608	; 0xb228
   143d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143d8:	2203      	movs	r2, #3
   143da:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
   143dc:	e44b      	b.n	13c76 <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
   143de:	f24b 2328 	movw	r3, #45608	; 0xb228
   143e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143e6:	781b      	ldrb	r3, [r3, #0]
   143e8:	2b04      	cmp	r3, #4
   143ea:	d13f      	bne.n	1446c <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
   143ec:	f24b 2328 	movw	r3, #45608	; 0xb228
   143f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143f4:	2204      	movs	r2, #4
   143f6:	701a      	strb	r2, [r3, #0]
        NextBlock()
   143f8:	f24b 2329 	movw	r3, #45609	; 0xb229
   143fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14400:	781b      	ldrb	r3, [r3, #0]
   14402:	3301      	adds	r3, #1
   14404:	b2da      	uxtb	r2, r3
   14406:	f24b 2329 	movw	r3, #45609	; 0xb229
   1440a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1440e:	701a      	strb	r2, [r3, #0]
   14410:	f24b 2328 	movw	r3, #45608	; 0xb228
   14414:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14418:	2200      	movs	r2, #0
   1441a:	701a      	strb	r2, [r3, #0]
   1441c:	f24b 233e 	movw	r3, #45630	; 0xb23e
   14420:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14424:	2200      	movs	r2, #0
   14426:	801a      	strh	r2, [r3, #0]
   14428:	f24b 4384 	movw	r3, #46212	; 0xb484
   1442c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14430:	681a      	ldr	r2, [r3, #0]
   14432:	f24b 232c 	movw	r3, #45612	; 0xb22c
   14436:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1443a:	601a      	str	r2, [r3, #0]
   1443c:	f24b 4388 	movw	r3, #46216	; 0xb488
   14440:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14444:	681a      	ldr	r2, [r3, #0]
   14446:	f24b 2330 	movw	r3, #45616	; 0xb230
   1444a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1444e:	601a      	str	r2, [r3, #0]
   14450:	f24b 233c 	movw	r3, #45628	; 0xb23c
   14454:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14458:	2200      	movs	r2, #0
   1445a:	801a      	strh	r2, [r3, #0]
   1445c:	f24b 2340 	movw	r3, #45632	; 0xb240
   14460:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14464:	f04f 0200 	mov.w	r2, #0
   14468:	601a      	str	r2, [r3, #0]
   1446a:	bf00      	nop
    else { }
}
else { }

//#endif
}
   1446c:	372c      	adds	r7, #44	; 0x2c
   1446e:	46bd      	mov	sp, r7
   14470:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14472:	bf00      	nop
   14474:	f3af 8000 	nop.w
   14478:	54442d18 	.word	0x54442d18
   1447c:	3ff921fb 	.word	0x3ff921fb
   14480:	54442d18 	.word	0x54442d18
   14484:	400921fb 	.word	0x400921fb

00014488 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
   14488:	b590      	push	{r4, r7, lr}
   1448a:	b087      	sub	sp, #28
   1448c:	af00      	add	r7, sp, #0
   1448e:	4603      	mov	r3, r0
   14490:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
   14492:	79f9      	ldrb	r1, [r7, #7]
   14494:	f240 4228 	movw	r2, #1064	; 0x428
   14498:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1449c:	460b      	mov	r3, r1
   1449e:	005b      	lsls	r3, r3, #1
   144a0:	440b      	add	r3, r1
   144a2:	009b      	lsls	r3, r3, #2
   144a4:	4413      	add	r3, r2
   144a6:	681a      	ldr	r2, [r3, #0]
   144a8:	f24b 4384 	movw	r3, #46212	; 0xb484
   144ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144b0:	681b      	ldr	r3, [r3, #0]
   144b2:	4610      	mov	r0, r2
   144b4:	4619      	mov	r1, r3
   144b6:	f003 fd61 	bl	17f7c <__aeabi_fsub>
   144ba:	4603      	mov	r3, r0
   144bc:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
   144be:	79f9      	ldrb	r1, [r7, #7]
   144c0:	f240 4228 	movw	r2, #1064	; 0x428
   144c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   144c8:	460b      	mov	r3, r1
   144ca:	005b      	lsls	r3, r3, #1
   144cc:	440b      	add	r3, r1
   144ce:	009b      	lsls	r3, r3, #2
   144d0:	4413      	add	r3, r2
   144d2:	3304      	adds	r3, #4
   144d4:	681a      	ldr	r2, [r3, #0]
   144d6:	f24b 4388 	movw	r3, #46216	; 0xb488
   144da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144de:	681b      	ldr	r3, [r3, #0]
   144e0:	4610      	mov	r0, r2
   144e2:	4619      	mov	r1, r3
   144e4:	f003 fd4a 	bl	17f7c <__aeabi_fsub>
   144e8:	4603      	mov	r3, r0
   144ea:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
   144ec:	6978      	ldr	r0, [r7, #20]
   144ee:	6979      	ldr	r1, [r7, #20]
   144f0:	f003 fe4e 	bl	18190 <__aeabi_fmul>
   144f4:	4603      	mov	r3, r0
   144f6:	461c      	mov	r4, r3
   144f8:	6938      	ldr	r0, [r7, #16]
   144fa:	6939      	ldr	r1, [r7, #16]
   144fc:	f003 fe48 	bl	18190 <__aeabi_fmul>
   14500:	4603      	mov	r3, r0
   14502:	4620      	mov	r0, r4
   14504:	4619      	mov	r1, r3
   14506:	f003 fd3b 	bl	17f80 <__addsf3>
   1450a:	4603      	mov	r3, r0
   1450c:	461a      	mov	r2, r3
   1450e:	f24b 235c 	movw	r3, #45660	; 0xb25c
   14512:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14516:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
   14518:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
   1451c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14520:	681b      	ldr	r3, [r3, #0]
   14522:	4618      	mov	r0, r3
   14524:	f04f 0100 	mov.w	r1, #0
   14528:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   1452c:	f003 fe30 	bl	18190 <__aeabi_fmul>
   14530:	4603      	mov	r3, r0
   14532:	461a      	mov	r2, r3
   14534:	f24b 2368 	movw	r3, #45672	; 0xb268
   14538:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1453c:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
   1453e:	f24b 2368 	movw	r3, #45672	; 0xb268
   14542:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14546:	681b      	ldr	r3, [r3, #0]
   14548:	4618      	mov	r0, r3
   1454a:	f04f 0100 	mov.w	r1, #0
   1454e:	f2c4 2120 	movt	r1, #16928	; 0x4220
   14552:	f003 ffbb 	bl	184cc <__aeabi_fcmplt>
   14556:	4603      	mov	r3, r0
   14558:	2b00      	cmp	r3, #0
   1455a:	d004      	beq.n	14566 <approaching+0xde>
   1455c:	f04f 0200 	mov.w	r2, #0
   14560:	f2c4 2220 	movt	r2, #16928	; 0x4220
   14564:	e004      	b.n	14570 <approaching+0xe8>
   14566:	f24b 2368 	movw	r3, #45672	; 0xb268
   1456a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1456e:	681a      	ldr	r2, [r3, #0]
   14570:	f24b 2368 	movw	r3, #45672	; 0xb268
   14574:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14578:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
   1457a:	f24b 2368 	movw	r3, #45672	; 0xb268
   1457e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14582:	681a      	ldr	r2, [r3, #0]
   14584:	f24b 2368 	movw	r3, #45672	; 0xb268
   14588:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1458c:	681b      	ldr	r3, [r3, #0]
   1458e:	4610      	mov	r0, r2
   14590:	4619      	mov	r1, r3
   14592:	f003 fdfd 	bl	18190 <__aeabi_fmul>
   14596:	4603      	mov	r3, r0
   14598:	461a      	mov	r2, r3
   1459a:	f24b 235c 	movw	r3, #45660	; 0xb25c
   1459e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145a2:	681b      	ldr	r3, [r3, #0]
   145a4:	4610      	mov	r0, r2
   145a6:	4619      	mov	r1, r3
   145a8:	f003 ffae 	bl	18508 <__aeabi_fcmpgt>
   145ac:	4603      	mov	r3, r0
   145ae:	2b00      	cmp	r3, #0
   145b0:	d001      	beq.n	145b6 <approaching+0x12e>
    return TRUE;
   145b2:	2301      	movs	r3, #1
   145b4:	e048      	b.n	14648 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
   145b6:	79f9      	ldrb	r1, [r7, #7]
   145b8:	f240 4228 	movw	r2, #1064	; 0x428
   145bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   145c0:	460b      	mov	r3, r1
   145c2:	005b      	lsls	r3, r3, #1
   145c4:	440b      	add	r3, r1
   145c6:	009b      	lsls	r3, r3, #2
   145c8:	4413      	add	r3, r2
   145ca:	681a      	ldr	r2, [r3, #0]
   145cc:	f24b 232c 	movw	r3, #45612	; 0xb22c
   145d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145d4:	681b      	ldr	r3, [r3, #0]
   145d6:	4610      	mov	r0, r2
   145d8:	4619      	mov	r1, r3
   145da:	f003 fccf 	bl	17f7c <__aeabi_fsub>
   145de:	4603      	mov	r3, r0
   145e0:	4618      	mov	r0, r3
   145e2:	6979      	ldr	r1, [r7, #20]
   145e4:	f003 fdd4 	bl	18190 <__aeabi_fmul>
   145e8:	4603      	mov	r3, r0
   145ea:	461c      	mov	r4, r3
   145ec:	79f9      	ldrb	r1, [r7, #7]
   145ee:	f240 4228 	movw	r2, #1064	; 0x428
   145f2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   145f6:	460b      	mov	r3, r1
   145f8:	005b      	lsls	r3, r3, #1
   145fa:	440b      	add	r3, r1
   145fc:	009b      	lsls	r3, r3, #2
   145fe:	4413      	add	r3, r2
   14600:	3304      	adds	r3, #4
   14602:	681a      	ldr	r2, [r3, #0]
   14604:	f24b 2330 	movw	r3, #45616	; 0xb230
   14608:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1460c:	681b      	ldr	r3, [r3, #0]
   1460e:	4610      	mov	r0, r2
   14610:	4619      	mov	r1, r3
   14612:	f003 fcb3 	bl	17f7c <__aeabi_fsub>
   14616:	4603      	mov	r3, r0
   14618:	4618      	mov	r0, r3
   1461a:	6939      	ldr	r1, [r7, #16]
   1461c:	f003 fdb8 	bl	18190 <__aeabi_fmul>
   14620:	4603      	mov	r3, r0
   14622:	4620      	mov	r0, r4
   14624:	4619      	mov	r1, r3
   14626:	f003 fcab 	bl	17f80 <__addsf3>
   1462a:	4603      	mov	r3, r0
   1462c:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
   1462e:	2301      	movs	r3, #1
   14630:	461c      	mov	r4, r3
   14632:	68f8      	ldr	r0, [r7, #12]
   14634:	f04f 0100 	mov.w	r1, #0
   14638:	f003 ff48 	bl	184cc <__aeabi_fcmplt>
   1463c:	4603      	mov	r3, r0
   1463e:	2b00      	cmp	r3, #0
   14640:	d101      	bne.n	14646 <approaching+0x1be>
   14642:	2300      	movs	r3, #0
   14644:	461c      	mov	r4, r3
   14646:	b2e3      	uxtb	r3, r4
}
   14648:	4618      	mov	r0, r3
   1464a:	371c      	adds	r7, #28
   1464c:	46bd      	mov	sp, r7
   1464e:	bd90      	pop	{r4, r7, pc}

00014650 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
   14650:	b5b0      	push	{r4, r5, r7, lr}
   14652:	b082      	sub	sp, #8
   14654:	af00      	add	r7, sp, #0
   14656:	6078      	str	r0, [r7, #4]
   14658:	6039      	str	r1, [r7, #0]
  desired_x = x;
   1465a:	f24b 2348 	movw	r3, #45640	; 0xb248
   1465e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14662:	687a      	ldr	r2, [r7, #4]
   14664:	601a      	str	r2, [r3, #0]
  desired_y = y;
   14666:	f24b 234c 	movw	r3, #45644	; 0xb24c
   1466a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1466e:	683a      	ldr	r2, [r7, #0]
   14670:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
   14672:	f24b 4388 	movw	r3, #46216	; 0xb488
   14676:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1467a:	681b      	ldr	r3, [r3, #0]
   1467c:	6838      	ldr	r0, [r7, #0]
   1467e:	4619      	mov	r1, r3
   14680:	f003 fc7c 	bl	17f7c <__aeabi_fsub>
   14684:	4603      	mov	r3, r0
   14686:	4618      	mov	r0, r3
   14688:	f003 f8ee 	bl	17868 <__aeabi_f2d>
   1468c:	4604      	mov	r4, r0
   1468e:	460d      	mov	r5, r1
   14690:	f24b 4384 	movw	r3, #46212	; 0xb484
   14694:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14698:	681b      	ldr	r3, [r3, #0]
   1469a:	6878      	ldr	r0, [r7, #4]
   1469c:	4619      	mov	r1, r3
   1469e:	f003 fc6d 	bl	17f7c <__aeabi_fsub>
   146a2:	4603      	mov	r3, r0
   146a4:	4618      	mov	r0, r3
   146a6:	f003 f8df 	bl	17868 <__aeabi_f2d>
   146aa:	4602      	mov	r2, r0
   146ac:	460b      	mov	r3, r1
   146ae:	4620      	mov	r0, r4
   146b0:	4629      	mov	r1, r5
   146b2:	f001 f929 	bl	15908 <pp_atan2>
   146b6:	4602      	mov	r2, r0
   146b8:	460b      	mov	r3, r1
   146ba:	a10b      	add	r1, pc, #44	; (adr r1, 146e8 <fly_to_xy+0x98>)
   146bc:	e9d1 0100 	ldrd	r0, r1, [r1]
   146c0:	f002 ff72 	bl	175a8 <__aeabi_dsub>
   146c4:	4602      	mov	r2, r0
   146c6:	460b      	mov	r3, r1
   146c8:	4610      	mov	r0, r2
   146ca:	4619      	mov	r1, r3
   146cc:	f003 fc02 	bl	17ed4 <__aeabi_d2f>
   146d0:	4602      	mov	r2, r0
   146d2:	f24b 2314 	movw	r3, #45588	; 0xb214
   146d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   146da:	601a      	str	r2, [r3, #0]
}
   146dc:	3708      	adds	r7, #8
   146de:	46bd      	mov	sp, r7
   146e0:	bdb0      	pop	{r4, r5, r7, pc}
   146e2:	bf00      	nop
   146e4:	f3af 8000 	nop.w
   146e8:	54442d18 	.word	0x54442d18
   146ec:	3ff921fb 	.word	0x3ff921fb

000146f0 <fly_to>:

static void fly_to(uint8_t wp) { 
   146f0:	b580      	push	{r7, lr}
   146f2:	b082      	sub	sp, #8
   146f4:	af00      	add	r7, sp, #0
   146f6:	4603      	mov	r3, r0
   146f8:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
   146fa:	79f9      	ldrb	r1, [r7, #7]
   146fc:	f240 4228 	movw	r2, #1064	; 0x428
   14700:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14704:	460b      	mov	r3, r1
   14706:	005b      	lsls	r3, r3, #1
   14708:	440b      	add	r3, r1
   1470a:	009b      	lsls	r3, r3, #2
   1470c:	4413      	add	r3, r2
   1470e:	6818      	ldr	r0, [r3, #0]
   14710:	79f9      	ldrb	r1, [r7, #7]
   14712:	f240 4228 	movw	r2, #1064	; 0x428
   14716:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1471a:	460b      	mov	r3, r1
   1471c:	005b      	lsls	r3, r3, #1
   1471e:	440b      	add	r3, r1
   14720:	009b      	lsls	r3, r3, #2
   14722:	4413      	add	r3, r2
   14724:	3304      	adds	r3, #4
   14726:	681b      	ldr	r3, [r3, #0]
   14728:	4619      	mov	r1, r3
   1472a:	f7ff ff91 	bl	14650 <fly_to_xy>
}
   1472e:	3708      	adds	r7, #8
   14730:	46bd      	mov	sp, r7
   14732:	bd80      	pop	{r7, pc}

00014734 <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
   14734:	b5b0      	push	{r4, r5, r7, lr}
   14736:	b088      	sub	sp, #32
   14738:	af00      	add	r7, sp, #0
   1473a:	4602      	mov	r2, r0
   1473c:	460b      	mov	r3, r1
   1473e:	71fa      	strb	r2, [r7, #7]
   14740:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
   14742:	79f9      	ldrb	r1, [r7, #7]
   14744:	f240 4228 	movw	r2, #1064	; 0x428
   14748:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1474c:	460b      	mov	r3, r1
   1474e:	005b      	lsls	r3, r3, #1
   14750:	440b      	add	r3, r1
   14752:	009b      	lsls	r3, r3, #2
   14754:	4413      	add	r3, r2
   14756:	681b      	ldr	r3, [r3, #0]
   14758:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
   1475a:	79f9      	ldrb	r1, [r7, #7]
   1475c:	f240 4228 	movw	r2, #1064	; 0x428
   14760:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14764:	460b      	mov	r3, r1
   14766:	005b      	lsls	r3, r3, #1
   14768:	440b      	add	r3, r1
   1476a:	009b      	lsls	r3, r3, #2
   1476c:	4413      	add	r3, r2
   1476e:	3304      	adds	r3, #4
   14770:	681b      	ldr	r3, [r3, #0]
   14772:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
   14774:	79b9      	ldrb	r1, [r7, #6]
   14776:	f240 4228 	movw	r2, #1064	; 0x428
   1477a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1477e:	460b      	mov	r3, r1
   14780:	005b      	lsls	r3, r3, #1
   14782:	440b      	add	r3, r1
   14784:	009b      	lsls	r3, r3, #2
   14786:	4413      	add	r3, r2
   14788:	681b      	ldr	r3, [r3, #0]
   1478a:	4618      	mov	r0, r3
   1478c:	69f9      	ldr	r1, [r7, #28]
   1478e:	f003 fbf5 	bl	17f7c <__aeabi_fsub>
   14792:	4603      	mov	r3, r0
   14794:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
   14796:	79b9      	ldrb	r1, [r7, #6]
   14798:	f240 4228 	movw	r2, #1064	; 0x428
   1479c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   147a0:	460b      	mov	r3, r1
   147a2:	005b      	lsls	r3, r3, #1
   147a4:	440b      	add	r3, r1
   147a6:	009b      	lsls	r3, r3, #2
   147a8:	4413      	add	r3, r2
   147aa:	3304      	adds	r3, #4
   147ac:	681b      	ldr	r3, [r3, #0]
   147ae:	4618      	mov	r0, r3
   147b0:	69b9      	ldr	r1, [r7, #24]
   147b2:	f003 fbe3 	bl	17f7c <__aeabi_fsub>
   147b6:	4603      	mov	r3, r0
   147b8:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
   147ba:	6978      	ldr	r0, [r7, #20]
   147bc:	6979      	ldr	r1, [r7, #20]
   147be:	f003 fce7 	bl	18190 <__aeabi_fmul>
   147c2:	4603      	mov	r3, r0
   147c4:	461c      	mov	r4, r3
   147c6:	6938      	ldr	r0, [r7, #16]
   147c8:	6939      	ldr	r1, [r7, #16]
   147ca:	f003 fce1 	bl	18190 <__aeabi_fmul>
   147ce:	4603      	mov	r3, r0
   147d0:	4620      	mov	r0, r4
   147d2:	4619      	mov	r1, r3
   147d4:	f003 fbd4 	bl	17f80 <__addsf3>
   147d8:	4603      	mov	r3, r0
   147da:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
   147dc:	f24b 4384 	movw	r3, #46212	; 0xb484
   147e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   147e4:	681b      	ldr	r3, [r3, #0]
   147e6:	4618      	mov	r0, r3
   147e8:	69f9      	ldr	r1, [r7, #28]
   147ea:	f003 fbc7 	bl	17f7c <__aeabi_fsub>
   147ee:	4603      	mov	r3, r0
   147f0:	4618      	mov	r0, r3
   147f2:	6979      	ldr	r1, [r7, #20]
   147f4:	f003 fccc 	bl	18190 <__aeabi_fmul>
   147f8:	4603      	mov	r3, r0
   147fa:	461c      	mov	r4, r3
   147fc:	f24b 4388 	movw	r3, #46216	; 0xb488
   14800:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14804:	681b      	ldr	r3, [r3, #0]
   14806:	4618      	mov	r0, r3
   14808:	69b9      	ldr	r1, [r7, #24]
   1480a:	f003 fbb7 	bl	17f7c <__aeabi_fsub>
   1480e:	4603      	mov	r3, r0
   14810:	4618      	mov	r0, r3
   14812:	6939      	ldr	r1, [r7, #16]
   14814:	f003 fcbc 	bl	18190 <__aeabi_fmul>
   14818:	4603      	mov	r3, r0
   1481a:	4620      	mov	r0, r4
   1481c:	4619      	mov	r1, r3
   1481e:	f003 fbaf 	bl	17f80 <__addsf3>
   14822:	4603      	mov	r3, r0
   14824:	4618      	mov	r0, r3
   14826:	68f9      	ldr	r1, [r7, #12]
   14828:	f003 fd66 	bl	182f8 <__aeabi_fdiv>
   1482c:	4603      	mov	r3, r0
   1482e:	461a      	mov	r2, r3
   14830:	f24b 236c 	movw	r3, #45676	; 0xb26c
   14834:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14838:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
   1483a:	f24b 236c 	movw	r3, #45676	; 0xb26c
   1483e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14842:	681b      	ldr	r3, [r3, #0]
   14844:	4618      	mov	r0, r3
   14846:	f04f 0100 	mov.w	r1, #0
   1484a:	f003 fe53 	bl	184f4 <__aeabi_fcmpge>
   1484e:	4603      	mov	r3, r0
   14850:	2b00      	cmp	r3, #0
   14852:	d005      	beq.n	14860 <route_to+0x12c>
   14854:	f24b 236c 	movw	r3, #45676	; 0xb26c
   14858:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1485c:	681a      	ldr	r2, [r3, #0]
   1485e:	e001      	b.n	14864 <route_to+0x130>
   14860:	f04f 0200 	mov.w	r2, #0
   14864:	f24b 236c 	movw	r3, #45676	; 0xb26c
   14868:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1486c:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
   1486e:	68f8      	ldr	r0, [r7, #12]
   14870:	f002 fffa 	bl	17868 <__aeabi_f2d>
   14874:	4602      	mov	r2, r0
   14876:	460b      	mov	r3, r1
   14878:	4610      	mov	r0, r2
   1487a:	4619      	mov	r1, r3
   1487c:	f001 f9f4 	bl	15c68 <pp_sqrt>
   14880:	4602      	mov	r2, r0
   14882:	460b      	mov	r3, r1
   14884:	4610      	mov	r0, r2
   14886:	4619      	mov	r1, r3
   14888:	f003 fb24 	bl	17ed4 <__aeabi_d2f>
   1488c:	4602      	mov	r2, r0
   1488e:	f24b 2370 	movw	r3, #45680	; 0xb270
   14892:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14896:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
   14898:	f24b 236c 	movw	r3, #45676	; 0xb26c
   1489c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148a0:	681b      	ldr	r3, [r3, #0]
   148a2:	4618      	mov	r0, r3
   148a4:	f002 ffe0 	bl	17868 <__aeabi_f2d>
   148a8:	4604      	mov	r4, r0
   148aa:	460d      	mov	r5, r1
   148ac:	f24b 2368 	movw	r3, #45672	; 0xb268
   148b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148b4:	681a      	ldr	r2, [r3, #0]
   148b6:	f24b 2370 	movw	r3, #45680	; 0xb270
   148ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148be:	681b      	ldr	r3, [r3, #0]
   148c0:	4610      	mov	r0, r2
   148c2:	4619      	mov	r1, r3
   148c4:	f003 fd18 	bl	182f8 <__aeabi_fdiv>
   148c8:	4603      	mov	r3, r0
   148ca:	4618      	mov	r0, r3
   148cc:	f04f 0100 	mov.w	r1, #0
   148d0:	f003 fe10 	bl	184f4 <__aeabi_fcmpge>
   148d4:	4603      	mov	r3, r0
   148d6:	2b00      	cmp	r3, #0
   148d8:	d014      	beq.n	14904 <route_to+0x1d0>
   148da:	f24b 2368 	movw	r3, #45672	; 0xb268
   148de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148e2:	681a      	ldr	r2, [r3, #0]
   148e4:	f24b 2370 	movw	r3, #45680	; 0xb270
   148e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148ec:	681b      	ldr	r3, [r3, #0]
   148ee:	4610      	mov	r0, r2
   148f0:	4619      	mov	r1, r3
   148f2:	f003 fd01 	bl	182f8 <__aeabi_fdiv>
   148f6:	4603      	mov	r3, r0
   148f8:	4618      	mov	r0, r3
   148fa:	f002 ffb5 	bl	17868 <__aeabi_f2d>
   148fe:	4602      	mov	r2, r0
   14900:	460b      	mov	r3, r1
   14902:	e003      	b.n	1490c <route_to+0x1d8>
   14904:	f04f 0200 	mov.w	r2, #0
   14908:	f04f 0300 	mov.w	r3, #0
   1490c:	4620      	mov	r0, r4
   1490e:	4629      	mov	r1, r5
   14910:	f002 fe4c 	bl	175ac <__adddf3>
   14914:	4602      	mov	r2, r0
   14916:	460b      	mov	r3, r1
   14918:	4610      	mov	r0, r2
   1491a:	4619      	mov	r1, r3
   1491c:	f003 fada 	bl	17ed4 <__aeabi_d2f>
   14920:	4602      	mov	r2, r0
   14922:	f24b 236c 	movw	r3, #45676	; 0xb26c
   14926:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1492a:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
   1492c:	f24b 236c 	movw	r3, #45676	; 0xb26c
   14930:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14934:	681b      	ldr	r3, [r3, #0]
   14936:	4618      	mov	r0, r3
   14938:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   1493c:	f003 fdda 	bl	184f4 <__aeabi_fcmpge>
   14940:	4603      	mov	r3, r0
   14942:	2b00      	cmp	r3, #0
   14944:	d002      	beq.n	1494c <route_to+0x218>
   14946:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   1494a:	e004      	b.n	14956 <route_to+0x222>
   1494c:	f24b 236c 	movw	r3, #45676	; 0xb26c
   14950:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14954:	681a      	ldr	r2, [r3, #0]
   14956:	f24b 236c 	movw	r3, #45676	; 0xb26c
   1495a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1495e:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
   14960:	f24b 236c 	movw	r3, #45676	; 0xb26c
   14964:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14968:	681b      	ldr	r3, [r3, #0]
   1496a:	4618      	mov	r0, r3
   1496c:	6979      	ldr	r1, [r7, #20]
   1496e:	f003 fc0f 	bl	18190 <__aeabi_fmul>
   14972:	4603      	mov	r3, r0
   14974:	4618      	mov	r0, r3
   14976:	69f9      	ldr	r1, [r7, #28]
   14978:	f003 fb02 	bl	17f80 <__addsf3>
   1497c:	4603      	mov	r3, r0
   1497e:	461c      	mov	r4, r3
   14980:	f24b 236c 	movw	r3, #45676	; 0xb26c
   14984:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14988:	681b      	ldr	r3, [r3, #0]
   1498a:	4618      	mov	r0, r3
   1498c:	6939      	ldr	r1, [r7, #16]
   1498e:	f003 fbff 	bl	18190 <__aeabi_fmul>
   14992:	4603      	mov	r3, r0
   14994:	4618      	mov	r0, r3
   14996:	69b9      	ldr	r1, [r7, #24]
   14998:	f003 faf2 	bl	17f80 <__addsf3>
   1499c:	4603      	mov	r3, r0
   1499e:	4620      	mov	r0, r4
   149a0:	4619      	mov	r1, r3
   149a2:	f7ff fe55 	bl	14650 <fly_to_xy>
}
   149a6:	3720      	adds	r7, #32
   149a8:	46bd      	mov	sp, r7
   149aa:	bdb0      	pop	{r4, r5, r7, pc}

000149ac <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
   149ac:	b590      	push	{r4, r7, lr}
   149ae:	b083      	sub	sp, #12
   149b0:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
   149b2:	f240 4328 	movw	r3, #1064	; 0x428
   149b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149ba:	681a      	ldr	r2, [r3, #0]
   149bc:	f24b 4384 	movw	r3, #46212	; 0xb484
   149c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149c4:	681b      	ldr	r3, [r3, #0]
   149c6:	4610      	mov	r0, r2
   149c8:	4619      	mov	r1, r3
   149ca:	f003 fad7 	bl	17f7c <__aeabi_fsub>
   149ce:	4603      	mov	r3, r0
   149d0:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
   149d2:	f240 4328 	movw	r3, #1064	; 0x428
   149d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149da:	685a      	ldr	r2, [r3, #4]
   149dc:	f24b 4388 	movw	r3, #46216	; 0xb488
   149e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149e4:	681b      	ldr	r3, [r3, #0]
   149e6:	4610      	mov	r0, r2
   149e8:	4619      	mov	r1, r3
   149ea:	f003 fac7 	bl	17f7c <__aeabi_fsub>
   149ee:	4603      	mov	r3, r0
   149f0:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
   149f2:	6878      	ldr	r0, [r7, #4]
   149f4:	6879      	ldr	r1, [r7, #4]
   149f6:	f003 fbcb 	bl	18190 <__aeabi_fmul>
   149fa:	4603      	mov	r3, r0
   149fc:	461c      	mov	r4, r3
   149fe:	6838      	ldr	r0, [r7, #0]
   14a00:	6839      	ldr	r1, [r7, #0]
   14a02:	f003 fbc5 	bl	18190 <__aeabi_fmul>
   14a06:	4603      	mov	r3, r0
   14a08:	4620      	mov	r0, r4
   14a0a:	4619      	mov	r1, r3
   14a0c:	f003 fab8 	bl	17f80 <__addsf3>
   14a10:	4603      	mov	r3, r0
   14a12:	461a      	mov	r2, r3
   14a14:	f24b 2360 	movw	r3, #45664	; 0xb260
   14a18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a1c:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
   14a1e:	f24b 2360 	movw	r3, #45664	; 0xb260
   14a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a26:	681b      	ldr	r3, [r3, #0]
   14a28:	2201      	movs	r2, #1
   14a2a:	4614      	mov	r4, r2
   14a2c:	4618      	mov	r0, r3
   14a2e:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   14a32:	f6c4 0174 	movt	r1, #18548	; 0x4874
   14a36:	f003 fd67 	bl	18508 <__aeabi_fcmpgt>
   14a3a:	4603      	mov	r3, r0
   14a3c:	2b00      	cmp	r3, #0
   14a3e:	d101      	bne.n	14a44 <compute_dist2_to_home+0x98>
   14a40:	2300      	movs	r3, #0
   14a42:	461c      	mov	r4, r3
   14a44:	b2e3      	uxtb	r3, r4
   14a46:	461a      	mov	r2, r3
   14a48:	f24b 2364 	movw	r3, #45668	; 0xb264
   14a4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a50:	701a      	strb	r2, [r3, #0]
}
   14a52:	370c      	adds	r7, #12
   14a54:	46bd      	mov	sp, r7
   14a56:	bd90      	pop	{r4, r7, pc}

00014a58 <nav_home>:

void nav_home(void) {
   14a58:	b580      	push	{r7, lr}
   14a5a:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
   14a5c:	f24b 2354 	movw	r3, #45652	; 0xb254
   14a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a64:	f04f 0200 	mov.w	r2, #0
   14a68:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
   14a6a:	f64a 63b5 	movw	r3, #44725	; 0xaeb5
   14a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a72:	2203      	movs	r2, #3
   14a74:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
   14a76:	f240 4324 	movw	r3, #1060	; 0x424
   14a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a7e:	f04f 0200 	mov.w	r2, #0
   14a82:	f2c4 322f 	movt	r2, #17199	; 0x432f
   14a86:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
   14a88:	f7ff ff90 	bl	149ac <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
   14a8c:	f24b 2360 	movw	r3, #45664	; 0xb260
   14a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a94:	681a      	ldr	r2, [r3, #0]
   14a96:	f24b 235c 	movw	r3, #45660	; 0xb25c
   14a9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a9e:	601a      	str	r2, [r3, #0]
}
   14aa0:	bd80      	pop	{r7, pc}
   14aa2:	bf00      	nop

00014aa4 <nav_update>:

void nav_update(void) {
   14aa4:	b580      	push	{r7, lr}
   14aa6:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
   14aa8:	f7ff ff80 	bl	149ac <compute_dist2_to_home>

  auto_nav();
   14aac:	f7fd fc0c 	bl	122c8 <auto_nav>
}
   14ab0:	bd80      	pop	{r7, pc}
   14ab2:	bf00      	nop

00014ab4 <nav_init>:


void nav_init(void) {
   14ab4:	b480      	push	{r7}
   14ab6:	af00      	add	r7, sp, #0
  nav_block = 0;
   14ab8:	f24b 2329 	movw	r3, #45609	; 0xb229
   14abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ac0:	2200      	movs	r2, #0
   14ac2:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
   14ac4:	f24b 2328 	movw	r3, #45608	; 0xb228
   14ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14acc:	2200      	movs	r2, #0
   14ace:	701a      	strb	r2, [r3, #0]
}
   14ad0:	46bd      	mov	sp, r7
   14ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
   14ad6:	4770      	bx	lr

00014ad8 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
   14ad8:	b480      	push	{r7}
   14ada:	b083      	sub	sp, #12
   14adc:	af00      	add	r7, sp, #0
   14ade:	4603      	mov	r3, r0
   14ae0:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
   14ae2:	f242 030a 	movw	r3, #8202	; 0x200a
   14ae6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14aea:	781b      	ldrb	r3, [r3, #0]
   14aec:	b2db      	uxtb	r3, r3
   14aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14af2:	2b00      	cmp	r3, #0
   14af4:	d028      	beq.n	14b48 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
   14af6:	f24b 237d 	movw	r3, #45693	; 0xb27d
   14afa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14afe:	781b      	ldrb	r3, [r3, #0]
   14b00:	b2db      	uxtb	r3, r3
   14b02:	461a      	mov	r2, r3
   14b04:	f24b 237c 	movw	r3, #45692	; 0xb27c
   14b08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b0c:	781b      	ldrb	r3, [r3, #0]
   14b0e:	3301      	adds	r3, #1
   14b10:	429a      	cmp	r2, r3
   14b12:	d100      	bne.n	14b16 <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14b14:	e02c      	b.n	14b70 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
   14b16:	f24b 237c 	movw	r3, #45692	; 0xb27c
   14b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b1e:	781b      	ldrb	r3, [r3, #0]
   14b20:	461a      	mov	r2, r3
   14b22:	f24b 2380 	movw	r3, #45696	; 0xb280
   14b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b2a:	79f9      	ldrb	r1, [r7, #7]
   14b2c:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
   14b2e:	f24b 237c 	movw	r3, #45692	; 0xb27c
   14b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b36:	781b      	ldrb	r3, [r3, #0]
   14b38:	3301      	adds	r3, #1
   14b3a:	b2da      	uxtb	r2, r3
   14b3c:	f24b 237c 	movw	r3, #45692	; 0xb27c
   14b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b44:	701a      	strb	r2, [r3, #0]
   14b46:	e013      	b.n	14b70 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
   14b48:	f242 030c 	movw	r3, #8204	; 0x200c
   14b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b50:	79fa      	ldrb	r2, [r7, #7]
   14b52:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
   14b54:	f242 030a 	movw	r3, #8202	; 0x200a
   14b58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b5c:	f242 020a 	movw	r2, #8202	; 0x200a
   14b60:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14b64:	7812      	ldrb	r2, [r2, #0]
   14b66:	b2d2      	uxtb	r2, r2
   14b68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14b6c:	b2d2      	uxtb	r2, r2
   14b6e:	701a      	strb	r2, [r3, #0]
  }
}
   14b70:	370c      	adds	r7, #12
   14b72:	46bd      	mov	sp, r7
   14b74:	f85d 7b04 	ldr.w	r7, [sp], #4
   14b78:	4770      	bx	lr
   14b7a:	bf00      	nop

00014b7c <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
   14b7c:	b480      	push	{r7}
   14b7e:	b083      	sub	sp, #12
   14b80:	af00      	add	r7, sp, #0
   14b82:	4603      	mov	r3, r0
   14b84:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
   14b86:	f242 039a 	movw	r3, #8346	; 0x209a
   14b8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b8e:	781b      	ldrb	r3, [r3, #0]
   14b90:	b2db      	uxtb	r3, r3
   14b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14b96:	2b00      	cmp	r3, #0
   14b98:	d028      	beq.n	14bec <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
   14b9a:	f24b 3381 	movw	r3, #45953	; 0xb381
   14b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ba2:	781b      	ldrb	r3, [r3, #0]
   14ba4:	b2db      	uxtb	r3, r3
   14ba6:	461a      	mov	r2, r3
   14ba8:	f24b 3380 	movw	r3, #45952	; 0xb380
   14bac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bb0:	781b      	ldrb	r3, [r3, #0]
   14bb2:	3301      	adds	r3, #1
   14bb4:	429a      	cmp	r2, r3
   14bb6:	d100      	bne.n	14bba <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14bb8:	e02c      	b.n	14c14 <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
   14bba:	f24b 3380 	movw	r3, #45952	; 0xb380
   14bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bc2:	781b      	ldrb	r3, [r3, #0]
   14bc4:	461a      	mov	r2, r3
   14bc6:	f24b 3384 	movw	r3, #45956	; 0xb384
   14bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bce:	79f9      	ldrb	r1, [r7, #7]
   14bd0:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
   14bd2:	f24b 3380 	movw	r3, #45952	; 0xb380
   14bd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bda:	781b      	ldrb	r3, [r3, #0]
   14bdc:	3301      	adds	r3, #1
   14bde:	b2da      	uxtb	r2, r3
   14be0:	f24b 3380 	movw	r3, #45952	; 0xb380
   14be4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14be8:	701a      	strb	r2, [r3, #0]
   14bea:	e013      	b.n	14c14 <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
   14bec:	f242 039c 	movw	r3, #8348	; 0x209c
   14bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bf4:	79fa      	ldrb	r2, [r7, #7]
   14bf6:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
   14bf8:	f242 039a 	movw	r3, #8346	; 0x209a
   14bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c00:	f242 029a 	movw	r2, #8346	; 0x209a
   14c04:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14c08:	7812      	ldrb	r2, [r2, #0]
   14c0a:	b2d2      	uxtb	r2, r2
   14c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14c10:	b2d2      	uxtb	r2, r2
   14c12:	701a      	strb	r2, [r3, #0]
  }
}
   14c14:	370c      	adds	r7, #12
   14c16:	46bd      	mov	sp, r7
   14c18:	f85d 7b04 	ldr.w	r7, [sp], #4
   14c1c:	4770      	bx	lr
   14c1e:	bf00      	nop

00014c20 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
   14c20:	b580      	push	{r7, lr}
   14c22:	b084      	sub	sp, #16
   14c24:	af00      	add	r7, sp, #0
   14c26:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   14c28:	2300      	movs	r3, #0
   14c2a:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   14c2c:	e009      	b.n	14c42 <uart0_print_string+0x22>
    uart0_transmit(s[i]);
   14c2e:	7bfb      	ldrb	r3, [r7, #15]
   14c30:	687a      	ldr	r2, [r7, #4]
   14c32:	4413      	add	r3, r2
   14c34:	781b      	ldrb	r3, [r3, #0]
   14c36:	4618      	mov	r0, r3
   14c38:	f7ff ff4e 	bl	14ad8 <uart0_transmit>
    i++;
   14c3c:	7bfb      	ldrb	r3, [r7, #15]
   14c3e:	3301      	adds	r3, #1
   14c40:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   14c42:	7bfb      	ldrb	r3, [r7, #15]
   14c44:	687a      	ldr	r2, [r7, #4]
   14c46:	4413      	add	r3, r2
   14c48:	781b      	ldrb	r3, [r3, #0]
   14c4a:	2b00      	cmp	r3, #0
   14c4c:	d1ef      	bne.n	14c2e <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
   14c4e:	3710      	adds	r7, #16
   14c50:	46bd      	mov	sp, r7
   14c52:	bd80      	pop	{r7, pc}

00014c54 <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
   14c54:	b590      	push	{r4, r7, lr}
   14c56:	b089      	sub	sp, #36	; 0x24
   14c58:	af00      	add	r7, sp, #0
   14c5a:	4603      	mov	r3, r0
   14c5c:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   14c5e:	f648 0320 	movw	r3, #34848	; 0x8820
   14c62:	f2c0 0301 	movt	r3, #1
   14c66:	f107 040c 	add.w	r4, r7, #12
   14c6a:	6818      	ldr	r0, [r3, #0]
   14c6c:	6859      	ldr	r1, [r3, #4]
   14c6e:	689a      	ldr	r2, [r3, #8]
   14c70:	68db      	ldr	r3, [r3, #12]
   14c72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   14c74:	79fb      	ldrb	r3, [r7, #7]
   14c76:	091b      	lsrs	r3, r3, #4
   14c78:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   14c7a:	79fb      	ldrb	r3, [r7, #7]
   14c7c:	f003 030f 	and.w	r3, r3, #15
   14c80:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
   14c82:	230f      	movs	r3, #15
   14c84:	77fb      	strb	r3, [r7, #31]
    low = 15;
   14c86:	230f      	movs	r3, #15
   14c88:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
   14c8a:	7ffb      	ldrb	r3, [r7, #31]
   14c8c:	f107 0220 	add.w	r2, r7, #32
   14c90:	4413      	add	r3, r2
   14c92:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14c96:	4618      	mov	r0, r3
   14c98:	f7ff ff1e 	bl	14ad8 <uart0_transmit>
  uart0_transmit(hex[low]);
   14c9c:	7fbb      	ldrb	r3, [r7, #30]
   14c9e:	f107 0220 	add.w	r2, r7, #32
   14ca2:	4413      	add	r3, r2
   14ca4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14ca8:	4618      	mov	r0, r3
   14caa:	f7ff ff15 	bl	14ad8 <uart0_transmit>
}
   14cae:	3724      	adds	r7, #36	; 0x24
   14cb0:	46bd      	mov	sp, r7
   14cb2:	bd90      	pop	{r4, r7, pc}

00014cb4 <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
   14cb4:	b480      	push	{r7}
   14cb6:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
   14cb8:	f24b 237c 	movw	r3, #45692	; 0xb27c
   14cbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cc0:	781a      	ldrb	r2, [r3, #0]
   14cc2:	f24b 237d 	movw	r3, #45693	; 0xb27d
   14cc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cca:	781b      	ldrb	r3, [r3, #0]
   14ccc:	b2db      	uxtb	r3, r3
   14cce:	429a      	cmp	r2, r3
   14cd0:	d10e      	bne.n	14cf0 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
   14cd2:	f242 030a 	movw	r3, #8202	; 0x200a
   14cd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cda:	f242 020a 	movw	r2, #8202	; 0x200a
   14cde:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14ce2:	7812      	ldrb	r2, [r2, #0]
   14ce4:	b2d2      	uxtb	r2, r2
   14ce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14cea:	b2d2      	uxtb	r2, r2
   14cec:	701a      	strb	r2, [r3, #0]
   14cee:	e01d      	b.n	14d2c <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
   14cf0:	f242 030c 	movw	r3, #8204	; 0x200c
   14cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cf8:	f24b 227d 	movw	r2, #45693	; 0xb27d
   14cfc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14d00:	7812      	ldrb	r2, [r2, #0]
   14d02:	b2d2      	uxtb	r2, r2
   14d04:	4611      	mov	r1, r2
   14d06:	f24b 2280 	movw	r2, #45696	; 0xb280
   14d0a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14d0e:	5c52      	ldrb	r2, [r2, r1]
   14d10:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
   14d12:	f24b 237d 	movw	r3, #45693	; 0xb27d
   14d16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d1a:	781b      	ldrb	r3, [r3, #0]
   14d1c:	b2db      	uxtb	r3, r3
   14d1e:	3301      	adds	r3, #1
   14d20:	b2da      	uxtb	r2, r3
   14d22:	f24b 237d 	movw	r3, #45693	; 0xb27d
   14d26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d2a:	701a      	strb	r2, [r3, #0]
  }
}
   14d2c:	46bd      	mov	sp, r7
   14d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
   14d32:	4770      	bx	lr

00014d34 <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
   14d34:	b480      	push	{r7}
   14d36:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
   14d38:	f24b 3380 	movw	r3, #45952	; 0xb380
   14d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d40:	781a      	ldrb	r2, [r3, #0]
   14d42:	f24b 3381 	movw	r3, #45953	; 0xb381
   14d46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d4a:	781b      	ldrb	r3, [r3, #0]
   14d4c:	b2db      	uxtb	r3, r3
   14d4e:	429a      	cmp	r2, r3
   14d50:	d10e      	bne.n	14d70 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
   14d52:	f242 039a 	movw	r3, #8346	; 0x209a
   14d56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d5a:	f242 029a 	movw	r2, #8346	; 0x209a
   14d5e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14d62:	7812      	ldrb	r2, [r2, #0]
   14d64:	b2d2      	uxtb	r2, r2
   14d66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14d6a:	b2d2      	uxtb	r2, r2
   14d6c:	701a      	strb	r2, [r3, #0]
   14d6e:	e01d      	b.n	14dac <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
   14d70:	f242 039c 	movw	r3, #8348	; 0x209c
   14d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d78:	f24b 3281 	movw	r2, #45953	; 0xb381
   14d7c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14d80:	7812      	ldrb	r2, [r2, #0]
   14d82:	b2d2      	uxtb	r2, r2
   14d84:	4611      	mov	r1, r2
   14d86:	f24b 3284 	movw	r2, #45956	; 0xb384
   14d8a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14d8e:	5c52      	ldrb	r2, [r2, r1]
   14d90:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
   14d92:	f24b 3381 	movw	r3, #45953	; 0xb381
   14d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d9a:	781b      	ldrb	r3, [r3, #0]
   14d9c:	b2db      	uxtb	r3, r3
   14d9e:	3301      	adds	r3, #1
   14da0:	b2da      	uxtb	r2, r3
   14da2:	f24b 3381 	movw	r3, #45953	; 0xb381
   14da6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14daa:	701a      	strb	r2, [r3, #0]
  }
}
   14dac:	46bd      	mov	sp, r7
   14dae:	f85d 7b04 	ldr.w	r7, [sp], #4
   14db2:	4770      	bx	lr

00014db4 <uart0_init>:

void uart0_init( void ) {
   14db4:	b480      	push	{r7}
   14db6:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
   14db8:	f242 0390 	movw	r3, #8336	; 0x2090
   14dbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dc0:	2200      	movs	r2, #0
   14dc2:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
   14dc4:	f242 0309 	movw	r3, #8201	; 0x2009
   14dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dcc:	2219      	movs	r2, #25
   14dce:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
   14dd0:	f242 030b 	movw	r3, #8203	; 0x200b
   14dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dd8:	2200      	movs	r2, #0
   14dda:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
   14ddc:	f242 030a 	movw	r3, #8202	; 0x200a
   14de0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14de4:	2218      	movs	r2, #24
   14de6:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
   14de8:	f242 0395 	movw	r3, #8341	; 0x2095
   14dec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14df0:	2206      	movs	r2, #6
   14df2:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
   14df4:	f242 030a 	movw	r3, #8202	; 0x200a
   14df8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dfc:	f242 020a 	movw	r2, #8202	; 0x200a
   14e00:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14e04:	7812      	ldrb	r2, [r2, #0]
   14e06:	b2d2      	uxtb	r2, r2
   14e08:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14e0c:	b2d2      	uxtb	r2, r2
   14e0e:	701a      	strb	r2, [r3, #0]
}
   14e10:	46bd      	mov	sp, r7
   14e12:	f85d 7b04 	ldr.w	r7, [sp], #4
   14e16:	4770      	bx	lr

00014e18 <uart1_init>:

void uart1_init( void ) {
   14e18:	b480      	push	{r7}
   14e1a:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
   14e1c:	f242 0398 	movw	r3, #8344	; 0x2098
   14e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e24:	2200      	movs	r2, #0
   14e26:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
   14e28:	f242 0399 	movw	r3, #8345	; 0x2099
   14e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e30:	2219      	movs	r2, #25
   14e32:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
   14e34:	f242 039b 	movw	r3, #8347	; 0x209b
   14e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e3c:	2200      	movs	r2, #0
   14e3e:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
   14e40:	f242 039a 	movw	r3, #8346	; 0x209a
   14e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e48:	2218      	movs	r2, #24
   14e4a:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
   14e4c:	f242 039d 	movw	r3, #8349	; 0x209d
   14e50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e54:	2206      	movs	r2, #6
   14e56:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
   14e58:	f242 039a 	movw	r3, #8346	; 0x209a
   14e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e60:	f242 029a 	movw	r2, #8346	; 0x209a
   14e64:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14e68:	7812      	ldrb	r2, [r2, #0]
   14e6a:	b2d2      	uxtb	r2, r2
   14e6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14e70:	b2d2      	uxtb	r2, r2
   14e72:	701a      	strb	r2, [r3, #0]
}
   14e74:	46bd      	mov	sp, r7
   14e76:	f85d 7b04 	ldr.w	r7, [sp], #4
   14e7a:	4770      	bx	lr
   14e7c:	0000      	movs	r0, r0
	...

00014e80 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
   14e80:	b480      	push	{r7}
   14e82:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
   14e84:	f24b 4384 	movw	r3, #46212	; 0xb484
   14e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e8c:	f04f 0200 	mov.w	r2, #0
   14e90:	601a      	str	r2, [r3, #0]
   14e92:	f24b 4388 	movw	r3, #46216	; 0xb488
   14e96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e9a:	f04f 0200 	mov.w	r2, #0
   14e9e:	601a      	str	r2, [r3, #0]
   14ea0:	f24b 438c 	movw	r3, #46220	; 0xb48c
   14ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ea8:	f04f 0200 	mov.w	r2, #0
   14eac:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
   14eae:	f24b 4390 	movw	r3, #46224	; 0xb490
   14eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14eb6:	f04f 0200 	mov.w	r2, #0
   14eba:	601a      	str	r2, [r3, #0]
   14ebc:	f24b 4394 	movw	r3, #46228	; 0xb494
   14ec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ec4:	f04f 0200 	mov.w	r2, #0
   14ec8:	601a      	str	r2, [r3, #0]
   14eca:	f24b 4398 	movw	r3, #46232	; 0xb498
   14ece:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ed2:	f04f 0200 	mov.w	r2, #0
   14ed6:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   14ed8:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
   14edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ee0:	f04f 0200 	mov.w	r2, #0
   14ee4:	601a      	str	r2, [r3, #0]
   14ee6:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
   14eea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14eee:	f04f 0200 	mov.w	r2, #0
   14ef2:	601a      	str	r2, [r3, #0]
   14ef4:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
   14ef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14efc:	f04f 0200 	mov.w	r2, #0
   14f00:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   14f02:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
   14f06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f0a:	f04f 0200 	mov.w	r2, #0
   14f0e:	601a      	str	r2, [r3, #0]
   14f10:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
   14f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f18:	f04f 0200 	mov.w	r2, #0
   14f1c:	601a      	str	r2, [r3, #0]
   14f1e:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
   14f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f26:	f04f 0200 	mov.w	r2, #0
   14f2a:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   14f2c:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
   14f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f34:	2200      	movs	r2, #0
   14f36:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   14f38:	f240 33f8 	movw	r3, #1016	; 0x3f8
   14f3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f40:	681a      	ldr	r2, [r3, #0]
   14f42:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
   14f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f4a:	601a      	str	r2, [r3, #0]
}
   14f4c:	46bd      	mov	sp, r7
   14f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
   14f52:	4770      	bx	lr

00014f54 <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   14f54:	b580      	push	{r7, lr}
   14f56:	b082      	sub	sp, #8
   14f58:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   14f5a:	f240 33ec 	movw	r3, #1004	; 0x3ec
   14f5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f62:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   14f64:	2b01      	cmp	r3, #1
   14f66:	d105      	bne.n	14f74 <estimator_update_state_infrared+0x20>
   14f68:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
   14f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f70:	681b      	ldr	r3, [r3, #0]
   14f72:	e004      	b.n	14f7e <estimator_update_state_infrared+0x2a>
   14f74:	f240 33f8 	movw	r3, #1016	; 0x3f8
   14f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f7c:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   14f7e:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   14f80:	f24b 1370 	movw	r3, #45424	; 0xb170
   14f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f88:	881b      	ldrh	r3, [r3, #0]
   14f8a:	b21b      	sxth	r3, r3
   14f8c:	4618      	mov	r0, r3
   14f8e:	f003 f8ab 	bl	180e8 <__aeabi_i2f>
   14f92:	4603      	mov	r3, r0
   14f94:	4618      	mov	r0, r3
   14f96:	6879      	ldr	r1, [r7, #4]
   14f98:	f003 f8fa 	bl	18190 <__aeabi_fmul>
   14f9c:	4603      	mov	r3, r0
   14f9e:	461a      	mov	r2, r3
   14fa0:	f24b 4390 	movw	r3, #46224	; 0xb490
   14fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fa8:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   14faa:	f24b 1372 	movw	r3, #45426	; 0xb172
   14fae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fb2:	881b      	ldrh	r3, [r3, #0]
   14fb4:	b21b      	sxth	r3, r3
   14fb6:	4618      	mov	r0, r3
   14fb8:	f003 f896 	bl	180e8 <__aeabi_i2f>
   14fbc:	4603      	mov	r3, r0
   14fbe:	4618      	mov	r0, r3
   14fc0:	6879      	ldr	r1, [r7, #4]
   14fc2:	f003 f8e5 	bl	18190 <__aeabi_fmul>
   14fc6:	4603      	mov	r3, r0
   14fc8:	461a      	mov	r2, r3
   14fca:	f24b 4398 	movw	r3, #46232	; 0xb498
   14fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fd2:	601a      	str	r2, [r3, #0]
}
   14fd4:	3708      	adds	r7, #8
   14fd6:	46bd      	mov	sp, r7
   14fd8:	bd80      	pop	{r7, pc}
   14fda:	bf00      	nop

00014fdc <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   14fdc:	b5b0      	push	{r4, r5, r7, lr}
   14fde:	b084      	sub	sp, #16
   14fe0:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   14fe2:	f24b 43d0 	movw	r3, #46288	; 0xb4d0
   14fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fea:	781b      	ldrb	r3, [r3, #0]
   14fec:	2b00      	cmp	r3, #0
   14fee:	f000 81e8 	beq.w	153c2 <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   14ff2:	f24b 0340 	movw	r3, #45120	; 0xb040
   14ff6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ffa:	681a      	ldr	r2, [r3, #0]
   14ffc:	f24b 43d4 	movw	r3, #46292	; 0xb4d4
   15000:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15004:	681b      	ldr	r3, [r3, #0]
   15006:	4610      	mov	r0, r2
   15008:	4619      	mov	r1, r3
   1500a:	f002 ffb7 	bl	17f7c <__aeabi_fsub>
   1500e:	4603      	mov	r3, r0
   15010:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   15012:	68b8      	ldr	r0, [r7, #8]
   15014:	f002 fc28 	bl	17868 <__aeabi_f2d>
   15018:	4602      	mov	r2, r0
   1501a:	460b      	mov	r3, r1
   1501c:	4610      	mov	r0, r2
   1501e:	4619      	mov	r1, r3
   15020:	a385      	add	r3, pc, #532	; (adr r3, 15238 <estimator_update_ir_estim+0x25c>)
   15022:	e9d3 2300 	ldrd	r2, r3, [r3]
   15026:	f002 ff03 	bl	17e30 <__aeabi_dcmpgt>
   1502a:	4603      	mov	r3, r0
   1502c:	2b00      	cmp	r3, #0
   1502e:	d100      	bne.n	15032 <estimator_update_ir_estim+0x56>
   15030:	e219      	b.n	15466 <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   15032:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
   15036:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1503a:	681a      	ldr	r2, [r3, #0]
   1503c:	f24b 43d8 	movw	r3, #46296	; 0xb4d8
   15040:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15044:	681b      	ldr	r3, [r3, #0]
   15046:	4610      	mov	r0, r2
   15048:	4619      	mov	r1, r3
   1504a:	f002 ff97 	bl	17f7c <__aeabi_fsub>
   1504e:	4603      	mov	r3, r0
   15050:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   15052:	e013      	b.n	1507c <estimator_update_ir_estim+0xa0>
   15054:	68f8      	ldr	r0, [r7, #12]
   15056:	f002 fc07 	bl	17868 <__aeabi_f2d>
   1505a:	4602      	mov	r2, r0
   1505c:	460b      	mov	r3, r1
   1505e:	4610      	mov	r0, r2
   15060:	4619      	mov	r1, r3
   15062:	a377      	add	r3, pc, #476	; (adr r3, 15240 <estimator_update_ir_estim+0x264>)
   15064:	e9d3 2300 	ldrd	r2, r3, [r3]
   15068:	f002 fa9e 	bl	175a8 <__aeabi_dsub>
   1506c:	4602      	mov	r2, r0
   1506e:	460b      	mov	r3, r1
   15070:	4610      	mov	r0, r2
   15072:	4619      	mov	r1, r3
   15074:	f002 ff2e 	bl	17ed4 <__aeabi_d2f>
   15078:	4603      	mov	r3, r0
   1507a:	60fb      	str	r3, [r7, #12]
   1507c:	68f8      	ldr	r0, [r7, #12]
   1507e:	f002 fbf3 	bl	17868 <__aeabi_f2d>
   15082:	4602      	mov	r2, r0
   15084:	460b      	mov	r3, r1
   15086:	4610      	mov	r0, r2
   15088:	4619      	mov	r1, r3
   1508a:	a36f      	add	r3, pc, #444	; (adr r3, 15248 <estimator_update_ir_estim+0x26c>)
   1508c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15090:	f002 fece 	bl	17e30 <__aeabi_dcmpgt>
   15094:	4603      	mov	r3, r0
   15096:	2b00      	cmp	r3, #0
   15098:	d1dc      	bne.n	15054 <estimator_update_ir_estim+0x78>
   1509a:	e013      	b.n	150c4 <estimator_update_ir_estim+0xe8>
   1509c:	68f8      	ldr	r0, [r7, #12]
   1509e:	f002 fbe3 	bl	17868 <__aeabi_f2d>
   150a2:	4602      	mov	r2, r0
   150a4:	460b      	mov	r3, r1
   150a6:	4610      	mov	r0, r2
   150a8:	4619      	mov	r1, r3
   150aa:	a365      	add	r3, pc, #404	; (adr r3, 15240 <estimator_update_ir_estim+0x264>)
   150ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   150b0:	f002 fa7c 	bl	175ac <__adddf3>
   150b4:	4602      	mov	r2, r0
   150b6:	460b      	mov	r3, r1
   150b8:	4610      	mov	r0, r2
   150ba:	4619      	mov	r1, r3
   150bc:	f002 ff0a 	bl	17ed4 <__aeabi_d2f>
   150c0:	4603      	mov	r3, r0
   150c2:	60fb      	str	r3, [r7, #12]
   150c4:	68f8      	ldr	r0, [r7, #12]
   150c6:	f002 fbcf 	bl	17868 <__aeabi_f2d>
   150ca:	4602      	mov	r2, r0
   150cc:	460b      	mov	r3, r1
   150ce:	4610      	mov	r0, r2
   150d0:	4619      	mov	r1, r3
   150d2:	a35f      	add	r3, pc, #380	; (adr r3, 15250 <estimator_update_ir_estim+0x274>)
   150d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   150d8:	f002 fe8c 	bl	17df4 <__aeabi_dcmplt>
   150dc:	4603      	mov	r3, r0
   150de:	2b00      	cmp	r3, #0
   150e0:	d1dc      	bne.n	1509c <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   150e2:	68f8      	ldr	r0, [r7, #12]
   150e4:	68b9      	ldr	r1, [r7, #8]
   150e6:	f003 f907 	bl	182f8 <__aeabi_fdiv>
   150ea:	4603      	mov	r3, r0
   150ec:	4618      	mov	r0, r3
   150ee:	f002 fbbb 	bl	17868 <__aeabi_f2d>
   150f2:	4602      	mov	r2, r0
   150f4:	460b      	mov	r3, r1
   150f6:	4610      	mov	r0, r2
   150f8:	4619      	mov	r1, r3
   150fa:	f04f 0200 	mov.w	r2, #0
   150fe:	f04f 0300 	mov.w	r3, #0
   15102:	f2c4 0324 	movt	r3, #16420	; 0x4024
   15106:	f002 fc03 	bl	17910 <__aeabi_dmul>
   1510a:	4602      	mov	r2, r0
   1510c:	460b      	mov	r3, r1
   1510e:	4610      	mov	r0, r2
   15110:	4619      	mov	r1, r3
   15112:	a351      	add	r3, pc, #324	; (adr r3, 15258 <estimator_update_ir_estim+0x27c>)
   15114:	e9d3 2300 	ldrd	r2, r3, [r3]
   15118:	f002 fd24 	bl	17b64 <__aeabi_ddiv>
   1511c:	4602      	mov	r2, r0
   1511e:	460b      	mov	r3, r1
   15120:	4610      	mov	r0, r2
   15122:	4619      	mov	r1, r3
   15124:	f002 fed6 	bl	17ed4 <__aeabi_d2f>
   15128:	4603      	mov	r3, r0
   1512a:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   1512c:	e013      	b.n	15156 <estimator_update_ir_estim+0x17a>
   1512e:	68f8      	ldr	r0, [r7, #12]
   15130:	f002 fb9a 	bl	17868 <__aeabi_f2d>
   15134:	4602      	mov	r2, r0
   15136:	460b      	mov	r3, r1
   15138:	4610      	mov	r0, r2
   1513a:	4619      	mov	r1, r3
   1513c:	a340      	add	r3, pc, #256	; (adr r3, 15240 <estimator_update_ir_estim+0x264>)
   1513e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15142:	f002 fa31 	bl	175a8 <__aeabi_dsub>
   15146:	4602      	mov	r2, r0
   15148:	460b      	mov	r3, r1
   1514a:	4610      	mov	r0, r2
   1514c:	4619      	mov	r1, r3
   1514e:	f002 fec1 	bl	17ed4 <__aeabi_d2f>
   15152:	4603      	mov	r3, r0
   15154:	60fb      	str	r3, [r7, #12]
   15156:	68f8      	ldr	r0, [r7, #12]
   15158:	f002 fb86 	bl	17868 <__aeabi_f2d>
   1515c:	4602      	mov	r2, r0
   1515e:	460b      	mov	r3, r1
   15160:	4610      	mov	r0, r2
   15162:	4619      	mov	r1, r3
   15164:	a338      	add	r3, pc, #224	; (adr r3, 15248 <estimator_update_ir_estim+0x26c>)
   15166:	e9d3 2300 	ldrd	r2, r3, [r3]
   1516a:	f002 fe61 	bl	17e30 <__aeabi_dcmpgt>
   1516e:	4603      	mov	r3, r0
   15170:	2b00      	cmp	r3, #0
   15172:	d1dc      	bne.n	1512e <estimator_update_ir_estim+0x152>
   15174:	e013      	b.n	1519e <estimator_update_ir_estim+0x1c2>
   15176:	68f8      	ldr	r0, [r7, #12]
   15178:	f002 fb76 	bl	17868 <__aeabi_f2d>
   1517c:	4602      	mov	r2, r0
   1517e:	460b      	mov	r3, r1
   15180:	4610      	mov	r0, r2
   15182:	4619      	mov	r1, r3
   15184:	a32e      	add	r3, pc, #184	; (adr r3, 15240 <estimator_update_ir_estim+0x264>)
   15186:	e9d3 2300 	ldrd	r2, r3, [r3]
   1518a:	f002 fa0f 	bl	175ac <__adddf3>
   1518e:	4602      	mov	r2, r0
   15190:	460b      	mov	r3, r1
   15192:	4610      	mov	r0, r2
   15194:	4619      	mov	r1, r3
   15196:	f002 fe9d 	bl	17ed4 <__aeabi_d2f>
   1519a:	4603      	mov	r3, r0
   1519c:	60fb      	str	r3, [r7, #12]
   1519e:	68f8      	ldr	r0, [r7, #12]
   151a0:	f002 fb62 	bl	17868 <__aeabi_f2d>
   151a4:	4602      	mov	r2, r0
   151a6:	460b      	mov	r3, r1
   151a8:	4610      	mov	r0, r2
   151aa:	4619      	mov	r1, r3
   151ac:	a328      	add	r3, pc, #160	; (adr r3, 15250 <estimator_update_ir_estim+0x274>)
   151ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   151b2:	f002 fe1f 	bl	17df4 <__aeabi_dcmplt>
   151b6:	4603      	mov	r3, r0
   151b8:	2b00      	cmp	r3, #0
   151ba:	d1dc      	bne.n	15176 <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   151bc:	f24b 1370 	movw	r3, #45424	; 0xb170
   151c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151c4:	881b      	ldrh	r3, [r3, #0]
   151c6:	b21b      	sxth	r3, r3
   151c8:	4618      	mov	r0, r3
   151ca:	f002 ff8d 	bl	180e8 <__aeabi_i2f>
   151ce:	4602      	mov	r2, r0
   151d0:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
   151d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151d8:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   151da:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
   151de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151e2:	68fa      	ldr	r2, [r7, #12]
   151e4:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   151e6:	68f8      	ldr	r0, [r7, #12]
   151e8:	f04f 0100 	mov.w	r1, #0
   151ec:	f003 f96e 	bl	184cc <__aeabi_fcmplt>
   151f0:	4603      	mov	r3, r0
   151f2:	2b00      	cmp	r3, #0
   151f4:	d003      	beq.n	151fe <estimator_update_ir_estim+0x222>
   151f6:	68fb      	ldr	r3, [r7, #12]
   151f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   151fc:	e000      	b.n	15200 <estimator_update_ir_estim+0x224>
   151fe:	68fb      	ldr	r3, [r7, #12]
   15200:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   15202:	6878      	ldr	r0, [r7, #4]
   15204:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   15208:	f003 f960 	bl	184cc <__aeabi_fcmplt>
   1520c:	4603      	mov	r3, r0
   1520e:	2b00      	cmp	r3, #0
   15210:	d100      	bne.n	15214 <estimator_update_ir_estim+0x238>
   15212:	e128      	b.n	15466 <estimator_update_ir_estim+0x48a>
   15214:	6878      	ldr	r0, [r7, #4]
   15216:	f002 fb27 	bl	17868 <__aeabi_f2d>
   1521a:	4602      	mov	r2, r0
   1521c:	460b      	mov	r3, r1
   1521e:	4610      	mov	r0, r2
   15220:	4619      	mov	r1, r3
   15222:	a30f      	add	r3, pc, #60	; (adr r3, 15260 <estimator_update_ir_estim+0x284>)
   15224:	e9d3 2300 	ldrd	r2, r3, [r3]
   15228:	f002 fe02 	bl	17e30 <__aeabi_dcmpgt>
   1522c:	4603      	mov	r3, r0
   1522e:	2b00      	cmp	r3, #0
   15230:	d11a      	bne.n	15268 <estimator_update_ir_estim+0x28c>
   15232:	e118      	b.n	15466 <estimator_update_ir_estim+0x48a>
   15234:	f3af 8000 	nop.w
   15238:	9999999a 	.word	0x9999999a
   1523c:	3fb99999 	.word	0x3fb99999
   15240:	54442d18 	.word	0x54442d18
   15244:	401921fb 	.word	0x401921fb
   15248:	54442d18 	.word	0x54442d18
   1524c:	400921fb 	.word	0x400921fb
   15250:	54442d18 	.word	0x54442d18
   15254:	c00921fb 	.word	0xc00921fb
   15258:	51eb851f 	.word	0x51eb851f
   1525c:	40239eb8 	.word	0x40239eb8
   15260:	9999999a 	.word	0x9999999a
   15264:	3fa99999 	.word	0x3fa99999
   15268:	f240 33f0 	movw	r3, #1008	; 0x3f0
   1526c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15270:	881b      	ldrh	r3, [r3, #0]
   15272:	b21b      	sxth	r3, r3
   15274:	425b      	negs	r3, r3
   15276:	0fda      	lsrs	r2, r3, #31
   15278:	4413      	add	r3, r2
   1527a:	105b      	asrs	r3, r3, #1
   1527c:	461a      	mov	r2, r3
   1527e:	f24b 1370 	movw	r3, #45424	; 0xb170
   15282:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15286:	881b      	ldrh	r3, [r3, #0]
   15288:	b21b      	sxth	r3, r3
   1528a:	429a      	cmp	r2, r3
   1528c:	f280 8098 	bge.w	153c0 <estimator_update_ir_estim+0x3e4>
   15290:	f240 33f0 	movw	r3, #1008	; 0x3f0
   15294:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15298:	881b      	ldrh	r3, [r3, #0]
   1529a:	b21b      	sxth	r3, r3
   1529c:	0fda      	lsrs	r2, r3, #31
   1529e:	4413      	add	r3, r2
   152a0:	105b      	asrs	r3, r3, #1
   152a2:	b29a      	uxth	r2, r3
   152a4:	f24b 1370 	movw	r3, #45424	; 0xb170
   152a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152ac:	881b      	ldrh	r3, [r3, #0]
   152ae:	b212      	sxth	r2, r2
   152b0:	b21b      	sxth	r3, r3
   152b2:	429a      	cmp	r2, r3
   152b4:	f340 8084 	ble.w	153c0 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   152b8:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
   152bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152c0:	681a      	ldr	r2, [r3, #0]
   152c2:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
   152c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152ca:	681b      	ldr	r3, [r3, #0]
   152cc:	4610      	mov	r0, r2
   152ce:	4619      	mov	r1, r3
   152d0:	f002 ff5e 	bl	18190 <__aeabi_fmul>
   152d4:	4603      	mov	r3, r0
   152d6:	4618      	mov	r0, r3
   152d8:	f002 fac6 	bl	17868 <__aeabi_f2d>
   152dc:	4604      	mov	r4, r0
   152de:	460d      	mov	r5, r1
   152e0:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
   152e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152e8:	681b      	ldr	r3, [r3, #0]
   152ea:	4618      	mov	r0, r3
   152ec:	f002 fabc 	bl	17868 <__aeabi_f2d>
   152f0:	4602      	mov	r2, r0
   152f2:	460b      	mov	r3, r1
   152f4:	4610      	mov	r0, r2
   152f6:	4619      	mov	r1, r3
   152f8:	a367      	add	r3, pc, #412	; (adr r3, 15498 <estimator_update_ir_estim+0x4bc>)
   152fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   152fe:	f002 fb07 	bl	17910 <__aeabi_dmul>
   15302:	4602      	mov	r2, r0
   15304:	460b      	mov	r3, r1
   15306:	4620      	mov	r0, r4
   15308:	4629      	mov	r1, r5
   1530a:	f002 f94f 	bl	175ac <__adddf3>
   1530e:	4602      	mov	r2, r0
   15310:	460b      	mov	r3, r1
   15312:	4610      	mov	r0, r2
   15314:	4619      	mov	r1, r3
   15316:	f002 fddd 	bl	17ed4 <__aeabi_d2f>
   1531a:	4602      	mov	r2, r0
   1531c:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
   15320:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15324:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   15326:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
   1532a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1532e:	681a      	ldr	r2, [r3, #0]
   15330:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
   15334:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15338:	681b      	ldr	r3, [r3, #0]
   1533a:	4610      	mov	r0, r2
   1533c:	4619      	mov	r1, r3
   1533e:	f002 ff27 	bl	18190 <__aeabi_fmul>
   15342:	4603      	mov	r3, r0
   15344:	4618      	mov	r0, r3
   15346:	f002 fa8f 	bl	17868 <__aeabi_f2d>
   1534a:	4604      	mov	r4, r0
   1534c:	460d      	mov	r5, r1
   1534e:	f24b 43e0 	movw	r3, #46304	; 0xb4e0
   15352:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15356:	681b      	ldr	r3, [r3, #0]
   15358:	4618      	mov	r0, r3
   1535a:	f002 fa85 	bl	17868 <__aeabi_f2d>
   1535e:	4602      	mov	r2, r0
   15360:	460b      	mov	r3, r1
   15362:	4610      	mov	r0, r2
   15364:	4619      	mov	r1, r3
   15366:	a34c      	add	r3, pc, #304	; (adr r3, 15498 <estimator_update_ir_estim+0x4bc>)
   15368:	e9d3 2300 	ldrd	r2, r3, [r3]
   1536c:	f002 fad0 	bl	17910 <__aeabi_dmul>
   15370:	4602      	mov	r2, r0
   15372:	460b      	mov	r3, r1
   15374:	4620      	mov	r0, r4
   15376:	4629      	mov	r1, r5
   15378:	f002 f918 	bl	175ac <__adddf3>
   1537c:	4602      	mov	r2, r0
   1537e:	460b      	mov	r3, r1
   15380:	4610      	mov	r0, r2
   15382:	4619      	mov	r1, r3
   15384:	f002 fda6 	bl	17ed4 <__aeabi_d2f>
   15388:	4602      	mov	r2, r0
   1538a:	f24b 43e0 	movw	r3, #46304	; 0xb4e0
   1538e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15392:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   15394:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
   15398:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1539c:	681a      	ldr	r2, [r3, #0]
   1539e:	f24b 43e0 	movw	r3, #46304	; 0xb4e0
   153a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153a6:	681b      	ldr	r3, [r3, #0]
   153a8:	4610      	mov	r0, r2
   153aa:	4619      	mov	r1, r3
   153ac:	f002 ffa4 	bl	182f8 <__aeabi_fdiv>
   153b0:	4603      	mov	r3, r0
   153b2:	461a      	mov	r2, r3
   153b4:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
   153b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153bc:	601a      	str	r2, [r3, #0]
   153be:	e052      	b.n	15466 <estimator_update_ir_estim+0x48a>
   153c0:	e051      	b.n	15466 <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   153c2:	f24b 43d0 	movw	r3, #46288	; 0xb4d0
   153c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153ca:	2201      	movs	r2, #1
   153cc:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   153ce:	f240 33f0 	movw	r3, #1008	; 0x3f0
   153d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153d6:	881b      	ldrh	r3, [r3, #0]
   153d8:	b21b      	sxth	r3, r3
   153da:	4618      	mov	r0, r3
   153dc:	f002 fe84 	bl	180e8 <__aeabi_i2f>
   153e0:	4603      	mov	r3, r0
   153e2:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   153e4:	6838      	ldr	r0, [r7, #0]
   153e6:	6839      	ldr	r1, [r7, #0]
   153e8:	f002 fed2 	bl	18190 <__aeabi_fmul>
   153ec:	4603      	mov	r3, r0
   153ee:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   153f0:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
   153f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153f8:	681b      	ldr	r3, [r3, #0]
   153fa:	4618      	mov	r0, r3
   153fc:	f002 fa34 	bl	17868 <__aeabi_f2d>
   15400:	4602      	mov	r2, r0
   15402:	460b      	mov	r3, r1
   15404:	4610      	mov	r0, r2
   15406:	4619      	mov	r1, r3
   15408:	f04f 0200 	mov.w	r2, #0
   1540c:	f04f 0300 	mov.w	r3, #0
   15410:	f2c4 0359 	movt	r3, #16473	; 0x4059
   15414:	f002 fa7c 	bl	17910 <__aeabi_dmul>
   15418:	4602      	mov	r2, r0
   1541a:	460b      	mov	r3, r1
   1541c:	4614      	mov	r4, r2
   1541e:	461d      	mov	r5, r3
   15420:	6838      	ldr	r0, [r7, #0]
   15422:	f002 fa21 	bl	17868 <__aeabi_f2d>
   15426:	4602      	mov	r2, r0
   15428:	460b      	mov	r3, r1
   1542a:	4620      	mov	r0, r4
   1542c:	4629      	mov	r1, r5
   1542e:	f002 fa6f 	bl	17910 <__aeabi_dmul>
   15432:	4602      	mov	r2, r0
   15434:	460b      	mov	r3, r1
   15436:	4610      	mov	r0, r2
   15438:	4619      	mov	r1, r3
   1543a:	f002 fd4b 	bl	17ed4 <__aeabi_d2f>
   1543e:	4602      	mov	r2, r0
   15440:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
   15444:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15448:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   1544a:	6838      	ldr	r0, [r7, #0]
   1544c:	f04f 0100 	mov.w	r1, #0
   15450:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   15454:	f002 fe9c 	bl	18190 <__aeabi_fmul>
   15458:	4603      	mov	r3, r0
   1545a:	461a      	mov	r2, r3
   1545c:	f24b 43e0 	movw	r3, #46304	; 0xb4e0
   15460:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15464:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   15466:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
   1546a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1546e:	681a      	ldr	r2, [r3, #0]
   15470:	f24b 43d8 	movw	r3, #46296	; 0xb4d8
   15474:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15478:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   1547a:	f24b 0340 	movw	r3, #45120	; 0xb040
   1547e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15482:	681a      	ldr	r2, [r3, #0]
   15484:	f24b 43d4 	movw	r3, #46292	; 0xb4d4
   15488:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1548c:	601a      	str	r2, [r3, #0]
}
   1548e:	3710      	adds	r7, #16
   15490:	46bd      	mov	sp, r7
   15492:	bdb0      	pop	{r4, r5, r7, pc}
   15494:	f3af 8000 	nop.w
   15498:	d916872b 	.word	0xd916872b
   1549c:	3feff7ce 	.word	0x3feff7ce

000154a0 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   154a0:	b580      	push	{r7, lr}
   154a2:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   154a4:	f24b 0364 	movw	r3, #45156	; 0xb064
   154a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154ac:	781b      	ldrb	r3, [r3, #0]
   154ae:	f003 0320 	and.w	r3, r3, #32
   154b2:	2b00      	cmp	r3, #0
   154b4:	d044      	beq.n	15540 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   154b6:	f24b 035c 	movw	r3, #45148	; 0xb05c
   154ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154be:	681a      	ldr	r2, [r3, #0]
   154c0:	f24b 4384 	movw	r3, #46212	; 0xb484
   154c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154c8:	601a      	str	r2, [r3, #0]
   154ca:	f24b 0360 	movw	r3, #45152	; 0xb060
   154ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154d2:	681a      	ldr	r2, [r3, #0]
   154d4:	f24b 4388 	movw	r3, #46216	; 0xb488
   154d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154dc:	601a      	str	r2, [r3, #0]
   154de:	f24b 0344 	movw	r3, #45124	; 0xb044
   154e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154e6:	681a      	ldr	r2, [r3, #0]
   154e8:	f24b 438c 	movw	r3, #46220	; 0xb48c
   154ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154f0:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   154f2:	f24b 0348 	movw	r3, #45128	; 0xb048
   154f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154fa:	681a      	ldr	r2, [r3, #0]
   154fc:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
   15500:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15504:	601a      	str	r2, [r3, #0]
   15506:	f24b 0350 	movw	r3, #45136	; 0xb050
   1550a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1550e:	681a      	ldr	r2, [r3, #0]
   15510:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
   15514:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15518:	601a      	str	r2, [r3, #0]
   1551a:	f24b 034c 	movw	r3, #45132	; 0xb04c
   1551e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15522:	681a      	ldr	r2, [r3, #0]
   15524:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
   15528:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1552c:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   1552e:	f24b 43b4 	movw	r3, #46260	; 0xb4b4
   15532:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15536:	881b      	ldrh	r3, [r3, #0]
   15538:	2b00      	cmp	r3, #0
   1553a:	d001      	beq.n	15540 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   1553c:	f7ff fd4e 	bl	14fdc <estimator_update_ir_estim>
  }
}
   15540:	bd80      	pop	{r7, pc}
   15542:	bf00      	nop

00015544 <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   15544:	b480      	push	{r7}
   15546:	af00      	add	r7, sp, #0
  
}
   15548:	46bd      	mov	sp, r7
   1554a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1554e:	4770      	bx	lr

00015550 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   15550:	b5b0      	push	{r4, r5, r7, lr}
   15552:	b082      	sub	sp, #8
   15554:	af00      	add	r7, sp, #0
   15556:	4603      	mov	r3, r0
   15558:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   1555a:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
   1555e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15562:	781b      	ldrb	r3, [r3, #0]
   15564:	2b01      	cmp	r3, #1
   15566:	f040 80e0 	bne.w	1572a <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   1556a:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
   1556e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15572:	781b      	ldrb	r3, [r3, #0]
   15574:	2b02      	cmp	r3, #2
   15576:	d168      	bne.n	1564a <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   15578:	79fb      	ldrb	r3, [r7, #7]
   1557a:	2b00      	cmp	r3, #0
   1557c:	d013      	beq.n	155a6 <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   1557e:	f240 33f4 	movw	r3, #1012	; 0x3f4
   15582:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15586:	881a      	ldrh	r2, [r3, #0]
   15588:	f24b 43ea 	movw	r3, #46314	; 0xb4ea
   1558c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15590:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   15592:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   15596:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1559a:	895a      	ldrh	r2, [r3, #10]
   1559c:	f24b 43e6 	movw	r3, #46310	; 0xb4e6
   155a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155a4:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   155a6:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   155aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155ae:	895b      	ldrh	r3, [r3, #10]
   155b0:	b21a      	sxth	r2, r3
   155b2:	f24b 43e6 	movw	r3, #46310	; 0xb4e6
   155b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155ba:	881b      	ldrh	r3, [r3, #0]
   155bc:	b21b      	sxth	r3, r3
   155be:	1ad3      	subs	r3, r2, r3
   155c0:	4618      	mov	r0, r3
   155c2:	f002 fd91 	bl	180e8 <__aeabi_i2f>
   155c6:	4603      	mov	r3, r0
   155c8:	4618      	mov	r0, r3
   155ca:	f002 f94d 	bl	17868 <__aeabi_f2d>
   155ce:	4602      	mov	r2, r0
   155d0:	460b      	mov	r3, r1
   155d2:	4610      	mov	r0, r2
   155d4:	4619      	mov	r1, r3
   155d6:	f04f 0200 	mov.w	r2, #0
   155da:	f04f 0300 	mov.w	r3, #0
   155de:	f2c4 034e 	movt	r3, #16462	; 0x404e
   155e2:	f002 f995 	bl	17910 <__aeabi_dmul>
   155e6:	4602      	mov	r2, r0
   155e8:	460b      	mov	r3, r1
   155ea:	4610      	mov	r0, r2
   155ec:	4619      	mov	r1, r3
   155ee:	f04f 0200 	mov.w	r2, #0
   155f2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   155f6:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   155fa:	f002 fab3 	bl	17b64 <__aeabi_ddiv>
   155fe:	4602      	mov	r2, r0
   15600:	460b      	mov	r3, r1
   15602:	4610      	mov	r0, r2
   15604:	4619      	mov	r1, r3
   15606:	f002 fc1d 	bl	17e44 <__aeabi_d2iz>
   1560a:	4603      	mov	r3, r0
   1560c:	b29b      	uxth	r3, r3
   1560e:	b29a      	uxth	r2, r3
   15610:	f24b 43ea 	movw	r3, #46314	; 0xb4ea
   15614:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15618:	881b      	ldrh	r3, [r3, #0]
   1561a:	b29b      	uxth	r3, r3
   1561c:	4413      	add	r3, r2
   1561e:	b29b      	uxth	r3, r3
   15620:	b29a      	uxth	r2, r3
   15622:	f240 33f4 	movw	r3, #1012	; 0x3f4
   15626:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1562a:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   1562c:	f240 33f4 	movw	r3, #1012	; 0x3f4
   15630:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15634:	881b      	ldrh	r3, [r3, #0]
   15636:	b21b      	sxth	r3, r3
   15638:	4618      	mov	r0, r3
   1563a:	f002 fd55 	bl	180e8 <__aeabi_i2f>
   1563e:	4602      	mov	r2, r0
   15640:	f64a 63c0 	movw	r3, #44736	; 0xaec0
   15644:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15648:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   1564a:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
   1564e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15652:	781b      	ldrb	r3, [r3, #0]
   15654:	2b02      	cmp	r3, #2
   15656:	d168      	bne.n	1572a <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   15658:	79fb      	ldrb	r3, [r7, #7]
   1565a:	2b00      	cmp	r3, #0
   1565c:	d013      	beq.n	15686 <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   1565e:	f240 33f2 	movw	r3, #1010	; 0x3f2
   15662:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15666:	881a      	ldrh	r2, [r3, #0]
   15668:	f24b 43ec 	movw	r3, #46316	; 0xb4ec
   1566c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15670:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   15672:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   15676:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1567a:	899a      	ldrh	r2, [r3, #12]
   1567c:	f24b 43e8 	movw	r3, #46312	; 0xb4e8
   15680:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15684:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   15686:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   1568a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1568e:	899b      	ldrh	r3, [r3, #12]
   15690:	b21a      	sxth	r2, r3
   15692:	f24b 43e8 	movw	r3, #46312	; 0xb4e8
   15696:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1569a:	881b      	ldrh	r3, [r3, #0]
   1569c:	b21b      	sxth	r3, r3
   1569e:	1ad3      	subs	r3, r2, r3
   156a0:	4618      	mov	r0, r3
   156a2:	f002 fd21 	bl	180e8 <__aeabi_i2f>
   156a6:	4603      	mov	r3, r0
   156a8:	4618      	mov	r0, r3
   156aa:	f002 f8dd 	bl	17868 <__aeabi_f2d>
   156ae:	4602      	mov	r2, r0
   156b0:	460b      	mov	r3, r1
   156b2:	4610      	mov	r0, r2
   156b4:	4619      	mov	r1, r3
   156b6:	f04f 0200 	mov.w	r2, #0
   156ba:	f04f 0300 	mov.w	r3, #0
   156be:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   156c2:	f002 f925 	bl	17910 <__aeabi_dmul>
   156c6:	4602      	mov	r2, r0
   156c8:	460b      	mov	r3, r1
   156ca:	4610      	mov	r0, r2
   156cc:	4619      	mov	r1, r3
   156ce:	f04f 0200 	mov.w	r2, #0
   156d2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   156d6:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   156da:	f002 fa43 	bl	17b64 <__aeabi_ddiv>
   156de:	4602      	mov	r2, r0
   156e0:	460b      	mov	r3, r1
   156e2:	4610      	mov	r0, r2
   156e4:	4619      	mov	r1, r3
   156e6:	f002 fbad 	bl	17e44 <__aeabi_d2iz>
   156ea:	4603      	mov	r3, r0
   156ec:	b29b      	uxth	r3, r3
   156ee:	b29a      	uxth	r2, r3
   156f0:	f24b 43ec 	movw	r3, #46316	; 0xb4ec
   156f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156f8:	881b      	ldrh	r3, [r3, #0]
   156fa:	b29b      	uxth	r3, r3
   156fc:	4413      	add	r3, r2
   156fe:	b29b      	uxth	r3, r3
   15700:	b29a      	uxth	r2, r3
   15702:	f240 33f2 	movw	r3, #1010	; 0x3f2
   15706:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1570a:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   1570c:	f240 33f2 	movw	r3, #1010	; 0x3f2
   15710:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15714:	881b      	ldrh	r3, [r3, #0]
   15716:	b21b      	sxth	r3, r3
   15718:	4618      	mov	r0, r3
   1571a:	f002 fce5 	bl	180e8 <__aeabi_i2f>
   1571e:	4602      	mov	r2, r0
   15720:	f64a 63c4 	movw	r3, #44740	; 0xaec4
   15724:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15728:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   1572a:	f64a 63b4 	movw	r3, #44724	; 0xaeb4
   1572e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15732:	781b      	ldrb	r3, [r3, #0]
   15734:	2b02      	cmp	r3, #2
   15736:	f040 80da 	bne.w	158ee <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   1573a:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
   1573e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15742:	781b      	ldrb	r3, [r3, #0]
   15744:	2b02      	cmp	r3, #2
   15746:	d165      	bne.n	15814 <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   15748:	79fb      	ldrb	r3, [r7, #7]
   1574a:	2b00      	cmp	r3, #0
   1574c:	d013      	beq.n	15776 <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   1574e:	f240 4308 	movw	r3, #1032	; 0x408
   15752:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15756:	681a      	ldr	r2, [r3, #0]
   15758:	f24b 43f0 	movw	r3, #46320	; 0xb4f0
   1575c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15760:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   15762:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   15766:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1576a:	895a      	ldrh	r2, [r3, #10]
   1576c:	f24b 43e6 	movw	r3, #46310	; 0xb4e6
   15770:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15774:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   15776:	f24b 43f0 	movw	r3, #46320	; 0xb4f0
   1577a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1577e:	681b      	ldr	r3, [r3, #0]
   15780:	4618      	mov	r0, r3
   15782:	f002 f871 	bl	17868 <__aeabi_f2d>
   15786:	4604      	mov	r4, r0
   15788:	460d      	mov	r5, r1
   1578a:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   1578e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15792:	895b      	ldrh	r3, [r3, #10]
   15794:	b21a      	sxth	r2, r3
   15796:	f24b 43e6 	movw	r3, #46310	; 0xb4e6
   1579a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1579e:	881b      	ldrh	r3, [r3, #0]
   157a0:	b21b      	sxth	r3, r3
   157a2:	1ad3      	subs	r3, r2, r3
   157a4:	4618      	mov	r0, r3
   157a6:	f002 fc9f 	bl	180e8 <__aeabi_i2f>
   157aa:	4603      	mov	r3, r0
   157ac:	4618      	mov	r0, r3
   157ae:	f002 f85b 	bl	17868 <__aeabi_f2d>
   157b2:	4602      	mov	r2, r0
   157b4:	460b      	mov	r3, r1
   157b6:	4610      	mov	r0, r2
   157b8:	4619      	mov	r1, r3
   157ba:	a34f      	add	r3, pc, #316	; (adr r3, 158f8 <inflight_calib+0x3a8>)
   157bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   157c0:	f002 f8a6 	bl	17910 <__aeabi_dmul>
   157c4:	4602      	mov	r2, r0
   157c6:	460b      	mov	r3, r1
   157c8:	4610      	mov	r0, r2
   157ca:	4619      	mov	r1, r3
   157cc:	f04f 0200 	mov.w	r2, #0
   157d0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   157d4:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   157d8:	f002 f9c4 	bl	17b64 <__aeabi_ddiv>
   157dc:	4602      	mov	r2, r0
   157de:	460b      	mov	r3, r1
   157e0:	4620      	mov	r0, r4
   157e2:	4629      	mov	r1, r5
   157e4:	f001 fee2 	bl	175ac <__adddf3>
   157e8:	4602      	mov	r2, r0
   157ea:	460b      	mov	r3, r1
   157ec:	4610      	mov	r0, r2
   157ee:	4619      	mov	r1, r3
   157f0:	f002 fb70 	bl	17ed4 <__aeabi_d2f>
   157f4:	4602      	mov	r2, r0
   157f6:	f240 4308 	movw	r3, #1032	; 0x408
   157fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157fe:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   15800:	f240 4308 	movw	r3, #1032	; 0x408
   15804:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15808:	681a      	ldr	r2, [r3, #0]
   1580a:	f64a 63c0 	movw	r3, #44736	; 0xaec0
   1580e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15812:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15814:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
   15818:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1581c:	781b      	ldrb	r3, [r3, #0]
   1581e:	2b02      	cmp	r3, #2
   15820:	d165      	bne.n	158ee <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   15822:	79fb      	ldrb	r3, [r7, #7]
   15824:	2b00      	cmp	r3, #0
   15826:	d013      	beq.n	15850 <inflight_calib+0x300>
        max_roll_init = max_roll;
   15828:	f240 430c 	movw	r3, #1036	; 0x40c
   1582c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15830:	681a      	ldr	r2, [r3, #0]
   15832:	f24b 43f4 	movw	r3, #46324	; 0xb4f4
   15836:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1583a:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   1583c:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   15840:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15844:	899a      	ldrh	r2, [r3, #12]
   15846:	f24b 43e8 	movw	r3, #46312	; 0xb4e8
   1584a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1584e:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   15850:	f24b 43f4 	movw	r3, #46324	; 0xb4f4
   15854:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15858:	681b      	ldr	r3, [r3, #0]
   1585a:	4618      	mov	r0, r3
   1585c:	f002 f804 	bl	17868 <__aeabi_f2d>
   15860:	4604      	mov	r4, r0
   15862:	460d      	mov	r5, r1
   15864:	f64a 73d8 	movw	r3, #45016	; 0xafd8
   15868:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1586c:	899b      	ldrh	r3, [r3, #12]
   1586e:	b21a      	sxth	r2, r3
   15870:	f24b 43e8 	movw	r3, #46312	; 0xb4e8
   15874:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15878:	881b      	ldrh	r3, [r3, #0]
   1587a:	b21b      	sxth	r3, r3
   1587c:	1ad3      	subs	r3, r2, r3
   1587e:	4618      	mov	r0, r3
   15880:	f002 fc32 	bl	180e8 <__aeabi_i2f>
   15884:	4603      	mov	r3, r0
   15886:	4618      	mov	r0, r3
   15888:	f001 ffee 	bl	17868 <__aeabi_f2d>
   1588c:	4602      	mov	r2, r0
   1588e:	460b      	mov	r3, r1
   15890:	4610      	mov	r0, r2
   15892:	4619      	mov	r1, r3
   15894:	a31a      	add	r3, pc, #104	; (adr r3, 15900 <inflight_calib+0x3b0>)
   15896:	e9d3 2300 	ldrd	r2, r3, [r3]
   1589a:	f002 f839 	bl	17910 <__aeabi_dmul>
   1589e:	4602      	mov	r2, r0
   158a0:	460b      	mov	r3, r1
   158a2:	4610      	mov	r0, r2
   158a4:	4619      	mov	r1, r3
   158a6:	f04f 0200 	mov.w	r2, #0
   158aa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   158ae:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   158b2:	f002 f957 	bl	17b64 <__aeabi_ddiv>
   158b6:	4602      	mov	r2, r0
   158b8:	460b      	mov	r3, r1
   158ba:	4620      	mov	r0, r4
   158bc:	4629      	mov	r1, r5
   158be:	f001 fe75 	bl	175ac <__adddf3>
   158c2:	4602      	mov	r2, r0
   158c4:	460b      	mov	r3, r1
   158c6:	4610      	mov	r0, r2
   158c8:	4619      	mov	r1, r3
   158ca:	f002 fb03 	bl	17ed4 <__aeabi_d2f>
   158ce:	4602      	mov	r2, r0
   158d0:	f240 430c 	movw	r3, #1036	; 0x40c
   158d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158d8:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   158da:	f240 430c 	movw	r3, #1036	; 0x40c
   158de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158e2:	681a      	ldr	r2, [r3, #0]
   158e4:	f64a 63c4 	movw	r3, #44740	; 0xaec4
   158e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158ec:	601a      	str	r2, [r3, #0]
    }
  }
}
   158ee:	3708      	adds	r7, #8
   158f0:	46bd      	mov	sp, r7
   158f2:	bdb0      	pop	{r4, r5, r7, pc}
   158f4:	f3af 8000 	nop.w
   158f8:	9999999a 	.word	0x9999999a
   158fc:	3fb99999 	.word	0x3fb99999
   15900:	9999999a 	.word	0x9999999a
   15904:	bfc99999 	.word	0xbfc99999

00015908 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   15908:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   1590c:	b08e      	sub	sp, #56	; 0x38
   1590e:	af00      	add	r7, sp, #0
   15910:	e9c7 0102 	strd	r0, r1, [r7, #8]
   15914:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   15918:	a357      	add	r3, pc, #348	; (adr r3, 15a78 <pp_atan2+0x170>)
   1591a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1591e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   15922:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15926:	f04f 0200 	mov.w	r2, #0
   1592a:	f04f 0300 	mov.w	r3, #0
   1592e:	f2c4 0308 	movt	r3, #16392	; 0x4008
   15932:	f001 ffed 	bl	17910 <__aeabi_dmul>
   15936:	4602      	mov	r2, r0
   15938:	460b      	mov	r3, r1
   1593a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   1593e:	e9d7 0100 	ldrd	r0, r1, [r7]
   15942:	f04f 0200 	mov.w	r2, #0
   15946:	f04f 0300 	mov.w	r3, #0
   1594a:	f002 fa53 	bl	17df4 <__aeabi_dcmplt>
   1594e:	4603      	mov	r3, r0
   15950:	2b00      	cmp	r3, #0
   15952:	d009      	beq.n	15968 <pp_atan2+0x60>
   15954:	a14a      	add	r1, pc, #296	; (adr r1, 15a80 <pp_atan2+0x178>)
   15956:	e9d1 0100 	ldrd	r0, r1, [r1]
   1595a:	e9d7 2300 	ldrd	r2, r3, [r7]
   1595e:	f001 fe23 	bl	175a8 <__aeabi_dsub>
   15962:	4602      	mov	r2, r0
   15964:	460b      	mov	r3, r1
   15966:	e008      	b.n	1597a <pp_atan2+0x72>
   15968:	e9d7 0100 	ldrd	r0, r1, [r7]
   1596c:	a344      	add	r3, pc, #272	; (adr r3, 15a80 <pp_atan2+0x178>)
   1596e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15972:	f001 fe1b 	bl	175ac <__adddf3>
   15976:	4602      	mov	r2, r0
   15978:	460b      	mov	r3, r1
   1597a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   1597e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15982:	f04f 0200 	mov.w	r2, #0
   15986:	f04f 0300 	mov.w	r3, #0
   1598a:	f002 fa51 	bl	17e30 <__aeabi_dcmpgt>
   1598e:	4603      	mov	r3, r0
   15990:	2b00      	cmp	r3, #0
   15992:	d02a      	beq.n	159ea <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   15994:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15998:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1599c:	f001 fe04 	bl	175a8 <__aeabi_dsub>
   159a0:	4602      	mov	r2, r0
   159a2:	460b      	mov	r3, r1
   159a4:	4690      	mov	r8, r2
   159a6:	4699      	mov	r9, r3
   159a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   159ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   159b0:	f001 fdfc 	bl	175ac <__adddf3>
   159b4:	4602      	mov	r2, r0
   159b6:	460b      	mov	r3, r1
   159b8:	4640      	mov	r0, r8
   159ba:	4649      	mov	r1, r9
   159bc:	f002 f8d2 	bl	17b64 <__aeabi_ddiv>
   159c0:	4602      	mov	r2, r0
   159c2:	460b      	mov	r3, r1
   159c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   159c8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   159cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   159d0:	f001 ff9e 	bl	17910 <__aeabi_dmul>
   159d4:	4602      	mov	r2, r0
   159d6:	460b      	mov	r3, r1
   159d8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   159dc:	f001 fde4 	bl	175a8 <__aeabi_dsub>
   159e0:	4602      	mov	r2, r0
   159e2:	460b      	mov	r3, r1
   159e4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   159e8:	e029      	b.n	15a3e <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   159ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   159ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   159f2:	f001 fddb 	bl	175ac <__adddf3>
   159f6:	4602      	mov	r2, r0
   159f8:	460b      	mov	r3, r1
   159fa:	4690      	mov	r8, r2
   159fc:	4699      	mov	r9, r3
   159fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15a02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   15a06:	f001 fdcf 	bl	175a8 <__aeabi_dsub>
   15a0a:	4602      	mov	r2, r0
   15a0c:	460b      	mov	r3, r1
   15a0e:	4640      	mov	r0, r8
   15a10:	4649      	mov	r1, r9
   15a12:	f002 f8a7 	bl	17b64 <__aeabi_ddiv>
   15a16:	4602      	mov	r2, r0
   15a18:	460b      	mov	r3, r1
   15a1a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   15a1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15a22:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15a26:	f001 ff73 	bl	17910 <__aeabi_dmul>
   15a2a:	4602      	mov	r2, r0
   15a2c:	460b      	mov	r3, r1
   15a2e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   15a32:	f001 fdb9 	bl	175a8 <__aeabi_dsub>
   15a36:	4602      	mov	r2, r0
   15a38:	460b      	mov	r3, r1
   15a3a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   15a3e:	e9d7 0100 	ldrd	r0, r1, [r7]
   15a42:	f04f 0200 	mov.w	r2, #0
   15a46:	f04f 0300 	mov.w	r3, #0
   15a4a:	f002 f9d3 	bl	17df4 <__aeabi_dcmplt>
   15a4e:	4603      	mov	r3, r0
   15a50:	2b00      	cmp	r3, #0
   15a52:	d004      	beq.n	15a5e <pp_atan2+0x156>
		return (-angle);
   15a54:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   15a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15a58:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15a5c:	e001      	b.n	15a62 <pp_atan2+0x15a>
	else
		return angle;
   15a5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   15a62:	4622      	mov	r2, r4
   15a64:	462b      	mov	r3, r5
}
   15a66:	4610      	mov	r0, r2
   15a68:	4619      	mov	r1, r3
   15a6a:	3738      	adds	r7, #56	; 0x38
   15a6c:	46bd      	mov	sp, r7
   15a6e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   15a72:	bf00      	nop
   15a74:	f3af 8000 	nop.w
   15a78:	54442d18 	.word	0x54442d18
   15a7c:	3fe921fb 	.word	0x3fe921fb
   15a80:	d9d7bdbb 	.word	0xd9d7bdbb
   15a84:	3ddb7cdf 	.word	0x3ddb7cdf

00015a88 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   15a88:	b5b0      	push	{r4, r5, r7, lr}
   15a8a:	b08c      	sub	sp, #48	; 0x30
   15a8c:	af00      	add	r7, sp, #0
   15a8e:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   15a92:	e9d7 2300 	ldrd	r2, r3, [r7]
   15a96:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15a9a:	2301      	movs	r3, #1
   15a9c:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   15a9e:	e00a      	b.n	15ab6 <pp_sin+0x2e>
   15aa0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15aa4:	a35a      	add	r3, pc, #360	; (adr r3, 15c10 <pp_sin+0x188>)
   15aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
   15aaa:	f001 fd7f 	bl	175ac <__adddf3>
   15aae:	4602      	mov	r2, r0
   15ab0:	460b      	mov	r3, r1
   15ab2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15ab6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15aba:	a357      	add	r3, pc, #348	; (adr r3, 15c18 <pp_sin+0x190>)
   15abc:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ac0:	f002 f998 	bl	17df4 <__aeabi_dcmplt>
   15ac4:	4603      	mov	r3, r0
   15ac6:	2b00      	cmp	r3, #0
   15ac8:	d1ea      	bne.n	15aa0 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   15aca:	e00a      	b.n	15ae2 <pp_sin+0x5a>
   15acc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15ad0:	a34f      	add	r3, pc, #316	; (adr r3, 15c10 <pp_sin+0x188>)
   15ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ad6:	f001 fd67 	bl	175a8 <__aeabi_dsub>
   15ada:	4602      	mov	r2, r0
   15adc:	460b      	mov	r3, r1
   15ade:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15ae2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15ae6:	a34e      	add	r3, pc, #312	; (adr r3, 15c20 <pp_sin+0x198>)
   15ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
   15aec:	f002 f9a0 	bl	17e30 <__aeabi_dcmpgt>
   15af0:	4603      	mov	r3, r0
   15af2:	2b00      	cmp	r3, #0
   15af4:	d1ea      	bne.n	15acc <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   15af6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15afa:	a34b      	add	r3, pc, #300	; (adr r3, 15c28 <pp_sin+0x1a0>)
   15afc:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b00:	f002 f996 	bl	17e30 <__aeabi_dcmpgt>
   15b04:	4603      	mov	r3, r0
   15b06:	2b00      	cmp	r3, #0
   15b08:	d00d      	beq.n	15b26 <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   15b0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15b0e:	a348      	add	r3, pc, #288	; (adr r3, 15c30 <pp_sin+0x1a8>)
   15b10:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b14:	f001 fd48 	bl	175a8 <__aeabi_dsub>
   15b18:	4602      	mov	r2, r0
   15b1a:	460b      	mov	r3, r1
   15b1c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   15b20:	f04f 33ff 	mov.w	r3, #4294967295
   15b24:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   15b26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15b2a:	a343      	add	r3, pc, #268	; (adr r3, 15c38 <pp_sin+0x1b0>)
   15b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b30:	f002 f818 	bl	17b64 <__aeabi_ddiv>
   15b34:	4602      	mov	r2, r0
   15b36:	460b      	mov	r3, r1
   15b38:	e9c7 2306 	strd	r2, r3, [r7, #24]
   15b3c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15b40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15b44:	f001 fee4 	bl	17910 <__aeabi_dmul>
   15b48:	4602      	mov	r2, r0
   15b4a:	460b      	mov	r3, r1
   15b4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   15b50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   15b54:	a33a      	add	r3, pc, #232	; (adr r3, 15c40 <pp_sin+0x1b8>)
   15b56:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b5a:	f001 fed9 	bl	17910 <__aeabi_dmul>
   15b5e:	4602      	mov	r2, r0
   15b60:	460b      	mov	r3, r1
	      - .00467376557) * q2
   15b62:	4610      	mov	r0, r2
   15b64:	4619      	mov	r1, r3
   15b66:	a338      	add	r3, pc, #224	; (adr r3, 15c48 <pp_sin+0x1c0>)
   15b68:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b6c:	f001 fd1c 	bl	175a8 <__aeabi_dsub>
   15b70:	4602      	mov	r2, r0
   15b72:	460b      	mov	r3, r1
   15b74:	4610      	mov	r0, r2
   15b76:	4619      	mov	r1, r3
   15b78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15b7c:	f001 fec8 	bl	17910 <__aeabi_dmul>
   15b80:	4602      	mov	r2, r0
   15b82:	460b      	mov	r3, r1
	      + .07968967928) * q2
   15b84:	4610      	mov	r0, r2
   15b86:	4619      	mov	r1, r3
   15b88:	a331      	add	r3, pc, #196	; (adr r3, 15c50 <pp_sin+0x1c8>)
   15b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b8e:	f001 fd0d 	bl	175ac <__adddf3>
   15b92:	4602      	mov	r2, r0
   15b94:	460b      	mov	r3, r1
   15b96:	4610      	mov	r0, r2
   15b98:	4619      	mov	r1, r3
   15b9a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15b9e:	f001 feb7 	bl	17910 <__aeabi_dmul>
   15ba2:	4602      	mov	r2, r0
   15ba4:	460b      	mov	r3, r1
	      - .64596371106) * q2
   15ba6:	4610      	mov	r0, r2
   15ba8:	4619      	mov	r1, r3
   15baa:	a32b      	add	r3, pc, #172	; (adr r3, 15c58 <pp_sin+0x1d0>)
   15bac:	e9d3 2300 	ldrd	r2, r3, [r3]
   15bb0:	f001 fcfa 	bl	175a8 <__aeabi_dsub>
   15bb4:	4602      	mov	r2, r0
   15bb6:	460b      	mov	r3, r1
   15bb8:	4610      	mov	r0, r2
   15bba:	4619      	mov	r1, r3
   15bbc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15bc0:	f001 fea6 	bl	17910 <__aeabi_dmul>
   15bc4:	4602      	mov	r2, r0
   15bc6:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   15bc8:	4610      	mov	r0, r2
   15bca:	4619      	mov	r1, r3
   15bcc:	a324      	add	r3, pc, #144	; (adr r3, 15c60 <pp_sin+0x1d8>)
   15bce:	e9d3 2300 	ldrd	r2, r3, [r3]
   15bd2:	f001 fceb 	bl	175ac <__adddf3>
   15bd6:	4602      	mov	r2, r0
   15bd8:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   15bda:	4610      	mov	r0, r2
   15bdc:	4619      	mov	r1, r3
   15bde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15be2:	f001 fe95 	bl	17910 <__aeabi_dmul>
   15be6:	4602      	mov	r2, r0
   15be8:	460b      	mov	r3, r1
   15bea:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   15bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15bf0:	2b00      	cmp	r3, #0
   15bf2:	da04      	bge.n	15bfe <pp_sin+0x176>
   15bf4:	68bc      	ldr	r4, [r7, #8]
   15bf6:	68fb      	ldr	r3, [r7, #12]
   15bf8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15bfc:	e001      	b.n	15c02 <pp_sin+0x17a>
   15bfe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   15c02:	4622      	mov	r2, r4
   15c04:	462b      	mov	r3, r5
}
   15c06:	4610      	mov	r0, r2
   15c08:	4619      	mov	r1, r3
   15c0a:	3730      	adds	r7, #48	; 0x30
   15c0c:	46bd      	mov	sp, r7
   15c0e:	bdb0      	pop	{r4, r5, r7, pc}
   15c10:	54442d18 	.word	0x54442d18
   15c14:	401921fb 	.word	0x401921fb
   15c18:	54442d18 	.word	0x54442d18
   15c1c:	bff921fb 	.word	0xbff921fb
   15c20:	7f3321d2 	.word	0x7f3321d2
   15c24:	4012d97c 	.word	0x4012d97c
   15c28:	54442d18 	.word	0x54442d18
   15c2c:	3ff921fb 	.word	0x3ff921fb
   15c30:	54442d18 	.word	0x54442d18
   15c34:	400921fb 	.word	0x400921fb
   15c38:	5443d6f4 	.word	0x5443d6f4
   15c3c:	3ff921fb 	.word	0x3ff921fb
   15c40:	48a890af 	.word	0x48a890af
   15c44:	3f23daf7 	.word	0x3f23daf7
   15c48:	645b6d0e 	.word	0x645b6d0e
   15c4c:	3f7324cc 	.word	0x3f7324cc
   15c50:	f65619a5 	.word	0xf65619a5
   15c54:	3fb4668a 	.word	0x3fb4668a
   15c58:	16acf9cd 	.word	0x16acf9cd
   15c5c:	3fe4abbc 	.word	0x3fe4abbc
   15c60:	520817f7 	.word	0x520817f7
   15c64:	3ff921fb 	.word	0x3ff921fb

00015c68 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   15c68:	b480      	push	{r7}
   15c6a:	b083      	sub	sp, #12
   15c6c:	af00      	add	r7, sp, #0
   15c6e:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   15c72:	4610      	mov	r0, r2
   15c74:	4619      	mov	r1, r3
   15c76:	370c      	adds	r7, #12
   15c78:	46bd      	mov	sp, r7
   15c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
   15c7e:	4770      	bx	lr

00015c80 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   15c80:	b480      	push	{r7}
   15c82:	b083      	sub	sp, #12
   15c84:	af00      	add	r7, sp, #0
   15c86:	4603      	mov	r3, r0
   15c88:	6039      	str	r1, [r7, #0]
   15c8a:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   15c8c:	79fa      	ldrb	r2, [r7, #7]
   15c8e:	f24b 5308 	movw	r3, #46344	; 0xb508
   15c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c96:	6839      	ldr	r1, [r7, #0]
   15c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   15c9c:	370c      	adds	r7, #12
   15c9e:	46bd      	mov	sp, r7
   15ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
   15ca4:	4770      	bx	lr
   15ca6:	bf00      	nop

00015ca8 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   15ca8:	b480      	push	{r7}
   15caa:	b083      	sub	sp, #12
   15cac:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   15cae:	f242 0315 	movw	r3, #8213	; 0x2015
   15cb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15cb6:	2200      	movs	r2, #0
   15cb8:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   15cba:	f242 0314 	movw	r3, #8212	; 0x2014
   15cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15cc2:	2200      	movs	r2, #0
   15cc4:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   15cc6:	f242 0307 	movw	r3, #8199	; 0x2007
   15cca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15cce:	22c0      	movs	r2, #192	; 0xc0
   15cd0:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   15cd2:	f242 0306 	movw	r3, #8198	; 0x2006
   15cd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15cda:	22cf      	movs	r2, #207	; 0xcf
   15cdc:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15cde:	2300      	movs	r3, #0
   15ce0:	71fb      	strb	r3, [r7, #7]
   15ce2:	e00a      	b.n	15cfa <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   15ce4:	79fa      	ldrb	r2, [r7, #7]
   15ce6:	f24b 5308 	movw	r3, #46344	; 0xb508
   15cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15cee:	2100      	movs	r1, #0
   15cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15cf4:	79fb      	ldrb	r3, [r7, #7]
   15cf6:	3301      	adds	r3, #1
   15cf8:	71fb      	strb	r3, [r7, #7]
   15cfa:	79fb      	ldrb	r3, [r7, #7]
   15cfc:	2b07      	cmp	r3, #7
   15cfe:	d9f1      	bls.n	15ce4 <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   15d00:	370c      	adds	r7, #12
   15d02:	46bd      	mov	sp, r7
   15d04:	f85d 7b04 	ldr.w	r7, [sp], #4
   15d08:	4770      	bx	lr
   15d0a:	bf00      	nop

00015d0c <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   15d0c:	b480      	push	{r7}
   15d0e:	b083      	sub	sp, #12
   15d10:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   15d12:	f242 0326 	movw	r3, #8230	; 0x2026
   15d16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d1a:	881b      	ldrh	r3, [r3, #0]
   15d1c:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   15d1e:	f24b 5364 	movw	r3, #46436	; 0xb564
   15d22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d26:	881b      	ldrh	r3, [r3, #0]
   15d28:	88fa      	ldrh	r2, [r7, #6]
   15d2a:	1ad3      	subs	r3, r2, r3
   15d2c:	80bb      	strh	r3, [r7, #4]
  last		= this;
   15d2e:	f24b 5364 	movw	r3, #46436	; 0xb564
   15d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d36:	88fa      	ldrh	r2, [r7, #6]
   15d38:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   15d3a:	f24b 5366 	movw	r3, #46438	; 0xb566
   15d3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d42:	781b      	ldrb	r3, [r3, #0]
   15d44:	2b00      	cmp	r3, #0
   15d46:	d11e      	bne.n	15d86 <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   15d48:	f242 0324 	movw	r3, #8228	; 0x2024
   15d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d50:	781b      	ldrb	r3, [r3, #0]
   15d52:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   15d54:	f24b 5367 	movw	r3, #46439	; 0xb567
   15d58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d5c:	781b      	ldrb	r3, [r3, #0]
   15d5e:	78fa      	ldrb	r2, [r7, #3]
   15d60:	1ad3      	subs	r3, r2, r3
   15d62:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   15d64:	f24b 5367 	movw	r3, #46439	; 0xb567
   15d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d6c:	78fa      	ldrb	r2, [r7, #3]
   15d6e:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   15d70:	78bb      	ldrb	r3, [r7, #2]
   15d72:	2b6d      	cmp	r3, #109	; 0x6d
   15d74:	d906      	bls.n	15d84 <__vector_34+0x78>
      state = 1;
   15d76:	f24b 5366 	movw	r3, #46438	; 0xb566
   15d7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d7e:	2201      	movs	r2, #1
   15d80:	701a      	strb	r2, [r3, #0]
   15d82:	e053      	b.n	15e2c <__vector_34+0x120>
   15d84:	e052      	b.n	15e2c <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   15d86:	88bb      	ldrh	r3, [r7, #4]
   15d88:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   15d8c:	d304      	bcc.n	15d98 <__vector_34+0x8c>
   15d8e:	88ba      	ldrh	r2, [r7, #4]
   15d90:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   15d94:	429a      	cmp	r2, r3
   15d96:	d911      	bls.n	15dbc <__vector_34+0xb0>
      RestartPpmCycle();
   15d98:	f24b 5366 	movw	r3, #46438	; 0xb566
   15d9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15da0:	2200      	movs	r2, #0
   15da2:	701a      	strb	r2, [r3, #0]
   15da4:	f242 0324 	movw	r3, #8228	; 0x2024
   15da8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15dac:	781b      	ldrb	r3, [r3, #0]
   15dae:	b2da      	uxtb	r2, r3
   15db0:	f24b 5367 	movw	r3, #46439	; 0xb567
   15db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15db8:	701a      	strb	r2, [r3, #0]
   15dba:	e038      	b.n	15e2e <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   15dbc:	f24b 5366 	movw	r3, #46438	; 0xb566
   15dc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15dc4:	781b      	ldrb	r3, [r3, #0]
   15dc6:	1e5a      	subs	r2, r3, #1
   15dc8:	f24b 5328 	movw	r3, #46376	; 0xb528
   15dcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15dd0:	88b9      	ldrh	r1, [r7, #4]
   15dd2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   15dd6:	f24b 5366 	movw	r3, #46438	; 0xb566
   15dda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15dde:	781b      	ldrb	r3, [r3, #0]
   15de0:	2b08      	cmp	r3, #8
   15de2:	d917      	bls.n	15e14 <__vector_34+0x108>
      ppm_valid	= 1;
   15de4:	f24b 5363 	movw	r3, #46435	; 0xb563
   15de8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15dec:	2201      	movs	r2, #1
   15dee:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   15df0:	f24b 5366 	movw	r3, #46438	; 0xb566
   15df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15df8:	2200      	movs	r2, #0
   15dfa:	701a      	strb	r2, [r3, #0]
   15dfc:	f242 0324 	movw	r3, #8228	; 0x2024
   15e00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e04:	781b      	ldrb	r3, [r3, #0]
   15e06:	b2da      	uxtb	r2, r3
   15e08:	f24b 5367 	movw	r3, #46439	; 0xb567
   15e0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e10:	701a      	strb	r2, [r3, #0]
   15e12:	e00c      	b.n	15e2e <__vector_34+0x122>
    } else 
      state++;
   15e14:	f24b 5366 	movw	r3, #46438	; 0xb566
   15e18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e1c:	781b      	ldrb	r3, [r3, #0]
   15e1e:	3301      	adds	r3, #1
   15e20:	b2da      	uxtb	r2, r3
   15e22:	f24b 5366 	movw	r3, #46438	; 0xb566
   15e26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e2a:	701a      	strb	r2, [r3, #0]
  }
  return;
   15e2c:	bf00      	nop
}
   15e2e:	370c      	adds	r7, #12
   15e30:	46bd      	mov	sp, r7
   15e32:	f85d 7b04 	ldr.w	r7, [sp], #4
   15e36:	4770      	bx	lr

00015e38 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   15e38:	b590      	push	{r4, r7, lr}
   15e3a:	b083      	sub	sp, #12
   15e3c:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   15e3e:	f24b 5328 	movw	r3, #46376	; 0xb528
   15e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e46:	881b      	ldrh	r3, [r3, #0]
   15e48:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   15e4c:	b29b      	uxth	r3, r3
   15e4e:	80fb      	strh	r3, [r7, #6]
   15e50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15e54:	4618      	mov	r0, r3
   15e56:	f002 f947 	bl	180e8 <__aeabi_i2f>
   15e5a:	4603      	mov	r3, r0
   15e5c:	4618      	mov	r0, r3
   15e5e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   15e62:	f002 f995 	bl	18190 <__aeabi_fmul>
   15e66:	4603      	mov	r3, r0
   15e68:	4618      	mov	r0, r3
   15e6a:	f002 fb57 	bl	1851c <__aeabi_f2iz>
   15e6e:	4603      	mov	r3, r0
   15e70:	b29a      	uxth	r2, r3
   15e72:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15e76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e7a:	801a      	strh	r2, [r3, #0]
   15e7c:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e84:	881b      	ldrh	r3, [r3, #0]
   15e86:	b21b      	sxth	r3, r3
   15e88:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15e8c:	dd07      	ble.n	15e9e <last_radio_from_ppm+0x66>
   15e8e:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e96:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15e9a:	801a      	strh	r2, [r3, #0]
   15e9c:	e00d      	b.n	15eba <last_radio_from_ppm+0x82>
   15e9e:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15ea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ea6:	881b      	ldrh	r3, [r3, #0]
   15ea8:	b21b      	sxth	r3, r3
   15eaa:	2b00      	cmp	r3, #0
   15eac:	da05      	bge.n	15eba <last_radio_from_ppm+0x82>
   15eae:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15eb6:	2200      	movs	r2, #0
   15eb8:	801a      	strh	r2, [r3, #0]
   15eba:	f24b 5328 	movw	r3, #46376	; 0xb528
   15ebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ec2:	885b      	ldrh	r3, [r3, #2]
   15ec4:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15ec8:	b29b      	uxth	r3, r3
   15eca:	80fb      	strh	r3, [r7, #6]
   15ecc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15ed0:	4618      	mov	r0, r3
   15ed2:	f002 f909 	bl	180e8 <__aeabi_i2f>
   15ed6:	4603      	mov	r3, r0
   15ed8:	4618      	mov	r0, r3
   15eda:	f002 fb1f 	bl	1851c <__aeabi_f2iz>
   15ede:	4603      	mov	r3, r0
   15ee0:	b29a      	uxth	r2, r3
   15ee2:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15eea:	805a      	strh	r2, [r3, #2]
   15eec:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15ef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ef4:	885b      	ldrh	r3, [r3, #2]
   15ef6:	b21b      	sxth	r3, r3
   15ef8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15efc:	dd07      	ble.n	15f0e <last_radio_from_ppm+0xd6>
   15efe:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15f02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f06:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15f0a:	805a      	strh	r2, [r3, #2]
   15f0c:	e00f      	b.n	15f2e <last_radio_from_ppm+0xf6>
   15f0e:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f16:	885b      	ldrh	r3, [r3, #2]
   15f18:	b21b      	sxth	r3, r3
   15f1a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15f1e:	da06      	bge.n	15f2e <last_radio_from_ppm+0xf6>
   15f20:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15f24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f28:	f64d 2280 	movw	r2, #55936	; 0xda80
   15f2c:	805a      	strh	r2, [r3, #2]
   15f2e:	f24b 5328 	movw	r3, #46376	; 0xb528
   15f32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f36:	889b      	ldrh	r3, [r3, #4]
   15f38:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15f3c:	b29b      	uxth	r3, r3
   15f3e:	80fb      	strh	r3, [r7, #6]
   15f40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15f44:	4618      	mov	r0, r3
   15f46:	f002 f8cf 	bl	180e8 <__aeabi_i2f>
   15f4a:	4603      	mov	r3, r0
   15f4c:	4618      	mov	r0, r3
   15f4e:	f002 fae5 	bl	1851c <__aeabi_f2iz>
   15f52:	4603      	mov	r3, r0
   15f54:	b29a      	uxth	r2, r3
   15f56:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f5e:	809a      	strh	r2, [r3, #4]
   15f60:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f68:	889b      	ldrh	r3, [r3, #4]
   15f6a:	b21b      	sxth	r3, r3
   15f6c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15f70:	dd07      	ble.n	15f82 <last_radio_from_ppm+0x14a>
   15f72:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15f76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f7a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15f7e:	809a      	strh	r2, [r3, #4]
   15f80:	e00f      	b.n	15fa2 <last_radio_from_ppm+0x16a>
   15f82:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15f86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f8a:	889b      	ldrh	r3, [r3, #4]
   15f8c:	b21b      	sxth	r3, r3
   15f8e:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15f92:	da06      	bge.n	15fa2 <last_radio_from_ppm+0x16a>
   15f94:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f9c:	f64d 2280 	movw	r2, #55936	; 0xda80
   15fa0:	809a      	strh	r2, [r3, #4]
   15fa2:	f24b 5328 	movw	r3, #46376	; 0xb528
   15fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15faa:	88db      	ldrh	r3, [r3, #6]
   15fac:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15fb0:	b29b      	uxth	r3, r3
   15fb2:	80fb      	strh	r3, [r7, #6]
   15fb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15fb8:	4618      	mov	r0, r3
   15fba:	f002 f895 	bl	180e8 <__aeabi_i2f>
   15fbe:	4603      	mov	r3, r0
   15fc0:	4618      	mov	r0, r3
   15fc2:	f002 faab 	bl	1851c <__aeabi_f2iz>
   15fc6:	4603      	mov	r3, r0
   15fc8:	b29a      	uxth	r2, r3
   15fca:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fd2:	80da      	strh	r2, [r3, #6]
   15fd4:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fdc:	88db      	ldrh	r3, [r3, #6]
   15fde:	b21b      	sxth	r3, r3
   15fe0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15fe4:	dd07      	ble.n	15ff6 <last_radio_from_ppm+0x1be>
   15fe6:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fee:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15ff2:	80da      	strh	r2, [r3, #6]
   15ff4:	e00f      	b.n	16016 <last_radio_from_ppm+0x1de>
   15ff6:	f24b 533c 	movw	r3, #46396	; 0xb53c
   15ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ffe:	88db      	ldrh	r3, [r3, #6]
   16000:	b21b      	sxth	r3, r3
   16002:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16006:	da06      	bge.n	16016 <last_radio_from_ppm+0x1de>
   16008:	f24b 533c 	movw	r3, #46396	; 0xb53c
   1600c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16010:	f64d 2280 	movw	r2, #55936	; 0xda80
   16014:	80da      	strh	r2, [r3, #6]
   16016:	f24b 5328 	movw	r3, #46376	; 0xb528
   1601a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1601e:	891b      	ldrh	r3, [r3, #8]
   16020:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16024:	b29b      	uxth	r3, r3
   16026:	80fb      	strh	r3, [r7, #6]
   16028:	f24b 5350 	movw	r3, #46416	; 0xb550
   1602c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16030:	891b      	ldrh	r3, [r3, #8]
   16032:	b21b      	sxth	r3, r3
   16034:	4618      	mov	r0, r3
   16036:	f002 f857 	bl	180e8 <__aeabi_i2f>
   1603a:	4604      	mov	r4, r0
   1603c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16040:	4618      	mov	r0, r3
   16042:	f002 f851 	bl	180e8 <__aeabi_i2f>
   16046:	4603      	mov	r3, r0
   16048:	4618      	mov	r0, r3
   1604a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1604e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16052:	f002 f89d 	bl	18190 <__aeabi_fmul>
   16056:	4603      	mov	r3, r0
   16058:	4620      	mov	r0, r4
   1605a:	4619      	mov	r1, r3
   1605c:	f001 ff90 	bl	17f80 <__addsf3>
   16060:	4603      	mov	r3, r0
   16062:	4618      	mov	r0, r3
   16064:	f002 fa5a 	bl	1851c <__aeabi_f2iz>
   16068:	4603      	mov	r3, r0
   1606a:	b29a      	uxth	r2, r3
   1606c:	f24b 5350 	movw	r3, #46416	; 0xb550
   16070:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16074:	811a      	strh	r2, [r3, #8]
   16076:	f24b 5328 	movw	r3, #46376	; 0xb528
   1607a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1607e:	895b      	ldrh	r3, [r3, #10]
   16080:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16084:	b29b      	uxth	r3, r3
   16086:	80fb      	strh	r3, [r7, #6]
   16088:	f24b 5350 	movw	r3, #46416	; 0xb550
   1608c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16090:	895b      	ldrh	r3, [r3, #10]
   16092:	b21b      	sxth	r3, r3
   16094:	4618      	mov	r0, r3
   16096:	f002 f827 	bl	180e8 <__aeabi_i2f>
   1609a:	4604      	mov	r4, r0
   1609c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   160a0:	4618      	mov	r0, r3
   160a2:	f002 f821 	bl	180e8 <__aeabi_i2f>
   160a6:	4603      	mov	r3, r0
   160a8:	4618      	mov	r0, r3
   160aa:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   160ae:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   160b2:	f002 f86d 	bl	18190 <__aeabi_fmul>
   160b6:	4603      	mov	r3, r0
   160b8:	4620      	mov	r0, r4
   160ba:	4619      	mov	r1, r3
   160bc:	f001 ff60 	bl	17f80 <__addsf3>
   160c0:	4603      	mov	r3, r0
   160c2:	4618      	mov	r0, r3
   160c4:	f002 fa2a 	bl	1851c <__aeabi_f2iz>
   160c8:	4603      	mov	r3, r0
   160ca:	b29a      	uxth	r2, r3
   160cc:	f24b 5350 	movw	r3, #46416	; 0xb550
   160d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160d4:	815a      	strh	r2, [r3, #10]
   160d6:	f24b 5328 	movw	r3, #46376	; 0xb528
   160da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160de:	899b      	ldrh	r3, [r3, #12]
   160e0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   160e4:	b29b      	uxth	r3, r3
   160e6:	80fb      	strh	r3, [r7, #6]
   160e8:	f24b 5350 	movw	r3, #46416	; 0xb550
   160ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160f0:	899b      	ldrh	r3, [r3, #12]
   160f2:	b21b      	sxth	r3, r3
   160f4:	4618      	mov	r0, r3
   160f6:	f001 fff7 	bl	180e8 <__aeabi_i2f>
   160fa:	4604      	mov	r4, r0
   160fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16100:	4618      	mov	r0, r3
   16102:	f001 fff1 	bl	180e8 <__aeabi_i2f>
   16106:	4603      	mov	r3, r0
   16108:	4618      	mov	r0, r3
   1610a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1610e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16112:	f002 f83d 	bl	18190 <__aeabi_fmul>
   16116:	4603      	mov	r3, r0
   16118:	4620      	mov	r0, r4
   1611a:	4619      	mov	r1, r3
   1611c:	f001 ff30 	bl	17f80 <__addsf3>
   16120:	4603      	mov	r3, r0
   16122:	4618      	mov	r0, r3
   16124:	f002 f9fa 	bl	1851c <__aeabi_f2iz>
   16128:	4603      	mov	r3, r0
   1612a:	b29a      	uxth	r2, r3
   1612c:	f24b 5350 	movw	r3, #46416	; 0xb550
   16130:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16134:	819a      	strh	r2, [r3, #12]
   16136:	f24b 5328 	movw	r3, #46376	; 0xb528
   1613a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1613e:	89db      	ldrh	r3, [r3, #14]
   16140:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16144:	b29b      	uxth	r3, r3
   16146:	80fb      	strh	r3, [r7, #6]
   16148:	f24b 5350 	movw	r3, #46416	; 0xb550
   1614c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16150:	89db      	ldrh	r3, [r3, #14]
   16152:	b21b      	sxth	r3, r3
   16154:	4618      	mov	r0, r3
   16156:	f001 ffc7 	bl	180e8 <__aeabi_i2f>
   1615a:	4604      	mov	r4, r0
   1615c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16160:	4618      	mov	r0, r3
   16162:	f001 ffc1 	bl	180e8 <__aeabi_i2f>
   16166:	4603      	mov	r3, r0
   16168:	4618      	mov	r0, r3
   1616a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1616e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16172:	f002 f80d 	bl	18190 <__aeabi_fmul>
   16176:	4603      	mov	r3, r0
   16178:	4620      	mov	r0, r4
   1617a:	4619      	mov	r1, r3
   1617c:	f001 ff00 	bl	17f80 <__addsf3>
   16180:	4603      	mov	r3, r0
   16182:	4618      	mov	r0, r3
   16184:	f002 f9ca 	bl	1851c <__aeabi_f2iz>
   16188:	4603      	mov	r3, r0
   1618a:	b29a      	uxth	r2, r3
   1618c:	f24b 5350 	movw	r3, #46416	; 0xb550
   16190:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16194:	81da      	strh	r2, [r3, #14]
   16196:	f24b 5328 	movw	r3, #46376	; 0xb528
   1619a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1619e:	8a1b      	ldrh	r3, [r3, #16]
   161a0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   161a4:	b29b      	uxth	r3, r3
   161a6:	80fb      	strh	r3, [r7, #6]
   161a8:	f24b 5350 	movw	r3, #46416	; 0xb550
   161ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161b0:	8a1b      	ldrh	r3, [r3, #16]
   161b2:	b21b      	sxth	r3, r3
   161b4:	4618      	mov	r0, r3
   161b6:	f001 ff97 	bl	180e8 <__aeabi_i2f>
   161ba:	4604      	mov	r4, r0
   161bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   161c0:	4618      	mov	r0, r3
   161c2:	f001 ff91 	bl	180e8 <__aeabi_i2f>
   161c6:	4603      	mov	r3, r0
   161c8:	4618      	mov	r0, r3
   161ca:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   161ce:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   161d2:	f001 ffdd 	bl	18190 <__aeabi_fmul>
   161d6:	4603      	mov	r3, r0
   161d8:	4620      	mov	r0, r4
   161da:	4619      	mov	r1, r3
   161dc:	f001 fed0 	bl	17f80 <__addsf3>
   161e0:	4603      	mov	r3, r0
   161e2:	4618      	mov	r0, r3
   161e4:	f002 f99a 	bl	1851c <__aeabi_f2iz>
   161e8:	4603      	mov	r3, r0
   161ea:	b29a      	uxth	r2, r3
   161ec:	f24b 5350 	movw	r3, #46416	; 0xb550
   161f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161f4:	821a      	strh	r2, [r3, #16]
   161f6:	f24b 5368 	movw	r3, #46440	; 0xb568
   161fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161fe:	781b      	ldrb	r3, [r3, #0]
   16200:	3301      	adds	r3, #1
   16202:	b2da      	uxtb	r2, r3
   16204:	f24b 5368 	movw	r3, #46440	; 0xb568
   16208:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1620c:	701a      	strb	r2, [r3, #0]
   1620e:	f24b 5368 	movw	r3, #46440	; 0xb568
   16212:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16216:	781b      	ldrb	r3, [r3, #0]
   16218:	2b0a      	cmp	r3, #10
   1621a:	f040 8101 	bne.w	16420 <last_radio_from_ppm+0x5e8>
   1621e:	f24b 5368 	movw	r3, #46440	; 0xb568
   16222:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16226:	2200      	movs	r2, #0
   16228:	701a      	strb	r2, [r3, #0]
   1622a:	f24b 5350 	movw	r3, #46416	; 0xb550
   1622e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16232:	891a      	ldrh	r2, [r3, #8]
   16234:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16238:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1623c:	811a      	strh	r2, [r3, #8]
   1623e:	f24b 5350 	movw	r3, #46416	; 0xb550
   16242:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16246:	2200      	movs	r2, #0
   16248:	811a      	strh	r2, [r3, #8]
   1624a:	f24b 533c 	movw	r3, #46396	; 0xb53c
   1624e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16252:	891b      	ldrh	r3, [r3, #8]
   16254:	b21b      	sxth	r3, r3
   16256:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1625a:	dd07      	ble.n	1626c <last_radio_from_ppm+0x434>
   1625c:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16260:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16264:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16268:	811a      	strh	r2, [r3, #8]
   1626a:	e00f      	b.n	1628c <last_radio_from_ppm+0x454>
   1626c:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16270:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16274:	891b      	ldrh	r3, [r3, #8]
   16276:	b21b      	sxth	r3, r3
   16278:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1627c:	da06      	bge.n	1628c <last_radio_from_ppm+0x454>
   1627e:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16282:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16286:	f64d 2280 	movw	r2, #55936	; 0xda80
   1628a:	811a      	strh	r2, [r3, #8]
   1628c:	f24b 5350 	movw	r3, #46416	; 0xb550
   16290:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16294:	895a      	ldrh	r2, [r3, #10]
   16296:	f24b 533c 	movw	r3, #46396	; 0xb53c
   1629a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1629e:	815a      	strh	r2, [r3, #10]
   162a0:	f24b 5350 	movw	r3, #46416	; 0xb550
   162a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162a8:	2200      	movs	r2, #0
   162aa:	815a      	strh	r2, [r3, #10]
   162ac:	f24b 533c 	movw	r3, #46396	; 0xb53c
   162b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162b4:	895b      	ldrh	r3, [r3, #10]
   162b6:	b21b      	sxth	r3, r3
   162b8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   162bc:	dd07      	ble.n	162ce <last_radio_from_ppm+0x496>
   162be:	f24b 533c 	movw	r3, #46396	; 0xb53c
   162c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   162ca:	815a      	strh	r2, [r3, #10]
   162cc:	e00f      	b.n	162ee <last_radio_from_ppm+0x4b6>
   162ce:	f24b 533c 	movw	r3, #46396	; 0xb53c
   162d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162d6:	895b      	ldrh	r3, [r3, #10]
   162d8:	b21b      	sxth	r3, r3
   162da:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   162de:	da06      	bge.n	162ee <last_radio_from_ppm+0x4b6>
   162e0:	f24b 533c 	movw	r3, #46396	; 0xb53c
   162e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162e8:	f64d 2280 	movw	r2, #55936	; 0xda80
   162ec:	815a      	strh	r2, [r3, #10]
   162ee:	f24b 5350 	movw	r3, #46416	; 0xb550
   162f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162f6:	899a      	ldrh	r2, [r3, #12]
   162f8:	f24b 533c 	movw	r3, #46396	; 0xb53c
   162fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16300:	819a      	strh	r2, [r3, #12]
   16302:	f24b 5350 	movw	r3, #46416	; 0xb550
   16306:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1630a:	2200      	movs	r2, #0
   1630c:	819a      	strh	r2, [r3, #12]
   1630e:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16312:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16316:	899b      	ldrh	r3, [r3, #12]
   16318:	b21b      	sxth	r3, r3
   1631a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1631e:	dd07      	ble.n	16330 <last_radio_from_ppm+0x4f8>
   16320:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16324:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16328:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1632c:	819a      	strh	r2, [r3, #12]
   1632e:	e00f      	b.n	16350 <last_radio_from_ppm+0x518>
   16330:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16334:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16338:	899b      	ldrh	r3, [r3, #12]
   1633a:	b21b      	sxth	r3, r3
   1633c:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16340:	da06      	bge.n	16350 <last_radio_from_ppm+0x518>
   16342:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16346:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1634a:	f64d 2280 	movw	r2, #55936	; 0xda80
   1634e:	819a      	strh	r2, [r3, #12]
   16350:	f24b 5350 	movw	r3, #46416	; 0xb550
   16354:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16358:	89da      	ldrh	r2, [r3, #14]
   1635a:	f24b 533c 	movw	r3, #46396	; 0xb53c
   1635e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16362:	81da      	strh	r2, [r3, #14]
   16364:	f24b 5350 	movw	r3, #46416	; 0xb550
   16368:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1636c:	2200      	movs	r2, #0
   1636e:	81da      	strh	r2, [r3, #14]
   16370:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16374:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16378:	89db      	ldrh	r3, [r3, #14]
   1637a:	b21b      	sxth	r3, r3
   1637c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16380:	dd07      	ble.n	16392 <last_radio_from_ppm+0x55a>
   16382:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16386:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1638a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1638e:	81da      	strh	r2, [r3, #14]
   16390:	e00f      	b.n	163b2 <last_radio_from_ppm+0x57a>
   16392:	f24b 533c 	movw	r3, #46396	; 0xb53c
   16396:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1639a:	89db      	ldrh	r3, [r3, #14]
   1639c:	b21b      	sxth	r3, r3
   1639e:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   163a2:	da06      	bge.n	163b2 <last_radio_from_ppm+0x57a>
   163a4:	f24b 533c 	movw	r3, #46396	; 0xb53c
   163a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163ac:	f64d 2280 	movw	r2, #55936	; 0xda80
   163b0:	81da      	strh	r2, [r3, #14]
   163b2:	f24b 5350 	movw	r3, #46416	; 0xb550
   163b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163ba:	8a1a      	ldrh	r2, [r3, #16]
   163bc:	f24b 533c 	movw	r3, #46396	; 0xb53c
   163c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163c4:	821a      	strh	r2, [r3, #16]
   163c6:	f24b 5350 	movw	r3, #46416	; 0xb550
   163ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163ce:	2200      	movs	r2, #0
   163d0:	821a      	strh	r2, [r3, #16]
   163d2:	f24b 533c 	movw	r3, #46396	; 0xb53c
   163d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163da:	8a1b      	ldrh	r3, [r3, #16]
   163dc:	b21b      	sxth	r3, r3
   163de:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   163e2:	dd07      	ble.n	163f4 <last_radio_from_ppm+0x5bc>
   163e4:	f24b 533c 	movw	r3, #46396	; 0xb53c
   163e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   163f0:	821a      	strh	r2, [r3, #16]
   163f2:	e00f      	b.n	16414 <last_radio_from_ppm+0x5dc>
   163f4:	f24b 533c 	movw	r3, #46396	; 0xb53c
   163f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163fc:	8a1b      	ldrh	r3, [r3, #16]
   163fe:	b21b      	sxth	r3, r3
   16400:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16404:	da06      	bge.n	16414 <last_radio_from_ppm+0x5dc>
   16406:	f24b 533c 	movw	r3, #46396	; 0xb53c
   1640a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1640e:	f64d 2280 	movw	r2, #55936	; 0xda80
   16412:	821a      	strh	r2, [r3, #16]
   16414:	f24b 5362 	movw	r3, #46434	; 0xb562
   16418:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1641c:	2201      	movs	r2, #1
   1641e:	701a      	strb	r2, [r3, #0]
}
   16420:	370c      	adds	r7, #12
   16422:	46bd      	mov	sp, r7
   16424:	bd90      	pop	{r4, r7, pc}
   16426:	bf00      	nop

00016428 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   16428:	b480      	push	{r7}
   1642a:	af00      	add	r7, sp, #0
  idx_buf = 0;
   1642c:	f24b 539c 	movw	r3, #46492	; 0xb59c
   16430:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16434:	2200      	movs	r2, #0
   16436:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   16438:	f24b 539d 	movw	r3, #46493	; 0xb59d
   1643c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16440:	2200      	movs	r2, #0
   16442:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   16444:	f24b 539c 	movw	r3, #46492	; 0xb59c
   16448:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1644c:	781b      	ldrb	r3, [r3, #0]
   1644e:	b2db      	uxtb	r3, r3
   16450:	461a      	mov	r2, r3
   16452:	f24b 5384 	movw	r3, #46468	; 0xb584
   16456:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1645a:	4413      	add	r3, r2
   1645c:	781a      	ldrb	r2, [r3, #0]
   1645e:	f24b 539e 	movw	r3, #46494	; 0xb59e
   16462:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16466:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   16468:	f242 030f 	movw	r3, #8207	; 0x200f
   1646c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16470:	f24b 529e 	movw	r2, #46494	; 0xb59e
   16474:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16478:	7812      	ldrb	r2, [r2, #0]
   1647a:	b2d2      	uxtb	r2, r2
   1647c:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   1647e:	f24b 539a 	movw	r3, #46490	; 0xb59a
   16482:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16486:	2200      	movs	r2, #0
   16488:	701a      	strb	r2, [r3, #0]
}
   1648a:	46bd      	mov	sp, r7
   1648c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16490:	4770      	bx	lr
   16492:	bf00      	nop

00016494 <fbw_spi_init>:

void fbw_spi_init(void) {
   16494:	b480      	push	{r7}
   16496:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   16498:	f24b 5384 	movw	r3, #46468	; 0xb584
   1649c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164a0:	2200      	movs	r2, #0
   164a2:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   164a4:	f24b 5384 	movw	r3, #46468	; 0xb584
   164a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164ac:	2200      	movs	r2, #0
   164ae:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   164b0:	f242 0317 	movw	r3, #8215	; 0x2017
   164b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164b8:	f242 0217 	movw	r2, #8215	; 0x2017
   164bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   164c0:	7812      	ldrb	r2, [r2, #0]
   164c2:	b2d2      	uxtb	r2, r2
   164c4:	f042 0210 	orr.w	r2, r2, #16
   164c8:	b2d2      	uxtb	r2, r2
   164ca:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   164cc:	f242 030d 	movw	r3, #8205	; 0x200d
   164d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164d4:	2240      	movs	r2, #64	; 0x40
   164d6:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   164d8:	f242 030d 	movw	r3, #8205	; 0x200d
   164dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164e0:	f242 020d 	movw	r2, #8205	; 0x200d
   164e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   164e8:	7812      	ldrb	r2, [r2, #0]
   164ea:	b2d2      	uxtb	r2, r2
   164ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
   164f0:	b2d2      	uxtb	r2, r2
   164f2:	701a      	strb	r2, [r3, #0]
}
   164f4:	46bd      	mov	sp, r7
   164f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   164fa:	4770      	bx	lr
   164fc:	0000      	movs	r0, r0
	...

00016500 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   16500:	b480      	push	{r7}
   16502:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   16504:	f242 032f 	movw	r3, #8239	; 0x202f
   16508:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1650c:	2200      	movs	r2, #0
   1650e:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   16510:	f242 032e 	movw	r3, #8238	; 0x202e
   16514:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16518:	2201      	movs	r2, #1
   1651a:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   1651c:	f242 0325 	movw	r3, #8229	; 0x2025
   16520:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16524:	2207      	movs	r2, #7
   16526:	701a      	strb	r2, [r3, #0]
}
   16528:	46bd      	mov	sp, r7
   1652a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1652e:	4770      	bx	lr

00016530 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   16530:	b480      	push	{r7}
   16532:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   16534:	f242 032e 	movw	r3, #8238	; 0x202e
   16538:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1653c:	f242 022e 	movw	r2, #8238	; 0x202e
   16540:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16544:	7812      	ldrb	r2, [r2, #0]
   16546:	b2d2      	uxtb	r2, r2
   16548:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1654c:	b2d2      	uxtb	r2, r2
   1654e:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   16550:	f242 032e 	movw	r3, #8238	; 0x202e
   16554:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16558:	f242 022e 	movw	r2, #8238	; 0x202e
   1655c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16560:	7812      	ldrb	r2, [r2, #0]
   16562:	b2d2      	uxtb	r2, r2
   16564:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16568:	b2d2      	uxtb	r2, r2
   1656a:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   1656c:	f242 0317 	movw	r3, #8215	; 0x2017
   16570:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16574:	f242 0217 	movw	r2, #8215	; 0x2017
   16578:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1657c:	7812      	ldrb	r2, [r2, #0]
   1657e:	b2d2      	uxtb	r2, r2
   16580:	f022 0201 	bic.w	r2, r2, #1
   16584:	b2d2      	uxtb	r2, r2
   16586:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   16588:	f242 0337 	movw	r3, #8247	; 0x2037
   1658c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16590:	f242 0237 	movw	r2, #8247	; 0x2037
   16594:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16598:	7812      	ldrb	r2, [r2, #0]
   1659a:	b2d2      	uxtb	r2, r2
   1659c:	f042 0220 	orr.w	r2, r2, #32
   165a0:	b2d2      	uxtb	r2, r2
   165a2:	701a      	strb	r2, [r3, #0]
}
   165a4:	46bd      	mov	sp, r7
   165a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   165aa:	4770      	bx	lr

000165ac <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   165ac:	b580      	push	{r7, lr}
   165ae:	b082      	sub	sp, #8
   165b0:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   165b2:	2300      	movs	r3, #0
   165b4:	71fb      	strb	r3, [r7, #7]
   165b6:	e010      	b.n	165da <to_autopilot_from_last_radio+0x2e>
     to_mega128.channels[i] = last_radio[i];
   165b8:	79fa      	ldrb	r2, [r7, #7]
   165ba:	79f9      	ldrb	r1, [r7, #7]
   165bc:	f24b 533c 	movw	r3, #46396	; 0xb53c
   165c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165c4:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   165c8:	f24b 5384 	movw	r3, #46468	; 0xb584
   165cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165d0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   165d4:	79fb      	ldrb	r3, [r7, #7]
   165d6:	3301      	adds	r3, #1
   165d8:	71fb      	strb	r3, [r7, #7]
   165da:	79fb      	ldrb	r3, [r7, #7]
   165dc:	2b08      	cmp	r3, #8
   165de:	d9eb      	bls.n	165b8 <to_autopilot_from_last_radio+0xc>
     to_mega128.channels[i] = last_radio[i];
  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   165e0:	f24b 632c 	movw	r3, #46636	; 0xb62c
   165e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165e8:	781b      	ldrb	r3, [r3, #0]
   165ea:	2b00      	cmp	r3, #0
   165ec:	bf0c      	ite	eq
   165ee:	2300      	moveq	r3, #0
   165f0:	2301      	movne	r3, #1
   165f2:	b2db      	uxtb	r3, r3
   165f4:	461a      	mov	r2, r3
   165f6:	f24b 5384 	movw	r3, #46468	; 0xb584
   165fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165fe:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   16600:	f24b 5384 	movw	r3, #46468	; 0xb584
   16604:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16608:	7cdb      	ldrb	r3, [r3, #19]
   1660a:	b2da      	uxtb	r2, r3
   1660c:	f24b 632e 	movw	r3, #46638	; 0xb62e
   16610:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16614:	781b      	ldrb	r3, [r3, #0]
   16616:	2b00      	cmp	r3, #0
   16618:	d001      	beq.n	1661e <to_autopilot_from_last_radio+0x72>
   1661a:	2302      	movs	r3, #2
   1661c:	e000      	b.n	16620 <to_autopilot_from_last_radio+0x74>
   1661e:	2300      	movs	r3, #0
   16620:	4313      	orrs	r3, r2
   16622:	b2db      	uxtb	r3, r3
   16624:	b2da      	uxtb	r2, r3
   16626:	f24b 5384 	movw	r3, #46468	; 0xb584
   1662a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1662e:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   16630:	f24b 5362 	movw	r3, #46434	; 0xb562
   16634:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16638:	781b      	ldrb	r3, [r3, #0]
   1663a:	2b00      	cmp	r3, #0
   1663c:	d012      	beq.n	16664 <to_autopilot_from_last_radio+0xb8>
    to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   1663e:	f24b 5384 	movw	r3, #46468	; 0xb584
   16642:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16646:	7cdb      	ldrb	r3, [r3, #19]
   16648:	f043 0304 	orr.w	r3, r3, #4
   1664c:	b2da      	uxtb	r2, r3
   1664e:	f24b 5384 	movw	r3, #46468	; 0xb584
   16652:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16656:	74da      	strb	r2, [r3, #19]
    last_radio_contains_avg_channels = FALSE;
   16658:	f24b 5362 	movw	r3, #46434	; 0xb562
   1665c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16660:	2200      	movs	r2, #0
   16662:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   16664:	f24b 6330 	movw	r3, #46640	; 0xb630
   16668:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1666c:	781a      	ldrb	r2, [r3, #0]
   1666e:	f24b 5384 	movw	r3, #46468	; 0xb584
   16672:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16676:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   16678:	f24b 53a0 	movw	r3, #46496	; 0xb5a0
   1667c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16680:	881b      	ldrh	r3, [r3, #0]
   16682:	4618      	mov	r0, r3
   16684:	f001 f8de 	bl	17844 <__aeabi_i2d>
   16688:	4602      	mov	r2, r0
   1668a:	460b      	mov	r3, r1
   1668c:	4610      	mov	r0, r2
   1668e:	4619      	mov	r1, r3
   16690:	a31b      	add	r3, pc, #108	; (adr r3, 16700 <to_autopilot_from_last_radio+0x154>)
   16692:	e9d3 2300 	ldrd	r2, r3, [r3]
   16696:	f001 f93b 	bl	17910 <__aeabi_dmul>
   1669a:	4602      	mov	r2, r0
   1669c:	460b      	mov	r3, r1
   1669e:	4610      	mov	r0, r2
   166a0:	4619      	mov	r1, r3
   166a2:	f04f 0200 	mov.w	r2, #0
   166a6:	f04f 0300 	mov.w	r3, #0
   166aa:	f2c4 0340 	movt	r3, #16448	; 0x4040
   166ae:	f001 fa59 	bl	17b64 <__aeabi_ddiv>
   166b2:	4602      	mov	r2, r0
   166b4:	460b      	mov	r3, r1
   166b6:	4610      	mov	r0, r2
   166b8:	4619      	mov	r1, r3
   166ba:	a313      	add	r3, pc, #76	; (adr r3, 16708 <to_autopilot_from_last_radio+0x15c>)
   166bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   166c0:	f000 ff74 	bl	175ac <__adddf3>
   166c4:	4602      	mov	r2, r0
   166c6:	460b      	mov	r3, r1
   166c8:	4610      	mov	r0, r2
   166ca:	4619      	mov	r1, r3
   166cc:	f04f 0200 	mov.w	r2, #0
   166d0:	f04f 0300 	mov.w	r3, #0
   166d4:	f2c4 0324 	movt	r3, #16420	; 0x4024
   166d8:	f001 f91a 	bl	17910 <__aeabi_dmul>
   166dc:	4602      	mov	r2, r0
   166de:	460b      	mov	r3, r1
   166e0:	4610      	mov	r0, r2
   166e2:	4619      	mov	r1, r3
   166e4:	f001 fbd6 	bl	17e94 <__aeabi_d2uiz>
   166e8:	4603      	mov	r3, r0
   166ea:	b2da      	uxtb	r2, r3
   166ec:	f24b 5384 	movw	r3, #46468	; 0xb584
   166f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166f4:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   166f6:	3708      	adds	r7, #8
   166f8:	46bd      	mov	sp, r7
   166fa:	bd80      	pop	{r7, pc}
   166fc:	f3af 8000 	nop.w
   16700:	1eb851ec 	.word	0x1eb851ec
   16704:	3f91eb85 	.word	0x3f91eb85
   16708:	020c49ba 	.word	0x020c49ba
   1670c:	3fb6872b 	.word	0x3fb6872b

00016710 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   16710:	b580      	push	{r7, lr}
   16712:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
//   if ( !SpiIsSelected() && spi_was_interrupted ) 
   {
      spi_was_interrupted = FALSE;
   16714:	f24b 539b 	movw	r3, #46491	; 0xb59b
   16718:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1671c:	2200      	movs	r2, #0
   1671e:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   16720:	f7ff ff44 	bl	165ac <to_autopilot_from_last_radio>
      spi_reset();
   16724:	f7ff fe80 	bl	16428 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   16728:	bd80      	pop	{r7, pc}
   1672a:	bf00      	nop

0001672c <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   1672c:	b580      	push	{r7, lr}
   1672e:	af00      	add	r7, sp, #0
  uart_init_tx();
   16730:	f000 fb02 	bl	16d38 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   16734:	f648 0044 	movw	r0, #34884	; 0x8844
   16738:	f2c0 0001 	movt	r0, #1
   1673c:	f000 fbda 	bl	16ef4 <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   16740:	f7ff fab2 	bl	15ca8 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   16744:	2003      	movs	r0, #3
   16746:	f24b 51a0 	movw	r1, #46496	; 0xb5a0
   1674a:	f2c2 0100 	movt	r1, #8192	; 0x2000
   1674e:	f7ff fa97 	bl	15c80 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   16752:	2006      	movs	r0, #6
   16754:	f24b 51e4 	movw	r1, #46564	; 0xb5e4
   16758:	f2c2 0100 	movt	r1, #8192	; 0x2000
   1675c:	f7ff fa90 	bl	15c80 <fbw_adc_buf_channel>
#endif
  timer_init();
   16760:	f7ff fece 	bl	16500 <timer_init>
  servo_init();
   16764:	f000 f894 	bl	16890 <servo_init>
  ppm_init();
   16768:	f7ff fee2 	bl	16530 <ppm_init>
  fbw_spi_init();
   1676c:	f7ff fe92 	bl	16494 <fbw_spi_init>
  //sei(); //FN
}
   16770:	bd80      	pop	{r7, pc}
   16772:	bf00      	nop

00016774 <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   16774:	b580      	push	{r7, lr}
   16776:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    //if( ppm_valid ) 
    {
      ppm_valid = FALSE;
   16778:	f24b 5363 	movw	r3, #46435	; 0xb563
   1677c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16780:	2200      	movs	r2, #0
   16782:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   16784:	f24b 632f 	movw	r3, #46639	; 0xb62f
   16788:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1678c:	781b      	ldrb	r3, [r3, #0]
   1678e:	3301      	adds	r3, #1
   16790:	b2da      	uxtb	r2, r3
   16792:	f24b 632f 	movw	r3, #46639	; 0xb62f
   16796:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1679a:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   1679c:	f24b 632c 	movw	r3, #46636	; 0xb62c
   167a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167a4:	2201      	movs	r2, #1
   167a6:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   167a8:	f24b 632e 	movw	r3, #46638	; 0xb62e
   167ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167b0:	2200      	movs	r2, #0
   167b2:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   167b4:	f24b 632a 	movw	r3, #46634	; 0xb62a
   167b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167bc:	2200      	movs	r2, #0
   167be:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   167c0:	f7ff fb3a 	bl	15e38 <last_radio_from_ppm>
      //if (last_radio_contains_avg_channels) 
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   167c4:	f24b 533c 	movw	r3, #46396	; 0xb53c
   167c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167cc:	891b      	ldrh	r3, [r3, #8]
   167ce:	b21b      	sxth	r3, r3
   167d0:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   167d4:	bfb4      	ite	lt
   167d6:	2300      	movlt	r3, #0
   167d8:	2301      	movge	r3, #1
   167da:	b2db      	uxtb	r3, r3
   167dc:	461a      	mov	r2, r3
   167de:	f24b 6328 	movw	r3, #46632	; 0xb628
   167e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167e6:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   167e8:	f24b 6328 	movw	r3, #46632	; 0xb628
   167ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167f0:	781b      	ldrb	r3, [r3, #0]
   167f2:	2b00      	cmp	r3, #0
   167f4:	d105      	bne.n	16802 <test_ppm_task+0x8e>
      {
	servo_set(last_radio);
   167f6:	f24b 503c 	movw	r0, #46396	; 0xb53c
   167fa:	f2c2 0000 	movt	r0, #8192	; 0x2000
   167fe:	f000 f925 	bl	16a4c <servo_set>
      }
    } 
    //else if (mode == MODE_MANUAL && radio_really_lost) 
    {
      mode = MODE_AUTO;
   16802:	f24b 6328 	movw	r3, #46632	; 0xb628
   16806:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1680a:	2201      	movs	r2, #1
   1680c:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= STALLED_TIME) 
    {
      radio_ok = FALSE;
   1680e:	f24b 632c 	movw	r3, #46636	; 0xb62c
   16812:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16816:	2200      	movs	r2, #0
   16818:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= REALLY_STALLED_TIME) 
    {
      radio_really_lost = TRUE;
   1681a:	f24b 632e 	movw	r3, #46638	; 0xb62e
   1681e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16822:	2201      	movs	r2, #1
   16824:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   16826:	bd80      	pop	{r7, pc}

00016828 <check_failsafe_task>:
void check_failsafe_task(void)
{
   16828:	b580      	push	{r7, lr}
   1682a:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    //if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
    {
      servo_set(failsafe);
   1682c:	f648 0030 	movw	r0, #34864	; 0x8830
   16830:	f2c0 0001 	movt	r0, #1
   16834:	f000 f90a 	bl	16a4c <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   16838:	bd80      	pop	{r7, pc}
   1683a:	bf00      	nop

0001683c <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   1683c:	b580      	push	{r7, lr}
   1683e:	af00      	add	r7, sp, #0
	//vPrintString("S_8 check_mega128_values_task start! \n\r"); //SunnyBeike
// modified by wanbo
     //if ( !SpiIsSelected() && spi_was_interrupted ) 
     {
         if (mega128_receive_valid)
   16840:	f24b 539a 	movw	r3, #46490	; 0xb59a
   16844:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16848:	781b      	ldrb	r3, [r3, #0]
   1684a:	b2db      	uxtb	r3, r3
   1684c:	2b00      	cmp	r3, #0
   1684e:	d018      	beq.n	16882 <check_mega128_values_task+0x46>
         { 
             time_since_last_mega128 = 0;
   16850:	f24b 6329 	movw	r3, #46633	; 0xb629
   16854:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16858:	2200      	movs	r2, #0
   1685a:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   1685c:	f24b 632d 	movw	r3, #46637	; 0xb62d
   16860:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16864:	2201      	movs	r2, #1
   16866:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   16868:	f24b 6328 	movw	r3, #46632	; 0xb628
   1686c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16870:	781b      	ldrb	r3, [r3, #0]
   16872:	2b01      	cmp	r3, #1
   16874:	d105      	bne.n	16882 <check_mega128_values_task+0x46>
                 servo_set(from_mega128.channels);
   16876:	f24b 506c 	movw	r0, #46444	; 0xb56c
   1687a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1687e:	f000 f8e5 	bl	16a4c <servo_set>
         }
     }
     //if (time_since_last_mega128 == STALLED_TIME) 
     {
         mega128_ok = FALSE;
   16882:	f24b 632d 	movw	r3, #46637	; 0xb62d
   16886:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1688a:	2200      	movs	r2, #0
   1688c:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   1688e:	bd80      	pop	{r7, pc}

00016890 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   16890:	b480      	push	{r7}
   16892:	b083      	sub	sp, #12
   16894:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   16896:	f242 0311 	movw	r3, #8209	; 0x2011
   1689a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1689e:	f242 0211 	movw	r2, #8209	; 0x2011
   168a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   168a6:	7812      	ldrb	r2, [r2, #0]
   168a8:	b2d2      	uxtb	r2, r2
   168aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
   168ae:	b2d2      	uxtb	r2, r2
   168b0:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   168b2:	f242 0317 	movw	r3, #8215	; 0x2017
   168b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168ba:	f242 0217 	movw	r2, #8215	; 0x2017
   168be:	f2c2 0200 	movt	r2, #8192	; 0x2000
   168c2:	7812      	ldrb	r2, [r2, #0]
   168c4:	b2d2      	uxtb	r2, r2
   168c6:	f042 0202 	orr.w	r2, r2, #2
   168ca:	b2d2      	uxtb	r2, r2
   168cc:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   168ce:	f242 0312 	movw	r3, #8210	; 0x2012
   168d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168d6:	f242 0212 	movw	r2, #8210	; 0x2012
   168da:	f2c2 0200 	movt	r2, #8192	; 0x2000
   168de:	7812      	ldrb	r2, [r2, #0]
   168e0:	b2d2      	uxtb	r2, r2
   168e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
   168e6:	b2d2      	uxtb	r2, r2
   168e8:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   168ea:	f242 0318 	movw	r3, #8216	; 0x2018
   168ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168f2:	f242 0218 	movw	r2, #8216	; 0x2018
   168f6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   168fa:	7812      	ldrb	r2, [r2, #0]
   168fc:	b2d2      	uxtb	r2, r2
   168fe:	f022 0202 	bic.w	r2, r2, #2
   16902:	b2d2      	uxtb	r2, r2
   16904:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16906:	2300      	movs	r3, #0
   16908:	71fb      	strb	r3, [r7, #7]
   1690a:	e00b      	b.n	16924 <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   1690c:	79fa      	ldrb	r2, [r7, #7]
   1690e:	f24b 6334 	movw	r3, #46644	; 0xb634
   16912:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16916:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   1691a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   1691e:	79fb      	ldrb	r3, [r7, #7]
   16920:	3301      	adds	r3, #1
   16922:	71fb      	strb	r3, [r7, #7]
   16924:	79fb      	ldrb	r3, [r7, #7]
   16926:	2b09      	cmp	r3, #9
   16928:	d9f0      	bls.n	1690c <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   1692a:	f242 032a 	movw	r3, #8234	; 0x202a
   1692e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16932:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   16936:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   16938:	f242 032f 	movw	r3, #8239	; 0x202f
   1693c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16940:	f242 022f 	movw	r2, #8239	; 0x202f
   16944:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16948:	7812      	ldrb	r2, [r2, #0]
   1694a:	b2d2      	uxtb	r2, r2
   1694c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16950:	b2d2      	uxtb	r2, r2
   16952:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   16954:	f242 0336 	movw	r3, #8246	; 0x2036
   16958:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1695c:	2210      	movs	r2, #16
   1695e:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16960:	f242 0312 	movw	r3, #8210	; 0x2012
   16964:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16968:	f242 0212 	movw	r2, #8210	; 0x2012
   1696c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16970:	7812      	ldrb	r2, [r2, #0]
   16972:	b2d2      	uxtb	r2, r2
   16974:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16978:	b2d2      	uxtb	r2, r2
   1697a:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   1697c:	f242 0337 	movw	r3, #8247	; 0x2037
   16980:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16984:	f242 0237 	movw	r2, #8247	; 0x2037
   16988:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1698c:	7812      	ldrb	r2, [r2, #0]
   1698e:	b2d2      	uxtb	r2, r2
   16990:	f042 0210 	orr.w	r2, r2, #16
   16994:	b2d2      	uxtb	r2, r2
   16996:	701a      	strb	r2, [r3, #0]
}
   16998:	370c      	adds	r7, #12
   1699a:	46bd      	mov	sp, r7
   1699c:	f85d 7b04 	ldr.w	r7, [sp], #4
   169a0:	4770      	bx	lr
   169a2:	bf00      	nop

000169a4 <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   169a4:	b480      	push	{r7}
   169a6:	b083      	sub	sp, #12
   169a8:	af00      	add	r7, sp, #0
   169aa:	4602      	mov	r2, r0
   169ac:	460b      	mov	r3, r1
   169ae:	71fa      	strb	r2, [r7, #7]
   169b0:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   169b2:	79f9      	ldrb	r1, [r7, #7]
   169b4:	88bb      	ldrh	r3, [r7, #4]
   169b6:	011b      	lsls	r3, r3, #4
   169b8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   169bc:	d308      	bcc.n	169d0 <servo_set_one+0x2c>
   169be:	88bb      	ldrh	r3, [r7, #4]
   169c0:	011b      	lsls	r3, r3, #4
   169c2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   169c6:	bf28      	it	cs
   169c8:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   169cc:	b29a      	uxth	r2, r3
   169ce:	e001      	b.n	169d4 <servo_set_one+0x30>
   169d0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   169d4:	f24b 6334 	movw	r3, #46644	; 0xb634
   169d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   169dc:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   169e0:	370c      	adds	r7, #12
   169e2:	46bd      	mov	sp, r7
   169e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   169e8:	4770      	bx	lr
   169ea:	bf00      	nop

000169ec <servo_transmit>:

void 
servo_transmit(void) {
   169ec:	b580      	push	{r7, lr}
   169ee:	b082      	sub	sp, #8
   169f0:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   169f2:	2000      	movs	r0, #0
   169f4:	f000 f9e6 	bl	16dc4 <uart_transmit>
   169f8:	2000      	movs	r0, #0
   169fa:	f000 f9e3 	bl	16dc4 <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   169fe:	2300      	movs	r3, #0
   16a00:	71fb      	strb	r3, [r7, #7]
   16a02:	e01a      	b.n	16a3a <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   16a04:	79fa      	ldrb	r2, [r7, #7]
   16a06:	f24b 6334 	movw	r3, #46644	; 0xb634
   16a0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a0e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16a12:	0a1b      	lsrs	r3, r3, #8
   16a14:	b29b      	uxth	r3, r3
   16a16:	b2db      	uxtb	r3, r3
   16a18:	4618      	mov	r0, r3
   16a1a:	f000 f9d3 	bl	16dc4 <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   16a1e:	79fa      	ldrb	r2, [r7, #7]
   16a20:	f24b 6334 	movw	r3, #46644	; 0xb634
   16a24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a28:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16a2c:	b2db      	uxtb	r3, r3
   16a2e:	4618      	mov	r0, r3
   16a30:	f000 f9c8 	bl	16dc4 <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16a34:	79fb      	ldrb	r3, [r7, #7]
   16a36:	3301      	adds	r3, #1
   16a38:	71fb      	strb	r3, [r7, #7]
   16a3a:	79fb      	ldrb	r3, [r7, #7]
   16a3c:	2b09      	cmp	r3, #9
   16a3e:	d9e1      	bls.n	16a04 <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   16a40:	200a      	movs	r0, #10
   16a42:	f000 f9bf 	bl	16dc4 <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   16a46:	3708      	adds	r7, #8
   16a48:	46bd      	mov	sp, r7
   16a4a:	bd80      	pop	{r7, pc}

00016a4c <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   16a4c:	b5b0      	push	{r4, r5, r7, lr}
   16a4e:	b084      	sub	sp, #16
   16a50:	af00      	add	r7, sp, #0
   16a52:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   16a54:	687b      	ldr	r3, [r7, #4]
   16a56:	330a      	adds	r3, #10
   16a58:	881b      	ldrh	r3, [r3, #0]
   16a5a:	b21b      	sxth	r3, r3
   16a5c:	005b      	lsls	r3, r3, #1
   16a5e:	4618      	mov	r0, r3
   16a60:	f000 fef0 	bl	17844 <__aeabi_i2d>
   16a64:	4602      	mov	r2, r0
   16a66:	460b      	mov	r3, r1
   16a68:	4610      	mov	r0, r2
   16a6a:	4619      	mov	r1, r3
   16a6c:	a3a6      	add	r3, pc, #664	; (adr r3, 16d08 <servo_set+0x2bc>)
   16a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   16a72:	f000 ff4d 	bl	17910 <__aeabi_dmul>
   16a76:	4602      	mov	r2, r0
   16a78:	460b      	mov	r3, r1
   16a7a:	4610      	mov	r0, r2
   16a7c:	4619      	mov	r1, r3
   16a7e:	f001 f9e1 	bl	17e44 <__aeabi_d2iz>
   16a82:	4603      	mov	r3, r0
   16a84:	b29b      	uxth	r3, r3
   16a86:	b29b      	uxth	r3, r3
   16a88:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16a8c:	81fb      	strh	r3, [r7, #14]
   16a8e:	89fb      	ldrh	r3, [r7, #14]
   16a90:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16a94:	d307      	bcc.n	16aa6 <servo_set+0x5a>
   16a96:	89fb      	ldrh	r3, [r7, #14]
   16a98:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16a9c:	bf28      	it	cs
   16a9e:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16aa2:	b29a      	uxth	r2, r3
   16aa4:	e001      	b.n	16aaa <servo_set+0x5e>
   16aa6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16aaa:	f24b 6334 	movw	r3, #46644	; 0xb634
   16aae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ab2:	80da      	strh	r2, [r3, #6]
   16ab4:	687b      	ldr	r3, [r7, #4]
   16ab6:	881b      	ldrh	r3, [r3, #0]
   16ab8:	b21b      	sxth	r3, r3
   16aba:	005b      	lsls	r3, r3, #1
   16abc:	4618      	mov	r0, r3
   16abe:	f000 fec1 	bl	17844 <__aeabi_i2d>
   16ac2:	4602      	mov	r2, r0
   16ac4:	460b      	mov	r3, r1
   16ac6:	4610      	mov	r0, r2
   16ac8:	4619      	mov	r1, r3
   16aca:	a38f      	add	r3, pc, #572	; (adr r3, 16d08 <servo_set+0x2bc>)
   16acc:	e9d3 2300 	ldrd	r2, r3, [r3]
   16ad0:	f000 ff1e 	bl	17910 <__aeabi_dmul>
   16ad4:	4602      	mov	r2, r0
   16ad6:	460b      	mov	r3, r1
   16ad8:	4610      	mov	r0, r2
   16ada:	4619      	mov	r1, r3
   16adc:	f001 f9b2 	bl	17e44 <__aeabi_d2iz>
   16ae0:	4603      	mov	r3, r0
   16ae2:	b29b      	uxth	r3, r3
   16ae4:	b29b      	uxth	r3, r3
   16ae6:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16aea:	81fb      	strh	r3, [r7, #14]
   16aec:	89fb      	ldrh	r3, [r7, #14]
   16aee:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16af2:	d307      	bcc.n	16b04 <servo_set+0xb8>
   16af4:	89fb      	ldrh	r3, [r7, #14]
   16af6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16afa:	bf28      	it	cs
   16afc:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16b00:	b29a      	uxth	r2, r3
   16b02:	e001      	b.n	16b08 <servo_set+0xbc>
   16b04:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16b08:	f24b 6334 	movw	r3, #46644	; 0xb634
   16b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b10:	825a      	strh	r2, [r3, #18]
   16b12:	687b      	ldr	r3, [r7, #4]
   16b14:	3304      	adds	r3, #4
   16b16:	881b      	ldrh	r3, [r3, #0]
   16b18:	b21b      	sxth	r3, r3
   16b1a:	4618      	mov	r0, r3
   16b1c:	f000 fe92 	bl	17844 <__aeabi_i2d>
   16b20:	4602      	mov	r2, r0
   16b22:	460b      	mov	r3, r1
   16b24:	4610      	mov	r0, r2
   16b26:	4619      	mov	r1, r3
   16b28:	a379      	add	r3, pc, #484	; (adr r3, 16d10 <servo_set+0x2c4>)
   16b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   16b2e:	f000 feef 	bl	17910 <__aeabi_dmul>
   16b32:	4602      	mov	r2, r0
   16b34:	460b      	mov	r3, r1
   16b36:	4610      	mov	r0, r2
   16b38:	4619      	mov	r1, r3
   16b3a:	f001 f983 	bl	17e44 <__aeabi_d2iz>
   16b3e:	4603      	mov	r3, r0
   16b40:	b29b      	uxth	r3, r3
   16b42:	b29b      	uxth	r3, r3
   16b44:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   16b48:	3320      	adds	r3, #32
   16b4a:	81fb      	strh	r3, [r7, #14]
   16b4c:	89fb      	ldrh	r3, [r7, #14]
   16b4e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16b52:	d307      	bcc.n	16b64 <servo_set+0x118>
   16b54:	89fb      	ldrh	r3, [r7, #14]
   16b56:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16b5a:	bf28      	it	cs
   16b5c:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16b60:	b29a      	uxth	r2, r3
   16b62:	e001      	b.n	16b68 <servo_set+0x11c>
   16b64:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16b68:	f24b 6334 	movw	r3, #46644	; 0xb634
   16b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b70:	819a      	strh	r2, [r3, #12]
   16b72:	687b      	ldr	r3, [r7, #4]
   16b74:	885b      	ldrh	r3, [r3, #2]
   16b76:	81bb      	strh	r3, [r7, #12]
   16b78:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16b7c:	2b00      	cmp	r3, #0
   16b7e:	dd06      	ble.n	16b8e <servo_set+0x142>
   16b80:	f04f 0400 	mov.w	r4, #0
   16b84:	f04f 0500 	mov.w	r5, #0
   16b88:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16b8c:	e002      	b.n	16b94 <servo_set+0x148>
   16b8e:	a562      	add	r5, pc, #392	; (adr r5, 16d18 <servo_set+0x2cc>)
   16b90:	e9d5 4500 	ldrd	r4, r5, [r5]
   16b94:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16b98:	4618      	mov	r0, r3
   16b9a:	f000 fe53 	bl	17844 <__aeabi_i2d>
   16b9e:	4602      	mov	r2, r0
   16ba0:	460b      	mov	r3, r1
   16ba2:	4620      	mov	r0, r4
   16ba4:	4629      	mov	r1, r5
   16ba6:	f000 feb3 	bl	17910 <__aeabi_dmul>
   16baa:	4602      	mov	r2, r0
   16bac:	460b      	mov	r3, r1
   16bae:	4610      	mov	r0, r2
   16bb0:	4619      	mov	r1, r3
   16bb2:	a35b      	add	r3, pc, #364	; (adr r3, 16d20 <servo_set+0x2d4>)
   16bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   16bb8:	f000 feaa 	bl	17910 <__aeabi_dmul>
   16bbc:	4602      	mov	r2, r0
   16bbe:	460b      	mov	r3, r1
   16bc0:	4610      	mov	r0, r2
   16bc2:	4619      	mov	r1, r3
   16bc4:	f001 f93e 	bl	17e44 <__aeabi_d2iz>
   16bc8:	4603      	mov	r3, r0
   16bca:	b29b      	uxth	r3, r3
   16bcc:	b29b      	uxth	r3, r3
   16bce:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   16bd2:	81fb      	strh	r3, [r7, #14]
   16bd4:	89fb      	ldrh	r3, [r7, #14]
   16bd6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16bda:	d307      	bcc.n	16bec <servo_set+0x1a0>
   16bdc:	89fb      	ldrh	r3, [r7, #14]
   16bde:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16be2:	bf28      	it	cs
   16be4:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16be8:	b29a      	uxth	r2, r3
   16bea:	e001      	b.n	16bf0 <servo_set+0x1a4>
   16bec:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16bf0:	f24b 6334 	movw	r3, #46644	; 0xb634
   16bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16bf8:	801a      	strh	r2, [r3, #0]
   16bfa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16bfe:	2b00      	cmp	r3, #0
   16c00:	dd03      	ble.n	16c0a <servo_set+0x1be>
   16c02:	a545      	add	r5, pc, #276	; (adr r5, 16d18 <servo_set+0x2cc>)
   16c04:	e9d5 4500 	ldrd	r4, r5, [r5]
   16c08:	e005      	b.n	16c16 <servo_set+0x1ca>
   16c0a:	f04f 0400 	mov.w	r4, #0
   16c0e:	f04f 0500 	mov.w	r5, #0
   16c12:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16c16:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16c1a:	4618      	mov	r0, r3
   16c1c:	f000 fe12 	bl	17844 <__aeabi_i2d>
   16c20:	4602      	mov	r2, r0
   16c22:	460b      	mov	r3, r1
   16c24:	4620      	mov	r0, r4
   16c26:	4629      	mov	r1, r5
   16c28:	f000 fe72 	bl	17910 <__aeabi_dmul>
   16c2c:	4602      	mov	r2, r0
   16c2e:	460b      	mov	r3, r1
   16c30:	4610      	mov	r0, r2
   16c32:	4619      	mov	r1, r3
   16c34:	a33c      	add	r3, pc, #240	; (adr r3, 16d28 <servo_set+0x2dc>)
   16c36:	e9d3 2300 	ldrd	r2, r3, [r3]
   16c3a:	f000 fe69 	bl	17910 <__aeabi_dmul>
   16c3e:	4602      	mov	r2, r0
   16c40:	460b      	mov	r3, r1
   16c42:	4610      	mov	r0, r2
   16c44:	4619      	mov	r1, r3
   16c46:	f001 f8fd 	bl	17e44 <__aeabi_d2iz>
   16c4a:	4603      	mov	r3, r0
   16c4c:	b29b      	uxth	r3, r3
   16c4e:	b29b      	uxth	r3, r3
   16c50:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   16c54:	3320      	adds	r3, #32
   16c56:	81fb      	strh	r3, [r7, #14]
   16c58:	89fb      	ldrh	r3, [r7, #14]
   16c5a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16c5e:	d307      	bcc.n	16c70 <servo_set+0x224>
   16c60:	89fb      	ldrh	r3, [r7, #14]
   16c62:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16c66:	bf28      	it	cs
   16c68:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16c6c:	b29a      	uxth	r2, r3
   16c6e:	e001      	b.n	16c74 <servo_set+0x228>
   16c70:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16c74:	f24b 6334 	movw	r3, #46644	; 0xb634
   16c78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c7c:	809a      	strh	r2, [r3, #4]
   16c7e:	687b      	ldr	r3, [r7, #4]
   16c80:	3306      	adds	r3, #6
   16c82:	881b      	ldrh	r3, [r3, #0]
   16c84:	b21b      	sxth	r3, r3
   16c86:	4618      	mov	r0, r3
   16c88:	f000 fddc 	bl	17844 <__aeabi_i2d>
   16c8c:	4604      	mov	r4, r0
   16c8e:	460d      	mov	r5, r1
   16c90:	687b      	ldr	r3, [r7, #4]
   16c92:	3302      	adds	r3, #2
   16c94:	881b      	ldrh	r3, [r3, #0]
   16c96:	b21b      	sxth	r3, r3
   16c98:	4618      	mov	r0, r3
   16c9a:	f000 fdd3 	bl	17844 <__aeabi_i2d>
   16c9e:	4602      	mov	r2, r0
   16ca0:	460b      	mov	r3, r1
   16ca2:	4620      	mov	r0, r4
   16ca4:	4629      	mov	r1, r5
   16ca6:	f000 fc81 	bl	175ac <__adddf3>
   16caa:	4602      	mov	r2, r0
   16cac:	460b      	mov	r3, r1
   16cae:	4610      	mov	r0, r2
   16cb0:	4619      	mov	r1, r3
   16cb2:	a31f      	add	r3, pc, #124	; (adr r3, 16d30 <servo_set+0x2e4>)
   16cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   16cb8:	f000 fe2a 	bl	17910 <__aeabi_dmul>
   16cbc:	4602      	mov	r2, r0
   16cbe:	460b      	mov	r3, r1
   16cc0:	4610      	mov	r0, r2
   16cc2:	4619      	mov	r1, r3
   16cc4:	f001 f8be 	bl	17e44 <__aeabi_d2iz>
   16cc8:	4603      	mov	r3, r0
   16cca:	b29b      	uxth	r3, r3
   16ccc:	b29b      	uxth	r3, r3
   16cce:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   16cd2:	3320      	adds	r3, #32
   16cd4:	81fb      	strh	r3, [r7, #14]
   16cd6:	89fb      	ldrh	r3, [r7, #14]
   16cd8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16cdc:	d307      	bcc.n	16cee <servo_set+0x2a2>
   16cde:	89fb      	ldrh	r3, [r7, #14]
   16ce0:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16ce4:	bf28      	it	cs
   16ce6:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16cea:	b29a      	uxth	r2, r3
   16cec:	e001      	b.n	16cf2 <servo_set+0x2a6>
   16cee:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16cf2:	f24b 6334 	movw	r3, #46644	; 0xb634
   16cf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16cfa:	81da      	strh	r2, [r3, #14]
}
   16cfc:	3710      	adds	r7, #16
   16cfe:	46bd      	mov	sp, r7
   16d00:	bdb0      	pop	{r4, r5, r7, pc}
   16d02:	bf00      	nop
   16d04:	f3af 8000 	nop.w
   16d08:	aaaa9ef0 	.word	0xaaaa9ef0
   16d0c:	3feaaaaa 	.word	0x3feaaaaa
   16d10:	fc96473e 	.word	0xfc96473e
   16d14:	3fdfc962 	.word	0x3fdfc962
   16d18:	51eb851f 	.word	0x51eb851f
   16d1c:	3fe51eb8 	.word	0x3fe51eb8
   16d20:	9999999a 	.word	0x9999999a
   16d24:	bfe19999 	.word	0xbfe19999
   16d28:	aaaa9ef0 	.word	0xaaaa9ef0
   16d2c:	bfe0aaaa 	.word	0xbfe0aaaa
   16d30:	eeeed77a 	.word	0xeeeed77a
   16d34:	bfdeeeee 	.word	0xbfdeeeee

00016d38 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   16d38:	b480      	push	{r7}
   16d3a:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   16d3c:	f242 0320 	movw	r3, #8224	; 0x2020
   16d40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d44:	2200      	movs	r2, #0
   16d46:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   16d48:	f242 0309 	movw	r3, #8201	; 0x2009
   16d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d50:	2219      	movs	r2, #25
   16d52:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   16d54:	f242 030b 	movw	r3, #8203	; 0x200b
   16d58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d5c:	2200      	movs	r2, #0
   16d5e:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   16d60:	f242 030a 	movw	r3, #8202	; 0x200a
   16d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d68:	2208      	movs	r2, #8
   16d6a:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   16d6c:	f242 0320 	movw	r3, #8224	; 0x2020
   16d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d74:	2286      	movs	r2, #134	; 0x86
   16d76:	701a      	strb	r2, [r3, #0]
}
   16d78:	46bd      	mov	sp, r7
   16d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
   16d7e:	4770      	bx	lr

00016d80 <uart_init_rx>:

void uart_init_rx() {
   16d80:	b480      	push	{r7}
   16d82:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   16d84:	f242 030a 	movw	r3, #8202	; 0x200a
   16d88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d8c:	f242 020a 	movw	r2, #8202	; 0x200a
   16d90:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16d94:	7812      	ldrb	r2, [r2, #0]
   16d96:	b2d2      	uxtb	r2, r2
   16d98:	f042 0210 	orr.w	r2, r2, #16
   16d9c:	b2d2      	uxtb	r2, r2
   16d9e:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   16da0:	f242 030a 	movw	r3, #8202	; 0x200a
   16da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16da8:	f242 020a 	movw	r2, #8202	; 0x200a
   16dac:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16db0:	7812      	ldrb	r2, [r2, #0]
   16db2:	b2d2      	uxtb	r2, r2
   16db4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16db8:	b2d2      	uxtb	r2, r2
   16dba:	701a      	strb	r2, [r3, #0]
}
   16dbc:	46bd      	mov	sp, r7
   16dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
   16dc2:	4770      	bx	lr

00016dc4 <uart_transmit>:

void uart_transmit( unsigned char data ) {
   16dc4:	b480      	push	{r7}
   16dc6:	b083      	sub	sp, #12
   16dc8:	af00      	add	r7, sp, #0
   16dca:	4603      	mov	r3, r0
   16dcc:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   16dce:	f242 030a 	movw	r3, #8202	; 0x200a
   16dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16dd6:	781b      	ldrb	r3, [r3, #0]
   16dd8:	b2db      	uxtb	r3, r3
   16dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
   16dde:	2b00      	cmp	r3, #0
   16de0:	d028      	beq.n	16e34 <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   16de2:	f24b 6349 	movw	r3, #46665	; 0xb649
   16de6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16dea:	781b      	ldrb	r3, [r3, #0]
   16dec:	b2db      	uxtb	r3, r3
   16dee:	461a      	mov	r2, r3
   16df0:	f24b 6348 	movw	r3, #46664	; 0xb648
   16df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16df8:	781b      	ldrb	r3, [r3, #0]
   16dfa:	3301      	adds	r3, #1
   16dfc:	429a      	cmp	r2, r3
   16dfe:	d100      	bne.n	16e02 <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   16e00:	e02c      	b.n	16e5c <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   16e02:	f24b 6348 	movw	r3, #46664	; 0xb648
   16e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e0a:	781b      	ldrb	r3, [r3, #0]
   16e0c:	461a      	mov	r2, r3
   16e0e:	f24b 634c 	movw	r3, #46668	; 0xb64c
   16e12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e16:	79f9      	ldrb	r1, [r7, #7]
   16e18:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   16e1a:	f24b 6348 	movw	r3, #46664	; 0xb648
   16e1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e22:	781b      	ldrb	r3, [r3, #0]
   16e24:	3301      	adds	r3, #1
   16e26:	b2da      	uxtb	r2, r3
   16e28:	f24b 6348 	movw	r3, #46664	; 0xb648
   16e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e30:	701a      	strb	r2, [r3, #0]
   16e32:	e013      	b.n	16e5c <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   16e34:	f242 030c 	movw	r3, #8204	; 0x200c
   16e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e3c:	79fa      	ldrb	r2, [r7, #7]
   16e3e:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   16e40:	f242 030a 	movw	r3, #8202	; 0x200a
   16e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e48:	f242 020a 	movw	r2, #8202	; 0x200a
   16e4c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16e50:	7812      	ldrb	r2, [r2, #0]
   16e52:	b2d2      	uxtb	r2, r2
   16e54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16e58:	b2d2      	uxtb	r2, r2
   16e5a:	701a      	strb	r2, [r3, #0]
  }
}
   16e5c:	370c      	adds	r7, #12
   16e5e:	46bd      	mov	sp, r7
   16e60:	f85d 7b04 	ldr.w	r7, [sp], #4
   16e64:	4770      	bx	lr
   16e66:	bf00      	nop

00016e68 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   16e68:	b590      	push	{r4, r7, lr}
   16e6a:	b089      	sub	sp, #36	; 0x24
   16e6c:	af00      	add	r7, sp, #0
   16e6e:	4603      	mov	r3, r0
   16e70:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   16e72:	f648 0384 	movw	r3, #34948	; 0x8884
   16e76:	f2c0 0301 	movt	r3, #1
   16e7a:	f107 040c 	add.w	r4, r7, #12
   16e7e:	6818      	ldr	r0, [r3, #0]
   16e80:	6859      	ldr	r1, [r3, #4]
   16e82:	689a      	ldr	r2, [r3, #8]
   16e84:	68db      	ldr	r3, [r3, #12]
   16e86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   16e88:	79fb      	ldrb	r3, [r7, #7]
   16e8a:	091b      	lsrs	r3, r3, #4
   16e8c:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   16e8e:	79fb      	ldrb	r3, [r7, #7]
   16e90:	f003 030f 	and.w	r3, r3, #15
   16e94:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   16e96:	230f      	movs	r3, #15
   16e98:	77fb      	strb	r3, [r7, #31]
        low = 15;
   16e9a:	230f      	movs	r3, #15
   16e9c:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   16e9e:	7ffb      	ldrb	r3, [r7, #31]
   16ea0:	f107 0220 	add.w	r2, r7, #32
   16ea4:	4413      	add	r3, r2
   16ea6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   16eaa:	4618      	mov	r0, r3
   16eac:	f7ff ff8a 	bl	16dc4 <uart_transmit>
  uart_transmit(hex[low]);
   16eb0:	7fbb      	ldrb	r3, [r7, #30]
   16eb2:	f107 0220 	add.w	r2, r7, #32
   16eb6:	4413      	add	r3, r2
   16eb8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   16ebc:	4618      	mov	r0, r3
   16ebe:	f7ff ff81 	bl	16dc4 <uart_transmit>
} 
   16ec2:	3724      	adds	r7, #36	; 0x24
   16ec4:	46bd      	mov	sp, r7
   16ec6:	bd90      	pop	{r4, r7, pc}

00016ec8 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   16ec8:	b580      	push	{r7, lr}
   16eca:	b084      	sub	sp, #16
   16ecc:	af00      	add	r7, sp, #0
   16ece:	4603      	mov	r3, r0
   16ed0:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   16ed2:	88fb      	ldrh	r3, [r7, #6]
   16ed4:	0a1b      	lsrs	r3, r3, #8
   16ed6:	b29b      	uxth	r3, r3
   16ed8:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   16eda:	88fb      	ldrh	r3, [r7, #6]
   16edc:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   16ede:	7bfb      	ldrb	r3, [r7, #15]
   16ee0:	4618      	mov	r0, r3
   16ee2:	f7ff ffc1 	bl	16e68 <uart_print_hex>
  uart_print_hex(low);
   16ee6:	7bbb      	ldrb	r3, [r7, #14]
   16ee8:	4618      	mov	r0, r3
   16eea:	f7ff ffbd 	bl	16e68 <uart_print_hex>
}
   16eee:	3710      	adds	r7, #16
   16ef0:	46bd      	mov	sp, r7
   16ef2:	bd80      	pop	{r7, pc}

00016ef4 <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   16ef4:	b580      	push	{r7, lr}
   16ef6:	b084      	sub	sp, #16
   16ef8:	af00      	add	r7, sp, #0
   16efa:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   16efc:	2300      	movs	r3, #0
   16efe:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   16f00:	e009      	b.n	16f16 <uart_print_string+0x22>
    uart_transmit(s[i]);
   16f02:	7bfb      	ldrb	r3, [r7, #15]
   16f04:	687a      	ldr	r2, [r7, #4]
   16f06:	4413      	add	r3, r2
   16f08:	781b      	ldrb	r3, [r3, #0]
   16f0a:	4618      	mov	r0, r3
   16f0c:	f7ff ff5a 	bl	16dc4 <uart_transmit>
    i++;
   16f10:	7bfb      	ldrb	r3, [r7, #15]
   16f12:	3301      	adds	r3, #1
   16f14:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   16f16:	7bfb      	ldrb	r3, [r7, #15]
   16f18:	687a      	ldr	r2, [r7, #4]
   16f1a:	4413      	add	r3, r2
   16f1c:	781b      	ldrb	r3, [r3, #0]
   16f1e:	2b00      	cmp	r3, #0
   16f20:	d1ef      	bne.n	16f02 <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   16f22:	3710      	adds	r7, #16
   16f24:	46bd      	mov	sp, r7
   16f26:	bd80      	pop	{r7, pc}

00016f28 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   16f28:	b480      	push	{r7}
   16f2a:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   16f2c:	f24b 6348 	movw	r3, #46664	; 0xb648
   16f30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16f34:	781a      	ldrb	r2, [r3, #0]
   16f36:	f24b 6349 	movw	r3, #46665	; 0xb649
   16f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16f3e:	781b      	ldrb	r3, [r3, #0]
   16f40:	b2db      	uxtb	r3, r3
   16f42:	429a      	cmp	r2, r3
   16f44:	d10e      	bne.n	16f64 <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   16f46:	f242 030a 	movw	r3, #8202	; 0x200a
   16f4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16f4e:	f242 020a 	movw	r2, #8202	; 0x200a
   16f52:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16f56:	7812      	ldrb	r2, [r2, #0]
   16f58:	b2d2      	uxtb	r2, r2
   16f5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   16f5e:	b2d2      	uxtb	r2, r2
   16f60:	701a      	strb	r2, [r3, #0]
   16f62:	e01d      	b.n	16fa0 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   16f64:	f242 030c 	movw	r3, #8204	; 0x200c
   16f68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16f6c:	f24b 6249 	movw	r2, #46665	; 0xb649
   16f70:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16f74:	7812      	ldrb	r2, [r2, #0]
   16f76:	b2d2      	uxtb	r2, r2
   16f78:	4611      	mov	r1, r2
   16f7a:	f24b 624c 	movw	r2, #46668	; 0xb64c
   16f7e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16f82:	5c52      	ldrb	r2, [r2, r1]
   16f84:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   16f86:	f24b 6349 	movw	r3, #46665	; 0xb649
   16f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16f8e:	781b      	ldrb	r3, [r3, #0]
   16f90:	b2db      	uxtb	r3, r3
   16f92:	3301      	adds	r3, #1
   16f94:	b2da      	uxtb	r2, r3
   16f96:	f24b 6349 	movw	r3, #46665	; 0xb649
   16f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16f9e:	701a      	strb	r2, [r3, #0]
  }
}
   16fa0:	46bd      	mov	sp, r7
   16fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
   16fa6:	4770      	bx	lr

00016fa8 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   16fa8:	b580      	push	{r7, lr}
   16faa:	b082      	sub	sp, #8
   16fac:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   16fae:	2010      	movs	r0, #16
   16fb0:	2101      	movs	r1, #1
   16fb2:	f7e9 ff05 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   16fb6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   16fba:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16fbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   16fc2:	2201      	movs	r2, #1
   16fc4:	f7ea fa0c 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   16fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16fcc:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   16fce:	2310      	movs	r3, #16
   16fd0:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   16fd2:	2303      	movs	r3, #3
   16fd4:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   16fd6:	1d3b      	adds	r3, r7, #4
   16fd8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   16fdc:	f2c4 0001 	movt	r0, #16385	; 0x4001
   16fe0:	4619      	mov	r1, r3
   16fe2:	f7ea f8c1 	bl	1168 <GPIO_Init>
}
   16fe6:	3708      	adds	r7, #8
   16fe8:	46bd      	mov	sp, r7
   16fea:	bd80      	pop	{r7, pc}

00016fec <init_button>:

void init_button(void)
{
   16fec:	b580      	push	{r7, lr}
   16fee:	b082      	sub	sp, #8
   16ff0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   16ff2:	2004      	movs	r0, #4
   16ff4:	2101      	movs	r1, #1
   16ff6:	f7e9 fee3 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   16ffa:	2301      	movs	r3, #1
   16ffc:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   16ffe:	2304      	movs	r3, #4
   17000:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17002:	2303      	movs	r3, #3
   17004:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   17006:	1d3b      	adds	r3, r7, #4
   17008:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1700c:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17010:	4619      	mov	r1, r3
   17012:	f7ea f8a9 	bl	1168 <GPIO_Init>
}
   17016:	3708      	adds	r7, #8
   17018:	46bd      	mov	sp, r7
   1701a:	bd80      	pop	{r7, pc}

0001701c <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   1701c:	b580      	push	{r7, lr}
   1701e:	b084      	sub	sp, #16
   17020:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   17022:	2001      	movs	r0, #1
   17024:	2101      	movs	r1, #1
   17026:	f7e9 fecb 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   1702a:	2000      	movs	r0, #0
   1702c:	2100      	movs	r1, #0
   1702e:	f7ea facf 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   17032:	2301      	movs	r3, #1
   17034:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   17036:	2300      	movs	r3, #0
   17038:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   1703a:	2308      	movs	r3, #8
   1703c:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   1703e:	2301      	movs	r3, #1
   17040:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   17042:	f107 0308 	add.w	r3, r7, #8
   17046:	4618      	mov	r0, r3
   17048:	f7ea ffc8 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   1704c:	2306      	movs	r3, #6
   1704e:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   17050:	230f      	movs	r3, #15
   17052:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   17054:	230f      	movs	r3, #15
   17056:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   17058:	2301      	movs	r3, #1
   1705a:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   1705c:	1d3b      	adds	r3, r7, #4
   1705e:	4618      	mov	r0, r3
   17060:	f7eb f8f6 	bl	2250 <NVIC_Init>
}
   17064:	3710      	adds	r7, #16
   17066:	46bd      	mov	sp, r7
   17068:	bd80      	pop	{r7, pc}
   1706a:	bf00      	nop

0001706c <init_rs232>:

void init_rs232(void)
{
   1706c:	b580      	push	{r7, lr}
   1706e:	b086      	sub	sp, #24
   17070:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   17072:	2005      	movs	r0, #5
   17074:	2101      	movs	r1, #1
   17076:	f7e9 fea3 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   1707a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   1707e:	2101      	movs	r1, #1
   17080:	f7e9 fec6 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   17084:	2308      	movs	r3, #8
   17086:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   17088:	2304      	movs	r3, #4
   1708a:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   1708c:	1d3b      	adds	r3, r7, #4
   1708e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   17092:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17096:	4619      	mov	r1, r3
   17098:	f7ea f866 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   1709c:	2304      	movs	r3, #4
   1709e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   170a0:	2303      	movs	r3, #3
   170a2:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   170a4:	2318      	movs	r3, #24
   170a6:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   170a8:	1d3b      	adds	r3, r7, #4
   170aa:	f44f 6000 	mov.w	r0, #2048	; 0x800
   170ae:	f2c4 0001 	movt	r0, #16385	; 0x4001
   170b2:	4619      	mov	r1, r3
   170b4:	f7ea f858 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   170b8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   170bc:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   170be:	2300      	movs	r3, #0
   170c0:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   170c2:	2300      	movs	r3, #0
   170c4:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   170c6:	2300      	movs	r3, #0
   170c8:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   170ca:	2300      	movs	r3, #0
   170cc:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   170ce:	230c      	movs	r3, #12
   170d0:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   170d2:	f107 0308 	add.w	r3, r7, #8
   170d6:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   170da:	f2c4 0000 	movt	r0, #16384	; 0x4000
   170de:	4619      	mov	r1, r3
   170e0:	f7ea fb2a 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   170e4:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   170e8:	f2c4 0000 	movt	r0, #16384	; 0x4000
   170ec:	2101      	movs	r1, #1
   170ee:	f7ea fc41 	bl	1974 <USART_Cmd>
}
   170f2:	3718      	adds	r7, #24
   170f4:	46bd      	mov	sp, r7
   170f6:	bd80      	pop	{r7, pc}

000170f8 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   170f8:	b580      	push	{r7, lr}
   170fa:	b082      	sub	sp, #8
   170fc:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   170fe:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17102:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17106:	f240 7127 	movw	r1, #1831	; 0x727
   1710a:	2200      	movs	r2, #0
   1710c:	f7ea fc52 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   17110:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17114:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17118:	f240 5125 	movw	r1, #1317	; 0x525
   1711c:	2201      	movs	r2, #1
   1711e:	f7ea fc49 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   17122:	2326      	movs	r3, #38	; 0x26
   17124:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   17126:	2300      	movs	r3, #0
   17128:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   1712a:	2301      	movs	r3, #1
   1712c:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   1712e:	1d3b      	adds	r3, r7, #4
   17130:	4618      	mov	r0, r3
   17132:	f7eb f88d 	bl	2250 <NVIC_Init>
}
   17136:	3708      	adds	r7, #8
   17138:	46bd      	mov	sp, r7
   1713a:	bd80      	pop	{r7, pc}

0001713c <enable_rs232>:

void enable_rs232(void)
{
   1713c:	b580      	push	{r7, lr}
   1713e:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   17140:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17144:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17148:	2101      	movs	r1, #1
   1714a:	f7ea fc13 	bl	1974 <USART_Cmd>
}
   1714e:	bd80      	pop	{r7, pc}

00017150 <send_byte>:

void send_byte(uint8_t b)
{
   17150:	b580      	push	{r7, lr}
   17152:	b082      	sub	sp, #8
   17154:	af00      	add	r7, sp, #0
   17156:	4603      	mov	r3, r0
   17158:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   1715a:	bf00      	nop
   1715c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17160:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17164:	2180      	movs	r1, #128	; 0x80
   17166:	f7ea fe71 	bl	1e4c <USART_GetFlagStatus>
   1716a:	4603      	mov	r3, r0
   1716c:	2b00      	cmp	r3, #0
   1716e:	d0f5      	beq.n	1715c <send_byte+0xc>
    
    GPIOC->ODR ^= 0x00001000;
   17170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   17174:	f2c4 0301 	movt	r3, #16385	; 0x4001
   17178:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1717c:	f2c4 0201 	movt	r2, #16385	; 0x4001
   17180:	68d2      	ldr	r2, [r2, #12]
   17182:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   17186:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   17188:	79fb      	ldrb	r3, [r7, #7]
   1718a:	b29b      	uxth	r3, r3
   1718c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17190:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17194:	4619      	mov	r1, r3
   17196:	f7ea fd0d 	bl	1bb4 <USART_SendData>
}
   1719a:	3708      	adds	r7, #8
   1719c:	46bd      	mov	sp, r7
   1719e:	bd80      	pop	{r7, pc}

000171a0 <send_num>:
/**
 *  can print a num which is smaller than 10
 */

void send_num(uint8_t b)
{
   171a0:	b580      	push	{r7, lr}
   171a2:	b082      	sub	sp, #8
   171a4:	af00      	add	r7, sp, #0
   171a6:	4603      	mov	r3, r0
   171a8:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   171aa:	79fb      	ldrb	r3, [r7, #7]
   171ac:	3330      	adds	r3, #48	; 0x30
   171ae:	b2db      	uxtb	r3, r3
   171b0:	4618      	mov	r0, r3
   171b2:	f7ff ffcd 	bl	17150 <send_byte>
}
   171b6:	3708      	adds	r7, #8
   171b8:	46bd      	mov	sp, r7
   171ba:	bd80      	pop	{r7, pc}

000171bc <vPrintString>:
 * print a string
 *
 * */

void vPrintString( const char * string)
{
   171bc:	b580      	push	{r7, lr}
   171be:	b084      	sub	sp, #16
   171c0:	af00      	add	r7, sp, #0
   171c2:	6078      	str	r0, [r7, #4]
    int i = 0;
   171c4:	2300      	movs	r3, #0
   171c6:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   171c8:	e009      	b.n	171de <vPrintString+0x22>
    {
        send_byte(string[i]);
   171ca:	68fb      	ldr	r3, [r7, #12]
   171cc:	687a      	ldr	r2, [r7, #4]
   171ce:	4413      	add	r3, r2
   171d0:	781b      	ldrb	r3, [r3, #0]
   171d2:	4618      	mov	r0, r3
   171d4:	f7ff ffbc 	bl	17150 <send_byte>
        i++;
   171d8:	68fb      	ldr	r3, [r7, #12]
   171da:	3301      	adds	r3, #1
   171dc:	60fb      	str	r3, [r7, #12]
 * */

void vPrintString( const char * string)
{
    int i = 0;
    while(string[i] != '\0')
   171de:	68fb      	ldr	r3, [r7, #12]
   171e0:	687a      	ldr	r2, [r7, #4]
   171e2:	4413      	add	r3, r2
   171e4:	781b      	ldrb	r3, [r3, #0]
   171e6:	2b00      	cmp	r3, #0
   171e8:	d1ef      	bne.n	171ca <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   171ea:	3710      	adds	r7, #16
   171ec:	46bd      	mov	sp, r7
   171ee:	bd80      	pop	{r7, pc}

000171f0 <vPrintNumber>:
/*
 * print a number which is less than 10
 *
 * */
void vPrintNumber( const long c_num)
{
   171f0:	b580      	push	{r7, lr}
   171f2:	b08a      	sub	sp, #40	; 0x28
   171f4:	af00      	add	r7, sp, #0
   171f6:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
   171f8:	2300      	movs	r3, #0
   171fa:	623b      	str	r3, [r7, #32]
    long num = c_num;
   171fc:	687b      	ldr	r3, [r7, #4]
   171fe:	61fb      	str	r3, [r7, #28]

    if(num == 0)
   17200:	69fb      	ldr	r3, [r7, #28]
   17202:	2b00      	cmp	r3, #0
   17204:	d106      	bne.n	17214 <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   17206:	f648 0094 	movw	r0, #34964	; 0x8894
   1720a:	f2c0 0001 	movt	r0, #1
   1720e:	f7ff ffd5 	bl	171bc <vPrintString>
   17212:	e062      	b.n	172da <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num  )
   17214:	e024      	b.n	17260 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   17216:	69f9      	ldr	r1, [r7, #28]
   17218:	f246 6367 	movw	r3, #26215	; 0x6667
   1721c:	f2c6 6366 	movt	r3, #26214	; 0x6666
   17220:	fb83 2301 	smull	r2, r3, r3, r1
   17224:	109a      	asrs	r2, r3, #2
   17226:	17cb      	asrs	r3, r1, #31
   17228:	1ad2      	subs	r2, r2, r3
   1722a:	4613      	mov	r3, r2
   1722c:	009b      	lsls	r3, r3, #2
   1722e:	4413      	add	r3, r2
   17230:	005b      	lsls	r3, r3, #1
   17232:	1aca      	subs	r2, r1, r3
   17234:	b2d3      	uxtb	r3, r2
   17236:	3330      	adds	r3, #48	; 0x30
   17238:	b2da      	uxtb	r2, r3
   1723a:	f107 010c 	add.w	r1, r7, #12
   1723e:	6a3b      	ldr	r3, [r7, #32]
   17240:	440b      	add	r3, r1
   17242:	701a      	strb	r2, [r3, #0]
            count ++;
   17244:	6a3b      	ldr	r3, [r7, #32]
   17246:	3301      	adds	r3, #1
   17248:	623b      	str	r3, [r7, #32]
            num /= 10;
   1724a:	69fa      	ldr	r2, [r7, #28]
   1724c:	f246 6367 	movw	r3, #26215	; 0x6667
   17250:	f2c6 6366 	movt	r3, #26214	; 0x6666
   17254:	fb83 1302 	smull	r1, r3, r3, r2
   17258:	1099      	asrs	r1, r3, #2
   1725a:	17d3      	asrs	r3, r2, #31
   1725c:	1acb      	subs	r3, r1, r3
   1725e:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num  )
   17260:	69fb      	ldr	r3, [r7, #28]
   17262:	2b00      	cmp	r3, #0
   17264:	d1d7      	bne.n	17216 <vPrintNumber+0x26>
            time[count] = num%10 +'0';
            count ++;
            num /= 10;

        }
        time[count] = '\0';
   17266:	f107 020c 	add.w	r2, r7, #12
   1726a:	6a3b      	ldr	r3, [r7, #32]
   1726c:	4413      	add	r3, r2
   1726e:	2200      	movs	r2, #0
   17270:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i )
   17272:	2300      	movs	r3, #0
   17274:	627b      	str	r3, [r7, #36]	; 0x24
   17276:	e020      	b.n	172ba <vPrintNumber+0xca>
        {
            tmp = time[i];
   17278:	f107 020c 	add.w	r2, r7, #12
   1727c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1727e:	4413      	add	r3, r2
   17280:	781b      	ldrb	r3, [r3, #0]
   17282:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
   17284:	6a3a      	ldr	r2, [r7, #32]
   17286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17288:	1ad3      	subs	r3, r2, r3
   1728a:	3b01      	subs	r3, #1
   1728c:	f107 0228 	add.w	r2, r7, #40	; 0x28
   17290:	4413      	add	r3, r2
   17292:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
   17296:	f107 010c 	add.w	r1, r7, #12
   1729a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1729c:	440b      	add	r3, r1
   1729e:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   172a0:	6a3a      	ldr	r2, [r7, #32]
   172a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   172a4:	1ad3      	subs	r3, r2, r3
   172a6:	3b01      	subs	r3, #1
   172a8:	f107 0128 	add.w	r1, r7, #40	; 0x28
   172ac:	440b      	add	r3, r1
   172ae:	7efa      	ldrb	r2, [r7, #27]
   172b0:	f803 2c1c 	strb.w	r2, [r3, #-28]

        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i )
   172b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   172b6:	3301      	adds	r3, #1
   172b8:	627b      	str	r3, [r7, #36]	; 0x24
   172ba:	6a3b      	ldr	r3, [r7, #32]
   172bc:	085a      	lsrs	r2, r3, #1
   172be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   172c0:	429a      	cmp	r2, r3
   172c2:	d8d9      	bhi.n	17278 <vPrintNumber+0x88>
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;

        }
        vPrintString(time);
   172c4:	f107 030c 	add.w	r3, r7, #12
   172c8:	4618      	mov	r0, r3
   172ca:	f7ff ff77 	bl	171bc <vPrintString>
        vPrintString("\n\r");
   172ce:	f648 0098 	movw	r0, #34968	; 0x8898
   172d2:	f2c0 0001 	movt	r0, #1
   172d6:	f7ff ff71 	bl	171bc <vPrintString>
    }
}
   172da:	3728      	adds	r7, #40	; 0x28
   172dc:	46bd      	mov	sp, r7
   172de:	bd80      	pop	{r7, pc}

000172e0 <vInitInitialise>:

extern xTaskComplete[NUMBEROFTASK];


void vInitInitialise()
{
   172e0:	b480      	push	{r7}
   172e2:	b083      	sub	sp, #12
   172e4:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    for(i = 0; i < NUMBEROFTASK; ++ i)
   172e6:	2300      	movs	r3, #0
   172e8:	607b      	str	r3, [r7, #4]
   172ea:	e00a      	b.n	17302 <vInitInitialise+0x22>
    {
        IS_INIT[i] = 0;
   172ec:	f24b 734c 	movw	r3, #46924	; 0xb74c
   172f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   172f4:	687a      	ldr	r2, [r7, #4]
   172f6:	2100      	movs	r1, #0
   172f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


void vInitInitialise()
{
    portBASE_TYPE i;
    for(i = 0; i < NUMBEROFTASK; ++ i)
   172fc:	687b      	ldr	r3, [r7, #4]
   172fe:	3301      	adds	r3, #1
   17300:	607b      	str	r3, [r7, #4]
   17302:	687b      	ldr	r3, [r7, #4]
   17304:	2b0c      	cmp	r3, #12
   17306:	ddf1      	ble.n	172ec <vInitInitialise+0xc>
    {
        IS_INIT[i] = 0;
    }
}
   17308:	370c      	adds	r7, #12
   1730a:	46bd      	mov	sp, r7
   1730c:	f85d 7b04 	ldr.w	r7, [sp], #4
   17310:	4770      	bx	lr
   17312:	bf00      	nop

00017314 <main>:

#define SERVANT_STACK_SIZE 128 
int main(void)
{
   17314:	b590      	push	{r4, r7, lr}
   17316:	b089      	sub	sp, #36	; 0x24
   17318:	af04      	add	r7, sp, #16
    init_led();
   1731a:	f7ff fe45 	bl	16fa8 <init_led>
    init_rs232();
   1731e:	f7ff fea5 	bl	1706c <init_rs232>
    enable_rs232_interrupts();
   17322:	f7ff fee9 	bl	170f8 <enable_rs232_interrupts>
    enable_rs232();
   17326:	f7ff ff09 	bl	1713c <enable_rs232>

    //vTaskCompleteInitialise();
    vInitInitialise();
   1732a:	f7ff ffd9 	bl	172e0 <vInitInitialise>
    vSemaphoreInitialise();
   1732e:	f7eb fe2d 	bl	2f8c <vSemaphoreInitialise>
    vParameterInitialise();
   17332:	f7eb fe6b 	bl	300c <vParameterInitialise>
    portBASE_TYPE i,j;
    portBASE_TYPE flag = 0;
   17336:	2300      	movs	r3, #0
   17338:	607b      	str	r3, [r7, #4]

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);
   1733a:	2301      	movs	r3, #1
   1733c:	9300      	str	r3, [sp, #0]
   1733e:	4b42      	ldr	r3, [pc, #264]	; (17448 <main+0x134>)
   17340:	9301      	str	r3, [sp, #4]
   17342:	2300      	movs	r3, #0
   17344:	9302      	str	r3, [sp, #8]
   17346:	2300      	movs	r3, #0
   17348:	9303      	str	r3, [sp, #12]
   1734a:	f643 0095 	movw	r0, #14485	; 0x3895
   1734e:	f2c0 0000 	movt	r0, #0
   17352:	f648 019c 	movw	r1, #34972	; 0x889c
   17356:	f2c0 0101 	movt	r1, #1
   1735a:	2280      	movs	r2, #128	; 0x80
   1735c:	4b3b      	ldr	r3, [pc, #236]	; (1744c <main+0x138>)
   1735e:	f7ed fa05 	bl	476c <xTaskGenericCreate>

    for( i = 0; i < NUMBEROFSERVANT-1; ++ i )
   17362:	2300      	movs	r3, #0
   17364:	60fb      	str	r3, [r7, #12]
   17366:	e064      	b.n	17432 <main+0x11e>
    {
        for(j = 0; j < NUMBEROFTASK; ++ j)
   17368:	2300      	movs	r3, #0
   1736a:	60bb      	str	r3, [r7, #8]
   1736c:	e00f      	b.n	1738e <main+0x7a>
        {
            if( i == xSensorOfTask[j] )
   1736e:	f240 0360 	movw	r3, #96	; 0x60
   17372:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17376:	68ba      	ldr	r2, [r7, #8]
   17378:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1737c:	68fb      	ldr	r3, [r7, #12]
   1737e:	429a      	cmp	r2, r3
   17380:	d102      	bne.n	17388 <main+0x74>
            {
                flag = 1;  // sensor 
   17382:	2301      	movs	r3, #1
   17384:	607b      	str	r3, [r7, #4]
                break;
   17386:	e005      	b.n	17394 <main+0x80>

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);

    for( i = 0; i < NUMBEROFSERVANT-1; ++ i )
    {
        for(j = 0; j < NUMBEROFTASK; ++ j)
   17388:	68bb      	ldr	r3, [r7, #8]
   1738a:	3301      	adds	r3, #1
   1738c:	60bb      	str	r3, [r7, #8]
   1738e:	68bb      	ldr	r3, [r7, #8]
   17390:	2b0c      	cmp	r3, #12
   17392:	ddec      	ble.n	1736e <main+0x5a>
                flag = 1;  // sensor 
                break;
            }
        }
        // create sensor 
        if(flag == 1)
   17394:	687b      	ldr	r3, [r7, #4]
   17396:	2b01      	cmp	r3, #1
   17398:	d125      	bne.n	173e6 <main+0xd2>
        {
            flag = 0; 
   1739a:	2300      	movs	r3, #0
   1739c:	607b      	str	r3, [r7, #4]
            xTaskCreate( vSensor, "sensor", SERVANT_STACK_SIZE, (void *)&pvParameters[i], tskIDLE_PRIORITY + 2, &xTaskOfHandle[i] );
   1739e:	68fb      	ldr	r3, [r7, #12]
   173a0:	222c      	movs	r2, #44	; 0x2c
   173a2:	fb02 f203 	mul.w	r2, r2, r3
   173a6:	f240 534c 	movw	r3, #1356	; 0x54c
   173aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   173ae:	18d4      	adds	r4, r2, r3
   173b0:	68fb      	ldr	r3, [r7, #12]
   173b2:	009a      	lsls	r2, r3, #2
   173b4:	f640 33dc 	movw	r3, #3036	; 0xbdc
   173b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   173bc:	4413      	add	r3, r2
   173be:	2202      	movs	r2, #2
   173c0:	9200      	str	r2, [sp, #0]
   173c2:	9301      	str	r3, [sp, #4]
   173c4:	2300      	movs	r3, #0
   173c6:	9302      	str	r3, [sp, #8]
   173c8:	2300      	movs	r3, #0
   173ca:	9303      	str	r3, [sp, #12]
   173cc:	f243 4085 	movw	r0, #13445	; 0x3485
   173d0:	f2c0 0000 	movt	r0, #0
   173d4:	f648 01a8 	movw	r1, #34984	; 0x88a8
   173d8:	f2c0 0101 	movt	r1, #1
   173dc:	2280      	movs	r2, #128	; 0x80
   173de:	4623      	mov	r3, r4
   173e0:	f7ed f9c4 	bl	476c <xTaskGenericCreate>
   173e4:	e022      	b.n	1742c <main+0x118>
        }
        else  // create servant
        {
            xTaskCreate( vServant, "servant", SERVANT_STACK_SIZE, (void *)&pvParameters[i], tskIDLE_PRIORITY + 2, &xTaskOfHandle[i] );
   173e6:	68fb      	ldr	r3, [r7, #12]
   173e8:	222c      	movs	r2, #44	; 0x2c
   173ea:	fb02 f203 	mul.w	r2, r2, r3
   173ee:	f240 534c 	movw	r3, #1356	; 0x54c
   173f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   173f6:	18d4      	adds	r4, r2, r3
   173f8:	68fb      	ldr	r3, [r7, #12]
   173fa:	009a      	lsls	r2, r3, #2
   173fc:	f640 33dc 	movw	r3, #3036	; 0xbdc
   17400:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17404:	4413      	add	r3, r2
   17406:	2202      	movs	r2, #2
   17408:	9200      	str	r2, [sp, #0]
   1740a:	9301      	str	r3, [sp, #4]
   1740c:	2300      	movs	r3, #0
   1740e:	9302      	str	r3, [sp, #8]
   17410:	2300      	movs	r3, #0
   17412:	9303      	str	r3, [sp, #12]
   17414:	f243 60b1 	movw	r0, #14001	; 0x36b1
   17418:	f2c0 0000 	movt	r0, #0
   1741c:	f648 01b0 	movw	r1, #34992	; 0x88b0
   17420:	f2c0 0101 	movt	r1, #1
   17424:	2280      	movs	r2, #128	; 0x80
   17426:	4623      	mov	r3, r4
   17428:	f7ed f9a0 	bl	476c <xTaskGenericCreate>
    portBASE_TYPE i,j;
    portBASE_TYPE flag = 0;

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);

    for( i = 0; i < NUMBEROFSERVANT-1; ++ i )
   1742c:	68fb      	ldr	r3, [r7, #12]
   1742e:	3301      	adds	r3, #1
   17430:	60fb      	str	r3, [r7, #12]
   17432:	68fb      	ldr	r3, [r7, #12]
   17434:	2b21      	cmp	r3, #33	; 0x21
   17436:	dd97      	ble.n	17368 <main+0x54>
        {
            xTaskCreate( vServant, "servant", SERVANT_STACK_SIZE, (void *)&pvParameters[i], tskIDLE_PRIORITY + 2, &xTaskOfHandle[i] );
        }
    }
    /* Start running the task. */
    vTaskStartScheduler();
   17438:	f7ed fd16 	bl	4e68 <vTaskStartScheduler>

    return 0;
   1743c:	2300      	movs	r3, #0
}
   1743e:	4618      	mov	r0, r3
   17440:	3714      	adds	r7, #20
   17442:	46bd      	mov	sp, r7
   17444:	bd90      	pop	{r4, r7, pc}
   17446:	bf00      	nop
   17448:	20000c64 	.word	0x20000c64
   1744c:	20000b24 	.word	0x20000b24

00017450 <myTraceCreate>:

void myTraceCreate      (){
   17450:	b480      	push	{r7}
   17452:	af00      	add	r7, sp, #0
}
   17454:	46bd      	mov	sp, r7
   17456:	f85d 7b04 	ldr.w	r7, [sp], #4
   1745a:	4770      	bx	lr

0001745c <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   1745c:	b480      	push	{r7}
   1745e:	af00      	add	r7, sp, #0
}
   17460:	46bd      	mov	sp, r7
   17462:	f85d 7b04 	ldr.w	r7, [sp], #4
   17466:	4770      	bx	lr

00017468 <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   17468:	b480      	push	{r7}
   1746a:	af00      	add	r7, sp, #0
}
   1746c:	46bd      	mov	sp, r7
   1746e:	f85d 7b04 	ldr.w	r7, [sp], #4
   17472:	4770      	bx	lr

00017474 <vApplicationTickHook>:
 *
 * if there is any task need to be triggered at this time,
 * tick hook function would send semaphore to them.
 * */
void vApplicationTickHook( void )
{
   17474:	b580      	push	{r7, lr}
   17476:	b082      	sub	sp, #8
   17478:	af00      	add	r7, sp, #0
    portTickType xCurrentTime = xTaskGetTickCount();
   1747a:	f7ed fddf 	bl	503c <xTaskGetTickCount>
   1747e:	6038      	str	r0, [r7, #0]
    portBASE_TYPE i;
    /* init task */
    if(xCurrentTime > 0 && xCurrentTime < 1001)
   17480:	683b      	ldr	r3, [r7, #0]
   17482:	2b00      	cmp	r3, #0
   17484:	d03f      	beq.n	17506 <vApplicationTickHook+0x92>
   17486:	683b      	ldr	r3, [r7, #0]
   17488:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1748c:	d83b      	bhi.n	17506 <vApplicationTickHook+0x92>
    {
        for(i = 0; i < NUMBEROFTASK; ++i)
   1748e:	2300      	movs	r3, #0
   17490:	607b      	str	r3, [r7, #4]
   17492:	e035      	b.n	17500 <vApplicationTickHook+0x8c>
        {
            if( IS_INIT[i] == 0 && xCurrentTime % xPeriodOfTask[i] == 0 )
   17494:	f24b 734c 	movw	r3, #46924	; 0xb74c
   17498:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1749c:	687a      	ldr	r2, [r7, #4]
   1749e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   174a2:	2b00      	cmp	r3, #0
   174a4:	d129      	bne.n	174fa <vApplicationTickHook+0x86>
   174a6:	f240 032c 	movw	r3, #44	; 0x2c
   174aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   174ae:	687a      	ldr	r2, [r7, #4]
   174b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   174b4:	683b      	ldr	r3, [r7, #0]
   174b6:	fbb3 f1f2 	udiv	r1, r3, r2
   174ba:	fb02 f201 	mul.w	r2, r2, r1
   174be:	1a9b      	subs	r3, r3, r2
   174c0:	2b00      	cmp	r3, #0
   174c2:	d11a      	bne.n	174fa <vApplicationTickHook+0x86>
            {
                IS_INIT[i] = 1;
   174c4:	f24b 734c 	movw	r3, #46924	; 0xb74c
   174c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   174cc:	687a      	ldr	r2, [r7, #4]
   174ce:	2101      	movs	r1, #1
   174d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xSemaphoreGive( xBinarySemaphore[xSensorOfTask[i]] );
   174d4:	f240 0360 	movw	r3, #96	; 0x60
   174d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   174dc:	687a      	ldr	r2, [r7, #4]
   174de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   174e2:	f640 3350 	movw	r3, #2896	; 0xb50
   174e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   174ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   174ee:	4618      	mov	r0, r3
   174f0:	2100      	movs	r1, #0
   174f2:	2200      	movs	r2, #0
   174f4:	2300      	movs	r3, #0
   174f6:	f7ec fe27 	bl	4148 <xQueueGenericSend>
    portTickType xCurrentTime = xTaskGetTickCount();
    portBASE_TYPE i;
    /* init task */
    if(xCurrentTime > 0 && xCurrentTime < 1001)
    {
        for(i = 0; i < NUMBEROFTASK; ++i)
   174fa:	687b      	ldr	r3, [r7, #4]
   174fc:	3301      	adds	r3, #1
   174fe:	607b      	str	r3, [r7, #4]
   17500:	687b      	ldr	r3, [r7, #4]
   17502:	2b0c      	cmp	r3, #12
   17504:	ddc6      	ble.n	17494 <vApplicationTickHook+0x20>
    }
    
    // R-Servant will be suspend when no events need to be proceeded.
    // As a result, we need to send semaphore to R-Servant to triggered it processing events 
    // when time meeting the start time of every task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
   17506:	f240 032c 	movw	r3, #44	; 0x2c
   1750a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1750e:	681b      	ldr	r3, [r3, #0]
   17510:	005a      	lsls	r2, r3, #1
   17512:	683b      	ldr	r3, [r7, #0]
   17514:	429a      	cmp	r2, r3
   17516:	d83f      	bhi.n	17598 <vApplicationTickHook+0x124>
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
   17518:	f240 032c 	movw	r3, #44	; 0x2c
   1751c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17520:	681a      	ldr	r2, [r3, #0]
   17522:	683b      	ldr	r3, [r7, #0]
   17524:	fbb3 f1f2 	udiv	r1, r3, r2
   17528:	fb02 f201 	mul.w	r2, r2, r1
   1752c:	1a9b      	subs	r3, r3, r2
   1752e:	2b00      	cmp	r3, #0
   17530:	d026      	beq.n	17580 <vApplicationTickHook+0x10c>
            xCurrentTime % xPeriodOfTask[2] == 0 ||
   17532:	f240 032c 	movw	r3, #44	; 0x2c
   17536:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1753a:	689a      	ldr	r2, [r3, #8]
   1753c:	683b      	ldr	r3, [r7, #0]
   1753e:	fbb3 f1f2 	udiv	r1, r3, r2
   17542:	fb02 f201 	mul.w	r2, r2, r1
   17546:	1a9b      	subs	r3, r3, r2
    // R-Servant will be suspend when no events need to be proceeded.
    // As a result, we need to send semaphore to R-Servant to triggered it processing events 
    // when time meeting the start time of every task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
   17548:	2b00      	cmp	r3, #0
   1754a:	d019      	beq.n	17580 <vApplicationTickHook+0x10c>
            xCurrentTime % xPeriodOfTask[2] == 0 ||
            xCurrentTime % xPeriodOfTask[8] == 0 ||
   1754c:	f240 032c 	movw	r3, #44	; 0x2c
   17550:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17554:	6a1a      	ldr	r2, [r3, #32]
   17556:	683b      	ldr	r3, [r7, #0]
   17558:	fbb3 f1f2 	udiv	r1, r3, r2
   1755c:	fb02 f201 	mul.w	r2, r2, r1
   17560:	1a9b      	subs	r3, r3, r2
    // As a result, we need to send semaphore to R-Servant to triggered it processing events 
    // when time meeting the start time of every task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
            xCurrentTime % xPeriodOfTask[2] == 0 ||
   17562:	2b00      	cmp	r3, #0
   17564:	d00c      	beq.n	17580 <vApplicationTickHook+0x10c>
            xCurrentTime % xPeriodOfTask[8] == 0 ||
            xCurrentTime % xPeriodOfTask[12] == 0)
   17566:	f240 032c 	movw	r3, #44	; 0x2c
   1756a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1756e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   17570:	683b      	ldr	r3, [r7, #0]
   17572:	fbb3 f1f2 	udiv	r1, r3, r2
   17576:	fb02 f201 	mul.w	r2, r2, r1
   1757a:	1a9b      	subs	r3, r3, r2
    // when time meeting the start time of every task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
            xCurrentTime % xPeriodOfTask[2] == 0 ||
            xCurrentTime % xPeriodOfTask[8] == 0 ||
   1757c:	2b00      	cmp	r3, #0
   1757e:	d10b      	bne.n	17598 <vApplicationTickHook+0x124>
            xCurrentTime % xPeriodOfTask[12] == 0)
        {
           xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT - 1] ); 
   17580:	f640 3350 	movw	r3, #2896	; 0xb50
   17584:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   1758c:	4618      	mov	r0, r3
   1758e:	2100      	movs	r1, #0
   17590:	2200      	movs	r2, #0
   17592:	2300      	movs	r3, #0
   17594:	f7ec fdd8 	bl	4148 <xQueueGenericSend>
        }
    }
}
   17598:	3708      	adds	r7, #8
   1759a:	46bd      	mov	sp, r7
   1759c:	bd80      	pop	{r7, pc}
   1759e:	bf00      	nop

000175a0 <__aeabi_drsub>:
   175a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   175a4:	e002      	b.n	175ac <__adddf3>
   175a6:	bf00      	nop

000175a8 <__aeabi_dsub>:
   175a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000175ac <__adddf3>:
   175ac:	b530      	push	{r4, r5, lr}
   175ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
   175b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   175b6:	ea94 0f05 	teq	r4, r5
   175ba:	bf08      	it	eq
   175bc:	ea90 0f02 	teqeq	r0, r2
   175c0:	bf1f      	itttt	ne
   175c2:	ea54 0c00 	orrsne.w	ip, r4, r0
   175c6:	ea55 0c02 	orrsne.w	ip, r5, r2
   175ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   175ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   175d2:	f000 80e2 	beq.w	1779a <__adddf3+0x1ee>
   175d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   175da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   175de:	bfb8      	it	lt
   175e0:	426d      	neglt	r5, r5
   175e2:	dd0c      	ble.n	175fe <__adddf3+0x52>
   175e4:	442c      	add	r4, r5
   175e6:	ea80 0202 	eor.w	r2, r0, r2
   175ea:	ea81 0303 	eor.w	r3, r1, r3
   175ee:	ea82 0000 	eor.w	r0, r2, r0
   175f2:	ea83 0101 	eor.w	r1, r3, r1
   175f6:	ea80 0202 	eor.w	r2, r0, r2
   175fa:	ea81 0303 	eor.w	r3, r1, r3
   175fe:	2d36      	cmp	r5, #54	; 0x36
   17600:	bf88      	it	hi
   17602:	bd30      	pophi	{r4, r5, pc}
   17604:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17608:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1760c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   17610:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   17614:	d002      	beq.n	1761c <__adddf3+0x70>
   17616:	4240      	negs	r0, r0
   17618:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1761c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   17620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17624:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   17628:	d002      	beq.n	17630 <__adddf3+0x84>
   1762a:	4252      	negs	r2, r2
   1762c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   17630:	ea94 0f05 	teq	r4, r5
   17634:	f000 80a7 	beq.w	17786 <__adddf3+0x1da>
   17638:	f1a4 0401 	sub.w	r4, r4, #1
   1763c:	f1d5 0e20 	rsbs	lr, r5, #32
   17640:	db0d      	blt.n	1765e <__adddf3+0xb2>
   17642:	fa02 fc0e 	lsl.w	ip, r2, lr
   17646:	fa22 f205 	lsr.w	r2, r2, r5
   1764a:	1880      	adds	r0, r0, r2
   1764c:	f141 0100 	adc.w	r1, r1, #0
   17650:	fa03 f20e 	lsl.w	r2, r3, lr
   17654:	1880      	adds	r0, r0, r2
   17656:	fa43 f305 	asr.w	r3, r3, r5
   1765a:	4159      	adcs	r1, r3
   1765c:	e00e      	b.n	1767c <__adddf3+0xd0>
   1765e:	f1a5 0520 	sub.w	r5, r5, #32
   17662:	f10e 0e20 	add.w	lr, lr, #32
   17666:	2a01      	cmp	r2, #1
   17668:	fa03 fc0e 	lsl.w	ip, r3, lr
   1766c:	bf28      	it	cs
   1766e:	f04c 0c02 	orrcs.w	ip, ip, #2
   17672:	fa43 f305 	asr.w	r3, r3, r5
   17676:	18c0      	adds	r0, r0, r3
   17678:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1767c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17680:	d507      	bpl.n	17692 <__adddf3+0xe6>
   17682:	f04f 0e00 	mov.w	lr, #0
   17686:	f1dc 0c00 	rsbs	ip, ip, #0
   1768a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1768e:	eb6e 0101 	sbc.w	r1, lr, r1
   17692:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   17696:	d31b      	bcc.n	176d0 <__adddf3+0x124>
   17698:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1769c:	d30c      	bcc.n	176b8 <__adddf3+0x10c>
   1769e:	0849      	lsrs	r1, r1, #1
   176a0:	ea5f 0030 	movs.w	r0, r0, rrx
   176a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   176a8:	f104 0401 	add.w	r4, r4, #1
   176ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
   176b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   176b4:	f080 809a 	bcs.w	177ec <__adddf3+0x240>
   176b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   176bc:	bf08      	it	eq
   176be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   176c2:	f150 0000 	adcs.w	r0, r0, #0
   176c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   176ca:	ea41 0105 	orr.w	r1, r1, r5
   176ce:	bd30      	pop	{r4, r5, pc}
   176d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   176d4:	4140      	adcs	r0, r0
   176d6:	eb41 0101 	adc.w	r1, r1, r1
   176da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   176de:	f1a4 0401 	sub.w	r4, r4, #1
   176e2:	d1e9      	bne.n	176b8 <__adddf3+0x10c>
   176e4:	f091 0f00 	teq	r1, #0
   176e8:	bf04      	itt	eq
   176ea:	4601      	moveq	r1, r0
   176ec:	2000      	moveq	r0, #0
   176ee:	fab1 f381 	clz	r3, r1
   176f2:	bf08      	it	eq
   176f4:	3320      	addeq	r3, #32
   176f6:	f1a3 030b 	sub.w	r3, r3, #11
   176fa:	f1b3 0220 	subs.w	r2, r3, #32
   176fe:	da0c      	bge.n	1771a <__adddf3+0x16e>
   17700:	320c      	adds	r2, #12
   17702:	dd08      	ble.n	17716 <__adddf3+0x16a>
   17704:	f102 0c14 	add.w	ip, r2, #20
   17708:	f1c2 020c 	rsb	r2, r2, #12
   1770c:	fa01 f00c 	lsl.w	r0, r1, ip
   17710:	fa21 f102 	lsr.w	r1, r1, r2
   17714:	e00c      	b.n	17730 <__adddf3+0x184>
   17716:	f102 0214 	add.w	r2, r2, #20
   1771a:	bfd8      	it	le
   1771c:	f1c2 0c20 	rsble	ip, r2, #32
   17720:	fa01 f102 	lsl.w	r1, r1, r2
   17724:	fa20 fc0c 	lsr.w	ip, r0, ip
   17728:	bfdc      	itt	le
   1772a:	ea41 010c 	orrle.w	r1, r1, ip
   1772e:	4090      	lslle	r0, r2
   17730:	1ae4      	subs	r4, r4, r3
   17732:	bfa2      	ittt	ge
   17734:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   17738:	4329      	orrge	r1, r5
   1773a:	bd30      	popge	{r4, r5, pc}
   1773c:	ea6f 0404 	mvn.w	r4, r4
   17740:	3c1f      	subs	r4, #31
   17742:	da1c      	bge.n	1777e <__adddf3+0x1d2>
   17744:	340c      	adds	r4, #12
   17746:	dc0e      	bgt.n	17766 <__adddf3+0x1ba>
   17748:	f104 0414 	add.w	r4, r4, #20
   1774c:	f1c4 0220 	rsb	r2, r4, #32
   17750:	fa20 f004 	lsr.w	r0, r0, r4
   17754:	fa01 f302 	lsl.w	r3, r1, r2
   17758:	ea40 0003 	orr.w	r0, r0, r3
   1775c:	fa21 f304 	lsr.w	r3, r1, r4
   17760:	ea45 0103 	orr.w	r1, r5, r3
   17764:	bd30      	pop	{r4, r5, pc}
   17766:	f1c4 040c 	rsb	r4, r4, #12
   1776a:	f1c4 0220 	rsb	r2, r4, #32
   1776e:	fa20 f002 	lsr.w	r0, r0, r2
   17772:	fa01 f304 	lsl.w	r3, r1, r4
   17776:	ea40 0003 	orr.w	r0, r0, r3
   1777a:	4629      	mov	r1, r5
   1777c:	bd30      	pop	{r4, r5, pc}
   1777e:	fa21 f004 	lsr.w	r0, r1, r4
   17782:	4629      	mov	r1, r5
   17784:	bd30      	pop	{r4, r5, pc}
   17786:	f094 0f00 	teq	r4, #0
   1778a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1778e:	bf06      	itte	eq
   17790:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   17794:	3401      	addeq	r4, #1
   17796:	3d01      	subne	r5, #1
   17798:	e74e      	b.n	17638 <__adddf3+0x8c>
   1779a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1779e:	bf18      	it	ne
   177a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   177a4:	d029      	beq.n	177fa <__adddf3+0x24e>
   177a6:	ea94 0f05 	teq	r4, r5
   177aa:	bf08      	it	eq
   177ac:	ea90 0f02 	teqeq	r0, r2
   177b0:	d005      	beq.n	177be <__adddf3+0x212>
   177b2:	ea54 0c00 	orrs.w	ip, r4, r0
   177b6:	bf04      	itt	eq
   177b8:	4619      	moveq	r1, r3
   177ba:	4610      	moveq	r0, r2
   177bc:	bd30      	pop	{r4, r5, pc}
   177be:	ea91 0f03 	teq	r1, r3
   177c2:	bf1e      	ittt	ne
   177c4:	2100      	movne	r1, #0
   177c6:	2000      	movne	r0, #0
   177c8:	bd30      	popne	{r4, r5, pc}
   177ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   177ce:	d105      	bne.n	177dc <__adddf3+0x230>
   177d0:	0040      	lsls	r0, r0, #1
   177d2:	4149      	adcs	r1, r1
   177d4:	bf28      	it	cs
   177d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   177da:	bd30      	pop	{r4, r5, pc}
   177dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   177e0:	bf3c      	itt	cc
   177e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   177e6:	bd30      	popcc	{r4, r5, pc}
   177e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   177ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   177f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   177f4:	f04f 0000 	mov.w	r0, #0
   177f8:	bd30      	pop	{r4, r5, pc}
   177fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   177fe:	bf1a      	itte	ne
   17800:	4619      	movne	r1, r3
   17802:	4610      	movne	r0, r2
   17804:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   17808:	bf1c      	itt	ne
   1780a:	460b      	movne	r3, r1
   1780c:	4602      	movne	r2, r0
   1780e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17812:	bf06      	itte	eq
   17814:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   17818:	ea91 0f03 	teqeq	r1, r3
   1781c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   17820:	bd30      	pop	{r4, r5, pc}
   17822:	bf00      	nop

00017824 <__aeabi_ui2d>:
   17824:	f090 0f00 	teq	r0, #0
   17828:	bf04      	itt	eq
   1782a:	2100      	moveq	r1, #0
   1782c:	4770      	bxeq	lr
   1782e:	b530      	push	{r4, r5, lr}
   17830:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17834:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17838:	f04f 0500 	mov.w	r5, #0
   1783c:	f04f 0100 	mov.w	r1, #0
   17840:	e750      	b.n	176e4 <__adddf3+0x138>
   17842:	bf00      	nop

00017844 <__aeabi_i2d>:
   17844:	f090 0f00 	teq	r0, #0
   17848:	bf04      	itt	eq
   1784a:	2100      	moveq	r1, #0
   1784c:	4770      	bxeq	lr
   1784e:	b530      	push	{r4, r5, lr}
   17850:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17854:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17858:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1785c:	bf48      	it	mi
   1785e:	4240      	negmi	r0, r0
   17860:	f04f 0100 	mov.w	r1, #0
   17864:	e73e      	b.n	176e4 <__adddf3+0x138>
   17866:	bf00      	nop

00017868 <__aeabi_f2d>:
   17868:	0042      	lsls	r2, r0, #1
   1786a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1786e:	ea4f 0131 	mov.w	r1, r1, rrx
   17872:	ea4f 7002 	mov.w	r0, r2, lsl #28
   17876:	bf1f      	itttt	ne
   17878:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1787c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17880:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   17884:	4770      	bxne	lr
   17886:	f092 0f00 	teq	r2, #0
   1788a:	bf14      	ite	ne
   1788c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17890:	4770      	bxeq	lr
   17892:	b530      	push	{r4, r5, lr}
   17894:	f44f 7460 	mov.w	r4, #896	; 0x380
   17898:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1789c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   178a0:	e720      	b.n	176e4 <__adddf3+0x138>
   178a2:	bf00      	nop

000178a4 <__aeabi_ul2d>:
   178a4:	ea50 0201 	orrs.w	r2, r0, r1
   178a8:	bf08      	it	eq
   178aa:	4770      	bxeq	lr
   178ac:	b530      	push	{r4, r5, lr}
   178ae:	f04f 0500 	mov.w	r5, #0
   178b2:	e00a      	b.n	178ca <__aeabi_l2d+0x16>

000178b4 <__aeabi_l2d>:
   178b4:	ea50 0201 	orrs.w	r2, r0, r1
   178b8:	bf08      	it	eq
   178ba:	4770      	bxeq	lr
   178bc:	b530      	push	{r4, r5, lr}
   178be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   178c2:	d502      	bpl.n	178ca <__aeabi_l2d+0x16>
   178c4:	4240      	negs	r0, r0
   178c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   178ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
   178ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
   178d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   178d6:	f43f aedc 	beq.w	17692 <__adddf3+0xe6>
   178da:	f04f 0203 	mov.w	r2, #3
   178de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   178e2:	bf18      	it	ne
   178e4:	3203      	addne	r2, #3
   178e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   178ea:	bf18      	it	ne
   178ec:	3203      	addne	r2, #3
   178ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   178f2:	f1c2 0320 	rsb	r3, r2, #32
   178f6:	fa00 fc03 	lsl.w	ip, r0, r3
   178fa:	fa20 f002 	lsr.w	r0, r0, r2
   178fe:	fa01 fe03 	lsl.w	lr, r1, r3
   17902:	ea40 000e 	orr.w	r0, r0, lr
   17906:	fa21 f102 	lsr.w	r1, r1, r2
   1790a:	4414      	add	r4, r2
   1790c:	e6c1      	b.n	17692 <__adddf3+0xe6>
   1790e:	bf00      	nop

00017910 <__aeabi_dmul>:
   17910:	b570      	push	{r4, r5, r6, lr}
   17912:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17916:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1791a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1791e:	bf1d      	ittte	ne
   17920:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17924:	ea94 0f0c 	teqne	r4, ip
   17928:	ea95 0f0c 	teqne	r5, ip
   1792c:	f000 f8de 	bleq	17aec <__aeabi_dmul+0x1dc>
   17930:	442c      	add	r4, r5
   17932:	ea81 0603 	eor.w	r6, r1, r3
   17936:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1793a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1793e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   17942:	bf18      	it	ne
   17944:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   17948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1794c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   17950:	d038      	beq.n	179c4 <__aeabi_dmul+0xb4>
   17952:	fba0 ce02 	umull	ip, lr, r0, r2
   17956:	f04f 0500 	mov.w	r5, #0
   1795a:	fbe1 e502 	umlal	lr, r5, r1, r2
   1795e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   17962:	fbe0 e503 	umlal	lr, r5, r0, r3
   17966:	f04f 0600 	mov.w	r6, #0
   1796a:	fbe1 5603 	umlal	r5, r6, r1, r3
   1796e:	f09c 0f00 	teq	ip, #0
   17972:	bf18      	it	ne
   17974:	f04e 0e01 	orrne.w	lr, lr, #1
   17978:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1797c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   17980:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   17984:	d204      	bcs.n	17990 <__aeabi_dmul+0x80>
   17986:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1798a:	416d      	adcs	r5, r5
   1798c:	eb46 0606 	adc.w	r6, r6, r6
   17990:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   17994:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   17998:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1799c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   179a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   179a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   179a8:	bf88      	it	hi
   179aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   179ae:	d81e      	bhi.n	179ee <__aeabi_dmul+0xde>
   179b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   179b4:	bf08      	it	eq
   179b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   179ba:	f150 0000 	adcs.w	r0, r0, #0
   179be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   179c2:	bd70      	pop	{r4, r5, r6, pc}
   179c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   179c8:	ea46 0101 	orr.w	r1, r6, r1
   179cc:	ea40 0002 	orr.w	r0, r0, r2
   179d0:	ea81 0103 	eor.w	r1, r1, r3
   179d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   179d8:	bfc2      	ittt	gt
   179da:	ebd4 050c 	rsbsgt	r5, r4, ip
   179de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   179e2:	bd70      	popgt	{r4, r5, r6, pc}
   179e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   179e8:	f04f 0e00 	mov.w	lr, #0
   179ec:	3c01      	subs	r4, #1
   179ee:	f300 80ab 	bgt.w	17b48 <__aeabi_dmul+0x238>
   179f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   179f6:	bfde      	ittt	le
   179f8:	2000      	movle	r0, #0
   179fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   179fe:	bd70      	pople	{r4, r5, r6, pc}
   17a00:	f1c4 0400 	rsb	r4, r4, #0
   17a04:	3c20      	subs	r4, #32
   17a06:	da35      	bge.n	17a74 <__aeabi_dmul+0x164>
   17a08:	340c      	adds	r4, #12
   17a0a:	dc1b      	bgt.n	17a44 <__aeabi_dmul+0x134>
   17a0c:	f104 0414 	add.w	r4, r4, #20
   17a10:	f1c4 0520 	rsb	r5, r4, #32
   17a14:	fa00 f305 	lsl.w	r3, r0, r5
   17a18:	fa20 f004 	lsr.w	r0, r0, r4
   17a1c:	fa01 f205 	lsl.w	r2, r1, r5
   17a20:	ea40 0002 	orr.w	r0, r0, r2
   17a24:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   17a28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17a2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17a30:	fa21 f604 	lsr.w	r6, r1, r4
   17a34:	eb42 0106 	adc.w	r1, r2, r6
   17a38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17a3c:	bf08      	it	eq
   17a3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17a42:	bd70      	pop	{r4, r5, r6, pc}
   17a44:	f1c4 040c 	rsb	r4, r4, #12
   17a48:	f1c4 0520 	rsb	r5, r4, #32
   17a4c:	fa00 f304 	lsl.w	r3, r0, r4
   17a50:	fa20 f005 	lsr.w	r0, r0, r5
   17a54:	fa01 f204 	lsl.w	r2, r1, r4
   17a58:	ea40 0002 	orr.w	r0, r0, r2
   17a5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17a60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17a64:	f141 0100 	adc.w	r1, r1, #0
   17a68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17a6c:	bf08      	it	eq
   17a6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17a72:	bd70      	pop	{r4, r5, r6, pc}
   17a74:	f1c4 0520 	rsb	r5, r4, #32
   17a78:	fa00 f205 	lsl.w	r2, r0, r5
   17a7c:	ea4e 0e02 	orr.w	lr, lr, r2
   17a80:	fa20 f304 	lsr.w	r3, r0, r4
   17a84:	fa01 f205 	lsl.w	r2, r1, r5
   17a88:	ea43 0302 	orr.w	r3, r3, r2
   17a8c:	fa21 f004 	lsr.w	r0, r1, r4
   17a90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17a94:	fa21 f204 	lsr.w	r2, r1, r4
   17a98:	ea20 0002 	bic.w	r0, r0, r2
   17a9c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   17aa0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17aa4:	bf08      	it	eq
   17aa6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17aaa:	bd70      	pop	{r4, r5, r6, pc}
   17aac:	f094 0f00 	teq	r4, #0
   17ab0:	d10f      	bne.n	17ad2 <__aeabi_dmul+0x1c2>
   17ab2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   17ab6:	0040      	lsls	r0, r0, #1
   17ab8:	eb41 0101 	adc.w	r1, r1, r1
   17abc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17ac0:	bf08      	it	eq
   17ac2:	3c01      	subeq	r4, #1
   17ac4:	d0f7      	beq.n	17ab6 <__aeabi_dmul+0x1a6>
   17ac6:	ea41 0106 	orr.w	r1, r1, r6
   17aca:	f095 0f00 	teq	r5, #0
   17ace:	bf18      	it	ne
   17ad0:	4770      	bxne	lr
   17ad2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   17ad6:	0052      	lsls	r2, r2, #1
   17ad8:	eb43 0303 	adc.w	r3, r3, r3
   17adc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   17ae0:	bf08      	it	eq
   17ae2:	3d01      	subeq	r5, #1
   17ae4:	d0f7      	beq.n	17ad6 <__aeabi_dmul+0x1c6>
   17ae6:	ea43 0306 	orr.w	r3, r3, r6
   17aea:	4770      	bx	lr
   17aec:	ea94 0f0c 	teq	r4, ip
   17af0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17af4:	bf18      	it	ne
   17af6:	ea95 0f0c 	teqne	r5, ip
   17afa:	d00c      	beq.n	17b16 <__aeabi_dmul+0x206>
   17afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17b00:	bf18      	it	ne
   17b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17b06:	d1d1      	bne.n	17aac <__aeabi_dmul+0x19c>
   17b08:	ea81 0103 	eor.w	r1, r1, r3
   17b0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17b10:	f04f 0000 	mov.w	r0, #0
   17b14:	bd70      	pop	{r4, r5, r6, pc}
   17b16:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17b1a:	bf06      	itte	eq
   17b1c:	4610      	moveq	r0, r2
   17b1e:	4619      	moveq	r1, r3
   17b20:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17b24:	d019      	beq.n	17b5a <__aeabi_dmul+0x24a>
   17b26:	ea94 0f0c 	teq	r4, ip
   17b2a:	d102      	bne.n	17b32 <__aeabi_dmul+0x222>
   17b2c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   17b30:	d113      	bne.n	17b5a <__aeabi_dmul+0x24a>
   17b32:	ea95 0f0c 	teq	r5, ip
   17b36:	d105      	bne.n	17b44 <__aeabi_dmul+0x234>
   17b38:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   17b3c:	bf1c      	itt	ne
   17b3e:	4610      	movne	r0, r2
   17b40:	4619      	movne	r1, r3
   17b42:	d10a      	bne.n	17b5a <__aeabi_dmul+0x24a>
   17b44:	ea81 0103 	eor.w	r1, r1, r3
   17b48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17b4c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17b50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17b54:	f04f 0000 	mov.w	r0, #0
   17b58:	bd70      	pop	{r4, r5, r6, pc}
   17b5a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17b5e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   17b62:	bd70      	pop	{r4, r5, r6, pc}

00017b64 <__aeabi_ddiv>:
   17b64:	b570      	push	{r4, r5, r6, lr}
   17b66:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17b6a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17b6e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17b72:	bf1d      	ittte	ne
   17b74:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17b78:	ea94 0f0c 	teqne	r4, ip
   17b7c:	ea95 0f0c 	teqne	r5, ip
   17b80:	f000 f8a7 	bleq	17cd2 <__aeabi_ddiv+0x16e>
   17b84:	eba4 0405 	sub.w	r4, r4, r5
   17b88:	ea81 0e03 	eor.w	lr, r1, r3
   17b8c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17b90:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17b94:	f000 8088 	beq.w	17ca8 <__aeabi_ddiv+0x144>
   17b98:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17b9c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   17ba0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   17ba4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   17ba8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   17bac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   17bb0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   17bb4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   17bb8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   17bbc:	429d      	cmp	r5, r3
   17bbe:	bf08      	it	eq
   17bc0:	4296      	cmpeq	r6, r2
   17bc2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   17bc6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   17bca:	d202      	bcs.n	17bd2 <__aeabi_ddiv+0x6e>
   17bcc:	085b      	lsrs	r3, r3, #1
   17bce:	ea4f 0232 	mov.w	r2, r2, rrx
   17bd2:	1ab6      	subs	r6, r6, r2
   17bd4:	eb65 0503 	sbc.w	r5, r5, r3
   17bd8:	085b      	lsrs	r3, r3, #1
   17bda:	ea4f 0232 	mov.w	r2, r2, rrx
   17bde:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   17be2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   17be6:	ebb6 0e02 	subs.w	lr, r6, r2
   17bea:	eb75 0e03 	sbcs.w	lr, r5, r3
   17bee:	bf22      	ittt	cs
   17bf0:	1ab6      	subcs	r6, r6, r2
   17bf2:	4675      	movcs	r5, lr
   17bf4:	ea40 000c 	orrcs.w	r0, r0, ip
   17bf8:	085b      	lsrs	r3, r3, #1
   17bfa:	ea4f 0232 	mov.w	r2, r2, rrx
   17bfe:	ebb6 0e02 	subs.w	lr, r6, r2
   17c02:	eb75 0e03 	sbcs.w	lr, r5, r3
   17c06:	bf22      	ittt	cs
   17c08:	1ab6      	subcs	r6, r6, r2
   17c0a:	4675      	movcs	r5, lr
   17c0c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   17c10:	085b      	lsrs	r3, r3, #1
   17c12:	ea4f 0232 	mov.w	r2, r2, rrx
   17c16:	ebb6 0e02 	subs.w	lr, r6, r2
   17c1a:	eb75 0e03 	sbcs.w	lr, r5, r3
   17c1e:	bf22      	ittt	cs
   17c20:	1ab6      	subcs	r6, r6, r2
   17c22:	4675      	movcs	r5, lr
   17c24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   17c28:	085b      	lsrs	r3, r3, #1
   17c2a:	ea4f 0232 	mov.w	r2, r2, rrx
   17c2e:	ebb6 0e02 	subs.w	lr, r6, r2
   17c32:	eb75 0e03 	sbcs.w	lr, r5, r3
   17c36:	bf22      	ittt	cs
   17c38:	1ab6      	subcs	r6, r6, r2
   17c3a:	4675      	movcs	r5, lr
   17c3c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   17c40:	ea55 0e06 	orrs.w	lr, r5, r6
   17c44:	d018      	beq.n	17c78 <__aeabi_ddiv+0x114>
   17c46:	ea4f 1505 	mov.w	r5, r5, lsl #4
   17c4a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   17c4e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   17c52:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   17c56:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   17c5a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   17c5e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   17c62:	d1c0      	bne.n	17be6 <__aeabi_ddiv+0x82>
   17c64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17c68:	d10b      	bne.n	17c82 <__aeabi_ddiv+0x11e>
   17c6a:	ea41 0100 	orr.w	r1, r1, r0
   17c6e:	f04f 0000 	mov.w	r0, #0
   17c72:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   17c76:	e7b6      	b.n	17be6 <__aeabi_ddiv+0x82>
   17c78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17c7c:	bf04      	itt	eq
   17c7e:	4301      	orreq	r1, r0
   17c80:	2000      	moveq	r0, #0
   17c82:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17c86:	bf88      	it	hi
   17c88:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17c8c:	f63f aeaf 	bhi.w	179ee <__aeabi_dmul+0xde>
   17c90:	ebb5 0c03 	subs.w	ip, r5, r3
   17c94:	bf04      	itt	eq
   17c96:	ebb6 0c02 	subseq.w	ip, r6, r2
   17c9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17c9e:	f150 0000 	adcs.w	r0, r0, #0
   17ca2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17ca6:	bd70      	pop	{r4, r5, r6, pc}
   17ca8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   17cac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   17cb0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   17cb4:	bfc2      	ittt	gt
   17cb6:	ebd4 050c 	rsbsgt	r5, r4, ip
   17cba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17cbe:	bd70      	popgt	{r4, r5, r6, pc}
   17cc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17cc4:	f04f 0e00 	mov.w	lr, #0
   17cc8:	3c01      	subs	r4, #1
   17cca:	e690      	b.n	179ee <__aeabi_dmul+0xde>
   17ccc:	ea45 0e06 	orr.w	lr, r5, r6
   17cd0:	e68d      	b.n	179ee <__aeabi_dmul+0xde>
   17cd2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17cd6:	ea94 0f0c 	teq	r4, ip
   17cda:	bf08      	it	eq
   17cdc:	ea95 0f0c 	teqeq	r5, ip
   17ce0:	f43f af3b 	beq.w	17b5a <__aeabi_dmul+0x24a>
   17ce4:	ea94 0f0c 	teq	r4, ip
   17ce8:	d10a      	bne.n	17d00 <__aeabi_ddiv+0x19c>
   17cea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17cee:	f47f af34 	bne.w	17b5a <__aeabi_dmul+0x24a>
   17cf2:	ea95 0f0c 	teq	r5, ip
   17cf6:	f47f af25 	bne.w	17b44 <__aeabi_dmul+0x234>
   17cfa:	4610      	mov	r0, r2
   17cfc:	4619      	mov	r1, r3
   17cfe:	e72c      	b.n	17b5a <__aeabi_dmul+0x24a>
   17d00:	ea95 0f0c 	teq	r5, ip
   17d04:	d106      	bne.n	17d14 <__aeabi_ddiv+0x1b0>
   17d06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17d0a:	f43f aefd 	beq.w	17b08 <__aeabi_dmul+0x1f8>
   17d0e:	4610      	mov	r0, r2
   17d10:	4619      	mov	r1, r3
   17d12:	e722      	b.n	17b5a <__aeabi_dmul+0x24a>
   17d14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17d18:	bf18      	it	ne
   17d1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17d1e:	f47f aec5 	bne.w	17aac <__aeabi_dmul+0x19c>
   17d22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   17d26:	f47f af0d 	bne.w	17b44 <__aeabi_dmul+0x234>
   17d2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   17d2e:	f47f aeeb 	bne.w	17b08 <__aeabi_dmul+0x1f8>
   17d32:	e712      	b.n	17b5a <__aeabi_dmul+0x24a>

00017d34 <__gedf2>:
   17d34:	f04f 3cff 	mov.w	ip, #4294967295
   17d38:	e006      	b.n	17d48 <__cmpdf2+0x4>
   17d3a:	bf00      	nop

00017d3c <__ledf2>:
   17d3c:	f04f 0c01 	mov.w	ip, #1
   17d40:	e002      	b.n	17d48 <__cmpdf2+0x4>
   17d42:	bf00      	nop

00017d44 <__cmpdf2>:
   17d44:	f04f 0c01 	mov.w	ip, #1
   17d48:	f84d cd04 	str.w	ip, [sp, #-4]!
   17d4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   17d50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17d54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   17d58:	bf18      	it	ne
   17d5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   17d5e:	d01b      	beq.n	17d98 <__cmpdf2+0x54>
   17d60:	b001      	add	sp, #4
   17d62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   17d66:	bf0c      	ite	eq
   17d68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   17d6c:	ea91 0f03 	teqne	r1, r3
   17d70:	bf02      	ittt	eq
   17d72:	ea90 0f02 	teqeq	r0, r2
   17d76:	2000      	moveq	r0, #0
   17d78:	4770      	bxeq	lr
   17d7a:	f110 0f00 	cmn.w	r0, #0
   17d7e:	ea91 0f03 	teq	r1, r3
   17d82:	bf58      	it	pl
   17d84:	4299      	cmppl	r1, r3
   17d86:	bf08      	it	eq
   17d88:	4290      	cmpeq	r0, r2
   17d8a:	bf2c      	ite	cs
   17d8c:	17d8      	asrcs	r0, r3, #31
   17d8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   17d92:	f040 0001 	orr.w	r0, r0, #1
   17d96:	4770      	bx	lr
   17d98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   17d9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17da0:	d102      	bne.n	17da8 <__cmpdf2+0x64>
   17da2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   17da6:	d107      	bne.n	17db8 <__cmpdf2+0x74>
   17da8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   17dac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17db0:	d1d6      	bne.n	17d60 <__cmpdf2+0x1c>
   17db2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   17db6:	d0d3      	beq.n	17d60 <__cmpdf2+0x1c>
   17db8:	f85d 0b04 	ldr.w	r0, [sp], #4
   17dbc:	4770      	bx	lr
   17dbe:	bf00      	nop

00017dc0 <__aeabi_cdrcmple>:
   17dc0:	4684      	mov	ip, r0
   17dc2:	4610      	mov	r0, r2
   17dc4:	4662      	mov	r2, ip
   17dc6:	468c      	mov	ip, r1
   17dc8:	4619      	mov	r1, r3
   17dca:	4663      	mov	r3, ip
   17dcc:	e000      	b.n	17dd0 <__aeabi_cdcmpeq>
   17dce:	bf00      	nop

00017dd0 <__aeabi_cdcmpeq>:
   17dd0:	b501      	push	{r0, lr}
   17dd2:	f7ff ffb7 	bl	17d44 <__cmpdf2>
   17dd6:	2800      	cmp	r0, #0
   17dd8:	bf48      	it	mi
   17dda:	f110 0f00 	cmnmi.w	r0, #0
   17dde:	bd01      	pop	{r0, pc}

00017de0 <__aeabi_dcmpeq>:
   17de0:	f84d ed08 	str.w	lr, [sp, #-8]!
   17de4:	f7ff fff4 	bl	17dd0 <__aeabi_cdcmpeq>
   17de8:	bf0c      	ite	eq
   17dea:	2001      	moveq	r0, #1
   17dec:	2000      	movne	r0, #0
   17dee:	f85d fb08 	ldr.w	pc, [sp], #8
   17df2:	bf00      	nop

00017df4 <__aeabi_dcmplt>:
   17df4:	f84d ed08 	str.w	lr, [sp, #-8]!
   17df8:	f7ff ffea 	bl	17dd0 <__aeabi_cdcmpeq>
   17dfc:	bf34      	ite	cc
   17dfe:	2001      	movcc	r0, #1
   17e00:	2000      	movcs	r0, #0
   17e02:	f85d fb08 	ldr.w	pc, [sp], #8
   17e06:	bf00      	nop

00017e08 <__aeabi_dcmple>:
   17e08:	f84d ed08 	str.w	lr, [sp, #-8]!
   17e0c:	f7ff ffe0 	bl	17dd0 <__aeabi_cdcmpeq>
   17e10:	bf94      	ite	ls
   17e12:	2001      	movls	r0, #1
   17e14:	2000      	movhi	r0, #0
   17e16:	f85d fb08 	ldr.w	pc, [sp], #8
   17e1a:	bf00      	nop

00017e1c <__aeabi_dcmpge>:
   17e1c:	f84d ed08 	str.w	lr, [sp, #-8]!
   17e20:	f7ff ffce 	bl	17dc0 <__aeabi_cdrcmple>
   17e24:	bf94      	ite	ls
   17e26:	2001      	movls	r0, #1
   17e28:	2000      	movhi	r0, #0
   17e2a:	f85d fb08 	ldr.w	pc, [sp], #8
   17e2e:	bf00      	nop

00017e30 <__aeabi_dcmpgt>:
   17e30:	f84d ed08 	str.w	lr, [sp, #-8]!
   17e34:	f7ff ffc4 	bl	17dc0 <__aeabi_cdrcmple>
   17e38:	bf34      	ite	cc
   17e3a:	2001      	movcc	r0, #1
   17e3c:	2000      	movcs	r0, #0
   17e3e:	f85d fb08 	ldr.w	pc, [sp], #8
   17e42:	bf00      	nop

00017e44 <__aeabi_d2iz>:
   17e44:	ea4f 0241 	mov.w	r2, r1, lsl #1
   17e48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   17e4c:	d215      	bcs.n	17e7a <__aeabi_d2iz+0x36>
   17e4e:	d511      	bpl.n	17e74 <__aeabi_d2iz+0x30>
   17e50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   17e54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   17e58:	d912      	bls.n	17e80 <__aeabi_d2iz+0x3c>
   17e5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17e5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   17e62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   17e66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17e6a:	fa23 f002 	lsr.w	r0, r3, r2
   17e6e:	bf18      	it	ne
   17e70:	4240      	negne	r0, r0
   17e72:	4770      	bx	lr
   17e74:	f04f 0000 	mov.w	r0, #0
   17e78:	4770      	bx	lr
   17e7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   17e7e:	d105      	bne.n	17e8c <__aeabi_d2iz+0x48>
   17e80:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   17e84:	bf08      	it	eq
   17e86:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   17e8a:	4770      	bx	lr
   17e8c:	f04f 0000 	mov.w	r0, #0
   17e90:	4770      	bx	lr
   17e92:	bf00      	nop

00017e94 <__aeabi_d2uiz>:
   17e94:	004a      	lsls	r2, r1, #1
   17e96:	d211      	bcs.n	17ebc <__aeabi_d2uiz+0x28>
   17e98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   17e9c:	d211      	bcs.n	17ec2 <__aeabi_d2uiz+0x2e>
   17e9e:	d50d      	bpl.n	17ebc <__aeabi_d2uiz+0x28>
   17ea0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   17ea4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   17ea8:	d40e      	bmi.n	17ec8 <__aeabi_d2uiz+0x34>
   17eaa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17eae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   17eb2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   17eb6:	fa23 f002 	lsr.w	r0, r3, r2
   17eba:	4770      	bx	lr
   17ebc:	f04f 0000 	mov.w	r0, #0
   17ec0:	4770      	bx	lr
   17ec2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   17ec6:	d102      	bne.n	17ece <__aeabi_d2uiz+0x3a>
   17ec8:	f04f 30ff 	mov.w	r0, #4294967295
   17ecc:	4770      	bx	lr
   17ece:	f04f 0000 	mov.w	r0, #0
   17ed2:	4770      	bx	lr

00017ed4 <__aeabi_d2f>:
   17ed4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   17ed8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   17edc:	bf24      	itt	cs
   17ede:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   17ee2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   17ee6:	d90d      	bls.n	17f04 <__aeabi_d2f+0x30>
   17ee8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   17eec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   17ef0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   17ef4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   17ef8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   17efc:	bf08      	it	eq
   17efe:	f020 0001 	biceq.w	r0, r0, #1
   17f02:	4770      	bx	lr
   17f04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   17f08:	d121      	bne.n	17f4e <__aeabi_d2f+0x7a>
   17f0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   17f0e:	bfbc      	itt	lt
   17f10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   17f14:	4770      	bxlt	lr
   17f16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17f1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   17f1e:	f1c2 0218 	rsb	r2, r2, #24
   17f22:	f1c2 0c20 	rsb	ip, r2, #32
   17f26:	fa10 f30c 	lsls.w	r3, r0, ip
   17f2a:	fa20 f002 	lsr.w	r0, r0, r2
   17f2e:	bf18      	it	ne
   17f30:	f040 0001 	orrne.w	r0, r0, #1
   17f34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17f38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   17f3c:	fa03 fc0c 	lsl.w	ip, r3, ip
   17f40:	ea40 000c 	orr.w	r0, r0, ip
   17f44:	fa23 f302 	lsr.w	r3, r3, r2
   17f48:	ea4f 0343 	mov.w	r3, r3, lsl #1
   17f4c:	e7cc      	b.n	17ee8 <__aeabi_d2f+0x14>
   17f4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   17f52:	d107      	bne.n	17f64 <__aeabi_d2f+0x90>
   17f54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   17f58:	bf1e      	ittt	ne
   17f5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   17f5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   17f62:	4770      	bxne	lr
   17f64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   17f68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   17f6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   17f70:	4770      	bx	lr
   17f72:	bf00      	nop

00017f74 <__aeabi_frsub>:
   17f74:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   17f78:	e002      	b.n	17f80 <__addsf3>
   17f7a:	bf00      	nop

00017f7c <__aeabi_fsub>:
   17f7c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00017f80 <__addsf3>:
   17f80:	0042      	lsls	r2, r0, #1
   17f82:	bf1f      	itttt	ne
   17f84:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   17f88:	ea92 0f03 	teqne	r2, r3
   17f8c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   17f90:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   17f94:	d06a      	beq.n	1806c <__addsf3+0xec>
   17f96:	ea4f 6212 	mov.w	r2, r2, lsr #24
   17f9a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   17f9e:	bfc1      	itttt	gt
   17fa0:	18d2      	addgt	r2, r2, r3
   17fa2:	4041      	eorgt	r1, r0
   17fa4:	4048      	eorgt	r0, r1
   17fa6:	4041      	eorgt	r1, r0
   17fa8:	bfb8      	it	lt
   17faa:	425b      	neglt	r3, r3
   17fac:	2b19      	cmp	r3, #25
   17fae:	bf88      	it	hi
   17fb0:	4770      	bxhi	lr
   17fb2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   17fb6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   17fba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   17fbe:	bf18      	it	ne
   17fc0:	4240      	negne	r0, r0
   17fc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17fc6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   17fca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   17fce:	bf18      	it	ne
   17fd0:	4249      	negne	r1, r1
   17fd2:	ea92 0f03 	teq	r2, r3
   17fd6:	d03f      	beq.n	18058 <__addsf3+0xd8>
   17fd8:	f1a2 0201 	sub.w	r2, r2, #1
   17fdc:	fa41 fc03 	asr.w	ip, r1, r3
   17fe0:	eb10 000c 	adds.w	r0, r0, ip
   17fe4:	f1c3 0320 	rsb	r3, r3, #32
   17fe8:	fa01 f103 	lsl.w	r1, r1, r3
   17fec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   17ff0:	d502      	bpl.n	17ff8 <__addsf3+0x78>
   17ff2:	4249      	negs	r1, r1
   17ff4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   17ff8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   17ffc:	d313      	bcc.n	18026 <__addsf3+0xa6>
   17ffe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   18002:	d306      	bcc.n	18012 <__addsf3+0x92>
   18004:	0840      	lsrs	r0, r0, #1
   18006:	ea4f 0131 	mov.w	r1, r1, rrx
   1800a:	f102 0201 	add.w	r2, r2, #1
   1800e:	2afe      	cmp	r2, #254	; 0xfe
   18010:	d251      	bcs.n	180b6 <__addsf3+0x136>
   18012:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   18016:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1801a:	bf08      	it	eq
   1801c:	f020 0001 	biceq.w	r0, r0, #1
   18020:	ea40 0003 	orr.w	r0, r0, r3
   18024:	4770      	bx	lr
   18026:	0049      	lsls	r1, r1, #1
   18028:	eb40 0000 	adc.w	r0, r0, r0
   1802c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   18030:	f1a2 0201 	sub.w	r2, r2, #1
   18034:	d1ed      	bne.n	18012 <__addsf3+0x92>
   18036:	fab0 fc80 	clz	ip, r0
   1803a:	f1ac 0c08 	sub.w	ip, ip, #8
   1803e:	ebb2 020c 	subs.w	r2, r2, ip
   18042:	fa00 f00c 	lsl.w	r0, r0, ip
   18046:	bfaa      	itet	ge
   18048:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1804c:	4252      	neglt	r2, r2
   1804e:	4318      	orrge	r0, r3
   18050:	bfbc      	itt	lt
   18052:	40d0      	lsrlt	r0, r2
   18054:	4318      	orrlt	r0, r3
   18056:	4770      	bx	lr
   18058:	f092 0f00 	teq	r2, #0
   1805c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   18060:	bf06      	itte	eq
   18062:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   18066:	3201      	addeq	r2, #1
   18068:	3b01      	subne	r3, #1
   1806a:	e7b5      	b.n	17fd8 <__addsf3+0x58>
   1806c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18070:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18074:	bf18      	it	ne
   18076:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1807a:	d021      	beq.n	180c0 <__addsf3+0x140>
   1807c:	ea92 0f03 	teq	r2, r3
   18080:	d004      	beq.n	1808c <__addsf3+0x10c>
   18082:	f092 0f00 	teq	r2, #0
   18086:	bf08      	it	eq
   18088:	4608      	moveq	r0, r1
   1808a:	4770      	bx	lr
   1808c:	ea90 0f01 	teq	r0, r1
   18090:	bf1c      	itt	ne
   18092:	2000      	movne	r0, #0
   18094:	4770      	bxne	lr
   18096:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1809a:	d104      	bne.n	180a6 <__addsf3+0x126>
   1809c:	0040      	lsls	r0, r0, #1
   1809e:	bf28      	it	cs
   180a0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   180a4:	4770      	bx	lr
   180a6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   180aa:	bf3c      	itt	cc
   180ac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   180b0:	4770      	bxcc	lr
   180b2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   180b6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   180ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   180be:	4770      	bx	lr
   180c0:	ea7f 6222 	mvns.w	r2, r2, asr #24
   180c4:	bf16      	itet	ne
   180c6:	4608      	movne	r0, r1
   180c8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   180cc:	4601      	movne	r1, r0
   180ce:	0242      	lsls	r2, r0, #9
   180d0:	bf06      	itte	eq
   180d2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   180d6:	ea90 0f01 	teqeq	r0, r1
   180da:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   180de:	4770      	bx	lr

000180e0 <__aeabi_ui2f>:
   180e0:	f04f 0300 	mov.w	r3, #0
   180e4:	e004      	b.n	180f0 <__aeabi_i2f+0x8>
   180e6:	bf00      	nop

000180e8 <__aeabi_i2f>:
   180e8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   180ec:	bf48      	it	mi
   180ee:	4240      	negmi	r0, r0
   180f0:	ea5f 0c00 	movs.w	ip, r0
   180f4:	bf08      	it	eq
   180f6:	4770      	bxeq	lr
   180f8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   180fc:	4601      	mov	r1, r0
   180fe:	f04f 0000 	mov.w	r0, #0
   18102:	e01c      	b.n	1813e <__aeabi_l2f+0x2a>

00018104 <__aeabi_ul2f>:
   18104:	ea50 0201 	orrs.w	r2, r0, r1
   18108:	bf08      	it	eq
   1810a:	4770      	bxeq	lr
   1810c:	f04f 0300 	mov.w	r3, #0
   18110:	e00a      	b.n	18128 <__aeabi_l2f+0x14>
   18112:	bf00      	nop

00018114 <__aeabi_l2f>:
   18114:	ea50 0201 	orrs.w	r2, r0, r1
   18118:	bf08      	it	eq
   1811a:	4770      	bxeq	lr
   1811c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   18120:	d502      	bpl.n	18128 <__aeabi_l2f+0x14>
   18122:	4240      	negs	r0, r0
   18124:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18128:	ea5f 0c01 	movs.w	ip, r1
   1812c:	bf02      	ittt	eq
   1812e:	4684      	moveq	ip, r0
   18130:	4601      	moveq	r1, r0
   18132:	2000      	moveq	r0, #0
   18134:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   18138:	bf08      	it	eq
   1813a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1813e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   18142:	fabc f28c 	clz	r2, ip
   18146:	3a08      	subs	r2, #8
   18148:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1814c:	db10      	blt.n	18170 <__aeabi_l2f+0x5c>
   1814e:	fa01 fc02 	lsl.w	ip, r1, r2
   18152:	4463      	add	r3, ip
   18154:	fa00 fc02 	lsl.w	ip, r0, r2
   18158:	f1c2 0220 	rsb	r2, r2, #32
   1815c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   18160:	fa20 f202 	lsr.w	r2, r0, r2
   18164:	eb43 0002 	adc.w	r0, r3, r2
   18168:	bf08      	it	eq
   1816a:	f020 0001 	biceq.w	r0, r0, #1
   1816e:	4770      	bx	lr
   18170:	f102 0220 	add.w	r2, r2, #32
   18174:	fa01 fc02 	lsl.w	ip, r1, r2
   18178:	f1c2 0220 	rsb	r2, r2, #32
   1817c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   18180:	fa21 f202 	lsr.w	r2, r1, r2
   18184:	eb43 0002 	adc.w	r0, r3, r2
   18188:	bf08      	it	eq
   1818a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1818e:	4770      	bx	lr

00018190 <__aeabi_fmul>:
   18190:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18194:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18198:	bf1e      	ittt	ne
   1819a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1819e:	ea92 0f0c 	teqne	r2, ip
   181a2:	ea93 0f0c 	teqne	r3, ip
   181a6:	d06f      	beq.n	18288 <__aeabi_fmul+0xf8>
   181a8:	441a      	add	r2, r3
   181aa:	ea80 0c01 	eor.w	ip, r0, r1
   181ae:	0240      	lsls	r0, r0, #9
   181b0:	bf18      	it	ne
   181b2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   181b6:	d01e      	beq.n	181f6 <__aeabi_fmul+0x66>
   181b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   181bc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   181c0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   181c4:	fba0 3101 	umull	r3, r1, r0, r1
   181c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   181cc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   181d0:	bf3e      	ittt	cc
   181d2:	0049      	lslcc	r1, r1, #1
   181d4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   181d8:	005b      	lslcc	r3, r3, #1
   181da:	ea40 0001 	orr.w	r0, r0, r1
   181de:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   181e2:	2afd      	cmp	r2, #253	; 0xfd
   181e4:	d81d      	bhi.n	18222 <__aeabi_fmul+0x92>
   181e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   181ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   181ee:	bf08      	it	eq
   181f0:	f020 0001 	biceq.w	r0, r0, #1
   181f4:	4770      	bx	lr
   181f6:	f090 0f00 	teq	r0, #0
   181fa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   181fe:	bf08      	it	eq
   18200:	0249      	lsleq	r1, r1, #9
   18202:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   18206:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   1820a:	3a7f      	subs	r2, #127	; 0x7f
   1820c:	bfc2      	ittt	gt
   1820e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   18212:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   18216:	4770      	bxgt	lr
   18218:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1821c:	f04f 0300 	mov.w	r3, #0
   18220:	3a01      	subs	r2, #1
   18222:	dc5d      	bgt.n	182e0 <__aeabi_fmul+0x150>
   18224:	f112 0f19 	cmn.w	r2, #25
   18228:	bfdc      	itt	le
   1822a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   1822e:	4770      	bxle	lr
   18230:	f1c2 0200 	rsb	r2, r2, #0
   18234:	0041      	lsls	r1, r0, #1
   18236:	fa21 f102 	lsr.w	r1, r1, r2
   1823a:	f1c2 0220 	rsb	r2, r2, #32
   1823e:	fa00 fc02 	lsl.w	ip, r0, r2
   18242:	ea5f 0031 	movs.w	r0, r1, rrx
   18246:	f140 0000 	adc.w	r0, r0, #0
   1824a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   1824e:	bf08      	it	eq
   18250:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   18254:	4770      	bx	lr
   18256:	f092 0f00 	teq	r2, #0
   1825a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1825e:	bf02      	ittt	eq
   18260:	0040      	lsleq	r0, r0, #1
   18262:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   18266:	3a01      	subeq	r2, #1
   18268:	d0f9      	beq.n	1825e <__aeabi_fmul+0xce>
   1826a:	ea40 000c 	orr.w	r0, r0, ip
   1826e:	f093 0f00 	teq	r3, #0
   18272:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18276:	bf02      	ittt	eq
   18278:	0049      	lsleq	r1, r1, #1
   1827a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1827e:	3b01      	subeq	r3, #1
   18280:	d0f9      	beq.n	18276 <__aeabi_fmul+0xe6>
   18282:	ea41 010c 	orr.w	r1, r1, ip
   18286:	e78f      	b.n	181a8 <__aeabi_fmul+0x18>
   18288:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1828c:	ea92 0f0c 	teq	r2, ip
   18290:	bf18      	it	ne
   18292:	ea93 0f0c 	teqne	r3, ip
   18296:	d00a      	beq.n	182ae <__aeabi_fmul+0x11e>
   18298:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1829c:	bf18      	it	ne
   1829e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   182a2:	d1d8      	bne.n	18256 <__aeabi_fmul+0xc6>
   182a4:	ea80 0001 	eor.w	r0, r0, r1
   182a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   182ac:	4770      	bx	lr
   182ae:	f090 0f00 	teq	r0, #0
   182b2:	bf17      	itett	ne
   182b4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   182b8:	4608      	moveq	r0, r1
   182ba:	f091 0f00 	teqne	r1, #0
   182be:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   182c2:	d014      	beq.n	182ee <__aeabi_fmul+0x15e>
   182c4:	ea92 0f0c 	teq	r2, ip
   182c8:	d101      	bne.n	182ce <__aeabi_fmul+0x13e>
   182ca:	0242      	lsls	r2, r0, #9
   182cc:	d10f      	bne.n	182ee <__aeabi_fmul+0x15e>
   182ce:	ea93 0f0c 	teq	r3, ip
   182d2:	d103      	bne.n	182dc <__aeabi_fmul+0x14c>
   182d4:	024b      	lsls	r3, r1, #9
   182d6:	bf18      	it	ne
   182d8:	4608      	movne	r0, r1
   182da:	d108      	bne.n	182ee <__aeabi_fmul+0x15e>
   182dc:	ea80 0001 	eor.w	r0, r0, r1
   182e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   182e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   182e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   182ec:	4770      	bx	lr
   182ee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   182f2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   182f6:	4770      	bx	lr

000182f8 <__aeabi_fdiv>:
   182f8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   182fc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18300:	bf1e      	ittt	ne
   18302:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   18306:	ea92 0f0c 	teqne	r2, ip
   1830a:	ea93 0f0c 	teqne	r3, ip
   1830e:	d069      	beq.n	183e4 <__aeabi_fdiv+0xec>
   18310:	eba2 0203 	sub.w	r2, r2, r3
   18314:	ea80 0c01 	eor.w	ip, r0, r1
   18318:	0249      	lsls	r1, r1, #9
   1831a:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1831e:	d037      	beq.n	18390 <__aeabi_fdiv+0x98>
   18320:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18324:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   18328:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   1832c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18330:	428b      	cmp	r3, r1
   18332:	bf38      	it	cc
   18334:	005b      	lslcc	r3, r3, #1
   18336:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   1833a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   1833e:	428b      	cmp	r3, r1
   18340:	bf24      	itt	cs
   18342:	1a5b      	subcs	r3, r3, r1
   18344:	ea40 000c 	orrcs.w	r0, r0, ip
   18348:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   1834c:	bf24      	itt	cs
   1834e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   18352:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   18356:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   1835a:	bf24      	itt	cs
   1835c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   18360:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   18364:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   18368:	bf24      	itt	cs
   1836a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   1836e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   18372:	011b      	lsls	r3, r3, #4
   18374:	bf18      	it	ne
   18376:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   1837a:	d1e0      	bne.n	1833e <__aeabi_fdiv+0x46>
   1837c:	2afd      	cmp	r2, #253	; 0xfd
   1837e:	f63f af50 	bhi.w	18222 <__aeabi_fmul+0x92>
   18382:	428b      	cmp	r3, r1
   18384:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18388:	bf08      	it	eq
   1838a:	f020 0001 	biceq.w	r0, r0, #1
   1838e:	4770      	bx	lr
   18390:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   18394:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   18398:	327f      	adds	r2, #127	; 0x7f
   1839a:	bfc2      	ittt	gt
   1839c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   183a0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   183a4:	4770      	bxgt	lr
   183a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   183aa:	f04f 0300 	mov.w	r3, #0
   183ae:	3a01      	subs	r2, #1
   183b0:	e737      	b.n	18222 <__aeabi_fmul+0x92>
   183b2:	f092 0f00 	teq	r2, #0
   183b6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   183ba:	bf02      	ittt	eq
   183bc:	0040      	lsleq	r0, r0, #1
   183be:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   183c2:	3a01      	subeq	r2, #1
   183c4:	d0f9      	beq.n	183ba <__aeabi_fdiv+0xc2>
   183c6:	ea40 000c 	orr.w	r0, r0, ip
   183ca:	f093 0f00 	teq	r3, #0
   183ce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   183d2:	bf02      	ittt	eq
   183d4:	0049      	lsleq	r1, r1, #1
   183d6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   183da:	3b01      	subeq	r3, #1
   183dc:	d0f9      	beq.n	183d2 <__aeabi_fdiv+0xda>
   183de:	ea41 010c 	orr.w	r1, r1, ip
   183e2:	e795      	b.n	18310 <__aeabi_fdiv+0x18>
   183e4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   183e8:	ea92 0f0c 	teq	r2, ip
   183ec:	d108      	bne.n	18400 <__aeabi_fdiv+0x108>
   183ee:	0242      	lsls	r2, r0, #9
   183f0:	f47f af7d 	bne.w	182ee <__aeabi_fmul+0x15e>
   183f4:	ea93 0f0c 	teq	r3, ip
   183f8:	f47f af70 	bne.w	182dc <__aeabi_fmul+0x14c>
   183fc:	4608      	mov	r0, r1
   183fe:	e776      	b.n	182ee <__aeabi_fmul+0x15e>
   18400:	ea93 0f0c 	teq	r3, ip
   18404:	d104      	bne.n	18410 <__aeabi_fdiv+0x118>
   18406:	024b      	lsls	r3, r1, #9
   18408:	f43f af4c 	beq.w	182a4 <__aeabi_fmul+0x114>
   1840c:	4608      	mov	r0, r1
   1840e:	e76e      	b.n	182ee <__aeabi_fmul+0x15e>
   18410:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   18414:	bf18      	it	ne
   18416:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1841a:	d1ca      	bne.n	183b2 <__aeabi_fdiv+0xba>
   1841c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   18420:	f47f af5c 	bne.w	182dc <__aeabi_fmul+0x14c>
   18424:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   18428:	f47f af3c 	bne.w	182a4 <__aeabi_fmul+0x114>
   1842c:	e75f      	b.n	182ee <__aeabi_fmul+0x15e>
   1842e:	bf00      	nop

00018430 <__gesf2>:
   18430:	f04f 3cff 	mov.w	ip, #4294967295
   18434:	e006      	b.n	18444 <__cmpsf2+0x4>
   18436:	bf00      	nop

00018438 <__lesf2>:
   18438:	f04f 0c01 	mov.w	ip, #1
   1843c:	e002      	b.n	18444 <__cmpsf2+0x4>
   1843e:	bf00      	nop

00018440 <__cmpsf2>:
   18440:	f04f 0c01 	mov.w	ip, #1
   18444:	f84d cd04 	str.w	ip, [sp, #-4]!
   18448:	ea4f 0240 	mov.w	r2, r0, lsl #1
   1844c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18450:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18454:	bf18      	it	ne
   18456:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1845a:	d011      	beq.n	18480 <__cmpsf2+0x40>
   1845c:	b001      	add	sp, #4
   1845e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   18462:	bf18      	it	ne
   18464:	ea90 0f01 	teqne	r0, r1
   18468:	bf58      	it	pl
   1846a:	ebb2 0003 	subspl.w	r0, r2, r3
   1846e:	bf88      	it	hi
   18470:	17c8      	asrhi	r0, r1, #31
   18472:	bf38      	it	cc
   18474:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   18478:	bf18      	it	ne
   1847a:	f040 0001 	orrne.w	r0, r0, #1
   1847e:	4770      	bx	lr
   18480:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18484:	d102      	bne.n	1848c <__cmpsf2+0x4c>
   18486:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   1848a:	d105      	bne.n	18498 <__cmpsf2+0x58>
   1848c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   18490:	d1e4      	bne.n	1845c <__cmpsf2+0x1c>
   18492:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   18496:	d0e1      	beq.n	1845c <__cmpsf2+0x1c>
   18498:	f85d 0b04 	ldr.w	r0, [sp], #4
   1849c:	4770      	bx	lr
   1849e:	bf00      	nop

000184a0 <__aeabi_cfrcmple>:
   184a0:	4684      	mov	ip, r0
   184a2:	4608      	mov	r0, r1
   184a4:	4661      	mov	r1, ip
   184a6:	e7ff      	b.n	184a8 <__aeabi_cfcmpeq>

000184a8 <__aeabi_cfcmpeq>:
   184a8:	b50f      	push	{r0, r1, r2, r3, lr}
   184aa:	f7ff ffc9 	bl	18440 <__cmpsf2>
   184ae:	2800      	cmp	r0, #0
   184b0:	bf48      	it	mi
   184b2:	f110 0f00 	cmnmi.w	r0, #0
   184b6:	bd0f      	pop	{r0, r1, r2, r3, pc}

000184b8 <__aeabi_fcmpeq>:
   184b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   184bc:	f7ff fff4 	bl	184a8 <__aeabi_cfcmpeq>
   184c0:	bf0c      	ite	eq
   184c2:	2001      	moveq	r0, #1
   184c4:	2000      	movne	r0, #0
   184c6:	f85d fb08 	ldr.w	pc, [sp], #8
   184ca:	bf00      	nop

000184cc <__aeabi_fcmplt>:
   184cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   184d0:	f7ff ffea 	bl	184a8 <__aeabi_cfcmpeq>
   184d4:	bf34      	ite	cc
   184d6:	2001      	movcc	r0, #1
   184d8:	2000      	movcs	r0, #0
   184da:	f85d fb08 	ldr.w	pc, [sp], #8
   184de:	bf00      	nop

000184e0 <__aeabi_fcmple>:
   184e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   184e4:	f7ff ffe0 	bl	184a8 <__aeabi_cfcmpeq>
   184e8:	bf94      	ite	ls
   184ea:	2001      	movls	r0, #1
   184ec:	2000      	movhi	r0, #0
   184ee:	f85d fb08 	ldr.w	pc, [sp], #8
   184f2:	bf00      	nop

000184f4 <__aeabi_fcmpge>:
   184f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   184f8:	f7ff ffd2 	bl	184a0 <__aeabi_cfrcmple>
   184fc:	bf94      	ite	ls
   184fe:	2001      	movls	r0, #1
   18500:	2000      	movhi	r0, #0
   18502:	f85d fb08 	ldr.w	pc, [sp], #8
   18506:	bf00      	nop

00018508 <__aeabi_fcmpgt>:
   18508:	f84d ed08 	str.w	lr, [sp, #-8]!
   1850c:	f7ff ffc8 	bl	184a0 <__aeabi_cfrcmple>
   18510:	bf34      	ite	cc
   18512:	2001      	movcc	r0, #1
   18514:	2000      	movcs	r0, #0
   18516:	f85d fb08 	ldr.w	pc, [sp], #8
   1851a:	bf00      	nop

0001851c <__aeabi_f2iz>:
   1851c:	ea4f 0240 	mov.w	r2, r0, lsl #1
   18520:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   18524:	d30f      	bcc.n	18546 <__aeabi_f2iz+0x2a>
   18526:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1852a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1852e:	d90d      	bls.n	1854c <__aeabi_f2iz+0x30>
   18530:	ea4f 2300 	mov.w	r3, r0, lsl #8
   18534:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18538:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1853c:	fa23 f002 	lsr.w	r0, r3, r2
   18540:	bf18      	it	ne
   18542:	4240      	negne	r0, r0
   18544:	4770      	bx	lr
   18546:	f04f 0000 	mov.w	r0, #0
   1854a:	4770      	bx	lr
   1854c:	f112 0f61 	cmn.w	r2, #97	; 0x61
   18550:	d101      	bne.n	18556 <__aeabi_f2iz+0x3a>
   18552:	0242      	lsls	r2, r0, #9
   18554:	d105      	bne.n	18562 <__aeabi_f2iz+0x46>
   18556:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   1855a:	bf08      	it	eq
   1855c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   18560:	4770      	bx	lr
   18562:	f04f 0000 	mov.w	r0, #0
   18566:	4770      	bx	lr

00018568 <memcpy>:
   18568:	2a0f      	cmp	r2, #15
   1856a:	b4f0      	push	{r4, r5, r6, r7}
   1856c:	d945      	bls.n	185fa <memcpy+0x92>
   1856e:	ea40 0301 	orr.w	r3, r0, r1
   18572:	079b      	lsls	r3, r3, #30
   18574:	d145      	bne.n	18602 <memcpy+0x9a>
   18576:	f1a2 0710 	sub.w	r7, r2, #16
   1857a:	460c      	mov	r4, r1
   1857c:	4603      	mov	r3, r0
   1857e:	093f      	lsrs	r7, r7, #4
   18580:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   18584:	3610      	adds	r6, #16
   18586:	6825      	ldr	r5, [r4, #0]
   18588:	3310      	adds	r3, #16
   1858a:	3410      	adds	r4, #16
   1858c:	f843 5c10 	str.w	r5, [r3, #-16]
   18590:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   18594:	f843 5c0c 	str.w	r5, [r3, #-12]
   18598:	f854 5c08 	ldr.w	r5, [r4, #-8]
   1859c:	f843 5c08 	str.w	r5, [r3, #-8]
   185a0:	f854 5c04 	ldr.w	r5, [r4, #-4]
   185a4:	f843 5c04 	str.w	r5, [r3, #-4]
   185a8:	42b3      	cmp	r3, r6
   185aa:	d1ec      	bne.n	18586 <memcpy+0x1e>
   185ac:	1c7b      	adds	r3, r7, #1
   185ae:	f002 0c0f 	and.w	ip, r2, #15
   185b2:	f1bc 0f03 	cmp.w	ip, #3
   185b6:	ea4f 1303 	mov.w	r3, r3, lsl #4
   185ba:	4419      	add	r1, r3
   185bc:	4403      	add	r3, r0
   185be:	d922      	bls.n	18606 <memcpy+0x9e>
   185c0:	460e      	mov	r6, r1
   185c2:	461d      	mov	r5, r3
   185c4:	4664      	mov	r4, ip
   185c6:	f856 7b04 	ldr.w	r7, [r6], #4
   185ca:	3c04      	subs	r4, #4
   185cc:	2c03      	cmp	r4, #3
   185ce:	f845 7b04 	str.w	r7, [r5], #4
   185d2:	d8f8      	bhi.n	185c6 <memcpy+0x5e>
   185d4:	f1ac 0404 	sub.w	r4, ip, #4
   185d8:	f002 0203 	and.w	r2, r2, #3
   185dc:	f024 0403 	bic.w	r4, r4, #3
   185e0:	3404      	adds	r4, #4
   185e2:	4423      	add	r3, r4
   185e4:	4421      	add	r1, r4
   185e6:	b132      	cbz	r2, 185f6 <memcpy+0x8e>
   185e8:	440a      	add	r2, r1
   185ea:	f811 4b01 	ldrb.w	r4, [r1], #1
   185ee:	4291      	cmp	r1, r2
   185f0:	f803 4b01 	strb.w	r4, [r3], #1
   185f4:	d1f9      	bne.n	185ea <memcpy+0x82>
   185f6:	bcf0      	pop	{r4, r5, r6, r7}
   185f8:	4770      	bx	lr
   185fa:	4603      	mov	r3, r0
   185fc:	2a00      	cmp	r2, #0
   185fe:	d1f3      	bne.n	185e8 <memcpy+0x80>
   18600:	e7f9      	b.n	185f6 <memcpy+0x8e>
   18602:	4603      	mov	r3, r0
   18604:	e7f0      	b.n	185e8 <memcpy+0x80>
   18606:	4662      	mov	r2, ip
   18608:	2a00      	cmp	r2, #0
   1860a:	d1ed      	bne.n	185e8 <memcpy+0x80>
   1860c:	e7f3      	b.n	185f6 <memcpy+0x8e>
   1860e:	bf00      	nop

00018610 <memset>:
   18610:	0783      	lsls	r3, r0, #30
   18612:	b4f0      	push	{r4, r5, r6, r7}
   18614:	d048      	beq.n	186a8 <memset+0x98>
   18616:	1e54      	subs	r4, r2, #1
   18618:	2a00      	cmp	r2, #0
   1861a:	d043      	beq.n	186a4 <memset+0x94>
   1861c:	b2cd      	uxtb	r5, r1
   1861e:	4603      	mov	r3, r0
   18620:	e002      	b.n	18628 <memset+0x18>
   18622:	2c00      	cmp	r4, #0
   18624:	d03e      	beq.n	186a4 <memset+0x94>
   18626:	4614      	mov	r4, r2
   18628:	f803 5b01 	strb.w	r5, [r3], #1
   1862c:	f013 0f03 	tst.w	r3, #3
   18630:	f104 32ff 	add.w	r2, r4, #4294967295
   18634:	d1f5      	bne.n	18622 <memset+0x12>
   18636:	2c03      	cmp	r4, #3
   18638:	d92d      	bls.n	18696 <memset+0x86>
   1863a:	b2cd      	uxtb	r5, r1
   1863c:	2c0f      	cmp	r4, #15
   1863e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   18642:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   18646:	d918      	bls.n	1867a <memset+0x6a>
   18648:	f1a4 0710 	sub.w	r7, r4, #16
   1864c:	f103 0610 	add.w	r6, r3, #16
   18650:	461a      	mov	r2, r3
   18652:	093f      	lsrs	r7, r7, #4
   18654:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   18658:	6015      	str	r5, [r2, #0]
   1865a:	3210      	adds	r2, #16
   1865c:	f842 5c0c 	str.w	r5, [r2, #-12]
   18660:	f842 5c08 	str.w	r5, [r2, #-8]
   18664:	f842 5c04 	str.w	r5, [r2, #-4]
   18668:	42b2      	cmp	r2, r6
   1866a:	d1f5      	bne.n	18658 <memset+0x48>
   1866c:	f004 040f 	and.w	r4, r4, #15
   18670:	3701      	adds	r7, #1
   18672:	2c03      	cmp	r4, #3
   18674:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   18678:	d90d      	bls.n	18696 <memset+0x86>
   1867a:	461e      	mov	r6, r3
   1867c:	4622      	mov	r2, r4
   1867e:	3a04      	subs	r2, #4
   18680:	f846 5b04 	str.w	r5, [r6], #4
   18684:	2a03      	cmp	r2, #3
   18686:	d8fa      	bhi.n	1867e <memset+0x6e>
   18688:	1f22      	subs	r2, r4, #4
   1868a:	f004 0403 	and.w	r4, r4, #3
   1868e:	f022 0203 	bic.w	r2, r2, #3
   18692:	3204      	adds	r2, #4
   18694:	4413      	add	r3, r2
   18696:	b12c      	cbz	r4, 186a4 <memset+0x94>
   18698:	b2c9      	uxtb	r1, r1
   1869a:	441c      	add	r4, r3
   1869c:	f803 1b01 	strb.w	r1, [r3], #1
   186a0:	42a3      	cmp	r3, r4
   186a2:	d1fb      	bne.n	1869c <memset+0x8c>
   186a4:	bcf0      	pop	{r4, r5, r6, r7}
   186a6:	4770      	bx	lr
   186a8:	4614      	mov	r4, r2
   186aa:	4603      	mov	r3, r0
   186ac:	e7c3      	b.n	18636 <memset+0x26>
   186ae:	bf00      	nop

000186b0 <strncpy>:
   186b0:	ea40 0301 	orr.w	r3, r0, r1
   186b4:	079b      	lsls	r3, r3, #30
   186b6:	b470      	push	{r4, r5, r6}
   186b8:	d12b      	bne.n	18712 <strncpy+0x62>
   186ba:	2a03      	cmp	r2, #3
   186bc:	bf84      	itt	hi
   186be:	460b      	movhi	r3, r1
   186c0:	4605      	movhi	r5, r0
   186c2:	d926      	bls.n	18712 <strncpy+0x62>
   186c4:	4619      	mov	r1, r3
   186c6:	f853 4b04 	ldr.w	r4, [r3], #4
   186ca:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   186ce:	ea26 0604 	bic.w	r6, r6, r4
   186d2:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   186d6:	d105      	bne.n	186e4 <strncpy+0x34>
   186d8:	3a04      	subs	r2, #4
   186da:	f845 4b04 	str.w	r4, [r5], #4
   186de:	2a03      	cmp	r2, #3
   186e0:	4619      	mov	r1, r3
   186e2:	d8ef      	bhi.n	186c4 <strncpy+0x14>
   186e4:	b19a      	cbz	r2, 1870e <strncpy+0x5e>
   186e6:	780c      	ldrb	r4, [r1, #0]
   186e8:	3a01      	subs	r2, #1
   186ea:	1c6b      	adds	r3, r5, #1
   186ec:	702c      	strb	r4, [r5, #0]
   186ee:	b13c      	cbz	r4, 18700 <strncpy+0x50>
   186f0:	b16a      	cbz	r2, 1870e <strncpy+0x5e>
   186f2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   186f6:	3a01      	subs	r2, #1
   186f8:	f803 4b01 	strb.w	r4, [r3], #1
   186fc:	2c00      	cmp	r4, #0
   186fe:	d1f7      	bne.n	186f0 <strncpy+0x40>
   18700:	b12a      	cbz	r2, 1870e <strncpy+0x5e>
   18702:	441a      	add	r2, r3
   18704:	2100      	movs	r1, #0
   18706:	f803 1b01 	strb.w	r1, [r3], #1
   1870a:	4293      	cmp	r3, r2
   1870c:	d1fb      	bne.n	18706 <strncpy+0x56>
   1870e:	bc70      	pop	{r4, r5, r6}
   18710:	4770      	bx	lr
   18712:	4605      	mov	r5, r0
   18714:	e7e6      	b.n	186e4 <strncpy+0x34>
   18716:	bf00      	nop

00018718 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   18718:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   1871a:	e003      	b.n	18724 <LoopCopyDataInit>

0001871c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   1871c:	4b0a      	ldr	r3, [pc, #40]	; (18748 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   1871e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   18720:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   18722:	3104      	adds	r1, #4

00018724 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   18724:	4809      	ldr	r0, [pc, #36]	; (1874c <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   18726:	4b0a      	ldr	r3, [pc, #40]	; (18750 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   18728:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   1872a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   1872c:	d3f6      	bcc.n	1871c <CopyDataInit>
	ldr	r2, =_sbss
   1872e:	4a09      	ldr	r2, [pc, #36]	; (18754 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   18730:	e002      	b.n	18738 <LoopFillZerobss>

00018732 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   18732:	2300      	movs	r3, #0
	str	r3, [r2], #4
   18734:	f842 3b04 	str.w	r3, [r2], #4

00018738 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   18738:	4b07      	ldr	r3, [pc, #28]	; (18758 <LoopFillZerobss+0x20>)
	cmp	r2, r3
   1873a:	429a      	cmp	r2, r3
	bcc	FillZerobss
   1873c:	d3f9      	bcc.n	18732 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   1873e:	f7e7 fdfd 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   18742:	f7fe fde7 	bl	17314 <main>
	bx	lr    
   18746:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   18748:	000188b8 	.word	0x000188b8
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   1874c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   18750:	20000488 	.word	0x20000488
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   18754:	20000488 	.word	0x20000488
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   18758:	2000b780 	.word	0x2000b780

0001875c <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   1875c:	e7fe      	b.n	1875c <ADC1_2_IRQHandler>
   1875e:	0000      	movs	r0, r0
   18760:	6c6c616d 	.word	0x6c6c616d
   18764:	6620636f 	.word	0x6620636f
   18768:	6520726f 	.word	0x6520726f
   1876c:	746e6576 	.word	0x746e6576
   18770:	61747320 	.word	0x61747320
   18774:	66206b63 	.word	0x66206b63
   18778:	656c6961 	.word	0x656c6961
   1877c:	000d0a64 	.word	0x000d0a64
   18780:	72656874 	.word	0x72656874
   18784:	72612065 	.word	0x72612065
   18788:	65732065 	.word	0x65732065
   1878c:	726f736e 	.word	0x726f736e
   18790:	73696d20 	.word	0x73696d20
   18794:	676e6973 	.word	0x676e6973
   18798:	61656420 	.word	0x61656420
   1879c:	6e696c64 	.word	0x6e696c64
   187a0:	000d0a65 	.word	0x000d0a65
   187a4:	72656874 	.word	0x72656874
   187a8:	72612065 	.word	0x72612065
   187ac:	65732065 	.word	0x65732065
   187b0:	6e617672 	.word	0x6e617672
   187b4:	6d207374 	.word	0x6d207374
   187b8:	69737369 	.word	0x69737369
   187bc:	6420676e 	.word	0x6420676e
   187c0:	6c646165 	.word	0x6c646165
   187c4:	0a656e69 	.word	0x0a656e69
   187c8:	0000000d 	.word	0x0000000d
   187cc:	6f727245 	.word	0x6f727245
   187d0:	54203a72 	.word	0x54203a72
   187d4:	20736968 	.word	0x20736968
   187d8:	6e657665 	.word	0x6e657665
   187dc:	61682074 	.word	0x61682074
   187e0:	72612073 	.word	0x72612073
   187e4:	65766972 	.word	0x65766972
   187e8:	0a212164 	.word	0x0a212164
   187ec:	0000000d 	.word	0x0000000d
   187f0:	454c4449 	.word	0x454c4449
   187f4:	00000000 	.word	0x00000000

000187f8 <ulKernelPriority>:
   187f8:	0000007f                                ....

000187fc <heapSTRUCT_SIZE>:
   187fc:	00010010                                         ..

000187fe <version>:
   187fe:	3d5a0001                                         ..

00018800 <utm_east0>:
   18800:	00093d5a                                Z=..

00018804 <utm_north0>:
   18804:	005875e6                                .uX.

00018808 <climb_pgain>:
   18808:	bcf5c28f                                ....

0001880c <climb_igain>:
   1880c:	3dcccccd                                ...=

00018810 <level_gaz>:
   18810:	3e9eb852                                R..>

00018814 <nav_east0>:
   18814:	00093d5a                                Z=..

00018818 <nav_north0>:
   18818:	005875e6                                .uX.

0001881c <nb_waypoint>:
   1881c:	00000007 33323130 37363534 42413938     ....0123456789AB
   1882c:	46454443                                CDEF

00018830 <failsafe>:
	...
   18844:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   18854:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   18864:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   18874:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   18884:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   18894:	000d0a30 00000d0a 65532d52 6e617672     0.......R-Servan
   188a4:	00000074 736e6573 0000726f 76726573     t...sensor..serv
   188b4:	00746e61                                ant.
