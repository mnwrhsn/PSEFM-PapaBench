
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 80 01 20 b9 87 01 00 fd 87 01 00 fd 87 01 00     ... ............
      10:	fd 87 01 00 fd 87 01 00 fd 87 01 00 00 00 00 00     ................
	...
      2c:	9d 5a 00 00 fd 87 01 00 00 00 00 00 a9 5b 00 00     .Z...........[..
      3c:	e5 5b 00 00 fd 87 01 00 fd 87 01 00 fd 87 01 00     .[..............
      4c:	fd 87 01 00 fd 87 01 00 fd 87 01 00 fd 87 01 00     ................
      5c:	fd 87 01 00 fd 87 01 00 fd 87 01 00 fd 87 01 00     ................
      6c:	fd 87 01 00 fd 87 01 00 fd 87 01 00 fd 87 01 00     ................
      7c:	fd 87 01 00 fd 87 01 00 fd 87 01 00 fd 87 01 00     ................
      8c:	fd 87 01 00 fd 87 01 00 fd 87 01 00 fd 87 01 00     ................
      9c:	fd 87 01 00 fd 87 01 00 fd 87 01 00 fd 87 01 00     ................
      ac:	fd 87 01 00 fd 87 01 00 fd 87 01 00 fd 87 01 00     ................
      bc:	fd 87 01 00 fd 87 01 00 fd 87 01 00 fd 87 01 00     ................
      cc:	fd 87 01 00 fd 87 01 00 fd 87 01 00 fd 87 01 00     ................
      dc:	fd 87 01 00 fd 87 01 00 fd 87 01 00 fd 87 01 00     ................
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	00018958 	.word	0x00018958
     6d0:	20000000 	.word	0x20000000
     6d4:	20000488 	.word	0x20000488
     6d8:	20000488 	.word	0x20000488
     6dc:	2000b798 	.word	0x2000b798

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f003 fc1b 	bl	5c34 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 43f4 	movw	r3, #1268	; 0x4f4
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f001 fd5c 	bl	3f08 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f001 fd57 	bl	3f08 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0214 	rsb	r2, r3, #20
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 43f8 	movw	r3, #1272	; 0x4f8
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 43f8 	movw	r3, #1272	; 0x4f8
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 4288 	movw	r2, #1160	; 0x488
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f001 fd37 	bl	3f20 <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 43fc 	movw	r3, #1276	; 0x4fc
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 43f4 	movw	r3, #1268	; 0x4f4
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f001 fd76 	bl	3fe0 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 43f4 	movw	r3, #1268	; 0x4f4
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 43dc 	movw	r3, #1244	; 0x4dc
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f001 fd20 	bl	3f70 <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f001 fd10 	bl	3f70 <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 43f4 	movw	r3, #1268	; 0x4f4
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f001 fd03 	bl	3f70 <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 43e0 	movw	r3, #1248	; 0x4e0
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f001 fd24 	bl	3fe0 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f001 fd1b 	bl	3fe0 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 43f8 	movw	r3, #1272	; 0x4f8
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 43f8 	movw	r3, #1272	; 0x4f8
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 4288 	movw	r2, #1160	; 0x488
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f001 fc9a 	bl	3f20 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 43e0 	movw	r3, #1248	; 0x4e0
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f002 fd69 	bl	50dc <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 5300 	movw	r3, #1280	; 0x500
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 5304 	movw	r3, #1284	; 0x504
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 5304 	movw	r3, #1284	; 0x504
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 5304 	movw	r3, #1284	; 0x504
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 43dc 	movw	r3, #1244	; 0x4dc
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 43dc 	movw	r3, #1244	; 0x4dc
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 43fc 	movw	r3, #1276	; 0x4fc
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f001 fc8e 	bl	3fe0 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f001 fc85 	bl	3fe0 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 43f8 	movw	r3, #1272	; 0x4f8
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 43f8 	movw	r3, #1272	; 0x4f8
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 4288 	movw	r2, #1160	; 0x488
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f001 fc00 	bl	3f20 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 43d8 	movw	r3, #1240	; 0x4d8
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 5304 	movw	r3, #1284	; 0x504
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 43fc 	movw	r3, #1276	; 0x4fc
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 5300 	movw	r3, #1280	; 0x500
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 43f8 	movw	r3, #1272	; 0x4f8
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 43f8 	movw	r3, #1272	; 0x4f8
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 43f8 	movw	r3, #1272	; 0x4f8
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 43f8 	movw	r3, #1272	; 0x4f8
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 4288 	movw	r2, #1160	; 0x488
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 43f8 	movw	r3, #1272	; 0x4f8
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 4288 	movw	r2, #1160	; 0x488
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 43f4 	movw	r3, #1268	; 0x4f4
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 43f4 	movw	r3, #1268	; 0x4f4
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 43f4 	movw	r3, #1268	; 0x4f4
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 4288 	movw	r2, #1160	; 0x488
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f001 fb37 	bl	3ec8 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 40b0 	movw	r0, #1200	; 0x4b0
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f001 fb2b 	bl	3ec8 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 40c4 	movw	r0, #1220	; 0x4c4
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f001 fb25 	bl	3ec8 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 40e0 	movw	r0, #1248	; 0x4e0
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f001 fb1f 	bl	3ec8 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 43d8 	movw	r3, #1240	; 0x4d8
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 42b0 	movw	r2, #1200	; 0x4b0
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 43dc 	movw	r3, #1244	; 0x4dc
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 42c4 	movw	r2, #1220	; 0x4c4
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f001 fb89 	bl	3fe0 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 40e0 	movw	r0, #1248	; 0x4e0
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f001 fb20 	bl	3f20 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 43f4 	movw	r3, #1268	; 0x4f4
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <prvInitialiseEventLists>:
static void vEventSetxTimeStamp( xEventHandle pxNewEvent );

static xList * pxGetReadyList( void );

static void prvInitialiseEventLists(void )
{
    2908:	b580      	push	{r7, lr}
    290a:	b084      	sub	sp, #16
    290c:	af00      	add	r7, sp, #0
    volatile portBASE_TYPE xCPU;

    vListInitialise( ( xList * ) &xEventPool );
    290e:	f240 5008 	movw	r0, #1288	; 0x508
    2912:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2916:	f001 fad7 	bl	3ec8 <vListInitialise>
    vListInitialise( ( xList * ) &xEventList );
    291a:	f240 501c 	movw	r0, #1308	; 0x51c
    291e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2922:	f001 fad1 	bl	3ec8 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutableList );
    2926:	f240 5030 	movw	r0, #1328	; 0x530
    292a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    292e:	f001 facb 	bl	3ec8 <vListInitialise>

    // init the xEventReadyList[configCPU_NUMBER].
    for ( xCPU = 0; xCPU < configCPU_NUMBER; xCPU ++ )
    2932:	2300      	movs	r3, #0
    2934:	607b      	str	r3, [r7, #4]
    2936:	e00f      	b.n	2958 <prvInitialiseEventLists+0x50>
    {
        vListInitialise( (xList * ) & xEventReadyList[xCPU] );
    2938:	687a      	ldr	r2, [r7, #4]
    293a:	4613      	mov	r3, r2
    293c:	009b      	lsls	r3, r3, #2
    293e:	4413      	add	r3, r2
    2940:	009b      	lsls	r3, r3, #2
    2942:	f240 5244 	movw	r2, #1348	; 0x544
    2946:	f2c2 0200 	movt	r2, #8192	; 0x2000
    294a:	4413      	add	r3, r2
    294c:	4618      	mov	r0, r3
    294e:	f001 fabb 	bl	3ec8 <vListInitialise>
    vListInitialise( ( xList * ) &xEventPool );
    vListInitialise( ( xList * ) &xEventList );
    vListInitialise( ( xList * ) &xEventExecutableList );

    // init the xEventReadyList[configCPU_NUMBER].
    for ( xCPU = 0; xCPU < configCPU_NUMBER; xCPU ++ )
    2952:	687b      	ldr	r3, [r7, #4]
    2954:	3301      	adds	r3, #1
    2956:	607b      	str	r3, [r7, #4]
    2958:	687b      	ldr	r3, [r7, #4]
    295a:	2b00      	cmp	r3, #0
    295c:	ddec      	ble.n	2938 <prvInitialiseEventLists+0x30>
    {
        vListInitialise( (xList * ) & xEventReadyList[xCPU] );
    }

    // Creating an End FLag Event and insert into the end of xEventList.
    eveECB * pxEndFlagEvent = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    295e:	203c      	movs	r0, #60	; 0x3c
    2960:	f003 f968 	bl	5c34 <pvPortMalloc>
    2964:	60f8      	str	r0, [r7, #12]
    if( pxEndFlagEvent != NULL )
    2966:	68fb      	ldr	r3, [r7, #12]
    2968:	2b00      	cmp	r3, #0
    296a:	d01e      	beq.n	29aa <prvInitialiseEventLists+0xa2>
    {
       // pxEndFlagEvent->pxSource = pxEndFlagEvent->pxDestination = NULL;
        // there may be some problem here because of this assignment way
        pxEndFlagEvent->xTimeStamp.xDeadline= portMAX_DELAY;
    296c:	68fb      	ldr	r3, [r7, #12]
    296e:	f04f 32ff 	mov.w	r2, #4294967295
    2972:	609a      	str	r2, [r3, #8]
        pxEndFlagEvent->xTimeStamp.xTime = portMAX_DELAY;
    2974:	68fb      	ldr	r3, [r7, #12]
    2976:	f04f 32ff 	mov.w	r2, #4294967295
    297a:	60da      	str	r2, [r3, #12]
        pxEndFlagEvent->xTimeStamp.xMicroStep = portMAX_DELAY;
    297c:	68fb      	ldr	r3, [r7, #12]
    297e:	f04f 32ff 	mov.w	r2, #4294967295
    2982:	611a      	str	r2, [r3, #16]
        pxEndFlagEvent->xTimeStamp.xLevel = portMAX_DELAY;
    2984:	68fb      	ldr	r3, [r7, #12]
    2986:	f04f 32ff 	mov.w	r2, #4294967295
    298a:	615a      	str	r2, [r3, #20]
        vListIntialiseEventItem( pxEndFlagEvent, (xListItem *) & pxEndFlagEvent->xEventListItem );
    298c:	68fb      	ldr	r3, [r7, #12]
    298e:	3318      	adds	r3, #24
    2990:	68f8      	ldr	r0, [r7, #12]
    2992:	4619      	mov	r1, r3
    2994:	f000 f9b8 	bl	2d08 <vListIntialiseEventItem>
        vListInsertEnd(&xEventList, &pxEndFlagEvent->xEventListItem); 
    2998:	68fb      	ldr	r3, [r7, #12]
    299a:	3318      	adds	r3, #24
    299c:	f240 501c 	movw	r0, #1308	; 0x51c
    29a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    29a4:	4619      	mov	r1, r3
    29a6:	f001 fabb 	bl	3f20 <vListInsertEnd>
    }

    // Creating an End FLag Event and insert into the end of xEventExecutableList
    eveECB * pxEndFlagEvent1 = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    29aa:	203c      	movs	r0, #60	; 0x3c
    29ac:	f003 f942 	bl	5c34 <pvPortMalloc>
    29b0:	60b8      	str	r0, [r7, #8]
    if( pxEndFlagEvent1 != NULL )
    29b2:	68bb      	ldr	r3, [r7, #8]
    29b4:	2b00      	cmp	r3, #0
    29b6:	d01e      	beq.n	29f6 <prvInitialiseEventLists+0xee>
    {
        // there may be some problem here because of this assignment way
        pxEndFlagEvent1->xTimeStamp.xDeadline= portMAX_DELAY;
    29b8:	68bb      	ldr	r3, [r7, #8]
    29ba:	f04f 32ff 	mov.w	r2, #4294967295
    29be:	609a      	str	r2, [r3, #8]
        pxEndFlagEvent1->xTimeStamp.xTime = portMAX_DELAY;
    29c0:	68bb      	ldr	r3, [r7, #8]
    29c2:	f04f 32ff 	mov.w	r2, #4294967295
    29c6:	60da      	str	r2, [r3, #12]
        pxEndFlagEvent1->xTimeStamp.xMicroStep = portMAX_DELAY;
    29c8:	68bb      	ldr	r3, [r7, #8]
    29ca:	f04f 32ff 	mov.w	r2, #4294967295
    29ce:	611a      	str	r2, [r3, #16]
        pxEndFlagEvent1->xTimeStamp.xLevel = portMAX_DELAY;
    29d0:	68bb      	ldr	r3, [r7, #8]
    29d2:	f04f 32ff 	mov.w	r2, #4294967295
    29d6:	615a      	str	r2, [r3, #20]
        vListIntialiseEventItem( pxEndFlagEvent1, (xListItem *) & pxEndFlagEvent1->xEventListItem );
    29d8:	68bb      	ldr	r3, [r7, #8]
    29da:	3318      	adds	r3, #24
    29dc:	68b8      	ldr	r0, [r7, #8]
    29de:	4619      	mov	r1, r3
    29e0:	f000 f992 	bl	2d08 <vListIntialiseEventItem>
        vListInsertEnd(&xEventExecutableList, &pxEndFlagEvent1->xEventListItem); 
    29e4:	68bb      	ldr	r3, [r7, #8]
    29e6:	3318      	adds	r3, #24
    29e8:	f240 5030 	movw	r0, #1328	; 0x530
    29ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
    29f0:	4619      	mov	r1, r3
    29f2:	f001 fa95 	bl	3f20 <vListInsertEnd>
    }
}
    29f6:	3710      	adds	r7, #16
    29f8:	46bd      	mov	sp, r7
    29fa:	bd80      	pop	{r7, pc}

000029fc <xCompareFunction1>:

/* unexecutable event comparison function is used in xEventList. 
 * The event with earlist timestamp will be proceeded first*/
static portBASE_TYPE xCompareFunction1( const struct timeStamp t1, const struct timeStamp t2 )
{
    29fc:	b490      	push	{r4, r7}
    29fe:	b084      	sub	sp, #16
    2a00:	af00      	add	r7, sp, #0
    2a02:	463c      	mov	r4, r7
    2a04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xTime < t2.xTime)
    2a08:	687a      	ldr	r2, [r7, #4]
    2a0a:	69fb      	ldr	r3, [r7, #28]
    2a0c:	429a      	cmp	r2, r3
    2a0e:	d201      	bcs.n	2a14 <xCompareFunction1+0x18>
    {
        return pdTRUE;
    2a10:	2301      	movs	r3, #1
    2a12:	e014      	b.n	2a3e <xCompareFunction1+0x42>
    }
    else if( t1.xTime == t2.xTime)
    2a14:	687a      	ldr	r2, [r7, #4]
    2a16:	69fb      	ldr	r3, [r7, #28]
    2a18:	429a      	cmp	r2, r3
    2a1a:	d10f      	bne.n	2a3c <xCompareFunction1+0x40>
    {
        if( t1.xDeadline < t2.xDeadline )
    2a1c:	683a      	ldr	r2, [r7, #0]
    2a1e:	69bb      	ldr	r3, [r7, #24]
    2a20:	429a      	cmp	r2, r3
    2a22:	d201      	bcs.n	2a28 <xCompareFunction1+0x2c>
        {
            return pdTRUE;
    2a24:	2301      	movs	r3, #1
    2a26:	e00a      	b.n	2a3e <xCompareFunction1+0x42>
        }
        else if( t1.xDeadline == t2.xDeadline )
    2a28:	683a      	ldr	r2, [r7, #0]
    2a2a:	69bb      	ldr	r3, [r7, #24]
    2a2c:	429a      	cmp	r2, r3
    2a2e:	d105      	bne.n	2a3c <xCompareFunction1+0x40>
        {
            if( t1.xLevel < t2.xLevel )
    2a30:	68fa      	ldr	r2, [r7, #12]
    2a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a34:	429a      	cmp	r2, r3
    2a36:	da01      	bge.n	2a3c <xCompareFunction1+0x40>
            {
                return pdTRUE;
    2a38:	2301      	movs	r3, #1
    2a3a:	e000      	b.n	2a3e <xCompareFunction1+0x42>
            }
        }
    }
    return pdFALSE;
    2a3c:	2300      	movs	r3, #0
}
    2a3e:	4618      	mov	r0, r3
    2a40:	3710      	adds	r7, #16
    2a42:	46bd      	mov	sp, r7
    2a44:	bc90      	pop	{r4, r7}
    2a46:	4770      	bx	lr

00002a48 <xCompareFunction2>:

/* executable event comparison function is used in xEventExecutableList. 
 * The event with earlist deadline will be scheduled to execute first */
static portBASE_TYPE xCompareFunction2( const struct timeStamp t1, const struct timeStamp t2 )
{
    2a48:	b490      	push	{r4, r7}
    2a4a:	b084      	sub	sp, #16
    2a4c:	af00      	add	r7, sp, #0
    2a4e:	463c      	mov	r4, r7
    2a50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xDeadline < t2.xDeadline)
    2a54:	683a      	ldr	r2, [r7, #0]
    2a56:	69bb      	ldr	r3, [r7, #24]
    2a58:	429a      	cmp	r2, r3
    2a5a:	d201      	bcs.n	2a60 <xCompareFunction2+0x18>
    {
        return pdTRUE;
    2a5c:	2301      	movs	r3, #1
    2a5e:	e014      	b.n	2a8a <xCompareFunction2+0x42>
    }
    else if( t1.xDeadline == t2.xDeadline)
    2a60:	683a      	ldr	r2, [r7, #0]
    2a62:	69bb      	ldr	r3, [r7, #24]
    2a64:	429a      	cmp	r2, r3
    2a66:	d10f      	bne.n	2a88 <xCompareFunction2+0x40>
    {
        if( t1.xTime < t2.xTime )
    2a68:	687a      	ldr	r2, [r7, #4]
    2a6a:	69fb      	ldr	r3, [r7, #28]
    2a6c:	429a      	cmp	r2, r3
    2a6e:	d201      	bcs.n	2a74 <xCompareFunction2+0x2c>
        {
            return pdTRUE;
    2a70:	2301      	movs	r3, #1
    2a72:	e00a      	b.n	2a8a <xCompareFunction2+0x42>
        }
        else if( t1.xTime == t2.xTime )
    2a74:	687a      	ldr	r2, [r7, #4]
    2a76:	69fb      	ldr	r3, [r7, #28]
    2a78:	429a      	cmp	r2, r3
    2a7a:	d105      	bne.n	2a88 <xCompareFunction2+0x40>
        {
            if( t1.xLevel < t2.xLevel )
    2a7c:	68fa      	ldr	r2, [r7, #12]
    2a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a80:	429a      	cmp	r2, r3
    2a82:	da01      	bge.n	2a88 <xCompareFunction2+0x40>
            {
                return pdTRUE;
    2a84:	2301      	movs	r3, #1
    2a86:	e000      	b.n	2a8a <xCompareFunction2+0x42>
            }
        }
    }

    return pdFALSE;
    2a88:	2300      	movs	r3, #0
}
    2a8a:	4618      	mov	r0, r3
    2a8c:	3710      	adds	r7, #16
    2a8e:	46bd      	mov	sp, r7
    2a90:	bc90      	pop	{r4, r7}
    2a92:	4770      	bx	lr

00002a94 <xEventGetpxSource>:



xTaskHandle xEventGetpxSource( xEventHandle pxEvent )
{
    2a94:	b480      	push	{r7}
    2a96:	b083      	sub	sp, #12
    2a98:	af00      	add	r7, sp, #0
    2a9a:	6078      	str	r0, [r7, #4]
    return ((eveECB *)pxEvent)->pxSource;
    2a9c:	687b      	ldr	r3, [r7, #4]
    2a9e:	681b      	ldr	r3, [r3, #0]
}
    2aa0:	4618      	mov	r0, r3
    2aa2:	370c      	adds	r7, #12
    2aa4:	46bd      	mov	sp, r7
    2aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
    2aaa:	4770      	bx	lr

00002aac <xEventGetpxDestination>:

xTaskHandle xEventGetpxDestination( xEventHandle pxEvent)
{
    2aac:	b480      	push	{r7}
    2aae:	b083      	sub	sp, #12
    2ab0:	af00      	add	r7, sp, #0
    2ab2:	6078      	str	r0, [r7, #4]
    return ((eveECB *) pxEvent)->pxDestination;
    2ab4:	687b      	ldr	r3, [r7, #4]
    2ab6:	685b      	ldr	r3, [r3, #4]
}
    2ab8:	4618      	mov	r0, r3
    2aba:	370c      	adds	r7, #12
    2abc:	46bd      	mov	sp, r7
    2abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ac2:	4770      	bx	lr

00002ac4 <xEventGetxTimeStamp>:

struct timeStamp xEventGetxTimeStamp( xEventHandle pxEvent)
{
    2ac4:	b490      	push	{r4, r7}
    2ac6:	b082      	sub	sp, #8
    2ac8:	af00      	add	r7, sp, #0
    2aca:	6078      	str	r0, [r7, #4]
    2acc:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xTimeStamp;
    2ace:	687a      	ldr	r2, [r7, #4]
    2ad0:	683b      	ldr	r3, [r7, #0]
    2ad2:	4614      	mov	r4, r2
    2ad4:	3308      	adds	r3, #8
    2ad6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2ad8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2adc:	6878      	ldr	r0, [r7, #4]
    2ade:	3708      	adds	r7, #8
    2ae0:	46bd      	mov	sp, r7
    2ae2:	bc90      	pop	{r4, r7}
    2ae4:	4770      	bx	lr
    2ae6:	bf00      	nop

00002ae8 <xEventGetxData>:

struct eventData xEventGetxData( xEventHandle pxEvent)
{
    2ae8:	b490      	push	{r4, r7}
    2aea:	b082      	sub	sp, #8
    2aec:	af00      	add	r7, sp, #0
    2aee:	6078      	str	r0, [r7, #4]
    2af0:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xData;
    2af2:	687a      	ldr	r2, [r7, #4]
    2af4:	683b      	ldr	r3, [r7, #0]
    2af6:	4614      	mov	r4, r2
    2af8:	332c      	adds	r3, #44	; 0x2c
    2afa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2afc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2b00:	6878      	ldr	r0, [r7, #4]
    2b02:	3708      	adds	r7, #8
    2b04:	46bd      	mov	sp, r7
    2b06:	bc90      	pop	{r4, r7}
    2b08:	4770      	bx	lr
    2b0a:	bf00      	nop

00002b0c <vEventSetxTimeStamp>:

static void vEventSetxTimeStamp( xEventHandle pxNewEvent )
{
    2b0c:	b480      	push	{r7}
    2b0e:	b085      	sub	sp, #20
    2b10:	af00      	add	r7, sp, #0
    2b12:	6078      	str	r0, [r7, #4]
    eveECB * pxEvent =(eveECB *) pxNewEvent;
    2b14:	687b      	ldr	r3, [r7, #4]
    2b16:	60fb      	str	r3, [r7, #12]
    portTickType xDeadline = pxEvent->xData.xNextPeriod;
    2b18:	68fb      	ldr	r3, [r7, #12]
    2b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2b1c:	60bb      	str	r3, [r7, #8]

    /* EDF scheduling algorithm */
    pxEvent->xTimeStamp.xDeadline= xDeadline ;
    2b1e:	68fb      	ldr	r3, [r7, #12]
    2b20:	68ba      	ldr	r2, [r7, #8]
    2b22:	609a      	str	r2, [r3, #8]

    /*set the time of this event to be processed */
    if( pxEvent->xData.IS_LAST_SERVANT == 1 )
    2b24:	68fb      	ldr	r3, [r7, #12]
    2b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    2b28:	2b01      	cmp	r3, #1
    2b2a:	d103      	bne.n	2b34 <vEventSetxTimeStamp+0x28>
    {
        pxEvent->xTimeStamp.xTime = xDeadline;
    2b2c:	68fb      	ldr	r3, [r7, #12]
    2b2e:	68ba      	ldr	r2, [r7, #8]
    2b30:	60da      	str	r2, [r3, #12]
    2b32:	e003      	b.n	2b3c <vEventSetxTimeStamp+0x30>
    }
    else
    {
        pxEvent->xTimeStamp.xTime = pxEvent->xData.xTime ;
    2b34:	68fb      	ldr	r3, [r7, #12]
    2b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    2b38:	68fb      	ldr	r3, [r7, #12]
    2b3a:	60da      	str	r2, [r3, #12]
    }

    /*the microstep is not used now*/
    pxEvent->xTimeStamp.xMicroStep = 0;
    2b3c:	68fb      	ldr	r3, [r7, #12]
    2b3e:	2200      	movs	r2, #0
    2b40:	611a      	str	r2, [r3, #16]

    /* set the level of timestamp according to the topology sort result*/
    pxEvent->xTimeStamp.xLevel = xEventSerialNumber;
    2b42:	f240 5358 	movw	r3, #1368	; 0x558
    2b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b4a:	681b      	ldr	r3, [r3, #0]
    2b4c:	461a      	mov	r2, r3
    2b4e:	68fb      	ldr	r3, [r7, #12]
    2b50:	615a      	str	r2, [r3, #20]

    xEventSerialNumber++;
    2b52:	f240 5358 	movw	r3, #1368	; 0x558
    2b56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b5a:	681b      	ldr	r3, [r3, #0]
    2b5c:	1c5a      	adds	r2, r3, #1
    2b5e:	f240 5358 	movw	r3, #1368	; 0x558
    2b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b66:	601a      	str	r2, [r3, #0]
}
    2b68:	3714      	adds	r7, #20
    2b6a:	46bd      	mov	sp, r7
    2b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2b70:	4770      	bx	lr
    2b72:	bf00      	nop

00002b74 <vEventSetxData>:

static void vEventSetxData( xEventHandle pxEvent, struct eventData xData)
{
    2b74:	b084      	sub	sp, #16
    2b76:	b490      	push	{r4, r7}
    2b78:	b082      	sub	sp, #8
    2b7a:	af00      	add	r7, sp, #0
    2b7c:	6078      	str	r0, [r7, #4]
    2b7e:	f107 0014 	add.w	r0, r7, #20
    2b82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ((eveECB *) pxEvent)->xData = xData;
    2b86:	687b      	ldr	r3, [r7, #4]
    2b88:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    2b8c:	f107 0314 	add.w	r3, r7, #20
    2b90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2b92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    2b96:	3708      	adds	r7, #8
    2b98:	46bd      	mov	sp, r7
    2b9a:	bc90      	pop	{r4, r7}
    2b9c:	b004      	add	sp, #16
    2b9e:	4770      	bx	lr

00002ba0 <pxGetReadyList>:
* Get the event ready list according to the multicore scheduling algorithm.
*
* @return the address of the event ready list.
* */
static xList * pxGetReadyList( void )
{
    2ba0:	b480      	push	{r7}
    2ba2:	af00      	add	r7, sp, #0
    return &xEventReadyList[0];
    2ba4:	f240 5344 	movw	r3, #1348	; 0x544
    2ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
    2bac:	4618      	mov	r0, r3
    2bae:	46bd      	mov	sp, r7
    2bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
    2bb4:	4770      	bx	lr
    2bb6:	bf00      	nop

00002bb8 <prvEventListGenericInsert1>:


/* insert event to xEventList in terms of comparison function 1 */
static void prvEventListGenericInsert1( xListItem *pxNewListItem )
{
    2bb8:	b590      	push	{r4, r7, lr}
    2bba:	b091      	sub	sp, #68	; 0x44
    2bbc:	af04      	add	r7, sp, #16
    2bbe:	6078      	str	r0, [r7, #4]
    volatile xListItem *pxIterator;
    struct timeStamp xTimeStampOfInsertion;
    xList * pxList = &xEventList;
    2bc0:	f240 531c 	movw	r3, #1308	; 0x51c
    2bc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bc8:	62bb      	str	r3, [r7, #40]	; 0x28

    xTimeStampOfInsertion = xEventGetxTimeStamp(pxNewListItem->pvOwner);
    2bca:	687b      	ldr	r3, [r7, #4]
    2bcc:	68db      	ldr	r3, [r3, #12]
    2bce:	f107 0208 	add.w	r2, r7, #8
    2bd2:	4610      	mov	r0, r2
    2bd4:	4619      	mov	r1, r3
    2bd6:	f7ff ff75 	bl	2ac4 <xEventGetxTimeStamp>

    if( xTimeStampOfInsertion.xTime == portMAX_DELAY )
    2bda:	68fb      	ldr	r3, [r7, #12]
    2bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
    2be0:	d103      	bne.n	2bea <prvEventListGenericInsert1+0x32>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    2be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2be4:	691b      	ldr	r3, [r3, #16]
    2be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    2be8:	e021      	b.n	2c2e <prvEventListGenericInsert1+0x76>
    }
    else
    {
        taskENTER_CRITICAL();
    2bea:	f002 ffab 	bl	5b44 <vPortEnterCritical>
        // There must already be a End Flag Event with max timeStamp in xEventList.
        // The End Flag Event can be the last Event to be processed, and new events
        // are inserted before it in xEventList.
        // The End Flag Event has been inserted when xEventList is initialised.
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); xCompareFunction1( xEventGetxTimeStamp( pxIterator->pxNext->pvOwner ), xTimeStampOfInsertion ); pxIterator = pxIterator->pxNext ) 
    2bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2bf0:	3308      	adds	r3, #8
    2bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    2bf4:	e002      	b.n	2bfc <prvEventListGenericInsert1+0x44>
    2bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2bf8:	685b      	ldr	r3, [r3, #4]
    2bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    2bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2bfe:	685b      	ldr	r3, [r3, #4]
    2c00:	68db      	ldr	r3, [r3, #12]
    2c02:	f107 0218 	add.w	r2, r7, #24
    2c06:	4610      	mov	r0, r2
    2c08:	4619      	mov	r1, r3
    2c0a:	f7ff ff5b 	bl	2ac4 <xEventGetxTimeStamp>
    2c0e:	466c      	mov	r4, sp
    2c10:	f107 0308 	add.w	r3, r7, #8
    2c14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2c16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2c1a:	f107 0318 	add.w	r3, r7, #24
    2c1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2c20:	f7ff feec 	bl	29fc <xCompareFunction1>
    2c24:	4603      	mov	r3, r0
    2c26:	2b00      	cmp	r3, #0
    2c28:	d1e5      	bne.n	2bf6 <prvEventListGenericInsert1+0x3e>
        {
        }
        taskEXIT_CRITICAL();
    2c2a:	f002 ffa1 	bl	5b70 <vPortExitCritical>
    }

    // insert the new event before a bigger one.
    pxNewListItem->pxNext = pxIterator->pxNext;
    2c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2c30:	685a      	ldr	r2, [r3, #4]
    2c32:	687b      	ldr	r3, [r7, #4]
    2c34:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2c36:	687b      	ldr	r3, [r7, #4]
    2c38:	685b      	ldr	r3, [r3, #4]
    2c3a:	687a      	ldr	r2, [r7, #4]
    2c3c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2c3e:	687b      	ldr	r3, [r7, #4]
    2c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2c42:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2c46:	687a      	ldr	r2, [r7, #4]
    2c48:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2c4a:	687b      	ldr	r3, [r7, #4]
    2c4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2c4e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c52:	681b      	ldr	r3, [r3, #0]
    2c54:	1c5a      	adds	r2, r3, #1
    2c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c58:	601a      	str	r2, [r3, #0]
}
    2c5a:	3734      	adds	r7, #52	; 0x34
    2c5c:	46bd      	mov	sp, r7
    2c5e:	bd90      	pop	{r4, r7, pc}

00002c60 <prvEventListGenericInsert2>:

/* insert event to xEventExecutableList in terms of comparison function 2 */
static void prvEventListGenericInsert2( xListItem *pxNewListItem )
{
    2c60:	b590      	push	{r4, r7, lr}
    2c62:	b091      	sub	sp, #68	; 0x44
    2c64:	af04      	add	r7, sp, #16
    2c66:	6078      	str	r0, [r7, #4]
    volatile xListItem *pxIterator;
    struct timeStamp xTimeStampOfInsertion;
    xList * pxList = &xEventExecutableList;
    2c68:	f240 5330 	movw	r3, #1328	; 0x530
    2c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c70:	62bb      	str	r3, [r7, #40]	; 0x28

    xTimeStampOfInsertion = xEventGetxTimeStamp(pxNewListItem->pvOwner);
    2c72:	687b      	ldr	r3, [r7, #4]
    2c74:	68db      	ldr	r3, [r3, #12]
    2c76:	f107 0208 	add.w	r2, r7, #8
    2c7a:	4610      	mov	r0, r2
    2c7c:	4619      	mov	r1, r3
    2c7e:	f7ff ff21 	bl	2ac4 <xEventGetxTimeStamp>

    if( xTimeStampOfInsertion.xTime == portMAX_DELAY )
    2c82:	68fb      	ldr	r3, [r7, #12]
    2c84:	f1b3 3fff 	cmp.w	r3, #4294967295
    2c88:	d103      	bne.n	2c92 <prvEventListGenericInsert2+0x32>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    2c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c8c:	691b      	ldr	r3, [r3, #16]
    2c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    2c90:	e021      	b.n	2cd6 <prvEventListGenericInsert2+0x76>
    }
    else
    {
        taskENTER_CRITICAL();
    2c92:	f002 ff57 	bl	5b44 <vPortEnterCritical>
        // There must already be a End Flag Event with max timeStamp in xEventList.
        // The End Flag Event can be the last Event to be processed, and new events
        // are inserted before it in xEventList.
        // The End Flag Event has been inserted when xEventList is initialised.
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); xCompareFunction2( xEventGetxTimeStamp( pxIterator->pxNext->pvOwner ), xTimeStampOfInsertion ); pxIterator = pxIterator->pxNext ) 
    2c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2c98:	3308      	adds	r3, #8
    2c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    2c9c:	e002      	b.n	2ca4 <prvEventListGenericInsert2+0x44>
    2c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ca0:	685b      	ldr	r3, [r3, #4]
    2ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    2ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2ca6:	685b      	ldr	r3, [r3, #4]
    2ca8:	68db      	ldr	r3, [r3, #12]
    2caa:	f107 0218 	add.w	r2, r7, #24
    2cae:	4610      	mov	r0, r2
    2cb0:	4619      	mov	r1, r3
    2cb2:	f7ff ff07 	bl	2ac4 <xEventGetxTimeStamp>
    2cb6:	466c      	mov	r4, sp
    2cb8:	f107 0308 	add.w	r3, r7, #8
    2cbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2cbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2cc2:	f107 0318 	add.w	r3, r7, #24
    2cc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2cc8:	f7ff febe 	bl	2a48 <xCompareFunction2>
    2ccc:	4603      	mov	r3, r0
    2cce:	2b00      	cmp	r3, #0
    2cd0:	d1e5      	bne.n	2c9e <prvEventListGenericInsert2+0x3e>
        {
        }
        taskEXIT_CRITICAL();
    2cd2:	f002 ff4d 	bl	5b70 <vPortExitCritical>
    }

    // insert the new event before a bigger one.
    pxNewListItem->pxNext = pxIterator->pxNext;
    2cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2cd8:	685a      	ldr	r2, [r3, #4]
    2cda:	687b      	ldr	r3, [r7, #4]
    2cdc:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2cde:	687b      	ldr	r3, [r7, #4]
    2ce0:	685b      	ldr	r3, [r3, #4]
    2ce2:	687a      	ldr	r2, [r7, #4]
    2ce4:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2ce6:	687b      	ldr	r3, [r7, #4]
    2ce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2cea:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2cee:	687a      	ldr	r2, [r7, #4]
    2cf0:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2cf2:	687b      	ldr	r3, [r7, #4]
    2cf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2cf6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2cfa:	681b      	ldr	r3, [r3, #0]
    2cfc:	1c5a      	adds	r2, r3, #1
    2cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2d00:	601a      	str	r2, [r3, #0]
}
    2d02:	3734      	adds	r7, #52	; 0x34
    2d04:	46bd      	mov	sp, r7
    2d06:	bd90      	pop	{r4, r7, pc}

00002d08 <vListIntialiseEventItem>:


static void vListIntialiseEventItem( xEventHandle pvOwner, xListItem * pxNewEventItem)
{
    2d08:	b480      	push	{r7}
    2d0a:	b083      	sub	sp, #12
    2d0c:	af00      	add	r7, sp, #0
    2d0e:	6078      	str	r0, [r7, #4]
    2d10:	6039      	str	r1, [r7, #0]
    /* set the pvOwner of the EventItem as a event*/
    listSET_LIST_ITEM_OWNER( pxNewEventItem, pvOwner );
    2d12:	683b      	ldr	r3, [r7, #0]
    2d14:	687a      	ldr	r2, [r7, #4]
    2d16:	60da      	str	r2, [r3, #12]
    //pxNewEventItem->pvContainer = (void *) &xEventList;
}
    2d18:	370c      	adds	r7, #12
    2d1a:	46bd      	mov	sp, r7
    2d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d20:	4770      	bx	lr
    2d22:	bf00      	nop

00002d24 <vEventGenericCreate>:


void vEventGenericCreate( xTaskHandle pxDestination, struct eventData pdData)
{
    2d24:	b084      	sub	sp, #16
    2d26:	b580      	push	{r7, lr}
    2d28:	b086      	sub	sp, #24
    2d2a:	af02      	add	r7, sp, #8
    2d2c:	6078      	str	r0, [r7, #4]
    2d2e:	f107 001c 	add.w	r0, r7, #28
    2d32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    eveECB * pxNewEvent = NULL;
    2d36:	2300      	movs	r3, #0
    2d38:	60fb      	str	r3, [r7, #12]

    /* using the pxCurrentTCB, current task should not be changed */
    taskENTER_CRITICAL();
    2d3a:	f002 ff03 	bl	5b44 <vPortEnterCritical>

    if ( IS_FIRST_EVENT == 1 )
    2d3e:	f240 0328 	movw	r3, #40	; 0x28
    2d42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d46:	681b      	ldr	r3, [r3, #0]
    2d48:	2b01      	cmp	r3, #1
    2d4a:	d107      	bne.n	2d5c <vEventGenericCreate+0x38>
    {
        IS_FIRST_EVENT = 0;
    2d4c:	f240 0328 	movw	r3, #40	; 0x28
    2d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d54:	2200      	movs	r2, #0
    2d56:	601a      	str	r2, [r3, #0]
        prvInitialiseEventLists();
    2d58:	f7ff fdd6 	bl	2908 <prvInitialiseEventLists>
    }

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    2d5c:	f002 fd8a 	bl	5874 <xTaskGetCurrentTaskHandle>
    2d60:	60b8      	str	r0, [r7, #8]
    pxNewEvent = (eveECB *)pvPortMalloc( sizeof( eveECB ));
    2d62:	203c      	movs	r0, #60	; 0x3c
    2d64:	f002 ff66 	bl	5c34 <pvPortMalloc>
    2d68:	60f8      	str	r0, [r7, #12]
    if( pxNewEvent == NULL )
    2d6a:	68fb      	ldr	r3, [r7, #12]
    2d6c:	2b00      	cmp	r3, #0
    2d6e:	d105      	bne.n	2d7c <vEventGenericCreate+0x58>
    {
        vPrintString("malloc for event stack failed\n\r");
    2d70:	f648 0000 	movw	r0, #34816	; 0x8800
    2d74:	f2c0 0001 	movt	r0, #1
    2d78:	f014 fa70 	bl	1725c <vPrintString>
    }
    if ( pxNewEvent != NULL )
    2d7c:	68fb      	ldr	r3, [r7, #12]
    2d7e:	2b00      	cmp	r3, #0
    2d80:	d01f      	beq.n	2dc2 <vEventGenericCreate+0x9e>
    {
        pxNewEvent->pxSource = pxCurrentTCBLocal;
    2d82:	68fb      	ldr	r3, [r7, #12]
    2d84:	68ba      	ldr	r2, [r7, #8]
    2d86:	601a      	str	r2, [r3, #0]
        pxNewEvent->pxDestination = pxDestination;
    2d88:	68fb      	ldr	r3, [r7, #12]
    2d8a:	687a      	ldr	r2, [r7, #4]
    2d8c:	605a      	str	r2, [r3, #4]

        /* initialise the time stamp of an event item according to the sort algorithm.*/
        vEventSetxData( pxNewEvent, pdData );
    2d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2d90:	9300      	str	r3, [sp, #0]
    2d92:	f107 031c 	add.w	r3, r7, #28
    2d96:	cb0e      	ldmia	r3, {r1, r2, r3}
    2d98:	68f8      	ldr	r0, [r7, #12]
    2d9a:	f7ff feeb 	bl	2b74 <vEventSetxData>

        vEventSetxTimeStamp( pxNewEvent );
    2d9e:	68f8      	ldr	r0, [r7, #12]
    2da0:	f7ff feb4 	bl	2b0c <vEventSetxTimeStamp>

        vListIntialiseEventItem( pxNewEvent, (xListItem *) &pxNewEvent->xEventListItem );
    2da4:	68fb      	ldr	r3, [r7, #12]
    2da6:	3318      	adds	r3, #24
    2da8:	68f8      	ldr	r0, [r7, #12]
    2daa:	4619      	mov	r1, r3
    2dac:	f7ff ffac 	bl	2d08 <vListIntialiseEventItem>

        // insert the event into eventpool with O(1)
        vListInsertEnd(&xEventPool, (xListItem *)& pxNewEvent->xEventListItem);
    2db0:	68fb      	ldr	r3, [r7, #12]
    2db2:	3318      	adds	r3, #24
    2db4:	f240 5008 	movw	r0, #1288	; 0x508
    2db8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2dbc:	4619      	mov	r1, r3
    2dbe:	f001 f8af 	bl	3f20 <vListInsertEnd>
    }
    taskEXIT_CRITICAL();
    2dc2:	f002 fed5 	bl	5b70 <vPortExitCritical>

}
    2dc6:	3710      	adds	r7, #16
    2dc8:	46bd      	mov	sp, r7
    2dca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    2dce:	b004      	add	sp, #16
    2dd0:	4770      	bx	lr
    2dd2:	bf00      	nop

00002dd4 <xEventListGenericTransit>:

/* An API to transfer all executable Event Items from xEventList to xEventExecutableList.
* Then, choose the first executable event item in xEventExecutableList to proceed, which means
* transfer the executable to specific xEventReadyList according to the condition of CPU*/
portBASE_TYPE xEventListGenericTransit( xListItem ** pxEventListItem, xList ** pxCurrentReadyList)
{
    2dd4:	b580      	push	{r7, lr}
    2dd6:	b088      	sub	sp, #32
    2dd8:	af00      	add	r7, sp, #0
    2dda:	6078      	str	r0, [r7, #4]
    2ddc:	6039      	str	r1, [r7, #0]
    xListItem * temp_pxEventListItem;
    // transmit events from event pool to xEventList according to the xCompareFunction1
    while(listCURRENT_LIST_LENGTH( &xEventPool ) != 0)
    2dde:	e00b      	b.n	2df8 <xEventListGenericTransit+0x24>
    {
        temp_pxEventListItem = (xListItem *) xEventPool.xListEnd.pxNext;    
    2de0:	f240 5308 	movw	r3, #1288	; 0x508
    2de4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2de8:	68db      	ldr	r3, [r3, #12]
    2dea:	61fb      	str	r3, [r7, #28]
        vListRemove(temp_pxEventListItem);
    2dec:	69f8      	ldr	r0, [r7, #28]
    2dee:	f001 f8f7 	bl	3fe0 <vListRemove>
        /*how to call this funciton: vEventListInsert( newListItem ). This function add the new item into the xEventList as default*/
        prvEventListGenericInsert1( temp_pxEventListItem ); 
    2df2:	69f8      	ldr	r0, [r7, #28]
    2df4:	f7ff fee0 	bl	2bb8 <prvEventListGenericInsert1>
* transfer the executable to specific xEventReadyList according to the condition of CPU*/
portBASE_TYPE xEventListGenericTransit( xListItem ** pxEventListItem, xList ** pxCurrentReadyList)
{
    xListItem * temp_pxEventListItem;
    // transmit events from event pool to xEventList according to the xCompareFunction1
    while(listCURRENT_LIST_LENGTH( &xEventPool ) != 0)
    2df8:	f240 5308 	movw	r3, #1288	; 0x508
    2dfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e00:	681b      	ldr	r3, [r3, #0]
    2e02:	2b00      	cmp	r3, #0
    2e04:	d1ec      	bne.n	2de0 <xEventListGenericTransit+0xc>
        /*how to call this funciton: vEventListInsert( newListItem ). This function add the new item into the xEventList as default*/
        prvEventListGenericInsert1( temp_pxEventListItem ); 
    }

    // if there is only End Flag Event in xEventList, then return NULL.
    if( listCURRENT_LIST_LENGTH(&xEventList) == 1 )
    2e06:	f240 531c 	movw	r3, #1308	; 0x51c
    2e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e0e:	681b      	ldr	r3, [r3, #0]
    2e10:	2b01      	cmp	r3, #1
    2e12:	d108      	bne.n	2e26 <xEventListGenericTransit+0x52>
    {
        *pxEventListItem  = NULL;
    2e14:	687b      	ldr	r3, [r7, #4]
    2e16:	2200      	movs	r2, #0
    2e18:	601a      	str	r2, [r3, #0]
        *pxCurrentReadyList = NULL;
    2e1a:	683b      	ldr	r3, [r7, #0]
    2e1c:	2200      	movs	r2, #0
    2e1e:	601a      	str	r2, [r3, #0]
        return -1;
    2e20:	f04f 33ff 	mov.w	r3, #4294967295
    2e24:	e055      	b.n	2ed2 <xEventListGenericTransit+0xfe>
    }
        
    struct timeStamp xTimeStamp;
    portTickType xCurrentTime;
    // transmit the executable event from xEventList to xEventExecutableList 
    while( listCURRENT_LIST_LENGTH( &xEventList ) > 1 )
    2e26:	e020      	b.n	2e6a <xEventListGenericTransit+0x96>
    {
        temp_pxEventListItem = (xListItem *)xEventList.xListEnd.pxNext;
    2e28:	f240 531c 	movw	r3, #1308	; 0x51c
    2e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e30:	68db      	ldr	r3, [r3, #12]
    2e32:	61fb      	str	r3, [r7, #28]
        xTimeStamp = xEventGetxTimeStamp( (xEventHandle) (temp_pxEventListItem)->pvOwner );
    2e34:	69fb      	ldr	r3, [r7, #28]
    2e36:	68db      	ldr	r3, [r3, #12]
    2e38:	f107 0208 	add.w	r2, r7, #8
    2e3c:	4610      	mov	r0, r2
    2e3e:	4619      	mov	r1, r3
    2e40:	f7ff fe40 	bl	2ac4 <xEventGetxTimeStamp>
        xCurrentTime = xTaskGetTickCount();
    2e44:	f002 f94a 	bl	50dc <xTaskGetTickCount>
    2e48:	61b8      	str	r0, [r7, #24]

        // the event is executable
        if( xTimeStamp.xTime <= xCurrentTime )
    2e4a:	68fa      	ldr	r2, [r7, #12]
    2e4c:	69bb      	ldr	r3, [r7, #24]
    2e4e:	429a      	cmp	r2, r3
    2e50:	d80a      	bhi.n	2e68 <xEventListGenericTransit+0x94>
        {
            taskENTER_CRITICAL();
    2e52:	f002 fe77 	bl	5b44 <vPortEnterCritical>
            /* remove pxListItem from xEventList */ 
            vListRemove(temp_pxEventListItem);
    2e56:	69f8      	ldr	r0, [r7, #28]
    2e58:	f001 f8c2 	bl	3fe0 <vListRemove>
            /* insert the executable event into the xEventExecutableList*/
            prvEventListGenericInsert2(temp_pxEventListItem);
    2e5c:	69f8      	ldr	r0, [r7, #28]
    2e5e:	f7ff feff 	bl	2c60 <prvEventListGenericInsert2>
            taskEXIT_CRITICAL();
    2e62:	f002 fe85 	bl	5b70 <vPortExitCritical>
    2e66:	e000      	b.n	2e6a <xEventListGenericTransit+0x96>
        }
        else
        {
          // no executable event in xEventList
           break; 
    2e68:	e006      	b.n	2e78 <xEventListGenericTransit+0xa4>
    }
        
    struct timeStamp xTimeStamp;
    portTickType xCurrentTime;
    // transmit the executable event from xEventList to xEventExecutableList 
    while( listCURRENT_LIST_LENGTH( &xEventList ) > 1 )
    2e6a:	f240 531c 	movw	r3, #1308	; 0x51c
    2e6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e72:	681b      	ldr	r3, [r3, #0]
    2e74:	2b01      	cmp	r3, #1
    2e76:	d8d7      	bhi.n	2e28 <xEventListGenericTransit+0x54>
        }

    }

    // if no executable event exists, then return NULL and information about not time yet
    if( listCURRENT_LIST_LENGTH(& xEventExecutableList) == 1 )
    2e78:	f240 5330 	movw	r3, #1328	; 0x530
    2e7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e80:	681b      	ldr	r3, [r3, #0]
    2e82:	2b01      	cmp	r3, #1
    2e84:	d107      	bne.n	2e96 <xEventListGenericTransit+0xc2>
    {
        *pxCurrentReadyList = NULL;
    2e86:	683b      	ldr	r3, [r7, #0]
    2e88:	2200      	movs	r2, #0
    2e8a:	601a      	str	r2, [r3, #0]
        *pxEventListItem = NULL;
    2e8c:	687b      	ldr	r3, [r7, #4]
    2e8e:	2200      	movs	r2, #0
    2e90:	601a      	str	r2, [r3, #0]
        return 0;
    2e92:	2300      	movs	r3, #0
    2e94:	e01d      	b.n	2ed2 <xEventListGenericTransit+0xfe>
    }
    // transmit the first executable event from xEventExecutableList to specific xEventReadyList
    else
    {
        *pxCurrentReadyList = pxGetReadyList();
    2e96:	f7ff fe83 	bl	2ba0 <pxGetReadyList>
    2e9a:	4602      	mov	r2, r0
    2e9c:	683b      	ldr	r3, [r7, #0]
    2e9e:	601a      	str	r2, [r3, #0]
        *pxEventListItem = (xListItem *) xEventExecutableList.xListEnd.pxNext;
    2ea0:	f240 5330 	movw	r3, #1328	; 0x530
    2ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ea8:	68da      	ldr	r2, [r3, #12]
    2eaa:	687b      	ldr	r3, [r7, #4]
    2eac:	601a      	str	r2, [r3, #0]
        
        taskENTER_CRITICAL();
    2eae:	f002 fe49 	bl	5b44 <vPortEnterCritical>
        /* remove pxListItem from xEventList */ 
        vListRemove(*pxEventListItem);
    2eb2:	687b      	ldr	r3, [r7, #4]
    2eb4:	681b      	ldr	r3, [r3, #0]
    2eb6:	4618      	mov	r0, r3
    2eb8:	f001 f892 	bl	3fe0 <vListRemove>
        /* insert the pxListItem into the specified pxList */
        vListInsertEnd(*pxCurrentReadyList, *pxEventListItem);
    2ebc:	683b      	ldr	r3, [r7, #0]
    2ebe:	681a      	ldr	r2, [r3, #0]
    2ec0:	687b      	ldr	r3, [r7, #4]
    2ec2:	681b      	ldr	r3, [r3, #0]
    2ec4:	4610      	mov	r0, r2
    2ec6:	4619      	mov	r1, r3
    2ec8:	f001 f82a 	bl	3f20 <vListInsertEnd>
        taskEXIT_CRITICAL();
    2ecc:	f002 fe50 	bl	5b70 <vPortExitCritical>
    }

    return 1;
    2ed0:	2301      	movs	r3, #1
}
    2ed2:	4618      	mov	r0, r3
    2ed4:	3720      	adds	r7, #32
    2ed6:	46bd      	mov	sp, r7
    2ed8:	bd80      	pop	{r7, pc}
    2eda:	bf00      	nop

00002edc <vEventGenericReceive>:

void vEventGenericReceive( xEventHandle * pxEvent, xTaskHandle pxSource, xList * pxList )
{
    2edc:	b580      	push	{r7, lr}
    2ede:	b088      	sub	sp, #32
    2ee0:	af00      	add	r7, sp, #0
    2ee2:	60f8      	str	r0, [r7, #12]
    2ee4:	60b9      	str	r1, [r7, #8]
    2ee6:	607a      	str	r2, [r7, #4]
    xList * const pxConstList = pxList; 
    2ee8:	687b      	ldr	r3, [r7, #4]
    2eea:	61bb      	str	r3, [r7, #24]
    {
        //successful.
        //helloworld();
    }

    if( listLIST_IS_EMPTY( pxList ) )
    2eec:	687b      	ldr	r3, [r7, #4]
    2eee:	681b      	ldr	r3, [r3, #0]
    2ef0:	2b00      	cmp	r3, #0
    2ef2:	d103      	bne.n	2efc <vEventGenericReceive+0x20>
    {
        *pxEvent = NULL;
    2ef4:	68fb      	ldr	r3, [r7, #12]
    2ef6:	2200      	movs	r2, #0
    2ef8:	601a      	str	r2, [r3, #0]
        return;
    2efa:	e04d      	b.n	2f98 <vEventGenericReceive+0xbc>
    }

    volatile xListItem * pxFlag = pxConstList->xListEnd.pxNext;
    2efc:	69bb      	ldr	r3, [r7, #24]
    2efe:	68db      	ldr	r3, [r3, #12]
    2f00:	61fb      	str	r3, [r7, #28]


    taskENTER_CRITICAL();
    2f02:	f002 fe1f 	bl	5b44 <vPortEnterCritical>

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    2f06:	f002 fcb5 	bl	5874 <xTaskGetCurrentTaskHandle>
    2f0a:	6178      	str	r0, [r7, #20]

    /* look up in the specified xEventReadyList. */
    for(; pxFlag != (xListItem *) ( pxConstList->xListEnd.pxPrevious); pxFlag = pxFlag->pxNext)
    2f0c:	e01e      	b.n	2f4c <vEventGenericReceive+0x70>
    {
        if( xEventGetpxSource((xEventHandle) pxFlag->pvOwner) == pxSource && xEventGetpxDestination((xEventHandle) pxFlag->pvOwner) == pxCurrentTCBLocal )
    2f0e:	69fb      	ldr	r3, [r7, #28]
    2f10:	68db      	ldr	r3, [r3, #12]
    2f12:	4618      	mov	r0, r3
    2f14:	f7ff fdbe 	bl	2a94 <xEventGetpxSource>
    2f18:	4602      	mov	r2, r0
    2f1a:	68bb      	ldr	r3, [r7, #8]
    2f1c:	429a      	cmp	r2, r3
    2f1e:	d112      	bne.n	2f46 <vEventGenericReceive+0x6a>
    2f20:	69fb      	ldr	r3, [r7, #28]
    2f22:	68db      	ldr	r3, [r3, #12]
    2f24:	4618      	mov	r0, r3
    2f26:	f7ff fdc1 	bl	2aac <xEventGetpxDestination>
    2f2a:	4602      	mov	r2, r0
    2f2c:	697b      	ldr	r3, [r7, #20]
    2f2e:	429a      	cmp	r2, r3
    2f30:	d109      	bne.n	2f46 <vEventGenericReceive+0x6a>
        {
            *pxEvent = pxFlag->pvOwner;
    2f32:	69fb      	ldr	r3, [r7, #28]
    2f34:	68da      	ldr	r2, [r3, #12]
    2f36:	68fb      	ldr	r3, [r7, #12]
    2f38:	601a      	str	r2, [r3, #0]
            vListRemove((xListItem *)pxFlag);
    2f3a:	69f8      	ldr	r0, [r7, #28]
    2f3c:	f001 f850 	bl	3fe0 <vListRemove>
            taskEXIT_CRITICAL();
    2f40:	f002 fe16 	bl	5b70 <vPortExitCritical>
            return;
    2f44:	e028      	b.n	2f98 <vEventGenericReceive+0xbc>
    taskENTER_CRITICAL();

    xTaskHandle pxCurrentTCBLocal = xTaskGetCurrentTaskHandle();

    /* look up in the specified xEventReadyList. */
    for(; pxFlag != (xListItem *) ( pxConstList->xListEnd.pxPrevious); pxFlag = pxFlag->pxNext)
    2f46:	69fb      	ldr	r3, [r7, #28]
    2f48:	685b      	ldr	r3, [r3, #4]
    2f4a:	61fb      	str	r3, [r7, #28]
    2f4c:	69bb      	ldr	r3, [r7, #24]
    2f4e:	691a      	ldr	r2, [r3, #16]
    2f50:	69fb      	ldr	r3, [r7, #28]
    2f52:	429a      	cmp	r2, r3
    2f54:	d1db      	bne.n	2f0e <vEventGenericReceive+0x32>
            return;
        }
    }

    /* we can't forget the last one item of the list. */
    if( xEventGetpxSource((xEventHandle) pxFlag->pvOwner) == pxSource && xEventGetpxDestination((xEventHandle) pxFlag->pvOwner) == pxCurrentTCBLocal )
    2f56:	69fb      	ldr	r3, [r7, #28]
    2f58:	68db      	ldr	r3, [r3, #12]
    2f5a:	4618      	mov	r0, r3
    2f5c:	f7ff fd9a 	bl	2a94 <xEventGetpxSource>
    2f60:	4602      	mov	r2, r0
    2f62:	68bb      	ldr	r3, [r7, #8]
    2f64:	429a      	cmp	r2, r3
    2f66:	d112      	bne.n	2f8e <vEventGenericReceive+0xb2>
    2f68:	69fb      	ldr	r3, [r7, #28]
    2f6a:	68db      	ldr	r3, [r3, #12]
    2f6c:	4618      	mov	r0, r3
    2f6e:	f7ff fd9d 	bl	2aac <xEventGetpxDestination>
    2f72:	4602      	mov	r2, r0
    2f74:	697b      	ldr	r3, [r7, #20]
    2f76:	429a      	cmp	r2, r3
    2f78:	d109      	bne.n	2f8e <vEventGenericReceive+0xb2>
    {
        *pxEvent = pxFlag->pvOwner;
    2f7a:	69fb      	ldr	r3, [r7, #28]
    2f7c:	68da      	ldr	r2, [r3, #12]
    2f7e:	68fb      	ldr	r3, [r7, #12]
    2f80:	601a      	str	r2, [r3, #0]
        vListRemove((xListItem *)pxFlag);
    2f82:	69f8      	ldr	r0, [r7, #28]
    2f84:	f001 f82c 	bl	3fe0 <vListRemove>
        taskEXIT_CRITICAL();
    2f88:	f002 fdf2 	bl	5b70 <vPortExitCritical>
        return;
    2f8c:	e004      	b.n	2f98 <vEventGenericReceive+0xbc>
    }
    else
    {
        // cannot find the specified event.
        *pxEvent = NULL;
    2f8e:	68fb      	ldr	r3, [r7, #12]
    2f90:	2200      	movs	r2, #0
    2f92:	601a      	str	r2, [r3, #0]
    }

    taskEXIT_CRITICAL();
    2f94:	f002 fdec 	bl	5b70 <vPortExitCritical>
}
    2f98:	3720      	adds	r7, #32
    2f9a:	46bd      	mov	sp, r7
    2f9c:	bd80      	pop	{r7, pc}
    2f9e:	bf00      	nop

00002fa0 <vEventGenericDelete>:

void vEventGenericDelete( xEventHandle xEvent)
{
    2fa0:	b580      	push	{r7, lr}
    2fa2:	b082      	sub	sp, #8
    2fa4:	af00      	add	r7, sp, #0
    2fa6:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
    2fa8:	f002 fdcc 	bl	5b44 <vPortEnterCritical>

    vPortFree( xEvent );
    2fac:	6878      	ldr	r0, [r7, #4]
    2fae:	f002 ff05 	bl	5dbc <vPortFree>

    taskEXIT_CRITICAL();
    2fb2:	f002 fddd 	bl	5b70 <vPortExitCritical>
}
    2fb6:	3708      	adds	r7, #8
    2fb8:	46bd      	mov	sp, r7
    2fba:	bd80      	pop	{r7, pc}

00002fbc <vSemaphoreInitialise>:
// record the period of Task
extern portTickType xPeriodOfTask[NUMBEROFTASK];

/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    2fbc:	b580      	push	{r7, lr}
    2fbe:	b082      	sub	sp, #8
    2fc0:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    2fc2:	2300      	movs	r3, #0
    2fc4:	607b      	str	r3, [r7, #4]
    2fc6:	e033      	b.n	3030 <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
    2fc8:	2001      	movs	r0, #1
    2fca:	2100      	movs	r1, #0
    2fcc:	2203      	movs	r2, #3
    2fce:	f001 f87d 	bl	40cc <xQueueGenericCreate>
    2fd2:	4601      	mov	r1, r0
    2fd4:	f640 3368 	movw	r3, #2920	; 0xb68
    2fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fdc:	687a      	ldr	r2, [r7, #4]
    2fde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    2fe2:	f640 3368 	movw	r3, #2920	; 0xb68
    2fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fea:	687a      	ldr	r2, [r7, #4]
    2fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2ff0:	2b00      	cmp	r3, #0
    2ff2:	d00c      	beq.n	300e <vSemaphoreInitialise+0x52>
    2ff4:	f640 3368 	movw	r3, #2920	; 0xb68
    2ff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ffc:	687a      	ldr	r2, [r7, #4]
    2ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3002:	4618      	mov	r0, r3
    3004:	2100      	movs	r1, #0
    3006:	2200      	movs	r2, #0
    3008:	2300      	movs	r3, #0
    300a:	f001 f8ed 	bl	41e8 <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    300e:	f640 3368 	movw	r3, #2920	; 0xb68
    3012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3016:	687a      	ldr	r2, [r7, #4]
    3018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    301c:	4618      	mov	r0, r3
    301e:	2100      	movs	r1, #0
    3020:	f04f 32ff 	mov.w	r2, #4294967295
    3024:	2300      	movs	r3, #0
    3026:	f001 f9a5 	bl	4374 <xQueueGenericReceive>
/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    302a:	687b      	ldr	r3, [r7, #4]
    302c:	3301      	adds	r3, #1
    302e:	607b      	str	r3, [r7, #4]
    3030:	687b      	ldr	r3, [r7, #4]
    3032:	2b22      	cmp	r3, #34	; 0x22
    3034:	ddc8      	ble.n	2fc8 <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    }
}
    3036:	3708      	adds	r7, #8
    3038:	46bd      	mov	sp, r7
    303a:	bd80      	pop	{r7, pc}

0000303c <vParameterInitialise>:
/*
 * Set all the parameters of S-Servants.
 *
 * */
void vParameterInitialise()
{
    303c:	b480      	push	{r7}
    303e:	b085      	sub	sp, #20
    3040:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    3042:	2300      	movs	r3, #0
    3044:	60fb      	str	r3, [r7, #12]
    3046:	e073      	b.n	3130 <vParameterInitialise+0xf4>
    {
        pvParameters[i].xMyFlag = i;
    3048:	f240 5364 	movw	r3, #1380	; 0x564
    304c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3050:	68fa      	ldr	r2, [r7, #12]
    3052:	212c      	movs	r1, #44	; 0x2c
    3054:	fb01 f202 	mul.w	r2, r1, r2
    3058:	4413      	add	r3, r2
    305a:	68fa      	ldr	r2, [r7, #12]
    305c:	601a      	str	r2, [r3, #0]
        pvParameters[i].xNumOfIn = 0;
    305e:	f240 5364 	movw	r3, #1380	; 0x564
    3062:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3066:	68fa      	ldr	r2, [r7, #12]
    3068:	212c      	movs	r1, #44	; 0x2c
    306a:	fb01 f202 	mul.w	r2, r1, r2
    306e:	4413      	add	r3, r2
    3070:	3304      	adds	r3, #4
    3072:	2200      	movs	r2, #0
    3074:	601a      	str	r2, [r3, #0]
        pvParameters[i].xNumOfOut = 0;
    3076:	f240 5364 	movw	r3, #1380	; 0x564
    307a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    307e:	68fa      	ldr	r2, [r7, #12]
    3080:	212c      	movs	r1, #44	; 0x2c
    3082:	fb01 f202 	mul.w	r2, r1, r2
    3086:	4413      	add	r3, r2
    3088:	3308      	adds	r3, #8
    308a:	2200      	movs	r2, #0
    308c:	601a      	str	r2, [r3, #0]
        pvParameters[i].xLet = xLetOfServant[i]/portTICK_RATE_MS;
    308e:	f240 0394 	movw	r3, #148	; 0x94
    3092:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3096:	68fa      	ldr	r2, [r7, #12]
    3098:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    309c:	f240 5364 	movw	r3, #1380	; 0x564
    30a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30a4:	68f9      	ldr	r1, [r7, #12]
    30a6:	202c      	movs	r0, #44	; 0x2c
    30a8:	fb00 f101 	mul.w	r1, r0, r1
    30ac:	440b      	add	r3, r1
    30ae:	331c      	adds	r3, #28
    30b0:	601a      	str	r2, [r3, #0]
        pvParameters[i].xFp = xServantTable[i];
    30b2:	f240 3354 	movw	r3, #852	; 0x354
    30b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30ba:	68fa      	ldr	r2, [r7, #12]
    30bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    30c0:	f240 5364 	movw	r3, #1380	; 0x564
    30c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30c8:	68f9      	ldr	r1, [r7, #12]
    30ca:	202c      	movs	r0, #44	; 0x2c
    30cc:	fb00 f101 	mul.w	r1, r0, r1
    30d0:	440b      	add	r3, r1
    30d2:	3320      	adds	r3, #32
    30d4:	601a      	str	r2, [r3, #0]
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
    30d6:	f240 1320 	movw	r3, #288	; 0x120
    30da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30de:	68fa      	ldr	r2, [r7, #12]
    30e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    30e4:	f240 5364 	movw	r3, #1380	; 0x564
    30e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    30ec:	68f9      	ldr	r1, [r7, #12]
    30ee:	202c      	movs	r0, #44	; 0x2c
    30f0:	fb00 f101 	mul.w	r1, r0, r1
    30f4:	440b      	add	r3, r1
    30f6:	3328      	adds	r3, #40	; 0x28
    30f8:	601a      	str	r2, [r3, #0]
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    30fa:	f240 1320 	movw	r3, #288	; 0x120
    30fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3102:	68fa      	ldr	r2, [r7, #12]
    3104:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3108:	f240 032c 	movw	r3, #44	; 0x2c
    310c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3110:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3114:	f240 5364 	movw	r3, #1380	; 0x564
    3118:	f2c2 0300 	movt	r3, #8192	; 0x2000
    311c:	68f9      	ldr	r1, [r7, #12]
    311e:	202c      	movs	r0, #44	; 0x2c
    3120:	fb00 f101 	mul.w	r1, r0, r1
    3124:	440b      	add	r3, r1
    3126:	3324      	adds	r3, #36	; 0x24
    3128:	601a      	str	r2, [r3, #0]
{
    portBASE_TYPE i;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    312a:	68fb      	ldr	r3, [r7, #12]
    312c:	3301      	adds	r3, #1
    312e:	60fb      	str	r3, [r7, #12]
    3130:	68fb      	ldr	r3, [r7, #12]
    3132:	2b22      	cmp	r3, #34	; 0x22
    3134:	dd88      	ble.n	3048 <vParameterInitialise+0xc>
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3136:	2300      	movs	r3, #0
    3138:	60fb      	str	r3, [r7, #12]
    313a:	e080      	b.n	323e <vParameterInitialise+0x202>
    {
        xSource = xRelations.xRelation[i].xInFlag;
    313c:	f240 12ac 	movw	r2, #428	; 0x1ac
    3140:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3144:	68f9      	ldr	r1, [r7, #12]
    3146:	460b      	mov	r3, r1
    3148:	005b      	lsls	r3, r3, #1
    314a:	440b      	add	r3, r1
    314c:	009b      	lsls	r3, r3, #2
    314e:	4413      	add	r3, r2
    3150:	3304      	adds	r3, #4
    3152:	681b      	ldr	r3, [r3, #0]
    3154:	60bb      	str	r3, [r7, #8]
        xDest   = xRelations.xRelation[i].xOutFlag;
    3156:	f240 12ac 	movw	r2, #428	; 0x1ac
    315a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    315e:	68f9      	ldr	r1, [r7, #12]
    3160:	460b      	mov	r3, r1
    3162:	005b      	lsls	r3, r3, #1
    3164:	440b      	add	r3, r1
    3166:	009b      	lsls	r3, r3, #2
    3168:	4413      	add	r3, r2
    316a:	3308      	adds	r3, #8
    316c:	681b      	ldr	r3, [r3, #0]
    316e:	607b      	str	r3, [r7, #4]

        pvParameters[xSource].xOutFlag[pvParameters[xSource].xNumOfOut] = xDest;
    3170:	f240 5364 	movw	r3, #1380	; 0x564
    3174:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3178:	68ba      	ldr	r2, [r7, #8]
    317a:	212c      	movs	r1, #44	; 0x2c
    317c:	fb01 f202 	mul.w	r2, r1, r2
    3180:	4413      	add	r3, r2
    3182:	3308      	adds	r3, #8
    3184:	6818      	ldr	r0, [r3, #0]
    3186:	f240 5264 	movw	r2, #1380	; 0x564
    318a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    318e:	68b9      	ldr	r1, [r7, #8]
    3190:	460b      	mov	r3, r1
    3192:	009b      	lsls	r3, r3, #2
    3194:	440b      	add	r3, r1
    3196:	005b      	lsls	r3, r3, #1
    3198:	440b      	add	r3, r1
    319a:	4403      	add	r3, r0
    319c:	3304      	adds	r3, #4
    319e:	009b      	lsls	r3, r3, #2
    31a0:	4413      	add	r3, r2
    31a2:	687a      	ldr	r2, [r7, #4]
    31a4:	605a      	str	r2, [r3, #4]
        pvParameters[xSource].xNumOfOut ++;
    31a6:	f240 5364 	movw	r3, #1380	; 0x564
    31aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31ae:	68ba      	ldr	r2, [r7, #8]
    31b0:	212c      	movs	r1, #44	; 0x2c
    31b2:	fb01 f202 	mul.w	r2, r1, r2
    31b6:	4413      	add	r3, r2
    31b8:	3308      	adds	r3, #8
    31ba:	681b      	ldr	r3, [r3, #0]
    31bc:	1c5a      	adds	r2, r3, #1
    31be:	f240 5364 	movw	r3, #1380	; 0x564
    31c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31c6:	68b9      	ldr	r1, [r7, #8]
    31c8:	202c      	movs	r0, #44	; 0x2c
    31ca:	fb00 f101 	mul.w	r1, r0, r1
    31ce:	440b      	add	r3, r1
    31d0:	3308      	adds	r3, #8
    31d2:	601a      	str	r2, [r3, #0]

        pvParameters[xDest].xInFlag[pvParameters[xDest].xNumOfIn] = xSource;
    31d4:	f240 5364 	movw	r3, #1380	; 0x564
    31d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    31dc:	687a      	ldr	r2, [r7, #4]
    31de:	212c      	movs	r1, #44	; 0x2c
    31e0:	fb01 f202 	mul.w	r2, r1, r2
    31e4:	4413      	add	r3, r2
    31e6:	3304      	adds	r3, #4
    31e8:	6818      	ldr	r0, [r3, #0]
    31ea:	f240 5264 	movw	r2, #1380	; 0x564
    31ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    31f2:	6879      	ldr	r1, [r7, #4]
    31f4:	460b      	mov	r3, r1
    31f6:	009b      	lsls	r3, r3, #2
    31f8:	440b      	add	r3, r1
    31fa:	005b      	lsls	r3, r3, #1
    31fc:	440b      	add	r3, r1
    31fe:	4403      	add	r3, r0
    3200:	3302      	adds	r3, #2
    3202:	009b      	lsls	r3, r3, #2
    3204:	4413      	add	r3, r2
    3206:	68ba      	ldr	r2, [r7, #8]
    3208:	605a      	str	r2, [r3, #4]
        pvParameters[xDest].xNumOfIn ++;
    320a:	f240 5364 	movw	r3, #1380	; 0x564
    320e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3212:	687a      	ldr	r2, [r7, #4]
    3214:	212c      	movs	r1, #44	; 0x2c
    3216:	fb01 f202 	mul.w	r2, r1, r2
    321a:	4413      	add	r3, r2
    321c:	3304      	adds	r3, #4
    321e:	681b      	ldr	r3, [r3, #0]
    3220:	1c5a      	adds	r2, r3, #1
    3222:	f240 5364 	movw	r3, #1380	; 0x564
    3226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    322a:	6879      	ldr	r1, [r7, #4]
    322c:	202c      	movs	r0, #44	; 0x2c
    322e:	fb00 f101 	mul.w	r1, r0, r1
    3232:	440b      	add	r3, r1
    3234:	3304      	adds	r3, #4
    3236:	601a      	str	r2, [r3, #0]
        pvParameters[i].xTaskFlag = xTaskOfServant[i]; 
        pvParameters[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]]/portTICK_RATE_MS;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3238:	68fb      	ldr	r3, [r7, #12]
    323a:	3301      	adds	r3, #1
    323c:	60fb      	str	r3, [r7, #12]
    323e:	f240 13ac 	movw	r3, #428	; 0x1ac
    3242:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3246:	681a      	ldr	r2, [r3, #0]
    3248:	68fb      	ldr	r3, [r7, #12]
    324a:	429a      	cmp	r2, r3
    324c:	f73f af76 	bgt.w	313c <vParameterInitialise+0x100>
        pvParameters[xSource].xNumOfOut ++;

        pvParameters[xDest].xInFlag[pvParameters[xDest].xNumOfIn] = xSource;
        pvParameters[xDest].xNumOfIn ++;
    }
}
    3250:	3714      	adds	r7, #20
    3252:	46bd      	mov	sp, r7
    3254:	f85d 7b04 	ldr.w	r7, [sp], #4
    3258:	4770      	bx	lr
    325a:	bf00      	nop

0000325c <vTaskDelayLET>:

void vTaskDelayLET()
{
    325c:	b580      	push	{r7, lr}
    325e:	b084      	sub	sp, #16
    3260:	af00      	add	r7, sp, #0
    xTaskHandle pxTaskCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    3262:	f002 fb07 	bl	5874 <xTaskGetCurrentTaskHandle>
    3266:	60b8      	str	r0, [r7, #8]
    portTickType xStartTime = xTaskGetxStartTime( pxTaskCurrentTCBLocal );
    3268:	68b8      	ldr	r0, [r7, #8]
    326a:	f002 fbb9 	bl	59e0 <xTaskGetxStartTime>
    326e:	6078      	str	r0, [r7, #4]
    portTickType xOutputTime = xTaskGetxLet( pxTaskCurrentTCBLocal ) + xStartTime;
    3270:	68b8      	ldr	r0, [r7, #8]
    3272:	f002 fbc1 	bl	59f8 <xTaskGetxLet>
    3276:	4602      	mov	r2, r0
    3278:	687b      	ldr	r3, [r7, #4]
    327a:	4413      	add	r3, r2
    327c:	603b      	str	r3, [r7, #0]
    portTickType xCurrentTime = xTaskGetTickCount();
    327e:	f001 ff2d 	bl	50dc <xTaskGetTickCount>
    3282:	60f8      	str	r0, [r7, #12]

    while( xCurrentTime <  xOutputTime)
    3284:	e002      	b.n	328c <vTaskDelayLET+0x30>
    {
        xCurrentTime = xTaskGetTickCount();
    3286:	f001 ff29 	bl	50dc <xTaskGetTickCount>
    328a:	60f8      	str	r0, [r7, #12]
    xTaskHandle pxTaskCurrentTCBLocal = xTaskGetCurrentTaskHandle();
    portTickType xStartTime = xTaskGetxStartTime( pxTaskCurrentTCBLocal );
    portTickType xOutputTime = xTaskGetxLet( pxTaskCurrentTCBLocal ) + xStartTime;
    portTickType xCurrentTime = xTaskGetTickCount();

    while( xCurrentTime <  xOutputTime)
    328c:	68fa      	ldr	r2, [r7, #12]
    328e:	683b      	ldr	r3, [r7, #0]
    3290:	429a      	cmp	r2, r3
    3292:	d3f8      	bcc.n	3286 <vTaskDelayLET+0x2a>
    {
        xCurrentTime = xTaskGetTickCount();
    }
}
    3294:	3710      	adds	r7, #16
    3296:	46bd      	mov	sp, r7
    3298:	bd80      	pop	{r7, pc}
    329a:	bf00      	nop

0000329c <vEventReceiveAll>:

// receive all Events from sources servant, and return them through the point
void vEventReceiveAll( void * pvParameter, xEventHandle *pxEvent )
{
    329c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    32a0:	b088      	sub	sp, #32
    32a2:	af00      	add	r7, sp, #0
    32a4:	6078      	str	r0, [r7, #4]
    32a6:	6039      	str	r1, [r7, #0]
    32a8:	4669      	mov	r1, sp
    32aa:	4688      	mov	r8, r1
    portBASE_TYPE i ;

    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;
    32ac:	6879      	ldr	r1, [r7, #4]
    32ae:	6849      	ldr	r1, [r1, #4]
    32b0:	61b9      	str	r1, [r7, #24]
    portBASE_TYPE xInFlag[NUM]; 
    32b2:	69be      	ldr	r6, [r7, #24]
    32b4:	1e71      	subs	r1, r6, #1
    32b6:	6179      	str	r1, [r7, #20]
    32b8:	4631      	mov	r1, r6
    32ba:	4608      	mov	r0, r1
    32bc:	f04f 0100 	mov.w	r1, #0
    32c0:	014d      	lsls	r5, r1, #5
    32c2:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    32c6:	0144      	lsls	r4, r0, #5
    32c8:	4631      	mov	r1, r6
    32ca:	4608      	mov	r0, r1
    32cc:	f04f 0100 	mov.w	r1, #0
    32d0:	014b      	lsls	r3, r1, #5
    32d2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    32d6:	0142      	lsls	r2, r0, #5
    32d8:	4633      	mov	r3, r6
    32da:	009b      	lsls	r3, r3, #2
    32dc:	3303      	adds	r3, #3
    32de:	3307      	adds	r3, #7
    32e0:	08db      	lsrs	r3, r3, #3
    32e2:	00db      	lsls	r3, r3, #3
    32e4:	ebad 0d03 	sub.w	sp, sp, r3
    32e8:	466b      	mov	r3, sp
    32ea:	3303      	adds	r3, #3
    32ec:	089b      	lsrs	r3, r3, #2
    32ee:	009b      	lsls	r3, r3, #2
    32f0:	613b      	str	r3, [r7, #16]
    portBASE_TYPE xMyFlag = ((struct xParam *) pvParameter)->xMyFlag;
    32f2:	687b      	ldr	r3, [r7, #4]
    32f4:	681b      	ldr	r3, [r3, #0]
    32f6:	60fb      	str	r3, [r7, #12]
    portTickType xCurrentTime;
   
    xSemaphoreTake( xBinarySemaphore[xMyFlag],portMAX_DELAY );
    32f8:	f640 3368 	movw	r3, #2920	; 0xb68
    32fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3300:	68fa      	ldr	r2, [r7, #12]
    3302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3306:	4618      	mov	r0, r3
    3308:	2100      	movs	r1, #0
    330a:	f04f 32ff 	mov.w	r2, #4294967295
    330e:	2300      	movs	r3, #0
    3310:	f001 f830 	bl	4374 <xQueueGenericReceive>

    xCurrentTime = xTaskGetTickCount(); 
    3314:	f001 fee2 	bl	50dc <xTaskGetTickCount>
    3318:	60b8      	str	r0, [r7, #8]
    vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    331a:	f640 33f4 	movw	r3, #3060	; 0xbf4
    331e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3322:	68fa      	ldr	r2, [r7, #12]
    3324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3328:	4618      	mov	r0, r3
    332a:	68b9      	ldr	r1, [r7, #8]
    332c:	f002 fb70 	bl	5a10 <vTaskSetxStartTime>

    for( i = 0; i < NUM; i ++ )
    3330:	2300      	movs	r3, #0
    3332:	61fb      	str	r3, [r7, #28]
    3334:	e024      	b.n	3380 <vEventReceiveAll+0xe4>
    {
        // get all the in flag
        xInFlag[i] = ((struct xParam *) pvParameter)->xInFlag[i];
    3336:	687a      	ldr	r2, [r7, #4]
    3338:	69fb      	ldr	r3, [r7, #28]
    333a:	3302      	adds	r3, #2
    333c:	009b      	lsls	r3, r3, #2
    333e:	4413      	add	r3, r2
    3340:	6859      	ldr	r1, [r3, #4]
    3342:	693b      	ldr	r3, [r7, #16]
    3344:	69fa      	ldr	r2, [r7, #28]
    3346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        // receive all events which are created by source servants and return 
        // them back to current Servant through the inout point
        vEventReceive( &pxEvent[i], xTaskOfHandle[xInFlag[i]], pxCurrentReadyList );
    334a:	69fb      	ldr	r3, [r7, #28]
    334c:	009b      	lsls	r3, r3, #2
    334e:	683a      	ldr	r2, [r7, #0]
    3350:	18d1      	adds	r1, r2, r3
    3352:	693b      	ldr	r3, [r7, #16]
    3354:	69fa      	ldr	r2, [r7, #28]
    3356:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    335a:	f640 33f4 	movw	r3, #3060	; 0xbf4
    335e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3362:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3366:	f240 5360 	movw	r3, #1376	; 0x560
    336a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    336e:	681b      	ldr	r3, [r3, #0]
    3370:	4608      	mov	r0, r1
    3372:	4611      	mov	r1, r2
    3374:	461a      	mov	r2, r3
    3376:	f7ff fdb1 	bl	2edc <vEventGenericReceive>
    xSemaphoreTake( xBinarySemaphore[xMyFlag],portMAX_DELAY );

    xCurrentTime = xTaskGetTickCount(); 
    vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );

    for( i = 0; i < NUM; i ++ )
    337a:	69fb      	ldr	r3, [r7, #28]
    337c:	3301      	adds	r3, #1
    337e:	61fb      	str	r3, [r7, #28]
    3380:	69fa      	ldr	r2, [r7, #28]
    3382:	69bb      	ldr	r3, [r7, #24]
    3384:	429a      	cmp	r2, r3
    3386:	dbd6      	blt.n	3336 <vEventReceiveAll+0x9a>
    3388:	46c5      	mov	sp, r8
        xInFlag[i] = ((struct xParam *) pvParameter)->xInFlag[i];
        // receive all events which are created by source servants and return 
        // them back to current Servant through the inout point
        vEventReceive( &pxEvent[i], xTaskOfHandle[xInFlag[i]], pxCurrentReadyList );
    }
}
    338a:	3720      	adds	r7, #32
    338c:	46bd      	mov	sp, r7
    338e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3392:	bf00      	nop

00003394 <vEventDeleteAll>:

void vEventDeleteAll( void * pvParameter, xEventHandle * pxEvent )
{
    3394:	b580      	push	{r7, lr}
    3396:	b084      	sub	sp, #16
    3398:	af00      	add	r7, sp, #0
    339a:	6078      	str	r0, [r7, #4]
    339c:	6039      	str	r1, [r7, #0]
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;
    339e:	687b      	ldr	r3, [r7, #4]
    33a0:	685b      	ldr	r3, [r3, #4]
    33a2:	60bb      	str	r3, [r7, #8]

    for( i = 0; i < NUM; ++i )
    33a4:	2300      	movs	r3, #0
    33a6:	60fb      	str	r3, [r7, #12]
    33a8:	e00a      	b.n	33c0 <vEventDeleteAll+0x2c>
    {
        vEventDelete( pxEvent[i] );
    33aa:	68fb      	ldr	r3, [r7, #12]
    33ac:	009b      	lsls	r3, r3, #2
    33ae:	683a      	ldr	r2, [r7, #0]
    33b0:	4413      	add	r3, r2
    33b2:	681b      	ldr	r3, [r3, #0]
    33b4:	4618      	mov	r0, r3
    33b6:	f7ff fdf3 	bl	2fa0 <vEventGenericDelete>
void vEventDeleteAll( void * pvParameter, xEventHandle * pxEvent )
{
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfIn;

    for( i = 0; i < NUM; ++i )
    33ba:	68fb      	ldr	r3, [r7, #12]
    33bc:	3301      	adds	r3, #1
    33be:	60fb      	str	r3, [r7, #12]
    33c0:	68fa      	ldr	r2, [r7, #12]
    33c2:	68bb      	ldr	r3, [r7, #8]
    33c4:	429a      	cmp	r2, r3
    33c6:	dbf0      	blt.n	33aa <vEventDeleteAll+0x16>
    {
        vEventDelete( pxEvent[i] );
    }
}
    33c8:	3710      	adds	r7, #16
    33ca:	46bd      	mov	sp, r7
    33cc:	bd80      	pop	{r7, pc}
    33ce:	bf00      	nop

000033d0 <vEventCreateAll>:


void vEventCreateAll( void * pvParameter, struct eventData *xDatas )
{
    33d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    33d4:	b08a      	sub	sp, #40	; 0x28
    33d6:	af02      	add	r7, sp, #8
    33d8:	6078      	str	r0, [r7, #4]
    33da:	6039      	str	r1, [r7, #0]
    33dc:	4669      	mov	r1, sp
    33de:	4688      	mov	r8, r1
    portBASE_TYPE i ;
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfOut;
    33e0:	6879      	ldr	r1, [r7, #4]
    33e2:	6889      	ldr	r1, [r1, #8]
    33e4:	61b9      	str	r1, [r7, #24]
    portBASE_TYPE xMyFlag = ((struct xParam *)pvParameter)->xMyFlag;
    33e6:	6879      	ldr	r1, [r7, #4]
    33e8:	6809      	ldr	r1, [r1, #0]
    33ea:	6179      	str	r1, [r7, #20]
    portTickType xPeriod = ((struct xParam *) pvParameter)->xPeriod;
    33ec:	6879      	ldr	r1, [r7, #4]
    33ee:	6a49      	ldr	r1, [r1, #36]	; 0x24
    33f0:	6139      	str	r1, [r7, #16]
    portBASE_TYPE xFlags[NUM];
    33f2:	69be      	ldr	r6, [r7, #24]
    33f4:	1e71      	subs	r1, r6, #1
    33f6:	60f9      	str	r1, [r7, #12]
    33f8:	4631      	mov	r1, r6
    33fa:	4608      	mov	r0, r1
    33fc:	f04f 0100 	mov.w	r1, #0
    3400:	014d      	lsls	r5, r1, #5
    3402:	ea45 65d0 	orr.w	r5, r5, r0, lsr #27
    3406:	0144      	lsls	r4, r0, #5
    3408:	4631      	mov	r1, r6
    340a:	4608      	mov	r0, r1
    340c:	f04f 0100 	mov.w	r1, #0
    3410:	014b      	lsls	r3, r1, #5
    3412:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    3416:	0142      	lsls	r2, r0, #5
    3418:	4633      	mov	r3, r6
    341a:	009b      	lsls	r3, r3, #2
    341c:	3303      	adds	r3, #3
    341e:	3307      	adds	r3, #7
    3420:	08db      	lsrs	r3, r3, #3
    3422:	00db      	lsls	r3, r3, #3
    3424:	ebad 0d03 	sub.w	sp, sp, r3
    3428:	ab02      	add	r3, sp, #8
    342a:	3303      	adds	r3, #3
    342c:	089b      	lsrs	r3, r3, #2
    342e:	009b      	lsls	r3, r3, #2
    3430:	60bb      	str	r3, [r7, #8]

    for( i = 0; i < NUM; i ++ )
    3432:	2300      	movs	r3, #0
    3434:	61fb      	str	r3, [r7, #28]
    3436:	e033      	b.n	34a0 <vEventCreateAll+0xd0>
    {
        // get all flags of destination servants
        xFlags[i] = ((struct xParam *) pvParameter)->xOutFlag[i]; 
    3438:	687a      	ldr	r2, [r7, #4]
    343a:	69fb      	ldr	r3, [r7, #28]
    343c:	3304      	adds	r3, #4
    343e:	009b      	lsls	r3, r3, #2
    3440:	4413      	add	r3, r2
    3442:	6859      	ldr	r1, [r3, #4]
    3444:	68bb      	ldr	r3, [r7, #8]
    3446:	69fa      	ldr	r2, [r7, #28]
    3448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        // if current servant is the last one of task, then the event will be proceeded at the deadline
        if( xFlags[i] <= xMyFlag )
    344c:	68bb      	ldr	r3, [r7, #8]
    344e:	69fa      	ldr	r2, [r7, #28]
    3450:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3454:	697b      	ldr	r3, [r7, #20]
    3456:	429a      	cmp	r2, r3
    3458:	dc06      	bgt.n	3468 <vEventCreateAll+0x98>
        {
            xDatas[i].IS_LAST_SERVANT = 1;
    345a:	69fb      	ldr	r3, [r7, #28]
    345c:	011b      	lsls	r3, r3, #4
    345e:	683a      	ldr	r2, [r7, #0]
    3460:	4413      	add	r3, r2
    3462:	2201      	movs	r2, #1
    3464:	609a      	str	r2, [r3, #8]
    3466:	e005      	b.n	3474 <vEventCreateAll+0xa4>
        }
        else
        {
            xDatas[i].IS_LAST_SERVANT = 0;
    3468:	69fb      	ldr	r3, [r7, #28]
    346a:	011b      	lsls	r3, r3, #4
    346c:	683a      	ldr	r2, [r7, #0]
    346e:	4413      	add	r3, r2
    3470:	2200      	movs	r2, #0
    3472:	609a      	str	r2, [r3, #8]
        }
        // create events which would be sent to destination servants.
        vEventCreate(xTaskOfHandle[xFlags[i]], xDatas[i]) ;
    3474:	68bb      	ldr	r3, [r7, #8]
    3476:	69fa      	ldr	r2, [r7, #28]
    3478:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    347c:	f640 33f4 	movw	r3, #3060	; 0xbf4
    3480:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3484:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    3488:	69fb      	ldr	r3, [r7, #28]
    348a:	011b      	lsls	r3, r3, #4
    348c:	683a      	ldr	r2, [r7, #0]
    348e:	4413      	add	r3, r2
    3490:	68da      	ldr	r2, [r3, #12]
    3492:	9200      	str	r2, [sp, #0]
    3494:	cb0e      	ldmia	r3, {r1, r2, r3}
    3496:	f7ff fc45 	bl	2d24 <vEventGenericCreate>
    portBASE_TYPE NUM = ((struct xParam *) pvParameter)->xNumOfOut;
    portBASE_TYPE xMyFlag = ((struct xParam *)pvParameter)->xMyFlag;
    portTickType xPeriod = ((struct xParam *) pvParameter)->xPeriod;
    portBASE_TYPE xFlags[NUM];

    for( i = 0; i < NUM; i ++ )
    349a:	69fb      	ldr	r3, [r7, #28]
    349c:	3301      	adds	r3, #1
    349e:	61fb      	str	r3, [r7, #28]
    34a0:	69fa      	ldr	r2, [r7, #28]
    34a2:	69bb      	ldr	r3, [r7, #24]
    34a4:	429a      	cmp	r2, r3
    34a6:	dbc7      	blt.n	3438 <vEventCreateAll+0x68>
    34a8:	46c5      	mov	sp, r8
            xDatas[i].IS_LAST_SERVANT = 0;
        }
        // create events which would be sent to destination servants.
        vEventCreate(xTaskOfHandle[xFlags[i]], xDatas[i]) ;
    }
}
    34aa:	3720      	adds	r7, #32
    34ac:	46bd      	mov	sp, r7
    34ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    34b2:	bf00      	nop

000034b4 <vSensor>:
*
* @param pvParameter is parameter from programmer.
*
* */
void vSensor( void * pvParameter )
{
    34b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34b8:	b095      	sub	sp, #84	; 0x54
    34ba:	af00      	add	r7, sp, #0
    34bc:	60f8      	str	r0, [r7, #12]
    34be:	466b      	mov	r3, sp
    34c0:	461e      	mov	r6, r3
    portTickType xCurrentTime;

    portBASE_TYPE i;
    portBASE_TYPE IS_FIRST_TIME_TO_EXE = 1;
    34c2:	2301      	movs	r3, #1
    34c4:	647b      	str	r3, [r7, #68]	; 0x44

    /* store the paramter into stack of servant */
    void * pvMyParameter = pvParameter;
    34c6:	68fb      	ldr	r3, [r7, #12]
    34c8:	63bb      	str	r3, [r7, #56]	; 0x38

    portBASE_TYPE NUM = ((struct xParam *) pvMyParameter)->xNumOfOut;
    34ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    34cc:	689b      	ldr	r3, [r3, #8]
    34ce:	637b      	str	r3, [r7, #52]	; 0x34
    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    34d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    34d2:	681b      	ldr	r3, [r3, #0]
    34d4:	633b      	str	r3, [r7, #48]	; 0x30
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    34d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    34d8:	69db      	ldr	r3, [r3, #28]
    34da:	62fb      	str	r3, [r7, #44]	; 0x2c
    portTickType xPeriod = ((struct xParam *) pvMyParameter)->xPeriod;
    34dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    34de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    34e0:	62bb      	str	r3, [r7, #40]	; 0x28
    pvServantFunType xMyFun = ((struct xParam *) pvMyParameter)->xFp;
    34e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    34e4:	6a1b      	ldr	r3, [r3, #32]
    34e6:	627b      	str	r3, [r7, #36]	; 0x24

    portBASE_TYPE xCount = 1;
    34e8:	2301      	movs	r3, #1
    34ea:	643b      	str	r3, [r7, #64]	; 0x40
    portTickType deadline = xCount * xPeriod;
    34ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    34ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
    34f0:	fb02 f303 	mul.w	r3, r2, r3
    34f4:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* set the LET of Servant when it is created */
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    34f6:	f640 33f4 	movw	r3, #3060	; 0xbf4
    34fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3504:	4618      	mov	r0, r3
    3506:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3508:	f002 fa90 	bl	5a2c <vTaskSetxLet>
    
    /* receive the events created by the last servant of this task. */
    xEventHandle pxEvent[NUM];
    350c:	6b79      	ldr	r1, [r7, #52]	; 0x34
    350e:	1e4b      	subs	r3, r1, #1
    3510:	623b      	str	r3, [r7, #32]
    3512:	460b      	mov	r3, r1
    3514:	461a      	mov	r2, r3
    3516:	f04f 0300 	mov.w	r3, #0
    351a:	0158      	lsls	r0, r3, #5
    351c:	6078      	str	r0, [r7, #4]
    351e:	6878      	ldr	r0, [r7, #4]
    3520:	ea40 60d2 	orr.w	r0, r0, r2, lsr #27
    3524:	6078      	str	r0, [r7, #4]
    3526:	0150      	lsls	r0, r2, #5
    3528:	460b      	mov	r3, r1
    352a:	461a      	mov	r2, r3
    352c:	f04f 0300 	mov.w	r3, #0
    3530:	ea4f 1b43 	mov.w	fp, r3, lsl #5
    3534:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
    3538:	ea4f 1a42 	mov.w	sl, r2, lsl #5
    353c:	460b      	mov	r3, r1
    353e:	009b      	lsls	r3, r3, #2
    3540:	3303      	adds	r3, #3
    3542:	3307      	adds	r3, #7
    3544:	08db      	lsrs	r3, r3, #3
    3546:	00db      	lsls	r3, r3, #3
    3548:	ebad 0d03 	sub.w	sp, sp, r3
    354c:	466b      	mov	r3, sp
    354e:	3303      	adds	r3, #3
    3550:	089b      	lsrs	r3, r3, #2
    3552:	009b      	lsls	r3, r3, #2
    3554:	61fb      	str	r3, [r7, #28]
    
    /* create data for destination servants and initialise them */
    struct eventData xDatas[NUM];
    3556:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3558:	1e4b      	subs	r3, r1, #1
    355a:	61bb      	str	r3, [r7, #24]
    355c:	460b      	mov	r3, r1
    355e:	461a      	mov	r2, r3
    3560:	f04f 0300 	mov.w	r3, #0
    3564:	ea4f 19c3 	mov.w	r9, r3, lsl #7
    3568:	ea49 6952 	orr.w	r9, r9, r2, lsr #25
    356c:	ea4f 18c2 	mov.w	r8, r2, lsl #7
    3570:	460b      	mov	r3, r1
    3572:	461a      	mov	r2, r3
    3574:	f04f 0300 	mov.w	r3, #0
    3578:	01dd      	lsls	r5, r3, #7
    357a:	ea45 6552 	orr.w	r5, r5, r2, lsr #25
    357e:	01d4      	lsls	r4, r2, #7
    3580:	460b      	mov	r3, r1
    3582:	011b      	lsls	r3, r3, #4
    3584:	3303      	adds	r3, #3
    3586:	3307      	adds	r3, #7
    3588:	08db      	lsrs	r3, r3, #3
    358a:	00db      	lsls	r3, r3, #3
    358c:	ebad 0d03 	sub.w	sp, sp, r3
    3590:	466b      	mov	r3, sp
    3592:	3303      	adds	r3, #3
    3594:	089b      	lsrs	r3, r3, #2
    3596:	009b      	lsls	r3, r3, #2
    3598:	617b      	str	r3, [r7, #20]

    while(1)
    {

        if( IS_FIRST_TIME_TO_EXE == 1 )
    359a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    359c:	2b01      	cmp	r3, #1
    359e:	d127      	bne.n	35f0 <vSensor+0x13c>
        {
            /* Waiting for the start time of task period */
            xSemaphoreTake(xBinarySemaphore[xMyFlag], portMAX_DELAY);
    35a0:	f640 3368 	movw	r3, #2920	; 0xb68
    35a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    35aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35ae:	4618      	mov	r0, r3
    35b0:	2100      	movs	r1, #0
    35b2:	f04f 32ff 	mov.w	r2, #4294967295
    35b6:	2300      	movs	r3, #0
    35b8:	f000 fedc 	bl	4374 <xQueueGenericReceive>
#ifdef SENSOR_PRINT
            vPrintNumber( xMyFlag );
    35bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
    35be:	f013 fe67 	bl	17290 <vPrintNumber>
            vPrintNumber( deadline ); // ready time  of task 
    35c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    35c4:	f013 fe64 	bl	17290 <vPrintNumber>
#endif 
            xCurrentTime = xTaskGetTickCount();
    35c8:	f001 fd88 	bl	50dc <xTaskGetTickCount>
    35cc:	64f8      	str	r0, [r7, #76]	; 0x4c
#ifdef SENSOR_PRINT
            vPrintNumber( xCurrentTime ); // start time of task
    35ce:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    35d0:	f013 fe5e 	bl	17290 <vPrintNumber>
#endif
            vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    35d4:	f640 33f4 	movw	r3, #3060	; 0xbf4
    35d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    35de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35e2:	4618      	mov	r0, r3
    35e4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    35e6:	f002 fa13 	bl	5a10 <vTaskSetxStartTime>

            IS_FIRST_TIME_TO_EXE = 0;
    35ea:	2300      	movs	r3, #0
    35ec:	647b      	str	r3, [r7, #68]	; 0x44
    35ee:	e020      	b.n	3632 <vSensor+0x17e>
        {
            /* When system started, the first servant of every task is triggered to
             * execute by the init events created by tick hook. After that, the first
             * servant of every task is triggered by the last servant of corresponding task.
            * */
            vEventReceiveAll( pvMyParameter, pxEvent );
    35f0:	69fb      	ldr	r3, [r7, #28]
    35f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    35f4:	4619      	mov	r1, r3
    35f6:	f7ff fe51 	bl	329c <vEventReceiveAll>

#ifdef SENSOR_PRINT
            vPrintNumber( xMyFlag );
    35fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
    35fc:	f013 fe48 	bl	17290 <vPrintNumber>
            vPrintNumber( deadline ); // ready time of task 
    3600:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    3602:	f013 fe45 	bl	17290 <vPrintNumber>
#endif 
            xCurrentTime = xTaskGetTickCount();
    3606:	f001 fd69 	bl	50dc <xTaskGetTickCount>
    360a:	64f8      	str	r0, [r7, #76]	; 0x4c
#ifdef SENSOR_PRINT
            vPrintNumber( xCurrentTime ); // start time of task 
    360c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    360e:	f013 fe3f 	bl	17290 <vPrintNumber>
#endif
            vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    3612:	f640 33f4 	movw	r3, #3060	; 0xbf4
    3616:	f2c2 0300 	movt	r3, #8192	; 0x2000
    361a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    361c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3620:	4618      	mov	r0, r3
    3622:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    3624:	f002 f9f4 	bl	5a10 <vTaskSetxStartTime>

            // do actuator and sensor
#ifdef SENSOR_FUN
            xMyFun( NULL, 0, xDatas, NUM);
#endif
            vEventDeleteAll(pvMyParameter, pxEvent);
    3628:	69fb      	ldr	r3, [r7, #28]
    362a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    362c:	4619      	mov	r1, r3
    362e:	f7ff feb1 	bl	3394 <vEventDeleteAll>
        }

        // deadline is the start time of next period
        xCount ++;
    3632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3634:	3301      	adds	r3, #1
    3636:	643b      	str	r3, [r7, #64]	; 0x40
        deadline = xCount * xPeriod; 
    3638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    363a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    363c:	fb02 f303 	mul.w	r3, r2, r3
    3640:	63fb      	str	r3, [r7, #60]	; 0x3c

        for( i = 0; i < NUM; i ++ )
    3642:	2300      	movs	r3, #0
    3644:	64bb      	str	r3, [r7, #72]	; 0x48
    3646:	e013      	b.n	3670 <vSensor+0x1bc>
        {
            xDatas[i].xNextPeriod = deadline;
    3648:	697a      	ldr	r2, [r7, #20]
    364a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    364c:	011b      	lsls	r3, r3, #4
    364e:	4413      	add	r3, r2
    3650:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3652:	601a      	str	r2, [r3, #0]
            xDatas[i].xTime = deadline - xPeriod + xLet;
    3654:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3656:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3658:	1ad2      	subs	r2, r2, r3
    365a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    365c:	441a      	add	r2, r3
    365e:	6979      	ldr	r1, [r7, #20]
    3660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3662:	011b      	lsls	r3, r3, #4
    3664:	440b      	add	r3, r1
    3666:	3304      	adds	r3, #4
    3668:	601a      	str	r2, [r3, #0]

        // deadline is the start time of next period
        xCount ++;
        deadline = xCount * xPeriod; 

        for( i = 0; i < NUM; i ++ )
    366a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    366c:	3301      	adds	r3, #1
    366e:	64bb      	str	r3, [r7, #72]	; 0x48
    3670:	6cba      	ldr	r2, [r7, #72]	; 0x48
    3672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3674:	429a      	cmp	r2, r3
    3676:	dbe7      	blt.n	3648 <vSensor+0x194>
        {
            xDatas[i].xNextPeriod = deadline;
            xDatas[i].xTime = deadline - xPeriod + xLet;
        }
        // set the future model time
        xFutureModelTime = deadline - xPeriod + xLet;
    3678:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    367c:	1ad2      	subs	r2, r2, r3
    367e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3680:	4413      	add	r3, r2
    3682:	461a      	mov	r2, r3
    3684:	f240 535c 	movw	r3, #1372	; 0x55c
    3688:	f2c2 0300 	movt	r3, #8192	; 0x2000
    368c:	601a      	str	r2, [r3, #0]

        // create events for all destination servants of this servant. 
        vEventCreateAll( pvMyParameter, xDatas );
    368e:	697b      	ldr	r3, [r7, #20]
    3690:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3692:	4619      	mov	r1, r3
    3694:	f7ff fe9c 	bl	33d0 <vEventCreateAll>

#ifdef SENSOR_LET
        vTaskDelayLET();
#endif
        
        if( xCurrentTime > xDatas[0].xNextPeriod )
    3698:	697b      	ldr	r3, [r7, #20]
    369a:	681a      	ldr	r2, [r3, #0]
    369c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    369e:	429a      	cmp	r2, r3
    36a0:	d20a      	bcs.n	36b8 <vSensor+0x204>
        {
            vPrintNumber(xDatas[0].xNextPeriod);
    36a2:	697b      	ldr	r3, [r7, #20]
    36a4:	681b      	ldr	r3, [r3, #0]
    36a6:	4618      	mov	r0, r3
    36a8:	f013 fdf2 	bl	17290 <vPrintNumber>
            vPrintString("there are sensor missing deadline\n\r");
    36ac:	f648 0020 	movw	r0, #34848	; 0x8820
    36b0:	f2c0 0001 	movt	r0, #1
    36b4:	f013 fdd2 	bl	1725c <vPrintString>
        }

#ifdef SENSOR_PRINT

        xCurrentTime = xTaskGetTickCount();
    36b8:	f001 fd10 	bl	50dc <xTaskGetTickCount>
    36bc:	64f8      	str	r0, [r7, #76]	; 0x4c
        vPrintNumber( xCurrentTime );  // finish time of sensor
    36be:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    36c0:	f013 fde6 	bl	17290 <vPrintNumber>
        vPrintNumber( deadline );   // deadline of task
    36c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    36c6:	f013 fde3 	bl	17290 <vPrintNumber>
        vPrintNumber( ( xMyFlag + 10 ) * 3 );
    36ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    36cc:	f103 020a 	add.w	r2, r3, #10
    36d0:	4613      	mov	r3, r2
    36d2:	005b      	lsls	r3, r3, #1
    36d4:	4413      	add	r3, r2
    36d6:	4618      	mov	r0, r3
    36d8:	f013 fdda 	bl	17290 <vPrintNumber>
#endif

        xCurrentTime = xTaskGetTickCount();
    36dc:	f001 fcfe 	bl	50dc <xTaskGetTickCount>
    36e0:	64f8      	str	r0, [r7, #76]	; 0x4c
        if( xCurrentTime > 1000000 )
    36e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    36e4:	f244 2340 	movw	r3, #16960	; 0x4240
    36e8:	f2c0 030f 	movt	r3, #15
    36ec:	429a      	cmp	r2, r3
    36ee:	d900      	bls.n	36f2 <vSensor+0x23e>
        {
            break;
    36f0:	e00c      	b.n	370c <vSensor+0x258>
        }
        // triggered R-Servant to execute 
        xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] );
    36f2:	f640 3368 	movw	r3, #2920	; 0xb68
    36f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    36fe:	4618      	mov	r0, r3
    3700:	2100      	movs	r1, #0
    3702:	2200      	movs	r2, #0
    3704:	2300      	movs	r3, #0
    3706:	f000 fd6f 	bl	41e8 <xQueueGenericSend>
    }
    370a:	e746      	b.n	359a <vSensor+0xe6>
    370c:	46b5      	mov	sp, r6
}
    370e:	3754      	adds	r7, #84	; 0x54
    3710:	46bd      	mov	sp, r7
    3712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3716:	bf00      	nop

00003718 <vServant>:
*  @param pvParameter is parameter from programmer
*
* */

void vServant( void * pvParameter )
{
    3718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    371c:	b097      	sub	sp, #92	; 0x5c
    371e:	af00      	add	r7, sp, #0
    3720:	61f8      	str	r0, [r7, #28]
    3722:	4669      	mov	r1, sp
    3724:	6079      	str	r1, [r7, #4]
    portBASE_TYPE i;
    void * pvMyParameter = pvParameter;
    3726:	69f9      	ldr	r1, [r7, #28]
    3728:	6539      	str	r1, [r7, #80]	; 0x50
    portTickType xCurrentTime;
    
    portBASE_TYPE xNumOfIn = ((struct xParam *) pvMyParameter)->xNumOfIn;
    372a:	6d39      	ldr	r1, [r7, #80]	; 0x50
    372c:	6849      	ldr	r1, [r1, #4]
    372e:	64f9      	str	r1, [r7, #76]	; 0x4c
    portBASE_TYPE xNumOfOut = ((struct xParam *) pvMyParameter)->xNumOfOut;
    3730:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3732:	6889      	ldr	r1, [r1, #8]
    3734:	64b9      	str	r1, [r7, #72]	; 0x48
    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    3736:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3738:	6809      	ldr	r1, [r1, #0]
    373a:	6479      	str	r1, [r7, #68]	; 0x44
    portTickType xPeriod = ((struct xParam *) pvMyParameter)->xPeriod;
    373c:	6d39      	ldr	r1, [r7, #80]	; 0x50
    373e:	6a49      	ldr	r1, [r1, #36]	; 0x24
    3740:	6439      	str	r1, [r7, #64]	; 0x40
    pvServantFunType xMyFun = ((struct xParam *) pvMyParameter)->xFp;
    3742:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3744:	6a09      	ldr	r1, [r1, #32]
    3746:	63f9      	str	r1, [r7, #60]	; 0x3c

    xEventHandle pxEvent[xNumOfIn];
    3748:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
    374a:	1e71      	subs	r1, r6, #1
    374c:	63b9      	str	r1, [r7, #56]	; 0x38
    374e:	4631      	mov	r1, r6
    3750:	4608      	mov	r0, r1
    3752:	f04f 0100 	mov.w	r1, #0
    3756:	ea4f 1b41 	mov.w	fp, r1, lsl #5
    375a:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
    375e:	ea4f 1a40 	mov.w	sl, r0, lsl #5
    3762:	4631      	mov	r1, r6
    3764:	4608      	mov	r0, r1
    3766:	f04f 0100 	mov.w	r1, #0
    376a:	ea4f 1941 	mov.w	r9, r1, lsl #5
    376e:	ea49 69d0 	orr.w	r9, r9, r0, lsr #27
    3772:	ea4f 1840 	mov.w	r8, r0, lsl #5
    3776:	4631      	mov	r1, r6
    3778:	0089      	lsls	r1, r1, #2
    377a:	3103      	adds	r1, #3
    377c:	3107      	adds	r1, #7
    377e:	08c9      	lsrs	r1, r1, #3
    3780:	00c9      	lsls	r1, r1, #3
    3782:	ebad 0d01 	sub.w	sp, sp, r1
    3786:	4669      	mov	r1, sp
    3788:	3103      	adds	r1, #3
    378a:	0889      	lsrs	r1, r1, #2
    378c:	0089      	lsls	r1, r1, #2
    378e:	6379      	str	r1, [r7, #52]	; 0x34
    struct eventData xDatas[xNumOfOut];
    3790:	6cbe      	ldr	r6, [r7, #72]	; 0x48
    3792:	1e71      	subs	r1, r6, #1
    3794:	6339      	str	r1, [r7, #48]	; 0x30
    3796:	4631      	mov	r1, r6
    3798:	4608      	mov	r0, r1
    379a:	f04f 0100 	mov.w	r1, #0
    379e:	01cd      	lsls	r5, r1, #7
    37a0:	ea45 6550 	orr.w	r5, r5, r0, lsr #25
    37a4:	01c4      	lsls	r4, r0, #7
    37a6:	4631      	mov	r1, r6
    37a8:	4608      	mov	r0, r1
    37aa:	f04f 0100 	mov.w	r1, #0
    37ae:	01cb      	lsls	r3, r1, #7
    37b0:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
    37b4:	01c2      	lsls	r2, r0, #7
    37b6:	4633      	mov	r3, r6
    37b8:	011b      	lsls	r3, r3, #4
    37ba:	3303      	adds	r3, #3
    37bc:	3307      	adds	r3, #7
    37be:	08db      	lsrs	r3, r3, #3
    37c0:	00db      	lsls	r3, r3, #3
    37c2:	ebad 0d03 	sub.w	sp, sp, r3
    37c6:	466b      	mov	r3, sp
    37c8:	3303      	adds	r3, #3
    37ca:	089b      	lsrs	r3, r3, #2
    37cc:	009b      	lsls	r3, r3, #2
    37ce:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* get the LET of current servant */
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    37d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    37d2:	69db      	ldr	r3, [r3, #28]
    37d4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* set the LET of current servant */
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    37d6:	f640 33f4 	movw	r3, #3060	; 0xbf4
    37da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    37e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    37e4:	4618      	mov	r0, r3
    37e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    37e8:	f002 f920 	bl	5a2c <vTaskSetxLet>

    while(1)
    {
        vEventReceiveAll( pvMyParameter, pxEvent );
    37ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    37ee:	6d38      	ldr	r0, [r7, #80]	; 0x50
    37f0:	4619      	mov	r1, r3
    37f2:	f7ff fd53 	bl	329c <vEventReceiveAll>

#ifdef SERVANT_PRINT
        vPrintNumber(xMyFlag);
    37f6:	6c78      	ldr	r0, [r7, #68]	; 0x44
    37f8:	f013 fd4a 	bl	17290 <vPrintNumber>
#endif
        xCurrentTime = xTaskGetTickCountFromISR();
    37fc:	f001 fc80 	bl	5100 <xTaskGetTickCountFromISR>
    3800:	6278      	str	r0, [r7, #36]	; 0x24
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    3802:	f640 33f4 	movw	r3, #3060	; 0xbf4
    3806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    380a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    380c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3810:	4618      	mov	r0, r3
    3812:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3814:	f002 f8fc 	bl	5a10 <vTaskSetxStartTime>

        /* Here are coding for processing data of events */
        for( i = 0; i < xNumOfOut; i ++ )
    3818:	2300      	movs	r3, #0
    381a:	657b      	str	r3, [r7, #84]	; 0x54
    381c:	e02f      	b.n	387e <vServant+0x166>
        {
            xDatas[i] = xEventGetxData(pxEvent[i]);
    381e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3820:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3826:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3828:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    382a:	0112      	lsls	r2, r2, #4
    382c:	188c      	adds	r4, r1, r2
    382e:	f107 0208 	add.w	r2, r7, #8
    3832:	4610      	mov	r0, r2
    3834:	4619      	mov	r1, r3
    3836:	f7ff f957 	bl	2ae8 <xEventGetxData>
    383a:	f107 0308 	add.w	r3, r7, #8
    383e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3840:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            xDatas[i].xTime = xFutureModelTime + xLet;
    3844:	f240 535c 	movw	r3, #1372	; 0x55c
    3848:	f2c2 0300 	movt	r3, #8192	; 0x2000
    384c:	681b      	ldr	r3, [r3, #0]
    384e:	461a      	mov	r2, r3
    3850:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3852:	441a      	add	r2, r3
    3854:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3858:	011b      	lsls	r3, r3, #4
    385a:	440b      	add	r3, r1
    385c:	3304      	adds	r3, #4
    385e:	601a      	str	r2, [r3, #0]
            xFutureModelTime = xDatas[i].xTime;
    3860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3864:	011b      	lsls	r3, r3, #4
    3866:	4413      	add	r3, r2
    3868:	3304      	adds	r3, #4
    386a:	681b      	ldr	r3, [r3, #0]
    386c:	461a      	mov	r2, r3
    386e:	f240 535c 	movw	r3, #1372	; 0x55c
    3872:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3876:	601a      	str	r2, [r3, #0]
#endif
        xCurrentTime = xTaskGetTickCountFromISR();
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );

        /* Here are coding for processing data of events */
        for( i = 0; i < xNumOfOut; i ++ )
    3878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    387a:	3301      	adds	r3, #1
    387c:	657b      	str	r3, [r7, #84]	; 0x54
    387e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    3880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3882:	429a      	cmp	r2, r3
    3884:	dbcb      	blt.n	381e <vServant+0x106>
            xDatas[i].xTime = xFutureModelTime + xLet;
            xFutureModelTime = xDatas[i].xTime;
        }

#ifdef SERVANT_PRINT
        vPrintNumber( xDatas[0].xNextPeriod - xPeriod ); // ready time of task
    3886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3888:	681a      	ldr	r2, [r3, #0]
    388a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    388c:	1ad3      	subs	r3, r2, r3
    388e:	4618      	mov	r0, r3
    3890:	f013 fcfe 	bl	17290 <vPrintNumber>
        vPrintNumber( xCurrentTime );   // start time of current servant
    3894:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3896:	f013 fcfb 	bl	17290 <vPrintNumber>
        {
            xMyFun(pxEvent, xNumOfIn, xDatas, xNumOfOut);
        }
#endif

        vEventDeleteAll( pvMyParameter, pxEvent );        
    389a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    389c:	6d38      	ldr	r0, [r7, #80]	; 0x50
    389e:	4619      	mov	r1, r3
    38a0:	f7ff fd78 	bl	3394 <vEventDeleteAll>

        vEventCreateAll( pvMyParameter, xDatas );
    38a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    38a6:	6d38      	ldr	r0, [r7, #80]	; 0x50
    38a8:	4619      	mov	r1, r3
    38aa:	f7ff fd91 	bl	33d0 <vEventCreateAll>

        if( xCurrentTime > xDatas[0].xNextPeriod )
    38ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    38b0:	681a      	ldr	r2, [r3, #0]
    38b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    38b4:	429a      	cmp	r2, r3
    38b6:	d20a      	bcs.n	38ce <vServant+0x1b6>
        {
            vPrintNumber(xDatas[0].xNextPeriod);
    38b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    38ba:	681b      	ldr	r3, [r3, #0]
    38bc:	4618      	mov	r0, r3
    38be:	f013 fce7 	bl	17290 <vPrintNumber>
            vPrintString("there are servants missing deadline\n\r");
    38c2:	f648 0044 	movw	r0, #34884	; 0x8844
    38c6:	f2c0 0001 	movt	r0, #1
    38ca:	f013 fcc7 	bl	1725c <vPrintString>
#ifdef SERVANT_LET
        vTaskDelayLET();
#endif

#ifdef SERVANT_PRINT
        xCurrentTime = xTaskGetTickCount();
    38ce:	f001 fc05 	bl	50dc <xTaskGetTickCount>
    38d2:	6278      	str	r0, [r7, #36]	; 0x24
        vPrintNumber( xCurrentTime );   // finish time of current servant
    38d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
    38d6:	f013 fcdb 	bl	17290 <vPrintNumber>
        vPrintNumber( xDatas[0].xNextPeriod ); // deadline of task
    38da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    38dc:	681b      	ldr	r3, [r3, #0]
    38de:	4618      	mov	r0, r3
    38e0:	f013 fcd6 	bl	17290 <vPrintNumber>
        vPrintNumber( (xMyFlag + 10) * 3 );
    38e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    38e6:	f103 020a 	add.w	r2, r3, #10
    38ea:	4613      	mov	r3, r2
    38ec:	005b      	lsls	r3, r3, #1
    38ee:	4413      	add	r3, r2
    38f0:	4618      	mov	r0, r3
    38f2:	f013 fccd 	bl	17290 <vPrintNumber>
#endif

        xCurrentTime = xTaskGetTickCount();
    38f6:	f001 fbf1 	bl	50dc <xTaskGetTickCount>
    38fa:	6278      	str	r0, [r7, #36]	; 0x24
        if( xCurrentTime > 1000000 )
    38fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    38fe:	f244 2340 	movw	r3, #16960	; 0x4240
    3902:	f2c0 030f 	movt	r3, #15
    3906:	429a      	cmp	r2, r3
    3908:	d900      	bls.n	390c <vServant+0x1f4>
        {
            break;
    390a:	e00c      	b.n	3926 <vServant+0x20e>
        }

        // triggered R-Servant to execute 
        xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT-1] );
    390c:	f640 3368 	movw	r3, #2920	; 0xb68
    3910:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    3918:	4618      	mov	r0, r3
    391a:	2100      	movs	r1, #0
    391c:	2200      	movs	r2, #0
    391e:	2300      	movs	r3, #0
    3920:	f000 fc62 	bl	41e8 <xQueueGenericSend>
    }
    3924:	e762      	b.n	37ec <vServant+0xd4>
    3926:	687b      	ldr	r3, [r7, #4]
    3928:	469d      	mov	sp, r3
}
    392a:	375c      	adds	r7, #92	; 0x5c
    392c:	46bd      	mov	sp, r7
    392e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3932:	bf00      	nop

00003934 <vR_Servant>:

void vR_Servant( void * pvParameter)
{
    3934:	b580      	push	{r7, lr}
    3936:	b090      	sub	sp, #64	; 0x40
    3938:	af00      	add	r7, sp, #0
    393a:	6078      	str	r0, [r7, #4]
    portBASE_TYPE xSource, xDest;
    portBASE_TYPE HAVE_TO_SEND_SEMAPHORE; // could the semaphore be sent? 1 means yes , 0 means no
    portBASE_TYPE xResult;

    portTickType xCurrentTime;
    void * pvMyParameter = pvParameter;
    393c:	687b      	ldr	r3, [r7, #4]
    393e:	62bb      	str	r3, [r7, #40]	; 0x28

    portBASE_TYPE xMyFlag = ((struct xParam *) pvMyParameter)->xMyFlag;
    3940:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3942:	681b      	ldr	r3, [r3, #0]
    3944:	627b      	str	r3, [r7, #36]	; 0x24
    portTickType xLet = ((struct xParam *) pvMyParameter)->xLet;
    3946:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3948:	69db      	ldr	r3, [r3, #28]
    394a:	623b      	str	r3, [r7, #32]
    vTaskSetxLet(xTaskOfHandle[xMyFlag], xLet);
    394c:	f640 33f4 	movw	r3, #3060	; 0xbf4
    3950:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    395a:	4618      	mov	r0, r3
    395c:	6a39      	ldr	r1, [r7, #32]
    395e:	f002 f865 	bl	5a2c <vTaskSetxLet>
    xTaskHandle destinationTCB, sourceTCB;

    while(1)
    {
        // waiting for events created by tick hook or S-Servant
        xSemaphoreTake( xBinarySemaphore[xMyFlag], portMAX_DELAY );
    3962:	f640 3368 	movw	r3, #2920	; 0xb68
    3966:	f2c2 0300 	movt	r3, #8192	; 0x2000
    396a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    396c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3970:	4618      	mov	r0, r3
    3972:	2100      	movs	r1, #0
    3974:	f04f 32ff 	mov.w	r2, #4294967295
    3978:	2300      	movs	r3, #0
    397a:	f000 fcfb 	bl	4374 <xQueueGenericReceive>
#ifdef RSERVANT_PRINT
        vPrintNumber( xMyFlag );
#endif
        
        xCurrentTime = xTaskGetTickCount();
    397e:	f001 fbad 	bl	50dc <xTaskGetTickCount>
    3982:	61f8      	str	r0, [r7, #28]
        vTaskSetxStartTime( xTaskOfHandle[xMyFlag], xCurrentTime );
    3984:	f640 33f4 	movw	r3, #3060	; 0xbf4
    3988:	f2c2 0300 	movt	r3, #8192	; 0x2000
    398c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    398e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3992:	4618      	mov	r0, r3
    3994:	69f9      	ldr	r1, [r7, #28]
    3996:	f002 f83b 	bl	5a10 <vTaskSetxStartTime>
#ifdef RSERVANT_PRINT
        vPrintNumber( xCurrentTime );
#endif

        // init to zero
        HAVE_TO_SEND_SEMAPHORE = 0;
    399a:	2300      	movs	r3, #0
    399c:	637b      	str	r3, [r7, #52]	; 0x34

        // to see whether there is a servant need to be triggered.
        // This process could be preempted by Sensor servant.
        while(! HAVE_TO_SEND_SEMAPHORE)
    399e:	e094      	b.n	3aca <vR_Servant+0x196>
            /*
             * transit the event item, whose timestamp bigger or equal to current Tick Count, 
             * from xEventList to the idlest xEvestReadyList
             *
             * */
            xResult = xEventListTransit( &pxEventListItem, &pxCurrentReadyList);
    39a0:	f107 030c 	add.w	r3, r7, #12
    39a4:	4618      	mov	r0, r3
    39a6:	f240 5160 	movw	r1, #1376	; 0x560
    39aa:	f2c2 0100 	movt	r1, #8192	; 0x2000
    39ae:	f7ff fa11 	bl	2dd4 <xEventListGenericTransit>
    39b2:	6338      	str	r0, [r7, #48]	; 0x30
            if( xResult == -1 )
    39b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    39b6:	f1b3 3fff 	cmp.w	r3, #4294967295
    39ba:	d100      	bne.n	39be <vR_Servant+0x8a>
            {
                // no event
                break;
    39bc:	e089      	b.n	3ad2 <vR_Servant+0x19e>
            }
            else if( xResult == 0 )
    39be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    39c0:	2b00      	cmp	r3, #0
    39c2:	d100      	bne.n	39c6 <vR_Servant+0x92>
            {
                // not time yet
                //break;
                continue;
    39c4:	e081      	b.n	3aca <vR_Servant+0x196>
            else
            {
                // transmit success
            }

            destinationTCB = xEventGetpxDestination( pxEventListItem->pvOwner);
    39c6:	68fb      	ldr	r3, [r7, #12]
    39c8:	68db      	ldr	r3, [r3, #12]
    39ca:	4618      	mov	r0, r3
    39cc:	f7ff f86e 	bl	2aac <xEventGetpxDestination>
    39d0:	62f8      	str	r0, [r7, #44]	; 0x2c
            sourceTCB = xEventGetpxSource( pxEventListItem->pvOwner );
    39d2:	68fb      	ldr	r3, [r7, #12]
    39d4:	68db      	ldr	r3, [r3, #12]
    39d6:	4618      	mov	r0, r3
    39d8:	f7ff f85c 	bl	2a94 <xEventGetpxSource>
    39dc:	61b8      	str	r0, [r7, #24]
            HAVE_TO_SEND_SEMAPHORE = 1;  // set default 1
    39de:	2301      	movs	r3, #1
    39e0:	637b      	str	r3, [r7, #52]	; 0x34

            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    39e2:	2300      	movs	r3, #0
    39e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    39e6:	e068      	b.n	3aba <vR_Servant+0x186>
            {
                xSource = xRelations.xRelation[i].xInFlag;
    39e8:	f240 12ac 	movw	r2, #428	; 0x1ac
    39ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
    39f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    39f2:	460b      	mov	r3, r1
    39f4:	005b      	lsls	r3, r3, #1
    39f6:	440b      	add	r3, r1
    39f8:	009b      	lsls	r3, r3, #2
    39fa:	4413      	add	r3, r2
    39fc:	3304      	adds	r3, #4
    39fe:	681b      	ldr	r3, [r3, #0]
    3a00:	617b      	str	r3, [r7, #20]
                xDest   = xRelations.xRelation[i].xOutFlag;
    3a02:	f240 12ac 	movw	r2, #428	; 0x1ac
    3a06:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3a0c:	460b      	mov	r3, r1
    3a0e:	005b      	lsls	r3, r3, #1
    3a10:	440b      	add	r3, r1
    3a12:	009b      	lsls	r3, r3, #2
    3a14:	4413      	add	r3, r2
    3a16:	3308      	adds	r3, #8
    3a18:	681b      	ldr	r3, [r3, #0]
    3a1a:	613b      	str	r3, [r7, #16]

                if( destinationTCB == xTaskOfHandle[xDest] )
    3a1c:	f640 33f4 	movw	r3, #3060	; 0xbf4
    3a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a24:	693a      	ldr	r2, [r7, #16]
    3a26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3a2c:	429a      	cmp	r2, r3
    3a2e:	d141      	bne.n	3ab4 <vR_Servant+0x180>
                {
                    // find the right relation
                    if( sourceTCB == xTaskOfHandle[xSource] )
    3a30:	f640 33f4 	movw	r3, #3060	; 0xbf4
    3a34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a38:	697a      	ldr	r2, [r7, #20]
    3a3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3a3e:	69bb      	ldr	r3, [r7, #24]
    3a40:	429a      	cmp	r2, r3
    3a42:	d127      	bne.n	3a94 <vR_Servant+0x160>
                    {
                        if( xRelations.xRelation[i].xFlag == 2 )
    3a44:	f240 12ac 	movw	r2, #428	; 0x1ac
    3a48:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3a4e:	460b      	mov	r3, r1
    3a50:	005b      	lsls	r3, r3, #1
    3a52:	440b      	add	r3, r1
    3a54:	009b      	lsls	r3, r3, #2
    3a56:	4413      	add	r3, r2
    3a58:	330c      	adds	r3, #12
    3a5a:	681b      	ldr	r3, [r3, #0]
    3a5c:	2b02      	cmp	r3, #2
    3a5e:	d10b      	bne.n	3a78 <vR_Servant+0x144>
                        {
                            vPrintString("Error: This event has arrived!!\n\r") ;
    3a60:	f648 006c 	movw	r0, #34924	; 0x886c
    3a64:	f2c0 0001 	movt	r0, #1
    3a68:	f013 fbf8 	bl	1725c <vPrintString>
                            vEventDelete( (xEventHandle) pxEventListItem->pvOwner );
    3a6c:	68fb      	ldr	r3, [r7, #12]
    3a6e:	68db      	ldr	r3, [r3, #12]
    3a70:	4618      	mov	r0, r3
    3a72:	f7ff fa95 	bl	2fa0 <vEventGenericDelete>
    3a76:	e01d      	b.n	3ab4 <vR_Servant+0x180>
                        }
                        else
                        {
                            // set the relation to 2
                            xRelations.xRelation[i].xFlag = 2;
    3a78:	f240 12ac 	movw	r2, #428	; 0x1ac
    3a7c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3a82:	460b      	mov	r3, r1
    3a84:	005b      	lsls	r3, r3, #1
    3a86:	440b      	add	r3, r1
    3a88:	009b      	lsls	r3, r3, #2
    3a8a:	4413      	add	r3, r2
    3a8c:	330c      	adds	r3, #12
    3a8e:	2202      	movs	r2, #2
    3a90:	601a      	str	r2, [r3, #0]
    3a92:	e00f      	b.n	3ab4 <vR_Servant+0x180>
                    }
                    // find other relation which is relative to destinationtcb
                    else
                    {
                        // waiting for an events that is not arriving yet
                        if( xRelations.xRelation[i].xFlag == 1 )
    3a94:	f240 12ac 	movw	r2, #428	; 0x1ac
    3a98:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3a9e:	460b      	mov	r3, r1
    3aa0:	005b      	lsls	r3, r3, #1
    3aa2:	440b      	add	r3, r1
    3aa4:	009b      	lsls	r3, r3, #2
    3aa6:	4413      	add	r3, r2
    3aa8:	330c      	adds	r3, #12
    3aaa:	681b      	ldr	r3, [r3, #0]
    3aac:	2b01      	cmp	r3, #1
    3aae:	d101      	bne.n	3ab4 <vR_Servant+0x180>
                        {
                            HAVE_TO_SEND_SEMAPHORE = 0;
    3ab0:	2300      	movs	r3, #0
    3ab2:	637b      	str	r3, [r7, #52]	; 0x34

            destinationTCB = xEventGetpxDestination( pxEventListItem->pvOwner);
            sourceTCB = xEventGetpxSource( pxEventListItem->pvOwner );
            HAVE_TO_SEND_SEMAPHORE = 1;  // set default 1

            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3ab6:	3301      	adds	r3, #1
    3ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
    3aba:	f240 13ac 	movw	r3, #428	; 0x1ac
    3abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ac2:	681a      	ldr	r2, [r3, #0]
    3ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3ac6:	429a      	cmp	r2, r3
    3ac8:	dc8e      	bgt.n	39e8 <vR_Servant+0xb4>
        // init to zero
        HAVE_TO_SEND_SEMAPHORE = 0;

        // to see whether there is a servant need to be triggered.
        // This process could be preempted by Sensor servant.
        while(! HAVE_TO_SEND_SEMAPHORE)
    3aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3acc:	2b00      	cmp	r3, #0
    3ace:	f43f af67 	beq.w	39a0 <vR_Servant+0x6c>
                }
            }
        } //  end inner while(1)

        // not time yet, R-Servant should be sleep until next period of any task
        if( xResult == -1 )
    3ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
    3ad8:	d100      	bne.n	3adc <vR_Servant+0x1a8>
#ifdef RSERVANT_PRINT
            xCurrentTime = xTaskGetTickCount();
            vPrintNumber( xCurrentTime );
            vPrintNumber( (xMyFlag + 10) * 3 );
#endif
            continue; 
    3ada:	e045      	b.n	3b68 <vR_Servant+0x234>
        }
        else if ( xResult == 0 )
    3adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3ade:	2b00      	cmp	r3, #0
    3ae0:	d100      	bne.n	3ae4 <vR_Servant+0x1b0>
#ifdef RSERVANT_PRINT
            xCurrentTime = xTaskGetTickCount();
            vPrintNumber( xCurrentTime );
            vPrintNumber( (xMyFlag + 10) * 3 );
#endif
            continue;
    3ae2:	e041      	b.n	3b68 <vR_Servant+0x234>
        }
        else
        {
            // set all the relations whose destination S-Servant is xTaskOfHandle[i] to 1.
            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3ae4:	2300      	movs	r3, #0
    3ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
    3ae8:	e028      	b.n	3b3c <vR_Servant+0x208>
            {
                xDest = xRelations.xRelation[i].xOutFlag;
    3aea:	f240 12ac 	movw	r2, #428	; 0x1ac
    3aee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3af2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3af4:	460b      	mov	r3, r1
    3af6:	005b      	lsls	r3, r3, #1
    3af8:	440b      	add	r3, r1
    3afa:	009b      	lsls	r3, r3, #2
    3afc:	4413      	add	r3, r2
    3afe:	3308      	adds	r3, #8
    3b00:	681b      	ldr	r3, [r3, #0]
    3b02:	613b      	str	r3, [r7, #16]
                if( destinationTCB == xTaskOfHandle[xDest] )
    3b04:	f640 33f4 	movw	r3, #3060	; 0xbf4
    3b08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b0c:	693a      	ldr	r2, [r7, #16]
    3b0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3b14:	429a      	cmp	r2, r3
    3b16:	d10e      	bne.n	3b36 <vR_Servant+0x202>
                {
                    xRelations.xRelation[i].xFlag = 1;
    3b18:	f240 12ac 	movw	r2, #428	; 0x1ac
    3b1c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3b22:	460b      	mov	r3, r1
    3b24:	005b      	lsls	r3, r3, #1
    3b26:	440b      	add	r3, r1
    3b28:	009b      	lsls	r3, r3, #2
    3b2a:	4413      	add	r3, r2
    3b2c:	330c      	adds	r3, #12
    3b2e:	2201      	movs	r2, #1
    3b30:	601a      	str	r2, [r3, #0]
                    // record the number of destinationtcb in xTaskOfHandle array.
                    j = xDest;
    3b32:	693b      	ldr	r3, [r7, #16]
    3b34:	63bb      	str	r3, [r7, #56]	; 0x38
            continue;
        }
        else
        {
            // set all the relations whose destination S-Servant is xTaskOfHandle[i] to 1.
            for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3b38:	3301      	adds	r3, #1
    3b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    3b3c:	f240 13ac 	movw	r3, #428	; 0x1ac
    3b40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b44:	681a      	ldr	r2, [r3, #0]
    3b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3b48:	429a      	cmp	r2, r3
    3b4a:	dcce      	bgt.n	3aea <vR_Servant+0x1b6>
            xCurrentTime = xTaskGetTickCount();
            vPrintNumber( xCurrentTime );
            vPrintNumber( (xMyFlag + 10) * 3 );
#endif
            // send semaphore to destinationtcb
            xSemaphoreGive( xBinarySemaphore[j] );
    3b4c:	f640 3368 	movw	r3, #2920	; 0xb68
    3b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b54:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3b5a:	4618      	mov	r0, r3
    3b5c:	2100      	movs	r1, #0
    3b5e:	2200      	movs	r2, #0
    3b60:	2300      	movs	r3, #0
    3b62:	f000 fb41 	bl	41e8 <xQueueGenericSend>
        }
    }
    3b66:	e6fc      	b.n	3962 <vR_Servant+0x2e>
    3b68:	e6fb      	b.n	3962 <vR_Servant+0x2e>
    3b6a:	bf00      	nop

00003b6c <s_0>:
#define SUNNYBEIKE 1
#ifdef SUNNYBEIKE

/*task0, servant 0, 1, 2*/
void s_0(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b6c:	b480      	push	{r7}
    3b6e:	b085      	sub	sp, #20
    3b70:	af00      	add	r7, sp, #0
    3b72:	60f8      	str	r0, [r7, #12]
    3b74:	60b9      	str	r1, [r7, #8]
    3b76:	607a      	str	r2, [r7, #4]
    3b78:	603b      	str	r3, [r7, #0]
    // do actuator
    // do sensor
}
    3b7a:	3714      	adds	r7, #20
    3b7c:	46bd      	mov	sp, r7
    3b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3b82:	4770      	bx	lr

00003b84 <s_1>:
void s_1(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b84:	b580      	push	{r7, lr}
    3b86:	b084      	sub	sp, #16
    3b88:	af00      	add	r7, sp, #0
    3b8a:	60f8      	str	r0, [r7, #12]
    3b8c:	60b9      	str	r1, [r7, #8]
    3b8e:	607a      	str	r2, [r7, #4]
    3b90:	603b      	str	r3, [r7, #0]
    last_radio_from_ppm(); // ppm.h
    3b92:	f012 f9a1 	bl	15ed8 <last_radio_from_ppm>
}
    3b96:	3710      	adds	r7, #16
    3b98:	46bd      	mov	sp, r7
    3b9a:	bd80      	pop	{r7, pc}

00003b9c <s_2>:
void s_2(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3b9c:	b480      	push	{r7}
    3b9e:	b085      	sub	sp, #20
    3ba0:	af00      	add	r7, sp, #0
    3ba2:	60f8      	str	r0, [r7, #12]
    3ba4:	60b9      	str	r1, [r7, #8]
    3ba6:	607a      	str	r2, [r7, #4]
    3ba8:	603b      	str	r3, [r7, #0]
    //servo_set();  // servo.h, this function is used by multitask which in terms of multiuse of Servant. And this
                    // is not implemented now. So cancel.
}
    3baa:	3714      	adds	r7, #20
    3bac:	46bd      	mov	sp, r7
    3bae:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bb2:	4770      	bx	lr

00003bb4 <s_3>:

/*task1, servant 3, 4, 5*/

void s_3(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3bb4:	b480      	push	{r7}
    3bb6:	b085      	sub	sp, #20
    3bb8:	af00      	add	r7, sp, #0
    3bba:	60f8      	str	r0, [r7, #12]
    3bbc:	60b9      	str	r1, [r7, #8]
    3bbe:	607a      	str	r2, [r7, #4]
    3bc0:	603b      	str	r3, [r7, #0]
}
    3bc2:	3714      	adds	r7, #20
    3bc4:	46bd      	mov	sp, r7
    3bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bca:	4770      	bx	lr

00003bcc <s_4>:
void s_4(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3bcc:	b580      	push	{r7, lr}
    3bce:	b084      	sub	sp, #16
    3bd0:	af00      	add	r7, sp, #0
    3bd2:	60f8      	str	r0, [r7, #12]
    3bd4:	60b9      	str	r1, [r7, #8]
    3bd6:	607a      	str	r2, [r7, #4]
    3bd8:	603b      	str	r3, [r7, #0]
    to_autopilot_from_last_radio(); // main.c
    3bda:	f012 fd37 	bl	1664c <to_autopilot_from_last_radio>
}
    3bde:	3710      	adds	r7, #16
    3be0:	46bd      	mov	sp, r7
    3be2:	bd80      	pop	{r7, pc}

00003be4 <s_5>:
void s_5(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3be4:	b580      	push	{r7, lr}
    3be6:	b084      	sub	sp, #16
    3be8:	af00      	add	r7, sp, #0
    3bea:	60f8      	str	r0, [r7, #12]
    3bec:	60b9      	str	r1, [r7, #8]
    3bee:	607a      	str	r2, [r7, #4]
    3bf0:	603b      	str	r3, [r7, #0]
    spi_reset(); // spi_fbw.h
    3bf2:	f012 fc69 	bl	164c8 <spi_reset>
}
    3bf6:	3710      	adds	r7, #16
    3bf8:	46bd      	mov	sp, r7
    3bfa:	bd80      	pop	{r7, pc}

00003bfc <s_6>:

/*task 2, servant 6, 7*/
void s_6(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3bfc:	b480      	push	{r7}
    3bfe:	b085      	sub	sp, #20
    3c00:	af00      	add	r7, sp, #0
    3c02:	60f8      	str	r0, [r7, #12]
    3c04:	60b9      	str	r1, [r7, #8]
    3c06:	607a      	str	r2, [r7, #4]
    3c08:	603b      	str	r3, [r7, #0]
}
    3c0a:	3714      	adds	r7, #20
    3c0c:	46bd      	mov	sp, r7
    3c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c12:	4770      	bx	lr

00003c14 <s_7>:
void s_7(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c14:	b580      	push	{r7, lr}
    3c16:	b084      	sub	sp, #16
    3c18:	af00      	add	r7, sp, #0
    3c1a:	60f8      	str	r0, [r7, #12]
    3c1c:	60b9      	str	r1, [r7, #8]
    3c1e:	607a      	str	r2, [r7, #4]
    3c20:	603b      	str	r3, [r7, #0]
    check_mega128_values_task(); // main.c
    3c22:	f012 fe5b 	bl	168dc <check_mega128_values_task>
}
    3c26:	3710      	adds	r7, #16
    3c28:	46bd      	mov	sp, r7
    3c2a:	bd80      	pop	{r7, pc}

00003c2c <s_8>:

/*task 3, servant 8, 9*/ 
void s_8(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c2c:	b480      	push	{r7}
    3c2e:	b085      	sub	sp, #20
    3c30:	af00      	add	r7, sp, #0
    3c32:	60f8      	str	r0, [r7, #12]
    3c34:	60b9      	str	r1, [r7, #8]
    3c36:	607a      	str	r2, [r7, #4]
    3c38:	603b      	str	r3, [r7, #0]
}
    3c3a:	3714      	adds	r7, #20
    3c3c:	46bd      	mov	sp, r7
    3c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c42:	4770      	bx	lr

00003c44 <s_9>:
void s_9(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c44:	b580      	push	{r7, lr}
    3c46:	b084      	sub	sp, #16
    3c48:	af00      	add	r7, sp, #0
    3c4a:	60f8      	str	r0, [r7, #12]
    3c4c:	60b9      	str	r1, [r7, #8]
    3c4e:	607a      	str	r2, [r7, #4]
    3c50:	603b      	str	r3, [r7, #0]
    servo_transmit(); //servo.h
    3c52:	f012 ff1b 	bl	16a8c <servo_transmit>
}
    3c56:	3710      	adds	r7, #16
    3c58:	46bd      	mov	sp, r7
    3c5a:	bd80      	pop	{r7, pc}

00003c5c <s_10>:

/*task 4, servant 10, 11*/
void s_10(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c5c:	b480      	push	{r7}
    3c5e:	b085      	sub	sp, #20
    3c60:	af00      	add	r7, sp, #0
    3c62:	60f8      	str	r0, [r7, #12]
    3c64:	60b9      	str	r1, [r7, #8]
    3c66:	607a      	str	r2, [r7, #4]
    3c68:	603b      	str	r3, [r7, #0]
}
    3c6a:	3714      	adds	r7, #20
    3c6c:	46bd      	mov	sp, r7
    3c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c72:	4770      	bx	lr

00003c74 <s_11>:
void s_11(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c74:	b580      	push	{r7, lr}
    3c76:	b084      	sub	sp, #16
    3c78:	af00      	add	r7, sp, #0
    3c7a:	60f8      	str	r0, [r7, #12]
    3c7c:	60b9      	str	r1, [r7, #8]
    3c7e:	607a      	str	r2, [r7, #4]
    3c80:	603b      	str	r3, [r7, #0]
    check_failsafe_task(); // main.c
    3c82:	f012 fe21 	bl	168c8 <check_failsafe_task>
}
    3c86:	3710      	adds	r7, #16
    3c88:	46bd      	mov	sp, r7
    3c8a:	bd80      	pop	{r7, pc}

00003c8c <s_12>:

/*task 5, servant 12, 13, 14*/
void s_12(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3c8c:	b480      	push	{r7}
    3c8e:	b085      	sub	sp, #20
    3c90:	af00      	add	r7, sp, #0
    3c92:	60f8      	str	r0, [r7, #12]
    3c94:	60b9      	str	r1, [r7, #8]
    3c96:	607a      	str	r2, [r7, #4]
    3c98:	603b      	str	r3, [r7, #0]
}
    3c9a:	3714      	adds	r7, #20
    3c9c:	46bd      	mov	sp, r7
    3c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ca2:	4770      	bx	lr

00003ca4 <s_13>:
void s_13(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3ca4:	b580      	push	{r7, lr}
    3ca6:	b084      	sub	sp, #16
    3ca8:	af00      	add	r7, sp, #0
    3caa:	60f8      	str	r0, [r7, #12]
    3cac:	60b9      	str	r1, [r7, #8]
    3cae:	607a      	str	r2, [r7, #4]
    3cb0:	603b      	str	r3, [r7, #0]
     //inflight_calib(pdTRUE); // inflight_calib.h
     //inflight_calib(pdTRUE); // main_auto.c , we transfer this function into main.c because of bugs if not 
     radio_control_task();
    3cb2:	f009 f8a3 	bl	cdfc <radio_control_task>
}
    3cb6:	3710      	adds	r7, #16
    3cb8:	46bd      	mov	sp, r7
    3cba:	bd80      	pop	{r7, pc}

00003cbc <s_14>:
void s_14(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3cbc:	b580      	push	{r7, lr}
    3cbe:	b084      	sub	sp, #16
    3cc0:	af00      	add	r7, sp, #0
    3cc2:	60f8      	str	r0, [r7, #12]
    3cc4:	60b9      	str	r1, [r7, #8]
    3cc6:	607a      	str	r2, [r7, #4]
    3cc8:	603b      	str	r3, [r7, #0]
    ir_gain_calib(); //infrared.h
    3cca:	f00d ff49 	bl	11b60 <ir_gain_calib>
}
    3cce:	3710      	adds	r7, #16
    3cd0:	46bd      	mov	sp, r7
    3cd2:	bd80      	pop	{r7, pc}

00003cd4 <s_15>:

/*task 6, servant 15,16,17,18*/ 
void s_15(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3cd4:	b480      	push	{r7}
    3cd6:	b085      	sub	sp, #20
    3cd8:	af00      	add	r7, sp, #0
    3cda:	60f8      	str	r0, [r7, #12]
    3cdc:	60b9      	str	r1, [r7, #8]
    3cde:	607a      	str	r2, [r7, #4]
    3ce0:	603b      	str	r3, [r7, #0]
}
    3ce2:	3714      	adds	r7, #20
    3ce4:	46bd      	mov	sp, r7
    3ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cea:	4770      	bx	lr

00003cec <s_16>:
void s_16(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3cec:	b580      	push	{r7, lr}
    3cee:	b084      	sub	sp, #16
    3cf0:	af00      	add	r7, sp, #0
    3cf2:	60f8      	str	r0, [r7, #12]
    3cf4:	60b9      	str	r1, [r7, #8]
    3cf6:	607a      	str	r2, [r7, #4]
    3cf8:	603b      	str	r3, [r7, #0]
    ir_update(); // infrared.h
    3cfa:	f00d fef3 	bl	11ae4 <ir_update>
}
    3cfe:	3710      	adds	r7, #16
    3d00:	46bd      	mov	sp, r7
    3d02:	bd80      	pop	{r7, pc}

00003d04 <s_17>:
void s_17(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d04:	b580      	push	{r7, lr}
    3d06:	b084      	sub	sp, #16
    3d08:	af00      	add	r7, sp, #0
    3d0a:	60f8      	str	r0, [r7, #12]
    3d0c:	60b9      	str	r1, [r7, #8]
    3d0e:	607a      	str	r2, [r7, #4]
    3d10:	603b      	str	r3, [r7, #0]
    //servo_transmit();  // servo.h
    estimator_update_state_infrared(); //estimator.h
    3d12:	f011 f96f 	bl	14ff4 <estimator_update_state_infrared>
}
    3d16:	3710      	adds	r7, #16
    3d18:	46bd      	mov	sp, r7
    3d1a:	bd80      	pop	{r7, pc}

00003d1c <s_18>:
void s_18(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d1c:	b580      	push	{r7, lr}
    3d1e:	b084      	sub	sp, #16
    3d20:	af00      	add	r7, sp, #0
    3d22:	60f8      	str	r0, [r7, #12]
    3d24:	60b9      	str	r1, [r7, #8]
    3d26:	607a      	str	r2, [r7, #4]
    3d28:	603b      	str	r3, [r7, #0]
    roll_pitch_pid_run(); // pid.h
    3d2a:	f00d ff49 	bl	11bc0 <roll_pitch_pid_run>
}
    3d2e:	3710      	adds	r7, #16
    3d30:	46bd      	mov	sp, r7
    3d32:	bd80      	pop	{r7, pc}

00003d34 <s_19>:

/*task 7, servant 19, 20*/
void s_19(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d34:	b480      	push	{r7}
    3d36:	b085      	sub	sp, #20
    3d38:	af00      	add	r7, sp, #0
    3d3a:	60f8      	str	r0, [r7, #12]
    3d3c:	60b9      	str	r1, [r7, #8]
    3d3e:	607a      	str	r2, [r7, #4]
    3d40:	603b      	str	r3, [r7, #0]
}
    3d42:	3714      	adds	r7, #20
    3d44:	46bd      	mov	sp, r7
    3d46:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d4a:	4770      	bx	lr

00003d4c <s_20>:
void s_20(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d4c:	b580      	push	{r7, lr}
    3d4e:	b084      	sub	sp, #16
    3d50:	af00      	add	r7, sp, #0
    3d52:	60f8      	str	r0, [r7, #12]
    3d54:	60b9      	str	r1, [r7, #8]
    3d56:	607a      	str	r2, [r7, #4]
    3d58:	603b      	str	r3, [r7, #0]
    link_fbw_send(); //link_fbw.h
    3d5a:	f00d f935 	bl	10fc8 <link_fbw_send>
}
    3d5e:	3710      	adds	r7, #16
    3d60:	46bd      	mov	sp, r7
    3d62:	bd80      	pop	{r7, pc}

00003d64 <s_21>:

/*task 8, sevrvant 21,22,23*/
void s_21(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d64:	b480      	push	{r7}
    3d66:	b085      	sub	sp, #20
    3d68:	af00      	add	r7, sp, #0
    3d6a:	60f8      	str	r0, [r7, #12]
    3d6c:	60b9      	str	r1, [r7, #8]
    3d6e:	607a      	str	r2, [r7, #4]
    3d70:	603b      	str	r3, [r7, #0]
}
    3d72:	3714      	adds	r7, #20
    3d74:	46bd      	mov	sp, r7
    3d76:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d7a:	4770      	bx	lr

00003d7c <s_22>:
void s_22(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d7c:	b580      	push	{r7, lr}
    3d7e:	b084      	sub	sp, #16
    3d80:	af00      	add	r7, sp, #0
    3d82:	60f8      	str	r0, [r7, #12]
    3d84:	60b9      	str	r1, [r7, #8]
    3d86:	607a      	str	r2, [r7, #4]
    3d88:	603b      	str	r3, [r7, #0]
    parse_gps_msg(); //gps.h
    3d8a:	f00d fbf5 	bl	11578 <parse_gps_msg>
}
    3d8e:	3710      	adds	r7, #16
    3d90:	46bd      	mov	sp, r7
    3d92:	bd80      	pop	{r7, pc}

00003d94 <s_23>:
void s_23(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3d94:	b580      	push	{r7, lr}
    3d96:	b084      	sub	sp, #16
    3d98:	af00      	add	r7, sp, #0
    3d9a:	60f8      	str	r0, [r7, #12]
    3d9c:	60b9      	str	r1, [r7, #8]
    3d9e:	607a      	str	r2, [r7, #4]
    3da0:	603b      	str	r3, [r7, #0]
    //use_gps_pos(); // autopilot.h  is not implemeted.
    send_gps_pos();
    3da2:	f00a fe11 	bl	e9c8 <send_gps_pos>
    send_radIR();
    3da6:	f00b ffd5 	bl	fd54 <send_radIR>
    send_takeOff();
    3daa:	f00c fdcd 	bl	10948 <send_takeOff>
}
    3dae:	3710      	adds	r7, #16
    3db0:	46bd      	mov	sp, r7
    3db2:	bd80      	pop	{r7, pc}

00003db4 <s_24>:

/*task 9, servant 24, 25, 26, 27*/
void s_24(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3db4:	b480      	push	{r7}
    3db6:	b085      	sub	sp, #20
    3db8:	af00      	add	r7, sp, #0
    3dba:	60f8      	str	r0, [r7, #12]
    3dbc:	60b9      	str	r1, [r7, #8]
    3dbe:	607a      	str	r2, [r7, #4]
    3dc0:	603b      	str	r3, [r7, #0]
}
    3dc2:	3714      	adds	r7, #20
    3dc4:	46bd      	mov	sp, r7
    3dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dca:	4770      	bx	lr

00003dcc <s_25>:
void s_25(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3dcc:	b580      	push	{r7, lr}
    3dce:	b084      	sub	sp, #16
    3dd0:	af00      	add	r7, sp, #0
    3dd2:	60f8      	str	r0, [r7, #12]
    3dd4:	60b9      	str	r1, [r7, #8]
    3dd6:	607a      	str	r2, [r7, #4]
    3dd8:	603b      	str	r3, [r7, #0]
    nav_home(); // nav.h
    3dda:	f010 fe8d 	bl	14af8 <nav_home>
}
    3dde:	3710      	adds	r7, #16
    3de0:	46bd      	mov	sp, r7
    3de2:	bd80      	pop	{r7, pc}

00003de4 <s_26>:
void s_26(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3de4:	b580      	push	{r7, lr}
    3de6:	b084      	sub	sp, #16
    3de8:	af00      	add	r7, sp, #0
    3dea:	60f8      	str	r0, [r7, #12]
    3dec:	60b9      	str	r1, [r7, #8]
    3dee:	607a      	str	r2, [r7, #4]
    3df0:	603b      	str	r3, [r7, #0]
    nav_update(); // nav.h
    3df2:	f010 fea7 	bl	14b44 <nav_update>
}
    3df6:	3710      	adds	r7, #16
    3df8:	46bd      	mov	sp, r7
    3dfa:	bd80      	pop	{r7, pc}

00003dfc <s_27>:
void s_27(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3dfc:	b580      	push	{r7, lr}
    3dfe:	b084      	sub	sp, #16
    3e00:	af00      	add	r7, sp, #0
    3e02:	60f8      	str	r0, [r7, #12]
    3e04:	60b9      	str	r1, [r7, #8]
    3e06:	607a      	str	r2, [r7, #4]
    3e08:	603b      	str	r3, [r7, #0]
    course_pid_run(); // pid.h
    3e0a:	f00d ffc5 	bl	11d98 <course_pid_run>
}
    3e0e:	3710      	adds	r7, #16
    3e10:	46bd      	mov	sp, r7
    3e12:	bd80      	pop	{r7, pc}

00003e14 <s_28>:

/*task 10, servant 28, 29*/
void s_28(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3e14:	b480      	push	{r7}
    3e16:	b085      	sub	sp, #20
    3e18:	af00      	add	r7, sp, #0
    3e1a:	60f8      	str	r0, [r7, #12]
    3e1c:	60b9      	str	r1, [r7, #8]
    3e1e:	607a      	str	r2, [r7, #4]
    3e20:	603b      	str	r3, [r7, #0]
}
    3e22:	3714      	adds	r7, #20
    3e24:	46bd      	mov	sp, r7
    3e26:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e2a:	4770      	bx	lr

00003e2c <s_29>:
void s_29(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3e2c:	b580      	push	{r7, lr}
    3e2e:	b084      	sub	sp, #16
    3e30:	af00      	add	r7, sp, #0
    3e32:	60f8      	str	r0, [r7, #12]
    3e34:	60b9      	str	r1, [r7, #8]
    3e36:	607a      	str	r2, [r7, #4]
    3e38:	603b      	str	r3, [r7, #0]
    altitude_pid_run(); // pid.h
    3e3a:	f00e fa35 	bl	122a8 <altitude_pid_run>
}
    3e3e:	3710      	adds	r7, #16
    3e40:	46bd      	mov	sp, r7
    3e42:	bd80      	pop	{r7, pc}

00003e44 <s_30>:

/*task 11, servant 30, 31*/
void s_30(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3e44:	b480      	push	{r7}
    3e46:	b085      	sub	sp, #20
    3e48:	af00      	add	r7, sp, #0
    3e4a:	60f8      	str	r0, [r7, #12]
    3e4c:	60b9      	str	r1, [r7, #8]
    3e4e:	607a      	str	r2, [r7, #4]
    3e50:	603b      	str	r3, [r7, #0]
}
    3e52:	3714      	adds	r7, #20
    3e54:	46bd      	mov	sp, r7
    3e56:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e5a:	4770      	bx	lr

00003e5c <s_31>:
void s_31(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData)
{
    3e5c:	b580      	push	{r7, lr}
    3e5e:	b084      	sub	sp, #16
    3e60:	af00      	add	r7, sp, #0
    3e62:	60f8      	str	r0, [r7, #12]
    3e64:	60b9      	str	r1, [r7, #8]
    3e66:	607a      	str	r2, [r7, #4]
    3e68:	603b      	str	r3, [r7, #0]
    climb_pid_run(); // pid.h
    3e6a:	f00e f84d 	bl	11f08 <climb_pid_run>
}
    3e6e:	3710      	adds	r7, #16
    3e70:	46bd      	mov	sp, r7
    3e72:	bd80      	pop	{r7, pc}

00003e74 <s_32>:

/*task 12, servant 32, 33*/
void s_32(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3e74:	b480      	push	{r7}
    3e76:	b085      	sub	sp, #20
    3e78:	af00      	add	r7, sp, #0
    3e7a:	60f8      	str	r0, [r7, #12]
    3e7c:	60b9      	str	r1, [r7, #8]
    3e7e:	607a      	str	r2, [r7, #4]
    3e80:	603b      	str	r3, [r7, #0]
}
    3e82:	3714      	adds	r7, #20
    3e84:	46bd      	mov	sp, r7
    3e86:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e8a:	4770      	bx	lr

00003e8c <s_33>:
void s_33(xEventHandle * pxEventArray, portBASE_TYPE NumOfEvent, struct eventData * pxDataArray, portBASE_TYPE NumOfData) 
{
    3e8c:	b580      	push	{r7, lr}
    3e8e:	b084      	sub	sp, #16
    3e90:	af00      	add	r7, sp, #0
    3e92:	60f8      	str	r0, [r7, #12]
    3e94:	60b9      	str	r1, [r7, #8]
    3e96:	607a      	str	r2, [r7, #4]
    3e98:	603b      	str	r3, [r7, #0]
    // main.c
    send_boot();
    3e9a:	f003 fa77 	bl	738c <send_boot>
    send_attitude();
    3e9e:	f004 fa45 	bl	832c <send_attitude>
    send_adc();
    3ea2:	f004 ff37 	bl	8d14 <send_adc>
    send_settings();
    3ea6:	f005 f9bd 	bl	9224 <send_settings>
    send_desired();
    3eaa:	f005 fdbf 	bl	9a2c <send_desired>
    send_bat();
    3eae:	f006 fced 	bl	a88c <send_bat>
    send_climb();
    3eb2:	f007 f8a1 	bl	aff8 <send_climb>
    send_mode();
    3eb6:	f007 fe11 	bl	badc <send_mode>
    send_debug();
    3eba:	f008 f8e3 	bl	c084 <send_debug>
    send_nav_ref();
    3ebe:	f008 fbb7 	bl	c630 <send_nav_ref>
}
    3ec2:	3710      	adds	r7, #16
    3ec4:	46bd      	mov	sp, r7
    3ec6:	bd80      	pop	{r7, pc}

00003ec8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    3ec8:	b480      	push	{r7}
    3eca:	b083      	sub	sp, #12
    3ecc:	af00      	add	r7, sp, #0
    3ece:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    3ed0:	687b      	ldr	r3, [r7, #4]
    3ed2:	f103 0208 	add.w	r2, r3, #8
    3ed6:	687b      	ldr	r3, [r7, #4]
    3ed8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    3eda:	687b      	ldr	r3, [r7, #4]
    3edc:	f04f 32ff 	mov.w	r2, #4294967295
    3ee0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    3ee2:	687b      	ldr	r3, [r7, #4]
    3ee4:	f103 0208 	add.w	r2, r3, #8
    3ee8:	687b      	ldr	r3, [r7, #4]
    3eea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    3eec:	687b      	ldr	r3, [r7, #4]
    3eee:	f103 0208 	add.w	r2, r3, #8
    3ef2:	687b      	ldr	r3, [r7, #4]
    3ef4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    3ef6:	687b      	ldr	r3, [r7, #4]
    3ef8:	2200      	movs	r2, #0
    3efa:	601a      	str	r2, [r3, #0]
}
    3efc:	370c      	adds	r7, #12
    3efe:	46bd      	mov	sp, r7
    3f00:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f04:	4770      	bx	lr
    3f06:	bf00      	nop

00003f08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    3f08:	b480      	push	{r7}
    3f0a:	b083      	sub	sp, #12
    3f0c:	af00      	add	r7, sp, #0
    3f0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    3f10:	687b      	ldr	r3, [r7, #4]
    3f12:	2200      	movs	r2, #0
    3f14:	611a      	str	r2, [r3, #16]
}
    3f16:	370c      	adds	r7, #12
    3f18:	46bd      	mov	sp, r7
    3f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f1e:	4770      	bx	lr

00003f20 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    3f20:	b480      	push	{r7}
    3f22:	b085      	sub	sp, #20
    3f24:	af00      	add	r7, sp, #0
    3f26:	6078      	str	r0, [r7, #4]
    3f28:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    3f2a:	687b      	ldr	r3, [r7, #4]
    3f2c:	685b      	ldr	r3, [r3, #4]
    3f2e:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    3f30:	68fb      	ldr	r3, [r7, #12]
    3f32:	685a      	ldr	r2, [r3, #4]
    3f34:	683b      	ldr	r3, [r7, #0]
    3f36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    3f38:	687b      	ldr	r3, [r7, #4]
    3f3a:	685a      	ldr	r2, [r3, #4]
    3f3c:	683b      	ldr	r3, [r7, #0]
    3f3e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    3f40:	68fb      	ldr	r3, [r7, #12]
    3f42:	685b      	ldr	r3, [r3, #4]
    3f44:	683a      	ldr	r2, [r7, #0]
    3f46:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    3f48:	68fb      	ldr	r3, [r7, #12]
    3f4a:	683a      	ldr	r2, [r7, #0]
    3f4c:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    3f4e:	687b      	ldr	r3, [r7, #4]
    3f50:	683a      	ldr	r2, [r7, #0]
    3f52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3f54:	683b      	ldr	r3, [r7, #0]
    3f56:	687a      	ldr	r2, [r7, #4]
    3f58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    3f5a:	687b      	ldr	r3, [r7, #4]
    3f5c:	681b      	ldr	r3, [r3, #0]
    3f5e:	1c5a      	adds	r2, r3, #1
    3f60:	687b      	ldr	r3, [r7, #4]
    3f62:	601a      	str	r2, [r3, #0]
}
    3f64:	3714      	adds	r7, #20
    3f66:	46bd      	mov	sp, r7
    3f68:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f6c:	4770      	bx	lr
    3f6e:	bf00      	nop

00003f70 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    3f70:	b480      	push	{r7}
    3f72:	b085      	sub	sp, #20
    3f74:	af00      	add	r7, sp, #0
    3f76:	6078      	str	r0, [r7, #4]
    3f78:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    3f7a:	683b      	ldr	r3, [r7, #0]
    3f7c:	681b      	ldr	r3, [r3, #0]
    3f7e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    3f80:	68bb      	ldr	r3, [r7, #8]
    3f82:	f1b3 3fff 	cmp.w	r3, #4294967295
    3f86:	d103      	bne.n	3f90 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    3f88:	687b      	ldr	r3, [r7, #4]
    3f8a:	691b      	ldr	r3, [r3, #16]
    3f8c:	60fb      	str	r3, [r7, #12]
    3f8e:	e00c      	b.n	3faa <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    3f90:	687b      	ldr	r3, [r7, #4]
    3f92:	3308      	adds	r3, #8
    3f94:	60fb      	str	r3, [r7, #12]
    3f96:	e002      	b.n	3f9e <vListInsert+0x2e>
    3f98:	68fb      	ldr	r3, [r7, #12]
    3f9a:	685b      	ldr	r3, [r3, #4]
    3f9c:	60fb      	str	r3, [r7, #12]
    3f9e:	68fb      	ldr	r3, [r7, #12]
    3fa0:	685b      	ldr	r3, [r3, #4]
    3fa2:	681a      	ldr	r2, [r3, #0]
    3fa4:	68bb      	ldr	r3, [r7, #8]
    3fa6:	429a      	cmp	r2, r3
    3fa8:	d9f6      	bls.n	3f98 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    3faa:	68fb      	ldr	r3, [r7, #12]
    3fac:	685a      	ldr	r2, [r3, #4]
    3fae:	683b      	ldr	r3, [r7, #0]
    3fb0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    3fb2:	683b      	ldr	r3, [r7, #0]
    3fb4:	685b      	ldr	r3, [r3, #4]
    3fb6:	683a      	ldr	r2, [r7, #0]
    3fb8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    3fba:	683b      	ldr	r3, [r7, #0]
    3fbc:	68fa      	ldr	r2, [r7, #12]
    3fbe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    3fc0:	68fb      	ldr	r3, [r7, #12]
    3fc2:	683a      	ldr	r2, [r7, #0]
    3fc4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3fc6:	683b      	ldr	r3, [r7, #0]
    3fc8:	687a      	ldr	r2, [r7, #4]
    3fca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    3fcc:	687b      	ldr	r3, [r7, #4]
    3fce:	681b      	ldr	r3, [r3, #0]
    3fd0:	1c5a      	adds	r2, r3, #1
    3fd2:	687b      	ldr	r3, [r7, #4]
    3fd4:	601a      	str	r2, [r3, #0]
}
    3fd6:	3714      	adds	r7, #20
    3fd8:	46bd      	mov	sp, r7
    3fda:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fde:	4770      	bx	lr

00003fe0 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    3fe0:	b480      	push	{r7}
    3fe2:	b085      	sub	sp, #20
    3fe4:	af00      	add	r7, sp, #0
    3fe6:	6078      	str	r0, [r7, #4]
    xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    3fe8:	687b      	ldr	r3, [r7, #4]
    3fea:	685b      	ldr	r3, [r3, #4]
    3fec:	687a      	ldr	r2, [r7, #4]
    3fee:	6892      	ldr	r2, [r2, #8]
    3ff0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    3ff2:	687b      	ldr	r3, [r7, #4]
    3ff4:	689b      	ldr	r3, [r3, #8]
    3ff6:	687a      	ldr	r2, [r7, #4]
    3ff8:	6852      	ldr	r2, [r2, #4]
    3ffa:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    3ffc:	687b      	ldr	r3, [r7, #4]
    3ffe:	691b      	ldr	r3, [r3, #16]
    4000:	60fb      	str	r3, [r7, #12]
	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    4002:	68fb      	ldr	r3, [r7, #12]
    4004:	685a      	ldr	r2, [r3, #4]
    4006:	687b      	ldr	r3, [r7, #4]
    4008:	429a      	cmp	r2, r3
    400a:	d103      	bne.n	4014 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    400c:	687b      	ldr	r3, [r7, #4]
    400e:	689a      	ldr	r2, [r3, #8]
    4010:	68fb      	ldr	r3, [r7, #12]
    4012:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    4014:	687b      	ldr	r3, [r7, #4]
    4016:	2200      	movs	r2, #0
    4018:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
    401a:	68fb      	ldr	r3, [r7, #12]
    401c:	681b      	ldr	r3, [r3, #0]
    401e:	1e5a      	subs	r2, r3, #1
    4020:	68fb      	ldr	r3, [r7, #12]
    4022:	601a      	str	r2, [r3, #0]
}
    4024:	3714      	adds	r7, #20
    4026:	46bd      	mov	sp, r7
    4028:	f85d 7b04 	ldr.w	r7, [sp], #4
    402c:	4770      	bx	lr
    402e:	bf00      	nop

00004030 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    4030:	b580      	push	{r7, lr}
    4032:	b084      	sub	sp, #16
    4034:	af00      	add	r7, sp, #0
    4036:	6078      	str	r0, [r7, #4]
    4038:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    403a:	2301      	movs	r3, #1
    403c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    403e:	683b      	ldr	r3, [r7, #0]
    4040:	2b01      	cmp	r3, #1
    4042:	d00b      	beq.n	405c <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4044:	687b      	ldr	r3, [r7, #4]
    4046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4048:	2b00      	cmp	r3, #0
    404a:	d001      	beq.n	4050 <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    404c:	2300      	movs	r3, #0
    404e:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4050:	687b      	ldr	r3, [r7, #4]
    4052:	691b      	ldr	r3, [r3, #16]
    4054:	2b00      	cmp	r3, #0
    4056:	d001      	beq.n	405c <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    4058:	2300      	movs	r3, #0
    405a:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    405c:	68fb      	ldr	r3, [r7, #12]
    405e:	2b01      	cmp	r3, #1
    4060:	d12f      	bne.n	40c2 <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    4062:	687b      	ldr	r3, [r7, #4]
    4064:	681a      	ldr	r2, [r3, #0]
    4066:	687b      	ldr	r3, [r7, #4]
    4068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    406a:	6879      	ldr	r1, [r7, #4]
    406c:	6c09      	ldr	r1, [r1, #64]	; 0x40
    406e:	fb01 f303 	mul.w	r3, r1, r3
    4072:	441a      	add	r2, r3
    4074:	687b      	ldr	r3, [r7, #4]
    4076:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    4078:	687b      	ldr	r3, [r7, #4]
    407a:	2200      	movs	r2, #0
    407c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    407e:	687b      	ldr	r3, [r7, #4]
    4080:	681a      	ldr	r2, [r3, #0]
    4082:	687b      	ldr	r3, [r7, #4]
    4084:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    4086:	687b      	ldr	r3, [r7, #4]
    4088:	681a      	ldr	r2, [r3, #0]
    408a:	687b      	ldr	r3, [r7, #4]
    408c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    408e:	3b01      	subs	r3, #1
    4090:	6879      	ldr	r1, [r7, #4]
    4092:	6c09      	ldr	r1, [r1, #64]	; 0x40
    4094:	fb01 f303 	mul.w	r3, r1, r3
    4098:	441a      	add	r2, r3
    409a:	687b      	ldr	r3, [r7, #4]
    409c:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    409e:	687b      	ldr	r3, [r7, #4]
    40a0:	f04f 32ff 	mov.w	r2, #4294967295
    40a4:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    40a6:	687b      	ldr	r3, [r7, #4]
    40a8:	f04f 32ff 	mov.w	r2, #4294967295
    40ac:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    40ae:	687b      	ldr	r3, [r7, #4]
    40b0:	3310      	adds	r3, #16
    40b2:	4618      	mov	r0, r3
    40b4:	f7ff ff08 	bl	3ec8 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    40b8:	687b      	ldr	r3, [r7, #4]
    40ba:	3324      	adds	r3, #36	; 0x24
    40bc:	4618      	mov	r0, r3
    40be:	f7ff ff03 	bl	3ec8 <vListInitialise>
	}

	return xReturn;
    40c2:	68fb      	ldr	r3, [r7, #12]
}
    40c4:	4618      	mov	r0, r3
    40c6:	3710      	adds	r7, #16
    40c8:	46bd      	mov	sp, r7
    40ca:	bd80      	pop	{r7, pc}

000040cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    40cc:	b580      	push	{r7, lr}
    40ce:	b088      	sub	sp, #32
    40d0:	af00      	add	r7, sp, #0
    40d2:	60f8      	str	r0, [r7, #12]
    40d4:	60b9      	str	r1, [r7, #8]
    40d6:	4613      	mov	r3, r2
    40d8:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    40da:	2300      	movs	r3, #0
    40dc:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    40de:	68fb      	ldr	r3, [r7, #12]
    40e0:	2b00      	cmp	r3, #0
    40e2:	d026      	beq.n	4132 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    40e4:	204c      	movs	r0, #76	; 0x4c
    40e6:	f001 fda5 	bl	5c34 <pvPortMalloc>
    40ea:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    40ec:	69bb      	ldr	r3, [r7, #24]
    40ee:	2b00      	cmp	r3, #0
    40f0:	d01f      	beq.n	4132 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    40f2:	68fb      	ldr	r3, [r7, #12]
    40f4:	68ba      	ldr	r2, [r7, #8]
    40f6:	fb02 f303 	mul.w	r3, r2, r3
    40fa:	3301      	adds	r3, #1
    40fc:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    40fe:	6978      	ldr	r0, [r7, #20]
    4100:	f001 fd98 	bl	5c34 <pvPortMalloc>
    4104:	4602      	mov	r2, r0
    4106:	69bb      	ldr	r3, [r7, #24]
    4108:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    410a:	69bb      	ldr	r3, [r7, #24]
    410c:	681b      	ldr	r3, [r3, #0]
    410e:	2b00      	cmp	r3, #0
    4110:	d00c      	beq.n	412c <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    4112:	69bb      	ldr	r3, [r7, #24]
    4114:	68fa      	ldr	r2, [r7, #12]
    4116:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    4118:	69bb      	ldr	r3, [r7, #24]
    411a:	68ba      	ldr	r2, [r7, #8]
    411c:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    411e:	69b8      	ldr	r0, [r7, #24]
    4120:	2101      	movs	r1, #1
    4122:	f7ff ff85 	bl	4030 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    4126:	69bb      	ldr	r3, [r7, #24]
    4128:	61fb      	str	r3, [r7, #28]
    412a:	e002      	b.n	4132 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    412c:	69b8      	ldr	r0, [r7, #24]
    412e:	f001 fe45 	bl	5dbc <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    4132:	69fb      	ldr	r3, [r7, #28]
}
    4134:	4618      	mov	r0, r3
    4136:	3720      	adds	r7, #32
    4138:	46bd      	mov	sp, r7
    413a:	bd80      	pop	{r7, pc}

0000413c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    413c:	b580      	push	{r7, lr}
    413e:	b084      	sub	sp, #16
    4140:	af00      	add	r7, sp, #0
    4142:	4603      	mov	r3, r0
    4144:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    4146:	204c      	movs	r0, #76	; 0x4c
    4148:	f001 fd74 	bl	5c34 <pvPortMalloc>
    414c:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    414e:	68fb      	ldr	r3, [r7, #12]
    4150:	2b00      	cmp	r3, #0
    4152:	d02c      	beq.n	41ae <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    4154:	68fb      	ldr	r3, [r7, #12]
    4156:	2200      	movs	r2, #0
    4158:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    415a:	68fb      	ldr	r3, [r7, #12]
    415c:	2200      	movs	r2, #0
    415e:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    4160:	68fb      	ldr	r3, [r7, #12]
    4162:	2200      	movs	r2, #0
    4164:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    4166:	68fb      	ldr	r3, [r7, #12]
    4168:	2200      	movs	r2, #0
    416a:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    416c:	68fb      	ldr	r3, [r7, #12]
    416e:	2200      	movs	r2, #0
    4170:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    4172:	68fb      	ldr	r3, [r7, #12]
    4174:	2201      	movs	r2, #1
    4176:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    4178:	68fb      	ldr	r3, [r7, #12]
    417a:	2200      	movs	r2, #0
    417c:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    417e:	68fb      	ldr	r3, [r7, #12]
    4180:	f04f 32ff 	mov.w	r2, #4294967295
    4184:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    4186:	68fb      	ldr	r3, [r7, #12]
    4188:	f04f 32ff 	mov.w	r2, #4294967295
    418c:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    418e:	68fb      	ldr	r3, [r7, #12]
    4190:	3310      	adds	r3, #16
    4192:	4618      	mov	r0, r3
    4194:	f7ff fe98 	bl	3ec8 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    4198:	68fb      	ldr	r3, [r7, #12]
    419a:	3324      	adds	r3, #36	; 0x24
    419c:	4618      	mov	r0, r3
    419e:	f7ff fe93 	bl	3ec8 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    41a2:	68f8      	ldr	r0, [r7, #12]
    41a4:	2100      	movs	r1, #0
    41a6:	2200      	movs	r2, #0
    41a8:	2300      	movs	r3, #0
    41aa:	f000 f81d 	bl	41e8 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    41ae:	68fb      	ldr	r3, [r7, #12]
	}
    41b0:	4618      	mov	r0, r3
    41b2:	3710      	adds	r7, #16
    41b4:	46bd      	mov	sp, r7
    41b6:	bd80      	pop	{r7, pc}

000041b8 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    41b8:	b580      	push	{r7, lr}
    41ba:	b084      	sub	sp, #16
    41bc:	af00      	add	r7, sp, #0
    41be:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    41c0:	f001 fcc0 	bl	5b44 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    41c4:	687b      	ldr	r3, [r7, #4]
    41c6:	681b      	ldr	r3, [r3, #0]
    41c8:	2b00      	cmp	r3, #0
    41ca:	d103      	bne.n	41d4 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    41cc:	687b      	ldr	r3, [r7, #4]
    41ce:	685b      	ldr	r3, [r3, #4]
    41d0:	60fb      	str	r3, [r7, #12]
    41d2:	e001      	b.n	41d8 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    41d4:	2300      	movs	r3, #0
    41d6:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    41d8:	f001 fcca 	bl	5b70 <vPortExitCritical>
		
		return pxReturn;
    41dc:	68fb      	ldr	r3, [r7, #12]
	}
    41de:	4618      	mov	r0, r3
    41e0:	3710      	adds	r7, #16
    41e2:	46bd      	mov	sp, r7
    41e4:	bd80      	pop	{r7, pc}
    41e6:	bf00      	nop

000041e8 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    41e8:	b580      	push	{r7, lr}
    41ea:	b088      	sub	sp, #32
    41ec:	af00      	add	r7, sp, #0
    41ee:	60f8      	str	r0, [r7, #12]
    41f0:	60b9      	str	r1, [r7, #8]
    41f2:	607a      	str	r2, [r7, #4]
    41f4:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    41f6:	2300      	movs	r3, #0
    41f8:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    41fa:	f001 fca3 	bl	5b44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    41fe:	68fb      	ldr	r3, [r7, #12]
    4200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4202:	68fb      	ldr	r3, [r7, #12]
    4204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4206:	429a      	cmp	r2, r3
    4208:	d216      	bcs.n	4238 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    420a:	68f8      	ldr	r0, [r7, #12]
    420c:	68b9      	ldr	r1, [r7, #8]
    420e:	683a      	ldr	r2, [r7, #0]
    4210:	f000 f9d6 	bl	45c0 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4214:	68fb      	ldr	r3, [r7, #12]
    4216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4218:	2b00      	cmp	r3, #0
    421a:	d009      	beq.n	4230 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    421c:	68fb      	ldr	r3, [r7, #12]
    421e:	3324      	adds	r3, #36	; 0x24
    4220:	4618      	mov	r0, r3
    4222:	f001 f905 	bl	5430 <xTaskRemoveFromEventList>
    4226:	4603      	mov	r3, r0
    4228:	2b01      	cmp	r3, #1
    422a:	d101      	bne.n	4230 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    422c:	f001 fc7c 	bl	5b28 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    4230:	f001 fc9e 	bl	5b70 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    4234:	2301      	movs	r3, #1
    4236:	e059      	b.n	42ec <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    4238:	687b      	ldr	r3, [r7, #4]
    423a:	2b00      	cmp	r3, #0
    423c:	d103      	bne.n	4246 <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    423e:	f001 fc97 	bl	5b70 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    4242:	2300      	movs	r3, #0
    4244:	e052      	b.n	42ec <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    4246:	69fb      	ldr	r3, [r7, #28]
    4248:	2b00      	cmp	r3, #0
    424a:	d106      	bne.n	425a <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    424c:	f107 0314 	add.w	r3, r7, #20
    4250:	4618      	mov	r0, r3
    4252:	f001 f945 	bl	54e0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4256:	2301      	movs	r3, #1
    4258:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    425a:	f001 fc89 	bl	5b70 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    425e:	f000 fe93 	bl	4f88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    4262:	f001 fc6f 	bl	5b44 <vPortEnterCritical>
    4266:	68fb      	ldr	r3, [r7, #12]
    4268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    426a:	f1b3 3fff 	cmp.w	r3, #4294967295
    426e:	d102      	bne.n	4276 <xQueueGenericSend+0x8e>
    4270:	68fb      	ldr	r3, [r7, #12]
    4272:	2200      	movs	r2, #0
    4274:	645a      	str	r2, [r3, #68]	; 0x44
    4276:	68fb      	ldr	r3, [r7, #12]
    4278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    427a:	f1b3 3fff 	cmp.w	r3, #4294967295
    427e:	d102      	bne.n	4286 <xQueueGenericSend+0x9e>
    4280:	68fb      	ldr	r3, [r7, #12]
    4282:	2200      	movs	r2, #0
    4284:	649a      	str	r2, [r3, #72]	; 0x48
    4286:	f001 fc73 	bl	5b70 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    428a:	f107 0214 	add.w	r2, r7, #20
    428e:	1d3b      	adds	r3, r7, #4
    4290:	4610      	mov	r0, r2
    4292:	4619      	mov	r1, r3
    4294:	f001 f93c 	bl	5510 <xTaskCheckForTimeOut>
    4298:	4603      	mov	r3, r0
    429a:	2b00      	cmp	r3, #0
    429c:	d11e      	bne.n	42dc <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    429e:	68f8      	ldr	r0, [r7, #12]
    42a0:	f000 fa86 	bl	47b0 <prvIsQueueFull>
    42a4:	4603      	mov	r3, r0
    42a6:	2b00      	cmp	r3, #0
    42a8:	d012      	beq.n	42d0 <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    42aa:	68fb      	ldr	r3, [r7, #12]
    42ac:	f103 0210 	add.w	r2, r3, #16
    42b0:	687b      	ldr	r3, [r7, #4]
    42b2:	4610      	mov	r0, r2
    42b4:	4619      	mov	r1, r3
    42b6:	f001 f883 	bl	53c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    42ba:	68f8      	ldr	r0, [r7, #12]
    42bc:	f000 fa02 	bl	46c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    42c0:	f000 fe74 	bl	4fac <xTaskResumeAll>
    42c4:	4603      	mov	r3, r0
    42c6:	2b00      	cmp	r3, #0
    42c8:	d10f      	bne.n	42ea <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    42ca:	f001 fc2d 	bl	5b28 <vPortYieldFromISR>
    42ce:	e00c      	b.n	42ea <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    42d0:	68f8      	ldr	r0, [r7, #12]
    42d2:	f000 f9f7 	bl	46c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    42d6:	f000 fe69 	bl	4fac <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    42da:	e78e      	b.n	41fa <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    42dc:	68f8      	ldr	r0, [r7, #12]
    42de:	f000 f9f1 	bl	46c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    42e2:	f000 fe63 	bl	4fac <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    42e6:	2300      	movs	r3, #0
    42e8:	e000      	b.n	42ec <xQueueGenericSend+0x104>
		}
	}
    42ea:	e786      	b.n	41fa <xQueueGenericSend+0x12>
}
    42ec:	4618      	mov	r0, r3
    42ee:	3720      	adds	r7, #32
    42f0:	46bd      	mov	sp, r7
    42f2:	bd80      	pop	{r7, pc}

000042f4 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    42f4:	b580      	push	{r7, lr}
    42f6:	b086      	sub	sp, #24
    42f8:	af00      	add	r7, sp, #0
    42fa:	60f8      	str	r0, [r7, #12]
    42fc:	60b9      	str	r1, [r7, #8]
    42fe:	607a      	str	r2, [r7, #4]
    4300:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4302:	2300      	movs	r3, #0
    4304:	613b      	str	r3, [r7, #16]
    4306:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    430a:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    430e:	68fb      	ldr	r3, [r7, #12]
    4310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4312:	68fb      	ldr	r3, [r7, #12]
    4314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4316:	429a      	cmp	r2, r3
    4318:	d221      	bcs.n	435e <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    431a:	68f8      	ldr	r0, [r7, #12]
    431c:	68b9      	ldr	r1, [r7, #8]
    431e:	683a      	ldr	r2, [r7, #0]
    4320:	f000 f94e 	bl	45c0 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    4324:	68fb      	ldr	r3, [r7, #12]
    4326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4328:	f1b3 3fff 	cmp.w	r3, #4294967295
    432c:	d10f      	bne.n	434e <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    432e:	68fb      	ldr	r3, [r7, #12]
    4330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4332:	2b00      	cmp	r3, #0
    4334:	d010      	beq.n	4358 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4336:	68fb      	ldr	r3, [r7, #12]
    4338:	3324      	adds	r3, #36	; 0x24
    433a:	4618      	mov	r0, r3
    433c:	f001 f878 	bl	5430 <xTaskRemoveFromEventList>
    4340:	4603      	mov	r3, r0
    4342:	2b00      	cmp	r3, #0
    4344:	d008      	beq.n	4358 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    4346:	687b      	ldr	r3, [r7, #4]
    4348:	2201      	movs	r2, #1
    434a:	601a      	str	r2, [r3, #0]
    434c:	e004      	b.n	4358 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    434e:	68fb      	ldr	r3, [r7, #12]
    4350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4352:	1c5a      	adds	r2, r3, #1
    4354:	68fb      	ldr	r3, [r7, #12]
    4356:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    4358:	2301      	movs	r3, #1
    435a:	617b      	str	r3, [r7, #20]
    435c:	e001      	b.n	4362 <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    435e:	2300      	movs	r3, #0
    4360:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4362:	f04f 0000 	mov.w	r0, #0
    4366:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    436a:	697b      	ldr	r3, [r7, #20]
}
    436c:	4618      	mov	r0, r3
    436e:	3718      	adds	r7, #24
    4370:	46bd      	mov	sp, r7
    4372:	bd80      	pop	{r7, pc}

00004374 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    4374:	b580      	push	{r7, lr}
    4376:	b088      	sub	sp, #32
    4378:	af00      	add	r7, sp, #0
    437a:	60f8      	str	r0, [r7, #12]
    437c:	60b9      	str	r1, [r7, #8]
    437e:	607a      	str	r2, [r7, #4]
    4380:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    4382:	2300      	movs	r3, #0
    4384:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    4386:	f001 fbdd 	bl	5b44 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    438a:	68fb      	ldr	r3, [r7, #12]
    438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    438e:	2b00      	cmp	r3, #0
    4390:	d03b      	beq.n	440a <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    4392:	68fb      	ldr	r3, [r7, #12]
    4394:	68db      	ldr	r3, [r3, #12]
    4396:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    4398:	68f8      	ldr	r0, [r7, #12]
    439a:	68b9      	ldr	r1, [r7, #8]
    439c:	f000 f96c 	bl	4678 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    43a0:	683b      	ldr	r3, [r7, #0]
    43a2:	2b00      	cmp	r3, #0
    43a4:	d11c      	bne.n	43e0 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    43a6:	68fb      	ldr	r3, [r7, #12]
    43a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    43aa:	1e5a      	subs	r2, r3, #1
    43ac:	68fb      	ldr	r3, [r7, #12]
    43ae:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    43b0:	68fb      	ldr	r3, [r7, #12]
    43b2:	681b      	ldr	r3, [r3, #0]
    43b4:	2b00      	cmp	r3, #0
    43b6:	d104      	bne.n	43c2 <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    43b8:	f001 fa5c 	bl	5874 <xTaskGetCurrentTaskHandle>
    43bc:	4602      	mov	r2, r0
    43be:	68fb      	ldr	r3, [r7, #12]
    43c0:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    43c2:	68fb      	ldr	r3, [r7, #12]
    43c4:	691b      	ldr	r3, [r3, #16]
    43c6:	2b00      	cmp	r3, #0
    43c8:	d01b      	beq.n	4402 <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    43ca:	68fb      	ldr	r3, [r7, #12]
    43cc:	3310      	adds	r3, #16
    43ce:	4618      	mov	r0, r3
    43d0:	f001 f82e 	bl	5430 <xTaskRemoveFromEventList>
    43d4:	4603      	mov	r3, r0
    43d6:	2b01      	cmp	r3, #1
    43d8:	d113      	bne.n	4402 <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    43da:	f001 fba5 	bl	5b28 <vPortYieldFromISR>
    43de:	e010      	b.n	4402 <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    43e0:	68fb      	ldr	r3, [r7, #12]
    43e2:	69ba      	ldr	r2, [r7, #24]
    43e4:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    43e6:	68fb      	ldr	r3, [r7, #12]
    43e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    43ea:	2b00      	cmp	r3, #0
    43ec:	d009      	beq.n	4402 <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    43ee:	68fb      	ldr	r3, [r7, #12]
    43f0:	3324      	adds	r3, #36	; 0x24
    43f2:	4618      	mov	r0, r3
    43f4:	f001 f81c 	bl	5430 <xTaskRemoveFromEventList>
    43f8:	4603      	mov	r3, r0
    43fa:	2b00      	cmp	r3, #0
    43fc:	d001      	beq.n	4402 <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    43fe:	f001 fb93 	bl	5b28 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    4402:	f001 fbb5 	bl	5b70 <vPortExitCritical>
				return pdPASS;
    4406:	2301      	movs	r3, #1
    4408:	e066      	b.n	44d8 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    440a:	687b      	ldr	r3, [r7, #4]
    440c:	2b00      	cmp	r3, #0
    440e:	d103      	bne.n	4418 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    4410:	f001 fbae 	bl	5b70 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    4414:	2300      	movs	r3, #0
    4416:	e05f      	b.n	44d8 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    4418:	69fb      	ldr	r3, [r7, #28]
    441a:	2b00      	cmp	r3, #0
    441c:	d106      	bne.n	442c <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    441e:	f107 0310 	add.w	r3, r7, #16
    4422:	4618      	mov	r0, r3
    4424:	f001 f85c 	bl	54e0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4428:	2301      	movs	r3, #1
    442a:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    442c:	f001 fba0 	bl	5b70 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4430:	f000 fdaa 	bl	4f88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    4434:	f001 fb86 	bl	5b44 <vPortEnterCritical>
    4438:	68fb      	ldr	r3, [r7, #12]
    443a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    443c:	f1b3 3fff 	cmp.w	r3, #4294967295
    4440:	d102      	bne.n	4448 <xQueueGenericReceive+0xd4>
    4442:	68fb      	ldr	r3, [r7, #12]
    4444:	2200      	movs	r2, #0
    4446:	645a      	str	r2, [r3, #68]	; 0x44
    4448:	68fb      	ldr	r3, [r7, #12]
    444a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    444c:	f1b3 3fff 	cmp.w	r3, #4294967295
    4450:	d102      	bne.n	4458 <xQueueGenericReceive+0xe4>
    4452:	68fb      	ldr	r3, [r7, #12]
    4454:	2200      	movs	r2, #0
    4456:	649a      	str	r2, [r3, #72]	; 0x48
    4458:	f001 fb8a 	bl	5b70 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    445c:	f107 0210 	add.w	r2, r7, #16
    4460:	1d3b      	adds	r3, r7, #4
    4462:	4610      	mov	r0, r2
    4464:	4619      	mov	r1, r3
    4466:	f001 f853 	bl	5510 <xTaskCheckForTimeOut>
    446a:	4603      	mov	r3, r0
    446c:	2b00      	cmp	r3, #0
    446e:	d12b      	bne.n	44c8 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    4470:	68f8      	ldr	r0, [r7, #12]
    4472:	f000 f973 	bl	475c <prvIsQueueEmpty>
    4476:	4603      	mov	r3, r0
    4478:	2b00      	cmp	r3, #0
    447a:	d01f      	beq.n	44bc <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    447c:	68fb      	ldr	r3, [r7, #12]
    447e:	681b      	ldr	r3, [r3, #0]
    4480:	2b00      	cmp	r3, #0
    4482:	d108      	bne.n	4496 <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    4484:	f001 fb5e 	bl	5b44 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    4488:	68fb      	ldr	r3, [r7, #12]
    448a:	685b      	ldr	r3, [r3, #4]
    448c:	4618      	mov	r0, r3
    448e:	f001 fa01 	bl	5894 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    4492:	f001 fb6d 	bl	5b70 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    4496:	68fb      	ldr	r3, [r7, #12]
    4498:	f103 0224 	add.w	r2, r3, #36	; 0x24
    449c:	687b      	ldr	r3, [r7, #4]
    449e:	4610      	mov	r0, r2
    44a0:	4619      	mov	r1, r3
    44a2:	f000 ff8d 	bl	53c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    44a6:	68f8      	ldr	r0, [r7, #12]
    44a8:	f000 f90c 	bl	46c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    44ac:	f000 fd7e 	bl	4fac <xTaskResumeAll>
    44b0:	4603      	mov	r3, r0
    44b2:	2b00      	cmp	r3, #0
    44b4:	d10f      	bne.n	44d6 <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    44b6:	f001 fb37 	bl	5b28 <vPortYieldFromISR>
    44ba:	e00c      	b.n	44d6 <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    44bc:	68f8      	ldr	r0, [r7, #12]
    44be:	f000 f901 	bl	46c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    44c2:	f000 fd73 	bl	4fac <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    44c6:	e75e      	b.n	4386 <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    44c8:	68f8      	ldr	r0, [r7, #12]
    44ca:	f000 f8fb 	bl	46c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    44ce:	f000 fd6d 	bl	4fac <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    44d2:	2300      	movs	r3, #0
    44d4:	e000      	b.n	44d8 <xQueueGenericReceive+0x164>
		}
	}
    44d6:	e756      	b.n	4386 <xQueueGenericReceive+0x12>
}
    44d8:	4618      	mov	r0, r3
    44da:	3720      	adds	r7, #32
    44dc:	46bd      	mov	sp, r7
    44de:	bd80      	pop	{r7, pc}

000044e0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    44e0:	b580      	push	{r7, lr}
    44e2:	b086      	sub	sp, #24
    44e4:	af00      	add	r7, sp, #0
    44e6:	60f8      	str	r0, [r7, #12]
    44e8:	60b9      	str	r1, [r7, #8]
    44ea:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    44ec:	2300      	movs	r3, #0
    44ee:	613b      	str	r3, [r7, #16]
    44f0:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    44f4:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    44f8:	68fb      	ldr	r3, [r7, #12]
    44fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    44fc:	2b00      	cmp	r3, #0
    44fe:	d025      	beq.n	454c <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    4500:	68f8      	ldr	r0, [r7, #12]
    4502:	68b9      	ldr	r1, [r7, #8]
    4504:	f000 f8b8 	bl	4678 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    4508:	68fb      	ldr	r3, [r7, #12]
    450a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    450c:	1e5a      	subs	r2, r3, #1
    450e:	68fb      	ldr	r3, [r7, #12]
    4510:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    4512:	68fb      	ldr	r3, [r7, #12]
    4514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4516:	f1b3 3fff 	cmp.w	r3, #4294967295
    451a:	d10f      	bne.n	453c <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    451c:	68fb      	ldr	r3, [r7, #12]
    451e:	691b      	ldr	r3, [r3, #16]
    4520:	2b00      	cmp	r3, #0
    4522:	d010      	beq.n	4546 <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4524:	68fb      	ldr	r3, [r7, #12]
    4526:	3310      	adds	r3, #16
    4528:	4618      	mov	r0, r3
    452a:	f000 ff81 	bl	5430 <xTaskRemoveFromEventList>
    452e:	4603      	mov	r3, r0
    4530:	2b00      	cmp	r3, #0
    4532:	d008      	beq.n	4546 <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    4534:	687b      	ldr	r3, [r7, #4]
    4536:	2201      	movs	r2, #1
    4538:	601a      	str	r2, [r3, #0]
    453a:	e004      	b.n	4546 <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    453c:	68fb      	ldr	r3, [r7, #12]
    453e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4540:	1c5a      	adds	r2, r3, #1
    4542:	68fb      	ldr	r3, [r7, #12]
    4544:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    4546:	2301      	movs	r3, #1
    4548:	617b      	str	r3, [r7, #20]
    454a:	e001      	b.n	4550 <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    454c:	2300      	movs	r3, #0
    454e:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4550:	f04f 0000 	mov.w	r0, #0
    4554:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4558:	697b      	ldr	r3, [r7, #20]
}
    455a:	4618      	mov	r0, r3
    455c:	3718      	adds	r7, #24
    455e:	46bd      	mov	sp, r7
    4560:	bd80      	pop	{r7, pc}
    4562:	bf00      	nop

00004564 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    4564:	b580      	push	{r7, lr}
    4566:	b084      	sub	sp, #16
    4568:	af00      	add	r7, sp, #0
    456a:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    456c:	f001 faea 	bl	5b44 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    4570:	687b      	ldr	r3, [r7, #4]
    4572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4574:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4576:	f001 fafb 	bl	5b70 <vPortExitCritical>

	return uxReturn;
    457a:	68fb      	ldr	r3, [r7, #12]
}
    457c:	4618      	mov	r0, r3
    457e:	3710      	adds	r7, #16
    4580:	46bd      	mov	sp, r7
    4582:	bd80      	pop	{r7, pc}

00004584 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    4584:	b480      	push	{r7}
    4586:	b085      	sub	sp, #20
    4588:	af00      	add	r7, sp, #0
    458a:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    458c:	687b      	ldr	r3, [r7, #4]
    458e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4590:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    4592:	68fb      	ldr	r3, [r7, #12]
}
    4594:	4618      	mov	r0, r3
    4596:	3714      	adds	r7, #20
    4598:	46bd      	mov	sp, r7
    459a:	f85d 7b04 	ldr.w	r7, [sp], #4
    459e:	4770      	bx	lr

000045a0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    45a0:	b580      	push	{r7, lr}
    45a2:	b082      	sub	sp, #8
    45a4:	af00      	add	r7, sp, #0
    45a6:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    45a8:	687b      	ldr	r3, [r7, #4]
    45aa:	681b      	ldr	r3, [r3, #0]
    45ac:	4618      	mov	r0, r3
    45ae:	f001 fc05 	bl	5dbc <vPortFree>
	vPortFree( pxQueue );
    45b2:	6878      	ldr	r0, [r7, #4]
    45b4:	f001 fc02 	bl	5dbc <vPortFree>
}
    45b8:	3708      	adds	r7, #8
    45ba:	46bd      	mov	sp, r7
    45bc:	bd80      	pop	{r7, pc}
    45be:	bf00      	nop

000045c0 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    45c0:	b580      	push	{r7, lr}
    45c2:	b084      	sub	sp, #16
    45c4:	af00      	add	r7, sp, #0
    45c6:	60f8      	str	r0, [r7, #12]
    45c8:	60b9      	str	r1, [r7, #8]
    45ca:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    45cc:	68fb      	ldr	r3, [r7, #12]
    45ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    45d0:	2b00      	cmp	r3, #0
    45d2:	d10c      	bne.n	45ee <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    45d4:	68fb      	ldr	r3, [r7, #12]
    45d6:	681b      	ldr	r3, [r3, #0]
    45d8:	2b00      	cmp	r3, #0
    45da:	d145      	bne.n	4668 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    45dc:	68fb      	ldr	r3, [r7, #12]
    45de:	685b      	ldr	r3, [r3, #4]
    45e0:	4618      	mov	r0, r3
    45e2:	f001 f9bb 	bl	595c <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    45e6:	68fb      	ldr	r3, [r7, #12]
    45e8:	2200      	movs	r2, #0
    45ea:	605a      	str	r2, [r3, #4]
    45ec:	e03c      	b.n	4668 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    45ee:	687b      	ldr	r3, [r7, #4]
    45f0:	2b00      	cmp	r3, #0
    45f2:	d11a      	bne.n	462a <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    45f4:	68fb      	ldr	r3, [r7, #12]
    45f6:	689a      	ldr	r2, [r3, #8]
    45f8:	68fb      	ldr	r3, [r7, #12]
    45fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    45fc:	4610      	mov	r0, r2
    45fe:	68b9      	ldr	r1, [r7, #8]
    4600:	461a      	mov	r2, r3
    4602:	f014 f801 	bl	18608 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    4606:	68fb      	ldr	r3, [r7, #12]
    4608:	689a      	ldr	r2, [r3, #8]
    460a:	68fb      	ldr	r3, [r7, #12]
    460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    460e:	441a      	add	r2, r3
    4610:	68fb      	ldr	r3, [r7, #12]
    4612:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    4614:	68fb      	ldr	r3, [r7, #12]
    4616:	689a      	ldr	r2, [r3, #8]
    4618:	68fb      	ldr	r3, [r7, #12]
    461a:	685b      	ldr	r3, [r3, #4]
    461c:	429a      	cmp	r2, r3
    461e:	d323      	bcc.n	4668 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    4620:	68fb      	ldr	r3, [r7, #12]
    4622:	681a      	ldr	r2, [r3, #0]
    4624:	68fb      	ldr	r3, [r7, #12]
    4626:	609a      	str	r2, [r3, #8]
    4628:	e01e      	b.n	4668 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    462a:	68fb      	ldr	r3, [r7, #12]
    462c:	68da      	ldr	r2, [r3, #12]
    462e:	68fb      	ldr	r3, [r7, #12]
    4630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4632:	4610      	mov	r0, r2
    4634:	68b9      	ldr	r1, [r7, #8]
    4636:	461a      	mov	r2, r3
    4638:	f013 ffe6 	bl	18608 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    463c:	68fb      	ldr	r3, [r7, #12]
    463e:	68da      	ldr	r2, [r3, #12]
    4640:	68fb      	ldr	r3, [r7, #12]
    4642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4644:	425b      	negs	r3, r3
    4646:	441a      	add	r2, r3
    4648:	68fb      	ldr	r3, [r7, #12]
    464a:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    464c:	68fb      	ldr	r3, [r7, #12]
    464e:	68da      	ldr	r2, [r3, #12]
    4650:	68fb      	ldr	r3, [r7, #12]
    4652:	681b      	ldr	r3, [r3, #0]
    4654:	429a      	cmp	r2, r3
    4656:	d207      	bcs.n	4668 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    4658:	68fb      	ldr	r3, [r7, #12]
    465a:	685a      	ldr	r2, [r3, #4]
    465c:	68fb      	ldr	r3, [r7, #12]
    465e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4660:	425b      	negs	r3, r3
    4662:	441a      	add	r2, r3
    4664:	68fb      	ldr	r3, [r7, #12]
    4666:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    4668:	68fb      	ldr	r3, [r7, #12]
    466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    466c:	1c5a      	adds	r2, r3, #1
    466e:	68fb      	ldr	r3, [r7, #12]
    4670:	639a      	str	r2, [r3, #56]	; 0x38
}
    4672:	3710      	adds	r7, #16
    4674:	46bd      	mov	sp, r7
    4676:	bd80      	pop	{r7, pc}

00004678 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    4678:	b580      	push	{r7, lr}
    467a:	b082      	sub	sp, #8
    467c:	af00      	add	r7, sp, #0
    467e:	6078      	str	r0, [r7, #4]
    4680:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    4682:	687b      	ldr	r3, [r7, #4]
    4684:	681b      	ldr	r3, [r3, #0]
    4686:	2b00      	cmp	r3, #0
    4688:	d019      	beq.n	46be <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    468a:	687b      	ldr	r3, [r7, #4]
    468c:	68da      	ldr	r2, [r3, #12]
    468e:	687b      	ldr	r3, [r7, #4]
    4690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4692:	441a      	add	r2, r3
    4694:	687b      	ldr	r3, [r7, #4]
    4696:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    4698:	687b      	ldr	r3, [r7, #4]
    469a:	68da      	ldr	r2, [r3, #12]
    469c:	687b      	ldr	r3, [r7, #4]
    469e:	685b      	ldr	r3, [r3, #4]
    46a0:	429a      	cmp	r2, r3
    46a2:	d303      	bcc.n	46ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    46a4:	687b      	ldr	r3, [r7, #4]
    46a6:	681a      	ldr	r2, [r3, #0]
    46a8:	687b      	ldr	r3, [r7, #4]
    46aa:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    46ac:	687b      	ldr	r3, [r7, #4]
    46ae:	68da      	ldr	r2, [r3, #12]
    46b0:	687b      	ldr	r3, [r7, #4]
    46b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    46b4:	6838      	ldr	r0, [r7, #0]
    46b6:	4611      	mov	r1, r2
    46b8:	461a      	mov	r2, r3
    46ba:	f013 ffa5 	bl	18608 <memcpy>
	}
}
    46be:	3708      	adds	r7, #8
    46c0:	46bd      	mov	sp, r7
    46c2:	bd80      	pop	{r7, pc}

000046c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    46c4:	b580      	push	{r7, lr}
    46c6:	b082      	sub	sp, #8
    46c8:	af00      	add	r7, sp, #0
    46ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    46cc:	f001 fa3a 	bl	5b44 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    46d0:	e014      	b.n	46fc <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    46d2:	687b      	ldr	r3, [r7, #4]
    46d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    46d6:	2b00      	cmp	r3, #0
    46d8:	d00f      	beq.n	46fa <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    46da:	687b      	ldr	r3, [r7, #4]
    46dc:	3324      	adds	r3, #36	; 0x24
    46de:	4618      	mov	r0, r3
    46e0:	f000 fea6 	bl	5430 <xTaskRemoveFromEventList>
    46e4:	4603      	mov	r3, r0
    46e6:	2b00      	cmp	r3, #0
    46e8:	d001      	beq.n	46ee <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    46ea:	f000 ff5d 	bl	55a8 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    46ee:	687b      	ldr	r3, [r7, #4]
    46f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    46f2:	1e5a      	subs	r2, r3, #1
    46f4:	687b      	ldr	r3, [r7, #4]
    46f6:	649a      	str	r2, [r3, #72]	; 0x48
    46f8:	e000      	b.n	46fc <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    46fa:	e003      	b.n	4704 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    46fc:	687b      	ldr	r3, [r7, #4]
    46fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4700:	2b00      	cmp	r3, #0
    4702:	dce6      	bgt.n	46d2 <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    4704:	687b      	ldr	r3, [r7, #4]
    4706:	f04f 32ff 	mov.w	r2, #4294967295
    470a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    470c:	f001 fa30 	bl	5b70 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    4710:	f001 fa18 	bl	5b44 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4714:	e014      	b.n	4740 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4716:	687b      	ldr	r3, [r7, #4]
    4718:	691b      	ldr	r3, [r3, #16]
    471a:	2b00      	cmp	r3, #0
    471c:	d00f      	beq.n	473e <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    471e:	687b      	ldr	r3, [r7, #4]
    4720:	3310      	adds	r3, #16
    4722:	4618      	mov	r0, r3
    4724:	f000 fe84 	bl	5430 <xTaskRemoveFromEventList>
    4728:	4603      	mov	r3, r0
    472a:	2b00      	cmp	r3, #0
    472c:	d001      	beq.n	4732 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    472e:	f000 ff3b 	bl	55a8 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    4732:	687b      	ldr	r3, [r7, #4]
    4734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4736:	1e5a      	subs	r2, r3, #1
    4738:	687b      	ldr	r3, [r7, #4]
    473a:	645a      	str	r2, [r3, #68]	; 0x44
    473c:	e000      	b.n	4740 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    473e:	e003      	b.n	4748 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4740:	687b      	ldr	r3, [r7, #4]
    4742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4744:	2b00      	cmp	r3, #0
    4746:	dce6      	bgt.n	4716 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    4748:	687b      	ldr	r3, [r7, #4]
    474a:	f04f 32ff 	mov.w	r2, #4294967295
    474e:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    4750:	f001 fa0e 	bl	5b70 <vPortExitCritical>
}
    4754:	3708      	adds	r7, #8
    4756:	46bd      	mov	sp, r7
    4758:	bd80      	pop	{r7, pc}
    475a:	bf00      	nop

0000475c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    475c:	b580      	push	{r7, lr}
    475e:	b084      	sub	sp, #16
    4760:	af00      	add	r7, sp, #0
    4762:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    4764:	f001 f9ee 	bl	5b44 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4768:	687b      	ldr	r3, [r7, #4]
    476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    476c:	2b00      	cmp	r3, #0
    476e:	bf14      	ite	ne
    4770:	2300      	movne	r3, #0
    4772:	2301      	moveq	r3, #1
    4774:	b2db      	uxtb	r3, r3
    4776:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4778:	f001 f9fa 	bl	5b70 <vPortExitCritical>

	return xReturn;
    477c:	68fb      	ldr	r3, [r7, #12]
}
    477e:	4618      	mov	r0, r3
    4780:	3710      	adds	r7, #16
    4782:	46bd      	mov	sp, r7
    4784:	bd80      	pop	{r7, pc}
    4786:	bf00      	nop

00004788 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    4788:	b480      	push	{r7}
    478a:	b085      	sub	sp, #20
    478c:	af00      	add	r7, sp, #0
    478e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4790:	687b      	ldr	r3, [r7, #4]
    4792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4794:	2b00      	cmp	r3, #0
    4796:	bf14      	ite	ne
    4798:	2300      	movne	r3, #0
    479a:	2301      	moveq	r3, #1
    479c:	b2db      	uxtb	r3, r3
    479e:	60fb      	str	r3, [r7, #12]

	return xReturn;
    47a0:	68fb      	ldr	r3, [r7, #12]
}
    47a2:	4618      	mov	r0, r3
    47a4:	3714      	adds	r7, #20
    47a6:	46bd      	mov	sp, r7
    47a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    47ac:	4770      	bx	lr
    47ae:	bf00      	nop

000047b0 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    47b0:	b580      	push	{r7, lr}
    47b2:	b084      	sub	sp, #16
    47b4:	af00      	add	r7, sp, #0
    47b6:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    47b8:	f001 f9c4 	bl	5b44 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    47bc:	687b      	ldr	r3, [r7, #4]
    47be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    47c0:	687b      	ldr	r3, [r7, #4]
    47c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    47c4:	429a      	cmp	r2, r3
    47c6:	bf14      	ite	ne
    47c8:	2300      	movne	r3, #0
    47ca:	2301      	moveq	r3, #1
    47cc:	b2db      	uxtb	r3, r3
    47ce:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    47d0:	f001 f9ce 	bl	5b70 <vPortExitCritical>

	return xReturn;
    47d4:	68fb      	ldr	r3, [r7, #12]
}
    47d6:	4618      	mov	r0, r3
    47d8:	3710      	adds	r7, #16
    47da:	46bd      	mov	sp, r7
    47dc:	bd80      	pop	{r7, pc}
    47de:	bf00      	nop

000047e0 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    47e0:	b480      	push	{r7}
    47e2:	b085      	sub	sp, #20
    47e4:	af00      	add	r7, sp, #0
    47e6:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    47e8:	687b      	ldr	r3, [r7, #4]
    47ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    47ec:	687b      	ldr	r3, [r7, #4]
    47ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    47f0:	429a      	cmp	r2, r3
    47f2:	bf14      	ite	ne
    47f4:	2300      	movne	r3, #0
    47f6:	2301      	moveq	r3, #1
    47f8:	b2db      	uxtb	r3, r3
    47fa:	60fb      	str	r3, [r7, #12]

	return xReturn;
    47fc:	68fb      	ldr	r3, [r7, #12]
}
    47fe:	4618      	mov	r0, r3
    4800:	3714      	adds	r7, #20
    4802:	46bd      	mov	sp, r7
    4804:	f85d 7b04 	ldr.w	r7, [sp], #4
    4808:	4770      	bx	lr
    480a:	bf00      	nop

0000480c <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    480c:	b580      	push	{r7, lr}
    480e:	b08a      	sub	sp, #40	; 0x28
    4810:	af02      	add	r7, sp, #8
    4812:	60f8      	str	r0, [r7, #12]
    4814:	60b9      	str	r1, [r7, #8]
    4816:	603b      	str	r3, [r7, #0]
    4818:	4613      	mov	r3, r2
    481a:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    481c:	88fb      	ldrh	r3, [r7, #6]
    481e:	4618      	mov	r0, r3
    4820:	6b39      	ldr	r1, [r7, #48]	; 0x30
    4822:	f000 ffe5 	bl	57f0 <prvAllocateTCBAndStack>
    4826:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    4828:	69bb      	ldr	r3, [r7, #24]
    482a:	2b00      	cmp	r3, #0
    482c:	f000 80a1 	beq.w	4972 <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    4830:	69bb      	ldr	r3, [r7, #24]
    4832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4834:	88fb      	ldrh	r3, [r7, #6]
    4836:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    483a:	3b01      	subs	r3, #1
    483c:	009b      	lsls	r3, r3, #2
    483e:	4413      	add	r3, r2
    4840:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    4842:	697b      	ldr	r3, [r7, #20]
    4844:	f023 0307 	bic.w	r3, r3, #7
    4848:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    484a:	88fb      	ldrh	r3, [r7, #6]
    484c:	9300      	str	r3, [sp, #0]
    484e:	69b8      	ldr	r0, [r7, #24]
    4850:	68b9      	ldr	r1, [r7, #8]
    4852:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4856:	f000 febd 	bl	55d4 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    485a:	6978      	ldr	r0, [r7, #20]
    485c:	68f9      	ldr	r1, [r7, #12]
    485e:	683a      	ldr	r2, [r7, #0]
    4860:	f001 f8f2 	bl	5a48 <pxPortInitialiseStack>
    4864:	4602      	mov	r2, r0
    4866:	69bb      	ldr	r3, [r7, #24]
    4868:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    486a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    486c:	2b00      	cmp	r3, #0
    486e:	d002      	beq.n	4876 <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    4870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4872:	69ba      	ldr	r2, [r7, #24]
    4874:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    4876:	f001 f965 	bl	5b44 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    487a:	f640 6384 	movw	r3, #3716	; 0xe84
    487e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4882:	681b      	ldr	r3, [r3, #0]
    4884:	1c5a      	adds	r2, r3, #1
    4886:	f640 6384 	movw	r3, #3716	; 0xe84
    488a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    488e:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    4890:	f640 4380 	movw	r3, #3200	; 0xc80
    4894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4898:	681b      	ldr	r3, [r3, #0]
    489a:	2b00      	cmp	r3, #0
    489c:	d10f      	bne.n	48be <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    489e:	f640 4380 	movw	r3, #3200	; 0xc80
    48a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48a6:	69ba      	ldr	r2, [r7, #24]
    48a8:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    48aa:	f640 6384 	movw	r3, #3716	; 0xe84
    48ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48b2:	681b      	ldr	r3, [r3, #0]
    48b4:	2b01      	cmp	r3, #1
    48b6:	d118      	bne.n	48ea <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    48b8:	f000 fec2 	bl	5640 <prvInitialiseTaskLists>
    48bc:	e015      	b.n	48ea <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    48be:	f640 6394 	movw	r3, #3732	; 0xe94
    48c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48c6:	681b      	ldr	r3, [r3, #0]
    48c8:	2b00      	cmp	r3, #0
    48ca:	d10e      	bne.n	48ea <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    48cc:	f640 4380 	movw	r3, #3200	; 0xc80
    48d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48d4:	681b      	ldr	r3, [r3, #0]
    48d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    48d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    48da:	429a      	cmp	r2, r3
    48dc:	d805      	bhi.n	48ea <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    48de:	f640 4380 	movw	r3, #3200	; 0xc80
    48e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48e6:	69ba      	ldr	r2, [r7, #24]
    48e8:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    48ea:	69bb      	ldr	r3, [r7, #24]
    48ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    48ee:	f640 638c 	movw	r3, #3724	; 0xe8c
    48f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48f6:	681b      	ldr	r3, [r3, #0]
    48f8:	429a      	cmp	r2, r3
    48fa:	d906      	bls.n	490a <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    48fc:	69bb      	ldr	r3, [r7, #24]
    48fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4900:	f640 638c 	movw	r3, #3724	; 0xe8c
    4904:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4908:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    490a:	f640 63a8 	movw	r3, #3752	; 0xea8
    490e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4912:	681b      	ldr	r3, [r3, #0]
    4914:	1c5a      	adds	r2, r3, #1
    4916:	f640 63a8 	movw	r3, #3752	; 0xea8
    491a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    491e:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    4920:	69bb      	ldr	r3, [r7, #24]
    4922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4924:	f640 6390 	movw	r3, #3728	; 0xe90
    4928:	f2c2 0300 	movt	r3, #8192	; 0x2000
    492c:	681b      	ldr	r3, [r3, #0]
    492e:	429a      	cmp	r2, r3
    4930:	d906      	bls.n	4940 <xTaskGenericCreate+0x134>
    4932:	69bb      	ldr	r3, [r7, #24]
    4934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4936:	f640 6390 	movw	r3, #3728	; 0xe90
    493a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    493e:	601a      	str	r2, [r3, #0]
    4940:	69bb      	ldr	r3, [r7, #24]
    4942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4944:	4613      	mov	r3, r2
    4946:	009b      	lsls	r3, r3, #2
    4948:	4413      	add	r3, r2
    494a:	009b      	lsls	r3, r3, #2
    494c:	f640 4284 	movw	r2, #3204	; 0xc84
    4950:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4954:	441a      	add	r2, r3
    4956:	69bb      	ldr	r3, [r7, #24]
    4958:	3304      	adds	r3, #4
    495a:	4610      	mov	r0, r2
    495c:	4619      	mov	r1, r3
    495e:	f7ff fadf 	bl	3f20 <vListInsertEnd>

			xReturn = pdPASS;
    4962:	2301      	movs	r3, #1
    4964:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    4966:	69b8      	ldr	r0, [r7, #24]
    4968:	f012 fdc2 	bl	174f0 <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    496c:	f001 f900 	bl	5b70 <vPortExitCritical>
    4970:	e002      	b.n	4978 <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4972:	f04f 33ff 	mov.w	r3, #4294967295
    4976:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    4978:	69fb      	ldr	r3, [r7, #28]
    497a:	2b01      	cmp	r3, #1
    497c:	d111      	bne.n	49a2 <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    497e:	f640 6394 	movw	r3, #3732	; 0xe94
    4982:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4986:	681b      	ldr	r3, [r3, #0]
    4988:	2b00      	cmp	r3, #0
    498a:	d00a      	beq.n	49a2 <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    498c:	f640 4380 	movw	r3, #3200	; 0xc80
    4990:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4994:	681b      	ldr	r3, [r3, #0]
    4996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4998:	6abb      	ldr	r3, [r7, #40]	; 0x28
    499a:	429a      	cmp	r2, r3
    499c:	d201      	bcs.n	49a2 <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    499e:	f001 f8c3 	bl	5b28 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    49a2:	69fb      	ldr	r3, [r7, #28]
}
    49a4:	4618      	mov	r0, r3
    49a6:	3720      	adds	r7, #32
    49a8:	46bd      	mov	sp, r7
    49aa:	bd80      	pop	{r7, pc}

000049ac <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    49ac:	b580      	push	{r7, lr}
    49ae:	b084      	sub	sp, #16
    49b0:	af00      	add	r7, sp, #0
    49b2:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    49b4:	f001 f8c6 	bl	5b44 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    49b8:	f640 4380 	movw	r3, #3200	; 0xc80
    49bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49c0:	681b      	ldr	r3, [r3, #0]
    49c2:	687a      	ldr	r2, [r7, #4]
    49c4:	429a      	cmp	r2, r3
    49c6:	d101      	bne.n	49cc <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    49c8:	2300      	movs	r3, #0
    49ca:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    49cc:	687b      	ldr	r3, [r7, #4]
    49ce:	2b00      	cmp	r3, #0
    49d0:	d105      	bne.n	49de <vTaskDelete+0x32>
    49d2:	f640 4380 	movw	r3, #3200	; 0xc80
    49d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    49da:	681b      	ldr	r3, [r3, #0]
    49dc:	e000      	b.n	49e0 <vTaskDelete+0x34>
    49de:	687b      	ldr	r3, [r7, #4]
    49e0:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    49e2:	68fb      	ldr	r3, [r7, #12]
    49e4:	3304      	adds	r3, #4
    49e6:	4618      	mov	r0, r3
    49e8:	f7ff fafa 	bl	3fe0 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    49ec:	68fb      	ldr	r3, [r7, #12]
    49ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    49f0:	2b00      	cmp	r3, #0
    49f2:	d004      	beq.n	49fe <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    49f4:	68fb      	ldr	r3, [r7, #12]
    49f6:	3318      	adds	r3, #24
    49f8:	4618      	mov	r0, r3
    49fa:	f7ff faf1 	bl	3fe0 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    49fe:	68fb      	ldr	r3, [r7, #12]
    4a00:	3304      	adds	r3, #4
    4a02:	f640 6058 	movw	r0, #3672	; 0xe58
    4a06:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4a0a:	4619      	mov	r1, r3
    4a0c:	f7ff fa88 	bl	3f20 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    4a10:	f640 636c 	movw	r3, #3692	; 0xe6c
    4a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a18:	681b      	ldr	r3, [r3, #0]
    4a1a:	1c5a      	adds	r2, r3, #1
    4a1c:	f640 636c 	movw	r3, #3692	; 0xe6c
    4a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a24:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    4a26:	f640 63a8 	movw	r3, #3752	; 0xea8
    4a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a2e:	681b      	ldr	r3, [r3, #0]
    4a30:	1c5a      	adds	r2, r3, #1
    4a32:	f640 63a8 	movw	r3, #3752	; 0xea8
    4a36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a3a:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    4a3c:	f001 f898 	bl	5b70 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    4a40:	f640 6394 	movw	r3, #3732	; 0xe94
    4a44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a48:	681b      	ldr	r3, [r3, #0]
    4a4a:	2b00      	cmp	r3, #0
    4a4c:	d004      	beq.n	4a58 <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    4a4e:	687b      	ldr	r3, [r7, #4]
    4a50:	2b00      	cmp	r3, #0
    4a52:	d101      	bne.n	4a58 <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    4a54:	f001 f868 	bl	5b28 <vPortYieldFromISR>
			}
		}
	}
    4a58:	3710      	adds	r7, #16
    4a5a:	46bd      	mov	sp, r7
    4a5c:	bd80      	pop	{r7, pc}
    4a5e:	bf00      	nop

00004a60 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    4a60:	b580      	push	{r7, lr}
    4a62:	b086      	sub	sp, #24
    4a64:	af00      	add	r7, sp, #0
    4a66:	6078      	str	r0, [r7, #4]
    4a68:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    4a6a:	2300      	movs	r3, #0
    4a6c:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    4a6e:	f000 fa8b 	bl	4f88 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4a72:	687b      	ldr	r3, [r7, #4]
    4a74:	681a      	ldr	r2, [r3, #0]
    4a76:	683b      	ldr	r3, [r7, #0]
    4a78:	4413      	add	r3, r2
    4a7a:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    4a7c:	687b      	ldr	r3, [r7, #4]
    4a7e:	681a      	ldr	r2, [r3, #0]
    4a80:	f640 6388 	movw	r3, #3720	; 0xe88
    4a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a88:	681b      	ldr	r3, [r3, #0]
    4a8a:	429a      	cmp	r2, r3
    4a8c:	d90f      	bls.n	4aae <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    4a8e:	687b      	ldr	r3, [r7, #4]
    4a90:	681a      	ldr	r2, [r3, #0]
    4a92:	693b      	ldr	r3, [r7, #16]
    4a94:	429a      	cmp	r2, r3
    4a96:	d919      	bls.n	4acc <vTaskDelayUntil+0x6c>
    4a98:	f640 6388 	movw	r3, #3720	; 0xe88
    4a9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4aa0:	681b      	ldr	r3, [r3, #0]
    4aa2:	693a      	ldr	r2, [r7, #16]
    4aa4:	429a      	cmp	r2, r3
    4aa6:	d911      	bls.n	4acc <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4aa8:	2301      	movs	r3, #1
    4aaa:	617b      	str	r3, [r7, #20]
    4aac:	e00e      	b.n	4acc <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    4aae:	687b      	ldr	r3, [r7, #4]
    4ab0:	681a      	ldr	r2, [r3, #0]
    4ab2:	693b      	ldr	r3, [r7, #16]
    4ab4:	429a      	cmp	r2, r3
    4ab6:	d807      	bhi.n	4ac8 <vTaskDelayUntil+0x68>
    4ab8:	f640 6388 	movw	r3, #3720	; 0xe88
    4abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ac0:	681b      	ldr	r3, [r3, #0]
    4ac2:	693a      	ldr	r2, [r7, #16]
    4ac4:	429a      	cmp	r2, r3
    4ac6:	d901      	bls.n	4acc <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4ac8:	2301      	movs	r3, #1
    4aca:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    4acc:	687b      	ldr	r3, [r7, #4]
    4ace:	693a      	ldr	r2, [r7, #16]
    4ad0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    4ad2:	697b      	ldr	r3, [r7, #20]
    4ad4:	2b00      	cmp	r3, #0
    4ad6:	d00b      	beq.n	4af0 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4ad8:	f640 4380 	movw	r3, #3200	; 0xc80
    4adc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ae0:	681b      	ldr	r3, [r3, #0]
    4ae2:	3304      	adds	r3, #4
    4ae4:	4618      	mov	r0, r3
    4ae6:	f7ff fa7b 	bl	3fe0 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4aea:	6938      	ldr	r0, [r7, #16]
    4aec:	f000 fe3c 	bl	5768 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    4af0:	f000 fa5c 	bl	4fac <xTaskResumeAll>
    4af4:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4af6:	68fb      	ldr	r3, [r7, #12]
    4af8:	2b00      	cmp	r3, #0
    4afa:	d101      	bne.n	4b00 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    4afc:	f001 f814 	bl	5b28 <vPortYieldFromISR>
		}
	}
    4b00:	3718      	adds	r7, #24
    4b02:	46bd      	mov	sp, r7
    4b04:	bd80      	pop	{r7, pc}
    4b06:	bf00      	nop

00004b08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    4b08:	b580      	push	{r7, lr}
    4b0a:	b084      	sub	sp, #16
    4b0c:	af00      	add	r7, sp, #0
    4b0e:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4b10:	2300      	movs	r3, #0
    4b12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    4b14:	687b      	ldr	r3, [r7, #4]
    4b16:	2b00      	cmp	r3, #0
    4b18:	d018      	beq.n	4b4c <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    4b1a:	f000 fa35 	bl	4f88 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    4b1e:	f640 6388 	movw	r3, #3720	; 0xe88
    4b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b26:	681a      	ldr	r2, [r3, #0]
    4b28:	687b      	ldr	r3, [r7, #4]
    4b2a:	4413      	add	r3, r2
    4b2c:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4b2e:	f640 4380 	movw	r3, #3200	; 0xc80
    4b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b36:	681b      	ldr	r3, [r3, #0]
    4b38:	3304      	adds	r3, #4
    4b3a:	4618      	mov	r0, r3
    4b3c:	f7ff fa50 	bl	3fe0 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4b40:	68b8      	ldr	r0, [r7, #8]
    4b42:	f000 fe11 	bl	5768 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    4b46:	f000 fa31 	bl	4fac <xTaskResumeAll>
    4b4a:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4b4c:	68fb      	ldr	r3, [r7, #12]
    4b4e:	2b00      	cmp	r3, #0
    4b50:	d101      	bne.n	4b56 <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    4b52:	f000 ffe9 	bl	5b28 <vPortYieldFromISR>
		}
	}
    4b56:	3710      	adds	r7, #16
    4b58:	46bd      	mov	sp, r7
    4b5a:	bd80      	pop	{r7, pc}

00004b5c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    4b5c:	b580      	push	{r7, lr}
    4b5e:	b084      	sub	sp, #16
    4b60:	af00      	add	r7, sp, #0
    4b62:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    4b64:	f000 ffee 	bl	5b44 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4b68:	687b      	ldr	r3, [r7, #4]
    4b6a:	2b00      	cmp	r3, #0
    4b6c:	d105      	bne.n	4b7a <uxTaskPriorityGet+0x1e>
    4b6e:	f640 4380 	movw	r3, #3200	; 0xc80
    4b72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b76:	681b      	ldr	r3, [r3, #0]
    4b78:	e000      	b.n	4b7c <uxTaskPriorityGet+0x20>
    4b7a:	687b      	ldr	r3, [r7, #4]
    4b7c:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    4b7e:	68fb      	ldr	r3, [r7, #12]
    4b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4b82:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    4b84:	f000 fff4 	bl	5b70 <vPortExitCritical>

		return uxReturn;
    4b88:	68bb      	ldr	r3, [r7, #8]
	}
    4b8a:	4618      	mov	r0, r3
    4b8c:	3710      	adds	r7, #16
    4b8e:	46bd      	mov	sp, r7
    4b90:	bd80      	pop	{r7, pc}
    4b92:	bf00      	nop

00004b94 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    4b94:	b580      	push	{r7, lr}
    4b96:	b086      	sub	sp, #24
    4b98:	af00      	add	r7, sp, #0
    4b9a:	6078      	str	r0, [r7, #4]
    4b9c:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    4b9e:	2300      	movs	r3, #0
    4ba0:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    4ba2:	683b      	ldr	r3, [r7, #0]
    4ba4:	2b13      	cmp	r3, #19
    4ba6:	d901      	bls.n	4bac <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4ba8:	2313      	movs	r3, #19
    4baa:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    4bac:	f000 ffca 	bl	5b44 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    4bb0:	f640 4380 	movw	r3, #3200	; 0xc80
    4bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bb8:	681b      	ldr	r3, [r3, #0]
    4bba:	687a      	ldr	r2, [r7, #4]
    4bbc:	429a      	cmp	r2, r3
    4bbe:	d101      	bne.n	4bc4 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    4bc0:	2300      	movs	r3, #0
    4bc2:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4bc4:	687b      	ldr	r3, [r7, #4]
    4bc6:	2b00      	cmp	r3, #0
    4bc8:	d105      	bne.n	4bd6 <vTaskPrioritySet+0x42>
    4bca:	f640 4380 	movw	r3, #3200	; 0xc80
    4bce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bd2:	681b      	ldr	r3, [r3, #0]
    4bd4:	e000      	b.n	4bd8 <vTaskPrioritySet+0x44>
    4bd6:	687b      	ldr	r3, [r7, #4]
    4bd8:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    4bda:	693b      	ldr	r3, [r7, #16]
    4bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4bde:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    4be0:	68fa      	ldr	r2, [r7, #12]
    4be2:	683b      	ldr	r3, [r7, #0]
    4be4:	429a      	cmp	r2, r3
    4be6:	d058      	beq.n	4c9a <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    4be8:	683a      	ldr	r2, [r7, #0]
    4bea:	68fb      	ldr	r3, [r7, #12]
    4bec:	429a      	cmp	r2, r3
    4bee:	d905      	bls.n	4bfc <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    4bf0:	687b      	ldr	r3, [r7, #4]
    4bf2:	2b00      	cmp	r3, #0
    4bf4:	d007      	beq.n	4c06 <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    4bf6:	2301      	movs	r3, #1
    4bf8:	617b      	str	r3, [r7, #20]
    4bfa:	e004      	b.n	4c06 <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    4bfc:	687b      	ldr	r3, [r7, #4]
    4bfe:	2b00      	cmp	r3, #0
    4c00:	d101      	bne.n	4c06 <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    4c02:	2301      	movs	r3, #1
    4c04:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    4c06:	693b      	ldr	r3, [r7, #16]
    4c08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4c0a:	693b      	ldr	r3, [r7, #16]
    4c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4c0e:	429a      	cmp	r2, r3
    4c10:	d102      	bne.n	4c18 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    4c12:	693b      	ldr	r3, [r7, #16]
    4c14:	683a      	ldr	r2, [r7, #0]
    4c16:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    4c18:	693b      	ldr	r3, [r7, #16]
    4c1a:	683a      	ldr	r2, [r7, #0]
    4c1c:	64da      	str	r2, [r3, #76]	; 0x4c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    4c1e:	683b      	ldr	r3, [r7, #0]
    4c20:	f1c3 0214 	rsb	r2, r3, #20
    4c24:	693b      	ldr	r3, [r7, #16]
    4c26:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    4c28:	693b      	ldr	r3, [r7, #16]
    4c2a:	6959      	ldr	r1, [r3, #20]
    4c2c:	68fa      	ldr	r2, [r7, #12]
    4c2e:	4613      	mov	r3, r2
    4c30:	009b      	lsls	r3, r3, #2
    4c32:	4413      	add	r3, r2
    4c34:	009b      	lsls	r3, r3, #2
    4c36:	f640 4284 	movw	r2, #3204	; 0xc84
    4c3a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4c3e:	4413      	add	r3, r2
    4c40:	4299      	cmp	r1, r3
    4c42:	d125      	bne.n	4c90 <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    4c44:	693b      	ldr	r3, [r7, #16]
    4c46:	3304      	adds	r3, #4
    4c48:	4618      	mov	r0, r3
    4c4a:	f7ff f9c9 	bl	3fe0 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4c4e:	693b      	ldr	r3, [r7, #16]
    4c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4c52:	f640 6390 	movw	r3, #3728	; 0xe90
    4c56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c5a:	681b      	ldr	r3, [r3, #0]
    4c5c:	429a      	cmp	r2, r3
    4c5e:	d906      	bls.n	4c6e <vTaskPrioritySet+0xda>
    4c60:	693b      	ldr	r3, [r7, #16]
    4c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4c64:	f640 6390 	movw	r3, #3728	; 0xe90
    4c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c6c:	601a      	str	r2, [r3, #0]
    4c6e:	693b      	ldr	r3, [r7, #16]
    4c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4c72:	4613      	mov	r3, r2
    4c74:	009b      	lsls	r3, r3, #2
    4c76:	4413      	add	r3, r2
    4c78:	009b      	lsls	r3, r3, #2
    4c7a:	f640 4284 	movw	r2, #3204	; 0xc84
    4c7e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4c82:	441a      	add	r2, r3
    4c84:	693b      	ldr	r3, [r7, #16]
    4c86:	3304      	adds	r3, #4
    4c88:	4610      	mov	r0, r2
    4c8a:	4619      	mov	r1, r3
    4c8c:	f7ff f948 	bl	3f20 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    4c90:	697b      	ldr	r3, [r7, #20]
    4c92:	2b01      	cmp	r3, #1
    4c94:	d101      	bne.n	4c9a <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    4c96:	f000 ff47 	bl	5b28 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    4c9a:	f000 ff69 	bl	5b70 <vPortExitCritical>
	}
    4c9e:	3718      	adds	r7, #24
    4ca0:	46bd      	mov	sp, r7
    4ca2:	bd80      	pop	{r7, pc}

00004ca4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    4ca4:	b580      	push	{r7, lr}
    4ca6:	b084      	sub	sp, #16
    4ca8:	af00      	add	r7, sp, #0
    4caa:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4cac:	f000 ff4a 	bl	5b44 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    4cb0:	f640 4380 	movw	r3, #3200	; 0xc80
    4cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cb8:	681b      	ldr	r3, [r3, #0]
    4cba:	687a      	ldr	r2, [r7, #4]
    4cbc:	429a      	cmp	r2, r3
    4cbe:	d101      	bne.n	4cc4 <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    4cc0:	2300      	movs	r3, #0
    4cc2:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    4cc4:	687b      	ldr	r3, [r7, #4]
    4cc6:	2b00      	cmp	r3, #0
    4cc8:	d105      	bne.n	4cd6 <vTaskSuspend+0x32>
    4cca:	f640 4380 	movw	r3, #3200	; 0xc80
    4cce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cd2:	681b      	ldr	r3, [r3, #0]
    4cd4:	e000      	b.n	4cd8 <vTaskSuspend+0x34>
    4cd6:	687b      	ldr	r3, [r7, #4]
    4cd8:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4cda:	68fb      	ldr	r3, [r7, #12]
    4cdc:	3304      	adds	r3, #4
    4cde:	4618      	mov	r0, r3
    4ce0:	f7ff f97e 	bl	3fe0 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4ce4:	68fb      	ldr	r3, [r7, #12]
    4ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ce8:	2b00      	cmp	r3, #0
    4cea:	d004      	beq.n	4cf6 <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4cec:	68fb      	ldr	r3, [r7, #12]
    4cee:	3318      	adds	r3, #24
    4cf0:	4618      	mov	r0, r3
    4cf2:	f7ff f975 	bl	3fe0 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    4cf6:	68fb      	ldr	r3, [r7, #12]
    4cf8:	3304      	adds	r3, #4
    4cfa:	f640 6070 	movw	r0, #3696	; 0xe70
    4cfe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4d02:	4619      	mov	r1, r3
    4d04:	f7ff f90c 	bl	3f20 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    4d08:	f000 ff32 	bl	5b70 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    4d0c:	687b      	ldr	r3, [r7, #4]
    4d0e:	2b00      	cmp	r3, #0
    4d10:	d11e      	bne.n	4d50 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    4d12:	f640 6394 	movw	r3, #3732	; 0xe94
    4d16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d1a:	681b      	ldr	r3, [r3, #0]
    4d1c:	2b00      	cmp	r3, #0
    4d1e:	d002      	beq.n	4d26 <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    4d20:	f000 ff02 	bl	5b28 <vPortYieldFromISR>
    4d24:	e014      	b.n	4d50 <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    4d26:	f640 6370 	movw	r3, #3696	; 0xe70
    4d2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d2e:	681a      	ldr	r2, [r3, #0]
    4d30:	f640 6384 	movw	r3, #3716	; 0xe84
    4d34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d38:	681b      	ldr	r3, [r3, #0]
    4d3a:	429a      	cmp	r2, r3
    4d3c:	d106      	bne.n	4d4c <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    4d3e:	f640 4380 	movw	r3, #3200	; 0xc80
    4d42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d46:	2200      	movs	r2, #0
    4d48:	601a      	str	r2, [r3, #0]
    4d4a:	e001      	b.n	4d50 <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    4d4c:	f000 fadc 	bl	5308 <vTaskSwitchContext>
				}
			}
		}
	}
    4d50:	3710      	adds	r7, #16
    4d52:	46bd      	mov	sp, r7
    4d54:	bd80      	pop	{r7, pc}
    4d56:	bf00      	nop

00004d58 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    4d58:	b480      	push	{r7}
    4d5a:	b085      	sub	sp, #20
    4d5c:	af00      	add	r7, sp, #0
    4d5e:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    4d60:	2300      	movs	r3, #0
    4d62:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    4d64:	687b      	ldr	r3, [r7, #4]
    4d66:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4d68:	68bb      	ldr	r3, [r7, #8]
    4d6a:	695a      	ldr	r2, [r3, #20]
    4d6c:	f640 6370 	movw	r3, #3696	; 0xe70
    4d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d74:	429a      	cmp	r2, r3
    4d76:	d10d      	bne.n	4d94 <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    4d78:	68bb      	ldr	r3, [r7, #8]
    4d7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4d7c:	f640 6344 	movw	r3, #3652	; 0xe44
    4d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d84:	429a      	cmp	r2, r3
    4d86:	d005      	beq.n	4d94 <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    4d88:	68bb      	ldr	r3, [r7, #8]
    4d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d8c:	2b00      	cmp	r3, #0
    4d8e:	d101      	bne.n	4d94 <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    4d90:	2301      	movs	r3, #1
    4d92:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    4d94:	68fb      	ldr	r3, [r7, #12]
	}
    4d96:	4618      	mov	r0, r3
    4d98:	3714      	adds	r7, #20
    4d9a:	46bd      	mov	sp, r7
    4d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4da0:	4770      	bx	lr
    4da2:	bf00      	nop

00004da4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    4da4:	b580      	push	{r7, lr}
    4da6:	b084      	sub	sp, #16
    4da8:	af00      	add	r7, sp, #0
    4daa:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    4dac:	687b      	ldr	r3, [r7, #4]
    4dae:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    4db0:	68fb      	ldr	r3, [r7, #12]
    4db2:	2b00      	cmp	r3, #0
    4db4:	d043      	beq.n	4e3e <vTaskResume+0x9a>
    4db6:	f640 4380 	movw	r3, #3200	; 0xc80
    4dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dbe:	681b      	ldr	r3, [r3, #0]
    4dc0:	68fa      	ldr	r2, [r7, #12]
    4dc2:	429a      	cmp	r2, r3
    4dc4:	d03b      	beq.n	4e3e <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    4dc6:	f000 febd 	bl	5b44 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4dca:	68f8      	ldr	r0, [r7, #12]
    4dcc:	f7ff ffc4 	bl	4d58 <xTaskIsTaskSuspended>
    4dd0:	4603      	mov	r3, r0
    4dd2:	2b01      	cmp	r3, #1
    4dd4:	d131      	bne.n	4e3a <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4dd6:	68fb      	ldr	r3, [r7, #12]
    4dd8:	3304      	adds	r3, #4
    4dda:	4618      	mov	r0, r3
    4ddc:	f7ff f900 	bl	3fe0 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4de0:	68fb      	ldr	r3, [r7, #12]
    4de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4de4:	f640 6390 	movw	r3, #3728	; 0xe90
    4de8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dec:	681b      	ldr	r3, [r3, #0]
    4dee:	429a      	cmp	r2, r3
    4df0:	d906      	bls.n	4e00 <vTaskResume+0x5c>
    4df2:	68fb      	ldr	r3, [r7, #12]
    4df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4df6:	f640 6390 	movw	r3, #3728	; 0xe90
    4dfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dfe:	601a      	str	r2, [r3, #0]
    4e00:	68fb      	ldr	r3, [r7, #12]
    4e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e04:	4613      	mov	r3, r2
    4e06:	009b      	lsls	r3, r3, #2
    4e08:	4413      	add	r3, r2
    4e0a:	009b      	lsls	r3, r3, #2
    4e0c:	f640 4284 	movw	r2, #3204	; 0xc84
    4e10:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4e14:	441a      	add	r2, r3
    4e16:	68fb      	ldr	r3, [r7, #12]
    4e18:	3304      	adds	r3, #4
    4e1a:	4610      	mov	r0, r2
    4e1c:	4619      	mov	r1, r3
    4e1e:	f7ff f87f 	bl	3f20 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4e22:	68fb      	ldr	r3, [r7, #12]
    4e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e26:	f640 4380 	movw	r3, #3200	; 0xc80
    4e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e2e:	681b      	ldr	r3, [r3, #0]
    4e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4e32:	429a      	cmp	r2, r3
    4e34:	d301      	bcc.n	4e3a <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    4e36:	f000 fe77 	bl	5b28 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    4e3a:	f000 fe99 	bl	5b70 <vPortExitCritical>
		}
	}
    4e3e:	3710      	adds	r7, #16
    4e40:	46bd      	mov	sp, r7
    4e42:	bd80      	pop	{r7, pc}

00004e44 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    4e44:	b580      	push	{r7, lr}
    4e46:	b086      	sub	sp, #24
    4e48:	af00      	add	r7, sp, #0
    4e4a:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    4e4c:	2300      	movs	r3, #0
    4e4e:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    4e50:	687b      	ldr	r3, [r7, #4]
    4e52:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4e54:	2300      	movs	r3, #0
    4e56:	60fb      	str	r3, [r7, #12]
    4e58:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4e5c:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4e60:	6938      	ldr	r0, [r7, #16]
    4e62:	f7ff ff79 	bl	4d58 <xTaskIsTaskSuspended>
    4e66:	4603      	mov	r3, r0
    4e68:	2b01      	cmp	r3, #1
    4e6a:	d144      	bne.n	4ef6 <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4e6c:	f640 6398 	movw	r3, #3736	; 0xe98
    4e70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e74:	681b      	ldr	r3, [r3, #0]
    4e76:	2b00      	cmp	r3, #0
    4e78:	d134      	bne.n	4ee4 <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    4e7a:	693b      	ldr	r3, [r7, #16]
    4e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e7e:	f640 4380 	movw	r3, #3200	; 0xc80
    4e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e86:	681b      	ldr	r3, [r3, #0]
    4e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4e8a:	429a      	cmp	r2, r3
    4e8c:	bf34      	ite	cc
    4e8e:	2300      	movcc	r3, #0
    4e90:	2301      	movcs	r3, #1
    4e92:	b2db      	uxtb	r3, r3
    4e94:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4e96:	693b      	ldr	r3, [r7, #16]
    4e98:	3304      	adds	r3, #4
    4e9a:	4618      	mov	r0, r3
    4e9c:	f7ff f8a0 	bl	3fe0 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4ea0:	693b      	ldr	r3, [r7, #16]
    4ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ea4:	f640 6390 	movw	r3, #3728	; 0xe90
    4ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eac:	681b      	ldr	r3, [r3, #0]
    4eae:	429a      	cmp	r2, r3
    4eb0:	d906      	bls.n	4ec0 <xTaskResumeFromISR+0x7c>
    4eb2:	693b      	ldr	r3, [r7, #16]
    4eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4eb6:	f640 6390 	movw	r3, #3728	; 0xe90
    4eba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ebe:	601a      	str	r2, [r3, #0]
    4ec0:	693b      	ldr	r3, [r7, #16]
    4ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ec4:	4613      	mov	r3, r2
    4ec6:	009b      	lsls	r3, r3, #2
    4ec8:	4413      	add	r3, r2
    4eca:	009b      	lsls	r3, r3, #2
    4ecc:	f640 4284 	movw	r2, #3204	; 0xc84
    4ed0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4ed4:	441a      	add	r2, r3
    4ed6:	693b      	ldr	r3, [r7, #16]
    4ed8:	3304      	adds	r3, #4
    4eda:	4610      	mov	r0, r2
    4edc:	4619      	mov	r1, r3
    4ede:	f7ff f81f 	bl	3f20 <vListInsertEnd>
    4ee2:	e008      	b.n	4ef6 <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4ee4:	693b      	ldr	r3, [r7, #16]
    4ee6:	3318      	adds	r3, #24
    4ee8:	f640 6044 	movw	r0, #3652	; 0xe44
    4eec:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4ef0:	4619      	mov	r1, r3
    4ef2:	f7ff f815 	bl	3f20 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4ef6:	f04f 0000 	mov.w	r0, #0
    4efa:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    4efe:	697b      	ldr	r3, [r7, #20]
	}
    4f00:	4618      	mov	r0, r3
    4f02:	3718      	adds	r7, #24
    4f04:	46bd      	mov	sp, r7
    4f06:	bd80      	pop	{r7, pc}

00004f08 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    4f08:	b580      	push	{r7, lr}
    4f0a:	b086      	sub	sp, #24
    4f0c:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    4f0e:	2300      	movs	r3, #0
    4f10:	9300      	str	r3, [sp, #0]
    4f12:	2300      	movs	r3, #0
    4f14:	9301      	str	r3, [sp, #4]
    4f16:	2300      	movs	r3, #0
    4f18:	9302      	str	r3, [sp, #8]
    4f1a:	2300      	movs	r3, #0
    4f1c:	9303      	str	r3, [sp, #12]
    4f1e:	f245 50c1 	movw	r0, #21953	; 0x55c1
    4f22:	f2c0 0000 	movt	r0, #0
    4f26:	f648 0190 	movw	r1, #34960	; 0x8890
    4f2a:	f2c0 0101 	movt	r1, #1
    4f2e:	2280      	movs	r2, #128	; 0x80
    4f30:	2300      	movs	r3, #0
    4f32:	f7ff fc6b 	bl	480c <xTaskGenericCreate>
    4f36:	6078      	str	r0, [r7, #4]
            
		}
	}
	#endif

	if( xReturn == pdPASS )
    4f38:	687b      	ldr	r3, [r7, #4]
    4f3a:	2b01      	cmp	r3, #1
    4f3c:	d111      	bne.n	4f62 <vTaskStartScheduler+0x5a>
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */

		portDISABLE_INTERRUPTS();
    4f3e:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4f42:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    4f46:	f640 6394 	movw	r3, #3732	; 0xe94
    4f4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f4e:	2201      	movs	r2, #1
    4f50:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    4f52:	f640 6388 	movw	r3, #3720	; 0xe88
    4f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f5a:	2200      	movs	r2, #0
    4f5c:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    4f5e:	f000 fdb5 	bl	5acc <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    4f62:	3708      	adds	r7, #8
    4f64:	46bd      	mov	sp, r7
    4f66:	bd80      	pop	{r7, pc}

00004f68 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    4f68:	b580      	push	{r7, lr}
    4f6a:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    4f6c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4f70:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    4f74:	f640 6394 	movw	r3, #3732	; 0xe94
    4f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f7c:	2200      	movs	r2, #0
    4f7e:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    4f80:	f000 fdcc 	bl	5b1c <vPortEndScheduler>
}
    4f84:	bd80      	pop	{r7, pc}
    4f86:	bf00      	nop

00004f88 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    4f88:	b480      	push	{r7}
    4f8a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    4f8c:	f640 6398 	movw	r3, #3736	; 0xe98
    4f90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f94:	681b      	ldr	r3, [r3, #0]
    4f96:	1c5a      	adds	r2, r3, #1
    4f98:	f640 6398 	movw	r3, #3736	; 0xe98
    4f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fa0:	601a      	str	r2, [r3, #0]
}
    4fa2:	46bd      	mov	sp, r7
    4fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fa8:	4770      	bx	lr
    4faa:	bf00      	nop

00004fac <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    4fac:	b590      	push	{r4, r7, lr}
    4fae:	b083      	sub	sp, #12
    4fb0:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4fb2:	2300      	movs	r3, #0
    4fb4:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    4fb6:	f000 fdc5 	bl	5b44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    4fba:	f640 6398 	movw	r3, #3736	; 0xe98
    4fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fc2:	681b      	ldr	r3, [r3, #0]
    4fc4:	1e5a      	subs	r2, r3, #1
    4fc6:	f640 6398 	movw	r3, #3736	; 0xe98
    4fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fce:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4fd0:	f640 6398 	movw	r3, #3736	; 0xe98
    4fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fd8:	681b      	ldr	r3, [r3, #0]
    4fda:	2b00      	cmp	r3, #0
    4fdc:	d177      	bne.n	50ce <xTaskResumeAll+0x122>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    4fde:	f640 6384 	movw	r3, #3716	; 0xe84
    4fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fe6:	681b      	ldr	r3, [r3, #0]
    4fe8:	2b00      	cmp	r3, #0
    4fea:	d070      	beq.n	50ce <xTaskResumeAll+0x122>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    4fec:	2300      	movs	r3, #0
    4fee:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    4ff0:	e036      	b.n	5060 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    4ff2:	f640 6344 	movw	r3, #3652	; 0xe44
    4ff6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ffa:	68db      	ldr	r3, [r3, #12]
    4ffc:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    4ffe:	f104 0318 	add.w	r3, r4, #24
    5002:	4618      	mov	r0, r3
    5004:	f7fe ffec 	bl	3fe0 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    5008:	1d23      	adds	r3, r4, #4
    500a:	4618      	mov	r0, r3
    500c:	f7fe ffe8 	bl	3fe0 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    5010:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5012:	f640 6390 	movw	r3, #3728	; 0xe90
    5016:	f2c2 0300 	movt	r3, #8192	; 0x2000
    501a:	681b      	ldr	r3, [r3, #0]
    501c:	429a      	cmp	r2, r3
    501e:	d905      	bls.n	502c <xTaskResumeAll+0x80>
    5020:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5022:	f640 6390 	movw	r3, #3728	; 0xe90
    5026:	f2c2 0300 	movt	r3, #8192	; 0x2000
    502a:	601a      	str	r2, [r3, #0]
    502c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    502e:	4613      	mov	r3, r2
    5030:	009b      	lsls	r3, r3, #2
    5032:	4413      	add	r3, r2
    5034:	009b      	lsls	r3, r3, #2
    5036:	f640 4284 	movw	r2, #3204	; 0xc84
    503a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    503e:	441a      	add	r2, r3
    5040:	1d23      	adds	r3, r4, #4
    5042:	4610      	mov	r0, r2
    5044:	4619      	mov	r1, r3
    5046:	f7fe ff6b 	bl	3f20 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    504a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    504c:	f640 4380 	movw	r3, #3200	; 0xc80
    5050:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5054:	681b      	ldr	r3, [r3, #0]
    5056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5058:	429a      	cmp	r2, r3
    505a:	d301      	bcc.n	5060 <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    505c:	2301      	movs	r3, #1
    505e:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    5060:	f640 6344 	movw	r3, #3652	; 0xe44
    5064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5068:	681b      	ldr	r3, [r3, #0]
    506a:	2b00      	cmp	r3, #0
    506c:	d1c1      	bne.n	4ff2 <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    506e:	f640 639c 	movw	r3, #3740	; 0xe9c
    5072:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5076:	681b      	ldr	r3, [r3, #0]
    5078:	2b00      	cmp	r3, #0
    507a:	d014      	beq.n	50a6 <xTaskResumeAll+0xfa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    507c:	e00c      	b.n	5098 <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    507e:	f000 f865 	bl	514c <vTaskIncrementTick>
						--uxMissedTicks;
    5082:	f640 639c 	movw	r3, #3740	; 0xe9c
    5086:	f2c2 0300 	movt	r3, #8192	; 0x2000
    508a:	681b      	ldr	r3, [r3, #0]
    508c:	1e5a      	subs	r2, r3, #1
    508e:	f640 639c 	movw	r3, #3740	; 0xe9c
    5092:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5096:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    5098:	f640 639c 	movw	r3, #3740	; 0xe9c
    509c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50a0:	681b      	ldr	r3, [r3, #0]
    50a2:	2b00      	cmp	r3, #0
    50a4:	d1eb      	bne.n	507e <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    50a6:	683b      	ldr	r3, [r7, #0]
    50a8:	2b01      	cmp	r3, #1
    50aa:	d006      	beq.n	50ba <xTaskResumeAll+0x10e>
    50ac:	f640 63a0 	movw	r3, #3744	; 0xea0
    50b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50b4:	681b      	ldr	r3, [r3, #0]
    50b6:	2b01      	cmp	r3, #1
    50b8:	d109      	bne.n	50ce <xTaskResumeAll+0x122>
				{
					xAlreadyYielded = pdTRUE;
    50ba:	2301      	movs	r3, #1
    50bc:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    50be:	f640 63a0 	movw	r3, #3744	; 0xea0
    50c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50c6:	2200      	movs	r2, #0
    50c8:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    50ca:	f000 fd2d 	bl	5b28 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    50ce:	f000 fd4f 	bl	5b70 <vPortExitCritical>

	return xAlreadyYielded;
    50d2:	687b      	ldr	r3, [r7, #4]
}
    50d4:	4618      	mov	r0, r3
    50d6:	370c      	adds	r7, #12
    50d8:	46bd      	mov	sp, r7
    50da:	bd90      	pop	{r4, r7, pc}

000050dc <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    50dc:	b580      	push	{r7, lr}
    50de:	b082      	sub	sp, #8
    50e0:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    50e2:	f000 fd2f 	bl	5b44 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    50e6:	f640 6388 	movw	r3, #3720	; 0xe88
    50ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50ee:	681b      	ldr	r3, [r3, #0]
    50f0:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    50f2:	f000 fd3d 	bl	5b70 <vPortExitCritical>

	return xTicks;
    50f6:	687b      	ldr	r3, [r7, #4]
}
    50f8:	4618      	mov	r0, r3
    50fa:	3708      	adds	r7, #8
    50fc:	46bd      	mov	sp, r7
    50fe:	bd80      	pop	{r7, pc}

00005100 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    5100:	b480      	push	{r7}
    5102:	b083      	sub	sp, #12
    5104:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    5106:	2300      	movs	r3, #0
    5108:	607b      	str	r3, [r7, #4]
    510a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    510e:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    5112:	f640 6388 	movw	r3, #3720	; 0xe88
    5116:	f2c2 0300 	movt	r3, #8192	; 0x2000
    511a:	681b      	ldr	r3, [r3, #0]
    511c:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    511e:	f04f 0000 	mov.w	r0, #0
    5122:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    5126:	683b      	ldr	r3, [r7, #0]
}
    5128:	4618      	mov	r0, r3
    512a:	370c      	adds	r7, #12
    512c:	46bd      	mov	sp, r7
    512e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5132:	4770      	bx	lr

00005134 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    5134:	b480      	push	{r7}
    5136:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    5138:	f640 6384 	movw	r3, #3716	; 0xe84
    513c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5140:	681b      	ldr	r3, [r3, #0]
}
    5142:	4618      	mov	r0, r3
    5144:	46bd      	mov	sp, r7
    5146:	f85d 7b04 	ldr.w	r7, [sp], #4
    514a:	4770      	bx	lr

0000514c <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    514c:	b580      	push	{r7, lr}
    514e:	b084      	sub	sp, #16
    5150:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5152:	f640 6398 	movw	r3, #3736	; 0xe98
    5156:	f2c2 0300 	movt	r3, #8192	; 0x2000
    515a:	681b      	ldr	r3, [r3, #0]
    515c:	2b00      	cmp	r3, #0
    515e:	f040 80b9 	bne.w	52d4 <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    5162:	f640 6388 	movw	r3, #3720	; 0xe88
    5166:	f2c2 0300 	movt	r3, #8192	; 0x2000
    516a:	681b      	ldr	r3, [r3, #0]
    516c:	1c5a      	adds	r2, r3, #1
    516e:	f640 6388 	movw	r3, #3720	; 0xe88
    5172:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5176:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    5178:	f640 6388 	movw	r3, #3720	; 0xe88
    517c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5180:	681b      	ldr	r3, [r3, #0]
    5182:	2b00      	cmp	r3, #0
    5184:	d13f      	bne.n	5206 <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    5186:	f640 633c 	movw	r3, #3644	; 0xe3c
    518a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    518e:	681b      	ldr	r3, [r3, #0]
    5190:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    5192:	f640 6340 	movw	r3, #3648	; 0xe40
    5196:	f2c2 0300 	movt	r3, #8192	; 0x2000
    519a:	681a      	ldr	r2, [r3, #0]
    519c:	f640 633c 	movw	r3, #3644	; 0xe3c
    51a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51a4:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    51a6:	f640 6340 	movw	r3, #3648	; 0xe40
    51aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51ae:	68fa      	ldr	r2, [r7, #12]
    51b0:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    51b2:	f640 63a4 	movw	r3, #3748	; 0xea4
    51b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51ba:	681b      	ldr	r3, [r3, #0]
    51bc:	1c5a      	adds	r2, r3, #1
    51be:	f640 63a4 	movw	r3, #3748	; 0xea4
    51c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51c6:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    51c8:	f640 633c 	movw	r3, #3644	; 0xe3c
    51cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51d0:	681b      	ldr	r3, [r3, #0]
    51d2:	681b      	ldr	r3, [r3, #0]
    51d4:	2b00      	cmp	r3, #0
    51d6:	d107      	bne.n	51e8 <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    51d8:	f240 33e0 	movw	r3, #992	; 0x3e0
    51dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51e0:	f04f 32ff 	mov.w	r2, #4294967295
    51e4:	601a      	str	r2, [r3, #0]
    51e6:	e00e      	b.n	5206 <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    51e8:	f640 633c 	movw	r3, #3644	; 0xe3c
    51ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51f0:	681b      	ldr	r3, [r3, #0]
    51f2:	68db      	ldr	r3, [r3, #12]
    51f4:	68db      	ldr	r3, [r3, #12]
    51f6:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    51f8:	68bb      	ldr	r3, [r7, #8]
    51fa:	685a      	ldr	r2, [r3, #4]
    51fc:	f240 33e0 	movw	r3, #992	; 0x3e0
    5200:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5204:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    5206:	f640 6388 	movw	r3, #3720	; 0xe88
    520a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    520e:	681a      	ldr	r2, [r3, #0]
    5210:	f240 33e0 	movw	r3, #992	; 0x3e0
    5214:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5218:	681b      	ldr	r3, [r3, #0]
    521a:	429a      	cmp	r2, r3
    521c:	d359      	bcc.n	52d2 <vTaskIncrementTick+0x186>
    521e:	f640 633c 	movw	r3, #3644	; 0xe3c
    5222:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5226:	681b      	ldr	r3, [r3, #0]
    5228:	681b      	ldr	r3, [r3, #0]
    522a:	2b00      	cmp	r3, #0
    522c:	d107      	bne.n	523e <vTaskIncrementTick+0xf2>
    522e:	f240 33e0 	movw	r3, #992	; 0x3e0
    5232:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5236:	f04f 32ff 	mov.w	r2, #4294967295
    523a:	601a      	str	r2, [r3, #0]
    523c:	e049      	b.n	52d2 <vTaskIncrementTick+0x186>
    523e:	f640 633c 	movw	r3, #3644	; 0xe3c
    5242:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5246:	681b      	ldr	r3, [r3, #0]
    5248:	68db      	ldr	r3, [r3, #12]
    524a:	68db      	ldr	r3, [r3, #12]
    524c:	60bb      	str	r3, [r7, #8]
    524e:	68bb      	ldr	r3, [r7, #8]
    5250:	685b      	ldr	r3, [r3, #4]
    5252:	607b      	str	r3, [r7, #4]
    5254:	f640 6388 	movw	r3, #3720	; 0xe88
    5258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    525c:	681a      	ldr	r2, [r3, #0]
    525e:	687b      	ldr	r3, [r7, #4]
    5260:	429a      	cmp	r2, r3
    5262:	d206      	bcs.n	5272 <vTaskIncrementTick+0x126>
    5264:	f240 33e0 	movw	r3, #992	; 0x3e0
    5268:	f2c2 0300 	movt	r3, #8192	; 0x2000
    526c:	687a      	ldr	r2, [r7, #4]
    526e:	601a      	str	r2, [r3, #0]
    5270:	e02f      	b.n	52d2 <vTaskIncrementTick+0x186>
    5272:	68bb      	ldr	r3, [r7, #8]
    5274:	3304      	adds	r3, #4
    5276:	4618      	mov	r0, r3
    5278:	f7fe feb2 	bl	3fe0 <vListRemove>
    527c:	68bb      	ldr	r3, [r7, #8]
    527e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5280:	2b00      	cmp	r3, #0
    5282:	d004      	beq.n	528e <vTaskIncrementTick+0x142>
    5284:	68bb      	ldr	r3, [r7, #8]
    5286:	3318      	adds	r3, #24
    5288:	4618      	mov	r0, r3
    528a:	f7fe fea9 	bl	3fe0 <vListRemove>
    528e:	68bb      	ldr	r3, [r7, #8]
    5290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5292:	f640 6390 	movw	r3, #3728	; 0xe90
    5296:	f2c2 0300 	movt	r3, #8192	; 0x2000
    529a:	681b      	ldr	r3, [r3, #0]
    529c:	429a      	cmp	r2, r3
    529e:	d906      	bls.n	52ae <vTaskIncrementTick+0x162>
    52a0:	68bb      	ldr	r3, [r7, #8]
    52a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    52a4:	f640 6390 	movw	r3, #3728	; 0xe90
    52a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52ac:	601a      	str	r2, [r3, #0]
    52ae:	68bb      	ldr	r3, [r7, #8]
    52b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    52b2:	4613      	mov	r3, r2
    52b4:	009b      	lsls	r3, r3, #2
    52b6:	4413      	add	r3, r2
    52b8:	009b      	lsls	r3, r3, #2
    52ba:	f640 4284 	movw	r2, #3204	; 0xc84
    52be:	f2c2 0200 	movt	r2, #8192	; 0x2000
    52c2:	441a      	add	r2, r3
    52c4:	68bb      	ldr	r3, [r7, #8]
    52c6:	3304      	adds	r3, #4
    52c8:	4610      	mov	r0, r2
    52ca:	4619      	mov	r1, r3
    52cc:	f7fe fe28 	bl	3f20 <vListInsertEnd>
    52d0:	e7a5      	b.n	521e <vTaskIncrementTick+0xd2>
    52d2:	e00c      	b.n	52ee <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    52d4:	f640 639c 	movw	r3, #3740	; 0xe9c
    52d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52dc:	681b      	ldr	r3, [r3, #0]
    52de:	1c5a      	adds	r2, r3, #1
    52e0:	f640 639c 	movw	r3, #3740	; 0xe9c
    52e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52e8:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    52ea:	f012 f913 	bl	17514 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    52ee:	f640 639c 	movw	r3, #3740	; 0xe9c
    52f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52f6:	681b      	ldr	r3, [r3, #0]
    52f8:	2b00      	cmp	r3, #0
    52fa:	d101      	bne.n	5300 <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    52fc:	f012 f90a 	bl	17514 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    5300:	3710      	adds	r7, #16
    5302:	46bd      	mov	sp, r7
    5304:	bd80      	pop	{r7, pc}
    5306:	bf00      	nop

00005308 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    5308:	b580      	push	{r7, lr}
    530a:	b082      	sub	sp, #8
    530c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    530e:	f640 6398 	movw	r3, #3736	; 0xe98
    5312:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5316:	681b      	ldr	r3, [r3, #0]
    5318:	2b00      	cmp	r3, #0
    531a:	d006      	beq.n	532a <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    531c:	f640 63a0 	movw	r3, #3744	; 0xea0
    5320:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5324:	2201      	movs	r2, #1
    5326:	601a      	str	r2, [r3, #0]
    5328:	e047      	b.n	53ba <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    532a:	f012 f8ed 	bl	17508 <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    532e:	e00a      	b.n	5346 <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    5330:	f640 6390 	movw	r3, #3728	; 0xe90
    5334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5338:	681b      	ldr	r3, [r3, #0]
    533a:	1e5a      	subs	r2, r3, #1
    533c:	f640 6390 	movw	r3, #3728	; 0xe90
    5340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5344:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    5346:	f640 6390 	movw	r3, #3728	; 0xe90
    534a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    534e:	6819      	ldr	r1, [r3, #0]
    5350:	f640 4284 	movw	r2, #3204	; 0xc84
    5354:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5358:	460b      	mov	r3, r1
    535a:	009b      	lsls	r3, r3, #2
    535c:	440b      	add	r3, r1
    535e:	009b      	lsls	r3, r3, #2
    5360:	4413      	add	r3, r2
    5362:	681b      	ldr	r3, [r3, #0]
    5364:	2b00      	cmp	r3, #0
    5366:	d0e3      	beq.n	5330 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    5368:	f640 6390 	movw	r3, #3728	; 0xe90
    536c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5370:	681a      	ldr	r2, [r3, #0]
    5372:	4613      	mov	r3, r2
    5374:	009b      	lsls	r3, r3, #2
    5376:	4413      	add	r3, r2
    5378:	009b      	lsls	r3, r3, #2
    537a:	f640 4284 	movw	r2, #3204	; 0xc84
    537e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5382:	4413      	add	r3, r2
    5384:	607b      	str	r3, [r7, #4]
    5386:	687b      	ldr	r3, [r7, #4]
    5388:	685b      	ldr	r3, [r3, #4]
    538a:	685a      	ldr	r2, [r3, #4]
    538c:	687b      	ldr	r3, [r7, #4]
    538e:	605a      	str	r2, [r3, #4]
    5390:	687b      	ldr	r3, [r7, #4]
    5392:	685a      	ldr	r2, [r3, #4]
    5394:	687b      	ldr	r3, [r7, #4]
    5396:	3308      	adds	r3, #8
    5398:	429a      	cmp	r2, r3
    539a:	d104      	bne.n	53a6 <vTaskSwitchContext+0x9e>
    539c:	687b      	ldr	r3, [r7, #4]
    539e:	685b      	ldr	r3, [r3, #4]
    53a0:	685a      	ldr	r2, [r3, #4]
    53a2:	687b      	ldr	r3, [r7, #4]
    53a4:	605a      	str	r2, [r3, #4]
    53a6:	687b      	ldr	r3, [r7, #4]
    53a8:	685b      	ldr	r3, [r3, #4]
    53aa:	68da      	ldr	r2, [r3, #12]
    53ac:	f640 4380 	movw	r3, #3200	; 0xc80
    53b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53b4:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
    53b6:	f012 f8a1 	bl	174fc <myTraceSwitchedIn>
	}
}
    53ba:	3708      	adds	r7, #8
    53bc:	46bd      	mov	sp, r7
    53be:	bd80      	pop	{r7, pc}

000053c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    53c0:	b580      	push	{r7, lr}
    53c2:	b084      	sub	sp, #16
    53c4:	af00      	add	r7, sp, #0
    53c6:	6078      	str	r0, [r7, #4]
    53c8:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    53ca:	f640 4380 	movw	r3, #3200	; 0xc80
    53ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53d2:	681b      	ldr	r3, [r3, #0]
    53d4:	3318      	adds	r3, #24
    53d6:	6878      	ldr	r0, [r7, #4]
    53d8:	4619      	mov	r1, r3
    53da:	f7fe fdc9 	bl	3f70 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    53de:	f640 4380 	movw	r3, #3200	; 0xc80
    53e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53e6:	681b      	ldr	r3, [r3, #0]
    53e8:	3304      	adds	r3, #4
    53ea:	4618      	mov	r0, r3
    53ec:	f7fe fdf8 	bl	3fe0 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    53f0:	683b      	ldr	r3, [r7, #0]
    53f2:	f1b3 3fff 	cmp.w	r3, #4294967295
    53f6:	d10d      	bne.n	5414 <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    53f8:	f640 4380 	movw	r3, #3200	; 0xc80
    53fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5400:	681b      	ldr	r3, [r3, #0]
    5402:	3304      	adds	r3, #4
    5404:	f640 6070 	movw	r0, #3696	; 0xe70
    5408:	f2c2 0000 	movt	r0, #8192	; 0x2000
    540c:	4619      	mov	r1, r3
    540e:	f7fe fd87 	bl	3f20 <vListInsertEnd>
    5412:	e00a      	b.n	542a <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    5414:	f640 6388 	movw	r3, #3720	; 0xe88
    5418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    541c:	681a      	ldr	r2, [r3, #0]
    541e:	683b      	ldr	r3, [r7, #0]
    5420:	4413      	add	r3, r2
    5422:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    5424:	68f8      	ldr	r0, [r7, #12]
    5426:	f000 f99f 	bl	5768 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    542a:	3710      	adds	r7, #16
    542c:	46bd      	mov	sp, r7
    542e:	bd80      	pop	{r7, pc}

00005430 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    5430:	b580      	push	{r7, lr}
    5432:	b084      	sub	sp, #16
    5434:	af00      	add	r7, sp, #0
    5436:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    5438:	687b      	ldr	r3, [r7, #4]
    543a:	68db      	ldr	r3, [r3, #12]
    543c:	68db      	ldr	r3, [r3, #12]
    543e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    5440:	68bb      	ldr	r3, [r7, #8]
    5442:	3318      	adds	r3, #24
    5444:	4618      	mov	r0, r3
    5446:	f7fe fdcb 	bl	3fe0 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    544a:	f640 6398 	movw	r3, #3736	; 0xe98
    544e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5452:	681b      	ldr	r3, [r3, #0]
    5454:	2b00      	cmp	r3, #0
    5456:	d126      	bne.n	54a6 <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    5458:	68bb      	ldr	r3, [r7, #8]
    545a:	3304      	adds	r3, #4
    545c:	4618      	mov	r0, r3
    545e:	f7fe fdbf 	bl	3fe0 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    5462:	68bb      	ldr	r3, [r7, #8]
    5464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5466:	f640 6390 	movw	r3, #3728	; 0xe90
    546a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    546e:	681b      	ldr	r3, [r3, #0]
    5470:	429a      	cmp	r2, r3
    5472:	d906      	bls.n	5482 <xTaskRemoveFromEventList+0x52>
    5474:	68bb      	ldr	r3, [r7, #8]
    5476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5478:	f640 6390 	movw	r3, #3728	; 0xe90
    547c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5480:	601a      	str	r2, [r3, #0]
    5482:	68bb      	ldr	r3, [r7, #8]
    5484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5486:	4613      	mov	r3, r2
    5488:	009b      	lsls	r3, r3, #2
    548a:	4413      	add	r3, r2
    548c:	009b      	lsls	r3, r3, #2
    548e:	f640 4284 	movw	r2, #3204	; 0xc84
    5492:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5496:	441a      	add	r2, r3
    5498:	68bb      	ldr	r3, [r7, #8]
    549a:	3304      	adds	r3, #4
    549c:	4610      	mov	r0, r2
    549e:	4619      	mov	r1, r3
    54a0:	f7fe fd3e 	bl	3f20 <vListInsertEnd>
    54a4:	e008      	b.n	54b8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    54a6:	68bb      	ldr	r3, [r7, #8]
    54a8:	3318      	adds	r3, #24
    54aa:	f640 6044 	movw	r0, #3652	; 0xe44
    54ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
    54b2:	4619      	mov	r1, r3
    54b4:	f7fe fd34 	bl	3f20 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    54b8:	68bb      	ldr	r3, [r7, #8]
    54ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    54bc:	f640 4380 	movw	r3, #3200	; 0xc80
    54c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54c4:	681b      	ldr	r3, [r3, #0]
    54c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    54c8:	429a      	cmp	r2, r3
    54ca:	d302      	bcc.n	54d2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    54cc:	2301      	movs	r3, #1
    54ce:	60fb      	str	r3, [r7, #12]
    54d0:	e001      	b.n	54d6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    54d2:	2300      	movs	r3, #0
    54d4:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    54d6:	68fb      	ldr	r3, [r7, #12]
}
    54d8:	4618      	mov	r0, r3
    54da:	3710      	adds	r7, #16
    54dc:	46bd      	mov	sp, r7
    54de:	bd80      	pop	{r7, pc}

000054e0 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    54e0:	b480      	push	{r7}
    54e2:	b083      	sub	sp, #12
    54e4:	af00      	add	r7, sp, #0
    54e6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    54e8:	f640 63a4 	movw	r3, #3748	; 0xea4
    54ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54f0:	681a      	ldr	r2, [r3, #0]
    54f2:	687b      	ldr	r3, [r7, #4]
    54f4:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    54f6:	f640 6388 	movw	r3, #3720	; 0xe88
    54fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54fe:	681a      	ldr	r2, [r3, #0]
    5500:	687b      	ldr	r3, [r7, #4]
    5502:	605a      	str	r2, [r3, #4]
}
    5504:	370c      	adds	r7, #12
    5506:	46bd      	mov	sp, r7
    5508:	f85d 7b04 	ldr.w	r7, [sp], #4
    550c:	4770      	bx	lr
    550e:	bf00      	nop

00005510 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    5510:	b580      	push	{r7, lr}
    5512:	b084      	sub	sp, #16
    5514:	af00      	add	r7, sp, #0
    5516:	6078      	str	r0, [r7, #4]
    5518:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    551a:	f000 fb13 	bl	5b44 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    551e:	683b      	ldr	r3, [r7, #0]
    5520:	681b      	ldr	r3, [r3, #0]
    5522:	f1b3 3fff 	cmp.w	r3, #4294967295
    5526:	d102      	bne.n	552e <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    5528:	2300      	movs	r3, #0
    552a:	60fb      	str	r3, [r7, #12]
    552c:	e035      	b.n	559a <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    552e:	687b      	ldr	r3, [r7, #4]
    5530:	681a      	ldr	r2, [r3, #0]
    5532:	f640 63a4 	movw	r3, #3748	; 0xea4
    5536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    553a:	681b      	ldr	r3, [r3, #0]
    553c:	429a      	cmp	r2, r3
    553e:	d00b      	beq.n	5558 <xTaskCheckForTimeOut+0x48>
    5540:	687b      	ldr	r3, [r7, #4]
    5542:	685a      	ldr	r2, [r3, #4]
    5544:	f640 6388 	movw	r3, #3720	; 0xe88
    5548:	f2c2 0300 	movt	r3, #8192	; 0x2000
    554c:	681b      	ldr	r3, [r3, #0]
    554e:	429a      	cmp	r2, r3
    5550:	d802      	bhi.n	5558 <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    5552:	2301      	movs	r3, #1
    5554:	60fb      	str	r3, [r7, #12]
    5556:	e020      	b.n	559a <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    5558:	f640 6388 	movw	r3, #3720	; 0xe88
    555c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5560:	681a      	ldr	r2, [r3, #0]
    5562:	687b      	ldr	r3, [r7, #4]
    5564:	685b      	ldr	r3, [r3, #4]
    5566:	1ad2      	subs	r2, r2, r3
    5568:	683b      	ldr	r3, [r7, #0]
    556a:	681b      	ldr	r3, [r3, #0]
    556c:	429a      	cmp	r2, r3
    556e:	d212      	bcs.n	5596 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    5570:	683b      	ldr	r3, [r7, #0]
    5572:	681a      	ldr	r2, [r3, #0]
    5574:	687b      	ldr	r3, [r7, #4]
    5576:	6859      	ldr	r1, [r3, #4]
    5578:	f640 6388 	movw	r3, #3720	; 0xe88
    557c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5580:	681b      	ldr	r3, [r3, #0]
    5582:	1acb      	subs	r3, r1, r3
    5584:	441a      	add	r2, r3
    5586:	683b      	ldr	r3, [r7, #0]
    5588:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    558a:	6878      	ldr	r0, [r7, #4]
    558c:	f7ff ffa8 	bl	54e0 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    5590:	2300      	movs	r3, #0
    5592:	60fb      	str	r3, [r7, #12]
    5594:	e001      	b.n	559a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    5596:	2301      	movs	r3, #1
    5598:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    559a:	f000 fae9 	bl	5b70 <vPortExitCritical>

	return xReturn;
    559e:	68fb      	ldr	r3, [r7, #12]
}
    55a0:	4618      	mov	r0, r3
    55a2:	3710      	adds	r7, #16
    55a4:	46bd      	mov	sp, r7
    55a6:	bd80      	pop	{r7, pc}

000055a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    55a8:	b480      	push	{r7}
    55aa:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    55ac:	f640 63a0 	movw	r3, #3744	; 0xea0
    55b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55b4:	2201      	movs	r2, #1
    55b6:	601a      	str	r2, [r3, #0]
}
    55b8:	46bd      	mov	sp, r7
    55ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    55be:	4770      	bx	lr

000055c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    55c0:	b580      	push	{r7, lr}
    55c2:	b082      	sub	sp, #8
    55c4:	af00      	add	r7, sp, #0
    55c6:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    55c8:	f000 f886 	bl	56d8 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    55cc:	f000 faac 	bl	5b28 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    55d0:	e7fa      	b.n	55c8 <prvIdleTask+0x8>
    55d2:	bf00      	nop

000055d4 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    55d4:	b580      	push	{r7, lr}
    55d6:	b084      	sub	sp, #16
    55d8:	af00      	add	r7, sp, #0
    55da:	60f8      	str	r0, [r7, #12]
    55dc:	60b9      	str	r1, [r7, #8]
    55de:	607a      	str	r2, [r7, #4]
    55e0:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    55e2:	68fb      	ldr	r3, [r7, #12]
    55e4:	3334      	adds	r3, #52	; 0x34
    55e6:	4618      	mov	r0, r3
    55e8:	68b9      	ldr	r1, [r7, #8]
    55ea:	2210      	movs	r2, #16
    55ec:	f013 f8b0 	bl	18750 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    55f0:	68fb      	ldr	r3, [r7, #12]
    55f2:	2200      	movs	r2, #0
    55f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    55f8:	687b      	ldr	r3, [r7, #4]
    55fa:	2b13      	cmp	r3, #19
    55fc:	d901      	bls.n	5602 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    55fe:	2313      	movs	r3, #19
    5600:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    5602:	68fb      	ldr	r3, [r7, #12]
    5604:	687a      	ldr	r2, [r7, #4]
    5606:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    5608:	68fb      	ldr	r3, [r7, #12]
    560a:	687a      	ldr	r2, [r7, #4]
    560c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    560e:	68fb      	ldr	r3, [r7, #12]
    5610:	3304      	adds	r3, #4
    5612:	4618      	mov	r0, r3
    5614:	f7fe fc78 	bl	3f08 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    5618:	68fb      	ldr	r3, [r7, #12]
    561a:	3318      	adds	r3, #24
    561c:	4618      	mov	r0, r3
    561e:	f7fe fc73 	bl	3f08 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    5622:	68fb      	ldr	r3, [r7, #12]
    5624:	68fa      	ldr	r2, [r7, #12]
    5626:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    5628:	687b      	ldr	r3, [r7, #4]
    562a:	f1c3 0214 	rsb	r2, r3, #20
    562e:	68fb      	ldr	r3, [r7, #12]
    5630:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    5632:	68fb      	ldr	r3, [r7, #12]
    5634:	68fa      	ldr	r2, [r7, #12]
    5636:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    5638:	3710      	adds	r7, #16
    563a:	46bd      	mov	sp, r7
    563c:	bd80      	pop	{r7, pc}
    563e:	bf00      	nop

00005640 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    5640:	b580      	push	{r7, lr}
    5642:	b082      	sub	sp, #8
    5644:	af00      	add	r7, sp, #0
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    5646:	2300      	movs	r3, #0
    5648:	607b      	str	r3, [r7, #4]
    564a:	e00f      	b.n	566c <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    564c:	687a      	ldr	r2, [r7, #4]
    564e:	4613      	mov	r3, r2
    5650:	009b      	lsls	r3, r3, #2
    5652:	4413      	add	r3, r2
    5654:	009b      	lsls	r3, r3, #2
    5656:	f640 4284 	movw	r2, #3204	; 0xc84
    565a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    565e:	4413      	add	r3, r2
    5660:	4618      	mov	r0, r3
    5662:	f7fe fc31 	bl	3ec8 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    5666:	687b      	ldr	r3, [r7, #4]
    5668:	3301      	adds	r3, #1
    566a:	607b      	str	r3, [r7, #4]
    566c:	687b      	ldr	r3, [r7, #4]
    566e:	2b13      	cmp	r3, #19
    5670:	d9ec      	bls.n	564c <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    5672:	f640 6014 	movw	r0, #3604	; 0xe14
    5676:	f2c2 0000 	movt	r0, #8192	; 0x2000
    567a:	f7fe fc25 	bl	3ec8 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    567e:	f640 6028 	movw	r0, #3624	; 0xe28
    5682:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5686:	f7fe fc1f 	bl	3ec8 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    568a:	f640 6044 	movw	r0, #3652	; 0xe44
    568e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5692:	f7fe fc19 	bl	3ec8 <vListInitialise>


	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    5696:	f640 6058 	movw	r0, #3672	; 0xe58
    569a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    569e:	f7fe fc13 	bl	3ec8 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    56a2:	f640 6070 	movw	r0, #3696	; 0xe70
    56a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    56aa:	f7fe fc0d 	bl	3ec8 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    56ae:	f640 633c 	movw	r3, #3644	; 0xe3c
    56b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56b6:	f640 6214 	movw	r2, #3604	; 0xe14
    56ba:	f2c2 0200 	movt	r2, #8192	; 0x2000
    56be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    56c0:	f640 6340 	movw	r3, #3648	; 0xe40
    56c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56c8:	f640 6228 	movw	r2, #3624	; 0xe28
    56cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    56d0:	601a      	str	r2, [r3, #0]
}
    56d2:	3708      	adds	r7, #8
    56d4:	46bd      	mov	sp, r7
    56d6:	bd80      	pop	{r7, pc}

000056d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    56d8:	b580      	push	{r7, lr}
    56da:	b082      	sub	sp, #8
    56dc:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    56de:	f640 636c 	movw	r3, #3692	; 0xe6c
    56e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56e6:	681b      	ldr	r3, [r3, #0]
    56e8:	2b00      	cmp	r3, #0
    56ea:	d03a      	beq.n	5762 <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    56ec:	f7ff fc4c 	bl	4f88 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    56f0:	f640 6358 	movw	r3, #3672	; 0xe58
    56f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56f8:	681b      	ldr	r3, [r3, #0]
    56fa:	2b00      	cmp	r3, #0
    56fc:	bf14      	ite	ne
    56fe:	2300      	movne	r3, #0
    5700:	2301      	moveq	r3, #1
    5702:	b2db      	uxtb	r3, r3
    5704:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    5706:	f7ff fc51 	bl	4fac <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    570a:	687b      	ldr	r3, [r7, #4]
    570c:	2b00      	cmp	r3, #0
    570e:	d128      	bne.n	5762 <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    5710:	f000 fa18 	bl	5b44 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    5714:	f640 6358 	movw	r3, #3672	; 0xe58
    5718:	f2c2 0300 	movt	r3, #8192	; 0x2000
    571c:	68db      	ldr	r3, [r3, #12]
    571e:	68db      	ldr	r3, [r3, #12]
    5720:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    5722:	683b      	ldr	r3, [r7, #0]
    5724:	3304      	adds	r3, #4
    5726:	4618      	mov	r0, r3
    5728:	f7fe fc5a 	bl	3fe0 <vListRemove>
					--uxCurrentNumberOfTasks;
    572c:	f640 6384 	movw	r3, #3716	; 0xe84
    5730:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5734:	681b      	ldr	r3, [r3, #0]
    5736:	1e5a      	subs	r2, r3, #1
    5738:	f640 6384 	movw	r3, #3716	; 0xe84
    573c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5740:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    5742:	f640 636c 	movw	r3, #3692	; 0xe6c
    5746:	f2c2 0300 	movt	r3, #8192	; 0x2000
    574a:	681b      	ldr	r3, [r3, #0]
    574c:	1e5a      	subs	r2, r3, #1
    574e:	f640 636c 	movw	r3, #3692	; 0xe6c
    5752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5756:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    5758:	f000 fa0a 	bl	5b70 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    575c:	6838      	ldr	r0, [r7, #0]
    575e:	f000 f879 	bl	5854 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    5762:	3708      	adds	r7, #8
    5764:	46bd      	mov	sp, r7
    5766:	bd80      	pop	{r7, pc}

00005768 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    5768:	b580      	push	{r7, lr}
    576a:	b082      	sub	sp, #8
    576c:	af00      	add	r7, sp, #0
    576e:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    5770:	f640 4380 	movw	r3, #3200	; 0xc80
    5774:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5778:	681b      	ldr	r3, [r3, #0]
    577a:	687a      	ldr	r2, [r7, #4]
    577c:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    577e:	f640 6388 	movw	r3, #3720	; 0xe88
    5782:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5786:	681b      	ldr	r3, [r3, #0]
    5788:	687a      	ldr	r2, [r7, #4]
    578a:	429a      	cmp	r2, r3
    578c:	d20f      	bcs.n	57ae <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    578e:	f640 6340 	movw	r3, #3648	; 0xe40
    5792:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5796:	681a      	ldr	r2, [r3, #0]
    5798:	f640 4380 	movw	r3, #3200	; 0xc80
    579c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57a0:	681b      	ldr	r3, [r3, #0]
    57a2:	3304      	adds	r3, #4
    57a4:	4610      	mov	r0, r2
    57a6:	4619      	mov	r1, r3
    57a8:	f7fe fbe2 	bl	3f70 <vListInsert>
    57ac:	e01c      	b.n	57e8 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    57ae:	f640 633c 	movw	r3, #3644	; 0xe3c
    57b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57b6:	681a      	ldr	r2, [r3, #0]
    57b8:	f640 4380 	movw	r3, #3200	; 0xc80
    57bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57c0:	681b      	ldr	r3, [r3, #0]
    57c2:	3304      	adds	r3, #4
    57c4:	4610      	mov	r0, r2
    57c6:	4619      	mov	r1, r3
    57c8:	f7fe fbd2 	bl	3f70 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    57cc:	f240 33e0 	movw	r3, #992	; 0x3e0
    57d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57d4:	681b      	ldr	r3, [r3, #0]
    57d6:	687a      	ldr	r2, [r7, #4]
    57d8:	429a      	cmp	r2, r3
    57da:	d205      	bcs.n	57e8 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    57dc:	f240 33e0 	movw	r3, #992	; 0x3e0
    57e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57e4:	687a      	ldr	r2, [r7, #4]
    57e6:	601a      	str	r2, [r3, #0]
		}
	}
}
    57e8:	3708      	adds	r7, #8
    57ea:	46bd      	mov	sp, r7
    57ec:	bd80      	pop	{r7, pc}
    57ee:	bf00      	nop

000057f0 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    57f0:	b580      	push	{r7, lr}
    57f2:	b084      	sub	sp, #16
    57f4:	af00      	add	r7, sp, #0
    57f6:	4603      	mov	r3, r0
    57f8:	6039      	str	r1, [r7, #0]
    57fa:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    57fc:	2050      	movs	r0, #80	; 0x50
    57fe:	f000 fa19 	bl	5c34 <pvPortMalloc>
    5802:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    5804:	68fb      	ldr	r3, [r7, #12]
    5806:	2b00      	cmp	r3, #0
    5808:	d01f      	beq.n	584a <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    580a:	683b      	ldr	r3, [r7, #0]
    580c:	2b00      	cmp	r3, #0
    580e:	d106      	bne.n	581e <prvAllocateTCBAndStack+0x2e>
    5810:	88fb      	ldrh	r3, [r7, #6]
    5812:	009b      	lsls	r3, r3, #2
    5814:	4618      	mov	r0, r3
    5816:	f000 fa0d 	bl	5c34 <pvPortMalloc>
    581a:	4603      	mov	r3, r0
    581c:	e000      	b.n	5820 <prvAllocateTCBAndStack+0x30>
    581e:	683b      	ldr	r3, [r7, #0]
    5820:	68fa      	ldr	r2, [r7, #12]
    5822:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    5824:	68fb      	ldr	r3, [r7, #12]
    5826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5828:	2b00      	cmp	r3, #0
    582a:	d105      	bne.n	5838 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    582c:	68f8      	ldr	r0, [r7, #12]
    582e:	f000 fac5 	bl	5dbc <vPortFree>
			pxNewTCB = NULL;
    5832:	2300      	movs	r3, #0
    5834:	60fb      	str	r3, [r7, #12]
    5836:	e008      	b.n	584a <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    5838:	68fb      	ldr	r3, [r7, #12]
    583a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    583c:	88fb      	ldrh	r3, [r7, #6]
    583e:	009b      	lsls	r3, r3, #2
    5840:	4610      	mov	r0, r2
    5842:	21a5      	movs	r1, #165	; 0xa5
    5844:	461a      	mov	r2, r3
    5846:	f012 ff33 	bl	186b0 <memset>
		}
	}

	return pxNewTCB;
    584a:	68fb      	ldr	r3, [r7, #12]
}
    584c:	4618      	mov	r0, r3
    584e:	3710      	adds	r7, #16
    5850:	46bd      	mov	sp, r7
    5852:	bd80      	pop	{r7, pc}

00005854 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    5854:	b580      	push	{r7, lr}
    5856:	b082      	sub	sp, #8
    5858:	af00      	add	r7, sp, #0
    585a:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    585c:	687b      	ldr	r3, [r7, #4]
    585e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5860:	4618      	mov	r0, r3
    5862:	f000 faab 	bl	5dbc <vPortFree>
		vPortFree( pxTCB );
    5866:	6878      	ldr	r0, [r7, #4]
    5868:	f000 faa8 	bl	5dbc <vPortFree>
	}
    586c:	3708      	adds	r7, #8
    586e:	46bd      	mov	sp, r7
    5870:	bd80      	pop	{r7, pc}
    5872:	bf00      	nop

00005874 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    5874:	b480      	push	{r7}
    5876:	b083      	sub	sp, #12
    5878:	af00      	add	r7, sp, #0
        xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    587a:	f640 4380 	movw	r3, #3200	; 0xc80
    587e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5882:	681b      	ldr	r3, [r3, #0]
    5884:	607b      	str	r3, [r7, #4]

		return xReturn;
    5886:	687b      	ldr	r3, [r7, #4]
	}
    5888:	4618      	mov	r0, r3
    588a:	370c      	adds	r7, #12
    588c:	46bd      	mov	sp, r7
    588e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5892:	4770      	bx	lr

00005894 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    5894:	b580      	push	{r7, lr}
    5896:	b084      	sub	sp, #16
    5898:	af00      	add	r7, sp, #0
    589a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    589c:	687b      	ldr	r3, [r7, #4]
    589e:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    58a0:	68fb      	ldr	r3, [r7, #12]
    58a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    58a4:	f640 4380 	movw	r3, #3200	; 0xc80
    58a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58ac:	681b      	ldr	r3, [r3, #0]
    58ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    58b0:	429a      	cmp	r2, r3
    58b2:	d24f      	bcs.n	5954 <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    58b4:	f640 4380 	movw	r3, #3200	; 0xc80
    58b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58bc:	681b      	ldr	r3, [r3, #0]
    58be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    58c0:	f1c3 0214 	rsb	r2, r3, #20
    58c4:	68fb      	ldr	r3, [r7, #12]
    58c6:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    58c8:	68fb      	ldr	r3, [r7, #12]
    58ca:	6959      	ldr	r1, [r3, #20]
    58cc:	68fb      	ldr	r3, [r7, #12]
    58ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    58d0:	4613      	mov	r3, r2
    58d2:	009b      	lsls	r3, r3, #2
    58d4:	4413      	add	r3, r2
    58d6:	009b      	lsls	r3, r3, #2
    58d8:	f640 4284 	movw	r2, #3204	; 0xc84
    58dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    58e0:	4413      	add	r3, r2
    58e2:	4299      	cmp	r1, r3
    58e4:	d12e      	bne.n	5944 <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    58e6:	68fb      	ldr	r3, [r7, #12]
    58e8:	3304      	adds	r3, #4
    58ea:	4618      	mov	r0, r3
    58ec:	f7fe fb78 	bl	3fe0 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    58f0:	f640 4380 	movw	r3, #3200	; 0xc80
    58f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58f8:	681b      	ldr	r3, [r3, #0]
    58fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    58fc:	68fb      	ldr	r3, [r7, #12]
    58fe:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    5900:	68fb      	ldr	r3, [r7, #12]
    5902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5904:	f640 6390 	movw	r3, #3728	; 0xe90
    5908:	f2c2 0300 	movt	r3, #8192	; 0x2000
    590c:	681b      	ldr	r3, [r3, #0]
    590e:	429a      	cmp	r2, r3
    5910:	d906      	bls.n	5920 <vTaskPriorityInherit+0x8c>
    5912:	68fb      	ldr	r3, [r7, #12]
    5914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5916:	f640 6390 	movw	r3, #3728	; 0xe90
    591a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    591e:	601a      	str	r2, [r3, #0]
    5920:	68fb      	ldr	r3, [r7, #12]
    5922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5924:	4613      	mov	r3, r2
    5926:	009b      	lsls	r3, r3, #2
    5928:	4413      	add	r3, r2
    592a:	009b      	lsls	r3, r3, #2
    592c:	f640 4284 	movw	r2, #3204	; 0xc84
    5930:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5934:	441a      	add	r2, r3
    5936:	68fb      	ldr	r3, [r7, #12]
    5938:	3304      	adds	r3, #4
    593a:	4610      	mov	r0, r2
    593c:	4619      	mov	r1, r3
    593e:	f7fe faef 	bl	3f20 <vListInsertEnd>
    5942:	e007      	b.n	5954 <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5944:	f640 4380 	movw	r3, #3200	; 0xc80
    5948:	f2c2 0300 	movt	r3, #8192	; 0x2000
    594c:	681b      	ldr	r3, [r3, #0]
    594e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5950:	68fb      	ldr	r3, [r7, #12]
    5952:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    5954:	3710      	adds	r7, #16
    5956:	46bd      	mov	sp, r7
    5958:	bd80      	pop	{r7, pc}
    595a:	bf00      	nop

0000595c <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    595c:	b580      	push	{r7, lr}
    595e:	b084      	sub	sp, #16
    5960:	af00      	add	r7, sp, #0
    5962:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5964:	687b      	ldr	r3, [r7, #4]
    5966:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    5968:	687b      	ldr	r3, [r7, #4]
    596a:	2b00      	cmp	r3, #0
    596c:	d035      	beq.n	59da <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    596e:	68fb      	ldr	r3, [r7, #12]
    5970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5972:	68fb      	ldr	r3, [r7, #12]
    5974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5976:	429a      	cmp	r2, r3
    5978:	d02f      	beq.n	59da <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    597a:	68fb      	ldr	r3, [r7, #12]
    597c:	3304      	adds	r3, #4
    597e:	4618      	mov	r0, r3
    5980:	f7fe fb2e 	bl	3fe0 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    5984:	68fb      	ldr	r3, [r7, #12]
    5986:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5988:	68fb      	ldr	r3, [r7, #12]
    598a:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    598c:	68fb      	ldr	r3, [r7, #12]
    598e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5990:	f1c3 0214 	rsb	r2, r3, #20
    5994:	68fb      	ldr	r3, [r7, #12]
    5996:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    5998:	68fb      	ldr	r3, [r7, #12]
    599a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    599c:	f640 6390 	movw	r3, #3728	; 0xe90
    59a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59a4:	681b      	ldr	r3, [r3, #0]
    59a6:	429a      	cmp	r2, r3
    59a8:	d906      	bls.n	59b8 <vTaskPriorityDisinherit+0x5c>
    59aa:	68fb      	ldr	r3, [r7, #12]
    59ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    59ae:	f640 6390 	movw	r3, #3728	; 0xe90
    59b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59b6:	601a      	str	r2, [r3, #0]
    59b8:	68fb      	ldr	r3, [r7, #12]
    59ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    59bc:	4613      	mov	r3, r2
    59be:	009b      	lsls	r3, r3, #2
    59c0:	4413      	add	r3, r2
    59c2:	009b      	lsls	r3, r3, #2
    59c4:	f640 4284 	movw	r2, #3204	; 0xc84
    59c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    59cc:	441a      	add	r2, r3
    59ce:	68fb      	ldr	r3, [r7, #12]
    59d0:	3304      	adds	r3, #4
    59d2:	4610      	mov	r0, r2
    59d4:	4619      	mov	r1, r3
    59d6:	f7fe faa3 	bl	3f20 <vListInsertEnd>
			}
		}
	}
    59da:	3710      	adds	r7, #16
    59dc:	46bd      	mov	sp, r7
    59de:	bd80      	pop	{r7, pc}

000059e0 <xTaskGetxStartTime>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_SEFM == 1)

    portTickType xTaskGetxStartTime( xTaskHandle pxTCB )
    {
    59e0:	b480      	push	{r7}
    59e2:	b083      	sub	sp, #12
    59e4:	af00      	add	r7, sp, #0
    59e6:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xStartTime;
    59e8:	687b      	ldr	r3, [r7, #4]
    59ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    }
    59ec:	4618      	mov	r0, r3
    59ee:	370c      	adds	r7, #12
    59f0:	46bd      	mov	sp, r7
    59f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    59f6:	4770      	bx	lr

000059f8 <xTaskGetxLet>:

    portTickType xTaskGetxLet( xTaskHandle pxTCB )
    {
    59f8:	b480      	push	{r7}
    59fa:	b083      	sub	sp, #12
    59fc:	af00      	add	r7, sp, #0
    59fe:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xLet;
    5a00:	687b      	ldr	r3, [r7, #4]
    5a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
    5a04:	4618      	mov	r0, r3
    5a06:	370c      	adds	r7, #12
    5a08:	46bd      	mov	sp, r7
    5a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a0e:	4770      	bx	lr

00005a10 <vTaskSetxStartTime>:

    void vTaskSetxStartTime ( xTaskHandle pxTCB, portTickType xStartTime )
    {
    5a10:	b480      	push	{r7}
    5a12:	b083      	sub	sp, #12
    5a14:	af00      	add	r7, sp, #0
    5a16:	6078      	str	r0, [r7, #4]
    5a18:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xStartTime = xStartTime; 
    5a1a:	687b      	ldr	r3, [r7, #4]
    5a1c:	683a      	ldr	r2, [r7, #0]
    5a1e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    5a20:	370c      	adds	r7, #12
    5a22:	46bd      	mov	sp, r7
    5a24:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a28:	4770      	bx	lr
    5a2a:	bf00      	nop

00005a2c <vTaskSetxLet>:

    void vTaskSetxLet( xTaskHandle pxTCB, portTickType xLet )
    {
    5a2c:	b480      	push	{r7}
    5a2e:	b083      	sub	sp, #12
    5a30:	af00      	add	r7, sp, #0
    5a32:	6078      	str	r0, [r7, #4]
    5a34:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xLet = xLet;
    5a36:	687b      	ldr	r3, [r7, #4]
    5a38:	683a      	ldr	r2, [r7, #0]
    5a3a:	649a      	str	r2, [r3, #72]	; 0x48
    }
    5a3c:	370c      	adds	r7, #12
    5a3e:	46bd      	mov	sp, r7
    5a40:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a44:	4770      	bx	lr
    5a46:	bf00      	nop

00005a48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    5a48:	b480      	push	{r7}
    5a4a:	b085      	sub	sp, #20
    5a4c:	af00      	add	r7, sp, #0
    5a4e:	60f8      	str	r0, [r7, #12]
    5a50:	60b9      	str	r1, [r7, #8]
    5a52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    5a54:	68fb      	ldr	r3, [r7, #12]
    5a56:	3b04      	subs	r3, #4
    5a58:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    5a5a:	68fb      	ldr	r3, [r7, #12]
    5a5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5a60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5a62:	68fb      	ldr	r3, [r7, #12]
    5a64:	3b04      	subs	r3, #4
    5a66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    5a68:	68ba      	ldr	r2, [r7, #8]
    5a6a:	68fb      	ldr	r3, [r7, #12]
    5a6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5a6e:	68fb      	ldr	r3, [r7, #12]
    5a70:	3b04      	subs	r3, #4
    5a72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    5a74:	68fb      	ldr	r3, [r7, #12]
    5a76:	2200      	movs	r2, #0
    5a78:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    5a7a:	68fb      	ldr	r3, [r7, #12]
    5a7c:	3b14      	subs	r3, #20
    5a7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    5a80:	687a      	ldr	r2, [r7, #4]
    5a82:	68fb      	ldr	r3, [r7, #12]
    5a84:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    5a86:	68fb      	ldr	r3, [r7, #12]
    5a88:	3b20      	subs	r3, #32
    5a8a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    5a8c:	68fb      	ldr	r3, [r7, #12]
}
    5a8e:	4618      	mov	r0, r3
    5a90:	3714      	adds	r7, #20
    5a92:	46bd      	mov	sp, r7
    5a94:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a98:	4770      	bx	lr
    5a9a:	bf00      	nop

00005a9c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    5a9c:	4b06      	ldr	r3, [pc, #24]	; (5ab8 <pxCurrentTCBConst2>)
    5a9e:	6819      	ldr	r1, [r3, #0]
    5aa0:	6808      	ldr	r0, [r1, #0]
    5aa2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5aa6:	f380 8809 	msr	PSP, r0
    5aaa:	f04f 0000 	mov.w	r0, #0
    5aae:	f380 8811 	msr	BASEPRI, r0
    5ab2:	f04e 0e0d 	orr.w	lr, lr, #13
    5ab6:	4770      	bx	lr

00005ab8 <pxCurrentTCBConst2>:
    5ab8:	20000c80 	.word	0x20000c80

00005abc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    5abc:	485c      	ldr	r0, [pc, #368]	; (5c30 <prvSetupTimerInterrupt+0x28>)
    5abe:	6800      	ldr	r0, [r0, #0]
    5ac0:	6800      	ldr	r0, [r0, #0]
    5ac2:	f380 8808 	msr	MSP, r0
    5ac6:	b662      	cpsie	i
    5ac8:	df00      	svc	0
    5aca:	bf00      	nop

00005acc <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    5acc:	b580      	push	{r7, lr}
    5ace:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    5ad0:	f64e 5320 	movw	r3, #60704	; 0xed20
    5ad4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5ad8:	f64e 5220 	movw	r2, #60704	; 0xed20
    5adc:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5ae0:	6812      	ldr	r2, [r2, #0]
    5ae2:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    5ae6:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    5ae8:	f64e 5320 	movw	r3, #60704	; 0xed20
    5aec:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5af0:	f64e 5220 	movw	r2, #60704	; 0xed20
    5af4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5af8:	6812      	ldr	r2, [r2, #0]
    5afa:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    5afe:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    5b00:	f000 f882 	bl	5c08 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    5b04:	f240 33e4 	movw	r3, #996	; 0x3e4
    5b08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b0c:	2200      	movs	r2, #0
    5b0e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    5b10:	f7ff ffd4 	bl	5abc <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    5b14:	2300      	movs	r3, #0
}
    5b16:	4618      	mov	r0, r3
    5b18:	bd80      	pop	{r7, pc}
    5b1a:	bf00      	nop

00005b1c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    5b1c:	b480      	push	{r7}
    5b1e:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    5b20:	46bd      	mov	sp, r7
    5b22:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b26:	4770      	bx	lr

00005b28 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    5b28:	b480      	push	{r7}
    5b2a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    5b2c:	f64e 5304 	movw	r3, #60676	; 0xed04
    5b30:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5b34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5b38:	601a      	str	r2, [r3, #0]
}
    5b3a:	46bd      	mov	sp, r7
    5b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b40:	4770      	bx	lr
    5b42:	bf00      	nop

00005b44 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    5b44:	b480      	push	{r7}
    5b46:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    5b48:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5b4c:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    5b50:	f240 33e4 	movw	r3, #996	; 0x3e4
    5b54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b58:	681b      	ldr	r3, [r3, #0]
    5b5a:	1c5a      	adds	r2, r3, #1
    5b5c:	f240 33e4 	movw	r3, #996	; 0x3e4
    5b60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b64:	601a      	str	r2, [r3, #0]
}
    5b66:	46bd      	mov	sp, r7
    5b68:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b6c:	4770      	bx	lr
    5b6e:	bf00      	nop

00005b70 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    5b70:	b480      	push	{r7}
    5b72:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    5b74:	f240 33e4 	movw	r3, #996	; 0x3e4
    5b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b7c:	681b      	ldr	r3, [r3, #0]
    5b7e:	1e5a      	subs	r2, r3, #1
    5b80:	f240 33e4 	movw	r3, #996	; 0x3e4
    5b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b88:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    5b8a:	f240 33e4 	movw	r3, #996	; 0x3e4
    5b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b92:	681b      	ldr	r3, [r3, #0]
    5b94:	2b00      	cmp	r3, #0
    5b96:	d103      	bne.n	5ba0 <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    5b98:	f04f 0000 	mov.w	r0, #0
    5b9c:	f380 8811 	msr	BASEPRI, r0
	}
}
    5ba0:	46bd      	mov	sp, r7
    5ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ba6:	4770      	bx	lr

00005ba8 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    5ba8:	f3ef 8009 	mrs	r0, PSP
    5bac:	4b0c      	ldr	r3, [pc, #48]	; (5be0 <pxCurrentTCBConst>)
    5bae:	681a      	ldr	r2, [r3, #0]
    5bb0:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5bb4:	6010      	str	r0, [r2, #0]
    5bb6:	e92d 4008 	stmdb	sp!, {r3, lr}
    5bba:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5bbe:	f380 8811 	msr	BASEPRI, r0
    5bc2:	f7ff fba1 	bl	5308 <vTaskSwitchContext>
    5bc6:	f04f 0000 	mov.w	r0, #0
    5bca:	f380 8811 	msr	BASEPRI, r0
    5bce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5bd2:	6819      	ldr	r1, [r3, #0]
    5bd4:	6808      	ldr	r0, [r1, #0]
    5bd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5bda:	f380 8809 	msr	PSP, r0
    5bde:	4770      	bx	lr

00005be0 <pxCurrentTCBConst>:
    5be0:	20000c80 	.word	0x20000c80

00005be4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    5be4:	b580      	push	{r7, lr}
    5be6:	b082      	sub	sp, #8
    5be8:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    5bea:	2300      	movs	r3, #0
    5bec:	607b      	str	r3, [r7, #4]
    5bee:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5bf2:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    5bf6:	f7ff faa9 	bl	514c <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    5bfa:	f04f 0000 	mov.w	r0, #0
    5bfe:	f380 8811 	msr	BASEPRI, r0
}
    5c02:	3708      	adds	r7, #8
    5c04:	46bd      	mov	sp, r7
    5c06:	bd80      	pop	{r7, pc}

00005c08 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    5c08:	b480      	push	{r7}
    5c0a:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    5c0c:	f24e 0314 	movw	r3, #57364	; 0xe014
    5c10:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5c14:	f641 421f 	movw	r2, #7199	; 0x1c1f
    5c18:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    5c1a:	f24e 0310 	movw	r3, #57360	; 0xe010
    5c1e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5c22:	2207      	movs	r2, #7
    5c24:	601a      	str	r2, [r3, #0]
}
    5c26:	46bd      	mov	sp, r7
    5c28:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c2c:	4770      	bx	lr
    5c2e:	0000      	.short	0x0000
    5c30:	e000ed08 	.word	0xe000ed08

00005c34 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5c34:	b580      	push	{r7, lr}
    5c36:	b08a      	sub	sp, #40	; 0x28
    5c38:	af00      	add	r7, sp, #0
    5c3a:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    5c3c:	2300      	movs	r3, #0
    5c3e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    5c40:	f7ff f9a2 	bl	4f88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    5c44:	f64a 63c0 	movw	r3, #44736	; 0xaec0
    5c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c4c:	681b      	ldr	r3, [r3, #0]
    5c4e:	2b00      	cmp	r3, #0
    5c50:	d130      	bne.n	5cb4 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    5c52:	f64a 63b0 	movw	r3, #44720	; 0xaeb0
    5c56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c5a:	f640 62b0 	movw	r2, #3760	; 0xeb0
    5c5e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5c62:	601a      	str	r2, [r3, #0]
    5c64:	f64a 63b0 	movw	r3, #44720	; 0xaeb0
    5c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c6c:	2200      	movs	r2, #0
    5c6e:	605a      	str	r2, [r3, #4]
    5c70:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    5c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c78:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    5c7c:	605a      	str	r2, [r3, #4]
    5c7e:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    5c82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c86:	2200      	movs	r2, #0
    5c88:	601a      	str	r2, [r3, #0]
    5c8a:	f640 63b0 	movw	r3, #3760	; 0xeb0
    5c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c92:	617b      	str	r3, [r7, #20]
    5c94:	697b      	ldr	r3, [r7, #20]
    5c96:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    5c9a:	605a      	str	r2, [r3, #4]
    5c9c:	697a      	ldr	r2, [r7, #20]
    5c9e:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    5ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ca6:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    5ca8:	f64a 63c0 	movw	r3, #44736	; 0xaec0
    5cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cb0:	2201      	movs	r2, #1
    5cb2:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    5cb4:	687b      	ldr	r3, [r7, #4]
    5cb6:	2b00      	cmp	r3, #0
    5cb8:	d00d      	beq.n	5cd6 <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    5cba:	2310      	movs	r3, #16
    5cbc:	687a      	ldr	r2, [r7, #4]
    5cbe:	4413      	add	r3, r2
    5cc0:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    5cc2:	687b      	ldr	r3, [r7, #4]
    5cc4:	f003 0307 	and.w	r3, r3, #7
    5cc8:	2b00      	cmp	r3, #0
    5cca:	d004      	beq.n	5cd6 <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    5ccc:	687b      	ldr	r3, [r7, #4]
    5cce:	f023 0307 	bic.w	r3, r3, #7
    5cd2:	3308      	adds	r3, #8
    5cd4:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    5cd6:	687b      	ldr	r3, [r7, #4]
    5cd8:	2b00      	cmp	r3, #0
    5cda:	d068      	beq.n	5dae <pvPortMalloc+0x17a>
    5cdc:	687b      	ldr	r3, [r7, #4]
    5cde:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
    5ce2:	d264      	bcs.n	5dae <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    5ce4:	f64a 63b0 	movw	r3, #44720	; 0xaeb0
    5ce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cec:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    5cee:	f64a 63b0 	movw	r3, #44720	; 0xaeb0
    5cf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cf6:	681b      	ldr	r3, [r3, #0]
    5cf8:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5cfa:	e004      	b.n	5d06 <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    5cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5cfe:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    5d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d02:	681b      	ldr	r3, [r3, #0]
    5d04:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d08:	685a      	ldr	r2, [r3, #4]
    5d0a:	687b      	ldr	r3, [r7, #4]
    5d0c:	429a      	cmp	r2, r3
    5d0e:	d203      	bcs.n	5d18 <pvPortMalloc+0xe4>
    5d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d12:	681b      	ldr	r3, [r3, #0]
    5d14:	2b00      	cmp	r3, #0
    5d16:	d1f1      	bne.n	5cfc <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    5d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5d1a:	f64a 63b8 	movw	r3, #44728	; 0xaeb8
    5d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d22:	429a      	cmp	r2, r3
    5d24:	d043      	beq.n	5dae <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    5d26:	6a3b      	ldr	r3, [r7, #32]
    5d28:	681a      	ldr	r2, [r3, #0]
    5d2a:	2310      	movs	r3, #16
    5d2c:	4413      	add	r3, r2
    5d2e:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    5d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d32:	681a      	ldr	r2, [r3, #0]
    5d34:	6a3b      	ldr	r3, [r7, #32]
    5d36:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    5d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d3a:	685a      	ldr	r2, [r3, #4]
    5d3c:	687b      	ldr	r3, [r7, #4]
    5d3e:	1ad2      	subs	r2, r2, r3
    5d40:	2310      	movs	r3, #16
    5d42:	005b      	lsls	r3, r3, #1
    5d44:	429a      	cmp	r2, r3
    5d46:	d925      	bls.n	5d94 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    5d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5d4a:	687b      	ldr	r3, [r7, #4]
    5d4c:	4413      	add	r3, r2
    5d4e:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    5d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d52:	685a      	ldr	r2, [r3, #4]
    5d54:	687b      	ldr	r3, [r7, #4]
    5d56:	1ad2      	subs	r2, r2, r3
    5d58:	693b      	ldr	r3, [r7, #16]
    5d5a:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    5d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5d5e:	687a      	ldr	r2, [r7, #4]
    5d60:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    5d62:	693b      	ldr	r3, [r7, #16]
    5d64:	685b      	ldr	r3, [r3, #4]
    5d66:	60fb      	str	r3, [r7, #12]
    5d68:	f64a 63b0 	movw	r3, #44720	; 0xaeb0
    5d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d70:	61bb      	str	r3, [r7, #24]
    5d72:	e002      	b.n	5d7a <pvPortMalloc+0x146>
    5d74:	69bb      	ldr	r3, [r7, #24]
    5d76:	681b      	ldr	r3, [r3, #0]
    5d78:	61bb      	str	r3, [r7, #24]
    5d7a:	69bb      	ldr	r3, [r7, #24]
    5d7c:	681b      	ldr	r3, [r3, #0]
    5d7e:	685a      	ldr	r2, [r3, #4]
    5d80:	68fb      	ldr	r3, [r7, #12]
    5d82:	429a      	cmp	r2, r3
    5d84:	d3f6      	bcc.n	5d74 <pvPortMalloc+0x140>
    5d86:	69bb      	ldr	r3, [r7, #24]
    5d88:	681a      	ldr	r2, [r3, #0]
    5d8a:	693b      	ldr	r3, [r7, #16]
    5d8c:	601a      	str	r2, [r3, #0]
    5d8e:	69bb      	ldr	r3, [r7, #24]
    5d90:	693a      	ldr	r2, [r7, #16]
    5d92:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    5d94:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d9c:	681a      	ldr	r2, [r3, #0]
    5d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5da0:	685b      	ldr	r3, [r3, #4]
    5da2:	1ad2      	subs	r2, r2, r3
    5da4:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5da8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dac:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    5dae:	f7ff f8fd 	bl	4fac <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    5db2:	69fb      	ldr	r3, [r7, #28]
}
    5db4:	4618      	mov	r0, r3
    5db6:	3728      	adds	r7, #40	; 0x28
    5db8:	46bd      	mov	sp, r7
    5dba:	bd80      	pop	{r7, pc}

00005dbc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    5dbc:	b580      	push	{r7, lr}
    5dbe:	b086      	sub	sp, #24
    5dc0:	af00      	add	r7, sp, #0
    5dc2:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    5dc4:	687b      	ldr	r3, [r7, #4]
    5dc6:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    5dc8:	687b      	ldr	r3, [r7, #4]
    5dca:	2b00      	cmp	r3, #0
    5dcc:	d030      	beq.n	5e30 <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    5dce:	2310      	movs	r3, #16
    5dd0:	425b      	negs	r3, r3
    5dd2:	693a      	ldr	r2, [r7, #16]
    5dd4:	4413      	add	r3, r2
    5dd6:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    5dd8:	693b      	ldr	r3, [r7, #16]
    5dda:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    5ddc:	f7ff f8d4 	bl	4f88 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    5de0:	68fb      	ldr	r3, [r7, #12]
    5de2:	685b      	ldr	r3, [r3, #4]
    5de4:	60bb      	str	r3, [r7, #8]
    5de6:	f64a 63b0 	movw	r3, #44720	; 0xaeb0
    5dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dee:	617b      	str	r3, [r7, #20]
    5df0:	e002      	b.n	5df8 <vPortFree+0x3c>
    5df2:	697b      	ldr	r3, [r7, #20]
    5df4:	681b      	ldr	r3, [r3, #0]
    5df6:	617b      	str	r3, [r7, #20]
    5df8:	697b      	ldr	r3, [r7, #20]
    5dfa:	681b      	ldr	r3, [r3, #0]
    5dfc:	685a      	ldr	r2, [r3, #4]
    5dfe:	68bb      	ldr	r3, [r7, #8]
    5e00:	429a      	cmp	r2, r3
    5e02:	d3f6      	bcc.n	5df2 <vPortFree+0x36>
    5e04:	697b      	ldr	r3, [r7, #20]
    5e06:	681a      	ldr	r2, [r3, #0]
    5e08:	68fb      	ldr	r3, [r7, #12]
    5e0a:	601a      	str	r2, [r3, #0]
    5e0c:	697b      	ldr	r3, [r7, #20]
    5e0e:	68fa      	ldr	r2, [r7, #12]
    5e10:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    5e12:	68fb      	ldr	r3, [r7, #12]
    5e14:	685a      	ldr	r2, [r3, #4]
    5e16:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e1e:	681b      	ldr	r3, [r3, #0]
    5e20:	441a      	add	r2, r3
    5e22:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5e26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e2a:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    5e2c:	f7ff f8be 	bl	4fac <xTaskResumeAll>
	}
}
    5e30:	3718      	adds	r7, #24
    5e32:	46bd      	mov	sp, r7
    5e34:	bd80      	pop	{r7, pc}
    5e36:	bf00      	nop

00005e38 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    5e38:	b480      	push	{r7}
    5e3a:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    5e3c:	f240 33e8 	movw	r3, #1000	; 0x3e8
    5e40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e44:	681b      	ldr	r3, [r3, #0]
}
    5e46:	4618      	mov	r0, r3
    5e48:	46bd      	mov	sp, r7
    5e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e4e:	4770      	bx	lr

00005e50 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    5e50:	b480      	push	{r7}
    5e52:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    5e54:	46bd      	mov	sp, r7
    5e56:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e5a:	4770      	bx	lr
    5e5c:	0000      	movs	r0, r0
	...

00005e60 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    5e60:	b580      	push	{r7, lr}
    5e62:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    5e64:	f64a 63e2 	movw	r3, #44770	; 0xaee2
    5e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e6c:	781b      	ldrb	r3, [r3, #0]
    5e6e:	2b00      	cmp	r3, #0
    5e70:	f040 815d 	bne.w	612e <ground_calibrate+0x2ce>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    5e74:	f64a 63ca 	movw	r3, #44746	; 0xaeca
    5e78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e7c:	881b      	ldrh	r3, [r3, #0]
    5e7e:	2b09      	cmp	r3, #9
    5e80:	f201 8145 	bhi.w	710e <ground_calibrate+0x12ae>
    5e84:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    5e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e8c:	781b      	ldrb	r3, [r3, #0]
    5e8e:	2b01      	cmp	r3, #1
    5e90:	f041 813d 	bne.w	710e <ground_calibrate+0x12ae>
      calib_status = WAITING_CALIB_CONTRAST;
    5e94:	f64a 63e2 	movw	r3, #44770	; 0xaee2
    5e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e9c:	2201      	movs	r2, #1
    5e9e:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_START();
    5ea0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    5ea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ea8:	781a      	ldrb	r2, [r3, #0]
    5eaa:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    5eae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5eb2:	781b      	ldrb	r3, [r3, #0]
    5eb4:	b2db      	uxtb	r3, r3
    5eb6:	429a      	cmp	r2, r3
    5eb8:	d313      	bcc.n	5ee2 <ground_calibrate+0x82>
    5eba:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    5ebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ec2:	781b      	ldrb	r3, [r3, #0]
    5ec4:	b2db      	uxtb	r3, r3
    5ec6:	461a      	mov	r2, r3
    5ec8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    5ecc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ed0:	781b      	ldrb	r3, [r3, #0]
    5ed2:	1ad3      	subs	r3, r2, r3
    5ed4:	33ff      	adds	r3, #255	; 0xff
    5ed6:	2b04      	cmp	r3, #4
    5ed8:	bfd4      	ite	le
    5eda:	2300      	movle	r3, #0
    5edc:	2301      	movgt	r3, #1
    5ede:	b2db      	uxtb	r3, r3
    5ee0:	e011      	b.n	5f06 <ground_calibrate+0xa6>
    5ee2:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    5ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5eea:	781b      	ldrb	r3, [r3, #0]
    5eec:	b2db      	uxtb	r3, r3
    5eee:	461a      	mov	r2, r3
    5ef0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    5ef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ef8:	781b      	ldrb	r3, [r3, #0]
    5efa:	1ad3      	subs	r3, r2, r3
    5efc:	2b04      	cmp	r3, #4
    5efe:	bfd4      	ite	le
    5f00:	2300      	movle	r3, #0
    5f02:	2301      	movgt	r3, #1
    5f04:	b2db      	uxtb	r3, r3
    5f06:	2b00      	cmp	r3, #0
    5f08:	f000 8103 	beq.w	6112 <ground_calibrate+0x2b2>
    5f0c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    5f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f14:	781b      	ldrb	r3, [r3, #0]
    5f16:	461a      	mov	r2, r3
    5f18:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    5f1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f20:	2105      	movs	r1, #5
    5f22:	5499      	strb	r1, [r3, r2]
    5f24:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    5f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f2c:	781b      	ldrb	r3, [r3, #0]
    5f2e:	3301      	adds	r3, #1
    5f30:	b2da      	uxtb	r2, r3
    5f32:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    5f36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f3a:	701a      	strb	r2, [r3, #0]
    5f3c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    5f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f44:	781b      	ldrb	r3, [r3, #0]
    5f46:	2bff      	cmp	r3, #255	; 0xff
    5f48:	d105      	bne.n	5f56 <ground_calibrate+0xf6>
    5f4a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    5f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f52:	2200      	movs	r2, #0
    5f54:	701a      	strb	r2, [r3, #0]
    5f56:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    5f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f5e:	781b      	ldrb	r3, [r3, #0]
    5f60:	461a      	mov	r2, r3
    5f62:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    5f66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f6a:	2102      	movs	r1, #2
    5f6c:	5499      	strb	r1, [r3, r2]
    5f6e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    5f72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f76:	781b      	ldrb	r3, [r3, #0]
    5f78:	3301      	adds	r3, #1
    5f7a:	b2da      	uxtb	r2, r3
    5f7c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    5f80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f84:	701a      	strb	r2, [r3, #0]
    5f86:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    5f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f8e:	781b      	ldrb	r3, [r3, #0]
    5f90:	2bff      	cmp	r3, #255	; 0xff
    5f92:	d105      	bne.n	5fa0 <ground_calibrate+0x140>
    5f94:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    5f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f9c:	2200      	movs	r2, #0
    5f9e:	701a      	strb	r2, [r3, #0]
    5fa0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    5fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fa8:	2202      	movs	r2, #2
    5faa:	701a      	strb	r2, [r3, #0]
    5fac:	f64a 73ee 	movw	r3, #45038	; 0xafee
    5fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fb4:	2202      	movs	r2, #2
    5fb6:	701a      	strb	r2, [r3, #0]
    5fb8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    5fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fc0:	781b      	ldrb	r3, [r3, #0]
    5fc2:	461a      	mov	r2, r3
    5fc4:	f64a 73ed 	movw	r3, #45037	; 0xafed
    5fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fcc:	7819      	ldrb	r1, [r3, #0]
    5fce:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    5fd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fd6:	5499      	strb	r1, [r3, r2]
    5fd8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    5fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fe0:	781b      	ldrb	r3, [r3, #0]
    5fe2:	3301      	adds	r3, #1
    5fe4:	b2da      	uxtb	r2, r3
    5fe6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    5fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fee:	701a      	strb	r2, [r3, #0]
    5ff0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    5ff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ff8:	781b      	ldrb	r3, [r3, #0]
    5ffa:	2bff      	cmp	r3, #255	; 0xff
    5ffc:	d105      	bne.n	600a <ground_calibrate+0x1aa>
    5ffe:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6002:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6006:	2200      	movs	r2, #0
    6008:	701a      	strb	r2, [r3, #0]
    600a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    600e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6012:	781b      	ldrb	r3, [r3, #0]
    6014:	461a      	mov	r2, r3
    6016:	f64a 73ee 	movw	r3, #45038	; 0xafee
    601a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    601e:	7819      	ldrb	r1, [r3, #0]
    6020:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    6024:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6028:	5499      	strb	r1, [r3, r2]
    602a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    602e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6032:	781b      	ldrb	r3, [r3, #0]
    6034:	3301      	adds	r3, #1
    6036:	b2da      	uxtb	r2, r3
    6038:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    603c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6040:	701a      	strb	r2, [r3, #0]
    6042:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6046:	f2c2 0300 	movt	r3, #8192	; 0x2000
    604a:	781b      	ldrb	r3, [r3, #0]
    604c:	2bff      	cmp	r3, #255	; 0xff
    604e:	d105      	bne.n	605c <ground_calibrate+0x1fc>
    6050:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6054:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6058:	2200      	movs	r2, #0
    605a:	701a      	strb	r2, [r3, #0]
    605c:	f242 0339 	movw	r3, #8249	; 0x2039
    6060:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6064:	781b      	ldrb	r3, [r3, #0]
    6066:	b2db      	uxtb	r3, r3
    6068:	f003 0310 	and.w	r3, r3, #16
    606c:	2b00      	cmp	r3, #0
    606e:	f041 804e 	bne.w	710e <ground_calibrate+0x12ae>
    6072:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    6076:	f2c2 0300 	movt	r3, #8192	; 0x2000
    607a:	781b      	ldrb	r3, [r3, #0]
    607c:	b2db      	uxtb	r3, r3
    607e:	461a      	mov	r2, r3
    6080:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    6084:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6088:	5c9a      	ldrb	r2, [r3, r2]
    608a:	f64a 73eb 	movw	r3, #45035	; 0xafeb
    608e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6092:	701a      	strb	r2, [r3, #0]
    6094:	f64a 73ec 	movw	r3, #45036	; 0xafec
    6098:	f2c2 0300 	movt	r3, #8192	; 0x2000
    609c:	2200      	movs	r2, #0
    609e:	701a      	strb	r2, [r3, #0]
    60a0:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    60a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60a8:	781b      	ldrb	r3, [r3, #0]
    60aa:	b2db      	uxtb	r3, r3
    60ac:	3301      	adds	r3, #1
    60ae:	b2da      	uxtb	r2, r3
    60b0:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    60b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60b8:	701a      	strb	r2, [r3, #0]
    60ba:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    60be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60c2:	781b      	ldrb	r3, [r3, #0]
    60c4:	b2db      	uxtb	r3, r3
    60c6:	2bff      	cmp	r3, #255	; 0xff
    60c8:	d105      	bne.n	60d6 <ground_calibrate+0x276>
    60ca:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    60ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60d2:	2200      	movs	r2, #0
    60d4:	701a      	strb	r2, [r3, #0]
    60d6:	f242 0338 	movw	r3, #8248	; 0x2038
    60da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60de:	f242 0238 	movw	r2, #8248	; 0x2038
    60e2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    60e6:	7812      	ldrb	r2, [r2, #0]
    60e8:	b2d2      	uxtb	r2, r2
    60ea:	f042 0201 	orr.w	r2, r2, #1
    60ee:	b2d2      	uxtb	r2, r2
    60f0:	701a      	strb	r2, [r3, #0]
    60f2:	f242 0339 	movw	r3, #8249	; 0x2039
    60f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60fa:	f242 0239 	movw	r2, #8249	; 0x2039
    60fe:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6102:	7812      	ldrb	r2, [r2, #0]
    6104:	b2d2      	uxtb	r2, r2
    6106:	f042 0210 	orr.w	r2, r2, #16
    610a:	b2d2      	uxtb	r2, r2
    610c:	701a      	strb	r2, [r3, #0]
    610e:	f000 bffe 	b.w	710e <ground_calibrate+0x12ae>
    6112:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    6116:	f2c2 0300 	movt	r3, #8192	; 0x2000
    611a:	781b      	ldrb	r3, [r3, #0]
    611c:	3301      	adds	r3, #1
    611e:	b2da      	uxtb	r2, r3
    6120:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    6124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6128:	701a      	strb	r2, [r3, #0]
    612a:	f000 bff0 	b.w	710e <ground_calibrate+0x12ae>
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    612e:	f64a 63e2 	movw	r3, #44770	; 0xaee2
    6132:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6136:	781b      	ldrb	r3, [r3, #0]
    6138:	2b01      	cmp	r3, #1
    613a:	f040 87e8 	bne.w	710e <ground_calibrate+0x12ae>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    613e:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    6142:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6146:	885b      	ldrh	r3, [r3, #2]
    6148:	b21b      	sxth	r3, r3
    614a:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    614e:	db09      	blt.n	6164 <ground_calibrate+0x304>
    6150:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    6154:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6158:	885b      	ldrh	r3, [r3, #2]
    615a:	b21b      	sxth	r3, r3
    615c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    6160:	f340 87d5 	ble.w	710e <ground_calibrate+0x12ae>
      ir_gain_calib();
    6164:	f00b fcfc 	bl	11b60 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    6168:	f240 33f8 	movw	r3, #1016	; 0x3f8
    616c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6170:	681a      	ldr	r2, [r3, #0]
    6172:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
    6176:	f2c2 0300 	movt	r3, #8192	; 0x2000
    617a:	601a      	str	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    617c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6180:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6184:	781a      	ldrb	r2, [r3, #0]
    6186:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    618a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    618e:	781b      	ldrb	r3, [r3, #0]
    6190:	b2db      	uxtb	r3, r3
    6192:	429a      	cmp	r2, r3
    6194:	d313      	bcc.n	61be <ground_calibrate+0x35e>
    6196:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    619a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    619e:	781b      	ldrb	r3, [r3, #0]
    61a0:	b2db      	uxtb	r3, r3
    61a2:	461a      	mov	r2, r3
    61a4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    61a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61ac:	781b      	ldrb	r3, [r3, #0]
    61ae:	1ad3      	subs	r3, r2, r3
    61b0:	33ff      	adds	r3, #255	; 0xff
    61b2:	2b14      	cmp	r3, #20
    61b4:	bfd4      	ite	le
    61b6:	2300      	movle	r3, #0
    61b8:	2301      	movgt	r3, #1
    61ba:	b2db      	uxtb	r3, r3
    61bc:	e011      	b.n	61e2 <ground_calibrate+0x382>
    61be:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    61c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61c6:	781b      	ldrb	r3, [r3, #0]
    61c8:	b2db      	uxtb	r3, r3
    61ca:	461a      	mov	r2, r3
    61cc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    61d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61d4:	781b      	ldrb	r3, [r3, #0]
    61d6:	1ad3      	subs	r3, r2, r3
    61d8:	2b14      	cmp	r3, #20
    61da:	bfd4      	ite	le
    61dc:	2300      	movle	r3, #0
    61de:	2301      	movgt	r3, #1
    61e0:	b2db      	uxtb	r3, r3
    61e2:	2b00      	cmp	r3, #0
    61e4:	f000 85a6 	beq.w	6d34 <ground_calibrate+0xed4>
    61e8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    61ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61f0:	781b      	ldrb	r3, [r3, #0]
    61f2:	461a      	mov	r2, r3
    61f4:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    61f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61fc:	2105      	movs	r1, #5
    61fe:	5499      	strb	r1, [r3, r2]
    6200:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6204:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6208:	781b      	ldrb	r3, [r3, #0]
    620a:	3301      	adds	r3, #1
    620c:	b2da      	uxtb	r2, r3
    620e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6212:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6216:	701a      	strb	r2, [r3, #0]
    6218:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    621c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6220:	781b      	ldrb	r3, [r3, #0]
    6222:	2bff      	cmp	r3, #255	; 0xff
    6224:	d105      	bne.n	6232 <ground_calibrate+0x3d2>
    6226:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    622a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    622e:	2200      	movs	r2, #0
    6230:	701a      	strb	r2, [r3, #0]
    6232:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6236:	f2c2 0300 	movt	r3, #8192	; 0x2000
    623a:	781b      	ldrb	r3, [r3, #0]
    623c:	461a      	mov	r2, r3
    623e:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    6242:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6246:	2105      	movs	r1, #5
    6248:	5499      	strb	r1, [r3, r2]
    624a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    624e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6252:	781b      	ldrb	r3, [r3, #0]
    6254:	3301      	adds	r3, #1
    6256:	b2da      	uxtb	r2, r3
    6258:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    625c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6260:	701a      	strb	r2, [r3, #0]
    6262:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6266:	f2c2 0300 	movt	r3, #8192	; 0x2000
    626a:	781b      	ldrb	r3, [r3, #0]
    626c:	2bff      	cmp	r3, #255	; 0xff
    626e:	d105      	bne.n	627c <ground_calibrate+0x41c>
    6270:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6278:	2200      	movs	r2, #0
    627a:	701a      	strb	r2, [r3, #0]
    627c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6280:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6284:	2205      	movs	r2, #5
    6286:	701a      	strb	r2, [r3, #0]
    6288:	f64a 73ee 	movw	r3, #45038	; 0xafee
    628c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6290:	2205      	movs	r2, #5
    6292:	701a      	strb	r2, [r3, #0]
    6294:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6298:	f2c2 0300 	movt	r3, #8192	; 0x2000
    629c:	781b      	ldrb	r3, [r3, #0]
    629e:	461a      	mov	r2, r3
    62a0:	f24b 43e0 	movw	r3, #46304	; 0xb4e0
    62a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62a8:	7819      	ldrb	r1, [r3, #0]
    62aa:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    62ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62b2:	5499      	strb	r1, [r3, r2]
    62b4:	f24b 43e0 	movw	r3, #46304	; 0xb4e0
    62b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62bc:	781a      	ldrb	r2, [r3, #0]
    62be:	f64a 73ed 	movw	r3, #45037	; 0xafed
    62c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62c6:	781b      	ldrb	r3, [r3, #0]
    62c8:	4413      	add	r3, r2
    62ca:	b2da      	uxtb	r2, r3
    62cc:	f64a 73ed 	movw	r3, #45037	; 0xafed
    62d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62d4:	701a      	strb	r2, [r3, #0]
    62d6:	f64a 73ee 	movw	r3, #45038	; 0xafee
    62da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62de:	781a      	ldrb	r2, [r3, #0]
    62e0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    62e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62e8:	781b      	ldrb	r3, [r3, #0]
    62ea:	4413      	add	r3, r2
    62ec:	b2da      	uxtb	r2, r3
    62ee:	f64a 73ee 	movw	r3, #45038	; 0xafee
    62f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62f6:	701a      	strb	r2, [r3, #0]
    62f8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    62fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6300:	781b      	ldrb	r3, [r3, #0]
    6302:	3301      	adds	r3, #1
    6304:	b2da      	uxtb	r2, r3
    6306:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    630a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    630e:	701a      	strb	r2, [r3, #0]
    6310:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6314:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6318:	781b      	ldrb	r3, [r3, #0]
    631a:	2bff      	cmp	r3, #255	; 0xff
    631c:	d105      	bne.n	632a <ground_calibrate+0x4ca>
    631e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6322:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6326:	2200      	movs	r2, #0
    6328:	701a      	strb	r2, [r3, #0]
    632a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    632e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6332:	781b      	ldrb	r3, [r3, #0]
    6334:	461a      	mov	r2, r3
    6336:	f24b 43e0 	movw	r3, #46304	; 0xb4e0
    633a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    633e:	7859      	ldrb	r1, [r3, #1]
    6340:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    6344:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6348:	5499      	strb	r1, [r3, r2]
    634a:	4bd2      	ldr	r3, [pc, #840]	; (6694 <ground_calibrate+0x834>)
    634c:	781a      	ldrb	r2, [r3, #0]
    634e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6352:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6356:	781b      	ldrb	r3, [r3, #0]
    6358:	4413      	add	r3, r2
    635a:	b2da      	uxtb	r2, r3
    635c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6360:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6364:	701a      	strb	r2, [r3, #0]
    6366:	f64a 73ee 	movw	r3, #45038	; 0xafee
    636a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    636e:	781a      	ldrb	r2, [r3, #0]
    6370:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6374:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6378:	781b      	ldrb	r3, [r3, #0]
    637a:	4413      	add	r3, r2
    637c:	b2da      	uxtb	r2, r3
    637e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    6382:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6386:	701a      	strb	r2, [r3, #0]
    6388:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    638c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6390:	781b      	ldrb	r3, [r3, #0]
    6392:	3301      	adds	r3, #1
    6394:	b2da      	uxtb	r2, r3
    6396:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    639a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    639e:	701a      	strb	r2, [r3, #0]
    63a0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    63a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63a8:	781b      	ldrb	r3, [r3, #0]
    63aa:	2bff      	cmp	r3, #255	; 0xff
    63ac:	d105      	bne.n	63ba <ground_calibrate+0x55a>
    63ae:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    63b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63b6:	2200      	movs	r2, #0
    63b8:	701a      	strb	r2, [r3, #0]
    63ba:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    63be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63c2:	781b      	ldrb	r3, [r3, #0]
    63c4:	461a      	mov	r2, r3
    63c6:	f24b 43e0 	movw	r3, #46304	; 0xb4e0
    63ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63ce:	7899      	ldrb	r1, [r3, #2]
    63d0:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    63d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63d8:	5499      	strb	r1, [r3, r2]
    63da:	4baf      	ldr	r3, [pc, #700]	; (6698 <ground_calibrate+0x838>)
    63dc:	781a      	ldrb	r2, [r3, #0]
    63de:	f64a 73ed 	movw	r3, #45037	; 0xafed
    63e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63e6:	781b      	ldrb	r3, [r3, #0]
    63e8:	4413      	add	r3, r2
    63ea:	b2da      	uxtb	r2, r3
    63ec:	f64a 73ed 	movw	r3, #45037	; 0xafed
    63f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63f4:	701a      	strb	r2, [r3, #0]
    63f6:	f64a 73ee 	movw	r3, #45038	; 0xafee
    63fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63fe:	781a      	ldrb	r2, [r3, #0]
    6400:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6404:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6408:	781b      	ldrb	r3, [r3, #0]
    640a:	4413      	add	r3, r2
    640c:	b2da      	uxtb	r2, r3
    640e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    6412:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6416:	701a      	strb	r2, [r3, #0]
    6418:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    641c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6420:	781b      	ldrb	r3, [r3, #0]
    6422:	3301      	adds	r3, #1
    6424:	b2da      	uxtb	r2, r3
    6426:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    642a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    642e:	701a      	strb	r2, [r3, #0]
    6430:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6434:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6438:	781b      	ldrb	r3, [r3, #0]
    643a:	2bff      	cmp	r3, #255	; 0xff
    643c:	d105      	bne.n	644a <ground_calibrate+0x5ea>
    643e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6442:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6446:	2200      	movs	r2, #0
    6448:	701a      	strb	r2, [r3, #0]
    644a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    644e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6452:	781b      	ldrb	r3, [r3, #0]
    6454:	461a      	mov	r2, r3
    6456:	f24b 43e0 	movw	r3, #46304	; 0xb4e0
    645a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    645e:	78d9      	ldrb	r1, [r3, #3]
    6460:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    6464:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6468:	5499      	strb	r1, [r3, r2]
    646a:	4b8c      	ldr	r3, [pc, #560]	; (669c <ground_calibrate+0x83c>)
    646c:	781a      	ldrb	r2, [r3, #0]
    646e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6472:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6476:	781b      	ldrb	r3, [r3, #0]
    6478:	4413      	add	r3, r2
    647a:	b2da      	uxtb	r2, r3
    647c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6480:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6484:	701a      	strb	r2, [r3, #0]
    6486:	f64a 73ee 	movw	r3, #45038	; 0xafee
    648a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    648e:	781a      	ldrb	r2, [r3, #0]
    6490:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6494:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6498:	781b      	ldrb	r3, [r3, #0]
    649a:	4413      	add	r3, r2
    649c:	b2da      	uxtb	r2, r3
    649e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    64a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64a6:	701a      	strb	r2, [r3, #0]
    64a8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    64ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64b0:	781b      	ldrb	r3, [r3, #0]
    64b2:	3301      	adds	r3, #1
    64b4:	b2da      	uxtb	r2, r3
    64b6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    64ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64be:	701a      	strb	r2, [r3, #0]
    64c0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    64c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64c8:	781b      	ldrb	r3, [r3, #0]
    64ca:	2bff      	cmp	r3, #255	; 0xff
    64cc:	d105      	bne.n	64da <ground_calibrate+0x67a>
    64ce:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    64d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64d6:	2200      	movs	r2, #0
    64d8:	701a      	strb	r2, [r3, #0]
    64da:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    64de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64e2:	781b      	ldrb	r3, [r3, #0]
    64e4:	461a      	mov	r2, r3
    64e6:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    64ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64ee:	7819      	ldrb	r1, [r3, #0]
    64f0:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    64f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64f8:	5499      	strb	r1, [r3, r2]
    64fa:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    64fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6502:	781a      	ldrb	r2, [r3, #0]
    6504:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6508:	f2c2 0300 	movt	r3, #8192	; 0x2000
    650c:	781b      	ldrb	r3, [r3, #0]
    650e:	4413      	add	r3, r2
    6510:	b2da      	uxtb	r2, r3
    6512:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    651a:	701a      	strb	r2, [r3, #0]
    651c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    6520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6524:	781a      	ldrb	r2, [r3, #0]
    6526:	f64a 73ed 	movw	r3, #45037	; 0xafed
    652a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    652e:	781b      	ldrb	r3, [r3, #0]
    6530:	4413      	add	r3, r2
    6532:	b2da      	uxtb	r2, r3
    6534:	f64a 73ee 	movw	r3, #45038	; 0xafee
    6538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    653c:	701a      	strb	r2, [r3, #0]
    653e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6542:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6546:	781b      	ldrb	r3, [r3, #0]
    6548:	3301      	adds	r3, #1
    654a:	b2da      	uxtb	r2, r3
    654c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6550:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6554:	701a      	strb	r2, [r3, #0]
    6556:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    655a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    655e:	781b      	ldrb	r3, [r3, #0]
    6560:	2bff      	cmp	r3, #255	; 0xff
    6562:	d105      	bne.n	6570 <ground_calibrate+0x710>
    6564:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6568:	f2c2 0300 	movt	r3, #8192	; 0x2000
    656c:	2200      	movs	r2, #0
    656e:	701a      	strb	r2, [r3, #0]
    6570:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6574:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6578:	781b      	ldrb	r3, [r3, #0]
    657a:	461a      	mov	r2, r3
    657c:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    6580:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6584:	7859      	ldrb	r1, [r3, #1]
    6586:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    658a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    658e:	5499      	strb	r1, [r3, r2]
    6590:	4b43      	ldr	r3, [pc, #268]	; (66a0 <ground_calibrate+0x840>)
    6592:	781a      	ldrb	r2, [r3, #0]
    6594:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6598:	f2c2 0300 	movt	r3, #8192	; 0x2000
    659c:	781b      	ldrb	r3, [r3, #0]
    659e:	4413      	add	r3, r2
    65a0:	b2da      	uxtb	r2, r3
    65a2:	f64a 73ed 	movw	r3, #45037	; 0xafed
    65a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65aa:	701a      	strb	r2, [r3, #0]
    65ac:	f64a 73ee 	movw	r3, #45038	; 0xafee
    65b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65b4:	781a      	ldrb	r2, [r3, #0]
    65b6:	f64a 73ed 	movw	r3, #45037	; 0xafed
    65ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65be:	781b      	ldrb	r3, [r3, #0]
    65c0:	4413      	add	r3, r2
    65c2:	b2da      	uxtb	r2, r3
    65c4:	f64a 73ee 	movw	r3, #45038	; 0xafee
    65c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65cc:	701a      	strb	r2, [r3, #0]
    65ce:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    65d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65d6:	781b      	ldrb	r3, [r3, #0]
    65d8:	3301      	adds	r3, #1
    65da:	b2da      	uxtb	r2, r3
    65dc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    65e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65e4:	701a      	strb	r2, [r3, #0]
    65e6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    65ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65ee:	781b      	ldrb	r3, [r3, #0]
    65f0:	2bff      	cmp	r3, #255	; 0xff
    65f2:	d105      	bne.n	6600 <ground_calibrate+0x7a0>
    65f4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    65f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    65fc:	2200      	movs	r2, #0
    65fe:	701a      	strb	r2, [r3, #0]
    6600:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6604:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6608:	781b      	ldrb	r3, [r3, #0]
    660a:	461a      	mov	r2, r3
    660c:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    6610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6614:	7899      	ldrb	r1, [r3, #2]
    6616:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    661a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    661e:	5499      	strb	r1, [r3, r2]
    6620:	4b20      	ldr	r3, [pc, #128]	; (66a4 <ground_calibrate+0x844>)
    6622:	781a      	ldrb	r2, [r3, #0]
    6624:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    662c:	781b      	ldrb	r3, [r3, #0]
    662e:	4413      	add	r3, r2
    6630:	b2da      	uxtb	r2, r3
    6632:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6636:	f2c2 0300 	movt	r3, #8192	; 0x2000
    663a:	701a      	strb	r2, [r3, #0]
    663c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    6640:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6644:	781a      	ldrb	r2, [r3, #0]
    6646:	f64a 73ed 	movw	r3, #45037	; 0xafed
    664a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    664e:	781b      	ldrb	r3, [r3, #0]
    6650:	4413      	add	r3, r2
    6652:	b2da      	uxtb	r2, r3
    6654:	f64a 73ee 	movw	r3, #45038	; 0xafee
    6658:	f2c2 0300 	movt	r3, #8192	; 0x2000
    665c:	701a      	strb	r2, [r3, #0]
    665e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6666:	781b      	ldrb	r3, [r3, #0]
    6668:	3301      	adds	r3, #1
    666a:	b2da      	uxtb	r2, r3
    666c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6670:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6674:	701a      	strb	r2, [r3, #0]
    6676:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    667a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    667e:	781b      	ldrb	r3, [r3, #0]
    6680:	2bff      	cmp	r3, #255	; 0xff
    6682:	d111      	bne.n	66a8 <ground_calibrate+0x848>
    6684:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6688:	f2c2 0300 	movt	r3, #8192	; 0x2000
    668c:	2200      	movs	r2, #0
    668e:	701a      	strb	r2, [r3, #0]
    6690:	e00a      	b.n	66a8 <ground_calibrate+0x848>
    6692:	bf00      	nop
    6694:	2000b4e1 	.word	0x2000b4e1
    6698:	2000b4e2 	.word	0x2000b4e2
    669c:	2000b4e3 	.word	0x2000b4e3
    66a0:	2000b4e5 	.word	0x2000b4e5
    66a4:	2000b4e6 	.word	0x2000b4e6
    66a8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    66ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66b0:	781b      	ldrb	r3, [r3, #0]
    66b2:	461a      	mov	r2, r3
    66b4:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    66b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66bc:	78d9      	ldrb	r1, [r3, #3]
    66be:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    66c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66c6:	5499      	strb	r1, [r3, r2]
    66c8:	4bd3      	ldr	r3, [pc, #844]	; (6a18 <ground_calibrate+0xbb8>)
    66ca:	781a      	ldrb	r2, [r3, #0]
    66cc:	f64a 73ed 	movw	r3, #45037	; 0xafed
    66d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66d4:	781b      	ldrb	r3, [r3, #0]
    66d6:	4413      	add	r3, r2
    66d8:	b2da      	uxtb	r2, r3
    66da:	f64a 73ed 	movw	r3, #45037	; 0xafed
    66de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66e2:	701a      	strb	r2, [r3, #0]
    66e4:	f64a 73ee 	movw	r3, #45038	; 0xafee
    66e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66ec:	781a      	ldrb	r2, [r3, #0]
    66ee:	f64a 73ed 	movw	r3, #45037	; 0xafed
    66f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    66f6:	781b      	ldrb	r3, [r3, #0]
    66f8:	4413      	add	r3, r2
    66fa:	b2da      	uxtb	r2, r3
    66fc:	f64a 73ee 	movw	r3, #45038	; 0xafee
    6700:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6704:	701a      	strb	r2, [r3, #0]
    6706:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    670a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    670e:	781b      	ldrb	r3, [r3, #0]
    6710:	3301      	adds	r3, #1
    6712:	b2da      	uxtb	r2, r3
    6714:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6718:	f2c2 0300 	movt	r3, #8192	; 0x2000
    671c:	701a      	strb	r2, [r3, #0]
    671e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6722:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6726:	781b      	ldrb	r3, [r3, #0]
    6728:	2bff      	cmp	r3, #255	; 0xff
    672a:	d105      	bne.n	6738 <ground_calibrate+0x8d8>
    672c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6730:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6734:	2200      	movs	r2, #0
    6736:	701a      	strb	r2, [r3, #0]
    6738:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    673c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6740:	781b      	ldrb	r3, [r3, #0]
    6742:	461a      	mov	r2, r3
    6744:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
    6748:	f2c2 0300 	movt	r3, #8192	; 0x2000
    674c:	7819      	ldrb	r1, [r3, #0]
    674e:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    6752:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6756:	5499      	strb	r1, [r3, r2]
    6758:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
    675c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6760:	781a      	ldrb	r2, [r3, #0]
    6762:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6766:	f2c2 0300 	movt	r3, #8192	; 0x2000
    676a:	781b      	ldrb	r3, [r3, #0]
    676c:	4413      	add	r3, r2
    676e:	b2da      	uxtb	r2, r3
    6770:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6774:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6778:	701a      	strb	r2, [r3, #0]
    677a:	f64a 73ee 	movw	r3, #45038	; 0xafee
    677e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6782:	781a      	ldrb	r2, [r3, #0]
    6784:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6788:	f2c2 0300 	movt	r3, #8192	; 0x2000
    678c:	781b      	ldrb	r3, [r3, #0]
    678e:	4413      	add	r3, r2
    6790:	b2da      	uxtb	r2, r3
    6792:	f64a 73ee 	movw	r3, #45038	; 0xafee
    6796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    679a:	701a      	strb	r2, [r3, #0]
    679c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    67a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67a4:	781b      	ldrb	r3, [r3, #0]
    67a6:	3301      	adds	r3, #1
    67a8:	b2da      	uxtb	r2, r3
    67aa:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    67ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67b2:	701a      	strb	r2, [r3, #0]
    67b4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    67b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67bc:	781b      	ldrb	r3, [r3, #0]
    67be:	2bff      	cmp	r3, #255	; 0xff
    67c0:	d105      	bne.n	67ce <ground_calibrate+0x96e>
    67c2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    67c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67ca:	2200      	movs	r2, #0
    67cc:	701a      	strb	r2, [r3, #0]
    67ce:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    67d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67d6:	781b      	ldrb	r3, [r3, #0]
    67d8:	461a      	mov	r2, r3
    67da:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
    67de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67e2:	7859      	ldrb	r1, [r3, #1]
    67e4:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    67e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67ec:	5499      	strb	r1, [r3, r2]
    67ee:	4b8b      	ldr	r3, [pc, #556]	; (6a1c <ground_calibrate+0xbbc>)
    67f0:	781a      	ldrb	r2, [r3, #0]
    67f2:	f64a 73ed 	movw	r3, #45037	; 0xafed
    67f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    67fa:	781b      	ldrb	r3, [r3, #0]
    67fc:	4413      	add	r3, r2
    67fe:	b2da      	uxtb	r2, r3
    6800:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6804:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6808:	701a      	strb	r2, [r3, #0]
    680a:	f64a 73ee 	movw	r3, #45038	; 0xafee
    680e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6812:	781a      	ldrb	r2, [r3, #0]
    6814:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6818:	f2c2 0300 	movt	r3, #8192	; 0x2000
    681c:	781b      	ldrb	r3, [r3, #0]
    681e:	4413      	add	r3, r2
    6820:	b2da      	uxtb	r2, r3
    6822:	f64a 73ee 	movw	r3, #45038	; 0xafee
    6826:	f2c2 0300 	movt	r3, #8192	; 0x2000
    682a:	701a      	strb	r2, [r3, #0]
    682c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6830:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6834:	781b      	ldrb	r3, [r3, #0]
    6836:	3301      	adds	r3, #1
    6838:	b2da      	uxtb	r2, r3
    683a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    683e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6842:	701a      	strb	r2, [r3, #0]
    6844:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6848:	f2c2 0300 	movt	r3, #8192	; 0x2000
    684c:	781b      	ldrb	r3, [r3, #0]
    684e:	2bff      	cmp	r3, #255	; 0xff
    6850:	d105      	bne.n	685e <ground_calibrate+0x9fe>
    6852:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6856:	f2c2 0300 	movt	r3, #8192	; 0x2000
    685a:	2200      	movs	r2, #0
    685c:	701a      	strb	r2, [r3, #0]
    685e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6862:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6866:	781b      	ldrb	r3, [r3, #0]
    6868:	461a      	mov	r2, r3
    686a:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
    686e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6872:	7899      	ldrb	r1, [r3, #2]
    6874:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    6878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    687c:	5499      	strb	r1, [r3, r2]
    687e:	4b68      	ldr	r3, [pc, #416]	; (6a20 <ground_calibrate+0xbc0>)
    6880:	781a      	ldrb	r2, [r3, #0]
    6882:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6886:	f2c2 0300 	movt	r3, #8192	; 0x2000
    688a:	781b      	ldrb	r3, [r3, #0]
    688c:	4413      	add	r3, r2
    688e:	b2da      	uxtb	r2, r3
    6890:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6898:	701a      	strb	r2, [r3, #0]
    689a:	f64a 73ee 	movw	r3, #45038	; 0xafee
    689e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68a2:	781a      	ldrb	r2, [r3, #0]
    68a4:	f64a 73ed 	movw	r3, #45037	; 0xafed
    68a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68ac:	781b      	ldrb	r3, [r3, #0]
    68ae:	4413      	add	r3, r2
    68b0:	b2da      	uxtb	r2, r3
    68b2:	f64a 73ee 	movw	r3, #45038	; 0xafee
    68b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68ba:	701a      	strb	r2, [r3, #0]
    68bc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    68c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68c4:	781b      	ldrb	r3, [r3, #0]
    68c6:	3301      	adds	r3, #1
    68c8:	b2da      	uxtb	r2, r3
    68ca:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    68ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68d2:	701a      	strb	r2, [r3, #0]
    68d4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    68d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68dc:	781b      	ldrb	r3, [r3, #0]
    68de:	2bff      	cmp	r3, #255	; 0xff
    68e0:	d105      	bne.n	68ee <ground_calibrate+0xa8e>
    68e2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    68e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68ea:	2200      	movs	r2, #0
    68ec:	701a      	strb	r2, [r3, #0]
    68ee:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    68f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    68f6:	781b      	ldrb	r3, [r3, #0]
    68f8:	461a      	mov	r2, r3
    68fa:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
    68fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6902:	78d9      	ldrb	r1, [r3, #3]
    6904:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    6908:	f2c2 0300 	movt	r3, #8192	; 0x2000
    690c:	5499      	strb	r1, [r3, r2]
    690e:	4b45      	ldr	r3, [pc, #276]	; (6a24 <ground_calibrate+0xbc4>)
    6910:	781a      	ldrb	r2, [r3, #0]
    6912:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6916:	f2c2 0300 	movt	r3, #8192	; 0x2000
    691a:	781b      	ldrb	r3, [r3, #0]
    691c:	4413      	add	r3, r2
    691e:	b2da      	uxtb	r2, r3
    6920:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6924:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6928:	701a      	strb	r2, [r3, #0]
    692a:	f64a 73ee 	movw	r3, #45038	; 0xafee
    692e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6932:	781a      	ldrb	r2, [r3, #0]
    6934:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6938:	f2c2 0300 	movt	r3, #8192	; 0x2000
    693c:	781b      	ldrb	r3, [r3, #0]
    693e:	4413      	add	r3, r2
    6940:	b2da      	uxtb	r2, r3
    6942:	f64a 73ee 	movw	r3, #45038	; 0xafee
    6946:	f2c2 0300 	movt	r3, #8192	; 0x2000
    694a:	701a      	strb	r2, [r3, #0]
    694c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6950:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6954:	781b      	ldrb	r3, [r3, #0]
    6956:	3301      	adds	r3, #1
    6958:	b2da      	uxtb	r2, r3
    695a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    695e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6962:	701a      	strb	r2, [r3, #0]
    6964:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6968:	f2c2 0300 	movt	r3, #8192	; 0x2000
    696c:	781b      	ldrb	r3, [r3, #0]
    696e:	2bff      	cmp	r3, #255	; 0xff
    6970:	d105      	bne.n	697e <ground_calibrate+0xb1e>
    6972:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6976:	f2c2 0300 	movt	r3, #8192	; 0x2000
    697a:	2200      	movs	r2, #0
    697c:	701a      	strb	r2, [r3, #0]
    697e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6982:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6986:	781b      	ldrb	r3, [r3, #0]
    6988:	461a      	mov	r2, r3
    698a:	f240 33f2 	movw	r3, #1010	; 0x3f2
    698e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6992:	7819      	ldrb	r1, [r3, #0]
    6994:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    6998:	f2c2 0300 	movt	r3, #8192	; 0x2000
    699c:	5499      	strb	r1, [r3, r2]
    699e:	f240 33f2 	movw	r3, #1010	; 0x3f2
    69a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69a6:	781a      	ldrb	r2, [r3, #0]
    69a8:	f64a 73ed 	movw	r3, #45037	; 0xafed
    69ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69b0:	781b      	ldrb	r3, [r3, #0]
    69b2:	4413      	add	r3, r2
    69b4:	b2da      	uxtb	r2, r3
    69b6:	f64a 73ed 	movw	r3, #45037	; 0xafed
    69ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69be:	701a      	strb	r2, [r3, #0]
    69c0:	f64a 73ee 	movw	r3, #45038	; 0xafee
    69c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69c8:	781a      	ldrb	r2, [r3, #0]
    69ca:	f64a 73ed 	movw	r3, #45037	; 0xafed
    69ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69d2:	781b      	ldrb	r3, [r3, #0]
    69d4:	4413      	add	r3, r2
    69d6:	b2da      	uxtb	r2, r3
    69d8:	f64a 73ee 	movw	r3, #45038	; 0xafee
    69dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69e0:	701a      	strb	r2, [r3, #0]
    69e2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    69e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69ea:	781b      	ldrb	r3, [r3, #0]
    69ec:	3301      	adds	r3, #1
    69ee:	b2da      	uxtb	r2, r3
    69f0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    69f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    69f8:	701a      	strb	r2, [r3, #0]
    69fa:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    69fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a02:	781b      	ldrb	r3, [r3, #0]
    6a04:	2bff      	cmp	r3, #255	; 0xff
    6a06:	d10f      	bne.n	6a28 <ground_calibrate+0xbc8>
    6a08:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a10:	2200      	movs	r2, #0
    6a12:	701a      	strb	r2, [r3, #0]
    6a14:	e008      	b.n	6a28 <ground_calibrate+0xbc8>
    6a16:	bf00      	nop
    6a18:	2000b4e7 	.word	0x2000b4e7
    6a1c:	2000b4dd 	.word	0x2000b4dd
    6a20:	2000b4de 	.word	0x2000b4de
    6a24:	2000b4df 	.word	0x2000b4df
    6a28:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a30:	781b      	ldrb	r3, [r3, #0]
    6a32:	461a      	mov	r2, r3
    6a34:	f240 33f2 	movw	r3, #1010	; 0x3f2
    6a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a3c:	7859      	ldrb	r1, [r3, #1]
    6a3e:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    6a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a46:	5499      	strb	r1, [r3, r2]
    6a48:	4bd4      	ldr	r3, [pc, #848]	; (6d9c <ground_calibrate+0xf3c>)
    6a4a:	781a      	ldrb	r2, [r3, #0]
    6a4c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6a50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a54:	781b      	ldrb	r3, [r3, #0]
    6a56:	4413      	add	r3, r2
    6a58:	b2da      	uxtb	r2, r3
    6a5a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a62:	701a      	strb	r2, [r3, #0]
    6a64:	f64a 73ee 	movw	r3, #45038	; 0xafee
    6a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a6c:	781a      	ldrb	r2, [r3, #0]
    6a6e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6a72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a76:	781b      	ldrb	r3, [r3, #0]
    6a78:	4413      	add	r3, r2
    6a7a:	b2da      	uxtb	r2, r3
    6a7c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    6a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a84:	701a      	strb	r2, [r3, #0]
    6a86:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6a8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a8e:	781b      	ldrb	r3, [r3, #0]
    6a90:	3301      	adds	r3, #1
    6a92:	b2da      	uxtb	r2, r3
    6a94:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6a98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6a9c:	701a      	strb	r2, [r3, #0]
    6a9e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6aa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6aa6:	781b      	ldrb	r3, [r3, #0]
    6aa8:	2bff      	cmp	r3, #255	; 0xff
    6aaa:	d105      	bne.n	6ab8 <ground_calibrate+0xc58>
    6aac:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ab4:	2200      	movs	r2, #0
    6ab6:	701a      	strb	r2, [r3, #0]
    6ab8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ac0:	781b      	ldrb	r3, [r3, #0]
    6ac2:	461a      	mov	r2, r3
    6ac4:	f240 33f4 	movw	r3, #1012	; 0x3f4
    6ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6acc:	7819      	ldrb	r1, [r3, #0]
    6ace:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    6ad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ad6:	5499      	strb	r1, [r3, r2]
    6ad8:	f240 33f4 	movw	r3, #1012	; 0x3f4
    6adc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ae0:	781a      	ldrb	r2, [r3, #0]
    6ae2:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6ae6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6aea:	781b      	ldrb	r3, [r3, #0]
    6aec:	4413      	add	r3, r2
    6aee:	b2da      	uxtb	r2, r3
    6af0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6af8:	701a      	strb	r2, [r3, #0]
    6afa:	f64a 73ee 	movw	r3, #45038	; 0xafee
    6afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b02:	781a      	ldrb	r2, [r3, #0]
    6b04:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6b08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b0c:	781b      	ldrb	r3, [r3, #0]
    6b0e:	4413      	add	r3, r2
    6b10:	b2da      	uxtb	r2, r3
    6b12:	f64a 73ee 	movw	r3, #45038	; 0xafee
    6b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b1a:	701a      	strb	r2, [r3, #0]
    6b1c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6b20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b24:	781b      	ldrb	r3, [r3, #0]
    6b26:	3301      	adds	r3, #1
    6b28:	b2da      	uxtb	r2, r3
    6b2a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6b2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b32:	701a      	strb	r2, [r3, #0]
    6b34:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6b38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b3c:	781b      	ldrb	r3, [r3, #0]
    6b3e:	2bff      	cmp	r3, #255	; 0xff
    6b40:	d105      	bne.n	6b4e <ground_calibrate+0xcee>
    6b42:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b4a:	2200      	movs	r2, #0
    6b4c:	701a      	strb	r2, [r3, #0]
    6b4e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b56:	781b      	ldrb	r3, [r3, #0]
    6b58:	461a      	mov	r2, r3
    6b5a:	f240 33f4 	movw	r3, #1012	; 0x3f4
    6b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b62:	7859      	ldrb	r1, [r3, #1]
    6b64:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    6b68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b6c:	5499      	strb	r1, [r3, r2]
    6b6e:	4b8c      	ldr	r3, [pc, #560]	; (6da0 <ground_calibrate+0xf40>)
    6b70:	781a      	ldrb	r2, [r3, #0]
    6b72:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6b76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b7a:	781b      	ldrb	r3, [r3, #0]
    6b7c:	4413      	add	r3, r2
    6b7e:	b2da      	uxtb	r2, r3
    6b80:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b88:	701a      	strb	r2, [r3, #0]
    6b8a:	f64a 73ee 	movw	r3, #45038	; 0xafee
    6b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b92:	781a      	ldrb	r2, [r3, #0]
    6b94:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b9c:	781b      	ldrb	r3, [r3, #0]
    6b9e:	4413      	add	r3, r2
    6ba0:	b2da      	uxtb	r2, r3
    6ba2:	f64a 73ee 	movw	r3, #45038	; 0xafee
    6ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6baa:	701a      	strb	r2, [r3, #0]
    6bac:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6bb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bb4:	781b      	ldrb	r3, [r3, #0]
    6bb6:	3301      	adds	r3, #1
    6bb8:	b2da      	uxtb	r2, r3
    6bba:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bc2:	701a      	strb	r2, [r3, #0]
    6bc4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6bc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bcc:	781b      	ldrb	r3, [r3, #0]
    6bce:	2bff      	cmp	r3, #255	; 0xff
    6bd0:	d105      	bne.n	6bde <ground_calibrate+0xd7e>
    6bd2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6bd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bda:	2200      	movs	r2, #0
    6bdc:	701a      	strb	r2, [r3, #0]
    6bde:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6be2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6be6:	781b      	ldrb	r3, [r3, #0]
    6be8:	461a      	mov	r2, r3
    6bea:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6bee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bf2:	7819      	ldrb	r1, [r3, #0]
    6bf4:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    6bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bfc:	5499      	strb	r1, [r3, r2]
    6bfe:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c06:	781b      	ldrb	r3, [r3, #0]
    6c08:	3301      	adds	r3, #1
    6c0a:	b2da      	uxtb	r2, r3
    6c0c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c14:	701a      	strb	r2, [r3, #0]
    6c16:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6c1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c1e:	781b      	ldrb	r3, [r3, #0]
    6c20:	2bff      	cmp	r3, #255	; 0xff
    6c22:	d105      	bne.n	6c30 <ground_calibrate+0xdd0>
    6c24:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6c28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c2c:	2200      	movs	r2, #0
    6c2e:	701a      	strb	r2, [r3, #0]
    6c30:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6c34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c38:	781b      	ldrb	r3, [r3, #0]
    6c3a:	461a      	mov	r2, r3
    6c3c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    6c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c44:	7819      	ldrb	r1, [r3, #0]
    6c46:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    6c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c4e:	5499      	strb	r1, [r3, r2]
    6c50:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c58:	781b      	ldrb	r3, [r3, #0]
    6c5a:	3301      	adds	r3, #1
    6c5c:	b2da      	uxtb	r2, r3
    6c5e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6c62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c66:	701a      	strb	r2, [r3, #0]
    6c68:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6c6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c70:	781b      	ldrb	r3, [r3, #0]
    6c72:	2bff      	cmp	r3, #255	; 0xff
    6c74:	d105      	bne.n	6c82 <ground_calibrate+0xe22>
    6c76:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6c7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c7e:	2200      	movs	r2, #0
    6c80:	701a      	strb	r2, [r3, #0]
    6c82:	f242 0339 	movw	r3, #8249	; 0x2039
    6c86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c8a:	781b      	ldrb	r3, [r3, #0]
    6c8c:	b2db      	uxtb	r3, r3
    6c8e:	f003 0310 	and.w	r3, r3, #16
    6c92:	2b00      	cmp	r3, #0
    6c94:	d15a      	bne.n	6d4c <ground_calibrate+0xeec>
    6c96:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    6c9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c9e:	781b      	ldrb	r3, [r3, #0]
    6ca0:	b2db      	uxtb	r3, r3
    6ca2:	461a      	mov	r2, r3
    6ca4:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    6ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cac:	5c9a      	ldrb	r2, [r3, r2]
    6cae:	f64a 73eb 	movw	r3, #45035	; 0xafeb
    6cb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cb6:	701a      	strb	r2, [r3, #0]
    6cb8:	f64a 73ec 	movw	r3, #45036	; 0xafec
    6cbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cc0:	2200      	movs	r2, #0
    6cc2:	701a      	strb	r2, [r3, #0]
    6cc4:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    6cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ccc:	781b      	ldrb	r3, [r3, #0]
    6cce:	b2db      	uxtb	r3, r3
    6cd0:	3301      	adds	r3, #1
    6cd2:	b2da      	uxtb	r2, r3
    6cd4:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    6cd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cdc:	701a      	strb	r2, [r3, #0]
    6cde:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    6ce2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ce6:	781b      	ldrb	r3, [r3, #0]
    6ce8:	b2db      	uxtb	r3, r3
    6cea:	2bff      	cmp	r3, #255	; 0xff
    6cec:	d105      	bne.n	6cfa <ground_calibrate+0xe9a>
    6cee:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    6cf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cf6:	2200      	movs	r2, #0
    6cf8:	701a      	strb	r2, [r3, #0]
    6cfa:	f242 0338 	movw	r3, #8248	; 0x2038
    6cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d02:	f242 0238 	movw	r2, #8248	; 0x2038
    6d06:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6d0a:	7812      	ldrb	r2, [r2, #0]
    6d0c:	b2d2      	uxtb	r2, r2
    6d0e:	f042 0201 	orr.w	r2, r2, #1
    6d12:	b2d2      	uxtb	r2, r2
    6d14:	701a      	strb	r2, [r3, #0]
    6d16:	f242 0339 	movw	r3, #8249	; 0x2039
    6d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d1e:	f242 0239 	movw	r2, #8249	; 0x2039
    6d22:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6d26:	7812      	ldrb	r2, [r2, #0]
    6d28:	b2d2      	uxtb	r2, r2
    6d2a:	f042 0210 	orr.w	r2, r2, #16
    6d2e:	b2d2      	uxtb	r2, r2
    6d30:	701a      	strb	r2, [r3, #0]
    6d32:	e00b      	b.n	6d4c <ground_calibrate+0xeec>
    6d34:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    6d38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d3c:	781b      	ldrb	r3, [r3, #0]
    6d3e:	3301      	adds	r3, #1
    6d40:	b2da      	uxtb	r2, r3
    6d42:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    6d46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d4a:	701a      	strb	r2, [r3, #0]
      calib_status = CALIB_DONE;
    6d4c:	f64a 63e2 	movw	r3, #44770	; 0xaee2
    6d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d54:	2202      	movs	r2, #2
    6d56:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_CONTRAST(&ir_contrast);
    6d58:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d60:	781a      	ldrb	r2, [r3, #0]
    6d62:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    6d66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d6a:	781b      	ldrb	r3, [r3, #0]
    6d6c:	b2db      	uxtb	r3, r3
    6d6e:	429a      	cmp	r2, r3
    6d70:	d318      	bcc.n	6da4 <ground_calibrate+0xf44>
    6d72:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    6d76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d7a:	781b      	ldrb	r3, [r3, #0]
    6d7c:	b2db      	uxtb	r3, r3
    6d7e:	461a      	mov	r2, r3
    6d80:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6d84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d88:	781b      	ldrb	r3, [r3, #0]
    6d8a:	1ad3      	subs	r3, r2, r3
    6d8c:	33ff      	adds	r3, #255	; 0xff
    6d8e:	2b06      	cmp	r3, #6
    6d90:	bfd4      	ite	le
    6d92:	2300      	movle	r3, #0
    6d94:	2301      	movgt	r3, #1
    6d96:	b2db      	uxtb	r3, r3
    6d98:	e016      	b.n	6dc8 <ground_calibrate+0xf68>
    6d9a:	bf00      	nop
    6d9c:	200003f3 	.word	0x200003f3
    6da0:	200003f5 	.word	0x200003f5
    6da4:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    6da8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dac:	781b      	ldrb	r3, [r3, #0]
    6dae:	b2db      	uxtb	r3, r3
    6db0:	461a      	mov	r2, r3
    6db2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6db6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dba:	781b      	ldrb	r3, [r3, #0]
    6dbc:	1ad3      	subs	r3, r2, r3
    6dbe:	2b06      	cmp	r3, #6
    6dc0:	bfd4      	ite	le
    6dc2:	2300      	movle	r3, #0
    6dc4:	2301      	movgt	r3, #1
    6dc6:	b2db      	uxtb	r3, r3
    6dc8:	2b00      	cmp	r3, #0
    6dca:	f000 8194 	beq.w	70f6 <ground_calibrate+0x1296>
    6dce:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dd6:	781b      	ldrb	r3, [r3, #0]
    6dd8:	461a      	mov	r2, r3
    6dda:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    6dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6de2:	2105      	movs	r1, #5
    6de4:	5499      	strb	r1, [r3, r2]
    6de6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dee:	781b      	ldrb	r3, [r3, #0]
    6df0:	3301      	adds	r3, #1
    6df2:	b2da      	uxtb	r2, r3
    6df4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6df8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dfc:	701a      	strb	r2, [r3, #0]
    6dfe:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e06:	781b      	ldrb	r3, [r3, #0]
    6e08:	2bff      	cmp	r3, #255	; 0xff
    6e0a:	d105      	bne.n	6e18 <ground_calibrate+0xfb8>
    6e0c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6e10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e14:	2200      	movs	r2, #0
    6e16:	701a      	strb	r2, [r3, #0]
    6e18:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6e1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e20:	781b      	ldrb	r3, [r3, #0]
    6e22:	461a      	mov	r2, r3
    6e24:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    6e28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e2c:	2103      	movs	r1, #3
    6e2e:	5499      	strb	r1, [r3, r2]
    6e30:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6e34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e38:	781b      	ldrb	r3, [r3, #0]
    6e3a:	3301      	adds	r3, #1
    6e3c:	b2da      	uxtb	r2, r3
    6e3e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e46:	701a      	strb	r2, [r3, #0]
    6e48:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e50:	781b      	ldrb	r3, [r3, #0]
    6e52:	2bff      	cmp	r3, #255	; 0xff
    6e54:	d105      	bne.n	6e62 <ground_calibrate+0x1002>
    6e56:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e5e:	2200      	movs	r2, #0
    6e60:	701a      	strb	r2, [r3, #0]
    6e62:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e6a:	2203      	movs	r2, #3
    6e6c:	701a      	strb	r2, [r3, #0]
    6e6e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    6e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e76:	2203      	movs	r2, #3
    6e78:	701a      	strb	r2, [r3, #0]
    6e7a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6e7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e82:	781b      	ldrb	r3, [r3, #0]
    6e84:	461a      	mov	r2, r3
    6e86:	f240 33f0 	movw	r3, #1008	; 0x3f0
    6e8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e8e:	7819      	ldrb	r1, [r3, #0]
    6e90:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    6e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e98:	5499      	strb	r1, [r3, r2]
    6e9a:	f240 33f0 	movw	r3, #1008	; 0x3f0
    6e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ea2:	781a      	ldrb	r2, [r3, #0]
    6ea4:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6eac:	781b      	ldrb	r3, [r3, #0]
    6eae:	4413      	add	r3, r2
    6eb0:	b2da      	uxtb	r2, r3
    6eb2:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6eb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6eba:	701a      	strb	r2, [r3, #0]
    6ebc:	f64a 73ee 	movw	r3, #45038	; 0xafee
    6ec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ec4:	781a      	ldrb	r2, [r3, #0]
    6ec6:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6eca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ece:	781b      	ldrb	r3, [r3, #0]
    6ed0:	4413      	add	r3, r2
    6ed2:	b2da      	uxtb	r2, r3
    6ed4:	f64a 73ee 	movw	r3, #45038	; 0xafee
    6ed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6edc:	701a      	strb	r2, [r3, #0]
    6ede:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ee6:	781b      	ldrb	r3, [r3, #0]
    6ee8:	3301      	adds	r3, #1
    6eea:	b2da      	uxtb	r2, r3
    6eec:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6ef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ef4:	701a      	strb	r2, [r3, #0]
    6ef6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6efe:	781b      	ldrb	r3, [r3, #0]
    6f00:	2bff      	cmp	r3, #255	; 0xff
    6f02:	d105      	bne.n	6f10 <ground_calibrate+0x10b0>
    6f04:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6f08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f0c:	2200      	movs	r2, #0
    6f0e:	701a      	strb	r2, [r3, #0]
    6f10:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f18:	781b      	ldrb	r3, [r3, #0]
    6f1a:	461a      	mov	r2, r3
    6f1c:	f240 33f0 	movw	r3, #1008	; 0x3f0
    6f20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f24:	7859      	ldrb	r1, [r3, #1]
    6f26:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    6f2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f2e:	5499      	strb	r1, [r3, r2]
    6f30:	4b77      	ldr	r3, [pc, #476]	; (7110 <ground_calibrate+0x12b0>)
    6f32:	781a      	ldrb	r2, [r3, #0]
    6f34:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f3c:	781b      	ldrb	r3, [r3, #0]
    6f3e:	4413      	add	r3, r2
    6f40:	b2da      	uxtb	r2, r3
    6f42:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f4a:	701a      	strb	r2, [r3, #0]
    6f4c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    6f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f54:	781a      	ldrb	r2, [r3, #0]
    6f56:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f5e:	781b      	ldrb	r3, [r3, #0]
    6f60:	4413      	add	r3, r2
    6f62:	b2da      	uxtb	r2, r3
    6f64:	f64a 73ee 	movw	r3, #45038	; 0xafee
    6f68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f6c:	701a      	strb	r2, [r3, #0]
    6f6e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6f72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f76:	781b      	ldrb	r3, [r3, #0]
    6f78:	3301      	adds	r3, #1
    6f7a:	b2da      	uxtb	r2, r3
    6f7c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6f80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f84:	701a      	strb	r2, [r3, #0]
    6f86:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f8e:	781b      	ldrb	r3, [r3, #0]
    6f90:	2bff      	cmp	r3, #255	; 0xff
    6f92:	d105      	bne.n	6fa0 <ground_calibrate+0x1140>
    6f94:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f9c:	2200      	movs	r2, #0
    6f9e:	701a      	strb	r2, [r3, #0]
    6fa0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6fa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fa8:	781b      	ldrb	r3, [r3, #0]
    6faa:	461a      	mov	r2, r3
    6fac:	f64a 73ed 	movw	r3, #45037	; 0xafed
    6fb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fb4:	7819      	ldrb	r1, [r3, #0]
    6fb6:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    6fba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fbe:	5499      	strb	r1, [r3, r2]
    6fc0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fc8:	781b      	ldrb	r3, [r3, #0]
    6fca:	3301      	adds	r3, #1
    6fcc:	b2da      	uxtb	r2, r3
    6fce:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6fd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fd6:	701a      	strb	r2, [r3, #0]
    6fd8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fe0:	781b      	ldrb	r3, [r3, #0]
    6fe2:	2bff      	cmp	r3, #255	; 0xff
    6fe4:	d105      	bne.n	6ff2 <ground_calibrate+0x1192>
    6fe6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fee:	2200      	movs	r2, #0
    6ff0:	701a      	strb	r2, [r3, #0]
    6ff2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    6ff6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ffa:	781b      	ldrb	r3, [r3, #0]
    6ffc:	461a      	mov	r2, r3
    6ffe:	f64a 73ee 	movw	r3, #45038	; 0xafee
    7002:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7006:	7819      	ldrb	r1, [r3, #0]
    7008:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    700c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7010:	5499      	strb	r1, [r3, r2]
    7012:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7016:	f2c2 0300 	movt	r3, #8192	; 0x2000
    701a:	781b      	ldrb	r3, [r3, #0]
    701c:	3301      	adds	r3, #1
    701e:	b2da      	uxtb	r2, r3
    7020:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7024:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7028:	701a      	strb	r2, [r3, #0]
    702a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    702e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7032:	781b      	ldrb	r3, [r3, #0]
    7034:	2bff      	cmp	r3, #255	; 0xff
    7036:	d105      	bne.n	7044 <ground_calibrate+0x11e4>
    7038:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    703c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7040:	2200      	movs	r2, #0
    7042:	701a      	strb	r2, [r3, #0]
    7044:	f242 0339 	movw	r3, #8249	; 0x2039
    7048:	f2c2 0300 	movt	r3, #8192	; 0x2000
    704c:	781b      	ldrb	r3, [r3, #0]
    704e:	b2db      	uxtb	r3, r3
    7050:	f003 0310 	and.w	r3, r3, #16
    7054:	2b00      	cmp	r3, #0
    7056:	d15a      	bne.n	710e <ground_calibrate+0x12ae>
    7058:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    705c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7060:	781b      	ldrb	r3, [r3, #0]
    7062:	b2db      	uxtb	r3, r3
    7064:	461a      	mov	r2, r3
    7066:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    706a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    706e:	5c9a      	ldrb	r2, [r3, r2]
    7070:	f64a 73eb 	movw	r3, #45035	; 0xafeb
    7074:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7078:	701a      	strb	r2, [r3, #0]
    707a:	f64a 73ec 	movw	r3, #45036	; 0xafec
    707e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7082:	2200      	movs	r2, #0
    7084:	701a      	strb	r2, [r3, #0]
    7086:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    708a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    708e:	781b      	ldrb	r3, [r3, #0]
    7090:	b2db      	uxtb	r3, r3
    7092:	3301      	adds	r3, #1
    7094:	b2da      	uxtb	r2, r3
    7096:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    709a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    709e:	701a      	strb	r2, [r3, #0]
    70a0:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    70a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70a8:	781b      	ldrb	r3, [r3, #0]
    70aa:	b2db      	uxtb	r3, r3
    70ac:	2bff      	cmp	r3, #255	; 0xff
    70ae:	d105      	bne.n	70bc <ground_calibrate+0x125c>
    70b0:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    70b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70b8:	2200      	movs	r2, #0
    70ba:	701a      	strb	r2, [r3, #0]
    70bc:	f242 0338 	movw	r3, #8248	; 0x2038
    70c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70c4:	f242 0238 	movw	r2, #8248	; 0x2038
    70c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    70cc:	7812      	ldrb	r2, [r2, #0]
    70ce:	b2d2      	uxtb	r2, r2
    70d0:	f042 0201 	orr.w	r2, r2, #1
    70d4:	b2d2      	uxtb	r2, r2
    70d6:	701a      	strb	r2, [r3, #0]
    70d8:	f242 0339 	movw	r3, #8249	; 0x2039
    70dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70e0:	f242 0239 	movw	r2, #8249	; 0x2039
    70e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    70e8:	7812      	ldrb	r2, [r2, #0]
    70ea:	b2d2      	uxtb	r2, r2
    70ec:	f042 0210 	orr.w	r2, r2, #16
    70f0:	b2d2      	uxtb	r2, r2
    70f2:	701a      	strb	r2, [r3, #0]
    70f4:	e00b      	b.n	710e <ground_calibrate+0x12ae>
    70f6:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    70fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70fe:	781b      	ldrb	r3, [r3, #0]
    7100:	3301      	adds	r3, #1
    7102:	b2da      	uxtb	r2, r3
    7104:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    7108:	f2c2 0300 	movt	r3, #8192	; 0x2000
    710c:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    710e:	bd80      	pop	{r7, pc}
    7110:	200003f1 	.word	0x200003f1

00007114 <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    7114:	b480      	push	{r7}
    7116:	b083      	sub	sp, #12
    7118:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    711a:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    711e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7122:	781b      	ldrb	r3, [r3, #0]
    7124:	2b03      	cmp	r3, #3
    7126:	d10c      	bne.n	7142 <pprz_mode_update+0x2e>
    7128:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    712c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7130:	781b      	ldrb	r3, [r3, #0]
    7132:	2b00      	cmp	r3, #0
    7134:	d032      	beq.n	719c <pprz_mode_update+0x88>
    7136:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    713a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    713e:	2200      	movs	r2, #0
    7140:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    7142:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    7146:	f2c2 0300 	movt	r3, #8192	; 0x2000
    714a:	891b      	ldrh	r3, [r3, #8]
    714c:	b21b      	sxth	r3, r3
    714e:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    7152:	dc0f      	bgt.n	7174 <pprz_mode_update+0x60>
    7154:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    7158:	f2c2 0300 	movt	r3, #8192	; 0x2000
    715c:	891b      	ldrh	r3, [r3, #8]
    715e:	b21a      	sxth	r2, r3
    7160:	f64e 5341 	movw	r3, #60737	; 0xed41
    7164:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    7168:	429a      	cmp	r2, r3
    716a:	bfb4      	ite	lt
    716c:	2300      	movlt	r3, #0
    716e:	2301      	movge	r3, #1
    7170:	b2db      	uxtb	r3, r3
    7172:	e000      	b.n	7176 <pprz_mode_update+0x62>
    7174:	2302      	movs	r3, #2
    7176:	71fb      	strb	r3, [r7, #7]
    7178:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    717c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7180:	781b      	ldrb	r3, [r3, #0]
    7182:	79fa      	ldrb	r2, [r7, #7]
    7184:	429a      	cmp	r2, r3
    7186:	d007      	beq.n	7198 <pprz_mode_update+0x84>
    7188:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    718c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7190:	79fa      	ldrb	r2, [r7, #7]
    7192:	701a      	strb	r2, [r3, #0]
    7194:	2301      	movs	r3, #1
    7196:	e002      	b.n	719e <pprz_mode_update+0x8a>
    7198:	2300      	movs	r3, #0
    719a:	e000      	b.n	719e <pprz_mode_update+0x8a>
  } else
    return FALSE;
    719c:	2300      	movs	r3, #0
}
    719e:	4618      	mov	r0, r3
    71a0:	370c      	adds	r7, #12
    71a2:	46bd      	mov	sp, r7
    71a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    71a8:	4770      	bx	lr
    71aa:	bf00      	nop

000071ac <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    71ac:	b480      	push	{r7}
    71ae:	b083      	sub	sp, #12
    71b0:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    71b2:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    71b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71ba:	89db      	ldrh	r3, [r3, #14]
    71bc:	b21a      	sxth	r2, r3
    71be:	f640 437f 	movw	r3, #3199	; 0xc7f
    71c2:	429a      	cmp	r2, r3
    71c4:	bfd4      	ite	le
    71c6:	2300      	movle	r3, #0
    71c8:	2301      	movgt	r3, #1
    71ca:	b2db      	uxtb	r3, r3
    71cc:	71fb      	strb	r3, [r7, #7]
    71ce:	f240 33ec 	movw	r3, #1004	; 0x3ec
    71d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71d6:	781b      	ldrb	r3, [r3, #0]
    71d8:	79fa      	ldrb	r2, [r7, #7]
    71da:	429a      	cmp	r2, r3
    71dc:	d007      	beq.n	71ee <ir_estim_mode_update+0x42>
    71de:	f240 33ec 	movw	r3, #1004	; 0x3ec
    71e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71e6:	79fa      	ldrb	r2, [r7, #7]
    71e8:	701a      	strb	r2, [r3, #0]
    71ea:	2301      	movs	r3, #1
    71ec:	e000      	b.n	71f0 <ir_estim_mode_update+0x44>
    71ee:	2300      	movs	r3, #0
}
    71f0:	4618      	mov	r0, r3
    71f2:	370c      	adds	r7, #12
    71f4:	46bd      	mov	sp, r7
    71f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    71fa:	4770      	bx	lr

000071fc <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    71fc:	b480      	push	{r7}
    71fe:	b083      	sub	sp, #12
    7200:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    7202:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    7206:	f2c2 0300 	movt	r3, #8192	; 0x2000
    720a:	7cdb      	ldrb	r3, [r3, #19]
    720c:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    720e:	f64a 63d3 	movw	r3, #44755	; 0xaed3
    7212:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7216:	781b      	ldrb	r3, [r3, #0]
    7218:	79fa      	ldrb	r2, [r7, #7]
    721a:	429a      	cmp	r2, r3
    721c:	d017      	beq.n	724e <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    721e:	f64a 63d3 	movw	r3, #44755	; 0xaed3
    7222:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7226:	781b      	ldrb	r3, [r3, #0]
    7228:	461a      	mov	r2, r3
    722a:	79fb      	ldrb	r3, [r7, #7]
    722c:	4053      	eors	r3, r2
    722e:	f003 0303 	and.w	r3, r3, #3
    7232:	2b00      	cmp	r3, #0
    7234:	bf0c      	ite	eq
    7236:	2300      	moveq	r3, #0
    7238:	2301      	movne	r3, #1
    723a:	b2db      	uxtb	r3, r3
    723c:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    723e:	f64a 63d3 	movw	r3, #44755	; 0xaed3
    7242:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7246:	79fa      	ldrb	r2, [r7, #7]
    7248:	701a      	strb	r2, [r3, #0]
    return changed;
    724a:	79bb      	ldrb	r3, [r7, #6]
    724c:	e000      	b.n	7250 <mcu1_status_update+0x54>
  }
  return FALSE;
    724e:	2300      	movs	r3, #0
}
    7250:	4618      	mov	r0, r3
    7252:	370c      	adds	r7, #12
    7254:	46bd      	mov	sp, r7
    7256:	f85d 7b04 	ldr.w	r7, [sp], #4
    725a:	4770      	bx	lr

0000725c <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    725c:	b480      	push	{r7}
    725e:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    7260:	f24b 43fc 	movw	r3, #46332	; 0xb4fc
    7264:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7268:	781b      	ldrb	r3, [r3, #0]
    726a:	2b00      	cmp	r3, #0
    726c:	d12a      	bne.n	72c4 <events_update+0x68>
    726e:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    7272:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7276:	895b      	ldrh	r3, [r3, #10]
    7278:	b21b      	sxth	r3, r3
    727a:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    727e:	dd21      	ble.n	72c4 <events_update+0x68>
    7280:	f64a 63e4 	movw	r3, #44772	; 0xaee4
    7284:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7288:	881b      	ldrh	r3, [r3, #0]
    728a:	2b13      	cmp	r3, #19
    728c:	d819      	bhi.n	72c2 <events_update+0x66>
    728e:	f64a 63e4 	movw	r3, #44772	; 0xaee4
    7292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7296:	881b      	ldrh	r3, [r3, #0]
    7298:	3301      	adds	r3, #1
    729a:	b29a      	uxth	r2, r3
    729c:	f64a 63e4 	movw	r3, #44772	; 0xaee4
    72a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72a4:	801a      	strh	r2, [r3, #0]
    72a6:	f64a 63e4 	movw	r3, #44772	; 0xaee4
    72aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72ae:	881b      	ldrh	r3, [r3, #0]
    72b0:	2b14      	cmp	r3, #20
    72b2:	d106      	bne.n	72c2 <events_update+0x66>
    72b4:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    72b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72bc:	2201      	movs	r2, #1
    72be:	701a      	strb	r2, [r3, #0]
    72c0:	e00c      	b.n	72dc <events_update+0x80>
    72c2:	e00b      	b.n	72dc <events_update+0x80>
    72c4:	f64a 63e4 	movw	r3, #44772	; 0xaee4
    72c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72cc:	2200      	movs	r2, #0
    72ce:	801a      	strh	r2, [r3, #0]
    72d0:	f64a 63d0 	movw	r3, #44752	; 0xaed0
    72d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72d8:	2200      	movs	r2, #0
    72da:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    72dc:	f24b 43fc 	movw	r3, #46332	; 0xb4fc
    72e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72e4:	781b      	ldrb	r3, [r3, #0]
    72e6:	2b00      	cmp	r3, #0
    72e8:	d12a      	bne.n	7340 <events_update+0xe4>
    72ea:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    72ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72f2:	895b      	ldrh	r3, [r3, #10]
    72f4:	b21b      	sxth	r3, r3
    72f6:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    72fa:	da21      	bge.n	7340 <events_update+0xe4>
    72fc:	f64a 63e6 	movw	r3, #44774	; 0xaee6
    7300:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7304:	881b      	ldrh	r3, [r3, #0]
    7306:	2b13      	cmp	r3, #19
    7308:	d819      	bhi.n	733e <events_update+0xe2>
    730a:	f64a 63e6 	movw	r3, #44774	; 0xaee6
    730e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7312:	881b      	ldrh	r3, [r3, #0]
    7314:	3301      	adds	r3, #1
    7316:	b29a      	uxth	r2, r3
    7318:	f64a 63e6 	movw	r3, #44774	; 0xaee6
    731c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7320:	801a      	strh	r2, [r3, #0]
    7322:	f64a 63e6 	movw	r3, #44774	; 0xaee6
    7326:	f2c2 0300 	movt	r3, #8192	; 0x2000
    732a:	881b      	ldrh	r3, [r3, #0]
    732c:	2b14      	cmp	r3, #20
    732e:	d106      	bne.n	733e <events_update+0xe2>
    7330:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7338:	2201      	movs	r2, #1
    733a:	701a      	strb	r2, [r3, #0]
    733c:	e00c      	b.n	7358 <events_update+0xfc>
    733e:	e00b      	b.n	7358 <events_update+0xfc>
    7340:	f64a 63e6 	movw	r3, #44774	; 0xaee6
    7344:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7348:	2200      	movs	r2, #0
    734a:	801a      	strh	r2, [r3, #0]
    734c:	f64a 63d1 	movw	r3, #44753	; 0xaed1
    7350:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7354:	2200      	movs	r2, #0
    7356:	701a      	strb	r2, [r3, #0]
}  
    7358:	46bd      	mov	sp, r7
    735a:	f85d 7b04 	ldr.w	r7, [sp], #4
    735e:	4770      	bx	lr

00007360 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    7360:	b480      	push	{r7}
    7362:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    7364:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    7368:	f2c2 0300 	movt	r3, #8192	; 0x2000
    736c:	88da      	ldrh	r2, [r3, #6]
    736e:	f24b 0308 	movw	r3, #45064	; 0xb008
    7372:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7376:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    7378:	f24b 0308 	movw	r3, #45064	; 0xb008
    737c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7380:	2200      	movs	r2, #0
    7382:	74da      	strb	r2, [r3, #19]
}
    7384:	46bd      	mov	sp, r7
    7386:	f85d 7b04 	ldr.w	r7, [sp], #4
    738a:	4770      	bx	lr

0000738c <send_boot>:
/** \fn inline void reporting_task( void )
 *  \brief Send a serie of initialisation messages followed by a stream of periodic ones\n
 * Called at 20Hz.
 */

void send_boot(void){
    738c:	b480      	push	{r7}
    738e:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  //if (boot) 
  {
      DOWNLINK_SEND_BOOT(&version);
    7390:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7394:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7398:	781a      	ldrb	r2, [r3, #0]
    739a:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    739e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73a2:	781b      	ldrb	r3, [r3, #0]
    73a4:	b2db      	uxtb	r3, r3
    73a6:	429a      	cmp	r2, r3
    73a8:	d313      	bcc.n	73d2 <send_boot+0x46>
    73aa:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    73ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73b2:	781b      	ldrb	r3, [r3, #0]
    73b4:	b2db      	uxtb	r3, r3
    73b6:	461a      	mov	r2, r3
    73b8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    73bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73c0:	781b      	ldrb	r3, [r3, #0]
    73c2:	1ad3      	subs	r3, r2, r3
    73c4:	33ff      	adds	r3, #255	; 0xff
    73c6:	2b06      	cmp	r3, #6
    73c8:	bfd4      	ite	le
    73ca:	2300      	movle	r3, #0
    73cc:	2301      	movgt	r3, #1
    73ce:	b2db      	uxtb	r3, r3
    73d0:	e011      	b.n	73f6 <send_boot+0x6a>
    73d2:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    73d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73da:	781b      	ldrb	r3, [r3, #0]
    73dc:	b2db      	uxtb	r3, r3
    73de:	461a      	mov	r2, r3
    73e0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    73e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73e8:	781b      	ldrb	r3, [r3, #0]
    73ea:	1ad3      	subs	r3, r2, r3
    73ec:	2b06      	cmp	r3, #6
    73ee:	bfd4      	ite	le
    73f0:	2300      	movle	r3, #0
    73f2:	2301      	movgt	r3, #1
    73f4:	b2db      	uxtb	r3, r3
    73f6:	2b00      	cmp	r3, #0
    73f8:	f000 8194 	beq.w	7724 <send_boot+0x398>
    73fc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7400:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7404:	781b      	ldrb	r3, [r3, #0]
    7406:	461a      	mov	r2, r3
    7408:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    740c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7410:	2105      	movs	r1, #5
    7412:	5499      	strb	r1, [r3, r2]
    7414:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    741c:	781b      	ldrb	r3, [r3, #0]
    741e:	3301      	adds	r3, #1
    7420:	b2da      	uxtb	r2, r3
    7422:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7426:	f2c2 0300 	movt	r3, #8192	; 0x2000
    742a:	701a      	strb	r2, [r3, #0]
    742c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7430:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7434:	781b      	ldrb	r3, [r3, #0]
    7436:	2bff      	cmp	r3, #255	; 0xff
    7438:	d105      	bne.n	7446 <send_boot+0xba>
    743a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    743e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7442:	2200      	movs	r2, #0
    7444:	701a      	strb	r2, [r3, #0]
    7446:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    744a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    744e:	781b      	ldrb	r3, [r3, #0]
    7450:	461a      	mov	r2, r3
    7452:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    7456:	f2c2 0300 	movt	r3, #8192	; 0x2000
    745a:	2101      	movs	r1, #1
    745c:	5499      	strb	r1, [r3, r2]
    745e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7462:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7466:	781b      	ldrb	r3, [r3, #0]
    7468:	3301      	adds	r3, #1
    746a:	b2da      	uxtb	r2, r3
    746c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7470:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7474:	701a      	strb	r2, [r3, #0]
    7476:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    747a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    747e:	781b      	ldrb	r3, [r3, #0]
    7480:	2bff      	cmp	r3, #255	; 0xff
    7482:	d105      	bne.n	7490 <send_boot+0x104>
    7484:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7488:	f2c2 0300 	movt	r3, #8192	; 0x2000
    748c:	2200      	movs	r2, #0
    748e:	701a      	strb	r2, [r3, #0]
    7490:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7494:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7498:	2201      	movs	r2, #1
    749a:	701a      	strb	r2, [r3, #0]
    749c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    74a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74a4:	2201      	movs	r2, #1
    74a6:	701a      	strb	r2, [r3, #0]
    74a8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    74ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74b0:	781b      	ldrb	r3, [r3, #0]
    74b2:	461a      	mov	r2, r3
    74b4:	f648 039e 	movw	r3, #34974	; 0x889e
    74b8:	f2c0 0301 	movt	r3, #1
    74bc:	7819      	ldrb	r1, [r3, #0]
    74be:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    74c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74c6:	5499      	strb	r1, [r3, r2]
    74c8:	f648 039e 	movw	r3, #34974	; 0x889e
    74cc:	f2c0 0301 	movt	r3, #1
    74d0:	781a      	ldrb	r2, [r3, #0]
    74d2:	f64a 73ed 	movw	r3, #45037	; 0xafed
    74d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74da:	781b      	ldrb	r3, [r3, #0]
    74dc:	4413      	add	r3, r2
    74de:	b2da      	uxtb	r2, r3
    74e0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    74e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74e8:	701a      	strb	r2, [r3, #0]
    74ea:	f64a 73ee 	movw	r3, #45038	; 0xafee
    74ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74f2:	781a      	ldrb	r2, [r3, #0]
    74f4:	f64a 73ed 	movw	r3, #45037	; 0xafed
    74f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74fc:	781b      	ldrb	r3, [r3, #0]
    74fe:	4413      	add	r3, r2
    7500:	b2da      	uxtb	r2, r3
    7502:	f64a 73ee 	movw	r3, #45038	; 0xafee
    7506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    750a:	701a      	strb	r2, [r3, #0]
    750c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7510:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7514:	781b      	ldrb	r3, [r3, #0]
    7516:	3301      	adds	r3, #1
    7518:	b2da      	uxtb	r2, r3
    751a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    751e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7522:	701a      	strb	r2, [r3, #0]
    7524:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7528:	f2c2 0300 	movt	r3, #8192	; 0x2000
    752c:	781b      	ldrb	r3, [r3, #0]
    752e:	2bff      	cmp	r3, #255	; 0xff
    7530:	d105      	bne.n	753e <send_boot+0x1b2>
    7532:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    753a:	2200      	movs	r2, #0
    753c:	701a      	strb	r2, [r3, #0]
    753e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7542:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7546:	781b      	ldrb	r3, [r3, #0]
    7548:	461a      	mov	r2, r3
    754a:	f648 039e 	movw	r3, #34974	; 0x889e
    754e:	f2c0 0301 	movt	r3, #1
    7552:	7859      	ldrb	r1, [r3, #1]
    7554:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    7558:	f2c2 0300 	movt	r3, #8192	; 0x2000
    755c:	5499      	strb	r1, [r3, r2]
    755e:	4b88      	ldr	r3, [pc, #544]	; (7780 <send_boot+0x3f4>)
    7560:	781a      	ldrb	r2, [r3, #0]
    7562:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7566:	f2c2 0300 	movt	r3, #8192	; 0x2000
    756a:	781b      	ldrb	r3, [r3, #0]
    756c:	4413      	add	r3, r2
    756e:	b2da      	uxtb	r2, r3
    7570:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7574:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7578:	701a      	strb	r2, [r3, #0]
    757a:	f64a 73ee 	movw	r3, #45038	; 0xafee
    757e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7582:	781a      	ldrb	r2, [r3, #0]
    7584:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7588:	f2c2 0300 	movt	r3, #8192	; 0x2000
    758c:	781b      	ldrb	r3, [r3, #0]
    758e:	4413      	add	r3, r2
    7590:	b2da      	uxtb	r2, r3
    7592:	f64a 73ee 	movw	r3, #45038	; 0xafee
    7596:	f2c2 0300 	movt	r3, #8192	; 0x2000
    759a:	701a      	strb	r2, [r3, #0]
    759c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    75a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75a4:	781b      	ldrb	r3, [r3, #0]
    75a6:	3301      	adds	r3, #1
    75a8:	b2da      	uxtb	r2, r3
    75aa:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    75ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75b2:	701a      	strb	r2, [r3, #0]
    75b4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    75b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75bc:	781b      	ldrb	r3, [r3, #0]
    75be:	2bff      	cmp	r3, #255	; 0xff
    75c0:	d105      	bne.n	75ce <send_boot+0x242>
    75c2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    75c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75ca:	2200      	movs	r2, #0
    75cc:	701a      	strb	r2, [r3, #0]
    75ce:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    75d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75d6:	781b      	ldrb	r3, [r3, #0]
    75d8:	461a      	mov	r2, r3
    75da:	f64a 73ed 	movw	r3, #45037	; 0xafed
    75de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75e2:	7819      	ldrb	r1, [r3, #0]
    75e4:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    75e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75ec:	5499      	strb	r1, [r3, r2]
    75ee:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    75f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75f6:	781b      	ldrb	r3, [r3, #0]
    75f8:	3301      	adds	r3, #1
    75fa:	b2da      	uxtb	r2, r3
    75fc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7600:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7604:	701a      	strb	r2, [r3, #0]
    7606:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    760a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    760e:	781b      	ldrb	r3, [r3, #0]
    7610:	2bff      	cmp	r3, #255	; 0xff
    7612:	d105      	bne.n	7620 <send_boot+0x294>
    7614:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7618:	f2c2 0300 	movt	r3, #8192	; 0x2000
    761c:	2200      	movs	r2, #0
    761e:	701a      	strb	r2, [r3, #0]
    7620:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7624:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7628:	781b      	ldrb	r3, [r3, #0]
    762a:	461a      	mov	r2, r3
    762c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    7630:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7634:	7819      	ldrb	r1, [r3, #0]
    7636:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    763a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    763e:	5499      	strb	r1, [r3, r2]
    7640:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7644:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7648:	781b      	ldrb	r3, [r3, #0]
    764a:	3301      	adds	r3, #1
    764c:	b2da      	uxtb	r2, r3
    764e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7652:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7656:	701a      	strb	r2, [r3, #0]
    7658:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    765c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7660:	781b      	ldrb	r3, [r3, #0]
    7662:	2bff      	cmp	r3, #255	; 0xff
    7664:	d105      	bne.n	7672 <send_boot+0x2e6>
    7666:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    766a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    766e:	2200      	movs	r2, #0
    7670:	701a      	strb	r2, [r3, #0]
    7672:	f242 0339 	movw	r3, #8249	; 0x2039
    7676:	f2c2 0300 	movt	r3, #8192	; 0x2000
    767a:	781b      	ldrb	r3, [r3, #0]
    767c:	b2db      	uxtb	r3, r3
    767e:	f003 0310 	and.w	r3, r3, #16
    7682:	2b00      	cmp	r3, #0
    7684:	d15a      	bne.n	773c <send_boot+0x3b0>
    7686:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    768a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    768e:	781b      	ldrb	r3, [r3, #0]
    7690:	b2db      	uxtb	r3, r3
    7692:	461a      	mov	r2, r3
    7694:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    7698:	f2c2 0300 	movt	r3, #8192	; 0x2000
    769c:	5c9a      	ldrb	r2, [r3, r2]
    769e:	f64a 73eb 	movw	r3, #45035	; 0xafeb
    76a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76a6:	701a      	strb	r2, [r3, #0]
    76a8:	f64a 73ec 	movw	r3, #45036	; 0xafec
    76ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76b0:	2200      	movs	r2, #0
    76b2:	701a      	strb	r2, [r3, #0]
    76b4:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    76b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76bc:	781b      	ldrb	r3, [r3, #0]
    76be:	b2db      	uxtb	r3, r3
    76c0:	3301      	adds	r3, #1
    76c2:	b2da      	uxtb	r2, r3
    76c4:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    76c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76cc:	701a      	strb	r2, [r3, #0]
    76ce:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    76d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76d6:	781b      	ldrb	r3, [r3, #0]
    76d8:	b2db      	uxtb	r3, r3
    76da:	2bff      	cmp	r3, #255	; 0xff
    76dc:	d105      	bne.n	76ea <send_boot+0x35e>
    76de:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    76e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76e6:	2200      	movs	r2, #0
    76e8:	701a      	strb	r2, [r3, #0]
    76ea:	f242 0338 	movw	r3, #8248	; 0x2038
    76ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76f2:	f242 0238 	movw	r2, #8248	; 0x2038
    76f6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    76fa:	7812      	ldrb	r2, [r2, #0]
    76fc:	b2d2      	uxtb	r2, r2
    76fe:	f042 0201 	orr.w	r2, r2, #1
    7702:	b2d2      	uxtb	r2, r2
    7704:	701a      	strb	r2, [r3, #0]
    7706:	f242 0339 	movw	r3, #8249	; 0x2039
    770a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    770e:	f242 0239 	movw	r2, #8249	; 0x2039
    7712:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7716:	7812      	ldrb	r2, [r2, #0]
    7718:	b2d2      	uxtb	r2, r2
    771a:	f042 0210 	orr.w	r2, r2, #16
    771e:	b2d2      	uxtb	r2, r2
    7720:	701a      	strb	r2, [r3, #0]
    7722:	e00b      	b.n	773c <send_boot+0x3b0>
    7724:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    7728:	f2c2 0300 	movt	r3, #8192	; 0x2000
    772c:	781b      	ldrb	r3, [r3, #0]
    772e:	3301      	adds	r3, #1
    7730:	b2da      	uxtb	r2, r3
    7732:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    7736:	f2c2 0300 	movt	r3, #8192	; 0x2000
    773a:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    773c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7740:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7744:	781a      	ldrb	r2, [r3, #0]
    7746:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    774a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    774e:	781b      	ldrb	r3, [r3, #0]
    7750:	b2db      	uxtb	r3, r3
    7752:	429a      	cmp	r2, r3
    7754:	d316      	bcc.n	7784 <send_boot+0x3f8>
    7756:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    775a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    775e:	781b      	ldrb	r3, [r3, #0]
    7760:	b2db      	uxtb	r3, r3
    7762:	461a      	mov	r2, r3
    7764:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7768:	f2c2 0300 	movt	r3, #8192	; 0x2000
    776c:	781b      	ldrb	r3, [r3, #0]
    776e:	1ad3      	subs	r3, r2, r3
    7770:	33ff      	adds	r3, #255	; 0xff
    7772:	2b14      	cmp	r3, #20
    7774:	bfd4      	ite	le
    7776:	2300      	movle	r3, #0
    7778:	2301      	movgt	r3, #1
    777a:	b2db      	uxtb	r3, r3
    777c:	e014      	b.n	77a8 <send_boot+0x41c>
    777e:	bf00      	nop
    7780:	0001889f 	.word	0x0001889f
    7784:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    7788:	f2c2 0300 	movt	r3, #8192	; 0x2000
    778c:	781b      	ldrb	r3, [r3, #0]
    778e:	b2db      	uxtb	r3, r3
    7790:	461a      	mov	r2, r3
    7792:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    779a:	781b      	ldrb	r3, [r3, #0]
    779c:	1ad3      	subs	r3, r2, r3
    779e:	2b14      	cmp	r3, #20
    77a0:	bfd4      	ite	le
    77a2:	2300      	movle	r3, #0
    77a4:	2301      	movgt	r3, #1
    77a6:	b2db      	uxtb	r3, r3
    77a8:	2b00      	cmp	r3, #0
    77aa:	f000 85a5 	beq.w	82f8 <send_boot+0xf6c>
    77ae:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    77b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77b6:	781b      	ldrb	r3, [r3, #0]
    77b8:	461a      	mov	r2, r3
    77ba:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    77be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77c2:	2105      	movs	r1, #5
    77c4:	5499      	strb	r1, [r3, r2]
    77c6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    77ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77ce:	781b      	ldrb	r3, [r3, #0]
    77d0:	3301      	adds	r3, #1
    77d2:	b2da      	uxtb	r2, r3
    77d4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    77d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77dc:	701a      	strb	r2, [r3, #0]
    77de:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    77e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77e6:	781b      	ldrb	r3, [r3, #0]
    77e8:	2bff      	cmp	r3, #255	; 0xff
    77ea:	d105      	bne.n	77f8 <send_boot+0x46c>
    77ec:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    77f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77f4:	2200      	movs	r2, #0
    77f6:	701a      	strb	r2, [r3, #0]
    77f8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    77fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7800:	781b      	ldrb	r3, [r3, #0]
    7802:	461a      	mov	r2, r3
    7804:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    7808:	f2c2 0300 	movt	r3, #8192	; 0x2000
    780c:	2105      	movs	r1, #5
    780e:	5499      	strb	r1, [r3, r2]
    7810:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7814:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7818:	781b      	ldrb	r3, [r3, #0]
    781a:	3301      	adds	r3, #1
    781c:	b2da      	uxtb	r2, r3
    781e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7822:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7826:	701a      	strb	r2, [r3, #0]
    7828:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    782c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7830:	781b      	ldrb	r3, [r3, #0]
    7832:	2bff      	cmp	r3, #255	; 0xff
    7834:	d105      	bne.n	7842 <send_boot+0x4b6>
    7836:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    783a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    783e:	2200      	movs	r2, #0
    7840:	701a      	strb	r2, [r3, #0]
    7842:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7846:	f2c2 0300 	movt	r3, #8192	; 0x2000
    784a:	2205      	movs	r2, #5
    784c:	701a      	strb	r2, [r3, #0]
    784e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    7852:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7856:	2205      	movs	r2, #5
    7858:	701a      	strb	r2, [r3, #0]
    785a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    785e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7862:	781b      	ldrb	r3, [r3, #0]
    7864:	461a      	mov	r2, r3
    7866:	f24b 43e0 	movw	r3, #46304	; 0xb4e0
    786a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    786e:	7819      	ldrb	r1, [r3, #0]
    7870:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    7874:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7878:	5499      	strb	r1, [r3, r2]
    787a:	f24b 43e0 	movw	r3, #46304	; 0xb4e0
    787e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7882:	781a      	ldrb	r2, [r3, #0]
    7884:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7888:	f2c2 0300 	movt	r3, #8192	; 0x2000
    788c:	781b      	ldrb	r3, [r3, #0]
    788e:	4413      	add	r3, r2
    7890:	b2da      	uxtb	r2, r3
    7892:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7896:	f2c2 0300 	movt	r3, #8192	; 0x2000
    789a:	701a      	strb	r2, [r3, #0]
    789c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    78a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78a4:	781a      	ldrb	r2, [r3, #0]
    78a6:	f64a 73ed 	movw	r3, #45037	; 0xafed
    78aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78ae:	781b      	ldrb	r3, [r3, #0]
    78b0:	4413      	add	r3, r2
    78b2:	b2da      	uxtb	r2, r3
    78b4:	f64a 73ee 	movw	r3, #45038	; 0xafee
    78b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78bc:	701a      	strb	r2, [r3, #0]
    78be:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    78c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78c6:	781b      	ldrb	r3, [r3, #0]
    78c8:	3301      	adds	r3, #1
    78ca:	b2da      	uxtb	r2, r3
    78cc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    78d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78d4:	701a      	strb	r2, [r3, #0]
    78d6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    78da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78de:	781b      	ldrb	r3, [r3, #0]
    78e0:	2bff      	cmp	r3, #255	; 0xff
    78e2:	d105      	bne.n	78f0 <send_boot+0x564>
    78e4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    78e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78ec:	2200      	movs	r2, #0
    78ee:	701a      	strb	r2, [r3, #0]
    78f0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    78f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78f8:	781b      	ldrb	r3, [r3, #0]
    78fa:	461a      	mov	r2, r3
    78fc:	f24b 43e0 	movw	r3, #46304	; 0xb4e0
    7900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7904:	7859      	ldrb	r1, [r3, #1]
    7906:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    790a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    790e:	5499      	strb	r1, [r3, r2]
    7910:	4bd1      	ldr	r3, [pc, #836]	; (7c58 <send_boot+0x8cc>)
    7912:	781a      	ldrb	r2, [r3, #0]
    7914:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7918:	f2c2 0300 	movt	r3, #8192	; 0x2000
    791c:	781b      	ldrb	r3, [r3, #0]
    791e:	4413      	add	r3, r2
    7920:	b2da      	uxtb	r2, r3
    7922:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7926:	f2c2 0300 	movt	r3, #8192	; 0x2000
    792a:	701a      	strb	r2, [r3, #0]
    792c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    7930:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7934:	781a      	ldrb	r2, [r3, #0]
    7936:	f64a 73ed 	movw	r3, #45037	; 0xafed
    793a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    793e:	781b      	ldrb	r3, [r3, #0]
    7940:	4413      	add	r3, r2
    7942:	b2da      	uxtb	r2, r3
    7944:	f64a 73ee 	movw	r3, #45038	; 0xafee
    7948:	f2c2 0300 	movt	r3, #8192	; 0x2000
    794c:	701a      	strb	r2, [r3, #0]
    794e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7952:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7956:	781b      	ldrb	r3, [r3, #0]
    7958:	3301      	adds	r3, #1
    795a:	b2da      	uxtb	r2, r3
    795c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7964:	701a      	strb	r2, [r3, #0]
    7966:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    796a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    796e:	781b      	ldrb	r3, [r3, #0]
    7970:	2bff      	cmp	r3, #255	; 0xff
    7972:	d105      	bne.n	7980 <send_boot+0x5f4>
    7974:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7978:	f2c2 0300 	movt	r3, #8192	; 0x2000
    797c:	2200      	movs	r2, #0
    797e:	701a      	strb	r2, [r3, #0]
    7980:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7984:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7988:	781b      	ldrb	r3, [r3, #0]
    798a:	461a      	mov	r2, r3
    798c:	f24b 43e0 	movw	r3, #46304	; 0xb4e0
    7990:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7994:	7899      	ldrb	r1, [r3, #2]
    7996:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    799a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    799e:	5499      	strb	r1, [r3, r2]
    79a0:	4bae      	ldr	r3, [pc, #696]	; (7c5c <send_boot+0x8d0>)
    79a2:	781a      	ldrb	r2, [r3, #0]
    79a4:	f64a 73ed 	movw	r3, #45037	; 0xafed
    79a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79ac:	781b      	ldrb	r3, [r3, #0]
    79ae:	4413      	add	r3, r2
    79b0:	b2da      	uxtb	r2, r3
    79b2:	f64a 73ed 	movw	r3, #45037	; 0xafed
    79b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79ba:	701a      	strb	r2, [r3, #0]
    79bc:	f64a 73ee 	movw	r3, #45038	; 0xafee
    79c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79c4:	781a      	ldrb	r2, [r3, #0]
    79c6:	f64a 73ed 	movw	r3, #45037	; 0xafed
    79ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79ce:	781b      	ldrb	r3, [r3, #0]
    79d0:	4413      	add	r3, r2
    79d2:	b2da      	uxtb	r2, r3
    79d4:	f64a 73ee 	movw	r3, #45038	; 0xafee
    79d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79dc:	701a      	strb	r2, [r3, #0]
    79de:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    79e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79e6:	781b      	ldrb	r3, [r3, #0]
    79e8:	3301      	adds	r3, #1
    79ea:	b2da      	uxtb	r2, r3
    79ec:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    79f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79f4:	701a      	strb	r2, [r3, #0]
    79f6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    79fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79fe:	781b      	ldrb	r3, [r3, #0]
    7a00:	2bff      	cmp	r3, #255	; 0xff
    7a02:	d105      	bne.n	7a10 <send_boot+0x684>
    7a04:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7a08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a0c:	2200      	movs	r2, #0
    7a0e:	701a      	strb	r2, [r3, #0]
    7a10:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a18:	781b      	ldrb	r3, [r3, #0]
    7a1a:	461a      	mov	r2, r3
    7a1c:	f24b 43e0 	movw	r3, #46304	; 0xb4e0
    7a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a24:	78d9      	ldrb	r1, [r3, #3]
    7a26:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    7a2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a2e:	5499      	strb	r1, [r3, r2]
    7a30:	4b8b      	ldr	r3, [pc, #556]	; (7c60 <send_boot+0x8d4>)
    7a32:	781a      	ldrb	r2, [r3, #0]
    7a34:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a3c:	781b      	ldrb	r3, [r3, #0]
    7a3e:	4413      	add	r3, r2
    7a40:	b2da      	uxtb	r2, r3
    7a42:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a4a:	701a      	strb	r2, [r3, #0]
    7a4c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    7a50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a54:	781a      	ldrb	r2, [r3, #0]
    7a56:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7a5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a5e:	781b      	ldrb	r3, [r3, #0]
    7a60:	4413      	add	r3, r2
    7a62:	b2da      	uxtb	r2, r3
    7a64:	f64a 73ee 	movw	r3, #45038	; 0xafee
    7a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a6c:	701a      	strb	r2, [r3, #0]
    7a6e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7a72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a76:	781b      	ldrb	r3, [r3, #0]
    7a78:	3301      	adds	r3, #1
    7a7a:	b2da      	uxtb	r2, r3
    7a7c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a84:	701a      	strb	r2, [r3, #0]
    7a86:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7a8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a8e:	781b      	ldrb	r3, [r3, #0]
    7a90:	2bff      	cmp	r3, #255	; 0xff
    7a92:	d105      	bne.n	7aa0 <send_boot+0x714>
    7a94:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7a98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a9c:	2200      	movs	r2, #0
    7a9e:	701a      	strb	r2, [r3, #0]
    7aa0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7aa8:	781b      	ldrb	r3, [r3, #0]
    7aaa:	461a      	mov	r2, r3
    7aac:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    7ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ab4:	7819      	ldrb	r1, [r3, #0]
    7ab6:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    7aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7abe:	5499      	strb	r1, [r3, r2]
    7ac0:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    7ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ac8:	781a      	ldrb	r2, [r3, #0]
    7aca:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7ace:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ad2:	781b      	ldrb	r3, [r3, #0]
    7ad4:	4413      	add	r3, r2
    7ad6:	b2da      	uxtb	r2, r3
    7ad8:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7adc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ae0:	701a      	strb	r2, [r3, #0]
    7ae2:	f64a 73ee 	movw	r3, #45038	; 0xafee
    7ae6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7aea:	781a      	ldrb	r2, [r3, #0]
    7aec:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7af4:	781b      	ldrb	r3, [r3, #0]
    7af6:	4413      	add	r3, r2
    7af8:	b2da      	uxtb	r2, r3
    7afa:	f64a 73ee 	movw	r3, #45038	; 0xafee
    7afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b02:	701a      	strb	r2, [r3, #0]
    7b04:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7b08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b0c:	781b      	ldrb	r3, [r3, #0]
    7b0e:	3301      	adds	r3, #1
    7b10:	b2da      	uxtb	r2, r3
    7b12:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b1a:	701a      	strb	r2, [r3, #0]
    7b1c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7b20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b24:	781b      	ldrb	r3, [r3, #0]
    7b26:	2bff      	cmp	r3, #255	; 0xff
    7b28:	d105      	bne.n	7b36 <send_boot+0x7aa>
    7b2a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7b2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b32:	2200      	movs	r2, #0
    7b34:	701a      	strb	r2, [r3, #0]
    7b36:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b3e:	781b      	ldrb	r3, [r3, #0]
    7b40:	461a      	mov	r2, r3
    7b42:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    7b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b4a:	7859      	ldrb	r1, [r3, #1]
    7b4c:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    7b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b54:	5499      	strb	r1, [r3, r2]
    7b56:	4b43      	ldr	r3, [pc, #268]	; (7c64 <send_boot+0x8d8>)
    7b58:	781a      	ldrb	r2, [r3, #0]
    7b5a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b62:	781b      	ldrb	r3, [r3, #0]
    7b64:	4413      	add	r3, r2
    7b66:	b2da      	uxtb	r2, r3
    7b68:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b70:	701a      	strb	r2, [r3, #0]
    7b72:	f64a 73ee 	movw	r3, #45038	; 0xafee
    7b76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b7a:	781a      	ldrb	r2, [r3, #0]
    7b7c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7b80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b84:	781b      	ldrb	r3, [r3, #0]
    7b86:	4413      	add	r3, r2
    7b88:	b2da      	uxtb	r2, r3
    7b8a:	f64a 73ee 	movw	r3, #45038	; 0xafee
    7b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b92:	701a      	strb	r2, [r3, #0]
    7b94:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b9c:	781b      	ldrb	r3, [r3, #0]
    7b9e:	3301      	adds	r3, #1
    7ba0:	b2da      	uxtb	r2, r3
    7ba2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7baa:	701a      	strb	r2, [r3, #0]
    7bac:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7bb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bb4:	781b      	ldrb	r3, [r3, #0]
    7bb6:	2bff      	cmp	r3, #255	; 0xff
    7bb8:	d105      	bne.n	7bc6 <send_boot+0x83a>
    7bba:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bc2:	2200      	movs	r2, #0
    7bc4:	701a      	strb	r2, [r3, #0]
    7bc6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bce:	781b      	ldrb	r3, [r3, #0]
    7bd0:	461a      	mov	r2, r3
    7bd2:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    7bd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bda:	7899      	ldrb	r1, [r3, #2]
    7bdc:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    7be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7be4:	5499      	strb	r1, [r3, r2]
    7be6:	4b20      	ldr	r3, [pc, #128]	; (7c68 <send_boot+0x8dc>)
    7be8:	781a      	ldrb	r2, [r3, #0]
    7bea:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7bee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bf2:	781b      	ldrb	r3, [r3, #0]
    7bf4:	4413      	add	r3, r2
    7bf6:	b2da      	uxtb	r2, r3
    7bf8:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c00:	701a      	strb	r2, [r3, #0]
    7c02:	f64a 73ee 	movw	r3, #45038	; 0xafee
    7c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c0a:	781a      	ldrb	r2, [r3, #0]
    7c0c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7c10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c14:	781b      	ldrb	r3, [r3, #0]
    7c16:	4413      	add	r3, r2
    7c18:	b2da      	uxtb	r2, r3
    7c1a:	f64a 73ee 	movw	r3, #45038	; 0xafee
    7c1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c22:	701a      	strb	r2, [r3, #0]
    7c24:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7c28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c2c:	781b      	ldrb	r3, [r3, #0]
    7c2e:	3301      	adds	r3, #1
    7c30:	b2da      	uxtb	r2, r3
    7c32:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7c36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c3a:	701a      	strb	r2, [r3, #0]
    7c3c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c44:	781b      	ldrb	r3, [r3, #0]
    7c46:	2bff      	cmp	r3, #255	; 0xff
    7c48:	d110      	bne.n	7c6c <send_boot+0x8e0>
    7c4a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c52:	2200      	movs	r2, #0
    7c54:	701a      	strb	r2, [r3, #0]
    7c56:	e009      	b.n	7c6c <send_boot+0x8e0>
    7c58:	2000b4e1 	.word	0x2000b4e1
    7c5c:	2000b4e2 	.word	0x2000b4e2
    7c60:	2000b4e3 	.word	0x2000b4e3
    7c64:	2000b4e5 	.word	0x2000b4e5
    7c68:	2000b4e6 	.word	0x2000b4e6
    7c6c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7c70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c74:	781b      	ldrb	r3, [r3, #0]
    7c76:	461a      	mov	r2, r3
    7c78:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
    7c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c80:	78d9      	ldrb	r1, [r3, #3]
    7c82:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    7c86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c8a:	5499      	strb	r1, [r3, r2]
    7c8c:	4bd3      	ldr	r3, [pc, #844]	; (7fdc <send_boot+0xc50>)
    7c8e:	781a      	ldrb	r2, [r3, #0]
    7c90:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7c94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c98:	781b      	ldrb	r3, [r3, #0]
    7c9a:	4413      	add	r3, r2
    7c9c:	b2da      	uxtb	r2, r3
    7c9e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ca6:	701a      	strb	r2, [r3, #0]
    7ca8:	f64a 73ee 	movw	r3, #45038	; 0xafee
    7cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cb0:	781a      	ldrb	r2, [r3, #0]
    7cb2:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7cb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cba:	781b      	ldrb	r3, [r3, #0]
    7cbc:	4413      	add	r3, r2
    7cbe:	b2da      	uxtb	r2, r3
    7cc0:	f64a 73ee 	movw	r3, #45038	; 0xafee
    7cc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cc8:	701a      	strb	r2, [r3, #0]
    7cca:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7cce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cd2:	781b      	ldrb	r3, [r3, #0]
    7cd4:	3301      	adds	r3, #1
    7cd6:	b2da      	uxtb	r2, r3
    7cd8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7cdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ce0:	701a      	strb	r2, [r3, #0]
    7ce2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7ce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cea:	781b      	ldrb	r3, [r3, #0]
    7cec:	2bff      	cmp	r3, #255	; 0xff
    7cee:	d105      	bne.n	7cfc <send_boot+0x970>
    7cf0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cf8:	2200      	movs	r2, #0
    7cfa:	701a      	strb	r2, [r3, #0]
    7cfc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7d00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d04:	781b      	ldrb	r3, [r3, #0]
    7d06:	461a      	mov	r2, r3
    7d08:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
    7d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d10:	7819      	ldrb	r1, [r3, #0]
    7d12:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    7d16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d1a:	5499      	strb	r1, [r3, r2]
    7d1c:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
    7d20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d24:	781a      	ldrb	r2, [r3, #0]
    7d26:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7d2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d2e:	781b      	ldrb	r3, [r3, #0]
    7d30:	4413      	add	r3, r2
    7d32:	b2da      	uxtb	r2, r3
    7d34:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7d38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d3c:	701a      	strb	r2, [r3, #0]
    7d3e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    7d42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d46:	781a      	ldrb	r2, [r3, #0]
    7d48:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d50:	781b      	ldrb	r3, [r3, #0]
    7d52:	4413      	add	r3, r2
    7d54:	b2da      	uxtb	r2, r3
    7d56:	f64a 73ee 	movw	r3, #45038	; 0xafee
    7d5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d5e:	701a      	strb	r2, [r3, #0]
    7d60:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d68:	781b      	ldrb	r3, [r3, #0]
    7d6a:	3301      	adds	r3, #1
    7d6c:	b2da      	uxtb	r2, r3
    7d6e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7d72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d76:	701a      	strb	r2, [r3, #0]
    7d78:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d80:	781b      	ldrb	r3, [r3, #0]
    7d82:	2bff      	cmp	r3, #255	; 0xff
    7d84:	d105      	bne.n	7d92 <send_boot+0xa06>
    7d86:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d8e:	2200      	movs	r2, #0
    7d90:	701a      	strb	r2, [r3, #0]
    7d92:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d9a:	781b      	ldrb	r3, [r3, #0]
    7d9c:	461a      	mov	r2, r3
    7d9e:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
    7da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7da6:	7859      	ldrb	r1, [r3, #1]
    7da8:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    7dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7db0:	5499      	strb	r1, [r3, r2]
    7db2:	4b8b      	ldr	r3, [pc, #556]	; (7fe0 <send_boot+0xc54>)
    7db4:	781a      	ldrb	r2, [r3, #0]
    7db6:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dbe:	781b      	ldrb	r3, [r3, #0]
    7dc0:	4413      	add	r3, r2
    7dc2:	b2da      	uxtb	r2, r3
    7dc4:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dcc:	701a      	strb	r2, [r3, #0]
    7dce:	f64a 73ee 	movw	r3, #45038	; 0xafee
    7dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dd6:	781a      	ldrb	r2, [r3, #0]
    7dd8:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7ddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7de0:	781b      	ldrb	r3, [r3, #0]
    7de2:	4413      	add	r3, r2
    7de4:	b2da      	uxtb	r2, r3
    7de6:	f64a 73ee 	movw	r3, #45038	; 0xafee
    7dea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7dee:	701a      	strb	r2, [r3, #0]
    7df0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7df8:	781b      	ldrb	r3, [r3, #0]
    7dfa:	3301      	adds	r3, #1
    7dfc:	b2da      	uxtb	r2, r3
    7dfe:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e06:	701a      	strb	r2, [r3, #0]
    7e08:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7e0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e10:	781b      	ldrb	r3, [r3, #0]
    7e12:	2bff      	cmp	r3, #255	; 0xff
    7e14:	d105      	bne.n	7e22 <send_boot+0xa96>
    7e16:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e1e:	2200      	movs	r2, #0
    7e20:	701a      	strb	r2, [r3, #0]
    7e22:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7e26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e2a:	781b      	ldrb	r3, [r3, #0]
    7e2c:	461a      	mov	r2, r3
    7e2e:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
    7e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e36:	7899      	ldrb	r1, [r3, #2]
    7e38:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    7e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e40:	5499      	strb	r1, [r3, r2]
    7e42:	4b68      	ldr	r3, [pc, #416]	; (7fe4 <send_boot+0xc58>)
    7e44:	781a      	ldrb	r2, [r3, #0]
    7e46:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e4e:	781b      	ldrb	r3, [r3, #0]
    7e50:	4413      	add	r3, r2
    7e52:	b2da      	uxtb	r2, r3
    7e54:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7e58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e5c:	701a      	strb	r2, [r3, #0]
    7e5e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    7e62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e66:	781a      	ldrb	r2, [r3, #0]
    7e68:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e70:	781b      	ldrb	r3, [r3, #0]
    7e72:	4413      	add	r3, r2
    7e74:	b2da      	uxtb	r2, r3
    7e76:	f64a 73ee 	movw	r3, #45038	; 0xafee
    7e7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e7e:	701a      	strb	r2, [r3, #0]
    7e80:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e88:	781b      	ldrb	r3, [r3, #0]
    7e8a:	3301      	adds	r3, #1
    7e8c:	b2da      	uxtb	r2, r3
    7e8e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e96:	701a      	strb	r2, [r3, #0]
    7e98:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ea0:	781b      	ldrb	r3, [r3, #0]
    7ea2:	2bff      	cmp	r3, #255	; 0xff
    7ea4:	d105      	bne.n	7eb2 <send_boot+0xb26>
    7ea6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7eae:	2200      	movs	r2, #0
    7eb0:	701a      	strb	r2, [r3, #0]
    7eb2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7eb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7eba:	781b      	ldrb	r3, [r3, #0]
    7ebc:	461a      	mov	r2, r3
    7ebe:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
    7ec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ec6:	78d9      	ldrb	r1, [r3, #3]
    7ec8:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    7ecc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ed0:	5499      	strb	r1, [r3, r2]
    7ed2:	4b45      	ldr	r3, [pc, #276]	; (7fe8 <send_boot+0xc5c>)
    7ed4:	781a      	ldrb	r2, [r3, #0]
    7ed6:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7eda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ede:	781b      	ldrb	r3, [r3, #0]
    7ee0:	4413      	add	r3, r2
    7ee2:	b2da      	uxtb	r2, r3
    7ee4:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7ee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7eec:	701a      	strb	r2, [r3, #0]
    7eee:	f64a 73ee 	movw	r3, #45038	; 0xafee
    7ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ef6:	781a      	ldrb	r2, [r3, #0]
    7ef8:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7efc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f00:	781b      	ldrb	r3, [r3, #0]
    7f02:	4413      	add	r3, r2
    7f04:	b2da      	uxtb	r2, r3
    7f06:	f64a 73ee 	movw	r3, #45038	; 0xafee
    7f0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f0e:	701a      	strb	r2, [r3, #0]
    7f10:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f18:	781b      	ldrb	r3, [r3, #0]
    7f1a:	3301      	adds	r3, #1
    7f1c:	b2da      	uxtb	r2, r3
    7f1e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f26:	701a      	strb	r2, [r3, #0]
    7f28:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f30:	781b      	ldrb	r3, [r3, #0]
    7f32:	2bff      	cmp	r3, #255	; 0xff
    7f34:	d105      	bne.n	7f42 <send_boot+0xbb6>
    7f36:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f3e:	2200      	movs	r2, #0
    7f40:	701a      	strb	r2, [r3, #0]
    7f42:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f4a:	781b      	ldrb	r3, [r3, #0]
    7f4c:	461a      	mov	r2, r3
    7f4e:	f240 33f2 	movw	r3, #1010	; 0x3f2
    7f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f56:	7819      	ldrb	r1, [r3, #0]
    7f58:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    7f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f60:	5499      	strb	r1, [r3, r2]
    7f62:	f240 33f2 	movw	r3, #1010	; 0x3f2
    7f66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f6a:	781a      	ldrb	r2, [r3, #0]
    7f6c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7f70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f74:	781b      	ldrb	r3, [r3, #0]
    7f76:	4413      	add	r3, r2
    7f78:	b2da      	uxtb	r2, r3
    7f7a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7f7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f82:	701a      	strb	r2, [r3, #0]
    7f84:	f64a 73ee 	movw	r3, #45038	; 0xafee
    7f88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f8c:	781a      	ldrb	r2, [r3, #0]
    7f8e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    7f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7f96:	781b      	ldrb	r3, [r3, #0]
    7f98:	4413      	add	r3, r2
    7f9a:	b2da      	uxtb	r2, r3
    7f9c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    7fa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fa4:	701a      	strb	r2, [r3, #0]
    7fa6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fae:	781b      	ldrb	r3, [r3, #0]
    7fb0:	3301      	adds	r3, #1
    7fb2:	b2da      	uxtb	r2, r3
    7fb4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fbc:	701a      	strb	r2, [r3, #0]
    7fbe:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fc6:	781b      	ldrb	r3, [r3, #0]
    7fc8:	2bff      	cmp	r3, #255	; 0xff
    7fca:	d10f      	bne.n	7fec <send_boot+0xc60>
    7fcc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7fd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7fd4:	2200      	movs	r2, #0
    7fd6:	701a      	strb	r2, [r3, #0]
    7fd8:	e008      	b.n	7fec <send_boot+0xc60>
    7fda:	bf00      	nop
    7fdc:	2000b4e7 	.word	0x2000b4e7
    7fe0:	2000b4dd 	.word	0x2000b4dd
    7fe4:	2000b4de 	.word	0x2000b4de
    7fe8:	2000b4df 	.word	0x2000b4df
    7fec:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    7ff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ff4:	781b      	ldrb	r3, [r3, #0]
    7ff6:	461a      	mov	r2, r3
    7ff8:	f240 33f2 	movw	r3, #1010	; 0x3f2
    7ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8000:	7859      	ldrb	r1, [r3, #1]
    8002:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    8006:	f2c2 0300 	movt	r3, #8192	; 0x2000
    800a:	5499      	strb	r1, [r3, r2]
    800c:	4bc5      	ldr	r3, [pc, #788]	; (8324 <send_boot+0xf98>)
    800e:	781a      	ldrb	r2, [r3, #0]
    8010:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8014:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8018:	781b      	ldrb	r3, [r3, #0]
    801a:	4413      	add	r3, r2
    801c:	b2da      	uxtb	r2, r3
    801e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8026:	701a      	strb	r2, [r3, #0]
    8028:	f64a 73ee 	movw	r3, #45038	; 0xafee
    802c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8030:	781a      	ldrb	r2, [r3, #0]
    8032:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8036:	f2c2 0300 	movt	r3, #8192	; 0x2000
    803a:	781b      	ldrb	r3, [r3, #0]
    803c:	4413      	add	r3, r2
    803e:	b2da      	uxtb	r2, r3
    8040:	f64a 73ee 	movw	r3, #45038	; 0xafee
    8044:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8048:	701a      	strb	r2, [r3, #0]
    804a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    804e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8052:	781b      	ldrb	r3, [r3, #0]
    8054:	3301      	adds	r3, #1
    8056:	b2da      	uxtb	r2, r3
    8058:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    805c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8060:	701a      	strb	r2, [r3, #0]
    8062:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8066:	f2c2 0300 	movt	r3, #8192	; 0x2000
    806a:	781b      	ldrb	r3, [r3, #0]
    806c:	2bff      	cmp	r3, #255	; 0xff
    806e:	d105      	bne.n	807c <send_boot+0xcf0>
    8070:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8074:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8078:	2200      	movs	r2, #0
    807a:	701a      	strb	r2, [r3, #0]
    807c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8080:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8084:	781b      	ldrb	r3, [r3, #0]
    8086:	461a      	mov	r2, r3
    8088:	f240 33f4 	movw	r3, #1012	; 0x3f4
    808c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8090:	7819      	ldrb	r1, [r3, #0]
    8092:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    8096:	f2c2 0300 	movt	r3, #8192	; 0x2000
    809a:	5499      	strb	r1, [r3, r2]
    809c:	f240 33f4 	movw	r3, #1012	; 0x3f4
    80a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80a4:	781a      	ldrb	r2, [r3, #0]
    80a6:	f64a 73ed 	movw	r3, #45037	; 0xafed
    80aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80ae:	781b      	ldrb	r3, [r3, #0]
    80b0:	4413      	add	r3, r2
    80b2:	b2da      	uxtb	r2, r3
    80b4:	f64a 73ed 	movw	r3, #45037	; 0xafed
    80b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80bc:	701a      	strb	r2, [r3, #0]
    80be:	f64a 73ee 	movw	r3, #45038	; 0xafee
    80c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80c6:	781a      	ldrb	r2, [r3, #0]
    80c8:	f64a 73ed 	movw	r3, #45037	; 0xafed
    80cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80d0:	781b      	ldrb	r3, [r3, #0]
    80d2:	4413      	add	r3, r2
    80d4:	b2da      	uxtb	r2, r3
    80d6:	f64a 73ee 	movw	r3, #45038	; 0xafee
    80da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80de:	701a      	strb	r2, [r3, #0]
    80e0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    80e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80e8:	781b      	ldrb	r3, [r3, #0]
    80ea:	3301      	adds	r3, #1
    80ec:	b2da      	uxtb	r2, r3
    80ee:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    80f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    80f6:	701a      	strb	r2, [r3, #0]
    80f8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    80fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8100:	781b      	ldrb	r3, [r3, #0]
    8102:	2bff      	cmp	r3, #255	; 0xff
    8104:	d105      	bne.n	8112 <send_boot+0xd86>
    8106:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    810a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    810e:	2200      	movs	r2, #0
    8110:	701a      	strb	r2, [r3, #0]
    8112:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8116:	f2c2 0300 	movt	r3, #8192	; 0x2000
    811a:	781b      	ldrb	r3, [r3, #0]
    811c:	461a      	mov	r2, r3
    811e:	f240 33f4 	movw	r3, #1012	; 0x3f4
    8122:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8126:	7859      	ldrb	r1, [r3, #1]
    8128:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    812c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8130:	5499      	strb	r1, [r3, r2]
    8132:	4b7d      	ldr	r3, [pc, #500]	; (8328 <send_boot+0xf9c>)
    8134:	781a      	ldrb	r2, [r3, #0]
    8136:	f64a 73ed 	movw	r3, #45037	; 0xafed
    813a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    813e:	781b      	ldrb	r3, [r3, #0]
    8140:	4413      	add	r3, r2
    8142:	b2da      	uxtb	r2, r3
    8144:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8148:	f2c2 0300 	movt	r3, #8192	; 0x2000
    814c:	701a      	strb	r2, [r3, #0]
    814e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    8152:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8156:	781a      	ldrb	r2, [r3, #0]
    8158:	f64a 73ed 	movw	r3, #45037	; 0xafed
    815c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8160:	781b      	ldrb	r3, [r3, #0]
    8162:	4413      	add	r3, r2
    8164:	b2da      	uxtb	r2, r3
    8166:	f64a 73ee 	movw	r3, #45038	; 0xafee
    816a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    816e:	701a      	strb	r2, [r3, #0]
    8170:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8174:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8178:	781b      	ldrb	r3, [r3, #0]
    817a:	3301      	adds	r3, #1
    817c:	b2da      	uxtb	r2, r3
    817e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8182:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8186:	701a      	strb	r2, [r3, #0]
    8188:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    818c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8190:	781b      	ldrb	r3, [r3, #0]
    8192:	2bff      	cmp	r3, #255	; 0xff
    8194:	d105      	bne.n	81a2 <send_boot+0xe16>
    8196:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    819a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    819e:	2200      	movs	r2, #0
    81a0:	701a      	strb	r2, [r3, #0]
    81a2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    81a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81aa:	781b      	ldrb	r3, [r3, #0]
    81ac:	461a      	mov	r2, r3
    81ae:	f64a 73ed 	movw	r3, #45037	; 0xafed
    81b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81b6:	7819      	ldrb	r1, [r3, #0]
    81b8:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    81bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81c0:	5499      	strb	r1, [r3, r2]
    81c2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    81c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81ca:	781b      	ldrb	r3, [r3, #0]
    81cc:	3301      	adds	r3, #1
    81ce:	b2da      	uxtb	r2, r3
    81d0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    81d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81d8:	701a      	strb	r2, [r3, #0]
    81da:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    81de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81e2:	781b      	ldrb	r3, [r3, #0]
    81e4:	2bff      	cmp	r3, #255	; 0xff
    81e6:	d105      	bne.n	81f4 <send_boot+0xe68>
    81e8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    81ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81f0:	2200      	movs	r2, #0
    81f2:	701a      	strb	r2, [r3, #0]
    81f4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    81f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81fc:	781b      	ldrb	r3, [r3, #0]
    81fe:	461a      	mov	r2, r3
    8200:	f64a 73ee 	movw	r3, #45038	; 0xafee
    8204:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8208:	7819      	ldrb	r1, [r3, #0]
    820a:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    820e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8212:	5499      	strb	r1, [r3, r2]
    8214:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8218:	f2c2 0300 	movt	r3, #8192	; 0x2000
    821c:	781b      	ldrb	r3, [r3, #0]
    821e:	3301      	adds	r3, #1
    8220:	b2da      	uxtb	r2, r3
    8222:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    822a:	701a      	strb	r2, [r3, #0]
    822c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8230:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8234:	781b      	ldrb	r3, [r3, #0]
    8236:	2bff      	cmp	r3, #255	; 0xff
    8238:	d105      	bne.n	8246 <send_boot+0xeba>
    823a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    823e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8242:	2200      	movs	r2, #0
    8244:	701a      	strb	r2, [r3, #0]
    8246:	f242 0339 	movw	r3, #8249	; 0x2039
    824a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    824e:	781b      	ldrb	r3, [r3, #0]
    8250:	b2db      	uxtb	r3, r3
    8252:	f003 0310 	and.w	r3, r3, #16
    8256:	2b00      	cmp	r3, #0
    8258:	d15a      	bne.n	8310 <send_boot+0xf84>
    825a:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    825e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8262:	781b      	ldrb	r3, [r3, #0]
    8264:	b2db      	uxtb	r3, r3
    8266:	461a      	mov	r2, r3
    8268:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    826c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8270:	5c9a      	ldrb	r2, [r3, r2]
    8272:	f64a 73eb 	movw	r3, #45035	; 0xafeb
    8276:	f2c2 0300 	movt	r3, #8192	; 0x2000
    827a:	701a      	strb	r2, [r3, #0]
    827c:	f64a 73ec 	movw	r3, #45036	; 0xafec
    8280:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8284:	2200      	movs	r2, #0
    8286:	701a      	strb	r2, [r3, #0]
    8288:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    828c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8290:	781b      	ldrb	r3, [r3, #0]
    8292:	b2db      	uxtb	r3, r3
    8294:	3301      	adds	r3, #1
    8296:	b2da      	uxtb	r2, r3
    8298:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    829c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82a0:	701a      	strb	r2, [r3, #0]
    82a2:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    82a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82aa:	781b      	ldrb	r3, [r3, #0]
    82ac:	b2db      	uxtb	r3, r3
    82ae:	2bff      	cmp	r3, #255	; 0xff
    82b0:	d105      	bne.n	82be <send_boot+0xf32>
    82b2:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    82b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82ba:	2200      	movs	r2, #0
    82bc:	701a      	strb	r2, [r3, #0]
    82be:	f242 0338 	movw	r3, #8248	; 0x2038
    82c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82c6:	f242 0238 	movw	r2, #8248	; 0x2038
    82ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    82ce:	7812      	ldrb	r2, [r2, #0]
    82d0:	b2d2      	uxtb	r2, r2
    82d2:	f042 0201 	orr.w	r2, r2, #1
    82d6:	b2d2      	uxtb	r2, r2
    82d8:	701a      	strb	r2, [r3, #0]
    82da:	f242 0339 	movw	r3, #8249	; 0x2039
    82de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82e2:	f242 0239 	movw	r2, #8249	; 0x2039
    82e6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    82ea:	7812      	ldrb	r2, [r2, #0]
    82ec:	b2d2      	uxtb	r2, r2
    82ee:	f042 0210 	orr.w	r2, r2, #16
    82f2:	b2d2      	uxtb	r2, r2
    82f4:	701a      	strb	r2, [r3, #0]
    82f6:	e00b      	b.n	8310 <send_boot+0xf84>
    82f8:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    82fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8300:	781b      	ldrb	r3, [r3, #0]
    8302:	3301      	adds	r3, #1
    8304:	b2da      	uxtb	r2, r3
    8306:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    830a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    830e:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    8310:	f240 33ed 	movw	r3, #1005	; 0x3ed
    8314:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8318:	2200      	movs	r2, #0
    831a:	701a      	strb	r2, [r3, #0]
  }
}
    831c:	46bd      	mov	sp, r7
    831e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8322:	4770      	bx	lr
    8324:	200003f3 	.word	0x200003f3
    8328:	200003f5 	.word	0x200003f5

0000832c <send_attitude>:
void send_attitude(void){ //499ms
    832c:	b480      	push	{r7}
    832e:	af00      	add	r7, sp, #0
    // add by wanbo
  //if(!boot)
  {
    count++;
    8330:	f64a 63e1 	movw	r3, #44769	; 0xaee1
    8334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8338:	781b      	ldrb	r3, [r3, #0]
    833a:	3301      	adds	r3, #1
    833c:	b2da      	uxtb	r2, r3
    833e:	f64a 63e1 	movw	r3, #44769	; 0xaee1
    8342:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8346:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    8348:	f64a 63e1 	movw	r3, #44769	; 0xaee1
    834c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8350:	781b      	ldrb	r3, [r3, #0]
    8352:	2bfa      	cmp	r3, #250	; 0xfa
    8354:	d105      	bne.n	8362 <send_attitude+0x36>
    8356:	f64a 63e1 	movw	r3, #44769	; 0xaee1
    835a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    835e:	2200      	movs	r2, #0
    8360:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    8362:	f64a 63e1 	movw	r3, #44769	; 0xaee1
    8366:	f2c2 0300 	movt	r3, #8192	; 0x2000
    836a:	781a      	ldrb	r2, [r3, #0]
    836c:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8370:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8374:	fba3 1302 	umull	r1, r3, r3, r2
    8378:	0899      	lsrs	r1, r3, #2
    837a:	460b      	mov	r3, r1
    837c:	009b      	lsls	r3, r3, #2
    837e:	440b      	add	r3, r1
    8380:	1ad3      	subs	r3, r2, r3
    8382:	b2db      	uxtb	r3, r3
    8384:	2b00      	cmp	r3, #0
    8386:	f040 84c1 	bne.w	8d0c <send_attitude+0x9e0>
       PERIODIC_SEND_ATTITUDE(); 
    838a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    838e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8392:	781a      	ldrb	r2, [r3, #0]
    8394:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    8398:	f2c2 0300 	movt	r3, #8192	; 0x2000
    839c:	781b      	ldrb	r3, [r3, #0]
    839e:	b2db      	uxtb	r3, r3
    83a0:	429a      	cmp	r2, r3
    83a2:	d313      	bcc.n	83cc <send_attitude+0xa0>
    83a4:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    83a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83ac:	781b      	ldrb	r3, [r3, #0]
    83ae:	b2db      	uxtb	r3, r3
    83b0:	461a      	mov	r2, r3
    83b2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    83b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83ba:	781b      	ldrb	r3, [r3, #0]
    83bc:	1ad3      	subs	r3, r2, r3
    83be:	33ff      	adds	r3, #255	; 0xff
    83c0:	2b10      	cmp	r3, #16
    83c2:	bfd4      	ite	le
    83c4:	2300      	movle	r3, #0
    83c6:	2301      	movgt	r3, #1
    83c8:	b2db      	uxtb	r3, r3
    83ca:	e011      	b.n	83f0 <send_attitude+0xc4>
    83cc:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    83d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83d4:	781b      	ldrb	r3, [r3, #0]
    83d6:	b2db      	uxtb	r3, r3
    83d8:	461a      	mov	r2, r3
    83da:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    83de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83e2:	781b      	ldrb	r3, [r3, #0]
    83e4:	1ad3      	subs	r3, r2, r3
    83e6:	2b10      	cmp	r3, #16
    83e8:	bfd4      	ite	le
    83ea:	2300      	movle	r3, #0
    83ec:	2301      	movgt	r3, #1
    83ee:	b2db      	uxtb	r3, r3
    83f0:	2b00      	cmp	r3, #0
    83f2:	f000 847f 	beq.w	8cf4 <send_attitude+0x9c8>
    83f6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    83fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83fe:	781b      	ldrb	r3, [r3, #0]
    8400:	461a      	mov	r2, r3
    8402:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    8406:	f2c2 0300 	movt	r3, #8192	; 0x2000
    840a:	2105      	movs	r1, #5
    840c:	5499      	strb	r1, [r3, r2]
    840e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8412:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8416:	781b      	ldrb	r3, [r3, #0]
    8418:	3301      	adds	r3, #1
    841a:	b2da      	uxtb	r2, r3
    841c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8420:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8424:	701a      	strb	r2, [r3, #0]
    8426:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    842a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    842e:	781b      	ldrb	r3, [r3, #0]
    8430:	2bff      	cmp	r3, #255	; 0xff
    8432:	d105      	bne.n	8440 <send_attitude+0x114>
    8434:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8438:	f2c2 0300 	movt	r3, #8192	; 0x2000
    843c:	2200      	movs	r2, #0
    843e:	701a      	strb	r2, [r3, #0]
    8440:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8444:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8448:	781b      	ldrb	r3, [r3, #0]
    844a:	461a      	mov	r2, r3
    844c:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    8450:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8454:	2106      	movs	r1, #6
    8456:	5499      	strb	r1, [r3, r2]
    8458:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    845c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8460:	781b      	ldrb	r3, [r3, #0]
    8462:	3301      	adds	r3, #1
    8464:	b2da      	uxtb	r2, r3
    8466:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    846a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    846e:	701a      	strb	r2, [r3, #0]
    8470:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8474:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8478:	781b      	ldrb	r3, [r3, #0]
    847a:	2bff      	cmp	r3, #255	; 0xff
    847c:	d105      	bne.n	848a <send_attitude+0x15e>
    847e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8482:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8486:	2200      	movs	r2, #0
    8488:	701a      	strb	r2, [r3, #0]
    848a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    848e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8492:	2206      	movs	r2, #6
    8494:	701a      	strb	r2, [r3, #0]
    8496:	f64a 73ee 	movw	r3, #45038	; 0xafee
    849a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    849e:	2206      	movs	r2, #6
    84a0:	701a      	strb	r2, [r3, #0]
    84a2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    84a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84aa:	781b      	ldrb	r3, [r3, #0]
    84ac:	461a      	mov	r2, r3
    84ae:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
    84b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84b6:	7819      	ldrb	r1, [r3, #0]
    84b8:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    84bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84c0:	5499      	strb	r1, [r3, r2]
    84c2:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
    84c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84ca:	781a      	ldrb	r2, [r3, #0]
    84cc:	f64a 73ed 	movw	r3, #45037	; 0xafed
    84d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84d4:	781b      	ldrb	r3, [r3, #0]
    84d6:	4413      	add	r3, r2
    84d8:	b2da      	uxtb	r2, r3
    84da:	f64a 73ed 	movw	r3, #45037	; 0xafed
    84de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84e2:	701a      	strb	r2, [r3, #0]
    84e4:	f64a 73ee 	movw	r3, #45038	; 0xafee
    84e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84ec:	781a      	ldrb	r2, [r3, #0]
    84ee:	f64a 73ed 	movw	r3, #45037	; 0xafed
    84f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    84f6:	781b      	ldrb	r3, [r3, #0]
    84f8:	4413      	add	r3, r2
    84fa:	b2da      	uxtb	r2, r3
    84fc:	f64a 73ee 	movw	r3, #45038	; 0xafee
    8500:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8504:	701a      	strb	r2, [r3, #0]
    8506:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    850a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    850e:	781b      	ldrb	r3, [r3, #0]
    8510:	3301      	adds	r3, #1
    8512:	b2da      	uxtb	r2, r3
    8514:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8518:	f2c2 0300 	movt	r3, #8192	; 0x2000
    851c:	701a      	strb	r2, [r3, #0]
    851e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8522:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8526:	781b      	ldrb	r3, [r3, #0]
    8528:	2bff      	cmp	r3, #255	; 0xff
    852a:	d105      	bne.n	8538 <send_attitude+0x20c>
    852c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8530:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8534:	2200      	movs	r2, #0
    8536:	701a      	strb	r2, [r3, #0]
    8538:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    853c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8540:	781b      	ldrb	r3, [r3, #0]
    8542:	461a      	mov	r2, r3
    8544:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
    8548:	f2c2 0300 	movt	r3, #8192	; 0x2000
    854c:	7859      	ldrb	r1, [r3, #1]
    854e:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    8552:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8556:	5499      	strb	r1, [r3, r2]
    8558:	4bd1      	ldr	r3, [pc, #836]	; (88a0 <send_attitude+0x574>)
    855a:	781a      	ldrb	r2, [r3, #0]
    855c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8560:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8564:	781b      	ldrb	r3, [r3, #0]
    8566:	4413      	add	r3, r2
    8568:	b2da      	uxtb	r2, r3
    856a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    856e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8572:	701a      	strb	r2, [r3, #0]
    8574:	f64a 73ee 	movw	r3, #45038	; 0xafee
    8578:	f2c2 0300 	movt	r3, #8192	; 0x2000
    857c:	781a      	ldrb	r2, [r3, #0]
    857e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8582:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8586:	781b      	ldrb	r3, [r3, #0]
    8588:	4413      	add	r3, r2
    858a:	b2da      	uxtb	r2, r3
    858c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    8590:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8594:	701a      	strb	r2, [r3, #0]
    8596:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    859a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    859e:	781b      	ldrb	r3, [r3, #0]
    85a0:	3301      	adds	r3, #1
    85a2:	b2da      	uxtb	r2, r3
    85a4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    85a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85ac:	701a      	strb	r2, [r3, #0]
    85ae:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    85b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85b6:	781b      	ldrb	r3, [r3, #0]
    85b8:	2bff      	cmp	r3, #255	; 0xff
    85ba:	d105      	bne.n	85c8 <send_attitude+0x29c>
    85bc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    85c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85c4:	2200      	movs	r2, #0
    85c6:	701a      	strb	r2, [r3, #0]
    85c8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    85cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85d0:	781b      	ldrb	r3, [r3, #0]
    85d2:	461a      	mov	r2, r3
    85d4:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
    85d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85dc:	7899      	ldrb	r1, [r3, #2]
    85de:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    85e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85e6:	5499      	strb	r1, [r3, r2]
    85e8:	4bae      	ldr	r3, [pc, #696]	; (88a4 <send_attitude+0x578>)
    85ea:	781a      	ldrb	r2, [r3, #0]
    85ec:	f64a 73ed 	movw	r3, #45037	; 0xafed
    85f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85f4:	781b      	ldrb	r3, [r3, #0]
    85f6:	4413      	add	r3, r2
    85f8:	b2da      	uxtb	r2, r3
    85fa:	f64a 73ed 	movw	r3, #45037	; 0xafed
    85fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8602:	701a      	strb	r2, [r3, #0]
    8604:	f64a 73ee 	movw	r3, #45038	; 0xafee
    8608:	f2c2 0300 	movt	r3, #8192	; 0x2000
    860c:	781a      	ldrb	r2, [r3, #0]
    860e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8612:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8616:	781b      	ldrb	r3, [r3, #0]
    8618:	4413      	add	r3, r2
    861a:	b2da      	uxtb	r2, r3
    861c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    8620:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8624:	701a      	strb	r2, [r3, #0]
    8626:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    862a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    862e:	781b      	ldrb	r3, [r3, #0]
    8630:	3301      	adds	r3, #1
    8632:	b2da      	uxtb	r2, r3
    8634:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    863c:	701a      	strb	r2, [r3, #0]
    863e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8642:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8646:	781b      	ldrb	r3, [r3, #0]
    8648:	2bff      	cmp	r3, #255	; 0xff
    864a:	d105      	bne.n	8658 <send_attitude+0x32c>
    864c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8650:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8654:	2200      	movs	r2, #0
    8656:	701a      	strb	r2, [r3, #0]
    8658:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    865c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8660:	781b      	ldrb	r3, [r3, #0]
    8662:	461a      	mov	r2, r3
    8664:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
    8668:	f2c2 0300 	movt	r3, #8192	; 0x2000
    866c:	78d9      	ldrb	r1, [r3, #3]
    866e:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    8672:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8676:	5499      	strb	r1, [r3, r2]
    8678:	4b8b      	ldr	r3, [pc, #556]	; (88a8 <send_attitude+0x57c>)
    867a:	781a      	ldrb	r2, [r3, #0]
    867c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8680:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8684:	781b      	ldrb	r3, [r3, #0]
    8686:	4413      	add	r3, r2
    8688:	b2da      	uxtb	r2, r3
    868a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    868e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8692:	701a      	strb	r2, [r3, #0]
    8694:	f64a 73ee 	movw	r3, #45038	; 0xafee
    8698:	f2c2 0300 	movt	r3, #8192	; 0x2000
    869c:	781a      	ldrb	r2, [r3, #0]
    869e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    86a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86a6:	781b      	ldrb	r3, [r3, #0]
    86a8:	4413      	add	r3, r2
    86aa:	b2da      	uxtb	r2, r3
    86ac:	f64a 73ee 	movw	r3, #45038	; 0xafee
    86b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86b4:	701a      	strb	r2, [r3, #0]
    86b6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    86ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86be:	781b      	ldrb	r3, [r3, #0]
    86c0:	3301      	adds	r3, #1
    86c2:	b2da      	uxtb	r2, r3
    86c4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    86c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86cc:	701a      	strb	r2, [r3, #0]
    86ce:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    86d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86d6:	781b      	ldrb	r3, [r3, #0]
    86d8:	2bff      	cmp	r3, #255	; 0xff
    86da:	d105      	bne.n	86e8 <send_attitude+0x3bc>
    86dc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    86e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86e4:	2200      	movs	r2, #0
    86e6:	701a      	strb	r2, [r3, #0]
    86e8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    86ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86f0:	781b      	ldrb	r3, [r3, #0]
    86f2:	461a      	mov	r2, r3
    86f4:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
    86f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    86fc:	7819      	ldrb	r1, [r3, #0]
    86fe:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    8702:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8706:	5499      	strb	r1, [r3, r2]
    8708:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
    870c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8710:	781a      	ldrb	r2, [r3, #0]
    8712:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8716:	f2c2 0300 	movt	r3, #8192	; 0x2000
    871a:	781b      	ldrb	r3, [r3, #0]
    871c:	4413      	add	r3, r2
    871e:	b2da      	uxtb	r2, r3
    8720:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8728:	701a      	strb	r2, [r3, #0]
    872a:	f64a 73ee 	movw	r3, #45038	; 0xafee
    872e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8732:	781a      	ldrb	r2, [r3, #0]
    8734:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8738:	f2c2 0300 	movt	r3, #8192	; 0x2000
    873c:	781b      	ldrb	r3, [r3, #0]
    873e:	4413      	add	r3, r2
    8740:	b2da      	uxtb	r2, r3
    8742:	f64a 73ee 	movw	r3, #45038	; 0xafee
    8746:	f2c2 0300 	movt	r3, #8192	; 0x2000
    874a:	701a      	strb	r2, [r3, #0]
    874c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8750:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8754:	781b      	ldrb	r3, [r3, #0]
    8756:	3301      	adds	r3, #1
    8758:	b2da      	uxtb	r2, r3
    875a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    875e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8762:	701a      	strb	r2, [r3, #0]
    8764:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8768:	f2c2 0300 	movt	r3, #8192	; 0x2000
    876c:	781b      	ldrb	r3, [r3, #0]
    876e:	2bff      	cmp	r3, #255	; 0xff
    8770:	d105      	bne.n	877e <send_attitude+0x452>
    8772:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8776:	f2c2 0300 	movt	r3, #8192	; 0x2000
    877a:	2200      	movs	r2, #0
    877c:	701a      	strb	r2, [r3, #0]
    877e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8782:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8786:	781b      	ldrb	r3, [r3, #0]
    8788:	461a      	mov	r2, r3
    878a:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
    878e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8792:	7859      	ldrb	r1, [r3, #1]
    8794:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    8798:	f2c2 0300 	movt	r3, #8192	; 0x2000
    879c:	5499      	strb	r1, [r3, r2]
    879e:	4b43      	ldr	r3, [pc, #268]	; (88ac <send_attitude+0x580>)
    87a0:	781a      	ldrb	r2, [r3, #0]
    87a2:	f64a 73ed 	movw	r3, #45037	; 0xafed
    87a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87aa:	781b      	ldrb	r3, [r3, #0]
    87ac:	4413      	add	r3, r2
    87ae:	b2da      	uxtb	r2, r3
    87b0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    87b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87b8:	701a      	strb	r2, [r3, #0]
    87ba:	f64a 73ee 	movw	r3, #45038	; 0xafee
    87be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87c2:	781a      	ldrb	r2, [r3, #0]
    87c4:	f64a 73ed 	movw	r3, #45037	; 0xafed
    87c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87cc:	781b      	ldrb	r3, [r3, #0]
    87ce:	4413      	add	r3, r2
    87d0:	b2da      	uxtb	r2, r3
    87d2:	f64a 73ee 	movw	r3, #45038	; 0xafee
    87d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87da:	701a      	strb	r2, [r3, #0]
    87dc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    87e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87e4:	781b      	ldrb	r3, [r3, #0]
    87e6:	3301      	adds	r3, #1
    87e8:	b2da      	uxtb	r2, r3
    87ea:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    87ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87f2:	701a      	strb	r2, [r3, #0]
    87f4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    87f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    87fc:	781b      	ldrb	r3, [r3, #0]
    87fe:	2bff      	cmp	r3, #255	; 0xff
    8800:	d105      	bne.n	880e <send_attitude+0x4e2>
    8802:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    880a:	2200      	movs	r2, #0
    880c:	701a      	strb	r2, [r3, #0]
    880e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8816:	781b      	ldrb	r3, [r3, #0]
    8818:	461a      	mov	r2, r3
    881a:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
    881e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8822:	7899      	ldrb	r1, [r3, #2]
    8824:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    8828:	f2c2 0300 	movt	r3, #8192	; 0x2000
    882c:	5499      	strb	r1, [r3, r2]
    882e:	4b20      	ldr	r3, [pc, #128]	; (88b0 <send_attitude+0x584>)
    8830:	781a      	ldrb	r2, [r3, #0]
    8832:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8836:	f2c2 0300 	movt	r3, #8192	; 0x2000
    883a:	781b      	ldrb	r3, [r3, #0]
    883c:	4413      	add	r3, r2
    883e:	b2da      	uxtb	r2, r3
    8840:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8844:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8848:	701a      	strb	r2, [r3, #0]
    884a:	f64a 73ee 	movw	r3, #45038	; 0xafee
    884e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8852:	781a      	ldrb	r2, [r3, #0]
    8854:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8858:	f2c2 0300 	movt	r3, #8192	; 0x2000
    885c:	781b      	ldrb	r3, [r3, #0]
    885e:	4413      	add	r3, r2
    8860:	b2da      	uxtb	r2, r3
    8862:	f64a 73ee 	movw	r3, #45038	; 0xafee
    8866:	f2c2 0300 	movt	r3, #8192	; 0x2000
    886a:	701a      	strb	r2, [r3, #0]
    886c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8870:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8874:	781b      	ldrb	r3, [r3, #0]
    8876:	3301      	adds	r3, #1
    8878:	b2da      	uxtb	r2, r3
    887a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    887e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8882:	701a      	strb	r2, [r3, #0]
    8884:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8888:	f2c2 0300 	movt	r3, #8192	; 0x2000
    888c:	781b      	ldrb	r3, [r3, #0]
    888e:	2bff      	cmp	r3, #255	; 0xff
    8890:	d110      	bne.n	88b4 <send_attitude+0x588>
    8892:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8896:	f2c2 0300 	movt	r3, #8192	; 0x2000
    889a:	2200      	movs	r2, #0
    889c:	701a      	strb	r2, [r3, #0]
    889e:	e009      	b.n	88b4 <send_attitude+0x588>
    88a0:	2000b4a9 	.word	0x2000b4a9
    88a4:	2000b4aa 	.word	0x2000b4aa
    88a8:	2000b4ab 	.word	0x2000b4ab
    88ac:	2000b4ad 	.word	0x2000b4ad
    88b0:	2000b4ae 	.word	0x2000b4ae
    88b4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    88b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88bc:	781b      	ldrb	r3, [r3, #0]
    88be:	461a      	mov	r2, r3
    88c0:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
    88c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88c8:	78d9      	ldrb	r1, [r3, #3]
    88ca:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    88ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88d2:	5499      	strb	r1, [r3, r2]
    88d4:	4bc2      	ldr	r3, [pc, #776]	; (8be0 <send_attitude+0x8b4>)
    88d6:	781a      	ldrb	r2, [r3, #0]
    88d8:	f64a 73ed 	movw	r3, #45037	; 0xafed
    88dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88e0:	781b      	ldrb	r3, [r3, #0]
    88e2:	4413      	add	r3, r2
    88e4:	b2da      	uxtb	r2, r3
    88e6:	f64a 73ed 	movw	r3, #45037	; 0xafed
    88ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88ee:	701a      	strb	r2, [r3, #0]
    88f0:	f64a 73ee 	movw	r3, #45038	; 0xafee
    88f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    88f8:	781a      	ldrb	r2, [r3, #0]
    88fa:	f64a 73ed 	movw	r3, #45037	; 0xafed
    88fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8902:	781b      	ldrb	r3, [r3, #0]
    8904:	4413      	add	r3, r2
    8906:	b2da      	uxtb	r2, r3
    8908:	f64a 73ee 	movw	r3, #45038	; 0xafee
    890c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8910:	701a      	strb	r2, [r3, #0]
    8912:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8916:	f2c2 0300 	movt	r3, #8192	; 0x2000
    891a:	781b      	ldrb	r3, [r3, #0]
    891c:	3301      	adds	r3, #1
    891e:	b2da      	uxtb	r2, r3
    8920:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8924:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8928:	701a      	strb	r2, [r3, #0]
    892a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    892e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8932:	781b      	ldrb	r3, [r3, #0]
    8934:	2bff      	cmp	r3, #255	; 0xff
    8936:	d105      	bne.n	8944 <send_attitude+0x618>
    8938:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    893c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8940:	2200      	movs	r2, #0
    8942:	701a      	strb	r2, [r3, #0]
    8944:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8948:	f2c2 0300 	movt	r3, #8192	; 0x2000
    894c:	781b      	ldrb	r3, [r3, #0]
    894e:	461a      	mov	r2, r3
    8950:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
    8954:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8958:	7819      	ldrb	r1, [r3, #0]
    895a:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    895e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8962:	5499      	strb	r1, [r3, r2]
    8964:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
    8968:	f2c2 0300 	movt	r3, #8192	; 0x2000
    896c:	781a      	ldrb	r2, [r3, #0]
    896e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8972:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8976:	781b      	ldrb	r3, [r3, #0]
    8978:	4413      	add	r3, r2
    897a:	b2da      	uxtb	r2, r3
    897c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8980:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8984:	701a      	strb	r2, [r3, #0]
    8986:	f64a 73ee 	movw	r3, #45038	; 0xafee
    898a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    898e:	781a      	ldrb	r2, [r3, #0]
    8990:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8998:	781b      	ldrb	r3, [r3, #0]
    899a:	4413      	add	r3, r2
    899c:	b2da      	uxtb	r2, r3
    899e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    89a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89a6:	701a      	strb	r2, [r3, #0]
    89a8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    89ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89b0:	781b      	ldrb	r3, [r3, #0]
    89b2:	3301      	adds	r3, #1
    89b4:	b2da      	uxtb	r2, r3
    89b6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    89ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89be:	701a      	strb	r2, [r3, #0]
    89c0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    89c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89c8:	781b      	ldrb	r3, [r3, #0]
    89ca:	2bff      	cmp	r3, #255	; 0xff
    89cc:	d105      	bne.n	89da <send_attitude+0x6ae>
    89ce:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    89d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89d6:	2200      	movs	r2, #0
    89d8:	701a      	strb	r2, [r3, #0]
    89da:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    89de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89e2:	781b      	ldrb	r3, [r3, #0]
    89e4:	461a      	mov	r2, r3
    89e6:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
    89ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89ee:	7859      	ldrb	r1, [r3, #1]
    89f0:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    89f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89f8:	5499      	strb	r1, [r3, r2]
    89fa:	4b7a      	ldr	r3, [pc, #488]	; (8be4 <send_attitude+0x8b8>)
    89fc:	781a      	ldrb	r2, [r3, #0]
    89fe:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8a02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a06:	781b      	ldrb	r3, [r3, #0]
    8a08:	4413      	add	r3, r2
    8a0a:	b2da      	uxtb	r2, r3
    8a0c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8a10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a14:	701a      	strb	r2, [r3, #0]
    8a16:	f64a 73ee 	movw	r3, #45038	; 0xafee
    8a1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a1e:	781a      	ldrb	r2, [r3, #0]
    8a20:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8a24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a28:	781b      	ldrb	r3, [r3, #0]
    8a2a:	4413      	add	r3, r2
    8a2c:	b2da      	uxtb	r2, r3
    8a2e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    8a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a36:	701a      	strb	r2, [r3, #0]
    8a38:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a40:	781b      	ldrb	r3, [r3, #0]
    8a42:	3301      	adds	r3, #1
    8a44:	b2da      	uxtb	r2, r3
    8a46:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a4e:	701a      	strb	r2, [r3, #0]
    8a50:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a58:	781b      	ldrb	r3, [r3, #0]
    8a5a:	2bff      	cmp	r3, #255	; 0xff
    8a5c:	d105      	bne.n	8a6a <send_attitude+0x73e>
    8a5e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a66:	2200      	movs	r2, #0
    8a68:	701a      	strb	r2, [r3, #0]
    8a6a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a72:	781b      	ldrb	r3, [r3, #0]
    8a74:	461a      	mov	r2, r3
    8a76:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
    8a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a7e:	7899      	ldrb	r1, [r3, #2]
    8a80:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    8a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a88:	5499      	strb	r1, [r3, r2]
    8a8a:	4b57      	ldr	r3, [pc, #348]	; (8be8 <send_attitude+0x8bc>)
    8a8c:	781a      	ldrb	r2, [r3, #0]
    8a8e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8a92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8a96:	781b      	ldrb	r3, [r3, #0]
    8a98:	4413      	add	r3, r2
    8a9a:	b2da      	uxtb	r2, r3
    8a9c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8aa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8aa4:	701a      	strb	r2, [r3, #0]
    8aa6:	f64a 73ee 	movw	r3, #45038	; 0xafee
    8aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8aae:	781a      	ldrb	r2, [r3, #0]
    8ab0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ab8:	781b      	ldrb	r3, [r3, #0]
    8aba:	4413      	add	r3, r2
    8abc:	b2da      	uxtb	r2, r3
    8abe:	f64a 73ee 	movw	r3, #45038	; 0xafee
    8ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ac6:	701a      	strb	r2, [r3, #0]
    8ac8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ad0:	781b      	ldrb	r3, [r3, #0]
    8ad2:	3301      	adds	r3, #1
    8ad4:	b2da      	uxtb	r2, r3
    8ad6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8ada:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ade:	701a      	strb	r2, [r3, #0]
    8ae0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ae8:	781b      	ldrb	r3, [r3, #0]
    8aea:	2bff      	cmp	r3, #255	; 0xff
    8aec:	d105      	bne.n	8afa <send_attitude+0x7ce>
    8aee:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8af6:	2200      	movs	r2, #0
    8af8:	701a      	strb	r2, [r3, #0]
    8afa:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b02:	781b      	ldrb	r3, [r3, #0]
    8b04:	461a      	mov	r2, r3
    8b06:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
    8b0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b0e:	78d9      	ldrb	r1, [r3, #3]
    8b10:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    8b14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b18:	5499      	strb	r1, [r3, r2]
    8b1a:	4b34      	ldr	r3, [pc, #208]	; (8bec <send_attitude+0x8c0>)
    8b1c:	781a      	ldrb	r2, [r3, #0]
    8b1e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b26:	781b      	ldrb	r3, [r3, #0]
    8b28:	4413      	add	r3, r2
    8b2a:	b2da      	uxtb	r2, r3
    8b2c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b34:	701a      	strb	r2, [r3, #0]
    8b36:	f64a 73ee 	movw	r3, #45038	; 0xafee
    8b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b3e:	781a      	ldrb	r2, [r3, #0]
    8b40:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8b44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b48:	781b      	ldrb	r3, [r3, #0]
    8b4a:	4413      	add	r3, r2
    8b4c:	b2da      	uxtb	r2, r3
    8b4e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    8b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b56:	701a      	strb	r2, [r3, #0]
    8b58:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8b5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b60:	781b      	ldrb	r3, [r3, #0]
    8b62:	3301      	adds	r3, #1
    8b64:	b2da      	uxtb	r2, r3
    8b66:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8b6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b6e:	701a      	strb	r2, [r3, #0]
    8b70:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b78:	781b      	ldrb	r3, [r3, #0]
    8b7a:	2bff      	cmp	r3, #255	; 0xff
    8b7c:	d105      	bne.n	8b8a <send_attitude+0x85e>
    8b7e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b86:	2200      	movs	r2, #0
    8b88:	701a      	strb	r2, [r3, #0]
    8b8a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8b8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b92:	781b      	ldrb	r3, [r3, #0]
    8b94:	461a      	mov	r2, r3
    8b96:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8b9e:	7819      	ldrb	r1, [r3, #0]
    8ba0:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    8ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ba8:	5499      	strb	r1, [r3, r2]
    8baa:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bb2:	781b      	ldrb	r3, [r3, #0]
    8bb4:	3301      	adds	r3, #1
    8bb6:	b2da      	uxtb	r2, r3
    8bb8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8bbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bc0:	701a      	strb	r2, [r3, #0]
    8bc2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bca:	781b      	ldrb	r3, [r3, #0]
    8bcc:	2bff      	cmp	r3, #255	; 0xff
    8bce:	d10f      	bne.n	8bf0 <send_attitude+0x8c4>
    8bd0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bd8:	2200      	movs	r2, #0
    8bda:	701a      	strb	r2, [r3, #0]
    8bdc:	e008      	b.n	8bf0 <send_attitude+0x8c4>
    8bde:	bf00      	nop
    8be0:	2000b4af 	.word	0x2000b4af
    8be4:	2000b4b1 	.word	0x2000b4b1
    8be8:	2000b4b2 	.word	0x2000b4b2
    8bec:	2000b4b3 	.word	0x2000b4b3
    8bf0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bf8:	781b      	ldrb	r3, [r3, #0]
    8bfa:	461a      	mov	r2, r3
    8bfc:	f64a 73ee 	movw	r3, #45038	; 0xafee
    8c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c04:	7819      	ldrb	r1, [r3, #0]
    8c06:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    8c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c0e:	5499      	strb	r1, [r3, r2]
    8c10:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c18:	781b      	ldrb	r3, [r3, #0]
    8c1a:	3301      	adds	r3, #1
    8c1c:	b2da      	uxtb	r2, r3
    8c1e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c26:	701a      	strb	r2, [r3, #0]
    8c28:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8c2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c30:	781b      	ldrb	r3, [r3, #0]
    8c32:	2bff      	cmp	r3, #255	; 0xff
    8c34:	d105      	bne.n	8c42 <send_attitude+0x916>
    8c36:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8c3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c3e:	2200      	movs	r2, #0
    8c40:	701a      	strb	r2, [r3, #0]
    8c42:	f242 0339 	movw	r3, #8249	; 0x2039
    8c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c4a:	781b      	ldrb	r3, [r3, #0]
    8c4c:	b2db      	uxtb	r3, r3
    8c4e:	f003 0310 	and.w	r3, r3, #16
    8c52:	2b00      	cmp	r3, #0
    8c54:	d15a      	bne.n	8d0c <send_attitude+0x9e0>
    8c56:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    8c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c5e:	781b      	ldrb	r3, [r3, #0]
    8c60:	b2db      	uxtb	r3, r3
    8c62:	461a      	mov	r2, r3
    8c64:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    8c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c6c:	5c9a      	ldrb	r2, [r3, r2]
    8c6e:	f64a 73eb 	movw	r3, #45035	; 0xafeb
    8c72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c76:	701a      	strb	r2, [r3, #0]
    8c78:	f64a 73ec 	movw	r3, #45036	; 0xafec
    8c7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c80:	2200      	movs	r2, #0
    8c82:	701a      	strb	r2, [r3, #0]
    8c84:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    8c88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c8c:	781b      	ldrb	r3, [r3, #0]
    8c8e:	b2db      	uxtb	r3, r3
    8c90:	3301      	adds	r3, #1
    8c92:	b2da      	uxtb	r2, r3
    8c94:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    8c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8c9c:	701a      	strb	r2, [r3, #0]
    8c9e:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    8ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ca6:	781b      	ldrb	r3, [r3, #0]
    8ca8:	b2db      	uxtb	r3, r3
    8caa:	2bff      	cmp	r3, #255	; 0xff
    8cac:	d105      	bne.n	8cba <send_attitude+0x98e>
    8cae:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    8cb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cb6:	2200      	movs	r2, #0
    8cb8:	701a      	strb	r2, [r3, #0]
    8cba:	f242 0338 	movw	r3, #8248	; 0x2038
    8cbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cc2:	f242 0238 	movw	r2, #8248	; 0x2038
    8cc6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8cca:	7812      	ldrb	r2, [r2, #0]
    8ccc:	b2d2      	uxtb	r2, r2
    8cce:	f042 0201 	orr.w	r2, r2, #1
    8cd2:	b2d2      	uxtb	r2, r2
    8cd4:	701a      	strb	r2, [r3, #0]
    8cd6:	f242 0339 	movw	r3, #8249	; 0x2039
    8cda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cde:	f242 0239 	movw	r2, #8249	; 0x2039
    8ce2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8ce6:	7812      	ldrb	r2, [r2, #0]
    8ce8:	b2d2      	uxtb	r2, r2
    8cea:	f042 0210 	orr.w	r2, r2, #16
    8cee:	b2d2      	uxtb	r2, r2
    8cf0:	701a      	strb	r2, [r3, #0]
    8cf2:	e00b      	b.n	8d0c <send_attitude+0x9e0>
    8cf4:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    8cf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8cfc:	781b      	ldrb	r3, [r3, #0]
    8cfe:	3301      	adds	r3, #1
    8d00:	b2da      	uxtb	r2, r3
    8d02:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    8d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d0a:	701a      	strb	r2, [r3, #0]
  }
}
    8d0c:	46bd      	mov	sp, r7
    8d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d12:	4770      	bx	lr

00008d14 <send_adc>:
  
void send_adc(void){  //500ms
    8d14:	b480      	push	{r7}
    8d16:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    8d18:	f64a 63e1 	movw	r3, #44769	; 0xaee1
    8d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d20:	781a      	ldrb	r2, [r3, #0]
    8d22:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8d26:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8d2a:	fba3 1302 	umull	r1, r3, r3, r2
    8d2e:	0899      	lsrs	r1, r3, #2
    8d30:	460b      	mov	r3, r1
    8d32:	009b      	lsls	r3, r3, #2
    8d34:	440b      	add	r3, r1
    8d36:	1ad3      	subs	r3, r2, r3
    8d38:	b2db      	uxtb	r3, r3
    8d3a:	2b01      	cmp	r3, #1
    8d3c:	f040 8269 	bne.w	9212 <send_adc+0x4fe>
    8d40:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d48:	781a      	ldrb	r2, [r3, #0]
    8d4a:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    8d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d52:	781b      	ldrb	r3, [r3, #0]
    8d54:	b2db      	uxtb	r3, r3
    8d56:	429a      	cmp	r2, r3
    8d58:	d313      	bcc.n	8d82 <send_adc+0x6e>
    8d5a:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    8d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d62:	781b      	ldrb	r3, [r3, #0]
    8d64:	b2db      	uxtb	r3, r3
    8d66:	461a      	mov	r2, r3
    8d68:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d70:	781b      	ldrb	r3, [r3, #0]
    8d72:	1ad3      	subs	r3, r2, r3
    8d74:	33ff      	adds	r3, #255	; 0xff
    8d76:	2b08      	cmp	r3, #8
    8d78:	bfd4      	ite	le
    8d7a:	2300      	movle	r3, #0
    8d7c:	2301      	movgt	r3, #1
    8d7e:	b2db      	uxtb	r3, r3
    8d80:	e011      	b.n	8da6 <send_adc+0x92>
    8d82:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    8d86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d8a:	781b      	ldrb	r3, [r3, #0]
    8d8c:	b2db      	uxtb	r3, r3
    8d8e:	461a      	mov	r2, r3
    8d90:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8d94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d98:	781b      	ldrb	r3, [r3, #0]
    8d9a:	1ad3      	subs	r3, r2, r3
    8d9c:	2b08      	cmp	r3, #8
    8d9e:	bfd4      	ite	le
    8da0:	2300      	movle	r3, #0
    8da2:	2301      	movgt	r3, #1
    8da4:	b2db      	uxtb	r3, r3
    8da6:	2b00      	cmp	r3, #0
    8da8:	f000 8227 	beq.w	91fa <send_adc+0x4e6>
    8dac:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8db4:	781b      	ldrb	r3, [r3, #0]
    8db6:	461a      	mov	r2, r3
    8db8:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    8dbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dc0:	2105      	movs	r1, #5
    8dc2:	5499      	strb	r1, [r3, r2]
    8dc4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dcc:	781b      	ldrb	r3, [r3, #0]
    8dce:	3301      	adds	r3, #1
    8dd0:	b2da      	uxtb	r2, r3
    8dd2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8dd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dda:	701a      	strb	r2, [r3, #0]
    8ddc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8de0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8de4:	781b      	ldrb	r3, [r3, #0]
    8de6:	2bff      	cmp	r3, #255	; 0xff
    8de8:	d105      	bne.n	8df6 <send_adc+0xe2>
    8dea:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8df2:	2200      	movs	r2, #0
    8df4:	701a      	strb	r2, [r3, #0]
    8df6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8dfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8dfe:	781b      	ldrb	r3, [r3, #0]
    8e00:	461a      	mov	r2, r3
    8e02:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    8e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e0a:	2107      	movs	r1, #7
    8e0c:	5499      	strb	r1, [r3, r2]
    8e0e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8e12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e16:	781b      	ldrb	r3, [r3, #0]
    8e18:	3301      	adds	r3, #1
    8e1a:	b2da      	uxtb	r2, r3
    8e1c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e24:	701a      	strb	r2, [r3, #0]
    8e26:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e2e:	781b      	ldrb	r3, [r3, #0]
    8e30:	2bff      	cmp	r3, #255	; 0xff
    8e32:	d105      	bne.n	8e40 <send_adc+0x12c>
    8e34:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e3c:	2200      	movs	r2, #0
    8e3e:	701a      	strb	r2, [r3, #0]
    8e40:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e48:	2207      	movs	r2, #7
    8e4a:	701a      	strb	r2, [r3, #0]
    8e4c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    8e50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e54:	2207      	movs	r2, #7
    8e56:	701a      	strb	r2, [r3, #0]
    8e58:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e60:	781b      	ldrb	r3, [r3, #0]
    8e62:	461a      	mov	r2, r3
    8e64:	f24b 1388 	movw	r3, #45448	; 0xb188
    8e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e6c:	7819      	ldrb	r1, [r3, #0]
    8e6e:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    8e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e76:	5499      	strb	r1, [r3, r2]
    8e78:	f24b 1388 	movw	r3, #45448	; 0xb188
    8e7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e80:	781a      	ldrb	r2, [r3, #0]
    8e82:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8e86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e8a:	781b      	ldrb	r3, [r3, #0]
    8e8c:	4413      	add	r3, r2
    8e8e:	b2da      	uxtb	r2, r3
    8e90:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e98:	701a      	strb	r2, [r3, #0]
    8e9a:	f64a 73ee 	movw	r3, #45038	; 0xafee
    8e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ea2:	781a      	ldrb	r2, [r3, #0]
    8ea4:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8eac:	781b      	ldrb	r3, [r3, #0]
    8eae:	4413      	add	r3, r2
    8eb0:	b2da      	uxtb	r2, r3
    8eb2:	f64a 73ee 	movw	r3, #45038	; 0xafee
    8eb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8eba:	701a      	strb	r2, [r3, #0]
    8ebc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8ec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ec4:	781b      	ldrb	r3, [r3, #0]
    8ec6:	3301      	adds	r3, #1
    8ec8:	b2da      	uxtb	r2, r3
    8eca:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8ece:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ed2:	701a      	strb	r2, [r3, #0]
    8ed4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8ed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8edc:	781b      	ldrb	r3, [r3, #0]
    8ede:	2bff      	cmp	r3, #255	; 0xff
    8ee0:	d105      	bne.n	8eee <send_adc+0x1da>
    8ee2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8eea:	2200      	movs	r2, #0
    8eec:	701a      	strb	r2, [r3, #0]
    8eee:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8ef2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ef6:	781b      	ldrb	r3, [r3, #0]
    8ef8:	461a      	mov	r2, r3
    8efa:	f24b 1388 	movw	r3, #45448	; 0xb188
    8efe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f02:	7859      	ldrb	r1, [r3, #1]
    8f04:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    8f08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f0c:	5499      	strb	r1, [r3, r2]
    8f0e:	4bc3      	ldr	r3, [pc, #780]	; (921c <send_adc+0x508>)
    8f10:	781a      	ldrb	r2, [r3, #0]
    8f12:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8f16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f1a:	781b      	ldrb	r3, [r3, #0]
    8f1c:	4413      	add	r3, r2
    8f1e:	b2da      	uxtb	r2, r3
    8f20:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8f24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f28:	701a      	strb	r2, [r3, #0]
    8f2a:	f64a 73ee 	movw	r3, #45038	; 0xafee
    8f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f32:	781a      	ldrb	r2, [r3, #0]
    8f34:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f3c:	781b      	ldrb	r3, [r3, #0]
    8f3e:	4413      	add	r3, r2
    8f40:	b2da      	uxtb	r2, r3
    8f42:	f64a 73ee 	movw	r3, #45038	; 0xafee
    8f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f4a:	701a      	strb	r2, [r3, #0]
    8f4c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8f50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f54:	781b      	ldrb	r3, [r3, #0]
    8f56:	3301      	adds	r3, #1
    8f58:	b2da      	uxtb	r2, r3
    8f5a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8f5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f62:	701a      	strb	r2, [r3, #0]
    8f64:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8f68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f6c:	781b      	ldrb	r3, [r3, #0]
    8f6e:	2bff      	cmp	r3, #255	; 0xff
    8f70:	d105      	bne.n	8f7e <send_adc+0x26a>
    8f72:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8f76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f7a:	2200      	movs	r2, #0
    8f7c:	701a      	strb	r2, [r3, #0]
    8f7e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f86:	781b      	ldrb	r3, [r3, #0]
    8f88:	461a      	mov	r2, r3
    8f8a:	f24b 138a 	movw	r3, #45450	; 0xb18a
    8f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f92:	7819      	ldrb	r1, [r3, #0]
    8f94:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    8f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f9c:	5499      	strb	r1, [r3, r2]
    8f9e:	f24b 138a 	movw	r3, #45450	; 0xb18a
    8fa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fa6:	781a      	ldrb	r2, [r3, #0]
    8fa8:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fb0:	781b      	ldrb	r3, [r3, #0]
    8fb2:	4413      	add	r3, r2
    8fb4:	b2da      	uxtb	r2, r3
    8fb6:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8fba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fbe:	701a      	strb	r2, [r3, #0]
    8fc0:	f64a 73ee 	movw	r3, #45038	; 0xafee
    8fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fc8:	781a      	ldrb	r2, [r3, #0]
    8fca:	f64a 73ed 	movw	r3, #45037	; 0xafed
    8fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fd2:	781b      	ldrb	r3, [r3, #0]
    8fd4:	4413      	add	r3, r2
    8fd6:	b2da      	uxtb	r2, r3
    8fd8:	f64a 73ee 	movw	r3, #45038	; 0xafee
    8fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fe0:	701a      	strb	r2, [r3, #0]
    8fe2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fea:	781b      	ldrb	r3, [r3, #0]
    8fec:	3301      	adds	r3, #1
    8fee:	b2da      	uxtb	r2, r3
    8ff0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8ff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ff8:	701a      	strb	r2, [r3, #0]
    8ffa:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    8ffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9002:	781b      	ldrb	r3, [r3, #0]
    9004:	2bff      	cmp	r3, #255	; 0xff
    9006:	d105      	bne.n	9014 <send_adc+0x300>
    9008:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    900c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9010:	2200      	movs	r2, #0
    9012:	701a      	strb	r2, [r3, #0]
    9014:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9018:	f2c2 0300 	movt	r3, #8192	; 0x2000
    901c:	781b      	ldrb	r3, [r3, #0]
    901e:	461a      	mov	r2, r3
    9020:	f24b 138a 	movw	r3, #45450	; 0xb18a
    9024:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9028:	7859      	ldrb	r1, [r3, #1]
    902a:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    902e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9032:	5499      	strb	r1, [r3, r2]
    9034:	4b7a      	ldr	r3, [pc, #488]	; (9220 <send_adc+0x50c>)
    9036:	781a      	ldrb	r2, [r3, #0]
    9038:	f64a 73ed 	movw	r3, #45037	; 0xafed
    903c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9040:	781b      	ldrb	r3, [r3, #0]
    9042:	4413      	add	r3, r2
    9044:	b2da      	uxtb	r2, r3
    9046:	f64a 73ed 	movw	r3, #45037	; 0xafed
    904a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    904e:	701a      	strb	r2, [r3, #0]
    9050:	f64a 73ee 	movw	r3, #45038	; 0xafee
    9054:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9058:	781a      	ldrb	r2, [r3, #0]
    905a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    905e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9062:	781b      	ldrb	r3, [r3, #0]
    9064:	4413      	add	r3, r2
    9066:	b2da      	uxtb	r2, r3
    9068:	f64a 73ee 	movw	r3, #45038	; 0xafee
    906c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9070:	701a      	strb	r2, [r3, #0]
    9072:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9076:	f2c2 0300 	movt	r3, #8192	; 0x2000
    907a:	781b      	ldrb	r3, [r3, #0]
    907c:	3301      	adds	r3, #1
    907e:	b2da      	uxtb	r2, r3
    9080:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9084:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9088:	701a      	strb	r2, [r3, #0]
    908a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    908e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9092:	781b      	ldrb	r3, [r3, #0]
    9094:	2bff      	cmp	r3, #255	; 0xff
    9096:	d105      	bne.n	90a4 <send_adc+0x390>
    9098:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    909c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90a0:	2200      	movs	r2, #0
    90a2:	701a      	strb	r2, [r3, #0]
    90a4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    90a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90ac:	781b      	ldrb	r3, [r3, #0]
    90ae:	461a      	mov	r2, r3
    90b0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    90b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90b8:	7819      	ldrb	r1, [r3, #0]
    90ba:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    90be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90c2:	5499      	strb	r1, [r3, r2]
    90c4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    90c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90cc:	781b      	ldrb	r3, [r3, #0]
    90ce:	3301      	adds	r3, #1
    90d0:	b2da      	uxtb	r2, r3
    90d2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    90d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90da:	701a      	strb	r2, [r3, #0]
    90dc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    90e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90e4:	781b      	ldrb	r3, [r3, #0]
    90e6:	2bff      	cmp	r3, #255	; 0xff
    90e8:	d105      	bne.n	90f6 <send_adc+0x3e2>
    90ea:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    90ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90f2:	2200      	movs	r2, #0
    90f4:	701a      	strb	r2, [r3, #0]
    90f6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    90fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    90fe:	781b      	ldrb	r3, [r3, #0]
    9100:	461a      	mov	r2, r3
    9102:	f64a 73ee 	movw	r3, #45038	; 0xafee
    9106:	f2c2 0300 	movt	r3, #8192	; 0x2000
    910a:	7819      	ldrb	r1, [r3, #0]
    910c:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    9110:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9114:	5499      	strb	r1, [r3, r2]
    9116:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    911a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    911e:	781b      	ldrb	r3, [r3, #0]
    9120:	3301      	adds	r3, #1
    9122:	b2da      	uxtb	r2, r3
    9124:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9128:	f2c2 0300 	movt	r3, #8192	; 0x2000
    912c:	701a      	strb	r2, [r3, #0]
    912e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9132:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9136:	781b      	ldrb	r3, [r3, #0]
    9138:	2bff      	cmp	r3, #255	; 0xff
    913a:	d105      	bne.n	9148 <send_adc+0x434>
    913c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9140:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9144:	2200      	movs	r2, #0
    9146:	701a      	strb	r2, [r3, #0]
    9148:	f242 0339 	movw	r3, #8249	; 0x2039
    914c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9150:	781b      	ldrb	r3, [r3, #0]
    9152:	b2db      	uxtb	r3, r3
    9154:	f003 0310 	and.w	r3, r3, #16
    9158:	2b00      	cmp	r3, #0
    915a:	d15a      	bne.n	9212 <send_adc+0x4fe>
    915c:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    9160:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9164:	781b      	ldrb	r3, [r3, #0]
    9166:	b2db      	uxtb	r3, r3
    9168:	461a      	mov	r2, r3
    916a:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    916e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9172:	5c9a      	ldrb	r2, [r3, r2]
    9174:	f64a 73eb 	movw	r3, #45035	; 0xafeb
    9178:	f2c2 0300 	movt	r3, #8192	; 0x2000
    917c:	701a      	strb	r2, [r3, #0]
    917e:	f64a 73ec 	movw	r3, #45036	; 0xafec
    9182:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9186:	2200      	movs	r2, #0
    9188:	701a      	strb	r2, [r3, #0]
    918a:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    918e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9192:	781b      	ldrb	r3, [r3, #0]
    9194:	b2db      	uxtb	r3, r3
    9196:	3301      	adds	r3, #1
    9198:	b2da      	uxtb	r2, r3
    919a:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    919e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91a2:	701a      	strb	r2, [r3, #0]
    91a4:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    91a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91ac:	781b      	ldrb	r3, [r3, #0]
    91ae:	b2db      	uxtb	r3, r3
    91b0:	2bff      	cmp	r3, #255	; 0xff
    91b2:	d105      	bne.n	91c0 <send_adc+0x4ac>
    91b4:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    91b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91bc:	2200      	movs	r2, #0
    91be:	701a      	strb	r2, [r3, #0]
    91c0:	f242 0338 	movw	r3, #8248	; 0x2038
    91c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91c8:	f242 0238 	movw	r2, #8248	; 0x2038
    91cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    91d0:	7812      	ldrb	r2, [r2, #0]
    91d2:	b2d2      	uxtb	r2, r2
    91d4:	f042 0201 	orr.w	r2, r2, #1
    91d8:	b2d2      	uxtb	r2, r2
    91da:	701a      	strb	r2, [r3, #0]
    91dc:	f242 0339 	movw	r3, #8249	; 0x2039
    91e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    91e4:	f242 0239 	movw	r2, #8249	; 0x2039
    91e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    91ec:	7812      	ldrb	r2, [r2, #0]
    91ee:	b2d2      	uxtb	r2, r2
    91f0:	f042 0210 	orr.w	r2, r2, #16
    91f4:	b2d2      	uxtb	r2, r2
    91f6:	701a      	strb	r2, [r3, #0]
    91f8:	e00b      	b.n	9212 <send_adc+0x4fe>
    91fa:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    91fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9202:	781b      	ldrb	r3, [r3, #0]
    9204:	3301      	adds	r3, #1
    9206:	b2da      	uxtb	r2, r3
    9208:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    920c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9210:	701a      	strb	r2, [r3, #0]
}
    9212:	46bd      	mov	sp, r7
    9214:	f85d 7b04 	ldr.w	r7, [sp], #4
    9218:	4770      	bx	lr
    921a:	bf00      	nop
    921c:	2000b189 	.word	0x2000b189
    9220:	2000b18b 	.word	0x2000b18b

00009224 <send_settings>:
void send_settings(void){ //500ms
    9224:	b480      	push	{r7}
    9226:	af00      	add	r7, sp, #0
  //if(!boot)
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    9228:	f64a 63e1 	movw	r3, #44769	; 0xaee1
    922c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9230:	781a      	ldrb	r2, [r3, #0]
    9232:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9236:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    923a:	fba3 1302 	umull	r1, r3, r3, r2
    923e:	0899      	lsrs	r1, r3, #2
    9240:	460b      	mov	r3, r1
    9242:	009b      	lsls	r3, r3, #2
    9244:	440b      	add	r3, r1
    9246:	1ad3      	subs	r3, r2, r3
    9248:	b2db      	uxtb	r3, r3
    924a:	2b02      	cmp	r3, #2
    924c:	f040 83e7 	bne.w	9a1e <send_settings+0x7fa>
    9250:	f24b 43fc 	movw	r3, #46332	; 0xb4fc
    9254:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9258:	781b      	ldrb	r3, [r3, #0]
    925a:	2b00      	cmp	r3, #0
    925c:	f000 83df 	beq.w	9a1e <send_settings+0x7fa>
    9260:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9264:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9268:	781a      	ldrb	r2, [r3, #0]
    926a:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    926e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9272:	781b      	ldrb	r3, [r3, #0]
    9274:	b2db      	uxtb	r3, r3
    9276:	429a      	cmp	r2, r3
    9278:	d313      	bcc.n	92a2 <send_settings+0x7e>
    927a:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    927e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9282:	781b      	ldrb	r3, [r3, #0]
    9284:	b2db      	uxtb	r3, r3
    9286:	461a      	mov	r2, r3
    9288:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    928c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9290:	781b      	ldrb	r3, [r3, #0]
    9292:	1ad3      	subs	r3, r2, r3
    9294:	33ff      	adds	r3, #255	; 0xff
    9296:	2b0d      	cmp	r3, #13
    9298:	bfd4      	ite	le
    929a:	2300      	movle	r3, #0
    929c:	2301      	movgt	r3, #1
    929e:	b2db      	uxtb	r3, r3
    92a0:	e011      	b.n	92c6 <send_settings+0xa2>
    92a2:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    92a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92aa:	781b      	ldrb	r3, [r3, #0]
    92ac:	b2db      	uxtb	r3, r3
    92ae:	461a      	mov	r2, r3
    92b0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    92b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92b8:	781b      	ldrb	r3, [r3, #0]
    92ba:	1ad3      	subs	r3, r2, r3
    92bc:	2b0d      	cmp	r3, #13
    92be:	bfd4      	ite	le
    92c0:	2300      	movle	r3, #0
    92c2:	2301      	movgt	r3, #1
    92c4:	b2db      	uxtb	r3, r3
    92c6:	2b00      	cmp	r3, #0
    92c8:	f000 839d 	beq.w	9a06 <send_settings+0x7e2>
    92cc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    92d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92d4:	781b      	ldrb	r3, [r3, #0]
    92d6:	461a      	mov	r2, r3
    92d8:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    92dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92e0:	2105      	movs	r1, #5
    92e2:	5499      	strb	r1, [r3, r2]
    92e4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    92e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92ec:	781b      	ldrb	r3, [r3, #0]
    92ee:	3301      	adds	r3, #1
    92f0:	b2da      	uxtb	r2, r3
    92f2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    92f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92fa:	701a      	strb	r2, [r3, #0]
    92fc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9300:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9304:	781b      	ldrb	r3, [r3, #0]
    9306:	2bff      	cmp	r3, #255	; 0xff
    9308:	d105      	bne.n	9316 <send_settings+0xf2>
    930a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    930e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9312:	2200      	movs	r2, #0
    9314:	701a      	strb	r2, [r3, #0]
    9316:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    931a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    931e:	781b      	ldrb	r3, [r3, #0]
    9320:	461a      	mov	r2, r3
    9322:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    9326:	f2c2 0300 	movt	r3, #8192	; 0x2000
    932a:	2111      	movs	r1, #17
    932c:	5499      	strb	r1, [r3, r2]
    932e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9336:	781b      	ldrb	r3, [r3, #0]
    9338:	3301      	adds	r3, #1
    933a:	b2da      	uxtb	r2, r3
    933c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9344:	701a      	strb	r2, [r3, #0]
    9346:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    934a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    934e:	781b      	ldrb	r3, [r3, #0]
    9350:	2bff      	cmp	r3, #255	; 0xff
    9352:	d105      	bne.n	9360 <send_settings+0x13c>
    9354:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9358:	f2c2 0300 	movt	r3, #8192	; 0x2000
    935c:	2200      	movs	r2, #0
    935e:	701a      	strb	r2, [r3, #0]
    9360:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9368:	2211      	movs	r2, #17
    936a:	701a      	strb	r2, [r3, #0]
    936c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    9370:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9374:	2211      	movs	r2, #17
    9376:	701a      	strb	r2, [r3, #0]
    9378:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    937c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9380:	781b      	ldrb	r3, [r3, #0]
    9382:	461a      	mov	r2, r3
    9384:	f24b 43fc 	movw	r3, #46332	; 0xb4fc
    9388:	f2c2 0300 	movt	r3, #8192	; 0x2000
    938c:	7819      	ldrb	r1, [r3, #0]
    938e:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    9392:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9396:	5499      	strb	r1, [r3, r2]
    9398:	f64a 73ed 	movw	r3, #45037	; 0xafed
    939c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93a0:	781a      	ldrb	r2, [r3, #0]
    93a2:	f24b 43fc 	movw	r3, #46332	; 0xb4fc
    93a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93aa:	781b      	ldrb	r3, [r3, #0]
    93ac:	4413      	add	r3, r2
    93ae:	b2da      	uxtb	r2, r3
    93b0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    93b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93b8:	701a      	strb	r2, [r3, #0]
    93ba:	f64a 73ee 	movw	r3, #45038	; 0xafee
    93be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93c2:	781a      	ldrb	r2, [r3, #0]
    93c4:	f64a 73ed 	movw	r3, #45037	; 0xafed
    93c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93cc:	781b      	ldrb	r3, [r3, #0]
    93ce:	4413      	add	r3, r2
    93d0:	b2da      	uxtb	r2, r3
    93d2:	f64a 73ee 	movw	r3, #45038	; 0xafee
    93d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93da:	701a      	strb	r2, [r3, #0]
    93dc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    93e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93e4:	781b      	ldrb	r3, [r3, #0]
    93e6:	3301      	adds	r3, #1
    93e8:	b2da      	uxtb	r2, r3
    93ea:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    93ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93f2:	701a      	strb	r2, [r3, #0]
    93f4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    93f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    93fc:	781b      	ldrb	r3, [r3, #0]
    93fe:	2bff      	cmp	r3, #255	; 0xff
    9400:	d105      	bne.n	940e <send_settings+0x1ea>
    9402:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9406:	f2c2 0300 	movt	r3, #8192	; 0x2000
    940a:	2200      	movs	r2, #0
    940c:	701a      	strb	r2, [r3, #0]
    940e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9412:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9416:	781b      	ldrb	r3, [r3, #0]
    9418:	461a      	mov	r2, r3
    941a:	f64a 63d8 	movw	r3, #44760	; 0xaed8
    941e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9422:	7819      	ldrb	r1, [r3, #0]
    9424:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    9428:	f2c2 0300 	movt	r3, #8192	; 0x2000
    942c:	5499      	strb	r1, [r3, r2]
    942e:	f64a 63d8 	movw	r3, #44760	; 0xaed8
    9432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9436:	781a      	ldrb	r2, [r3, #0]
    9438:	f64a 73ed 	movw	r3, #45037	; 0xafed
    943c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9440:	781b      	ldrb	r3, [r3, #0]
    9442:	4413      	add	r3, r2
    9444:	b2da      	uxtb	r2, r3
    9446:	f64a 73ed 	movw	r3, #45037	; 0xafed
    944a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    944e:	701a      	strb	r2, [r3, #0]
    9450:	f64a 73ee 	movw	r3, #45038	; 0xafee
    9454:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9458:	781a      	ldrb	r2, [r3, #0]
    945a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    945e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9462:	781b      	ldrb	r3, [r3, #0]
    9464:	4413      	add	r3, r2
    9466:	b2da      	uxtb	r2, r3
    9468:	f64a 73ee 	movw	r3, #45038	; 0xafee
    946c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9470:	701a      	strb	r2, [r3, #0]
    9472:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9476:	f2c2 0300 	movt	r3, #8192	; 0x2000
    947a:	781b      	ldrb	r3, [r3, #0]
    947c:	3301      	adds	r3, #1
    947e:	b2da      	uxtb	r2, r3
    9480:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9488:	701a      	strb	r2, [r3, #0]
    948a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    948e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9492:	781b      	ldrb	r3, [r3, #0]
    9494:	2bff      	cmp	r3, #255	; 0xff
    9496:	d105      	bne.n	94a4 <send_settings+0x280>
    9498:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    949c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94a0:	2200      	movs	r2, #0
    94a2:	701a      	strb	r2, [r3, #0]
    94a4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    94a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94ac:	781b      	ldrb	r3, [r3, #0]
    94ae:	461a      	mov	r2, r3
    94b0:	f64a 63d8 	movw	r3, #44760	; 0xaed8
    94b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94b8:	7859      	ldrb	r1, [r3, #1]
    94ba:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    94be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94c2:	5499      	strb	r1, [r3, r2]
    94c4:	4bd1      	ldr	r3, [pc, #836]	; (980c <send_settings+0x5e8>)
    94c6:	781a      	ldrb	r2, [r3, #0]
    94c8:	f64a 73ed 	movw	r3, #45037	; 0xafed
    94cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94d0:	781b      	ldrb	r3, [r3, #0]
    94d2:	4413      	add	r3, r2
    94d4:	b2da      	uxtb	r2, r3
    94d6:	f64a 73ed 	movw	r3, #45037	; 0xafed
    94da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94de:	701a      	strb	r2, [r3, #0]
    94e0:	f64a 73ee 	movw	r3, #45038	; 0xafee
    94e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94e8:	781a      	ldrb	r2, [r3, #0]
    94ea:	f64a 73ed 	movw	r3, #45037	; 0xafed
    94ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94f2:	781b      	ldrb	r3, [r3, #0]
    94f4:	4413      	add	r3, r2
    94f6:	b2da      	uxtb	r2, r3
    94f8:	f64a 73ee 	movw	r3, #45038	; 0xafee
    94fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9500:	701a      	strb	r2, [r3, #0]
    9502:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    950a:	781b      	ldrb	r3, [r3, #0]
    950c:	3301      	adds	r3, #1
    950e:	b2da      	uxtb	r2, r3
    9510:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9514:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9518:	701a      	strb	r2, [r3, #0]
    951a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    951e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9522:	781b      	ldrb	r3, [r3, #0]
    9524:	2bff      	cmp	r3, #255	; 0xff
    9526:	d105      	bne.n	9534 <send_settings+0x310>
    9528:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    952c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9530:	2200      	movs	r2, #0
    9532:	701a      	strb	r2, [r3, #0]
    9534:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    953c:	781b      	ldrb	r3, [r3, #0]
    953e:	461a      	mov	r2, r3
    9540:	f64a 63d8 	movw	r3, #44760	; 0xaed8
    9544:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9548:	7899      	ldrb	r1, [r3, #2]
    954a:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    954e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9552:	5499      	strb	r1, [r3, r2]
    9554:	4bae      	ldr	r3, [pc, #696]	; (9810 <send_settings+0x5ec>)
    9556:	781a      	ldrb	r2, [r3, #0]
    9558:	f64a 73ed 	movw	r3, #45037	; 0xafed
    955c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9560:	781b      	ldrb	r3, [r3, #0]
    9562:	4413      	add	r3, r2
    9564:	b2da      	uxtb	r2, r3
    9566:	f64a 73ed 	movw	r3, #45037	; 0xafed
    956a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    956e:	701a      	strb	r2, [r3, #0]
    9570:	f64a 73ee 	movw	r3, #45038	; 0xafee
    9574:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9578:	781a      	ldrb	r2, [r3, #0]
    957a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    957e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9582:	781b      	ldrb	r3, [r3, #0]
    9584:	4413      	add	r3, r2
    9586:	b2da      	uxtb	r2, r3
    9588:	f64a 73ee 	movw	r3, #45038	; 0xafee
    958c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9590:	701a      	strb	r2, [r3, #0]
    9592:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9596:	f2c2 0300 	movt	r3, #8192	; 0x2000
    959a:	781b      	ldrb	r3, [r3, #0]
    959c:	3301      	adds	r3, #1
    959e:	b2da      	uxtb	r2, r3
    95a0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    95a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95a8:	701a      	strb	r2, [r3, #0]
    95aa:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    95ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95b2:	781b      	ldrb	r3, [r3, #0]
    95b4:	2bff      	cmp	r3, #255	; 0xff
    95b6:	d105      	bne.n	95c4 <send_settings+0x3a0>
    95b8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    95bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95c0:	2200      	movs	r2, #0
    95c2:	701a      	strb	r2, [r3, #0]
    95c4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    95c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95cc:	781b      	ldrb	r3, [r3, #0]
    95ce:	461a      	mov	r2, r3
    95d0:	f64a 63d8 	movw	r3, #44760	; 0xaed8
    95d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95d8:	78d9      	ldrb	r1, [r3, #3]
    95da:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    95de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95e2:	5499      	strb	r1, [r3, r2]
    95e4:	4b8b      	ldr	r3, [pc, #556]	; (9814 <send_settings+0x5f0>)
    95e6:	781a      	ldrb	r2, [r3, #0]
    95e8:	f64a 73ed 	movw	r3, #45037	; 0xafed
    95ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95f0:	781b      	ldrb	r3, [r3, #0]
    95f2:	4413      	add	r3, r2
    95f4:	b2da      	uxtb	r2, r3
    95f6:	f64a 73ed 	movw	r3, #45037	; 0xafed
    95fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95fe:	701a      	strb	r2, [r3, #0]
    9600:	f64a 73ee 	movw	r3, #45038	; 0xafee
    9604:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9608:	781a      	ldrb	r2, [r3, #0]
    960a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    960e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9612:	781b      	ldrb	r3, [r3, #0]
    9614:	4413      	add	r3, r2
    9616:	b2da      	uxtb	r2, r3
    9618:	f64a 73ee 	movw	r3, #45038	; 0xafee
    961c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9620:	701a      	strb	r2, [r3, #0]
    9622:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9626:	f2c2 0300 	movt	r3, #8192	; 0x2000
    962a:	781b      	ldrb	r3, [r3, #0]
    962c:	3301      	adds	r3, #1
    962e:	b2da      	uxtb	r2, r3
    9630:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9638:	701a      	strb	r2, [r3, #0]
    963a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    963e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9642:	781b      	ldrb	r3, [r3, #0]
    9644:	2bff      	cmp	r3, #255	; 0xff
    9646:	d105      	bne.n	9654 <send_settings+0x430>
    9648:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    964c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9650:	2200      	movs	r2, #0
    9652:	701a      	strb	r2, [r3, #0]
    9654:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9658:	f2c2 0300 	movt	r3, #8192	; 0x2000
    965c:	781b      	ldrb	r3, [r3, #0]
    965e:	461a      	mov	r2, r3
    9660:	f64a 63dc 	movw	r3, #44764	; 0xaedc
    9664:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9668:	7819      	ldrb	r1, [r3, #0]
    966a:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    966e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9672:	5499      	strb	r1, [r3, r2]
    9674:	f64a 63dc 	movw	r3, #44764	; 0xaedc
    9678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    967c:	781a      	ldrb	r2, [r3, #0]
    967e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9686:	781b      	ldrb	r3, [r3, #0]
    9688:	4413      	add	r3, r2
    968a:	b2da      	uxtb	r2, r3
    968c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9690:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9694:	701a      	strb	r2, [r3, #0]
    9696:	f64a 73ee 	movw	r3, #45038	; 0xafee
    969a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    969e:	781a      	ldrb	r2, [r3, #0]
    96a0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    96a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96a8:	781b      	ldrb	r3, [r3, #0]
    96aa:	4413      	add	r3, r2
    96ac:	b2da      	uxtb	r2, r3
    96ae:	f64a 73ee 	movw	r3, #45038	; 0xafee
    96b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96b6:	701a      	strb	r2, [r3, #0]
    96b8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    96bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96c0:	781b      	ldrb	r3, [r3, #0]
    96c2:	3301      	adds	r3, #1
    96c4:	b2da      	uxtb	r2, r3
    96c6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    96ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96ce:	701a      	strb	r2, [r3, #0]
    96d0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    96d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96d8:	781b      	ldrb	r3, [r3, #0]
    96da:	2bff      	cmp	r3, #255	; 0xff
    96dc:	d105      	bne.n	96ea <send_settings+0x4c6>
    96de:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    96e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96e6:	2200      	movs	r2, #0
    96e8:	701a      	strb	r2, [r3, #0]
    96ea:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    96ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96f2:	781b      	ldrb	r3, [r3, #0]
    96f4:	461a      	mov	r2, r3
    96f6:	f64a 63dc 	movw	r3, #44764	; 0xaedc
    96fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96fe:	7859      	ldrb	r1, [r3, #1]
    9700:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    9704:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9708:	5499      	strb	r1, [r3, r2]
    970a:	4b43      	ldr	r3, [pc, #268]	; (9818 <send_settings+0x5f4>)
    970c:	781a      	ldrb	r2, [r3, #0]
    970e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9712:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9716:	781b      	ldrb	r3, [r3, #0]
    9718:	4413      	add	r3, r2
    971a:	b2da      	uxtb	r2, r3
    971c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9720:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9724:	701a      	strb	r2, [r3, #0]
    9726:	f64a 73ee 	movw	r3, #45038	; 0xafee
    972a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    972e:	781a      	ldrb	r2, [r3, #0]
    9730:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9738:	781b      	ldrb	r3, [r3, #0]
    973a:	4413      	add	r3, r2
    973c:	b2da      	uxtb	r2, r3
    973e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    9742:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9746:	701a      	strb	r2, [r3, #0]
    9748:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    974c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9750:	781b      	ldrb	r3, [r3, #0]
    9752:	3301      	adds	r3, #1
    9754:	b2da      	uxtb	r2, r3
    9756:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    975a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    975e:	701a      	strb	r2, [r3, #0]
    9760:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9764:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9768:	781b      	ldrb	r3, [r3, #0]
    976a:	2bff      	cmp	r3, #255	; 0xff
    976c:	d105      	bne.n	977a <send_settings+0x556>
    976e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9772:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9776:	2200      	movs	r2, #0
    9778:	701a      	strb	r2, [r3, #0]
    977a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    977e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9782:	781b      	ldrb	r3, [r3, #0]
    9784:	461a      	mov	r2, r3
    9786:	f64a 63dc 	movw	r3, #44764	; 0xaedc
    978a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    978e:	7899      	ldrb	r1, [r3, #2]
    9790:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    9794:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9798:	5499      	strb	r1, [r3, r2]
    979a:	4b20      	ldr	r3, [pc, #128]	; (981c <send_settings+0x5f8>)
    979c:	781a      	ldrb	r2, [r3, #0]
    979e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    97a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97a6:	781b      	ldrb	r3, [r3, #0]
    97a8:	4413      	add	r3, r2
    97aa:	b2da      	uxtb	r2, r3
    97ac:	f64a 73ed 	movw	r3, #45037	; 0xafed
    97b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97b4:	701a      	strb	r2, [r3, #0]
    97b6:	f64a 73ee 	movw	r3, #45038	; 0xafee
    97ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97be:	781a      	ldrb	r2, [r3, #0]
    97c0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    97c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97c8:	781b      	ldrb	r3, [r3, #0]
    97ca:	4413      	add	r3, r2
    97cc:	b2da      	uxtb	r2, r3
    97ce:	f64a 73ee 	movw	r3, #45038	; 0xafee
    97d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97d6:	701a      	strb	r2, [r3, #0]
    97d8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    97dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97e0:	781b      	ldrb	r3, [r3, #0]
    97e2:	3301      	adds	r3, #1
    97e4:	b2da      	uxtb	r2, r3
    97e6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    97ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97ee:	701a      	strb	r2, [r3, #0]
    97f0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    97f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    97f8:	781b      	ldrb	r3, [r3, #0]
    97fa:	2bff      	cmp	r3, #255	; 0xff
    97fc:	d110      	bne.n	9820 <send_settings+0x5fc>
    97fe:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9802:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9806:	2200      	movs	r2, #0
    9808:	701a      	strb	r2, [r3, #0]
    980a:	e009      	b.n	9820 <send_settings+0x5fc>
    980c:	2000aed9 	.word	0x2000aed9
    9810:	2000aeda 	.word	0x2000aeda
    9814:	2000aedb 	.word	0x2000aedb
    9818:	2000aedd 	.word	0x2000aedd
    981c:	2000aede 	.word	0x2000aede
    9820:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9824:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9828:	781b      	ldrb	r3, [r3, #0]
    982a:	461a      	mov	r2, r3
    982c:	f64a 63dc 	movw	r3, #44764	; 0xaedc
    9830:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9834:	78d9      	ldrb	r1, [r3, #3]
    9836:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    983a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    983e:	5499      	strb	r1, [r3, r2]
    9840:	4b79      	ldr	r3, [pc, #484]	; (9a28 <send_settings+0x804>)
    9842:	781a      	ldrb	r2, [r3, #0]
    9844:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9848:	f2c2 0300 	movt	r3, #8192	; 0x2000
    984c:	781b      	ldrb	r3, [r3, #0]
    984e:	4413      	add	r3, r2
    9850:	b2da      	uxtb	r2, r3
    9852:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9856:	f2c2 0300 	movt	r3, #8192	; 0x2000
    985a:	701a      	strb	r2, [r3, #0]
    985c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    9860:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9864:	781a      	ldrb	r2, [r3, #0]
    9866:	f64a 73ed 	movw	r3, #45037	; 0xafed
    986a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    986e:	781b      	ldrb	r3, [r3, #0]
    9870:	4413      	add	r3, r2
    9872:	b2da      	uxtb	r2, r3
    9874:	f64a 73ee 	movw	r3, #45038	; 0xafee
    9878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    987c:	701a      	strb	r2, [r3, #0]
    987e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9882:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9886:	781b      	ldrb	r3, [r3, #0]
    9888:	3301      	adds	r3, #1
    988a:	b2da      	uxtb	r2, r3
    988c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9890:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9894:	701a      	strb	r2, [r3, #0]
    9896:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    989a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    989e:	781b      	ldrb	r3, [r3, #0]
    98a0:	2bff      	cmp	r3, #255	; 0xff
    98a2:	d105      	bne.n	98b0 <send_settings+0x68c>
    98a4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    98a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98ac:	2200      	movs	r2, #0
    98ae:	701a      	strb	r2, [r3, #0]
    98b0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    98b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98b8:	781b      	ldrb	r3, [r3, #0]
    98ba:	461a      	mov	r2, r3
    98bc:	f64a 73ed 	movw	r3, #45037	; 0xafed
    98c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98c4:	7819      	ldrb	r1, [r3, #0]
    98c6:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    98ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98ce:	5499      	strb	r1, [r3, r2]
    98d0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    98d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98d8:	781b      	ldrb	r3, [r3, #0]
    98da:	3301      	adds	r3, #1
    98dc:	b2da      	uxtb	r2, r3
    98de:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    98e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98e6:	701a      	strb	r2, [r3, #0]
    98e8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    98ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98f0:	781b      	ldrb	r3, [r3, #0]
    98f2:	2bff      	cmp	r3, #255	; 0xff
    98f4:	d105      	bne.n	9902 <send_settings+0x6de>
    98f6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    98fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    98fe:	2200      	movs	r2, #0
    9900:	701a      	strb	r2, [r3, #0]
    9902:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9906:	f2c2 0300 	movt	r3, #8192	; 0x2000
    990a:	781b      	ldrb	r3, [r3, #0]
    990c:	461a      	mov	r2, r3
    990e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    9912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9916:	7819      	ldrb	r1, [r3, #0]
    9918:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    991c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9920:	5499      	strb	r1, [r3, r2]
    9922:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9926:	f2c2 0300 	movt	r3, #8192	; 0x2000
    992a:	781b      	ldrb	r3, [r3, #0]
    992c:	3301      	adds	r3, #1
    992e:	b2da      	uxtb	r2, r3
    9930:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9938:	701a      	strb	r2, [r3, #0]
    993a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    993e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9942:	781b      	ldrb	r3, [r3, #0]
    9944:	2bff      	cmp	r3, #255	; 0xff
    9946:	d105      	bne.n	9954 <send_settings+0x730>
    9948:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    994c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9950:	2200      	movs	r2, #0
    9952:	701a      	strb	r2, [r3, #0]
    9954:	f242 0339 	movw	r3, #8249	; 0x2039
    9958:	f2c2 0300 	movt	r3, #8192	; 0x2000
    995c:	781b      	ldrb	r3, [r3, #0]
    995e:	b2db      	uxtb	r3, r3
    9960:	f003 0310 	and.w	r3, r3, #16
    9964:	2b00      	cmp	r3, #0
    9966:	d15a      	bne.n	9a1e <send_settings+0x7fa>
    9968:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    996c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9970:	781b      	ldrb	r3, [r3, #0]
    9972:	b2db      	uxtb	r3, r3
    9974:	461a      	mov	r2, r3
    9976:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    997a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    997e:	5c9a      	ldrb	r2, [r3, r2]
    9980:	f64a 73eb 	movw	r3, #45035	; 0xafeb
    9984:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9988:	701a      	strb	r2, [r3, #0]
    998a:	f64a 73ec 	movw	r3, #45036	; 0xafec
    998e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9992:	2200      	movs	r2, #0
    9994:	701a      	strb	r2, [r3, #0]
    9996:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    999a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    999e:	781b      	ldrb	r3, [r3, #0]
    99a0:	b2db      	uxtb	r3, r3
    99a2:	3301      	adds	r3, #1
    99a4:	b2da      	uxtb	r2, r3
    99a6:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    99aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99ae:	701a      	strb	r2, [r3, #0]
    99b0:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    99b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99b8:	781b      	ldrb	r3, [r3, #0]
    99ba:	b2db      	uxtb	r3, r3
    99bc:	2bff      	cmp	r3, #255	; 0xff
    99be:	d105      	bne.n	99cc <send_settings+0x7a8>
    99c0:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    99c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99c8:	2200      	movs	r2, #0
    99ca:	701a      	strb	r2, [r3, #0]
    99cc:	f242 0338 	movw	r3, #8248	; 0x2038
    99d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99d4:	f242 0238 	movw	r2, #8248	; 0x2038
    99d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    99dc:	7812      	ldrb	r2, [r2, #0]
    99de:	b2d2      	uxtb	r2, r2
    99e0:	f042 0201 	orr.w	r2, r2, #1
    99e4:	b2d2      	uxtb	r2, r2
    99e6:	701a      	strb	r2, [r3, #0]
    99e8:	f242 0339 	movw	r3, #8249	; 0x2039
    99ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    99f0:	f242 0239 	movw	r2, #8249	; 0x2039
    99f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    99f8:	7812      	ldrb	r2, [r2, #0]
    99fa:	b2d2      	uxtb	r2, r2
    99fc:	f042 0210 	orr.w	r2, r2, #16
    9a00:	b2d2      	uxtb	r2, r2
    9a02:	701a      	strb	r2, [r3, #0]
    9a04:	e00b      	b.n	9a1e <send_settings+0x7fa>
    9a06:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    9a0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a0e:	781b      	ldrb	r3, [r3, #0]
    9a10:	3301      	adds	r3, #1
    9a12:	b2da      	uxtb	r2, r3
    9a14:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    9a18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a1c:	701a      	strb	r2, [r3, #0]
}
    9a1e:	46bd      	mov	sp, r7
    9a20:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a24:	4770      	bx	lr
    9a26:	bf00      	nop
    9a28:	2000aedf 	.word	0x2000aedf

00009a2c <send_desired>:
void send_desired(void){  //1000ms
    9a2c:	b480      	push	{r7}
    9a2e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    9a30:	f64a 63e1 	movw	r3, #44769	; 0xaee1
    9a34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a38:	781a      	ldrb	r2, [r3, #0]
    9a3a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9a3e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9a42:	fba3 1302 	umull	r1, r3, r3, r2
    9a46:	08d9      	lsrs	r1, r3, #3
    9a48:	460b      	mov	r3, r1
    9a4a:	009b      	lsls	r3, r3, #2
    9a4c:	440b      	add	r3, r1
    9a4e:	005b      	lsls	r3, r3, #1
    9a50:	1ad3      	subs	r3, r2, r3
    9a52:	b2db      	uxtb	r3, r3
    9a54:	2b03      	cmp	r3, #3
    9a56:	f040 8712 	bne.w	a87e <send_desired+0xe52>
    9a5a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a62:	781a      	ldrb	r2, [r3, #0]
    9a64:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    9a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a6c:	781b      	ldrb	r3, [r3, #0]
    9a6e:	b2db      	uxtb	r3, r3
    9a70:	429a      	cmp	r2, r3
    9a72:	d313      	bcc.n	9a9c <send_desired+0x70>
    9a74:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    9a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a7c:	781b      	ldrb	r3, [r3, #0]
    9a7e:	b2db      	uxtb	r3, r3
    9a80:	461a      	mov	r2, r3
    9a82:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9a86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9a8a:	781b      	ldrb	r3, [r3, #0]
    9a8c:	1ad3      	subs	r3, r2, r3
    9a8e:	33ff      	adds	r3, #255	; 0xff
    9a90:	2b18      	cmp	r3, #24
    9a92:	bfd4      	ite	le
    9a94:	2300      	movle	r3, #0
    9a96:	2301      	movgt	r3, #1
    9a98:	b2db      	uxtb	r3, r3
    9a9a:	e011      	b.n	9ac0 <send_desired+0x94>
    9a9c:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    9aa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9aa4:	781b      	ldrb	r3, [r3, #0]
    9aa6:	b2db      	uxtb	r3, r3
    9aa8:	461a      	mov	r2, r3
    9aaa:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9aae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ab2:	781b      	ldrb	r3, [r3, #0]
    9ab4:	1ad3      	subs	r3, r2, r3
    9ab6:	2b18      	cmp	r3, #24
    9ab8:	bfd4      	ite	le
    9aba:	2300      	movle	r3, #0
    9abc:	2301      	movgt	r3, #1
    9abe:	b2db      	uxtb	r3, r3
    9ac0:	2b00      	cmp	r3, #0
    9ac2:	f000 86d0 	beq.w	a866 <send_desired+0xe3a>
    9ac6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ace:	781b      	ldrb	r3, [r3, #0]
    9ad0:	461a      	mov	r2, r3
    9ad2:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    9ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ada:	2105      	movs	r1, #5
    9adc:	5499      	strb	r1, [r3, r2]
    9ade:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9ae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ae6:	781b      	ldrb	r3, [r3, #0]
    9ae8:	3301      	adds	r3, #1
    9aea:	b2da      	uxtb	r2, r3
    9aec:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9af4:	701a      	strb	r2, [r3, #0]
    9af6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9afa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9afe:	781b      	ldrb	r3, [r3, #0]
    9b00:	2bff      	cmp	r3, #255	; 0xff
    9b02:	d105      	bne.n	9b10 <send_desired+0xe4>
    9b04:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9b08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b0c:	2200      	movs	r2, #0
    9b0e:	701a      	strb	r2, [r3, #0]
    9b10:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9b14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b18:	781b      	ldrb	r3, [r3, #0]
    9b1a:	461a      	mov	r2, r3
    9b1c:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    9b20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b24:	2112      	movs	r1, #18
    9b26:	5499      	strb	r1, [r3, r2]
    9b28:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9b2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b30:	781b      	ldrb	r3, [r3, #0]
    9b32:	3301      	adds	r3, #1
    9b34:	b2da      	uxtb	r2, r3
    9b36:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b3e:	701a      	strb	r2, [r3, #0]
    9b40:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9b44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b48:	781b      	ldrb	r3, [r3, #0]
    9b4a:	2bff      	cmp	r3, #255	; 0xff
    9b4c:	d105      	bne.n	9b5a <send_desired+0x12e>
    9b4e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b56:	2200      	movs	r2, #0
    9b58:	701a      	strb	r2, [r3, #0]
    9b5a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b62:	2212      	movs	r2, #18
    9b64:	701a      	strb	r2, [r3, #0]
    9b66:	f64a 73ee 	movw	r3, #45038	; 0xafee
    9b6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b6e:	2212      	movs	r2, #18
    9b70:	701a      	strb	r2, [r3, #0]
    9b72:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9b76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b7a:	781b      	ldrb	r3, [r3, #0]
    9b7c:	461a      	mov	r2, r3
    9b7e:	f24b 2314 	movw	r3, #45588	; 0xb214
    9b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b86:	7819      	ldrb	r1, [r3, #0]
    9b88:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    9b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b90:	5499      	strb	r1, [r3, r2]
    9b92:	f24b 2314 	movw	r3, #45588	; 0xb214
    9b96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b9a:	781a      	ldrb	r2, [r3, #0]
    9b9c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ba4:	781b      	ldrb	r3, [r3, #0]
    9ba6:	4413      	add	r3, r2
    9ba8:	b2da      	uxtb	r2, r3
    9baa:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bb2:	701a      	strb	r2, [r3, #0]
    9bb4:	f64a 73ee 	movw	r3, #45038	; 0xafee
    9bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bbc:	781a      	ldrb	r2, [r3, #0]
    9bbe:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9bc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bc6:	781b      	ldrb	r3, [r3, #0]
    9bc8:	4413      	add	r3, r2
    9bca:	b2da      	uxtb	r2, r3
    9bcc:	f64a 73ee 	movw	r3, #45038	; 0xafee
    9bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bd4:	701a      	strb	r2, [r3, #0]
    9bd6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9bda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bde:	781b      	ldrb	r3, [r3, #0]
    9be0:	3301      	adds	r3, #1
    9be2:	b2da      	uxtb	r2, r3
    9be4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9be8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bec:	701a      	strb	r2, [r3, #0]
    9bee:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9bf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9bf6:	781b      	ldrb	r3, [r3, #0]
    9bf8:	2bff      	cmp	r3, #255	; 0xff
    9bfa:	d105      	bne.n	9c08 <send_desired+0x1dc>
    9bfc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c04:	2200      	movs	r2, #0
    9c06:	701a      	strb	r2, [r3, #0]
    9c08:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c10:	781b      	ldrb	r3, [r3, #0]
    9c12:	461a      	mov	r2, r3
    9c14:	f24b 2314 	movw	r3, #45588	; 0xb214
    9c18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c1c:	7859      	ldrb	r1, [r3, #1]
    9c1e:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    9c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c26:	5499      	strb	r1, [r3, r2]
    9c28:	4bd1      	ldr	r3, [pc, #836]	; (9f70 <send_desired+0x544>)
    9c2a:	781a      	ldrb	r2, [r3, #0]
    9c2c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c34:	781b      	ldrb	r3, [r3, #0]
    9c36:	4413      	add	r3, r2
    9c38:	b2da      	uxtb	r2, r3
    9c3a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9c3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c42:	701a      	strb	r2, [r3, #0]
    9c44:	f64a 73ee 	movw	r3, #45038	; 0xafee
    9c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c4c:	781a      	ldrb	r2, [r3, #0]
    9c4e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9c52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c56:	781b      	ldrb	r3, [r3, #0]
    9c58:	4413      	add	r3, r2
    9c5a:	b2da      	uxtb	r2, r3
    9c5c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    9c60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c64:	701a      	strb	r2, [r3, #0]
    9c66:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9c6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c6e:	781b      	ldrb	r3, [r3, #0]
    9c70:	3301      	adds	r3, #1
    9c72:	b2da      	uxtb	r2, r3
    9c74:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9c78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c7c:	701a      	strb	r2, [r3, #0]
    9c7e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9c82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c86:	781b      	ldrb	r3, [r3, #0]
    9c88:	2bff      	cmp	r3, #255	; 0xff
    9c8a:	d105      	bne.n	9c98 <send_desired+0x26c>
    9c8c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c94:	2200      	movs	r2, #0
    9c96:	701a      	strb	r2, [r3, #0]
    9c98:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ca0:	781b      	ldrb	r3, [r3, #0]
    9ca2:	461a      	mov	r2, r3
    9ca4:	f24b 2314 	movw	r3, #45588	; 0xb214
    9ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cac:	7899      	ldrb	r1, [r3, #2]
    9cae:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    9cb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cb6:	5499      	strb	r1, [r3, r2]
    9cb8:	4bae      	ldr	r3, [pc, #696]	; (9f74 <send_desired+0x548>)
    9cba:	781a      	ldrb	r2, [r3, #0]
    9cbc:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9cc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cc4:	781b      	ldrb	r3, [r3, #0]
    9cc6:	4413      	add	r3, r2
    9cc8:	b2da      	uxtb	r2, r3
    9cca:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9cce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cd2:	701a      	strb	r2, [r3, #0]
    9cd4:	f64a 73ee 	movw	r3, #45038	; 0xafee
    9cd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cdc:	781a      	ldrb	r2, [r3, #0]
    9cde:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9ce2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ce6:	781b      	ldrb	r3, [r3, #0]
    9ce8:	4413      	add	r3, r2
    9cea:	b2da      	uxtb	r2, r3
    9cec:	f64a 73ee 	movw	r3, #45038	; 0xafee
    9cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cf4:	701a      	strb	r2, [r3, #0]
    9cf6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9cfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9cfe:	781b      	ldrb	r3, [r3, #0]
    9d00:	3301      	adds	r3, #1
    9d02:	b2da      	uxtb	r2, r3
    9d04:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9d08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d0c:	701a      	strb	r2, [r3, #0]
    9d0e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9d12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d16:	781b      	ldrb	r3, [r3, #0]
    9d18:	2bff      	cmp	r3, #255	; 0xff
    9d1a:	d105      	bne.n	9d28 <send_desired+0x2fc>
    9d1c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9d20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d24:	2200      	movs	r2, #0
    9d26:	701a      	strb	r2, [r3, #0]
    9d28:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d30:	781b      	ldrb	r3, [r3, #0]
    9d32:	461a      	mov	r2, r3
    9d34:	f24b 2314 	movw	r3, #45588	; 0xb214
    9d38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d3c:	78d9      	ldrb	r1, [r3, #3]
    9d3e:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    9d42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d46:	5499      	strb	r1, [r3, r2]
    9d48:	4b8b      	ldr	r3, [pc, #556]	; (9f78 <send_desired+0x54c>)
    9d4a:	781a      	ldrb	r2, [r3, #0]
    9d4c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d54:	781b      	ldrb	r3, [r3, #0]
    9d56:	4413      	add	r3, r2
    9d58:	b2da      	uxtb	r2, r3
    9d5a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d62:	701a      	strb	r2, [r3, #0]
    9d64:	f64a 73ee 	movw	r3, #45038	; 0xafee
    9d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d6c:	781a      	ldrb	r2, [r3, #0]
    9d6e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9d72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d76:	781b      	ldrb	r3, [r3, #0]
    9d78:	4413      	add	r3, r2
    9d7a:	b2da      	uxtb	r2, r3
    9d7c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    9d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d84:	701a      	strb	r2, [r3, #0]
    9d86:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d8e:	781b      	ldrb	r3, [r3, #0]
    9d90:	3301      	adds	r3, #1
    9d92:	b2da      	uxtb	r2, r3
    9d94:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d9c:	701a      	strb	r2, [r3, #0]
    9d9e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9da6:	781b      	ldrb	r3, [r3, #0]
    9da8:	2bff      	cmp	r3, #255	; 0xff
    9daa:	d105      	bne.n	9db8 <send_desired+0x38c>
    9dac:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9db4:	2200      	movs	r2, #0
    9db6:	701a      	strb	r2, [r3, #0]
    9db8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9dbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dc0:	781b      	ldrb	r3, [r3, #0]
    9dc2:	461a      	mov	r2, r3
    9dc4:	f24b 2318 	movw	r3, #45592	; 0xb218
    9dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dcc:	7819      	ldrb	r1, [r3, #0]
    9dce:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    9dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dd6:	5499      	strb	r1, [r3, r2]
    9dd8:	f24b 2318 	movw	r3, #45592	; 0xb218
    9ddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9de0:	781a      	ldrb	r2, [r3, #0]
    9de2:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9de6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9dea:	781b      	ldrb	r3, [r3, #0]
    9dec:	4413      	add	r3, r2
    9dee:	b2da      	uxtb	r2, r3
    9df0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9df8:	701a      	strb	r2, [r3, #0]
    9dfa:	f64a 73ee 	movw	r3, #45038	; 0xafee
    9dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e02:	781a      	ldrb	r2, [r3, #0]
    9e04:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9e08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e0c:	781b      	ldrb	r3, [r3, #0]
    9e0e:	4413      	add	r3, r2
    9e10:	b2da      	uxtb	r2, r3
    9e12:	f64a 73ee 	movw	r3, #45038	; 0xafee
    9e16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e1a:	701a      	strb	r2, [r3, #0]
    9e1c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e24:	781b      	ldrb	r3, [r3, #0]
    9e26:	3301      	adds	r3, #1
    9e28:	b2da      	uxtb	r2, r3
    9e2a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9e2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e32:	701a      	strb	r2, [r3, #0]
    9e34:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e3c:	781b      	ldrb	r3, [r3, #0]
    9e3e:	2bff      	cmp	r3, #255	; 0xff
    9e40:	d105      	bne.n	9e4e <send_desired+0x422>
    9e42:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9e46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e4a:	2200      	movs	r2, #0
    9e4c:	701a      	strb	r2, [r3, #0]
    9e4e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e56:	781b      	ldrb	r3, [r3, #0]
    9e58:	461a      	mov	r2, r3
    9e5a:	f24b 2318 	movw	r3, #45592	; 0xb218
    9e5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e62:	7859      	ldrb	r1, [r3, #1]
    9e64:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    9e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e6c:	5499      	strb	r1, [r3, r2]
    9e6e:	4b43      	ldr	r3, [pc, #268]	; (9f7c <send_desired+0x550>)
    9e70:	781a      	ldrb	r2, [r3, #0]
    9e72:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9e76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e7a:	781b      	ldrb	r3, [r3, #0]
    9e7c:	4413      	add	r3, r2
    9e7e:	b2da      	uxtb	r2, r3
    9e80:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e88:	701a      	strb	r2, [r3, #0]
    9e8a:	f64a 73ee 	movw	r3, #45038	; 0xafee
    9e8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e92:	781a      	ldrb	r2, [r3, #0]
    9e94:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9e9c:	781b      	ldrb	r3, [r3, #0]
    9e9e:	4413      	add	r3, r2
    9ea0:	b2da      	uxtb	r2, r3
    9ea2:	f64a 73ee 	movw	r3, #45038	; 0xafee
    9ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9eaa:	701a      	strb	r2, [r3, #0]
    9eac:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9eb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9eb4:	781b      	ldrb	r3, [r3, #0]
    9eb6:	3301      	adds	r3, #1
    9eb8:	b2da      	uxtb	r2, r3
    9eba:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9ebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ec2:	701a      	strb	r2, [r3, #0]
    9ec4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ecc:	781b      	ldrb	r3, [r3, #0]
    9ece:	2bff      	cmp	r3, #255	; 0xff
    9ed0:	d105      	bne.n	9ede <send_desired+0x4b2>
    9ed2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9ed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9eda:	2200      	movs	r2, #0
    9edc:	701a      	strb	r2, [r3, #0]
    9ede:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ee6:	781b      	ldrb	r3, [r3, #0]
    9ee8:	461a      	mov	r2, r3
    9eea:	f24b 2318 	movw	r3, #45592	; 0xb218
    9eee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ef2:	7899      	ldrb	r1, [r3, #2]
    9ef4:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    9ef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9efc:	5499      	strb	r1, [r3, r2]
    9efe:	4b20      	ldr	r3, [pc, #128]	; (9f80 <send_desired+0x554>)
    9f00:	781a      	ldrb	r2, [r3, #0]
    9f02:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9f06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f0a:	781b      	ldrb	r3, [r3, #0]
    9f0c:	4413      	add	r3, r2
    9f0e:	b2da      	uxtb	r2, r3
    9f10:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f18:	701a      	strb	r2, [r3, #0]
    9f1a:	f64a 73ee 	movw	r3, #45038	; 0xafee
    9f1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f22:	781a      	ldrb	r2, [r3, #0]
    9f24:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f2c:	781b      	ldrb	r3, [r3, #0]
    9f2e:	4413      	add	r3, r2
    9f30:	b2da      	uxtb	r2, r3
    9f32:	f64a 73ee 	movw	r3, #45038	; 0xafee
    9f36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f3a:	701a      	strb	r2, [r3, #0]
    9f3c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f44:	781b      	ldrb	r3, [r3, #0]
    9f46:	3301      	adds	r3, #1
    9f48:	b2da      	uxtb	r2, r3
    9f4a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f52:	701a      	strb	r2, [r3, #0]
    9f54:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9f58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f5c:	781b      	ldrb	r3, [r3, #0]
    9f5e:	2bff      	cmp	r3, #255	; 0xff
    9f60:	d110      	bne.n	9f84 <send_desired+0x558>
    9f62:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9f66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f6a:	2200      	movs	r2, #0
    9f6c:	701a      	strb	r2, [r3, #0]
    9f6e:	e009      	b.n	9f84 <send_desired+0x558>
    9f70:	2000b215 	.word	0x2000b215
    9f74:	2000b216 	.word	0x2000b216
    9f78:	2000b217 	.word	0x2000b217
    9f7c:	2000b219 	.word	0x2000b219
    9f80:	2000b21a 	.word	0x2000b21a
    9f84:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9f88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f8c:	781b      	ldrb	r3, [r3, #0]
    9f8e:	461a      	mov	r2, r3
    9f90:	f24b 2318 	movw	r3, #45592	; 0xb218
    9f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9f98:	78d9      	ldrb	r1, [r3, #3]
    9f9a:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    9f9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fa2:	5499      	strb	r1, [r3, r2]
    9fa4:	4bd3      	ldr	r3, [pc, #844]	; (a2f4 <send_desired+0x8c8>)
    9fa6:	781a      	ldrb	r2, [r3, #0]
    9fa8:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fb0:	781b      	ldrb	r3, [r3, #0]
    9fb2:	4413      	add	r3, r2
    9fb4:	b2da      	uxtb	r2, r3
    9fb6:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9fba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fbe:	701a      	strb	r2, [r3, #0]
    9fc0:	f64a 73ee 	movw	r3, #45038	; 0xafee
    9fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fc8:	781a      	ldrb	r2, [r3, #0]
    9fca:	f64a 73ed 	movw	r3, #45037	; 0xafed
    9fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fd2:	781b      	ldrb	r3, [r3, #0]
    9fd4:	4413      	add	r3, r2
    9fd6:	b2da      	uxtb	r2, r3
    9fd8:	f64a 73ee 	movw	r3, #45038	; 0xafee
    9fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fe0:	701a      	strb	r2, [r3, #0]
    9fe2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9fea:	781b      	ldrb	r3, [r3, #0]
    9fec:	3301      	adds	r3, #1
    9fee:	b2da      	uxtb	r2, r3
    9ff0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9ff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9ff8:	701a      	strb	r2, [r3, #0]
    9ffa:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    9ffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a002:	781b      	ldrb	r3, [r3, #0]
    a004:	2bff      	cmp	r3, #255	; 0xff
    a006:	d105      	bne.n	a014 <send_desired+0x5e8>
    a008:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a00c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a010:	2200      	movs	r2, #0
    a012:	701a      	strb	r2, [r3, #0]
    a014:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a018:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a01c:	781b      	ldrb	r3, [r3, #0]
    a01e:	461a      	mov	r2, r3
    a020:	f24b 2360 	movw	r3, #45664	; 0xb260
    a024:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a028:	7819      	ldrb	r1, [r3, #0]
    a02a:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    a02e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a032:	5499      	strb	r1, [r3, r2]
    a034:	f24b 2360 	movw	r3, #45664	; 0xb260
    a038:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a03c:	781a      	ldrb	r2, [r3, #0]
    a03e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a042:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a046:	781b      	ldrb	r3, [r3, #0]
    a048:	4413      	add	r3, r2
    a04a:	b2da      	uxtb	r2, r3
    a04c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a050:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a054:	701a      	strb	r2, [r3, #0]
    a056:	f64a 73ee 	movw	r3, #45038	; 0xafee
    a05a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a05e:	781a      	ldrb	r2, [r3, #0]
    a060:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a068:	781b      	ldrb	r3, [r3, #0]
    a06a:	4413      	add	r3, r2
    a06c:	b2da      	uxtb	r2, r3
    a06e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    a072:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a076:	701a      	strb	r2, [r3, #0]
    a078:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a07c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a080:	781b      	ldrb	r3, [r3, #0]
    a082:	3301      	adds	r3, #1
    a084:	b2da      	uxtb	r2, r3
    a086:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a08a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a08e:	701a      	strb	r2, [r3, #0]
    a090:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a094:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a098:	781b      	ldrb	r3, [r3, #0]
    a09a:	2bff      	cmp	r3, #255	; 0xff
    a09c:	d105      	bne.n	a0aa <send_desired+0x67e>
    a09e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a0a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0a6:	2200      	movs	r2, #0
    a0a8:	701a      	strb	r2, [r3, #0]
    a0aa:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a0ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0b2:	781b      	ldrb	r3, [r3, #0]
    a0b4:	461a      	mov	r2, r3
    a0b6:	f24b 2360 	movw	r3, #45664	; 0xb260
    a0ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0be:	7859      	ldrb	r1, [r3, #1]
    a0c0:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    a0c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0c8:	5499      	strb	r1, [r3, r2]
    a0ca:	4b8b      	ldr	r3, [pc, #556]	; (a2f8 <send_desired+0x8cc>)
    a0cc:	781a      	ldrb	r2, [r3, #0]
    a0ce:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a0d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0d6:	781b      	ldrb	r3, [r3, #0]
    a0d8:	4413      	add	r3, r2
    a0da:	b2da      	uxtb	r2, r3
    a0dc:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a0e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0e4:	701a      	strb	r2, [r3, #0]
    a0e6:	f64a 73ee 	movw	r3, #45038	; 0xafee
    a0ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0ee:	781a      	ldrb	r2, [r3, #0]
    a0f0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a0f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a0f8:	781b      	ldrb	r3, [r3, #0]
    a0fa:	4413      	add	r3, r2
    a0fc:	b2da      	uxtb	r2, r3
    a0fe:	f64a 73ee 	movw	r3, #45038	; 0xafee
    a102:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a106:	701a      	strb	r2, [r3, #0]
    a108:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a10c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a110:	781b      	ldrb	r3, [r3, #0]
    a112:	3301      	adds	r3, #1
    a114:	b2da      	uxtb	r2, r3
    a116:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a11a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a11e:	701a      	strb	r2, [r3, #0]
    a120:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a124:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a128:	781b      	ldrb	r3, [r3, #0]
    a12a:	2bff      	cmp	r3, #255	; 0xff
    a12c:	d105      	bne.n	a13a <send_desired+0x70e>
    a12e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a132:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a136:	2200      	movs	r2, #0
    a138:	701a      	strb	r2, [r3, #0]
    a13a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a13e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a142:	781b      	ldrb	r3, [r3, #0]
    a144:	461a      	mov	r2, r3
    a146:	f24b 2360 	movw	r3, #45664	; 0xb260
    a14a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a14e:	7899      	ldrb	r1, [r3, #2]
    a150:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    a154:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a158:	5499      	strb	r1, [r3, r2]
    a15a:	4b68      	ldr	r3, [pc, #416]	; (a2fc <send_desired+0x8d0>)
    a15c:	781a      	ldrb	r2, [r3, #0]
    a15e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a162:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a166:	781b      	ldrb	r3, [r3, #0]
    a168:	4413      	add	r3, r2
    a16a:	b2da      	uxtb	r2, r3
    a16c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a170:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a174:	701a      	strb	r2, [r3, #0]
    a176:	f64a 73ee 	movw	r3, #45038	; 0xafee
    a17a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a17e:	781a      	ldrb	r2, [r3, #0]
    a180:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a184:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a188:	781b      	ldrb	r3, [r3, #0]
    a18a:	4413      	add	r3, r2
    a18c:	b2da      	uxtb	r2, r3
    a18e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    a192:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a196:	701a      	strb	r2, [r3, #0]
    a198:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a19c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1a0:	781b      	ldrb	r3, [r3, #0]
    a1a2:	3301      	adds	r3, #1
    a1a4:	b2da      	uxtb	r2, r3
    a1a6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a1aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1ae:	701a      	strb	r2, [r3, #0]
    a1b0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a1b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1b8:	781b      	ldrb	r3, [r3, #0]
    a1ba:	2bff      	cmp	r3, #255	; 0xff
    a1bc:	d105      	bne.n	a1ca <send_desired+0x79e>
    a1be:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a1c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1c6:	2200      	movs	r2, #0
    a1c8:	701a      	strb	r2, [r3, #0]
    a1ca:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a1ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1d2:	781b      	ldrb	r3, [r3, #0]
    a1d4:	461a      	mov	r2, r3
    a1d6:	f24b 2360 	movw	r3, #45664	; 0xb260
    a1da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1de:	78d9      	ldrb	r1, [r3, #3]
    a1e0:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    a1e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1e8:	5499      	strb	r1, [r3, r2]
    a1ea:	4b45      	ldr	r3, [pc, #276]	; (a300 <send_desired+0x8d4>)
    a1ec:	781a      	ldrb	r2, [r3, #0]
    a1ee:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a1f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a1f6:	781b      	ldrb	r3, [r3, #0]
    a1f8:	4413      	add	r3, r2
    a1fa:	b2da      	uxtb	r2, r3
    a1fc:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a200:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a204:	701a      	strb	r2, [r3, #0]
    a206:	f64a 73ee 	movw	r3, #45038	; 0xafee
    a20a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a20e:	781a      	ldrb	r2, [r3, #0]
    a210:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a214:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a218:	781b      	ldrb	r3, [r3, #0]
    a21a:	4413      	add	r3, r2
    a21c:	b2da      	uxtb	r2, r3
    a21e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    a222:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a226:	701a      	strb	r2, [r3, #0]
    a228:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a22c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a230:	781b      	ldrb	r3, [r3, #0]
    a232:	3301      	adds	r3, #1
    a234:	b2da      	uxtb	r2, r3
    a236:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a23a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a23e:	701a      	strb	r2, [r3, #0]
    a240:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a248:	781b      	ldrb	r3, [r3, #0]
    a24a:	2bff      	cmp	r3, #255	; 0xff
    a24c:	d105      	bne.n	a25a <send_desired+0x82e>
    a24e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a252:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a256:	2200      	movs	r2, #0
    a258:	701a      	strb	r2, [r3, #0]
    a25a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a25e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a262:	781b      	ldrb	r3, [r3, #0]
    a264:	461a      	mov	r2, r3
    a266:	f24b 2364 	movw	r3, #45668	; 0xb264
    a26a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a26e:	7819      	ldrb	r1, [r3, #0]
    a270:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    a274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a278:	5499      	strb	r1, [r3, r2]
    a27a:	f24b 2364 	movw	r3, #45668	; 0xb264
    a27e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a282:	781a      	ldrb	r2, [r3, #0]
    a284:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a288:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a28c:	781b      	ldrb	r3, [r3, #0]
    a28e:	4413      	add	r3, r2
    a290:	b2da      	uxtb	r2, r3
    a292:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a296:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a29a:	701a      	strb	r2, [r3, #0]
    a29c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    a2a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2a4:	781a      	ldrb	r2, [r3, #0]
    a2a6:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a2aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2ae:	781b      	ldrb	r3, [r3, #0]
    a2b0:	4413      	add	r3, r2
    a2b2:	b2da      	uxtb	r2, r3
    a2b4:	f64a 73ee 	movw	r3, #45038	; 0xafee
    a2b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2bc:	701a      	strb	r2, [r3, #0]
    a2be:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a2c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2c6:	781b      	ldrb	r3, [r3, #0]
    a2c8:	3301      	adds	r3, #1
    a2ca:	b2da      	uxtb	r2, r3
    a2cc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a2d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2d4:	701a      	strb	r2, [r3, #0]
    a2d6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a2da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2de:	781b      	ldrb	r3, [r3, #0]
    a2e0:	2bff      	cmp	r3, #255	; 0xff
    a2e2:	d10f      	bne.n	a304 <send_desired+0x8d8>
    a2e4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a2e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a2ec:	2200      	movs	r2, #0
    a2ee:	701a      	strb	r2, [r3, #0]
    a2f0:	e008      	b.n	a304 <send_desired+0x8d8>
    a2f2:	bf00      	nop
    a2f4:	2000b21b 	.word	0x2000b21b
    a2f8:	2000b261 	.word	0x2000b261
    a2fc:	2000b262 	.word	0x2000b262
    a300:	2000b263 	.word	0x2000b263
    a304:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a308:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a30c:	781b      	ldrb	r3, [r3, #0]
    a30e:	461a      	mov	r2, r3
    a310:	f24b 2364 	movw	r3, #45668	; 0xb264
    a314:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a318:	7859      	ldrb	r1, [r3, #1]
    a31a:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    a31e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a322:	5499      	strb	r1, [r3, r2]
    a324:	4bd1      	ldr	r3, [pc, #836]	; (a66c <send_desired+0xc40>)
    a326:	781a      	ldrb	r2, [r3, #0]
    a328:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a32c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a330:	781b      	ldrb	r3, [r3, #0]
    a332:	4413      	add	r3, r2
    a334:	b2da      	uxtb	r2, r3
    a336:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a33a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a33e:	701a      	strb	r2, [r3, #0]
    a340:	f64a 73ee 	movw	r3, #45038	; 0xafee
    a344:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a348:	781a      	ldrb	r2, [r3, #0]
    a34a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a34e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a352:	781b      	ldrb	r3, [r3, #0]
    a354:	4413      	add	r3, r2
    a356:	b2da      	uxtb	r2, r3
    a358:	f64a 73ee 	movw	r3, #45038	; 0xafee
    a35c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a360:	701a      	strb	r2, [r3, #0]
    a362:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a366:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a36a:	781b      	ldrb	r3, [r3, #0]
    a36c:	3301      	adds	r3, #1
    a36e:	b2da      	uxtb	r2, r3
    a370:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a374:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a378:	701a      	strb	r2, [r3, #0]
    a37a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a37e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a382:	781b      	ldrb	r3, [r3, #0]
    a384:	2bff      	cmp	r3, #255	; 0xff
    a386:	d105      	bne.n	a394 <send_desired+0x968>
    a388:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a38c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a390:	2200      	movs	r2, #0
    a392:	701a      	strb	r2, [r3, #0]
    a394:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a398:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a39c:	781b      	ldrb	r3, [r3, #0]
    a39e:	461a      	mov	r2, r3
    a3a0:	f24b 2364 	movw	r3, #45668	; 0xb264
    a3a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3a8:	7899      	ldrb	r1, [r3, #2]
    a3aa:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    a3ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3b2:	5499      	strb	r1, [r3, r2]
    a3b4:	4bae      	ldr	r3, [pc, #696]	; (a670 <send_desired+0xc44>)
    a3b6:	781a      	ldrb	r2, [r3, #0]
    a3b8:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a3bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3c0:	781b      	ldrb	r3, [r3, #0]
    a3c2:	4413      	add	r3, r2
    a3c4:	b2da      	uxtb	r2, r3
    a3c6:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a3ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3ce:	701a      	strb	r2, [r3, #0]
    a3d0:	f64a 73ee 	movw	r3, #45038	; 0xafee
    a3d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3d8:	781a      	ldrb	r2, [r3, #0]
    a3da:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a3de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3e2:	781b      	ldrb	r3, [r3, #0]
    a3e4:	4413      	add	r3, r2
    a3e6:	b2da      	uxtb	r2, r3
    a3e8:	f64a 73ee 	movw	r3, #45038	; 0xafee
    a3ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3f0:	701a      	strb	r2, [r3, #0]
    a3f2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a3f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a3fa:	781b      	ldrb	r3, [r3, #0]
    a3fc:	3301      	adds	r3, #1
    a3fe:	b2da      	uxtb	r2, r3
    a400:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a404:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a408:	701a      	strb	r2, [r3, #0]
    a40a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a40e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a412:	781b      	ldrb	r3, [r3, #0]
    a414:	2bff      	cmp	r3, #255	; 0xff
    a416:	d105      	bne.n	a424 <send_desired+0x9f8>
    a418:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a41c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a420:	2200      	movs	r2, #0
    a422:	701a      	strb	r2, [r3, #0]
    a424:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a428:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a42c:	781b      	ldrb	r3, [r3, #0]
    a42e:	461a      	mov	r2, r3
    a430:	f24b 2364 	movw	r3, #45668	; 0xb264
    a434:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a438:	78d9      	ldrb	r1, [r3, #3]
    a43a:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    a43e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a442:	5499      	strb	r1, [r3, r2]
    a444:	4b8b      	ldr	r3, [pc, #556]	; (a674 <send_desired+0xc48>)
    a446:	781a      	ldrb	r2, [r3, #0]
    a448:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a44c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a450:	781b      	ldrb	r3, [r3, #0]
    a452:	4413      	add	r3, r2
    a454:	b2da      	uxtb	r2, r3
    a456:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a45a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a45e:	701a      	strb	r2, [r3, #0]
    a460:	f64a 73ee 	movw	r3, #45038	; 0xafee
    a464:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a468:	781a      	ldrb	r2, [r3, #0]
    a46a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a46e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a472:	781b      	ldrb	r3, [r3, #0]
    a474:	4413      	add	r3, r2
    a476:	b2da      	uxtb	r2, r3
    a478:	f64a 73ee 	movw	r3, #45038	; 0xafee
    a47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a480:	701a      	strb	r2, [r3, #0]
    a482:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a486:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a48a:	781b      	ldrb	r3, [r3, #0]
    a48c:	3301      	adds	r3, #1
    a48e:	b2da      	uxtb	r2, r3
    a490:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a494:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a498:	701a      	strb	r2, [r3, #0]
    a49a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a49e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4a2:	781b      	ldrb	r3, [r3, #0]
    a4a4:	2bff      	cmp	r3, #255	; 0xff
    a4a6:	d105      	bne.n	a4b4 <send_desired+0xa88>
    a4a8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a4ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4b0:	2200      	movs	r2, #0
    a4b2:	701a      	strb	r2, [r3, #0]
    a4b4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a4b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4bc:	781b      	ldrb	r3, [r3, #0]
    a4be:	461a      	mov	r2, r3
    a4c0:	f240 4324 	movw	r3, #1060	; 0x424
    a4c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4c8:	7819      	ldrb	r1, [r3, #0]
    a4ca:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    a4ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4d2:	5499      	strb	r1, [r3, r2]
    a4d4:	f240 4324 	movw	r3, #1060	; 0x424
    a4d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4dc:	781a      	ldrb	r2, [r3, #0]
    a4de:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a4e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4e6:	781b      	ldrb	r3, [r3, #0]
    a4e8:	4413      	add	r3, r2
    a4ea:	b2da      	uxtb	r2, r3
    a4ec:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a4f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4f4:	701a      	strb	r2, [r3, #0]
    a4f6:	f64a 73ee 	movw	r3, #45038	; 0xafee
    a4fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a4fe:	781a      	ldrb	r2, [r3, #0]
    a500:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a504:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a508:	781b      	ldrb	r3, [r3, #0]
    a50a:	4413      	add	r3, r2
    a50c:	b2da      	uxtb	r2, r3
    a50e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    a512:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a516:	701a      	strb	r2, [r3, #0]
    a518:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a51c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a520:	781b      	ldrb	r3, [r3, #0]
    a522:	3301      	adds	r3, #1
    a524:	b2da      	uxtb	r2, r3
    a526:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a52a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a52e:	701a      	strb	r2, [r3, #0]
    a530:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a534:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a538:	781b      	ldrb	r3, [r3, #0]
    a53a:	2bff      	cmp	r3, #255	; 0xff
    a53c:	d105      	bne.n	a54a <send_desired+0xb1e>
    a53e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a542:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a546:	2200      	movs	r2, #0
    a548:	701a      	strb	r2, [r3, #0]
    a54a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a54e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a552:	781b      	ldrb	r3, [r3, #0]
    a554:	461a      	mov	r2, r3
    a556:	f240 4324 	movw	r3, #1060	; 0x424
    a55a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a55e:	7859      	ldrb	r1, [r3, #1]
    a560:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    a564:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a568:	5499      	strb	r1, [r3, r2]
    a56a:	4b43      	ldr	r3, [pc, #268]	; (a678 <send_desired+0xc4c>)
    a56c:	781a      	ldrb	r2, [r3, #0]
    a56e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a572:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a576:	781b      	ldrb	r3, [r3, #0]
    a578:	4413      	add	r3, r2
    a57a:	b2da      	uxtb	r2, r3
    a57c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a580:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a584:	701a      	strb	r2, [r3, #0]
    a586:	f64a 73ee 	movw	r3, #45038	; 0xafee
    a58a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a58e:	781a      	ldrb	r2, [r3, #0]
    a590:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a594:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a598:	781b      	ldrb	r3, [r3, #0]
    a59a:	4413      	add	r3, r2
    a59c:	b2da      	uxtb	r2, r3
    a59e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    a5a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5a6:	701a      	strb	r2, [r3, #0]
    a5a8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a5ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5b0:	781b      	ldrb	r3, [r3, #0]
    a5b2:	3301      	adds	r3, #1
    a5b4:	b2da      	uxtb	r2, r3
    a5b6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a5ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5be:	701a      	strb	r2, [r3, #0]
    a5c0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a5c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5c8:	781b      	ldrb	r3, [r3, #0]
    a5ca:	2bff      	cmp	r3, #255	; 0xff
    a5cc:	d105      	bne.n	a5da <send_desired+0xbae>
    a5ce:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a5d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5d6:	2200      	movs	r2, #0
    a5d8:	701a      	strb	r2, [r3, #0]
    a5da:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a5de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5e2:	781b      	ldrb	r3, [r3, #0]
    a5e4:	461a      	mov	r2, r3
    a5e6:	f240 4324 	movw	r3, #1060	; 0x424
    a5ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5ee:	7899      	ldrb	r1, [r3, #2]
    a5f0:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    a5f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a5f8:	5499      	strb	r1, [r3, r2]
    a5fa:	4b20      	ldr	r3, [pc, #128]	; (a67c <send_desired+0xc50>)
    a5fc:	781a      	ldrb	r2, [r3, #0]
    a5fe:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a602:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a606:	781b      	ldrb	r3, [r3, #0]
    a608:	4413      	add	r3, r2
    a60a:	b2da      	uxtb	r2, r3
    a60c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a614:	701a      	strb	r2, [r3, #0]
    a616:	f64a 73ee 	movw	r3, #45038	; 0xafee
    a61a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a61e:	781a      	ldrb	r2, [r3, #0]
    a620:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a624:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a628:	781b      	ldrb	r3, [r3, #0]
    a62a:	4413      	add	r3, r2
    a62c:	b2da      	uxtb	r2, r3
    a62e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    a632:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a636:	701a      	strb	r2, [r3, #0]
    a638:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a63c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a640:	781b      	ldrb	r3, [r3, #0]
    a642:	3301      	adds	r3, #1
    a644:	b2da      	uxtb	r2, r3
    a646:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a64a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a64e:	701a      	strb	r2, [r3, #0]
    a650:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a658:	781b      	ldrb	r3, [r3, #0]
    a65a:	2bff      	cmp	r3, #255	; 0xff
    a65c:	d110      	bne.n	a680 <send_desired+0xc54>
    a65e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a666:	2200      	movs	r2, #0
    a668:	701a      	strb	r2, [r3, #0]
    a66a:	e009      	b.n	a680 <send_desired+0xc54>
    a66c:	2000b265 	.word	0x2000b265
    a670:	2000b266 	.word	0x2000b266
    a674:	2000b267 	.word	0x2000b267
    a678:	20000425 	.word	0x20000425
    a67c:	20000426 	.word	0x20000426
    a680:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a684:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a688:	781b      	ldrb	r3, [r3, #0]
    a68a:	461a      	mov	r2, r3
    a68c:	f240 4324 	movw	r3, #1060	; 0x424
    a690:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a694:	78d9      	ldrb	r1, [r3, #3]
    a696:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    a69a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a69e:	5499      	strb	r1, [r3, r2]
    a6a0:	4b79      	ldr	r3, [pc, #484]	; (a888 <send_desired+0xe5c>)
    a6a2:	781a      	ldrb	r2, [r3, #0]
    a6a4:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a6a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6ac:	781b      	ldrb	r3, [r3, #0]
    a6ae:	4413      	add	r3, r2
    a6b0:	b2da      	uxtb	r2, r3
    a6b2:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a6b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6ba:	701a      	strb	r2, [r3, #0]
    a6bc:	f64a 73ee 	movw	r3, #45038	; 0xafee
    a6c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6c4:	781a      	ldrb	r2, [r3, #0]
    a6c6:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a6ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6ce:	781b      	ldrb	r3, [r3, #0]
    a6d0:	4413      	add	r3, r2
    a6d2:	b2da      	uxtb	r2, r3
    a6d4:	f64a 73ee 	movw	r3, #45038	; 0xafee
    a6d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6dc:	701a      	strb	r2, [r3, #0]
    a6de:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a6e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6e6:	781b      	ldrb	r3, [r3, #0]
    a6e8:	3301      	adds	r3, #1
    a6ea:	b2da      	uxtb	r2, r3
    a6ec:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a6f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6f4:	701a      	strb	r2, [r3, #0]
    a6f6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a6fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6fe:	781b      	ldrb	r3, [r3, #0]
    a700:	2bff      	cmp	r3, #255	; 0xff
    a702:	d105      	bne.n	a710 <send_desired+0xce4>
    a704:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a708:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a70c:	2200      	movs	r2, #0
    a70e:	701a      	strb	r2, [r3, #0]
    a710:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a714:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a718:	781b      	ldrb	r3, [r3, #0]
    a71a:	461a      	mov	r2, r3
    a71c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a720:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a724:	7819      	ldrb	r1, [r3, #0]
    a726:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    a72a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a72e:	5499      	strb	r1, [r3, r2]
    a730:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a738:	781b      	ldrb	r3, [r3, #0]
    a73a:	3301      	adds	r3, #1
    a73c:	b2da      	uxtb	r2, r3
    a73e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a742:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a746:	701a      	strb	r2, [r3, #0]
    a748:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a74c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a750:	781b      	ldrb	r3, [r3, #0]
    a752:	2bff      	cmp	r3, #255	; 0xff
    a754:	d105      	bne.n	a762 <send_desired+0xd36>
    a756:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a75a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a75e:	2200      	movs	r2, #0
    a760:	701a      	strb	r2, [r3, #0]
    a762:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a766:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a76a:	781b      	ldrb	r3, [r3, #0]
    a76c:	461a      	mov	r2, r3
    a76e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    a772:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a776:	7819      	ldrb	r1, [r3, #0]
    a778:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    a77c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a780:	5499      	strb	r1, [r3, r2]
    a782:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a786:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a78a:	781b      	ldrb	r3, [r3, #0]
    a78c:	3301      	adds	r3, #1
    a78e:	b2da      	uxtb	r2, r3
    a790:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a794:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a798:	701a      	strb	r2, [r3, #0]
    a79a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a79e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7a2:	781b      	ldrb	r3, [r3, #0]
    a7a4:	2bff      	cmp	r3, #255	; 0xff
    a7a6:	d105      	bne.n	a7b4 <send_desired+0xd88>
    a7a8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a7ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7b0:	2200      	movs	r2, #0
    a7b2:	701a      	strb	r2, [r3, #0]
    a7b4:	f242 0339 	movw	r3, #8249	; 0x2039
    a7b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7bc:	781b      	ldrb	r3, [r3, #0]
    a7be:	b2db      	uxtb	r3, r3
    a7c0:	f003 0310 	and.w	r3, r3, #16
    a7c4:	2b00      	cmp	r3, #0
    a7c6:	d15a      	bne.n	a87e <send_desired+0xe52>
    a7c8:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    a7cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7d0:	781b      	ldrb	r3, [r3, #0]
    a7d2:	b2db      	uxtb	r3, r3
    a7d4:	461a      	mov	r2, r3
    a7d6:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    a7da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7de:	5c9a      	ldrb	r2, [r3, r2]
    a7e0:	f64a 73eb 	movw	r3, #45035	; 0xafeb
    a7e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7e8:	701a      	strb	r2, [r3, #0]
    a7ea:	f64a 73ec 	movw	r3, #45036	; 0xafec
    a7ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7f2:	2200      	movs	r2, #0
    a7f4:	701a      	strb	r2, [r3, #0]
    a7f6:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    a7fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a7fe:	781b      	ldrb	r3, [r3, #0]
    a800:	b2db      	uxtb	r3, r3
    a802:	3301      	adds	r3, #1
    a804:	b2da      	uxtb	r2, r3
    a806:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    a80a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a80e:	701a      	strb	r2, [r3, #0]
    a810:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    a814:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a818:	781b      	ldrb	r3, [r3, #0]
    a81a:	b2db      	uxtb	r3, r3
    a81c:	2bff      	cmp	r3, #255	; 0xff
    a81e:	d105      	bne.n	a82c <send_desired+0xe00>
    a820:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    a824:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a828:	2200      	movs	r2, #0
    a82a:	701a      	strb	r2, [r3, #0]
    a82c:	f242 0338 	movw	r3, #8248	; 0x2038
    a830:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a834:	f242 0238 	movw	r2, #8248	; 0x2038
    a838:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a83c:	7812      	ldrb	r2, [r2, #0]
    a83e:	b2d2      	uxtb	r2, r2
    a840:	f042 0201 	orr.w	r2, r2, #1
    a844:	b2d2      	uxtb	r2, r2
    a846:	701a      	strb	r2, [r3, #0]
    a848:	f242 0339 	movw	r3, #8249	; 0x2039
    a84c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a850:	f242 0239 	movw	r2, #8249	; 0x2039
    a854:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a858:	7812      	ldrb	r2, [r2, #0]
    a85a:	b2d2      	uxtb	r2, r2
    a85c:	f042 0210 	orr.w	r2, r2, #16
    a860:	b2d2      	uxtb	r2, r2
    a862:	701a      	strb	r2, [r3, #0]
    a864:	e00b      	b.n	a87e <send_desired+0xe52>
    a866:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    a86a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a86e:	781b      	ldrb	r3, [r3, #0]
    a870:	3301      	adds	r3, #1
    a872:	b2da      	uxtb	r2, r3
    a874:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    a878:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a87c:	701a      	strb	r2, [r3, #0]
}
    a87e:	46bd      	mov	sp, r7
    a880:	f85d 7b04 	ldr.w	r7, [sp], #4
    a884:	4770      	bx	lr
    a886:	bf00      	nop
    a888:	20000427 	.word	0x20000427

0000a88c <send_bat>:
void send_bat(void){  //2000ms
    a88c:	b480      	push	{r7}
    a88e:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    a890:	f64a 63e1 	movw	r3, #44769	; 0xaee1
    a894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a898:	781a      	ldrb	r2, [r3, #0]
    a89a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    a89e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    a8a2:	fba3 1302 	umull	r1, r3, r3, r2
    a8a6:	0919      	lsrs	r1, r3, #4
    a8a8:	460b      	mov	r3, r1
    a8aa:	009b      	lsls	r3, r3, #2
    a8ac:	440b      	add	r3, r1
    a8ae:	009b      	lsls	r3, r3, #2
    a8b0:	1ad3      	subs	r3, r2, r3
    a8b2:	b2db      	uxtb	r3, r3
    a8b4:	2b08      	cmp	r3, #8
    a8b6:	f040 839a 	bne.w	afee <send_bat+0x762>
    a8ba:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a8be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8c2:	781a      	ldrb	r2, [r3, #0]
    a8c4:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    a8c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8cc:	781b      	ldrb	r3, [r3, #0]
    a8ce:	b2db      	uxtb	r3, r3
    a8d0:	429a      	cmp	r2, r3
    a8d2:	d313      	bcc.n	a8fc <send_bat+0x70>
    a8d4:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    a8d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8dc:	781b      	ldrb	r3, [r3, #0]
    a8de:	b2db      	uxtb	r3, r3
    a8e0:	461a      	mov	r2, r3
    a8e2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a8e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8ea:	781b      	ldrb	r3, [r3, #0]
    a8ec:	1ad3      	subs	r3, r2, r3
    a8ee:	33ff      	adds	r3, #255	; 0xff
    a8f0:	2b0c      	cmp	r3, #12
    a8f2:	bfd4      	ite	le
    a8f4:	2300      	movle	r3, #0
    a8f6:	2301      	movgt	r3, #1
    a8f8:	b2db      	uxtb	r3, r3
    a8fa:	e011      	b.n	a920 <send_bat+0x94>
    a8fc:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    a900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a904:	781b      	ldrb	r3, [r3, #0]
    a906:	b2db      	uxtb	r3, r3
    a908:	461a      	mov	r2, r3
    a90a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a90e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a912:	781b      	ldrb	r3, [r3, #0]
    a914:	1ad3      	subs	r3, r2, r3
    a916:	2b0c      	cmp	r3, #12
    a918:	bfd4      	ite	le
    a91a:	2300      	movle	r3, #0
    a91c:	2301      	movgt	r3, #1
    a91e:	b2db      	uxtb	r3, r3
    a920:	2b00      	cmp	r3, #0
    a922:	f000 8358 	beq.w	afd6 <send_bat+0x74a>
    a926:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a92a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a92e:	781b      	ldrb	r3, [r3, #0]
    a930:	461a      	mov	r2, r3
    a932:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    a936:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a93a:	2105      	movs	r1, #5
    a93c:	5499      	strb	r1, [r3, r2]
    a93e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a942:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a946:	781b      	ldrb	r3, [r3, #0]
    a948:	3301      	adds	r3, #1
    a94a:	b2da      	uxtb	r2, r3
    a94c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a950:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a954:	701a      	strb	r2, [r3, #0]
    a956:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a95a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a95e:	781b      	ldrb	r3, [r3, #0]
    a960:	2bff      	cmp	r3, #255	; 0xff
    a962:	d105      	bne.n	a970 <send_bat+0xe4>
    a964:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a968:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a96c:	2200      	movs	r2, #0
    a96e:	701a      	strb	r2, [r3, #0]
    a970:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a978:	781b      	ldrb	r3, [r3, #0]
    a97a:	461a      	mov	r2, r3
    a97c:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    a980:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a984:	210c      	movs	r1, #12
    a986:	5499      	strb	r1, [r3, r2]
    a988:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a98c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a990:	781b      	ldrb	r3, [r3, #0]
    a992:	3301      	adds	r3, #1
    a994:	b2da      	uxtb	r2, r3
    a996:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a99a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a99e:	701a      	strb	r2, [r3, #0]
    a9a0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a9a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9a8:	781b      	ldrb	r3, [r3, #0]
    a9aa:	2bff      	cmp	r3, #255	; 0xff
    a9ac:	d105      	bne.n	a9ba <send_bat+0x12e>
    a9ae:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a9b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9b6:	2200      	movs	r2, #0
    a9b8:	701a      	strb	r2, [r3, #0]
    a9ba:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a9be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9c2:	220c      	movs	r2, #12
    a9c4:	701a      	strb	r2, [r3, #0]
    a9c6:	f64a 73ee 	movw	r3, #45038	; 0xafee
    a9ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9ce:	220c      	movs	r2, #12
    a9d0:	701a      	strb	r2, [r3, #0]
    a9d2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    a9d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9da:	781b      	ldrb	r3, [r3, #0]
    a9dc:	461a      	mov	r2, r3
    a9de:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    a9e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9e6:	7819      	ldrb	r1, [r3, #0]
    a9e8:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    a9ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9f0:	5499      	strb	r1, [r3, r2]
    a9f2:	f64a 73ed 	movw	r3, #45037	; 0xafed
    a9f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9fa:	781a      	ldrb	r2, [r3, #0]
    a9fc:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    aa00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa04:	781b      	ldrb	r3, [r3, #0]
    aa06:	4413      	add	r3, r2
    aa08:	b2da      	uxtb	r2, r3
    aa0a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    aa0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa12:	701a      	strb	r2, [r3, #0]
    aa14:	f64a 73ee 	movw	r3, #45038	; 0xafee
    aa18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa1c:	781a      	ldrb	r2, [r3, #0]
    aa1e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    aa22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa26:	781b      	ldrb	r3, [r3, #0]
    aa28:	4413      	add	r3, r2
    aa2a:	b2da      	uxtb	r2, r3
    aa2c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    aa30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa34:	701a      	strb	r2, [r3, #0]
    aa36:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    aa3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa3e:	781b      	ldrb	r3, [r3, #0]
    aa40:	3301      	adds	r3, #1
    aa42:	b2da      	uxtb	r2, r3
    aa44:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    aa48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa4c:	701a      	strb	r2, [r3, #0]
    aa4e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    aa52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa56:	781b      	ldrb	r3, [r3, #0]
    aa58:	2bff      	cmp	r3, #255	; 0xff
    aa5a:	d105      	bne.n	aa68 <send_bat+0x1dc>
    aa5c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    aa60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa64:	2200      	movs	r2, #0
    aa66:	701a      	strb	r2, [r3, #0]
    aa68:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    aa6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa70:	781b      	ldrb	r3, [r3, #0]
    aa72:	461a      	mov	r2, r3
    aa74:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    aa78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa7c:	7819      	ldrb	r1, [r3, #0]
    aa7e:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    aa82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa86:	5499      	strb	r1, [r3, r2]
    aa88:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    aa8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa90:	781a      	ldrb	r2, [r3, #0]
    aa92:	f64a 73ed 	movw	r3, #45037	; 0xafed
    aa96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa9a:	781b      	ldrb	r3, [r3, #0]
    aa9c:	4413      	add	r3, r2
    aa9e:	b2da      	uxtb	r2, r3
    aaa0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    aaa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaa8:	701a      	strb	r2, [r3, #0]
    aaaa:	f64a 73ee 	movw	r3, #45038	; 0xafee
    aaae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aab2:	781a      	ldrb	r2, [r3, #0]
    aab4:	f64a 73ed 	movw	r3, #45037	; 0xafed
    aab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aabc:	781b      	ldrb	r3, [r3, #0]
    aabe:	4413      	add	r3, r2
    aac0:	b2da      	uxtb	r2, r3
    aac2:	f64a 73ee 	movw	r3, #45038	; 0xafee
    aac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaca:	701a      	strb	r2, [r3, #0]
    aacc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    aad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aad4:	781b      	ldrb	r3, [r3, #0]
    aad6:	3301      	adds	r3, #1
    aad8:	b2da      	uxtb	r2, r3
    aada:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    aade:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aae2:	701a      	strb	r2, [r3, #0]
    aae4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    aae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aaec:	781b      	ldrb	r3, [r3, #0]
    aaee:	2bff      	cmp	r3, #255	; 0xff
    aaf0:	d105      	bne.n	aafe <send_bat+0x272>
    aaf2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    aaf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aafa:	2200      	movs	r2, #0
    aafc:	701a      	strb	r2, [r3, #0]
    aafe:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ab02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab06:	781b      	ldrb	r3, [r3, #0]
    ab08:	461a      	mov	r2, r3
    ab0a:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    ab0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab12:	7859      	ldrb	r1, [r3, #1]
    ab14:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    ab18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab1c:	5499      	strb	r1, [r3, r2]
    ab1e:	4bd5      	ldr	r3, [pc, #852]	; (ae74 <send_bat+0x5e8>)
    ab20:	781a      	ldrb	r2, [r3, #0]
    ab22:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ab26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab2a:	781b      	ldrb	r3, [r3, #0]
    ab2c:	4413      	add	r3, r2
    ab2e:	b2da      	uxtb	r2, r3
    ab30:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ab34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab38:	701a      	strb	r2, [r3, #0]
    ab3a:	f64a 73ee 	movw	r3, #45038	; 0xafee
    ab3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab42:	781a      	ldrb	r2, [r3, #0]
    ab44:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ab48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab4c:	781b      	ldrb	r3, [r3, #0]
    ab4e:	4413      	add	r3, r2
    ab50:	b2da      	uxtb	r2, r3
    ab52:	f64a 73ee 	movw	r3, #45038	; 0xafee
    ab56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab5a:	701a      	strb	r2, [r3, #0]
    ab5c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ab60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab64:	781b      	ldrb	r3, [r3, #0]
    ab66:	3301      	adds	r3, #1
    ab68:	b2da      	uxtb	r2, r3
    ab6a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ab6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab72:	701a      	strb	r2, [r3, #0]
    ab74:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ab78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab7c:	781b      	ldrb	r3, [r3, #0]
    ab7e:	2bff      	cmp	r3, #255	; 0xff
    ab80:	d105      	bne.n	ab8e <send_bat+0x302>
    ab82:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ab86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab8a:	2200      	movs	r2, #0
    ab8c:	701a      	strb	r2, [r3, #0]
    ab8e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ab92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab96:	781b      	ldrb	r3, [r3, #0]
    ab98:	461a      	mov	r2, r3
    ab9a:	f64a 63d5 	movw	r3, #44757	; 0xaed5
    ab9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aba2:	7819      	ldrb	r1, [r3, #0]
    aba4:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    aba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abac:	5499      	strb	r1, [r3, r2]
    abae:	f64a 63d5 	movw	r3, #44757	; 0xaed5
    abb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abb6:	781a      	ldrb	r2, [r3, #0]
    abb8:	f64a 73ed 	movw	r3, #45037	; 0xafed
    abbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abc0:	781b      	ldrb	r3, [r3, #0]
    abc2:	4413      	add	r3, r2
    abc4:	b2da      	uxtb	r2, r3
    abc6:	f64a 73ed 	movw	r3, #45037	; 0xafed
    abca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abce:	701a      	strb	r2, [r3, #0]
    abd0:	f64a 73ee 	movw	r3, #45038	; 0xafee
    abd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abd8:	781a      	ldrb	r2, [r3, #0]
    abda:	f64a 73ed 	movw	r3, #45037	; 0xafed
    abde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abe2:	781b      	ldrb	r3, [r3, #0]
    abe4:	4413      	add	r3, r2
    abe6:	b2da      	uxtb	r2, r3
    abe8:	f64a 73ee 	movw	r3, #45038	; 0xafee
    abec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abf0:	701a      	strb	r2, [r3, #0]
    abf2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    abf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abfa:	781b      	ldrb	r3, [r3, #0]
    abfc:	3301      	adds	r3, #1
    abfe:	b2da      	uxtb	r2, r3
    ac00:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ac04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac08:	701a      	strb	r2, [r3, #0]
    ac0a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ac0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac12:	781b      	ldrb	r3, [r3, #0]
    ac14:	2bff      	cmp	r3, #255	; 0xff
    ac16:	d105      	bne.n	ac24 <send_bat+0x398>
    ac18:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ac1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac20:	2200      	movs	r2, #0
    ac22:	701a      	strb	r2, [r3, #0]
    ac24:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ac28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac2c:	781b      	ldrb	r3, [r3, #0]
    ac2e:	461a      	mov	r2, r3
    ac30:	f24b 2356 	movw	r3, #45654	; 0xb256
    ac34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac38:	7819      	ldrb	r1, [r3, #0]
    ac3a:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    ac3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac42:	5499      	strb	r1, [r3, r2]
    ac44:	f24b 2356 	movw	r3, #45654	; 0xb256
    ac48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac4c:	781a      	ldrb	r2, [r3, #0]
    ac4e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ac52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac56:	781b      	ldrb	r3, [r3, #0]
    ac58:	4413      	add	r3, r2
    ac5a:	b2da      	uxtb	r2, r3
    ac5c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ac60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac64:	701a      	strb	r2, [r3, #0]
    ac66:	f64a 73ee 	movw	r3, #45038	; 0xafee
    ac6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac6e:	781a      	ldrb	r2, [r3, #0]
    ac70:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ac74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac78:	781b      	ldrb	r3, [r3, #0]
    ac7a:	4413      	add	r3, r2
    ac7c:	b2da      	uxtb	r2, r3
    ac7e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    ac82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac86:	701a      	strb	r2, [r3, #0]
    ac88:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ac8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac90:	781b      	ldrb	r3, [r3, #0]
    ac92:	3301      	adds	r3, #1
    ac94:	b2da      	uxtb	r2, r3
    ac96:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ac9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ac9e:	701a      	strb	r2, [r3, #0]
    aca0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    aca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aca8:	781b      	ldrb	r3, [r3, #0]
    acaa:	2bff      	cmp	r3, #255	; 0xff
    acac:	d105      	bne.n	acba <send_bat+0x42e>
    acae:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    acb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acb6:	2200      	movs	r2, #0
    acb8:	701a      	strb	r2, [r3, #0]
    acba:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    acbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acc2:	781b      	ldrb	r3, [r3, #0]
    acc4:	461a      	mov	r2, r3
    acc6:	f24b 2356 	movw	r3, #45654	; 0xb256
    acca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acce:	7859      	ldrb	r1, [r3, #1]
    acd0:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    acd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acd8:	5499      	strb	r1, [r3, r2]
    acda:	4b67      	ldr	r3, [pc, #412]	; (ae78 <send_bat+0x5ec>)
    acdc:	781a      	ldrb	r2, [r3, #0]
    acde:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ace2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ace6:	781b      	ldrb	r3, [r3, #0]
    ace8:	4413      	add	r3, r2
    acea:	b2da      	uxtb	r2, r3
    acec:	f64a 73ed 	movw	r3, #45037	; 0xafed
    acf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acf4:	701a      	strb	r2, [r3, #0]
    acf6:	f64a 73ee 	movw	r3, #45038	; 0xafee
    acfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    acfe:	781a      	ldrb	r2, [r3, #0]
    ad00:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ad04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad08:	781b      	ldrb	r3, [r3, #0]
    ad0a:	4413      	add	r3, r2
    ad0c:	b2da      	uxtb	r2, r3
    ad0e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    ad12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad16:	701a      	strb	r2, [r3, #0]
    ad18:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ad1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad20:	781b      	ldrb	r3, [r3, #0]
    ad22:	3301      	adds	r3, #1
    ad24:	b2da      	uxtb	r2, r3
    ad26:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ad2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad2e:	701a      	strb	r2, [r3, #0]
    ad30:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ad34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad38:	781b      	ldrb	r3, [r3, #0]
    ad3a:	2bff      	cmp	r3, #255	; 0xff
    ad3c:	d105      	bne.n	ad4a <send_bat+0x4be>
    ad3e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ad42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad46:	2200      	movs	r2, #0
    ad48:	701a      	strb	r2, [r3, #0]
    ad4a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ad4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad52:	781b      	ldrb	r3, [r3, #0]
    ad54:	461a      	mov	r2, r3
    ad56:	f24b 2354 	movw	r3, #45652	; 0xb254
    ad5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad5e:	7819      	ldrb	r1, [r3, #0]
    ad60:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    ad64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad68:	5499      	strb	r1, [r3, r2]
    ad6a:	f24b 2354 	movw	r3, #45652	; 0xb254
    ad6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad72:	781a      	ldrb	r2, [r3, #0]
    ad74:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ad78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad7c:	781b      	ldrb	r3, [r3, #0]
    ad7e:	4413      	add	r3, r2
    ad80:	b2da      	uxtb	r2, r3
    ad82:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ad86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad8a:	701a      	strb	r2, [r3, #0]
    ad8c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    ad90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad94:	781a      	ldrb	r2, [r3, #0]
    ad96:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ad9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad9e:	781b      	ldrb	r3, [r3, #0]
    ada0:	4413      	add	r3, r2
    ada2:	b2da      	uxtb	r2, r3
    ada4:	f64a 73ee 	movw	r3, #45038	; 0xafee
    ada8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adac:	701a      	strb	r2, [r3, #0]
    adae:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    adb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adb6:	781b      	ldrb	r3, [r3, #0]
    adb8:	3301      	adds	r3, #1
    adba:	b2da      	uxtb	r2, r3
    adbc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    adc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adc4:	701a      	strb	r2, [r3, #0]
    adc6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    adca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adce:	781b      	ldrb	r3, [r3, #0]
    add0:	2bff      	cmp	r3, #255	; 0xff
    add2:	d105      	bne.n	ade0 <send_bat+0x554>
    add4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    add8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    addc:	2200      	movs	r2, #0
    adde:	701a      	strb	r2, [r3, #0]
    ade0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ade4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ade8:	781b      	ldrb	r3, [r3, #0]
    adea:	461a      	mov	r2, r3
    adec:	f24b 2354 	movw	r3, #45652	; 0xb254
    adf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adf4:	7859      	ldrb	r1, [r3, #1]
    adf6:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    adfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    adfe:	5499      	strb	r1, [r3, r2]
    ae00:	4b1e      	ldr	r3, [pc, #120]	; (ae7c <send_bat+0x5f0>)
    ae02:	781a      	ldrb	r2, [r3, #0]
    ae04:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ae08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae0c:	781b      	ldrb	r3, [r3, #0]
    ae0e:	4413      	add	r3, r2
    ae10:	b2da      	uxtb	r2, r3
    ae12:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ae16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae1a:	701a      	strb	r2, [r3, #0]
    ae1c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    ae20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae24:	781a      	ldrb	r2, [r3, #0]
    ae26:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ae2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae2e:	781b      	ldrb	r3, [r3, #0]
    ae30:	4413      	add	r3, r2
    ae32:	b2da      	uxtb	r2, r3
    ae34:	f64a 73ee 	movw	r3, #45038	; 0xafee
    ae38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae3c:	701a      	strb	r2, [r3, #0]
    ae3e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ae42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae46:	781b      	ldrb	r3, [r3, #0]
    ae48:	3301      	adds	r3, #1
    ae4a:	b2da      	uxtb	r2, r3
    ae4c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ae50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae54:	701a      	strb	r2, [r3, #0]
    ae56:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ae5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae5e:	781b      	ldrb	r3, [r3, #0]
    ae60:	2bff      	cmp	r3, #255	; 0xff
    ae62:	d10d      	bne.n	ae80 <send_bat+0x5f4>
    ae64:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ae68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae6c:	2200      	movs	r2, #0
    ae6e:	701a      	strb	r2, [r3, #0]
    ae70:	e006      	b.n	ae80 <send_bat+0x5f4>
    ae72:	bf00      	nop
    ae74:	2000b4cd 	.word	0x2000b4cd
    ae78:	2000b257 	.word	0x2000b257
    ae7c:	2000b255 	.word	0x2000b255
    ae80:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ae84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae88:	781b      	ldrb	r3, [r3, #0]
    ae8a:	461a      	mov	r2, r3
    ae8c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ae90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae94:	7819      	ldrb	r1, [r3, #0]
    ae96:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    ae9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ae9e:	5499      	strb	r1, [r3, r2]
    aea0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    aea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aea8:	781b      	ldrb	r3, [r3, #0]
    aeaa:	3301      	adds	r3, #1
    aeac:	b2da      	uxtb	r2, r3
    aeae:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    aeb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aeb6:	701a      	strb	r2, [r3, #0]
    aeb8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    aebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aec0:	781b      	ldrb	r3, [r3, #0]
    aec2:	2bff      	cmp	r3, #255	; 0xff
    aec4:	d105      	bne.n	aed2 <send_bat+0x646>
    aec6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    aeca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aece:	2200      	movs	r2, #0
    aed0:	701a      	strb	r2, [r3, #0]
    aed2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    aed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aeda:	781b      	ldrb	r3, [r3, #0]
    aedc:	461a      	mov	r2, r3
    aede:	f64a 73ee 	movw	r3, #45038	; 0xafee
    aee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aee6:	7819      	ldrb	r1, [r3, #0]
    aee8:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    aeec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aef0:	5499      	strb	r1, [r3, r2]
    aef2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    aef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aefa:	781b      	ldrb	r3, [r3, #0]
    aefc:	3301      	adds	r3, #1
    aefe:	b2da      	uxtb	r2, r3
    af00:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    af04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af08:	701a      	strb	r2, [r3, #0]
    af0a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    af0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af12:	781b      	ldrb	r3, [r3, #0]
    af14:	2bff      	cmp	r3, #255	; 0xff
    af16:	d105      	bne.n	af24 <send_bat+0x698>
    af18:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    af1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af20:	2200      	movs	r2, #0
    af22:	701a      	strb	r2, [r3, #0]
    af24:	f242 0339 	movw	r3, #8249	; 0x2039
    af28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af2c:	781b      	ldrb	r3, [r3, #0]
    af2e:	b2db      	uxtb	r3, r3
    af30:	f003 0310 	and.w	r3, r3, #16
    af34:	2b00      	cmp	r3, #0
    af36:	d15a      	bne.n	afee <send_bat+0x762>
    af38:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    af3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af40:	781b      	ldrb	r3, [r3, #0]
    af42:	b2db      	uxtb	r3, r3
    af44:	461a      	mov	r2, r3
    af46:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    af4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af4e:	5c9a      	ldrb	r2, [r3, r2]
    af50:	f64a 73eb 	movw	r3, #45035	; 0xafeb
    af54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af58:	701a      	strb	r2, [r3, #0]
    af5a:	f64a 73ec 	movw	r3, #45036	; 0xafec
    af5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af62:	2200      	movs	r2, #0
    af64:	701a      	strb	r2, [r3, #0]
    af66:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    af6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af6e:	781b      	ldrb	r3, [r3, #0]
    af70:	b2db      	uxtb	r3, r3
    af72:	3301      	adds	r3, #1
    af74:	b2da      	uxtb	r2, r3
    af76:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    af7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af7e:	701a      	strb	r2, [r3, #0]
    af80:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    af84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af88:	781b      	ldrb	r3, [r3, #0]
    af8a:	b2db      	uxtb	r3, r3
    af8c:	2bff      	cmp	r3, #255	; 0xff
    af8e:	d105      	bne.n	af9c <send_bat+0x710>
    af90:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    af94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    af98:	2200      	movs	r2, #0
    af9a:	701a      	strb	r2, [r3, #0]
    af9c:	f242 0338 	movw	r3, #8248	; 0x2038
    afa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afa4:	f242 0238 	movw	r2, #8248	; 0x2038
    afa8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    afac:	7812      	ldrb	r2, [r2, #0]
    afae:	b2d2      	uxtb	r2, r2
    afb0:	f042 0201 	orr.w	r2, r2, #1
    afb4:	b2d2      	uxtb	r2, r2
    afb6:	701a      	strb	r2, [r3, #0]
    afb8:	f242 0339 	movw	r3, #8249	; 0x2039
    afbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afc0:	f242 0239 	movw	r2, #8249	; 0x2039
    afc4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    afc8:	7812      	ldrb	r2, [r2, #0]
    afca:	b2d2      	uxtb	r2, r2
    afcc:	f042 0210 	orr.w	r2, r2, #16
    afd0:	b2d2      	uxtb	r2, r2
    afd2:	701a      	strb	r2, [r3, #0]
    afd4:	e00b      	b.n	afee <send_bat+0x762>
    afd6:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    afda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afde:	781b      	ldrb	r3, [r3, #0]
    afe0:	3301      	adds	r3, #1
    afe2:	b2da      	uxtb	r2, r3
    afe4:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    afe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afec:	701a      	strb	r2, [r3, #0]
}
    afee:	46bd      	mov	sp, r7
    aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
    aff4:	4770      	bx	lr
    aff6:	bf00      	nop

0000aff8 <send_climb>:
void send_climb(void){  //2000ms
    aff8:	b480      	push	{r7}
    affa:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    affc:	f64a 63e1 	movw	r3, #44769	; 0xaee1
    b000:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b004:	781a      	ldrb	r2, [r3, #0]
    b006:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    b00a:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    b00e:	fba3 1302 	umull	r1, r3, r3, r2
    b012:	0919      	lsrs	r1, r3, #4
    b014:	460b      	mov	r3, r1
    b016:	009b      	lsls	r3, r3, #2
    b018:	440b      	add	r3, r1
    b01a:	009b      	lsls	r3, r3, #2
    b01c:	1ad3      	subs	r3, r2, r3
    b01e:	b2db      	uxtb	r3, r3
    b020:	2b12      	cmp	r3, #18
    b022:	f040 8554 	bne.w	bace <send_climb+0xad6>
    b026:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b02a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b02e:	781a      	ldrb	r2, [r3, #0]
    b030:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    b034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b038:	781b      	ldrb	r3, [r3, #0]
    b03a:	b2db      	uxtb	r3, r3
    b03c:	429a      	cmp	r2, r3
    b03e:	d313      	bcc.n	b068 <send_climb+0x70>
    b040:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    b044:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b048:	781b      	ldrb	r3, [r3, #0]
    b04a:	b2db      	uxtb	r3, r3
    b04c:	461a      	mov	r2, r3
    b04e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b052:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b056:	781b      	ldrb	r3, [r3, #0]
    b058:	1ad3      	subs	r3, r2, r3
    b05a:	33ff      	adds	r3, #255	; 0xff
    b05c:	2b12      	cmp	r3, #18
    b05e:	bfd4      	ite	le
    b060:	2300      	movle	r3, #0
    b062:	2301      	movgt	r3, #1
    b064:	b2db      	uxtb	r3, r3
    b066:	e011      	b.n	b08c <send_climb+0x94>
    b068:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    b06c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b070:	781b      	ldrb	r3, [r3, #0]
    b072:	b2db      	uxtb	r3, r3
    b074:	461a      	mov	r2, r3
    b076:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b07a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b07e:	781b      	ldrb	r3, [r3, #0]
    b080:	1ad3      	subs	r3, r2, r3
    b082:	2b12      	cmp	r3, #18
    b084:	bfd4      	ite	le
    b086:	2300      	movle	r3, #0
    b088:	2301      	movgt	r3, #1
    b08a:	b2db      	uxtb	r3, r3
    b08c:	2b00      	cmp	r3, #0
    b08e:	f000 8512 	beq.w	bab6 <send_climb+0xabe>
    b092:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b096:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b09a:	781b      	ldrb	r3, [r3, #0]
    b09c:	461a      	mov	r2, r3
    b09e:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    b0a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0a6:	2105      	movs	r1, #5
    b0a8:	5499      	strb	r1, [r3, r2]
    b0aa:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b0ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0b2:	781b      	ldrb	r3, [r3, #0]
    b0b4:	3301      	adds	r3, #1
    b0b6:	b2da      	uxtb	r2, r3
    b0b8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b0bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0c0:	701a      	strb	r2, [r3, #0]
    b0c2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b0c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0ca:	781b      	ldrb	r3, [r3, #0]
    b0cc:	2bff      	cmp	r3, #255	; 0xff
    b0ce:	d105      	bne.n	b0dc <send_climb+0xe4>
    b0d0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b0d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0d8:	2200      	movs	r2, #0
    b0da:	701a      	strb	r2, [r3, #0]
    b0dc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b0e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0e4:	781b      	ldrb	r3, [r3, #0]
    b0e6:	461a      	mov	r2, r3
    b0e8:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    b0ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0f0:	210e      	movs	r1, #14
    b0f2:	5499      	strb	r1, [r3, r2]
    b0f4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b0f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0fc:	781b      	ldrb	r3, [r3, #0]
    b0fe:	3301      	adds	r3, #1
    b100:	b2da      	uxtb	r2, r3
    b102:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b106:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b10a:	701a      	strb	r2, [r3, #0]
    b10c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b110:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b114:	781b      	ldrb	r3, [r3, #0]
    b116:	2bff      	cmp	r3, #255	; 0xff
    b118:	d105      	bne.n	b126 <send_climb+0x12e>
    b11a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b11e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b122:	2200      	movs	r2, #0
    b124:	701a      	strb	r2, [r3, #0]
    b126:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b12a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b12e:	220e      	movs	r2, #14
    b130:	701a      	strb	r2, [r3, #0]
    b132:	f64a 73ee 	movw	r3, #45038	; 0xafee
    b136:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b13a:	220e      	movs	r2, #14
    b13c:	701a      	strb	r2, [r3, #0]
    b13e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b142:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b146:	781b      	ldrb	r3, [r3, #0]
    b148:	461a      	mov	r2, r3
    b14a:	f24b 231c 	movw	r3, #45596	; 0xb21c
    b14e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b152:	7819      	ldrb	r1, [r3, #0]
    b154:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    b158:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b15c:	5499      	strb	r1, [r3, r2]
    b15e:	f24b 231c 	movw	r3, #45596	; 0xb21c
    b162:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b166:	781a      	ldrb	r2, [r3, #0]
    b168:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b16c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b170:	781b      	ldrb	r3, [r3, #0]
    b172:	4413      	add	r3, r2
    b174:	b2da      	uxtb	r2, r3
    b176:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b17a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b17e:	701a      	strb	r2, [r3, #0]
    b180:	f64a 73ee 	movw	r3, #45038	; 0xafee
    b184:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b188:	781a      	ldrb	r2, [r3, #0]
    b18a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b18e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b192:	781b      	ldrb	r3, [r3, #0]
    b194:	4413      	add	r3, r2
    b196:	b2da      	uxtb	r2, r3
    b198:	f64a 73ee 	movw	r3, #45038	; 0xafee
    b19c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1a0:	701a      	strb	r2, [r3, #0]
    b1a2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b1a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1aa:	781b      	ldrb	r3, [r3, #0]
    b1ac:	3301      	adds	r3, #1
    b1ae:	b2da      	uxtb	r2, r3
    b1b0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b1b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1b8:	701a      	strb	r2, [r3, #0]
    b1ba:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b1be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1c2:	781b      	ldrb	r3, [r3, #0]
    b1c4:	2bff      	cmp	r3, #255	; 0xff
    b1c6:	d105      	bne.n	b1d4 <send_climb+0x1dc>
    b1c8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b1cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1d0:	2200      	movs	r2, #0
    b1d2:	701a      	strb	r2, [r3, #0]
    b1d4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b1d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1dc:	781b      	ldrb	r3, [r3, #0]
    b1de:	461a      	mov	r2, r3
    b1e0:	f24b 231c 	movw	r3, #45596	; 0xb21c
    b1e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1e8:	7859      	ldrb	r1, [r3, #1]
    b1ea:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    b1ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b1f2:	5499      	strb	r1, [r3, r2]
    b1f4:	4bd3      	ldr	r3, [pc, #844]	; (b544 <send_climb+0x54c>)
    b1f6:	781a      	ldrb	r2, [r3, #0]
    b1f8:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b1fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b200:	781b      	ldrb	r3, [r3, #0]
    b202:	4413      	add	r3, r2
    b204:	b2da      	uxtb	r2, r3
    b206:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b20a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b20e:	701a      	strb	r2, [r3, #0]
    b210:	f64a 73ee 	movw	r3, #45038	; 0xafee
    b214:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b218:	781a      	ldrb	r2, [r3, #0]
    b21a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b21e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b222:	781b      	ldrb	r3, [r3, #0]
    b224:	4413      	add	r3, r2
    b226:	b2da      	uxtb	r2, r3
    b228:	f64a 73ee 	movw	r3, #45038	; 0xafee
    b22c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b230:	701a      	strb	r2, [r3, #0]
    b232:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b236:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b23a:	781b      	ldrb	r3, [r3, #0]
    b23c:	3301      	adds	r3, #1
    b23e:	b2da      	uxtb	r2, r3
    b240:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b248:	701a      	strb	r2, [r3, #0]
    b24a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b24e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b252:	781b      	ldrb	r3, [r3, #0]
    b254:	2bff      	cmp	r3, #255	; 0xff
    b256:	d105      	bne.n	b264 <send_climb+0x26c>
    b258:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b25c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b260:	2200      	movs	r2, #0
    b262:	701a      	strb	r2, [r3, #0]
    b264:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b268:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b26c:	781b      	ldrb	r3, [r3, #0]
    b26e:	461a      	mov	r2, r3
    b270:	f24b 2330 	movw	r3, #45616	; 0xb230
    b274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b278:	7819      	ldrb	r1, [r3, #0]
    b27a:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    b27e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b282:	5499      	strb	r1, [r3, r2]
    b284:	f24b 2330 	movw	r3, #45616	; 0xb230
    b288:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b28c:	781a      	ldrb	r2, [r3, #0]
    b28e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b296:	781b      	ldrb	r3, [r3, #0]
    b298:	4413      	add	r3, r2
    b29a:	b2da      	uxtb	r2, r3
    b29c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b2a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2a4:	701a      	strb	r2, [r3, #0]
    b2a6:	f64a 73ee 	movw	r3, #45038	; 0xafee
    b2aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2ae:	781a      	ldrb	r2, [r3, #0]
    b2b0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b2b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2b8:	781b      	ldrb	r3, [r3, #0]
    b2ba:	4413      	add	r3, r2
    b2bc:	b2da      	uxtb	r2, r3
    b2be:	f64a 73ee 	movw	r3, #45038	; 0xafee
    b2c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2c6:	701a      	strb	r2, [r3, #0]
    b2c8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b2cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2d0:	781b      	ldrb	r3, [r3, #0]
    b2d2:	3301      	adds	r3, #1
    b2d4:	b2da      	uxtb	r2, r3
    b2d6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b2da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2de:	701a      	strb	r2, [r3, #0]
    b2e0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b2e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2e8:	781b      	ldrb	r3, [r3, #0]
    b2ea:	2bff      	cmp	r3, #255	; 0xff
    b2ec:	d105      	bne.n	b2fa <send_climb+0x302>
    b2ee:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b2f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2f6:	2200      	movs	r2, #0
    b2f8:	701a      	strb	r2, [r3, #0]
    b2fa:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b2fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b302:	781b      	ldrb	r3, [r3, #0]
    b304:	461a      	mov	r2, r3
    b306:	f24b 2330 	movw	r3, #45616	; 0xb230
    b30a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b30e:	7859      	ldrb	r1, [r3, #1]
    b310:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    b314:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b318:	5499      	strb	r1, [r3, r2]
    b31a:	4b8b      	ldr	r3, [pc, #556]	; (b548 <send_climb+0x550>)
    b31c:	781a      	ldrb	r2, [r3, #0]
    b31e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b322:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b326:	781b      	ldrb	r3, [r3, #0]
    b328:	4413      	add	r3, r2
    b32a:	b2da      	uxtb	r2, r3
    b32c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b334:	701a      	strb	r2, [r3, #0]
    b336:	f64a 73ee 	movw	r3, #45038	; 0xafee
    b33a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b33e:	781a      	ldrb	r2, [r3, #0]
    b340:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b344:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b348:	781b      	ldrb	r3, [r3, #0]
    b34a:	4413      	add	r3, r2
    b34c:	b2da      	uxtb	r2, r3
    b34e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    b352:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b356:	701a      	strb	r2, [r3, #0]
    b358:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b35c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b360:	781b      	ldrb	r3, [r3, #0]
    b362:	3301      	adds	r3, #1
    b364:	b2da      	uxtb	r2, r3
    b366:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b36a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b36e:	701a      	strb	r2, [r3, #0]
    b370:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b374:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b378:	781b      	ldrb	r3, [r3, #0]
    b37a:	2bff      	cmp	r3, #255	; 0xff
    b37c:	d105      	bne.n	b38a <send_climb+0x392>
    b37e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b382:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b386:	2200      	movs	r2, #0
    b388:	701a      	strb	r2, [r3, #0]
    b38a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b38e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b392:	781b      	ldrb	r3, [r3, #0]
    b394:	461a      	mov	r2, r3
    b396:	f24b 2330 	movw	r3, #45616	; 0xb230
    b39a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b39e:	7899      	ldrb	r1, [r3, #2]
    b3a0:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    b3a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3a8:	5499      	strb	r1, [r3, r2]
    b3aa:	4b68      	ldr	r3, [pc, #416]	; (b54c <send_climb+0x554>)
    b3ac:	781a      	ldrb	r2, [r3, #0]
    b3ae:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b3b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3b6:	781b      	ldrb	r3, [r3, #0]
    b3b8:	4413      	add	r3, r2
    b3ba:	b2da      	uxtb	r2, r3
    b3bc:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b3c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3c4:	701a      	strb	r2, [r3, #0]
    b3c6:	f64a 73ee 	movw	r3, #45038	; 0xafee
    b3ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3ce:	781a      	ldrb	r2, [r3, #0]
    b3d0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b3d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3d8:	781b      	ldrb	r3, [r3, #0]
    b3da:	4413      	add	r3, r2
    b3dc:	b2da      	uxtb	r2, r3
    b3de:	f64a 73ee 	movw	r3, #45038	; 0xafee
    b3e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3e6:	701a      	strb	r2, [r3, #0]
    b3e8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b3ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3f0:	781b      	ldrb	r3, [r3, #0]
    b3f2:	3301      	adds	r3, #1
    b3f4:	b2da      	uxtb	r2, r3
    b3f6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b3fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3fe:	701a      	strb	r2, [r3, #0]
    b400:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b404:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b408:	781b      	ldrb	r3, [r3, #0]
    b40a:	2bff      	cmp	r3, #255	; 0xff
    b40c:	d105      	bne.n	b41a <send_climb+0x422>
    b40e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b412:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b416:	2200      	movs	r2, #0
    b418:	701a      	strb	r2, [r3, #0]
    b41a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b41e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b422:	781b      	ldrb	r3, [r3, #0]
    b424:	461a      	mov	r2, r3
    b426:	f24b 2330 	movw	r3, #45616	; 0xb230
    b42a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b42e:	78d9      	ldrb	r1, [r3, #3]
    b430:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    b434:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b438:	5499      	strb	r1, [r3, r2]
    b43a:	4b45      	ldr	r3, [pc, #276]	; (b550 <send_climb+0x558>)
    b43c:	781a      	ldrb	r2, [r3, #0]
    b43e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b442:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b446:	781b      	ldrb	r3, [r3, #0]
    b448:	4413      	add	r3, r2
    b44a:	b2da      	uxtb	r2, r3
    b44c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b450:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b454:	701a      	strb	r2, [r3, #0]
    b456:	f64a 73ee 	movw	r3, #45038	; 0xafee
    b45a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b45e:	781a      	ldrb	r2, [r3, #0]
    b460:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b464:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b468:	781b      	ldrb	r3, [r3, #0]
    b46a:	4413      	add	r3, r2
    b46c:	b2da      	uxtb	r2, r3
    b46e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    b472:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b476:	701a      	strb	r2, [r3, #0]
    b478:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b480:	781b      	ldrb	r3, [r3, #0]
    b482:	3301      	adds	r3, #1
    b484:	b2da      	uxtb	r2, r3
    b486:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b48a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b48e:	701a      	strb	r2, [r3, #0]
    b490:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b494:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b498:	781b      	ldrb	r3, [r3, #0]
    b49a:	2bff      	cmp	r3, #255	; 0xff
    b49c:	d105      	bne.n	b4aa <send_climb+0x4b2>
    b49e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b4a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4a6:	2200      	movs	r2, #0
    b4a8:	701a      	strb	r2, [r3, #0]
    b4aa:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b4ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4b2:	781b      	ldrb	r3, [r3, #0]
    b4b4:	461a      	mov	r2, r3
    b4b6:	f24b 2338 	movw	r3, #45624	; 0xb238
    b4ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4be:	7819      	ldrb	r1, [r3, #0]
    b4c0:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    b4c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4c8:	5499      	strb	r1, [r3, r2]
    b4ca:	f24b 2338 	movw	r3, #45624	; 0xb238
    b4ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4d2:	781a      	ldrb	r2, [r3, #0]
    b4d4:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b4d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4dc:	781b      	ldrb	r3, [r3, #0]
    b4de:	4413      	add	r3, r2
    b4e0:	b2da      	uxtb	r2, r3
    b4e2:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b4e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4ea:	701a      	strb	r2, [r3, #0]
    b4ec:	f64a 73ee 	movw	r3, #45038	; 0xafee
    b4f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4f4:	781a      	ldrb	r2, [r3, #0]
    b4f6:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b4fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b4fe:	781b      	ldrb	r3, [r3, #0]
    b500:	4413      	add	r3, r2
    b502:	b2da      	uxtb	r2, r3
    b504:	f64a 73ee 	movw	r3, #45038	; 0xafee
    b508:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b50c:	701a      	strb	r2, [r3, #0]
    b50e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b512:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b516:	781b      	ldrb	r3, [r3, #0]
    b518:	3301      	adds	r3, #1
    b51a:	b2da      	uxtb	r2, r3
    b51c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b524:	701a      	strb	r2, [r3, #0]
    b526:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b52a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b52e:	781b      	ldrb	r3, [r3, #0]
    b530:	2bff      	cmp	r3, #255	; 0xff
    b532:	d10f      	bne.n	b554 <send_climb+0x55c>
    b534:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b53c:	2200      	movs	r2, #0
    b53e:	701a      	strb	r2, [r3, #0]
    b540:	e008      	b.n	b554 <send_climb+0x55c>
    b542:	bf00      	nop
    b544:	2000b21d 	.word	0x2000b21d
    b548:	2000b231 	.word	0x2000b231
    b54c:	2000b232 	.word	0x2000b232
    b550:	2000b233 	.word	0x2000b233
    b554:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b558:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b55c:	781b      	ldrb	r3, [r3, #0]
    b55e:	461a      	mov	r2, r3
    b560:	f24b 2338 	movw	r3, #45624	; 0xb238
    b564:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b568:	7859      	ldrb	r1, [r3, #1]
    b56a:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    b56e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b572:	5499      	strb	r1, [r3, r2]
    b574:	4bd1      	ldr	r3, [pc, #836]	; (b8bc <send_climb+0x8c4>)
    b576:	781a      	ldrb	r2, [r3, #0]
    b578:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b57c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b580:	781b      	ldrb	r3, [r3, #0]
    b582:	4413      	add	r3, r2
    b584:	b2da      	uxtb	r2, r3
    b586:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b58a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b58e:	701a      	strb	r2, [r3, #0]
    b590:	f64a 73ee 	movw	r3, #45038	; 0xafee
    b594:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b598:	781a      	ldrb	r2, [r3, #0]
    b59a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b59e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5a2:	781b      	ldrb	r3, [r3, #0]
    b5a4:	4413      	add	r3, r2
    b5a6:	b2da      	uxtb	r2, r3
    b5a8:	f64a 73ee 	movw	r3, #45038	; 0xafee
    b5ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5b0:	701a      	strb	r2, [r3, #0]
    b5b2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b5b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5ba:	781b      	ldrb	r3, [r3, #0]
    b5bc:	3301      	adds	r3, #1
    b5be:	b2da      	uxtb	r2, r3
    b5c0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b5c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5c8:	701a      	strb	r2, [r3, #0]
    b5ca:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b5ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5d2:	781b      	ldrb	r3, [r3, #0]
    b5d4:	2bff      	cmp	r3, #255	; 0xff
    b5d6:	d105      	bne.n	b5e4 <send_climb+0x5ec>
    b5d8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b5dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5e0:	2200      	movs	r2, #0
    b5e2:	701a      	strb	r2, [r3, #0]
    b5e4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b5e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5ec:	781b      	ldrb	r3, [r3, #0]
    b5ee:	461a      	mov	r2, r3
    b5f0:	f24b 2338 	movw	r3, #45624	; 0xb238
    b5f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b5f8:	7899      	ldrb	r1, [r3, #2]
    b5fa:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    b5fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b602:	5499      	strb	r1, [r3, r2]
    b604:	4bae      	ldr	r3, [pc, #696]	; (b8c0 <send_climb+0x8c8>)
    b606:	781a      	ldrb	r2, [r3, #0]
    b608:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b60c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b610:	781b      	ldrb	r3, [r3, #0]
    b612:	4413      	add	r3, r2
    b614:	b2da      	uxtb	r2, r3
    b616:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b61a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b61e:	701a      	strb	r2, [r3, #0]
    b620:	f64a 73ee 	movw	r3, #45038	; 0xafee
    b624:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b628:	781a      	ldrb	r2, [r3, #0]
    b62a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b62e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b632:	781b      	ldrb	r3, [r3, #0]
    b634:	4413      	add	r3, r2
    b636:	b2da      	uxtb	r2, r3
    b638:	f64a 73ee 	movw	r3, #45038	; 0xafee
    b63c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b640:	701a      	strb	r2, [r3, #0]
    b642:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b646:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b64a:	781b      	ldrb	r3, [r3, #0]
    b64c:	3301      	adds	r3, #1
    b64e:	b2da      	uxtb	r2, r3
    b650:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b658:	701a      	strb	r2, [r3, #0]
    b65a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b65e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b662:	781b      	ldrb	r3, [r3, #0]
    b664:	2bff      	cmp	r3, #255	; 0xff
    b666:	d105      	bne.n	b674 <send_climb+0x67c>
    b668:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b66c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b670:	2200      	movs	r2, #0
    b672:	701a      	strb	r2, [r3, #0]
    b674:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b67c:	781b      	ldrb	r3, [r3, #0]
    b67e:	461a      	mov	r2, r3
    b680:	f24b 2338 	movw	r3, #45624	; 0xb238
    b684:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b688:	78d9      	ldrb	r1, [r3, #3]
    b68a:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    b68e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b692:	5499      	strb	r1, [r3, r2]
    b694:	4b8b      	ldr	r3, [pc, #556]	; (b8c4 <send_climb+0x8cc>)
    b696:	781a      	ldrb	r2, [r3, #0]
    b698:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b69c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6a0:	781b      	ldrb	r3, [r3, #0]
    b6a2:	4413      	add	r3, r2
    b6a4:	b2da      	uxtb	r2, r3
    b6a6:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b6aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6ae:	701a      	strb	r2, [r3, #0]
    b6b0:	f64a 73ee 	movw	r3, #45038	; 0xafee
    b6b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6b8:	781a      	ldrb	r2, [r3, #0]
    b6ba:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b6be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6c2:	781b      	ldrb	r3, [r3, #0]
    b6c4:	4413      	add	r3, r2
    b6c6:	b2da      	uxtb	r2, r3
    b6c8:	f64a 73ee 	movw	r3, #45038	; 0xafee
    b6cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6d0:	701a      	strb	r2, [r3, #0]
    b6d2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b6d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6da:	781b      	ldrb	r3, [r3, #0]
    b6dc:	3301      	adds	r3, #1
    b6de:	b2da      	uxtb	r2, r3
    b6e0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b6e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6e8:	701a      	strb	r2, [r3, #0]
    b6ea:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b6ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6f2:	781b      	ldrb	r3, [r3, #0]
    b6f4:	2bff      	cmp	r3, #255	; 0xff
    b6f6:	d105      	bne.n	b704 <send_climb+0x70c>
    b6f8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b6fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b700:	2200      	movs	r2, #0
    b702:	701a      	strb	r2, [r3, #0]
    b704:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b708:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b70c:	781b      	ldrb	r3, [r3, #0]
    b70e:	461a      	mov	r2, r3
    b710:	f648 03a8 	movw	r3, #34984	; 0x88a8
    b714:	f2c0 0301 	movt	r3, #1
    b718:	7819      	ldrb	r1, [r3, #0]
    b71a:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    b71e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b722:	5499      	strb	r1, [r3, r2]
    b724:	f648 03a8 	movw	r3, #34984	; 0x88a8
    b728:	f2c0 0301 	movt	r3, #1
    b72c:	781a      	ldrb	r2, [r3, #0]
    b72e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b732:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b736:	781b      	ldrb	r3, [r3, #0]
    b738:	4413      	add	r3, r2
    b73a:	b2da      	uxtb	r2, r3
    b73c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b740:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b744:	701a      	strb	r2, [r3, #0]
    b746:	f64a 73ee 	movw	r3, #45038	; 0xafee
    b74a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b74e:	781a      	ldrb	r2, [r3, #0]
    b750:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b754:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b758:	781b      	ldrb	r3, [r3, #0]
    b75a:	4413      	add	r3, r2
    b75c:	b2da      	uxtb	r2, r3
    b75e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    b762:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b766:	701a      	strb	r2, [r3, #0]
    b768:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b76c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b770:	781b      	ldrb	r3, [r3, #0]
    b772:	3301      	adds	r3, #1
    b774:	b2da      	uxtb	r2, r3
    b776:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b77a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b77e:	701a      	strb	r2, [r3, #0]
    b780:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b784:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b788:	781b      	ldrb	r3, [r3, #0]
    b78a:	2bff      	cmp	r3, #255	; 0xff
    b78c:	d105      	bne.n	b79a <send_climb+0x7a2>
    b78e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b792:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b796:	2200      	movs	r2, #0
    b798:	701a      	strb	r2, [r3, #0]
    b79a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b79e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7a2:	781b      	ldrb	r3, [r3, #0]
    b7a4:	461a      	mov	r2, r3
    b7a6:	f648 03a8 	movw	r3, #34984	; 0x88a8
    b7aa:	f2c0 0301 	movt	r3, #1
    b7ae:	7859      	ldrb	r1, [r3, #1]
    b7b0:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    b7b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7b8:	5499      	strb	r1, [r3, r2]
    b7ba:	4b43      	ldr	r3, [pc, #268]	; (b8c8 <send_climb+0x8d0>)
    b7bc:	781a      	ldrb	r2, [r3, #0]
    b7be:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b7c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7c6:	781b      	ldrb	r3, [r3, #0]
    b7c8:	4413      	add	r3, r2
    b7ca:	b2da      	uxtb	r2, r3
    b7cc:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b7d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7d4:	701a      	strb	r2, [r3, #0]
    b7d6:	f64a 73ee 	movw	r3, #45038	; 0xafee
    b7da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7de:	781a      	ldrb	r2, [r3, #0]
    b7e0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b7e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7e8:	781b      	ldrb	r3, [r3, #0]
    b7ea:	4413      	add	r3, r2
    b7ec:	b2da      	uxtb	r2, r3
    b7ee:	f64a 73ee 	movw	r3, #45038	; 0xafee
    b7f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b7f6:	701a      	strb	r2, [r3, #0]
    b7f8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b7fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b800:	781b      	ldrb	r3, [r3, #0]
    b802:	3301      	adds	r3, #1
    b804:	b2da      	uxtb	r2, r3
    b806:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b80a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b80e:	701a      	strb	r2, [r3, #0]
    b810:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b814:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b818:	781b      	ldrb	r3, [r3, #0]
    b81a:	2bff      	cmp	r3, #255	; 0xff
    b81c:	d105      	bne.n	b82a <send_climb+0x832>
    b81e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b822:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b826:	2200      	movs	r2, #0
    b828:	701a      	strb	r2, [r3, #0]
    b82a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b82e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b832:	781b      	ldrb	r3, [r3, #0]
    b834:	461a      	mov	r2, r3
    b836:	f648 03a8 	movw	r3, #34984	; 0x88a8
    b83a:	f2c0 0301 	movt	r3, #1
    b83e:	7899      	ldrb	r1, [r3, #2]
    b840:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    b844:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b848:	5499      	strb	r1, [r3, r2]
    b84a:	4b20      	ldr	r3, [pc, #128]	; (b8cc <send_climb+0x8d4>)
    b84c:	781a      	ldrb	r2, [r3, #0]
    b84e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b852:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b856:	781b      	ldrb	r3, [r3, #0]
    b858:	4413      	add	r3, r2
    b85a:	b2da      	uxtb	r2, r3
    b85c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b860:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b864:	701a      	strb	r2, [r3, #0]
    b866:	f64a 73ee 	movw	r3, #45038	; 0xafee
    b86a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b86e:	781a      	ldrb	r2, [r3, #0]
    b870:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b874:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b878:	781b      	ldrb	r3, [r3, #0]
    b87a:	4413      	add	r3, r2
    b87c:	b2da      	uxtb	r2, r3
    b87e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    b882:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b886:	701a      	strb	r2, [r3, #0]
    b888:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b88c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b890:	781b      	ldrb	r3, [r3, #0]
    b892:	3301      	adds	r3, #1
    b894:	b2da      	uxtb	r2, r3
    b896:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b89a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b89e:	701a      	strb	r2, [r3, #0]
    b8a0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b8a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8a8:	781b      	ldrb	r3, [r3, #0]
    b8aa:	2bff      	cmp	r3, #255	; 0xff
    b8ac:	d110      	bne.n	b8d0 <send_climb+0x8d8>
    b8ae:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b8b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8b6:	2200      	movs	r2, #0
    b8b8:	701a      	strb	r2, [r3, #0]
    b8ba:	e009      	b.n	b8d0 <send_climb+0x8d8>
    b8bc:	2000b239 	.word	0x2000b239
    b8c0:	2000b23a 	.word	0x2000b23a
    b8c4:	2000b23b 	.word	0x2000b23b
    b8c8:	000188a9 	.word	0x000188a9
    b8cc:	000188aa 	.word	0x000188aa
    b8d0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b8d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8d8:	781b      	ldrb	r3, [r3, #0]
    b8da:	461a      	mov	r2, r3
    b8dc:	f648 03a8 	movw	r3, #34984	; 0x88a8
    b8e0:	f2c0 0301 	movt	r3, #1
    b8e4:	78d9      	ldrb	r1, [r3, #3]
    b8e6:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    b8ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8ee:	5499      	strb	r1, [r3, r2]
    b8f0:	4b79      	ldr	r3, [pc, #484]	; (bad8 <send_climb+0xae0>)
    b8f2:	781a      	ldrb	r2, [r3, #0]
    b8f4:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b8f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b8fc:	781b      	ldrb	r3, [r3, #0]
    b8fe:	4413      	add	r3, r2
    b900:	b2da      	uxtb	r2, r3
    b902:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b906:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b90a:	701a      	strb	r2, [r3, #0]
    b90c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    b910:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b914:	781a      	ldrb	r2, [r3, #0]
    b916:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b91a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b91e:	781b      	ldrb	r3, [r3, #0]
    b920:	4413      	add	r3, r2
    b922:	b2da      	uxtb	r2, r3
    b924:	f64a 73ee 	movw	r3, #45038	; 0xafee
    b928:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b92c:	701a      	strb	r2, [r3, #0]
    b92e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b932:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b936:	781b      	ldrb	r3, [r3, #0]
    b938:	3301      	adds	r3, #1
    b93a:	b2da      	uxtb	r2, r3
    b93c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b940:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b944:	701a      	strb	r2, [r3, #0]
    b946:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b94a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b94e:	781b      	ldrb	r3, [r3, #0]
    b950:	2bff      	cmp	r3, #255	; 0xff
    b952:	d105      	bne.n	b960 <send_climb+0x968>
    b954:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b958:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b95c:	2200      	movs	r2, #0
    b95e:	701a      	strb	r2, [r3, #0]
    b960:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b964:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b968:	781b      	ldrb	r3, [r3, #0]
    b96a:	461a      	mov	r2, r3
    b96c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    b970:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b974:	7819      	ldrb	r1, [r3, #0]
    b976:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    b97a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b97e:	5499      	strb	r1, [r3, r2]
    b980:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b984:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b988:	781b      	ldrb	r3, [r3, #0]
    b98a:	3301      	adds	r3, #1
    b98c:	b2da      	uxtb	r2, r3
    b98e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b992:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b996:	701a      	strb	r2, [r3, #0]
    b998:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b99c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9a0:	781b      	ldrb	r3, [r3, #0]
    b9a2:	2bff      	cmp	r3, #255	; 0xff
    b9a4:	d105      	bne.n	b9b2 <send_climb+0x9ba>
    b9a6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b9aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9ae:	2200      	movs	r2, #0
    b9b0:	701a      	strb	r2, [r3, #0]
    b9b2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b9b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9ba:	781b      	ldrb	r3, [r3, #0]
    b9bc:	461a      	mov	r2, r3
    b9be:	f64a 73ee 	movw	r3, #45038	; 0xafee
    b9c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9c6:	7819      	ldrb	r1, [r3, #0]
    b9c8:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    b9cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9d0:	5499      	strb	r1, [r3, r2]
    b9d2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b9d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9da:	781b      	ldrb	r3, [r3, #0]
    b9dc:	3301      	adds	r3, #1
    b9de:	b2da      	uxtb	r2, r3
    b9e0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b9e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9e8:	701a      	strb	r2, [r3, #0]
    b9ea:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b9ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b9f2:	781b      	ldrb	r3, [r3, #0]
    b9f4:	2bff      	cmp	r3, #255	; 0xff
    b9f6:	d105      	bne.n	ba04 <send_climb+0xa0c>
    b9f8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    b9fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba00:	2200      	movs	r2, #0
    ba02:	701a      	strb	r2, [r3, #0]
    ba04:	f242 0339 	movw	r3, #8249	; 0x2039
    ba08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba0c:	781b      	ldrb	r3, [r3, #0]
    ba0e:	b2db      	uxtb	r3, r3
    ba10:	f003 0310 	and.w	r3, r3, #16
    ba14:	2b00      	cmp	r3, #0
    ba16:	d15a      	bne.n	bace <send_climb+0xad6>
    ba18:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    ba1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba20:	781b      	ldrb	r3, [r3, #0]
    ba22:	b2db      	uxtb	r3, r3
    ba24:	461a      	mov	r2, r3
    ba26:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    ba2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba2e:	5c9a      	ldrb	r2, [r3, r2]
    ba30:	f64a 73eb 	movw	r3, #45035	; 0xafeb
    ba34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba38:	701a      	strb	r2, [r3, #0]
    ba3a:	f64a 73ec 	movw	r3, #45036	; 0xafec
    ba3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba42:	2200      	movs	r2, #0
    ba44:	701a      	strb	r2, [r3, #0]
    ba46:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    ba4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba4e:	781b      	ldrb	r3, [r3, #0]
    ba50:	b2db      	uxtb	r3, r3
    ba52:	3301      	adds	r3, #1
    ba54:	b2da      	uxtb	r2, r3
    ba56:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    ba5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba5e:	701a      	strb	r2, [r3, #0]
    ba60:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    ba64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba68:	781b      	ldrb	r3, [r3, #0]
    ba6a:	b2db      	uxtb	r3, r3
    ba6c:	2bff      	cmp	r3, #255	; 0xff
    ba6e:	d105      	bne.n	ba7c <send_climb+0xa84>
    ba70:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    ba74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba78:	2200      	movs	r2, #0
    ba7a:	701a      	strb	r2, [r3, #0]
    ba7c:	f242 0338 	movw	r3, #8248	; 0x2038
    ba80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ba84:	f242 0238 	movw	r2, #8248	; 0x2038
    ba88:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ba8c:	7812      	ldrb	r2, [r2, #0]
    ba8e:	b2d2      	uxtb	r2, r2
    ba90:	f042 0201 	orr.w	r2, r2, #1
    ba94:	b2d2      	uxtb	r2, r2
    ba96:	701a      	strb	r2, [r3, #0]
    ba98:	f242 0339 	movw	r3, #8249	; 0x2039
    ba9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    baa0:	f242 0239 	movw	r2, #8249	; 0x2039
    baa4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    baa8:	7812      	ldrb	r2, [r2, #0]
    baaa:	b2d2      	uxtb	r2, r2
    baac:	f042 0210 	orr.w	r2, r2, #16
    bab0:	b2d2      	uxtb	r2, r2
    bab2:	701a      	strb	r2, [r3, #0]
    bab4:	e00b      	b.n	bace <send_climb+0xad6>
    bab6:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    baba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    babe:	781b      	ldrb	r3, [r3, #0]
    bac0:	3301      	adds	r3, #1
    bac2:	b2da      	uxtb	r2, r3
    bac4:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    bac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bacc:	701a      	strb	r2, [r3, #0]
}
    bace:	46bd      	mov	sp, r7
    bad0:	f85d 7b04 	ldr.w	r7, [sp], #4
    bad4:	4770      	bx	lr
    bad6:	bf00      	nop
    bad8:	000188ab 	.word	0x000188ab

0000badc <send_mode>:
void send_mode(void){  //5000ms
    badc:	b480      	push	{r7}
    bade:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    bae0:	f64a 63e1 	movw	r3, #44769	; 0xaee1
    bae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bae8:	781a      	ldrb	r2, [r3, #0]
    baea:	f248 531f 	movw	r3, #34079	; 0x851f
    baee:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    baf2:	fba3 1302 	umull	r1, r3, r3, r2
    baf6:	091b      	lsrs	r3, r3, #4
    baf8:	2132      	movs	r1, #50	; 0x32
    bafa:	fb01 f303 	mul.w	r3, r1, r3
    bafe:	1ad3      	subs	r3, r2, r3
    bb00:	b2db      	uxtb	r3, r3
    bb02:	2b09      	cmp	r3, #9
    bb04:	f040 82ba 	bne.w	c07c <send_mode+0x5a0>
    bb08:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bb0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb10:	781a      	ldrb	r2, [r3, #0]
    bb12:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    bb16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb1a:	781b      	ldrb	r3, [r3, #0]
    bb1c:	b2db      	uxtb	r3, r3
    bb1e:	429a      	cmp	r2, r3
    bb20:	d313      	bcc.n	bb4a <send_mode+0x6e>
    bb22:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    bb26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb2a:	781b      	ldrb	r3, [r3, #0]
    bb2c:	b2db      	uxtb	r3, r3
    bb2e:	461a      	mov	r2, r3
    bb30:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bb34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb38:	781b      	ldrb	r3, [r3, #0]
    bb3a:	1ad3      	subs	r3, r2, r3
    bb3c:	33ff      	adds	r3, #255	; 0xff
    bb3e:	2b09      	cmp	r3, #9
    bb40:	bfd4      	ite	le
    bb42:	2300      	movle	r3, #0
    bb44:	2301      	movgt	r3, #1
    bb46:	b2db      	uxtb	r3, r3
    bb48:	e011      	b.n	bb6e <send_mode+0x92>
    bb4a:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    bb4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb52:	781b      	ldrb	r3, [r3, #0]
    bb54:	b2db      	uxtb	r3, r3
    bb56:	461a      	mov	r2, r3
    bb58:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bb5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb60:	781b      	ldrb	r3, [r3, #0]
    bb62:	1ad3      	subs	r3, r2, r3
    bb64:	2b09      	cmp	r3, #9
    bb66:	bfd4      	ite	le
    bb68:	2300      	movle	r3, #0
    bb6a:	2301      	movgt	r3, #1
    bb6c:	b2db      	uxtb	r3, r3
    bb6e:	2b00      	cmp	r3, #0
    bb70:	f000 8278 	beq.w	c064 <send_mode+0x588>
    bb74:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bb78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb7c:	781b      	ldrb	r3, [r3, #0]
    bb7e:	461a      	mov	r2, r3
    bb80:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    bb84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb88:	2105      	movs	r1, #5
    bb8a:	5499      	strb	r1, [r3, r2]
    bb8c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bb90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb94:	781b      	ldrb	r3, [r3, #0]
    bb96:	3301      	adds	r3, #1
    bb98:	b2da      	uxtb	r2, r3
    bb9a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bb9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bba2:	701a      	strb	r2, [r3, #0]
    bba4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbac:	781b      	ldrb	r3, [r3, #0]
    bbae:	2bff      	cmp	r3, #255	; 0xff
    bbb0:	d105      	bne.n	bbbe <send_mode+0xe2>
    bbb2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bbb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbba:	2200      	movs	r2, #0
    bbbc:	701a      	strb	r2, [r3, #0]
    bbbe:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bbc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbc6:	781b      	ldrb	r3, [r3, #0]
    bbc8:	461a      	mov	r2, r3
    bbca:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    bbce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbd2:	210b      	movs	r1, #11
    bbd4:	5499      	strb	r1, [r3, r2]
    bbd6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bbda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbde:	781b      	ldrb	r3, [r3, #0]
    bbe0:	3301      	adds	r3, #1
    bbe2:	b2da      	uxtb	r2, r3
    bbe4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bbe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbec:	701a      	strb	r2, [r3, #0]
    bbee:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bbf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbf6:	781b      	ldrb	r3, [r3, #0]
    bbf8:	2bff      	cmp	r3, #255	; 0xff
    bbfa:	d105      	bne.n	bc08 <send_mode+0x12c>
    bbfc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bc00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc04:	2200      	movs	r2, #0
    bc06:	701a      	strb	r2, [r3, #0]
    bc08:	f64a 73ed 	movw	r3, #45037	; 0xafed
    bc0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc10:	220b      	movs	r2, #11
    bc12:	701a      	strb	r2, [r3, #0]
    bc14:	f64a 73ee 	movw	r3, #45038	; 0xafee
    bc18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc1c:	220b      	movs	r2, #11
    bc1e:	701a      	strb	r2, [r3, #0]
    bc20:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bc24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc28:	781b      	ldrb	r3, [r3, #0]
    bc2a:	461a      	mov	r2, r3
    bc2c:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    bc30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc34:	7819      	ldrb	r1, [r3, #0]
    bc36:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    bc3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc3e:	5499      	strb	r1, [r3, r2]
    bc40:	f64a 73ed 	movw	r3, #45037	; 0xafed
    bc44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc48:	781a      	ldrb	r2, [r3, #0]
    bc4a:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    bc4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc52:	781b      	ldrb	r3, [r3, #0]
    bc54:	4413      	add	r3, r2
    bc56:	b2da      	uxtb	r2, r3
    bc58:	f64a 73ed 	movw	r3, #45037	; 0xafed
    bc5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc60:	701a      	strb	r2, [r3, #0]
    bc62:	f64a 73ee 	movw	r3, #45038	; 0xafee
    bc66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc6a:	781a      	ldrb	r2, [r3, #0]
    bc6c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    bc70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc74:	781b      	ldrb	r3, [r3, #0]
    bc76:	4413      	add	r3, r2
    bc78:	b2da      	uxtb	r2, r3
    bc7a:	f64a 73ee 	movw	r3, #45038	; 0xafee
    bc7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc82:	701a      	strb	r2, [r3, #0]
    bc84:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bc88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc8c:	781b      	ldrb	r3, [r3, #0]
    bc8e:	3301      	adds	r3, #1
    bc90:	b2da      	uxtb	r2, r3
    bc92:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bc96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc9a:	701a      	strb	r2, [r3, #0]
    bc9c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bca4:	781b      	ldrb	r3, [r3, #0]
    bca6:	2bff      	cmp	r3, #255	; 0xff
    bca8:	d105      	bne.n	bcb6 <send_mode+0x1da>
    bcaa:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bcae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcb2:	2200      	movs	r2, #0
    bcb4:	701a      	strb	r2, [r3, #0]
    bcb6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bcba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcbe:	781b      	ldrb	r3, [r3, #0]
    bcc0:	461a      	mov	r2, r3
    bcc2:	f64a 63cd 	movw	r3, #44749	; 0xaecd
    bcc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcca:	7819      	ldrb	r1, [r3, #0]
    bccc:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    bcd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcd4:	5499      	strb	r1, [r3, r2]
    bcd6:	f64a 73ed 	movw	r3, #45037	; 0xafed
    bcda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcde:	781a      	ldrb	r2, [r3, #0]
    bce0:	f64a 63cd 	movw	r3, #44749	; 0xaecd
    bce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bce8:	781b      	ldrb	r3, [r3, #0]
    bcea:	4413      	add	r3, r2
    bcec:	b2da      	uxtb	r2, r3
    bcee:	f64a 73ed 	movw	r3, #45037	; 0xafed
    bcf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bcf6:	701a      	strb	r2, [r3, #0]
    bcf8:	f64a 73ee 	movw	r3, #45038	; 0xafee
    bcfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd00:	781a      	ldrb	r2, [r3, #0]
    bd02:	f64a 73ed 	movw	r3, #45037	; 0xafed
    bd06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd0a:	781b      	ldrb	r3, [r3, #0]
    bd0c:	4413      	add	r3, r2
    bd0e:	b2da      	uxtb	r2, r3
    bd10:	f64a 73ee 	movw	r3, #45038	; 0xafee
    bd14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd18:	701a      	strb	r2, [r3, #0]
    bd1a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bd1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd22:	781b      	ldrb	r3, [r3, #0]
    bd24:	3301      	adds	r3, #1
    bd26:	b2da      	uxtb	r2, r3
    bd28:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bd2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd30:	701a      	strb	r2, [r3, #0]
    bd32:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bd36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd3a:	781b      	ldrb	r3, [r3, #0]
    bd3c:	2bff      	cmp	r3, #255	; 0xff
    bd3e:	d105      	bne.n	bd4c <send_mode+0x270>
    bd40:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bd44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd48:	2200      	movs	r2, #0
    bd4a:	701a      	strb	r2, [r3, #0]
    bd4c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bd50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd54:	781b      	ldrb	r3, [r3, #0]
    bd56:	461a      	mov	r2, r3
    bd58:	f24b 43fc 	movw	r3, #46332	; 0xb4fc
    bd5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd60:	7819      	ldrb	r1, [r3, #0]
    bd62:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    bd66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd6a:	5499      	strb	r1, [r3, r2]
    bd6c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    bd70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd74:	781a      	ldrb	r2, [r3, #0]
    bd76:	f24b 43fc 	movw	r3, #46332	; 0xb4fc
    bd7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd7e:	781b      	ldrb	r3, [r3, #0]
    bd80:	4413      	add	r3, r2
    bd82:	b2da      	uxtb	r2, r3
    bd84:	f64a 73ed 	movw	r3, #45037	; 0xafed
    bd88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd8c:	701a      	strb	r2, [r3, #0]
    bd8e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    bd92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd96:	781a      	ldrb	r2, [r3, #0]
    bd98:	f64a 73ed 	movw	r3, #45037	; 0xafed
    bd9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bda0:	781b      	ldrb	r3, [r3, #0]
    bda2:	4413      	add	r3, r2
    bda4:	b2da      	uxtb	r2, r3
    bda6:	f64a 73ee 	movw	r3, #45038	; 0xafee
    bdaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdae:	701a      	strb	r2, [r3, #0]
    bdb0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bdb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdb8:	781b      	ldrb	r3, [r3, #0]
    bdba:	3301      	adds	r3, #1
    bdbc:	b2da      	uxtb	r2, r3
    bdbe:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bdc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdc6:	701a      	strb	r2, [r3, #0]
    bdc8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bdcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdd0:	781b      	ldrb	r3, [r3, #0]
    bdd2:	2bff      	cmp	r3, #255	; 0xff
    bdd4:	d105      	bne.n	bde2 <send_mode+0x306>
    bdd6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bdda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdde:	2200      	movs	r2, #0
    bde0:	701a      	strb	r2, [r3, #0]
    bde2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bde6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdea:	781b      	ldrb	r3, [r3, #0]
    bdec:	461a      	mov	r2, r3
    bdee:	f64a 63d3 	movw	r3, #44755	; 0xaed3
    bdf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdf6:	7819      	ldrb	r1, [r3, #0]
    bdf8:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    bdfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be00:	5499      	strb	r1, [r3, r2]
    be02:	f64a 73ed 	movw	r3, #45037	; 0xafed
    be06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be0a:	781a      	ldrb	r2, [r3, #0]
    be0c:	f64a 63d3 	movw	r3, #44755	; 0xaed3
    be10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be14:	781b      	ldrb	r3, [r3, #0]
    be16:	4413      	add	r3, r2
    be18:	b2da      	uxtb	r2, r3
    be1a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    be1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be22:	701a      	strb	r2, [r3, #0]
    be24:	f64a 73ee 	movw	r3, #45038	; 0xafee
    be28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be2c:	781a      	ldrb	r2, [r3, #0]
    be2e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    be32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be36:	781b      	ldrb	r3, [r3, #0]
    be38:	4413      	add	r3, r2
    be3a:	b2da      	uxtb	r2, r3
    be3c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    be40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be44:	701a      	strb	r2, [r3, #0]
    be46:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    be4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be4e:	781b      	ldrb	r3, [r3, #0]
    be50:	3301      	adds	r3, #1
    be52:	b2da      	uxtb	r2, r3
    be54:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    be58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be5c:	701a      	strb	r2, [r3, #0]
    be5e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    be62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be66:	781b      	ldrb	r3, [r3, #0]
    be68:	2bff      	cmp	r3, #255	; 0xff
    be6a:	d105      	bne.n	be78 <send_mode+0x39c>
    be6c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    be70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be74:	2200      	movs	r2, #0
    be76:	701a      	strb	r2, [r3, #0]
    be78:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    be7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be80:	781b      	ldrb	r3, [r3, #0]
    be82:	461a      	mov	r2, r3
    be84:	f240 33ec 	movw	r3, #1004	; 0x3ec
    be88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be8c:	7819      	ldrb	r1, [r3, #0]
    be8e:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    be92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be96:	5499      	strb	r1, [r3, r2]
    be98:	f64a 73ed 	movw	r3, #45037	; 0xafed
    be9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bea0:	781a      	ldrb	r2, [r3, #0]
    bea2:	f240 33ec 	movw	r3, #1004	; 0x3ec
    bea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    beaa:	781b      	ldrb	r3, [r3, #0]
    beac:	4413      	add	r3, r2
    beae:	b2da      	uxtb	r2, r3
    beb0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    beb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    beb8:	701a      	strb	r2, [r3, #0]
    beba:	f64a 73ee 	movw	r3, #45038	; 0xafee
    bebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bec2:	781a      	ldrb	r2, [r3, #0]
    bec4:	f64a 73ed 	movw	r3, #45037	; 0xafed
    bec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    becc:	781b      	ldrb	r3, [r3, #0]
    bece:	4413      	add	r3, r2
    bed0:	b2da      	uxtb	r2, r3
    bed2:	f64a 73ee 	movw	r3, #45038	; 0xafee
    bed6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    beda:	701a      	strb	r2, [r3, #0]
    bedc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bee4:	781b      	ldrb	r3, [r3, #0]
    bee6:	3301      	adds	r3, #1
    bee8:	b2da      	uxtb	r2, r3
    beea:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    beee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bef2:	701a      	strb	r2, [r3, #0]
    bef4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    befc:	781b      	ldrb	r3, [r3, #0]
    befe:	2bff      	cmp	r3, #255	; 0xff
    bf00:	d105      	bne.n	bf0e <send_mode+0x432>
    bf02:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bf06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf0a:	2200      	movs	r2, #0
    bf0c:	701a      	strb	r2, [r3, #0]
    bf0e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bf12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf16:	781b      	ldrb	r3, [r3, #0]
    bf18:	461a      	mov	r2, r3
    bf1a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    bf1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf22:	7819      	ldrb	r1, [r3, #0]
    bf24:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    bf28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf2c:	5499      	strb	r1, [r3, r2]
    bf2e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bf32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf36:	781b      	ldrb	r3, [r3, #0]
    bf38:	3301      	adds	r3, #1
    bf3a:	b2da      	uxtb	r2, r3
    bf3c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bf40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf44:	701a      	strb	r2, [r3, #0]
    bf46:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bf4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf4e:	781b      	ldrb	r3, [r3, #0]
    bf50:	2bff      	cmp	r3, #255	; 0xff
    bf52:	d105      	bne.n	bf60 <send_mode+0x484>
    bf54:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bf58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf5c:	2200      	movs	r2, #0
    bf5e:	701a      	strb	r2, [r3, #0]
    bf60:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bf64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf68:	781b      	ldrb	r3, [r3, #0]
    bf6a:	461a      	mov	r2, r3
    bf6c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    bf70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf74:	7819      	ldrb	r1, [r3, #0]
    bf76:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    bf7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf7e:	5499      	strb	r1, [r3, r2]
    bf80:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bf84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf88:	781b      	ldrb	r3, [r3, #0]
    bf8a:	3301      	adds	r3, #1
    bf8c:	b2da      	uxtb	r2, r3
    bf8e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bf92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf96:	701a      	strb	r2, [r3, #0]
    bf98:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bf9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfa0:	781b      	ldrb	r3, [r3, #0]
    bfa2:	2bff      	cmp	r3, #255	; 0xff
    bfa4:	d105      	bne.n	bfb2 <send_mode+0x4d6>
    bfa6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    bfaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfae:	2200      	movs	r2, #0
    bfb0:	701a      	strb	r2, [r3, #0]
    bfb2:	f242 0339 	movw	r3, #8249	; 0x2039
    bfb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfba:	781b      	ldrb	r3, [r3, #0]
    bfbc:	b2db      	uxtb	r3, r3
    bfbe:	f003 0310 	and.w	r3, r3, #16
    bfc2:	2b00      	cmp	r3, #0
    bfc4:	d15a      	bne.n	c07c <send_mode+0x5a0>
    bfc6:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    bfca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfce:	781b      	ldrb	r3, [r3, #0]
    bfd0:	b2db      	uxtb	r3, r3
    bfd2:	461a      	mov	r2, r3
    bfd4:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    bfd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfdc:	5c9a      	ldrb	r2, [r3, r2]
    bfde:	f64a 73eb 	movw	r3, #45035	; 0xafeb
    bfe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bfe6:	701a      	strb	r2, [r3, #0]
    bfe8:	f64a 73ec 	movw	r3, #45036	; 0xafec
    bfec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bff0:	2200      	movs	r2, #0
    bff2:	701a      	strb	r2, [r3, #0]
    bff4:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    bff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bffc:	781b      	ldrb	r3, [r3, #0]
    bffe:	b2db      	uxtb	r3, r3
    c000:	3301      	adds	r3, #1
    c002:	b2da      	uxtb	r2, r3
    c004:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    c008:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c00c:	701a      	strb	r2, [r3, #0]
    c00e:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    c012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c016:	781b      	ldrb	r3, [r3, #0]
    c018:	b2db      	uxtb	r3, r3
    c01a:	2bff      	cmp	r3, #255	; 0xff
    c01c:	d105      	bne.n	c02a <send_mode+0x54e>
    c01e:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    c022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c026:	2200      	movs	r2, #0
    c028:	701a      	strb	r2, [r3, #0]
    c02a:	f242 0338 	movw	r3, #8248	; 0x2038
    c02e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c032:	f242 0238 	movw	r2, #8248	; 0x2038
    c036:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c03a:	7812      	ldrb	r2, [r2, #0]
    c03c:	b2d2      	uxtb	r2, r2
    c03e:	f042 0201 	orr.w	r2, r2, #1
    c042:	b2d2      	uxtb	r2, r2
    c044:	701a      	strb	r2, [r3, #0]
    c046:	f242 0339 	movw	r3, #8249	; 0x2039
    c04a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c04e:	f242 0239 	movw	r2, #8249	; 0x2039
    c052:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c056:	7812      	ldrb	r2, [r2, #0]
    c058:	b2d2      	uxtb	r2, r2
    c05a:	f042 0210 	orr.w	r2, r2, #16
    c05e:	b2d2      	uxtb	r2, r2
    c060:	701a      	strb	r2, [r3, #0]
    c062:	e00b      	b.n	c07c <send_mode+0x5a0>
    c064:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    c068:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c06c:	781b      	ldrb	r3, [r3, #0]
    c06e:	3301      	adds	r3, #1
    c070:	b2da      	uxtb	r2, r3
    c072:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    c076:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c07a:	701a      	strb	r2, [r3, #0]
}
    c07c:	46bd      	mov	sp, r7
    c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c082:	4770      	bx	lr

0000c084 <send_debug>:
void send_debug(void){  //5000ms
    c084:	b480      	push	{r7}
    c086:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    c088:	f64a 63e1 	movw	r3, #44769	; 0xaee1
    c08c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c090:	781a      	ldrb	r2, [r3, #0]
    c092:	f248 531f 	movw	r3, #34079	; 0x851f
    c096:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c09a:	fba3 1302 	umull	r1, r3, r3, r2
    c09e:	091b      	lsrs	r3, r3, #4
    c0a0:	2132      	movs	r1, #50	; 0x32
    c0a2:	fb01 f303 	mul.w	r3, r1, r3
    c0a6:	1ad3      	subs	r3, r2, r3
    c0a8:	b2db      	uxtb	r3, r3
    c0aa:	2b1d      	cmp	r3, #29
    c0ac:	f040 82bb 	bne.w	c626 <send_debug+0x5a2>
    c0b0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c0b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0b8:	781a      	ldrb	r2, [r3, #0]
    c0ba:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    c0be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0c2:	781b      	ldrb	r3, [r3, #0]
    c0c4:	b2db      	uxtb	r3, r3
    c0c6:	429a      	cmp	r2, r3
    c0c8:	d313      	bcc.n	c0f2 <send_debug+0x6e>
    c0ca:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    c0ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0d2:	781b      	ldrb	r3, [r3, #0]
    c0d4:	b2db      	uxtb	r3, r3
    c0d6:	461a      	mov	r2, r3
    c0d8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c0dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0e0:	781b      	ldrb	r3, [r3, #0]
    c0e2:	1ad3      	subs	r3, r2, r3
    c0e4:	33ff      	adds	r3, #255	; 0xff
    c0e6:	2b09      	cmp	r3, #9
    c0e8:	bfd4      	ite	le
    c0ea:	2300      	movle	r3, #0
    c0ec:	2301      	movgt	r3, #1
    c0ee:	b2db      	uxtb	r3, r3
    c0f0:	e011      	b.n	c116 <send_debug+0x92>
    c0f2:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    c0f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c0fa:	781b      	ldrb	r3, [r3, #0]
    c0fc:	b2db      	uxtb	r3, r3
    c0fe:	461a      	mov	r2, r3
    c100:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c104:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c108:	781b      	ldrb	r3, [r3, #0]
    c10a:	1ad3      	subs	r3, r2, r3
    c10c:	2b09      	cmp	r3, #9
    c10e:	bfd4      	ite	le
    c110:	2300      	movle	r3, #0
    c112:	2301      	movgt	r3, #1
    c114:	b2db      	uxtb	r3, r3
    c116:	2b00      	cmp	r3, #0
    c118:	f000 8279 	beq.w	c60e <send_debug+0x58a>
    c11c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c120:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c124:	781b      	ldrb	r3, [r3, #0]
    c126:	461a      	mov	r2, r3
    c128:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    c12c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c130:	2105      	movs	r1, #5
    c132:	5499      	strb	r1, [r3, r2]
    c134:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c138:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c13c:	781b      	ldrb	r3, [r3, #0]
    c13e:	3301      	adds	r3, #1
    c140:	b2da      	uxtb	r2, r3
    c142:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c146:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c14a:	701a      	strb	r2, [r3, #0]
    c14c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c150:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c154:	781b      	ldrb	r3, [r3, #0]
    c156:	2bff      	cmp	r3, #255	; 0xff
    c158:	d105      	bne.n	c166 <send_debug+0xe2>
    c15a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c15e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c162:	2200      	movs	r2, #0
    c164:	701a      	strb	r2, [r3, #0]
    c166:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c16a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c16e:	781b      	ldrb	r3, [r3, #0]
    c170:	461a      	mov	r2, r3
    c172:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    c176:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c17a:	210d      	movs	r1, #13
    c17c:	5499      	strb	r1, [r3, r2]
    c17e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c182:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c186:	781b      	ldrb	r3, [r3, #0]
    c188:	3301      	adds	r3, #1
    c18a:	b2da      	uxtb	r2, r3
    c18c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c190:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c194:	701a      	strb	r2, [r3, #0]
    c196:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c19a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c19e:	781b      	ldrb	r3, [r3, #0]
    c1a0:	2bff      	cmp	r3, #255	; 0xff
    c1a2:	d105      	bne.n	c1b0 <send_debug+0x12c>
    c1a4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c1a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1ac:	2200      	movs	r2, #0
    c1ae:	701a      	strb	r2, [r3, #0]
    c1b0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    c1b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1b8:	220d      	movs	r2, #13
    c1ba:	701a      	strb	r2, [r3, #0]
    c1bc:	f64a 73ee 	movw	r3, #45038	; 0xafee
    c1c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1c4:	220d      	movs	r2, #13
    c1c6:	701a      	strb	r2, [r3, #0]
    c1c8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c1cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1d0:	781b      	ldrb	r3, [r3, #0]
    c1d2:	461a      	mov	r2, r3
    c1d4:	f24b 031f 	movw	r3, #45087	; 0xb01f
    c1d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1dc:	781b      	ldrb	r3, [r3, #0]
    c1de:	b2d9      	uxtb	r1, r3
    c1e0:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    c1e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1e8:	5499      	strb	r1, [r3, r2]
    c1ea:	f24b 031f 	movw	r3, #45087	; 0xb01f
    c1ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1f2:	781a      	ldrb	r2, [r3, #0]
    c1f4:	f64a 73ed 	movw	r3, #45037	; 0xafed
    c1f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1fc:	781b      	ldrb	r3, [r3, #0]
    c1fe:	4413      	add	r3, r2
    c200:	b2da      	uxtb	r2, r3
    c202:	f64a 73ed 	movw	r3, #45037	; 0xafed
    c206:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c20a:	701a      	strb	r2, [r3, #0]
    c20c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    c210:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c214:	781a      	ldrb	r2, [r3, #0]
    c216:	f64a 73ed 	movw	r3, #45037	; 0xafed
    c21a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c21e:	781b      	ldrb	r3, [r3, #0]
    c220:	4413      	add	r3, r2
    c222:	b2da      	uxtb	r2, r3
    c224:	f64a 73ee 	movw	r3, #45038	; 0xafee
    c228:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c22c:	701a      	strb	r2, [r3, #0]
    c22e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c232:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c236:	781b      	ldrb	r3, [r3, #0]
    c238:	3301      	adds	r3, #1
    c23a:	b2da      	uxtb	r2, r3
    c23c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c240:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c244:	701a      	strb	r2, [r3, #0]
    c246:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c24a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c24e:	781b      	ldrb	r3, [r3, #0]
    c250:	2bff      	cmp	r3, #255	; 0xff
    c252:	d105      	bne.n	c260 <send_debug+0x1dc>
    c254:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c25c:	2200      	movs	r2, #0
    c25e:	701a      	strb	r2, [r3, #0]
    c260:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c264:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c268:	781b      	ldrb	r3, [r3, #0]
    c26a:	461a      	mov	r2, r3
    c26c:	f24b 0320 	movw	r3, #45088	; 0xb020
    c270:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c274:	7819      	ldrb	r1, [r3, #0]
    c276:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    c27a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c27e:	5499      	strb	r1, [r3, r2]
    c280:	f64a 73ed 	movw	r3, #45037	; 0xafed
    c284:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c288:	781a      	ldrb	r2, [r3, #0]
    c28a:	f24b 0320 	movw	r3, #45088	; 0xb020
    c28e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c292:	781b      	ldrb	r3, [r3, #0]
    c294:	4413      	add	r3, r2
    c296:	b2da      	uxtb	r2, r3
    c298:	f64a 73ed 	movw	r3, #45037	; 0xafed
    c29c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2a0:	701a      	strb	r2, [r3, #0]
    c2a2:	f64a 73ee 	movw	r3, #45038	; 0xafee
    c2a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2aa:	781a      	ldrb	r2, [r3, #0]
    c2ac:	f64a 73ed 	movw	r3, #45037	; 0xafed
    c2b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2b4:	781b      	ldrb	r3, [r3, #0]
    c2b6:	4413      	add	r3, r2
    c2b8:	b2da      	uxtb	r2, r3
    c2ba:	f64a 73ee 	movw	r3, #45038	; 0xafee
    c2be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2c2:	701a      	strb	r2, [r3, #0]
    c2c4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c2c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2cc:	781b      	ldrb	r3, [r3, #0]
    c2ce:	3301      	adds	r3, #1
    c2d0:	b2da      	uxtb	r2, r3
    c2d2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c2d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2da:	701a      	strb	r2, [r3, #0]
    c2dc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c2e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2e4:	781b      	ldrb	r3, [r3, #0]
    c2e6:	2bff      	cmp	r3, #255	; 0xff
    c2e8:	d105      	bne.n	c2f6 <send_debug+0x272>
    c2ea:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c2ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2f2:	2200      	movs	r2, #0
    c2f4:	701a      	strb	r2, [r3, #0]
    c2f6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c2fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c2fe:	781b      	ldrb	r3, [r3, #0]
    c300:	461a      	mov	r2, r3
    c302:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    c306:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c30a:	7819      	ldrb	r1, [r3, #0]
    c30c:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    c310:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c314:	5499      	strb	r1, [r3, r2]
    c316:	f64a 73ed 	movw	r3, #45037	; 0xafed
    c31a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c31e:	781a      	ldrb	r2, [r3, #0]
    c320:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    c324:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c328:	781b      	ldrb	r3, [r3, #0]
    c32a:	4413      	add	r3, r2
    c32c:	b2da      	uxtb	r2, r3
    c32e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    c332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c336:	701a      	strb	r2, [r3, #0]
    c338:	f64a 73ee 	movw	r3, #45038	; 0xafee
    c33c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c340:	781a      	ldrb	r2, [r3, #0]
    c342:	f64a 73ed 	movw	r3, #45037	; 0xafed
    c346:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c34a:	781b      	ldrb	r3, [r3, #0]
    c34c:	4413      	add	r3, r2
    c34e:	b2da      	uxtb	r2, r3
    c350:	f64a 73ee 	movw	r3, #45038	; 0xafee
    c354:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c358:	701a      	strb	r2, [r3, #0]
    c35a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c35e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c362:	781b      	ldrb	r3, [r3, #0]
    c364:	3301      	adds	r3, #1
    c366:	b2da      	uxtb	r2, r3
    c368:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c36c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c370:	701a      	strb	r2, [r3, #0]
    c372:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c376:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c37a:	781b      	ldrb	r3, [r3, #0]
    c37c:	2bff      	cmp	r3, #255	; 0xff
    c37e:	d105      	bne.n	c38c <send_debug+0x308>
    c380:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c384:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c388:	2200      	movs	r2, #0
    c38a:	701a      	strb	r2, [r3, #0]
    c38c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c390:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c394:	781b      	ldrb	r3, [r3, #0]
    c396:	461a      	mov	r2, r3
    c398:	f24b 1387 	movw	r3, #45447	; 0xb187
    c39c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3a0:	7819      	ldrb	r1, [r3, #0]
    c3a2:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    c3a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3aa:	5499      	strb	r1, [r3, r2]
    c3ac:	f64a 73ed 	movw	r3, #45037	; 0xafed
    c3b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3b4:	781a      	ldrb	r2, [r3, #0]
    c3b6:	f24b 1387 	movw	r3, #45447	; 0xb187
    c3ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3be:	781b      	ldrb	r3, [r3, #0]
    c3c0:	4413      	add	r3, r2
    c3c2:	b2da      	uxtb	r2, r3
    c3c4:	f64a 73ed 	movw	r3, #45037	; 0xafed
    c3c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3cc:	701a      	strb	r2, [r3, #0]
    c3ce:	f64a 73ee 	movw	r3, #45038	; 0xafee
    c3d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3d6:	781a      	ldrb	r2, [r3, #0]
    c3d8:	f64a 73ed 	movw	r3, #45037	; 0xafed
    c3dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3e0:	781b      	ldrb	r3, [r3, #0]
    c3e2:	4413      	add	r3, r2
    c3e4:	b2da      	uxtb	r2, r3
    c3e6:	f64a 73ee 	movw	r3, #45038	; 0xafee
    c3ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3ee:	701a      	strb	r2, [r3, #0]
    c3f0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c3f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3f8:	781b      	ldrb	r3, [r3, #0]
    c3fa:	3301      	adds	r3, #1
    c3fc:	b2da      	uxtb	r2, r3
    c3fe:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c406:	701a      	strb	r2, [r3, #0]
    c408:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c40c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c410:	781b      	ldrb	r3, [r3, #0]
    c412:	2bff      	cmp	r3, #255	; 0xff
    c414:	d105      	bne.n	c422 <send_debug+0x39e>
    c416:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c41a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c41e:	2200      	movs	r2, #0
    c420:	701a      	strb	r2, [r3, #0]
    c422:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c426:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c42a:	781b      	ldrb	r3, [r3, #0]
    c42c:	461a      	mov	r2, r3
    c42e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c436:	7819      	ldrb	r1, [r3, #0]
    c438:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    c43c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c440:	5499      	strb	r1, [r3, r2]
    c442:	f64a 73ed 	movw	r3, #45037	; 0xafed
    c446:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c44a:	781a      	ldrb	r2, [r3, #0]
    c44c:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    c450:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c454:	781b      	ldrb	r3, [r3, #0]
    c456:	4413      	add	r3, r2
    c458:	b2da      	uxtb	r2, r3
    c45a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    c45e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c462:	701a      	strb	r2, [r3, #0]
    c464:	f64a 73ee 	movw	r3, #45038	; 0xafee
    c468:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c46c:	781a      	ldrb	r2, [r3, #0]
    c46e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    c472:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c476:	781b      	ldrb	r3, [r3, #0]
    c478:	4413      	add	r3, r2
    c47a:	b2da      	uxtb	r2, r3
    c47c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    c480:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c484:	701a      	strb	r2, [r3, #0]
    c486:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c48a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c48e:	781b      	ldrb	r3, [r3, #0]
    c490:	3301      	adds	r3, #1
    c492:	b2da      	uxtb	r2, r3
    c494:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c498:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c49c:	701a      	strb	r2, [r3, #0]
    c49e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c4a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4a6:	781b      	ldrb	r3, [r3, #0]
    c4a8:	2bff      	cmp	r3, #255	; 0xff
    c4aa:	d105      	bne.n	c4b8 <send_debug+0x434>
    c4ac:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c4b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4b4:	2200      	movs	r2, #0
    c4b6:	701a      	strb	r2, [r3, #0]
    c4b8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c4bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4c0:	781b      	ldrb	r3, [r3, #0]
    c4c2:	461a      	mov	r2, r3
    c4c4:	f64a 73ed 	movw	r3, #45037	; 0xafed
    c4c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4cc:	7819      	ldrb	r1, [r3, #0]
    c4ce:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    c4d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4d6:	5499      	strb	r1, [r3, r2]
    c4d8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c4dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4e0:	781b      	ldrb	r3, [r3, #0]
    c4e2:	3301      	adds	r3, #1
    c4e4:	b2da      	uxtb	r2, r3
    c4e6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c4ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4ee:	701a      	strb	r2, [r3, #0]
    c4f0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c4f8:	781b      	ldrb	r3, [r3, #0]
    c4fa:	2bff      	cmp	r3, #255	; 0xff
    c4fc:	d105      	bne.n	c50a <send_debug+0x486>
    c4fe:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c502:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c506:	2200      	movs	r2, #0
    c508:	701a      	strb	r2, [r3, #0]
    c50a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c50e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c512:	781b      	ldrb	r3, [r3, #0]
    c514:	461a      	mov	r2, r3
    c516:	f64a 73ee 	movw	r3, #45038	; 0xafee
    c51a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c51e:	7819      	ldrb	r1, [r3, #0]
    c520:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    c524:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c528:	5499      	strb	r1, [r3, r2]
    c52a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c52e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c532:	781b      	ldrb	r3, [r3, #0]
    c534:	3301      	adds	r3, #1
    c536:	b2da      	uxtb	r2, r3
    c538:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c53c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c540:	701a      	strb	r2, [r3, #0]
    c542:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c546:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c54a:	781b      	ldrb	r3, [r3, #0]
    c54c:	2bff      	cmp	r3, #255	; 0xff
    c54e:	d105      	bne.n	c55c <send_debug+0x4d8>
    c550:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c554:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c558:	2200      	movs	r2, #0
    c55a:	701a      	strb	r2, [r3, #0]
    c55c:	f242 0339 	movw	r3, #8249	; 0x2039
    c560:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c564:	781b      	ldrb	r3, [r3, #0]
    c566:	b2db      	uxtb	r3, r3
    c568:	f003 0310 	and.w	r3, r3, #16
    c56c:	2b00      	cmp	r3, #0
    c56e:	d15a      	bne.n	c626 <send_debug+0x5a2>
    c570:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    c574:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c578:	781b      	ldrb	r3, [r3, #0]
    c57a:	b2db      	uxtb	r3, r3
    c57c:	461a      	mov	r2, r3
    c57e:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    c582:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c586:	5c9a      	ldrb	r2, [r3, r2]
    c588:	f64a 73eb 	movw	r3, #45035	; 0xafeb
    c58c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c590:	701a      	strb	r2, [r3, #0]
    c592:	f64a 73ec 	movw	r3, #45036	; 0xafec
    c596:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c59a:	2200      	movs	r2, #0
    c59c:	701a      	strb	r2, [r3, #0]
    c59e:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    c5a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5a6:	781b      	ldrb	r3, [r3, #0]
    c5a8:	b2db      	uxtb	r3, r3
    c5aa:	3301      	adds	r3, #1
    c5ac:	b2da      	uxtb	r2, r3
    c5ae:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    c5b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5b6:	701a      	strb	r2, [r3, #0]
    c5b8:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    c5bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5c0:	781b      	ldrb	r3, [r3, #0]
    c5c2:	b2db      	uxtb	r3, r3
    c5c4:	2bff      	cmp	r3, #255	; 0xff
    c5c6:	d105      	bne.n	c5d4 <send_debug+0x550>
    c5c8:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    c5cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5d0:	2200      	movs	r2, #0
    c5d2:	701a      	strb	r2, [r3, #0]
    c5d4:	f242 0338 	movw	r3, #8248	; 0x2038
    c5d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5dc:	f242 0238 	movw	r2, #8248	; 0x2038
    c5e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c5e4:	7812      	ldrb	r2, [r2, #0]
    c5e6:	b2d2      	uxtb	r2, r2
    c5e8:	f042 0201 	orr.w	r2, r2, #1
    c5ec:	b2d2      	uxtb	r2, r2
    c5ee:	701a      	strb	r2, [r3, #0]
    c5f0:	f242 0339 	movw	r3, #8249	; 0x2039
    c5f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c5f8:	f242 0239 	movw	r2, #8249	; 0x2039
    c5fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c600:	7812      	ldrb	r2, [r2, #0]
    c602:	b2d2      	uxtb	r2, r2
    c604:	f042 0210 	orr.w	r2, r2, #16
    c608:	b2d2      	uxtb	r2, r2
    c60a:	701a      	strb	r2, [r3, #0]
    c60c:	e00b      	b.n	c626 <send_debug+0x5a2>
    c60e:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    c612:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c616:	781b      	ldrb	r3, [r3, #0]
    c618:	3301      	adds	r3, #1
    c61a:	b2da      	uxtb	r2, r3
    c61c:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    c620:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c624:	701a      	strb	r2, [r3, #0]
}
    c626:	46bd      	mov	sp, r7
    c628:	f85d 7b04 	ldr.w	r7, [sp], #4
    c62c:	4770      	bx	lr
    c62e:	bf00      	nop

0000c630 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    c630:	b480      	push	{r7}
    c632:	af00      	add	r7, sp, #0
  //if(!boot)
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    c634:	f64a 63e1 	movw	r3, #44769	; 0xaee1
    c638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c63c:	781a      	ldrb	r2, [r3, #0]
    c63e:	f248 531f 	movw	r3, #34079	; 0x851f
    c642:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c646:	fba3 1302 	umull	r1, r3, r3, r2
    c64a:	095b      	lsrs	r3, r3, #5
    c64c:	2164      	movs	r1, #100	; 0x64
    c64e:	fb01 f303 	mul.w	r3, r1, r3
    c652:	1ad3      	subs	r3, r2, r3
    c654:	b2db      	uxtb	r3, r3
    c656:	2b31      	cmp	r3, #49	; 0x31
    c658:	f040 8395 	bne.w	cd86 <send_nav_ref+0x756>
    c65c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c660:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c664:	781a      	ldrb	r2, [r3, #0]
    c666:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    c66a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c66e:	781b      	ldrb	r3, [r3, #0]
    c670:	b2db      	uxtb	r3, r3
    c672:	429a      	cmp	r2, r3
    c674:	d313      	bcc.n	c69e <send_nav_ref+0x6e>
    c676:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    c67a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c67e:	781b      	ldrb	r3, [r3, #0]
    c680:	b2db      	uxtb	r3, r3
    c682:	461a      	mov	r2, r3
    c684:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c688:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c68c:	781b      	ldrb	r3, [r3, #0]
    c68e:	1ad3      	subs	r3, r2, r3
    c690:	33ff      	adds	r3, #255	; 0xff
    c692:	2b0c      	cmp	r3, #12
    c694:	bfd4      	ite	le
    c696:	2300      	movle	r3, #0
    c698:	2301      	movgt	r3, #1
    c69a:	b2db      	uxtb	r3, r3
    c69c:	e011      	b.n	c6c2 <send_nav_ref+0x92>
    c69e:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    c6a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6a6:	781b      	ldrb	r3, [r3, #0]
    c6a8:	b2db      	uxtb	r3, r3
    c6aa:	461a      	mov	r2, r3
    c6ac:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c6b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6b4:	781b      	ldrb	r3, [r3, #0]
    c6b6:	1ad3      	subs	r3, r2, r3
    c6b8:	2b0c      	cmp	r3, #12
    c6ba:	bfd4      	ite	le
    c6bc:	2300      	movle	r3, #0
    c6be:	2301      	movgt	r3, #1
    c6c0:	b2db      	uxtb	r3, r3
    c6c2:	2b00      	cmp	r3, #0
    c6c4:	f000 8353 	beq.w	cd6e <send_nav_ref+0x73e>
    c6c8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c6cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6d0:	781b      	ldrb	r3, [r3, #0]
    c6d2:	461a      	mov	r2, r3
    c6d4:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    c6d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6dc:	2105      	movs	r1, #5
    c6de:	5499      	strb	r1, [r3, r2]
    c6e0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c6e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6e8:	781b      	ldrb	r3, [r3, #0]
    c6ea:	3301      	adds	r3, #1
    c6ec:	b2da      	uxtb	r2, r3
    c6ee:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c6f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6f6:	701a      	strb	r2, [r3, #0]
    c6f8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c6fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c700:	781b      	ldrb	r3, [r3, #0]
    c702:	2bff      	cmp	r3, #255	; 0xff
    c704:	d105      	bne.n	c712 <send_nav_ref+0xe2>
    c706:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c70a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c70e:	2200      	movs	r2, #0
    c710:	701a      	strb	r2, [r3, #0]
    c712:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c716:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c71a:	781b      	ldrb	r3, [r3, #0]
    c71c:	461a      	mov	r2, r3
    c71e:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    c722:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c726:	2109      	movs	r1, #9
    c728:	5499      	strb	r1, [r3, r2]
    c72a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c72e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c732:	781b      	ldrb	r3, [r3, #0]
    c734:	3301      	adds	r3, #1
    c736:	b2da      	uxtb	r2, r3
    c738:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c73c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c740:	701a      	strb	r2, [r3, #0]
    c742:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c746:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c74a:	781b      	ldrb	r3, [r3, #0]
    c74c:	2bff      	cmp	r3, #255	; 0xff
    c74e:	d105      	bne.n	c75c <send_nav_ref+0x12c>
    c750:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c754:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c758:	2200      	movs	r2, #0
    c75a:	701a      	strb	r2, [r3, #0]
    c75c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    c760:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c764:	2209      	movs	r2, #9
    c766:	701a      	strb	r2, [r3, #0]
    c768:	f64a 73ee 	movw	r3, #45038	; 0xafee
    c76c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c770:	2209      	movs	r2, #9
    c772:	701a      	strb	r2, [r3, #0]
    c774:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c778:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c77c:	781b      	ldrb	r3, [r3, #0]
    c77e:	461a      	mov	r2, r3
    c780:	f648 03a0 	movw	r3, #34976	; 0x88a0
    c784:	f2c0 0301 	movt	r3, #1
    c788:	7819      	ldrb	r1, [r3, #0]
    c78a:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    c78e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c792:	5499      	strb	r1, [r3, r2]
    c794:	f648 03a0 	movw	r3, #34976	; 0x88a0
    c798:	f2c0 0301 	movt	r3, #1
    c79c:	781a      	ldrb	r2, [r3, #0]
    c79e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    c7a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7a6:	781b      	ldrb	r3, [r3, #0]
    c7a8:	4413      	add	r3, r2
    c7aa:	b2da      	uxtb	r2, r3
    c7ac:	f64a 73ed 	movw	r3, #45037	; 0xafed
    c7b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7b4:	701a      	strb	r2, [r3, #0]
    c7b6:	f64a 73ee 	movw	r3, #45038	; 0xafee
    c7ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7be:	781a      	ldrb	r2, [r3, #0]
    c7c0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    c7c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7c8:	781b      	ldrb	r3, [r3, #0]
    c7ca:	4413      	add	r3, r2
    c7cc:	b2da      	uxtb	r2, r3
    c7ce:	f64a 73ee 	movw	r3, #45038	; 0xafee
    c7d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7d6:	701a      	strb	r2, [r3, #0]
    c7d8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c7dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7e0:	781b      	ldrb	r3, [r3, #0]
    c7e2:	3301      	adds	r3, #1
    c7e4:	b2da      	uxtb	r2, r3
    c7e6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c7ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7ee:	701a      	strb	r2, [r3, #0]
    c7f0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c7f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7f8:	781b      	ldrb	r3, [r3, #0]
    c7fa:	2bff      	cmp	r3, #255	; 0xff
    c7fc:	d105      	bne.n	c80a <send_nav_ref+0x1da>
    c7fe:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c802:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c806:	2200      	movs	r2, #0
    c808:	701a      	strb	r2, [r3, #0]
    c80a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c80e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c812:	781b      	ldrb	r3, [r3, #0]
    c814:	461a      	mov	r2, r3
    c816:	f648 03a0 	movw	r3, #34976	; 0x88a0
    c81a:	f2c0 0301 	movt	r3, #1
    c81e:	7859      	ldrb	r1, [r3, #1]
    c820:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    c824:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c828:	5499      	strb	r1, [r3, r2]
    c82a:	4bd2      	ldr	r3, [pc, #840]	; (cb74 <send_nav_ref+0x544>)
    c82c:	781a      	ldrb	r2, [r3, #0]
    c82e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    c832:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c836:	781b      	ldrb	r3, [r3, #0]
    c838:	4413      	add	r3, r2
    c83a:	b2da      	uxtb	r2, r3
    c83c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    c840:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c844:	701a      	strb	r2, [r3, #0]
    c846:	f64a 73ee 	movw	r3, #45038	; 0xafee
    c84a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c84e:	781a      	ldrb	r2, [r3, #0]
    c850:	f64a 73ed 	movw	r3, #45037	; 0xafed
    c854:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c858:	781b      	ldrb	r3, [r3, #0]
    c85a:	4413      	add	r3, r2
    c85c:	b2da      	uxtb	r2, r3
    c85e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    c862:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c866:	701a      	strb	r2, [r3, #0]
    c868:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c86c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c870:	781b      	ldrb	r3, [r3, #0]
    c872:	3301      	adds	r3, #1
    c874:	b2da      	uxtb	r2, r3
    c876:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c87a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c87e:	701a      	strb	r2, [r3, #0]
    c880:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c884:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c888:	781b      	ldrb	r3, [r3, #0]
    c88a:	2bff      	cmp	r3, #255	; 0xff
    c88c:	d105      	bne.n	c89a <send_nav_ref+0x26a>
    c88e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c892:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c896:	2200      	movs	r2, #0
    c898:	701a      	strb	r2, [r3, #0]
    c89a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c89e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8a2:	781b      	ldrb	r3, [r3, #0]
    c8a4:	461a      	mov	r2, r3
    c8a6:	f648 03a0 	movw	r3, #34976	; 0x88a0
    c8aa:	f2c0 0301 	movt	r3, #1
    c8ae:	7899      	ldrb	r1, [r3, #2]
    c8b0:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    c8b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8b8:	5499      	strb	r1, [r3, r2]
    c8ba:	4baf      	ldr	r3, [pc, #700]	; (cb78 <send_nav_ref+0x548>)
    c8bc:	781a      	ldrb	r2, [r3, #0]
    c8be:	f64a 73ed 	movw	r3, #45037	; 0xafed
    c8c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8c6:	781b      	ldrb	r3, [r3, #0]
    c8c8:	4413      	add	r3, r2
    c8ca:	b2da      	uxtb	r2, r3
    c8cc:	f64a 73ed 	movw	r3, #45037	; 0xafed
    c8d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8d4:	701a      	strb	r2, [r3, #0]
    c8d6:	f64a 73ee 	movw	r3, #45038	; 0xafee
    c8da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8de:	781a      	ldrb	r2, [r3, #0]
    c8e0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    c8e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8e8:	781b      	ldrb	r3, [r3, #0]
    c8ea:	4413      	add	r3, r2
    c8ec:	b2da      	uxtb	r2, r3
    c8ee:	f64a 73ee 	movw	r3, #45038	; 0xafee
    c8f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8f6:	701a      	strb	r2, [r3, #0]
    c8f8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c8fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c900:	781b      	ldrb	r3, [r3, #0]
    c902:	3301      	adds	r3, #1
    c904:	b2da      	uxtb	r2, r3
    c906:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c90a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c90e:	701a      	strb	r2, [r3, #0]
    c910:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c914:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c918:	781b      	ldrb	r3, [r3, #0]
    c91a:	2bff      	cmp	r3, #255	; 0xff
    c91c:	d105      	bne.n	c92a <send_nav_ref+0x2fa>
    c91e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c922:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c926:	2200      	movs	r2, #0
    c928:	701a      	strb	r2, [r3, #0]
    c92a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c92e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c932:	781b      	ldrb	r3, [r3, #0]
    c934:	461a      	mov	r2, r3
    c936:	f648 03a0 	movw	r3, #34976	; 0x88a0
    c93a:	f2c0 0301 	movt	r3, #1
    c93e:	78d9      	ldrb	r1, [r3, #3]
    c940:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    c944:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c948:	5499      	strb	r1, [r3, r2]
    c94a:	4b8c      	ldr	r3, [pc, #560]	; (cb7c <send_nav_ref+0x54c>)
    c94c:	781a      	ldrb	r2, [r3, #0]
    c94e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    c952:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c956:	781b      	ldrb	r3, [r3, #0]
    c958:	4413      	add	r3, r2
    c95a:	b2da      	uxtb	r2, r3
    c95c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    c960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c964:	701a      	strb	r2, [r3, #0]
    c966:	f64a 73ee 	movw	r3, #45038	; 0xafee
    c96a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c96e:	781a      	ldrb	r2, [r3, #0]
    c970:	f64a 73ed 	movw	r3, #45037	; 0xafed
    c974:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c978:	781b      	ldrb	r3, [r3, #0]
    c97a:	4413      	add	r3, r2
    c97c:	b2da      	uxtb	r2, r3
    c97e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    c982:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c986:	701a      	strb	r2, [r3, #0]
    c988:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c98c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c990:	781b      	ldrb	r3, [r3, #0]
    c992:	3301      	adds	r3, #1
    c994:	b2da      	uxtb	r2, r3
    c996:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c99a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c99e:	701a      	strb	r2, [r3, #0]
    c9a0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c9a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9a8:	781b      	ldrb	r3, [r3, #0]
    c9aa:	2bff      	cmp	r3, #255	; 0xff
    c9ac:	d105      	bne.n	c9ba <send_nav_ref+0x38a>
    c9ae:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c9b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9b6:	2200      	movs	r2, #0
    c9b8:	701a      	strb	r2, [r3, #0]
    c9ba:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    c9be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9c2:	781b      	ldrb	r3, [r3, #0]
    c9c4:	461a      	mov	r2, r3
    c9c6:	f648 03a4 	movw	r3, #34980	; 0x88a4
    c9ca:	f2c0 0301 	movt	r3, #1
    c9ce:	7819      	ldrb	r1, [r3, #0]
    c9d0:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    c9d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9d8:	5499      	strb	r1, [r3, r2]
    c9da:	f648 03a4 	movw	r3, #34980	; 0x88a4
    c9de:	f2c0 0301 	movt	r3, #1
    c9e2:	781a      	ldrb	r2, [r3, #0]
    c9e4:	f64a 73ed 	movw	r3, #45037	; 0xafed
    c9e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9ec:	781b      	ldrb	r3, [r3, #0]
    c9ee:	4413      	add	r3, r2
    c9f0:	b2da      	uxtb	r2, r3
    c9f2:	f64a 73ed 	movw	r3, #45037	; 0xafed
    c9f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9fa:	701a      	strb	r2, [r3, #0]
    c9fc:	f64a 73ee 	movw	r3, #45038	; 0xafee
    ca00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca04:	781a      	ldrb	r2, [r3, #0]
    ca06:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ca0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca0e:	781b      	ldrb	r3, [r3, #0]
    ca10:	4413      	add	r3, r2
    ca12:	b2da      	uxtb	r2, r3
    ca14:	f64a 73ee 	movw	r3, #45038	; 0xafee
    ca18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca1c:	701a      	strb	r2, [r3, #0]
    ca1e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ca22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca26:	781b      	ldrb	r3, [r3, #0]
    ca28:	3301      	adds	r3, #1
    ca2a:	b2da      	uxtb	r2, r3
    ca2c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ca30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca34:	701a      	strb	r2, [r3, #0]
    ca36:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ca3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca3e:	781b      	ldrb	r3, [r3, #0]
    ca40:	2bff      	cmp	r3, #255	; 0xff
    ca42:	d105      	bne.n	ca50 <send_nav_ref+0x420>
    ca44:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ca48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca4c:	2200      	movs	r2, #0
    ca4e:	701a      	strb	r2, [r3, #0]
    ca50:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ca54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca58:	781b      	ldrb	r3, [r3, #0]
    ca5a:	461a      	mov	r2, r3
    ca5c:	f648 03a4 	movw	r3, #34980	; 0x88a4
    ca60:	f2c0 0301 	movt	r3, #1
    ca64:	7859      	ldrb	r1, [r3, #1]
    ca66:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    ca6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca6e:	5499      	strb	r1, [r3, r2]
    ca70:	4b43      	ldr	r3, [pc, #268]	; (cb80 <send_nav_ref+0x550>)
    ca72:	781a      	ldrb	r2, [r3, #0]
    ca74:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ca78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca7c:	781b      	ldrb	r3, [r3, #0]
    ca7e:	4413      	add	r3, r2
    ca80:	b2da      	uxtb	r2, r3
    ca82:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ca86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca8a:	701a      	strb	r2, [r3, #0]
    ca8c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    ca90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca94:	781a      	ldrb	r2, [r3, #0]
    ca96:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ca9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ca9e:	781b      	ldrb	r3, [r3, #0]
    caa0:	4413      	add	r3, r2
    caa2:	b2da      	uxtb	r2, r3
    caa4:	f64a 73ee 	movw	r3, #45038	; 0xafee
    caa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    caac:	701a      	strb	r2, [r3, #0]
    caae:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cab6:	781b      	ldrb	r3, [r3, #0]
    cab8:	3301      	adds	r3, #1
    caba:	b2da      	uxtb	r2, r3
    cabc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cac4:	701a      	strb	r2, [r3, #0]
    cac6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    caca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cace:	781b      	ldrb	r3, [r3, #0]
    cad0:	2bff      	cmp	r3, #255	; 0xff
    cad2:	d105      	bne.n	cae0 <send_nav_ref+0x4b0>
    cad4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cadc:	2200      	movs	r2, #0
    cade:	701a      	strb	r2, [r3, #0]
    cae0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cae8:	781b      	ldrb	r3, [r3, #0]
    caea:	461a      	mov	r2, r3
    caec:	f648 03a4 	movw	r3, #34980	; 0x88a4
    caf0:	f2c0 0301 	movt	r3, #1
    caf4:	7899      	ldrb	r1, [r3, #2]
    caf6:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    cafa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cafe:	5499      	strb	r1, [r3, r2]
    cb00:	4b20      	ldr	r3, [pc, #128]	; (cb84 <send_nav_ref+0x554>)
    cb02:	781a      	ldrb	r2, [r3, #0]
    cb04:	f64a 73ed 	movw	r3, #45037	; 0xafed
    cb08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb0c:	781b      	ldrb	r3, [r3, #0]
    cb0e:	4413      	add	r3, r2
    cb10:	b2da      	uxtb	r2, r3
    cb12:	f64a 73ed 	movw	r3, #45037	; 0xafed
    cb16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb1a:	701a      	strb	r2, [r3, #0]
    cb1c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    cb20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb24:	781a      	ldrb	r2, [r3, #0]
    cb26:	f64a 73ed 	movw	r3, #45037	; 0xafed
    cb2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb2e:	781b      	ldrb	r3, [r3, #0]
    cb30:	4413      	add	r3, r2
    cb32:	b2da      	uxtb	r2, r3
    cb34:	f64a 73ee 	movw	r3, #45038	; 0xafee
    cb38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb3c:	701a      	strb	r2, [r3, #0]
    cb3e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cb42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb46:	781b      	ldrb	r3, [r3, #0]
    cb48:	3301      	adds	r3, #1
    cb4a:	b2da      	uxtb	r2, r3
    cb4c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cb50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb54:	701a      	strb	r2, [r3, #0]
    cb56:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cb5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb5e:	781b      	ldrb	r3, [r3, #0]
    cb60:	2bff      	cmp	r3, #255	; 0xff
    cb62:	d111      	bne.n	cb88 <send_nav_ref+0x558>
    cb64:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cb68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb6c:	2200      	movs	r2, #0
    cb6e:	701a      	strb	r2, [r3, #0]
    cb70:	e00a      	b.n	cb88 <send_nav_ref+0x558>
    cb72:	bf00      	nop
    cb74:	000188a1 	.word	0x000188a1
    cb78:	000188a2 	.word	0x000188a2
    cb7c:	000188a3 	.word	0x000188a3
    cb80:	000188a5 	.word	0x000188a5
    cb84:	000188a6 	.word	0x000188a6
    cb88:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cb8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cb90:	781b      	ldrb	r3, [r3, #0]
    cb92:	461a      	mov	r2, r3
    cb94:	f648 03a4 	movw	r3, #34980	; 0x88a4
    cb98:	f2c0 0301 	movt	r3, #1
    cb9c:	78d9      	ldrb	r1, [r3, #3]
    cb9e:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    cba2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cba6:	5499      	strb	r1, [r3, r2]
    cba8:	4b79      	ldr	r3, [pc, #484]	; (cd90 <send_nav_ref+0x760>)
    cbaa:	781a      	ldrb	r2, [r3, #0]
    cbac:	f64a 73ed 	movw	r3, #45037	; 0xafed
    cbb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbb4:	781b      	ldrb	r3, [r3, #0]
    cbb6:	4413      	add	r3, r2
    cbb8:	b2da      	uxtb	r2, r3
    cbba:	f64a 73ed 	movw	r3, #45037	; 0xafed
    cbbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbc2:	701a      	strb	r2, [r3, #0]
    cbc4:	f64a 73ee 	movw	r3, #45038	; 0xafee
    cbc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbcc:	781a      	ldrb	r2, [r3, #0]
    cbce:	f64a 73ed 	movw	r3, #45037	; 0xafed
    cbd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbd6:	781b      	ldrb	r3, [r3, #0]
    cbd8:	4413      	add	r3, r2
    cbda:	b2da      	uxtb	r2, r3
    cbdc:	f64a 73ee 	movw	r3, #45038	; 0xafee
    cbe0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbe4:	701a      	strb	r2, [r3, #0]
    cbe6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cbea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbee:	781b      	ldrb	r3, [r3, #0]
    cbf0:	3301      	adds	r3, #1
    cbf2:	b2da      	uxtb	r2, r3
    cbf4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cbf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cbfc:	701a      	strb	r2, [r3, #0]
    cbfe:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cc02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc06:	781b      	ldrb	r3, [r3, #0]
    cc08:	2bff      	cmp	r3, #255	; 0xff
    cc0a:	d105      	bne.n	cc18 <send_nav_ref+0x5e8>
    cc0c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cc10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc14:	2200      	movs	r2, #0
    cc16:	701a      	strb	r2, [r3, #0]
    cc18:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cc1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc20:	781b      	ldrb	r3, [r3, #0]
    cc22:	461a      	mov	r2, r3
    cc24:	f64a 73ed 	movw	r3, #45037	; 0xafed
    cc28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc2c:	7819      	ldrb	r1, [r3, #0]
    cc2e:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    cc32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc36:	5499      	strb	r1, [r3, r2]
    cc38:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cc3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc40:	781b      	ldrb	r3, [r3, #0]
    cc42:	3301      	adds	r3, #1
    cc44:	b2da      	uxtb	r2, r3
    cc46:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cc4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc4e:	701a      	strb	r2, [r3, #0]
    cc50:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cc54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc58:	781b      	ldrb	r3, [r3, #0]
    cc5a:	2bff      	cmp	r3, #255	; 0xff
    cc5c:	d105      	bne.n	cc6a <send_nav_ref+0x63a>
    cc5e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cc62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc66:	2200      	movs	r2, #0
    cc68:	701a      	strb	r2, [r3, #0]
    cc6a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cc6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc72:	781b      	ldrb	r3, [r3, #0]
    cc74:	461a      	mov	r2, r3
    cc76:	f64a 73ee 	movw	r3, #45038	; 0xafee
    cc7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc7e:	7819      	ldrb	r1, [r3, #0]
    cc80:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    cc84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc88:	5499      	strb	r1, [r3, r2]
    cc8a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cc8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cc92:	781b      	ldrb	r3, [r3, #0]
    cc94:	3301      	adds	r3, #1
    cc96:	b2da      	uxtb	r2, r3
    cc98:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cc9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cca0:	701a      	strb	r2, [r3, #0]
    cca2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccaa:	781b      	ldrb	r3, [r3, #0]
    ccac:	2bff      	cmp	r3, #255	; 0xff
    ccae:	d105      	bne.n	ccbc <send_nav_ref+0x68c>
    ccb0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ccb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccb8:	2200      	movs	r2, #0
    ccba:	701a      	strb	r2, [r3, #0]
    ccbc:	f242 0339 	movw	r3, #8249	; 0x2039
    ccc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccc4:	781b      	ldrb	r3, [r3, #0]
    ccc6:	b2db      	uxtb	r3, r3
    ccc8:	f003 0310 	and.w	r3, r3, #16
    cccc:	2b00      	cmp	r3, #0
    ccce:	d15a      	bne.n	cd86 <send_nav_ref+0x756>
    ccd0:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    ccd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccd8:	781b      	ldrb	r3, [r3, #0]
    ccda:	b2db      	uxtb	r3, r3
    ccdc:	461a      	mov	r2, r3
    ccde:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    cce2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cce6:	5c9a      	ldrb	r2, [r3, r2]
    cce8:	f64a 73eb 	movw	r3, #45035	; 0xafeb
    ccec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccf0:	701a      	strb	r2, [r3, #0]
    ccf2:	f64a 73ec 	movw	r3, #45036	; 0xafec
    ccf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ccfa:	2200      	movs	r2, #0
    ccfc:	701a      	strb	r2, [r3, #0]
    ccfe:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    cd02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd06:	781b      	ldrb	r3, [r3, #0]
    cd08:	b2db      	uxtb	r3, r3
    cd0a:	3301      	adds	r3, #1
    cd0c:	b2da      	uxtb	r2, r3
    cd0e:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    cd12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd16:	701a      	strb	r2, [r3, #0]
    cd18:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    cd1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd20:	781b      	ldrb	r3, [r3, #0]
    cd22:	b2db      	uxtb	r3, r3
    cd24:	2bff      	cmp	r3, #255	; 0xff
    cd26:	d105      	bne.n	cd34 <send_nav_ref+0x704>
    cd28:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    cd2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd30:	2200      	movs	r2, #0
    cd32:	701a      	strb	r2, [r3, #0]
    cd34:	f242 0338 	movw	r3, #8248	; 0x2038
    cd38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd3c:	f242 0238 	movw	r2, #8248	; 0x2038
    cd40:	f2c2 0200 	movt	r2, #8192	; 0x2000
    cd44:	7812      	ldrb	r2, [r2, #0]
    cd46:	b2d2      	uxtb	r2, r2
    cd48:	f042 0201 	orr.w	r2, r2, #1
    cd4c:	b2d2      	uxtb	r2, r2
    cd4e:	701a      	strb	r2, [r3, #0]
    cd50:	f242 0339 	movw	r3, #8249	; 0x2039
    cd54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd58:	f242 0239 	movw	r2, #8249	; 0x2039
    cd5c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    cd60:	7812      	ldrb	r2, [r2, #0]
    cd62:	b2d2      	uxtb	r2, r2
    cd64:	f042 0210 	orr.w	r2, r2, #16
    cd68:	b2d2      	uxtb	r2, r2
    cd6a:	701a      	strb	r2, [r3, #0]
    cd6c:	e00b      	b.n	cd86 <send_nav_ref+0x756>
    cd6e:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    cd72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd76:	781b      	ldrb	r3, [r3, #0]
    cd78:	3301      	adds	r3, #1
    cd7a:	b2da      	uxtb	r2, r3
    cd7c:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    cd80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cd84:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    cd86:	46bd      	mov	sp, r7
    cd88:	f85d 7b04 	ldr.w	r7, [sp], #4
    cd8c:	4770      	bx	lr
    cd8e:	bf00      	nop
    cd90:	000188a7 	.word	0x000188a7

0000cd94 <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    cd94:	b480      	push	{r7}
    cd96:	b083      	sub	sp, #12
    cd98:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    cd9a:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    cd9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cda2:	8a1b      	ldrh	r3, [r3, #16]
    cda4:	b21b      	sxth	r3, r3
    cda6:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    cdaa:	db0d      	blt.n	cdc8 <inflight_calib_mode_update+0x34>
    cdac:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    cdb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdb4:	8a1b      	ldrh	r3, [r3, #16]
    cdb6:	b21a      	sxth	r2, r3
    cdb8:	f640 437f 	movw	r3, #3199	; 0xc7f
    cdbc:	429a      	cmp	r2, r3
    cdbe:	bfd4      	ite	le
    cdc0:	2300      	movle	r3, #0
    cdc2:	2301      	movgt	r3, #1
    cdc4:	b2db      	uxtb	r3, r3
    cdc6:	e000      	b.n	cdca <inflight_calib_mode_update+0x36>
    cdc8:	2302      	movs	r3, #2
    cdca:	71fb      	strb	r3, [r7, #7]
    cdcc:	f24b 43fc 	movw	r3, #46332	; 0xb4fc
    cdd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cdd4:	781b      	ldrb	r3, [r3, #0]
    cdd6:	79fa      	ldrb	r2, [r7, #7]
    cdd8:	429a      	cmp	r2, r3
    cdda:	d007      	beq.n	cdec <inflight_calib_mode_update+0x58>
    cddc:	f24b 43fc 	movw	r3, #46332	; 0xb4fc
    cde0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cde4:	79fa      	ldrb	r2, [r7, #7]
    cde6:	701a      	strb	r2, [r3, #0]
    cde8:	2301      	movs	r3, #1
    cdea:	e000      	b.n	cdee <inflight_calib_mode_update+0x5a>
    cdec:	2300      	movs	r3, #0
}
    cdee:	4618      	mov	r0, r3
    cdf0:	370c      	adds	r7, #12
    cdf2:	46bd      	mov	sp, r7
    cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    cdf8:	4770      	bx	lr
    cdfa:	bf00      	nop

0000cdfc <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    cdfc:	b580      	push	{r7, lr}
    cdfe:	b082      	sub	sp, #8
    ce00:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    ce02:	f24b 031e 	movw	r3, #45086	; 0xb01e
    ce06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce0a:	2201      	movs	r2, #1
    ce0c:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    ce0e:	f24b 031e 	movw	r3, #45086	; 0xb01e
    ce12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce16:	781b      	ldrb	r3, [r3, #0]
    ce18:	b2db      	uxtb	r3, r3
    ce1a:	2b00      	cmp	r3, #0
    ce1c:	f000 83b8 	beq.w	d590 <radio_control_task+0x794>
    uint8_t mode_changed = FALSE;
    ce20:	2300      	movs	r3, #0
    ce22:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    ce24:	f7fa fa9c 	bl	7360 <copy_from_to_fbw>
    if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) {
    ce28:	4b3a      	ldr	r3, [pc, #232]	; (cf14 <radio_control_task+0x118>)
    ce2a:	781b      	ldrb	r3, [r3, #0]
    ce2c:	b2db      	uxtb	r3, r3
    ce2e:	f003 0302 	and.w	r3, r3, #2
    ce32:	2b00      	cmp	r3, #0
    ce34:	d00d      	beq.n	ce52 <radio_control_task+0x56>
    ce36:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    ce3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce3e:	781b      	ldrb	r3, [r3, #0]
    ce40:	2b01      	cmp	r3, #1
    ce42:	d00d      	beq.n	ce60 <radio_control_task+0x64>
    ce44:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    ce48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce4c:	781b      	ldrb	r3, [r3, #0]
    ce4e:	2b00      	cmp	r3, #0
    ce50:	d006      	beq.n	ce60 <radio_control_task+0x64>
    ce52:	f24b 237c 	movw	r3, #45692	; 0xb27c
    ce56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce5a:	781b      	ldrb	r3, [r3, #0]
    ce5c:	2b00      	cmp	r3, #0
    ce5e:	d007      	beq.n	ce70 <radio_control_task+0x74>
      pprz_mode = PPRZ_MODE_HOME;
    ce60:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    ce64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce68:	2203      	movs	r2, #3
    ce6a:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    ce6c:	2301      	movs	r3, #1
    ce6e:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    //if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    ce70:	f7fa f950 	bl	7114 <pprz_mode_update>
    ce74:	4603      	mov	r3, r0
    ce76:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    ce78:	79fa      	ldrb	r2, [r7, #7]
    ce7a:	79bb      	ldrb	r3, [r7, #6]
    ce7c:	4313      	orrs	r3, r2
    ce7e:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    ce80:	f7fa f994 	bl	71ac <ir_estim_mode_update>
    ce84:	4603      	mov	r3, r0
    ce86:	461a      	mov	r2, r3
    ce88:	79fb      	ldrb	r3, [r7, #7]
    ce8a:	4313      	orrs	r3, r2
    ce8c:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    ce8e:	f7ff ff81 	bl	cd94 <inflight_calib_mode_update>
    ce92:	4603      	mov	r3, r0
    ce94:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    ce96:	797b      	ldrb	r3, [r7, #5]
    ce98:	2b00      	cmp	r3, #0
    ce9a:	d102      	bne.n	cea2 <radio_control_task+0xa6>
    ce9c:	79bb      	ldrb	r3, [r7, #6]
    ce9e:	2b00      	cmp	r3, #0
    cea0:	d001      	beq.n	cea6 <radio_control_task+0xaa>
    cea2:	2301      	movs	r3, #1
    cea4:	e000      	b.n	cea8 <radio_control_task+0xac>
    cea6:	2300      	movs	r3, #0
    cea8:	b2db      	uxtb	r3, r3
    ceaa:	4618      	mov	r0, r3
    ceac:	f008 fba0 	bl	155f0 <inflight_calib>
      mode_changed |= calib_mode_changed;
    ceb0:	79fa      	ldrb	r2, [r7, #7]
    ceb2:	797b      	ldrb	r3, [r7, #5]
    ceb4:	4313      	orrs	r3, r2
    ceb6:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    ceb8:	f7fa f9a0 	bl	71fc <mcu1_status_update>
    cebc:	4603      	mov	r3, r0
    cebe:	461a      	mov	r2, r3
    cec0:	79fb      	ldrb	r3, [r7, #7]
    cec2:	4313      	orrs	r3, r2
    cec4:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    cec6:	2301      	movs	r3, #1
    cec8:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    ceca:	79fb      	ldrb	r3, [r7, #7]
    cecc:	2b00      	cmp	r3, #0
    cece:	f000 82bc 	beq.w	d44a <radio_control_task+0x64e>
      DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
    ced2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ced6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ceda:	781a      	ldrb	r2, [r3, #0]
    cedc:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    cee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cee4:	781b      	ldrb	r3, [r3, #0]
    cee6:	b2db      	uxtb	r3, r3
    cee8:	429a      	cmp	r2, r3
    ceea:	d315      	bcc.n	cf18 <radio_control_task+0x11c>
    ceec:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    cef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cef4:	781b      	ldrb	r3, [r3, #0]
    cef6:	b2db      	uxtb	r3, r3
    cef8:	461a      	mov	r2, r3
    cefa:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cefe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf02:	781b      	ldrb	r3, [r3, #0]
    cf04:	1ad3      	subs	r3, r2, r3
    cf06:	33ff      	adds	r3, #255	; 0xff
    cf08:	2b09      	cmp	r3, #9
    cf0a:	bfd4      	ite	le
    cf0c:	2300      	movle	r3, #0
    cf0e:	2301      	movgt	r3, #1
    cf10:	b2db      	uxtb	r3, r3
    cf12:	e013      	b.n	cf3c <radio_control_task+0x140>
    cf14:	2000b003 	.word	0x2000b003
    cf18:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    cf1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf20:	781b      	ldrb	r3, [r3, #0]
    cf22:	b2db      	uxtb	r3, r3
    cf24:	461a      	mov	r2, r3
    cf26:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cf2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf2e:	781b      	ldrb	r3, [r3, #0]
    cf30:	1ad3      	subs	r3, r2, r3
    cf32:	2b09      	cmp	r3, #9
    cf34:	bfd4      	ite	le
    cf36:	2300      	movle	r3, #0
    cf38:	2301      	movgt	r3, #1
    cf3a:	b2db      	uxtb	r3, r3
    cf3c:	2b00      	cmp	r3, #0
    cf3e:	f000 8278 	beq.w	d432 <radio_control_task+0x636>
    cf42:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cf46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf4a:	781b      	ldrb	r3, [r3, #0]
    cf4c:	461a      	mov	r2, r3
    cf4e:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    cf52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf56:	2105      	movs	r1, #5
    cf58:	5499      	strb	r1, [r3, r2]
    cf5a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cf5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf62:	781b      	ldrb	r3, [r3, #0]
    cf64:	3301      	adds	r3, #1
    cf66:	b2da      	uxtb	r2, r3
    cf68:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cf6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf70:	701a      	strb	r2, [r3, #0]
    cf72:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cf76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf7a:	781b      	ldrb	r3, [r3, #0]
    cf7c:	2bff      	cmp	r3, #255	; 0xff
    cf7e:	d105      	bne.n	cf8c <radio_control_task+0x190>
    cf80:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cf84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf88:	2200      	movs	r2, #0
    cf8a:	701a      	strb	r2, [r3, #0]
    cf8c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cf90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf94:	781b      	ldrb	r3, [r3, #0]
    cf96:	461a      	mov	r2, r3
    cf98:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    cf9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfa0:	210b      	movs	r1, #11
    cfa2:	5499      	strb	r1, [r3, r2]
    cfa4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cfa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfac:	781b      	ldrb	r3, [r3, #0]
    cfae:	3301      	adds	r3, #1
    cfb0:	b2da      	uxtb	r2, r3
    cfb2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cfb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfba:	701a      	strb	r2, [r3, #0]
    cfbc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cfc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfc4:	781b      	ldrb	r3, [r3, #0]
    cfc6:	2bff      	cmp	r3, #255	; 0xff
    cfc8:	d105      	bne.n	cfd6 <radio_control_task+0x1da>
    cfca:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cfce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfd2:	2200      	movs	r2, #0
    cfd4:	701a      	strb	r2, [r3, #0]
    cfd6:	f64a 73ed 	movw	r3, #45037	; 0xafed
    cfda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfde:	220b      	movs	r2, #11
    cfe0:	701a      	strb	r2, [r3, #0]
    cfe2:	f64a 73ee 	movw	r3, #45038	; 0xafee
    cfe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cfea:	220b      	movs	r2, #11
    cfec:	701a      	strb	r2, [r3, #0]
    cfee:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    cff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cff6:	781b      	ldrb	r3, [r3, #0]
    cff8:	461a      	mov	r2, r3
    cffa:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    cffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d002:	7819      	ldrb	r1, [r3, #0]
    d004:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    d008:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d00c:	5499      	strb	r1, [r3, r2]
    d00e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d016:	781a      	ldrb	r2, [r3, #0]
    d018:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    d01c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d020:	781b      	ldrb	r3, [r3, #0]
    d022:	4413      	add	r3, r2
    d024:	b2da      	uxtb	r2, r3
    d026:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d02a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d02e:	701a      	strb	r2, [r3, #0]
    d030:	f64a 73ee 	movw	r3, #45038	; 0xafee
    d034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d038:	781a      	ldrb	r2, [r3, #0]
    d03a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d03e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d042:	781b      	ldrb	r3, [r3, #0]
    d044:	4413      	add	r3, r2
    d046:	b2da      	uxtb	r2, r3
    d048:	f64a 73ee 	movw	r3, #45038	; 0xafee
    d04c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d050:	701a      	strb	r2, [r3, #0]
    d052:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d056:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d05a:	781b      	ldrb	r3, [r3, #0]
    d05c:	3301      	adds	r3, #1
    d05e:	b2da      	uxtb	r2, r3
    d060:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d064:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d068:	701a      	strb	r2, [r3, #0]
    d06a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d06e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d072:	781b      	ldrb	r3, [r3, #0]
    d074:	2bff      	cmp	r3, #255	; 0xff
    d076:	d105      	bne.n	d084 <radio_control_task+0x288>
    d078:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d07c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d080:	2200      	movs	r2, #0
    d082:	701a      	strb	r2, [r3, #0]
    d084:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d088:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d08c:	781b      	ldrb	r3, [r3, #0]
    d08e:	461a      	mov	r2, r3
    d090:	f64a 63cd 	movw	r3, #44749	; 0xaecd
    d094:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d098:	7819      	ldrb	r1, [r3, #0]
    d09a:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    d09e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0a2:	5499      	strb	r1, [r3, r2]
    d0a4:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d0a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0ac:	781a      	ldrb	r2, [r3, #0]
    d0ae:	f64a 63cd 	movw	r3, #44749	; 0xaecd
    d0b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0b6:	781b      	ldrb	r3, [r3, #0]
    d0b8:	4413      	add	r3, r2
    d0ba:	b2da      	uxtb	r2, r3
    d0bc:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d0c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0c4:	701a      	strb	r2, [r3, #0]
    d0c6:	f64a 73ee 	movw	r3, #45038	; 0xafee
    d0ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0ce:	781a      	ldrb	r2, [r3, #0]
    d0d0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d0d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0d8:	781b      	ldrb	r3, [r3, #0]
    d0da:	4413      	add	r3, r2
    d0dc:	b2da      	uxtb	r2, r3
    d0de:	f64a 73ee 	movw	r3, #45038	; 0xafee
    d0e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0e6:	701a      	strb	r2, [r3, #0]
    d0e8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d0ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0f0:	781b      	ldrb	r3, [r3, #0]
    d0f2:	3301      	adds	r3, #1
    d0f4:	b2da      	uxtb	r2, r3
    d0f6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d0fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0fe:	701a      	strb	r2, [r3, #0]
    d100:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d104:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d108:	781b      	ldrb	r3, [r3, #0]
    d10a:	2bff      	cmp	r3, #255	; 0xff
    d10c:	d105      	bne.n	d11a <radio_control_task+0x31e>
    d10e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d112:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d116:	2200      	movs	r2, #0
    d118:	701a      	strb	r2, [r3, #0]
    d11a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d11e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d122:	781b      	ldrb	r3, [r3, #0]
    d124:	461a      	mov	r2, r3
    d126:	f24b 43fc 	movw	r3, #46332	; 0xb4fc
    d12a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d12e:	7819      	ldrb	r1, [r3, #0]
    d130:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    d134:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d138:	5499      	strb	r1, [r3, r2]
    d13a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d13e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d142:	781a      	ldrb	r2, [r3, #0]
    d144:	f24b 43fc 	movw	r3, #46332	; 0xb4fc
    d148:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d14c:	781b      	ldrb	r3, [r3, #0]
    d14e:	4413      	add	r3, r2
    d150:	b2da      	uxtb	r2, r3
    d152:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d156:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d15a:	701a      	strb	r2, [r3, #0]
    d15c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    d160:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d164:	781a      	ldrb	r2, [r3, #0]
    d166:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d16a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d16e:	781b      	ldrb	r3, [r3, #0]
    d170:	4413      	add	r3, r2
    d172:	b2da      	uxtb	r2, r3
    d174:	f64a 73ee 	movw	r3, #45038	; 0xafee
    d178:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d17c:	701a      	strb	r2, [r3, #0]
    d17e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d182:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d186:	781b      	ldrb	r3, [r3, #0]
    d188:	3301      	adds	r3, #1
    d18a:	b2da      	uxtb	r2, r3
    d18c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d190:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d194:	701a      	strb	r2, [r3, #0]
    d196:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d19a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d19e:	781b      	ldrb	r3, [r3, #0]
    d1a0:	2bff      	cmp	r3, #255	; 0xff
    d1a2:	d105      	bne.n	d1b0 <radio_control_task+0x3b4>
    d1a4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d1a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1ac:	2200      	movs	r2, #0
    d1ae:	701a      	strb	r2, [r3, #0]
    d1b0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d1b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1b8:	781b      	ldrb	r3, [r3, #0]
    d1ba:	461a      	mov	r2, r3
    d1bc:	f64a 63d3 	movw	r3, #44755	; 0xaed3
    d1c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1c4:	7819      	ldrb	r1, [r3, #0]
    d1c6:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    d1ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1ce:	5499      	strb	r1, [r3, r2]
    d1d0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d1d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1d8:	781a      	ldrb	r2, [r3, #0]
    d1da:	f64a 63d3 	movw	r3, #44755	; 0xaed3
    d1de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1e2:	781b      	ldrb	r3, [r3, #0]
    d1e4:	4413      	add	r3, r2
    d1e6:	b2da      	uxtb	r2, r3
    d1e8:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d1ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1f0:	701a      	strb	r2, [r3, #0]
    d1f2:	f64a 73ee 	movw	r3, #45038	; 0xafee
    d1f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d1fa:	781a      	ldrb	r2, [r3, #0]
    d1fc:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d200:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d204:	781b      	ldrb	r3, [r3, #0]
    d206:	4413      	add	r3, r2
    d208:	b2da      	uxtb	r2, r3
    d20a:	f64a 73ee 	movw	r3, #45038	; 0xafee
    d20e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d212:	701a      	strb	r2, [r3, #0]
    d214:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d218:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d21c:	781b      	ldrb	r3, [r3, #0]
    d21e:	3301      	adds	r3, #1
    d220:	b2da      	uxtb	r2, r3
    d222:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d226:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d22a:	701a      	strb	r2, [r3, #0]
    d22c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d230:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d234:	781b      	ldrb	r3, [r3, #0]
    d236:	2bff      	cmp	r3, #255	; 0xff
    d238:	d105      	bne.n	d246 <radio_control_task+0x44a>
    d23a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d23e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d242:	2200      	movs	r2, #0
    d244:	701a      	strb	r2, [r3, #0]
    d246:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d24a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d24e:	781b      	ldrb	r3, [r3, #0]
    d250:	461a      	mov	r2, r3
    d252:	f240 33ec 	movw	r3, #1004	; 0x3ec
    d256:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d25a:	7819      	ldrb	r1, [r3, #0]
    d25c:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    d260:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d264:	5499      	strb	r1, [r3, r2]
    d266:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d26a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d26e:	781a      	ldrb	r2, [r3, #0]
    d270:	f240 33ec 	movw	r3, #1004	; 0x3ec
    d274:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d278:	781b      	ldrb	r3, [r3, #0]
    d27a:	4413      	add	r3, r2
    d27c:	b2da      	uxtb	r2, r3
    d27e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d282:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d286:	701a      	strb	r2, [r3, #0]
    d288:	f64a 73ee 	movw	r3, #45038	; 0xafee
    d28c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d290:	781a      	ldrb	r2, [r3, #0]
    d292:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d296:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d29a:	781b      	ldrb	r3, [r3, #0]
    d29c:	4413      	add	r3, r2
    d29e:	b2da      	uxtb	r2, r3
    d2a0:	f64a 73ee 	movw	r3, #45038	; 0xafee
    d2a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2a8:	701a      	strb	r2, [r3, #0]
    d2aa:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d2ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2b2:	781b      	ldrb	r3, [r3, #0]
    d2b4:	3301      	adds	r3, #1
    d2b6:	b2da      	uxtb	r2, r3
    d2b8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d2bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2c0:	701a      	strb	r2, [r3, #0]
    d2c2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d2c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2ca:	781b      	ldrb	r3, [r3, #0]
    d2cc:	2bff      	cmp	r3, #255	; 0xff
    d2ce:	d105      	bne.n	d2dc <radio_control_task+0x4e0>
    d2d0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d2d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2d8:	2200      	movs	r2, #0
    d2da:	701a      	strb	r2, [r3, #0]
    d2dc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d2e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2e4:	781b      	ldrb	r3, [r3, #0]
    d2e6:	461a      	mov	r2, r3
    d2e8:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d2ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2f0:	7819      	ldrb	r1, [r3, #0]
    d2f2:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    d2f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d2fa:	5499      	strb	r1, [r3, r2]
    d2fc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d300:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d304:	781b      	ldrb	r3, [r3, #0]
    d306:	3301      	adds	r3, #1
    d308:	b2da      	uxtb	r2, r3
    d30a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d30e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d312:	701a      	strb	r2, [r3, #0]
    d314:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d318:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d31c:	781b      	ldrb	r3, [r3, #0]
    d31e:	2bff      	cmp	r3, #255	; 0xff
    d320:	d105      	bne.n	d32e <radio_control_task+0x532>
    d322:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d326:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d32a:	2200      	movs	r2, #0
    d32c:	701a      	strb	r2, [r3, #0]
    d32e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d332:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d336:	781b      	ldrb	r3, [r3, #0]
    d338:	461a      	mov	r2, r3
    d33a:	f64a 73ee 	movw	r3, #45038	; 0xafee
    d33e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d342:	7819      	ldrb	r1, [r3, #0]
    d344:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    d348:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d34c:	5499      	strb	r1, [r3, r2]
    d34e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d352:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d356:	781b      	ldrb	r3, [r3, #0]
    d358:	3301      	adds	r3, #1
    d35a:	b2da      	uxtb	r2, r3
    d35c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d360:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d364:	701a      	strb	r2, [r3, #0]
    d366:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d36a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d36e:	781b      	ldrb	r3, [r3, #0]
    d370:	2bff      	cmp	r3, #255	; 0xff
    d372:	d105      	bne.n	d380 <radio_control_task+0x584>
    d374:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d378:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d37c:	2200      	movs	r2, #0
    d37e:	701a      	strb	r2, [r3, #0]
    d380:	f242 0339 	movw	r3, #8249	; 0x2039
    d384:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d388:	781b      	ldrb	r3, [r3, #0]
    d38a:	b2db      	uxtb	r3, r3
    d38c:	f003 0310 	and.w	r3, r3, #16
    d390:	2b00      	cmp	r3, #0
    d392:	d15a      	bne.n	d44a <radio_control_task+0x64e>
    d394:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    d398:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d39c:	781b      	ldrb	r3, [r3, #0]
    d39e:	b2db      	uxtb	r3, r3
    d3a0:	461a      	mov	r2, r3
    d3a2:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    d3a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3aa:	5c9a      	ldrb	r2, [r3, r2]
    d3ac:	f64a 73eb 	movw	r3, #45035	; 0xafeb
    d3b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3b4:	701a      	strb	r2, [r3, #0]
    d3b6:	f64a 73ec 	movw	r3, #45036	; 0xafec
    d3ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3be:	2200      	movs	r2, #0
    d3c0:	701a      	strb	r2, [r3, #0]
    d3c2:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    d3c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3ca:	781b      	ldrb	r3, [r3, #0]
    d3cc:	b2db      	uxtb	r3, r3
    d3ce:	3301      	adds	r3, #1
    d3d0:	b2da      	uxtb	r2, r3
    d3d2:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    d3d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3da:	701a      	strb	r2, [r3, #0]
    d3dc:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    d3e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3e4:	781b      	ldrb	r3, [r3, #0]
    d3e6:	b2db      	uxtb	r3, r3
    d3e8:	2bff      	cmp	r3, #255	; 0xff
    d3ea:	d105      	bne.n	d3f8 <radio_control_task+0x5fc>
    d3ec:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    d3f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d3f4:	2200      	movs	r2, #0
    d3f6:	701a      	strb	r2, [r3, #0]
    d3f8:	f242 0338 	movw	r3, #8248	; 0x2038
    d3fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d400:	f242 0238 	movw	r2, #8248	; 0x2038
    d404:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d408:	7812      	ldrb	r2, [r2, #0]
    d40a:	b2d2      	uxtb	r2, r2
    d40c:	f042 0201 	orr.w	r2, r2, #1
    d410:	b2d2      	uxtb	r2, r2
    d412:	701a      	strb	r2, [r3, #0]
    d414:	f242 0339 	movw	r3, #8249	; 0x2039
    d418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d41c:	f242 0239 	movw	r2, #8249	; 0x2039
    d420:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d424:	7812      	ldrb	r2, [r2, #0]
    d426:	b2d2      	uxtb	r2, r2
    d428:	f042 0210 	orr.w	r2, r2, #16
    d42c:	b2d2      	uxtb	r2, r2
    d42e:	701a      	strb	r2, [r3, #0]
    d430:	e00b      	b.n	d44a <radio_control_task+0x64e>
    d432:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    d436:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d43a:	781b      	ldrb	r3, [r3, #0]
    d43c:	3301      	adds	r3, #1
    d43e:	b2da      	uxtb	r2, r3
    d440:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    d444:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d448:	701a      	strb	r2, [r3, #0]
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    d44a:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    d44e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d452:	885b      	ldrh	r3, [r3, #2]
    d454:	b21b      	sxth	r3, r3
    d456:	4618      	mov	r0, r3
    d458:	f00a fe96 	bl	18188 <__aeabi_i2f>
    d45c:	4603      	mov	r3, r0
    d45e:	4618      	mov	r0, r3
    d460:	f04f 0100 	mov.w	r1, #0
    d464:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d468:	f00a ff96 	bl	18398 <__aeabi_fdiv>
    d46c:	4603      	mov	r3, r0
    d46e:	4618      	mov	r0, r3
    d470:	f00a fa4a 	bl	17908 <__aeabi_f2d>
    d474:	4602      	mov	r2, r0
    d476:	460b      	mov	r3, r1
    d478:	4610      	mov	r0, r2
    d47a:	4619      	mov	r1, r3
    d47c:	a346      	add	r3, pc, #280	; (adr r3, d598 <radio_control_task+0x79c>)
    d47e:	e9d3 2300 	ldrd	r2, r3, [r3]
    d482:	f00a fa95 	bl	179b0 <__aeabi_dmul>
    d486:	4602      	mov	r2, r0
    d488:	460b      	mov	r3, r1
    d48a:	4610      	mov	r0, r2
    d48c:	4619      	mov	r1, r3
    d48e:	f04f 0200 	mov.w	r2, #0
    d492:	f04f 0300 	mov.w	r3, #0
    d496:	f00a f8d9 	bl	1764c <__adddf3>
    d49a:	4602      	mov	r2, r0
    d49c:	460b      	mov	r3, r1
    d49e:	4610      	mov	r0, r2
    d4a0:	4619      	mov	r1, r3
    d4a2:	f00a fd67 	bl	17f74 <__aeabi_d2f>
    d4a6:	4602      	mov	r2, r0
    d4a8:	f24b 2314 	movw	r3, #45588	; 0xb214
    d4ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4b0:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    d4b2:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    d4b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d4ba:	889b      	ldrh	r3, [r3, #4]
    d4bc:	b21b      	sxth	r3, r3
    d4be:	4618      	mov	r0, r3
    d4c0:	f00a fe62 	bl	18188 <__aeabi_i2f>
    d4c4:	4603      	mov	r3, r0
    d4c6:	4618      	mov	r0, r3
    d4c8:	f04f 0100 	mov.w	r1, #0
    d4cc:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d4d0:	f00a ff62 	bl	18398 <__aeabi_fdiv>
    d4d4:	4603      	mov	r3, r0
    d4d6:	4618      	mov	r0, r3
    d4d8:	f00a fa16 	bl	17908 <__aeabi_f2d>
    d4dc:	4602      	mov	r2, r0
    d4de:	460b      	mov	r3, r1
    d4e0:	4610      	mov	r0, r2
    d4e2:	4619      	mov	r1, r3
    d4e4:	f04f 0200 	mov.w	r2, #0
    d4e8:	f04f 0300 	mov.w	r3, #0
    d4ec:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    d4f0:	f00a fa5e 	bl	179b0 <__aeabi_dmul>
    d4f4:	4602      	mov	r2, r0
    d4f6:	460b      	mov	r3, r1
    d4f8:	4610      	mov	r0, r2
    d4fa:	4619      	mov	r1, r3
    d4fc:	f04f 0200 	mov.w	r2, #0
    d500:	f04f 0300 	mov.w	r3, #0
    d504:	f00a f8a2 	bl	1764c <__adddf3>
    d508:	4602      	mov	r2, r0
    d50a:	460b      	mov	r3, r1
    d50c:	4610      	mov	r0, r2
    d50e:	4619      	mov	r1, r3
    d510:	f00a fd30 	bl	17f74 <__aeabi_d2f>
    d514:	4602      	mov	r2, r0
    d516:	f24b 2318 	movw	r3, #45592	; 0xb218
    d51a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d51e:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    d520:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    d524:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d528:	881a      	ldrh	r2, [r3, #0]
    d52a:	f24b 231c 	movw	r3, #45596	; 0xb21c
    d52e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d532:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    d534:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    d538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d53c:	7c9a      	ldrb	r2, [r3, #18]
    d53e:	f64a 63d4 	movw	r3, #44756	; 0xaed4
    d542:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d546:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    d548:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    d54c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d550:	7d5a      	ldrb	r2, [r3, #21]
    d552:	f64a 63d2 	movw	r3, #44754	; 0xaed2
    d556:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d55a:	701a      	strb	r2, [r3, #0]

    events_update();
    d55c:	f7f9 fe7e 	bl	725c <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    d560:	f7f8 fc7e 	bl	5e60 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    d564:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    d568:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d56c:	781b      	ldrb	r3, [r3, #0]
    d56e:	2b02      	cmp	r3, #2
    d570:	d10e      	bne.n	d590 <radio_control_task+0x794>
    d572:	f64a 73f0 	movw	r3, #45040	; 0xaff0
    d576:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d57a:	881b      	ldrh	r3, [r3, #0]
    d57c:	b21b      	sxth	r3, r3
    d57e:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    d582:	dd05      	ble.n	d590 <radio_control_task+0x794>
	launch = TRUE;
    d584:	f64a 63e0 	movw	r3, #44768	; 0xaee0
    d588:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d58c:	2201      	movs	r2, #1
    d58e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    d590:	3708      	adds	r7, #8
    d592:	46bd      	mov	sp, r7
    d594:	bd80      	pop	{r7, pc}
    d596:	bf00      	nop
    d598:	33333333 	.word	0x33333333
    d59c:	bfe33333 	.word	0xbfe33333

0000d5a0 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    d5a0:	b580      	push	{r7, lr}
    d5a2:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    d5a4:	f64a 63ce 	movw	r3, #44750	; 0xaece
    d5a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5ac:	2203      	movs	r2, #3
    d5ae:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    d5b0:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    d5b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5b8:	781b      	ldrb	r3, [r3, #0]
    d5ba:	2b03      	cmp	r3, #3
    d5bc:	d102      	bne.n	d5c4 <navigation_update+0x24>
    nav_home();
    d5be:	f007 fa9b 	bl	14af8 <nav_home>
    d5c2:	e001      	b.n	d5c8 <navigation_update+0x28>
  else
    nav_update();
    d5c4:	f007 fabe 	bl	14b44 <nav_update>
}
    d5c8:	bd80      	pop	{r7, pc}
    d5ca:	bf00      	nop

0000d5cc <send_nav_values>:

void send_nav_values(void){
    d5cc:	b480      	push	{r7}
    d5ce:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    d5d0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d5d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5d8:	781a      	ldrb	r2, [r3, #0]
    d5da:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    d5de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5e2:	781b      	ldrb	r3, [r3, #0]
    d5e4:	b2db      	uxtb	r3, r3
    d5e6:	429a      	cmp	r2, r3
    d5e8:	d313      	bcc.n	d612 <send_nav_values+0x46>
    d5ea:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    d5ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5f2:	781b      	ldrb	r3, [r3, #0]
    d5f4:	b2db      	uxtb	r3, r3
    d5f6:	461a      	mov	r2, r3
    d5f8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d5fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d600:	781b      	ldrb	r3, [r3, #0]
    d602:	1ad3      	subs	r3, r2, r3
    d604:	33ff      	adds	r3, #255	; 0xff
    d606:	2b1e      	cmp	r3, #30
    d608:	bfd4      	ite	le
    d60a:	2300      	movle	r3, #0
    d60c:	2301      	movgt	r3, #1
    d60e:	b2db      	uxtb	r3, r3
    d610:	e011      	b.n	d636 <send_nav_values+0x6a>
    d612:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    d616:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d61a:	781b      	ldrb	r3, [r3, #0]
    d61c:	b2db      	uxtb	r3, r3
    d61e:	461a      	mov	r2, r3
    d620:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d624:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d628:	781b      	ldrb	r3, [r3, #0]
    d62a:	1ad3      	subs	r3, r2, r3
    d62c:	2b1e      	cmp	r3, #30
    d62e:	bfd4      	ite	le
    d630:	2300      	movle	r3, #0
    d632:	2301      	movgt	r3, #1
    d634:	b2db      	uxtb	r3, r3
    d636:	2b00      	cmp	r3, #0
    d638:	f001 8094 	beq.w	e764 <send_nav_values+0x1198>
    d63c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d640:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d644:	781b      	ldrb	r3, [r3, #0]
    d646:	461a      	mov	r2, r3
    d648:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    d64c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d650:	2105      	movs	r1, #5
    d652:	5499      	strb	r1, [r3, r2]
    d654:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d658:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d65c:	781b      	ldrb	r3, [r3, #0]
    d65e:	3301      	adds	r3, #1
    d660:	b2da      	uxtb	r2, r3
    d662:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d666:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d66a:	701a      	strb	r2, [r3, #0]
    d66c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d670:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d674:	781b      	ldrb	r3, [r3, #0]
    d676:	2bff      	cmp	r3, #255	; 0xff
    d678:	d105      	bne.n	d686 <send_nav_values+0xba>
    d67a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d67e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d682:	2200      	movs	r2, #0
    d684:	701a      	strb	r2, [r3, #0]
    d686:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d68a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d68e:	781b      	ldrb	r3, [r3, #0]
    d690:	461a      	mov	r2, r3
    d692:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    d696:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d69a:	210a      	movs	r1, #10
    d69c:	5499      	strb	r1, [r3, r2]
    d69e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d6a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6a6:	781b      	ldrb	r3, [r3, #0]
    d6a8:	3301      	adds	r3, #1
    d6aa:	b2da      	uxtb	r2, r3
    d6ac:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d6b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6b4:	701a      	strb	r2, [r3, #0]
    d6b6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d6ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6be:	781b      	ldrb	r3, [r3, #0]
    d6c0:	2bff      	cmp	r3, #255	; 0xff
    d6c2:	d105      	bne.n	d6d0 <send_nav_values+0x104>
    d6c4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d6c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6cc:	2200      	movs	r2, #0
    d6ce:	701a      	strb	r2, [r3, #0]
    d6d0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d6d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6d8:	220a      	movs	r2, #10
    d6da:	701a      	strb	r2, [r3, #0]
    d6dc:	f64a 73ee 	movw	r3, #45038	; 0xafee
    d6e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6e4:	220a      	movs	r2, #10
    d6e6:	701a      	strb	r2, [r3, #0]
    d6e8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d6ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6f0:	781b      	ldrb	r3, [r3, #0]
    d6f2:	461a      	mov	r2, r3
    d6f4:	f24b 2341 	movw	r3, #45633	; 0xb241
    d6f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d6fc:	7819      	ldrb	r1, [r3, #0]
    d6fe:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    d702:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d706:	5499      	strb	r1, [r3, r2]
    d708:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d70c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d710:	781a      	ldrb	r2, [r3, #0]
    d712:	f24b 2341 	movw	r3, #45633	; 0xb241
    d716:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d71a:	781b      	ldrb	r3, [r3, #0]
    d71c:	4413      	add	r3, r2
    d71e:	b2da      	uxtb	r2, r3
    d720:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d728:	701a      	strb	r2, [r3, #0]
    d72a:	f64a 73ee 	movw	r3, #45038	; 0xafee
    d72e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d732:	781a      	ldrb	r2, [r3, #0]
    d734:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d738:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d73c:	781b      	ldrb	r3, [r3, #0]
    d73e:	4413      	add	r3, r2
    d740:	b2da      	uxtb	r2, r3
    d742:	f64a 73ee 	movw	r3, #45038	; 0xafee
    d746:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d74a:	701a      	strb	r2, [r3, #0]
    d74c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d750:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d754:	781b      	ldrb	r3, [r3, #0]
    d756:	3301      	adds	r3, #1
    d758:	b2da      	uxtb	r2, r3
    d75a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d75e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d762:	701a      	strb	r2, [r3, #0]
    d764:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d768:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d76c:	781b      	ldrb	r3, [r3, #0]
    d76e:	2bff      	cmp	r3, #255	; 0xff
    d770:	d105      	bne.n	d77e <send_nav_values+0x1b2>
    d772:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d776:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d77a:	2200      	movs	r2, #0
    d77c:	701a      	strb	r2, [r3, #0]
    d77e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d782:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d786:	781b      	ldrb	r3, [r3, #0]
    d788:	461a      	mov	r2, r3
    d78a:	f24b 2340 	movw	r3, #45632	; 0xb240
    d78e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d792:	7819      	ldrb	r1, [r3, #0]
    d794:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    d798:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d79c:	5499      	strb	r1, [r3, r2]
    d79e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d7a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7a6:	781a      	ldrb	r2, [r3, #0]
    d7a8:	f24b 2340 	movw	r3, #45632	; 0xb240
    d7ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7b0:	781b      	ldrb	r3, [r3, #0]
    d7b2:	4413      	add	r3, r2
    d7b4:	b2da      	uxtb	r2, r3
    d7b6:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d7ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7be:	701a      	strb	r2, [r3, #0]
    d7c0:	f64a 73ee 	movw	r3, #45038	; 0xafee
    d7c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7c8:	781a      	ldrb	r2, [r3, #0]
    d7ca:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d7ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7d2:	781b      	ldrb	r3, [r3, #0]
    d7d4:	4413      	add	r3, r2
    d7d6:	b2da      	uxtb	r2, r3
    d7d8:	f64a 73ee 	movw	r3, #45038	; 0xafee
    d7dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7e0:	701a      	strb	r2, [r3, #0]
    d7e2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d7e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7ea:	781b      	ldrb	r3, [r3, #0]
    d7ec:	3301      	adds	r3, #1
    d7ee:	b2da      	uxtb	r2, r3
    d7f0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d7f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7f8:	701a      	strb	r2, [r3, #0]
    d7fa:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d7fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d802:	781b      	ldrb	r3, [r3, #0]
    d804:	2bff      	cmp	r3, #255	; 0xff
    d806:	d105      	bne.n	d814 <send_nav_values+0x248>
    d808:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d80c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d810:	2200      	movs	r2, #0
    d812:	701a      	strb	r2, [r3, #0]
    d814:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d818:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d81c:	781b      	ldrb	r3, [r3, #0]
    d81e:	461a      	mov	r2, r3
    d820:	f24b 439c 	movw	r3, #46236	; 0xb49c
    d824:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d828:	7819      	ldrb	r1, [r3, #0]
    d82a:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    d82e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d832:	5499      	strb	r1, [r3, r2]
    d834:	f24b 439c 	movw	r3, #46236	; 0xb49c
    d838:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d83c:	781a      	ldrb	r2, [r3, #0]
    d83e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d842:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d846:	781b      	ldrb	r3, [r3, #0]
    d848:	4413      	add	r3, r2
    d84a:	b2da      	uxtb	r2, r3
    d84c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d854:	701a      	strb	r2, [r3, #0]
    d856:	f64a 73ee 	movw	r3, #45038	; 0xafee
    d85a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d85e:	781a      	ldrb	r2, [r3, #0]
    d860:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d864:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d868:	781b      	ldrb	r3, [r3, #0]
    d86a:	4413      	add	r3, r2
    d86c:	b2da      	uxtb	r2, r3
    d86e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    d872:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d876:	701a      	strb	r2, [r3, #0]
    d878:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d87c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d880:	781b      	ldrb	r3, [r3, #0]
    d882:	3301      	adds	r3, #1
    d884:	b2da      	uxtb	r2, r3
    d886:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d88a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d88e:	701a      	strb	r2, [r3, #0]
    d890:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d898:	781b      	ldrb	r3, [r3, #0]
    d89a:	2bff      	cmp	r3, #255	; 0xff
    d89c:	d105      	bne.n	d8aa <send_nav_values+0x2de>
    d89e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d8a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8a6:	2200      	movs	r2, #0
    d8a8:	701a      	strb	r2, [r3, #0]
    d8aa:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d8ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8b2:	781b      	ldrb	r3, [r3, #0]
    d8b4:	461a      	mov	r2, r3
    d8b6:	f24b 439c 	movw	r3, #46236	; 0xb49c
    d8ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8be:	7859      	ldrb	r1, [r3, #1]
    d8c0:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    d8c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8c8:	5499      	strb	r1, [r3, r2]
    d8ca:	4bd2      	ldr	r3, [pc, #840]	; (dc14 <send_nav_values+0x648>)
    d8cc:	781a      	ldrb	r2, [r3, #0]
    d8ce:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d8d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8d6:	781b      	ldrb	r3, [r3, #0]
    d8d8:	4413      	add	r3, r2
    d8da:	b2da      	uxtb	r2, r3
    d8dc:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d8e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8e4:	701a      	strb	r2, [r3, #0]
    d8e6:	f64a 73ee 	movw	r3, #45038	; 0xafee
    d8ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8ee:	781a      	ldrb	r2, [r3, #0]
    d8f0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d8f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d8f8:	781b      	ldrb	r3, [r3, #0]
    d8fa:	4413      	add	r3, r2
    d8fc:	b2da      	uxtb	r2, r3
    d8fe:	f64a 73ee 	movw	r3, #45038	; 0xafee
    d902:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d906:	701a      	strb	r2, [r3, #0]
    d908:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d90c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d910:	781b      	ldrb	r3, [r3, #0]
    d912:	3301      	adds	r3, #1
    d914:	b2da      	uxtb	r2, r3
    d916:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d91a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d91e:	701a      	strb	r2, [r3, #0]
    d920:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d924:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d928:	781b      	ldrb	r3, [r3, #0]
    d92a:	2bff      	cmp	r3, #255	; 0xff
    d92c:	d105      	bne.n	d93a <send_nav_values+0x36e>
    d92e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d932:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d936:	2200      	movs	r2, #0
    d938:	701a      	strb	r2, [r3, #0]
    d93a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d93e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d942:	781b      	ldrb	r3, [r3, #0]
    d944:	461a      	mov	r2, r3
    d946:	f24b 439c 	movw	r3, #46236	; 0xb49c
    d94a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d94e:	7899      	ldrb	r1, [r3, #2]
    d950:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    d954:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d958:	5499      	strb	r1, [r3, r2]
    d95a:	4baf      	ldr	r3, [pc, #700]	; (dc18 <send_nav_values+0x64c>)
    d95c:	781a      	ldrb	r2, [r3, #0]
    d95e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d962:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d966:	781b      	ldrb	r3, [r3, #0]
    d968:	4413      	add	r3, r2
    d96a:	b2da      	uxtb	r2, r3
    d96c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d970:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d974:	701a      	strb	r2, [r3, #0]
    d976:	f64a 73ee 	movw	r3, #45038	; 0xafee
    d97a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d97e:	781a      	ldrb	r2, [r3, #0]
    d980:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d984:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d988:	781b      	ldrb	r3, [r3, #0]
    d98a:	4413      	add	r3, r2
    d98c:	b2da      	uxtb	r2, r3
    d98e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    d992:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d996:	701a      	strb	r2, [r3, #0]
    d998:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d99c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9a0:	781b      	ldrb	r3, [r3, #0]
    d9a2:	3301      	adds	r3, #1
    d9a4:	b2da      	uxtb	r2, r3
    d9a6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d9aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9ae:	701a      	strb	r2, [r3, #0]
    d9b0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d9b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9b8:	781b      	ldrb	r3, [r3, #0]
    d9ba:	2bff      	cmp	r3, #255	; 0xff
    d9bc:	d105      	bne.n	d9ca <send_nav_values+0x3fe>
    d9be:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d9c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9c6:	2200      	movs	r2, #0
    d9c8:	701a      	strb	r2, [r3, #0]
    d9ca:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    d9ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9d2:	781b      	ldrb	r3, [r3, #0]
    d9d4:	461a      	mov	r2, r3
    d9d6:	f24b 439c 	movw	r3, #46236	; 0xb49c
    d9da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9de:	78d9      	ldrb	r1, [r3, #3]
    d9e0:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    d9e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9e8:	5499      	strb	r1, [r3, r2]
    d9ea:	4b8c      	ldr	r3, [pc, #560]	; (dc1c <send_nav_values+0x650>)
    d9ec:	781a      	ldrb	r2, [r3, #0]
    d9ee:	f64a 73ed 	movw	r3, #45037	; 0xafed
    d9f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d9f6:	781b      	ldrb	r3, [r3, #0]
    d9f8:	4413      	add	r3, r2
    d9fa:	b2da      	uxtb	r2, r3
    d9fc:	f64a 73ed 	movw	r3, #45037	; 0xafed
    da00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da04:	701a      	strb	r2, [r3, #0]
    da06:	f64a 73ee 	movw	r3, #45038	; 0xafee
    da0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da0e:	781a      	ldrb	r2, [r3, #0]
    da10:	f64a 73ed 	movw	r3, #45037	; 0xafed
    da14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da18:	781b      	ldrb	r3, [r3, #0]
    da1a:	4413      	add	r3, r2
    da1c:	b2da      	uxtb	r2, r3
    da1e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    da22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da26:	701a      	strb	r2, [r3, #0]
    da28:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    da2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da30:	781b      	ldrb	r3, [r3, #0]
    da32:	3301      	adds	r3, #1
    da34:	b2da      	uxtb	r2, r3
    da36:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    da3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da3e:	701a      	strb	r2, [r3, #0]
    da40:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    da44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da48:	781b      	ldrb	r3, [r3, #0]
    da4a:	2bff      	cmp	r3, #255	; 0xff
    da4c:	d105      	bne.n	da5a <send_nav_values+0x48e>
    da4e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    da52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da56:	2200      	movs	r2, #0
    da58:	701a      	strb	r2, [r3, #0]
    da5a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    da5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da62:	781b      	ldrb	r3, [r3, #0]
    da64:	461a      	mov	r2, r3
    da66:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    da6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da6e:	7819      	ldrb	r1, [r3, #0]
    da70:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    da74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da78:	5499      	strb	r1, [r3, r2]
    da7a:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    da7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da82:	781a      	ldrb	r2, [r3, #0]
    da84:	f64a 73ed 	movw	r3, #45037	; 0xafed
    da88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da8c:	781b      	ldrb	r3, [r3, #0]
    da8e:	4413      	add	r3, r2
    da90:	b2da      	uxtb	r2, r3
    da92:	f64a 73ed 	movw	r3, #45037	; 0xafed
    da96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    da9a:	701a      	strb	r2, [r3, #0]
    da9c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    daa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daa4:	781a      	ldrb	r2, [r3, #0]
    daa6:	f64a 73ed 	movw	r3, #45037	; 0xafed
    daaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daae:	781b      	ldrb	r3, [r3, #0]
    dab0:	4413      	add	r3, r2
    dab2:	b2da      	uxtb	r2, r3
    dab4:	f64a 73ee 	movw	r3, #45038	; 0xafee
    dab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dabc:	701a      	strb	r2, [r3, #0]
    dabe:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    dac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dac6:	781b      	ldrb	r3, [r3, #0]
    dac8:	3301      	adds	r3, #1
    daca:	b2da      	uxtb	r2, r3
    dacc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    dad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dad4:	701a      	strb	r2, [r3, #0]
    dad6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    dada:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dade:	781b      	ldrb	r3, [r3, #0]
    dae0:	2bff      	cmp	r3, #255	; 0xff
    dae2:	d105      	bne.n	daf0 <send_nav_values+0x524>
    dae4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    dae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daec:	2200      	movs	r2, #0
    daee:	701a      	strb	r2, [r3, #0]
    daf0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    daf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    daf8:	781b      	ldrb	r3, [r3, #0]
    dafa:	461a      	mov	r2, r3
    dafc:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    db00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db04:	7859      	ldrb	r1, [r3, #1]
    db06:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    db0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db0e:	5499      	strb	r1, [r3, r2]
    db10:	4b43      	ldr	r3, [pc, #268]	; (dc20 <send_nav_values+0x654>)
    db12:	781a      	ldrb	r2, [r3, #0]
    db14:	f64a 73ed 	movw	r3, #45037	; 0xafed
    db18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db1c:	781b      	ldrb	r3, [r3, #0]
    db1e:	4413      	add	r3, r2
    db20:	b2da      	uxtb	r2, r3
    db22:	f64a 73ed 	movw	r3, #45037	; 0xafed
    db26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db2a:	701a      	strb	r2, [r3, #0]
    db2c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    db30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db34:	781a      	ldrb	r2, [r3, #0]
    db36:	f64a 73ed 	movw	r3, #45037	; 0xafed
    db3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db3e:	781b      	ldrb	r3, [r3, #0]
    db40:	4413      	add	r3, r2
    db42:	b2da      	uxtb	r2, r3
    db44:	f64a 73ee 	movw	r3, #45038	; 0xafee
    db48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db4c:	701a      	strb	r2, [r3, #0]
    db4e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    db52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db56:	781b      	ldrb	r3, [r3, #0]
    db58:	3301      	adds	r3, #1
    db5a:	b2da      	uxtb	r2, r3
    db5c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    db60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db64:	701a      	strb	r2, [r3, #0]
    db66:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    db6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db6e:	781b      	ldrb	r3, [r3, #0]
    db70:	2bff      	cmp	r3, #255	; 0xff
    db72:	d105      	bne.n	db80 <send_nav_values+0x5b4>
    db74:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    db78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db7c:	2200      	movs	r2, #0
    db7e:	701a      	strb	r2, [r3, #0]
    db80:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    db84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db88:	781b      	ldrb	r3, [r3, #0]
    db8a:	461a      	mov	r2, r3
    db8c:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    db90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db94:	7899      	ldrb	r1, [r3, #2]
    db96:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    db9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    db9e:	5499      	strb	r1, [r3, r2]
    dba0:	4b20      	ldr	r3, [pc, #128]	; (dc24 <send_nav_values+0x658>)
    dba2:	781a      	ldrb	r2, [r3, #0]
    dba4:	f64a 73ed 	movw	r3, #45037	; 0xafed
    dba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbac:	781b      	ldrb	r3, [r3, #0]
    dbae:	4413      	add	r3, r2
    dbb0:	b2da      	uxtb	r2, r3
    dbb2:	f64a 73ed 	movw	r3, #45037	; 0xafed
    dbb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbba:	701a      	strb	r2, [r3, #0]
    dbbc:	f64a 73ee 	movw	r3, #45038	; 0xafee
    dbc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbc4:	781a      	ldrb	r2, [r3, #0]
    dbc6:	f64a 73ed 	movw	r3, #45037	; 0xafed
    dbca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbce:	781b      	ldrb	r3, [r3, #0]
    dbd0:	4413      	add	r3, r2
    dbd2:	b2da      	uxtb	r2, r3
    dbd4:	f64a 73ee 	movw	r3, #45038	; 0xafee
    dbd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbdc:	701a      	strb	r2, [r3, #0]
    dbde:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    dbe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbe6:	781b      	ldrb	r3, [r3, #0]
    dbe8:	3301      	adds	r3, #1
    dbea:	b2da      	uxtb	r2, r3
    dbec:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    dbf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbf4:	701a      	strb	r2, [r3, #0]
    dbf6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    dbfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dbfe:	781b      	ldrb	r3, [r3, #0]
    dc00:	2bff      	cmp	r3, #255	; 0xff
    dc02:	d111      	bne.n	dc28 <send_nav_values+0x65c>
    dc04:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    dc08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc0c:	2200      	movs	r2, #0
    dc0e:	701a      	strb	r2, [r3, #0]
    dc10:	e00a      	b.n	dc28 <send_nav_values+0x65c>
    dc12:	bf00      	nop
    dc14:	2000b49d 	.word	0x2000b49d
    dc18:	2000b49e 	.word	0x2000b49e
    dc1c:	2000b49f 	.word	0x2000b49f
    dc20:	2000b4a1 	.word	0x2000b4a1
    dc24:	2000b4a2 	.word	0x2000b4a2
    dc28:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    dc2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc30:	781b      	ldrb	r3, [r3, #0]
    dc32:	461a      	mov	r2, r3
    dc34:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
    dc38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc3c:	78d9      	ldrb	r1, [r3, #3]
    dc3e:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    dc42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc46:	5499      	strb	r1, [r3, r2]
    dc48:	4bd3      	ldr	r3, [pc, #844]	; (df98 <send_nav_values+0x9cc>)
    dc4a:	781a      	ldrb	r2, [r3, #0]
    dc4c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    dc50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc54:	781b      	ldrb	r3, [r3, #0]
    dc56:	4413      	add	r3, r2
    dc58:	b2da      	uxtb	r2, r3
    dc5a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    dc5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc62:	701a      	strb	r2, [r3, #0]
    dc64:	f64a 73ee 	movw	r3, #45038	; 0xafee
    dc68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc6c:	781a      	ldrb	r2, [r3, #0]
    dc6e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    dc72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc76:	781b      	ldrb	r3, [r3, #0]
    dc78:	4413      	add	r3, r2
    dc7a:	b2da      	uxtb	r2, r3
    dc7c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    dc80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc84:	701a      	strb	r2, [r3, #0]
    dc86:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    dc8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc8e:	781b      	ldrb	r3, [r3, #0]
    dc90:	3301      	adds	r3, #1
    dc92:	b2da      	uxtb	r2, r3
    dc94:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    dc98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dc9c:	701a      	strb	r2, [r3, #0]
    dc9e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    dca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dca6:	781b      	ldrb	r3, [r3, #0]
    dca8:	2bff      	cmp	r3, #255	; 0xff
    dcaa:	d105      	bne.n	dcb8 <send_nav_values+0x6ec>
    dcac:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    dcb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcb4:	2200      	movs	r2, #0
    dcb6:	701a      	strb	r2, [r3, #0]
    dcb8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    dcbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcc0:	781b      	ldrb	r3, [r3, #0]
    dcc2:	461a      	mov	r2, r3
    dcc4:	f24b 232c 	movw	r3, #45612	; 0xb22c
    dcc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dccc:	7819      	ldrb	r1, [r3, #0]
    dcce:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    dcd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcd6:	5499      	strb	r1, [r3, r2]
    dcd8:	f24b 232c 	movw	r3, #45612	; 0xb22c
    dcdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dce0:	781a      	ldrb	r2, [r3, #0]
    dce2:	f64a 73ed 	movw	r3, #45037	; 0xafed
    dce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcea:	781b      	ldrb	r3, [r3, #0]
    dcec:	4413      	add	r3, r2
    dcee:	b2da      	uxtb	r2, r3
    dcf0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    dcf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dcf8:	701a      	strb	r2, [r3, #0]
    dcfa:	f64a 73ee 	movw	r3, #45038	; 0xafee
    dcfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd02:	781a      	ldrb	r2, [r3, #0]
    dd04:	f64a 73ed 	movw	r3, #45037	; 0xafed
    dd08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd0c:	781b      	ldrb	r3, [r3, #0]
    dd0e:	4413      	add	r3, r2
    dd10:	b2da      	uxtb	r2, r3
    dd12:	f64a 73ee 	movw	r3, #45038	; 0xafee
    dd16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd1a:	701a      	strb	r2, [r3, #0]
    dd1c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    dd20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd24:	781b      	ldrb	r3, [r3, #0]
    dd26:	3301      	adds	r3, #1
    dd28:	b2da      	uxtb	r2, r3
    dd2a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    dd2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd32:	701a      	strb	r2, [r3, #0]
    dd34:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    dd38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd3c:	781b      	ldrb	r3, [r3, #0]
    dd3e:	2bff      	cmp	r3, #255	; 0xff
    dd40:	d105      	bne.n	dd4e <send_nav_values+0x782>
    dd42:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    dd46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd4a:	2200      	movs	r2, #0
    dd4c:	701a      	strb	r2, [r3, #0]
    dd4e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    dd52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd56:	781b      	ldrb	r3, [r3, #0]
    dd58:	461a      	mov	r2, r3
    dd5a:	f24b 232c 	movw	r3, #45612	; 0xb22c
    dd5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd62:	7859      	ldrb	r1, [r3, #1]
    dd64:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    dd68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd6c:	5499      	strb	r1, [r3, r2]
    dd6e:	4b8b      	ldr	r3, [pc, #556]	; (df9c <send_nav_values+0x9d0>)
    dd70:	781a      	ldrb	r2, [r3, #0]
    dd72:	f64a 73ed 	movw	r3, #45037	; 0xafed
    dd76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd7a:	781b      	ldrb	r3, [r3, #0]
    dd7c:	4413      	add	r3, r2
    dd7e:	b2da      	uxtb	r2, r3
    dd80:	f64a 73ed 	movw	r3, #45037	; 0xafed
    dd84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd88:	701a      	strb	r2, [r3, #0]
    dd8a:	f64a 73ee 	movw	r3, #45038	; 0xafee
    dd8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd92:	781a      	ldrb	r2, [r3, #0]
    dd94:	f64a 73ed 	movw	r3, #45037	; 0xafed
    dd98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dd9c:	781b      	ldrb	r3, [r3, #0]
    dd9e:	4413      	add	r3, r2
    dda0:	b2da      	uxtb	r2, r3
    dda2:	f64a 73ee 	movw	r3, #45038	; 0xafee
    dda6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddaa:	701a      	strb	r2, [r3, #0]
    ddac:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ddb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddb4:	781b      	ldrb	r3, [r3, #0]
    ddb6:	3301      	adds	r3, #1
    ddb8:	b2da      	uxtb	r2, r3
    ddba:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ddbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddc2:	701a      	strb	r2, [r3, #0]
    ddc4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ddc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddcc:	781b      	ldrb	r3, [r3, #0]
    ddce:	2bff      	cmp	r3, #255	; 0xff
    ddd0:	d105      	bne.n	ddde <send_nav_values+0x812>
    ddd2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ddd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddda:	2200      	movs	r2, #0
    dddc:	701a      	strb	r2, [r3, #0]
    ddde:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    dde2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dde6:	781b      	ldrb	r3, [r3, #0]
    dde8:	461a      	mov	r2, r3
    ddea:	f24b 232c 	movw	r3, #45612	; 0xb22c
    ddee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddf2:	7899      	ldrb	r1, [r3, #2]
    ddf4:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    ddf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ddfc:	5499      	strb	r1, [r3, r2]
    ddfe:	4b68      	ldr	r3, [pc, #416]	; (dfa0 <send_nav_values+0x9d4>)
    de00:	781a      	ldrb	r2, [r3, #0]
    de02:	f64a 73ed 	movw	r3, #45037	; 0xafed
    de06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de0a:	781b      	ldrb	r3, [r3, #0]
    de0c:	4413      	add	r3, r2
    de0e:	b2da      	uxtb	r2, r3
    de10:	f64a 73ed 	movw	r3, #45037	; 0xafed
    de14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de18:	701a      	strb	r2, [r3, #0]
    de1a:	f64a 73ee 	movw	r3, #45038	; 0xafee
    de1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de22:	781a      	ldrb	r2, [r3, #0]
    de24:	f64a 73ed 	movw	r3, #45037	; 0xafed
    de28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de2c:	781b      	ldrb	r3, [r3, #0]
    de2e:	4413      	add	r3, r2
    de30:	b2da      	uxtb	r2, r3
    de32:	f64a 73ee 	movw	r3, #45038	; 0xafee
    de36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de3a:	701a      	strb	r2, [r3, #0]
    de3c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    de40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de44:	781b      	ldrb	r3, [r3, #0]
    de46:	3301      	adds	r3, #1
    de48:	b2da      	uxtb	r2, r3
    de4a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    de4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de52:	701a      	strb	r2, [r3, #0]
    de54:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    de58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de5c:	781b      	ldrb	r3, [r3, #0]
    de5e:	2bff      	cmp	r3, #255	; 0xff
    de60:	d105      	bne.n	de6e <send_nav_values+0x8a2>
    de62:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    de66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de6a:	2200      	movs	r2, #0
    de6c:	701a      	strb	r2, [r3, #0]
    de6e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    de72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de76:	781b      	ldrb	r3, [r3, #0]
    de78:	461a      	mov	r2, r3
    de7a:	f24b 232c 	movw	r3, #45612	; 0xb22c
    de7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de82:	78d9      	ldrb	r1, [r3, #3]
    de84:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    de88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de8c:	5499      	strb	r1, [r3, r2]
    de8e:	4b45      	ldr	r3, [pc, #276]	; (dfa4 <send_nav_values+0x9d8>)
    de90:	781a      	ldrb	r2, [r3, #0]
    de92:	f64a 73ed 	movw	r3, #45037	; 0xafed
    de96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    de9a:	781b      	ldrb	r3, [r3, #0]
    de9c:	4413      	add	r3, r2
    de9e:	b2da      	uxtb	r2, r3
    dea0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    dea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dea8:	701a      	strb	r2, [r3, #0]
    deaa:	f64a 73ee 	movw	r3, #45038	; 0xafee
    deae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    deb2:	781a      	ldrb	r2, [r3, #0]
    deb4:	f64a 73ed 	movw	r3, #45037	; 0xafed
    deb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    debc:	781b      	ldrb	r3, [r3, #0]
    debe:	4413      	add	r3, r2
    dec0:	b2da      	uxtb	r2, r3
    dec2:	f64a 73ee 	movw	r3, #45038	; 0xafee
    dec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    deca:	701a      	strb	r2, [r3, #0]
    decc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ded0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ded4:	781b      	ldrb	r3, [r3, #0]
    ded6:	3301      	adds	r3, #1
    ded8:	b2da      	uxtb	r2, r3
    deda:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    dede:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dee2:	701a      	strb	r2, [r3, #0]
    dee4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    dee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    deec:	781b      	ldrb	r3, [r3, #0]
    deee:	2bff      	cmp	r3, #255	; 0xff
    def0:	d105      	bne.n	defe <send_nav_values+0x932>
    def2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    def6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    defa:	2200      	movs	r2, #0
    defc:	701a      	strb	r2, [r3, #0]
    defe:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    df02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df06:	781b      	ldrb	r3, [r3, #0]
    df08:	461a      	mov	r2, r3
    df0a:	f24b 2374 	movw	r3, #45684	; 0xb274
    df0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df12:	7819      	ldrb	r1, [r3, #0]
    df14:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    df18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df1c:	5499      	strb	r1, [r3, r2]
    df1e:	f24b 2374 	movw	r3, #45684	; 0xb274
    df22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df26:	781a      	ldrb	r2, [r3, #0]
    df28:	f64a 73ed 	movw	r3, #45037	; 0xafed
    df2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df30:	781b      	ldrb	r3, [r3, #0]
    df32:	4413      	add	r3, r2
    df34:	b2da      	uxtb	r2, r3
    df36:	f64a 73ed 	movw	r3, #45037	; 0xafed
    df3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df3e:	701a      	strb	r2, [r3, #0]
    df40:	f64a 73ee 	movw	r3, #45038	; 0xafee
    df44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df48:	781a      	ldrb	r2, [r3, #0]
    df4a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    df4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df52:	781b      	ldrb	r3, [r3, #0]
    df54:	4413      	add	r3, r2
    df56:	b2da      	uxtb	r2, r3
    df58:	f64a 73ee 	movw	r3, #45038	; 0xafee
    df5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df60:	701a      	strb	r2, [r3, #0]
    df62:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    df66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df6a:	781b      	ldrb	r3, [r3, #0]
    df6c:	3301      	adds	r3, #1
    df6e:	b2da      	uxtb	r2, r3
    df70:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    df74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df78:	701a      	strb	r2, [r3, #0]
    df7a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    df7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df82:	781b      	ldrb	r3, [r3, #0]
    df84:	2bff      	cmp	r3, #255	; 0xff
    df86:	d10f      	bne.n	dfa8 <send_nav_values+0x9dc>
    df88:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    df8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    df90:	2200      	movs	r2, #0
    df92:	701a      	strb	r2, [r3, #0]
    df94:	e008      	b.n	dfa8 <send_nav_values+0x9dc>
    df96:	bf00      	nop
    df98:	2000b4a3 	.word	0x2000b4a3
    df9c:	2000b22d 	.word	0x2000b22d
    dfa0:	2000b22e 	.word	0x2000b22e
    dfa4:	2000b22f 	.word	0x2000b22f
    dfa8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    dfac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfb0:	781b      	ldrb	r3, [r3, #0]
    dfb2:	461a      	mov	r2, r3
    dfb4:	f24b 2374 	movw	r3, #45684	; 0xb274
    dfb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfbc:	7859      	ldrb	r1, [r3, #1]
    dfbe:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    dfc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfc6:	5499      	strb	r1, [r3, r2]
    dfc8:	4bd1      	ldr	r3, [pc, #836]	; (e310 <send_nav_values+0xd44>)
    dfca:	781a      	ldrb	r2, [r3, #0]
    dfcc:	f64a 73ed 	movw	r3, #45037	; 0xafed
    dfd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfd4:	781b      	ldrb	r3, [r3, #0]
    dfd6:	4413      	add	r3, r2
    dfd8:	b2da      	uxtb	r2, r3
    dfda:	f64a 73ed 	movw	r3, #45037	; 0xafed
    dfde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfe2:	701a      	strb	r2, [r3, #0]
    dfe4:	f64a 73ee 	movw	r3, #45038	; 0xafee
    dfe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dfec:	781a      	ldrb	r2, [r3, #0]
    dfee:	f64a 73ed 	movw	r3, #45037	; 0xafed
    dff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    dff6:	781b      	ldrb	r3, [r3, #0]
    dff8:	4413      	add	r3, r2
    dffa:	b2da      	uxtb	r2, r3
    dffc:	f64a 73ee 	movw	r3, #45038	; 0xafee
    e000:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e004:	701a      	strb	r2, [r3, #0]
    e006:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e00a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e00e:	781b      	ldrb	r3, [r3, #0]
    e010:	3301      	adds	r3, #1
    e012:	b2da      	uxtb	r2, r3
    e014:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e018:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e01c:	701a      	strb	r2, [r3, #0]
    e01e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e026:	781b      	ldrb	r3, [r3, #0]
    e028:	2bff      	cmp	r3, #255	; 0xff
    e02a:	d105      	bne.n	e038 <send_nav_values+0xa6c>
    e02c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e030:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e034:	2200      	movs	r2, #0
    e036:	701a      	strb	r2, [r3, #0]
    e038:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e03c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e040:	781b      	ldrb	r3, [r3, #0]
    e042:	461a      	mov	r2, r3
    e044:	f24b 2374 	movw	r3, #45684	; 0xb274
    e048:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e04c:	7899      	ldrb	r1, [r3, #2]
    e04e:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    e052:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e056:	5499      	strb	r1, [r3, r2]
    e058:	4bae      	ldr	r3, [pc, #696]	; (e314 <send_nav_values+0xd48>)
    e05a:	781a      	ldrb	r2, [r3, #0]
    e05c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    e060:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e064:	781b      	ldrb	r3, [r3, #0]
    e066:	4413      	add	r3, r2
    e068:	b2da      	uxtb	r2, r3
    e06a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    e06e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e072:	701a      	strb	r2, [r3, #0]
    e074:	f64a 73ee 	movw	r3, #45038	; 0xafee
    e078:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e07c:	781a      	ldrb	r2, [r3, #0]
    e07e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    e082:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e086:	781b      	ldrb	r3, [r3, #0]
    e088:	4413      	add	r3, r2
    e08a:	b2da      	uxtb	r2, r3
    e08c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    e090:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e094:	701a      	strb	r2, [r3, #0]
    e096:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e09a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e09e:	781b      	ldrb	r3, [r3, #0]
    e0a0:	3301      	adds	r3, #1
    e0a2:	b2da      	uxtb	r2, r3
    e0a4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e0a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0ac:	701a      	strb	r2, [r3, #0]
    e0ae:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e0b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0b6:	781b      	ldrb	r3, [r3, #0]
    e0b8:	2bff      	cmp	r3, #255	; 0xff
    e0ba:	d105      	bne.n	e0c8 <send_nav_values+0xafc>
    e0bc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e0c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0c4:	2200      	movs	r2, #0
    e0c6:	701a      	strb	r2, [r3, #0]
    e0c8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e0cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0d0:	781b      	ldrb	r3, [r3, #0]
    e0d2:	461a      	mov	r2, r3
    e0d4:	f24b 2374 	movw	r3, #45684	; 0xb274
    e0d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0dc:	78d9      	ldrb	r1, [r3, #3]
    e0de:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    e0e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0e6:	5499      	strb	r1, [r3, r2]
    e0e8:	4b8b      	ldr	r3, [pc, #556]	; (e318 <send_nav_values+0xd4c>)
    e0ea:	781a      	ldrb	r2, [r3, #0]
    e0ec:	f64a 73ed 	movw	r3, #45037	; 0xafed
    e0f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e0f4:	781b      	ldrb	r3, [r3, #0]
    e0f6:	4413      	add	r3, r2
    e0f8:	b2da      	uxtb	r2, r3
    e0fa:	f64a 73ed 	movw	r3, #45037	; 0xafed
    e0fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e102:	701a      	strb	r2, [r3, #0]
    e104:	f64a 73ee 	movw	r3, #45038	; 0xafee
    e108:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e10c:	781a      	ldrb	r2, [r3, #0]
    e10e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    e112:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e116:	781b      	ldrb	r3, [r3, #0]
    e118:	4413      	add	r3, r2
    e11a:	b2da      	uxtb	r2, r3
    e11c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    e120:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e124:	701a      	strb	r2, [r3, #0]
    e126:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e12a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e12e:	781b      	ldrb	r3, [r3, #0]
    e130:	3301      	adds	r3, #1
    e132:	b2da      	uxtb	r2, r3
    e134:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e138:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e13c:	701a      	strb	r2, [r3, #0]
    e13e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e142:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e146:	781b      	ldrb	r3, [r3, #0]
    e148:	2bff      	cmp	r3, #255	; 0xff
    e14a:	d105      	bne.n	e158 <send_nav_values+0xb8c>
    e14c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e150:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e154:	2200      	movs	r2, #0
    e156:	701a      	strb	r2, [r3, #0]
    e158:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e15c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e160:	781b      	ldrb	r3, [r3, #0]
    e162:	461a      	mov	r2, r3
    e164:	f240 4308 	movw	r3, #1032	; 0x408
    e168:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e16c:	7819      	ldrb	r1, [r3, #0]
    e16e:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    e172:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e176:	5499      	strb	r1, [r3, r2]
    e178:	f240 4308 	movw	r3, #1032	; 0x408
    e17c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e180:	781a      	ldrb	r2, [r3, #0]
    e182:	f64a 73ed 	movw	r3, #45037	; 0xafed
    e186:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e18a:	781b      	ldrb	r3, [r3, #0]
    e18c:	4413      	add	r3, r2
    e18e:	b2da      	uxtb	r2, r3
    e190:	f64a 73ed 	movw	r3, #45037	; 0xafed
    e194:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e198:	701a      	strb	r2, [r3, #0]
    e19a:	f64a 73ee 	movw	r3, #45038	; 0xafee
    e19e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1a2:	781a      	ldrb	r2, [r3, #0]
    e1a4:	f64a 73ed 	movw	r3, #45037	; 0xafed
    e1a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1ac:	781b      	ldrb	r3, [r3, #0]
    e1ae:	4413      	add	r3, r2
    e1b0:	b2da      	uxtb	r2, r3
    e1b2:	f64a 73ee 	movw	r3, #45038	; 0xafee
    e1b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1ba:	701a      	strb	r2, [r3, #0]
    e1bc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e1c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1c4:	781b      	ldrb	r3, [r3, #0]
    e1c6:	3301      	adds	r3, #1
    e1c8:	b2da      	uxtb	r2, r3
    e1ca:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e1ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1d2:	701a      	strb	r2, [r3, #0]
    e1d4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e1d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1dc:	781b      	ldrb	r3, [r3, #0]
    e1de:	2bff      	cmp	r3, #255	; 0xff
    e1e0:	d105      	bne.n	e1ee <send_nav_values+0xc22>
    e1e2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e1e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1ea:	2200      	movs	r2, #0
    e1ec:	701a      	strb	r2, [r3, #0]
    e1ee:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e1f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e1f6:	781b      	ldrb	r3, [r3, #0]
    e1f8:	461a      	mov	r2, r3
    e1fa:	f240 4308 	movw	r3, #1032	; 0x408
    e1fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e202:	7859      	ldrb	r1, [r3, #1]
    e204:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    e208:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e20c:	5499      	strb	r1, [r3, r2]
    e20e:	4b43      	ldr	r3, [pc, #268]	; (e31c <send_nav_values+0xd50>)
    e210:	781a      	ldrb	r2, [r3, #0]
    e212:	f64a 73ed 	movw	r3, #45037	; 0xafed
    e216:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e21a:	781b      	ldrb	r3, [r3, #0]
    e21c:	4413      	add	r3, r2
    e21e:	b2da      	uxtb	r2, r3
    e220:	f64a 73ed 	movw	r3, #45037	; 0xafed
    e224:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e228:	701a      	strb	r2, [r3, #0]
    e22a:	f64a 73ee 	movw	r3, #45038	; 0xafee
    e22e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e232:	781a      	ldrb	r2, [r3, #0]
    e234:	f64a 73ed 	movw	r3, #45037	; 0xafed
    e238:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e23c:	781b      	ldrb	r3, [r3, #0]
    e23e:	4413      	add	r3, r2
    e240:	b2da      	uxtb	r2, r3
    e242:	f64a 73ee 	movw	r3, #45038	; 0xafee
    e246:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e24a:	701a      	strb	r2, [r3, #0]
    e24c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e250:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e254:	781b      	ldrb	r3, [r3, #0]
    e256:	3301      	adds	r3, #1
    e258:	b2da      	uxtb	r2, r3
    e25a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e25e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e262:	701a      	strb	r2, [r3, #0]
    e264:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e268:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e26c:	781b      	ldrb	r3, [r3, #0]
    e26e:	2bff      	cmp	r3, #255	; 0xff
    e270:	d105      	bne.n	e27e <send_nav_values+0xcb2>
    e272:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e276:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e27a:	2200      	movs	r2, #0
    e27c:	701a      	strb	r2, [r3, #0]
    e27e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e282:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e286:	781b      	ldrb	r3, [r3, #0]
    e288:	461a      	mov	r2, r3
    e28a:	f240 4308 	movw	r3, #1032	; 0x408
    e28e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e292:	7899      	ldrb	r1, [r3, #2]
    e294:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    e298:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e29c:	5499      	strb	r1, [r3, r2]
    e29e:	4b20      	ldr	r3, [pc, #128]	; (e320 <send_nav_values+0xd54>)
    e2a0:	781a      	ldrb	r2, [r3, #0]
    e2a2:	f64a 73ed 	movw	r3, #45037	; 0xafed
    e2a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2aa:	781b      	ldrb	r3, [r3, #0]
    e2ac:	4413      	add	r3, r2
    e2ae:	b2da      	uxtb	r2, r3
    e2b0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    e2b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2b8:	701a      	strb	r2, [r3, #0]
    e2ba:	f64a 73ee 	movw	r3, #45038	; 0xafee
    e2be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2c2:	781a      	ldrb	r2, [r3, #0]
    e2c4:	f64a 73ed 	movw	r3, #45037	; 0xafed
    e2c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2cc:	781b      	ldrb	r3, [r3, #0]
    e2ce:	4413      	add	r3, r2
    e2d0:	b2da      	uxtb	r2, r3
    e2d2:	f64a 73ee 	movw	r3, #45038	; 0xafee
    e2d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2da:	701a      	strb	r2, [r3, #0]
    e2dc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e2e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2e4:	781b      	ldrb	r3, [r3, #0]
    e2e6:	3301      	adds	r3, #1
    e2e8:	b2da      	uxtb	r2, r3
    e2ea:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e2ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2f2:	701a      	strb	r2, [r3, #0]
    e2f4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e2f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e2fc:	781b      	ldrb	r3, [r3, #0]
    e2fe:	2bff      	cmp	r3, #255	; 0xff
    e300:	d110      	bne.n	e324 <send_nav_values+0xd58>
    e302:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e306:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e30a:	2200      	movs	r2, #0
    e30c:	701a      	strb	r2, [r3, #0]
    e30e:	e009      	b.n	e324 <send_nav_values+0xd58>
    e310:	2000b275 	.word	0x2000b275
    e314:	2000b276 	.word	0x2000b276
    e318:	2000b277 	.word	0x2000b277
    e31c:	20000409 	.word	0x20000409
    e320:	2000040a 	.word	0x2000040a
    e324:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e328:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e32c:	781b      	ldrb	r3, [r3, #0]
    e32e:	461a      	mov	r2, r3
    e330:	f240 4308 	movw	r3, #1032	; 0x408
    e334:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e338:	78d9      	ldrb	r1, [r3, #3]
    e33a:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    e33e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e342:	5499      	strb	r1, [r3, r2]
    e344:	4bc2      	ldr	r3, [pc, #776]	; (e650 <send_nav_values+0x1084>)
    e346:	781a      	ldrb	r2, [r3, #0]
    e348:	f64a 73ed 	movw	r3, #45037	; 0xafed
    e34c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e350:	781b      	ldrb	r3, [r3, #0]
    e352:	4413      	add	r3, r2
    e354:	b2da      	uxtb	r2, r3
    e356:	f64a 73ed 	movw	r3, #45037	; 0xafed
    e35a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e35e:	701a      	strb	r2, [r3, #0]
    e360:	f64a 73ee 	movw	r3, #45038	; 0xafee
    e364:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e368:	781a      	ldrb	r2, [r3, #0]
    e36a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    e36e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e372:	781b      	ldrb	r3, [r3, #0]
    e374:	4413      	add	r3, r2
    e376:	b2da      	uxtb	r2, r3
    e378:	f64a 73ee 	movw	r3, #45038	; 0xafee
    e37c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e380:	701a      	strb	r2, [r3, #0]
    e382:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e386:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e38a:	781b      	ldrb	r3, [r3, #0]
    e38c:	3301      	adds	r3, #1
    e38e:	b2da      	uxtb	r2, r3
    e390:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e394:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e398:	701a      	strb	r2, [r3, #0]
    e39a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e39e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3a2:	781b      	ldrb	r3, [r3, #0]
    e3a4:	2bff      	cmp	r3, #255	; 0xff
    e3a6:	d105      	bne.n	e3b4 <send_nav_values+0xde8>
    e3a8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e3ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3b0:	2200      	movs	r2, #0
    e3b2:	701a      	strb	r2, [r3, #0]
    e3b4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e3b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3bc:	781b      	ldrb	r3, [r3, #0]
    e3be:	461a      	mov	r2, r3
    e3c0:	f24b 2378 	movw	r3, #45688	; 0xb278
    e3c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3c8:	7819      	ldrb	r1, [r3, #0]
    e3ca:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    e3ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3d2:	5499      	strb	r1, [r3, r2]
    e3d4:	f24b 2378 	movw	r3, #45688	; 0xb278
    e3d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3dc:	781a      	ldrb	r2, [r3, #0]
    e3de:	f64a 73ed 	movw	r3, #45037	; 0xafed
    e3e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3e6:	781b      	ldrb	r3, [r3, #0]
    e3e8:	4413      	add	r3, r2
    e3ea:	b2da      	uxtb	r2, r3
    e3ec:	f64a 73ed 	movw	r3, #45037	; 0xafed
    e3f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3f4:	701a      	strb	r2, [r3, #0]
    e3f6:	f64a 73ee 	movw	r3, #45038	; 0xafee
    e3fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3fe:	781a      	ldrb	r2, [r3, #0]
    e400:	f64a 73ed 	movw	r3, #45037	; 0xafed
    e404:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e408:	781b      	ldrb	r3, [r3, #0]
    e40a:	4413      	add	r3, r2
    e40c:	b2da      	uxtb	r2, r3
    e40e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    e412:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e416:	701a      	strb	r2, [r3, #0]
    e418:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e41c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e420:	781b      	ldrb	r3, [r3, #0]
    e422:	3301      	adds	r3, #1
    e424:	b2da      	uxtb	r2, r3
    e426:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e42a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e42e:	701a      	strb	r2, [r3, #0]
    e430:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e434:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e438:	781b      	ldrb	r3, [r3, #0]
    e43a:	2bff      	cmp	r3, #255	; 0xff
    e43c:	d105      	bne.n	e44a <send_nav_values+0xe7e>
    e43e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e442:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e446:	2200      	movs	r2, #0
    e448:	701a      	strb	r2, [r3, #0]
    e44a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e44e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e452:	781b      	ldrb	r3, [r3, #0]
    e454:	461a      	mov	r2, r3
    e456:	f24b 2378 	movw	r3, #45688	; 0xb278
    e45a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e45e:	7859      	ldrb	r1, [r3, #1]
    e460:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    e464:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e468:	5499      	strb	r1, [r3, r2]
    e46a:	4b7a      	ldr	r3, [pc, #488]	; (e654 <send_nav_values+0x1088>)
    e46c:	781a      	ldrb	r2, [r3, #0]
    e46e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    e472:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e476:	781b      	ldrb	r3, [r3, #0]
    e478:	4413      	add	r3, r2
    e47a:	b2da      	uxtb	r2, r3
    e47c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    e480:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e484:	701a      	strb	r2, [r3, #0]
    e486:	f64a 73ee 	movw	r3, #45038	; 0xafee
    e48a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e48e:	781a      	ldrb	r2, [r3, #0]
    e490:	f64a 73ed 	movw	r3, #45037	; 0xafed
    e494:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e498:	781b      	ldrb	r3, [r3, #0]
    e49a:	4413      	add	r3, r2
    e49c:	b2da      	uxtb	r2, r3
    e49e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    e4a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4a6:	701a      	strb	r2, [r3, #0]
    e4a8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e4ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4b0:	781b      	ldrb	r3, [r3, #0]
    e4b2:	3301      	adds	r3, #1
    e4b4:	b2da      	uxtb	r2, r3
    e4b6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e4ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4be:	701a      	strb	r2, [r3, #0]
    e4c0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e4c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4c8:	781b      	ldrb	r3, [r3, #0]
    e4ca:	2bff      	cmp	r3, #255	; 0xff
    e4cc:	d105      	bne.n	e4da <send_nav_values+0xf0e>
    e4ce:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e4d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4d6:	2200      	movs	r2, #0
    e4d8:	701a      	strb	r2, [r3, #0]
    e4da:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e4de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4e2:	781b      	ldrb	r3, [r3, #0]
    e4e4:	461a      	mov	r2, r3
    e4e6:	f24b 2378 	movw	r3, #45688	; 0xb278
    e4ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4ee:	7899      	ldrb	r1, [r3, #2]
    e4f0:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    e4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e4f8:	5499      	strb	r1, [r3, r2]
    e4fa:	4b57      	ldr	r3, [pc, #348]	; (e658 <send_nav_values+0x108c>)
    e4fc:	781a      	ldrb	r2, [r3, #0]
    e4fe:	f64a 73ed 	movw	r3, #45037	; 0xafed
    e502:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e506:	781b      	ldrb	r3, [r3, #0]
    e508:	4413      	add	r3, r2
    e50a:	b2da      	uxtb	r2, r3
    e50c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    e510:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e514:	701a      	strb	r2, [r3, #0]
    e516:	f64a 73ee 	movw	r3, #45038	; 0xafee
    e51a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e51e:	781a      	ldrb	r2, [r3, #0]
    e520:	f64a 73ed 	movw	r3, #45037	; 0xafed
    e524:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e528:	781b      	ldrb	r3, [r3, #0]
    e52a:	4413      	add	r3, r2
    e52c:	b2da      	uxtb	r2, r3
    e52e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    e532:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e536:	701a      	strb	r2, [r3, #0]
    e538:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e53c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e540:	781b      	ldrb	r3, [r3, #0]
    e542:	3301      	adds	r3, #1
    e544:	b2da      	uxtb	r2, r3
    e546:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e54a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e54e:	701a      	strb	r2, [r3, #0]
    e550:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e554:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e558:	781b      	ldrb	r3, [r3, #0]
    e55a:	2bff      	cmp	r3, #255	; 0xff
    e55c:	d105      	bne.n	e56a <send_nav_values+0xf9e>
    e55e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e562:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e566:	2200      	movs	r2, #0
    e568:	701a      	strb	r2, [r3, #0]
    e56a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e56e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e572:	781b      	ldrb	r3, [r3, #0]
    e574:	461a      	mov	r2, r3
    e576:	f24b 2378 	movw	r3, #45688	; 0xb278
    e57a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e57e:	78d9      	ldrb	r1, [r3, #3]
    e580:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    e584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e588:	5499      	strb	r1, [r3, r2]
    e58a:	4b34      	ldr	r3, [pc, #208]	; (e65c <send_nav_values+0x1090>)
    e58c:	781a      	ldrb	r2, [r3, #0]
    e58e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    e592:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e596:	781b      	ldrb	r3, [r3, #0]
    e598:	4413      	add	r3, r2
    e59a:	b2da      	uxtb	r2, r3
    e59c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    e5a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5a4:	701a      	strb	r2, [r3, #0]
    e5a6:	f64a 73ee 	movw	r3, #45038	; 0xafee
    e5aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5ae:	781a      	ldrb	r2, [r3, #0]
    e5b0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    e5b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5b8:	781b      	ldrb	r3, [r3, #0]
    e5ba:	4413      	add	r3, r2
    e5bc:	b2da      	uxtb	r2, r3
    e5be:	f64a 73ee 	movw	r3, #45038	; 0xafee
    e5c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5c6:	701a      	strb	r2, [r3, #0]
    e5c8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e5cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5d0:	781b      	ldrb	r3, [r3, #0]
    e5d2:	3301      	adds	r3, #1
    e5d4:	b2da      	uxtb	r2, r3
    e5d6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e5da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5de:	701a      	strb	r2, [r3, #0]
    e5e0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e5e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5e8:	781b      	ldrb	r3, [r3, #0]
    e5ea:	2bff      	cmp	r3, #255	; 0xff
    e5ec:	d105      	bne.n	e5fa <send_nav_values+0x102e>
    e5ee:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e5f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5f6:	2200      	movs	r2, #0
    e5f8:	701a      	strb	r2, [r3, #0]
    e5fa:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e5fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e602:	781b      	ldrb	r3, [r3, #0]
    e604:	461a      	mov	r2, r3
    e606:	f64a 73ed 	movw	r3, #45037	; 0xafed
    e60a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e60e:	7819      	ldrb	r1, [r3, #0]
    e610:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    e614:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e618:	5499      	strb	r1, [r3, r2]
    e61a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e61e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e622:	781b      	ldrb	r3, [r3, #0]
    e624:	3301      	adds	r3, #1
    e626:	b2da      	uxtb	r2, r3
    e628:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e62c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e630:	701a      	strb	r2, [r3, #0]
    e632:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e636:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e63a:	781b      	ldrb	r3, [r3, #0]
    e63c:	2bff      	cmp	r3, #255	; 0xff
    e63e:	d10f      	bne.n	e660 <send_nav_values+0x1094>
    e640:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e644:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e648:	2200      	movs	r2, #0
    e64a:	701a      	strb	r2, [r3, #0]
    e64c:	e008      	b.n	e660 <send_nav_values+0x1094>
    e64e:	bf00      	nop
    e650:	2000040b 	.word	0x2000040b
    e654:	2000b279 	.word	0x2000b279
    e658:	2000b27a 	.word	0x2000b27a
    e65c:	2000b27b 	.word	0x2000b27b
    e660:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e664:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e668:	781b      	ldrb	r3, [r3, #0]
    e66a:	461a      	mov	r2, r3
    e66c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    e670:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e674:	7819      	ldrb	r1, [r3, #0]
    e676:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    e67a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e67e:	5499      	strb	r1, [r3, r2]
    e680:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e684:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e688:	781b      	ldrb	r3, [r3, #0]
    e68a:	3301      	adds	r3, #1
    e68c:	b2da      	uxtb	r2, r3
    e68e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e696:	701a      	strb	r2, [r3, #0]
    e698:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e69c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6a0:	781b      	ldrb	r3, [r3, #0]
    e6a2:	2bff      	cmp	r3, #255	; 0xff
    e6a4:	d105      	bne.n	e6b2 <send_nav_values+0x10e6>
    e6a6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e6aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6ae:	2200      	movs	r2, #0
    e6b0:	701a      	strb	r2, [r3, #0]
    e6b2:	f242 0339 	movw	r3, #8249	; 0x2039
    e6b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6ba:	781b      	ldrb	r3, [r3, #0]
    e6bc:	b2db      	uxtb	r3, r3
    e6be:	f003 0310 	and.w	r3, r3, #16
    e6c2:	2b00      	cmp	r3, #0
    e6c4:	d15a      	bne.n	e77c <send_nav_values+0x11b0>
    e6c6:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    e6ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6ce:	781b      	ldrb	r3, [r3, #0]
    e6d0:	b2db      	uxtb	r3, r3
    e6d2:	461a      	mov	r2, r3
    e6d4:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    e6d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6dc:	5c9a      	ldrb	r2, [r3, r2]
    e6de:	f64a 73eb 	movw	r3, #45035	; 0xafeb
    e6e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6e6:	701a      	strb	r2, [r3, #0]
    e6e8:	f64a 73ec 	movw	r3, #45036	; 0xafec
    e6ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6f0:	2200      	movs	r2, #0
    e6f2:	701a      	strb	r2, [r3, #0]
    e6f4:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    e6f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6fc:	781b      	ldrb	r3, [r3, #0]
    e6fe:	b2db      	uxtb	r3, r3
    e700:	3301      	adds	r3, #1
    e702:	b2da      	uxtb	r2, r3
    e704:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    e708:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e70c:	701a      	strb	r2, [r3, #0]
    e70e:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    e712:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e716:	781b      	ldrb	r3, [r3, #0]
    e718:	b2db      	uxtb	r3, r3
    e71a:	2bff      	cmp	r3, #255	; 0xff
    e71c:	d105      	bne.n	e72a <send_nav_values+0x115e>
    e71e:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    e722:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e726:	2200      	movs	r2, #0
    e728:	701a      	strb	r2, [r3, #0]
    e72a:	f242 0338 	movw	r3, #8248	; 0x2038
    e72e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e732:	f242 0238 	movw	r2, #8248	; 0x2038
    e736:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e73a:	7812      	ldrb	r2, [r2, #0]
    e73c:	b2d2      	uxtb	r2, r2
    e73e:	f042 0201 	orr.w	r2, r2, #1
    e742:	b2d2      	uxtb	r2, r2
    e744:	701a      	strb	r2, [r3, #0]
    e746:	f242 0339 	movw	r3, #8249	; 0x2039
    e74a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e74e:	f242 0239 	movw	r2, #8249	; 0x2039
    e752:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e756:	7812      	ldrb	r2, [r2, #0]
    e758:	b2d2      	uxtb	r2, r2
    e75a:	f042 0210 	orr.w	r2, r2, #16
    e75e:	b2d2      	uxtb	r2, r2
    e760:	701a      	strb	r2, [r3, #0]
    e762:	e00b      	b.n	e77c <send_nav_values+0x11b0>
    e764:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    e768:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e76c:	781b      	ldrb	r3, [r3, #0]
    e76e:	3301      	adds	r3, #1
    e770:	b2da      	uxtb	r2, r3
    e772:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    e776:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e77a:	701a      	strb	r2, [r3, #0]
}
    e77c:	46bd      	mov	sp, r7
    e77e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e782:	4770      	bx	lr

0000e784 <course_run>:

void course_run(void){
    e784:	b580      	push	{r7, lr}
    e786:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e788:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    e78c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e790:	781b      	ldrb	r3, [r3, #0]
    e792:	2b02      	cmp	r3, #2
    e794:	d006      	beq.n	e7a4 <course_run+0x20>
    e796:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    e79a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e79e:	781b      	ldrb	r3, [r3, #0]
    e7a0:	2b03      	cmp	r3, #3
    e7a2:	d112      	bne.n	e7ca <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    e7a4:	f64a 63ce 	movw	r3, #44750	; 0xaece
    e7a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7ac:	781b      	ldrb	r3, [r3, #0]
    e7ae:	2b02      	cmp	r3, #2
    e7b0:	d901      	bls.n	e7b6 <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    e7b2:	f003 faf1 	bl	11d98 <course_pid_run>
    desired_roll = nav_desired_roll;
    e7b6:	f24b 2370 	movw	r3, #45680	; 0xb270
    e7ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7be:	681a      	ldr	r2, [r3, #0]
    e7c0:	f24b 2314 	movw	r3, #45588	; 0xb214
    e7c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7c8:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    e7ca:	bd80      	pop	{r7, pc}

0000e7cc <altitude_control_task>:

void altitude_control_task(void)
{
    e7cc:	b580      	push	{r7, lr}
    e7ce:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    e7d0:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    e7d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7d8:	781b      	ldrb	r3, [r3, #0]
    e7da:	2b02      	cmp	r3, #2
    e7dc:	d006      	beq.n	e7ec <altitude_control_task+0x20>
    e7de:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    e7e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7e6:	781b      	ldrb	r3, [r3, #0]
    e7e8:	2b03      	cmp	r3, #3
    e7ea:	d108      	bne.n	e7fe <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    e7ec:	f64a 63cd 	movw	r3, #44749	; 0xaecd
    e7f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e7f4:	781b      	ldrb	r3, [r3, #0]
    e7f6:	2b03      	cmp	r3, #3
    e7f8:	d101      	bne.n	e7fe <altitude_control_task+0x32>
      			altitude_pid_run();
    e7fa:	f003 fd55 	bl	122a8 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    e7fe:	bd80      	pop	{r7, pc}

0000e800 <climb_control_task>:
void climb_control_task(void)
{
    e800:	b580      	push	{r7, lr}
    e802:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e804:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    e808:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e80c:	781b      	ldrb	r3, [r3, #0]
    e80e:	2b02      	cmp	r3, #2
    e810:	d006      	beq.n	e820 <climb_control_task+0x20>
    e812:	f64a 63cc 	movw	r3, #44748	; 0xaecc
    e816:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e81a:	781b      	ldrb	r3, [r3, #0]
    e81c:	2b03      	cmp	r3, #3
    e81e:	d135      	bne.n	e88c <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    e820:	f64a 63cd 	movw	r3, #44749	; 0xaecd
    e824:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e828:	781b      	ldrb	r3, [r3, #0]
    e82a:	2b01      	cmp	r3, #1
    e82c:	d901      	bls.n	e832 <climb_control_task+0x32>
        	climb_pid_run();
    e82e:	f003 fb6b 	bl	11f08 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    e832:	f64a 63cd 	movw	r3, #44749	; 0xaecd
    e836:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e83a:	781b      	ldrb	r3, [r3, #0]
    e83c:	2b01      	cmp	r3, #1
    e83e:	d10a      	bne.n	e856 <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    e840:	f24b 2368 	movw	r3, #45672	; 0xb268
    e844:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e848:	881b      	ldrh	r3, [r3, #0]
    e84a:	b29a      	uxth	r2, r3
    e84c:	f24b 231c 	movw	r3, #45596	; 0xb21c
    e850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e854:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    e856:	f64a 63d5 	movw	r3, #44757	; 0xaed5
    e85a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e85e:	781b      	ldrb	r3, [r3, #0]
    e860:	2b00      	cmp	r3, #0
    e862:	d10d      	bne.n	e880 <climb_control_task+0x80>
    e864:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
    e868:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e86c:	881b      	ldrh	r3, [r3, #0]
    e86e:	2b00      	cmp	r3, #0
    e870:	d10c      	bne.n	e88c <climb_control_task+0x8c>
    e872:	f64a 63e0 	movw	r3, #44768	; 0xaee0
    e876:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e87a:	781b      	ldrb	r3, [r3, #0]
    e87c:	2b00      	cmp	r3, #0
    e87e:	d105      	bne.n	e88c <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    e880:	f24b 231c 	movw	r3, #45596	; 0xb21c
    e884:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e888:	2200      	movs	r2, #0
    e88a:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    e88c:	bd80      	pop	{r7, pc}
    e88e:	bf00      	nop

0000e890 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    e890:	b580      	push	{r7, lr}
    e892:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    e894:	f003 f926 	bl	11ae4 <ir_update>
    estimator_update_state_infrared();
    e898:	f006 fbac 	bl	14ff4 <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    e89c:	f003 f990 	bl	11bc0 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    e8a0:	f24b 231c 	movw	r3, #45596	; 0xb21c
    e8a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8a8:	881a      	ldrh	r2, [r3, #0]
    e8aa:	f24b 0308 	movw	r3, #45064	; 0xb008
    e8ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8b2:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    e8b4:	f24b 231e 	movw	r3, #45598	; 0xb21e
    e8b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8bc:	881a      	ldrh	r2, [r3, #0]
    e8be:	f24b 0308 	movw	r3, #45064	; 0xb008
    e8c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8c6:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    e8c8:	f24b 2320 	movw	r3, #45600	; 0xb220
    e8cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8d0:	881a      	ldrh	r2, [r3, #0]
    e8d2:	f24b 0308 	movw	r3, #45064	; 0xb008
    e8d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8da:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    e8dc:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
    e8e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e8e4:	681b      	ldr	r3, [r3, #0]
    e8e6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e8ea:	4618      	mov	r0, r3
    e8ec:	f009 f80c 	bl	17908 <__aeabi_f2d>
    e8f0:	4602      	mov	r2, r0
    e8f2:	460b      	mov	r3, r1
    e8f4:	4610      	mov	r0, r2
    e8f6:	4619      	mov	r1, r3
    e8f8:	f04f 0200 	mov.w	r2, #0
    e8fc:	f04f 0300 	mov.w	r3, #0
    e900:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e904:	f009 f854 	bl	179b0 <__aeabi_dmul>
    e908:	4602      	mov	r2, r0
    e90a:	460b      	mov	r3, r1
    e90c:	4610      	mov	r0, r2
    e90e:	4619      	mov	r1, r3
    e910:	f04f 0200 	mov.w	r2, #0
    e914:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    e918:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    e91c:	f009 faba 	bl	17e94 <__aeabi_dcmplt>
    e920:	4603      	mov	r3, r0
    e922:	2b00      	cmp	r3, #0
    e924:	d002      	beq.n	e92c <stabilisation_task+0x9c>
    e926:	f64d 2280 	movw	r2, #55936	; 0xda80
    e92a:	e046      	b.n	e9ba <stabilisation_task+0x12a>
    e92c:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
    e930:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e934:	681b      	ldr	r3, [r3, #0]
    e936:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e93a:	4618      	mov	r0, r3
    e93c:	f008 ffe4 	bl	17908 <__aeabi_f2d>
    e940:	4602      	mov	r2, r0
    e942:	460b      	mov	r3, r1
    e944:	4610      	mov	r0, r2
    e946:	4619      	mov	r1, r3
    e948:	f04f 0200 	mov.w	r2, #0
    e94c:	f04f 0300 	mov.w	r3, #0
    e950:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e954:	f009 f82c 	bl	179b0 <__aeabi_dmul>
    e958:	4602      	mov	r2, r0
    e95a:	460b      	mov	r3, r1
    e95c:	4610      	mov	r0, r2
    e95e:	4619      	mov	r1, r3
    e960:	f04f 0200 	mov.w	r2, #0
    e964:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    e968:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    e96c:	f009 fab0 	bl	17ed0 <__aeabi_dcmpgt>
    e970:	4603      	mov	r3, r0
    e972:	2b00      	cmp	r3, #0
    e974:	d002      	beq.n	e97c <stabilisation_task+0xec>
    e976:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    e97a:	e01d      	b.n	e9b8 <stabilisation_task+0x128>
    e97c:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
    e980:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e984:	681b      	ldr	r3, [r3, #0]
    e986:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e98a:	4618      	mov	r0, r3
    e98c:	f008 ffbc 	bl	17908 <__aeabi_f2d>
    e990:	4602      	mov	r2, r0
    e992:	460b      	mov	r3, r1
    e994:	4610      	mov	r0, r2
    e996:	4619      	mov	r1, r3
    e998:	f04f 0200 	mov.w	r2, #0
    e99c:	f04f 0300 	mov.w	r3, #0
    e9a0:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    e9a4:	f009 f804 	bl	179b0 <__aeabi_dmul>
    e9a8:	4602      	mov	r2, r0
    e9aa:	460b      	mov	r3, r1
    e9ac:	4610      	mov	r0, r2
    e9ae:	4619      	mov	r1, r3
    e9b0:	f009 fa98 	bl	17ee4 <__aeabi_d2iz>
    e9b4:	4603      	mov	r3, r0
    e9b6:	b29b      	uxth	r3, r3
    e9b8:	b29a      	uxth	r2, r3
    e9ba:	f24b 0308 	movw	r3, #45064	; 0xb008
    e9be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9c2:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    e9c4:	bd80      	pop	{r7, pc}
    e9c6:	bf00      	nop

0000e9c8 <send_gps_pos>:
 * If \a estimator_flight_time is null and \a estimator_hspeed_mod is greater
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void send_gps_pos( void ) {
    e9c8:	b580      	push	{r7, lr}
    e9ca:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    e9cc:	f24b 037d 	movw	r3, #45181	; 0xb07d
    e9d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9d4:	2200      	movs	r2, #0
    e9d6:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    e9d8:	f24b 037e 	movw	r3, #45182	; 0xb07e
    e9dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9e0:	781b      	ldrb	r3, [r3, #0]
    e9e2:	2b00      	cmp	r3, #0
    e9e4:	f001 81af 	beq.w	fd46 <send_gps_pos+0x137e>
     DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
    e9e8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    e9ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9f0:	781a      	ldrb	r2, [r3, #0]
    e9f2:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    e9f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e9fa:	781b      	ldrb	r3, [r3, #0]
    e9fc:	b2db      	uxtb	r3, r3
    e9fe:	429a      	cmp	r2, r3
    ea00:	d313      	bcc.n	ea2a <send_gps_pos+0x62>
    ea02:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    ea06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea0a:	781b      	ldrb	r3, [r3, #0]
    ea0c:	b2db      	uxtb	r3, r3
    ea0e:	461a      	mov	r2, r3
    ea10:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ea14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea18:	781b      	ldrb	r3, [r3, #0]
    ea1a:	1ad3      	subs	r3, r2, r3
    ea1c:	33ff      	adds	r3, #255	; 0xff
    ea1e:	2b21      	cmp	r3, #33	; 0x21
    ea20:	bfd4      	ite	le
    ea22:	2300      	movle	r3, #0
    ea24:	2301      	movgt	r3, #1
    ea26:	b2db      	uxtb	r3, r3
    ea28:	e011      	b.n	ea4e <send_gps_pos+0x86>
    ea2a:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    ea2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea32:	781b      	ldrb	r3, [r3, #0]
    ea34:	b2db      	uxtb	r3, r3
    ea36:	461a      	mov	r2, r3
    ea38:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ea3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea40:	781b      	ldrb	r3, [r3, #0]
    ea42:	1ad3      	subs	r3, r2, r3
    ea44:	2b21      	cmp	r3, #33	; 0x21
    ea46:	bfd4      	ite	le
    ea48:	2300      	movle	r3, #0
    ea4a:	2301      	movgt	r3, #1
    ea4c:	b2db      	uxtb	r3, r3
    ea4e:	2b00      	cmp	r3, #0
    ea50:	f001 816b 	beq.w	fd2a <send_gps_pos+0x1362>
    ea54:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ea58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea5c:	781b      	ldrb	r3, [r3, #0]
    ea5e:	461a      	mov	r2, r3
    ea60:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    ea64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea68:	2105      	movs	r1, #5
    ea6a:	5499      	strb	r1, [r3, r2]
    ea6c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ea70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea74:	781b      	ldrb	r3, [r3, #0]
    ea76:	3301      	adds	r3, #1
    ea78:	b2da      	uxtb	r2, r3
    ea7a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ea7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea82:	701a      	strb	r2, [r3, #0]
    ea84:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ea88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea8c:	781b      	ldrb	r3, [r3, #0]
    ea8e:	2bff      	cmp	r3, #255	; 0xff
    ea90:	d105      	bne.n	ea9e <send_gps_pos+0xd6>
    ea92:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ea96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea9a:	2200      	movs	r2, #0
    ea9c:	701a      	strb	r2, [r3, #0]
    ea9e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    eaa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eaa6:	781b      	ldrb	r3, [r3, #0]
    eaa8:	461a      	mov	r2, r3
    eaaa:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    eaae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eab2:	2108      	movs	r1, #8
    eab4:	5499      	strb	r1, [r3, r2]
    eab6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    eaba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eabe:	781b      	ldrb	r3, [r3, #0]
    eac0:	3301      	adds	r3, #1
    eac2:	b2da      	uxtb	r2, r3
    eac4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    eac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eacc:	701a      	strb	r2, [r3, #0]
    eace:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ead2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ead6:	781b      	ldrb	r3, [r3, #0]
    ead8:	2bff      	cmp	r3, #255	; 0xff
    eada:	d105      	bne.n	eae8 <send_gps_pos+0x120>
    eadc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    eae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eae4:	2200      	movs	r2, #0
    eae6:	701a      	strb	r2, [r3, #0]
    eae8:	f64a 73ed 	movw	r3, #45037	; 0xafed
    eaec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eaf0:	2208      	movs	r2, #8
    eaf2:	701a      	strb	r2, [r3, #0]
    eaf4:	f64a 73ee 	movw	r3, #45038	; 0xafee
    eaf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eafc:	2208      	movs	r2, #8
    eafe:	701a      	strb	r2, [r3, #0]
    eb00:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    eb04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb08:	781b      	ldrb	r3, [r3, #0]
    eb0a:	461a      	mov	r2, r3
    eb0c:	f24b 037c 	movw	r3, #45180	; 0xb07c
    eb10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb14:	7819      	ldrb	r1, [r3, #0]
    eb16:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    eb1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb1e:	5499      	strb	r1, [r3, r2]
    eb20:	f64a 73ed 	movw	r3, #45037	; 0xafed
    eb24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb28:	781a      	ldrb	r2, [r3, #0]
    eb2a:	f24b 037c 	movw	r3, #45180	; 0xb07c
    eb2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb32:	781b      	ldrb	r3, [r3, #0]
    eb34:	4413      	add	r3, r2
    eb36:	b2da      	uxtb	r2, r3
    eb38:	f64a 73ed 	movw	r3, #45037	; 0xafed
    eb3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb40:	701a      	strb	r2, [r3, #0]
    eb42:	f64a 73ee 	movw	r3, #45038	; 0xafee
    eb46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb4a:	781a      	ldrb	r2, [r3, #0]
    eb4c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    eb50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb54:	781b      	ldrb	r3, [r3, #0]
    eb56:	4413      	add	r3, r2
    eb58:	b2da      	uxtb	r2, r3
    eb5a:	f64a 73ee 	movw	r3, #45038	; 0xafee
    eb5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb62:	701a      	strb	r2, [r3, #0]
    eb64:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    eb68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb6c:	781b      	ldrb	r3, [r3, #0]
    eb6e:	3301      	adds	r3, #1
    eb70:	b2da      	uxtb	r2, r3
    eb72:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    eb76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb7a:	701a      	strb	r2, [r3, #0]
    eb7c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    eb80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb84:	781b      	ldrb	r3, [r3, #0]
    eb86:	2bff      	cmp	r3, #255	; 0xff
    eb88:	d105      	bne.n	eb96 <send_gps_pos+0x1ce>
    eb8a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    eb8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb92:	2200      	movs	r2, #0
    eb94:	701a      	strb	r2, [r3, #0]
    eb96:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    eb9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eb9e:	781b      	ldrb	r3, [r3, #0]
    eba0:	461a      	mov	r2, r3
    eba2:	f24b 036c 	movw	r3, #45164	; 0xb06c
    eba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebaa:	7819      	ldrb	r1, [r3, #0]
    ebac:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    ebb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebb4:	5499      	strb	r1, [r3, r2]
    ebb6:	f24b 036c 	movw	r3, #45164	; 0xb06c
    ebba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebbe:	781a      	ldrb	r2, [r3, #0]
    ebc0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ebc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebc8:	781b      	ldrb	r3, [r3, #0]
    ebca:	4413      	add	r3, r2
    ebcc:	b2da      	uxtb	r2, r3
    ebce:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ebd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebd6:	701a      	strb	r2, [r3, #0]
    ebd8:	f64a 73ee 	movw	r3, #45038	; 0xafee
    ebdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebe0:	781a      	ldrb	r2, [r3, #0]
    ebe2:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ebe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebea:	781b      	ldrb	r3, [r3, #0]
    ebec:	4413      	add	r3, r2
    ebee:	b2da      	uxtb	r2, r3
    ebf0:	f64a 73ee 	movw	r3, #45038	; 0xafee
    ebf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ebf8:	701a      	strb	r2, [r3, #0]
    ebfa:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ebfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec02:	781b      	ldrb	r3, [r3, #0]
    ec04:	3301      	adds	r3, #1
    ec06:	b2da      	uxtb	r2, r3
    ec08:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ec0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec10:	701a      	strb	r2, [r3, #0]
    ec12:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ec16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec1a:	781b      	ldrb	r3, [r3, #0]
    ec1c:	2bff      	cmp	r3, #255	; 0xff
    ec1e:	d105      	bne.n	ec2c <send_gps_pos+0x264>
    ec20:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ec24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec28:	2200      	movs	r2, #0
    ec2a:	701a      	strb	r2, [r3, #0]
    ec2c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ec30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec34:	781b      	ldrb	r3, [r3, #0]
    ec36:	461a      	mov	r2, r3
    ec38:	f24b 036c 	movw	r3, #45164	; 0xb06c
    ec3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec40:	7859      	ldrb	r1, [r3, #1]
    ec42:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    ec46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec4a:	5499      	strb	r1, [r3, r2]
    ec4c:	4bd1      	ldr	r3, [pc, #836]	; (ef94 <send_gps_pos+0x5cc>)
    ec4e:	781a      	ldrb	r2, [r3, #0]
    ec50:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ec54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec58:	781b      	ldrb	r3, [r3, #0]
    ec5a:	4413      	add	r3, r2
    ec5c:	b2da      	uxtb	r2, r3
    ec5e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ec62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec66:	701a      	strb	r2, [r3, #0]
    ec68:	f64a 73ee 	movw	r3, #45038	; 0xafee
    ec6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec70:	781a      	ldrb	r2, [r3, #0]
    ec72:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ec76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec7a:	781b      	ldrb	r3, [r3, #0]
    ec7c:	4413      	add	r3, r2
    ec7e:	b2da      	uxtb	r2, r3
    ec80:	f64a 73ee 	movw	r3, #45038	; 0xafee
    ec84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec88:	701a      	strb	r2, [r3, #0]
    ec8a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ec8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ec92:	781b      	ldrb	r3, [r3, #0]
    ec94:	3301      	adds	r3, #1
    ec96:	b2da      	uxtb	r2, r3
    ec98:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ec9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eca0:	701a      	strb	r2, [r3, #0]
    eca2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    eca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecaa:	781b      	ldrb	r3, [r3, #0]
    ecac:	2bff      	cmp	r3, #255	; 0xff
    ecae:	d105      	bne.n	ecbc <send_gps_pos+0x2f4>
    ecb0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ecb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecb8:	2200      	movs	r2, #0
    ecba:	701a      	strb	r2, [r3, #0]
    ecbc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ecc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecc4:	781b      	ldrb	r3, [r3, #0]
    ecc6:	461a      	mov	r2, r3
    ecc8:	f24b 036c 	movw	r3, #45164	; 0xb06c
    eccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecd0:	7899      	ldrb	r1, [r3, #2]
    ecd2:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    ecd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecda:	5499      	strb	r1, [r3, r2]
    ecdc:	4bae      	ldr	r3, [pc, #696]	; (ef98 <send_gps_pos+0x5d0>)
    ecde:	781a      	ldrb	r2, [r3, #0]
    ece0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ece4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ece8:	781b      	ldrb	r3, [r3, #0]
    ecea:	4413      	add	r3, r2
    ecec:	b2da      	uxtb	r2, r3
    ecee:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ecf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ecf6:	701a      	strb	r2, [r3, #0]
    ecf8:	f64a 73ee 	movw	r3, #45038	; 0xafee
    ecfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed00:	781a      	ldrb	r2, [r3, #0]
    ed02:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ed06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed0a:	781b      	ldrb	r3, [r3, #0]
    ed0c:	4413      	add	r3, r2
    ed0e:	b2da      	uxtb	r2, r3
    ed10:	f64a 73ee 	movw	r3, #45038	; 0xafee
    ed14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed18:	701a      	strb	r2, [r3, #0]
    ed1a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ed1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed22:	781b      	ldrb	r3, [r3, #0]
    ed24:	3301      	adds	r3, #1
    ed26:	b2da      	uxtb	r2, r3
    ed28:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ed2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed30:	701a      	strb	r2, [r3, #0]
    ed32:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ed36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed3a:	781b      	ldrb	r3, [r3, #0]
    ed3c:	2bff      	cmp	r3, #255	; 0xff
    ed3e:	d105      	bne.n	ed4c <send_gps_pos+0x384>
    ed40:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ed44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed48:	2200      	movs	r2, #0
    ed4a:	701a      	strb	r2, [r3, #0]
    ed4c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ed50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed54:	781b      	ldrb	r3, [r3, #0]
    ed56:	461a      	mov	r2, r3
    ed58:	f24b 036c 	movw	r3, #45164	; 0xb06c
    ed5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed60:	78d9      	ldrb	r1, [r3, #3]
    ed62:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    ed66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed6a:	5499      	strb	r1, [r3, r2]
    ed6c:	4b8b      	ldr	r3, [pc, #556]	; (ef9c <send_gps_pos+0x5d4>)
    ed6e:	781a      	ldrb	r2, [r3, #0]
    ed70:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ed74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed78:	781b      	ldrb	r3, [r3, #0]
    ed7a:	4413      	add	r3, r2
    ed7c:	b2da      	uxtb	r2, r3
    ed7e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ed82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed86:	701a      	strb	r2, [r3, #0]
    ed88:	f64a 73ee 	movw	r3, #45038	; 0xafee
    ed8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed90:	781a      	ldrb	r2, [r3, #0]
    ed92:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ed96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ed9a:	781b      	ldrb	r3, [r3, #0]
    ed9c:	4413      	add	r3, r2
    ed9e:	b2da      	uxtb	r2, r3
    eda0:	f64a 73ee 	movw	r3, #45038	; 0xafee
    eda4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eda8:	701a      	strb	r2, [r3, #0]
    edaa:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    edae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edb2:	781b      	ldrb	r3, [r3, #0]
    edb4:	3301      	adds	r3, #1
    edb6:	b2da      	uxtb	r2, r3
    edb8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    edbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edc0:	701a      	strb	r2, [r3, #0]
    edc2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    edc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edca:	781b      	ldrb	r3, [r3, #0]
    edcc:	2bff      	cmp	r3, #255	; 0xff
    edce:	d105      	bne.n	eddc <send_gps_pos+0x414>
    edd0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    edd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edd8:	2200      	movs	r2, #0
    edda:	701a      	strb	r2, [r3, #0]
    eddc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ede0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ede4:	781b      	ldrb	r3, [r3, #0]
    ede6:	461a      	mov	r2, r3
    ede8:	f24b 0370 	movw	r3, #45168	; 0xb070
    edec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edf0:	7819      	ldrb	r1, [r3, #0]
    edf2:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    edf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    edfa:	5499      	strb	r1, [r3, r2]
    edfc:	f24b 0370 	movw	r3, #45168	; 0xb070
    ee00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee04:	781a      	ldrb	r2, [r3, #0]
    ee06:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ee0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee0e:	781b      	ldrb	r3, [r3, #0]
    ee10:	4413      	add	r3, r2
    ee12:	b2da      	uxtb	r2, r3
    ee14:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ee18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee1c:	701a      	strb	r2, [r3, #0]
    ee1e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    ee22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee26:	781a      	ldrb	r2, [r3, #0]
    ee28:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ee2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee30:	781b      	ldrb	r3, [r3, #0]
    ee32:	4413      	add	r3, r2
    ee34:	b2da      	uxtb	r2, r3
    ee36:	f64a 73ee 	movw	r3, #45038	; 0xafee
    ee3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee3e:	701a      	strb	r2, [r3, #0]
    ee40:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ee44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee48:	781b      	ldrb	r3, [r3, #0]
    ee4a:	3301      	adds	r3, #1
    ee4c:	b2da      	uxtb	r2, r3
    ee4e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ee52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee56:	701a      	strb	r2, [r3, #0]
    ee58:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ee5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee60:	781b      	ldrb	r3, [r3, #0]
    ee62:	2bff      	cmp	r3, #255	; 0xff
    ee64:	d105      	bne.n	ee72 <send_gps_pos+0x4aa>
    ee66:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ee6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee6e:	2200      	movs	r2, #0
    ee70:	701a      	strb	r2, [r3, #0]
    ee72:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ee76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee7a:	781b      	ldrb	r3, [r3, #0]
    ee7c:	461a      	mov	r2, r3
    ee7e:	f24b 0370 	movw	r3, #45168	; 0xb070
    ee82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee86:	7859      	ldrb	r1, [r3, #1]
    ee88:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    ee8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee90:	5499      	strb	r1, [r3, r2]
    ee92:	4b43      	ldr	r3, [pc, #268]	; (efa0 <send_gps_pos+0x5d8>)
    ee94:	781a      	ldrb	r2, [r3, #0]
    ee96:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ee9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ee9e:	781b      	ldrb	r3, [r3, #0]
    eea0:	4413      	add	r3, r2
    eea2:	b2da      	uxtb	r2, r3
    eea4:	f64a 73ed 	movw	r3, #45037	; 0xafed
    eea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eeac:	701a      	strb	r2, [r3, #0]
    eeae:	f64a 73ee 	movw	r3, #45038	; 0xafee
    eeb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eeb6:	781a      	ldrb	r2, [r3, #0]
    eeb8:	f64a 73ed 	movw	r3, #45037	; 0xafed
    eebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eec0:	781b      	ldrb	r3, [r3, #0]
    eec2:	4413      	add	r3, r2
    eec4:	b2da      	uxtb	r2, r3
    eec6:	f64a 73ee 	movw	r3, #45038	; 0xafee
    eeca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eece:	701a      	strb	r2, [r3, #0]
    eed0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    eed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eed8:	781b      	ldrb	r3, [r3, #0]
    eeda:	3301      	adds	r3, #1
    eedc:	b2da      	uxtb	r2, r3
    eede:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    eee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eee6:	701a      	strb	r2, [r3, #0]
    eee8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    eeec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eef0:	781b      	ldrb	r3, [r3, #0]
    eef2:	2bff      	cmp	r3, #255	; 0xff
    eef4:	d105      	bne.n	ef02 <send_gps_pos+0x53a>
    eef6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    eefa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eefe:	2200      	movs	r2, #0
    ef00:	701a      	strb	r2, [r3, #0]
    ef02:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ef06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef0a:	781b      	ldrb	r3, [r3, #0]
    ef0c:	461a      	mov	r2, r3
    ef0e:	f24b 0370 	movw	r3, #45168	; 0xb070
    ef12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef16:	7899      	ldrb	r1, [r3, #2]
    ef18:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    ef1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef20:	5499      	strb	r1, [r3, r2]
    ef22:	4b20      	ldr	r3, [pc, #128]	; (efa4 <send_gps_pos+0x5dc>)
    ef24:	781a      	ldrb	r2, [r3, #0]
    ef26:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ef2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef2e:	781b      	ldrb	r3, [r3, #0]
    ef30:	4413      	add	r3, r2
    ef32:	b2da      	uxtb	r2, r3
    ef34:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ef38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef3c:	701a      	strb	r2, [r3, #0]
    ef3e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    ef42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef46:	781a      	ldrb	r2, [r3, #0]
    ef48:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ef4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef50:	781b      	ldrb	r3, [r3, #0]
    ef52:	4413      	add	r3, r2
    ef54:	b2da      	uxtb	r2, r3
    ef56:	f64a 73ee 	movw	r3, #45038	; 0xafee
    ef5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef5e:	701a      	strb	r2, [r3, #0]
    ef60:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ef64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef68:	781b      	ldrb	r3, [r3, #0]
    ef6a:	3301      	adds	r3, #1
    ef6c:	b2da      	uxtb	r2, r3
    ef6e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ef72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef76:	701a      	strb	r2, [r3, #0]
    ef78:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ef7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef80:	781b      	ldrb	r3, [r3, #0]
    ef82:	2bff      	cmp	r3, #255	; 0xff
    ef84:	d110      	bne.n	efa8 <send_gps_pos+0x5e0>
    ef86:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ef8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ef8e:	2200      	movs	r2, #0
    ef90:	701a      	strb	r2, [r3, #0]
    ef92:	e009      	b.n	efa8 <send_gps_pos+0x5e0>
    ef94:	2000b06d 	.word	0x2000b06d
    ef98:	2000b06e 	.word	0x2000b06e
    ef9c:	2000b06f 	.word	0x2000b06f
    efa0:	2000b071 	.word	0x2000b071
    efa4:	2000b072 	.word	0x2000b072
    efa8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    efac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efb0:	781b      	ldrb	r3, [r3, #0]
    efb2:	461a      	mov	r2, r3
    efb4:	f24b 0370 	movw	r3, #45168	; 0xb070
    efb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efbc:	78d9      	ldrb	r1, [r3, #3]
    efbe:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    efc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efc6:	5499      	strb	r1, [r3, r2]
    efc8:	4bd3      	ldr	r3, [pc, #844]	; (f318 <send_gps_pos+0x950>)
    efca:	781a      	ldrb	r2, [r3, #0]
    efcc:	f64a 73ed 	movw	r3, #45037	; 0xafed
    efd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efd4:	781b      	ldrb	r3, [r3, #0]
    efd6:	4413      	add	r3, r2
    efd8:	b2da      	uxtb	r2, r3
    efda:	f64a 73ed 	movw	r3, #45037	; 0xafed
    efde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efe2:	701a      	strb	r2, [r3, #0]
    efe4:	f64a 73ee 	movw	r3, #45038	; 0xafee
    efe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    efec:	781a      	ldrb	r2, [r3, #0]
    efee:	f64a 73ed 	movw	r3, #45037	; 0xafed
    eff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eff6:	781b      	ldrb	r3, [r3, #0]
    eff8:	4413      	add	r3, r2
    effa:	b2da      	uxtb	r2, r3
    effc:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f000:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f004:	701a      	strb	r2, [r3, #0]
    f006:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f00a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f00e:	781b      	ldrb	r3, [r3, #0]
    f010:	3301      	adds	r3, #1
    f012:	b2da      	uxtb	r2, r3
    f014:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f018:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f01c:	701a      	strb	r2, [r3, #0]
    f01e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f026:	781b      	ldrb	r3, [r3, #0]
    f028:	2bff      	cmp	r3, #255	; 0xff
    f02a:	d105      	bne.n	f038 <send_gps_pos+0x670>
    f02c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f030:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f034:	2200      	movs	r2, #0
    f036:	701a      	strb	r2, [r3, #0]
    f038:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f03c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f040:	781b      	ldrb	r3, [r3, #0]
    f042:	461a      	mov	r2, r3
    f044:	f24b 0368 	movw	r3, #45160	; 0xb068
    f048:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f04c:	7819      	ldrb	r1, [r3, #0]
    f04e:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    f052:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f056:	5499      	strb	r1, [r3, r2]
    f058:	f24b 0368 	movw	r3, #45160	; 0xb068
    f05c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f060:	781a      	ldrb	r2, [r3, #0]
    f062:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f066:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f06a:	781b      	ldrb	r3, [r3, #0]
    f06c:	4413      	add	r3, r2
    f06e:	b2da      	uxtb	r2, r3
    f070:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f074:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f078:	701a      	strb	r2, [r3, #0]
    f07a:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f07e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f082:	781a      	ldrb	r2, [r3, #0]
    f084:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f088:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f08c:	781b      	ldrb	r3, [r3, #0]
    f08e:	4413      	add	r3, r2
    f090:	b2da      	uxtb	r2, r3
    f092:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f096:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f09a:	701a      	strb	r2, [r3, #0]
    f09c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f0a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0a4:	781b      	ldrb	r3, [r3, #0]
    f0a6:	3301      	adds	r3, #1
    f0a8:	b2da      	uxtb	r2, r3
    f0aa:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f0ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0b2:	701a      	strb	r2, [r3, #0]
    f0b4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f0b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0bc:	781b      	ldrb	r3, [r3, #0]
    f0be:	2bff      	cmp	r3, #255	; 0xff
    f0c0:	d105      	bne.n	f0ce <send_gps_pos+0x706>
    f0c2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f0c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0ca:	2200      	movs	r2, #0
    f0cc:	701a      	strb	r2, [r3, #0]
    f0ce:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f0d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0d6:	781b      	ldrb	r3, [r3, #0]
    f0d8:	461a      	mov	r2, r3
    f0da:	f24b 0368 	movw	r3, #45160	; 0xb068
    f0de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0e2:	7859      	ldrb	r1, [r3, #1]
    f0e4:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    f0e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0ec:	5499      	strb	r1, [r3, r2]
    f0ee:	4b8b      	ldr	r3, [pc, #556]	; (f31c <send_gps_pos+0x954>)
    f0f0:	781a      	ldrb	r2, [r3, #0]
    f0f2:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f0f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f0fa:	781b      	ldrb	r3, [r3, #0]
    f0fc:	4413      	add	r3, r2
    f0fe:	b2da      	uxtb	r2, r3
    f100:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f104:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f108:	701a      	strb	r2, [r3, #0]
    f10a:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f10e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f112:	781a      	ldrb	r2, [r3, #0]
    f114:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f118:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f11c:	781b      	ldrb	r3, [r3, #0]
    f11e:	4413      	add	r3, r2
    f120:	b2da      	uxtb	r2, r3
    f122:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f126:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f12a:	701a      	strb	r2, [r3, #0]
    f12c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f130:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f134:	781b      	ldrb	r3, [r3, #0]
    f136:	3301      	adds	r3, #1
    f138:	b2da      	uxtb	r2, r3
    f13a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f13e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f142:	701a      	strb	r2, [r3, #0]
    f144:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f148:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f14c:	781b      	ldrb	r3, [r3, #0]
    f14e:	2bff      	cmp	r3, #255	; 0xff
    f150:	d105      	bne.n	f15e <send_gps_pos+0x796>
    f152:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f156:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f15a:	2200      	movs	r2, #0
    f15c:	701a      	strb	r2, [r3, #0]
    f15e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f162:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f166:	781b      	ldrb	r3, [r3, #0]
    f168:	461a      	mov	r2, r3
    f16a:	f24b 0368 	movw	r3, #45160	; 0xb068
    f16e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f172:	7899      	ldrb	r1, [r3, #2]
    f174:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    f178:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f17c:	5499      	strb	r1, [r3, r2]
    f17e:	4b68      	ldr	r3, [pc, #416]	; (f320 <send_gps_pos+0x958>)
    f180:	781a      	ldrb	r2, [r3, #0]
    f182:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f186:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f18a:	781b      	ldrb	r3, [r3, #0]
    f18c:	4413      	add	r3, r2
    f18e:	b2da      	uxtb	r2, r3
    f190:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f194:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f198:	701a      	strb	r2, [r3, #0]
    f19a:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f19e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1a2:	781a      	ldrb	r2, [r3, #0]
    f1a4:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f1a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1ac:	781b      	ldrb	r3, [r3, #0]
    f1ae:	4413      	add	r3, r2
    f1b0:	b2da      	uxtb	r2, r3
    f1b2:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f1b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1ba:	701a      	strb	r2, [r3, #0]
    f1bc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f1c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1c4:	781b      	ldrb	r3, [r3, #0]
    f1c6:	3301      	adds	r3, #1
    f1c8:	b2da      	uxtb	r2, r3
    f1ca:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f1ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1d2:	701a      	strb	r2, [r3, #0]
    f1d4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f1d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1dc:	781b      	ldrb	r3, [r3, #0]
    f1de:	2bff      	cmp	r3, #255	; 0xff
    f1e0:	d105      	bne.n	f1ee <send_gps_pos+0x826>
    f1e2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f1e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1ea:	2200      	movs	r2, #0
    f1ec:	701a      	strb	r2, [r3, #0]
    f1ee:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f1f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f1f6:	781b      	ldrb	r3, [r3, #0]
    f1f8:	461a      	mov	r2, r3
    f1fa:	f24b 0368 	movw	r3, #45160	; 0xb068
    f1fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f202:	78d9      	ldrb	r1, [r3, #3]
    f204:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    f208:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f20c:	5499      	strb	r1, [r3, r2]
    f20e:	4b45      	ldr	r3, [pc, #276]	; (f324 <send_gps_pos+0x95c>)
    f210:	781a      	ldrb	r2, [r3, #0]
    f212:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f216:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f21a:	781b      	ldrb	r3, [r3, #0]
    f21c:	4413      	add	r3, r2
    f21e:	b2da      	uxtb	r2, r3
    f220:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f224:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f228:	701a      	strb	r2, [r3, #0]
    f22a:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f22e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f232:	781a      	ldrb	r2, [r3, #0]
    f234:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f238:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f23c:	781b      	ldrb	r3, [r3, #0]
    f23e:	4413      	add	r3, r2
    f240:	b2da      	uxtb	r2, r3
    f242:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f246:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f24a:	701a      	strb	r2, [r3, #0]
    f24c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f250:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f254:	781b      	ldrb	r3, [r3, #0]
    f256:	3301      	adds	r3, #1
    f258:	b2da      	uxtb	r2, r3
    f25a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f25e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f262:	701a      	strb	r2, [r3, #0]
    f264:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f268:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f26c:	781b      	ldrb	r3, [r3, #0]
    f26e:	2bff      	cmp	r3, #255	; 0xff
    f270:	d105      	bne.n	f27e <send_gps_pos+0x8b6>
    f272:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f276:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f27a:	2200      	movs	r2, #0
    f27c:	701a      	strb	r2, [r3, #0]
    f27e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f282:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f286:	781b      	ldrb	r3, [r3, #0]
    f288:	461a      	mov	r2, r3
    f28a:	f24b 035c 	movw	r3, #45148	; 0xb05c
    f28e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f292:	7819      	ldrb	r1, [r3, #0]
    f294:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    f298:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f29c:	5499      	strb	r1, [r3, r2]
    f29e:	f24b 035c 	movw	r3, #45148	; 0xb05c
    f2a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2a6:	781a      	ldrb	r2, [r3, #0]
    f2a8:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f2ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2b0:	781b      	ldrb	r3, [r3, #0]
    f2b2:	4413      	add	r3, r2
    f2b4:	b2da      	uxtb	r2, r3
    f2b6:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f2ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2be:	701a      	strb	r2, [r3, #0]
    f2c0:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f2c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2c8:	781a      	ldrb	r2, [r3, #0]
    f2ca:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f2ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2d2:	781b      	ldrb	r3, [r3, #0]
    f2d4:	4413      	add	r3, r2
    f2d6:	b2da      	uxtb	r2, r3
    f2d8:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f2dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2e0:	701a      	strb	r2, [r3, #0]
    f2e2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f2e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2ea:	781b      	ldrb	r3, [r3, #0]
    f2ec:	3301      	adds	r3, #1
    f2ee:	b2da      	uxtb	r2, r3
    f2f0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f2f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2f8:	701a      	strb	r2, [r3, #0]
    f2fa:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f2fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f302:	781b      	ldrb	r3, [r3, #0]
    f304:	2bff      	cmp	r3, #255	; 0xff
    f306:	d10f      	bne.n	f328 <send_gps_pos+0x960>
    f308:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f30c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f310:	2200      	movs	r2, #0
    f312:	701a      	strb	r2, [r3, #0]
    f314:	e008      	b.n	f328 <send_gps_pos+0x960>
    f316:	bf00      	nop
    f318:	2000b073 	.word	0x2000b073
    f31c:	2000b069 	.word	0x2000b069
    f320:	2000b06a 	.word	0x2000b06a
    f324:	2000b06b 	.word	0x2000b06b
    f328:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f32c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f330:	781b      	ldrb	r3, [r3, #0]
    f332:	461a      	mov	r2, r3
    f334:	f24b 035c 	movw	r3, #45148	; 0xb05c
    f338:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f33c:	7859      	ldrb	r1, [r3, #1]
    f33e:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    f342:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f346:	5499      	strb	r1, [r3, r2]
    f348:	4bd1      	ldr	r3, [pc, #836]	; (f690 <send_gps_pos+0xcc8>)
    f34a:	781a      	ldrb	r2, [r3, #0]
    f34c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f350:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f354:	781b      	ldrb	r3, [r3, #0]
    f356:	4413      	add	r3, r2
    f358:	b2da      	uxtb	r2, r3
    f35a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f35e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f362:	701a      	strb	r2, [r3, #0]
    f364:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f368:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f36c:	781a      	ldrb	r2, [r3, #0]
    f36e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f372:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f376:	781b      	ldrb	r3, [r3, #0]
    f378:	4413      	add	r3, r2
    f37a:	b2da      	uxtb	r2, r3
    f37c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f380:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f384:	701a      	strb	r2, [r3, #0]
    f386:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f38a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f38e:	781b      	ldrb	r3, [r3, #0]
    f390:	3301      	adds	r3, #1
    f392:	b2da      	uxtb	r2, r3
    f394:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f398:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f39c:	701a      	strb	r2, [r3, #0]
    f39e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f3a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3a6:	781b      	ldrb	r3, [r3, #0]
    f3a8:	2bff      	cmp	r3, #255	; 0xff
    f3aa:	d105      	bne.n	f3b8 <send_gps_pos+0x9f0>
    f3ac:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f3b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3b4:	2200      	movs	r2, #0
    f3b6:	701a      	strb	r2, [r3, #0]
    f3b8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f3bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3c0:	781b      	ldrb	r3, [r3, #0]
    f3c2:	461a      	mov	r2, r3
    f3c4:	f24b 035c 	movw	r3, #45148	; 0xb05c
    f3c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3cc:	7899      	ldrb	r1, [r3, #2]
    f3ce:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    f3d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3d6:	5499      	strb	r1, [r3, r2]
    f3d8:	4bae      	ldr	r3, [pc, #696]	; (f694 <send_gps_pos+0xccc>)
    f3da:	781a      	ldrb	r2, [r3, #0]
    f3dc:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f3e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3e4:	781b      	ldrb	r3, [r3, #0]
    f3e6:	4413      	add	r3, r2
    f3e8:	b2da      	uxtb	r2, r3
    f3ea:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f3ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3f2:	701a      	strb	r2, [r3, #0]
    f3f4:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f3f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f3fc:	781a      	ldrb	r2, [r3, #0]
    f3fe:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f402:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f406:	781b      	ldrb	r3, [r3, #0]
    f408:	4413      	add	r3, r2
    f40a:	b2da      	uxtb	r2, r3
    f40c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f410:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f414:	701a      	strb	r2, [r3, #0]
    f416:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f41a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f41e:	781b      	ldrb	r3, [r3, #0]
    f420:	3301      	adds	r3, #1
    f422:	b2da      	uxtb	r2, r3
    f424:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f428:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f42c:	701a      	strb	r2, [r3, #0]
    f42e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f436:	781b      	ldrb	r3, [r3, #0]
    f438:	2bff      	cmp	r3, #255	; 0xff
    f43a:	d105      	bne.n	f448 <send_gps_pos+0xa80>
    f43c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f440:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f444:	2200      	movs	r2, #0
    f446:	701a      	strb	r2, [r3, #0]
    f448:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f44c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f450:	781b      	ldrb	r3, [r3, #0]
    f452:	461a      	mov	r2, r3
    f454:	f24b 035c 	movw	r3, #45148	; 0xb05c
    f458:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f45c:	78d9      	ldrb	r1, [r3, #3]
    f45e:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    f462:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f466:	5499      	strb	r1, [r3, r2]
    f468:	4b8b      	ldr	r3, [pc, #556]	; (f698 <send_gps_pos+0xcd0>)
    f46a:	781a      	ldrb	r2, [r3, #0]
    f46c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f470:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f474:	781b      	ldrb	r3, [r3, #0]
    f476:	4413      	add	r3, r2
    f478:	b2da      	uxtb	r2, r3
    f47a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f47e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f482:	701a      	strb	r2, [r3, #0]
    f484:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f488:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f48c:	781a      	ldrb	r2, [r3, #0]
    f48e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f492:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f496:	781b      	ldrb	r3, [r3, #0]
    f498:	4413      	add	r3, r2
    f49a:	b2da      	uxtb	r2, r3
    f49c:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f4a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4a4:	701a      	strb	r2, [r3, #0]
    f4a6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f4aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4ae:	781b      	ldrb	r3, [r3, #0]
    f4b0:	3301      	adds	r3, #1
    f4b2:	b2da      	uxtb	r2, r3
    f4b4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f4b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4bc:	701a      	strb	r2, [r3, #0]
    f4be:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4c6:	781b      	ldrb	r3, [r3, #0]
    f4c8:	2bff      	cmp	r3, #255	; 0xff
    f4ca:	d105      	bne.n	f4d8 <send_gps_pos+0xb10>
    f4cc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4d4:	2200      	movs	r2, #0
    f4d6:	701a      	strb	r2, [r3, #0]
    f4d8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f4dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4e0:	781b      	ldrb	r3, [r3, #0]
    f4e2:	461a      	mov	r2, r3
    f4e4:	f24b 0360 	movw	r3, #45152	; 0xb060
    f4e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4ec:	7819      	ldrb	r1, [r3, #0]
    f4ee:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    f4f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f4f6:	5499      	strb	r1, [r3, r2]
    f4f8:	f24b 0360 	movw	r3, #45152	; 0xb060
    f4fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f500:	781a      	ldrb	r2, [r3, #0]
    f502:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f50a:	781b      	ldrb	r3, [r3, #0]
    f50c:	4413      	add	r3, r2
    f50e:	b2da      	uxtb	r2, r3
    f510:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f514:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f518:	701a      	strb	r2, [r3, #0]
    f51a:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f51e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f522:	781a      	ldrb	r2, [r3, #0]
    f524:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f528:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f52c:	781b      	ldrb	r3, [r3, #0]
    f52e:	4413      	add	r3, r2
    f530:	b2da      	uxtb	r2, r3
    f532:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f53a:	701a      	strb	r2, [r3, #0]
    f53c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f544:	781b      	ldrb	r3, [r3, #0]
    f546:	3301      	adds	r3, #1
    f548:	b2da      	uxtb	r2, r3
    f54a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f54e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f552:	701a      	strb	r2, [r3, #0]
    f554:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f558:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f55c:	781b      	ldrb	r3, [r3, #0]
    f55e:	2bff      	cmp	r3, #255	; 0xff
    f560:	d105      	bne.n	f56e <send_gps_pos+0xba6>
    f562:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f566:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f56a:	2200      	movs	r2, #0
    f56c:	701a      	strb	r2, [r3, #0]
    f56e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f572:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f576:	781b      	ldrb	r3, [r3, #0]
    f578:	461a      	mov	r2, r3
    f57a:	f24b 0360 	movw	r3, #45152	; 0xb060
    f57e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f582:	7859      	ldrb	r1, [r3, #1]
    f584:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    f588:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f58c:	5499      	strb	r1, [r3, r2]
    f58e:	4b43      	ldr	r3, [pc, #268]	; (f69c <send_gps_pos+0xcd4>)
    f590:	781a      	ldrb	r2, [r3, #0]
    f592:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f596:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f59a:	781b      	ldrb	r3, [r3, #0]
    f59c:	4413      	add	r3, r2
    f59e:	b2da      	uxtb	r2, r3
    f5a0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f5a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5a8:	701a      	strb	r2, [r3, #0]
    f5aa:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f5ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5b2:	781a      	ldrb	r2, [r3, #0]
    f5b4:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f5b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5bc:	781b      	ldrb	r3, [r3, #0]
    f5be:	4413      	add	r3, r2
    f5c0:	b2da      	uxtb	r2, r3
    f5c2:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f5c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5ca:	701a      	strb	r2, [r3, #0]
    f5cc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f5d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5d4:	781b      	ldrb	r3, [r3, #0]
    f5d6:	3301      	adds	r3, #1
    f5d8:	b2da      	uxtb	r2, r3
    f5da:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f5de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5e2:	701a      	strb	r2, [r3, #0]
    f5e4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f5e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5ec:	781b      	ldrb	r3, [r3, #0]
    f5ee:	2bff      	cmp	r3, #255	; 0xff
    f5f0:	d105      	bne.n	f5fe <send_gps_pos+0xc36>
    f5f2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f5f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f5fa:	2200      	movs	r2, #0
    f5fc:	701a      	strb	r2, [r3, #0]
    f5fe:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f602:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f606:	781b      	ldrb	r3, [r3, #0]
    f608:	461a      	mov	r2, r3
    f60a:	f24b 0360 	movw	r3, #45152	; 0xb060
    f60e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f612:	7899      	ldrb	r1, [r3, #2]
    f614:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    f618:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f61c:	5499      	strb	r1, [r3, r2]
    f61e:	4b20      	ldr	r3, [pc, #128]	; (f6a0 <send_gps_pos+0xcd8>)
    f620:	781a      	ldrb	r2, [r3, #0]
    f622:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f626:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f62a:	781b      	ldrb	r3, [r3, #0]
    f62c:	4413      	add	r3, r2
    f62e:	b2da      	uxtb	r2, r3
    f630:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f638:	701a      	strb	r2, [r3, #0]
    f63a:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f63e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f642:	781a      	ldrb	r2, [r3, #0]
    f644:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f648:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f64c:	781b      	ldrb	r3, [r3, #0]
    f64e:	4413      	add	r3, r2
    f650:	b2da      	uxtb	r2, r3
    f652:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f656:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f65a:	701a      	strb	r2, [r3, #0]
    f65c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f660:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f664:	781b      	ldrb	r3, [r3, #0]
    f666:	3301      	adds	r3, #1
    f668:	b2da      	uxtb	r2, r3
    f66a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f66e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f672:	701a      	strb	r2, [r3, #0]
    f674:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f67c:	781b      	ldrb	r3, [r3, #0]
    f67e:	2bff      	cmp	r3, #255	; 0xff
    f680:	d110      	bne.n	f6a4 <send_gps_pos+0xcdc>
    f682:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f686:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f68a:	2200      	movs	r2, #0
    f68c:	701a      	strb	r2, [r3, #0]
    f68e:	e009      	b.n	f6a4 <send_gps_pos+0xcdc>
    f690:	2000b05d 	.word	0x2000b05d
    f694:	2000b05e 	.word	0x2000b05e
    f698:	2000b05f 	.word	0x2000b05f
    f69c:	2000b061 	.word	0x2000b061
    f6a0:	2000b062 	.word	0x2000b062
    f6a4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f6a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6ac:	781b      	ldrb	r3, [r3, #0]
    f6ae:	461a      	mov	r2, r3
    f6b0:	f24b 0360 	movw	r3, #45152	; 0xb060
    f6b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6b8:	78d9      	ldrb	r1, [r3, #3]
    f6ba:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    f6be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6c2:	5499      	strb	r1, [r3, r2]
    f6c4:	4bd3      	ldr	r3, [pc, #844]	; (fa14 <send_gps_pos+0x104c>)
    f6c6:	781a      	ldrb	r2, [r3, #0]
    f6c8:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f6cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6d0:	781b      	ldrb	r3, [r3, #0]
    f6d2:	4413      	add	r3, r2
    f6d4:	b2da      	uxtb	r2, r3
    f6d6:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f6da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6de:	701a      	strb	r2, [r3, #0]
    f6e0:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f6e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6e8:	781a      	ldrb	r2, [r3, #0]
    f6ea:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f6ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f6f2:	781b      	ldrb	r3, [r3, #0]
    f6f4:	4413      	add	r3, r2
    f6f6:	b2da      	uxtb	r2, r3
    f6f8:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f6fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f700:	701a      	strb	r2, [r3, #0]
    f702:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f706:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f70a:	781b      	ldrb	r3, [r3, #0]
    f70c:	3301      	adds	r3, #1
    f70e:	b2da      	uxtb	r2, r3
    f710:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f714:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f718:	701a      	strb	r2, [r3, #0]
    f71a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f71e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f722:	781b      	ldrb	r3, [r3, #0]
    f724:	2bff      	cmp	r3, #255	; 0xff
    f726:	d105      	bne.n	f734 <send_gps_pos+0xd6c>
    f728:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f72c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f730:	2200      	movs	r2, #0
    f732:	701a      	strb	r2, [r3, #0]
    f734:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f738:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f73c:	781b      	ldrb	r3, [r3, #0]
    f73e:	461a      	mov	r2, r3
    f740:	f24b 0364 	movw	r3, #45156	; 0xb064
    f744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f748:	7819      	ldrb	r1, [r3, #0]
    f74a:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    f74e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f752:	5499      	strb	r1, [r3, r2]
    f754:	f24b 0364 	movw	r3, #45156	; 0xb064
    f758:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f75c:	781a      	ldrb	r2, [r3, #0]
    f75e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f762:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f766:	781b      	ldrb	r3, [r3, #0]
    f768:	4413      	add	r3, r2
    f76a:	b2da      	uxtb	r2, r3
    f76c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f774:	701a      	strb	r2, [r3, #0]
    f776:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f77a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f77e:	781a      	ldrb	r2, [r3, #0]
    f780:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f784:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f788:	781b      	ldrb	r3, [r3, #0]
    f78a:	4413      	add	r3, r2
    f78c:	b2da      	uxtb	r2, r3
    f78e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f792:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f796:	701a      	strb	r2, [r3, #0]
    f798:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f79c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7a0:	781b      	ldrb	r3, [r3, #0]
    f7a2:	3301      	adds	r3, #1
    f7a4:	b2da      	uxtb	r2, r3
    f7a6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f7aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7ae:	701a      	strb	r2, [r3, #0]
    f7b0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f7b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7b8:	781b      	ldrb	r3, [r3, #0]
    f7ba:	2bff      	cmp	r3, #255	; 0xff
    f7bc:	d105      	bne.n	f7ca <send_gps_pos+0xe02>
    f7be:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f7c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7c6:	2200      	movs	r2, #0
    f7c8:	701a      	strb	r2, [r3, #0]
    f7ca:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f7ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7d2:	781b      	ldrb	r3, [r3, #0]
    f7d4:	461a      	mov	r2, r3
    f7d6:	f24b 0364 	movw	r3, #45156	; 0xb064
    f7da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7de:	7859      	ldrb	r1, [r3, #1]
    f7e0:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    f7e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7e8:	5499      	strb	r1, [r3, r2]
    f7ea:	4b8b      	ldr	r3, [pc, #556]	; (fa18 <send_gps_pos+0x1050>)
    f7ec:	781a      	ldrb	r2, [r3, #0]
    f7ee:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f7f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f7f6:	781b      	ldrb	r3, [r3, #0]
    f7f8:	4413      	add	r3, r2
    f7fa:	b2da      	uxtb	r2, r3
    f7fc:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f800:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f804:	701a      	strb	r2, [r3, #0]
    f806:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f80a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f80e:	781a      	ldrb	r2, [r3, #0]
    f810:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f814:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f818:	781b      	ldrb	r3, [r3, #0]
    f81a:	4413      	add	r3, r2
    f81c:	b2da      	uxtb	r2, r3
    f81e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f822:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f826:	701a      	strb	r2, [r3, #0]
    f828:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f82c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f830:	781b      	ldrb	r3, [r3, #0]
    f832:	3301      	adds	r3, #1
    f834:	b2da      	uxtb	r2, r3
    f836:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f83a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f83e:	701a      	strb	r2, [r3, #0]
    f840:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f844:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f848:	781b      	ldrb	r3, [r3, #0]
    f84a:	2bff      	cmp	r3, #255	; 0xff
    f84c:	d105      	bne.n	f85a <send_gps_pos+0xe92>
    f84e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f852:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f856:	2200      	movs	r2, #0
    f858:	701a      	strb	r2, [r3, #0]
    f85a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f85e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f862:	781b      	ldrb	r3, [r3, #0]
    f864:	461a      	mov	r2, r3
    f866:	f24b 0364 	movw	r3, #45156	; 0xb064
    f86a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f86e:	7899      	ldrb	r1, [r3, #2]
    f870:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    f874:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f878:	5499      	strb	r1, [r3, r2]
    f87a:	4b68      	ldr	r3, [pc, #416]	; (fa1c <send_gps_pos+0x1054>)
    f87c:	781a      	ldrb	r2, [r3, #0]
    f87e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f882:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f886:	781b      	ldrb	r3, [r3, #0]
    f888:	4413      	add	r3, r2
    f88a:	b2da      	uxtb	r2, r3
    f88c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f890:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f894:	701a      	strb	r2, [r3, #0]
    f896:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f89a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f89e:	781a      	ldrb	r2, [r3, #0]
    f8a0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f8a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8a8:	781b      	ldrb	r3, [r3, #0]
    f8aa:	4413      	add	r3, r2
    f8ac:	b2da      	uxtb	r2, r3
    f8ae:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f8b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8b6:	701a      	strb	r2, [r3, #0]
    f8b8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f8bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8c0:	781b      	ldrb	r3, [r3, #0]
    f8c2:	3301      	adds	r3, #1
    f8c4:	b2da      	uxtb	r2, r3
    f8c6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f8ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8ce:	701a      	strb	r2, [r3, #0]
    f8d0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f8d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8d8:	781b      	ldrb	r3, [r3, #0]
    f8da:	2bff      	cmp	r3, #255	; 0xff
    f8dc:	d105      	bne.n	f8ea <send_gps_pos+0xf22>
    f8de:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f8e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8e6:	2200      	movs	r2, #0
    f8e8:	701a      	strb	r2, [r3, #0]
    f8ea:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f8ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8f2:	781b      	ldrb	r3, [r3, #0]
    f8f4:	461a      	mov	r2, r3
    f8f6:	f24b 0364 	movw	r3, #45156	; 0xb064
    f8fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f8fe:	78d9      	ldrb	r1, [r3, #3]
    f900:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    f904:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f908:	5499      	strb	r1, [r3, r2]
    f90a:	4b45      	ldr	r3, [pc, #276]	; (fa20 <send_gps_pos+0x1058>)
    f90c:	781a      	ldrb	r2, [r3, #0]
    f90e:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f916:	781b      	ldrb	r3, [r3, #0]
    f918:	4413      	add	r3, r2
    f91a:	b2da      	uxtb	r2, r3
    f91c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f924:	701a      	strb	r2, [r3, #0]
    f926:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f92a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f92e:	781a      	ldrb	r2, [r3, #0]
    f930:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f938:	781b      	ldrb	r3, [r3, #0]
    f93a:	4413      	add	r3, r2
    f93c:	b2da      	uxtb	r2, r3
    f93e:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f942:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f946:	701a      	strb	r2, [r3, #0]
    f948:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f94c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f950:	781b      	ldrb	r3, [r3, #0]
    f952:	3301      	adds	r3, #1
    f954:	b2da      	uxtb	r2, r3
    f956:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f95a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f95e:	701a      	strb	r2, [r3, #0]
    f960:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f964:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f968:	781b      	ldrb	r3, [r3, #0]
    f96a:	2bff      	cmp	r3, #255	; 0xff
    f96c:	d105      	bne.n	f97a <send_gps_pos+0xfb2>
    f96e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f972:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f976:	2200      	movs	r2, #0
    f978:	701a      	strb	r2, [r3, #0]
    f97a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f97e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f982:	781b      	ldrb	r3, [r3, #0]
    f984:	461a      	mov	r2, r3
    f986:	f24b 0358 	movw	r3, #45144	; 0xb058
    f98a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f98e:	7819      	ldrb	r1, [r3, #0]
    f990:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    f994:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f998:	5499      	strb	r1, [r3, r2]
    f99a:	f24b 0358 	movw	r3, #45144	; 0xb058
    f99e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9a2:	781a      	ldrb	r2, [r3, #0]
    f9a4:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f9a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9ac:	781b      	ldrb	r3, [r3, #0]
    f9ae:	4413      	add	r3, r2
    f9b0:	b2da      	uxtb	r2, r3
    f9b2:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f9b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9ba:	701a      	strb	r2, [r3, #0]
    f9bc:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f9c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9c4:	781a      	ldrb	r2, [r3, #0]
    f9c6:	f64a 73ed 	movw	r3, #45037	; 0xafed
    f9ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9ce:	781b      	ldrb	r3, [r3, #0]
    f9d0:	4413      	add	r3, r2
    f9d2:	b2da      	uxtb	r2, r3
    f9d4:	f64a 73ee 	movw	r3, #45038	; 0xafee
    f9d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9dc:	701a      	strb	r2, [r3, #0]
    f9de:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f9e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9e6:	781b      	ldrb	r3, [r3, #0]
    f9e8:	3301      	adds	r3, #1
    f9ea:	b2da      	uxtb	r2, r3
    f9ec:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f9f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9f4:	701a      	strb	r2, [r3, #0]
    f9f6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    f9fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f9fe:	781b      	ldrb	r3, [r3, #0]
    fa00:	2bff      	cmp	r3, #255	; 0xff
    fa02:	d10f      	bne.n	fa24 <send_gps_pos+0x105c>
    fa04:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fa08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa0c:	2200      	movs	r2, #0
    fa0e:	701a      	strb	r2, [r3, #0]
    fa10:	e008      	b.n	fa24 <send_gps_pos+0x105c>
    fa12:	bf00      	nop
    fa14:	2000b063 	.word	0x2000b063
    fa18:	2000b065 	.word	0x2000b065
    fa1c:	2000b066 	.word	0x2000b066
    fa20:	2000b067 	.word	0x2000b067
    fa24:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fa28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa2c:	781b      	ldrb	r3, [r3, #0]
    fa2e:	461a      	mov	r2, r3
    fa30:	f24b 0358 	movw	r3, #45144	; 0xb058
    fa34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa38:	7859      	ldrb	r1, [r3, #1]
    fa3a:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    fa3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa42:	5499      	strb	r1, [r3, r2]
    fa44:	4bc0      	ldr	r3, [pc, #768]	; (fd48 <send_gps_pos+0x1380>)
    fa46:	781a      	ldrb	r2, [r3, #0]
    fa48:	f64a 73ed 	movw	r3, #45037	; 0xafed
    fa4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa50:	781b      	ldrb	r3, [r3, #0]
    fa52:	4413      	add	r3, r2
    fa54:	b2da      	uxtb	r2, r3
    fa56:	f64a 73ed 	movw	r3, #45037	; 0xafed
    fa5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa5e:	701a      	strb	r2, [r3, #0]
    fa60:	f64a 73ee 	movw	r3, #45038	; 0xafee
    fa64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa68:	781a      	ldrb	r2, [r3, #0]
    fa6a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    fa6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa72:	781b      	ldrb	r3, [r3, #0]
    fa74:	4413      	add	r3, r2
    fa76:	b2da      	uxtb	r2, r3
    fa78:	f64a 73ee 	movw	r3, #45038	; 0xafee
    fa7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa80:	701a      	strb	r2, [r3, #0]
    fa82:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fa86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa8a:	781b      	ldrb	r3, [r3, #0]
    fa8c:	3301      	adds	r3, #1
    fa8e:	b2da      	uxtb	r2, r3
    fa90:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fa94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fa98:	701a      	strb	r2, [r3, #0]
    fa9a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fa9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    faa2:	781b      	ldrb	r3, [r3, #0]
    faa4:	2bff      	cmp	r3, #255	; 0xff
    faa6:	d105      	bne.n	fab4 <send_gps_pos+0x10ec>
    faa8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    faac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fab0:	2200      	movs	r2, #0
    fab2:	701a      	strb	r2, [r3, #0]
    fab4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fabc:	781b      	ldrb	r3, [r3, #0]
    fabe:	461a      	mov	r2, r3
    fac0:	f24b 0358 	movw	r3, #45144	; 0xb058
    fac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fac8:	7899      	ldrb	r1, [r3, #2]
    faca:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    face:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fad2:	5499      	strb	r1, [r3, r2]
    fad4:	4b9d      	ldr	r3, [pc, #628]	; (fd4c <send_gps_pos+0x1384>)
    fad6:	781a      	ldrb	r2, [r3, #0]
    fad8:	f64a 73ed 	movw	r3, #45037	; 0xafed
    fadc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fae0:	781b      	ldrb	r3, [r3, #0]
    fae2:	4413      	add	r3, r2
    fae4:	b2da      	uxtb	r2, r3
    fae6:	f64a 73ed 	movw	r3, #45037	; 0xafed
    faea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    faee:	701a      	strb	r2, [r3, #0]
    faf0:	f64a 73ee 	movw	r3, #45038	; 0xafee
    faf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    faf8:	781a      	ldrb	r2, [r3, #0]
    fafa:	f64a 73ed 	movw	r3, #45037	; 0xafed
    fafe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb02:	781b      	ldrb	r3, [r3, #0]
    fb04:	4413      	add	r3, r2
    fb06:	b2da      	uxtb	r2, r3
    fb08:	f64a 73ee 	movw	r3, #45038	; 0xafee
    fb0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb10:	701a      	strb	r2, [r3, #0]
    fb12:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fb16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb1a:	781b      	ldrb	r3, [r3, #0]
    fb1c:	3301      	adds	r3, #1
    fb1e:	b2da      	uxtb	r2, r3
    fb20:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fb24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb28:	701a      	strb	r2, [r3, #0]
    fb2a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fb2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb32:	781b      	ldrb	r3, [r3, #0]
    fb34:	2bff      	cmp	r3, #255	; 0xff
    fb36:	d105      	bne.n	fb44 <send_gps_pos+0x117c>
    fb38:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fb3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb40:	2200      	movs	r2, #0
    fb42:	701a      	strb	r2, [r3, #0]
    fb44:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fb48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb4c:	781b      	ldrb	r3, [r3, #0]
    fb4e:	461a      	mov	r2, r3
    fb50:	f24b 0358 	movw	r3, #45144	; 0xb058
    fb54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb58:	78d9      	ldrb	r1, [r3, #3]
    fb5a:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    fb5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb62:	5499      	strb	r1, [r3, r2]
    fb64:	4b7a      	ldr	r3, [pc, #488]	; (fd50 <send_gps_pos+0x1388>)
    fb66:	781a      	ldrb	r2, [r3, #0]
    fb68:	f64a 73ed 	movw	r3, #45037	; 0xafed
    fb6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb70:	781b      	ldrb	r3, [r3, #0]
    fb72:	4413      	add	r3, r2
    fb74:	b2da      	uxtb	r2, r3
    fb76:	f64a 73ed 	movw	r3, #45037	; 0xafed
    fb7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb7e:	701a      	strb	r2, [r3, #0]
    fb80:	f64a 73ee 	movw	r3, #45038	; 0xafee
    fb84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb88:	781a      	ldrb	r2, [r3, #0]
    fb8a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    fb8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fb92:	781b      	ldrb	r3, [r3, #0]
    fb94:	4413      	add	r3, r2
    fb96:	b2da      	uxtb	r2, r3
    fb98:	f64a 73ee 	movw	r3, #45038	; 0xafee
    fb9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fba0:	701a      	strb	r2, [r3, #0]
    fba2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbaa:	781b      	ldrb	r3, [r3, #0]
    fbac:	3301      	adds	r3, #1
    fbae:	b2da      	uxtb	r2, r3
    fbb0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fbb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbb8:	701a      	strb	r2, [r3, #0]
    fbba:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fbbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbc2:	781b      	ldrb	r3, [r3, #0]
    fbc4:	2bff      	cmp	r3, #255	; 0xff
    fbc6:	d105      	bne.n	fbd4 <send_gps_pos+0x120c>
    fbc8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fbcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbd0:	2200      	movs	r2, #0
    fbd2:	701a      	strb	r2, [r3, #0]
    fbd4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fbd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbdc:	781b      	ldrb	r3, [r3, #0]
    fbde:	461a      	mov	r2, r3
    fbe0:	f64a 73ed 	movw	r3, #45037	; 0xafed
    fbe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbe8:	7819      	ldrb	r1, [r3, #0]
    fbea:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    fbee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbf2:	5499      	strb	r1, [r3, r2]
    fbf4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fbf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fbfc:	781b      	ldrb	r3, [r3, #0]
    fbfe:	3301      	adds	r3, #1
    fc00:	b2da      	uxtb	r2, r3
    fc02:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fc06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc0a:	701a      	strb	r2, [r3, #0]
    fc0c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fc10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc14:	781b      	ldrb	r3, [r3, #0]
    fc16:	2bff      	cmp	r3, #255	; 0xff
    fc18:	d105      	bne.n	fc26 <send_gps_pos+0x125e>
    fc1a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fc1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc22:	2200      	movs	r2, #0
    fc24:	701a      	strb	r2, [r3, #0]
    fc26:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fc2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc2e:	781b      	ldrb	r3, [r3, #0]
    fc30:	461a      	mov	r2, r3
    fc32:	f64a 73ee 	movw	r3, #45038	; 0xafee
    fc36:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc3a:	7819      	ldrb	r1, [r3, #0]
    fc3c:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    fc40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc44:	5499      	strb	r1, [r3, r2]
    fc46:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fc4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc4e:	781b      	ldrb	r3, [r3, #0]
    fc50:	3301      	adds	r3, #1
    fc52:	b2da      	uxtb	r2, r3
    fc54:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fc58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc5c:	701a      	strb	r2, [r3, #0]
    fc5e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fc62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc66:	781b      	ldrb	r3, [r3, #0]
    fc68:	2bff      	cmp	r3, #255	; 0xff
    fc6a:	d105      	bne.n	fc78 <send_gps_pos+0x12b0>
    fc6c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fc70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc74:	2200      	movs	r2, #0
    fc76:	701a      	strb	r2, [r3, #0]
    fc78:	f242 0339 	movw	r3, #8249	; 0x2039
    fc7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc80:	781b      	ldrb	r3, [r3, #0]
    fc82:	b2db      	uxtb	r3, r3
    fc84:	f003 0310 	and.w	r3, r3, #16
    fc88:	2b00      	cmp	r3, #0
    fc8a:	d15a      	bne.n	fd42 <send_gps_pos+0x137a>
    fc8c:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    fc90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fc94:	781b      	ldrb	r3, [r3, #0]
    fc96:	b2db      	uxtb	r3, r3
    fc98:	461a      	mov	r2, r3
    fc9a:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    fc9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fca2:	5c9a      	ldrb	r2, [r3, r2]
    fca4:	f64a 73eb 	movw	r3, #45035	; 0xafeb
    fca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcac:	701a      	strb	r2, [r3, #0]
    fcae:	f64a 73ec 	movw	r3, #45036	; 0xafec
    fcb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcb6:	2200      	movs	r2, #0
    fcb8:	701a      	strb	r2, [r3, #0]
    fcba:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    fcbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcc2:	781b      	ldrb	r3, [r3, #0]
    fcc4:	b2db      	uxtb	r3, r3
    fcc6:	3301      	adds	r3, #1
    fcc8:	b2da      	uxtb	r2, r3
    fcca:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    fcce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcd2:	701a      	strb	r2, [r3, #0]
    fcd4:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    fcd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcdc:	781b      	ldrb	r3, [r3, #0]
    fcde:	b2db      	uxtb	r3, r3
    fce0:	2bff      	cmp	r3, #255	; 0xff
    fce2:	d105      	bne.n	fcf0 <send_gps_pos+0x1328>
    fce4:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    fce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcec:	2200      	movs	r2, #0
    fcee:	701a      	strb	r2, [r3, #0]
    fcf0:	f242 0338 	movw	r3, #8248	; 0x2038
    fcf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fcf8:	f242 0238 	movw	r2, #8248	; 0x2038
    fcfc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fd00:	7812      	ldrb	r2, [r2, #0]
    fd02:	b2d2      	uxtb	r2, r2
    fd04:	f042 0201 	orr.w	r2, r2, #1
    fd08:	b2d2      	uxtb	r2, r2
    fd0a:	701a      	strb	r2, [r3, #0]
    fd0c:	f242 0339 	movw	r3, #8249	; 0x2039
    fd10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd14:	f242 0239 	movw	r2, #8249	; 0x2039
    fd18:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fd1c:	7812      	ldrb	r2, [r2, #0]
    fd1e:	b2d2      	uxtb	r2, r2
    fd20:	f042 0210 	orr.w	r2, r2, #16
    fd24:	b2d2      	uxtb	r2, r2
    fd26:	701a      	strb	r2, [r3, #0]
    fd28:	e00b      	b.n	fd42 <send_gps_pos+0x137a>
    fd2a:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    fd2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd32:	781b      	ldrb	r3, [r3, #0]
    fd34:	3301      	adds	r3, #1
    fd36:	b2da      	uxtb	r2, r3
    fd38:	f64a 63e8 	movw	r3, #44776	; 0xaee8
    fd3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd40:	701a      	strb	r2, [r3, #0]
     estimator_update_state_gps();
    fd42:	f005 fbfd 	bl	15540 <estimator_update_state_gps>
  }
}
    fd46:	bd80      	pop	{r7, pc}
    fd48:	2000b059 	.word	0x2000b059
    fd4c:	2000b05a 	.word	0x2000b05a
    fd50:	2000b05b 	.word	0x2000b05b

0000fd54 <send_radIR>:

void send_radIR(void){
    fd54:	b480      	push	{r7}
    fd56:	af00      	add	r7, sp, #0
  if (gps_pos_available)
    fd58:	f24b 037e 	movw	r3, #45182	; 0xb07e
    fd5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd60:	781b      	ldrb	r3, [r3, #0]
    fd62:	2b00      	cmp	r3, #0
    fd64:	f000 85e8 	beq.w	10938 <send_radIR+0xbe4>
     DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    fd68:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fd6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd70:	781a      	ldrb	r2, [r3, #0]
    fd72:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    fd76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd7a:	781b      	ldrb	r3, [r3, #0]
    fd7c:	b2db      	uxtb	r3, r3
    fd7e:	429a      	cmp	r2, r3
    fd80:	d313      	bcc.n	fdaa <send_radIR+0x56>
    fd82:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    fd86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd8a:	781b      	ldrb	r3, [r3, #0]
    fd8c:	b2db      	uxtb	r3, r3
    fd8e:	461a      	mov	r2, r3
    fd90:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fd94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fd98:	781b      	ldrb	r3, [r3, #0]
    fd9a:	1ad3      	subs	r3, r2, r3
    fd9c:	33ff      	adds	r3, #255	; 0xff
    fd9e:	2b14      	cmp	r3, #20
    fda0:	bfd4      	ite	le
    fda2:	2300      	movle	r3, #0
    fda4:	2301      	movgt	r3, #1
    fda6:	b2db      	uxtb	r3, r3
    fda8:	e011      	b.n	fdce <send_radIR+0x7a>
    fdaa:	f64a 63ea 	movw	r3, #44778	; 0xaeea
    fdae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdb2:	781b      	ldrb	r3, [r3, #0]
    fdb4:	b2db      	uxtb	r3, r3
    fdb6:	461a      	mov	r2, r3
    fdb8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fdbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdc0:	781b      	ldrb	r3, [r3, #0]
    fdc2:	1ad3      	subs	r3, r2, r3
    fdc4:	2b14      	cmp	r3, #20
    fdc6:	bfd4      	ite	le
    fdc8:	2300      	movle	r3, #0
    fdca:	2301      	movgt	r3, #1
    fdcc:	b2db      	uxtb	r3, r3
    fdce:	2b00      	cmp	r3, #0
    fdd0:	f000 85a6 	beq.w	10920 <send_radIR+0xbcc>
    fdd4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fdd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fddc:	781b      	ldrb	r3, [r3, #0]
    fdde:	461a      	mov	r2, r3
    fde0:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    fde4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fde8:	2105      	movs	r1, #5
    fdea:	5499      	strb	r1, [r3, r2]
    fdec:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fdf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fdf4:	781b      	ldrb	r3, [r3, #0]
    fdf6:	3301      	adds	r3, #1
    fdf8:	b2da      	uxtb	r2, r3
    fdfa:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fdfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe02:	701a      	strb	r2, [r3, #0]
    fe04:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fe08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe0c:	781b      	ldrb	r3, [r3, #0]
    fe0e:	2bff      	cmp	r3, #255	; 0xff
    fe10:	d105      	bne.n	fe1e <send_radIR+0xca>
    fe12:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fe16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe1a:	2200      	movs	r2, #0
    fe1c:	701a      	strb	r2, [r3, #0]
    fe1e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fe22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe26:	781b      	ldrb	r3, [r3, #0]
    fe28:	461a      	mov	r2, r3
    fe2a:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    fe2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe32:	2105      	movs	r1, #5
    fe34:	5499      	strb	r1, [r3, r2]
    fe36:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fe3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe3e:	781b      	ldrb	r3, [r3, #0]
    fe40:	3301      	adds	r3, #1
    fe42:	b2da      	uxtb	r2, r3
    fe44:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fe48:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe4c:	701a      	strb	r2, [r3, #0]
    fe4e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fe52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe56:	781b      	ldrb	r3, [r3, #0]
    fe58:	2bff      	cmp	r3, #255	; 0xff
    fe5a:	d105      	bne.n	fe68 <send_radIR+0x114>
    fe5c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fe60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe64:	2200      	movs	r2, #0
    fe66:	701a      	strb	r2, [r3, #0]
    fe68:	f64a 73ed 	movw	r3, #45037	; 0xafed
    fe6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe70:	2205      	movs	r2, #5
    fe72:	701a      	strb	r2, [r3, #0]
    fe74:	f64a 73ee 	movw	r3, #45038	; 0xafee
    fe78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe7c:	2205      	movs	r2, #5
    fe7e:	701a      	strb	r2, [r3, #0]
    fe80:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fe84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe88:	781b      	ldrb	r3, [r3, #0]
    fe8a:	461a      	mov	r2, r3
    fe8c:	f24b 43e0 	movw	r3, #46304	; 0xb4e0
    fe90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe94:	7819      	ldrb	r1, [r3, #0]
    fe96:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    fe9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe9e:	5499      	strb	r1, [r3, r2]
    fea0:	f24b 43e0 	movw	r3, #46304	; 0xb4e0
    fea4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fea8:	781a      	ldrb	r2, [r3, #0]
    feaa:	f64a 73ed 	movw	r3, #45037	; 0xafed
    feae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    feb2:	781b      	ldrb	r3, [r3, #0]
    feb4:	4413      	add	r3, r2
    feb6:	b2da      	uxtb	r2, r3
    feb8:	f64a 73ed 	movw	r3, #45037	; 0xafed
    febc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fec0:	701a      	strb	r2, [r3, #0]
    fec2:	f64a 73ee 	movw	r3, #45038	; 0xafee
    fec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    feca:	781a      	ldrb	r2, [r3, #0]
    fecc:	f64a 73ed 	movw	r3, #45037	; 0xafed
    fed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fed4:	781b      	ldrb	r3, [r3, #0]
    fed6:	4413      	add	r3, r2
    fed8:	b2da      	uxtb	r2, r3
    feda:	f64a 73ee 	movw	r3, #45038	; 0xafee
    fede:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fee2:	701a      	strb	r2, [r3, #0]
    fee4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fee8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    feec:	781b      	ldrb	r3, [r3, #0]
    feee:	3301      	adds	r3, #1
    fef0:	b2da      	uxtb	r2, r3
    fef2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    fef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fefa:	701a      	strb	r2, [r3, #0]
    fefc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ff00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff04:	781b      	ldrb	r3, [r3, #0]
    ff06:	2bff      	cmp	r3, #255	; 0xff
    ff08:	d105      	bne.n	ff16 <send_radIR+0x1c2>
    ff0a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ff0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff12:	2200      	movs	r2, #0
    ff14:	701a      	strb	r2, [r3, #0]
    ff16:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ff1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff1e:	781b      	ldrb	r3, [r3, #0]
    ff20:	461a      	mov	r2, r3
    ff22:	f24b 43e0 	movw	r3, #46304	; 0xb4e0
    ff26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff2a:	7859      	ldrb	r1, [r3, #1]
    ff2c:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    ff30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff34:	5499      	strb	r1, [r3, r2]
    ff36:	4bd2      	ldr	r3, [pc, #840]	; (10280 <send_radIR+0x52c>)
    ff38:	781a      	ldrb	r2, [r3, #0]
    ff3a:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ff3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff42:	781b      	ldrb	r3, [r3, #0]
    ff44:	4413      	add	r3, r2
    ff46:	b2da      	uxtb	r2, r3
    ff48:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ff4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff50:	701a      	strb	r2, [r3, #0]
    ff52:	f64a 73ee 	movw	r3, #45038	; 0xafee
    ff56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff5a:	781a      	ldrb	r2, [r3, #0]
    ff5c:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ff60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff64:	781b      	ldrb	r3, [r3, #0]
    ff66:	4413      	add	r3, r2
    ff68:	b2da      	uxtb	r2, r3
    ff6a:	f64a 73ee 	movw	r3, #45038	; 0xafee
    ff6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff72:	701a      	strb	r2, [r3, #0]
    ff74:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ff78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff7c:	781b      	ldrb	r3, [r3, #0]
    ff7e:	3301      	adds	r3, #1
    ff80:	b2da      	uxtb	r2, r3
    ff82:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ff86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff8a:	701a      	strb	r2, [r3, #0]
    ff8c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ff90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ff94:	781b      	ldrb	r3, [r3, #0]
    ff96:	2bff      	cmp	r3, #255	; 0xff
    ff98:	d105      	bne.n	ffa6 <send_radIR+0x252>
    ff9a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ff9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffa2:	2200      	movs	r2, #0
    ffa4:	701a      	strb	r2, [r3, #0]
    ffa6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
    ffaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffae:	781b      	ldrb	r3, [r3, #0]
    ffb0:	461a      	mov	r2, r3
    ffb2:	f24b 43e0 	movw	r3, #46304	; 0xb4e0
    ffb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffba:	7899      	ldrb	r1, [r3, #2]
    ffbc:	f64a 63ec 	movw	r3, #44780	; 0xaeec
    ffc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffc4:	5499      	strb	r1, [r3, r2]
    ffc6:	4baf      	ldr	r3, [pc, #700]	; (10284 <send_radIR+0x530>)
    ffc8:	781a      	ldrb	r2, [r3, #0]
    ffca:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ffce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffd2:	781b      	ldrb	r3, [r3, #0]
    ffd4:	4413      	add	r3, r2
    ffd6:	b2da      	uxtb	r2, r3
    ffd8:	f64a 73ed 	movw	r3, #45037	; 0xafed
    ffdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffe0:	701a      	strb	r2, [r3, #0]
    ffe2:	f64a 73ee 	movw	r3, #45038	; 0xafee
    ffe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ffea:	781a      	ldrb	r2, [r3, #0]
    ffec:	f64a 73ed 	movw	r3, #45037	; 0xafed
    fff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fff4:	781b      	ldrb	r3, [r3, #0]
    fff6:	4413      	add	r3, r2
    fff8:	b2da      	uxtb	r2, r3
    fffa:	f64a 73ee 	movw	r3, #45038	; 0xafee
    fffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10002:	701a      	strb	r2, [r3, #0]
   10004:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10008:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1000c:	781b      	ldrb	r3, [r3, #0]
   1000e:	3301      	adds	r3, #1
   10010:	b2da      	uxtb	r2, r3
   10012:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10016:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1001a:	701a      	strb	r2, [r3, #0]
   1001c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10020:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10024:	781b      	ldrb	r3, [r3, #0]
   10026:	2bff      	cmp	r3, #255	; 0xff
   10028:	d105      	bne.n	10036 <send_radIR+0x2e2>
   1002a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   1002e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10032:	2200      	movs	r2, #0
   10034:	701a      	strb	r2, [r3, #0]
   10036:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   1003a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1003e:	781b      	ldrb	r3, [r3, #0]
   10040:	461a      	mov	r2, r3
   10042:	f24b 43e0 	movw	r3, #46304	; 0xb4e0
   10046:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1004a:	78d9      	ldrb	r1, [r3, #3]
   1004c:	f64a 63ec 	movw	r3, #44780	; 0xaeec
   10050:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10054:	5499      	strb	r1, [r3, r2]
   10056:	4b8c      	ldr	r3, [pc, #560]	; (10288 <send_radIR+0x534>)
   10058:	781a      	ldrb	r2, [r3, #0]
   1005a:	f64a 73ed 	movw	r3, #45037	; 0xafed
   1005e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10062:	781b      	ldrb	r3, [r3, #0]
   10064:	4413      	add	r3, r2
   10066:	b2da      	uxtb	r2, r3
   10068:	f64a 73ed 	movw	r3, #45037	; 0xafed
   1006c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10070:	701a      	strb	r2, [r3, #0]
   10072:	f64a 73ee 	movw	r3, #45038	; 0xafee
   10076:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1007a:	781a      	ldrb	r2, [r3, #0]
   1007c:	f64a 73ed 	movw	r3, #45037	; 0xafed
   10080:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10084:	781b      	ldrb	r3, [r3, #0]
   10086:	4413      	add	r3, r2
   10088:	b2da      	uxtb	r2, r3
   1008a:	f64a 73ee 	movw	r3, #45038	; 0xafee
   1008e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10092:	701a      	strb	r2, [r3, #0]
   10094:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10098:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1009c:	781b      	ldrb	r3, [r3, #0]
   1009e:	3301      	adds	r3, #1
   100a0:	b2da      	uxtb	r2, r3
   100a2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   100a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100aa:	701a      	strb	r2, [r3, #0]
   100ac:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   100b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100b4:	781b      	ldrb	r3, [r3, #0]
   100b6:	2bff      	cmp	r3, #255	; 0xff
   100b8:	d105      	bne.n	100c6 <send_radIR+0x372>
   100ba:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   100be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100c2:	2200      	movs	r2, #0
   100c4:	701a      	strb	r2, [r3, #0]
   100c6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   100ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100ce:	781b      	ldrb	r3, [r3, #0]
   100d0:	461a      	mov	r2, r3
   100d2:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
   100d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100da:	7819      	ldrb	r1, [r3, #0]
   100dc:	f64a 63ec 	movw	r3, #44780	; 0xaeec
   100e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100e4:	5499      	strb	r1, [r3, r2]
   100e6:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
   100ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100ee:	781a      	ldrb	r2, [r3, #0]
   100f0:	f64a 73ed 	movw	r3, #45037	; 0xafed
   100f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100f8:	781b      	ldrb	r3, [r3, #0]
   100fa:	4413      	add	r3, r2
   100fc:	b2da      	uxtb	r2, r3
   100fe:	f64a 73ed 	movw	r3, #45037	; 0xafed
   10102:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10106:	701a      	strb	r2, [r3, #0]
   10108:	f64a 73ee 	movw	r3, #45038	; 0xafee
   1010c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10110:	781a      	ldrb	r2, [r3, #0]
   10112:	f64a 73ed 	movw	r3, #45037	; 0xafed
   10116:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1011a:	781b      	ldrb	r3, [r3, #0]
   1011c:	4413      	add	r3, r2
   1011e:	b2da      	uxtb	r2, r3
   10120:	f64a 73ee 	movw	r3, #45038	; 0xafee
   10124:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10128:	701a      	strb	r2, [r3, #0]
   1012a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   1012e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10132:	781b      	ldrb	r3, [r3, #0]
   10134:	3301      	adds	r3, #1
   10136:	b2da      	uxtb	r2, r3
   10138:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   1013c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10140:	701a      	strb	r2, [r3, #0]
   10142:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10146:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1014a:	781b      	ldrb	r3, [r3, #0]
   1014c:	2bff      	cmp	r3, #255	; 0xff
   1014e:	d105      	bne.n	1015c <send_radIR+0x408>
   10150:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10154:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10158:	2200      	movs	r2, #0
   1015a:	701a      	strb	r2, [r3, #0]
   1015c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10160:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10164:	781b      	ldrb	r3, [r3, #0]
   10166:	461a      	mov	r2, r3
   10168:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
   1016c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10170:	7859      	ldrb	r1, [r3, #1]
   10172:	f64a 63ec 	movw	r3, #44780	; 0xaeec
   10176:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1017a:	5499      	strb	r1, [r3, r2]
   1017c:	4b43      	ldr	r3, [pc, #268]	; (1028c <send_radIR+0x538>)
   1017e:	781a      	ldrb	r2, [r3, #0]
   10180:	f64a 73ed 	movw	r3, #45037	; 0xafed
   10184:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10188:	781b      	ldrb	r3, [r3, #0]
   1018a:	4413      	add	r3, r2
   1018c:	b2da      	uxtb	r2, r3
   1018e:	f64a 73ed 	movw	r3, #45037	; 0xafed
   10192:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10196:	701a      	strb	r2, [r3, #0]
   10198:	f64a 73ee 	movw	r3, #45038	; 0xafee
   1019c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101a0:	781a      	ldrb	r2, [r3, #0]
   101a2:	f64a 73ed 	movw	r3, #45037	; 0xafed
   101a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101aa:	781b      	ldrb	r3, [r3, #0]
   101ac:	4413      	add	r3, r2
   101ae:	b2da      	uxtb	r2, r3
   101b0:	f64a 73ee 	movw	r3, #45038	; 0xafee
   101b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101b8:	701a      	strb	r2, [r3, #0]
   101ba:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   101be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101c2:	781b      	ldrb	r3, [r3, #0]
   101c4:	3301      	adds	r3, #1
   101c6:	b2da      	uxtb	r2, r3
   101c8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   101cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101d0:	701a      	strb	r2, [r3, #0]
   101d2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   101d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101da:	781b      	ldrb	r3, [r3, #0]
   101dc:	2bff      	cmp	r3, #255	; 0xff
   101de:	d105      	bne.n	101ec <send_radIR+0x498>
   101e0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   101e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101e8:	2200      	movs	r2, #0
   101ea:	701a      	strb	r2, [r3, #0]
   101ec:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   101f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101f4:	781b      	ldrb	r3, [r3, #0]
   101f6:	461a      	mov	r2, r3
   101f8:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
   101fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10200:	7899      	ldrb	r1, [r3, #2]
   10202:	f64a 63ec 	movw	r3, #44780	; 0xaeec
   10206:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1020a:	5499      	strb	r1, [r3, r2]
   1020c:	4b20      	ldr	r3, [pc, #128]	; (10290 <send_radIR+0x53c>)
   1020e:	781a      	ldrb	r2, [r3, #0]
   10210:	f64a 73ed 	movw	r3, #45037	; 0xafed
   10214:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10218:	781b      	ldrb	r3, [r3, #0]
   1021a:	4413      	add	r3, r2
   1021c:	b2da      	uxtb	r2, r3
   1021e:	f64a 73ed 	movw	r3, #45037	; 0xafed
   10222:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10226:	701a      	strb	r2, [r3, #0]
   10228:	f64a 73ee 	movw	r3, #45038	; 0xafee
   1022c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10230:	781a      	ldrb	r2, [r3, #0]
   10232:	f64a 73ed 	movw	r3, #45037	; 0xafed
   10236:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1023a:	781b      	ldrb	r3, [r3, #0]
   1023c:	4413      	add	r3, r2
   1023e:	b2da      	uxtb	r2, r3
   10240:	f64a 73ee 	movw	r3, #45038	; 0xafee
   10244:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10248:	701a      	strb	r2, [r3, #0]
   1024a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   1024e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10252:	781b      	ldrb	r3, [r3, #0]
   10254:	3301      	adds	r3, #1
   10256:	b2da      	uxtb	r2, r3
   10258:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   1025c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10260:	701a      	strb	r2, [r3, #0]
   10262:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10266:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1026a:	781b      	ldrb	r3, [r3, #0]
   1026c:	2bff      	cmp	r3, #255	; 0xff
   1026e:	d111      	bne.n	10294 <send_radIR+0x540>
   10270:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10274:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10278:	2200      	movs	r2, #0
   1027a:	701a      	strb	r2, [r3, #0]
   1027c:	e00a      	b.n	10294 <send_radIR+0x540>
   1027e:	bf00      	nop
   10280:	2000b4e1 	.word	0x2000b4e1
   10284:	2000b4e2 	.word	0x2000b4e2
   10288:	2000b4e3 	.word	0x2000b4e3
   1028c:	2000b4e5 	.word	0x2000b4e5
   10290:	2000b4e6 	.word	0x2000b4e6
   10294:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10298:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1029c:	781b      	ldrb	r3, [r3, #0]
   1029e:	461a      	mov	r2, r3
   102a0:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
   102a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102a8:	78d9      	ldrb	r1, [r3, #3]
   102aa:	f64a 63ec 	movw	r3, #44780	; 0xaeec
   102ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102b2:	5499      	strb	r1, [r3, r2]
   102b4:	4bd3      	ldr	r3, [pc, #844]	; (10604 <send_radIR+0x8b0>)
   102b6:	781a      	ldrb	r2, [r3, #0]
   102b8:	f64a 73ed 	movw	r3, #45037	; 0xafed
   102bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102c0:	781b      	ldrb	r3, [r3, #0]
   102c2:	4413      	add	r3, r2
   102c4:	b2da      	uxtb	r2, r3
   102c6:	f64a 73ed 	movw	r3, #45037	; 0xafed
   102ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102ce:	701a      	strb	r2, [r3, #0]
   102d0:	f64a 73ee 	movw	r3, #45038	; 0xafee
   102d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102d8:	781a      	ldrb	r2, [r3, #0]
   102da:	f64a 73ed 	movw	r3, #45037	; 0xafed
   102de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102e2:	781b      	ldrb	r3, [r3, #0]
   102e4:	4413      	add	r3, r2
   102e6:	b2da      	uxtb	r2, r3
   102e8:	f64a 73ee 	movw	r3, #45038	; 0xafee
   102ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102f0:	701a      	strb	r2, [r3, #0]
   102f2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   102f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102fa:	781b      	ldrb	r3, [r3, #0]
   102fc:	3301      	adds	r3, #1
   102fe:	b2da      	uxtb	r2, r3
   10300:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10304:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10308:	701a      	strb	r2, [r3, #0]
   1030a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   1030e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10312:	781b      	ldrb	r3, [r3, #0]
   10314:	2bff      	cmp	r3, #255	; 0xff
   10316:	d105      	bne.n	10324 <send_radIR+0x5d0>
   10318:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   1031c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10320:	2200      	movs	r2, #0
   10322:	701a      	strb	r2, [r3, #0]
   10324:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10328:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1032c:	781b      	ldrb	r3, [r3, #0]
   1032e:	461a      	mov	r2, r3
   10330:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
   10334:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10338:	7819      	ldrb	r1, [r3, #0]
   1033a:	f64a 63ec 	movw	r3, #44780	; 0xaeec
   1033e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10342:	5499      	strb	r1, [r3, r2]
   10344:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
   10348:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1034c:	781a      	ldrb	r2, [r3, #0]
   1034e:	f64a 73ed 	movw	r3, #45037	; 0xafed
   10352:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10356:	781b      	ldrb	r3, [r3, #0]
   10358:	4413      	add	r3, r2
   1035a:	b2da      	uxtb	r2, r3
   1035c:	f64a 73ed 	movw	r3, #45037	; 0xafed
   10360:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10364:	701a      	strb	r2, [r3, #0]
   10366:	f64a 73ee 	movw	r3, #45038	; 0xafee
   1036a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1036e:	781a      	ldrb	r2, [r3, #0]
   10370:	f64a 73ed 	movw	r3, #45037	; 0xafed
   10374:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10378:	781b      	ldrb	r3, [r3, #0]
   1037a:	4413      	add	r3, r2
   1037c:	b2da      	uxtb	r2, r3
   1037e:	f64a 73ee 	movw	r3, #45038	; 0xafee
   10382:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10386:	701a      	strb	r2, [r3, #0]
   10388:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   1038c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10390:	781b      	ldrb	r3, [r3, #0]
   10392:	3301      	adds	r3, #1
   10394:	b2da      	uxtb	r2, r3
   10396:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   1039a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1039e:	701a      	strb	r2, [r3, #0]
   103a0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   103a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103a8:	781b      	ldrb	r3, [r3, #0]
   103aa:	2bff      	cmp	r3, #255	; 0xff
   103ac:	d105      	bne.n	103ba <send_radIR+0x666>
   103ae:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   103b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103b6:	2200      	movs	r2, #0
   103b8:	701a      	strb	r2, [r3, #0]
   103ba:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   103be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103c2:	781b      	ldrb	r3, [r3, #0]
   103c4:	461a      	mov	r2, r3
   103c6:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
   103ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103ce:	7859      	ldrb	r1, [r3, #1]
   103d0:	f64a 63ec 	movw	r3, #44780	; 0xaeec
   103d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103d8:	5499      	strb	r1, [r3, r2]
   103da:	4b8b      	ldr	r3, [pc, #556]	; (10608 <send_radIR+0x8b4>)
   103dc:	781a      	ldrb	r2, [r3, #0]
   103de:	f64a 73ed 	movw	r3, #45037	; 0xafed
   103e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103e6:	781b      	ldrb	r3, [r3, #0]
   103e8:	4413      	add	r3, r2
   103ea:	b2da      	uxtb	r2, r3
   103ec:	f64a 73ed 	movw	r3, #45037	; 0xafed
   103f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103f4:	701a      	strb	r2, [r3, #0]
   103f6:	f64a 73ee 	movw	r3, #45038	; 0xafee
   103fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   103fe:	781a      	ldrb	r2, [r3, #0]
   10400:	f64a 73ed 	movw	r3, #45037	; 0xafed
   10404:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10408:	781b      	ldrb	r3, [r3, #0]
   1040a:	4413      	add	r3, r2
   1040c:	b2da      	uxtb	r2, r3
   1040e:	f64a 73ee 	movw	r3, #45038	; 0xafee
   10412:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10416:	701a      	strb	r2, [r3, #0]
   10418:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   1041c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10420:	781b      	ldrb	r3, [r3, #0]
   10422:	3301      	adds	r3, #1
   10424:	b2da      	uxtb	r2, r3
   10426:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   1042a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1042e:	701a      	strb	r2, [r3, #0]
   10430:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10434:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10438:	781b      	ldrb	r3, [r3, #0]
   1043a:	2bff      	cmp	r3, #255	; 0xff
   1043c:	d105      	bne.n	1044a <send_radIR+0x6f6>
   1043e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10442:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10446:	2200      	movs	r2, #0
   10448:	701a      	strb	r2, [r3, #0]
   1044a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   1044e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10452:	781b      	ldrb	r3, [r3, #0]
   10454:	461a      	mov	r2, r3
   10456:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
   1045a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1045e:	7899      	ldrb	r1, [r3, #2]
   10460:	f64a 63ec 	movw	r3, #44780	; 0xaeec
   10464:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10468:	5499      	strb	r1, [r3, r2]
   1046a:	4b68      	ldr	r3, [pc, #416]	; (1060c <send_radIR+0x8b8>)
   1046c:	781a      	ldrb	r2, [r3, #0]
   1046e:	f64a 73ed 	movw	r3, #45037	; 0xafed
   10472:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10476:	781b      	ldrb	r3, [r3, #0]
   10478:	4413      	add	r3, r2
   1047a:	b2da      	uxtb	r2, r3
   1047c:	f64a 73ed 	movw	r3, #45037	; 0xafed
   10480:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10484:	701a      	strb	r2, [r3, #0]
   10486:	f64a 73ee 	movw	r3, #45038	; 0xafee
   1048a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1048e:	781a      	ldrb	r2, [r3, #0]
   10490:	f64a 73ed 	movw	r3, #45037	; 0xafed
   10494:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10498:	781b      	ldrb	r3, [r3, #0]
   1049a:	4413      	add	r3, r2
   1049c:	b2da      	uxtb	r2, r3
   1049e:	f64a 73ee 	movw	r3, #45038	; 0xafee
   104a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104a6:	701a      	strb	r2, [r3, #0]
   104a8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   104ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104b0:	781b      	ldrb	r3, [r3, #0]
   104b2:	3301      	adds	r3, #1
   104b4:	b2da      	uxtb	r2, r3
   104b6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   104ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104be:	701a      	strb	r2, [r3, #0]
   104c0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   104c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104c8:	781b      	ldrb	r3, [r3, #0]
   104ca:	2bff      	cmp	r3, #255	; 0xff
   104cc:	d105      	bne.n	104da <send_radIR+0x786>
   104ce:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   104d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104d6:	2200      	movs	r2, #0
   104d8:	701a      	strb	r2, [r3, #0]
   104da:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   104de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104e2:	781b      	ldrb	r3, [r3, #0]
   104e4:	461a      	mov	r2, r3
   104e6:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
   104ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104ee:	78d9      	ldrb	r1, [r3, #3]
   104f0:	f64a 63ec 	movw	r3, #44780	; 0xaeec
   104f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   104f8:	5499      	strb	r1, [r3, r2]
   104fa:	4b45      	ldr	r3, [pc, #276]	; (10610 <send_radIR+0x8bc>)
   104fc:	781a      	ldrb	r2, [r3, #0]
   104fe:	f64a 73ed 	movw	r3, #45037	; 0xafed
   10502:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10506:	781b      	ldrb	r3, [r3, #0]
   10508:	4413      	add	r3, r2
   1050a:	b2da      	uxtb	r2, r3
   1050c:	f64a 73ed 	movw	r3, #45037	; 0xafed
   10510:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10514:	701a      	strb	r2, [r3, #0]
   10516:	f64a 73ee 	movw	r3, #45038	; 0xafee
   1051a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1051e:	781a      	ldrb	r2, [r3, #0]
   10520:	f64a 73ed 	movw	r3, #45037	; 0xafed
   10524:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10528:	781b      	ldrb	r3, [r3, #0]
   1052a:	4413      	add	r3, r2
   1052c:	b2da      	uxtb	r2, r3
   1052e:	f64a 73ee 	movw	r3, #45038	; 0xafee
   10532:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10536:	701a      	strb	r2, [r3, #0]
   10538:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   1053c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10540:	781b      	ldrb	r3, [r3, #0]
   10542:	3301      	adds	r3, #1
   10544:	b2da      	uxtb	r2, r3
   10546:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   1054a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1054e:	701a      	strb	r2, [r3, #0]
   10550:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10554:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10558:	781b      	ldrb	r3, [r3, #0]
   1055a:	2bff      	cmp	r3, #255	; 0xff
   1055c:	d105      	bne.n	1056a <send_radIR+0x816>
   1055e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10562:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10566:	2200      	movs	r2, #0
   10568:	701a      	strb	r2, [r3, #0]
   1056a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   1056e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10572:	781b      	ldrb	r3, [r3, #0]
   10574:	461a      	mov	r2, r3
   10576:	f240 33f2 	movw	r3, #1010	; 0x3f2
   1057a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1057e:	7819      	ldrb	r1, [r3, #0]
   10580:	f64a 63ec 	movw	r3, #44780	; 0xaeec
   10584:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10588:	5499      	strb	r1, [r3, r2]
   1058a:	f240 33f2 	movw	r3, #1010	; 0x3f2
   1058e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10592:	781a      	ldrb	r2, [r3, #0]
   10594:	f64a 73ed 	movw	r3, #45037	; 0xafed
   10598:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1059c:	781b      	ldrb	r3, [r3, #0]
   1059e:	4413      	add	r3, r2
   105a0:	b2da      	uxtb	r2, r3
   105a2:	f64a 73ed 	movw	r3, #45037	; 0xafed
   105a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105aa:	701a      	strb	r2, [r3, #0]
   105ac:	f64a 73ee 	movw	r3, #45038	; 0xafee
   105b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105b4:	781a      	ldrb	r2, [r3, #0]
   105b6:	f64a 73ed 	movw	r3, #45037	; 0xafed
   105ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105be:	781b      	ldrb	r3, [r3, #0]
   105c0:	4413      	add	r3, r2
   105c2:	b2da      	uxtb	r2, r3
   105c4:	f64a 73ee 	movw	r3, #45038	; 0xafee
   105c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105cc:	701a      	strb	r2, [r3, #0]
   105ce:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   105d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105d6:	781b      	ldrb	r3, [r3, #0]
   105d8:	3301      	adds	r3, #1
   105da:	b2da      	uxtb	r2, r3
   105dc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   105e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105e4:	701a      	strb	r2, [r3, #0]
   105e6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   105ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105ee:	781b      	ldrb	r3, [r3, #0]
   105f0:	2bff      	cmp	r3, #255	; 0xff
   105f2:	d10f      	bne.n	10614 <send_radIR+0x8c0>
   105f4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   105f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   105fc:	2200      	movs	r2, #0
   105fe:	701a      	strb	r2, [r3, #0]
   10600:	e008      	b.n	10614 <send_radIR+0x8c0>
   10602:	bf00      	nop
   10604:	2000b4e7 	.word	0x2000b4e7
   10608:	2000b4dd 	.word	0x2000b4dd
   1060c:	2000b4de 	.word	0x2000b4de
   10610:	2000b4df 	.word	0x2000b4df
   10614:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10618:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1061c:	781b      	ldrb	r3, [r3, #0]
   1061e:	461a      	mov	r2, r3
   10620:	f240 33f2 	movw	r3, #1010	; 0x3f2
   10624:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10628:	7859      	ldrb	r1, [r3, #1]
   1062a:	f64a 63ec 	movw	r3, #44780	; 0xaeec
   1062e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10632:	5499      	strb	r1, [r3, r2]
   10634:	4bc2      	ldr	r3, [pc, #776]	; (10940 <send_radIR+0xbec>)
   10636:	781a      	ldrb	r2, [r3, #0]
   10638:	f64a 73ed 	movw	r3, #45037	; 0xafed
   1063c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10640:	781b      	ldrb	r3, [r3, #0]
   10642:	4413      	add	r3, r2
   10644:	b2da      	uxtb	r2, r3
   10646:	f64a 73ed 	movw	r3, #45037	; 0xafed
   1064a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1064e:	701a      	strb	r2, [r3, #0]
   10650:	f64a 73ee 	movw	r3, #45038	; 0xafee
   10654:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10658:	781a      	ldrb	r2, [r3, #0]
   1065a:	f64a 73ed 	movw	r3, #45037	; 0xafed
   1065e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10662:	781b      	ldrb	r3, [r3, #0]
   10664:	4413      	add	r3, r2
   10666:	b2da      	uxtb	r2, r3
   10668:	f64a 73ee 	movw	r3, #45038	; 0xafee
   1066c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10670:	701a      	strb	r2, [r3, #0]
   10672:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10676:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1067a:	781b      	ldrb	r3, [r3, #0]
   1067c:	3301      	adds	r3, #1
   1067e:	b2da      	uxtb	r2, r3
   10680:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10684:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10688:	701a      	strb	r2, [r3, #0]
   1068a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   1068e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10692:	781b      	ldrb	r3, [r3, #0]
   10694:	2bff      	cmp	r3, #255	; 0xff
   10696:	d105      	bne.n	106a4 <send_radIR+0x950>
   10698:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   1069c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106a0:	2200      	movs	r2, #0
   106a2:	701a      	strb	r2, [r3, #0]
   106a4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   106a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106ac:	781b      	ldrb	r3, [r3, #0]
   106ae:	461a      	mov	r2, r3
   106b0:	f240 33f4 	movw	r3, #1012	; 0x3f4
   106b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106b8:	7819      	ldrb	r1, [r3, #0]
   106ba:	f64a 63ec 	movw	r3, #44780	; 0xaeec
   106be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106c2:	5499      	strb	r1, [r3, r2]
   106c4:	f240 33f4 	movw	r3, #1012	; 0x3f4
   106c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106cc:	781a      	ldrb	r2, [r3, #0]
   106ce:	f64a 73ed 	movw	r3, #45037	; 0xafed
   106d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106d6:	781b      	ldrb	r3, [r3, #0]
   106d8:	4413      	add	r3, r2
   106da:	b2da      	uxtb	r2, r3
   106dc:	f64a 73ed 	movw	r3, #45037	; 0xafed
   106e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106e4:	701a      	strb	r2, [r3, #0]
   106e6:	f64a 73ee 	movw	r3, #45038	; 0xafee
   106ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106ee:	781a      	ldrb	r2, [r3, #0]
   106f0:	f64a 73ed 	movw	r3, #45037	; 0xafed
   106f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   106f8:	781b      	ldrb	r3, [r3, #0]
   106fa:	4413      	add	r3, r2
   106fc:	b2da      	uxtb	r2, r3
   106fe:	f64a 73ee 	movw	r3, #45038	; 0xafee
   10702:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10706:	701a      	strb	r2, [r3, #0]
   10708:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   1070c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10710:	781b      	ldrb	r3, [r3, #0]
   10712:	3301      	adds	r3, #1
   10714:	b2da      	uxtb	r2, r3
   10716:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   1071a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1071e:	701a      	strb	r2, [r3, #0]
   10720:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10724:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10728:	781b      	ldrb	r3, [r3, #0]
   1072a:	2bff      	cmp	r3, #255	; 0xff
   1072c:	d105      	bne.n	1073a <send_radIR+0x9e6>
   1072e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10732:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10736:	2200      	movs	r2, #0
   10738:	701a      	strb	r2, [r3, #0]
   1073a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   1073e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10742:	781b      	ldrb	r3, [r3, #0]
   10744:	461a      	mov	r2, r3
   10746:	f240 33f4 	movw	r3, #1012	; 0x3f4
   1074a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1074e:	7859      	ldrb	r1, [r3, #1]
   10750:	f64a 63ec 	movw	r3, #44780	; 0xaeec
   10754:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10758:	5499      	strb	r1, [r3, r2]
   1075a:	4b7a      	ldr	r3, [pc, #488]	; (10944 <send_radIR+0xbf0>)
   1075c:	781a      	ldrb	r2, [r3, #0]
   1075e:	f64a 73ed 	movw	r3, #45037	; 0xafed
   10762:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10766:	781b      	ldrb	r3, [r3, #0]
   10768:	4413      	add	r3, r2
   1076a:	b2da      	uxtb	r2, r3
   1076c:	f64a 73ed 	movw	r3, #45037	; 0xafed
   10770:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10774:	701a      	strb	r2, [r3, #0]
   10776:	f64a 73ee 	movw	r3, #45038	; 0xafee
   1077a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1077e:	781a      	ldrb	r2, [r3, #0]
   10780:	f64a 73ed 	movw	r3, #45037	; 0xafed
   10784:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10788:	781b      	ldrb	r3, [r3, #0]
   1078a:	4413      	add	r3, r2
   1078c:	b2da      	uxtb	r2, r3
   1078e:	f64a 73ee 	movw	r3, #45038	; 0xafee
   10792:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10796:	701a      	strb	r2, [r3, #0]
   10798:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   1079c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107a0:	781b      	ldrb	r3, [r3, #0]
   107a2:	3301      	adds	r3, #1
   107a4:	b2da      	uxtb	r2, r3
   107a6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   107aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107ae:	701a      	strb	r2, [r3, #0]
   107b0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   107b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107b8:	781b      	ldrb	r3, [r3, #0]
   107ba:	2bff      	cmp	r3, #255	; 0xff
   107bc:	d105      	bne.n	107ca <send_radIR+0xa76>
   107be:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   107c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107c6:	2200      	movs	r2, #0
   107c8:	701a      	strb	r2, [r3, #0]
   107ca:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   107ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107d2:	781b      	ldrb	r3, [r3, #0]
   107d4:	461a      	mov	r2, r3
   107d6:	f64a 73ed 	movw	r3, #45037	; 0xafed
   107da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107de:	7819      	ldrb	r1, [r3, #0]
   107e0:	f64a 63ec 	movw	r3, #44780	; 0xaeec
   107e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107e8:	5499      	strb	r1, [r3, r2]
   107ea:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   107ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107f2:	781b      	ldrb	r3, [r3, #0]
   107f4:	3301      	adds	r3, #1
   107f6:	b2da      	uxtb	r2, r3
   107f8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   107fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10800:	701a      	strb	r2, [r3, #0]
   10802:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10806:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1080a:	781b      	ldrb	r3, [r3, #0]
   1080c:	2bff      	cmp	r3, #255	; 0xff
   1080e:	d105      	bne.n	1081c <send_radIR+0xac8>
   10810:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10814:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10818:	2200      	movs	r2, #0
   1081a:	701a      	strb	r2, [r3, #0]
   1081c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10820:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10824:	781b      	ldrb	r3, [r3, #0]
   10826:	461a      	mov	r2, r3
   10828:	f64a 73ee 	movw	r3, #45038	; 0xafee
   1082c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10830:	7819      	ldrb	r1, [r3, #0]
   10832:	f64a 63ec 	movw	r3, #44780	; 0xaeec
   10836:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1083a:	5499      	strb	r1, [r3, r2]
   1083c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10840:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10844:	781b      	ldrb	r3, [r3, #0]
   10846:	3301      	adds	r3, #1
   10848:	b2da      	uxtb	r2, r3
   1084a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   1084e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10852:	701a      	strb	r2, [r3, #0]
   10854:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10858:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1085c:	781b      	ldrb	r3, [r3, #0]
   1085e:	2bff      	cmp	r3, #255	; 0xff
   10860:	d105      	bne.n	1086e <send_radIR+0xb1a>
   10862:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10866:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1086a:	2200      	movs	r2, #0
   1086c:	701a      	strb	r2, [r3, #0]
   1086e:	f242 0339 	movw	r3, #8249	; 0x2039
   10872:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10876:	781b      	ldrb	r3, [r3, #0]
   10878:	b2db      	uxtb	r3, r3
   1087a:	f003 0310 	and.w	r3, r3, #16
   1087e:	2b00      	cmp	r3, #0
   10880:	d15a      	bne.n	10938 <send_radIR+0xbe4>
   10882:	f64a 63ea 	movw	r3, #44778	; 0xaeea
   10886:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1088a:	781b      	ldrb	r3, [r3, #0]
   1088c:	b2db      	uxtb	r3, r3
   1088e:	461a      	mov	r2, r3
   10890:	f64a 63ec 	movw	r3, #44780	; 0xaeec
   10894:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10898:	5c9a      	ldrb	r2, [r3, r2]
   1089a:	f64a 73eb 	movw	r3, #45035	; 0xafeb
   1089e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108a2:	701a      	strb	r2, [r3, #0]
   108a4:	f64a 73ec 	movw	r3, #45036	; 0xafec
   108a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108ac:	2200      	movs	r2, #0
   108ae:	701a      	strb	r2, [r3, #0]
   108b0:	f64a 63ea 	movw	r3, #44778	; 0xaeea
   108b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108b8:	781b      	ldrb	r3, [r3, #0]
   108ba:	b2db      	uxtb	r3, r3
   108bc:	3301      	adds	r3, #1
   108be:	b2da      	uxtb	r2, r3
   108c0:	f64a 63ea 	movw	r3, #44778	; 0xaeea
   108c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108c8:	701a      	strb	r2, [r3, #0]
   108ca:	f64a 63ea 	movw	r3, #44778	; 0xaeea
   108ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108d2:	781b      	ldrb	r3, [r3, #0]
   108d4:	b2db      	uxtb	r3, r3
   108d6:	2bff      	cmp	r3, #255	; 0xff
   108d8:	d105      	bne.n	108e6 <send_radIR+0xb92>
   108da:	f64a 63ea 	movw	r3, #44778	; 0xaeea
   108de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108e2:	2200      	movs	r2, #0
   108e4:	701a      	strb	r2, [r3, #0]
   108e6:	f242 0338 	movw	r3, #8248	; 0x2038
   108ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   108ee:	f242 0238 	movw	r2, #8248	; 0x2038
   108f2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   108f6:	7812      	ldrb	r2, [r2, #0]
   108f8:	b2d2      	uxtb	r2, r2
   108fa:	f042 0201 	orr.w	r2, r2, #1
   108fe:	b2d2      	uxtb	r2, r2
   10900:	701a      	strb	r2, [r3, #0]
   10902:	f242 0339 	movw	r3, #8249	; 0x2039
   10906:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1090a:	f242 0239 	movw	r2, #8249	; 0x2039
   1090e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10912:	7812      	ldrb	r2, [r2, #0]
   10914:	b2d2      	uxtb	r2, r2
   10916:	f042 0210 	orr.w	r2, r2, #16
   1091a:	b2d2      	uxtb	r2, r2
   1091c:	701a      	strb	r2, [r3, #0]
   1091e:	e00b      	b.n	10938 <send_radIR+0xbe4>
   10920:	f64a 63e8 	movw	r3, #44776	; 0xaee8
   10924:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10928:	781b      	ldrb	r3, [r3, #0]
   1092a:	3301      	adds	r3, #1
   1092c:	b2da      	uxtb	r2, r3
   1092e:	f64a 63e8 	movw	r3, #44776	; 0xaee8
   10932:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10936:	701a      	strb	r2, [r3, #0]
}
   10938:	46bd      	mov	sp, r7
   1093a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1093e:	4770      	bx	lr
   10940:	200003f3 	.word	0x200003f3
   10944:	200003f5 	.word	0x200003f5

00010948 <send_takeOff>:

void send_takeOff(void){
   10948:	b580      	push	{r7, lr}
   1094a:	af00      	add	r7, sp, #0
  if (gps_pos_available){
   1094c:	f24b 037e 	movw	r3, #45182	; 0xb07e
   10950:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10954:	781b      	ldrb	r3, [r3, #0]
   10956:	2b00      	cmp	r3, #0
   10958:	f000 8200 	beq.w	10d5c <send_takeOff+0x414>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
   1095c:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
   10960:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10964:	881b      	ldrh	r3, [r3, #0]
   10966:	2b00      	cmp	r3, #0
   10968:	f040 81f2 	bne.w	10d50 <send_takeOff+0x408>
   1096c:	f24b 43d4 	movw	r3, #46292	; 0xb4d4
   10970:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10974:	681b      	ldr	r3, [r3, #0]
   10976:	4618      	mov	r0, r3
   10978:	f04f 0100 	mov.w	r1, #0
   1097c:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   10980:	f007 fe12 	bl	185a8 <__aeabi_fcmpgt>
   10984:	4603      	mov	r3, r0
   10986:	2b00      	cmp	r3, #0
   10988:	f000 81e2 	beq.w	10d50 <send_takeOff+0x408>
        estimator_flight_time = 1;
   1098c:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
   10990:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10994:	2201      	movs	r2, #1
   10996:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
   10998:	f64a 63e0 	movw	r3, #44768	; 0xaee0
   1099c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109a0:	2201      	movs	r2, #1
   109a2:	701a      	strb	r2, [r3, #0]
        DOWNLINK_SEND_TAKEOFF(&cputime);
   109a4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   109a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109ac:	781a      	ldrb	r2, [r3, #0]
   109ae:	f64a 63ea 	movw	r3, #44778	; 0xaeea
   109b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109b6:	781b      	ldrb	r3, [r3, #0]
   109b8:	b2db      	uxtb	r3, r3
   109ba:	429a      	cmp	r2, r3
   109bc:	d313      	bcc.n	109e6 <send_takeOff+0x9e>
   109be:	f64a 63ea 	movw	r3, #44778	; 0xaeea
   109c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109c6:	781b      	ldrb	r3, [r3, #0]
   109c8:	b2db      	uxtb	r3, r3
   109ca:	461a      	mov	r2, r3
   109cc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   109d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109d4:	781b      	ldrb	r3, [r3, #0]
   109d6:	1ad3      	subs	r3, r2, r3
   109d8:	33ff      	adds	r3, #255	; 0xff
   109da:	2b06      	cmp	r3, #6
   109dc:	bfd4      	ite	le
   109de:	2300      	movle	r3, #0
   109e0:	2301      	movgt	r3, #1
   109e2:	b2db      	uxtb	r3, r3
   109e4:	e011      	b.n	10a0a <send_takeOff+0xc2>
   109e6:	f64a 63ea 	movw	r3, #44778	; 0xaeea
   109ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109ee:	781b      	ldrb	r3, [r3, #0]
   109f0:	b2db      	uxtb	r3, r3
   109f2:	461a      	mov	r2, r3
   109f4:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   109f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109fc:	781b      	ldrb	r3, [r3, #0]
   109fe:	1ad3      	subs	r3, r2, r3
   10a00:	2b06      	cmp	r3, #6
   10a02:	bfd4      	ite	le
   10a04:	2300      	movle	r3, #0
   10a06:	2301      	movgt	r3, #1
   10a08:	b2db      	uxtb	r3, r3
   10a0a:	2b00      	cmp	r3, #0
   10a0c:	f000 8194 	beq.w	10d38 <send_takeOff+0x3f0>
   10a10:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a18:	781b      	ldrb	r3, [r3, #0]
   10a1a:	461a      	mov	r2, r3
   10a1c:	f64a 63ec 	movw	r3, #44780	; 0xaeec
   10a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a24:	2105      	movs	r1, #5
   10a26:	5499      	strb	r1, [r3, r2]
   10a28:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a30:	781b      	ldrb	r3, [r3, #0]
   10a32:	3301      	adds	r3, #1
   10a34:	b2da      	uxtb	r2, r3
   10a36:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10a3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a3e:	701a      	strb	r2, [r3, #0]
   10a40:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10a44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a48:	781b      	ldrb	r3, [r3, #0]
   10a4a:	2bff      	cmp	r3, #255	; 0xff
   10a4c:	d105      	bne.n	10a5a <send_takeOff+0x112>
   10a4e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10a52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a56:	2200      	movs	r2, #0
   10a58:	701a      	strb	r2, [r3, #0]
   10a5a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a62:	781b      	ldrb	r3, [r3, #0]
   10a64:	461a      	mov	r2, r3
   10a66:	f64a 63ec 	movw	r3, #44780	; 0xaeec
   10a6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a6e:	2104      	movs	r1, #4
   10a70:	5499      	strb	r1, [r3, r2]
   10a72:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a7a:	781b      	ldrb	r3, [r3, #0]
   10a7c:	3301      	adds	r3, #1
   10a7e:	b2da      	uxtb	r2, r3
   10a80:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a88:	701a      	strb	r2, [r3, #0]
   10a8a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10a8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a92:	781b      	ldrb	r3, [r3, #0]
   10a94:	2bff      	cmp	r3, #255	; 0xff
   10a96:	d105      	bne.n	10aa4 <send_takeOff+0x15c>
   10a98:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10a9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10aa0:	2200      	movs	r2, #0
   10aa2:	701a      	strb	r2, [r3, #0]
   10aa4:	f64a 73ed 	movw	r3, #45037	; 0xafed
   10aa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10aac:	2204      	movs	r2, #4
   10aae:	701a      	strb	r2, [r3, #0]
   10ab0:	f64a 73ee 	movw	r3, #45038	; 0xafee
   10ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ab8:	2204      	movs	r2, #4
   10aba:	701a      	strb	r2, [r3, #0]
   10abc:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10ac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ac4:	781b      	ldrb	r3, [r3, #0]
   10ac6:	461a      	mov	r2, r3
   10ac8:	f64a 63ca 	movw	r3, #44746	; 0xaeca
   10acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ad0:	7819      	ldrb	r1, [r3, #0]
   10ad2:	f64a 63ec 	movw	r3, #44780	; 0xaeec
   10ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ada:	5499      	strb	r1, [r3, r2]
   10adc:	f64a 63ca 	movw	r3, #44746	; 0xaeca
   10ae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ae4:	781a      	ldrb	r2, [r3, #0]
   10ae6:	f64a 73ed 	movw	r3, #45037	; 0xafed
   10aea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10aee:	781b      	ldrb	r3, [r3, #0]
   10af0:	4413      	add	r3, r2
   10af2:	b2da      	uxtb	r2, r3
   10af4:	f64a 73ed 	movw	r3, #45037	; 0xafed
   10af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10afc:	701a      	strb	r2, [r3, #0]
   10afe:	f64a 73ee 	movw	r3, #45038	; 0xafee
   10b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b06:	781a      	ldrb	r2, [r3, #0]
   10b08:	f64a 73ed 	movw	r3, #45037	; 0xafed
   10b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b10:	781b      	ldrb	r3, [r3, #0]
   10b12:	4413      	add	r3, r2
   10b14:	b2da      	uxtb	r2, r3
   10b16:	f64a 73ee 	movw	r3, #45038	; 0xafee
   10b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b1e:	701a      	strb	r2, [r3, #0]
   10b20:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10b24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b28:	781b      	ldrb	r3, [r3, #0]
   10b2a:	3301      	adds	r3, #1
   10b2c:	b2da      	uxtb	r2, r3
   10b2e:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10b32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b36:	701a      	strb	r2, [r3, #0]
   10b38:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b40:	781b      	ldrb	r3, [r3, #0]
   10b42:	2bff      	cmp	r3, #255	; 0xff
   10b44:	d105      	bne.n	10b52 <send_takeOff+0x20a>
   10b46:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10b4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b4e:	2200      	movs	r2, #0
   10b50:	701a      	strb	r2, [r3, #0]
   10b52:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10b56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b5a:	781b      	ldrb	r3, [r3, #0]
   10b5c:	461a      	mov	r2, r3
   10b5e:	f64a 63ca 	movw	r3, #44746	; 0xaeca
   10b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b66:	7859      	ldrb	r1, [r3, #1]
   10b68:	f64a 63ec 	movw	r3, #44780	; 0xaeec
   10b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b70:	5499      	strb	r1, [r3, r2]
   10b72:	4b7b      	ldr	r3, [pc, #492]	; (10d60 <send_takeOff+0x418>)
   10b74:	781a      	ldrb	r2, [r3, #0]
   10b76:	f64a 73ed 	movw	r3, #45037	; 0xafed
   10b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b7e:	781b      	ldrb	r3, [r3, #0]
   10b80:	4413      	add	r3, r2
   10b82:	b2da      	uxtb	r2, r3
   10b84:	f64a 73ed 	movw	r3, #45037	; 0xafed
   10b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b8c:	701a      	strb	r2, [r3, #0]
   10b8e:	f64a 73ee 	movw	r3, #45038	; 0xafee
   10b92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10b96:	781a      	ldrb	r2, [r3, #0]
   10b98:	f64a 73ed 	movw	r3, #45037	; 0xafed
   10b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ba0:	781b      	ldrb	r3, [r3, #0]
   10ba2:	4413      	add	r3, r2
   10ba4:	b2da      	uxtb	r2, r3
   10ba6:	f64a 73ee 	movw	r3, #45038	; 0xafee
   10baa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bae:	701a      	strb	r2, [r3, #0]
   10bb0:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10bb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bb8:	781b      	ldrb	r3, [r3, #0]
   10bba:	3301      	adds	r3, #1
   10bbc:	b2da      	uxtb	r2, r3
   10bbe:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10bc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bc6:	701a      	strb	r2, [r3, #0]
   10bc8:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bd0:	781b      	ldrb	r3, [r3, #0]
   10bd2:	2bff      	cmp	r3, #255	; 0xff
   10bd4:	d105      	bne.n	10be2 <send_takeOff+0x29a>
   10bd6:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10bda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bde:	2200      	movs	r2, #0
   10be0:	701a      	strb	r2, [r3, #0]
   10be2:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10be6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bea:	781b      	ldrb	r3, [r3, #0]
   10bec:	461a      	mov	r2, r3
   10bee:	f64a 73ed 	movw	r3, #45037	; 0xafed
   10bf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10bf6:	7819      	ldrb	r1, [r3, #0]
   10bf8:	f64a 63ec 	movw	r3, #44780	; 0xaeec
   10bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c00:	5499      	strb	r1, [r3, r2]
   10c02:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c0a:	781b      	ldrb	r3, [r3, #0]
   10c0c:	3301      	adds	r3, #1
   10c0e:	b2da      	uxtb	r2, r3
   10c10:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c18:	701a      	strb	r2, [r3, #0]
   10c1a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10c1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c22:	781b      	ldrb	r3, [r3, #0]
   10c24:	2bff      	cmp	r3, #255	; 0xff
   10c26:	d105      	bne.n	10c34 <send_takeOff+0x2ec>
   10c28:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10c2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c30:	2200      	movs	r2, #0
   10c32:	701a      	strb	r2, [r3, #0]
   10c34:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10c38:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c3c:	781b      	ldrb	r3, [r3, #0]
   10c3e:	461a      	mov	r2, r3
   10c40:	f64a 73ee 	movw	r3, #45038	; 0xafee
   10c44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c48:	7819      	ldrb	r1, [r3, #0]
   10c4a:	f64a 63ec 	movw	r3, #44780	; 0xaeec
   10c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c52:	5499      	strb	r1, [r3, r2]
   10c54:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c5c:	781b      	ldrb	r3, [r3, #0]
   10c5e:	3301      	adds	r3, #1
   10c60:	b2da      	uxtb	r2, r3
   10c62:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10c66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c6a:	701a      	strb	r2, [r3, #0]
   10c6c:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10c70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c74:	781b      	ldrb	r3, [r3, #0]
   10c76:	2bff      	cmp	r3, #255	; 0xff
   10c78:	d105      	bne.n	10c86 <send_takeOff+0x33e>
   10c7a:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c82:	2200      	movs	r2, #0
   10c84:	701a      	strb	r2, [r3, #0]
   10c86:	f242 0339 	movw	r3, #8249	; 0x2039
   10c8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c8e:	781b      	ldrb	r3, [r3, #0]
   10c90:	b2db      	uxtb	r3, r3
   10c92:	f003 0310 	and.w	r3, r3, #16
   10c96:	2b00      	cmp	r3, #0
   10c98:	d15a      	bne.n	10d50 <send_takeOff+0x408>
   10c9a:	f64a 63ea 	movw	r3, #44778	; 0xaeea
   10c9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ca2:	781b      	ldrb	r3, [r3, #0]
   10ca4:	b2db      	uxtb	r3, r3
   10ca6:	461a      	mov	r2, r3
   10ca8:	f64a 63ec 	movw	r3, #44780	; 0xaeec
   10cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cb0:	5c9a      	ldrb	r2, [r3, r2]
   10cb2:	f64a 73eb 	movw	r3, #45035	; 0xafeb
   10cb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cba:	701a      	strb	r2, [r3, #0]
   10cbc:	f64a 73ec 	movw	r3, #45036	; 0xafec
   10cc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cc4:	2200      	movs	r2, #0
   10cc6:	701a      	strb	r2, [r3, #0]
   10cc8:	f64a 63ea 	movw	r3, #44778	; 0xaeea
   10ccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cd0:	781b      	ldrb	r3, [r3, #0]
   10cd2:	b2db      	uxtb	r3, r3
   10cd4:	3301      	adds	r3, #1
   10cd6:	b2da      	uxtb	r2, r3
   10cd8:	f64a 63ea 	movw	r3, #44778	; 0xaeea
   10cdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ce0:	701a      	strb	r2, [r3, #0]
   10ce2:	f64a 63ea 	movw	r3, #44778	; 0xaeea
   10ce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cea:	781b      	ldrb	r3, [r3, #0]
   10cec:	b2db      	uxtb	r3, r3
   10cee:	2bff      	cmp	r3, #255	; 0xff
   10cf0:	d105      	bne.n	10cfe <send_takeOff+0x3b6>
   10cf2:	f64a 63ea 	movw	r3, #44778	; 0xaeea
   10cf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cfa:	2200      	movs	r2, #0
   10cfc:	701a      	strb	r2, [r3, #0]
   10cfe:	f242 0338 	movw	r3, #8248	; 0x2038
   10d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d06:	f242 0238 	movw	r2, #8248	; 0x2038
   10d0a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d0e:	7812      	ldrb	r2, [r2, #0]
   10d10:	b2d2      	uxtb	r2, r2
   10d12:	f042 0201 	orr.w	r2, r2, #1
   10d16:	b2d2      	uxtb	r2, r2
   10d18:	701a      	strb	r2, [r3, #0]
   10d1a:	f242 0339 	movw	r3, #8249	; 0x2039
   10d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d22:	f242 0239 	movw	r2, #8249	; 0x2039
   10d26:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d2a:	7812      	ldrb	r2, [r2, #0]
   10d2c:	b2d2      	uxtb	r2, r2
   10d2e:	f042 0210 	orr.w	r2, r2, #16
   10d32:	b2d2      	uxtb	r2, r2
   10d34:	701a      	strb	r2, [r3, #0]
   10d36:	e00b      	b.n	10d50 <send_takeOff+0x408>
   10d38:	f64a 63e8 	movw	r3, #44776	; 0xaee8
   10d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d40:	781b      	ldrb	r3, [r3, #0]
   10d42:	3301      	adds	r3, #1
   10d44:	b2da      	uxtb	r2, r3
   10d46:	f64a 63e8 	movw	r3, #44776	; 0xaee8
   10d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d4e:	701a      	strb	r2, [r3, #0]
     }
     gps_pos_available = FALSE; 
   10d50:	f24b 037e 	movw	r3, #45182	; 0xb07e
   10d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d58:	2200      	movs	r2, #0
   10d5a:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
   10d5c:	bd80      	pop	{r7, pc}
   10d5e:	bf00      	nop
   10d60:	2000aecb 	.word	0x2000aecb
   10d64:	f3af 8000 	nop.w

00010d68 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
   10d68:	b480      	push	{r7}
   10d6a:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
   10d6c:	f242 0317 	movw	r3, #8215	; 0x2017
   10d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d74:	f242 0217 	movw	r2, #8215	; 0x2017
   10d78:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10d7c:	7812      	ldrb	r2, [r2, #0]
   10d7e:	b2d2      	uxtb	r2, r2
   10d80:	f042 0210 	orr.w	r2, r2, #16
   10d84:	b2d2      	uxtb	r2, r2
   10d86:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
   10d88:	f242 0331 	movw	r3, #8241	; 0x2031
   10d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d90:	2201      	movs	r2, #1
   10d92:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
   10d94:	f242 0333 	movw	r3, #8243	; 0x2033
   10d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10d9c:	2219      	movs	r2, #25
   10d9e:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
   10da0:	f242 0311 	movw	r3, #8209	; 0x2011
   10da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10da8:	f242 0211 	movw	r2, #8209	; 0x2011
   10dac:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10db0:	7812      	ldrb	r2, [r2, #0]
   10db2:	b2d2      	uxtb	r2, r2
   10db4:	f062 023f 	orn	r2, r2, #63	; 0x3f
   10db8:	b2d2      	uxtb	r2, r2
   10dba:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10dbc:	f242 0312 	movw	r3, #8210	; 0x2012
   10dc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dc4:	f242 0212 	movw	r2, #8210	; 0x2012
   10dc8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10dcc:	7812      	ldrb	r2, [r2, #0]
   10dce:	b2d2      	uxtb	r2, r2
   10dd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10dd4:	b2d2      	uxtb	r2, r2
   10dd6:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
   10dd8:	f242 0312 	movw	r3, #8210	; 0x2012
   10ddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10de0:	f242 0212 	movw	r2, #8210	; 0x2012
   10de4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10de8:	7812      	ldrb	r2, [r2, #0]
   10dea:	b2d2      	uxtb	r2, r2
   10dec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   10df0:	b2d2      	uxtb	r2, r2
   10df2:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
   10df4:	f242 033a 	movw	r3, #8250	; 0x203a
   10df8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10dfc:	f242 023a 	movw	r2, #8250	; 0x203a
   10e00:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10e04:	7812      	ldrb	r2, [r2, #0]
   10e06:	b2d2      	uxtb	r2, r2
   10e08:	f042 0202 	orr.w	r2, r2, #2
   10e0c:	b2d2      	uxtb	r2, r2
   10e0e:	701a      	strb	r2, [r3, #0]
}
   10e10:	46bd      	mov	sp, r7
   10e12:	f85d 7b04 	ldr.w	r7, [sp], #4
   10e16:	4770      	bx	lr

00010e18 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
   10e18:	b480      	push	{r7}
   10e1a:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
   10e1c:	f64a 73ec 	movw	r3, #45036	; 0xafec
   10e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e24:	781b      	ldrb	r3, [r3, #0]
   10e26:	2b00      	cmp	r3, #0
   10e28:	d10e      	bne.n	10e48 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10e2a:	f242 0312 	movw	r3, #8210	; 0x2012
   10e2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e32:	f242 0212 	movw	r2, #8210	; 0x2012
   10e36:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10e3a:	7812      	ldrb	r2, [r2, #0]
   10e3c:	b2d2      	uxtb	r2, r2
   10e3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10e42:	b2d2      	uxtb	r2, r2
   10e44:	701a      	strb	r2, [r3, #0]
   10e46:	e047      	b.n	10ed8 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
   10e48:	f64a 73ec 	movw	r3, #45036	; 0xafec
   10e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e50:	781b      	ldrb	r3, [r3, #0]
   10e52:	2b08      	cmp	r3, #8
   10e54:	d832      	bhi.n	10ebc <__vector_5+0xa4>
    if (tx_byte & 0x01)
   10e56:	f64a 73eb 	movw	r3, #45035	; 0xafeb
   10e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e5e:	781b      	ldrb	r3, [r3, #0]
   10e60:	f003 0301 	and.w	r3, r3, #1
   10e64:	2b00      	cmp	r3, #0
   10e66:	d00e      	beq.n	10e86 <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10e68:	f242 0312 	movw	r3, #8210	; 0x2012
   10e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e70:	f242 0212 	movw	r2, #8210	; 0x2012
   10e74:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10e78:	7812      	ldrb	r2, [r2, #0]
   10e7a:	b2d2      	uxtb	r2, r2
   10e7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10e80:	b2d2      	uxtb	r2, r2
   10e82:	701a      	strb	r2, [r3, #0]
   10e84:	e00d      	b.n	10ea2 <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10e86:	f242 0312 	movw	r3, #8210	; 0x2012
   10e8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e8e:	f242 0212 	movw	r2, #8210	; 0x2012
   10e92:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10e96:	7812      	ldrb	r2, [r2, #0]
   10e98:	b2d2      	uxtb	r2, r2
   10e9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   10e9e:	b2d2      	uxtb	r2, r2
   10ea0:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
   10ea2:	f64a 73eb 	movw	r3, #45035	; 0xafeb
   10ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eaa:	781b      	ldrb	r3, [r3, #0]
   10eac:	085b      	lsrs	r3, r3, #1
   10eae:	b2da      	uxtb	r2, r3
   10eb0:	f64a 73eb 	movw	r3, #45035	; 0xafeb
   10eb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eb8:	701a      	strb	r2, [r3, #0]
   10eba:	e00d      	b.n	10ed8 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
   10ebc:	f242 0312 	movw	r3, #8210	; 0x2012
   10ec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ec4:	f242 0212 	movw	r2, #8210	; 0x2012
   10ec8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ecc:	7812      	ldrb	r2, [r2, #0]
   10ece:	b2d2      	uxtb	r2, r2
   10ed0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10ed4:	b2d2      	uxtb	r2, r2
   10ed6:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
   10ed8:	f64a 73ec 	movw	r3, #45036	; 0xafec
   10edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ee0:	781b      	ldrb	r3, [r3, #0]
   10ee2:	3301      	adds	r3, #1
   10ee4:	b2da      	uxtb	r2, r3
   10ee6:	f64a 73ec 	movw	r3, #45036	; 0xafec
   10eea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10eee:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
   10ef0:	f64a 73ec 	movw	r3, #45036	; 0xafec
   10ef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ef8:	781b      	ldrb	r3, [r3, #0]
   10efa:	2b09      	cmp	r3, #9
   10efc:	d94d      	bls.n	10f9a <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
   10efe:	f64a 63e9 	movw	r3, #44777	; 0xaee9
   10f02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f06:	781a      	ldrb	r2, [r3, #0]
   10f08:	f64a 63ea 	movw	r3, #44778	; 0xaeea
   10f0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f10:	781b      	ldrb	r3, [r3, #0]
   10f12:	b2db      	uxtb	r3, r3
   10f14:	429a      	cmp	r2, r3
   10f16:	d10e      	bne.n	10f36 <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
   10f18:	f242 0339 	movw	r3, #8249	; 0x2039
   10f1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f20:	f242 0239 	movw	r2, #8249	; 0x2039
   10f24:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f28:	7812      	ldrb	r2, [r2, #0]
   10f2a:	b2d2      	uxtb	r2, r2
   10f2c:	f022 0210 	bic.w	r2, r2, #16
   10f30:	b2d2      	uxtb	r2, r2
   10f32:	701a      	strb	r2, [r3, #0]
   10f34:	e031      	b.n	10f9a <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
   10f36:	f64a 63ea 	movw	r3, #44778	; 0xaeea
   10f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f3e:	781b      	ldrb	r3, [r3, #0]
   10f40:	b2db      	uxtb	r3, r3
   10f42:	461a      	mov	r2, r3
   10f44:	f64a 63ec 	movw	r3, #44780	; 0xaeec
   10f48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f4c:	5c9a      	ldrb	r2, [r3, r2]
   10f4e:	f64a 73eb 	movw	r3, #45035	; 0xafeb
   10f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f56:	701a      	strb	r2, [r3, #0]
   10f58:	f64a 73ec 	movw	r3, #45036	; 0xafec
   10f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f60:	2200      	movs	r2, #0
   10f62:	701a      	strb	r2, [r3, #0]
   10f64:	f64a 63ea 	movw	r3, #44778	; 0xaeea
   10f68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f6c:	781b      	ldrb	r3, [r3, #0]
   10f6e:	b2db      	uxtb	r3, r3
   10f70:	3301      	adds	r3, #1
   10f72:	b2da      	uxtb	r2, r3
   10f74:	f64a 63ea 	movw	r3, #44778	; 0xaeea
   10f78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f7c:	701a      	strb	r2, [r3, #0]
   10f7e:	f64a 63ea 	movw	r3, #44778	; 0xaeea
   10f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f86:	781b      	ldrb	r3, [r3, #0]
   10f88:	b2db      	uxtb	r3, r3
   10f8a:	2bff      	cmp	r3, #255	; 0xff
   10f8c:	d105      	bne.n	10f9a <__vector_5+0x182>
   10f8e:	f64a 63ea 	movw	r3, #44778	; 0xaeea
   10f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f96:	2200      	movs	r2, #0
   10f98:	701a      	strb	r2, [r3, #0]
    }
  }
}
   10f9a:	46bd      	mov	sp, r7
   10f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
   10fa0:	4770      	bx	lr
   10fa2:	bf00      	nop

00010fa4 <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
   10fa4:	b480      	push	{r7}
   10fa6:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
   10fa8:	f24b 031f 	movw	r3, #45087	; 0xb01f
   10fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fb0:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
   10fb2:	f240 33ee 	movw	r3, #1006	; 0x3ee
   10fb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fba:	2200      	movs	r2, #0
   10fbc:	701a      	strb	r2, [r3, #0]
}
   10fbe:	46bd      	mov	sp, r7
   10fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
   10fc4:	4770      	bx	lr
   10fc6:	bf00      	nop

00010fc8 <link_fbw_send>:

void link_fbw_send(void) {
   10fc8:	b480      	push	{r7}
   10fca:	b083      	sub	sp, #12
   10fcc:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
   10fce:	f24b 0324 	movw	r3, #45092	; 0xb024
   10fd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fd6:	781b      	ldrb	r3, [r3, #0]
   10fd8:	b2db      	uxtb	r3, r3
   10fda:	2b00      	cmp	r3, #0
   10fdc:	d00c      	beq.n	10ff8 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
   10fde:	f24b 0325 	movw	r3, #45093	; 0xb025
   10fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fe6:	781b      	ldrb	r3, [r3, #0]
   10fe8:	3301      	adds	r3, #1
   10fea:	b2da      	uxtb	r2, r3
   10fec:	f24b 0325 	movw	r3, #45093	; 0xb025
   10ff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ff4:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
   10ff6:	e064      	b.n	110c2 <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
   10ff8:	f242 030d 	movw	r3, #8205	; 0x200d
   10ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11000:	2251      	movs	r2, #81	; 0x51
   11002:	701a      	strb	r2, [r3, #0]
   11004:	f242 030e 	movw	r3, #8206	; 0x200e
   11008:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1100c:	781b      	ldrb	r3, [r3, #0]
   1100e:	b2db      	uxtb	r3, r3
   11010:	b2db      	uxtb	r3, r3
   11012:	b25b      	sxtb	r3, r3
   11014:	2b00      	cmp	r3, #0
   11016:	da05      	bge.n	11024 <link_fbw_send+0x5c>
   11018:	f242 030f 	movw	r3, #8207	; 0x200f
   1101c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11020:	781b      	ldrb	r3, [r3, #0]
   11022:	71fb      	strb	r3, [r7, #7]
   11024:	f242 030d 	movw	r3, #8205	; 0x200d
   11028:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1102c:	f242 020d 	movw	r2, #8205	; 0x200d
   11030:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11034:	7812      	ldrb	r2, [r2, #0]
   11036:	b2d2      	uxtb	r2, r2
   11038:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1103c:	b2d2      	uxtb	r2, r2
   1103e:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
   11040:	f24b 0324 	movw	r3, #45092	; 0xb024
   11044:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11048:	2201      	movs	r2, #1
   1104a:	701a      	strb	r2, [r3, #0]
   1104c:	f242 0318 	movw	r3, #8216	; 0x2018
   11050:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11054:	f242 0218 	movw	r2, #8216	; 0x2018
   11058:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1105c:	7812      	ldrb	r2, [r2, #0]
   1105e:	b2d2      	uxtb	r2, r2
   11060:	f022 0201 	bic.w	r2, r2, #1
   11064:	b2d2      	uxtb	r2, r2
   11066:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
   11068:	f24b 0321 	movw	r3, #45089	; 0xb021
   1106c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11070:	2200      	movs	r2, #0
   11072:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
   11074:	f24b 0322 	movw	r3, #45090	; 0xb022
   11078:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1107c:	2200      	movs	r2, #0
   1107e:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
   11080:	f24b 0321 	movw	r3, #45089	; 0xb021
   11084:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11088:	781b      	ldrb	r3, [r3, #0]
   1108a:	461a      	mov	r2, r3
   1108c:	f24b 0308 	movw	r3, #45064	; 0xb008
   11090:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11094:	4413      	add	r3, r2
   11096:	781a      	ldrb	r2, [r3, #0]
   11098:	f24b 0323 	movw	r3, #45091	; 0xb023
   1109c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110a0:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
   110a2:	f242 030f 	movw	r3, #8207	; 0x200f
   110a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110aa:	f24b 0223 	movw	r2, #45091	; 0xb023
   110ae:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110b2:	7812      	ldrb	r2, [r2, #0]
   110b4:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
   110b6:	f24b 031e 	movw	r3, #45086	; 0xb01e
   110ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110be:	2200      	movs	r2, #0
   110c0:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
   110c2:	370c      	adds	r7, #12
   110c4:	46bd      	mov	sp, r7
   110c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   110ca:	4770      	bx	lr

000110cc <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
   110cc:	b480      	push	{r7}
   110ce:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
   110d0:	f242 032a 	movw	r3, #8234	; 0x202a
   110d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110d8:	f242 022c 	movw	r2, #8236	; 0x202c
   110dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110e0:	8812      	ldrh	r2, [r2, #0]
   110e2:	b292      	uxth	r2, r2
   110e4:	32c8      	adds	r2, #200	; 0xc8
   110e6:	b292      	uxth	r2, r2
   110e8:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
   110ea:	f242 0336 	movw	r3, #8246	; 0x2036
   110ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110f2:	f242 0236 	movw	r2, #8246	; 0x2036
   110f6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110fa:	7812      	ldrb	r2, [r2, #0]
   110fc:	b2d2      	uxtb	r2, r2
   110fe:	f042 0210 	orr.w	r2, r2, #16
   11102:	b2d2      	uxtb	r2, r2
   11104:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
   11106:	f242 0337 	movw	r3, #8247	; 0x2037
   1110a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1110e:	f242 0237 	movw	r2, #8247	; 0x2037
   11112:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11116:	7812      	ldrb	r2, [r2, #0]
   11118:	b2d2      	uxtb	r2, r2
   1111a:	f042 0210 	orr.w	r2, r2, #16
   1111e:	b2d2      	uxtb	r2, r2
   11120:	701a      	strb	r2, [r3, #0]
}
   11122:	46bd      	mov	sp, r7
   11124:	f85d 7b04 	ldr.w	r7, [sp], #4
   11128:	4770      	bx	lr
   1112a:	bf00      	nop

0001112c <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
   1112c:	b480      	push	{r7}
   1112e:	b083      	sub	sp, #12
   11130:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
   11132:	f242 0337 	movw	r3, #8247	; 0x2037
   11136:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1113a:	f242 0237 	movw	r2, #8247	; 0x2037
   1113e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11142:	7812      	ldrb	r2, [r2, #0]
   11144:	b2d2      	uxtb	r2, r2
   11146:	f022 0210 	bic.w	r2, r2, #16
   1114a:	b2d2      	uxtb	r2, r2
   1114c:	701a      	strb	r2, [r3, #0]

  idx_buf++;
   1114e:	f24b 0321 	movw	r3, #45089	; 0xb021
   11152:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11156:	781b      	ldrb	r3, [r3, #0]
   11158:	3301      	adds	r3, #1
   1115a:	b2da      	uxtb	r2, r3
   1115c:	f24b 0321 	movw	r3, #45089	; 0xb021
   11160:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11164:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
   11166:	f24b 0321 	movw	r3, #45089	; 0xb021
   1116a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1116e:	781b      	ldrb	r3, [r3, #0]
   11170:	2b17      	cmp	r3, #23
   11172:	d162      	bne.n	1123a <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
   11174:	f242 030f 	movw	r3, #8207	; 0x200f
   11178:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1117c:	781b      	ldrb	r3, [r3, #0]
   1117e:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
   11180:	f24b 0322 	movw	r3, #45090	; 0xb022
   11184:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11188:	781b      	ldrb	r3, [r3, #0]
   1118a:	79fa      	ldrb	r2, [r7, #7]
   1118c:	429a      	cmp	r2, r3
   1118e:	d110      	bne.n	111b2 <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
   11190:	f24b 031e 	movw	r3, #45086	; 0xb01e
   11194:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11198:	2201      	movs	r2, #1
   1119a:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
   1119c:	f64a 73f0 	movw	r3, #45040	; 0xaff0
   111a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111a4:	7d1a      	ldrb	r2, [r3, #20]
   111a6:	f24b 0320 	movw	r3, #45088	; 0xb020
   111aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111ae:	701a      	strb	r2, [r3, #0]
   111b0:	e00c      	b.n	111cc <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
   111b2:	f24b 031f 	movw	r3, #45087	; 0xb01f
   111b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111ba:	781b      	ldrb	r3, [r3, #0]
   111bc:	b2db      	uxtb	r3, r3
   111be:	3301      	adds	r3, #1
   111c0:	b2da      	uxtb	r2, r3
   111c2:	f24b 031f 	movw	r3, #45087	; 0xb01f
   111c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111ca:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
   111cc:	f240 33ee 	movw	r3, #1006	; 0x3ee
   111d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111d4:	2201      	movs	r2, #1
   111d6:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
   111d8:	f24b 0324 	movw	r3, #45092	; 0xb024
   111dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111e0:	2200      	movs	r2, #0
   111e2:	701a      	strb	r2, [r3, #0]
   111e4:	f242 0318 	movw	r3, #8216	; 0x2018
   111e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111ec:	f242 0218 	movw	r2, #8216	; 0x2018
   111f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   111f4:	7812      	ldrb	r2, [r2, #0]
   111f6:	b2d2      	uxtb	r2, r2
   111f8:	f042 0201 	orr.w	r2, r2, #1
   111fc:	b2d2      	uxtb	r2, r2
   111fe:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
   11200:	f242 030d 	movw	r3, #8205	; 0x200d
   11204:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11208:	f242 020d 	movw	r2, #8205	; 0x200d
   1120c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11210:	7812      	ldrb	r2, [r2, #0]
   11212:	b2d2      	uxtb	r2, r2
   11214:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11218:	b2d2      	uxtb	r2, r2
   1121a:	701a      	strb	r2, [r3, #0]
   1121c:	f242 030d 	movw	r3, #8205	; 0x200d
   11220:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11224:	f242 020d 	movw	r2, #8205	; 0x200d
   11228:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1122c:	7812      	ldrb	r2, [r2, #0]
   1122e:	b2d2      	uxtb	r2, r2
   11230:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   11234:	b2d2      	uxtb	r2, r2
   11236:	701a      	strb	r2, [r3, #0]
    return;
   11238:	e051      	b.n	112de <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
   1123a:	f24b 0321 	movw	r3, #45089	; 0xb021
   1123e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11242:	781b      	ldrb	r3, [r3, #0]
   11244:	2b15      	cmp	r3, #21
   11246:	d820      	bhi.n	1128a <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
   11248:	f24b 0321 	movw	r3, #45089	; 0xb021
   1124c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11250:	781b      	ldrb	r3, [r3, #0]
   11252:	461a      	mov	r2, r3
   11254:	f24b 0308 	movw	r3, #45064	; 0xb008
   11258:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1125c:	4413      	add	r3, r2
   1125e:	781b      	ldrb	r3, [r3, #0]
   11260:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
   11262:	f242 030f 	movw	r3, #8207	; 0x200f
   11266:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1126a:	79fa      	ldrb	r2, [r7, #7]
   1126c:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
   1126e:	f24b 0323 	movw	r3, #45091	; 0xb023
   11272:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11276:	781a      	ldrb	r2, [r3, #0]
   11278:	79fb      	ldrb	r3, [r7, #7]
   1127a:	4053      	eors	r3, r2
   1127c:	b2da      	uxtb	r2, r3
   1127e:	f24b 0323 	movw	r3, #45091	; 0xb023
   11282:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11286:	701a      	strb	r2, [r3, #0]
   11288:	e009      	b.n	1129e <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
   1128a:	f242 030f 	movw	r3, #8207	; 0x200f
   1128e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11292:	f24b 0223 	movw	r2, #45091	; 0xb023
   11296:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1129a:	7812      	ldrb	r2, [r2, #0]
   1129c:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
   1129e:	f242 030f 	movw	r3, #8207	; 0x200f
   112a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112a6:	781b      	ldrb	r3, [r3, #0]
   112a8:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
   112aa:	f24b 0321 	movw	r3, #45089	; 0xb021
   112ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112b2:	781b      	ldrb	r3, [r3, #0]
   112b4:	1e5a      	subs	r2, r3, #1
   112b6:	f64a 73f0 	movw	r3, #45040	; 0xaff0
   112ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112be:	4413      	add	r3, r2
   112c0:	79fa      	ldrb	r2, [r7, #7]
   112c2:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
   112c4:	f24b 0322 	movw	r3, #45090	; 0xb022
   112c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112cc:	781a      	ldrb	r2, [r3, #0]
   112ce:	79fb      	ldrb	r3, [r7, #7]
   112d0:	4053      	eors	r3, r2
   112d2:	b2da      	uxtb	r2, r3
   112d4:	f24b 0322 	movw	r3, #45090	; 0xb022
   112d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112dc:	701a      	strb	r2, [r3, #0]
}
   112de:	370c      	adds	r7, #12
   112e0:	46bd      	mov	sp, r7
   112e2:	f85d 7b04 	ldr.w	r7, [sp], #4
   112e6:	4770      	bx	lr

000112e8 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
   112e8:	b480      	push	{r7}
   112ea:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
   112ec:	f242 0317 	movw	r3, #8215	; 0x2017
   112f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112f4:	f242 0217 	movw	r2, #8215	; 0x2017
   112f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   112fc:	7812      	ldrb	r2, [r2, #0]
   112fe:	b2d2      	uxtb	r2, r2
   11300:	f042 0206 	orr.w	r2, r2, #6
   11304:	b2d2      	uxtb	r2, r2
   11306:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
   11308:	f242 0317 	movw	r3, #8215	; 0x2017
   1130c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11310:	f242 0217 	movw	r2, #8215	; 0x2017
   11314:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11318:	7812      	ldrb	r2, [r2, #0]
   1131a:	b2d2      	uxtb	r2, r2
   1131c:	f042 0201 	orr.w	r2, r2, #1
   11320:	b2d2      	uxtb	r2, r2
   11322:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
   11324:	f24b 0324 	movw	r3, #45092	; 0xb024
   11328:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1132c:	2200      	movs	r2, #0
   1132e:	701a      	strb	r2, [r3, #0]
   11330:	f242 0318 	movw	r3, #8216	; 0x2018
   11334:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11338:	f242 0218 	movw	r2, #8216	; 0x2018
   1133c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11340:	7812      	ldrb	r2, [r2, #0]
   11342:	b2d2      	uxtb	r2, r2
   11344:	f042 0201 	orr.w	r2, r2, #1
   11348:	b2d2      	uxtb	r2, r2
   1134a:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
   1134c:	f242 0302 	movw	r3, #8194	; 0x2002
   11350:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11354:	f242 0202 	movw	r2, #8194	; 0x2002
   11358:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1135c:	7812      	ldrb	r2, [r2, #0]
   1135e:	b2d2      	uxtb	r2, r2
   11360:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11364:	b2d2      	uxtb	r2, r2
   11366:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
   11368:	f24b 0324 	movw	r3, #45092	; 0xb024
   1136c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11370:	2200      	movs	r2, #0
   11372:	701a      	strb	r2, [r3, #0]
   11374:	f242 0303 	movw	r3, #8195	; 0x2003
   11378:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1137c:	f242 0203 	movw	r2, #8195	; 0x2003
   11380:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11384:	7812      	ldrb	r2, [r2, #0]
   11386:	b2d2      	uxtb	r2, r2
   11388:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1138c:	b2d2      	uxtb	r2, r2
   1138e:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
   11390:	f24b 0324 	movw	r3, #45092	; 0xb024
   11394:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11398:	2200      	movs	r2, #0
   1139a:	701a      	strb	r2, [r3, #0]
}
   1139c:	46bd      	mov	sp, r7
   1139e:	f85d 7b04 	ldr.w	r7, [sp], #4
   113a2:	4770      	bx	lr

000113a4 <__vector_17>:


SIGNAL(SIG_SPI) {
   113a4:	b580      	push	{r7, lr}
   113a6:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
   113a8:	f24b 0324 	movw	r3, #45092	; 0xb024
   113ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113b0:	781b      	ldrb	r3, [r3, #0]
   113b2:	b2db      	uxtb	r3, r3
   113b4:	2b01      	cmp	r3, #1
   113b6:	d102      	bne.n	113be <__vector_17+0x1a>
    link_fbw_on_spi_it();
   113b8:	f7ff fe88 	bl	110cc <link_fbw_on_spi_it>
   113bc:	e00b      	b.n	113d6 <__vector_17+0x32>
  else
    fatal_error_nb++;
   113be:	f64a 63c8 	movw	r3, #44744	; 0xaec8
   113c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113c6:	781b      	ldrb	r3, [r3, #0]
   113c8:	3301      	adds	r3, #1
   113ca:	b2da      	uxtb	r2, r3
   113cc:	f64a 63c8 	movw	r3, #44744	; 0xaec8
   113d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113d4:	701a      	strb	r2, [r3, #0]
}
   113d6:	bd80      	pop	{r7, pc}

000113d8 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
   113d8:	b480      	push	{r7}
   113da:	b083      	sub	sp, #12
   113dc:	af00      	add	r7, sp, #0
   113de:	4603      	mov	r3, r0
   113e0:	6039      	str	r1, [r7, #0]
   113e2:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   113e4:	79fa      	ldrb	r2, [r7, #7]
   113e6:	f24b 0338 	movw	r3, #45112	; 0xb038
   113ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113ee:	6839      	ldr	r1, [r7, #0]
   113f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   113f4:	370c      	adds	r7, #12
   113f6:	46bd      	mov	sp, r7
   113f8:	f85d 7b04 	ldr.w	r7, [sp], #4
   113fc:	4770      	bx	lr
   113fe:	bf00      	nop

00011400 <adc_init>:

void 
adc_init( void )
{
   11400:	b480      	push	{r7}
   11402:	b083      	sub	sp, #12
   11404:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   11406:	f242 0362 	movw	r3, #8290	; 0x2062
   1140a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1140e:	2200      	movs	r2, #0
   11410:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   11412:	f242 0361 	movw	r3, #8289	; 0x2061
   11416:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1141a:	2200      	movs	r2, #0
   1141c:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
   1141e:	f242 0307 	movw	r3, #8199	; 0x2007
   11422:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11426:	2240      	movs	r2, #64	; 0x40
   11428:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
   1142a:	f242 0308 	movw	r3, #8200	; 0x2008
   1142e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11432:	f242 0208 	movw	r2, #8200	; 0x2008
   11436:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1143a:	7812      	ldrb	r2, [r2, #0]
   1143c:	b2d2      	uxtb	r2, r2
   1143e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11442:	b2d2      	uxtb	r2, r2
   11444:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
   11446:	f242 0306 	movw	r3, #8198	; 0x2006
   1144a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1144e:	22cf      	movs	r2, #207	; 0xcf
   11450:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   11452:	2300      	movs	r3, #0
   11454:	71fb      	strb	r3, [r7, #7]
   11456:	e00a      	b.n	1146e <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
   11458:	79fa      	ldrb	r2, [r7, #7]
   1145a:	f24b 0338 	movw	r3, #45112	; 0xb038
   1145e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11462:	2100      	movs	r1, #0
   11464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   11468:	79fb      	ldrb	r3, [r7, #7]
   1146a:	3301      	adds	r3, #1
   1146c:	71fb      	strb	r3, [r7, #7]
   1146e:	79fb      	ldrb	r3, [r7, #7]
   11470:	2b07      	cmp	r3, #7
   11472:	d9f1      	bls.n	11458 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
   11474:	370c      	adds	r7, #12
   11476:	46bd      	mov	sp, r7
   11478:	f85d 7b04 	ldr.w	r7, [sp], #4
   1147c:	4770      	bx	lr
   1147e:	bf00      	nop

00011480 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
   11480:	b480      	push	{r7}
   11482:	b085      	sub	sp, #20
   11484:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
   11486:	f242 0307 	movw	r3, #8199	; 0x2007
   1148a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1148e:	781b      	ldrb	r3, [r3, #0]
   11490:	b2db      	uxtb	r3, r3
   11492:	f003 0307 	and.w	r3, r3, #7
   11496:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
   11498:	7bfa      	ldrb	r2, [r7, #15]
   1149a:	f24b 0338 	movw	r3, #45112	; 0xb038
   1149e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   114a6:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
   114a8:	f242 0304 	movw	r3, #8196	; 0x2004
   114ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114b0:	881b      	ldrh	r3, [r3, #0]
   114b2:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
   114b4:	7bfa      	ldrb	r2, [r7, #15]
   114b6:	f24b 0328 	movw	r3, #45096	; 0xb028
   114ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114be:	88f9      	ldrh	r1, [r7, #6]
   114c0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
   114c4:	68bb      	ldr	r3, [r7, #8]
   114c6:	2b00      	cmp	r3, #0
   114c8:	d025      	beq.n	11516 <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
   114ca:	68bb      	ldr	r3, [r7, #8]
   114cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   114d0:	3301      	adds	r3, #1
   114d2:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
   114d4:	7bbb      	ldrb	r3, [r7, #14]
   114d6:	2b1f      	cmp	r3, #31
   114d8:	d901      	bls.n	114de <__vector_21+0x5e>
   114da:	2300      	movs	r3, #0
   114dc:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
   114de:	68bb      	ldr	r3, [r7, #8]
   114e0:	881a      	ldrh	r2, [r3, #0]
   114e2:	7bbb      	ldrb	r3, [r7, #14]
   114e4:	68b9      	ldr	r1, [r7, #8]
   114e6:	005b      	lsls	r3, r3, #1
   114e8:	440b      	add	r3, r1
   114ea:	885b      	ldrh	r3, [r3, #2]
   114ec:	1ad3      	subs	r3, r2, r3
   114ee:	b29a      	uxth	r2, r3
   114f0:	68bb      	ldr	r3, [r7, #8]
   114f2:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
   114f4:	7bbb      	ldrb	r3, [r7, #14]
   114f6:	68ba      	ldr	r2, [r7, #8]
   114f8:	005b      	lsls	r3, r3, #1
   114fa:	4413      	add	r3, r2
   114fc:	88fa      	ldrh	r2, [r7, #6]
   114fe:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
   11500:	68bb      	ldr	r3, [r7, #8]
   11502:	881a      	ldrh	r2, [r3, #0]
   11504:	88fb      	ldrh	r3, [r7, #6]
   11506:	4413      	add	r3, r2
   11508:	b29a      	uxth	r2, r3
   1150a:	68bb      	ldr	r3, [r7, #8]
   1150c:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
   1150e:	68bb      	ldr	r3, [r7, #8]
   11510:	7bba      	ldrb	r2, [r7, #14]
   11512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
   11516:	7bfb      	ldrb	r3, [r7, #15]
   11518:	3301      	adds	r3, #1
   1151a:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
   1151c:	7bfb      	ldrb	r3, [r7, #15]
   1151e:	2b07      	cmp	r3, #7
   11520:	d901      	bls.n	11526 <__vector_21+0xa6>
    adc_input = 0;
   11522:	2300      	movs	r3, #0
   11524:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
   11526:	f242 0307 	movw	r3, #8199	; 0x2007
   1152a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1152e:	7bfa      	ldrb	r2, [r7, #15]
   11530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11534:	b2d2      	uxtb	r2, r2
   11536:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
   11538:	f242 0306 	movw	r3, #8198	; 0x2006
   1153c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11540:	f242 0206 	movw	r2, #8198	; 0x2006
   11544:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11548:	7812      	ldrb	r2, [r2, #0]
   1154a:	b2d2      	uxtb	r2, r2
   1154c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11550:	b2d2      	uxtb	r2, r2
   11552:	701a      	strb	r2, [r3, #0]
  
}
   11554:	3714      	adds	r7, #20
   11556:	46bd      	mov	sp, r7
   11558:	f85d 7b04 	ldr.w	r7, [sp], #4
   1155c:	4770      	bx	lr
   1155e:	bf00      	nop

00011560 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
   11560:	b580      	push	{r7, lr}
   11562:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
   11564:	f003 fca8 	bl	14eb8 <uart1_init>
#endif
  ubx_status = UNINIT;
   11568:	f24b 137f 	movw	r3, #45439	; 0xb17f
   1156c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11570:	2200      	movs	r2, #0
   11572:	701a      	strb	r2, [r3, #0]
}
   11574:	bd80      	pop	{r7, pc}
   11576:	bf00      	nop

00011578 <parse_gps_msg>:

void parse_gps_msg( void ) {
   11578:	b580      	push	{r7, lr}
   1157a:	af00      	add	r7, sp, #0
    ubx_class = 1;
    ubx_id = (ubx_id + 1)%0x40;
    */
    //end

  if (ubx_class == UBX_NAV_ID) {
   1157c:	f24b 1386 	movw	r3, #45446	; 0xb186
   11580:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11584:	781b      	ldrb	r3, [r3, #0]
   11586:	2b01      	cmp	r3, #1
   11588:	f040 80f9 	bne.w	1177e <parse_gps_msg+0x206>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
   1158c:	f24b 1385 	movw	r3, #45445	; 0xb185
   11590:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11594:	781b      	ldrb	r3, [r3, #0]
   11596:	2b08      	cmp	r3, #8
   11598:	d128      	bne.n	115ec <parse_gps_msg+0x74>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
   1159a:	f24b 0380 	movw	r3, #45184	; 0xb080
   1159e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115a2:	685a      	ldr	r2, [r3, #4]
   115a4:	f24b 036c 	movw	r3, #45164	; 0xb06c
   115a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115ac:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
   115ae:	f24b 0380 	movw	r3, #45184	; 0xb080
   115b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115b6:	689a      	ldr	r2, [r3, #8]
   115b8:	f24b 0370 	movw	r3, #45168	; 0xb070
   115bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115c0:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
   115c2:	4b73      	ldr	r3, [pc, #460]	; (11790 <parse_gps_msg+0x218>)
   115c4:	681b      	ldr	r3, [r3, #0]
   115c6:	4618      	mov	r0, r3
   115c8:	f006 fdde 	bl	18188 <__aeabi_i2f>
   115cc:	4603      	mov	r3, r0
   115ce:	4618      	mov	r0, r3
   115d0:	f04f 0100 	mov.w	r1, #0
   115d4:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   115d8:	f006 fede 	bl	18398 <__aeabi_fdiv>
   115dc:	4603      	mov	r3, r0
   115de:	461a      	mov	r2, r3
   115e0:	f24b 035c 	movw	r3, #45148	; 0xb05c
   115e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115e8:	601a      	str	r2, [r3, #0]
   115ea:	e0c8      	b.n	1177e <parse_gps_msg+0x206>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
   115ec:	f24b 1385 	movw	r3, #45445	; 0xb185
   115f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115f4:	781b      	ldrb	r3, [r3, #0]
   115f6:	2b03      	cmp	r3, #3
   115f8:	d10a      	bne.n	11610 <parse_gps_msg+0x98>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
   115fa:	f24b 0380 	movw	r3, #45184	; 0xb080
   115fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11602:	791a      	ldrb	r2, [r3, #4]
   11604:	f24b 037c 	movw	r3, #45180	; 0xb07c
   11608:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1160c:	701a      	strb	r2, [r3, #0]
   1160e:	e0b6      	b.n	1177e <parse_gps_msg+0x206>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
   11610:	f24b 1385 	movw	r3, #45445	; 0xb185
   11614:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11618:	781b      	ldrb	r3, [r3, #0]
   1161a:	2b12      	cmp	r3, #18
   1161c:	f040 80af 	bne.w	1177e <parse_gps_msg+0x206>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
   11620:	4b5c      	ldr	r3, [pc, #368]	; (11794 <parse_gps_msg+0x21c>)
   11622:	681b      	ldr	r3, [r3, #0]
   11624:	4618      	mov	r0, r3
   11626:	f006 fdab 	bl	18180 <__aeabi_ui2f>
   1162a:	4603      	mov	r3, r0
   1162c:	4618      	mov	r0, r3
   1162e:	f04f 0100 	mov.w	r1, #0
   11632:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11636:	f006 feaf 	bl	18398 <__aeabi_fdiv>
   1163a:	4603      	mov	r3, r0
   1163c:	461a      	mov	r2, r3
   1163e:	f24b 0360 	movw	r3, #45152	; 0xb060
   11642:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11646:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
   11648:	4b51      	ldr	r3, [pc, #324]	; (11790 <parse_gps_msg+0x218>)
   1164a:	681b      	ldr	r3, [r3, #0]
   1164c:	4618      	mov	r0, r3
   1164e:	f006 fd9b 	bl	18188 <__aeabi_i2f>
   11652:	4603      	mov	r3, r0
   11654:	4618      	mov	r0, r3
   11656:	f04f 0100 	mov.w	r1, #0
   1165a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1165e:	f006 fe9b 	bl	18398 <__aeabi_fdiv>
   11662:	4603      	mov	r3, r0
   11664:	461a      	mov	r2, r3
   11666:	f24b 0364 	movw	r3, #45156	; 0xb064
   1166a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1166e:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
   11670:	4b49      	ldr	r3, [pc, #292]	; (11798 <parse_gps_msg+0x220>)
   11672:	681b      	ldr	r3, [r3, #0]
   11674:	4618      	mov	r0, r3
   11676:	f006 fd87 	bl	18188 <__aeabi_i2f>
   1167a:	4603      	mov	r3, r0
   1167c:	4618      	mov	r0, r3
   1167e:	f006 f943 	bl	17908 <__aeabi_f2d>
   11682:	4602      	mov	r2, r0
   11684:	460b      	mov	r3, r1
   11686:	4610      	mov	r0, r2
   11688:	4619      	mov	r1, r3
   1168a:	a33d      	add	r3, pc, #244	; (adr r3, 11780 <parse_gps_msg+0x208>)
   1168c:	e9d3 2300 	ldrd	r2, r3, [r3]
   11690:	f006 fab8 	bl	17c04 <__aeabi_ddiv>
   11694:	4602      	mov	r2, r0
   11696:	460b      	mov	r3, r1
   11698:	4610      	mov	r0, r2
   1169a:	4619      	mov	r1, r3
   1169c:	f04f 0200 	mov.w	r2, #0
   116a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   116a4:	f2c4 0366 	movt	r3, #16486	; 0x4066
   116a8:	f006 faac 	bl	17c04 <__aeabi_ddiv>
   116ac:	4602      	mov	r2, r0
   116ae:	460b      	mov	r3, r1
   116b0:	4610      	mov	r0, r2
   116b2:	4619      	mov	r1, r3
   116b4:	a334      	add	r3, pc, #208	; (adr r3, 11788 <parse_gps_msg+0x210>)
   116b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   116ba:	f006 f979 	bl	179b0 <__aeabi_dmul>
   116be:	4602      	mov	r2, r0
   116c0:	460b      	mov	r3, r1
   116c2:	4610      	mov	r0, r2
   116c4:	4619      	mov	r1, r3
   116c6:	f006 fc55 	bl	17f74 <__aeabi_d2f>
   116ca:	4602      	mov	r2, r0
   116cc:	f24b 0368 	movw	r3, #45160	; 0xb068
   116d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116d4:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
   116d6:	f24b 0380 	movw	r3, #45184	; 0xb080
   116da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116de:	681b      	ldr	r3, [r3, #0]
   116e0:	4618      	mov	r0, r3
   116e2:	f006 fd4d 	bl	18180 <__aeabi_ui2f>
   116e6:	4603      	mov	r3, r0
   116e8:	4618      	mov	r0, r3
   116ea:	f04f 0100 	mov.w	r1, #0
   116ee:	f2c4 417a 	movt	r1, #17530	; 0x447a
   116f2:	f006 fe51 	bl	18398 <__aeabi_fdiv>
   116f6:	4603      	mov	r3, r0
   116f8:	461a      	mov	r2, r3
   116fa:	f24b 0358 	movw	r3, #45144	; 0xb058
   116fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11702:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
   11704:	f24b 036c 	movw	r3, #45164	; 0xb06c
   11708:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1170c:	681a      	ldr	r2, [r3, #0]
   1170e:	f248 531f 	movw	r3, #34079	; 0x851f
   11712:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   11716:	fb83 1302 	smull	r1, r3, r3, r2
   1171a:	1159      	asrs	r1, r3, #5
   1171c:	17d3      	asrs	r3, r2, #31
   1171e:	1acb      	subs	r3, r1, r3
   11720:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
   11724:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
   11728:	4618      	mov	r0, r3
   1172a:	f006 fd2d 	bl	18188 <__aeabi_i2f>
   1172e:	4602      	mov	r2, r0
   11730:	f24b 0374 	movw	r3, #45172	; 0xb074
   11734:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11738:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
   1173a:	f24b 0370 	movw	r3, #45168	; 0xb070
   1173e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11742:	681a      	ldr	r2, [r3, #0]
   11744:	f248 531f 	movw	r3, #34079	; 0x851f
   11748:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   1174c:	fb83 1302 	smull	r1, r3, r3, r2
   11750:	1159      	asrs	r1, r3, #5
   11752:	17d3      	asrs	r3, r2, #31
   11754:	1aca      	subs	r2, r1, r3
   11756:	f648 231a 	movw	r3, #35354	; 0x8a1a
   1175a:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
   1175e:	4413      	add	r3, r2
   11760:	4618      	mov	r0, r3
   11762:	f006 fd11 	bl	18188 <__aeabi_i2f>
   11766:	4602      	mov	r2, r0
   11768:	f24b 0378 	movw	r3, #45176	; 0xb078
   1176c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11770:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
   11772:	f24b 037e 	movw	r3, #45182	; 0xb07e
   11776:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1177a:	2201      	movs	r2, #1
   1177c:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
   1177e:	bd80      	pop	{r7, pc}
   11780:	00000000 	.word	0x00000000
   11784:	40f86a00 	.word	0x40f86a00
   11788:	5a7ed197 	.word	0x5a7ed197
   1178c:	400921fb 	.word	0x400921fb
   11790:	2000b08c 	.word	0x2000b08c
   11794:	2000b094 	.word	0x2000b094
   11798:	2000b098 	.word	0x2000b098

0001179c <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
   1179c:	b480      	push	{r7}
   1179e:	b083      	sub	sp, #12
   117a0:	af00      	add	r7, sp, #0
   117a2:	4603      	mov	r3, r0
   117a4:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
   117a6:	f24b 137f 	movw	r3, #45439	; 0xb17f
   117aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117ae:	781b      	ldrb	r3, [r3, #0]
   117b0:	2b06      	cmp	r3, #6
   117b2:	d81d      	bhi.n	117f0 <parse_ubx+0x54>
    ck_a += c;
   117b4:	f24b 1383 	movw	r3, #45443	; 0xb183
   117b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117bc:	781a      	ldrb	r2, [r3, #0]
   117be:	79fb      	ldrb	r3, [r7, #7]
   117c0:	4413      	add	r3, r2
   117c2:	b2da      	uxtb	r2, r3
   117c4:	f24b 1383 	movw	r3, #45443	; 0xb183
   117c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117cc:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
   117ce:	f24b 1384 	movw	r3, #45444	; 0xb184
   117d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117d6:	781a      	ldrb	r2, [r3, #0]
   117d8:	f24b 1383 	movw	r3, #45443	; 0xb183
   117dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117e0:	781b      	ldrb	r3, [r3, #0]
   117e2:	4413      	add	r3, r2
   117e4:	b2da      	uxtb	r2, r3
   117e6:	f24b 1384 	movw	r3, #45444	; 0xb184
   117ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117ee:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
   117f0:	f24b 137f 	movw	r3, #45439	; 0xb17f
   117f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117f8:	781b      	ldrb	r3, [r3, #0]
   117fa:	2b00      	cmp	r3, #0
   117fc:	d110      	bne.n	11820 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
   117fe:	79fb      	ldrb	r3, [r7, #7]
   11800:	2bb5      	cmp	r3, #181	; 0xb5
   11802:	f040 8135 	bne.w	11a70 <parse_ubx+0x2d4>
      ubx_status++;
   11806:	f24b 137f 	movw	r3, #45439	; 0xb17f
   1180a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1180e:	781b      	ldrb	r3, [r3, #0]
   11810:	3301      	adds	r3, #1
   11812:	b2da      	uxtb	r2, r3
   11814:	f24b 137f 	movw	r3, #45439	; 0xb17f
   11818:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1181c:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   1181e:	e12f      	b.n	11a80 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
   11820:	f24b 137f 	movw	r3, #45439	; 0xb17f
   11824:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11828:	781b      	ldrb	r3, [r3, #0]
   1182a:	2b01      	cmp	r3, #1
   1182c:	d11c      	bne.n	11868 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
   1182e:	79fb      	ldrb	r3, [r7, #7]
   11830:	2b62      	cmp	r3, #98	; 0x62
   11832:	d000      	beq.n	11836 <parse_ubx+0x9a>
      goto error;
   11834:	e11d      	b.n	11a72 <parse_ubx+0x2d6>
    ck_a = 0;
   11836:	f24b 1383 	movw	r3, #45443	; 0xb183
   1183a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1183e:	2200      	movs	r2, #0
   11840:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
   11842:	f24b 1384 	movw	r3, #45444	; 0xb184
   11846:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1184a:	2200      	movs	r2, #0
   1184c:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   1184e:	f24b 137f 	movw	r3, #45439	; 0xb17f
   11852:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11856:	781b      	ldrb	r3, [r3, #0]
   11858:	3301      	adds	r3, #1
   1185a:	b2da      	uxtb	r2, r3
   1185c:	f24b 137f 	movw	r3, #45439	; 0xb17f
   11860:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11864:	701a      	strb	r2, [r3, #0]
   11866:	e103      	b.n	11a70 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
   11868:	f24b 137f 	movw	r3, #45439	; 0xb17f
   1186c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11870:	781b      	ldrb	r3, [r3, #0]
   11872:	2b02      	cmp	r3, #2
   11874:	d127      	bne.n	118c6 <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
   11876:	f24b 037d 	movw	r3, #45181	; 0xb07d
   1187a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1187e:	781b      	ldrb	r3, [r3, #0]
   11880:	b2db      	uxtb	r3, r3
   11882:	2b00      	cmp	r3, #0
   11884:	d00c      	beq.n	118a0 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
   11886:	f24b 1387 	movw	r3, #45447	; 0xb187
   1188a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1188e:	781b      	ldrb	r3, [r3, #0]
   11890:	3301      	adds	r3, #1
   11892:	b2da      	uxtb	r2, r3
   11894:	f24b 1387 	movw	r3, #45447	; 0xb187
   11898:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1189c:	701a      	strb	r2, [r3, #0]
      goto error;
   1189e:	e0e8      	b.n	11a72 <parse_ubx+0x2d6>
    }
    ubx_class = c;
   118a0:	f24b 1386 	movw	r3, #45446	; 0xb186
   118a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118a8:	79fa      	ldrb	r2, [r7, #7]
   118aa:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   118ac:	f24b 137f 	movw	r3, #45439	; 0xb17f
   118b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118b4:	781b      	ldrb	r3, [r3, #0]
   118b6:	3301      	adds	r3, #1
   118b8:	b2da      	uxtb	r2, r3
   118ba:	f24b 137f 	movw	r3, #45439	; 0xb17f
   118be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118c2:	701a      	strb	r2, [r3, #0]
   118c4:	e0d4      	b.n	11a70 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
   118c6:	f24b 137f 	movw	r3, #45439	; 0xb17f
   118ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118ce:	781b      	ldrb	r3, [r3, #0]
   118d0:	2b03      	cmp	r3, #3
   118d2:	d112      	bne.n	118fa <parse_ubx+0x15e>
  {
    ubx_id = c;
   118d4:	f24b 1385 	movw	r3, #45445	; 0xb185
   118d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118dc:	79fa      	ldrb	r2, [r7, #7]
   118de:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   118e0:	f24b 137f 	movw	r3, #45439	; 0xb17f
   118e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118e8:	781b      	ldrb	r3, [r3, #0]
   118ea:	3301      	adds	r3, #1
   118ec:	b2da      	uxtb	r2, r3
   118ee:	f24b 137f 	movw	r3, #45439	; 0xb17f
   118f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118f6:	701a      	strb	r2, [r3, #0]
   118f8:	e0ba      	b.n	11a70 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
   118fa:	f24b 137f 	movw	r3, #45439	; 0xb17f
   118fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11902:	781b      	ldrb	r3, [r3, #0]
   11904:	2b04      	cmp	r3, #4
   11906:	d113      	bne.n	11930 <parse_ubx+0x194>
  {
    ubx_len = c;
   11908:	79fb      	ldrb	r3, [r7, #7]
   1190a:	b29a      	uxth	r2, r3
   1190c:	f24b 1380 	movw	r3, #45440	; 0xb180
   11910:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11914:	801a      	strh	r2, [r3, #0]
    ubx_status++;
   11916:	f24b 137f 	movw	r3, #45439	; 0xb17f
   1191a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1191e:	781b      	ldrb	r3, [r3, #0]
   11920:	3301      	adds	r3, #1
   11922:	b2da      	uxtb	r2, r3
   11924:	f24b 137f 	movw	r3, #45439	; 0xb17f
   11928:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1192c:	701a      	strb	r2, [r3, #0]
   1192e:	e09f      	b.n	11a70 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
   11930:	f24b 137f 	movw	r3, #45439	; 0xb17f
   11934:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11938:	781b      	ldrb	r3, [r3, #0]
   1193a:	2b05      	cmp	r3, #5
   1193c:	d12b      	bne.n	11996 <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
   1193e:	79fb      	ldrb	r3, [r7, #7]
   11940:	021b      	lsls	r3, r3, #8
   11942:	b29a      	uxth	r2, r3
   11944:	f24b 1380 	movw	r3, #45440	; 0xb180
   11948:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1194c:	881b      	ldrh	r3, [r3, #0]
   1194e:	b29b      	uxth	r3, r3
   11950:	4313      	orrs	r3, r2
   11952:	b29b      	uxth	r3, r3
   11954:	b29a      	uxth	r2, r3
   11956:	f24b 1380 	movw	r3, #45440	; 0xb180
   1195a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1195e:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
   11960:	f24b 1380 	movw	r3, #45440	; 0xb180
   11964:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11968:	881b      	ldrh	r3, [r3, #0]
   1196a:	2bff      	cmp	r3, #255	; 0xff
   1196c:	d900      	bls.n	11970 <parse_ubx+0x1d4>
      goto error;
   1196e:	e080      	b.n	11a72 <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
   11970:	f24b 1382 	movw	r3, #45442	; 0xb182
   11974:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11978:	2200      	movs	r2, #0
   1197a:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   1197c:	f24b 137f 	movw	r3, #45439	; 0xb17f
   11980:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11984:	781b      	ldrb	r3, [r3, #0]
   11986:	3301      	adds	r3, #1
   11988:	b2da      	uxtb	r2, r3
   1198a:	f24b 137f 	movw	r3, #45439	; 0xb17f
   1198e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11992:	701a      	strb	r2, [r3, #0]
   11994:	e06c      	b.n	11a70 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
   11996:	f24b 137f 	movw	r3, #45439	; 0xb17f
   1199a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1199e:	781b      	ldrb	r3, [r3, #0]
   119a0:	2b06      	cmp	r3, #6
   119a2:	d131      	bne.n	11a08 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
   119a4:	f24b 1382 	movw	r3, #45442	; 0xb182
   119a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119ac:	781b      	ldrb	r3, [r3, #0]
   119ae:	461a      	mov	r2, r3
   119b0:	f24b 0380 	movw	r3, #45184	; 0xb080
   119b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119b8:	79f9      	ldrb	r1, [r7, #7]
   119ba:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
   119bc:	f24b 1382 	movw	r3, #45442	; 0xb182
   119c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119c4:	781b      	ldrb	r3, [r3, #0]
   119c6:	3301      	adds	r3, #1
   119c8:	b2da      	uxtb	r2, r3
   119ca:	f24b 1382 	movw	r3, #45442	; 0xb182
   119ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119d2:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
   119d4:	f24b 1382 	movw	r3, #45442	; 0xb182
   119d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119dc:	781b      	ldrb	r3, [r3, #0]
   119de:	461a      	mov	r2, r3
   119e0:	f24b 1380 	movw	r3, #45440	; 0xb180
   119e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119e8:	881b      	ldrh	r3, [r3, #0]
   119ea:	429a      	cmp	r2, r3
   119ec:	d340      	bcc.n	11a70 <parse_ubx+0x2d4>
      ubx_status++;
   119ee:	f24b 137f 	movw	r3, #45439	; 0xb17f
   119f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   119f6:	781b      	ldrb	r3, [r3, #0]
   119f8:	3301      	adds	r3, #1
   119fa:	b2da      	uxtb	r2, r3
   119fc:	f24b 137f 	movw	r3, #45439	; 0xb17f
   11a00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a04:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11a06:	e03b      	b.n	11a80 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
   11a08:	f24b 137f 	movw	r3, #45439	; 0xb17f
   11a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a10:	781b      	ldrb	r3, [r3, #0]
   11a12:	2b07      	cmp	r3, #7
   11a14:	d115      	bne.n	11a42 <parse_ubx+0x2a6>
  {
    if (c != ck_a)
   11a16:	f24b 1383 	movw	r3, #45443	; 0xb183
   11a1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a1e:	781b      	ldrb	r3, [r3, #0]
   11a20:	79fa      	ldrb	r2, [r7, #7]
   11a22:	429a      	cmp	r2, r3
   11a24:	d000      	beq.n	11a28 <parse_ubx+0x28c>
      goto error;
   11a26:	e024      	b.n	11a72 <parse_ubx+0x2d6>
    ubx_status++;
   11a28:	f24b 137f 	movw	r3, #45439	; 0xb17f
   11a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a30:	781b      	ldrb	r3, [r3, #0]
   11a32:	3301      	adds	r3, #1
   11a34:	b2da      	uxtb	r2, r3
   11a36:	f24b 137f 	movw	r3, #45439	; 0xb17f
   11a3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a3e:	701a      	strb	r2, [r3, #0]
   11a40:	e016      	b.n	11a70 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
   11a42:	f24b 137f 	movw	r3, #45439	; 0xb17f
   11a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a4a:	781b      	ldrb	r3, [r3, #0]
   11a4c:	2b08      	cmp	r3, #8
   11a4e:	d10f      	bne.n	11a70 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
   11a50:	f24b 1384 	movw	r3, #45444	; 0xb184
   11a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a58:	781b      	ldrb	r3, [r3, #0]
   11a5a:	79fa      	ldrb	r2, [r7, #7]
   11a5c:	429a      	cmp	r2, r3
   11a5e:	d000      	beq.n	11a62 <parse_ubx+0x2c6>
      goto error;
   11a60:	e007      	b.n	11a72 <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
   11a62:	f24b 037d 	movw	r3, #45181	; 0xb07d
   11a66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a6a:	2201      	movs	r2, #1
   11a6c:	701a      	strb	r2, [r3, #0]
    goto restart;
   11a6e:	e000      	b.n	11a72 <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
   11a70:	e006      	b.n	11a80 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
   11a72:	f24b 137f 	movw	r3, #45439	; 0xb17f
   11a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a7a:	2200      	movs	r2, #0
   11a7c:	701a      	strb	r2, [r3, #0]
  return;
   11a7e:	bf00      	nop
}
   11a80:	370c      	adds	r7, #12
   11a82:	46bd      	mov	sp, r7
   11a84:	f85d 7b04 	ldr.w	r7, [sp], #4
   11a88:	4770      	bx	lr
   11a8a:	bf00      	nop

00011a8c <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
   11a8c:	b580      	push	{r7, lr}
   11a8e:	b082      	sub	sp, #8
   11a90:	af00      	add	r7, sp, #0
   11a92:	f242 039c 	movw	r3, #8348	; 0x209c
   11a96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11a9a:	781b      	ldrb	r3, [r3, #0]
   11a9c:	71fb      	strb	r3, [r7, #7]
   11a9e:	79fb      	ldrb	r3, [r7, #7]
   11aa0:	4618      	mov	r0, r3
   11aa2:	f7ff fe7b 	bl	1179c <parse_ubx>
   11aa6:	3708      	adds	r7, #8
   11aa8:	46bd      	mov	sp, r7
   11aaa:	bd80      	pop	{r7, pc}
   11aac:	f3af 8000 	nop.w

00011ab0 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
   11ab0:	b580      	push	{r7, lr}
   11ab2:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
   11ab4:	f240 33f8 	movw	r3, #1016	; 0x3f8
   11ab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11abc:	f24c 228f 	movw	r2, #49807	; 0xc28f
   11ac0:	f6c3 3275 	movt	r2, #15221	; 0x3b75
   11ac4:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
   11ac6:	2001      	movs	r0, #1
   11ac8:	f24b 118c 	movw	r1, #45452	; 0xb18c
   11acc:	f2c2 0100 	movt	r1, #8192	; 0x2000
   11ad0:	f7ff fc82 	bl	113d8 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
   11ad4:	2002      	movs	r0, #2
   11ad6:	f24b 11d0 	movw	r1, #45520	; 0xb1d0
   11ada:	f2c2 0100 	movt	r1, #8192	; 0x2000
   11ade:	f7ff fc7b 	bl	113d8 <adc_buf_channel>
}
   11ae2:	bd80      	pop	{r7, pc}

00011ae4 <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
   11ae4:	b480      	push	{r7}
   11ae6:	b083      	sub	sp, #12
   11ae8:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
   11aea:	f24b 138c 	movw	r3, #45452	; 0xb18c
   11aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11af2:	881b      	ldrh	r3, [r3, #0]
   11af4:	095b      	lsrs	r3, r3, #5
   11af6:	b29b      	uxth	r3, r3
   11af8:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
   11afa:	f24b 13d0 	movw	r3, #45520	; 0xb1d0
   11afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b02:	881b      	ldrh	r3, [r3, #0]
   11b04:	095b      	lsrs	r3, r3, #5
   11b06:	b29b      	uxth	r3, r3
   11b08:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
   11b0a:	88fb      	ldrh	r3, [r7, #6]
   11b0c:	425b      	negs	r3, r3
   11b0e:	b29a      	uxth	r2, r3
   11b10:	88bb      	ldrh	r3, [r7, #4]
   11b12:	1ad3      	subs	r3, r2, r3
   11b14:	b29a      	uxth	r2, r3
   11b16:	f240 33f2 	movw	r3, #1010	; 0x3f2
   11b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b1e:	881b      	ldrh	r3, [r3, #0]
   11b20:	b29b      	uxth	r3, r3
   11b22:	1ad3      	subs	r3, r2, r3
   11b24:	b29b      	uxth	r3, r3
   11b26:	b29a      	uxth	r2, r3
   11b28:	f24b 1388 	movw	r3, #45448	; 0xb188
   11b2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b30:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
   11b32:	88ba      	ldrh	r2, [r7, #4]
   11b34:	88fb      	ldrh	r3, [r7, #6]
   11b36:	1ad3      	subs	r3, r2, r3
   11b38:	b29a      	uxth	r2, r3
   11b3a:	f240 33f4 	movw	r3, #1012	; 0x3f4
   11b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b42:	881b      	ldrh	r3, [r3, #0]
   11b44:	b29b      	uxth	r3, r3
   11b46:	1ad3      	subs	r3, r2, r3
   11b48:	b29b      	uxth	r3, r3
   11b4a:	b29a      	uxth	r2, r3
   11b4c:	f24b 138a 	movw	r3, #45450	; 0xb18a
   11b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b54:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
   11b56:	370c      	adds	r7, #12
   11b58:	46bd      	mov	sp, r7
   11b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
   11b5e:	4770      	bx	lr

00011b60 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
   11b60:	b580      	push	{r7, lr}
   11b62:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
   11b64:	f24b 138a 	movw	r3, #45450	; 0xb18a
   11b68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b6c:	881b      	ldrh	r3, [r3, #0]
   11b6e:	b29b      	uxth	r3, r3
   11b70:	425b      	negs	r3, r3
   11b72:	b29b      	uxth	r3, r3
   11b74:	b29a      	uxth	r2, r3
   11b76:	f240 33f0 	movw	r3, #1008	; 0x3f0
   11b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b7e:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
   11b80:	f240 33f0 	movw	r3, #1008	; 0x3f0
   11b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11b88:	881b      	ldrh	r3, [r3, #0]
   11b8a:	b21b      	sxth	r3, r3
   11b8c:	4618      	mov	r0, r3
   11b8e:	f005 fea9 	bl	178e4 <__aeabi_i2d>
   11b92:	4602      	mov	r2, r0
   11b94:	460b      	mov	r3, r1
   11b96:	f04f 0000 	mov.w	r0, #0
   11b9a:	f04f 0100 	mov.w	r1, #0
   11b9e:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
   11ba2:	f006 f82f 	bl	17c04 <__aeabi_ddiv>
   11ba6:	4602      	mov	r2, r0
   11ba8:	460b      	mov	r3, r1
   11baa:	4610      	mov	r0, r2
   11bac:	4619      	mov	r1, r3
   11bae:	f006 f9e1 	bl	17f74 <__aeabi_d2f>
   11bb2:	4602      	mov	r2, r0
   11bb4:	f240 33f8 	movw	r3, #1016	; 0x3f8
   11bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bbc:	601a      	str	r2, [r3, #0]
}
   11bbe:	bd80      	pop	{r7, pc}

00011bc0 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
   11bc0:	b590      	push	{r4, r7, lr}
   11bc2:	b083      	sub	sp, #12
   11bc4:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
   11bc6:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
   11bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bce:	681a      	ldr	r2, [r3, #0]
   11bd0:	f24b 2314 	movw	r3, #45588	; 0xb214
   11bd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bd8:	681b      	ldr	r3, [r3, #0]
   11bda:	4610      	mov	r0, r2
   11bdc:	4619      	mov	r1, r3
   11bde:	f006 fa1d 	bl	1801c <__aeabi_fsub>
   11be2:	4603      	mov	r3, r0
   11be4:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
   11be6:	f240 33fc 	movw	r3, #1020	; 0x3fc
   11bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11bee:	681b      	ldr	r3, [r3, #0]
   11bf0:	4618      	mov	r0, r3
   11bf2:	6879      	ldr	r1, [r7, #4]
   11bf4:	f006 fb1c 	bl	18230 <__aeabi_fmul>
   11bf8:	4603      	mov	r3, r0
   11bfa:	4618      	mov	r0, r3
   11bfc:	f04f 0100 	mov.w	r1, #0
   11c00:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11c04:	f006 fcb2 	bl	1856c <__aeabi_fcmplt>
   11c08:	4603      	mov	r3, r0
   11c0a:	2b00      	cmp	r3, #0
   11c0c:	d002      	beq.n	11c14 <roll_pitch_pid_run+0x54>
   11c0e:	f64d 2280 	movw	r2, #55936	; 0xda80
   11c12:	e026      	b.n	11c62 <roll_pitch_pid_run+0xa2>
   11c14:	f240 33fc 	movw	r3, #1020	; 0x3fc
   11c18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c1c:	681b      	ldr	r3, [r3, #0]
   11c1e:	4618      	mov	r0, r3
   11c20:	6879      	ldr	r1, [r7, #4]
   11c22:	f006 fb05 	bl	18230 <__aeabi_fmul>
   11c26:	4603      	mov	r3, r0
   11c28:	4618      	mov	r0, r3
   11c2a:	f04f 0100 	mov.w	r1, #0
   11c2e:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11c32:	f006 fcb9 	bl	185a8 <__aeabi_fcmpgt>
   11c36:	4603      	mov	r3, r0
   11c38:	2b00      	cmp	r3, #0
   11c3a:	d002      	beq.n	11c42 <roll_pitch_pid_run+0x82>
   11c3c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11c40:	e00e      	b.n	11c60 <roll_pitch_pid_run+0xa0>
   11c42:	f240 33fc 	movw	r3, #1020	; 0x3fc
   11c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c4a:	681b      	ldr	r3, [r3, #0]
   11c4c:	4618      	mov	r0, r3
   11c4e:	6879      	ldr	r1, [r7, #4]
   11c50:	f006 faee 	bl	18230 <__aeabi_fmul>
   11c54:	4603      	mov	r3, r0
   11c56:	4618      	mov	r0, r3
   11c58:	f006 fcb0 	bl	185bc <__aeabi_f2iz>
   11c5c:	4603      	mov	r3, r0
   11c5e:	b29b      	uxth	r3, r3
   11c60:	b29a      	uxth	r2, r3
   11c62:	f24b 231e 	movw	r3, #45598	; 0xb21e
   11c66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c6a:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
   11c6c:	f24b 2324 	movw	r3, #45604	; 0xb224
   11c70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c74:	681b      	ldr	r3, [r3, #0]
   11c76:	4618      	mov	r0, r3
   11c78:	f04f 0100 	mov.w	r1, #0
   11c7c:	f006 fc76 	bl	1856c <__aeabi_fcmplt>
   11c80:	4603      	mov	r3, r0
   11c82:	2b00      	cmp	r3, #0
   11c84:	d006      	beq.n	11c94 <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
   11c86:	f24b 2324 	movw	r3, #45604	; 0xb224
   11c8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c8e:	f04f 0200 	mov.w	r2, #0
   11c92:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
   11c94:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
   11c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c9c:	681a      	ldr	r2, [r3, #0]
   11c9e:	f24b 2318 	movw	r3, #45592	; 0xb218
   11ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ca6:	681b      	ldr	r3, [r3, #0]
   11ca8:	4610      	mov	r0, r2
   11caa:	4619      	mov	r1, r3
   11cac:	f006 f9b6 	bl	1801c <__aeabi_fsub>
   11cb0:	4603      	mov	r3, r0
   11cb2:	461c      	mov	r4, r3
   11cb4:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
   11cb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cbc:	681b      	ldr	r3, [r3, #0]
   11cbe:	4618      	mov	r0, r3
   11cc0:	f04f 0100 	mov.w	r1, #0
   11cc4:	f006 fc52 	bl	1856c <__aeabi_fcmplt>
   11cc8:	4603      	mov	r3, r0
   11cca:	2b00      	cmp	r3, #0
   11ccc:	d007      	beq.n	11cde <roll_pitch_pid_run+0x11e>
   11cce:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
   11cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cd6:	681b      	ldr	r3, [r3, #0]
   11cd8:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11cdc:	e004      	b.n	11ce8 <roll_pitch_pid_run+0x128>
   11cde:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
   11ce2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ce6:	681a      	ldr	r2, [r3, #0]
   11ce8:	f24b 2324 	movw	r3, #45604	; 0xb224
   11cec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cf0:	681b      	ldr	r3, [r3, #0]
   11cf2:	4610      	mov	r0, r2
   11cf4:	4619      	mov	r1, r3
   11cf6:	f006 fa9b 	bl	18230 <__aeabi_fmul>
   11cfa:	4603      	mov	r3, r0
   11cfc:	4620      	mov	r0, r4
   11cfe:	4619      	mov	r1, r3
   11d00:	f006 f98c 	bl	1801c <__aeabi_fsub>
   11d04:	4603      	mov	r3, r0
   11d06:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   11d0a:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
   11d0c:	f240 4300 	movw	r3, #1024	; 0x400
   11d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d14:	681b      	ldr	r3, [r3, #0]
   11d16:	4618      	mov	r0, r3
   11d18:	6879      	ldr	r1, [r7, #4]
   11d1a:	f006 fa89 	bl	18230 <__aeabi_fmul>
   11d1e:	4603      	mov	r3, r0
   11d20:	4618      	mov	r0, r3
   11d22:	f04f 0100 	mov.w	r1, #0
   11d26:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11d2a:	f006 fc1f 	bl	1856c <__aeabi_fcmplt>
   11d2e:	4603      	mov	r3, r0
   11d30:	2b00      	cmp	r3, #0
   11d32:	d002      	beq.n	11d3a <roll_pitch_pid_run+0x17a>
   11d34:	f64d 2280 	movw	r2, #55936	; 0xda80
   11d38:	e026      	b.n	11d88 <roll_pitch_pid_run+0x1c8>
   11d3a:	f240 4300 	movw	r3, #1024	; 0x400
   11d3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d42:	681b      	ldr	r3, [r3, #0]
   11d44:	4618      	mov	r0, r3
   11d46:	6879      	ldr	r1, [r7, #4]
   11d48:	f006 fa72 	bl	18230 <__aeabi_fmul>
   11d4c:	4603      	mov	r3, r0
   11d4e:	4618      	mov	r0, r3
   11d50:	f04f 0100 	mov.w	r1, #0
   11d54:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11d58:	f006 fc26 	bl	185a8 <__aeabi_fcmpgt>
   11d5c:	4603      	mov	r3, r0
   11d5e:	2b00      	cmp	r3, #0
   11d60:	d002      	beq.n	11d68 <roll_pitch_pid_run+0x1a8>
   11d62:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11d66:	e00e      	b.n	11d86 <roll_pitch_pid_run+0x1c6>
   11d68:	f240 4300 	movw	r3, #1024	; 0x400
   11d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d70:	681b      	ldr	r3, [r3, #0]
   11d72:	4618      	mov	r0, r3
   11d74:	6879      	ldr	r1, [r7, #4]
   11d76:	f006 fa5b 	bl	18230 <__aeabi_fmul>
   11d7a:	4603      	mov	r3, r0
   11d7c:	4618      	mov	r0, r3
   11d7e:	f006 fc1d 	bl	185bc <__aeabi_f2iz>
   11d82:	4603      	mov	r3, r0
   11d84:	b29b      	uxth	r3, r3
   11d86:	b29a      	uxth	r2, r3
   11d88:	f24b 2320 	movw	r3, #45600	; 0xb220
   11d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d90:	801a      	strh	r2, [r3, #0]
}
   11d92:	370c      	adds	r7, #12
   11d94:	46bd      	mov	sp, r7
   11d96:	bd90      	pop	{r4, r7, pc}

00011d98 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
   11d98:	b580      	push	{r7, lr}
   11d9a:	b082      	sub	sp, #8
   11d9c:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
   11d9e:	f24b 43d8 	movw	r3, #46296	; 0xb4d8
   11da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11da6:	681a      	ldr	r2, [r3, #0]
   11da8:	f24b 232c 	movw	r3, #45612	; 0xb22c
   11dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11db0:	681b      	ldr	r3, [r3, #0]
   11db2:	4610      	mov	r0, r2
   11db4:	4619      	mov	r1, r3
   11db6:	f006 f931 	bl	1801c <__aeabi_fsub>
   11dba:	4603      	mov	r3, r0
   11dbc:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
   11dbe:	e013      	b.n	11de8 <course_pid_run+0x50>
   11dc0:	6878      	ldr	r0, [r7, #4]
   11dc2:	f005 fda1 	bl	17908 <__aeabi_f2d>
   11dc6:	4602      	mov	r2, r0
   11dc8:	460b      	mov	r3, r1
   11dca:	4610      	mov	r0, r2
   11dcc:	4619      	mov	r1, r3
   11dce:	a348      	add	r3, pc, #288	; (adr r3, 11ef0 <course_pid_run+0x158>)
   11dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
   11dd4:	f005 fc38 	bl	17648 <__aeabi_dsub>
   11dd8:	4602      	mov	r2, r0
   11dda:	460b      	mov	r3, r1
   11ddc:	4610      	mov	r0, r2
   11dde:	4619      	mov	r1, r3
   11de0:	f006 f8c8 	bl	17f74 <__aeabi_d2f>
   11de4:	4603      	mov	r3, r0
   11de6:	607b      	str	r3, [r7, #4]
   11de8:	6878      	ldr	r0, [r7, #4]
   11dea:	f005 fd8d 	bl	17908 <__aeabi_f2d>
   11dee:	4602      	mov	r2, r0
   11df0:	460b      	mov	r3, r1
   11df2:	4610      	mov	r0, r2
   11df4:	4619      	mov	r1, r3
   11df6:	a340      	add	r3, pc, #256	; (adr r3, 11ef8 <course_pid_run+0x160>)
   11df8:	e9d3 2300 	ldrd	r2, r3, [r3]
   11dfc:	f006 f868 	bl	17ed0 <__aeabi_dcmpgt>
   11e00:	4603      	mov	r3, r0
   11e02:	2b00      	cmp	r3, #0
   11e04:	d1dc      	bne.n	11dc0 <course_pid_run+0x28>
   11e06:	e013      	b.n	11e30 <course_pid_run+0x98>
   11e08:	6878      	ldr	r0, [r7, #4]
   11e0a:	f005 fd7d 	bl	17908 <__aeabi_f2d>
   11e0e:	4602      	mov	r2, r0
   11e10:	460b      	mov	r3, r1
   11e12:	4610      	mov	r0, r2
   11e14:	4619      	mov	r1, r3
   11e16:	a336      	add	r3, pc, #216	; (adr r3, 11ef0 <course_pid_run+0x158>)
   11e18:	e9d3 2300 	ldrd	r2, r3, [r3]
   11e1c:	f005 fc16 	bl	1764c <__adddf3>
   11e20:	4602      	mov	r2, r0
   11e22:	460b      	mov	r3, r1
   11e24:	4610      	mov	r0, r2
   11e26:	4619      	mov	r1, r3
   11e28:	f006 f8a4 	bl	17f74 <__aeabi_d2f>
   11e2c:	4603      	mov	r3, r0
   11e2e:	607b      	str	r3, [r7, #4]
   11e30:	6878      	ldr	r0, [r7, #4]
   11e32:	f005 fd69 	bl	17908 <__aeabi_f2d>
   11e36:	4602      	mov	r2, r0
   11e38:	460b      	mov	r3, r1
   11e3a:	4610      	mov	r0, r2
   11e3c:	4619      	mov	r1, r3
   11e3e:	a330      	add	r3, pc, #192	; (adr r3, 11f00 <course_pid_run+0x168>)
   11e40:	e9d3 2300 	ldrd	r2, r3, [r3]
   11e44:	f006 f826 	bl	17e94 <__aeabi_dcmplt>
   11e48:	4603      	mov	r3, r0
   11e4a:	2b00      	cmp	r3, #0
   11e4c:	d1dc      	bne.n	11e08 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
   11e4e:	f240 4308 	movw	r3, #1032	; 0x408
   11e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e56:	681b      	ldr	r3, [r3, #0]
   11e58:	4618      	mov	r0, r3
   11e5a:	6879      	ldr	r1, [r7, #4]
   11e5c:	f006 f9e8 	bl	18230 <__aeabi_fmul>
   11e60:	4603      	mov	r3, r0
   11e62:	461a      	mov	r2, r3
   11e64:	f24b 2370 	movw	r3, #45680	; 0xb270
   11e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e6c:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
   11e6e:	f24b 2370 	movw	r3, #45680	; 0xb270
   11e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e76:	681a      	ldr	r2, [r3, #0]
   11e78:	f240 430c 	movw	r3, #1036	; 0x40c
   11e7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e80:	681b      	ldr	r3, [r3, #0]
   11e82:	4610      	mov	r0, r2
   11e84:	4619      	mov	r1, r3
   11e86:	f006 fb8f 	bl	185a8 <__aeabi_fcmpgt>
   11e8a:	4603      	mov	r3, r0
   11e8c:	2b00      	cmp	r3, #0
   11e8e:	d00a      	beq.n	11ea6 <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
   11e90:	f240 430c 	movw	r3, #1036	; 0x40c
   11e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e98:	681a      	ldr	r2, [r3, #0]
   11e9a:	f24b 2370 	movw	r3, #45680	; 0xb270
   11e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ea2:	601a      	str	r2, [r3, #0]
   11ea4:	e01e      	b.n	11ee4 <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
   11ea6:	f240 430c 	movw	r3, #1036	; 0x40c
   11eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11eae:	681b      	ldr	r3, [r3, #0]
   11eb0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11eb4:	f24b 2370 	movw	r3, #45680	; 0xb270
   11eb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ebc:	681b      	ldr	r3, [r3, #0]
   11ebe:	4610      	mov	r0, r2
   11ec0:	4619      	mov	r1, r3
   11ec2:	f006 fb71 	bl	185a8 <__aeabi_fcmpgt>
   11ec6:	4603      	mov	r3, r0
   11ec8:	2b00      	cmp	r3, #0
   11eca:	d00b      	beq.n	11ee4 <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
   11ecc:	f240 430c 	movw	r3, #1036	; 0x40c
   11ed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ed4:	681b      	ldr	r3, [r3, #0]
   11ed6:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11eda:	f24b 2370 	movw	r3, #45680	; 0xb270
   11ede:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ee2:	601a      	str	r2, [r3, #0]
}
   11ee4:	3708      	adds	r7, #8
   11ee6:	46bd      	mov	sp, r7
   11ee8:	bd80      	pop	{r7, pc}
   11eea:	bf00      	nop
   11eec:	f3af 8000 	nop.w
   11ef0:	54442d18 	.word	0x54442d18
   11ef4:	401921fb 	.word	0x401921fb
   11ef8:	54442d18 	.word	0x54442d18
   11efc:	400921fb 	.word	0x400921fb
   11f00:	54442d18 	.word	0x54442d18
   11f04:	c00921fb 	.word	0xc00921fb

00011f08 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
   11f08:	b5b0      	push	{r4, r5, r7, lr}
   11f0a:	b082      	sub	sp, #8
   11f0c:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
   11f0e:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
   11f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f16:	681a      	ldr	r2, [r3, #0]
   11f18:	f24b 2330 	movw	r3, #45616	; 0xb230
   11f1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f20:	681b      	ldr	r3, [r3, #0]
   11f22:	4610      	mov	r0, r2
   11f24:	4619      	mov	r1, r3
   11f26:	f006 f879 	bl	1801c <__aeabi_fsub>
   11f2a:	4603      	mov	r3, r0
   11f2c:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
   11f2e:	f64a 63cf 	movw	r3, #44751	; 0xaecf
   11f32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f36:	781b      	ldrb	r3, [r3, #0]
   11f38:	2b00      	cmp	r3, #0
   11f3a:	f000 80a8 	beq.w	1208e <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
   11f3e:	f24b 2368 	movw	r3, #45672	; 0xb268
   11f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f46:	881b      	ldrh	r3, [r3, #0]
   11f48:	b29a      	uxth	r2, r3
   11f4a:	f24b 231c 	movw	r3, #45596	; 0xb21c
   11f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f52:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
   11f54:	f240 4314 	movw	r3, #1044	; 0x414
   11f58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f5c:	681a      	ldr	r2, [r3, #0]
   11f5e:	f24b 233c 	movw	r3, #45628	; 0xb23c
   11f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f66:	681b      	ldr	r3, [r3, #0]
   11f68:	4610      	mov	r0, r2
   11f6a:	4619      	mov	r1, r3
   11f6c:	f006 f960 	bl	18230 <__aeabi_fmul>
   11f70:	4603      	mov	r3, r0
   11f72:	4618      	mov	r0, r3
   11f74:	6879      	ldr	r1, [r7, #4]
   11f76:	f006 f853 	bl	18020 <__addsf3>
   11f7a:	4603      	mov	r3, r0
   11f7c:	461a      	mov	r2, r3
   11f7e:	f240 4310 	movw	r3, #1040	; 0x410
   11f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f86:	681b      	ldr	r3, [r3, #0]
   11f88:	4610      	mov	r0, r2
   11f8a:	4619      	mov	r1, r3
   11f8c:	f006 f950 	bl	18230 <__aeabi_fmul>
   11f90:	4603      	mov	r3, r0
   11f92:	461a      	mov	r2, r3
   11f94:	f24b 2318 	movw	r3, #45592	; 0xb218
   11f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f9c:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
   11f9e:	f24b 2318 	movw	r3, #45592	; 0xb218
   11fa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fa6:	681a      	ldr	r2, [r3, #0]
   11fa8:	f240 4318 	movw	r3, #1048	; 0x418
   11fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fb0:	681b      	ldr	r3, [r3, #0]
   11fb2:	4610      	mov	r0, r2
   11fb4:	4619      	mov	r1, r3
   11fb6:	f006 faf7 	bl	185a8 <__aeabi_fcmpgt>
   11fba:	4603      	mov	r3, r0
   11fbc:	2b00      	cmp	r3, #0
   11fbe:	d009      	beq.n	11fd4 <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
   11fc0:	f240 4318 	movw	r3, #1048	; 0x418
   11fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fc8:	681a      	ldr	r2, [r3, #0]
   11fca:	f24b 2318 	movw	r3, #45592	; 0xb218
   11fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fd2:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
   11fd4:	f24b 2318 	movw	r3, #45592	; 0xb218
   11fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fdc:	681a      	ldr	r2, [r3, #0]
   11fde:	f240 431c 	movw	r3, #1052	; 0x41c
   11fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fe6:	681b      	ldr	r3, [r3, #0]
   11fe8:	4610      	mov	r0, r2
   11fea:	4619      	mov	r1, r3
   11fec:	f006 fabe 	bl	1856c <__aeabi_fcmplt>
   11ff0:	4603      	mov	r3, r0
   11ff2:	2b00      	cmp	r3, #0
   11ff4:	d009      	beq.n	1200a <climb_pid_run+0x102>
      desired_pitch = min_pitch;
   11ff6:	f240 431c 	movw	r3, #1052	; 0x41c
   11ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ffe:	681a      	ldr	r2, [r3, #0]
   12000:	f24b 2318 	movw	r3, #45592	; 0xb218
   12004:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12008:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
   1200a:	f24b 233c 	movw	r3, #45628	; 0xb23c
   1200e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12012:	681b      	ldr	r3, [r3, #0]
   12014:	4618      	mov	r0, r3
   12016:	6879      	ldr	r1, [r7, #4]
   12018:	f006 f802 	bl	18020 <__addsf3>
   1201c:	4603      	mov	r3, r0
   1201e:	461a      	mov	r2, r3
   12020:	f24b 233c 	movw	r3, #45628	; 0xb23c
   12024:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12028:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
   1202a:	f24b 233c 	movw	r3, #45628	; 0xb23c
   1202e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12032:	681b      	ldr	r3, [r3, #0]
   12034:	4618      	mov	r0, r3
   12036:	f04f 0100 	mov.w	r1, #0
   1203a:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   1203e:	f006 fab3 	bl	185a8 <__aeabi_fcmpgt>
   12042:	4603      	mov	r3, r0
   12044:	2b00      	cmp	r3, #0
   12046:	d008      	beq.n	1205a <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
   12048:	f24b 233c 	movw	r3, #45628	; 0xb23c
   1204c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12050:	f04f 0200 	mov.w	r2, #0
   12054:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   12058:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
   1205a:	f24b 233c 	movw	r3, #45628	; 0xb23c
   1205e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12062:	681b      	ldr	r3, [r3, #0]
   12064:	4618      	mov	r0, r3
   12066:	f04f 0100 	mov.w	r1, #0
   1206a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1206e:	f006 fa7d 	bl	1856c <__aeabi_fcmplt>
   12072:	4603      	mov	r3, r0
   12074:	2b00      	cmp	r3, #0
   12076:	d100      	bne.n	1207a <climb_pid_run+0x172>
   12078:	e109      	b.n	1228e <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
   1207a:	f24b 233c 	movw	r3, #45628	; 0xb23c
   1207e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12082:	f04f 0200 	mov.w	r2, #0
   12086:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   1208a:	601a      	str	r2, [r3, #0]
   1208c:	e0ff      	b.n	1228e <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
   1208e:	f24b 2330 	movw	r3, #45616	; 0xb230
   12092:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12096:	681b      	ldr	r3, [r3, #0]
   12098:	4618      	mov	r0, r3
   1209a:	f04f 0100 	mov.w	r1, #0
   1209e:	f006 fa83 	bl	185a8 <__aeabi_fcmpgt>
   120a2:	4603      	mov	r3, r0
   120a4:	2b00      	cmp	r3, #0
   120a6:	d010      	beq.n	120ca <climb_pid_run+0x1c2>
   120a8:	f24b 2330 	movw	r3, #45616	; 0xb230
   120ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120b0:	681a      	ldr	r2, [r3, #0]
   120b2:	f240 4304 	movw	r3, #1028	; 0x404
   120b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120ba:	681b      	ldr	r3, [r3, #0]
   120bc:	4610      	mov	r0, r2
   120be:	4619      	mov	r1, r3
   120c0:	f006 f8b6 	bl	18230 <__aeabi_fmul>
   120c4:	4603      	mov	r3, r0
   120c6:	461a      	mov	r2, r3
   120c8:	e001      	b.n	120ce <climb_pid_run+0x1c6>
   120ca:	f04f 0200 	mov.w	r2, #0
   120ce:	f24b 2328 	movw	r3, #45608	; 0xb228
   120d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120d6:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
   120d8:	f64c 42cd 	movw	r2, #52429	; 0xcccd
   120dc:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
   120e0:	f24b 2338 	movw	r3, #45624	; 0xb238
   120e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120e8:	681b      	ldr	r3, [r3, #0]
   120ea:	4610      	mov	r0, r2
   120ec:	4619      	mov	r1, r3
   120ee:	f006 f89f 	bl	18230 <__aeabi_fmul>
   120f2:	4603      	mov	r3, r0
   120f4:	4618      	mov	r0, r3
   120f6:	6879      	ldr	r1, [r7, #4]
   120f8:	f005 ff92 	bl	18020 <__addsf3>
   120fc:	4603      	mov	r3, r0
   120fe:	461a      	mov	r2, r3
   12100:	f24c 238f 	movw	r3, #49807	; 0xc28f
   12104:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
   12108:	4610      	mov	r0, r2
   1210a:	4619      	mov	r1, r3
   1210c:	f006 f890 	bl	18230 <__aeabi_fmul>
   12110:	4603      	mov	r3, r0
   12112:	4618      	mov	r0, r3
   12114:	f005 fbf8 	bl	17908 <__aeabi_f2d>
   12118:	4602      	mov	r2, r0
   1211a:	460b      	mov	r3, r1
   1211c:	4610      	mov	r0, r2
   1211e:	4619      	mov	r1, r3
   12120:	a35d      	add	r3, pc, #372	; (adr r3, 12298 <climb_pid_run+0x390>)
   12122:	e9d3 2300 	ldrd	r2, r3, [r3]
   12126:	f005 fa91 	bl	1764c <__adddf3>
   1212a:	4602      	mov	r2, r0
   1212c:	460b      	mov	r3, r1
   1212e:	4614      	mov	r4, r2
   12130:	461d      	mov	r5, r3
   12132:	f24b 2330 	movw	r3, #45616	; 0xb230
   12136:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1213a:	681b      	ldr	r3, [r3, #0]
   1213c:	4618      	mov	r0, r3
   1213e:	f005 fbe3 	bl	17908 <__aeabi_f2d>
   12142:	4602      	mov	r2, r0
   12144:	460b      	mov	r3, r1
   12146:	4610      	mov	r0, r2
   12148:	4619      	mov	r1, r3
   1214a:	a355      	add	r3, pc, #340	; (adr r3, 122a0 <climb_pid_run+0x398>)
   1214c:	e9d3 2300 	ldrd	r2, r3, [r3]
   12150:	f005 fc2e 	bl	179b0 <__aeabi_dmul>
   12154:	4602      	mov	r2, r0
   12156:	460b      	mov	r3, r1
   12158:	4620      	mov	r0, r4
   1215a:	4629      	mov	r1, r5
   1215c:	f005 fa76 	bl	1764c <__adddf3>
   12160:	4602      	mov	r2, r0
   12162:	460b      	mov	r3, r1
   12164:	4610      	mov	r0, r2
   12166:	4619      	mov	r1, r3
   12168:	f005 ff04 	bl	17f74 <__aeabi_d2f>
   1216c:	4603      	mov	r3, r0
   1216e:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
   12170:	f24b 2338 	movw	r3, #45624	; 0xb238
   12174:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12178:	681b      	ldr	r3, [r3, #0]
   1217a:	4618      	mov	r0, r3
   1217c:	6879      	ldr	r1, [r7, #4]
   1217e:	f005 ff4f 	bl	18020 <__addsf3>
   12182:	4603      	mov	r3, r0
   12184:	461a      	mov	r2, r3
   12186:	f24b 2338 	movw	r3, #45624	; 0xb238
   1218a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1218e:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
   12190:	f24b 2338 	movw	r3, #45624	; 0xb238
   12194:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12198:	681b      	ldr	r3, [r3, #0]
   1219a:	4618      	mov	r0, r3
   1219c:	f04f 0100 	mov.w	r1, #0
   121a0:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   121a4:	f006 fa00 	bl	185a8 <__aeabi_fcmpgt>
   121a8:	4603      	mov	r3, r0
   121aa:	2b00      	cmp	r3, #0
   121ac:	d008      	beq.n	121c0 <climb_pid_run+0x2b8>
   121ae:	f24b 2338 	movw	r3, #45624	; 0xb238
   121b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121b6:	f04f 0200 	mov.w	r2, #0
   121ba:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   121be:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
   121c0:	f24b 2338 	movw	r3, #45624	; 0xb238
   121c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121c8:	681b      	ldr	r3, [r3, #0]
   121ca:	4618      	mov	r0, r3
   121cc:	f04f 0100 	mov.w	r1, #0
   121d0:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   121d4:	f006 f9ca 	bl	1856c <__aeabi_fcmplt>
   121d8:	4603      	mov	r3, r0
   121da:	2b00      	cmp	r3, #0
   121dc:	d008      	beq.n	121f0 <climb_pid_run+0x2e8>
   121de:	f24b 2338 	movw	r3, #45624	; 0xb238
   121e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121e6:	f04f 0200 	mov.w	r2, #0
   121ea:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   121ee:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
   121f0:	6838      	ldr	r0, [r7, #0]
   121f2:	f04f 0100 	mov.w	r1, #0
   121f6:	f2c4 6116 	movt	r1, #17942	; 0x4616
   121fa:	f006 f819 	bl	18230 <__aeabi_fmul>
   121fe:	4603      	mov	r3, r0
   12200:	4618      	mov	r0, r3
   12202:	f04f 0100 	mov.w	r1, #0
   12206:	f006 f9b1 	bl	1856c <__aeabi_fcmplt>
   1220a:	4603      	mov	r3, r0
   1220c:	2b00      	cmp	r3, #0
   1220e:	d001      	beq.n	12214 <climb_pid_run+0x30c>
   12210:	2200      	movs	r2, #0
   12212:	e022      	b.n	1225a <climb_pid_run+0x352>
   12214:	6838      	ldr	r0, [r7, #0]
   12216:	f04f 0100 	mov.w	r1, #0
   1221a:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1221e:	f006 f807 	bl	18230 <__aeabi_fmul>
   12222:	4603      	mov	r3, r0
   12224:	4618      	mov	r0, r3
   12226:	f04f 0100 	mov.w	r1, #0
   1222a:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1222e:	f006 f9bb 	bl	185a8 <__aeabi_fcmpgt>
   12232:	4603      	mov	r3, r0
   12234:	2b00      	cmp	r3, #0
   12236:	d002      	beq.n	1223e <climb_pid_run+0x336>
   12238:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   1223c:	e00c      	b.n	12258 <climb_pid_run+0x350>
   1223e:	6838      	ldr	r0, [r7, #0]
   12240:	f04f 0100 	mov.w	r1, #0
   12244:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12248:	f005 fff2 	bl	18230 <__aeabi_fmul>
   1224c:	4603      	mov	r3, r0
   1224e:	4618      	mov	r0, r3
   12250:	f006 f9b4 	bl	185bc <__aeabi_f2iz>
   12254:	4603      	mov	r3, r0
   12256:	b29b      	uxth	r3, r3
   12258:	b29a      	uxth	r2, r3
   1225a:	f24b 231c 	movw	r3, #45596	; 0xb21c
   1225e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12262:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
   12264:	f24b 236c 	movw	r3, #45676	; 0xb26c
   12268:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1226c:	681a      	ldr	r2, [r3, #0]
   1226e:	f24b 2328 	movw	r3, #45608	; 0xb228
   12272:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12276:	681b      	ldr	r3, [r3, #0]
   12278:	4610      	mov	r0, r2
   1227a:	4619      	mov	r1, r3
   1227c:	f005 fed0 	bl	18020 <__addsf3>
   12280:	4603      	mov	r3, r0
   12282:	461a      	mov	r2, r3
   12284:	f24b 2318 	movw	r3, #45592	; 0xb218
   12288:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1228c:	601a      	str	r2, [r3, #0]
  }
}
   1228e:	3708      	adds	r7, #8
   12290:	46bd      	mov	sp, r7
   12292:	bdb0      	pop	{r4, r5, r7, pc}
   12294:	f3af 8000 	nop.w
   12298:	3d70a3d7 	.word	0x3d70a3d7
   1229c:	3fd3d70a 	.word	0x3fd3d70a
   122a0:	9999999a 	.word	0x9999999a
   122a4:	3fc99999 	.word	0x3fc99999

000122a8 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
   122a8:	b580      	push	{r7, lr}
   122aa:	b082      	sub	sp, #8
   122ac:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
   122ae:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
   122b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122b6:	681a      	ldr	r2, [r3, #0]
   122b8:	f240 4324 	movw	r3, #1060	; 0x424
   122bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122c0:	681b      	ldr	r3, [r3, #0]
   122c2:	4610      	mov	r0, r2
   122c4:	4619      	mov	r1, r3
   122c6:	f005 fea9 	bl	1801c <__aeabi_fsub>
   122ca:	4603      	mov	r3, r0
   122cc:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
   122ce:	f240 4320 	movw	r3, #1056	; 0x420
   122d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122d6:	681b      	ldr	r3, [r3, #0]
   122d8:	4618      	mov	r0, r3
   122da:	6879      	ldr	r1, [r7, #4]
   122dc:	f005 ffa8 	bl	18230 <__aeabi_fmul>
   122e0:	4603      	mov	r3, r0
   122e2:	461a      	mov	r2, r3
   122e4:	f24b 2334 	movw	r3, #45620	; 0xb234
   122e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   122ec:	681b      	ldr	r3, [r3, #0]
   122ee:	4610      	mov	r0, r2
   122f0:	4619      	mov	r1, r3
   122f2:	f005 fe95 	bl	18020 <__addsf3>
   122f6:	4603      	mov	r3, r0
   122f8:	461a      	mov	r2, r3
   122fa:	f24b 2330 	movw	r3, #45616	; 0xb230
   122fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12302:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
   12304:	f24b 2330 	movw	r3, #45616	; 0xb230
   12308:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1230c:	681b      	ldr	r3, [r3, #0]
   1230e:	4618      	mov	r0, r3
   12310:	f04f 0100 	mov.w	r1, #0
   12314:	f6cb 7180 	movt	r1, #49024	; 0xbf80
   12318:	f006 f928 	bl	1856c <__aeabi_fcmplt>
   1231c:	4603      	mov	r3, r0
   1231e:	2b00      	cmp	r3, #0
   12320:	d008      	beq.n	12334 <altitude_pid_run+0x8c>
   12322:	f24b 2330 	movw	r3, #45616	; 0xb230
   12326:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1232a:	f04f 0200 	mov.w	r2, #0
   1232e:	f6cb 7280 	movt	r2, #49024	; 0xbf80
   12332:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
   12334:	f24b 2330 	movw	r3, #45616	; 0xb230
   12338:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1233c:	681b      	ldr	r3, [r3, #0]
   1233e:	4618      	mov	r0, r3
   12340:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   12344:	f006 f930 	bl	185a8 <__aeabi_fcmpgt>
   12348:	4603      	mov	r3, r0
   1234a:	2b00      	cmp	r3, #0
   1234c:	d006      	beq.n	1235c <altitude_pid_run+0xb4>
   1234e:	f24b 2330 	movw	r3, #45616	; 0xb230
   12352:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12356:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   1235a:	601a      	str	r2, [r3, #0]
}
   1235c:	3708      	adds	r7, #8
   1235e:	46bd      	mov	sp, r7
   12360:	bd80      	pop	{r7, pc}
   12362:	bf00      	nop
   12364:	f3af 8000 	nop.w

00012368 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
   12368:	b5f0      	push	{r4, r5, r6, r7, lr}
   1236a:	b08b      	sub	sp, #44	; 0x2c
   1236c:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
   1236e:	f24b 2341 	movw	r3, #45633	; 0xb241
   12372:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12376:	781b      	ldrb	r3, [r3, #0]
   12378:	2b00      	cmp	r3, #0
   1237a:	f040 8169 	bne.w	12650 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
   1237e:	f24b 2340 	movw	r3, #45632	; 0xb240
   12382:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12386:	781b      	ldrb	r3, [r3, #0]
   12388:	2b00      	cmp	r3, #0
   1238a:	d13c      	bne.n	12406 <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
   1238c:	f24b 2340 	movw	r3, #45632	; 0xb240
   12390:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12394:	2200      	movs	r2, #0
   12396:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
   12398:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
   1239c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123a0:	881b      	ldrh	r3, [r3, #0]
   123a2:	2b00      	cmp	r3, #0
   123a4:	d000      	beq.n	123a8 <auto_nav+0x40>
   123a6:	e03d      	b.n	12424 <auto_nav+0xbc>
	else NextStage(); 
   123a8:	f24b 2340 	movw	r3, #45632	; 0xb240
   123ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123b0:	781b      	ldrb	r3, [r3, #0]
   123b2:	3301      	adds	r3, #1
   123b4:	b2da      	uxtb	r2, r3
   123b6:	f24b 2340 	movw	r3, #45632	; 0xb240
   123ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123be:	701a      	strb	r2, [r3, #0]
   123c0:	f24b 439c 	movw	r3, #46236	; 0xb49c
   123c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123c8:	681a      	ldr	r2, [r3, #0]
   123ca:	f24b 2344 	movw	r3, #45636	; 0xb244
   123ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123d2:	601a      	str	r2, [r3, #0]
   123d4:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   123d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123dc:	681a      	ldr	r2, [r3, #0]
   123de:	f24b 2348 	movw	r3, #45640	; 0xb248
   123e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123e6:	601a      	str	r2, [r3, #0]
   123e8:	f24b 2354 	movw	r3, #45652	; 0xb254
   123ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123f0:	2200      	movs	r2, #0
   123f2:	801a      	strh	r2, [r3, #0]
   123f4:	f24b 2358 	movw	r3, #45656	; 0xb258
   123f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123fc:	f04f 0200 	mov.w	r2, #0
   12400:	601a      	str	r2, [r3, #0]
   12402:	f002 b883 	b.w	1450c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   12406:	f24b 2340 	movw	r3, #45632	; 0xb240
   1240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1240e:	781b      	ldrb	r3, [r3, #0]
   12410:	2b01      	cmp	r3, #1
   12412:	d100      	bne.n	12416 <auto_nav+0xae>
    {   Goto(while_1)}
   12414:	e7ba      	b.n	1238c <auto_nav+0x24>
    else if (nav_stage == 2)
   12416:	f24b 2340 	movw	r3, #45632	; 0xb240
   1241a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1241e:	781b      	ldrb	r3, [r3, #0]
   12420:	2b02      	cmp	r3, #2
   12422:	d162      	bne.n	124ea <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
   12424:	f24b 2340 	movw	r3, #45632	; 0xb240
   12428:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1242c:	2202      	movs	r2, #2
   1242e:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
   12430:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
   12434:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12438:	881b      	ldrh	r3, [r3, #0]
   1243a:	2b08      	cmp	r3, #8
   1243c:	d92e      	bls.n	1249c <auto_nav+0x134>
   1243e:	f24b 2340 	movw	r3, #45632	; 0xb240
   12442:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12446:	781b      	ldrb	r3, [r3, #0]
   12448:	3301      	adds	r3, #1
   1244a:	b2da      	uxtb	r2, r3
   1244c:	f24b 2340 	movw	r3, #45632	; 0xb240
   12450:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12454:	701a      	strb	r2, [r3, #0]
   12456:	f24b 439c 	movw	r3, #46236	; 0xb49c
   1245a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1245e:	681a      	ldr	r2, [r3, #0]
   12460:	f24b 2344 	movw	r3, #45636	; 0xb244
   12464:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12468:	601a      	str	r2, [r3, #0]
   1246a:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   1246e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12472:	681a      	ldr	r2, [r3, #0]
   12474:	f24b 2348 	movw	r3, #45640	; 0xb248
   12478:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1247c:	601a      	str	r2, [r3, #0]
   1247e:	f24b 2354 	movw	r3, #45652	; 0xb254
   12482:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12486:	2200      	movs	r2, #0
   12488:	801a      	strh	r2, [r3, #0]
   1248a:	f24b 2358 	movw	r3, #45656	; 0xb258
   1248e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12492:	f04f 0200 	mov.w	r2, #0
   12496:	601a      	str	r2, [r3, #0]
   12498:	f002 b838 	b.w	1450c <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   1249c:	f24b 232c 	movw	r3, #45612	; 0xb22c
   124a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124a4:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   124a8:	f2c4 0296 	movt	r2, #16534	; 0x4096
   124ac:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   124ae:	f64a 63cf 	movw	r3, #44751	; 0xaecf
   124b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124b6:	2200      	movs	r2, #0
   124b8:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
   124ba:	f24b 236c 	movw	r3, #45676	; 0xb26c
   124be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124c2:	f649 129a 	movw	r2, #39322	; 0x999a
   124c6:	f6c3 6219 	movt	r2, #15897	; 0x3e19
   124ca:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
   124cc:	f64a 63cd 	movw	r3, #44749	; 0xaecd
   124d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124d4:	2201      	movs	r2, #1
   124d6:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
   124d8:	f24b 2368 	movw	r3, #45672	; 0xb268
   124dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124e0:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
   124e4:	801a      	strh	r2, [r3, #0]
        }
        return;
   124e6:	f002 b811 	b.w	1450c <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
   124ea:	f24b 2340 	movw	r3, #45632	; 0xb240
   124ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124f2:	781b      	ldrb	r3, [r3, #0]
   124f4:	2b03      	cmp	r3, #3
   124f6:	d168      	bne.n	125ca <auto_nav+0x262>
     {
	nav_stage = 3;	
   124f8:	f24b 2340 	movw	r3, #45632	; 0xb240
   124fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12500:	2203      	movs	r2, #3
   12502:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
   12504:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
   12508:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1250c:	681b      	ldr	r3, [r3, #0]
   1250e:	4618      	mov	r0, r3
   12510:	f04f 0100 	mov.w	r1, #0
   12514:	f2c4 3116 	movt	r1, #17174	; 0x4316
   12518:	f006 f846 	bl	185a8 <__aeabi_fcmpgt>
   1251c:	4603      	mov	r3, r0
   1251e:	2b00      	cmp	r3, #0
   12520:	d02e      	beq.n	12580 <auto_nav+0x218>
   12522:	f24b 2340 	movw	r3, #45632	; 0xb240
   12526:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1252a:	781b      	ldrb	r3, [r3, #0]
   1252c:	3301      	adds	r3, #1
   1252e:	b2da      	uxtb	r2, r3
   12530:	f24b 2340 	movw	r3, #45632	; 0xb240
   12534:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12538:	701a      	strb	r2, [r3, #0]
   1253a:	f24b 439c 	movw	r3, #46236	; 0xb49c
   1253e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12542:	681a      	ldr	r2, [r3, #0]
   12544:	f24b 2344 	movw	r3, #45636	; 0xb244
   12548:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1254c:	601a      	str	r2, [r3, #0]
   1254e:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   12552:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12556:	681a      	ldr	r2, [r3, #0]
   12558:	f24b 2348 	movw	r3, #45640	; 0xb248
   1255c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12560:	601a      	str	r2, [r3, #0]
   12562:	f24b 2354 	movw	r3, #45652	; 0xb254
   12566:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1256a:	2200      	movs	r2, #0
   1256c:	801a      	strh	r2, [r3, #0]
   1256e:	f24b 2358 	movw	r3, #45656	; 0xb258
   12572:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12576:	f04f 0200 	mov.w	r2, #0
   1257a:	601a      	str	r2, [r3, #0]
   1257c:	f001 bfc6 	b.w	1450c <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   12580:	f24b 232c 	movw	r3, #45612	; 0xb22c
   12584:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12588:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   1258c:	f2c4 0296 	movt	r2, #16534	; 0x4096
   12590:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   12592:	f64a 63cf 	movw	r3, #44751	; 0xaecf
   12596:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1259a:	2200      	movs	r2, #0
   1259c:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   1259e:	f24b 236c 	movw	r3, #45676	; 0xb26c
   125a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125a6:	f04f 0200 	mov.w	r2, #0
   125aa:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
   125ac:	f64a 63cd 	movw	r3, #44749	; 0xaecd
   125b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125b4:	2202      	movs	r2, #2
   125b6:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
   125b8:	f24b 2330 	movw	r3, #45616	; 0xb230
   125bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125c0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   125c4:	601a      	str	r2, [r3, #0]
        }
        return;
   125c6:	f001 bfa1 	b.w	1450c <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
   125ca:	f24b 2340 	movw	r3, #45632	; 0xb240
   125ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125d2:	781b      	ldrb	r3, [r3, #0]
   125d4:	2b04      	cmp	r3, #4
   125d6:	f041 8799 	bne.w	1450c <auto_nav+0x21a4>
        NextBlock()
   125da:	f24b 2341 	movw	r3, #45633	; 0xb241
   125de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125e2:	781b      	ldrb	r3, [r3, #0]
   125e4:	3301      	adds	r3, #1
   125e6:	b2da      	uxtb	r2, r3
   125e8:	f24b 2341 	movw	r3, #45633	; 0xb241
   125ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125f0:	701a      	strb	r2, [r3, #0]
   125f2:	f24b 2340 	movw	r3, #45632	; 0xb240
   125f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   125fa:	2200      	movs	r2, #0
   125fc:	701a      	strb	r2, [r3, #0]
   125fe:	f24b 2356 	movw	r3, #45654	; 0xb256
   12602:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12606:	2200      	movs	r2, #0
   12608:	801a      	strh	r2, [r3, #0]
   1260a:	f24b 439c 	movw	r3, #46236	; 0xb49c
   1260e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12612:	681a      	ldr	r2, [r3, #0]
   12614:	f24b 2344 	movw	r3, #45636	; 0xb244
   12618:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1261c:	601a      	str	r2, [r3, #0]
   1261e:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   12622:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12626:	681a      	ldr	r2, [r3, #0]
   12628:	f24b 2348 	movw	r3, #45640	; 0xb248
   1262c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12630:	601a      	str	r2, [r3, #0]
   12632:	f24b 2354 	movw	r3, #45652	; 0xb254
   12636:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1263a:	2200      	movs	r2, #0
   1263c:	801a      	strh	r2, [r3, #0]
   1263e:	f24b 2358 	movw	r3, #45656	; 0xb258
   12642:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12646:	f04f 0200 	mov.w	r2, #0
   1264a:	601a      	str	r2, [r3, #0]
   1264c:	f001 bf5e 	b.w	1450c <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
   12650:	f24b 2341 	movw	r3, #45633	; 0xb241
   12654:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12658:	781b      	ldrb	r3, [r3, #0]
   1265a:	2b01      	cmp	r3, #1
   1265c:	f040 81bc 	bne.w	129d8 <auto_nav+0x670>
{
    nav_block = 1;
   12660:	f24b 2341 	movw	r3, #45633	; 0xb241
   12664:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12668:	2201      	movs	r2, #1
   1266a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
   1266c:	f64a 63d0 	movw	r3, #44752	; 0xaed0
   12670:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12674:	781b      	ldrb	r3, [r3, #0]
   12676:	2b00      	cmp	r3, #0
   12678:	d007      	beq.n	1268a <auto_nav+0x322>
   1267a:	f64a 63d0 	movw	r3, #44752	; 0xaed0
   1267e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12682:	2200      	movs	r2, #0
   12684:	701a      	strb	r2, [r3, #0]
   12686:	2301      	movs	r3, #1
   12688:	e000      	b.n	1268c <auto_nav+0x324>
   1268a:	2300      	movs	r3, #0
   1268c:	2b00      	cmp	r3, #0
   1268e:	d034      	beq.n	126fa <auto_nav+0x392>
	{ GotoBlock(2) }
   12690:	f24b 2341 	movw	r3, #45633	; 0xb241
   12694:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12698:	2202      	movs	r2, #2
   1269a:	701a      	strb	r2, [r3, #0]
   1269c:	f24b 2340 	movw	r3, #45632	; 0xb240
   126a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126a4:	2200      	movs	r2, #0
   126a6:	701a      	strb	r2, [r3, #0]
   126a8:	f24b 2356 	movw	r3, #45654	; 0xb256
   126ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126b0:	2200      	movs	r2, #0
   126b2:	801a      	strh	r2, [r3, #0]
   126b4:	f24b 439c 	movw	r3, #46236	; 0xb49c
   126b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126bc:	681a      	ldr	r2, [r3, #0]
   126be:	f24b 2344 	movw	r3, #45636	; 0xb244
   126c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126c6:	601a      	str	r2, [r3, #0]
   126c8:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   126cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126d0:	681a      	ldr	r2, [r3, #0]
   126d2:	f24b 2348 	movw	r3, #45640	; 0xb248
   126d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126da:	601a      	str	r2, [r3, #0]
   126dc:	f24b 2354 	movw	r3, #45652	; 0xb254
   126e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126e4:	2200      	movs	r2, #0
   126e6:	801a      	strh	r2, [r3, #0]
   126e8:	f24b 2358 	movw	r3, #45656	; 0xb258
   126ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   126f0:	f04f 0200 	mov.w	r2, #0
   126f4:	601a      	str	r2, [r3, #0]
   126f6:	f001 bf09 	b.w	1450c <auto_nav+0x21a4>
    if(nav_stage == 0)
   126fa:	f24b 2340 	movw	r3, #45632	; 0xb240
   126fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12702:	781b      	ldrb	r3, [r3, #0]
   12704:	2b00      	cmp	r3, #0
   12706:	d12e      	bne.n	12766 <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
   12708:	f24b 2340 	movw	r3, #45632	; 0xb240
   1270c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12710:	781b      	ldrb	r3, [r3, #0]
   12712:	3301      	adds	r3, #1
   12714:	b2da      	uxtb	r2, r3
   12716:	f24b 2340 	movw	r3, #45632	; 0xb240
   1271a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1271e:	701a      	strb	r2, [r3, #0]
   12720:	f24b 439c 	movw	r3, #46236	; 0xb49c
   12724:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12728:	681a      	ldr	r2, [r3, #0]
   1272a:	f24b 2344 	movw	r3, #45636	; 0xb244
   1272e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12732:	601a      	str	r2, [r3, #0]
   12734:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   12738:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1273c:	681a      	ldr	r2, [r3, #0]
   1273e:	f24b 2348 	movw	r3, #45640	; 0xb248
   12742:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12746:	601a      	str	r2, [r3, #0]
   12748:	f24b 2354 	movw	r3, #45652	; 0xb254
   1274c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12750:	2200      	movs	r2, #0
   12752:	801a      	strh	r2, [r3, #0]
   12754:	f24b 2358 	movw	r3, #45656	; 0xb258
   12758:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1275c:	f04f 0200 	mov.w	r2, #0
   12760:	601a      	str	r2, [r3, #0]
   12762:	f001 bed3 	b.w	1450c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   12766:	f24b 2340 	movw	r3, #45632	; 0xb240
   1276a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1276e:	781b      	ldrb	r3, [r3, #0]
   12770:	2b01      	cmp	r3, #1
   12772:	d169      	bne.n	12848 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
   12774:	f24b 2340 	movw	r3, #45632	; 0xb240
   12778:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1277c:	2201      	movs	r2, #1
   1277e:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
   12780:	2001      	movs	r0, #1
   12782:	f001 fed1 	bl	14528 <approaching>
   12786:	4603      	mov	r3, r0
   12788:	2b00      	cmp	r3, #0
   1278a:	d034      	beq.n	127f6 <auto_nav+0x48e>
   1278c:	f24b 234c 	movw	r3, #45644	; 0xb24c
   12790:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12794:	2201      	movs	r2, #1
   12796:	701a      	strb	r2, [r3, #0]
   12798:	f24b 2340 	movw	r3, #45632	; 0xb240
   1279c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127a0:	781b      	ldrb	r3, [r3, #0]
   127a2:	3301      	adds	r3, #1
   127a4:	b2da      	uxtb	r2, r3
   127a6:	f24b 2340 	movw	r3, #45632	; 0xb240
   127aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127ae:	701a      	strb	r2, [r3, #0]
   127b0:	f24b 439c 	movw	r3, #46236	; 0xb49c
   127b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127b8:	681a      	ldr	r2, [r3, #0]
   127ba:	f24b 2344 	movw	r3, #45636	; 0xb244
   127be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127c2:	601a      	str	r2, [r3, #0]
   127c4:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   127c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127cc:	681a      	ldr	r2, [r3, #0]
   127ce:	f24b 2348 	movw	r3, #45640	; 0xb248
   127d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127d6:	601a      	str	r2, [r3, #0]
   127d8:	f24b 2354 	movw	r3, #45652	; 0xb254
   127dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127e0:	2200      	movs	r2, #0
   127e2:	801a      	strh	r2, [r3, #0]
   127e4:	f24b 2358 	movw	r3, #45656	; 0xb258
   127e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   127ec:	f04f 0200 	mov.w	r2, #0
   127f0:	601a      	str	r2, [r3, #0]
   127f2:	f001 be8b 	b.w	1450c <auto_nav+0x21a4>
            fly_to(1);
   127f6:	2001      	movs	r0, #1
   127f8:	f001 ffca 	bl	14790 <fly_to>
            auto_pitch = FALSE;
   127fc:	f64a 63cf 	movw	r3, #44751	; 0xaecf
   12800:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12804:	2200      	movs	r2, #0
   12806:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12808:	f24b 236c 	movw	r3, #45676	; 0xb26c
   1280c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12810:	f04f 0200 	mov.w	r2, #0
   12814:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12816:	f64a 63cd 	movw	r3, #44749	; 0xaecd
   1281a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1281e:	2203      	movs	r2, #3
   12820:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12822:	f240 4328 	movw	r3, #1064	; 0x428
   12826:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1282a:	695a      	ldr	r2, [r3, #20]
   1282c:	f240 4324 	movw	r3, #1060	; 0x424
   12830:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12834:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12836:	f24b 2334 	movw	r3, #45620	; 0xb234
   1283a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1283e:	f04f 0200 	mov.w	r2, #0
   12842:	601a      	str	r2, [r3, #0]
          }
          return;
   12844:	f001 be62 	b.w	1450c <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12848:	f24b 2340 	movw	r3, #45632	; 0xb240
   1284c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12850:	781b      	ldrb	r3, [r3, #0]
   12852:	2b02      	cmp	r3, #2
   12854:	d169      	bne.n	1292a <auto_nav+0x5c2>
     {
	  nav_stage = 2;
   12856:	f24b 2340 	movw	r3, #45632	; 0xb240
   1285a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1285e:	2202      	movs	r2, #2
   12860:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   12862:	2004      	movs	r0, #4
   12864:	f001 fe60 	bl	14528 <approaching>
   12868:	4603      	mov	r3, r0
   1286a:	2b00      	cmp	r3, #0
   1286c:	d034      	beq.n	128d8 <auto_nav+0x570>
   1286e:	f24b 234c 	movw	r3, #45644	; 0xb24c
   12872:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12876:	2204      	movs	r2, #4
   12878:	701a      	strb	r2, [r3, #0]
   1287a:	f24b 2340 	movw	r3, #45632	; 0xb240
   1287e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12882:	781b      	ldrb	r3, [r3, #0]
   12884:	3301      	adds	r3, #1
   12886:	b2da      	uxtb	r2, r3
   12888:	f24b 2340 	movw	r3, #45632	; 0xb240
   1288c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12890:	701a      	strb	r2, [r3, #0]
   12892:	f24b 439c 	movw	r3, #46236	; 0xb49c
   12896:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1289a:	681a      	ldr	r2, [r3, #0]
   1289c:	f24b 2344 	movw	r3, #45636	; 0xb244
   128a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128a4:	601a      	str	r2, [r3, #0]
   128a6:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   128aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128ae:	681a      	ldr	r2, [r3, #0]
   128b0:	f24b 2348 	movw	r3, #45640	; 0xb248
   128b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128b8:	601a      	str	r2, [r3, #0]
   128ba:	f24b 2354 	movw	r3, #45652	; 0xb254
   128be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128c2:	2200      	movs	r2, #0
   128c4:	801a      	strh	r2, [r3, #0]
   128c6:	f24b 2358 	movw	r3, #45656	; 0xb258
   128ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128ce:	f04f 0200 	mov.w	r2, #0
   128d2:	601a      	str	r2, [r3, #0]
   128d4:	f001 be1a 	b.w	1450c <auto_nav+0x21a4>
            fly_to(4);
   128d8:	2004      	movs	r0, #4
   128da:	f001 ff59 	bl	14790 <fly_to>
            auto_pitch = FALSE;
   128de:	f64a 63cf 	movw	r3, #44751	; 0xaecf
   128e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128e6:	2200      	movs	r2, #0
   128e8:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   128ea:	f24b 236c 	movw	r3, #45676	; 0xb26c
   128ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   128f2:	f04f 0200 	mov.w	r2, #0
   128f6:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   128f8:	f64a 63cd 	movw	r3, #44749	; 0xaecd
   128fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12900:	2203      	movs	r2, #3
   12902:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   12904:	f240 4328 	movw	r3, #1064	; 0x428
   12908:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1290c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1290e:	f240 4324 	movw	r3, #1060	; 0x424
   12912:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12916:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12918:	f24b 2334 	movw	r3, #45620	; 0xb234
   1291c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12920:	f04f 0200 	mov.w	r2, #0
   12924:	601a      	str	r2, [r3, #0]
          }
          return;
   12926:	f001 bdf1 	b.w	1450c <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   1292a:	f24b 2340 	movw	r3, #45632	; 0xb240
   1292e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12932:	781b      	ldrb	r3, [r3, #0]
   12934:	2b03      	cmp	r3, #3
   12936:	d106      	bne.n	12946 <auto_nav+0x5de>
      {
	  nav_stage = 3;
   12938:	f24b 2340 	movw	r3, #45632	; 0xb240
   1293c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12940:	2203      	movs	r2, #3
   12942:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
   12944:	e6e0      	b.n	12708 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
   12946:	f24b 2340 	movw	r3, #45632	; 0xb240
   1294a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1294e:	781b      	ldrb	r3, [r3, #0]
   12950:	2b04      	cmp	r3, #4
   12952:	f041 85db 	bne.w	1450c <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
   12956:	f24b 2340 	movw	r3, #45632	; 0xb240
   1295a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1295e:	2204      	movs	r2, #4
   12960:	701a      	strb	r2, [r3, #0]
        NextBlock()
   12962:	f24b 2341 	movw	r3, #45633	; 0xb241
   12966:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1296a:	781b      	ldrb	r3, [r3, #0]
   1296c:	3301      	adds	r3, #1
   1296e:	b2da      	uxtb	r2, r3
   12970:	f24b 2341 	movw	r3, #45633	; 0xb241
   12974:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12978:	701a      	strb	r2, [r3, #0]
   1297a:	f24b 2340 	movw	r3, #45632	; 0xb240
   1297e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12982:	2200      	movs	r2, #0
   12984:	701a      	strb	r2, [r3, #0]
   12986:	f24b 2356 	movw	r3, #45654	; 0xb256
   1298a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1298e:	2200      	movs	r2, #0
   12990:	801a      	strh	r2, [r3, #0]
   12992:	f24b 439c 	movw	r3, #46236	; 0xb49c
   12996:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1299a:	681a      	ldr	r2, [r3, #0]
   1299c:	f24b 2344 	movw	r3, #45636	; 0xb244
   129a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129a4:	601a      	str	r2, [r3, #0]
   129a6:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   129aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129ae:	681a      	ldr	r2, [r3, #0]
   129b0:	f24b 2348 	movw	r3, #45640	; 0xb248
   129b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129b8:	601a      	str	r2, [r3, #0]
   129ba:	f24b 2354 	movw	r3, #45652	; 0xb254
   129be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129c2:	2200      	movs	r2, #0
   129c4:	801a      	strh	r2, [r3, #0]
   129c6:	f24b 2358 	movw	r3, #45656	; 0xb258
   129ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129ce:	f04f 0200 	mov.w	r2, #0
   129d2:	601a      	str	r2, [r3, #0]
   129d4:	f001 bd9a 	b.w	1450c <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
   129d8:	f24b 2341 	movw	r3, #45633	; 0xb241
   129dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129e0:	781b      	ldrb	r3, [r3, #0]
   129e2:	2b02      	cmp	r3, #2
   129e4:	f040 8392 	bne.w	1310c <auto_nav+0xda4>
{
	nav_block = 2;
   129e8:	f24b 2341 	movw	r3, #45633	; 0xb241
   129ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129f0:	2202      	movs	r2, #2
   129f2:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
   129f4:	f64a 63d0 	movw	r3, #44752	; 0xaed0
   129f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129fc:	781b      	ldrb	r3, [r3, #0]
   129fe:	2b00      	cmp	r3, #0
   12a00:	d007      	beq.n	12a12 <auto_nav+0x6aa>
   12a02:	f64a 63d0 	movw	r3, #44752	; 0xaed0
   12a06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a0a:	2200      	movs	r2, #0
   12a0c:	701a      	strb	r2, [r3, #0]
   12a0e:	2301      	movs	r3, #1
   12a10:	e000      	b.n	12a14 <auto_nav+0x6ac>
   12a12:	2300      	movs	r3, #0
   12a14:	2b00      	cmp	r3, #0
   12a16:	d034      	beq.n	12a82 <auto_nav+0x71a>
   12a18:	f24b 2341 	movw	r3, #45633	; 0xb241
   12a1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a20:	2203      	movs	r2, #3
   12a22:	701a      	strb	r2, [r3, #0]
   12a24:	f24b 2340 	movw	r3, #45632	; 0xb240
   12a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a2c:	2200      	movs	r2, #0
   12a2e:	701a      	strb	r2, [r3, #0]
   12a30:	f24b 2356 	movw	r3, #45654	; 0xb256
   12a34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a38:	2200      	movs	r2, #0
   12a3a:	801a      	strh	r2, [r3, #0]
   12a3c:	f24b 439c 	movw	r3, #46236	; 0xb49c
   12a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a44:	681a      	ldr	r2, [r3, #0]
   12a46:	f24b 2344 	movw	r3, #45636	; 0xb244
   12a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a4e:	601a      	str	r2, [r3, #0]
   12a50:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   12a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a58:	681a      	ldr	r2, [r3, #0]
   12a5a:	f24b 2348 	movw	r3, #45640	; 0xb248
   12a5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a62:	601a      	str	r2, [r3, #0]
   12a64:	f24b 2354 	movw	r3, #45652	; 0xb254
   12a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a6c:	2200      	movs	r2, #0
   12a6e:	801a      	strh	r2, [r3, #0]
   12a70:	f24b 2358 	movw	r3, #45656	; 0xb258
   12a74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a78:	f04f 0200 	mov.w	r2, #0
   12a7c:	601a      	str	r2, [r3, #0]
   12a7e:	f001 bd45 	b.w	1450c <auto_nav+0x21a4>
    
    if(nav_stage == 0)
   12a82:	f24b 2340 	movw	r3, #45632	; 0xb240
   12a86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a8a:	781b      	ldrb	r3, [r3, #0]
   12a8c:	2b00      	cmp	r3, #0
   12a8e:	d134      	bne.n	12afa <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
   12a90:	f24b 2340 	movw	r3, #45632	; 0xb240
   12a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a98:	2200      	movs	r2, #0
   12a9a:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
   12a9c:	f24b 2340 	movw	r3, #45632	; 0xb240
   12aa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12aa4:	781b      	ldrb	r3, [r3, #0]
   12aa6:	3301      	adds	r3, #1
   12aa8:	b2da      	uxtb	r2, r3
   12aaa:	f24b 2340 	movw	r3, #45632	; 0xb240
   12aae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ab2:	701a      	strb	r2, [r3, #0]
   12ab4:	f24b 439c 	movw	r3, #46236	; 0xb49c
   12ab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12abc:	681a      	ldr	r2, [r3, #0]
   12abe:	f24b 2344 	movw	r3, #45636	; 0xb244
   12ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ac6:	601a      	str	r2, [r3, #0]
   12ac8:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   12acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ad0:	681a      	ldr	r2, [r3, #0]
   12ad2:	f24b 2348 	movw	r3, #45640	; 0xb248
   12ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ada:	601a      	str	r2, [r3, #0]
   12adc:	f24b 2354 	movw	r3, #45652	; 0xb254
   12ae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ae4:	2200      	movs	r2, #0
   12ae6:	801a      	strh	r2, [r3, #0]
   12ae8:	f24b 2358 	movw	r3, #45656	; 0xb258
   12aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12af0:	f04f 0200 	mov.w	r2, #0
   12af4:	601a      	str	r2, [r3, #0]
   12af6:	f001 bd09 	b.w	1450c <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
   12afa:	f24b 2340 	movw	r3, #45632	; 0xb240
   12afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b02:	781b      	ldrb	r3, [r3, #0]
   12b04:	2b01      	cmp	r3, #1
   12b06:	d169      	bne.n	12bdc <auto_nav+0x874>
    {
         nav_stage =1;
   12b08:	f24b 2340 	movw	r3, #45632	; 0xb240
   12b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b10:	2201      	movs	r2, #1
   12b12:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
   12b14:	2006      	movs	r0, #6
   12b16:	f001 fd07 	bl	14528 <approaching>
   12b1a:	4603      	mov	r3, r0
   12b1c:	2b00      	cmp	r3, #0
   12b1e:	d034      	beq.n	12b8a <auto_nav+0x822>
   12b20:	f24b 234c 	movw	r3, #45644	; 0xb24c
   12b24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b28:	2206      	movs	r2, #6
   12b2a:	701a      	strb	r2, [r3, #0]
   12b2c:	f24b 2340 	movw	r3, #45632	; 0xb240
   12b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b34:	781b      	ldrb	r3, [r3, #0]
   12b36:	3301      	adds	r3, #1
   12b38:	b2da      	uxtb	r2, r3
   12b3a:	f24b 2340 	movw	r3, #45632	; 0xb240
   12b3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b42:	701a      	strb	r2, [r3, #0]
   12b44:	f24b 439c 	movw	r3, #46236	; 0xb49c
   12b48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b4c:	681a      	ldr	r2, [r3, #0]
   12b4e:	f24b 2344 	movw	r3, #45636	; 0xb244
   12b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b56:	601a      	str	r2, [r3, #0]
   12b58:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   12b5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b60:	681a      	ldr	r2, [r3, #0]
   12b62:	f24b 2348 	movw	r3, #45640	; 0xb248
   12b66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b6a:	601a      	str	r2, [r3, #0]
   12b6c:	f24b 2354 	movw	r3, #45652	; 0xb254
   12b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b74:	2200      	movs	r2, #0
   12b76:	801a      	strh	r2, [r3, #0]
   12b78:	f24b 2358 	movw	r3, #45656	; 0xb258
   12b7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b80:	f04f 0200 	mov.w	r2, #0
   12b84:	601a      	str	r2, [r3, #0]
   12b86:	f001 bcc1 	b.w	1450c <auto_nav+0x21a4>
            fly_to(6);
   12b8a:	2006      	movs	r0, #6
   12b8c:	f001 fe00 	bl	14790 <fly_to>
            auto_pitch = FALSE;
   12b90:	f64a 63cf 	movw	r3, #44751	; 0xaecf
   12b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12b98:	2200      	movs	r2, #0
   12b9a:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12b9c:	f24b 236c 	movw	r3, #45676	; 0xb26c
   12ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ba4:	f04f 0200 	mov.w	r2, #0
   12ba8:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12baa:	f64a 63cd 	movw	r3, #44749	; 0xaecd
   12bae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bb2:	2203      	movs	r2, #3
   12bb4:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
   12bb6:	f240 4328 	movw	r3, #1064	; 0x428
   12bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   12bc0:	f240 4324 	movw	r3, #1060	; 0x424
   12bc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bc8:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12bca:	f24b 2334 	movw	r3, #45620	; 0xb234
   12bce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bd2:	f04f 0200 	mov.w	r2, #0
   12bd6:	601a      	str	r2, [r3, #0]
          }
          return;
   12bd8:	f001 bc98 	b.w	1450c <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12bdc:	f24b 2340 	movw	r3, #45632	; 0xb240
   12be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12be4:	781b      	ldrb	r3, [r3, #0]
   12be6:	2b02      	cmp	r3, #2
   12be8:	d169      	bne.n	12cbe <auto_nav+0x956>
     {
         nav_stage =2; 
   12bea:	f24b 2340 	movw	r3, #45632	; 0xb240
   12bee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bf2:	2202      	movs	r2, #2
   12bf4:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
   12bf6:	2001      	movs	r0, #1
   12bf8:	f001 fc96 	bl	14528 <approaching>
   12bfc:	4603      	mov	r3, r0
   12bfe:	2b00      	cmp	r3, #0
   12c00:	d034      	beq.n	12c6c <auto_nav+0x904>
   12c02:	f24b 234c 	movw	r3, #45644	; 0xb24c
   12c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c0a:	2201      	movs	r2, #1
   12c0c:	701a      	strb	r2, [r3, #0]
   12c0e:	f24b 2340 	movw	r3, #45632	; 0xb240
   12c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c16:	781b      	ldrb	r3, [r3, #0]
   12c18:	3301      	adds	r3, #1
   12c1a:	b2da      	uxtb	r2, r3
   12c1c:	f24b 2340 	movw	r3, #45632	; 0xb240
   12c20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c24:	701a      	strb	r2, [r3, #0]
   12c26:	f24b 439c 	movw	r3, #46236	; 0xb49c
   12c2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c2e:	681a      	ldr	r2, [r3, #0]
   12c30:	f24b 2344 	movw	r3, #45636	; 0xb244
   12c34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c38:	601a      	str	r2, [r3, #0]
   12c3a:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   12c3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c42:	681a      	ldr	r2, [r3, #0]
   12c44:	f24b 2348 	movw	r3, #45640	; 0xb248
   12c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c4c:	601a      	str	r2, [r3, #0]
   12c4e:	f24b 2354 	movw	r3, #45652	; 0xb254
   12c52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c56:	2200      	movs	r2, #0
   12c58:	801a      	strh	r2, [r3, #0]
   12c5a:	f24b 2358 	movw	r3, #45656	; 0xb258
   12c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c62:	f04f 0200 	mov.w	r2, #0
   12c66:	601a      	str	r2, [r3, #0]
   12c68:	f001 bc50 	b.w	1450c <auto_nav+0x21a4>
            fly_to(1);
   12c6c:	2001      	movs	r0, #1
   12c6e:	f001 fd8f 	bl	14790 <fly_to>
            auto_pitch = FALSE;
   12c72:	f64a 63cf 	movw	r3, #44751	; 0xaecf
   12c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c7a:	2200      	movs	r2, #0
   12c7c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12c7e:	f24b 236c 	movw	r3, #45676	; 0xb26c
   12c82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c86:	f04f 0200 	mov.w	r2, #0
   12c8a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12c8c:	f64a 63cd 	movw	r3, #44749	; 0xaecd
   12c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12c94:	2203      	movs	r2, #3
   12c96:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12c98:	f240 4328 	movw	r3, #1064	; 0x428
   12c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ca0:	695a      	ldr	r2, [r3, #20]
   12ca2:	f240 4324 	movw	r3, #1060	; 0x424
   12ca6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12caa:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12cac:	f24b 2334 	movw	r3, #45620	; 0xb234
   12cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cb4:	f04f 0200 	mov.w	r2, #0
   12cb8:	601a      	str	r2, [r3, #0]
          }
          return;
   12cba:	f001 bc27 	b.w	1450c <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12cbe:	f24b 2340 	movw	r3, #45632	; 0xb240
   12cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cc6:	781b      	ldrb	r3, [r3, #0]
   12cc8:	2b03      	cmp	r3, #3
   12cca:	d16f      	bne.n	12dac <auto_nav+0xa44>
      {
	   nav_stage = 3;         
   12ccc:	f24b 2340 	movw	r3, #45632	; 0xb240
   12cd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cd4:	2203      	movs	r2, #3
   12cd6:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
   12cd8:	2002      	movs	r0, #2
   12cda:	f001 fc25 	bl	14528 <approaching>
   12cde:	4603      	mov	r3, r0
   12ce0:	2b00      	cmp	r3, #0
   12ce2:	d034      	beq.n	12d4e <auto_nav+0x9e6>
   12ce4:	f24b 234c 	movw	r3, #45644	; 0xb24c
   12ce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cec:	2202      	movs	r2, #2
   12cee:	701a      	strb	r2, [r3, #0]
   12cf0:	f24b 2340 	movw	r3, #45632	; 0xb240
   12cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cf8:	781b      	ldrb	r3, [r3, #0]
   12cfa:	3301      	adds	r3, #1
   12cfc:	b2da      	uxtb	r2, r3
   12cfe:	f24b 2340 	movw	r3, #45632	; 0xb240
   12d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d06:	701a      	strb	r2, [r3, #0]
   12d08:	f24b 439c 	movw	r3, #46236	; 0xb49c
   12d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d10:	681a      	ldr	r2, [r3, #0]
   12d12:	f24b 2344 	movw	r3, #45636	; 0xb244
   12d16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d1a:	601a      	str	r2, [r3, #0]
   12d1c:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   12d20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d24:	681a      	ldr	r2, [r3, #0]
   12d26:	f24b 2348 	movw	r3, #45640	; 0xb248
   12d2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d2e:	601a      	str	r2, [r3, #0]
   12d30:	f24b 2354 	movw	r3, #45652	; 0xb254
   12d34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d38:	2200      	movs	r2, #0
   12d3a:	801a      	strh	r2, [r3, #0]
   12d3c:	f24b 2358 	movw	r3, #45656	; 0xb258
   12d40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d44:	f04f 0200 	mov.w	r2, #0
   12d48:	601a      	str	r2, [r3, #0]
   12d4a:	f001 bbdf 	b.w	1450c <auto_nav+0x21a4>
            route_to(last_wp, 2);
   12d4e:	f24b 234c 	movw	r3, #45644	; 0xb24c
   12d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d56:	781b      	ldrb	r3, [r3, #0]
   12d58:	4618      	mov	r0, r3
   12d5a:	2102      	movs	r1, #2
   12d5c:	f001 fd3a 	bl	147d4 <route_to>
            auto_pitch = FALSE;
   12d60:	f64a 63cf 	movw	r3, #44751	; 0xaecf
   12d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d68:	2200      	movs	r2, #0
   12d6a:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12d6c:	f24b 236c 	movw	r3, #45676	; 0xb26c
   12d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d74:	f04f 0200 	mov.w	r2, #0
   12d78:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12d7a:	f64a 63cd 	movw	r3, #44749	; 0xaecd
   12d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d82:	2203      	movs	r2, #3
   12d84:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
   12d86:	f240 4328 	movw	r3, #1064	; 0x428
   12d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d8e:	6a1a      	ldr	r2, [r3, #32]
   12d90:	f240 4324 	movw	r3, #1060	; 0x424
   12d94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d98:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12d9a:	f24b 2334 	movw	r3, #45620	; 0xb234
   12d9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12da2:	f04f 0200 	mov.w	r2, #0
   12da6:	601a      	str	r2, [r3, #0]
          }
          return;
   12da8:	f001 bbb0 	b.w	1450c <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
   12dac:	f24b 2340 	movw	r3, #45632	; 0xb240
   12db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12db4:	781b      	ldrb	r3, [r3, #0]
   12db6:	2b04      	cmp	r3, #4
   12db8:	d169      	bne.n	12e8e <auto_nav+0xb26>
       {
          nav_stage = 4;
   12dba:	f24b 2340 	movw	r3, #45632	; 0xb240
   12dbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dc2:	2204      	movs	r2, #4
   12dc4:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
   12dc6:	2003      	movs	r0, #3
   12dc8:	f001 fbae 	bl	14528 <approaching>
   12dcc:	4603      	mov	r3, r0
   12dce:	2b00      	cmp	r3, #0
   12dd0:	d034      	beq.n	12e3c <auto_nav+0xad4>
   12dd2:	f24b 234c 	movw	r3, #45644	; 0xb24c
   12dd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dda:	2203      	movs	r2, #3
   12ddc:	701a      	strb	r2, [r3, #0]
   12dde:	f24b 2340 	movw	r3, #45632	; 0xb240
   12de2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12de6:	781b      	ldrb	r3, [r3, #0]
   12de8:	3301      	adds	r3, #1
   12dea:	b2da      	uxtb	r2, r3
   12dec:	f24b 2340 	movw	r3, #45632	; 0xb240
   12df0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12df4:	701a      	strb	r2, [r3, #0]
   12df6:	f24b 439c 	movw	r3, #46236	; 0xb49c
   12dfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12dfe:	681a      	ldr	r2, [r3, #0]
   12e00:	f24b 2344 	movw	r3, #45636	; 0xb244
   12e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e08:	601a      	str	r2, [r3, #0]
   12e0a:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   12e0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e12:	681a      	ldr	r2, [r3, #0]
   12e14:	f24b 2348 	movw	r3, #45640	; 0xb248
   12e18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e1c:	601a      	str	r2, [r3, #0]
   12e1e:	f24b 2354 	movw	r3, #45652	; 0xb254
   12e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e26:	2200      	movs	r2, #0
   12e28:	801a      	strh	r2, [r3, #0]
   12e2a:	f24b 2358 	movw	r3, #45656	; 0xb258
   12e2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e32:	f04f 0200 	mov.w	r2, #0
   12e36:	601a      	str	r2, [r3, #0]
   12e38:	f001 bb68 	b.w	1450c <auto_nav+0x21a4>
            fly_to(3);
   12e3c:	2003      	movs	r0, #3
   12e3e:	f001 fca7 	bl	14790 <fly_to>
            auto_pitch = FALSE;
   12e42:	f64a 63cf 	movw	r3, #44751	; 0xaecf
   12e46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e4a:	2200      	movs	r2, #0
   12e4c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12e4e:	f24b 236c 	movw	r3, #45676	; 0xb26c
   12e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e56:	f04f 0200 	mov.w	r2, #0
   12e5a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12e5c:	f64a 63cd 	movw	r3, #44749	; 0xaecd
   12e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e64:	2203      	movs	r2, #3
   12e66:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
   12e68:	f240 4328 	movw	r3, #1064	; 0x428
   12e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   12e72:	f240 4324 	movw	r3, #1060	; 0x424
   12e76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e7a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12e7c:	f24b 2334 	movw	r3, #45620	; 0xb234
   12e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e84:	f04f 0200 	mov.w	r2, #0
   12e88:	601a      	str	r2, [r3, #0]
          }
          return;
   12e8a:	f001 bb3f 	b.w	1450c <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
   12e8e:	f24b 2340 	movw	r3, #45632	; 0xb240
   12e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e96:	781b      	ldrb	r3, [r3, #0]
   12e98:	2b05      	cmp	r3, #5
   12e9a:	d169      	bne.n	12f70 <auto_nav+0xc08>
       {
          nav_stage =5;
   12e9c:	f24b 2340 	movw	r3, #45632	; 0xb240
   12ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ea4:	2205      	movs	r2, #5
   12ea6:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   12ea8:	2004      	movs	r0, #4
   12eaa:	f001 fb3d 	bl	14528 <approaching>
   12eae:	4603      	mov	r3, r0
   12eb0:	2b00      	cmp	r3, #0
   12eb2:	d034      	beq.n	12f1e <auto_nav+0xbb6>
   12eb4:	f24b 234c 	movw	r3, #45644	; 0xb24c
   12eb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ebc:	2204      	movs	r2, #4
   12ebe:	701a      	strb	r2, [r3, #0]
   12ec0:	f24b 2340 	movw	r3, #45632	; 0xb240
   12ec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ec8:	781b      	ldrb	r3, [r3, #0]
   12eca:	3301      	adds	r3, #1
   12ecc:	b2da      	uxtb	r2, r3
   12ece:	f24b 2340 	movw	r3, #45632	; 0xb240
   12ed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ed6:	701a      	strb	r2, [r3, #0]
   12ed8:	f24b 439c 	movw	r3, #46236	; 0xb49c
   12edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ee0:	681a      	ldr	r2, [r3, #0]
   12ee2:	f24b 2344 	movw	r3, #45636	; 0xb244
   12ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12eea:	601a      	str	r2, [r3, #0]
   12eec:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   12ef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ef4:	681a      	ldr	r2, [r3, #0]
   12ef6:	f24b 2348 	movw	r3, #45640	; 0xb248
   12efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12efe:	601a      	str	r2, [r3, #0]
   12f00:	f24b 2354 	movw	r3, #45652	; 0xb254
   12f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f08:	2200      	movs	r2, #0
   12f0a:	801a      	strh	r2, [r3, #0]
   12f0c:	f24b 2358 	movw	r3, #45656	; 0xb258
   12f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f14:	f04f 0200 	mov.w	r2, #0
   12f18:	601a      	str	r2, [r3, #0]
   12f1a:	f001 baf7 	b.w	1450c <auto_nav+0x21a4>
            fly_to(4);
   12f1e:	2004      	movs	r0, #4
   12f20:	f001 fc36 	bl	14790 <fly_to>
            auto_pitch = FALSE;
   12f24:	f64a 63cf 	movw	r3, #44751	; 0xaecf
   12f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f2c:	2200      	movs	r2, #0
   12f2e:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12f30:	f24b 236c 	movw	r3, #45676	; 0xb26c
   12f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f38:	f04f 0200 	mov.w	r2, #0
   12f3c:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12f3e:	f64a 63cd 	movw	r3, #44749	; 0xaecd
   12f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f46:	2203      	movs	r2, #3
   12f48:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   12f4a:	f240 4328 	movw	r3, #1064	; 0x428
   12f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12f54:	f240 4324 	movw	r3, #1060	; 0x424
   12f58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f5c:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12f5e:	f24b 2334 	movw	r3, #45620	; 0xb234
   12f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f66:	f04f 0200 	mov.w	r2, #0
   12f6a:	601a      	str	r2, [r3, #0]
          }
          return;
   12f6c:	f001 bace 	b.w	1450c <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
   12f70:	f24b 2340 	movw	r3, #45632	; 0xb240
   12f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f78:	781b      	ldrb	r3, [r3, #0]
   12f7a:	2b06      	cmp	r3, #6
   12f7c:	d16f      	bne.n	1305e <auto_nav+0xcf6>
       {
          nav_stage =6;
   12f7e:	f24b 2340 	movw	r3, #45632	; 0xb240
   12f82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f86:	2206      	movs	r2, #6
   12f88:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
   12f8a:	2005      	movs	r0, #5
   12f8c:	f001 facc 	bl	14528 <approaching>
   12f90:	4603      	mov	r3, r0
   12f92:	2b00      	cmp	r3, #0
   12f94:	d034      	beq.n	13000 <auto_nav+0xc98>
   12f96:	f24b 234c 	movw	r3, #45644	; 0xb24c
   12f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f9e:	2205      	movs	r2, #5
   12fa0:	701a      	strb	r2, [r3, #0]
   12fa2:	f24b 2340 	movw	r3, #45632	; 0xb240
   12fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12faa:	781b      	ldrb	r3, [r3, #0]
   12fac:	3301      	adds	r3, #1
   12fae:	b2da      	uxtb	r2, r3
   12fb0:	f24b 2340 	movw	r3, #45632	; 0xb240
   12fb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fb8:	701a      	strb	r2, [r3, #0]
   12fba:	f24b 439c 	movw	r3, #46236	; 0xb49c
   12fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fc2:	681a      	ldr	r2, [r3, #0]
   12fc4:	f24b 2344 	movw	r3, #45636	; 0xb244
   12fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fcc:	601a      	str	r2, [r3, #0]
   12fce:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   12fd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fd6:	681a      	ldr	r2, [r3, #0]
   12fd8:	f24b 2348 	movw	r3, #45640	; 0xb248
   12fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fe0:	601a      	str	r2, [r3, #0]
   12fe2:	f24b 2354 	movw	r3, #45652	; 0xb254
   12fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12fea:	2200      	movs	r2, #0
   12fec:	801a      	strh	r2, [r3, #0]
   12fee:	f24b 2358 	movw	r3, #45656	; 0xb258
   12ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ff6:	f04f 0200 	mov.w	r2, #0
   12ffa:	601a      	str	r2, [r3, #0]
   12ffc:	f001 ba86 	b.w	1450c <auto_nav+0x21a4>
            route_to(last_wp, 5);
   13000:	f24b 234c 	movw	r3, #45644	; 0xb24c
   13004:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13008:	781b      	ldrb	r3, [r3, #0]
   1300a:	4618      	mov	r0, r3
   1300c:	2105      	movs	r1, #5
   1300e:	f001 fbe1 	bl	147d4 <route_to>
            auto_pitch = FALSE;
   13012:	f64a 63cf 	movw	r3, #44751	; 0xaecf
   13016:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1301a:	2200      	movs	r2, #0
   1301c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   1301e:	f24b 236c 	movw	r3, #45676	; 0xb26c
   13022:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13026:	f04f 0200 	mov.w	r2, #0
   1302a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1302c:	f64a 63cd 	movw	r3, #44749	; 0xaecd
   13030:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13034:	2203      	movs	r2, #3
   13036:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
   13038:	f240 4328 	movw	r3, #1064	; 0x428
   1303c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   13042:	f240 4324 	movw	r3, #1060	; 0x424
   13046:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1304a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1304c:	f24b 2334 	movw	r3, #45620	; 0xb234
   13050:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13054:	f04f 0200 	mov.w	r2, #0
   13058:	601a      	str	r2, [r3, #0]
          }
          return;
   1305a:	f001 ba57 	b.w	1450c <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
   1305e:	f24b 2340 	movw	r3, #45632	; 0xb240
   13062:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13066:	781b      	ldrb	r3, [r3, #0]
   13068:	2b07      	cmp	r3, #7
   1306a:	d106      	bne.n	1307a <auto_nav+0xd12>
       {
	   nav_stage =7;
   1306c:	f24b 2340 	movw	r3, #45632	; 0xb240
   13070:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13074:	2207      	movs	r2, #7
   13076:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
   13078:	e50a      	b.n	12a90 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
   1307a:	f24b 2340 	movw	r3, #45632	; 0xb240
   1307e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13082:	781b      	ldrb	r3, [r3, #0]
   13084:	2b08      	cmp	r3, #8
   13086:	f041 8241 	bne.w	1450c <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
   1308a:	f24b 2340 	movw	r3, #45632	; 0xb240
   1308e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13092:	2208      	movs	r2, #8
   13094:	701a      	strb	r2, [r3, #0]
          NextBlock();
   13096:	f24b 2341 	movw	r3, #45633	; 0xb241
   1309a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1309e:	781b      	ldrb	r3, [r3, #0]
   130a0:	3301      	adds	r3, #1
   130a2:	b2da      	uxtb	r2, r3
   130a4:	f24b 2341 	movw	r3, #45633	; 0xb241
   130a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130ac:	701a      	strb	r2, [r3, #0]
   130ae:	f24b 2340 	movw	r3, #45632	; 0xb240
   130b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130b6:	2200      	movs	r2, #0
   130b8:	701a      	strb	r2, [r3, #0]
   130ba:	f24b 2356 	movw	r3, #45654	; 0xb256
   130be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130c2:	2200      	movs	r2, #0
   130c4:	801a      	strh	r2, [r3, #0]
   130c6:	f24b 439c 	movw	r3, #46236	; 0xb49c
   130ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130ce:	681a      	ldr	r2, [r3, #0]
   130d0:	f24b 2344 	movw	r3, #45636	; 0xb244
   130d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130d8:	601a      	str	r2, [r3, #0]
   130da:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   130de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130e2:	681a      	ldr	r2, [r3, #0]
   130e4:	f24b 2348 	movw	r3, #45640	; 0xb248
   130e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130ec:	601a      	str	r2, [r3, #0]
   130ee:	f24b 2354 	movw	r3, #45652	; 0xb254
   130f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   130f6:	2200      	movs	r2, #0
   130f8:	801a      	strh	r2, [r3, #0]
   130fa:	f24b 2358 	movw	r3, #45656	; 0xb258
   130fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13102:	f04f 0200 	mov.w	r2, #0
   13106:	601a      	str	r2, [r3, #0]
   13108:	f001 ba00 	b.w	1450c <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
   1310c:	f24b 2341 	movw	r3, #45633	; 0xb241
   13110:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13114:	781b      	ldrb	r3, [r3, #0]
   13116:	2b03      	cmp	r3, #3
   13118:	f040 8388 	bne.w	1382c <auto_nav+0x14c4>
{
    nav_block = 3;
   1311c:	f24b 2341 	movw	r3, #45633	; 0xb241
   13120:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13124:	2203      	movs	r2, #3
   13126:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
   13128:	f64a 63d0 	movw	r3, #44752	; 0xaed0
   1312c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13130:	781b      	ldrb	r3, [r3, #0]
   13132:	2b00      	cmp	r3, #0
   13134:	d007      	beq.n	13146 <auto_nav+0xdde>
   13136:	f64a 63d0 	movw	r3, #44752	; 0xaed0
   1313a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1313e:	2200      	movs	r2, #0
   13140:	701a      	strb	r2, [r3, #0]
   13142:	2301      	movs	r3, #1
   13144:	e000      	b.n	13148 <auto_nav+0xde0>
   13146:	2300      	movs	r3, #0
   13148:	2b00      	cmp	r3, #0
   1314a:	d034      	beq.n	131b6 <auto_nav+0xe4e>
   1314c:	f24b 2341 	movw	r3, #45633	; 0xb241
   13150:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13154:	2204      	movs	r2, #4
   13156:	701a      	strb	r2, [r3, #0]
   13158:	f24b 2340 	movw	r3, #45632	; 0xb240
   1315c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13160:	2200      	movs	r2, #0
   13162:	701a      	strb	r2, [r3, #0]
   13164:	f24b 2356 	movw	r3, #45654	; 0xb256
   13168:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1316c:	2200      	movs	r2, #0
   1316e:	801a      	strh	r2, [r3, #0]
   13170:	f24b 439c 	movw	r3, #46236	; 0xb49c
   13174:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13178:	681a      	ldr	r2, [r3, #0]
   1317a:	f24b 2344 	movw	r3, #45636	; 0xb244
   1317e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13182:	601a      	str	r2, [r3, #0]
   13184:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   13188:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1318c:	681a      	ldr	r2, [r3, #0]
   1318e:	f24b 2348 	movw	r3, #45640	; 0xb248
   13192:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13196:	601a      	str	r2, [r3, #0]
   13198:	f24b 2354 	movw	r3, #45652	; 0xb254
   1319c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131a0:	2200      	movs	r2, #0
   131a2:	801a      	strh	r2, [r3, #0]
   131a4:	f24b 2358 	movw	r3, #45656	; 0xb258
   131a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131ac:	f04f 0200 	mov.w	r2, #0
   131b0:	601a      	str	r2, [r3, #0]
   131b2:	f001 b9ab 	b.w	1450c <auto_nav+0x21a4>
    if(nav_stage == 0)
   131b6:	f24b 2340 	movw	r3, #45632	; 0xb240
   131ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131be:	781b      	ldrb	r3, [r3, #0]
   131c0:	2b00      	cmp	r3, #0
   131c2:	f040 82ea 	bne.w	1379a <auto_nav+0x1432>
    {
        nav_stage = 0;
   131c6:	f24b 2340 	movw	r3, #45632	; 0xb240
   131ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131ce:	2200      	movs	r2, #0
   131d0:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
   131d2:	f64a 63cc 	movw	r3, #44748	; 0xaecc
   131d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131da:	781b      	ldrb	r3, [r3, #0]
   131dc:	2b02      	cmp	r3, #2
   131de:	f040 81a5 	bne.w	1352c <auto_nav+0x11c4>
   131e2:	f64a 73f0 	movw	r3, #45040	; 0xaff0
   131e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   131ea:	88db      	ldrh	r3, [r3, #6]
   131ec:	84fb      	strh	r3, [r7, #38]	; 0x26
   131ee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   131f2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   131f6:	dc04      	bgt.n	13202 <auto_nav+0xe9a>
   131f8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   131fc:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13200:	da7e      	bge.n	13300 <auto_nav+0xf98>
   13202:	f24b 238c 	movw	r3, #45708	; 0xb28c
   13206:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1320a:	681b      	ldr	r3, [r3, #0]
   1320c:	4618      	mov	r0, r3
   1320e:	f004 fb7b 	bl	17908 <__aeabi_f2d>
   13212:	4604      	mov	r4, r0
   13214:	460d      	mov	r5, r1
   13216:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   1321a:	4618      	mov	r0, r3
   1321c:	f004 ffb4 	bl	18188 <__aeabi_i2f>
   13220:	4603      	mov	r3, r0
   13222:	4618      	mov	r0, r3
   13224:	f04f 0100 	mov.w	r1, #0
   13228:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1322c:	f005 f8b4 	bl	18398 <__aeabi_fdiv>
   13230:	4603      	mov	r3, r0
   13232:	4618      	mov	r0, r3
   13234:	f004 fb68 	bl	17908 <__aeabi_f2d>
   13238:	4602      	mov	r2, r0
   1323a:	460b      	mov	r3, r1
   1323c:	4610      	mov	r0, r2
   1323e:	4619      	mov	r1, r3
   13240:	f04f 0200 	mov.w	r2, #0
   13244:	f04f 0300 	mov.w	r3, #0
   13248:	f2cc 0334 	movt	r3, #49204	; 0xc034
   1324c:	f004 fbb0 	bl	179b0 <__aeabi_dmul>
   13250:	4602      	mov	r2, r0
   13252:	460b      	mov	r3, r1
   13254:	4610      	mov	r0, r2
   13256:	4619      	mov	r1, r3
   13258:	f04f 0200 	mov.w	r2, #0
   1325c:	f04f 0300 	mov.w	r3, #0
   13260:	f004 f9f4 	bl	1764c <__adddf3>
   13264:	4602      	mov	r2, r0
   13266:	460b      	mov	r3, r1
   13268:	4620      	mov	r0, r4
   1326a:	4629      	mov	r1, r5
   1326c:	f004 f9ee 	bl	1764c <__adddf3>
   13270:	4602      	mov	r2, r0
   13272:	460b      	mov	r3, r1
   13274:	4610      	mov	r0, r2
   13276:	4619      	mov	r1, r3
   13278:	f004 fe7c 	bl	17f74 <__aeabi_d2f>
   1327c:	4602      	mov	r2, r0
   1327e:	f24b 238c 	movw	r3, #45708	; 0xb28c
   13282:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13286:	601a      	str	r2, [r3, #0]
   13288:	f24b 238c 	movw	r3, #45708	; 0xb28c
   1328c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13290:	681b      	ldr	r3, [r3, #0]
   13292:	4618      	mov	r0, r3
   13294:	f04f 0100 	mov.w	r1, #0
   13298:	f2c4 317a 	movt	r1, #17274	; 0x437a
   1329c:	f005 f970 	bl	18580 <__aeabi_fcmple>
   132a0:	4603      	mov	r3, r0
   132a2:	2b00      	cmp	r3, #0
   132a4:	d005      	beq.n	132b2 <auto_nav+0xf4a>
   132a6:	f24b 238c 	movw	r3, #45708	; 0xb28c
   132aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132ae:	681a      	ldr	r2, [r3, #0]
   132b0:	e003      	b.n	132ba <auto_nav+0xf52>
   132b2:	f04f 0200 	mov.w	r2, #0
   132b6:	f2c4 327a 	movt	r2, #17274	; 0x437a
   132ba:	f24b 238c 	movw	r3, #45708	; 0xb28c
   132be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132c2:	601a      	str	r2, [r3, #0]
   132c4:	f24b 238c 	movw	r3, #45708	; 0xb28c
   132c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132cc:	681b      	ldr	r3, [r3, #0]
   132ce:	4618      	mov	r0, r3
   132d0:	f04f 0100 	mov.w	r1, #0
   132d4:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   132d8:	f005 f95c 	bl	18594 <__aeabi_fcmpge>
   132dc:	4603      	mov	r3, r0
   132de:	2b00      	cmp	r3, #0
   132e0:	d005      	beq.n	132ee <auto_nav+0xf86>
   132e2:	f24b 238c 	movw	r3, #45708	; 0xb28c
   132e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132ea:	681a      	ldr	r2, [r3, #0]
   132ec:	e003      	b.n	132f6 <auto_nav+0xf8e>
   132ee:	f04f 0200 	mov.w	r2, #0
   132f2:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   132f6:	f24b 238c 	movw	r3, #45708	; 0xb28c
   132fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132fe:	601a      	str	r2, [r3, #0]
   13300:	f64a 73f0 	movw	r3, #45040	; 0xaff0
   13304:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13308:	889b      	ldrh	r3, [r3, #4]
   1330a:	84bb      	strh	r3, [r7, #36]	; 0x24
   1330c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13310:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   13314:	dc04      	bgt.n	13320 <auto_nav+0xfb8>
   13316:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   1331a:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   1331e:	da7e      	bge.n	1341e <auto_nav+0x10b6>
   13320:	f24b 2390 	movw	r3, #45712	; 0xb290
   13324:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13328:	681b      	ldr	r3, [r3, #0]
   1332a:	4618      	mov	r0, r3
   1332c:	f004 faec 	bl	17908 <__aeabi_f2d>
   13330:	4604      	mov	r4, r0
   13332:	460d      	mov	r5, r1
   13334:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13338:	4618      	mov	r0, r3
   1333a:	f004 ff25 	bl	18188 <__aeabi_i2f>
   1333e:	4603      	mov	r3, r0
   13340:	4618      	mov	r0, r3
   13342:	f04f 0100 	mov.w	r1, #0
   13346:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1334a:	f005 f825 	bl	18398 <__aeabi_fdiv>
   1334e:	4603      	mov	r3, r0
   13350:	4618      	mov	r0, r3
   13352:	f004 fad9 	bl	17908 <__aeabi_f2d>
   13356:	4602      	mov	r2, r0
   13358:	460b      	mov	r3, r1
   1335a:	4610      	mov	r0, r2
   1335c:	4619      	mov	r1, r3
   1335e:	f04f 0200 	mov.w	r2, #0
   13362:	f04f 0300 	mov.w	r3, #0
   13366:	f2cc 0334 	movt	r3, #49204	; 0xc034
   1336a:	f004 fb21 	bl	179b0 <__aeabi_dmul>
   1336e:	4602      	mov	r2, r0
   13370:	460b      	mov	r3, r1
   13372:	4610      	mov	r0, r2
   13374:	4619      	mov	r1, r3
   13376:	f04f 0200 	mov.w	r2, #0
   1337a:	f04f 0300 	mov.w	r3, #0
   1337e:	f004 f965 	bl	1764c <__adddf3>
   13382:	4602      	mov	r2, r0
   13384:	460b      	mov	r3, r1
   13386:	4620      	mov	r0, r4
   13388:	4629      	mov	r1, r5
   1338a:	f004 f95f 	bl	1764c <__adddf3>
   1338e:	4602      	mov	r2, r0
   13390:	460b      	mov	r3, r1
   13392:	4610      	mov	r0, r2
   13394:	4619      	mov	r1, r3
   13396:	f004 fded 	bl	17f74 <__aeabi_d2f>
   1339a:	4602      	mov	r2, r0
   1339c:	f24b 2390 	movw	r3, #45712	; 0xb290
   133a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133a4:	601a      	str	r2, [r3, #0]
   133a6:	f24b 2390 	movw	r3, #45712	; 0xb290
   133aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133ae:	681b      	ldr	r3, [r3, #0]
   133b0:	4618      	mov	r0, r3
   133b2:	f04f 0100 	mov.w	r1, #0
   133b6:	f2c4 317a 	movt	r1, #17274	; 0x437a
   133ba:	f005 f8e1 	bl	18580 <__aeabi_fcmple>
   133be:	4603      	mov	r3, r0
   133c0:	2b00      	cmp	r3, #0
   133c2:	d005      	beq.n	133d0 <auto_nav+0x1068>
   133c4:	f24b 2390 	movw	r3, #45712	; 0xb290
   133c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133cc:	681a      	ldr	r2, [r3, #0]
   133ce:	e003      	b.n	133d8 <auto_nav+0x1070>
   133d0:	f04f 0200 	mov.w	r2, #0
   133d4:	f2c4 327a 	movt	r2, #17274	; 0x437a
   133d8:	f24b 2390 	movw	r3, #45712	; 0xb290
   133dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133e0:	601a      	str	r2, [r3, #0]
   133e2:	f24b 2390 	movw	r3, #45712	; 0xb290
   133e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133ea:	681b      	ldr	r3, [r3, #0]
   133ec:	4618      	mov	r0, r3
   133ee:	f04f 0100 	mov.w	r1, #0
   133f2:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   133f6:	f005 f8cd 	bl	18594 <__aeabi_fcmpge>
   133fa:	4603      	mov	r3, r0
   133fc:	2b00      	cmp	r3, #0
   133fe:	d005      	beq.n	1340c <auto_nav+0x10a4>
   13400:	f24b 2390 	movw	r3, #45712	; 0xb290
   13404:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13408:	681a      	ldr	r2, [r3, #0]
   1340a:	e003      	b.n	13414 <auto_nav+0x10ac>
   1340c:	f04f 0200 	mov.w	r2, #0
   13410:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   13414:	f24b 2390 	movw	r3, #45712	; 0xb290
   13418:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1341c:	601a      	str	r2, [r3, #0]
   1341e:	f64a 63cd 	movw	r3, #44749	; 0xaecd
   13422:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13426:	2203      	movs	r2, #3
   13428:	701a      	strb	r2, [r3, #0]
   1342a:	f64a 73f0 	movw	r3, #45040	; 0xaff0
   1342e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13432:	885b      	ldrh	r3, [r3, #2]
   13434:	847b      	strh	r3, [r7, #34]	; 0x22
   13436:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   1343a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   1343e:	dc04      	bgt.n	1344a <auto_nav+0x10e2>
   13440:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   13444:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13448:	da70      	bge.n	1352c <auto_nav+0x11c4>
   1344a:	f240 4324 	movw	r3, #1060	; 0x424
   1344e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13452:	681b      	ldr	r3, [r3, #0]
   13454:	4618      	mov	r0, r3
   13456:	f004 fa57 	bl	17908 <__aeabi_f2d>
   1345a:	4604      	mov	r4, r0
   1345c:	460d      	mov	r5, r1
   1345e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   13462:	4618      	mov	r0, r3
   13464:	f004 fe90 	bl	18188 <__aeabi_i2f>
   13468:	4603      	mov	r3, r0
   1346a:	4618      	mov	r0, r3
   1346c:	f04f 0100 	mov.w	r1, #0
   13470:	f2c4 6116 	movt	r1, #17942	; 0x4616
   13474:	f004 ff90 	bl	18398 <__aeabi_fdiv>
   13478:	4603      	mov	r3, r0
   1347a:	4618      	mov	r0, r3
   1347c:	f004 fa44 	bl	17908 <__aeabi_f2d>
   13480:	4602      	mov	r2, r0
   13482:	460b      	mov	r3, r1
   13484:	f04f 0000 	mov.w	r0, #0
   13488:	f04f 0100 	mov.w	r1, #0
   1348c:	f004 f8dc 	bl	17648 <__aeabi_dsub>
   13490:	4602      	mov	r2, r0
   13492:	460b      	mov	r3, r1
   13494:	4620      	mov	r0, r4
   13496:	4629      	mov	r1, r5
   13498:	f004 f8d8 	bl	1764c <__adddf3>
   1349c:	4602      	mov	r2, r0
   1349e:	460b      	mov	r3, r1
   134a0:	4610      	mov	r0, r2
   134a2:	4619      	mov	r1, r3
   134a4:	f004 fd66 	bl	17f74 <__aeabi_d2f>
   134a8:	4602      	mov	r2, r0
   134aa:	f240 4324 	movw	r3, #1060	; 0x424
   134ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134b2:	601a      	str	r2, [r3, #0]
   134b4:	f240 4324 	movw	r3, #1060	; 0x424
   134b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134bc:	681b      	ldr	r3, [r3, #0]
   134be:	4618      	mov	r0, r3
   134c0:	f04f 0100 	mov.w	r1, #0
   134c4:	f2c4 312f 	movt	r1, #17199	; 0x432f
   134c8:	f005 f864 	bl	18594 <__aeabi_fcmpge>
   134cc:	4603      	mov	r3, r0
   134ce:	2b00      	cmp	r3, #0
   134d0:	d005      	beq.n	134de <auto_nav+0x1176>
   134d2:	f240 4324 	movw	r3, #1060	; 0x424
   134d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134da:	681a      	ldr	r2, [r3, #0]
   134dc:	e003      	b.n	134e6 <auto_nav+0x117e>
   134de:	f04f 0200 	mov.w	r2, #0
   134e2:	f2c4 322f 	movt	r2, #17199	; 0x432f
   134e6:	f240 4324 	movw	r3, #1060	; 0x424
   134ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134ee:	601a      	str	r2, [r3, #0]
   134f0:	f240 4324 	movw	r3, #1060	; 0x424
   134f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   134f8:	681b      	ldr	r3, [r3, #0]
   134fa:	4618      	mov	r0, r3
   134fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13500:	f2c4 3189 	movt	r1, #17289	; 0x4389
   13504:	f005 f83c 	bl	18580 <__aeabi_fcmple>
   13508:	4603      	mov	r3, r0
   1350a:	2b00      	cmp	r3, #0
   1350c:	d005      	beq.n	1351a <auto_nav+0x11b2>
   1350e:	f240 4324 	movw	r3, #1060	; 0x424
   13512:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13516:	681a      	ldr	r2, [r3, #0]
   13518:	e003      	b.n	13522 <auto_nav+0x11ba>
   1351a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1351e:	f2c4 3289 	movt	r2, #17289	; 0x4389
   13522:	f240 4324 	movw	r3, #1060	; 0x424
   13526:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1352a:	601a      	str	r2, [r3, #0]
   1352c:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   13530:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13534:	681a      	ldr	r2, [r3, #0]
   13536:	f24b 2390 	movw	r3, #45712	; 0xb290
   1353a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1353e:	681b      	ldr	r3, [r3, #0]
   13540:	4610      	mov	r0, r2
   13542:	4619      	mov	r1, r3
   13544:	f004 fd6a 	bl	1801c <__aeabi_fsub>
   13548:	4603      	mov	r3, r0
   1354a:	4618      	mov	r0, r3
   1354c:	f004 f9dc 	bl	17908 <__aeabi_f2d>
   13550:	4604      	mov	r4, r0
   13552:	460d      	mov	r5, r1
   13554:	f24b 439c 	movw	r3, #46236	; 0xb49c
   13558:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1355c:	681a      	ldr	r2, [r3, #0]
   1355e:	f24b 238c 	movw	r3, #45708	; 0xb28c
   13562:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13566:	681b      	ldr	r3, [r3, #0]
   13568:	4610      	mov	r0, r2
   1356a:	4619      	mov	r1, r3
   1356c:	f004 fd56 	bl	1801c <__aeabi_fsub>
   13570:	4603      	mov	r3, r0
   13572:	4618      	mov	r0, r3
   13574:	f004 f9c8 	bl	17908 <__aeabi_f2d>
   13578:	4602      	mov	r2, r0
   1357a:	460b      	mov	r3, r1
   1357c:	4620      	mov	r0, r4
   1357e:	4629      	mov	r1, r5
   13580:	f002 fa12 	bl	159a8 <pp_atan2>
   13584:	4602      	mov	r2, r0
   13586:	460b      	mov	r3, r1
   13588:	4610      	mov	r0, r2
   1358a:	4619      	mov	r1, r3
   1358c:	f004 fcf2 	bl	17f74 <__aeabi_d2f>
   13590:	4603      	mov	r3, r0
   13592:	61fb      	str	r3, [r7, #28]
   13594:	69f8      	ldr	r0, [r7, #28]
   13596:	f004 f9b7 	bl	17908 <__aeabi_f2d>
   1359a:	4604      	mov	r4, r0
   1359c:	460d      	mov	r5, r1
   1359e:	f24b 43d4 	movw	r3, #46292	; 0xb4d4
   135a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135a6:	681b      	ldr	r3, [r3, #0]
   135a8:	4618      	mov	r0, r3
   135aa:	f04f 0100 	mov.w	r1, #0
   135ae:	f2cc 2148 	movt	r1, #49736	; 0xc248
   135b2:	f004 fe3d 	bl	18230 <__aeabi_fmul>
   135b6:	4603      	mov	r3, r0
   135b8:	4618      	mov	r0, r3
   135ba:	f004 f9a5 	bl	17908 <__aeabi_f2d>
   135be:	4602      	mov	r2, r0
   135c0:	460b      	mov	r3, r1
   135c2:	f04f 0000 	mov.w	r0, #0
   135c6:	f04f 0100 	mov.w	r1, #0
   135ca:	f2c4 0114 	movt	r1, #16404	; 0x4014
   135ce:	f004 fb19 	bl	17c04 <__aeabi_ddiv>
   135d2:	4602      	mov	r2, r0
   135d4:	460b      	mov	r3, r1
   135d6:	4620      	mov	r0, r4
   135d8:	4629      	mov	r1, r5
   135da:	f004 f837 	bl	1764c <__adddf3>
   135de:	4602      	mov	r2, r0
   135e0:	460b      	mov	r3, r1
   135e2:	4610      	mov	r0, r2
   135e4:	4619      	mov	r1, r3
   135e6:	f004 fcc5 	bl	17f74 <__aeabi_d2f>
   135ea:	4603      	mov	r3, r0
   135ec:	61bb      	str	r3, [r7, #24]
   135ee:	f24b 238c 	movw	r3, #45708	; 0xb28c
   135f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   135f6:	681b      	ldr	r3, [r3, #0]
   135f8:	4618      	mov	r0, r3
   135fa:	f004 f985 	bl	17908 <__aeabi_f2d>
   135fe:	4604      	mov	r4, r0
   13600:	460d      	mov	r5, r1
   13602:	69b8      	ldr	r0, [r7, #24]
   13604:	f004 f980 	bl	17908 <__aeabi_f2d>
   13608:	4602      	mov	r2, r0
   1360a:	460b      	mov	r3, r1
   1360c:	4610      	mov	r0, r2
   1360e:	4619      	mov	r1, r3
   13610:	a3b1      	add	r3, pc, #708	; (adr r3, 138d8 <auto_nav+0x1570>)
   13612:	e9d3 2300 	ldrd	r2, r3, [r3]
   13616:	f004 f819 	bl	1764c <__adddf3>
   1361a:	4602      	mov	r2, r0
   1361c:	460b      	mov	r3, r1
   1361e:	4610      	mov	r0, r2
   13620:	4619      	mov	r1, r3
   13622:	f002 fa81 	bl	15b28 <pp_sin>
   13626:	4602      	mov	r2, r0
   13628:	460b      	mov	r3, r1
   1362a:	4610      	mov	r0, r2
   1362c:	4619      	mov	r1, r3
   1362e:	f04f 0200 	mov.w	r2, #0
   13632:	f04f 0300 	mov.w	r3, #0
   13636:	f2c4 0349 	movt	r3, #16457	; 0x4049
   1363a:	f004 f9b9 	bl	179b0 <__aeabi_dmul>
   1363e:	4602      	mov	r2, r0
   13640:	460b      	mov	r3, r1
   13642:	4620      	mov	r0, r4
   13644:	4629      	mov	r1, r5
   13646:	f004 f801 	bl	1764c <__adddf3>
   1364a:	4602      	mov	r2, r0
   1364c:	460b      	mov	r3, r1
   1364e:	4610      	mov	r0, r2
   13650:	4619      	mov	r1, r3
   13652:	f004 fc8f 	bl	17f74 <__aeabi_d2f>
   13656:	4606      	mov	r6, r0
   13658:	f24b 2390 	movw	r3, #45712	; 0xb290
   1365c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13660:	681b      	ldr	r3, [r3, #0]
   13662:	4618      	mov	r0, r3
   13664:	f004 f950 	bl	17908 <__aeabi_f2d>
   13668:	4604      	mov	r4, r0
   1366a:	460d      	mov	r5, r1
   1366c:	69b8      	ldr	r0, [r7, #24]
   1366e:	f004 f94b 	bl	17908 <__aeabi_f2d>
   13672:	4602      	mov	r2, r0
   13674:	460b      	mov	r3, r1
   13676:	4610      	mov	r0, r2
   13678:	4619      	mov	r1, r3
   1367a:	f002 fa55 	bl	15b28 <pp_sin>
   1367e:	4602      	mov	r2, r0
   13680:	460b      	mov	r3, r1
   13682:	4610      	mov	r0, r2
   13684:	4619      	mov	r1, r3
   13686:	f04f 0200 	mov.w	r2, #0
   1368a:	f04f 0300 	mov.w	r3, #0
   1368e:	f2c4 0349 	movt	r3, #16457	; 0x4049
   13692:	f004 f98d 	bl	179b0 <__aeabi_dmul>
   13696:	4602      	mov	r2, r0
   13698:	460b      	mov	r3, r1
   1369a:	4620      	mov	r0, r4
   1369c:	4629      	mov	r1, r5
   1369e:	f003 ffd5 	bl	1764c <__adddf3>
   136a2:	4602      	mov	r2, r0
   136a4:	460b      	mov	r3, r1
   136a6:	4610      	mov	r0, r2
   136a8:	4619      	mov	r1, r3
   136aa:	f004 fc63 	bl	17f74 <__aeabi_d2f>
   136ae:	4603      	mov	r3, r0
   136b0:	4630      	mov	r0, r6
   136b2:	4619      	mov	r1, r3
   136b4:	f001 f81c 	bl	146f0 <fly_to_xy>
   136b8:	69b8      	ldr	r0, [r7, #24]
   136ba:	f004 f925 	bl	17908 <__aeabi_f2d>
   136be:	4602      	mov	r2, r0
   136c0:	460b      	mov	r3, r1
   136c2:	a185      	add	r1, pc, #532	; (adr r1, 138d8 <auto_nav+0x1570>)
   136c4:	e9d1 0100 	ldrd	r0, r1, [r1]
   136c8:	f003 ffbe 	bl	17648 <__aeabi_dsub>
   136cc:	4602      	mov	r2, r0
   136ce:	460b      	mov	r3, r1
   136d0:	4610      	mov	r0, r2
   136d2:	4619      	mov	r1, r3
   136d4:	a382      	add	r3, pc, #520	; (adr r3, 138e0 <auto_nav+0x1578>)
   136d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   136da:	f004 fa93 	bl	17c04 <__aeabi_ddiv>
   136de:	4602      	mov	r2, r0
   136e0:	460b      	mov	r3, r1
   136e2:	4610      	mov	r0, r2
   136e4:	4619      	mov	r1, r3
   136e6:	f04f 0200 	mov.w	r2, #0
   136ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   136ee:	f2c4 0366 	movt	r3, #16486	; 0x4066
   136f2:	f004 f95d 	bl	179b0 <__aeabi_dmul>
   136f6:	4602      	mov	r2, r0
   136f8:	460b      	mov	r3, r1
   136fa:	4610      	mov	r0, r2
   136fc:	4619      	mov	r1, r3
   136fe:	f004 fc39 	bl	17f74 <__aeabi_d2f>
   13702:	4602      	mov	r2, r0
   13704:	f24b 235c 	movw	r3, #45660	; 0xb25c
   13708:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1370c:	601a      	str	r2, [r3, #0]
   1370e:	e012      	b.n	13736 <auto_nav+0x13ce>
   13710:	f24b 235c 	movw	r3, #45660	; 0xb25c
   13714:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13718:	681b      	ldr	r3, [r3, #0]
   1371a:	4618      	mov	r0, r3
   1371c:	f04f 0100 	mov.w	r1, #0
   13720:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13724:	f004 fc7c 	bl	18020 <__addsf3>
   13728:	4603      	mov	r3, r0
   1372a:	461a      	mov	r2, r3
   1372c:	f24b 235c 	movw	r3, #45660	; 0xb25c
   13730:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13734:	601a      	str	r2, [r3, #0]
   13736:	f24b 235c 	movw	r3, #45660	; 0xb25c
   1373a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1373e:	681b      	ldr	r3, [r3, #0]
   13740:	4618      	mov	r0, r3
   13742:	f04f 0100 	mov.w	r1, #0
   13746:	f004 ff11 	bl	1856c <__aeabi_fcmplt>
   1374a:	4603      	mov	r3, r0
   1374c:	2b00      	cmp	r3, #0
   1374e:	d1df      	bne.n	13710 <auto_nav+0x13a8>
   13750:	e012      	b.n	13778 <auto_nav+0x1410>
   13752:	f24b 235c 	movw	r3, #45660	; 0xb25c
   13756:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1375a:	681b      	ldr	r3, [r3, #0]
   1375c:	4618      	mov	r0, r3
   1375e:	f04f 0100 	mov.w	r1, #0
   13762:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13766:	f004 fc59 	bl	1801c <__aeabi_fsub>
   1376a:	4603      	mov	r3, r0
   1376c:	461a      	mov	r2, r3
   1376e:	f24b 235c 	movw	r3, #45660	; 0xb25c
   13772:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13776:	601a      	str	r2, [r3, #0]
   13778:	f24b 235c 	movw	r3, #45660	; 0xb25c
   1377c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13780:	681b      	ldr	r3, [r3, #0]
   13782:	4618      	mov	r0, r3
   13784:	f04f 0100 	mov.w	r1, #0
   13788:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1378c:	f004 ff02 	bl	18594 <__aeabi_fcmpge>
   13790:	4603      	mov	r3, r0
   13792:	2b00      	cmp	r3, #0
   13794:	d1dd      	bne.n	13752 <auto_nav+0x13ea>
        return;
   13796:	f000 beb9 	b.w	1450c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   1379a:	f24b 2340 	movw	r3, #45632	; 0xb240
   1379e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137a2:	781b      	ldrb	r3, [r3, #0]
   137a4:	2b01      	cmp	r3, #1
   137a6:	f040 86b1 	bne.w	1450c <auto_nav+0x21a4>
    {
        nav_stage = 1;
   137aa:	f24b 2340 	movw	r3, #45632	; 0xb240
   137ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137b2:	2201      	movs	r2, #1
   137b4:	701a      	strb	r2, [r3, #0]
        NextBlock()
   137b6:	f24b 2341 	movw	r3, #45633	; 0xb241
   137ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137be:	781b      	ldrb	r3, [r3, #0]
   137c0:	3301      	adds	r3, #1
   137c2:	b2da      	uxtb	r2, r3
   137c4:	f24b 2341 	movw	r3, #45633	; 0xb241
   137c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137cc:	701a      	strb	r2, [r3, #0]
   137ce:	f24b 2340 	movw	r3, #45632	; 0xb240
   137d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137d6:	2200      	movs	r2, #0
   137d8:	701a      	strb	r2, [r3, #0]
   137da:	f24b 2356 	movw	r3, #45654	; 0xb256
   137de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137e2:	2200      	movs	r2, #0
   137e4:	801a      	strh	r2, [r3, #0]
   137e6:	f24b 439c 	movw	r3, #46236	; 0xb49c
   137ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137ee:	681a      	ldr	r2, [r3, #0]
   137f0:	f24b 2344 	movw	r3, #45636	; 0xb244
   137f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137f8:	601a      	str	r2, [r3, #0]
   137fa:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   137fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13802:	681a      	ldr	r2, [r3, #0]
   13804:	f24b 2348 	movw	r3, #45640	; 0xb248
   13808:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1380c:	601a      	str	r2, [r3, #0]
   1380e:	f24b 2354 	movw	r3, #45652	; 0xb254
   13812:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13816:	2200      	movs	r2, #0
   13818:	801a      	strh	r2, [r3, #0]
   1381a:	f24b 2358 	movw	r3, #45656	; 0xb258
   1381e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13822:	f04f 0200 	mov.w	r2, #0
   13826:	601a      	str	r2, [r3, #0]
   13828:	f000 be70 	b.w	1450c <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
   1382c:	f24b 2341 	movw	r3, #45633	; 0xb241
   13830:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13834:	781b      	ldrb	r3, [r3, #0]
   13836:	2b04      	cmp	r3, #4
   13838:	f040 8202 	bne.w	13c40 <auto_nav+0x18d8>
{
    nav_block = 4;
   1383c:	f24b 2341 	movw	r3, #45633	; 0xb241
   13840:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13844:	2204      	movs	r2, #4
   13846:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
   13848:	f64a 63d0 	movw	r3, #44752	; 0xaed0
   1384c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13850:	781b      	ldrb	r3, [r3, #0]
   13852:	2b00      	cmp	r3, #0
   13854:	d007      	beq.n	13866 <auto_nav+0x14fe>
   13856:	f64a 63d0 	movw	r3, #44752	; 0xaed0
   1385a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1385e:	2200      	movs	r2, #0
   13860:	701a      	strb	r2, [r3, #0]
   13862:	2301      	movs	r3, #1
   13864:	e000      	b.n	13868 <auto_nav+0x1500>
   13866:	2300      	movs	r3, #0
   13868:	2b00      	cmp	r3, #0
   1386a:	d03d      	beq.n	138e8 <auto_nav+0x1580>
   1386c:	f24b 2341 	movw	r3, #45633	; 0xb241
   13870:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13874:	2205      	movs	r2, #5
   13876:	701a      	strb	r2, [r3, #0]
   13878:	f24b 2340 	movw	r3, #45632	; 0xb240
   1387c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13880:	2200      	movs	r2, #0
   13882:	701a      	strb	r2, [r3, #0]
   13884:	f24b 2356 	movw	r3, #45654	; 0xb256
   13888:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1388c:	2200      	movs	r2, #0
   1388e:	801a      	strh	r2, [r3, #0]
   13890:	f24b 439c 	movw	r3, #46236	; 0xb49c
   13894:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13898:	681a      	ldr	r2, [r3, #0]
   1389a:	f24b 2344 	movw	r3, #45636	; 0xb244
   1389e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138a2:	601a      	str	r2, [r3, #0]
   138a4:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   138a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138ac:	681a      	ldr	r2, [r3, #0]
   138ae:	f24b 2348 	movw	r3, #45640	; 0xb248
   138b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138b6:	601a      	str	r2, [r3, #0]
   138b8:	f24b 2354 	movw	r3, #45652	; 0xb254
   138bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138c0:	2200      	movs	r2, #0
   138c2:	801a      	strh	r2, [r3, #0]
   138c4:	f24b 2358 	movw	r3, #45656	; 0xb258
   138c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138cc:	f04f 0200 	mov.w	r2, #0
   138d0:	601a      	str	r2, [r3, #0]
   138d2:	f000 be1b 	b.w	1450c <auto_nav+0x21a4>
   138d6:	bf00      	nop
   138d8:	54442d18 	.word	0x54442d18
   138dc:	3ff921fb 	.word	0x3ff921fb
   138e0:	54442d18 	.word	0x54442d18
   138e4:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
   138e8:	f24b 2340 	movw	r3, #45632	; 0xb240
   138ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138f0:	781b      	ldrb	r3, [r3, #0]
   138f2:	2b00      	cmp	r3, #0
   138f4:	f040 815b 	bne.w	13bae <auto_nav+0x1846>
    {
        nav_stage = 0;
   138f8:	f24b 2340 	movw	r3, #45632	; 0xb240
   138fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13900:	2200      	movs	r2, #0
   13902:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13904:	f64a 63cf 	movw	r3, #44751	; 0xaecf
   13908:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1390c:	2200      	movs	r2, #0
   1390e:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13910:	f24b 236c 	movw	r3, #45676	; 0xb26c
   13914:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13918:	f04f 0200 	mov.w	r2, #0
   1391c:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1391e:	f64a 63cd 	movw	r3, #44749	; 0xaecd
   13922:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13926:	2203      	movs	r2, #3
   13928:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
   1392a:	f240 4328 	movw	r3, #1064	; 0x428
   1392e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13932:	689a      	ldr	r2, [r3, #8]
   13934:	f240 4324 	movw	r3, #1060	; 0x424
   13938:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1393c:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   1393e:	f24b 2334 	movw	r3, #45620	; 0xb234
   13942:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13946:	f04f 0200 	mov.w	r2, #0
   1394a:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
   1394c:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   13950:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13954:	681a      	ldr	r2, [r3, #0]
   13956:	f240 4328 	movw	r3, #1064	; 0x428
   1395a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1395e:	685b      	ldr	r3, [r3, #4]
   13960:	4610      	mov	r0, r2
   13962:	4619      	mov	r1, r3
   13964:	f004 fb5a 	bl	1801c <__aeabi_fsub>
   13968:	4603      	mov	r3, r0
   1396a:	4618      	mov	r0, r3
   1396c:	f003 ffcc 	bl	17908 <__aeabi_f2d>
   13970:	4604      	mov	r4, r0
   13972:	460d      	mov	r5, r1
   13974:	f24b 439c 	movw	r3, #46236	; 0xb49c
   13978:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1397c:	681a      	ldr	r2, [r3, #0]
   1397e:	f240 4328 	movw	r3, #1064	; 0x428
   13982:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13986:	681b      	ldr	r3, [r3, #0]
   13988:	4610      	mov	r0, r2
   1398a:	4619      	mov	r1, r3
   1398c:	f004 fb46 	bl	1801c <__aeabi_fsub>
   13990:	4603      	mov	r3, r0
   13992:	4618      	mov	r0, r3
   13994:	f003 ffb8 	bl	17908 <__aeabi_f2d>
   13998:	4602      	mov	r2, r0
   1399a:	460b      	mov	r3, r1
   1399c:	4620      	mov	r0, r4
   1399e:	4629      	mov	r1, r5
   139a0:	f002 f802 	bl	159a8 <pp_atan2>
   139a4:	4602      	mov	r2, r0
   139a6:	460b      	mov	r3, r1
   139a8:	4610      	mov	r0, r2
   139aa:	4619      	mov	r1, r3
   139ac:	f004 fae2 	bl	17f74 <__aeabi_d2f>
   139b0:	4603      	mov	r3, r0
   139b2:	617b      	str	r3, [r7, #20]
   139b4:	6978      	ldr	r0, [r7, #20]
   139b6:	f003 ffa7 	bl	17908 <__aeabi_f2d>
   139ba:	4604      	mov	r4, r0
   139bc:	460d      	mov	r5, r1
   139be:	f24b 43d4 	movw	r3, #46292	; 0xb4d4
   139c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   139c6:	681b      	ldr	r3, [r3, #0]
   139c8:	4618      	mov	r0, r3
   139ca:	f04f 0100 	mov.w	r1, #0
   139ce:	f2cc 3116 	movt	r1, #49942	; 0xc316
   139d2:	f004 fc2d 	bl	18230 <__aeabi_fmul>
   139d6:	4603      	mov	r3, r0
   139d8:	4618      	mov	r0, r3
   139da:	f003 ff95 	bl	17908 <__aeabi_f2d>
   139de:	4602      	mov	r2, r0
   139e0:	460b      	mov	r3, r1
   139e2:	f04f 0000 	mov.w	r0, #0
   139e6:	f04f 0100 	mov.w	r1, #0
   139ea:	f2c4 0114 	movt	r1, #16404	; 0x4014
   139ee:	f004 f909 	bl	17c04 <__aeabi_ddiv>
   139f2:	4602      	mov	r2, r0
   139f4:	460b      	mov	r3, r1
   139f6:	4620      	mov	r0, r4
   139f8:	4629      	mov	r1, r5
   139fa:	f003 fe27 	bl	1764c <__adddf3>
   139fe:	4602      	mov	r2, r0
   13a00:	460b      	mov	r3, r1
   13a02:	4610      	mov	r0, r2
   13a04:	4619      	mov	r1, r3
   13a06:	f004 fab5 	bl	17f74 <__aeabi_d2f>
   13a0a:	4603      	mov	r3, r0
   13a0c:	613b      	str	r3, [r7, #16]
   13a0e:	f240 4328 	movw	r3, #1064	; 0x428
   13a12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a16:	681b      	ldr	r3, [r3, #0]
   13a18:	4618      	mov	r0, r3
   13a1a:	f003 ff75 	bl	17908 <__aeabi_f2d>
   13a1e:	4604      	mov	r4, r0
   13a20:	460d      	mov	r5, r1
   13a22:	6938      	ldr	r0, [r7, #16]
   13a24:	f003 ff70 	bl	17908 <__aeabi_f2d>
   13a28:	4602      	mov	r2, r0
   13a2a:	460b      	mov	r3, r1
   13a2c:	4610      	mov	r0, r2
   13a2e:	4619      	mov	r1, r3
   13a30:	a3af      	add	r3, pc, #700	; (adr r3, 13cf0 <auto_nav+0x1988>)
   13a32:	e9d3 2300 	ldrd	r2, r3, [r3]
   13a36:	f003 fe09 	bl	1764c <__adddf3>
   13a3a:	4602      	mov	r2, r0
   13a3c:	460b      	mov	r3, r1
   13a3e:	4610      	mov	r0, r2
   13a40:	4619      	mov	r1, r3
   13a42:	f002 f871 	bl	15b28 <pp_sin>
   13a46:	4602      	mov	r2, r0
   13a48:	460b      	mov	r3, r1
   13a4a:	4610      	mov	r0, r2
   13a4c:	4619      	mov	r1, r3
   13a4e:	a3aa      	add	r3, pc, #680	; (adr r3, 13cf8 <auto_nav+0x1990>)
   13a50:	e9d3 2300 	ldrd	r2, r3, [r3]
   13a54:	f003 ffac 	bl	179b0 <__aeabi_dmul>
   13a58:	4602      	mov	r2, r0
   13a5a:	460b      	mov	r3, r1
   13a5c:	4620      	mov	r0, r4
   13a5e:	4629      	mov	r1, r5
   13a60:	f003 fdf4 	bl	1764c <__adddf3>
   13a64:	4602      	mov	r2, r0
   13a66:	460b      	mov	r3, r1
   13a68:	4610      	mov	r0, r2
   13a6a:	4619      	mov	r1, r3
   13a6c:	f004 fa82 	bl	17f74 <__aeabi_d2f>
   13a70:	4606      	mov	r6, r0
   13a72:	f240 4328 	movw	r3, #1064	; 0x428
   13a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13a7a:	685b      	ldr	r3, [r3, #4]
   13a7c:	4618      	mov	r0, r3
   13a7e:	f003 ff43 	bl	17908 <__aeabi_f2d>
   13a82:	4604      	mov	r4, r0
   13a84:	460d      	mov	r5, r1
   13a86:	6938      	ldr	r0, [r7, #16]
   13a88:	f003 ff3e 	bl	17908 <__aeabi_f2d>
   13a8c:	4602      	mov	r2, r0
   13a8e:	460b      	mov	r3, r1
   13a90:	4610      	mov	r0, r2
   13a92:	4619      	mov	r1, r3
   13a94:	f002 f848 	bl	15b28 <pp_sin>
   13a98:	4602      	mov	r2, r0
   13a9a:	460b      	mov	r3, r1
   13a9c:	4610      	mov	r0, r2
   13a9e:	4619      	mov	r1, r3
   13aa0:	a395      	add	r3, pc, #596	; (adr r3, 13cf8 <auto_nav+0x1990>)
   13aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
   13aa6:	f003 ff83 	bl	179b0 <__aeabi_dmul>
   13aaa:	4602      	mov	r2, r0
   13aac:	460b      	mov	r3, r1
   13aae:	4620      	mov	r0, r4
   13ab0:	4629      	mov	r1, r5
   13ab2:	f003 fdcb 	bl	1764c <__adddf3>
   13ab6:	4602      	mov	r2, r0
   13ab8:	460b      	mov	r3, r1
   13aba:	4610      	mov	r0, r2
   13abc:	4619      	mov	r1, r3
   13abe:	f004 fa59 	bl	17f74 <__aeabi_d2f>
   13ac2:	4603      	mov	r3, r0
   13ac4:	4630      	mov	r0, r6
   13ac6:	4619      	mov	r1, r3
   13ac8:	f000 fe12 	bl	146f0 <fly_to_xy>
   13acc:	6938      	ldr	r0, [r7, #16]
   13ace:	f003 ff1b 	bl	17908 <__aeabi_f2d>
   13ad2:	4602      	mov	r2, r0
   13ad4:	460b      	mov	r3, r1
   13ad6:	a186      	add	r1, pc, #536	; (adr r1, 13cf0 <auto_nav+0x1988>)
   13ad8:	e9d1 0100 	ldrd	r0, r1, [r1]
   13adc:	f003 fdb4 	bl	17648 <__aeabi_dsub>
   13ae0:	4602      	mov	r2, r0
   13ae2:	460b      	mov	r3, r1
   13ae4:	4610      	mov	r0, r2
   13ae6:	4619      	mov	r1, r3
   13ae8:	a385      	add	r3, pc, #532	; (adr r3, 13d00 <auto_nav+0x1998>)
   13aea:	e9d3 2300 	ldrd	r2, r3, [r3]
   13aee:	f004 f889 	bl	17c04 <__aeabi_ddiv>
   13af2:	4602      	mov	r2, r0
   13af4:	460b      	mov	r3, r1
   13af6:	4610      	mov	r0, r2
   13af8:	4619      	mov	r1, r3
   13afa:	f04f 0200 	mov.w	r2, #0
   13afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13b02:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13b06:	f003 ff53 	bl	179b0 <__aeabi_dmul>
   13b0a:	4602      	mov	r2, r0
   13b0c:	460b      	mov	r3, r1
   13b0e:	4610      	mov	r0, r2
   13b10:	4619      	mov	r1, r3
   13b12:	f004 fa2f 	bl	17f74 <__aeabi_d2f>
   13b16:	4602      	mov	r2, r0
   13b18:	f24b 235c 	movw	r3, #45660	; 0xb25c
   13b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b20:	601a      	str	r2, [r3, #0]
   13b22:	e012      	b.n	13b4a <auto_nav+0x17e2>
   13b24:	f24b 235c 	movw	r3, #45660	; 0xb25c
   13b28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b2c:	681b      	ldr	r3, [r3, #0]
   13b2e:	4618      	mov	r0, r3
   13b30:	f04f 0100 	mov.w	r1, #0
   13b34:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13b38:	f004 fa72 	bl	18020 <__addsf3>
   13b3c:	4603      	mov	r3, r0
   13b3e:	461a      	mov	r2, r3
   13b40:	f24b 235c 	movw	r3, #45660	; 0xb25c
   13b44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b48:	601a      	str	r2, [r3, #0]
   13b4a:	f24b 235c 	movw	r3, #45660	; 0xb25c
   13b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b52:	681b      	ldr	r3, [r3, #0]
   13b54:	4618      	mov	r0, r3
   13b56:	f04f 0100 	mov.w	r1, #0
   13b5a:	f004 fd07 	bl	1856c <__aeabi_fcmplt>
   13b5e:	4603      	mov	r3, r0
   13b60:	2b00      	cmp	r3, #0
   13b62:	d1df      	bne.n	13b24 <auto_nav+0x17bc>
   13b64:	e012      	b.n	13b8c <auto_nav+0x1824>
   13b66:	f24b 235c 	movw	r3, #45660	; 0xb25c
   13b6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b6e:	681b      	ldr	r3, [r3, #0]
   13b70:	4618      	mov	r0, r3
   13b72:	f04f 0100 	mov.w	r1, #0
   13b76:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13b7a:	f004 fa4f 	bl	1801c <__aeabi_fsub>
   13b7e:	4603      	mov	r3, r0
   13b80:	461a      	mov	r2, r3
   13b82:	f24b 235c 	movw	r3, #45660	; 0xb25c
   13b86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b8a:	601a      	str	r2, [r3, #0]
   13b8c:	f24b 235c 	movw	r3, #45660	; 0xb25c
   13b90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b94:	681b      	ldr	r3, [r3, #0]
   13b96:	4618      	mov	r0, r3
   13b98:	f04f 0100 	mov.w	r1, #0
   13b9c:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13ba0:	f004 fcf8 	bl	18594 <__aeabi_fcmpge>
   13ba4:	4603      	mov	r3, r0
   13ba6:	2b00      	cmp	r3, #0
   13ba8:	d1dd      	bne.n	13b66 <auto_nav+0x17fe>
        return;
   13baa:	f000 bcaf 	b.w	1450c <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13bae:	f24b 2340 	movw	r3, #45632	; 0xb240
   13bb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bb6:	781b      	ldrb	r3, [r3, #0]
   13bb8:	2b01      	cmp	r3, #1
   13bba:	f040 84a7 	bne.w	1450c <auto_nav+0x21a4>
    {
        nav_stage =1;
   13bbe:	f24b 2340 	movw	r3, #45632	; 0xb240
   13bc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bc6:	2201      	movs	r2, #1
   13bc8:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13bca:	f24b 2341 	movw	r3, #45633	; 0xb241
   13bce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bd2:	781b      	ldrb	r3, [r3, #0]
   13bd4:	3301      	adds	r3, #1
   13bd6:	b2da      	uxtb	r2, r3
   13bd8:	f24b 2341 	movw	r3, #45633	; 0xb241
   13bdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13be0:	701a      	strb	r2, [r3, #0]
   13be2:	f24b 2340 	movw	r3, #45632	; 0xb240
   13be6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bea:	2200      	movs	r2, #0
   13bec:	701a      	strb	r2, [r3, #0]
   13bee:	f24b 2356 	movw	r3, #45654	; 0xb256
   13bf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13bf6:	2200      	movs	r2, #0
   13bf8:	801a      	strh	r2, [r3, #0]
   13bfa:	f24b 439c 	movw	r3, #46236	; 0xb49c
   13bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c02:	681a      	ldr	r2, [r3, #0]
   13c04:	f24b 2344 	movw	r3, #45636	; 0xb244
   13c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c0c:	601a      	str	r2, [r3, #0]
   13c0e:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   13c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c16:	681a      	ldr	r2, [r3, #0]
   13c18:	f24b 2348 	movw	r3, #45640	; 0xb248
   13c1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c20:	601a      	str	r2, [r3, #0]
   13c22:	f24b 2354 	movw	r3, #45652	; 0xb254
   13c26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c2a:	2200      	movs	r2, #0
   13c2c:	801a      	strh	r2, [r3, #0]
   13c2e:	f24b 2358 	movw	r3, #45656	; 0xb258
   13c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c36:	f04f 0200 	mov.w	r2, #0
   13c3a:	601a      	str	r2, [r3, #0]
   13c3c:	f000 bc66 	b.w	1450c <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
   13c40:	f24b 2341 	movw	r3, #45633	; 0xb241
   13c44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c48:	781b      	ldrb	r3, [r3, #0]
   13c4a:	2b05      	cmp	r3, #5
   13c4c:	f040 845e 	bne.w	1450c <auto_nav+0x21a4>
{
    nav_block = 5;
   13c50:	f24b 2341 	movw	r3, #45633	; 0xb241
   13c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c58:	2205      	movs	r2, #5
   13c5a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
   13c5c:	f64a 63d0 	movw	r3, #44752	; 0xaed0
   13c60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c64:	781b      	ldrb	r3, [r3, #0]
   13c66:	2b00      	cmp	r3, #0
   13c68:	d007      	beq.n	13c7a <auto_nav+0x1912>
   13c6a:	f64a 63d0 	movw	r3, #44752	; 0xaed0
   13c6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c72:	2200      	movs	r2, #0
   13c74:	701a      	strb	r2, [r3, #0]
   13c76:	2301      	movs	r3, #1
   13c78:	e000      	b.n	13c7c <auto_nav+0x1914>
   13c7a:	2300      	movs	r3, #0
   13c7c:	2b00      	cmp	r3, #0
   13c7e:	d043      	beq.n	13d08 <auto_nav+0x19a0>
   13c80:	f24b 2341 	movw	r3, #45633	; 0xb241
   13c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c88:	2201      	movs	r2, #1
   13c8a:	701a      	strb	r2, [r3, #0]
   13c8c:	f24b 2340 	movw	r3, #45632	; 0xb240
   13c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c94:	2200      	movs	r2, #0
   13c96:	701a      	strb	r2, [r3, #0]
   13c98:	f24b 2356 	movw	r3, #45654	; 0xb256
   13c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ca0:	2200      	movs	r2, #0
   13ca2:	801a      	strh	r2, [r3, #0]
   13ca4:	f24b 439c 	movw	r3, #46236	; 0xb49c
   13ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13cac:	681a      	ldr	r2, [r3, #0]
   13cae:	f24b 2344 	movw	r3, #45636	; 0xb244
   13cb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13cb6:	601a      	str	r2, [r3, #0]
   13cb8:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   13cbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13cc0:	681a      	ldr	r2, [r3, #0]
   13cc2:	f24b 2348 	movw	r3, #45640	; 0xb248
   13cc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13cca:	601a      	str	r2, [r3, #0]
   13ccc:	f24b 2354 	movw	r3, #45652	; 0xb254
   13cd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13cd4:	2200      	movs	r2, #0
   13cd6:	801a      	strh	r2, [r3, #0]
   13cd8:	f24b 2358 	movw	r3, #45656	; 0xb258
   13cdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ce0:	f04f 0200 	mov.w	r2, #0
   13ce4:	601a      	str	r2, [r3, #0]
   13ce6:	f000 bc11 	b.w	1450c <auto_nav+0x21a4>
   13cea:	bf00      	nop
   13cec:	f3af 8000 	nop.w
   13cf0:	54442d18 	.word	0x54442d18
   13cf4:	3ff921fb 	.word	0x3ff921fb
   13cf8:	00000000 	.word	0x00000000
   13cfc:	4062c000 	.word	0x4062c000
   13d00:	54442d18 	.word	0x54442d18
   13d04:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
   13d08:	f24b 2340 	movw	r3, #45632	; 0xb240
   13d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d10:	781b      	ldrb	r3, [r3, #0]
   13d12:	2b00      	cmp	r3, #0
   13d14:	d133      	bne.n	13d7e <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
   13d16:	f24b 2340 	movw	r3, #45632	; 0xb240
   13d1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d1e:	2200      	movs	r2, #0
   13d20:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
   13d22:	f24b 2340 	movw	r3, #45632	; 0xb240
   13d26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d2a:	781b      	ldrb	r3, [r3, #0]
   13d2c:	3301      	adds	r3, #1
   13d2e:	b2da      	uxtb	r2, r3
   13d30:	f24b 2340 	movw	r3, #45632	; 0xb240
   13d34:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d38:	701a      	strb	r2, [r3, #0]
   13d3a:	f24b 439c 	movw	r3, #46236	; 0xb49c
   13d3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d42:	681a      	ldr	r2, [r3, #0]
   13d44:	f24b 2344 	movw	r3, #45636	; 0xb244
   13d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d4c:	601a      	str	r2, [r3, #0]
   13d4e:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   13d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d56:	681a      	ldr	r2, [r3, #0]
   13d58:	f24b 2348 	movw	r3, #45640	; 0xb248
   13d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d60:	601a      	str	r2, [r3, #0]
   13d62:	f24b 2354 	movw	r3, #45652	; 0xb254
   13d66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d6a:	2200      	movs	r2, #0
   13d6c:	801a      	strh	r2, [r3, #0]
   13d6e:	f24b 2358 	movw	r3, #45656	; 0xb258
   13d72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d76:	f04f 0200 	mov.w	r2, #0
   13d7a:	601a      	str	r2, [r3, #0]
   13d7c:	e3c6      	b.n	1450c <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
   13d7e:	f24b 2340 	movw	r3, #45632	; 0xb240
   13d82:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d86:	781b      	ldrb	r3, [r3, #0]
   13d88:	2b01      	cmp	r3, #1
   13d8a:	f040 81b5 	bne.w	140f8 <auto_nav+0x1d90>
    {
        nav_stage =1;
   13d8e:	f24b 2340 	movw	r3, #45632	; 0xb240
   13d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d96:	2201      	movs	r2, #1
   13d98:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13d9a:	f64a 63cf 	movw	r3, #44751	; 0xaecf
   13d9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13da2:	2200      	movs	r2, #0
   13da4:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13da6:	f24b 236c 	movw	r3, #45676	; 0xb26c
   13daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13dae:	f04f 0200 	mov.w	r2, #0
   13db2:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13db4:	f64a 63cd 	movw	r3, #44749	; 0xaecd
   13db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13dbc:	2203      	movs	r2, #3
   13dbe:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
   13dc0:	f240 4328 	movw	r3, #1064	; 0x428
   13dc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13dc8:	695a      	ldr	r2, [r3, #20]
   13dca:	f240 4324 	movw	r3, #1060	; 0x424
   13dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13dd2:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13dd4:	f24b 2334 	movw	r3, #45620	; 0xb234
   13dd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ddc:	f04f 0200 	mov.w	r2, #0
   13de0:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
   13de2:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   13de6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13dea:	681a      	ldr	r2, [r3, #0]
   13dec:	f240 4328 	movw	r3, #1064	; 0x428
   13df0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13df4:	691b      	ldr	r3, [r3, #16]
   13df6:	4610      	mov	r0, r2
   13df8:	4619      	mov	r1, r3
   13dfa:	f004 f90f 	bl	1801c <__aeabi_fsub>
   13dfe:	4603      	mov	r3, r0
   13e00:	4618      	mov	r0, r3
   13e02:	f003 fd81 	bl	17908 <__aeabi_f2d>
   13e06:	4604      	mov	r4, r0
   13e08:	460d      	mov	r5, r1
   13e0a:	f24b 439c 	movw	r3, #46236	; 0xb49c
   13e0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e12:	681a      	ldr	r2, [r3, #0]
   13e14:	f240 4328 	movw	r3, #1064	; 0x428
   13e18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e1c:	68db      	ldr	r3, [r3, #12]
   13e1e:	4610      	mov	r0, r2
   13e20:	4619      	mov	r1, r3
   13e22:	f004 f8fb 	bl	1801c <__aeabi_fsub>
   13e26:	4603      	mov	r3, r0
   13e28:	4618      	mov	r0, r3
   13e2a:	f003 fd6d 	bl	17908 <__aeabi_f2d>
   13e2e:	4602      	mov	r2, r0
   13e30:	460b      	mov	r3, r1
   13e32:	4620      	mov	r0, r4
   13e34:	4629      	mov	r1, r5
   13e36:	f001 fdb7 	bl	159a8 <pp_atan2>
   13e3a:	4602      	mov	r2, r0
   13e3c:	460b      	mov	r3, r1
   13e3e:	4610      	mov	r0, r2
   13e40:	4619      	mov	r1, r3
   13e42:	f004 f897 	bl	17f74 <__aeabi_d2f>
   13e46:	4603      	mov	r3, r0
   13e48:	60fb      	str	r3, [r7, #12]
   13e4a:	68f8      	ldr	r0, [r7, #12]
   13e4c:	f003 fd5c 	bl	17908 <__aeabi_f2d>
   13e50:	4604      	mov	r4, r0
   13e52:	460d      	mov	r5, r1
   13e54:	f24b 43d4 	movw	r3, #46292	; 0xb4d4
   13e58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e5c:	681b      	ldr	r3, [r3, #0]
   13e5e:	4618      	mov	r0, r3
   13e60:	f04f 0100 	mov.w	r1, #0
   13e64:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   13e68:	f004 f9e2 	bl	18230 <__aeabi_fmul>
   13e6c:	4603      	mov	r3, r0
   13e6e:	4618      	mov	r0, r3
   13e70:	f003 fd4a 	bl	17908 <__aeabi_f2d>
   13e74:	4602      	mov	r2, r0
   13e76:	460b      	mov	r3, r1
   13e78:	f04f 0000 	mov.w	r0, #0
   13e7c:	f04f 0100 	mov.w	r1, #0
   13e80:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13e84:	f003 febe 	bl	17c04 <__aeabi_ddiv>
   13e88:	4602      	mov	r2, r0
   13e8a:	460b      	mov	r3, r1
   13e8c:	4620      	mov	r0, r4
   13e8e:	4629      	mov	r1, r5
   13e90:	f003 fbdc 	bl	1764c <__adddf3>
   13e94:	4602      	mov	r2, r0
   13e96:	460b      	mov	r3, r1
   13e98:	4610      	mov	r0, r2
   13e9a:	4619      	mov	r1, r3
   13e9c:	f004 f86a 	bl	17f74 <__aeabi_d2f>
   13ea0:	4603      	mov	r3, r0
   13ea2:	60bb      	str	r3, [r7, #8]
   13ea4:	f240 4328 	movw	r3, #1064	; 0x428
   13ea8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13eac:	68db      	ldr	r3, [r3, #12]
   13eae:	4618      	mov	r0, r3
   13eb0:	f003 fd2a 	bl	17908 <__aeabi_f2d>
   13eb4:	4604      	mov	r4, r0
   13eb6:	460d      	mov	r5, r1
   13eb8:	68b8      	ldr	r0, [r7, #8]
   13eba:	f003 fd25 	bl	17908 <__aeabi_f2d>
   13ebe:	4602      	mov	r2, r0
   13ec0:	460b      	mov	r3, r1
   13ec2:	4610      	mov	r0, r2
   13ec4:	4619      	mov	r1, r3
   13ec6:	a388      	add	r3, pc, #544	; (adr r3, 140e8 <auto_nav+0x1d80>)
   13ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
   13ecc:	f003 fbbe 	bl	1764c <__adddf3>
   13ed0:	4602      	mov	r2, r0
   13ed2:	460b      	mov	r3, r1
   13ed4:	4610      	mov	r0, r2
   13ed6:	4619      	mov	r1, r3
   13ed8:	f001 fe26 	bl	15b28 <pp_sin>
   13edc:	4602      	mov	r2, r0
   13ede:	460b      	mov	r3, r1
   13ee0:	4610      	mov	r0, r2
   13ee2:	4619      	mov	r1, r3
   13ee4:	f04f 0200 	mov.w	r2, #0
   13ee8:	f04f 0300 	mov.w	r3, #0
   13eec:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13ef0:	f003 fd5e 	bl	179b0 <__aeabi_dmul>
   13ef4:	4602      	mov	r2, r0
   13ef6:	460b      	mov	r3, r1
   13ef8:	4620      	mov	r0, r4
   13efa:	4629      	mov	r1, r5
   13efc:	f003 fba6 	bl	1764c <__adddf3>
   13f00:	4602      	mov	r2, r0
   13f02:	460b      	mov	r3, r1
   13f04:	4610      	mov	r0, r2
   13f06:	4619      	mov	r1, r3
   13f08:	f004 f834 	bl	17f74 <__aeabi_d2f>
   13f0c:	4606      	mov	r6, r0
   13f0e:	f240 4328 	movw	r3, #1064	; 0x428
   13f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f16:	691b      	ldr	r3, [r3, #16]
   13f18:	4618      	mov	r0, r3
   13f1a:	f003 fcf5 	bl	17908 <__aeabi_f2d>
   13f1e:	4604      	mov	r4, r0
   13f20:	460d      	mov	r5, r1
   13f22:	68b8      	ldr	r0, [r7, #8]
   13f24:	f003 fcf0 	bl	17908 <__aeabi_f2d>
   13f28:	4602      	mov	r2, r0
   13f2a:	460b      	mov	r3, r1
   13f2c:	4610      	mov	r0, r2
   13f2e:	4619      	mov	r1, r3
   13f30:	f001 fdfa 	bl	15b28 <pp_sin>
   13f34:	4602      	mov	r2, r0
   13f36:	460b      	mov	r3, r1
   13f38:	4610      	mov	r0, r2
   13f3a:	4619      	mov	r1, r3
   13f3c:	f04f 0200 	mov.w	r2, #0
   13f40:	f04f 0300 	mov.w	r3, #0
   13f44:	f2c4 0359 	movt	r3, #16473	; 0x4059
   13f48:	f003 fd32 	bl	179b0 <__aeabi_dmul>
   13f4c:	4602      	mov	r2, r0
   13f4e:	460b      	mov	r3, r1
   13f50:	4620      	mov	r0, r4
   13f52:	4629      	mov	r1, r5
   13f54:	f003 fb7a 	bl	1764c <__adddf3>
   13f58:	4602      	mov	r2, r0
   13f5a:	460b      	mov	r3, r1
   13f5c:	4610      	mov	r0, r2
   13f5e:	4619      	mov	r1, r3
   13f60:	f004 f808 	bl	17f74 <__aeabi_d2f>
   13f64:	4603      	mov	r3, r0
   13f66:	4630      	mov	r0, r6
   13f68:	4619      	mov	r1, r3
   13f6a:	f000 fbc1 	bl	146f0 <fly_to_xy>
   13f6e:	68b8      	ldr	r0, [r7, #8]
   13f70:	f003 fcca 	bl	17908 <__aeabi_f2d>
   13f74:	4602      	mov	r2, r0
   13f76:	460b      	mov	r3, r1
   13f78:	a15b      	add	r1, pc, #364	; (adr r1, 140e8 <auto_nav+0x1d80>)
   13f7a:	e9d1 0100 	ldrd	r0, r1, [r1]
   13f7e:	f003 fb63 	bl	17648 <__aeabi_dsub>
   13f82:	4602      	mov	r2, r0
   13f84:	460b      	mov	r3, r1
   13f86:	4610      	mov	r0, r2
   13f88:	4619      	mov	r1, r3
   13f8a:	a359      	add	r3, pc, #356	; (adr r3, 140f0 <auto_nav+0x1d88>)
   13f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   13f90:	f003 fe38 	bl	17c04 <__aeabi_ddiv>
   13f94:	4602      	mov	r2, r0
   13f96:	460b      	mov	r3, r1
   13f98:	4610      	mov	r0, r2
   13f9a:	4619      	mov	r1, r3
   13f9c:	f04f 0200 	mov.w	r2, #0
   13fa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13fa4:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13fa8:	f003 fd02 	bl	179b0 <__aeabi_dmul>
   13fac:	4602      	mov	r2, r0
   13fae:	460b      	mov	r3, r1
   13fb0:	4610      	mov	r0, r2
   13fb2:	4619      	mov	r1, r3
   13fb4:	f003 ffde 	bl	17f74 <__aeabi_d2f>
   13fb8:	4602      	mov	r2, r0
   13fba:	f24b 235c 	movw	r3, #45660	; 0xb25c
   13fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fc2:	601a      	str	r2, [r3, #0]
   13fc4:	e012      	b.n	13fec <auto_nav+0x1c84>
   13fc6:	f24b 235c 	movw	r3, #45660	; 0xb25c
   13fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fce:	681b      	ldr	r3, [r3, #0]
   13fd0:	4618      	mov	r0, r3
   13fd2:	f04f 0100 	mov.w	r1, #0
   13fd6:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13fda:	f004 f821 	bl	18020 <__addsf3>
   13fde:	4603      	mov	r3, r0
   13fe0:	461a      	mov	r2, r3
   13fe2:	f24b 235c 	movw	r3, #45660	; 0xb25c
   13fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fea:	601a      	str	r2, [r3, #0]
   13fec:	f24b 235c 	movw	r3, #45660	; 0xb25c
   13ff0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ff4:	681b      	ldr	r3, [r3, #0]
   13ff6:	4618      	mov	r0, r3
   13ff8:	f04f 0100 	mov.w	r1, #0
   13ffc:	f004 fab6 	bl	1856c <__aeabi_fcmplt>
   14000:	4603      	mov	r3, r0
   14002:	2b00      	cmp	r3, #0
   14004:	d1df      	bne.n	13fc6 <auto_nav+0x1c5e>
   14006:	e012      	b.n	1402e <auto_nav+0x1cc6>
   14008:	f24b 235c 	movw	r3, #45660	; 0xb25c
   1400c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14010:	681b      	ldr	r3, [r3, #0]
   14012:	4618      	mov	r0, r3
   14014:	f04f 0100 	mov.w	r1, #0
   14018:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1401c:	f003 fffe 	bl	1801c <__aeabi_fsub>
   14020:	4603      	mov	r3, r0
   14022:	461a      	mov	r2, r3
   14024:	f24b 235c 	movw	r3, #45660	; 0xb25c
   14028:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1402c:	601a      	str	r2, [r3, #0]
   1402e:	f24b 235c 	movw	r3, #45660	; 0xb25c
   14032:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14036:	681b      	ldr	r3, [r3, #0]
   14038:	4618      	mov	r0, r3
   1403a:	f04f 0100 	mov.w	r1, #0
   1403e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14042:	f004 faa7 	bl	18594 <__aeabi_fcmpge>
   14046:	4603      	mov	r3, r0
   14048:	2b00      	cmp	r3, #0
   1404a:	d1dd      	bne.n	14008 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
   1404c:	f24b 235c 	movw	r3, #45660	; 0xb25c
   14050:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14054:	681b      	ldr	r3, [r3, #0]
   14056:	4618      	mov	r0, r3
   14058:	f04f 0100 	mov.w	r1, #0
   1405c:	f004 faa4 	bl	185a8 <__aeabi_fcmpgt>
   14060:	4603      	mov	r3, r0
   14062:	2b00      	cmp	r3, #0
   14064:	d100      	bne.n	14068 <auto_nav+0x1d00>
        return;
   14066:	e251      	b.n	1450c <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   14068:	f24b 235c 	movw	r3, #45660	; 0xb25c
   1406c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14070:	681b      	ldr	r3, [r3, #0]
   14072:	4618      	mov	r0, r3
   14074:	f04f 0100 	mov.w	r1, #0
   14078:	f2c4 1120 	movt	r1, #16672	; 0x4120
   1407c:	f004 fa76 	bl	1856c <__aeabi_fcmplt>
   14080:	4603      	mov	r3, r0
   14082:	2b00      	cmp	r3, #0
   14084:	d100      	bne.n	14088 <auto_nav+0x1d20>
        return;
   14086:	e241      	b.n	1450c <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   14088:	f24b 2340 	movw	r3, #45632	; 0xb240
   1408c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14090:	781b      	ldrb	r3, [r3, #0]
   14092:	3301      	adds	r3, #1
   14094:	b2da      	uxtb	r2, r3
   14096:	f24b 2340 	movw	r3, #45632	; 0xb240
   1409a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1409e:	701a      	strb	r2, [r3, #0]
   140a0:	f24b 439c 	movw	r3, #46236	; 0xb49c
   140a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140a8:	681a      	ldr	r2, [r3, #0]
   140aa:	f24b 2344 	movw	r3, #45636	; 0xb244
   140ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140b2:	601a      	str	r2, [r3, #0]
   140b4:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   140b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140bc:	681a      	ldr	r2, [r3, #0]
   140be:	f24b 2348 	movw	r3, #45640	; 0xb248
   140c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140c6:	601a      	str	r2, [r3, #0]
   140c8:	f24b 2354 	movw	r3, #45652	; 0xb254
   140cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140d0:	2200      	movs	r2, #0
   140d2:	801a      	strh	r2, [r3, #0]
   140d4:	f24b 2358 	movw	r3, #45656	; 0xb258
   140d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140dc:	f04f 0200 	mov.w	r2, #0
   140e0:	601a      	str	r2, [r3, #0]
   140e2:	e213      	b.n	1450c <auto_nav+0x21a4>
   140e4:	f3af 8000 	nop.w
   140e8:	54442d18 	.word	0x54442d18
   140ec:	3ff921fb 	.word	0x3ff921fb
   140f0:	54442d18 	.word	0x54442d18
   140f4:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
   140f8:	f24b 2340 	movw	r3, #45632	; 0xb240
   140fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14100:	781b      	ldrb	r3, [r3, #0]
   14102:	2b02      	cmp	r3, #2
   14104:	f040 81ad 	bne.w	14462 <auto_nav+0x20fa>
    {
         nav_stage = 2;
   14108:	f24b 2340 	movw	r3, #45632	; 0xb240
   1410c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14110:	2202      	movs	r2, #2
   14112:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
   14114:	f64a 63cf 	movw	r3, #44751	; 0xaecf
   14118:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1411c:	2200      	movs	r2, #0
   1411e:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   14120:	f24b 236c 	movw	r3, #45676	; 0xb26c
   14124:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14128:	f04f 0200 	mov.w	r2, #0
   1412c:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1412e:	f64a 63cd 	movw	r3, #44749	; 0xaecd
   14132:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14136:	2203      	movs	r2, #3
   14138:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
   1413a:	f240 4328 	movw	r3, #1064	; 0x428
   1413e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14142:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   14144:	f240 4324 	movw	r3, #1060	; 0x424
   14148:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1414c:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
   1414e:	f24b 2334 	movw	r3, #45620	; 0xb234
   14152:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14156:	f04f 0200 	mov.w	r2, #0
   1415a:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
   1415c:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   14160:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14164:	681a      	ldr	r2, [r3, #0]
   14166:	f240 4328 	movw	r3, #1064	; 0x428
   1416a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1416e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14170:	4610      	mov	r0, r2
   14172:	4619      	mov	r1, r3
   14174:	f003 ff52 	bl	1801c <__aeabi_fsub>
   14178:	4603      	mov	r3, r0
   1417a:	4618      	mov	r0, r3
   1417c:	f003 fbc4 	bl	17908 <__aeabi_f2d>
   14180:	4604      	mov	r4, r0
   14182:	460d      	mov	r5, r1
   14184:	f24b 439c 	movw	r3, #46236	; 0xb49c
   14188:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1418c:	681a      	ldr	r2, [r3, #0]
   1418e:	f240 4328 	movw	r3, #1064	; 0x428
   14192:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14198:	4610      	mov	r0, r2
   1419a:	4619      	mov	r1, r3
   1419c:	f003 ff3e 	bl	1801c <__aeabi_fsub>
   141a0:	4603      	mov	r3, r0
   141a2:	4618      	mov	r0, r3
   141a4:	f003 fbb0 	bl	17908 <__aeabi_f2d>
   141a8:	4602      	mov	r2, r0
   141aa:	460b      	mov	r3, r1
   141ac:	4620      	mov	r0, r4
   141ae:	4629      	mov	r1, r5
   141b0:	f001 fbfa 	bl	159a8 <pp_atan2>
   141b4:	4602      	mov	r2, r0
   141b6:	460b      	mov	r3, r1
   141b8:	4610      	mov	r0, r2
   141ba:	4619      	mov	r1, r3
   141bc:	f003 feda 	bl	17f74 <__aeabi_d2f>
   141c0:	4603      	mov	r3, r0
   141c2:	607b      	str	r3, [r7, #4]
   141c4:	6878      	ldr	r0, [r7, #4]
   141c6:	f003 fb9f 	bl	17908 <__aeabi_f2d>
   141ca:	4604      	mov	r4, r0
   141cc:	460d      	mov	r5, r1
   141ce:	f24b 43d4 	movw	r3, #46292	; 0xb4d4
   141d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141d6:	681b      	ldr	r3, [r3, #0]
   141d8:	4618      	mov	r0, r3
   141da:	f04f 0100 	mov.w	r1, #0
   141de:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   141e2:	f004 f825 	bl	18230 <__aeabi_fmul>
   141e6:	4603      	mov	r3, r0
   141e8:	4618      	mov	r0, r3
   141ea:	f003 fb8d 	bl	17908 <__aeabi_f2d>
   141ee:	4602      	mov	r2, r0
   141f0:	460b      	mov	r3, r1
   141f2:	f04f 0000 	mov.w	r0, #0
   141f6:	f04f 0100 	mov.w	r1, #0
   141fa:	f2c4 0114 	movt	r1, #16404	; 0x4014
   141fe:	f003 fd01 	bl	17c04 <__aeabi_ddiv>
   14202:	4602      	mov	r2, r0
   14204:	460b      	mov	r3, r1
   14206:	4620      	mov	r0, r4
   14208:	4629      	mov	r1, r5
   1420a:	f003 fa1f 	bl	1764c <__adddf3>
   1420e:	4602      	mov	r2, r0
   14210:	460b      	mov	r3, r1
   14212:	4610      	mov	r0, r2
   14214:	4619      	mov	r1, r3
   14216:	f003 fead 	bl	17f74 <__aeabi_d2f>
   1421a:	4603      	mov	r3, r0
   1421c:	603b      	str	r3, [r7, #0]
   1421e:	f240 4328 	movw	r3, #1064	; 0x428
   14222:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14228:	4618      	mov	r0, r3
   1422a:	f003 fb6d 	bl	17908 <__aeabi_f2d>
   1422e:	4604      	mov	r4, r0
   14230:	460d      	mov	r5, r1
   14232:	6838      	ldr	r0, [r7, #0]
   14234:	f003 fb68 	bl	17908 <__aeabi_f2d>
   14238:	4602      	mov	r2, r0
   1423a:	460b      	mov	r3, r1
   1423c:	4610      	mov	r0, r2
   1423e:	4619      	mov	r1, r3
   14240:	a3b5      	add	r3, pc, #724	; (adr r3, 14518 <auto_nav+0x21b0>)
   14242:	e9d3 2300 	ldrd	r2, r3, [r3]
   14246:	f003 fa01 	bl	1764c <__adddf3>
   1424a:	4602      	mov	r2, r0
   1424c:	460b      	mov	r3, r1
   1424e:	4610      	mov	r0, r2
   14250:	4619      	mov	r1, r3
   14252:	f001 fc69 	bl	15b28 <pp_sin>
   14256:	4602      	mov	r2, r0
   14258:	460b      	mov	r3, r1
   1425a:	4610      	mov	r0, r2
   1425c:	4619      	mov	r1, r3
   1425e:	f04f 0200 	mov.w	r2, #0
   14262:	f04f 0300 	mov.w	r3, #0
   14266:	f2c4 0359 	movt	r3, #16473	; 0x4059
   1426a:	f003 fba1 	bl	179b0 <__aeabi_dmul>
   1426e:	4602      	mov	r2, r0
   14270:	460b      	mov	r3, r1
   14272:	4620      	mov	r0, r4
   14274:	4629      	mov	r1, r5
   14276:	f003 f9e9 	bl	1764c <__adddf3>
   1427a:	4602      	mov	r2, r0
   1427c:	460b      	mov	r3, r1
   1427e:	4610      	mov	r0, r2
   14280:	4619      	mov	r1, r3
   14282:	f003 fe77 	bl	17f74 <__aeabi_d2f>
   14286:	4606      	mov	r6, r0
   14288:	f240 4328 	movw	r3, #1064	; 0x428
   1428c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14292:	4618      	mov	r0, r3
   14294:	f003 fb38 	bl	17908 <__aeabi_f2d>
   14298:	4604      	mov	r4, r0
   1429a:	460d      	mov	r5, r1
   1429c:	6838      	ldr	r0, [r7, #0]
   1429e:	f003 fb33 	bl	17908 <__aeabi_f2d>
   142a2:	4602      	mov	r2, r0
   142a4:	460b      	mov	r3, r1
   142a6:	4610      	mov	r0, r2
   142a8:	4619      	mov	r1, r3
   142aa:	f001 fc3d 	bl	15b28 <pp_sin>
   142ae:	4602      	mov	r2, r0
   142b0:	460b      	mov	r3, r1
   142b2:	4610      	mov	r0, r2
   142b4:	4619      	mov	r1, r3
   142b6:	f04f 0200 	mov.w	r2, #0
   142ba:	f04f 0300 	mov.w	r3, #0
   142be:	f2c4 0359 	movt	r3, #16473	; 0x4059
   142c2:	f003 fb75 	bl	179b0 <__aeabi_dmul>
   142c6:	4602      	mov	r2, r0
   142c8:	460b      	mov	r3, r1
   142ca:	4620      	mov	r0, r4
   142cc:	4629      	mov	r1, r5
   142ce:	f003 f9bd 	bl	1764c <__adddf3>
   142d2:	4602      	mov	r2, r0
   142d4:	460b      	mov	r3, r1
   142d6:	4610      	mov	r0, r2
   142d8:	4619      	mov	r1, r3
   142da:	f003 fe4b 	bl	17f74 <__aeabi_d2f>
   142de:	4603      	mov	r3, r0
   142e0:	4630      	mov	r0, r6
   142e2:	4619      	mov	r1, r3
   142e4:	f000 fa04 	bl	146f0 <fly_to_xy>
   142e8:	6838      	ldr	r0, [r7, #0]
   142ea:	f003 fb0d 	bl	17908 <__aeabi_f2d>
   142ee:	4602      	mov	r2, r0
   142f0:	460b      	mov	r3, r1
   142f2:	a189      	add	r1, pc, #548	; (adr r1, 14518 <auto_nav+0x21b0>)
   142f4:	e9d1 0100 	ldrd	r0, r1, [r1]
   142f8:	f003 f9a6 	bl	17648 <__aeabi_dsub>
   142fc:	4602      	mov	r2, r0
   142fe:	460b      	mov	r3, r1
   14300:	4610      	mov	r0, r2
   14302:	4619      	mov	r1, r3
   14304:	a386      	add	r3, pc, #536	; (adr r3, 14520 <auto_nav+0x21b8>)
   14306:	e9d3 2300 	ldrd	r2, r3, [r3]
   1430a:	f003 fc7b 	bl	17c04 <__aeabi_ddiv>
   1430e:	4602      	mov	r2, r0
   14310:	460b      	mov	r3, r1
   14312:	4610      	mov	r0, r2
   14314:	4619      	mov	r1, r3
   14316:	f04f 0200 	mov.w	r2, #0
   1431a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1431e:	f2c4 0366 	movt	r3, #16486	; 0x4066
   14322:	f003 fb45 	bl	179b0 <__aeabi_dmul>
   14326:	4602      	mov	r2, r0
   14328:	460b      	mov	r3, r1
   1432a:	4610      	mov	r0, r2
   1432c:	4619      	mov	r1, r3
   1432e:	f003 fe21 	bl	17f74 <__aeabi_d2f>
   14332:	4602      	mov	r2, r0
   14334:	f24b 235c 	movw	r3, #45660	; 0xb25c
   14338:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1433c:	601a      	str	r2, [r3, #0]
   1433e:	e012      	b.n	14366 <auto_nav+0x1ffe>
   14340:	f24b 235c 	movw	r3, #45660	; 0xb25c
   14344:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14348:	681b      	ldr	r3, [r3, #0]
   1434a:	4618      	mov	r0, r3
   1434c:	f04f 0100 	mov.w	r1, #0
   14350:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14354:	f003 fe64 	bl	18020 <__addsf3>
   14358:	4603      	mov	r3, r0
   1435a:	461a      	mov	r2, r3
   1435c:	f24b 235c 	movw	r3, #45660	; 0xb25c
   14360:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14364:	601a      	str	r2, [r3, #0]
   14366:	f24b 235c 	movw	r3, #45660	; 0xb25c
   1436a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1436e:	681b      	ldr	r3, [r3, #0]
   14370:	4618      	mov	r0, r3
   14372:	f04f 0100 	mov.w	r1, #0
   14376:	f004 f8f9 	bl	1856c <__aeabi_fcmplt>
   1437a:	4603      	mov	r3, r0
   1437c:	2b00      	cmp	r3, #0
   1437e:	d1df      	bne.n	14340 <auto_nav+0x1fd8>
   14380:	e012      	b.n	143a8 <auto_nav+0x2040>
   14382:	f24b 235c 	movw	r3, #45660	; 0xb25c
   14386:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1438a:	681b      	ldr	r3, [r3, #0]
   1438c:	4618      	mov	r0, r3
   1438e:	f04f 0100 	mov.w	r1, #0
   14392:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14396:	f003 fe41 	bl	1801c <__aeabi_fsub>
   1439a:	4603      	mov	r3, r0
   1439c:	461a      	mov	r2, r3
   1439e:	f24b 235c 	movw	r3, #45660	; 0xb25c
   143a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143a6:	601a      	str	r2, [r3, #0]
   143a8:	f24b 235c 	movw	r3, #45660	; 0xb25c
   143ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143b0:	681b      	ldr	r3, [r3, #0]
   143b2:	4618      	mov	r0, r3
   143b4:	f04f 0100 	mov.w	r1, #0
   143b8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   143bc:	f004 f8ea 	bl	18594 <__aeabi_fcmpge>
   143c0:	4603      	mov	r3, r0
   143c2:	2b00      	cmp	r3, #0
   143c4:	d1dd      	bne.n	14382 <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
   143c6:	f24b 235c 	movw	r3, #45660	; 0xb25c
   143ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143ce:	681b      	ldr	r3, [r3, #0]
   143d0:	4618      	mov	r0, r3
   143d2:	f04f 0100 	mov.w	r1, #0
   143d6:	f2c4 3134 	movt	r1, #17204	; 0x4334
   143da:	f004 f8e5 	bl	185a8 <__aeabi_fcmpgt>
   143de:	4603      	mov	r3, r0
   143e0:	2b00      	cmp	r3, #0
   143e2:	d100      	bne.n	143e6 <auto_nav+0x207e>
          return;
   143e4:	e092      	b.n	1450c <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   143e6:	f24b 235c 	movw	r3, #45660	; 0xb25c
   143ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143ee:	681b      	ldr	r3, [r3, #0]
   143f0:	4618      	mov	r0, r3
   143f2:	f04f 0100 	mov.w	r1, #0
   143f6:	f2c4 313e 	movt	r1, #17214	; 0x433e
   143fa:	f004 f8b7 	bl	1856c <__aeabi_fcmplt>
   143fe:	4603      	mov	r3, r0
   14400:	2b00      	cmp	r3, #0
   14402:	d100      	bne.n	14406 <auto_nav+0x209e>
          return;
   14404:	e082      	b.n	1450c <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   14406:	f24b 2340 	movw	r3, #45632	; 0xb240
   1440a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1440e:	781b      	ldrb	r3, [r3, #0]
   14410:	3301      	adds	r3, #1
   14412:	b2da      	uxtb	r2, r3
   14414:	f24b 2340 	movw	r3, #45632	; 0xb240
   14418:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1441c:	701a      	strb	r2, [r3, #0]
   1441e:	f24b 439c 	movw	r3, #46236	; 0xb49c
   14422:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14426:	681a      	ldr	r2, [r3, #0]
   14428:	f24b 2344 	movw	r3, #45636	; 0xb244
   1442c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14430:	601a      	str	r2, [r3, #0]
   14432:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   14436:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1443a:	681a      	ldr	r2, [r3, #0]
   1443c:	f24b 2348 	movw	r3, #45640	; 0xb248
   14440:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14444:	601a      	str	r2, [r3, #0]
   14446:	f24b 2354 	movw	r3, #45652	; 0xb254
   1444a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1444e:	2200      	movs	r2, #0
   14450:	801a      	strh	r2, [r3, #0]
   14452:	f24b 2358 	movw	r3, #45656	; 0xb258
   14456:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1445a:	f04f 0200 	mov.w	r2, #0
   1445e:	601a      	str	r2, [r3, #0]
   14460:	e054      	b.n	1450c <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
   14462:	f24b 2340 	movw	r3, #45632	; 0xb240
   14466:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1446a:	781b      	ldrb	r3, [r3, #0]
   1446c:	2b03      	cmp	r3, #3
   1446e:	d106      	bne.n	1447e <auto_nav+0x2116>
    {
	  nav_stage = 3;
   14470:	f24b 2340 	movw	r3, #45632	; 0xb240
   14474:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14478:	2203      	movs	r2, #3
   1447a:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
   1447c:	e44b      	b.n	13d16 <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
   1447e:	f24b 2340 	movw	r3, #45632	; 0xb240
   14482:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14486:	781b      	ldrb	r3, [r3, #0]
   14488:	2b04      	cmp	r3, #4
   1448a:	d13f      	bne.n	1450c <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
   1448c:	f24b 2340 	movw	r3, #45632	; 0xb240
   14490:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14494:	2204      	movs	r2, #4
   14496:	701a      	strb	r2, [r3, #0]
        NextBlock()
   14498:	f24b 2341 	movw	r3, #45633	; 0xb241
   1449c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144a0:	781b      	ldrb	r3, [r3, #0]
   144a2:	3301      	adds	r3, #1
   144a4:	b2da      	uxtb	r2, r3
   144a6:	f24b 2341 	movw	r3, #45633	; 0xb241
   144aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144ae:	701a      	strb	r2, [r3, #0]
   144b0:	f24b 2340 	movw	r3, #45632	; 0xb240
   144b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144b8:	2200      	movs	r2, #0
   144ba:	701a      	strb	r2, [r3, #0]
   144bc:	f24b 2356 	movw	r3, #45654	; 0xb256
   144c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144c4:	2200      	movs	r2, #0
   144c6:	801a      	strh	r2, [r3, #0]
   144c8:	f24b 439c 	movw	r3, #46236	; 0xb49c
   144cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144d0:	681a      	ldr	r2, [r3, #0]
   144d2:	f24b 2344 	movw	r3, #45636	; 0xb244
   144d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144da:	601a      	str	r2, [r3, #0]
   144dc:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   144e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144e4:	681a      	ldr	r2, [r3, #0]
   144e6:	f24b 2348 	movw	r3, #45640	; 0xb248
   144ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144ee:	601a      	str	r2, [r3, #0]
   144f0:	f24b 2354 	movw	r3, #45652	; 0xb254
   144f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144f8:	2200      	movs	r2, #0
   144fa:	801a      	strh	r2, [r3, #0]
   144fc:	f24b 2358 	movw	r3, #45656	; 0xb258
   14500:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14504:	f04f 0200 	mov.w	r2, #0
   14508:	601a      	str	r2, [r3, #0]
   1450a:	bf00      	nop
    else { }
}
else { }

//#endif
}
   1450c:	372c      	adds	r7, #44	; 0x2c
   1450e:	46bd      	mov	sp, r7
   14510:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14512:	bf00      	nop
   14514:	f3af 8000 	nop.w
   14518:	54442d18 	.word	0x54442d18
   1451c:	3ff921fb 	.word	0x3ff921fb
   14520:	54442d18 	.word	0x54442d18
   14524:	400921fb 	.word	0x400921fb

00014528 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
   14528:	b590      	push	{r4, r7, lr}
   1452a:	b087      	sub	sp, #28
   1452c:	af00      	add	r7, sp, #0
   1452e:	4603      	mov	r3, r0
   14530:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
   14532:	79f9      	ldrb	r1, [r7, #7]
   14534:	f240 4228 	movw	r2, #1064	; 0x428
   14538:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1453c:	460b      	mov	r3, r1
   1453e:	005b      	lsls	r3, r3, #1
   14540:	440b      	add	r3, r1
   14542:	009b      	lsls	r3, r3, #2
   14544:	4413      	add	r3, r2
   14546:	681a      	ldr	r2, [r3, #0]
   14548:	f24b 439c 	movw	r3, #46236	; 0xb49c
   1454c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14550:	681b      	ldr	r3, [r3, #0]
   14552:	4610      	mov	r0, r2
   14554:	4619      	mov	r1, r3
   14556:	f003 fd61 	bl	1801c <__aeabi_fsub>
   1455a:	4603      	mov	r3, r0
   1455c:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
   1455e:	79f9      	ldrb	r1, [r7, #7]
   14560:	f240 4228 	movw	r2, #1064	; 0x428
   14564:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14568:	460b      	mov	r3, r1
   1456a:	005b      	lsls	r3, r3, #1
   1456c:	440b      	add	r3, r1
   1456e:	009b      	lsls	r3, r3, #2
   14570:	4413      	add	r3, r2
   14572:	3304      	adds	r3, #4
   14574:	681a      	ldr	r2, [r3, #0]
   14576:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   1457a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1457e:	681b      	ldr	r3, [r3, #0]
   14580:	4610      	mov	r0, r2
   14582:	4619      	mov	r1, r3
   14584:	f003 fd4a 	bl	1801c <__aeabi_fsub>
   14588:	4603      	mov	r3, r0
   1458a:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
   1458c:	6978      	ldr	r0, [r7, #20]
   1458e:	6979      	ldr	r1, [r7, #20]
   14590:	f003 fe4e 	bl	18230 <__aeabi_fmul>
   14594:	4603      	mov	r3, r0
   14596:	461c      	mov	r4, r3
   14598:	6938      	ldr	r0, [r7, #16]
   1459a:	6939      	ldr	r1, [r7, #16]
   1459c:	f003 fe48 	bl	18230 <__aeabi_fmul>
   145a0:	4603      	mov	r3, r0
   145a2:	4620      	mov	r0, r4
   145a4:	4619      	mov	r1, r3
   145a6:	f003 fd3b 	bl	18020 <__addsf3>
   145aa:	4603      	mov	r3, r0
   145ac:	461a      	mov	r2, r3
   145ae:	f24b 2374 	movw	r3, #45684	; 0xb274
   145b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145b6:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
   145b8:	f24b 43d4 	movw	r3, #46292	; 0xb4d4
   145bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145c0:	681b      	ldr	r3, [r3, #0]
   145c2:	4618      	mov	r0, r3
   145c4:	f04f 0100 	mov.w	r1, #0
   145c8:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   145cc:	f003 fe30 	bl	18230 <__aeabi_fmul>
   145d0:	4603      	mov	r3, r0
   145d2:	461a      	mov	r2, r3
   145d4:	f24b 2380 	movw	r3, #45696	; 0xb280
   145d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145dc:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
   145de:	f24b 2380 	movw	r3, #45696	; 0xb280
   145e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145e6:	681b      	ldr	r3, [r3, #0]
   145e8:	4618      	mov	r0, r3
   145ea:	f04f 0100 	mov.w	r1, #0
   145ee:	f2c4 2120 	movt	r1, #16928	; 0x4220
   145f2:	f003 ffbb 	bl	1856c <__aeabi_fcmplt>
   145f6:	4603      	mov	r3, r0
   145f8:	2b00      	cmp	r3, #0
   145fa:	d004      	beq.n	14606 <approaching+0xde>
   145fc:	f04f 0200 	mov.w	r2, #0
   14600:	f2c4 2220 	movt	r2, #16928	; 0x4220
   14604:	e004      	b.n	14610 <approaching+0xe8>
   14606:	f24b 2380 	movw	r3, #45696	; 0xb280
   1460a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1460e:	681a      	ldr	r2, [r3, #0]
   14610:	f24b 2380 	movw	r3, #45696	; 0xb280
   14614:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14618:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
   1461a:	f24b 2380 	movw	r3, #45696	; 0xb280
   1461e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14622:	681a      	ldr	r2, [r3, #0]
   14624:	f24b 2380 	movw	r3, #45696	; 0xb280
   14628:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1462c:	681b      	ldr	r3, [r3, #0]
   1462e:	4610      	mov	r0, r2
   14630:	4619      	mov	r1, r3
   14632:	f003 fdfd 	bl	18230 <__aeabi_fmul>
   14636:	4603      	mov	r3, r0
   14638:	461a      	mov	r2, r3
   1463a:	f24b 2374 	movw	r3, #45684	; 0xb274
   1463e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14642:	681b      	ldr	r3, [r3, #0]
   14644:	4610      	mov	r0, r2
   14646:	4619      	mov	r1, r3
   14648:	f003 ffae 	bl	185a8 <__aeabi_fcmpgt>
   1464c:	4603      	mov	r3, r0
   1464e:	2b00      	cmp	r3, #0
   14650:	d001      	beq.n	14656 <approaching+0x12e>
    return TRUE;
   14652:	2301      	movs	r3, #1
   14654:	e048      	b.n	146e8 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
   14656:	79f9      	ldrb	r1, [r7, #7]
   14658:	f240 4228 	movw	r2, #1064	; 0x428
   1465c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14660:	460b      	mov	r3, r1
   14662:	005b      	lsls	r3, r3, #1
   14664:	440b      	add	r3, r1
   14666:	009b      	lsls	r3, r3, #2
   14668:	4413      	add	r3, r2
   1466a:	681a      	ldr	r2, [r3, #0]
   1466c:	f24b 2344 	movw	r3, #45636	; 0xb244
   14670:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14674:	681b      	ldr	r3, [r3, #0]
   14676:	4610      	mov	r0, r2
   14678:	4619      	mov	r1, r3
   1467a:	f003 fccf 	bl	1801c <__aeabi_fsub>
   1467e:	4603      	mov	r3, r0
   14680:	4618      	mov	r0, r3
   14682:	6979      	ldr	r1, [r7, #20]
   14684:	f003 fdd4 	bl	18230 <__aeabi_fmul>
   14688:	4603      	mov	r3, r0
   1468a:	461c      	mov	r4, r3
   1468c:	79f9      	ldrb	r1, [r7, #7]
   1468e:	f240 4228 	movw	r2, #1064	; 0x428
   14692:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14696:	460b      	mov	r3, r1
   14698:	005b      	lsls	r3, r3, #1
   1469a:	440b      	add	r3, r1
   1469c:	009b      	lsls	r3, r3, #2
   1469e:	4413      	add	r3, r2
   146a0:	3304      	adds	r3, #4
   146a2:	681a      	ldr	r2, [r3, #0]
   146a4:	f24b 2348 	movw	r3, #45640	; 0xb248
   146a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   146ac:	681b      	ldr	r3, [r3, #0]
   146ae:	4610      	mov	r0, r2
   146b0:	4619      	mov	r1, r3
   146b2:	f003 fcb3 	bl	1801c <__aeabi_fsub>
   146b6:	4603      	mov	r3, r0
   146b8:	4618      	mov	r0, r3
   146ba:	6939      	ldr	r1, [r7, #16]
   146bc:	f003 fdb8 	bl	18230 <__aeabi_fmul>
   146c0:	4603      	mov	r3, r0
   146c2:	4620      	mov	r0, r4
   146c4:	4619      	mov	r1, r3
   146c6:	f003 fcab 	bl	18020 <__addsf3>
   146ca:	4603      	mov	r3, r0
   146cc:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
   146ce:	2301      	movs	r3, #1
   146d0:	461c      	mov	r4, r3
   146d2:	68f8      	ldr	r0, [r7, #12]
   146d4:	f04f 0100 	mov.w	r1, #0
   146d8:	f003 ff48 	bl	1856c <__aeabi_fcmplt>
   146dc:	4603      	mov	r3, r0
   146de:	2b00      	cmp	r3, #0
   146e0:	d101      	bne.n	146e6 <approaching+0x1be>
   146e2:	2300      	movs	r3, #0
   146e4:	461c      	mov	r4, r3
   146e6:	b2e3      	uxtb	r3, r4
}
   146e8:	4618      	mov	r0, r3
   146ea:	371c      	adds	r7, #28
   146ec:	46bd      	mov	sp, r7
   146ee:	bd90      	pop	{r4, r7, pc}

000146f0 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
   146f0:	b5b0      	push	{r4, r5, r7, lr}
   146f2:	b082      	sub	sp, #8
   146f4:	af00      	add	r7, sp, #0
   146f6:	6078      	str	r0, [r7, #4]
   146f8:	6039      	str	r1, [r7, #0]
  desired_x = x;
   146fa:	f24b 2360 	movw	r3, #45664	; 0xb260
   146fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14702:	687a      	ldr	r2, [r7, #4]
   14704:	601a      	str	r2, [r3, #0]
  desired_y = y;
   14706:	f24b 2364 	movw	r3, #45668	; 0xb264
   1470a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1470e:	683a      	ldr	r2, [r7, #0]
   14710:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
   14712:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   14716:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1471a:	681b      	ldr	r3, [r3, #0]
   1471c:	6838      	ldr	r0, [r7, #0]
   1471e:	4619      	mov	r1, r3
   14720:	f003 fc7c 	bl	1801c <__aeabi_fsub>
   14724:	4603      	mov	r3, r0
   14726:	4618      	mov	r0, r3
   14728:	f003 f8ee 	bl	17908 <__aeabi_f2d>
   1472c:	4604      	mov	r4, r0
   1472e:	460d      	mov	r5, r1
   14730:	f24b 439c 	movw	r3, #46236	; 0xb49c
   14734:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14738:	681b      	ldr	r3, [r3, #0]
   1473a:	6878      	ldr	r0, [r7, #4]
   1473c:	4619      	mov	r1, r3
   1473e:	f003 fc6d 	bl	1801c <__aeabi_fsub>
   14742:	4603      	mov	r3, r0
   14744:	4618      	mov	r0, r3
   14746:	f003 f8df 	bl	17908 <__aeabi_f2d>
   1474a:	4602      	mov	r2, r0
   1474c:	460b      	mov	r3, r1
   1474e:	4620      	mov	r0, r4
   14750:	4629      	mov	r1, r5
   14752:	f001 f929 	bl	159a8 <pp_atan2>
   14756:	4602      	mov	r2, r0
   14758:	460b      	mov	r3, r1
   1475a:	a10b      	add	r1, pc, #44	; (adr r1, 14788 <fly_to_xy+0x98>)
   1475c:	e9d1 0100 	ldrd	r0, r1, [r1]
   14760:	f002 ff72 	bl	17648 <__aeabi_dsub>
   14764:	4602      	mov	r2, r0
   14766:	460b      	mov	r3, r1
   14768:	4610      	mov	r0, r2
   1476a:	4619      	mov	r1, r3
   1476c:	f003 fc02 	bl	17f74 <__aeabi_d2f>
   14770:	4602      	mov	r2, r0
   14772:	f24b 232c 	movw	r3, #45612	; 0xb22c
   14776:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1477a:	601a      	str	r2, [r3, #0]
}
   1477c:	3708      	adds	r7, #8
   1477e:	46bd      	mov	sp, r7
   14780:	bdb0      	pop	{r4, r5, r7, pc}
   14782:	bf00      	nop
   14784:	f3af 8000 	nop.w
   14788:	54442d18 	.word	0x54442d18
   1478c:	3ff921fb 	.word	0x3ff921fb

00014790 <fly_to>:

static void fly_to(uint8_t wp) { 
   14790:	b580      	push	{r7, lr}
   14792:	b082      	sub	sp, #8
   14794:	af00      	add	r7, sp, #0
   14796:	4603      	mov	r3, r0
   14798:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
   1479a:	79f9      	ldrb	r1, [r7, #7]
   1479c:	f240 4228 	movw	r2, #1064	; 0x428
   147a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   147a4:	460b      	mov	r3, r1
   147a6:	005b      	lsls	r3, r3, #1
   147a8:	440b      	add	r3, r1
   147aa:	009b      	lsls	r3, r3, #2
   147ac:	4413      	add	r3, r2
   147ae:	6818      	ldr	r0, [r3, #0]
   147b0:	79f9      	ldrb	r1, [r7, #7]
   147b2:	f240 4228 	movw	r2, #1064	; 0x428
   147b6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   147ba:	460b      	mov	r3, r1
   147bc:	005b      	lsls	r3, r3, #1
   147be:	440b      	add	r3, r1
   147c0:	009b      	lsls	r3, r3, #2
   147c2:	4413      	add	r3, r2
   147c4:	3304      	adds	r3, #4
   147c6:	681b      	ldr	r3, [r3, #0]
   147c8:	4619      	mov	r1, r3
   147ca:	f7ff ff91 	bl	146f0 <fly_to_xy>
}
   147ce:	3708      	adds	r7, #8
   147d0:	46bd      	mov	sp, r7
   147d2:	bd80      	pop	{r7, pc}

000147d4 <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
   147d4:	b5b0      	push	{r4, r5, r7, lr}
   147d6:	b088      	sub	sp, #32
   147d8:	af00      	add	r7, sp, #0
   147da:	4602      	mov	r2, r0
   147dc:	460b      	mov	r3, r1
   147de:	71fa      	strb	r2, [r7, #7]
   147e0:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
   147e2:	79f9      	ldrb	r1, [r7, #7]
   147e4:	f240 4228 	movw	r2, #1064	; 0x428
   147e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   147ec:	460b      	mov	r3, r1
   147ee:	005b      	lsls	r3, r3, #1
   147f0:	440b      	add	r3, r1
   147f2:	009b      	lsls	r3, r3, #2
   147f4:	4413      	add	r3, r2
   147f6:	681b      	ldr	r3, [r3, #0]
   147f8:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
   147fa:	79f9      	ldrb	r1, [r7, #7]
   147fc:	f240 4228 	movw	r2, #1064	; 0x428
   14800:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14804:	460b      	mov	r3, r1
   14806:	005b      	lsls	r3, r3, #1
   14808:	440b      	add	r3, r1
   1480a:	009b      	lsls	r3, r3, #2
   1480c:	4413      	add	r3, r2
   1480e:	3304      	adds	r3, #4
   14810:	681b      	ldr	r3, [r3, #0]
   14812:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
   14814:	79b9      	ldrb	r1, [r7, #6]
   14816:	f240 4228 	movw	r2, #1064	; 0x428
   1481a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1481e:	460b      	mov	r3, r1
   14820:	005b      	lsls	r3, r3, #1
   14822:	440b      	add	r3, r1
   14824:	009b      	lsls	r3, r3, #2
   14826:	4413      	add	r3, r2
   14828:	681b      	ldr	r3, [r3, #0]
   1482a:	4618      	mov	r0, r3
   1482c:	69f9      	ldr	r1, [r7, #28]
   1482e:	f003 fbf5 	bl	1801c <__aeabi_fsub>
   14832:	4603      	mov	r3, r0
   14834:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
   14836:	79b9      	ldrb	r1, [r7, #6]
   14838:	f240 4228 	movw	r2, #1064	; 0x428
   1483c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14840:	460b      	mov	r3, r1
   14842:	005b      	lsls	r3, r3, #1
   14844:	440b      	add	r3, r1
   14846:	009b      	lsls	r3, r3, #2
   14848:	4413      	add	r3, r2
   1484a:	3304      	adds	r3, #4
   1484c:	681b      	ldr	r3, [r3, #0]
   1484e:	4618      	mov	r0, r3
   14850:	69b9      	ldr	r1, [r7, #24]
   14852:	f003 fbe3 	bl	1801c <__aeabi_fsub>
   14856:	4603      	mov	r3, r0
   14858:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
   1485a:	6978      	ldr	r0, [r7, #20]
   1485c:	6979      	ldr	r1, [r7, #20]
   1485e:	f003 fce7 	bl	18230 <__aeabi_fmul>
   14862:	4603      	mov	r3, r0
   14864:	461c      	mov	r4, r3
   14866:	6938      	ldr	r0, [r7, #16]
   14868:	6939      	ldr	r1, [r7, #16]
   1486a:	f003 fce1 	bl	18230 <__aeabi_fmul>
   1486e:	4603      	mov	r3, r0
   14870:	4620      	mov	r0, r4
   14872:	4619      	mov	r1, r3
   14874:	f003 fbd4 	bl	18020 <__addsf3>
   14878:	4603      	mov	r3, r0
   1487a:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
   1487c:	f24b 439c 	movw	r3, #46236	; 0xb49c
   14880:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14884:	681b      	ldr	r3, [r3, #0]
   14886:	4618      	mov	r0, r3
   14888:	69f9      	ldr	r1, [r7, #28]
   1488a:	f003 fbc7 	bl	1801c <__aeabi_fsub>
   1488e:	4603      	mov	r3, r0
   14890:	4618      	mov	r0, r3
   14892:	6979      	ldr	r1, [r7, #20]
   14894:	f003 fccc 	bl	18230 <__aeabi_fmul>
   14898:	4603      	mov	r3, r0
   1489a:	461c      	mov	r4, r3
   1489c:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   148a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148a4:	681b      	ldr	r3, [r3, #0]
   148a6:	4618      	mov	r0, r3
   148a8:	69b9      	ldr	r1, [r7, #24]
   148aa:	f003 fbb7 	bl	1801c <__aeabi_fsub>
   148ae:	4603      	mov	r3, r0
   148b0:	4618      	mov	r0, r3
   148b2:	6939      	ldr	r1, [r7, #16]
   148b4:	f003 fcbc 	bl	18230 <__aeabi_fmul>
   148b8:	4603      	mov	r3, r0
   148ba:	4620      	mov	r0, r4
   148bc:	4619      	mov	r1, r3
   148be:	f003 fbaf 	bl	18020 <__addsf3>
   148c2:	4603      	mov	r3, r0
   148c4:	4618      	mov	r0, r3
   148c6:	68f9      	ldr	r1, [r7, #12]
   148c8:	f003 fd66 	bl	18398 <__aeabi_fdiv>
   148cc:	4603      	mov	r3, r0
   148ce:	461a      	mov	r2, r3
   148d0:	f24b 2384 	movw	r3, #45700	; 0xb284
   148d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148d8:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
   148da:	f24b 2384 	movw	r3, #45700	; 0xb284
   148de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148e2:	681b      	ldr	r3, [r3, #0]
   148e4:	4618      	mov	r0, r3
   148e6:	f04f 0100 	mov.w	r1, #0
   148ea:	f003 fe53 	bl	18594 <__aeabi_fcmpge>
   148ee:	4603      	mov	r3, r0
   148f0:	2b00      	cmp	r3, #0
   148f2:	d005      	beq.n	14900 <route_to+0x12c>
   148f4:	f24b 2384 	movw	r3, #45700	; 0xb284
   148f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   148fc:	681a      	ldr	r2, [r3, #0]
   148fe:	e001      	b.n	14904 <route_to+0x130>
   14900:	f04f 0200 	mov.w	r2, #0
   14904:	f24b 2384 	movw	r3, #45700	; 0xb284
   14908:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1490c:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
   1490e:	68f8      	ldr	r0, [r7, #12]
   14910:	f002 fffa 	bl	17908 <__aeabi_f2d>
   14914:	4602      	mov	r2, r0
   14916:	460b      	mov	r3, r1
   14918:	4610      	mov	r0, r2
   1491a:	4619      	mov	r1, r3
   1491c:	f001 f9f4 	bl	15d08 <pp_sqrt>
   14920:	4602      	mov	r2, r0
   14922:	460b      	mov	r3, r1
   14924:	4610      	mov	r0, r2
   14926:	4619      	mov	r1, r3
   14928:	f003 fb24 	bl	17f74 <__aeabi_d2f>
   1492c:	4602      	mov	r2, r0
   1492e:	f24b 2388 	movw	r3, #45704	; 0xb288
   14932:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14936:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
   14938:	f24b 2384 	movw	r3, #45700	; 0xb284
   1493c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14940:	681b      	ldr	r3, [r3, #0]
   14942:	4618      	mov	r0, r3
   14944:	f002 ffe0 	bl	17908 <__aeabi_f2d>
   14948:	4604      	mov	r4, r0
   1494a:	460d      	mov	r5, r1
   1494c:	f24b 2380 	movw	r3, #45696	; 0xb280
   14950:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14954:	681a      	ldr	r2, [r3, #0]
   14956:	f24b 2388 	movw	r3, #45704	; 0xb288
   1495a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1495e:	681b      	ldr	r3, [r3, #0]
   14960:	4610      	mov	r0, r2
   14962:	4619      	mov	r1, r3
   14964:	f003 fd18 	bl	18398 <__aeabi_fdiv>
   14968:	4603      	mov	r3, r0
   1496a:	4618      	mov	r0, r3
   1496c:	f04f 0100 	mov.w	r1, #0
   14970:	f003 fe10 	bl	18594 <__aeabi_fcmpge>
   14974:	4603      	mov	r3, r0
   14976:	2b00      	cmp	r3, #0
   14978:	d014      	beq.n	149a4 <route_to+0x1d0>
   1497a:	f24b 2380 	movw	r3, #45696	; 0xb280
   1497e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14982:	681a      	ldr	r2, [r3, #0]
   14984:	f24b 2388 	movw	r3, #45704	; 0xb288
   14988:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1498c:	681b      	ldr	r3, [r3, #0]
   1498e:	4610      	mov	r0, r2
   14990:	4619      	mov	r1, r3
   14992:	f003 fd01 	bl	18398 <__aeabi_fdiv>
   14996:	4603      	mov	r3, r0
   14998:	4618      	mov	r0, r3
   1499a:	f002 ffb5 	bl	17908 <__aeabi_f2d>
   1499e:	4602      	mov	r2, r0
   149a0:	460b      	mov	r3, r1
   149a2:	e003      	b.n	149ac <route_to+0x1d8>
   149a4:	f04f 0200 	mov.w	r2, #0
   149a8:	f04f 0300 	mov.w	r3, #0
   149ac:	4620      	mov	r0, r4
   149ae:	4629      	mov	r1, r5
   149b0:	f002 fe4c 	bl	1764c <__adddf3>
   149b4:	4602      	mov	r2, r0
   149b6:	460b      	mov	r3, r1
   149b8:	4610      	mov	r0, r2
   149ba:	4619      	mov	r1, r3
   149bc:	f003 fada 	bl	17f74 <__aeabi_d2f>
   149c0:	4602      	mov	r2, r0
   149c2:	f24b 2384 	movw	r3, #45700	; 0xb284
   149c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149ca:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
   149cc:	f24b 2384 	movw	r3, #45700	; 0xb284
   149d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149d4:	681b      	ldr	r3, [r3, #0]
   149d6:	4618      	mov	r0, r3
   149d8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   149dc:	f003 fdda 	bl	18594 <__aeabi_fcmpge>
   149e0:	4603      	mov	r3, r0
   149e2:	2b00      	cmp	r3, #0
   149e4:	d002      	beq.n	149ec <route_to+0x218>
   149e6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   149ea:	e004      	b.n	149f6 <route_to+0x222>
   149ec:	f24b 2384 	movw	r3, #45700	; 0xb284
   149f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149f4:	681a      	ldr	r2, [r3, #0]
   149f6:	f24b 2384 	movw	r3, #45700	; 0xb284
   149fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   149fe:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
   14a00:	f24b 2384 	movw	r3, #45700	; 0xb284
   14a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a08:	681b      	ldr	r3, [r3, #0]
   14a0a:	4618      	mov	r0, r3
   14a0c:	6979      	ldr	r1, [r7, #20]
   14a0e:	f003 fc0f 	bl	18230 <__aeabi_fmul>
   14a12:	4603      	mov	r3, r0
   14a14:	4618      	mov	r0, r3
   14a16:	69f9      	ldr	r1, [r7, #28]
   14a18:	f003 fb02 	bl	18020 <__addsf3>
   14a1c:	4603      	mov	r3, r0
   14a1e:	461c      	mov	r4, r3
   14a20:	f24b 2384 	movw	r3, #45700	; 0xb284
   14a24:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a28:	681b      	ldr	r3, [r3, #0]
   14a2a:	4618      	mov	r0, r3
   14a2c:	6939      	ldr	r1, [r7, #16]
   14a2e:	f003 fbff 	bl	18230 <__aeabi_fmul>
   14a32:	4603      	mov	r3, r0
   14a34:	4618      	mov	r0, r3
   14a36:	69b9      	ldr	r1, [r7, #24]
   14a38:	f003 faf2 	bl	18020 <__addsf3>
   14a3c:	4603      	mov	r3, r0
   14a3e:	4620      	mov	r0, r4
   14a40:	4619      	mov	r1, r3
   14a42:	f7ff fe55 	bl	146f0 <fly_to_xy>
}
   14a46:	3720      	adds	r7, #32
   14a48:	46bd      	mov	sp, r7
   14a4a:	bdb0      	pop	{r4, r5, r7, pc}

00014a4c <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
   14a4c:	b590      	push	{r4, r7, lr}
   14a4e:	b083      	sub	sp, #12
   14a50:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
   14a52:	f240 4328 	movw	r3, #1064	; 0x428
   14a56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a5a:	681a      	ldr	r2, [r3, #0]
   14a5c:	f24b 439c 	movw	r3, #46236	; 0xb49c
   14a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a64:	681b      	ldr	r3, [r3, #0]
   14a66:	4610      	mov	r0, r2
   14a68:	4619      	mov	r1, r3
   14a6a:	f003 fad7 	bl	1801c <__aeabi_fsub>
   14a6e:	4603      	mov	r3, r0
   14a70:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
   14a72:	f240 4328 	movw	r3, #1064	; 0x428
   14a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a7a:	685a      	ldr	r2, [r3, #4]
   14a7c:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   14a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14a84:	681b      	ldr	r3, [r3, #0]
   14a86:	4610      	mov	r0, r2
   14a88:	4619      	mov	r1, r3
   14a8a:	f003 fac7 	bl	1801c <__aeabi_fsub>
   14a8e:	4603      	mov	r3, r0
   14a90:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
   14a92:	6878      	ldr	r0, [r7, #4]
   14a94:	6879      	ldr	r1, [r7, #4]
   14a96:	f003 fbcb 	bl	18230 <__aeabi_fmul>
   14a9a:	4603      	mov	r3, r0
   14a9c:	461c      	mov	r4, r3
   14a9e:	6838      	ldr	r0, [r7, #0]
   14aa0:	6839      	ldr	r1, [r7, #0]
   14aa2:	f003 fbc5 	bl	18230 <__aeabi_fmul>
   14aa6:	4603      	mov	r3, r0
   14aa8:	4620      	mov	r0, r4
   14aaa:	4619      	mov	r1, r3
   14aac:	f003 fab8 	bl	18020 <__addsf3>
   14ab0:	4603      	mov	r3, r0
   14ab2:	461a      	mov	r2, r3
   14ab4:	f24b 2378 	movw	r3, #45688	; 0xb278
   14ab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14abc:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
   14abe:	f24b 2378 	movw	r3, #45688	; 0xb278
   14ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ac6:	681b      	ldr	r3, [r3, #0]
   14ac8:	2201      	movs	r2, #1
   14aca:	4614      	mov	r4, r2
   14acc:	4618      	mov	r0, r3
   14ace:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   14ad2:	f6c4 0174 	movt	r1, #18548	; 0x4874
   14ad6:	f003 fd67 	bl	185a8 <__aeabi_fcmpgt>
   14ada:	4603      	mov	r3, r0
   14adc:	2b00      	cmp	r3, #0
   14ade:	d101      	bne.n	14ae4 <compute_dist2_to_home+0x98>
   14ae0:	2300      	movs	r3, #0
   14ae2:	461c      	mov	r4, r3
   14ae4:	b2e3      	uxtb	r3, r4
   14ae6:	461a      	mov	r2, r3
   14ae8:	f24b 237c 	movw	r3, #45692	; 0xb27c
   14aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14af0:	701a      	strb	r2, [r3, #0]
}
   14af2:	370c      	adds	r7, #12
   14af4:	46bd      	mov	sp, r7
   14af6:	bd90      	pop	{r4, r7, pc}

00014af8 <nav_home>:

void nav_home(void) {
   14af8:	b580      	push	{r7, lr}
   14afa:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
   14afc:	f24b 236c 	movw	r3, #45676	; 0xb26c
   14b00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b04:	f04f 0200 	mov.w	r2, #0
   14b08:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
   14b0a:	f64a 63cd 	movw	r3, #44749	; 0xaecd
   14b0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b12:	2203      	movs	r2, #3
   14b14:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
   14b16:	f240 4324 	movw	r3, #1060	; 0x424
   14b1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b1e:	f04f 0200 	mov.w	r2, #0
   14b22:	f2c4 322f 	movt	r2, #17199	; 0x432f
   14b26:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
   14b28:	f7ff ff90 	bl	14a4c <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
   14b2c:	f24b 2378 	movw	r3, #45688	; 0xb278
   14b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b34:	681a      	ldr	r2, [r3, #0]
   14b36:	f24b 2374 	movw	r3, #45684	; 0xb274
   14b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b3e:	601a      	str	r2, [r3, #0]
}
   14b40:	bd80      	pop	{r7, pc}
   14b42:	bf00      	nop

00014b44 <nav_update>:

void nav_update(void) {
   14b44:	b580      	push	{r7, lr}
   14b46:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
   14b48:	f7ff ff80 	bl	14a4c <compute_dist2_to_home>

  auto_nav();
   14b4c:	f7fd fc0c 	bl	12368 <auto_nav>
}
   14b50:	bd80      	pop	{r7, pc}
   14b52:	bf00      	nop

00014b54 <nav_init>:


void nav_init(void) {
   14b54:	b480      	push	{r7}
   14b56:	af00      	add	r7, sp, #0
  nav_block = 0;
   14b58:	f24b 2341 	movw	r3, #45633	; 0xb241
   14b5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b60:	2200      	movs	r2, #0
   14b62:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
   14b64:	f24b 2340 	movw	r3, #45632	; 0xb240
   14b68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b6c:	2200      	movs	r2, #0
   14b6e:	701a      	strb	r2, [r3, #0]
}
   14b70:	46bd      	mov	sp, r7
   14b72:	f85d 7b04 	ldr.w	r7, [sp], #4
   14b76:	4770      	bx	lr

00014b78 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
   14b78:	b480      	push	{r7}
   14b7a:	b083      	sub	sp, #12
   14b7c:	af00      	add	r7, sp, #0
   14b7e:	4603      	mov	r3, r0
   14b80:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
   14b82:	f242 030a 	movw	r3, #8202	; 0x200a
   14b86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b8a:	781b      	ldrb	r3, [r3, #0]
   14b8c:	b2db      	uxtb	r3, r3
   14b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14b92:	2b00      	cmp	r3, #0
   14b94:	d028      	beq.n	14be8 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
   14b96:	f24b 2395 	movw	r3, #45717	; 0xb295
   14b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14b9e:	781b      	ldrb	r3, [r3, #0]
   14ba0:	b2db      	uxtb	r3, r3
   14ba2:	461a      	mov	r2, r3
   14ba4:	f24b 2394 	movw	r3, #45716	; 0xb294
   14ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bac:	781b      	ldrb	r3, [r3, #0]
   14bae:	3301      	adds	r3, #1
   14bb0:	429a      	cmp	r2, r3
   14bb2:	d100      	bne.n	14bb6 <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14bb4:	e02c      	b.n	14c10 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
   14bb6:	f24b 2394 	movw	r3, #45716	; 0xb294
   14bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bbe:	781b      	ldrb	r3, [r3, #0]
   14bc0:	461a      	mov	r2, r3
   14bc2:	f24b 2398 	movw	r3, #45720	; 0xb298
   14bc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bca:	79f9      	ldrb	r1, [r7, #7]
   14bcc:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
   14bce:	f24b 2394 	movw	r3, #45716	; 0xb294
   14bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bd6:	781b      	ldrb	r3, [r3, #0]
   14bd8:	3301      	adds	r3, #1
   14bda:	b2da      	uxtb	r2, r3
   14bdc:	f24b 2394 	movw	r3, #45716	; 0xb294
   14be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14be4:	701a      	strb	r2, [r3, #0]
   14be6:	e013      	b.n	14c10 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
   14be8:	f242 030c 	movw	r3, #8204	; 0x200c
   14bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bf0:	79fa      	ldrb	r2, [r7, #7]
   14bf2:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
   14bf4:	f242 030a 	movw	r3, #8202	; 0x200a
   14bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14bfc:	f242 020a 	movw	r2, #8202	; 0x200a
   14c00:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14c04:	7812      	ldrb	r2, [r2, #0]
   14c06:	b2d2      	uxtb	r2, r2
   14c08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14c0c:	b2d2      	uxtb	r2, r2
   14c0e:	701a      	strb	r2, [r3, #0]
  }
}
   14c10:	370c      	adds	r7, #12
   14c12:	46bd      	mov	sp, r7
   14c14:	f85d 7b04 	ldr.w	r7, [sp], #4
   14c18:	4770      	bx	lr
   14c1a:	bf00      	nop

00014c1c <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
   14c1c:	b480      	push	{r7}
   14c1e:	b083      	sub	sp, #12
   14c20:	af00      	add	r7, sp, #0
   14c22:	4603      	mov	r3, r0
   14c24:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
   14c26:	f242 039a 	movw	r3, #8346	; 0x209a
   14c2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c2e:	781b      	ldrb	r3, [r3, #0]
   14c30:	b2db      	uxtb	r3, r3
   14c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14c36:	2b00      	cmp	r3, #0
   14c38:	d028      	beq.n	14c8c <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
   14c3a:	f24b 3399 	movw	r3, #45977	; 0xb399
   14c3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c42:	781b      	ldrb	r3, [r3, #0]
   14c44:	b2db      	uxtb	r3, r3
   14c46:	461a      	mov	r2, r3
   14c48:	f24b 3398 	movw	r3, #45976	; 0xb398
   14c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c50:	781b      	ldrb	r3, [r3, #0]
   14c52:	3301      	adds	r3, #1
   14c54:	429a      	cmp	r2, r3
   14c56:	d100      	bne.n	14c5a <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14c58:	e02c      	b.n	14cb4 <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
   14c5a:	f24b 3398 	movw	r3, #45976	; 0xb398
   14c5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c62:	781b      	ldrb	r3, [r3, #0]
   14c64:	461a      	mov	r2, r3
   14c66:	f24b 339c 	movw	r3, #45980	; 0xb39c
   14c6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c6e:	79f9      	ldrb	r1, [r7, #7]
   14c70:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
   14c72:	f24b 3398 	movw	r3, #45976	; 0xb398
   14c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c7a:	781b      	ldrb	r3, [r3, #0]
   14c7c:	3301      	adds	r3, #1
   14c7e:	b2da      	uxtb	r2, r3
   14c80:	f24b 3398 	movw	r3, #45976	; 0xb398
   14c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c88:	701a      	strb	r2, [r3, #0]
   14c8a:	e013      	b.n	14cb4 <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
   14c8c:	f242 039c 	movw	r3, #8348	; 0x209c
   14c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c94:	79fa      	ldrb	r2, [r7, #7]
   14c96:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
   14c98:	f242 039a 	movw	r3, #8346	; 0x209a
   14c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ca0:	f242 029a 	movw	r2, #8346	; 0x209a
   14ca4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14ca8:	7812      	ldrb	r2, [r2, #0]
   14caa:	b2d2      	uxtb	r2, r2
   14cac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14cb0:	b2d2      	uxtb	r2, r2
   14cb2:	701a      	strb	r2, [r3, #0]
  }
}
   14cb4:	370c      	adds	r7, #12
   14cb6:	46bd      	mov	sp, r7
   14cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
   14cbc:	4770      	bx	lr
   14cbe:	bf00      	nop

00014cc0 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
   14cc0:	b580      	push	{r7, lr}
   14cc2:	b084      	sub	sp, #16
   14cc4:	af00      	add	r7, sp, #0
   14cc6:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   14cc8:	2300      	movs	r3, #0
   14cca:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   14ccc:	e009      	b.n	14ce2 <uart0_print_string+0x22>
    uart0_transmit(s[i]);
   14cce:	7bfb      	ldrb	r3, [r7, #15]
   14cd0:	687a      	ldr	r2, [r7, #4]
   14cd2:	4413      	add	r3, r2
   14cd4:	781b      	ldrb	r3, [r3, #0]
   14cd6:	4618      	mov	r0, r3
   14cd8:	f7ff ff4e 	bl	14b78 <uart0_transmit>
    i++;
   14cdc:	7bfb      	ldrb	r3, [r7, #15]
   14cde:	3301      	adds	r3, #1
   14ce0:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   14ce2:	7bfb      	ldrb	r3, [r7, #15]
   14ce4:	687a      	ldr	r2, [r7, #4]
   14ce6:	4413      	add	r3, r2
   14ce8:	781b      	ldrb	r3, [r3, #0]
   14cea:	2b00      	cmp	r3, #0
   14cec:	d1ef      	bne.n	14cce <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
   14cee:	3710      	adds	r7, #16
   14cf0:	46bd      	mov	sp, r7
   14cf2:	bd80      	pop	{r7, pc}

00014cf4 <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
   14cf4:	b590      	push	{r4, r7, lr}
   14cf6:	b089      	sub	sp, #36	; 0x24
   14cf8:	af00      	add	r7, sp, #0
   14cfa:	4603      	mov	r3, r0
   14cfc:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   14cfe:	f648 03c0 	movw	r3, #35008	; 0x88c0
   14d02:	f2c0 0301 	movt	r3, #1
   14d06:	f107 040c 	add.w	r4, r7, #12
   14d0a:	6818      	ldr	r0, [r3, #0]
   14d0c:	6859      	ldr	r1, [r3, #4]
   14d0e:	689a      	ldr	r2, [r3, #8]
   14d10:	68db      	ldr	r3, [r3, #12]
   14d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   14d14:	79fb      	ldrb	r3, [r7, #7]
   14d16:	091b      	lsrs	r3, r3, #4
   14d18:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   14d1a:	79fb      	ldrb	r3, [r7, #7]
   14d1c:	f003 030f 	and.w	r3, r3, #15
   14d20:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
   14d22:	230f      	movs	r3, #15
   14d24:	77fb      	strb	r3, [r7, #31]
    low = 15;
   14d26:	230f      	movs	r3, #15
   14d28:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
   14d2a:	7ffb      	ldrb	r3, [r7, #31]
   14d2c:	f107 0220 	add.w	r2, r7, #32
   14d30:	4413      	add	r3, r2
   14d32:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14d36:	4618      	mov	r0, r3
   14d38:	f7ff ff1e 	bl	14b78 <uart0_transmit>
  uart0_transmit(hex[low]);
   14d3c:	7fbb      	ldrb	r3, [r7, #30]
   14d3e:	f107 0220 	add.w	r2, r7, #32
   14d42:	4413      	add	r3, r2
   14d44:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14d48:	4618      	mov	r0, r3
   14d4a:	f7ff ff15 	bl	14b78 <uart0_transmit>
}
   14d4e:	3724      	adds	r7, #36	; 0x24
   14d50:	46bd      	mov	sp, r7
   14d52:	bd90      	pop	{r4, r7, pc}

00014d54 <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
   14d54:	b480      	push	{r7}
   14d56:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
   14d58:	f24b 2394 	movw	r3, #45716	; 0xb294
   14d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d60:	781a      	ldrb	r2, [r3, #0]
   14d62:	f24b 2395 	movw	r3, #45717	; 0xb295
   14d66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d6a:	781b      	ldrb	r3, [r3, #0]
   14d6c:	b2db      	uxtb	r3, r3
   14d6e:	429a      	cmp	r2, r3
   14d70:	d10e      	bne.n	14d90 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
   14d72:	f242 030a 	movw	r3, #8202	; 0x200a
   14d76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d7a:	f242 020a 	movw	r2, #8202	; 0x200a
   14d7e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14d82:	7812      	ldrb	r2, [r2, #0]
   14d84:	b2d2      	uxtb	r2, r2
   14d86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14d8a:	b2d2      	uxtb	r2, r2
   14d8c:	701a      	strb	r2, [r3, #0]
   14d8e:	e01d      	b.n	14dcc <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
   14d90:	f242 030c 	movw	r3, #8204	; 0x200c
   14d94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d98:	f24b 2295 	movw	r2, #45717	; 0xb295
   14d9c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14da0:	7812      	ldrb	r2, [r2, #0]
   14da2:	b2d2      	uxtb	r2, r2
   14da4:	4611      	mov	r1, r2
   14da6:	f24b 2298 	movw	r2, #45720	; 0xb298
   14daa:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14dae:	5c52      	ldrb	r2, [r2, r1]
   14db0:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
   14db2:	f24b 2395 	movw	r3, #45717	; 0xb295
   14db6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dba:	781b      	ldrb	r3, [r3, #0]
   14dbc:	b2db      	uxtb	r3, r3
   14dbe:	3301      	adds	r3, #1
   14dc0:	b2da      	uxtb	r2, r3
   14dc2:	f24b 2395 	movw	r3, #45717	; 0xb295
   14dc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dca:	701a      	strb	r2, [r3, #0]
  }
}
   14dcc:	46bd      	mov	sp, r7
   14dce:	f85d 7b04 	ldr.w	r7, [sp], #4
   14dd2:	4770      	bx	lr

00014dd4 <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
   14dd4:	b480      	push	{r7}
   14dd6:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
   14dd8:	f24b 3398 	movw	r3, #45976	; 0xb398
   14ddc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14de0:	781a      	ldrb	r2, [r3, #0]
   14de2:	f24b 3399 	movw	r3, #45977	; 0xb399
   14de6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dea:	781b      	ldrb	r3, [r3, #0]
   14dec:	b2db      	uxtb	r3, r3
   14dee:	429a      	cmp	r2, r3
   14df0:	d10e      	bne.n	14e10 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
   14df2:	f242 039a 	movw	r3, #8346	; 0x209a
   14df6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dfa:	f242 029a 	movw	r2, #8346	; 0x209a
   14dfe:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14e02:	7812      	ldrb	r2, [r2, #0]
   14e04:	b2d2      	uxtb	r2, r2
   14e06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14e0a:	b2d2      	uxtb	r2, r2
   14e0c:	701a      	strb	r2, [r3, #0]
   14e0e:	e01d      	b.n	14e4c <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
   14e10:	f242 039c 	movw	r3, #8348	; 0x209c
   14e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e18:	f24b 3299 	movw	r2, #45977	; 0xb399
   14e1c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14e20:	7812      	ldrb	r2, [r2, #0]
   14e22:	b2d2      	uxtb	r2, r2
   14e24:	4611      	mov	r1, r2
   14e26:	f24b 329c 	movw	r2, #45980	; 0xb39c
   14e2a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14e2e:	5c52      	ldrb	r2, [r2, r1]
   14e30:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
   14e32:	f24b 3399 	movw	r3, #45977	; 0xb399
   14e36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e3a:	781b      	ldrb	r3, [r3, #0]
   14e3c:	b2db      	uxtb	r3, r3
   14e3e:	3301      	adds	r3, #1
   14e40:	b2da      	uxtb	r2, r3
   14e42:	f24b 3399 	movw	r3, #45977	; 0xb399
   14e46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e4a:	701a      	strb	r2, [r3, #0]
  }
}
   14e4c:	46bd      	mov	sp, r7
   14e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
   14e52:	4770      	bx	lr

00014e54 <uart0_init>:

void uart0_init( void ) {
   14e54:	b480      	push	{r7}
   14e56:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
   14e58:	f242 0390 	movw	r3, #8336	; 0x2090
   14e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e60:	2200      	movs	r2, #0
   14e62:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
   14e64:	f242 0309 	movw	r3, #8201	; 0x2009
   14e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e6c:	2219      	movs	r2, #25
   14e6e:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
   14e70:	f242 030b 	movw	r3, #8203	; 0x200b
   14e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e78:	2200      	movs	r2, #0
   14e7a:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
   14e7c:	f242 030a 	movw	r3, #8202	; 0x200a
   14e80:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e84:	2218      	movs	r2, #24
   14e86:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
   14e88:	f242 0395 	movw	r3, #8341	; 0x2095
   14e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e90:	2206      	movs	r2, #6
   14e92:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
   14e94:	f242 030a 	movw	r3, #8202	; 0x200a
   14e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e9c:	f242 020a 	movw	r2, #8202	; 0x200a
   14ea0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14ea4:	7812      	ldrb	r2, [r2, #0]
   14ea6:	b2d2      	uxtb	r2, r2
   14ea8:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14eac:	b2d2      	uxtb	r2, r2
   14eae:	701a      	strb	r2, [r3, #0]
}
   14eb0:	46bd      	mov	sp, r7
   14eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
   14eb6:	4770      	bx	lr

00014eb8 <uart1_init>:

void uart1_init( void ) {
   14eb8:	b480      	push	{r7}
   14eba:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
   14ebc:	f242 0398 	movw	r3, #8344	; 0x2098
   14ec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ec4:	2200      	movs	r2, #0
   14ec6:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
   14ec8:	f242 0399 	movw	r3, #8345	; 0x2099
   14ecc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ed0:	2219      	movs	r2, #25
   14ed2:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
   14ed4:	f242 039b 	movw	r3, #8347	; 0x209b
   14ed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14edc:	2200      	movs	r2, #0
   14ede:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
   14ee0:	f242 039a 	movw	r3, #8346	; 0x209a
   14ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ee8:	2218      	movs	r2, #24
   14eea:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
   14eec:	f242 039d 	movw	r3, #8349	; 0x209d
   14ef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ef4:	2206      	movs	r2, #6
   14ef6:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
   14ef8:	f242 039a 	movw	r3, #8346	; 0x209a
   14efc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f00:	f242 029a 	movw	r2, #8346	; 0x209a
   14f04:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14f08:	7812      	ldrb	r2, [r2, #0]
   14f0a:	b2d2      	uxtb	r2, r2
   14f0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14f10:	b2d2      	uxtb	r2, r2
   14f12:	701a      	strb	r2, [r3, #0]
}
   14f14:	46bd      	mov	sp, r7
   14f16:	f85d 7b04 	ldr.w	r7, [sp], #4
   14f1a:	4770      	bx	lr
   14f1c:	0000      	movs	r0, r0
	...

00014f20 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
   14f20:	b480      	push	{r7}
   14f22:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
   14f24:	f24b 439c 	movw	r3, #46236	; 0xb49c
   14f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f2c:	f04f 0200 	mov.w	r2, #0
   14f30:	601a      	str	r2, [r3, #0]
   14f32:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   14f36:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f3a:	f04f 0200 	mov.w	r2, #0
   14f3e:	601a      	str	r2, [r3, #0]
   14f40:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
   14f44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f48:	f04f 0200 	mov.w	r2, #0
   14f4c:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
   14f4e:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
   14f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f56:	f04f 0200 	mov.w	r2, #0
   14f5a:	601a      	str	r2, [r3, #0]
   14f5c:	f24b 43ac 	movw	r3, #46252	; 0xb4ac
   14f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f64:	f04f 0200 	mov.w	r2, #0
   14f68:	601a      	str	r2, [r3, #0]
   14f6a:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
   14f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f72:	f04f 0200 	mov.w	r2, #0
   14f76:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   14f78:	f24b 43d4 	movw	r3, #46292	; 0xb4d4
   14f7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f80:	f04f 0200 	mov.w	r2, #0
   14f84:	601a      	str	r2, [r3, #0]
   14f86:	f24b 43d8 	movw	r3, #46296	; 0xb4d8
   14f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f8e:	f04f 0200 	mov.w	r2, #0
   14f92:	601a      	str	r2, [r3, #0]
   14f94:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
   14f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f9c:	f04f 0200 	mov.w	r2, #0
   14fa0:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   14fa2:	f24b 43c0 	movw	r3, #46272	; 0xb4c0
   14fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14faa:	f04f 0200 	mov.w	r2, #0
   14fae:	601a      	str	r2, [r3, #0]
   14fb0:	f24b 43c4 	movw	r3, #46276	; 0xb4c4
   14fb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fb8:	f04f 0200 	mov.w	r2, #0
   14fbc:	601a      	str	r2, [r3, #0]
   14fbe:	f24b 43c8 	movw	r3, #46280	; 0xb4c8
   14fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fc6:	f04f 0200 	mov.w	r2, #0
   14fca:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   14fcc:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
   14fd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fd4:	2200      	movs	r2, #0
   14fd6:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   14fd8:	f240 33f8 	movw	r3, #1016	; 0x3f8
   14fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fe0:	681a      	ldr	r2, [r3, #0]
   14fe2:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
   14fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fea:	601a      	str	r2, [r3, #0]
}
   14fec:	46bd      	mov	sp, r7
   14fee:	f85d 7b04 	ldr.w	r7, [sp], #4
   14ff2:	4770      	bx	lr

00014ff4 <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   14ff4:	b580      	push	{r7, lr}
   14ff6:	b082      	sub	sp, #8
   14ff8:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   14ffa:	f240 33ec 	movw	r3, #1004	; 0x3ec
   14ffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15002:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   15004:	2b01      	cmp	r3, #1
   15006:	d105      	bne.n	15014 <estimator_update_state_infrared+0x20>
   15008:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
   1500c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15010:	681b      	ldr	r3, [r3, #0]
   15012:	e004      	b.n	1501e <estimator_update_state_infrared+0x2a>
   15014:	f240 33f8 	movw	r3, #1016	; 0x3f8
   15018:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1501c:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   1501e:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   15020:	f24b 1388 	movw	r3, #45448	; 0xb188
   15024:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15028:	881b      	ldrh	r3, [r3, #0]
   1502a:	b21b      	sxth	r3, r3
   1502c:	4618      	mov	r0, r3
   1502e:	f003 f8ab 	bl	18188 <__aeabi_i2f>
   15032:	4603      	mov	r3, r0
   15034:	4618      	mov	r0, r3
   15036:	6879      	ldr	r1, [r7, #4]
   15038:	f003 f8fa 	bl	18230 <__aeabi_fmul>
   1503c:	4603      	mov	r3, r0
   1503e:	461a      	mov	r2, r3
   15040:	f24b 43a8 	movw	r3, #46248	; 0xb4a8
   15044:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15048:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   1504a:	f24b 138a 	movw	r3, #45450	; 0xb18a
   1504e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15052:	881b      	ldrh	r3, [r3, #0]
   15054:	b21b      	sxth	r3, r3
   15056:	4618      	mov	r0, r3
   15058:	f003 f896 	bl	18188 <__aeabi_i2f>
   1505c:	4603      	mov	r3, r0
   1505e:	4618      	mov	r0, r3
   15060:	6879      	ldr	r1, [r7, #4]
   15062:	f003 f8e5 	bl	18230 <__aeabi_fmul>
   15066:	4603      	mov	r3, r0
   15068:	461a      	mov	r2, r3
   1506a:	f24b 43b0 	movw	r3, #46256	; 0xb4b0
   1506e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15072:	601a      	str	r2, [r3, #0]
}
   15074:	3708      	adds	r7, #8
   15076:	46bd      	mov	sp, r7
   15078:	bd80      	pop	{r7, pc}
   1507a:	bf00      	nop

0001507c <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   1507c:	b5b0      	push	{r4, r5, r7, lr}
   1507e:	b084      	sub	sp, #16
   15080:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   15082:	f24b 43e8 	movw	r3, #46312	; 0xb4e8
   15086:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1508a:	781b      	ldrb	r3, [r3, #0]
   1508c:	2b00      	cmp	r3, #0
   1508e:	f000 81e8 	beq.w	15462 <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   15092:	f24b 0358 	movw	r3, #45144	; 0xb058
   15096:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1509a:	681a      	ldr	r2, [r3, #0]
   1509c:	f24b 43ec 	movw	r3, #46316	; 0xb4ec
   150a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150a4:	681b      	ldr	r3, [r3, #0]
   150a6:	4610      	mov	r0, r2
   150a8:	4619      	mov	r1, r3
   150aa:	f002 ffb7 	bl	1801c <__aeabi_fsub>
   150ae:	4603      	mov	r3, r0
   150b0:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   150b2:	68b8      	ldr	r0, [r7, #8]
   150b4:	f002 fc28 	bl	17908 <__aeabi_f2d>
   150b8:	4602      	mov	r2, r0
   150ba:	460b      	mov	r3, r1
   150bc:	4610      	mov	r0, r2
   150be:	4619      	mov	r1, r3
   150c0:	a385      	add	r3, pc, #532	; (adr r3, 152d8 <estimator_update_ir_estim+0x25c>)
   150c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   150c6:	f002 ff03 	bl	17ed0 <__aeabi_dcmpgt>
   150ca:	4603      	mov	r3, r0
   150cc:	2b00      	cmp	r3, #0
   150ce:	d100      	bne.n	150d2 <estimator_update_ir_estim+0x56>
   150d0:	e219      	b.n	15506 <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   150d2:	f24b 43d8 	movw	r3, #46296	; 0xb4d8
   150d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150da:	681a      	ldr	r2, [r3, #0]
   150dc:	f24b 43f0 	movw	r3, #46320	; 0xb4f0
   150e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150e4:	681b      	ldr	r3, [r3, #0]
   150e6:	4610      	mov	r0, r2
   150e8:	4619      	mov	r1, r3
   150ea:	f002 ff97 	bl	1801c <__aeabi_fsub>
   150ee:	4603      	mov	r3, r0
   150f0:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   150f2:	e013      	b.n	1511c <estimator_update_ir_estim+0xa0>
   150f4:	68f8      	ldr	r0, [r7, #12]
   150f6:	f002 fc07 	bl	17908 <__aeabi_f2d>
   150fa:	4602      	mov	r2, r0
   150fc:	460b      	mov	r3, r1
   150fe:	4610      	mov	r0, r2
   15100:	4619      	mov	r1, r3
   15102:	a377      	add	r3, pc, #476	; (adr r3, 152e0 <estimator_update_ir_estim+0x264>)
   15104:	e9d3 2300 	ldrd	r2, r3, [r3]
   15108:	f002 fa9e 	bl	17648 <__aeabi_dsub>
   1510c:	4602      	mov	r2, r0
   1510e:	460b      	mov	r3, r1
   15110:	4610      	mov	r0, r2
   15112:	4619      	mov	r1, r3
   15114:	f002 ff2e 	bl	17f74 <__aeabi_d2f>
   15118:	4603      	mov	r3, r0
   1511a:	60fb      	str	r3, [r7, #12]
   1511c:	68f8      	ldr	r0, [r7, #12]
   1511e:	f002 fbf3 	bl	17908 <__aeabi_f2d>
   15122:	4602      	mov	r2, r0
   15124:	460b      	mov	r3, r1
   15126:	4610      	mov	r0, r2
   15128:	4619      	mov	r1, r3
   1512a:	a36f      	add	r3, pc, #444	; (adr r3, 152e8 <estimator_update_ir_estim+0x26c>)
   1512c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15130:	f002 fece 	bl	17ed0 <__aeabi_dcmpgt>
   15134:	4603      	mov	r3, r0
   15136:	2b00      	cmp	r3, #0
   15138:	d1dc      	bne.n	150f4 <estimator_update_ir_estim+0x78>
   1513a:	e013      	b.n	15164 <estimator_update_ir_estim+0xe8>
   1513c:	68f8      	ldr	r0, [r7, #12]
   1513e:	f002 fbe3 	bl	17908 <__aeabi_f2d>
   15142:	4602      	mov	r2, r0
   15144:	460b      	mov	r3, r1
   15146:	4610      	mov	r0, r2
   15148:	4619      	mov	r1, r3
   1514a:	a365      	add	r3, pc, #404	; (adr r3, 152e0 <estimator_update_ir_estim+0x264>)
   1514c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15150:	f002 fa7c 	bl	1764c <__adddf3>
   15154:	4602      	mov	r2, r0
   15156:	460b      	mov	r3, r1
   15158:	4610      	mov	r0, r2
   1515a:	4619      	mov	r1, r3
   1515c:	f002 ff0a 	bl	17f74 <__aeabi_d2f>
   15160:	4603      	mov	r3, r0
   15162:	60fb      	str	r3, [r7, #12]
   15164:	68f8      	ldr	r0, [r7, #12]
   15166:	f002 fbcf 	bl	17908 <__aeabi_f2d>
   1516a:	4602      	mov	r2, r0
   1516c:	460b      	mov	r3, r1
   1516e:	4610      	mov	r0, r2
   15170:	4619      	mov	r1, r3
   15172:	a35f      	add	r3, pc, #380	; (adr r3, 152f0 <estimator_update_ir_estim+0x274>)
   15174:	e9d3 2300 	ldrd	r2, r3, [r3]
   15178:	f002 fe8c 	bl	17e94 <__aeabi_dcmplt>
   1517c:	4603      	mov	r3, r0
   1517e:	2b00      	cmp	r3, #0
   15180:	d1dc      	bne.n	1513c <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   15182:	68f8      	ldr	r0, [r7, #12]
   15184:	68b9      	ldr	r1, [r7, #8]
   15186:	f003 f907 	bl	18398 <__aeabi_fdiv>
   1518a:	4603      	mov	r3, r0
   1518c:	4618      	mov	r0, r3
   1518e:	f002 fbbb 	bl	17908 <__aeabi_f2d>
   15192:	4602      	mov	r2, r0
   15194:	460b      	mov	r3, r1
   15196:	4610      	mov	r0, r2
   15198:	4619      	mov	r1, r3
   1519a:	f04f 0200 	mov.w	r2, #0
   1519e:	f04f 0300 	mov.w	r3, #0
   151a2:	f2c4 0324 	movt	r3, #16420	; 0x4024
   151a6:	f002 fc03 	bl	179b0 <__aeabi_dmul>
   151aa:	4602      	mov	r2, r0
   151ac:	460b      	mov	r3, r1
   151ae:	4610      	mov	r0, r2
   151b0:	4619      	mov	r1, r3
   151b2:	a351      	add	r3, pc, #324	; (adr r3, 152f8 <estimator_update_ir_estim+0x27c>)
   151b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   151b8:	f002 fd24 	bl	17c04 <__aeabi_ddiv>
   151bc:	4602      	mov	r2, r0
   151be:	460b      	mov	r3, r1
   151c0:	4610      	mov	r0, r2
   151c2:	4619      	mov	r1, r3
   151c4:	f002 fed6 	bl	17f74 <__aeabi_d2f>
   151c8:	4603      	mov	r3, r0
   151ca:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   151cc:	e013      	b.n	151f6 <estimator_update_ir_estim+0x17a>
   151ce:	68f8      	ldr	r0, [r7, #12]
   151d0:	f002 fb9a 	bl	17908 <__aeabi_f2d>
   151d4:	4602      	mov	r2, r0
   151d6:	460b      	mov	r3, r1
   151d8:	4610      	mov	r0, r2
   151da:	4619      	mov	r1, r3
   151dc:	a340      	add	r3, pc, #256	; (adr r3, 152e0 <estimator_update_ir_estim+0x264>)
   151de:	e9d3 2300 	ldrd	r2, r3, [r3]
   151e2:	f002 fa31 	bl	17648 <__aeabi_dsub>
   151e6:	4602      	mov	r2, r0
   151e8:	460b      	mov	r3, r1
   151ea:	4610      	mov	r0, r2
   151ec:	4619      	mov	r1, r3
   151ee:	f002 fec1 	bl	17f74 <__aeabi_d2f>
   151f2:	4603      	mov	r3, r0
   151f4:	60fb      	str	r3, [r7, #12]
   151f6:	68f8      	ldr	r0, [r7, #12]
   151f8:	f002 fb86 	bl	17908 <__aeabi_f2d>
   151fc:	4602      	mov	r2, r0
   151fe:	460b      	mov	r3, r1
   15200:	4610      	mov	r0, r2
   15202:	4619      	mov	r1, r3
   15204:	a338      	add	r3, pc, #224	; (adr r3, 152e8 <estimator_update_ir_estim+0x26c>)
   15206:	e9d3 2300 	ldrd	r2, r3, [r3]
   1520a:	f002 fe61 	bl	17ed0 <__aeabi_dcmpgt>
   1520e:	4603      	mov	r3, r0
   15210:	2b00      	cmp	r3, #0
   15212:	d1dc      	bne.n	151ce <estimator_update_ir_estim+0x152>
   15214:	e013      	b.n	1523e <estimator_update_ir_estim+0x1c2>
   15216:	68f8      	ldr	r0, [r7, #12]
   15218:	f002 fb76 	bl	17908 <__aeabi_f2d>
   1521c:	4602      	mov	r2, r0
   1521e:	460b      	mov	r3, r1
   15220:	4610      	mov	r0, r2
   15222:	4619      	mov	r1, r3
   15224:	a32e      	add	r3, pc, #184	; (adr r3, 152e0 <estimator_update_ir_estim+0x264>)
   15226:	e9d3 2300 	ldrd	r2, r3, [r3]
   1522a:	f002 fa0f 	bl	1764c <__adddf3>
   1522e:	4602      	mov	r2, r0
   15230:	460b      	mov	r3, r1
   15232:	4610      	mov	r0, r2
   15234:	4619      	mov	r1, r3
   15236:	f002 fe9d 	bl	17f74 <__aeabi_d2f>
   1523a:	4603      	mov	r3, r0
   1523c:	60fb      	str	r3, [r7, #12]
   1523e:	68f8      	ldr	r0, [r7, #12]
   15240:	f002 fb62 	bl	17908 <__aeabi_f2d>
   15244:	4602      	mov	r2, r0
   15246:	460b      	mov	r3, r1
   15248:	4610      	mov	r0, r2
   1524a:	4619      	mov	r1, r3
   1524c:	a328      	add	r3, pc, #160	; (adr r3, 152f0 <estimator_update_ir_estim+0x274>)
   1524e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15252:	f002 fe1f 	bl	17e94 <__aeabi_dcmplt>
   15256:	4603      	mov	r3, r0
   15258:	2b00      	cmp	r3, #0
   1525a:	d1dc      	bne.n	15216 <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   1525c:	f24b 1388 	movw	r3, #45448	; 0xb188
   15260:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15264:	881b      	ldrh	r3, [r3, #0]
   15266:	b21b      	sxth	r3, r3
   15268:	4618      	mov	r0, r3
   1526a:	f002 ff8d 	bl	18188 <__aeabi_i2f>
   1526e:	4602      	mov	r2, r0
   15270:	f24b 43e0 	movw	r3, #46304	; 0xb4e0
   15274:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15278:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   1527a:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
   1527e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15282:	68fa      	ldr	r2, [r7, #12]
   15284:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   15286:	68f8      	ldr	r0, [r7, #12]
   15288:	f04f 0100 	mov.w	r1, #0
   1528c:	f003 f96e 	bl	1856c <__aeabi_fcmplt>
   15290:	4603      	mov	r3, r0
   15292:	2b00      	cmp	r3, #0
   15294:	d003      	beq.n	1529e <estimator_update_ir_estim+0x222>
   15296:	68fb      	ldr	r3, [r7, #12]
   15298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   1529c:	e000      	b.n	152a0 <estimator_update_ir_estim+0x224>
   1529e:	68fb      	ldr	r3, [r7, #12]
   152a0:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   152a2:	6878      	ldr	r0, [r7, #4]
   152a4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   152a8:	f003 f960 	bl	1856c <__aeabi_fcmplt>
   152ac:	4603      	mov	r3, r0
   152ae:	2b00      	cmp	r3, #0
   152b0:	d100      	bne.n	152b4 <estimator_update_ir_estim+0x238>
   152b2:	e128      	b.n	15506 <estimator_update_ir_estim+0x48a>
   152b4:	6878      	ldr	r0, [r7, #4]
   152b6:	f002 fb27 	bl	17908 <__aeabi_f2d>
   152ba:	4602      	mov	r2, r0
   152bc:	460b      	mov	r3, r1
   152be:	4610      	mov	r0, r2
   152c0:	4619      	mov	r1, r3
   152c2:	a30f      	add	r3, pc, #60	; (adr r3, 15300 <estimator_update_ir_estim+0x284>)
   152c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   152c8:	f002 fe02 	bl	17ed0 <__aeabi_dcmpgt>
   152cc:	4603      	mov	r3, r0
   152ce:	2b00      	cmp	r3, #0
   152d0:	d11a      	bne.n	15308 <estimator_update_ir_estim+0x28c>
   152d2:	e118      	b.n	15506 <estimator_update_ir_estim+0x48a>
   152d4:	f3af 8000 	nop.w
   152d8:	9999999a 	.word	0x9999999a
   152dc:	3fb99999 	.word	0x3fb99999
   152e0:	54442d18 	.word	0x54442d18
   152e4:	401921fb 	.word	0x401921fb
   152e8:	54442d18 	.word	0x54442d18
   152ec:	400921fb 	.word	0x400921fb
   152f0:	54442d18 	.word	0x54442d18
   152f4:	c00921fb 	.word	0xc00921fb
   152f8:	51eb851f 	.word	0x51eb851f
   152fc:	40239eb8 	.word	0x40239eb8
   15300:	9999999a 	.word	0x9999999a
   15304:	3fa99999 	.word	0x3fa99999
   15308:	f240 33f0 	movw	r3, #1008	; 0x3f0
   1530c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15310:	881b      	ldrh	r3, [r3, #0]
   15312:	b21b      	sxth	r3, r3
   15314:	425b      	negs	r3, r3
   15316:	0fda      	lsrs	r2, r3, #31
   15318:	4413      	add	r3, r2
   1531a:	105b      	asrs	r3, r3, #1
   1531c:	461a      	mov	r2, r3
   1531e:	f24b 1388 	movw	r3, #45448	; 0xb188
   15322:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15326:	881b      	ldrh	r3, [r3, #0]
   15328:	b21b      	sxth	r3, r3
   1532a:	429a      	cmp	r2, r3
   1532c:	f280 8098 	bge.w	15460 <estimator_update_ir_estim+0x3e4>
   15330:	f240 33f0 	movw	r3, #1008	; 0x3f0
   15334:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15338:	881b      	ldrh	r3, [r3, #0]
   1533a:	b21b      	sxth	r3, r3
   1533c:	0fda      	lsrs	r2, r3, #31
   1533e:	4413      	add	r3, r2
   15340:	105b      	asrs	r3, r3, #1
   15342:	b29a      	uxth	r2, r3
   15344:	f24b 1388 	movw	r3, #45448	; 0xb188
   15348:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1534c:	881b      	ldrh	r3, [r3, #0]
   1534e:	b212      	sxth	r2, r2
   15350:	b21b      	sxth	r3, r3
   15352:	429a      	cmp	r2, r3
   15354:	f340 8084 	ble.w	15460 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   15358:	f24b 43e4 	movw	r3, #46308	; 0xb4e4
   1535c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15360:	681a      	ldr	r2, [r3, #0]
   15362:	f24b 43e0 	movw	r3, #46304	; 0xb4e0
   15366:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1536a:	681b      	ldr	r3, [r3, #0]
   1536c:	4610      	mov	r0, r2
   1536e:	4619      	mov	r1, r3
   15370:	f002 ff5e 	bl	18230 <__aeabi_fmul>
   15374:	4603      	mov	r3, r0
   15376:	4618      	mov	r0, r3
   15378:	f002 fac6 	bl	17908 <__aeabi_f2d>
   1537c:	4604      	mov	r4, r0
   1537e:	460d      	mov	r5, r1
   15380:	f24b 43f4 	movw	r3, #46324	; 0xb4f4
   15384:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15388:	681b      	ldr	r3, [r3, #0]
   1538a:	4618      	mov	r0, r3
   1538c:	f002 fabc 	bl	17908 <__aeabi_f2d>
   15390:	4602      	mov	r2, r0
   15392:	460b      	mov	r3, r1
   15394:	4610      	mov	r0, r2
   15396:	4619      	mov	r1, r3
   15398:	a367      	add	r3, pc, #412	; (adr r3, 15538 <estimator_update_ir_estim+0x4bc>)
   1539a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1539e:	f002 fb07 	bl	179b0 <__aeabi_dmul>
   153a2:	4602      	mov	r2, r0
   153a4:	460b      	mov	r3, r1
   153a6:	4620      	mov	r0, r4
   153a8:	4629      	mov	r1, r5
   153aa:	f002 f94f 	bl	1764c <__adddf3>
   153ae:	4602      	mov	r2, r0
   153b0:	460b      	mov	r3, r1
   153b2:	4610      	mov	r0, r2
   153b4:	4619      	mov	r1, r3
   153b6:	f002 fddd 	bl	17f74 <__aeabi_d2f>
   153ba:	4602      	mov	r2, r0
   153bc:	f24b 43f4 	movw	r3, #46324	; 0xb4f4
   153c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153c4:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   153c6:	f24b 43e0 	movw	r3, #46304	; 0xb4e0
   153ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153ce:	681a      	ldr	r2, [r3, #0]
   153d0:	f24b 43e0 	movw	r3, #46304	; 0xb4e0
   153d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153d8:	681b      	ldr	r3, [r3, #0]
   153da:	4610      	mov	r0, r2
   153dc:	4619      	mov	r1, r3
   153de:	f002 ff27 	bl	18230 <__aeabi_fmul>
   153e2:	4603      	mov	r3, r0
   153e4:	4618      	mov	r0, r3
   153e6:	f002 fa8f 	bl	17908 <__aeabi_f2d>
   153ea:	4604      	mov	r4, r0
   153ec:	460d      	mov	r5, r1
   153ee:	f24b 43f8 	movw	r3, #46328	; 0xb4f8
   153f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153f6:	681b      	ldr	r3, [r3, #0]
   153f8:	4618      	mov	r0, r3
   153fa:	f002 fa85 	bl	17908 <__aeabi_f2d>
   153fe:	4602      	mov	r2, r0
   15400:	460b      	mov	r3, r1
   15402:	4610      	mov	r0, r2
   15404:	4619      	mov	r1, r3
   15406:	a34c      	add	r3, pc, #304	; (adr r3, 15538 <estimator_update_ir_estim+0x4bc>)
   15408:	e9d3 2300 	ldrd	r2, r3, [r3]
   1540c:	f002 fad0 	bl	179b0 <__aeabi_dmul>
   15410:	4602      	mov	r2, r0
   15412:	460b      	mov	r3, r1
   15414:	4620      	mov	r0, r4
   15416:	4629      	mov	r1, r5
   15418:	f002 f918 	bl	1764c <__adddf3>
   1541c:	4602      	mov	r2, r0
   1541e:	460b      	mov	r3, r1
   15420:	4610      	mov	r0, r2
   15422:	4619      	mov	r1, r3
   15424:	f002 fda6 	bl	17f74 <__aeabi_d2f>
   15428:	4602      	mov	r2, r0
   1542a:	f24b 43f8 	movw	r3, #46328	; 0xb4f8
   1542e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15432:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   15434:	f24b 43f4 	movw	r3, #46324	; 0xb4f4
   15438:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1543c:	681a      	ldr	r2, [r3, #0]
   1543e:	f24b 43f8 	movw	r3, #46328	; 0xb4f8
   15442:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15446:	681b      	ldr	r3, [r3, #0]
   15448:	4610      	mov	r0, r2
   1544a:	4619      	mov	r1, r3
   1544c:	f002 ffa4 	bl	18398 <__aeabi_fdiv>
   15450:	4603      	mov	r3, r0
   15452:	461a      	mov	r2, r3
   15454:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
   15458:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1545c:	601a      	str	r2, [r3, #0]
   1545e:	e052      	b.n	15506 <estimator_update_ir_estim+0x48a>
   15460:	e051      	b.n	15506 <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   15462:	f24b 43e8 	movw	r3, #46312	; 0xb4e8
   15466:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1546a:	2201      	movs	r2, #1
   1546c:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   1546e:	f240 33f0 	movw	r3, #1008	; 0x3f0
   15472:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15476:	881b      	ldrh	r3, [r3, #0]
   15478:	b21b      	sxth	r3, r3
   1547a:	4618      	mov	r0, r3
   1547c:	f002 fe84 	bl	18188 <__aeabi_i2f>
   15480:	4603      	mov	r3, r0
   15482:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   15484:	6838      	ldr	r0, [r7, #0]
   15486:	6839      	ldr	r1, [r7, #0]
   15488:	f002 fed2 	bl	18230 <__aeabi_fmul>
   1548c:	4603      	mov	r3, r0
   1548e:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   15490:	f24b 43dc 	movw	r3, #46300	; 0xb4dc
   15494:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15498:	681b      	ldr	r3, [r3, #0]
   1549a:	4618      	mov	r0, r3
   1549c:	f002 fa34 	bl	17908 <__aeabi_f2d>
   154a0:	4602      	mov	r2, r0
   154a2:	460b      	mov	r3, r1
   154a4:	4610      	mov	r0, r2
   154a6:	4619      	mov	r1, r3
   154a8:	f04f 0200 	mov.w	r2, #0
   154ac:	f04f 0300 	mov.w	r3, #0
   154b0:	f2c4 0359 	movt	r3, #16473	; 0x4059
   154b4:	f002 fa7c 	bl	179b0 <__aeabi_dmul>
   154b8:	4602      	mov	r2, r0
   154ba:	460b      	mov	r3, r1
   154bc:	4614      	mov	r4, r2
   154be:	461d      	mov	r5, r3
   154c0:	6838      	ldr	r0, [r7, #0]
   154c2:	f002 fa21 	bl	17908 <__aeabi_f2d>
   154c6:	4602      	mov	r2, r0
   154c8:	460b      	mov	r3, r1
   154ca:	4620      	mov	r0, r4
   154cc:	4629      	mov	r1, r5
   154ce:	f002 fa6f 	bl	179b0 <__aeabi_dmul>
   154d2:	4602      	mov	r2, r0
   154d4:	460b      	mov	r3, r1
   154d6:	4610      	mov	r0, r2
   154d8:	4619      	mov	r1, r3
   154da:	f002 fd4b 	bl	17f74 <__aeabi_d2f>
   154de:	4602      	mov	r2, r0
   154e0:	f24b 43f4 	movw	r3, #46324	; 0xb4f4
   154e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154e8:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   154ea:	6838      	ldr	r0, [r7, #0]
   154ec:	f04f 0100 	mov.w	r1, #0
   154f0:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   154f4:	f002 fe9c 	bl	18230 <__aeabi_fmul>
   154f8:	4603      	mov	r3, r0
   154fa:	461a      	mov	r2, r3
   154fc:	f24b 43f8 	movw	r3, #46328	; 0xb4f8
   15500:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15504:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   15506:	f24b 43d8 	movw	r3, #46296	; 0xb4d8
   1550a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1550e:	681a      	ldr	r2, [r3, #0]
   15510:	f24b 43f0 	movw	r3, #46320	; 0xb4f0
   15514:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15518:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   1551a:	f24b 0358 	movw	r3, #45144	; 0xb058
   1551e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15522:	681a      	ldr	r2, [r3, #0]
   15524:	f24b 43ec 	movw	r3, #46316	; 0xb4ec
   15528:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1552c:	601a      	str	r2, [r3, #0]
}
   1552e:	3710      	adds	r7, #16
   15530:	46bd      	mov	sp, r7
   15532:	bdb0      	pop	{r4, r5, r7, pc}
   15534:	f3af 8000 	nop.w
   15538:	d916872b 	.word	0xd916872b
   1553c:	3feff7ce 	.word	0x3feff7ce

00015540 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   15540:	b580      	push	{r7, lr}
   15542:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   15544:	f24b 037c 	movw	r3, #45180	; 0xb07c
   15548:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1554c:	781b      	ldrb	r3, [r3, #0]
   1554e:	f003 0320 	and.w	r3, r3, #32
   15552:	2b00      	cmp	r3, #0
   15554:	d044      	beq.n	155e0 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   15556:	f24b 0374 	movw	r3, #45172	; 0xb074
   1555a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1555e:	681a      	ldr	r2, [r3, #0]
   15560:	f24b 439c 	movw	r3, #46236	; 0xb49c
   15564:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15568:	601a      	str	r2, [r3, #0]
   1556a:	f24b 0378 	movw	r3, #45176	; 0xb078
   1556e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15572:	681a      	ldr	r2, [r3, #0]
   15574:	f24b 43a0 	movw	r3, #46240	; 0xb4a0
   15578:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1557c:	601a      	str	r2, [r3, #0]
   1557e:	f24b 035c 	movw	r3, #45148	; 0xb05c
   15582:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15586:	681a      	ldr	r2, [r3, #0]
   15588:	f24b 43a4 	movw	r3, #46244	; 0xb4a4
   1558c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15590:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   15592:	f24b 0360 	movw	r3, #45152	; 0xb060
   15596:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1559a:	681a      	ldr	r2, [r3, #0]
   1559c:	f24b 43d4 	movw	r3, #46292	; 0xb4d4
   155a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155a4:	601a      	str	r2, [r3, #0]
   155a6:	f24b 0368 	movw	r3, #45160	; 0xb068
   155aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155ae:	681a      	ldr	r2, [r3, #0]
   155b0:	f24b 43d8 	movw	r3, #46296	; 0xb4d8
   155b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155b8:	601a      	str	r2, [r3, #0]
   155ba:	f24b 0364 	movw	r3, #45156	; 0xb064
   155be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155c2:	681a      	ldr	r2, [r3, #0]
   155c4:	f24b 43bc 	movw	r3, #46268	; 0xb4bc
   155c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155cc:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   155ce:	f24b 43cc 	movw	r3, #46284	; 0xb4cc
   155d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   155d6:	881b      	ldrh	r3, [r3, #0]
   155d8:	2b00      	cmp	r3, #0
   155da:	d001      	beq.n	155e0 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   155dc:	f7ff fd4e 	bl	1507c <estimator_update_ir_estim>
  }
}
   155e0:	bd80      	pop	{r7, pc}
   155e2:	bf00      	nop

000155e4 <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   155e4:	b480      	push	{r7}
   155e6:	af00      	add	r7, sp, #0
  
}
   155e8:	46bd      	mov	sp, r7
   155ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   155ee:	4770      	bx	lr

000155f0 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   155f0:	b5b0      	push	{r4, r5, r7, lr}
   155f2:	b082      	sub	sp, #8
   155f4:	af00      	add	r7, sp, #0
   155f6:	4603      	mov	r3, r0
   155f8:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   155fa:	f64a 63cc 	movw	r3, #44748	; 0xaecc
   155fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15602:	781b      	ldrb	r3, [r3, #0]
   15604:	2b01      	cmp	r3, #1
   15606:	f040 80e0 	bne.w	157ca <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   1560a:	f24b 43fc 	movw	r3, #46332	; 0xb4fc
   1560e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15612:	781b      	ldrb	r3, [r3, #0]
   15614:	2b02      	cmp	r3, #2
   15616:	d168      	bne.n	156ea <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   15618:	79fb      	ldrb	r3, [r7, #7]
   1561a:	2b00      	cmp	r3, #0
   1561c:	d013      	beq.n	15646 <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   1561e:	f240 33f4 	movw	r3, #1012	; 0x3f4
   15622:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15626:	881a      	ldrh	r2, [r3, #0]
   15628:	f24b 5302 	movw	r3, #46338	; 0xb502
   1562c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15630:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   15632:	f64a 73f0 	movw	r3, #45040	; 0xaff0
   15636:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1563a:	895a      	ldrh	r2, [r3, #10]
   1563c:	f24b 43fe 	movw	r3, #46334	; 0xb4fe
   15640:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15644:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   15646:	f64a 73f0 	movw	r3, #45040	; 0xaff0
   1564a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1564e:	895b      	ldrh	r3, [r3, #10]
   15650:	b21a      	sxth	r2, r3
   15652:	f24b 43fe 	movw	r3, #46334	; 0xb4fe
   15656:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1565a:	881b      	ldrh	r3, [r3, #0]
   1565c:	b21b      	sxth	r3, r3
   1565e:	1ad3      	subs	r3, r2, r3
   15660:	4618      	mov	r0, r3
   15662:	f002 fd91 	bl	18188 <__aeabi_i2f>
   15666:	4603      	mov	r3, r0
   15668:	4618      	mov	r0, r3
   1566a:	f002 f94d 	bl	17908 <__aeabi_f2d>
   1566e:	4602      	mov	r2, r0
   15670:	460b      	mov	r3, r1
   15672:	4610      	mov	r0, r2
   15674:	4619      	mov	r1, r3
   15676:	f04f 0200 	mov.w	r2, #0
   1567a:	f04f 0300 	mov.w	r3, #0
   1567e:	f2c4 034e 	movt	r3, #16462	; 0x404e
   15682:	f002 f995 	bl	179b0 <__aeabi_dmul>
   15686:	4602      	mov	r2, r0
   15688:	460b      	mov	r3, r1
   1568a:	4610      	mov	r0, r2
   1568c:	4619      	mov	r1, r3
   1568e:	f04f 0200 	mov.w	r2, #0
   15692:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15696:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   1569a:	f002 fab3 	bl	17c04 <__aeabi_ddiv>
   1569e:	4602      	mov	r2, r0
   156a0:	460b      	mov	r3, r1
   156a2:	4610      	mov	r0, r2
   156a4:	4619      	mov	r1, r3
   156a6:	f002 fc1d 	bl	17ee4 <__aeabi_d2iz>
   156aa:	4603      	mov	r3, r0
   156ac:	b29b      	uxth	r3, r3
   156ae:	b29a      	uxth	r2, r3
   156b0:	f24b 5302 	movw	r3, #46338	; 0xb502
   156b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156b8:	881b      	ldrh	r3, [r3, #0]
   156ba:	b29b      	uxth	r3, r3
   156bc:	4413      	add	r3, r2
   156be:	b29b      	uxth	r3, r3
   156c0:	b29a      	uxth	r2, r3
   156c2:	f240 33f4 	movw	r3, #1012	; 0x3f4
   156c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156ca:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   156cc:	f240 33f4 	movw	r3, #1012	; 0x3f4
   156d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156d4:	881b      	ldrh	r3, [r3, #0]
   156d6:	b21b      	sxth	r3, r3
   156d8:	4618      	mov	r0, r3
   156da:	f002 fd55 	bl	18188 <__aeabi_i2f>
   156de:	4602      	mov	r2, r0
   156e0:	f64a 63d8 	movw	r3, #44760	; 0xaed8
   156e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156e8:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   156ea:	f24b 43fc 	movw	r3, #46332	; 0xb4fc
   156ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156f2:	781b      	ldrb	r3, [r3, #0]
   156f4:	2b02      	cmp	r3, #2
   156f6:	d168      	bne.n	157ca <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   156f8:	79fb      	ldrb	r3, [r7, #7]
   156fa:	2b00      	cmp	r3, #0
   156fc:	d013      	beq.n	15726 <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   156fe:	f240 33f2 	movw	r3, #1010	; 0x3f2
   15702:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15706:	881a      	ldrh	r2, [r3, #0]
   15708:	f24b 5304 	movw	r3, #46340	; 0xb504
   1570c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15710:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   15712:	f64a 73f0 	movw	r3, #45040	; 0xaff0
   15716:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1571a:	899a      	ldrh	r2, [r3, #12]
   1571c:	f24b 5300 	movw	r3, #46336	; 0xb500
   15720:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15724:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   15726:	f64a 73f0 	movw	r3, #45040	; 0xaff0
   1572a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1572e:	899b      	ldrh	r3, [r3, #12]
   15730:	b21a      	sxth	r2, r3
   15732:	f24b 5300 	movw	r3, #46336	; 0xb500
   15736:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1573a:	881b      	ldrh	r3, [r3, #0]
   1573c:	b21b      	sxth	r3, r3
   1573e:	1ad3      	subs	r3, r2, r3
   15740:	4618      	mov	r0, r3
   15742:	f002 fd21 	bl	18188 <__aeabi_i2f>
   15746:	4603      	mov	r3, r0
   15748:	4618      	mov	r0, r3
   1574a:	f002 f8dd 	bl	17908 <__aeabi_f2d>
   1574e:	4602      	mov	r2, r0
   15750:	460b      	mov	r3, r1
   15752:	4610      	mov	r0, r2
   15754:	4619      	mov	r1, r3
   15756:	f04f 0200 	mov.w	r2, #0
   1575a:	f04f 0300 	mov.w	r3, #0
   1575e:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   15762:	f002 f925 	bl	179b0 <__aeabi_dmul>
   15766:	4602      	mov	r2, r0
   15768:	460b      	mov	r3, r1
   1576a:	4610      	mov	r0, r2
   1576c:	4619      	mov	r1, r3
   1576e:	f04f 0200 	mov.w	r2, #0
   15772:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15776:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   1577a:	f002 fa43 	bl	17c04 <__aeabi_ddiv>
   1577e:	4602      	mov	r2, r0
   15780:	460b      	mov	r3, r1
   15782:	4610      	mov	r0, r2
   15784:	4619      	mov	r1, r3
   15786:	f002 fbad 	bl	17ee4 <__aeabi_d2iz>
   1578a:	4603      	mov	r3, r0
   1578c:	b29b      	uxth	r3, r3
   1578e:	b29a      	uxth	r2, r3
   15790:	f24b 5304 	movw	r3, #46340	; 0xb504
   15794:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15798:	881b      	ldrh	r3, [r3, #0]
   1579a:	b29b      	uxth	r3, r3
   1579c:	4413      	add	r3, r2
   1579e:	b29b      	uxth	r3, r3
   157a0:	b29a      	uxth	r2, r3
   157a2:	f240 33f2 	movw	r3, #1010	; 0x3f2
   157a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157aa:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   157ac:	f240 33f2 	movw	r3, #1010	; 0x3f2
   157b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157b4:	881b      	ldrh	r3, [r3, #0]
   157b6:	b21b      	sxth	r3, r3
   157b8:	4618      	mov	r0, r3
   157ba:	f002 fce5 	bl	18188 <__aeabi_i2f>
   157be:	4602      	mov	r2, r0
   157c0:	f64a 63dc 	movw	r3, #44764	; 0xaedc
   157c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157c8:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   157ca:	f64a 63cc 	movw	r3, #44748	; 0xaecc
   157ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157d2:	781b      	ldrb	r3, [r3, #0]
   157d4:	2b02      	cmp	r3, #2
   157d6:	f040 80da 	bne.w	1598e <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   157da:	f24b 43fc 	movw	r3, #46332	; 0xb4fc
   157de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157e2:	781b      	ldrb	r3, [r3, #0]
   157e4:	2b02      	cmp	r3, #2
   157e6:	d165      	bne.n	158b4 <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   157e8:	79fb      	ldrb	r3, [r7, #7]
   157ea:	2b00      	cmp	r3, #0
   157ec:	d013      	beq.n	15816 <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   157ee:	f240 4308 	movw	r3, #1032	; 0x408
   157f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157f6:	681a      	ldr	r2, [r3, #0]
   157f8:	f24b 5308 	movw	r3, #46344	; 0xb508
   157fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15800:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   15802:	f64a 73f0 	movw	r3, #45040	; 0xaff0
   15806:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1580a:	895a      	ldrh	r2, [r3, #10]
   1580c:	f24b 43fe 	movw	r3, #46334	; 0xb4fe
   15810:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15814:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   15816:	f24b 5308 	movw	r3, #46344	; 0xb508
   1581a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1581e:	681b      	ldr	r3, [r3, #0]
   15820:	4618      	mov	r0, r3
   15822:	f002 f871 	bl	17908 <__aeabi_f2d>
   15826:	4604      	mov	r4, r0
   15828:	460d      	mov	r5, r1
   1582a:	f64a 73f0 	movw	r3, #45040	; 0xaff0
   1582e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15832:	895b      	ldrh	r3, [r3, #10]
   15834:	b21a      	sxth	r2, r3
   15836:	f24b 43fe 	movw	r3, #46334	; 0xb4fe
   1583a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1583e:	881b      	ldrh	r3, [r3, #0]
   15840:	b21b      	sxth	r3, r3
   15842:	1ad3      	subs	r3, r2, r3
   15844:	4618      	mov	r0, r3
   15846:	f002 fc9f 	bl	18188 <__aeabi_i2f>
   1584a:	4603      	mov	r3, r0
   1584c:	4618      	mov	r0, r3
   1584e:	f002 f85b 	bl	17908 <__aeabi_f2d>
   15852:	4602      	mov	r2, r0
   15854:	460b      	mov	r3, r1
   15856:	4610      	mov	r0, r2
   15858:	4619      	mov	r1, r3
   1585a:	a34f      	add	r3, pc, #316	; (adr r3, 15998 <inflight_calib+0x3a8>)
   1585c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15860:	f002 f8a6 	bl	179b0 <__aeabi_dmul>
   15864:	4602      	mov	r2, r0
   15866:	460b      	mov	r3, r1
   15868:	4610      	mov	r0, r2
   1586a:	4619      	mov	r1, r3
   1586c:	f04f 0200 	mov.w	r2, #0
   15870:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15874:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15878:	f002 f9c4 	bl	17c04 <__aeabi_ddiv>
   1587c:	4602      	mov	r2, r0
   1587e:	460b      	mov	r3, r1
   15880:	4620      	mov	r0, r4
   15882:	4629      	mov	r1, r5
   15884:	f001 fee2 	bl	1764c <__adddf3>
   15888:	4602      	mov	r2, r0
   1588a:	460b      	mov	r3, r1
   1588c:	4610      	mov	r0, r2
   1588e:	4619      	mov	r1, r3
   15890:	f002 fb70 	bl	17f74 <__aeabi_d2f>
   15894:	4602      	mov	r2, r0
   15896:	f240 4308 	movw	r3, #1032	; 0x408
   1589a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1589e:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   158a0:	f240 4308 	movw	r3, #1032	; 0x408
   158a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158a8:	681a      	ldr	r2, [r3, #0]
   158aa:	f64a 63d8 	movw	r3, #44760	; 0xaed8
   158ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158b2:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   158b4:	f24b 43fc 	movw	r3, #46332	; 0xb4fc
   158b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158bc:	781b      	ldrb	r3, [r3, #0]
   158be:	2b02      	cmp	r3, #2
   158c0:	d165      	bne.n	1598e <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   158c2:	79fb      	ldrb	r3, [r7, #7]
   158c4:	2b00      	cmp	r3, #0
   158c6:	d013      	beq.n	158f0 <inflight_calib+0x300>
        max_roll_init = max_roll;
   158c8:	f240 430c 	movw	r3, #1036	; 0x40c
   158cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158d0:	681a      	ldr	r2, [r3, #0]
   158d2:	f24b 530c 	movw	r3, #46348	; 0xb50c
   158d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158da:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   158dc:	f64a 73f0 	movw	r3, #45040	; 0xaff0
   158e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158e4:	899a      	ldrh	r2, [r3, #12]
   158e6:	f24b 5300 	movw	r3, #46336	; 0xb500
   158ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158ee:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   158f0:	f24b 530c 	movw	r3, #46348	; 0xb50c
   158f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158f8:	681b      	ldr	r3, [r3, #0]
   158fa:	4618      	mov	r0, r3
   158fc:	f002 f804 	bl	17908 <__aeabi_f2d>
   15900:	4604      	mov	r4, r0
   15902:	460d      	mov	r5, r1
   15904:	f64a 73f0 	movw	r3, #45040	; 0xaff0
   15908:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1590c:	899b      	ldrh	r3, [r3, #12]
   1590e:	b21a      	sxth	r2, r3
   15910:	f24b 5300 	movw	r3, #46336	; 0xb500
   15914:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15918:	881b      	ldrh	r3, [r3, #0]
   1591a:	b21b      	sxth	r3, r3
   1591c:	1ad3      	subs	r3, r2, r3
   1591e:	4618      	mov	r0, r3
   15920:	f002 fc32 	bl	18188 <__aeabi_i2f>
   15924:	4603      	mov	r3, r0
   15926:	4618      	mov	r0, r3
   15928:	f001 ffee 	bl	17908 <__aeabi_f2d>
   1592c:	4602      	mov	r2, r0
   1592e:	460b      	mov	r3, r1
   15930:	4610      	mov	r0, r2
   15932:	4619      	mov	r1, r3
   15934:	a31a      	add	r3, pc, #104	; (adr r3, 159a0 <inflight_calib+0x3b0>)
   15936:	e9d3 2300 	ldrd	r2, r3, [r3]
   1593a:	f002 f839 	bl	179b0 <__aeabi_dmul>
   1593e:	4602      	mov	r2, r0
   15940:	460b      	mov	r3, r1
   15942:	4610      	mov	r0, r2
   15944:	4619      	mov	r1, r3
   15946:	f04f 0200 	mov.w	r2, #0
   1594a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1594e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15952:	f002 f957 	bl	17c04 <__aeabi_ddiv>
   15956:	4602      	mov	r2, r0
   15958:	460b      	mov	r3, r1
   1595a:	4620      	mov	r0, r4
   1595c:	4629      	mov	r1, r5
   1595e:	f001 fe75 	bl	1764c <__adddf3>
   15962:	4602      	mov	r2, r0
   15964:	460b      	mov	r3, r1
   15966:	4610      	mov	r0, r2
   15968:	4619      	mov	r1, r3
   1596a:	f002 fb03 	bl	17f74 <__aeabi_d2f>
   1596e:	4602      	mov	r2, r0
   15970:	f240 430c 	movw	r3, #1036	; 0x40c
   15974:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15978:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   1597a:	f240 430c 	movw	r3, #1036	; 0x40c
   1597e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15982:	681a      	ldr	r2, [r3, #0]
   15984:	f64a 63dc 	movw	r3, #44764	; 0xaedc
   15988:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1598c:	601a      	str	r2, [r3, #0]
    }
  }
}
   1598e:	3708      	adds	r7, #8
   15990:	46bd      	mov	sp, r7
   15992:	bdb0      	pop	{r4, r5, r7, pc}
   15994:	f3af 8000 	nop.w
   15998:	9999999a 	.word	0x9999999a
   1599c:	3fb99999 	.word	0x3fb99999
   159a0:	9999999a 	.word	0x9999999a
   159a4:	bfc99999 	.word	0xbfc99999

000159a8 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   159a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   159ac:	b08e      	sub	sp, #56	; 0x38
   159ae:	af00      	add	r7, sp, #0
   159b0:	e9c7 0102 	strd	r0, r1, [r7, #8]
   159b4:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   159b8:	a357      	add	r3, pc, #348	; (adr r3, 15b18 <pp_atan2+0x170>)
   159ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   159be:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   159c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   159c6:	f04f 0200 	mov.w	r2, #0
   159ca:	f04f 0300 	mov.w	r3, #0
   159ce:	f2c4 0308 	movt	r3, #16392	; 0x4008
   159d2:	f001 ffed 	bl	179b0 <__aeabi_dmul>
   159d6:	4602      	mov	r2, r0
   159d8:	460b      	mov	r3, r1
   159da:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   159de:	e9d7 0100 	ldrd	r0, r1, [r7]
   159e2:	f04f 0200 	mov.w	r2, #0
   159e6:	f04f 0300 	mov.w	r3, #0
   159ea:	f002 fa53 	bl	17e94 <__aeabi_dcmplt>
   159ee:	4603      	mov	r3, r0
   159f0:	2b00      	cmp	r3, #0
   159f2:	d009      	beq.n	15a08 <pp_atan2+0x60>
   159f4:	a14a      	add	r1, pc, #296	; (adr r1, 15b20 <pp_atan2+0x178>)
   159f6:	e9d1 0100 	ldrd	r0, r1, [r1]
   159fa:	e9d7 2300 	ldrd	r2, r3, [r7]
   159fe:	f001 fe23 	bl	17648 <__aeabi_dsub>
   15a02:	4602      	mov	r2, r0
   15a04:	460b      	mov	r3, r1
   15a06:	e008      	b.n	15a1a <pp_atan2+0x72>
   15a08:	e9d7 0100 	ldrd	r0, r1, [r7]
   15a0c:	a344      	add	r3, pc, #272	; (adr r3, 15b20 <pp_atan2+0x178>)
   15a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15a12:	f001 fe1b 	bl	1764c <__adddf3>
   15a16:	4602      	mov	r2, r0
   15a18:	460b      	mov	r3, r1
   15a1a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   15a1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15a22:	f04f 0200 	mov.w	r2, #0
   15a26:	f04f 0300 	mov.w	r3, #0
   15a2a:	f002 fa51 	bl	17ed0 <__aeabi_dcmpgt>
   15a2e:	4603      	mov	r3, r0
   15a30:	2b00      	cmp	r3, #0
   15a32:	d02a      	beq.n	15a8a <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   15a34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15a38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15a3c:	f001 fe04 	bl	17648 <__aeabi_dsub>
   15a40:	4602      	mov	r2, r0
   15a42:	460b      	mov	r3, r1
   15a44:	4690      	mov	r8, r2
   15a46:	4699      	mov	r9, r3
   15a48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15a4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15a50:	f001 fdfc 	bl	1764c <__adddf3>
   15a54:	4602      	mov	r2, r0
   15a56:	460b      	mov	r3, r1
   15a58:	4640      	mov	r0, r8
   15a5a:	4649      	mov	r1, r9
   15a5c:	f002 f8d2 	bl	17c04 <__aeabi_ddiv>
   15a60:	4602      	mov	r2, r0
   15a62:	460b      	mov	r3, r1
   15a64:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   15a68:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15a6c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15a70:	f001 ff9e 	bl	179b0 <__aeabi_dmul>
   15a74:	4602      	mov	r2, r0
   15a76:	460b      	mov	r3, r1
   15a78:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15a7c:	f001 fde4 	bl	17648 <__aeabi_dsub>
   15a80:	4602      	mov	r2, r0
   15a82:	460b      	mov	r3, r1
   15a84:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   15a88:	e029      	b.n	15ade <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   15a8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15a8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15a92:	f001 fddb 	bl	1764c <__adddf3>
   15a96:	4602      	mov	r2, r0
   15a98:	460b      	mov	r3, r1
   15a9a:	4690      	mov	r8, r2
   15a9c:	4699      	mov	r9, r3
   15a9e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15aa2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   15aa6:	f001 fdcf 	bl	17648 <__aeabi_dsub>
   15aaa:	4602      	mov	r2, r0
   15aac:	460b      	mov	r3, r1
   15aae:	4640      	mov	r0, r8
   15ab0:	4649      	mov	r1, r9
   15ab2:	f002 f8a7 	bl	17c04 <__aeabi_ddiv>
   15ab6:	4602      	mov	r2, r0
   15ab8:	460b      	mov	r3, r1
   15aba:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   15abe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15ac2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15ac6:	f001 ff73 	bl	179b0 <__aeabi_dmul>
   15aca:	4602      	mov	r2, r0
   15acc:	460b      	mov	r3, r1
   15ace:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   15ad2:	f001 fdb9 	bl	17648 <__aeabi_dsub>
   15ad6:	4602      	mov	r2, r0
   15ad8:	460b      	mov	r3, r1
   15ada:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   15ade:	e9d7 0100 	ldrd	r0, r1, [r7]
   15ae2:	f04f 0200 	mov.w	r2, #0
   15ae6:	f04f 0300 	mov.w	r3, #0
   15aea:	f002 f9d3 	bl	17e94 <__aeabi_dcmplt>
   15aee:	4603      	mov	r3, r0
   15af0:	2b00      	cmp	r3, #0
   15af2:	d004      	beq.n	15afe <pp_atan2+0x156>
		return (-angle);
   15af4:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   15af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15af8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15afc:	e001      	b.n	15b02 <pp_atan2+0x15a>
	else
		return angle;
   15afe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   15b02:	4622      	mov	r2, r4
   15b04:	462b      	mov	r3, r5
}
   15b06:	4610      	mov	r0, r2
   15b08:	4619      	mov	r1, r3
   15b0a:	3738      	adds	r7, #56	; 0x38
   15b0c:	46bd      	mov	sp, r7
   15b0e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   15b12:	bf00      	nop
   15b14:	f3af 8000 	nop.w
   15b18:	54442d18 	.word	0x54442d18
   15b1c:	3fe921fb 	.word	0x3fe921fb
   15b20:	d9d7bdbb 	.word	0xd9d7bdbb
   15b24:	3ddb7cdf 	.word	0x3ddb7cdf

00015b28 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   15b28:	b5b0      	push	{r4, r5, r7, lr}
   15b2a:	b08c      	sub	sp, #48	; 0x30
   15b2c:	af00      	add	r7, sp, #0
   15b2e:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   15b32:	e9d7 2300 	ldrd	r2, r3, [r7]
   15b36:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15b3a:	2301      	movs	r3, #1
   15b3c:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   15b3e:	e00a      	b.n	15b56 <pp_sin+0x2e>
   15b40:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15b44:	a35a      	add	r3, pc, #360	; (adr r3, 15cb0 <pp_sin+0x188>)
   15b46:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b4a:	f001 fd7f 	bl	1764c <__adddf3>
   15b4e:	4602      	mov	r2, r0
   15b50:	460b      	mov	r3, r1
   15b52:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15b56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15b5a:	a357      	add	r3, pc, #348	; (adr r3, 15cb8 <pp_sin+0x190>)
   15b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b60:	f002 f998 	bl	17e94 <__aeabi_dcmplt>
   15b64:	4603      	mov	r3, r0
   15b66:	2b00      	cmp	r3, #0
   15b68:	d1ea      	bne.n	15b40 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   15b6a:	e00a      	b.n	15b82 <pp_sin+0x5a>
   15b6c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15b70:	a34f      	add	r3, pc, #316	; (adr r3, 15cb0 <pp_sin+0x188>)
   15b72:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b76:	f001 fd67 	bl	17648 <__aeabi_dsub>
   15b7a:	4602      	mov	r2, r0
   15b7c:	460b      	mov	r3, r1
   15b7e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15b82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15b86:	a34e      	add	r3, pc, #312	; (adr r3, 15cc0 <pp_sin+0x198>)
   15b88:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b8c:	f002 f9a0 	bl	17ed0 <__aeabi_dcmpgt>
   15b90:	4603      	mov	r3, r0
   15b92:	2b00      	cmp	r3, #0
   15b94:	d1ea      	bne.n	15b6c <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   15b96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15b9a:	a34b      	add	r3, pc, #300	; (adr r3, 15cc8 <pp_sin+0x1a0>)
   15b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ba0:	f002 f996 	bl	17ed0 <__aeabi_dcmpgt>
   15ba4:	4603      	mov	r3, r0
   15ba6:	2b00      	cmp	r3, #0
   15ba8:	d00d      	beq.n	15bc6 <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   15baa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15bae:	a348      	add	r3, pc, #288	; (adr r3, 15cd0 <pp_sin+0x1a8>)
   15bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   15bb4:	f001 fd48 	bl	17648 <__aeabi_dsub>
   15bb8:	4602      	mov	r2, r0
   15bba:	460b      	mov	r3, r1
   15bbc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   15bc0:	f04f 33ff 	mov.w	r3, #4294967295
   15bc4:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   15bc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15bca:	a343      	add	r3, pc, #268	; (adr r3, 15cd8 <pp_sin+0x1b0>)
   15bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
   15bd0:	f002 f818 	bl	17c04 <__aeabi_ddiv>
   15bd4:	4602      	mov	r2, r0
   15bd6:	460b      	mov	r3, r1
   15bd8:	e9c7 2306 	strd	r2, r3, [r7, #24]
   15bdc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15be0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15be4:	f001 fee4 	bl	179b0 <__aeabi_dmul>
   15be8:	4602      	mov	r2, r0
   15bea:	460b      	mov	r3, r1
   15bec:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   15bf0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   15bf4:	a33a      	add	r3, pc, #232	; (adr r3, 15ce0 <pp_sin+0x1b8>)
   15bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
   15bfa:	f001 fed9 	bl	179b0 <__aeabi_dmul>
   15bfe:	4602      	mov	r2, r0
   15c00:	460b      	mov	r3, r1
	      - .00467376557) * q2
   15c02:	4610      	mov	r0, r2
   15c04:	4619      	mov	r1, r3
   15c06:	a338      	add	r3, pc, #224	; (adr r3, 15ce8 <pp_sin+0x1c0>)
   15c08:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c0c:	f001 fd1c 	bl	17648 <__aeabi_dsub>
   15c10:	4602      	mov	r2, r0
   15c12:	460b      	mov	r3, r1
   15c14:	4610      	mov	r0, r2
   15c16:	4619      	mov	r1, r3
   15c18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15c1c:	f001 fec8 	bl	179b0 <__aeabi_dmul>
   15c20:	4602      	mov	r2, r0
   15c22:	460b      	mov	r3, r1
	      + .07968967928) * q2
   15c24:	4610      	mov	r0, r2
   15c26:	4619      	mov	r1, r3
   15c28:	a331      	add	r3, pc, #196	; (adr r3, 15cf0 <pp_sin+0x1c8>)
   15c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c2e:	f001 fd0d 	bl	1764c <__adddf3>
   15c32:	4602      	mov	r2, r0
   15c34:	460b      	mov	r3, r1
   15c36:	4610      	mov	r0, r2
   15c38:	4619      	mov	r1, r3
   15c3a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15c3e:	f001 feb7 	bl	179b0 <__aeabi_dmul>
   15c42:	4602      	mov	r2, r0
   15c44:	460b      	mov	r3, r1
	      - .64596371106) * q2
   15c46:	4610      	mov	r0, r2
   15c48:	4619      	mov	r1, r3
   15c4a:	a32b      	add	r3, pc, #172	; (adr r3, 15cf8 <pp_sin+0x1d0>)
   15c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c50:	f001 fcfa 	bl	17648 <__aeabi_dsub>
   15c54:	4602      	mov	r2, r0
   15c56:	460b      	mov	r3, r1
   15c58:	4610      	mov	r0, r2
   15c5a:	4619      	mov	r1, r3
   15c5c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15c60:	f001 fea6 	bl	179b0 <__aeabi_dmul>
   15c64:	4602      	mov	r2, r0
   15c66:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   15c68:	4610      	mov	r0, r2
   15c6a:	4619      	mov	r1, r3
   15c6c:	a324      	add	r3, pc, #144	; (adr r3, 15d00 <pp_sin+0x1d8>)
   15c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c72:	f001 fceb 	bl	1764c <__adddf3>
   15c76:	4602      	mov	r2, r0
   15c78:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   15c7a:	4610      	mov	r0, r2
   15c7c:	4619      	mov	r1, r3
   15c7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15c82:	f001 fe95 	bl	179b0 <__aeabi_dmul>
   15c86:	4602      	mov	r2, r0
   15c88:	460b      	mov	r3, r1
   15c8a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   15c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15c90:	2b00      	cmp	r3, #0
   15c92:	da04      	bge.n	15c9e <pp_sin+0x176>
   15c94:	68bc      	ldr	r4, [r7, #8]
   15c96:	68fb      	ldr	r3, [r7, #12]
   15c98:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15c9c:	e001      	b.n	15ca2 <pp_sin+0x17a>
   15c9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   15ca2:	4622      	mov	r2, r4
   15ca4:	462b      	mov	r3, r5
}
   15ca6:	4610      	mov	r0, r2
   15ca8:	4619      	mov	r1, r3
   15caa:	3730      	adds	r7, #48	; 0x30
   15cac:	46bd      	mov	sp, r7
   15cae:	bdb0      	pop	{r4, r5, r7, pc}
   15cb0:	54442d18 	.word	0x54442d18
   15cb4:	401921fb 	.word	0x401921fb
   15cb8:	54442d18 	.word	0x54442d18
   15cbc:	bff921fb 	.word	0xbff921fb
   15cc0:	7f3321d2 	.word	0x7f3321d2
   15cc4:	4012d97c 	.word	0x4012d97c
   15cc8:	54442d18 	.word	0x54442d18
   15ccc:	3ff921fb 	.word	0x3ff921fb
   15cd0:	54442d18 	.word	0x54442d18
   15cd4:	400921fb 	.word	0x400921fb
   15cd8:	5443d6f4 	.word	0x5443d6f4
   15cdc:	3ff921fb 	.word	0x3ff921fb
   15ce0:	48a890af 	.word	0x48a890af
   15ce4:	3f23daf7 	.word	0x3f23daf7
   15ce8:	645b6d0e 	.word	0x645b6d0e
   15cec:	3f7324cc 	.word	0x3f7324cc
   15cf0:	f65619a5 	.word	0xf65619a5
   15cf4:	3fb4668a 	.word	0x3fb4668a
   15cf8:	16acf9cd 	.word	0x16acf9cd
   15cfc:	3fe4abbc 	.word	0x3fe4abbc
   15d00:	520817f7 	.word	0x520817f7
   15d04:	3ff921fb 	.word	0x3ff921fb

00015d08 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   15d08:	b480      	push	{r7}
   15d0a:	b083      	sub	sp, #12
   15d0c:	af00      	add	r7, sp, #0
   15d0e:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   15d12:	4610      	mov	r0, r2
   15d14:	4619      	mov	r1, r3
   15d16:	370c      	adds	r7, #12
   15d18:	46bd      	mov	sp, r7
   15d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
   15d1e:	4770      	bx	lr

00015d20 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   15d20:	b480      	push	{r7}
   15d22:	b083      	sub	sp, #12
   15d24:	af00      	add	r7, sp, #0
   15d26:	4603      	mov	r3, r0
   15d28:	6039      	str	r1, [r7, #0]
   15d2a:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   15d2c:	79fa      	ldrb	r2, [r7, #7]
   15d2e:	f24b 5320 	movw	r3, #46368	; 0xb520
   15d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d36:	6839      	ldr	r1, [r7, #0]
   15d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   15d3c:	370c      	adds	r7, #12
   15d3e:	46bd      	mov	sp, r7
   15d40:	f85d 7b04 	ldr.w	r7, [sp], #4
   15d44:	4770      	bx	lr
   15d46:	bf00      	nop

00015d48 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   15d48:	b480      	push	{r7}
   15d4a:	b083      	sub	sp, #12
   15d4c:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   15d4e:	f242 0315 	movw	r3, #8213	; 0x2015
   15d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d56:	2200      	movs	r2, #0
   15d58:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   15d5a:	f242 0314 	movw	r3, #8212	; 0x2014
   15d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d62:	2200      	movs	r2, #0
   15d64:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   15d66:	f242 0307 	movw	r3, #8199	; 0x2007
   15d6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d6e:	22c0      	movs	r2, #192	; 0xc0
   15d70:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   15d72:	f242 0306 	movw	r3, #8198	; 0x2006
   15d76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d7a:	22cf      	movs	r2, #207	; 0xcf
   15d7c:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15d7e:	2300      	movs	r3, #0
   15d80:	71fb      	strb	r3, [r7, #7]
   15d82:	e00a      	b.n	15d9a <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   15d84:	79fa      	ldrb	r2, [r7, #7]
   15d86:	f24b 5320 	movw	r3, #46368	; 0xb520
   15d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d8e:	2100      	movs	r1, #0
   15d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15d94:	79fb      	ldrb	r3, [r7, #7]
   15d96:	3301      	adds	r3, #1
   15d98:	71fb      	strb	r3, [r7, #7]
   15d9a:	79fb      	ldrb	r3, [r7, #7]
   15d9c:	2b07      	cmp	r3, #7
   15d9e:	d9f1      	bls.n	15d84 <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   15da0:	370c      	adds	r7, #12
   15da2:	46bd      	mov	sp, r7
   15da4:	f85d 7b04 	ldr.w	r7, [sp], #4
   15da8:	4770      	bx	lr
   15daa:	bf00      	nop

00015dac <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   15dac:	b480      	push	{r7}
   15dae:	b083      	sub	sp, #12
   15db0:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   15db2:	f242 0326 	movw	r3, #8230	; 0x2026
   15db6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15dba:	881b      	ldrh	r3, [r3, #0]
   15dbc:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   15dbe:	f24b 537c 	movw	r3, #46460	; 0xb57c
   15dc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15dc6:	881b      	ldrh	r3, [r3, #0]
   15dc8:	88fa      	ldrh	r2, [r7, #6]
   15dca:	1ad3      	subs	r3, r2, r3
   15dcc:	80bb      	strh	r3, [r7, #4]
  last		= this;
   15dce:	f24b 537c 	movw	r3, #46460	; 0xb57c
   15dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15dd6:	88fa      	ldrh	r2, [r7, #6]
   15dd8:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   15dda:	f24b 537e 	movw	r3, #46462	; 0xb57e
   15dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15de2:	781b      	ldrb	r3, [r3, #0]
   15de4:	2b00      	cmp	r3, #0
   15de6:	d11e      	bne.n	15e26 <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   15de8:	f242 0324 	movw	r3, #8228	; 0x2024
   15dec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15df0:	781b      	ldrb	r3, [r3, #0]
   15df2:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   15df4:	f24b 537f 	movw	r3, #46463	; 0xb57f
   15df8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15dfc:	781b      	ldrb	r3, [r3, #0]
   15dfe:	78fa      	ldrb	r2, [r7, #3]
   15e00:	1ad3      	subs	r3, r2, r3
   15e02:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   15e04:	f24b 537f 	movw	r3, #46463	; 0xb57f
   15e08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e0c:	78fa      	ldrb	r2, [r7, #3]
   15e0e:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   15e10:	78bb      	ldrb	r3, [r7, #2]
   15e12:	2b6d      	cmp	r3, #109	; 0x6d
   15e14:	d906      	bls.n	15e24 <__vector_34+0x78>
      state = 1;
   15e16:	f24b 537e 	movw	r3, #46462	; 0xb57e
   15e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e1e:	2201      	movs	r2, #1
   15e20:	701a      	strb	r2, [r3, #0]
   15e22:	e053      	b.n	15ecc <__vector_34+0x120>
   15e24:	e052      	b.n	15ecc <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   15e26:	88bb      	ldrh	r3, [r7, #4]
   15e28:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   15e2c:	d304      	bcc.n	15e38 <__vector_34+0x8c>
   15e2e:	88ba      	ldrh	r2, [r7, #4]
   15e30:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   15e34:	429a      	cmp	r2, r3
   15e36:	d911      	bls.n	15e5c <__vector_34+0xb0>
      RestartPpmCycle();
   15e38:	f24b 537e 	movw	r3, #46462	; 0xb57e
   15e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e40:	2200      	movs	r2, #0
   15e42:	701a      	strb	r2, [r3, #0]
   15e44:	f242 0324 	movw	r3, #8228	; 0x2024
   15e48:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e4c:	781b      	ldrb	r3, [r3, #0]
   15e4e:	b2da      	uxtb	r2, r3
   15e50:	f24b 537f 	movw	r3, #46463	; 0xb57f
   15e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e58:	701a      	strb	r2, [r3, #0]
   15e5a:	e038      	b.n	15ece <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   15e5c:	f24b 537e 	movw	r3, #46462	; 0xb57e
   15e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e64:	781b      	ldrb	r3, [r3, #0]
   15e66:	1e5a      	subs	r2, r3, #1
   15e68:	f24b 5340 	movw	r3, #46400	; 0xb540
   15e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e70:	88b9      	ldrh	r1, [r7, #4]
   15e72:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   15e76:	f24b 537e 	movw	r3, #46462	; 0xb57e
   15e7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e7e:	781b      	ldrb	r3, [r3, #0]
   15e80:	2b08      	cmp	r3, #8
   15e82:	d917      	bls.n	15eb4 <__vector_34+0x108>
      ppm_valid	= 1;
   15e84:	f24b 537b 	movw	r3, #46459	; 0xb57b
   15e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e8c:	2201      	movs	r2, #1
   15e8e:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   15e90:	f24b 537e 	movw	r3, #46462	; 0xb57e
   15e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15e98:	2200      	movs	r2, #0
   15e9a:	701a      	strb	r2, [r3, #0]
   15e9c:	f242 0324 	movw	r3, #8228	; 0x2024
   15ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ea4:	781b      	ldrb	r3, [r3, #0]
   15ea6:	b2da      	uxtb	r2, r3
   15ea8:	f24b 537f 	movw	r3, #46463	; 0xb57f
   15eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15eb0:	701a      	strb	r2, [r3, #0]
   15eb2:	e00c      	b.n	15ece <__vector_34+0x122>
    } else 
      state++;
   15eb4:	f24b 537e 	movw	r3, #46462	; 0xb57e
   15eb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ebc:	781b      	ldrb	r3, [r3, #0]
   15ebe:	3301      	adds	r3, #1
   15ec0:	b2da      	uxtb	r2, r3
   15ec2:	f24b 537e 	movw	r3, #46462	; 0xb57e
   15ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15eca:	701a      	strb	r2, [r3, #0]
  }
  return;
   15ecc:	bf00      	nop
}
   15ece:	370c      	adds	r7, #12
   15ed0:	46bd      	mov	sp, r7
   15ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
   15ed6:	4770      	bx	lr

00015ed8 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   15ed8:	b590      	push	{r4, r7, lr}
   15eda:	b083      	sub	sp, #12
   15edc:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   15ede:	f24b 5340 	movw	r3, #46400	; 0xb540
   15ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ee6:	881b      	ldrh	r3, [r3, #0]
   15ee8:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   15eec:	b29b      	uxth	r3, r3
   15eee:	80fb      	strh	r3, [r7, #6]
   15ef0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15ef4:	4618      	mov	r0, r3
   15ef6:	f002 f947 	bl	18188 <__aeabi_i2f>
   15efa:	4603      	mov	r3, r0
   15efc:	4618      	mov	r0, r3
   15efe:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   15f02:	f002 f995 	bl	18230 <__aeabi_fmul>
   15f06:	4603      	mov	r3, r0
   15f08:	4618      	mov	r0, r3
   15f0a:	f002 fb57 	bl	185bc <__aeabi_f2iz>
   15f0e:	4603      	mov	r3, r0
   15f10:	b29a      	uxth	r2, r3
   15f12:	f24b 5354 	movw	r3, #46420	; 0xb554
   15f16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f1a:	801a      	strh	r2, [r3, #0]
   15f1c:	f24b 5354 	movw	r3, #46420	; 0xb554
   15f20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f24:	881b      	ldrh	r3, [r3, #0]
   15f26:	b21b      	sxth	r3, r3
   15f28:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15f2c:	dd07      	ble.n	15f3e <last_radio_from_ppm+0x66>
   15f2e:	f24b 5354 	movw	r3, #46420	; 0xb554
   15f32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f36:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15f3a:	801a      	strh	r2, [r3, #0]
   15f3c:	e00d      	b.n	15f5a <last_radio_from_ppm+0x82>
   15f3e:	f24b 5354 	movw	r3, #46420	; 0xb554
   15f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f46:	881b      	ldrh	r3, [r3, #0]
   15f48:	b21b      	sxth	r3, r3
   15f4a:	2b00      	cmp	r3, #0
   15f4c:	da05      	bge.n	15f5a <last_radio_from_ppm+0x82>
   15f4e:	f24b 5354 	movw	r3, #46420	; 0xb554
   15f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f56:	2200      	movs	r2, #0
   15f58:	801a      	strh	r2, [r3, #0]
   15f5a:	f24b 5340 	movw	r3, #46400	; 0xb540
   15f5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f62:	885b      	ldrh	r3, [r3, #2]
   15f64:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15f68:	b29b      	uxth	r3, r3
   15f6a:	80fb      	strh	r3, [r7, #6]
   15f6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15f70:	4618      	mov	r0, r3
   15f72:	f002 f909 	bl	18188 <__aeabi_i2f>
   15f76:	4603      	mov	r3, r0
   15f78:	4618      	mov	r0, r3
   15f7a:	f002 fb1f 	bl	185bc <__aeabi_f2iz>
   15f7e:	4603      	mov	r3, r0
   15f80:	b29a      	uxth	r2, r3
   15f82:	f24b 5354 	movw	r3, #46420	; 0xb554
   15f86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f8a:	805a      	strh	r2, [r3, #2]
   15f8c:	f24b 5354 	movw	r3, #46420	; 0xb554
   15f90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f94:	885b      	ldrh	r3, [r3, #2]
   15f96:	b21b      	sxth	r3, r3
   15f98:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15f9c:	dd07      	ble.n	15fae <last_radio_from_ppm+0xd6>
   15f9e:	f24b 5354 	movw	r3, #46420	; 0xb554
   15fa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fa6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   15faa:	805a      	strh	r2, [r3, #2]
   15fac:	e00f      	b.n	15fce <last_radio_from_ppm+0xf6>
   15fae:	f24b 5354 	movw	r3, #46420	; 0xb554
   15fb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fb6:	885b      	ldrh	r3, [r3, #2]
   15fb8:	b21b      	sxth	r3, r3
   15fba:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   15fbe:	da06      	bge.n	15fce <last_radio_from_ppm+0xf6>
   15fc0:	f24b 5354 	movw	r3, #46420	; 0xb554
   15fc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fc8:	f64d 2280 	movw	r2, #55936	; 0xda80
   15fcc:	805a      	strh	r2, [r3, #2]
   15fce:	f24b 5340 	movw	r3, #46400	; 0xb540
   15fd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fd6:	889b      	ldrh	r3, [r3, #4]
   15fd8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   15fdc:	b29b      	uxth	r3, r3
   15fde:	80fb      	strh	r3, [r7, #6]
   15fe0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   15fe4:	4618      	mov	r0, r3
   15fe6:	f002 f8cf 	bl	18188 <__aeabi_i2f>
   15fea:	4603      	mov	r3, r0
   15fec:	4618      	mov	r0, r3
   15fee:	f002 fae5 	bl	185bc <__aeabi_f2iz>
   15ff2:	4603      	mov	r3, r0
   15ff4:	b29a      	uxth	r2, r3
   15ff6:	f24b 5354 	movw	r3, #46420	; 0xb554
   15ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15ffe:	809a      	strh	r2, [r3, #4]
   16000:	f24b 5354 	movw	r3, #46420	; 0xb554
   16004:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16008:	889b      	ldrh	r3, [r3, #4]
   1600a:	b21b      	sxth	r3, r3
   1600c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16010:	dd07      	ble.n	16022 <last_radio_from_ppm+0x14a>
   16012:	f24b 5354 	movw	r3, #46420	; 0xb554
   16016:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1601a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1601e:	809a      	strh	r2, [r3, #4]
   16020:	e00f      	b.n	16042 <last_radio_from_ppm+0x16a>
   16022:	f24b 5354 	movw	r3, #46420	; 0xb554
   16026:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1602a:	889b      	ldrh	r3, [r3, #4]
   1602c:	b21b      	sxth	r3, r3
   1602e:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16032:	da06      	bge.n	16042 <last_radio_from_ppm+0x16a>
   16034:	f24b 5354 	movw	r3, #46420	; 0xb554
   16038:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1603c:	f64d 2280 	movw	r2, #55936	; 0xda80
   16040:	809a      	strh	r2, [r3, #4]
   16042:	f24b 5340 	movw	r3, #46400	; 0xb540
   16046:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1604a:	88db      	ldrh	r3, [r3, #6]
   1604c:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16050:	b29b      	uxth	r3, r3
   16052:	80fb      	strh	r3, [r7, #6]
   16054:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16058:	4618      	mov	r0, r3
   1605a:	f002 f895 	bl	18188 <__aeabi_i2f>
   1605e:	4603      	mov	r3, r0
   16060:	4618      	mov	r0, r3
   16062:	f002 faab 	bl	185bc <__aeabi_f2iz>
   16066:	4603      	mov	r3, r0
   16068:	b29a      	uxth	r2, r3
   1606a:	f24b 5354 	movw	r3, #46420	; 0xb554
   1606e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16072:	80da      	strh	r2, [r3, #6]
   16074:	f24b 5354 	movw	r3, #46420	; 0xb554
   16078:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1607c:	88db      	ldrh	r3, [r3, #6]
   1607e:	b21b      	sxth	r3, r3
   16080:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16084:	dd07      	ble.n	16096 <last_radio_from_ppm+0x1be>
   16086:	f24b 5354 	movw	r3, #46420	; 0xb554
   1608a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1608e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16092:	80da      	strh	r2, [r3, #6]
   16094:	e00f      	b.n	160b6 <last_radio_from_ppm+0x1de>
   16096:	f24b 5354 	movw	r3, #46420	; 0xb554
   1609a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1609e:	88db      	ldrh	r3, [r3, #6]
   160a0:	b21b      	sxth	r3, r3
   160a2:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   160a6:	da06      	bge.n	160b6 <last_radio_from_ppm+0x1de>
   160a8:	f24b 5354 	movw	r3, #46420	; 0xb554
   160ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160b0:	f64d 2280 	movw	r2, #55936	; 0xda80
   160b4:	80da      	strh	r2, [r3, #6]
   160b6:	f24b 5340 	movw	r3, #46400	; 0xb540
   160ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160be:	891b      	ldrh	r3, [r3, #8]
   160c0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   160c4:	b29b      	uxth	r3, r3
   160c6:	80fb      	strh	r3, [r7, #6]
   160c8:	f24b 5368 	movw	r3, #46440	; 0xb568
   160cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160d0:	891b      	ldrh	r3, [r3, #8]
   160d2:	b21b      	sxth	r3, r3
   160d4:	4618      	mov	r0, r3
   160d6:	f002 f857 	bl	18188 <__aeabi_i2f>
   160da:	4604      	mov	r4, r0
   160dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   160e0:	4618      	mov	r0, r3
   160e2:	f002 f851 	bl	18188 <__aeabi_i2f>
   160e6:	4603      	mov	r3, r0
   160e8:	4618      	mov	r0, r3
   160ea:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   160ee:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   160f2:	f002 f89d 	bl	18230 <__aeabi_fmul>
   160f6:	4603      	mov	r3, r0
   160f8:	4620      	mov	r0, r4
   160fa:	4619      	mov	r1, r3
   160fc:	f001 ff90 	bl	18020 <__addsf3>
   16100:	4603      	mov	r3, r0
   16102:	4618      	mov	r0, r3
   16104:	f002 fa5a 	bl	185bc <__aeabi_f2iz>
   16108:	4603      	mov	r3, r0
   1610a:	b29a      	uxth	r2, r3
   1610c:	f24b 5368 	movw	r3, #46440	; 0xb568
   16110:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16114:	811a      	strh	r2, [r3, #8]
   16116:	f24b 5340 	movw	r3, #46400	; 0xb540
   1611a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1611e:	895b      	ldrh	r3, [r3, #10]
   16120:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16124:	b29b      	uxth	r3, r3
   16126:	80fb      	strh	r3, [r7, #6]
   16128:	f24b 5368 	movw	r3, #46440	; 0xb568
   1612c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16130:	895b      	ldrh	r3, [r3, #10]
   16132:	b21b      	sxth	r3, r3
   16134:	4618      	mov	r0, r3
   16136:	f002 f827 	bl	18188 <__aeabi_i2f>
   1613a:	4604      	mov	r4, r0
   1613c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16140:	4618      	mov	r0, r3
   16142:	f002 f821 	bl	18188 <__aeabi_i2f>
   16146:	4603      	mov	r3, r0
   16148:	4618      	mov	r0, r3
   1614a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1614e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16152:	f002 f86d 	bl	18230 <__aeabi_fmul>
   16156:	4603      	mov	r3, r0
   16158:	4620      	mov	r0, r4
   1615a:	4619      	mov	r1, r3
   1615c:	f001 ff60 	bl	18020 <__addsf3>
   16160:	4603      	mov	r3, r0
   16162:	4618      	mov	r0, r3
   16164:	f002 fa2a 	bl	185bc <__aeabi_f2iz>
   16168:	4603      	mov	r3, r0
   1616a:	b29a      	uxth	r2, r3
   1616c:	f24b 5368 	movw	r3, #46440	; 0xb568
   16170:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16174:	815a      	strh	r2, [r3, #10]
   16176:	f24b 5340 	movw	r3, #46400	; 0xb540
   1617a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1617e:	899b      	ldrh	r3, [r3, #12]
   16180:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16184:	b29b      	uxth	r3, r3
   16186:	80fb      	strh	r3, [r7, #6]
   16188:	f24b 5368 	movw	r3, #46440	; 0xb568
   1618c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16190:	899b      	ldrh	r3, [r3, #12]
   16192:	b21b      	sxth	r3, r3
   16194:	4618      	mov	r0, r3
   16196:	f001 fff7 	bl	18188 <__aeabi_i2f>
   1619a:	4604      	mov	r4, r0
   1619c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   161a0:	4618      	mov	r0, r3
   161a2:	f001 fff1 	bl	18188 <__aeabi_i2f>
   161a6:	4603      	mov	r3, r0
   161a8:	4618      	mov	r0, r3
   161aa:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   161ae:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   161b2:	f002 f83d 	bl	18230 <__aeabi_fmul>
   161b6:	4603      	mov	r3, r0
   161b8:	4620      	mov	r0, r4
   161ba:	4619      	mov	r1, r3
   161bc:	f001 ff30 	bl	18020 <__addsf3>
   161c0:	4603      	mov	r3, r0
   161c2:	4618      	mov	r0, r3
   161c4:	f002 f9fa 	bl	185bc <__aeabi_f2iz>
   161c8:	4603      	mov	r3, r0
   161ca:	b29a      	uxth	r2, r3
   161cc:	f24b 5368 	movw	r3, #46440	; 0xb568
   161d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161d4:	819a      	strh	r2, [r3, #12]
   161d6:	f24b 5340 	movw	r3, #46400	; 0xb540
   161da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161de:	89db      	ldrh	r3, [r3, #14]
   161e0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   161e4:	b29b      	uxth	r3, r3
   161e6:	80fb      	strh	r3, [r7, #6]
   161e8:	f24b 5368 	movw	r3, #46440	; 0xb568
   161ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161f0:	89db      	ldrh	r3, [r3, #14]
   161f2:	b21b      	sxth	r3, r3
   161f4:	4618      	mov	r0, r3
   161f6:	f001 ffc7 	bl	18188 <__aeabi_i2f>
   161fa:	4604      	mov	r4, r0
   161fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16200:	4618      	mov	r0, r3
   16202:	f001 ffc1 	bl	18188 <__aeabi_i2f>
   16206:	4603      	mov	r3, r0
   16208:	4618      	mov	r0, r3
   1620a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1620e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16212:	f002 f80d 	bl	18230 <__aeabi_fmul>
   16216:	4603      	mov	r3, r0
   16218:	4620      	mov	r0, r4
   1621a:	4619      	mov	r1, r3
   1621c:	f001 ff00 	bl	18020 <__addsf3>
   16220:	4603      	mov	r3, r0
   16222:	4618      	mov	r0, r3
   16224:	f002 f9ca 	bl	185bc <__aeabi_f2iz>
   16228:	4603      	mov	r3, r0
   1622a:	b29a      	uxth	r2, r3
   1622c:	f24b 5368 	movw	r3, #46440	; 0xb568
   16230:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16234:	81da      	strh	r2, [r3, #14]
   16236:	f24b 5340 	movw	r3, #46400	; 0xb540
   1623a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1623e:	8a1b      	ldrh	r3, [r3, #16]
   16240:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16244:	b29b      	uxth	r3, r3
   16246:	80fb      	strh	r3, [r7, #6]
   16248:	f24b 5368 	movw	r3, #46440	; 0xb568
   1624c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16250:	8a1b      	ldrh	r3, [r3, #16]
   16252:	b21b      	sxth	r3, r3
   16254:	4618      	mov	r0, r3
   16256:	f001 ff97 	bl	18188 <__aeabi_i2f>
   1625a:	4604      	mov	r4, r0
   1625c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16260:	4618      	mov	r0, r3
   16262:	f001 ff91 	bl	18188 <__aeabi_i2f>
   16266:	4603      	mov	r3, r0
   16268:	4618      	mov	r0, r3
   1626a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1626e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16272:	f001 ffdd 	bl	18230 <__aeabi_fmul>
   16276:	4603      	mov	r3, r0
   16278:	4620      	mov	r0, r4
   1627a:	4619      	mov	r1, r3
   1627c:	f001 fed0 	bl	18020 <__addsf3>
   16280:	4603      	mov	r3, r0
   16282:	4618      	mov	r0, r3
   16284:	f002 f99a 	bl	185bc <__aeabi_f2iz>
   16288:	4603      	mov	r3, r0
   1628a:	b29a      	uxth	r2, r3
   1628c:	f24b 5368 	movw	r3, #46440	; 0xb568
   16290:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16294:	821a      	strh	r2, [r3, #16]
   16296:	f24b 5380 	movw	r3, #46464	; 0xb580
   1629a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1629e:	781b      	ldrb	r3, [r3, #0]
   162a0:	3301      	adds	r3, #1
   162a2:	b2da      	uxtb	r2, r3
   162a4:	f24b 5380 	movw	r3, #46464	; 0xb580
   162a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162ac:	701a      	strb	r2, [r3, #0]
   162ae:	f24b 5380 	movw	r3, #46464	; 0xb580
   162b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162b6:	781b      	ldrb	r3, [r3, #0]
   162b8:	2b0a      	cmp	r3, #10
   162ba:	f040 8101 	bne.w	164c0 <last_radio_from_ppm+0x5e8>
   162be:	f24b 5380 	movw	r3, #46464	; 0xb580
   162c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162c6:	2200      	movs	r2, #0
   162c8:	701a      	strb	r2, [r3, #0]
   162ca:	f24b 5368 	movw	r3, #46440	; 0xb568
   162ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162d2:	891a      	ldrh	r2, [r3, #8]
   162d4:	f24b 5354 	movw	r3, #46420	; 0xb554
   162d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162dc:	811a      	strh	r2, [r3, #8]
   162de:	f24b 5368 	movw	r3, #46440	; 0xb568
   162e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162e6:	2200      	movs	r2, #0
   162e8:	811a      	strh	r2, [r3, #8]
   162ea:	f24b 5354 	movw	r3, #46420	; 0xb554
   162ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   162f2:	891b      	ldrh	r3, [r3, #8]
   162f4:	b21b      	sxth	r3, r3
   162f6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   162fa:	dd07      	ble.n	1630c <last_radio_from_ppm+0x434>
   162fc:	f24b 5354 	movw	r3, #46420	; 0xb554
   16300:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16304:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16308:	811a      	strh	r2, [r3, #8]
   1630a:	e00f      	b.n	1632c <last_radio_from_ppm+0x454>
   1630c:	f24b 5354 	movw	r3, #46420	; 0xb554
   16310:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16314:	891b      	ldrh	r3, [r3, #8]
   16316:	b21b      	sxth	r3, r3
   16318:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1631c:	da06      	bge.n	1632c <last_radio_from_ppm+0x454>
   1631e:	f24b 5354 	movw	r3, #46420	; 0xb554
   16322:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16326:	f64d 2280 	movw	r2, #55936	; 0xda80
   1632a:	811a      	strh	r2, [r3, #8]
   1632c:	f24b 5368 	movw	r3, #46440	; 0xb568
   16330:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16334:	895a      	ldrh	r2, [r3, #10]
   16336:	f24b 5354 	movw	r3, #46420	; 0xb554
   1633a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1633e:	815a      	strh	r2, [r3, #10]
   16340:	f24b 5368 	movw	r3, #46440	; 0xb568
   16344:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16348:	2200      	movs	r2, #0
   1634a:	815a      	strh	r2, [r3, #10]
   1634c:	f24b 5354 	movw	r3, #46420	; 0xb554
   16350:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16354:	895b      	ldrh	r3, [r3, #10]
   16356:	b21b      	sxth	r3, r3
   16358:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1635c:	dd07      	ble.n	1636e <last_radio_from_ppm+0x496>
   1635e:	f24b 5354 	movw	r3, #46420	; 0xb554
   16362:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16366:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1636a:	815a      	strh	r2, [r3, #10]
   1636c:	e00f      	b.n	1638e <last_radio_from_ppm+0x4b6>
   1636e:	f24b 5354 	movw	r3, #46420	; 0xb554
   16372:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16376:	895b      	ldrh	r3, [r3, #10]
   16378:	b21b      	sxth	r3, r3
   1637a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1637e:	da06      	bge.n	1638e <last_radio_from_ppm+0x4b6>
   16380:	f24b 5354 	movw	r3, #46420	; 0xb554
   16384:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16388:	f64d 2280 	movw	r2, #55936	; 0xda80
   1638c:	815a      	strh	r2, [r3, #10]
   1638e:	f24b 5368 	movw	r3, #46440	; 0xb568
   16392:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16396:	899a      	ldrh	r2, [r3, #12]
   16398:	f24b 5354 	movw	r3, #46420	; 0xb554
   1639c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163a0:	819a      	strh	r2, [r3, #12]
   163a2:	f24b 5368 	movw	r3, #46440	; 0xb568
   163a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163aa:	2200      	movs	r2, #0
   163ac:	819a      	strh	r2, [r3, #12]
   163ae:	f24b 5354 	movw	r3, #46420	; 0xb554
   163b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163b6:	899b      	ldrh	r3, [r3, #12]
   163b8:	b21b      	sxth	r3, r3
   163ba:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   163be:	dd07      	ble.n	163d0 <last_radio_from_ppm+0x4f8>
   163c0:	f24b 5354 	movw	r3, #46420	; 0xb554
   163c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   163cc:	819a      	strh	r2, [r3, #12]
   163ce:	e00f      	b.n	163f0 <last_radio_from_ppm+0x518>
   163d0:	f24b 5354 	movw	r3, #46420	; 0xb554
   163d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163d8:	899b      	ldrh	r3, [r3, #12]
   163da:	b21b      	sxth	r3, r3
   163dc:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   163e0:	da06      	bge.n	163f0 <last_radio_from_ppm+0x518>
   163e2:	f24b 5354 	movw	r3, #46420	; 0xb554
   163e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163ea:	f64d 2280 	movw	r2, #55936	; 0xda80
   163ee:	819a      	strh	r2, [r3, #12]
   163f0:	f24b 5368 	movw	r3, #46440	; 0xb568
   163f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   163f8:	89da      	ldrh	r2, [r3, #14]
   163fa:	f24b 5354 	movw	r3, #46420	; 0xb554
   163fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16402:	81da      	strh	r2, [r3, #14]
   16404:	f24b 5368 	movw	r3, #46440	; 0xb568
   16408:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1640c:	2200      	movs	r2, #0
   1640e:	81da      	strh	r2, [r3, #14]
   16410:	f24b 5354 	movw	r3, #46420	; 0xb554
   16414:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16418:	89db      	ldrh	r3, [r3, #14]
   1641a:	b21b      	sxth	r3, r3
   1641c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16420:	dd07      	ble.n	16432 <last_radio_from_ppm+0x55a>
   16422:	f24b 5354 	movw	r3, #46420	; 0xb554
   16426:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1642a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1642e:	81da      	strh	r2, [r3, #14]
   16430:	e00f      	b.n	16452 <last_radio_from_ppm+0x57a>
   16432:	f24b 5354 	movw	r3, #46420	; 0xb554
   16436:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1643a:	89db      	ldrh	r3, [r3, #14]
   1643c:	b21b      	sxth	r3, r3
   1643e:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16442:	da06      	bge.n	16452 <last_radio_from_ppm+0x57a>
   16444:	f24b 5354 	movw	r3, #46420	; 0xb554
   16448:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1644c:	f64d 2280 	movw	r2, #55936	; 0xda80
   16450:	81da      	strh	r2, [r3, #14]
   16452:	f24b 5368 	movw	r3, #46440	; 0xb568
   16456:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1645a:	8a1a      	ldrh	r2, [r3, #16]
   1645c:	f24b 5354 	movw	r3, #46420	; 0xb554
   16460:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16464:	821a      	strh	r2, [r3, #16]
   16466:	f24b 5368 	movw	r3, #46440	; 0xb568
   1646a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1646e:	2200      	movs	r2, #0
   16470:	821a      	strh	r2, [r3, #16]
   16472:	f24b 5354 	movw	r3, #46420	; 0xb554
   16476:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1647a:	8a1b      	ldrh	r3, [r3, #16]
   1647c:	b21b      	sxth	r3, r3
   1647e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16482:	dd07      	ble.n	16494 <last_radio_from_ppm+0x5bc>
   16484:	f24b 5354 	movw	r3, #46420	; 0xb554
   16488:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1648c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16490:	821a      	strh	r2, [r3, #16]
   16492:	e00f      	b.n	164b4 <last_radio_from_ppm+0x5dc>
   16494:	f24b 5354 	movw	r3, #46420	; 0xb554
   16498:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1649c:	8a1b      	ldrh	r3, [r3, #16]
   1649e:	b21b      	sxth	r3, r3
   164a0:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   164a4:	da06      	bge.n	164b4 <last_radio_from_ppm+0x5dc>
   164a6:	f24b 5354 	movw	r3, #46420	; 0xb554
   164aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164ae:	f64d 2280 	movw	r2, #55936	; 0xda80
   164b2:	821a      	strh	r2, [r3, #16]
   164b4:	f24b 537a 	movw	r3, #46458	; 0xb57a
   164b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164bc:	2201      	movs	r2, #1
   164be:	701a      	strb	r2, [r3, #0]
}
   164c0:	370c      	adds	r7, #12
   164c2:	46bd      	mov	sp, r7
   164c4:	bd90      	pop	{r4, r7, pc}
   164c6:	bf00      	nop

000164c8 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   164c8:	b480      	push	{r7}
   164ca:	af00      	add	r7, sp, #0
  idx_buf = 0;
   164cc:	f24b 53b4 	movw	r3, #46516	; 0xb5b4
   164d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164d4:	2200      	movs	r2, #0
   164d6:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   164d8:	f24b 53b5 	movw	r3, #46517	; 0xb5b5
   164dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164e0:	2200      	movs	r2, #0
   164e2:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   164e4:	f24b 53b4 	movw	r3, #46516	; 0xb5b4
   164e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164ec:	781b      	ldrb	r3, [r3, #0]
   164ee:	b2db      	uxtb	r3, r3
   164f0:	461a      	mov	r2, r3
   164f2:	f24b 539c 	movw	r3, #46492	; 0xb59c
   164f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   164fa:	4413      	add	r3, r2
   164fc:	781a      	ldrb	r2, [r3, #0]
   164fe:	f24b 53b6 	movw	r3, #46518	; 0xb5b6
   16502:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16506:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   16508:	f242 030f 	movw	r3, #8207	; 0x200f
   1650c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16510:	f24b 52b6 	movw	r2, #46518	; 0xb5b6
   16514:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16518:	7812      	ldrb	r2, [r2, #0]
   1651a:	b2d2      	uxtb	r2, r2
   1651c:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   1651e:	f24b 53b2 	movw	r3, #46514	; 0xb5b2
   16522:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16526:	2200      	movs	r2, #0
   16528:	701a      	strb	r2, [r3, #0]
}
   1652a:	46bd      	mov	sp, r7
   1652c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16530:	4770      	bx	lr
   16532:	bf00      	nop

00016534 <fbw_spi_init>:

void fbw_spi_init(void) {
   16534:	b480      	push	{r7}
   16536:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   16538:	f24b 539c 	movw	r3, #46492	; 0xb59c
   1653c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16540:	2200      	movs	r2, #0
   16542:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   16544:	f24b 539c 	movw	r3, #46492	; 0xb59c
   16548:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1654c:	2200      	movs	r2, #0
   1654e:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   16550:	f242 0317 	movw	r3, #8215	; 0x2017
   16554:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16558:	f242 0217 	movw	r2, #8215	; 0x2017
   1655c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16560:	7812      	ldrb	r2, [r2, #0]
   16562:	b2d2      	uxtb	r2, r2
   16564:	f042 0210 	orr.w	r2, r2, #16
   16568:	b2d2      	uxtb	r2, r2
   1656a:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   1656c:	f242 030d 	movw	r3, #8205	; 0x200d
   16570:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16574:	2240      	movs	r2, #64	; 0x40
   16576:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   16578:	f242 030d 	movw	r3, #8205	; 0x200d
   1657c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16580:	f242 020d 	movw	r2, #8205	; 0x200d
   16584:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16588:	7812      	ldrb	r2, [r2, #0]
   1658a:	b2d2      	uxtb	r2, r2
   1658c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16590:	b2d2      	uxtb	r2, r2
   16592:	701a      	strb	r2, [r3, #0]
}
   16594:	46bd      	mov	sp, r7
   16596:	f85d 7b04 	ldr.w	r7, [sp], #4
   1659a:	4770      	bx	lr
   1659c:	0000      	movs	r0, r0
	...

000165a0 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   165a0:	b480      	push	{r7}
   165a2:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   165a4:	f242 032f 	movw	r3, #8239	; 0x202f
   165a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165ac:	2200      	movs	r2, #0
   165ae:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   165b0:	f242 032e 	movw	r3, #8238	; 0x202e
   165b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165b8:	2201      	movs	r2, #1
   165ba:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   165bc:	f242 0325 	movw	r3, #8229	; 0x2025
   165c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165c4:	2207      	movs	r2, #7
   165c6:	701a      	strb	r2, [r3, #0]
}
   165c8:	46bd      	mov	sp, r7
   165ca:	f85d 7b04 	ldr.w	r7, [sp], #4
   165ce:	4770      	bx	lr

000165d0 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   165d0:	b480      	push	{r7}
   165d2:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   165d4:	f242 032e 	movw	r3, #8238	; 0x202e
   165d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165dc:	f242 022e 	movw	r2, #8238	; 0x202e
   165e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   165e4:	7812      	ldrb	r2, [r2, #0]
   165e6:	b2d2      	uxtb	r2, r2
   165e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   165ec:	b2d2      	uxtb	r2, r2
   165ee:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   165f0:	f242 032e 	movw	r3, #8238	; 0x202e
   165f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   165f8:	f242 022e 	movw	r2, #8238	; 0x202e
   165fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16600:	7812      	ldrb	r2, [r2, #0]
   16602:	b2d2      	uxtb	r2, r2
   16604:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16608:	b2d2      	uxtb	r2, r2
   1660a:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   1660c:	f242 0317 	movw	r3, #8215	; 0x2017
   16610:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16614:	f242 0217 	movw	r2, #8215	; 0x2017
   16618:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1661c:	7812      	ldrb	r2, [r2, #0]
   1661e:	b2d2      	uxtb	r2, r2
   16620:	f022 0201 	bic.w	r2, r2, #1
   16624:	b2d2      	uxtb	r2, r2
   16626:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   16628:	f242 0337 	movw	r3, #8247	; 0x2037
   1662c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16630:	f242 0237 	movw	r2, #8247	; 0x2037
   16634:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16638:	7812      	ldrb	r2, [r2, #0]
   1663a:	b2d2      	uxtb	r2, r2
   1663c:	f042 0220 	orr.w	r2, r2, #32
   16640:	b2d2      	uxtb	r2, r2
   16642:	701a      	strb	r2, [r3, #0]
}
   16644:	46bd      	mov	sp, r7
   16646:	f85d 7b04 	ldr.w	r7, [sp], #4
   1664a:	4770      	bx	lr

0001664c <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   1664c:	b580      	push	{r7, lr}
   1664e:	b082      	sub	sp, #8
   16650:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   16652:	2300      	movs	r3, #0
   16654:	71fb      	strb	r3, [r7, #7]
   16656:	e010      	b.n	1667a <to_autopilot_from_last_radio+0x2e>
     to_mega128.channels[i] = last_radio[i];
   16658:	79fa      	ldrb	r2, [r7, #7]
   1665a:	79f9      	ldrb	r1, [r7, #7]
   1665c:	f24b 5354 	movw	r3, #46420	; 0xb554
   16660:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16664:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   16668:	f24b 539c 	movw	r3, #46492	; 0xb59c
   1666c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16670:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   16674:	79fb      	ldrb	r3, [r7, #7]
   16676:	3301      	adds	r3, #1
   16678:	71fb      	strb	r3, [r7, #7]
   1667a:	79fb      	ldrb	r3, [r7, #7]
   1667c:	2b08      	cmp	r3, #8
   1667e:	d9eb      	bls.n	16658 <to_autopilot_from_last_radio+0xc>
     to_mega128.channels[i] = last_radio[i];
  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   16680:	f24b 6344 	movw	r3, #46660	; 0xb644
   16684:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16688:	781b      	ldrb	r3, [r3, #0]
   1668a:	2b00      	cmp	r3, #0
   1668c:	bf0c      	ite	eq
   1668e:	2300      	moveq	r3, #0
   16690:	2301      	movne	r3, #1
   16692:	b2db      	uxtb	r3, r3
   16694:	461a      	mov	r2, r3
   16696:	f24b 539c 	movw	r3, #46492	; 0xb59c
   1669a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1669e:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   166a0:	f24b 539c 	movw	r3, #46492	; 0xb59c
   166a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166a8:	7cdb      	ldrb	r3, [r3, #19]
   166aa:	b2da      	uxtb	r2, r3
   166ac:	f24b 6346 	movw	r3, #46662	; 0xb646
   166b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166b4:	781b      	ldrb	r3, [r3, #0]
   166b6:	2b00      	cmp	r3, #0
   166b8:	d001      	beq.n	166be <to_autopilot_from_last_radio+0x72>
   166ba:	2302      	movs	r3, #2
   166bc:	e000      	b.n	166c0 <to_autopilot_from_last_radio+0x74>
   166be:	2300      	movs	r3, #0
   166c0:	4313      	orrs	r3, r2
   166c2:	b2db      	uxtb	r3, r3
   166c4:	b2da      	uxtb	r2, r3
   166c6:	f24b 539c 	movw	r3, #46492	; 0xb59c
   166ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166ce:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   166d0:	f24b 537a 	movw	r3, #46458	; 0xb57a
   166d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166d8:	781b      	ldrb	r3, [r3, #0]
   166da:	2b00      	cmp	r3, #0
   166dc:	d012      	beq.n	16704 <to_autopilot_from_last_radio+0xb8>
    to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   166de:	f24b 539c 	movw	r3, #46492	; 0xb59c
   166e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166e6:	7cdb      	ldrb	r3, [r3, #19]
   166e8:	f043 0304 	orr.w	r3, r3, #4
   166ec:	b2da      	uxtb	r2, r3
   166ee:	f24b 539c 	movw	r3, #46492	; 0xb59c
   166f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166f6:	74da      	strb	r2, [r3, #19]
    last_radio_contains_avg_channels = FALSE;
   166f8:	f24b 537a 	movw	r3, #46458	; 0xb57a
   166fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16700:	2200      	movs	r2, #0
   16702:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   16704:	f24b 6348 	movw	r3, #46664	; 0xb648
   16708:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1670c:	781a      	ldrb	r2, [r3, #0]
   1670e:	f24b 539c 	movw	r3, #46492	; 0xb59c
   16712:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16716:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   16718:	f24b 53b8 	movw	r3, #46520	; 0xb5b8
   1671c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16720:	881b      	ldrh	r3, [r3, #0]
   16722:	4618      	mov	r0, r3
   16724:	f001 f8de 	bl	178e4 <__aeabi_i2d>
   16728:	4602      	mov	r2, r0
   1672a:	460b      	mov	r3, r1
   1672c:	4610      	mov	r0, r2
   1672e:	4619      	mov	r1, r3
   16730:	a31b      	add	r3, pc, #108	; (adr r3, 167a0 <to_autopilot_from_last_radio+0x154>)
   16732:	e9d3 2300 	ldrd	r2, r3, [r3]
   16736:	f001 f93b 	bl	179b0 <__aeabi_dmul>
   1673a:	4602      	mov	r2, r0
   1673c:	460b      	mov	r3, r1
   1673e:	4610      	mov	r0, r2
   16740:	4619      	mov	r1, r3
   16742:	f04f 0200 	mov.w	r2, #0
   16746:	f04f 0300 	mov.w	r3, #0
   1674a:	f2c4 0340 	movt	r3, #16448	; 0x4040
   1674e:	f001 fa59 	bl	17c04 <__aeabi_ddiv>
   16752:	4602      	mov	r2, r0
   16754:	460b      	mov	r3, r1
   16756:	4610      	mov	r0, r2
   16758:	4619      	mov	r1, r3
   1675a:	a313      	add	r3, pc, #76	; (adr r3, 167a8 <to_autopilot_from_last_radio+0x15c>)
   1675c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16760:	f000 ff74 	bl	1764c <__adddf3>
   16764:	4602      	mov	r2, r0
   16766:	460b      	mov	r3, r1
   16768:	4610      	mov	r0, r2
   1676a:	4619      	mov	r1, r3
   1676c:	f04f 0200 	mov.w	r2, #0
   16770:	f04f 0300 	mov.w	r3, #0
   16774:	f2c4 0324 	movt	r3, #16420	; 0x4024
   16778:	f001 f91a 	bl	179b0 <__aeabi_dmul>
   1677c:	4602      	mov	r2, r0
   1677e:	460b      	mov	r3, r1
   16780:	4610      	mov	r0, r2
   16782:	4619      	mov	r1, r3
   16784:	f001 fbd6 	bl	17f34 <__aeabi_d2uiz>
   16788:	4603      	mov	r3, r0
   1678a:	b2da      	uxtb	r2, r3
   1678c:	f24b 539c 	movw	r3, #46492	; 0xb59c
   16790:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16794:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   16796:	3708      	adds	r7, #8
   16798:	46bd      	mov	sp, r7
   1679a:	bd80      	pop	{r7, pc}
   1679c:	f3af 8000 	nop.w
   167a0:	1eb851ec 	.word	0x1eb851ec
   167a4:	3f91eb85 	.word	0x3f91eb85
   167a8:	020c49ba 	.word	0x020c49ba
   167ac:	3fb6872b 	.word	0x3fb6872b

000167b0 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   167b0:	b580      	push	{r7, lr}
   167b2:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
//   if ( !SpiIsSelected() && spi_was_interrupted ) 
   {
      spi_was_interrupted = FALSE;
   167b4:	f24b 53b3 	movw	r3, #46515	; 0xb5b3
   167b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167bc:	2200      	movs	r2, #0
   167be:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   167c0:	f7ff ff44 	bl	1664c <to_autopilot_from_last_radio>
      spi_reset();
   167c4:	f7ff fe80 	bl	164c8 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   167c8:	bd80      	pop	{r7, pc}
   167ca:	bf00      	nop

000167cc <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   167cc:	b580      	push	{r7, lr}
   167ce:	af00      	add	r7, sp, #0
  uart_init_tx();
   167d0:	f000 fb02 	bl	16dd8 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   167d4:	f648 00e4 	movw	r0, #35044	; 0x88e4
   167d8:	f2c0 0001 	movt	r0, #1
   167dc:	f000 fbda 	bl	16f94 <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   167e0:	f7ff fab2 	bl	15d48 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   167e4:	2003      	movs	r0, #3
   167e6:	f24b 51b8 	movw	r1, #46520	; 0xb5b8
   167ea:	f2c2 0100 	movt	r1, #8192	; 0x2000
   167ee:	f7ff fa97 	bl	15d20 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   167f2:	2006      	movs	r0, #6
   167f4:	f24b 51fc 	movw	r1, #46588	; 0xb5fc
   167f8:	f2c2 0100 	movt	r1, #8192	; 0x2000
   167fc:	f7ff fa90 	bl	15d20 <fbw_adc_buf_channel>
#endif
  timer_init();
   16800:	f7ff fece 	bl	165a0 <timer_init>
  servo_init();
   16804:	f000 f894 	bl	16930 <servo_init>
  ppm_init();
   16808:	f7ff fee2 	bl	165d0 <ppm_init>
  fbw_spi_init();
   1680c:	f7ff fe92 	bl	16534 <fbw_spi_init>
  //sei(); //FN
}
   16810:	bd80      	pop	{r7, pc}
   16812:	bf00      	nop

00016814 <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   16814:	b580      	push	{r7, lr}
   16816:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    //if( ppm_valid ) 
    {
      ppm_valid = FALSE;
   16818:	f24b 537b 	movw	r3, #46459	; 0xb57b
   1681c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16820:	2200      	movs	r2, #0
   16822:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   16824:	f24b 6347 	movw	r3, #46663	; 0xb647
   16828:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1682c:	781b      	ldrb	r3, [r3, #0]
   1682e:	3301      	adds	r3, #1
   16830:	b2da      	uxtb	r2, r3
   16832:	f24b 6347 	movw	r3, #46663	; 0xb647
   16836:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1683a:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   1683c:	f24b 6344 	movw	r3, #46660	; 0xb644
   16840:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16844:	2201      	movs	r2, #1
   16846:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   16848:	f24b 6346 	movw	r3, #46662	; 0xb646
   1684c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16850:	2200      	movs	r2, #0
   16852:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   16854:	f24b 6342 	movw	r3, #46658	; 0xb642
   16858:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1685c:	2200      	movs	r2, #0
   1685e:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   16860:	f7ff fb3a 	bl	15ed8 <last_radio_from_ppm>
      //if (last_radio_contains_avg_channels) 
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   16864:	f24b 5354 	movw	r3, #46420	; 0xb554
   16868:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1686c:	891b      	ldrh	r3, [r3, #8]
   1686e:	b21b      	sxth	r3, r3
   16870:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   16874:	bfb4      	ite	lt
   16876:	2300      	movlt	r3, #0
   16878:	2301      	movge	r3, #1
   1687a:	b2db      	uxtb	r3, r3
   1687c:	461a      	mov	r2, r3
   1687e:	f24b 6340 	movw	r3, #46656	; 0xb640
   16882:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16886:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   16888:	f24b 6340 	movw	r3, #46656	; 0xb640
   1688c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16890:	781b      	ldrb	r3, [r3, #0]
   16892:	2b00      	cmp	r3, #0
   16894:	d105      	bne.n	168a2 <test_ppm_task+0x8e>
      {
	servo_set(last_radio);
   16896:	f24b 5054 	movw	r0, #46420	; 0xb554
   1689a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1689e:	f000 f925 	bl	16aec <servo_set>
      }
    } 
    //else if (mode == MODE_MANUAL && radio_really_lost) 
    {
      mode = MODE_AUTO;
   168a2:	f24b 6340 	movw	r3, #46656	; 0xb640
   168a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168aa:	2201      	movs	r2, #1
   168ac:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= STALLED_TIME) 
    {
      radio_ok = FALSE;
   168ae:	f24b 6344 	movw	r3, #46660	; 0xb644
   168b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168b6:	2200      	movs	r2, #0
   168b8:	701a      	strb	r2, [r3, #0]
    }
    //if (time_since_last_ppm >= REALLY_STALLED_TIME) 
    {
      radio_really_lost = TRUE;
   168ba:	f24b 6346 	movw	r3, #46662	; 0xb646
   168be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168c2:	2201      	movs	r2, #1
   168c4:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   168c6:	bd80      	pop	{r7, pc}

000168c8 <check_failsafe_task>:
void check_failsafe_task(void)
{
   168c8:	b580      	push	{r7, lr}
   168ca:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    //if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
    {
      servo_set(failsafe);
   168cc:	f648 00d0 	movw	r0, #35024	; 0x88d0
   168d0:	f2c0 0001 	movt	r0, #1
   168d4:	f000 f90a 	bl	16aec <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   168d8:	bd80      	pop	{r7, pc}
   168da:	bf00      	nop

000168dc <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   168dc:	b580      	push	{r7, lr}
   168de:	af00      	add	r7, sp, #0
	//vPrintString("S_8 check_mega128_values_task start! \n\r"); //SunnyBeike
// modified by wanbo
     //if ( !SpiIsSelected() && spi_was_interrupted ) 
     {
         if (mega128_receive_valid)
   168e0:	f24b 53b2 	movw	r3, #46514	; 0xb5b2
   168e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168e8:	781b      	ldrb	r3, [r3, #0]
   168ea:	b2db      	uxtb	r3, r3
   168ec:	2b00      	cmp	r3, #0
   168ee:	d018      	beq.n	16922 <check_mega128_values_task+0x46>
         { 
             time_since_last_mega128 = 0;
   168f0:	f24b 6341 	movw	r3, #46657	; 0xb641
   168f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168f8:	2200      	movs	r2, #0
   168fa:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   168fc:	f24b 6345 	movw	r3, #46661	; 0xb645
   16900:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16904:	2201      	movs	r2, #1
   16906:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   16908:	f24b 6340 	movw	r3, #46656	; 0xb640
   1690c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16910:	781b      	ldrb	r3, [r3, #0]
   16912:	2b01      	cmp	r3, #1
   16914:	d105      	bne.n	16922 <check_mega128_values_task+0x46>
                 servo_set(from_mega128.channels);
   16916:	f24b 5084 	movw	r0, #46468	; 0xb584
   1691a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1691e:	f000 f8e5 	bl	16aec <servo_set>
         }
     }
     //if (time_since_last_mega128 == STALLED_TIME) 
     {
         mega128_ok = FALSE;
   16922:	f24b 6345 	movw	r3, #46661	; 0xb645
   16926:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1692a:	2200      	movs	r2, #0
   1692c:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   1692e:	bd80      	pop	{r7, pc}

00016930 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   16930:	b480      	push	{r7}
   16932:	b083      	sub	sp, #12
   16934:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   16936:	f242 0311 	movw	r3, #8209	; 0x2011
   1693a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1693e:	f242 0211 	movw	r2, #8209	; 0x2011
   16942:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16946:	7812      	ldrb	r2, [r2, #0]
   16948:	b2d2      	uxtb	r2, r2
   1694a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1694e:	b2d2      	uxtb	r2, r2
   16950:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   16952:	f242 0317 	movw	r3, #8215	; 0x2017
   16956:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1695a:	f242 0217 	movw	r2, #8215	; 0x2017
   1695e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16962:	7812      	ldrb	r2, [r2, #0]
   16964:	b2d2      	uxtb	r2, r2
   16966:	f042 0202 	orr.w	r2, r2, #2
   1696a:	b2d2      	uxtb	r2, r2
   1696c:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   1696e:	f242 0312 	movw	r3, #8210	; 0x2012
   16972:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16976:	f242 0212 	movw	r2, #8210	; 0x2012
   1697a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1697e:	7812      	ldrb	r2, [r2, #0]
   16980:	b2d2      	uxtb	r2, r2
   16982:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16986:	b2d2      	uxtb	r2, r2
   16988:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   1698a:	f242 0318 	movw	r3, #8216	; 0x2018
   1698e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16992:	f242 0218 	movw	r2, #8216	; 0x2018
   16996:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1699a:	7812      	ldrb	r2, [r2, #0]
   1699c:	b2d2      	uxtb	r2, r2
   1699e:	f022 0202 	bic.w	r2, r2, #2
   169a2:	b2d2      	uxtb	r2, r2
   169a4:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   169a6:	2300      	movs	r3, #0
   169a8:	71fb      	strb	r3, [r7, #7]
   169aa:	e00b      	b.n	169c4 <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   169ac:	79fa      	ldrb	r2, [r7, #7]
   169ae:	f24b 634c 	movw	r3, #46668	; 0xb64c
   169b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   169b6:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   169ba:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   169be:	79fb      	ldrb	r3, [r7, #7]
   169c0:	3301      	adds	r3, #1
   169c2:	71fb      	strb	r3, [r7, #7]
   169c4:	79fb      	ldrb	r3, [r7, #7]
   169c6:	2b09      	cmp	r3, #9
   169c8:	d9f0      	bls.n	169ac <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   169ca:	f242 032a 	movw	r3, #8234	; 0x202a
   169ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   169d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   169d6:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   169d8:	f242 032f 	movw	r3, #8239	; 0x202f
   169dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   169e0:	f242 022f 	movw	r2, #8239	; 0x202f
   169e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   169e8:	7812      	ldrb	r2, [r2, #0]
   169ea:	b2d2      	uxtb	r2, r2
   169ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   169f0:	b2d2      	uxtb	r2, r2
   169f2:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   169f4:	f242 0336 	movw	r3, #8246	; 0x2036
   169f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   169fc:	2210      	movs	r2, #16
   169fe:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16a00:	f242 0312 	movw	r3, #8210	; 0x2012
   16a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a08:	f242 0212 	movw	r2, #8210	; 0x2012
   16a0c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16a10:	7812      	ldrb	r2, [r2, #0]
   16a12:	b2d2      	uxtb	r2, r2
   16a14:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16a18:	b2d2      	uxtb	r2, r2
   16a1a:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   16a1c:	f242 0337 	movw	r3, #8247	; 0x2037
   16a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a24:	f242 0237 	movw	r2, #8247	; 0x2037
   16a28:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16a2c:	7812      	ldrb	r2, [r2, #0]
   16a2e:	b2d2      	uxtb	r2, r2
   16a30:	f042 0210 	orr.w	r2, r2, #16
   16a34:	b2d2      	uxtb	r2, r2
   16a36:	701a      	strb	r2, [r3, #0]
}
   16a38:	370c      	adds	r7, #12
   16a3a:	46bd      	mov	sp, r7
   16a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16a40:	4770      	bx	lr
   16a42:	bf00      	nop

00016a44 <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   16a44:	b480      	push	{r7}
   16a46:	b083      	sub	sp, #12
   16a48:	af00      	add	r7, sp, #0
   16a4a:	4602      	mov	r2, r0
   16a4c:	460b      	mov	r3, r1
   16a4e:	71fa      	strb	r2, [r7, #7]
   16a50:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   16a52:	79f9      	ldrb	r1, [r7, #7]
   16a54:	88bb      	ldrh	r3, [r7, #4]
   16a56:	011b      	lsls	r3, r3, #4
   16a58:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16a5c:	d308      	bcc.n	16a70 <servo_set_one+0x2c>
   16a5e:	88bb      	ldrh	r3, [r7, #4]
   16a60:	011b      	lsls	r3, r3, #4
   16a62:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16a66:	bf28      	it	cs
   16a68:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16a6c:	b29a      	uxth	r2, r3
   16a6e:	e001      	b.n	16a74 <servo_set_one+0x30>
   16a70:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16a74:	f24b 634c 	movw	r3, #46668	; 0xb64c
   16a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16a7c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   16a80:	370c      	adds	r7, #12
   16a82:	46bd      	mov	sp, r7
   16a84:	f85d 7b04 	ldr.w	r7, [sp], #4
   16a88:	4770      	bx	lr
   16a8a:	bf00      	nop

00016a8c <servo_transmit>:

void 
servo_transmit(void) {
   16a8c:	b580      	push	{r7, lr}
   16a8e:	b082      	sub	sp, #8
   16a90:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   16a92:	2000      	movs	r0, #0
   16a94:	f000 f9e6 	bl	16e64 <uart_transmit>
   16a98:	2000      	movs	r0, #0
   16a9a:	f000 f9e3 	bl	16e64 <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16a9e:	2300      	movs	r3, #0
   16aa0:	71fb      	strb	r3, [r7, #7]
   16aa2:	e01a      	b.n	16ada <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   16aa4:	79fa      	ldrb	r2, [r7, #7]
   16aa6:	f24b 634c 	movw	r3, #46668	; 0xb64c
   16aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16aae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16ab2:	0a1b      	lsrs	r3, r3, #8
   16ab4:	b29b      	uxth	r3, r3
   16ab6:	b2db      	uxtb	r3, r3
   16ab8:	4618      	mov	r0, r3
   16aba:	f000 f9d3 	bl	16e64 <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   16abe:	79fa      	ldrb	r2, [r7, #7]
   16ac0:	f24b 634c 	movw	r3, #46668	; 0xb64c
   16ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ac8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16acc:	b2db      	uxtb	r3, r3
   16ace:	4618      	mov	r0, r3
   16ad0:	f000 f9c8 	bl	16e64 <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16ad4:	79fb      	ldrb	r3, [r7, #7]
   16ad6:	3301      	adds	r3, #1
   16ad8:	71fb      	strb	r3, [r7, #7]
   16ada:	79fb      	ldrb	r3, [r7, #7]
   16adc:	2b09      	cmp	r3, #9
   16ade:	d9e1      	bls.n	16aa4 <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   16ae0:	200a      	movs	r0, #10
   16ae2:	f000 f9bf 	bl	16e64 <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   16ae6:	3708      	adds	r7, #8
   16ae8:	46bd      	mov	sp, r7
   16aea:	bd80      	pop	{r7, pc}

00016aec <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   16aec:	b5b0      	push	{r4, r5, r7, lr}
   16aee:	b084      	sub	sp, #16
   16af0:	af00      	add	r7, sp, #0
   16af2:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   16af4:	687b      	ldr	r3, [r7, #4]
   16af6:	330a      	adds	r3, #10
   16af8:	881b      	ldrh	r3, [r3, #0]
   16afa:	b21b      	sxth	r3, r3
   16afc:	005b      	lsls	r3, r3, #1
   16afe:	4618      	mov	r0, r3
   16b00:	f000 fef0 	bl	178e4 <__aeabi_i2d>
   16b04:	4602      	mov	r2, r0
   16b06:	460b      	mov	r3, r1
   16b08:	4610      	mov	r0, r2
   16b0a:	4619      	mov	r1, r3
   16b0c:	a3a6      	add	r3, pc, #664	; (adr r3, 16da8 <servo_set+0x2bc>)
   16b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   16b12:	f000 ff4d 	bl	179b0 <__aeabi_dmul>
   16b16:	4602      	mov	r2, r0
   16b18:	460b      	mov	r3, r1
   16b1a:	4610      	mov	r0, r2
   16b1c:	4619      	mov	r1, r3
   16b1e:	f001 f9e1 	bl	17ee4 <__aeabi_d2iz>
   16b22:	4603      	mov	r3, r0
   16b24:	b29b      	uxth	r3, r3
   16b26:	b29b      	uxth	r3, r3
   16b28:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16b2c:	81fb      	strh	r3, [r7, #14]
   16b2e:	89fb      	ldrh	r3, [r7, #14]
   16b30:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16b34:	d307      	bcc.n	16b46 <servo_set+0x5a>
   16b36:	89fb      	ldrh	r3, [r7, #14]
   16b38:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16b3c:	bf28      	it	cs
   16b3e:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16b42:	b29a      	uxth	r2, r3
   16b44:	e001      	b.n	16b4a <servo_set+0x5e>
   16b46:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16b4a:	f24b 634c 	movw	r3, #46668	; 0xb64c
   16b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b52:	80da      	strh	r2, [r3, #6]
   16b54:	687b      	ldr	r3, [r7, #4]
   16b56:	881b      	ldrh	r3, [r3, #0]
   16b58:	b21b      	sxth	r3, r3
   16b5a:	005b      	lsls	r3, r3, #1
   16b5c:	4618      	mov	r0, r3
   16b5e:	f000 fec1 	bl	178e4 <__aeabi_i2d>
   16b62:	4602      	mov	r2, r0
   16b64:	460b      	mov	r3, r1
   16b66:	4610      	mov	r0, r2
   16b68:	4619      	mov	r1, r3
   16b6a:	a38f      	add	r3, pc, #572	; (adr r3, 16da8 <servo_set+0x2bc>)
   16b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16b70:	f000 ff1e 	bl	179b0 <__aeabi_dmul>
   16b74:	4602      	mov	r2, r0
   16b76:	460b      	mov	r3, r1
   16b78:	4610      	mov	r0, r2
   16b7a:	4619      	mov	r1, r3
   16b7c:	f001 f9b2 	bl	17ee4 <__aeabi_d2iz>
   16b80:	4603      	mov	r3, r0
   16b82:	b29b      	uxth	r3, r3
   16b84:	b29b      	uxth	r3, r3
   16b86:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16b8a:	81fb      	strh	r3, [r7, #14]
   16b8c:	89fb      	ldrh	r3, [r7, #14]
   16b8e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16b92:	d307      	bcc.n	16ba4 <servo_set+0xb8>
   16b94:	89fb      	ldrh	r3, [r7, #14]
   16b96:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16b9a:	bf28      	it	cs
   16b9c:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16ba0:	b29a      	uxth	r2, r3
   16ba2:	e001      	b.n	16ba8 <servo_set+0xbc>
   16ba4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16ba8:	f24b 634c 	movw	r3, #46668	; 0xb64c
   16bac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16bb0:	825a      	strh	r2, [r3, #18]
   16bb2:	687b      	ldr	r3, [r7, #4]
   16bb4:	3304      	adds	r3, #4
   16bb6:	881b      	ldrh	r3, [r3, #0]
   16bb8:	b21b      	sxth	r3, r3
   16bba:	4618      	mov	r0, r3
   16bbc:	f000 fe92 	bl	178e4 <__aeabi_i2d>
   16bc0:	4602      	mov	r2, r0
   16bc2:	460b      	mov	r3, r1
   16bc4:	4610      	mov	r0, r2
   16bc6:	4619      	mov	r1, r3
   16bc8:	a379      	add	r3, pc, #484	; (adr r3, 16db0 <servo_set+0x2c4>)
   16bca:	e9d3 2300 	ldrd	r2, r3, [r3]
   16bce:	f000 feef 	bl	179b0 <__aeabi_dmul>
   16bd2:	4602      	mov	r2, r0
   16bd4:	460b      	mov	r3, r1
   16bd6:	4610      	mov	r0, r2
   16bd8:	4619      	mov	r1, r3
   16bda:	f001 f983 	bl	17ee4 <__aeabi_d2iz>
   16bde:	4603      	mov	r3, r0
   16be0:	b29b      	uxth	r3, r3
   16be2:	b29b      	uxth	r3, r3
   16be4:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   16be8:	3320      	adds	r3, #32
   16bea:	81fb      	strh	r3, [r7, #14]
   16bec:	89fb      	ldrh	r3, [r7, #14]
   16bee:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16bf2:	d307      	bcc.n	16c04 <servo_set+0x118>
   16bf4:	89fb      	ldrh	r3, [r7, #14]
   16bf6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16bfa:	bf28      	it	cs
   16bfc:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16c00:	b29a      	uxth	r2, r3
   16c02:	e001      	b.n	16c08 <servo_set+0x11c>
   16c04:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16c08:	f24b 634c 	movw	r3, #46668	; 0xb64c
   16c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c10:	819a      	strh	r2, [r3, #12]
   16c12:	687b      	ldr	r3, [r7, #4]
   16c14:	885b      	ldrh	r3, [r3, #2]
   16c16:	81bb      	strh	r3, [r7, #12]
   16c18:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16c1c:	2b00      	cmp	r3, #0
   16c1e:	dd06      	ble.n	16c2e <servo_set+0x142>
   16c20:	f04f 0400 	mov.w	r4, #0
   16c24:	f04f 0500 	mov.w	r5, #0
   16c28:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16c2c:	e002      	b.n	16c34 <servo_set+0x148>
   16c2e:	a562      	add	r5, pc, #392	; (adr r5, 16db8 <servo_set+0x2cc>)
   16c30:	e9d5 4500 	ldrd	r4, r5, [r5]
   16c34:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16c38:	4618      	mov	r0, r3
   16c3a:	f000 fe53 	bl	178e4 <__aeabi_i2d>
   16c3e:	4602      	mov	r2, r0
   16c40:	460b      	mov	r3, r1
   16c42:	4620      	mov	r0, r4
   16c44:	4629      	mov	r1, r5
   16c46:	f000 feb3 	bl	179b0 <__aeabi_dmul>
   16c4a:	4602      	mov	r2, r0
   16c4c:	460b      	mov	r3, r1
   16c4e:	4610      	mov	r0, r2
   16c50:	4619      	mov	r1, r3
   16c52:	a35b      	add	r3, pc, #364	; (adr r3, 16dc0 <servo_set+0x2d4>)
   16c54:	e9d3 2300 	ldrd	r2, r3, [r3]
   16c58:	f000 feaa 	bl	179b0 <__aeabi_dmul>
   16c5c:	4602      	mov	r2, r0
   16c5e:	460b      	mov	r3, r1
   16c60:	4610      	mov	r0, r2
   16c62:	4619      	mov	r1, r3
   16c64:	f001 f93e 	bl	17ee4 <__aeabi_d2iz>
   16c68:	4603      	mov	r3, r0
   16c6a:	b29b      	uxth	r3, r3
   16c6c:	b29b      	uxth	r3, r3
   16c6e:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   16c72:	81fb      	strh	r3, [r7, #14]
   16c74:	89fb      	ldrh	r3, [r7, #14]
   16c76:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16c7a:	d307      	bcc.n	16c8c <servo_set+0x1a0>
   16c7c:	89fb      	ldrh	r3, [r7, #14]
   16c7e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16c82:	bf28      	it	cs
   16c84:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16c88:	b29a      	uxth	r2, r3
   16c8a:	e001      	b.n	16c90 <servo_set+0x1a4>
   16c8c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16c90:	f24b 634c 	movw	r3, #46668	; 0xb64c
   16c94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c98:	801a      	strh	r2, [r3, #0]
   16c9a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16c9e:	2b00      	cmp	r3, #0
   16ca0:	dd03      	ble.n	16caa <servo_set+0x1be>
   16ca2:	a545      	add	r5, pc, #276	; (adr r5, 16db8 <servo_set+0x2cc>)
   16ca4:	e9d5 4500 	ldrd	r4, r5, [r5]
   16ca8:	e005      	b.n	16cb6 <servo_set+0x1ca>
   16caa:	f04f 0400 	mov.w	r4, #0
   16cae:	f04f 0500 	mov.w	r5, #0
   16cb2:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16cb6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16cba:	4618      	mov	r0, r3
   16cbc:	f000 fe12 	bl	178e4 <__aeabi_i2d>
   16cc0:	4602      	mov	r2, r0
   16cc2:	460b      	mov	r3, r1
   16cc4:	4620      	mov	r0, r4
   16cc6:	4629      	mov	r1, r5
   16cc8:	f000 fe72 	bl	179b0 <__aeabi_dmul>
   16ccc:	4602      	mov	r2, r0
   16cce:	460b      	mov	r3, r1
   16cd0:	4610      	mov	r0, r2
   16cd2:	4619      	mov	r1, r3
   16cd4:	a33c      	add	r3, pc, #240	; (adr r3, 16dc8 <servo_set+0x2dc>)
   16cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
   16cda:	f000 fe69 	bl	179b0 <__aeabi_dmul>
   16cde:	4602      	mov	r2, r0
   16ce0:	460b      	mov	r3, r1
   16ce2:	4610      	mov	r0, r2
   16ce4:	4619      	mov	r1, r3
   16ce6:	f001 f8fd 	bl	17ee4 <__aeabi_d2iz>
   16cea:	4603      	mov	r3, r0
   16cec:	b29b      	uxth	r3, r3
   16cee:	b29b      	uxth	r3, r3
   16cf0:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   16cf4:	3320      	adds	r3, #32
   16cf6:	81fb      	strh	r3, [r7, #14]
   16cf8:	89fb      	ldrh	r3, [r7, #14]
   16cfa:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16cfe:	d307      	bcc.n	16d10 <servo_set+0x224>
   16d00:	89fb      	ldrh	r3, [r7, #14]
   16d02:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16d06:	bf28      	it	cs
   16d08:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16d0c:	b29a      	uxth	r2, r3
   16d0e:	e001      	b.n	16d14 <servo_set+0x228>
   16d10:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16d14:	f24b 634c 	movw	r3, #46668	; 0xb64c
   16d18:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d1c:	809a      	strh	r2, [r3, #4]
   16d1e:	687b      	ldr	r3, [r7, #4]
   16d20:	3306      	adds	r3, #6
   16d22:	881b      	ldrh	r3, [r3, #0]
   16d24:	b21b      	sxth	r3, r3
   16d26:	4618      	mov	r0, r3
   16d28:	f000 fddc 	bl	178e4 <__aeabi_i2d>
   16d2c:	4604      	mov	r4, r0
   16d2e:	460d      	mov	r5, r1
   16d30:	687b      	ldr	r3, [r7, #4]
   16d32:	3302      	adds	r3, #2
   16d34:	881b      	ldrh	r3, [r3, #0]
   16d36:	b21b      	sxth	r3, r3
   16d38:	4618      	mov	r0, r3
   16d3a:	f000 fdd3 	bl	178e4 <__aeabi_i2d>
   16d3e:	4602      	mov	r2, r0
   16d40:	460b      	mov	r3, r1
   16d42:	4620      	mov	r0, r4
   16d44:	4629      	mov	r1, r5
   16d46:	f000 fc81 	bl	1764c <__adddf3>
   16d4a:	4602      	mov	r2, r0
   16d4c:	460b      	mov	r3, r1
   16d4e:	4610      	mov	r0, r2
   16d50:	4619      	mov	r1, r3
   16d52:	a31f      	add	r3, pc, #124	; (adr r3, 16dd0 <servo_set+0x2e4>)
   16d54:	e9d3 2300 	ldrd	r2, r3, [r3]
   16d58:	f000 fe2a 	bl	179b0 <__aeabi_dmul>
   16d5c:	4602      	mov	r2, r0
   16d5e:	460b      	mov	r3, r1
   16d60:	4610      	mov	r0, r2
   16d62:	4619      	mov	r1, r3
   16d64:	f001 f8be 	bl	17ee4 <__aeabi_d2iz>
   16d68:	4603      	mov	r3, r0
   16d6a:	b29b      	uxth	r3, r3
   16d6c:	b29b      	uxth	r3, r3
   16d6e:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   16d72:	3320      	adds	r3, #32
   16d74:	81fb      	strh	r3, [r7, #14]
   16d76:	89fb      	ldrh	r3, [r7, #14]
   16d78:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16d7c:	d307      	bcc.n	16d8e <servo_set+0x2a2>
   16d7e:	89fb      	ldrh	r3, [r7, #14]
   16d80:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16d84:	bf28      	it	cs
   16d86:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16d8a:	b29a      	uxth	r2, r3
   16d8c:	e001      	b.n	16d92 <servo_set+0x2a6>
   16d8e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16d92:	f24b 634c 	movw	r3, #46668	; 0xb64c
   16d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d9a:	81da      	strh	r2, [r3, #14]
}
   16d9c:	3710      	adds	r7, #16
   16d9e:	46bd      	mov	sp, r7
   16da0:	bdb0      	pop	{r4, r5, r7, pc}
   16da2:	bf00      	nop
   16da4:	f3af 8000 	nop.w
   16da8:	aaaa9ef0 	.word	0xaaaa9ef0
   16dac:	3feaaaaa 	.word	0x3feaaaaa
   16db0:	fc96473e 	.word	0xfc96473e
   16db4:	3fdfc962 	.word	0x3fdfc962
   16db8:	51eb851f 	.word	0x51eb851f
   16dbc:	3fe51eb8 	.word	0x3fe51eb8
   16dc0:	9999999a 	.word	0x9999999a
   16dc4:	bfe19999 	.word	0xbfe19999
   16dc8:	aaaa9ef0 	.word	0xaaaa9ef0
   16dcc:	bfe0aaaa 	.word	0xbfe0aaaa
   16dd0:	eeeed77a 	.word	0xeeeed77a
   16dd4:	bfdeeeee 	.word	0xbfdeeeee

00016dd8 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   16dd8:	b480      	push	{r7}
   16dda:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   16ddc:	f242 0320 	movw	r3, #8224	; 0x2020
   16de0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16de4:	2200      	movs	r2, #0
   16de6:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   16de8:	f242 0309 	movw	r3, #8201	; 0x2009
   16dec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16df0:	2219      	movs	r2, #25
   16df2:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   16df4:	f242 030b 	movw	r3, #8203	; 0x200b
   16df8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16dfc:	2200      	movs	r2, #0
   16dfe:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   16e00:	f242 030a 	movw	r3, #8202	; 0x200a
   16e04:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e08:	2208      	movs	r2, #8
   16e0a:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   16e0c:	f242 0320 	movw	r3, #8224	; 0x2020
   16e10:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e14:	2286      	movs	r2, #134	; 0x86
   16e16:	701a      	strb	r2, [r3, #0]
}
   16e18:	46bd      	mov	sp, r7
   16e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
   16e1e:	4770      	bx	lr

00016e20 <uart_init_rx>:

void uart_init_rx() {
   16e20:	b480      	push	{r7}
   16e22:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   16e24:	f242 030a 	movw	r3, #8202	; 0x200a
   16e28:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e2c:	f242 020a 	movw	r2, #8202	; 0x200a
   16e30:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16e34:	7812      	ldrb	r2, [r2, #0]
   16e36:	b2d2      	uxtb	r2, r2
   16e38:	f042 0210 	orr.w	r2, r2, #16
   16e3c:	b2d2      	uxtb	r2, r2
   16e3e:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   16e40:	f242 030a 	movw	r3, #8202	; 0x200a
   16e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e48:	f242 020a 	movw	r2, #8202	; 0x200a
   16e4c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16e50:	7812      	ldrb	r2, [r2, #0]
   16e52:	b2d2      	uxtb	r2, r2
   16e54:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16e58:	b2d2      	uxtb	r2, r2
   16e5a:	701a      	strb	r2, [r3, #0]
}
   16e5c:	46bd      	mov	sp, r7
   16e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16e62:	4770      	bx	lr

00016e64 <uart_transmit>:

void uart_transmit( unsigned char data ) {
   16e64:	b480      	push	{r7}
   16e66:	b083      	sub	sp, #12
   16e68:	af00      	add	r7, sp, #0
   16e6a:	4603      	mov	r3, r0
   16e6c:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   16e6e:	f242 030a 	movw	r3, #8202	; 0x200a
   16e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e76:	781b      	ldrb	r3, [r3, #0]
   16e78:	b2db      	uxtb	r3, r3
   16e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   16e7e:	2b00      	cmp	r3, #0
   16e80:	d028      	beq.n	16ed4 <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   16e82:	f24b 6361 	movw	r3, #46689	; 0xb661
   16e86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e8a:	781b      	ldrb	r3, [r3, #0]
   16e8c:	b2db      	uxtb	r3, r3
   16e8e:	461a      	mov	r2, r3
   16e90:	f24b 6360 	movw	r3, #46688	; 0xb660
   16e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e98:	781b      	ldrb	r3, [r3, #0]
   16e9a:	3301      	adds	r3, #1
   16e9c:	429a      	cmp	r2, r3
   16e9e:	d100      	bne.n	16ea2 <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   16ea0:	e02c      	b.n	16efc <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   16ea2:	f24b 6360 	movw	r3, #46688	; 0xb660
   16ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16eaa:	781b      	ldrb	r3, [r3, #0]
   16eac:	461a      	mov	r2, r3
   16eae:	f24b 6364 	movw	r3, #46692	; 0xb664
   16eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16eb6:	79f9      	ldrb	r1, [r7, #7]
   16eb8:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   16eba:	f24b 6360 	movw	r3, #46688	; 0xb660
   16ebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ec2:	781b      	ldrb	r3, [r3, #0]
   16ec4:	3301      	adds	r3, #1
   16ec6:	b2da      	uxtb	r2, r3
   16ec8:	f24b 6360 	movw	r3, #46688	; 0xb660
   16ecc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ed0:	701a      	strb	r2, [r3, #0]
   16ed2:	e013      	b.n	16efc <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   16ed4:	f242 030c 	movw	r3, #8204	; 0x200c
   16ed8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16edc:	79fa      	ldrb	r2, [r7, #7]
   16ede:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   16ee0:	f242 030a 	movw	r3, #8202	; 0x200a
   16ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ee8:	f242 020a 	movw	r2, #8202	; 0x200a
   16eec:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16ef0:	7812      	ldrb	r2, [r2, #0]
   16ef2:	b2d2      	uxtb	r2, r2
   16ef4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16ef8:	b2d2      	uxtb	r2, r2
   16efa:	701a      	strb	r2, [r3, #0]
  }
}
   16efc:	370c      	adds	r7, #12
   16efe:	46bd      	mov	sp, r7
   16f00:	f85d 7b04 	ldr.w	r7, [sp], #4
   16f04:	4770      	bx	lr
   16f06:	bf00      	nop

00016f08 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   16f08:	b590      	push	{r4, r7, lr}
   16f0a:	b089      	sub	sp, #36	; 0x24
   16f0c:	af00      	add	r7, sp, #0
   16f0e:	4603      	mov	r3, r0
   16f10:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   16f12:	f648 1324 	movw	r3, #35108	; 0x8924
   16f16:	f2c0 0301 	movt	r3, #1
   16f1a:	f107 040c 	add.w	r4, r7, #12
   16f1e:	6818      	ldr	r0, [r3, #0]
   16f20:	6859      	ldr	r1, [r3, #4]
   16f22:	689a      	ldr	r2, [r3, #8]
   16f24:	68db      	ldr	r3, [r3, #12]
   16f26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   16f28:	79fb      	ldrb	r3, [r7, #7]
   16f2a:	091b      	lsrs	r3, r3, #4
   16f2c:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   16f2e:	79fb      	ldrb	r3, [r7, #7]
   16f30:	f003 030f 	and.w	r3, r3, #15
   16f34:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   16f36:	230f      	movs	r3, #15
   16f38:	77fb      	strb	r3, [r7, #31]
        low = 15;
   16f3a:	230f      	movs	r3, #15
   16f3c:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   16f3e:	7ffb      	ldrb	r3, [r7, #31]
   16f40:	f107 0220 	add.w	r2, r7, #32
   16f44:	4413      	add	r3, r2
   16f46:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   16f4a:	4618      	mov	r0, r3
   16f4c:	f7ff ff8a 	bl	16e64 <uart_transmit>
  uart_transmit(hex[low]);
   16f50:	7fbb      	ldrb	r3, [r7, #30]
   16f52:	f107 0220 	add.w	r2, r7, #32
   16f56:	4413      	add	r3, r2
   16f58:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   16f5c:	4618      	mov	r0, r3
   16f5e:	f7ff ff81 	bl	16e64 <uart_transmit>
} 
   16f62:	3724      	adds	r7, #36	; 0x24
   16f64:	46bd      	mov	sp, r7
   16f66:	bd90      	pop	{r4, r7, pc}

00016f68 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   16f68:	b580      	push	{r7, lr}
   16f6a:	b084      	sub	sp, #16
   16f6c:	af00      	add	r7, sp, #0
   16f6e:	4603      	mov	r3, r0
   16f70:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   16f72:	88fb      	ldrh	r3, [r7, #6]
   16f74:	0a1b      	lsrs	r3, r3, #8
   16f76:	b29b      	uxth	r3, r3
   16f78:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   16f7a:	88fb      	ldrh	r3, [r7, #6]
   16f7c:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   16f7e:	7bfb      	ldrb	r3, [r7, #15]
   16f80:	4618      	mov	r0, r3
   16f82:	f7ff ffc1 	bl	16f08 <uart_print_hex>
  uart_print_hex(low);
   16f86:	7bbb      	ldrb	r3, [r7, #14]
   16f88:	4618      	mov	r0, r3
   16f8a:	f7ff ffbd 	bl	16f08 <uart_print_hex>
}
   16f8e:	3710      	adds	r7, #16
   16f90:	46bd      	mov	sp, r7
   16f92:	bd80      	pop	{r7, pc}

00016f94 <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   16f94:	b580      	push	{r7, lr}
   16f96:	b084      	sub	sp, #16
   16f98:	af00      	add	r7, sp, #0
   16f9a:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   16f9c:	2300      	movs	r3, #0
   16f9e:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   16fa0:	e009      	b.n	16fb6 <uart_print_string+0x22>
    uart_transmit(s[i]);
   16fa2:	7bfb      	ldrb	r3, [r7, #15]
   16fa4:	687a      	ldr	r2, [r7, #4]
   16fa6:	4413      	add	r3, r2
   16fa8:	781b      	ldrb	r3, [r3, #0]
   16faa:	4618      	mov	r0, r3
   16fac:	f7ff ff5a 	bl	16e64 <uart_transmit>
    i++;
   16fb0:	7bfb      	ldrb	r3, [r7, #15]
   16fb2:	3301      	adds	r3, #1
   16fb4:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   16fb6:	7bfb      	ldrb	r3, [r7, #15]
   16fb8:	687a      	ldr	r2, [r7, #4]
   16fba:	4413      	add	r3, r2
   16fbc:	781b      	ldrb	r3, [r3, #0]
   16fbe:	2b00      	cmp	r3, #0
   16fc0:	d1ef      	bne.n	16fa2 <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   16fc2:	3710      	adds	r7, #16
   16fc4:	46bd      	mov	sp, r7
   16fc6:	bd80      	pop	{r7, pc}

00016fc8 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   16fc8:	b480      	push	{r7}
   16fca:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   16fcc:	f24b 6360 	movw	r3, #46688	; 0xb660
   16fd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16fd4:	781a      	ldrb	r2, [r3, #0]
   16fd6:	f24b 6361 	movw	r3, #46689	; 0xb661
   16fda:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16fde:	781b      	ldrb	r3, [r3, #0]
   16fe0:	b2db      	uxtb	r3, r3
   16fe2:	429a      	cmp	r2, r3
   16fe4:	d10e      	bne.n	17004 <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   16fe6:	f242 030a 	movw	r3, #8202	; 0x200a
   16fea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16fee:	f242 020a 	movw	r2, #8202	; 0x200a
   16ff2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16ff6:	7812      	ldrb	r2, [r2, #0]
   16ff8:	b2d2      	uxtb	r2, r2
   16ffa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   16ffe:	b2d2      	uxtb	r2, r2
   17000:	701a      	strb	r2, [r3, #0]
   17002:	e01d      	b.n	17040 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   17004:	f242 030c 	movw	r3, #8204	; 0x200c
   17008:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1700c:	f24b 6261 	movw	r2, #46689	; 0xb661
   17010:	f2c2 0200 	movt	r2, #8192	; 0x2000
   17014:	7812      	ldrb	r2, [r2, #0]
   17016:	b2d2      	uxtb	r2, r2
   17018:	4611      	mov	r1, r2
   1701a:	f24b 6264 	movw	r2, #46692	; 0xb664
   1701e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   17022:	5c52      	ldrb	r2, [r2, r1]
   17024:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   17026:	f24b 6361 	movw	r3, #46689	; 0xb661
   1702a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1702e:	781b      	ldrb	r3, [r3, #0]
   17030:	b2db      	uxtb	r3, r3
   17032:	3301      	adds	r3, #1
   17034:	b2da      	uxtb	r2, r3
   17036:	f24b 6361 	movw	r3, #46689	; 0xb661
   1703a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1703e:	701a      	strb	r2, [r3, #0]
  }
}
   17040:	46bd      	mov	sp, r7
   17042:	f85d 7b04 	ldr.w	r7, [sp], #4
   17046:	4770      	bx	lr

00017048 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   17048:	b580      	push	{r7, lr}
   1704a:	b082      	sub	sp, #8
   1704c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   1704e:	2010      	movs	r0, #16
   17050:	2101      	movs	r1, #1
   17052:	f7e9 feb5 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   17056:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1705a:	f2c4 0001 	movt	r0, #16385	; 0x4001
   1705e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   17062:	2201      	movs	r2, #1
   17064:	f7ea f9bc 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   17068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1706c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   1706e:	2310      	movs	r3, #16
   17070:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17072:	2303      	movs	r3, #3
   17074:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   17076:	1d3b      	adds	r3, r7, #4
   17078:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1707c:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17080:	4619      	mov	r1, r3
   17082:	f7ea f871 	bl	1168 <GPIO_Init>
}
   17086:	3708      	adds	r7, #8
   17088:	46bd      	mov	sp, r7
   1708a:	bd80      	pop	{r7, pc}

0001708c <init_button>:

void init_button(void)
{
   1708c:	b580      	push	{r7, lr}
   1708e:	b082      	sub	sp, #8
   17090:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   17092:	2004      	movs	r0, #4
   17094:	2101      	movs	r1, #1
   17096:	f7e9 fe93 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   1709a:	2301      	movs	r3, #1
   1709c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   1709e:	2304      	movs	r3, #4
   170a0:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   170a2:	2303      	movs	r3, #3
   170a4:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   170a6:	1d3b      	adds	r3, r7, #4
   170a8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   170ac:	f2c4 0001 	movt	r0, #16385	; 0x4001
   170b0:	4619      	mov	r1, r3
   170b2:	f7ea f859 	bl	1168 <GPIO_Init>
}
   170b6:	3708      	adds	r7, #8
   170b8:	46bd      	mov	sp, r7
   170ba:	bd80      	pop	{r7, pc}

000170bc <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   170bc:	b580      	push	{r7, lr}
   170be:	b084      	sub	sp, #16
   170c0:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   170c2:	2001      	movs	r0, #1
   170c4:	2101      	movs	r1, #1
   170c6:	f7e9 fe7b 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   170ca:	2000      	movs	r0, #0
   170cc:	2100      	movs	r1, #0
   170ce:	f7ea fa7f 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   170d2:	2301      	movs	r3, #1
   170d4:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   170d6:	2300      	movs	r3, #0
   170d8:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   170da:	2308      	movs	r3, #8
   170dc:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   170de:	2301      	movs	r3, #1
   170e0:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   170e2:	f107 0308 	add.w	r3, r7, #8
   170e6:	4618      	mov	r0, r3
   170e8:	f7ea ff78 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   170ec:	2306      	movs	r3, #6
   170ee:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   170f0:	230f      	movs	r3, #15
   170f2:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   170f4:	230f      	movs	r3, #15
   170f6:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   170f8:	2301      	movs	r3, #1
   170fa:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   170fc:	1d3b      	adds	r3, r7, #4
   170fe:	4618      	mov	r0, r3
   17100:	f7eb f8a6 	bl	2250 <NVIC_Init>
}
   17104:	3710      	adds	r7, #16
   17106:	46bd      	mov	sp, r7
   17108:	bd80      	pop	{r7, pc}
   1710a:	bf00      	nop

0001710c <init_rs232>:

void init_rs232(void)
{
   1710c:	b580      	push	{r7, lr}
   1710e:	b086      	sub	sp, #24
   17110:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   17112:	2005      	movs	r0, #5
   17114:	2101      	movs	r1, #1
   17116:	f7e9 fe53 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   1711a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   1711e:	2101      	movs	r1, #1
   17120:	f7e9 fe76 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   17124:	2308      	movs	r3, #8
   17126:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   17128:	2304      	movs	r3, #4
   1712a:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   1712c:	1d3b      	adds	r3, r7, #4
   1712e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   17132:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17136:	4619      	mov	r1, r3
   17138:	f7ea f816 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   1713c:	2304      	movs	r3, #4
   1713e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17140:	2303      	movs	r3, #3
   17142:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   17144:	2318      	movs	r3, #24
   17146:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   17148:	1d3b      	adds	r3, r7, #4
   1714a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   1714e:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17152:	4619      	mov	r1, r3
   17154:	f7ea f808 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   17158:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   1715c:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   1715e:	2300      	movs	r3, #0
   17160:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   17162:	2300      	movs	r3, #0
   17164:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   17166:	2300      	movs	r3, #0
   17168:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   1716a:	2300      	movs	r3, #0
   1716c:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   1716e:	230c      	movs	r3, #12
   17170:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   17172:	f107 0308 	add.w	r3, r7, #8
   17176:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1717a:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1717e:	4619      	mov	r1, r3
   17180:	f7ea fada 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   17184:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17188:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1718c:	2101      	movs	r1, #1
   1718e:	f7ea fbf1 	bl	1974 <USART_Cmd>
}
   17192:	3718      	adds	r7, #24
   17194:	46bd      	mov	sp, r7
   17196:	bd80      	pop	{r7, pc}

00017198 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   17198:	b580      	push	{r7, lr}
   1719a:	b082      	sub	sp, #8
   1719c:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   1719e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   171a2:	f2c4 0000 	movt	r0, #16384	; 0x4000
   171a6:	f240 7127 	movw	r1, #1831	; 0x727
   171aa:	2200      	movs	r2, #0
   171ac:	f7ea fc02 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   171b0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   171b4:	f2c4 0000 	movt	r0, #16384	; 0x4000
   171b8:	f240 5125 	movw	r1, #1317	; 0x525
   171bc:	2201      	movs	r2, #1
   171be:	f7ea fbf9 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   171c2:	2326      	movs	r3, #38	; 0x26
   171c4:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   171c6:	2300      	movs	r3, #0
   171c8:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   171ca:	2301      	movs	r3, #1
   171cc:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   171ce:	1d3b      	adds	r3, r7, #4
   171d0:	4618      	mov	r0, r3
   171d2:	f7eb f83d 	bl	2250 <NVIC_Init>
}
   171d6:	3708      	adds	r7, #8
   171d8:	46bd      	mov	sp, r7
   171da:	bd80      	pop	{r7, pc}

000171dc <enable_rs232>:

void enable_rs232(void)
{
   171dc:	b580      	push	{r7, lr}
   171de:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   171e0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   171e4:	f2c4 0000 	movt	r0, #16384	; 0x4000
   171e8:	2101      	movs	r1, #1
   171ea:	f7ea fbc3 	bl	1974 <USART_Cmd>
}
   171ee:	bd80      	pop	{r7, pc}

000171f0 <send_byte>:

void send_byte(uint8_t b)
{
   171f0:	b580      	push	{r7, lr}
   171f2:	b082      	sub	sp, #8
   171f4:	af00      	add	r7, sp, #0
   171f6:	4603      	mov	r3, r0
   171f8:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   171fa:	bf00      	nop
   171fc:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17200:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17204:	2180      	movs	r1, #128	; 0x80
   17206:	f7ea fe21 	bl	1e4c <USART_GetFlagStatus>
   1720a:	4603      	mov	r3, r0
   1720c:	2b00      	cmp	r3, #0
   1720e:	d0f5      	beq.n	171fc <send_byte+0xc>
    
    GPIOC->ODR ^= 0x00001000;
   17210:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   17214:	f2c4 0301 	movt	r3, #16385	; 0x4001
   17218:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1721c:	f2c4 0201 	movt	r2, #16385	; 0x4001
   17220:	68d2      	ldr	r2, [r2, #12]
   17222:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   17226:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   17228:	79fb      	ldrb	r3, [r7, #7]
   1722a:	b29b      	uxth	r3, r3
   1722c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17230:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17234:	4619      	mov	r1, r3
   17236:	f7ea fcbd 	bl	1bb4 <USART_SendData>
}
   1723a:	3708      	adds	r7, #8
   1723c:	46bd      	mov	sp, r7
   1723e:	bd80      	pop	{r7, pc}

00017240 <send_num>:
/**
 *  can print a num which is smaller than 10
 */

void send_num(uint8_t b)
{
   17240:	b580      	push	{r7, lr}
   17242:	b082      	sub	sp, #8
   17244:	af00      	add	r7, sp, #0
   17246:	4603      	mov	r3, r0
   17248:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   1724a:	79fb      	ldrb	r3, [r7, #7]
   1724c:	3330      	adds	r3, #48	; 0x30
   1724e:	b2db      	uxtb	r3, r3
   17250:	4618      	mov	r0, r3
   17252:	f7ff ffcd 	bl	171f0 <send_byte>
}
   17256:	3708      	adds	r7, #8
   17258:	46bd      	mov	sp, r7
   1725a:	bd80      	pop	{r7, pc}

0001725c <vPrintString>:
 * print a string
 *
 * */

void vPrintString( const char * string)
{
   1725c:	b580      	push	{r7, lr}
   1725e:	b084      	sub	sp, #16
   17260:	af00      	add	r7, sp, #0
   17262:	6078      	str	r0, [r7, #4]
    int i = 0;
   17264:	2300      	movs	r3, #0
   17266:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   17268:	e009      	b.n	1727e <vPrintString+0x22>
    {
        send_byte(string[i]);
   1726a:	68fb      	ldr	r3, [r7, #12]
   1726c:	687a      	ldr	r2, [r7, #4]
   1726e:	4413      	add	r3, r2
   17270:	781b      	ldrb	r3, [r3, #0]
   17272:	4618      	mov	r0, r3
   17274:	f7ff ffbc 	bl	171f0 <send_byte>
        i++;
   17278:	68fb      	ldr	r3, [r7, #12]
   1727a:	3301      	adds	r3, #1
   1727c:	60fb      	str	r3, [r7, #12]
 * */

void vPrintString( const char * string)
{
    int i = 0;
    while(string[i] != '\0')
   1727e:	68fb      	ldr	r3, [r7, #12]
   17280:	687a      	ldr	r2, [r7, #4]
   17282:	4413      	add	r3, r2
   17284:	781b      	ldrb	r3, [r3, #0]
   17286:	2b00      	cmp	r3, #0
   17288:	d1ef      	bne.n	1726a <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   1728a:	3710      	adds	r7, #16
   1728c:	46bd      	mov	sp, r7
   1728e:	bd80      	pop	{r7, pc}

00017290 <vPrintNumber>:
/*
 * print a number which is less than 10
 *
 * */
void vPrintNumber( const long c_num)
{
   17290:	b580      	push	{r7, lr}
   17292:	b08a      	sub	sp, #40	; 0x28
   17294:	af00      	add	r7, sp, #0
   17296:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
   17298:	2300      	movs	r3, #0
   1729a:	623b      	str	r3, [r7, #32]
    long num = c_num;
   1729c:	687b      	ldr	r3, [r7, #4]
   1729e:	61fb      	str	r3, [r7, #28]

    if(num == 0)
   172a0:	69fb      	ldr	r3, [r7, #28]
   172a2:	2b00      	cmp	r3, #0
   172a4:	d106      	bne.n	172b4 <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   172a6:	f648 1034 	movw	r0, #35124	; 0x8934
   172aa:	f2c0 0001 	movt	r0, #1
   172ae:	f7ff ffd5 	bl	1725c <vPrintString>
   172b2:	e062      	b.n	1737a <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num  )
   172b4:	e024      	b.n	17300 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   172b6:	69f9      	ldr	r1, [r7, #28]
   172b8:	f246 6367 	movw	r3, #26215	; 0x6667
   172bc:	f2c6 6366 	movt	r3, #26214	; 0x6666
   172c0:	fb83 2301 	smull	r2, r3, r3, r1
   172c4:	109a      	asrs	r2, r3, #2
   172c6:	17cb      	asrs	r3, r1, #31
   172c8:	1ad2      	subs	r2, r2, r3
   172ca:	4613      	mov	r3, r2
   172cc:	009b      	lsls	r3, r3, #2
   172ce:	4413      	add	r3, r2
   172d0:	005b      	lsls	r3, r3, #1
   172d2:	1aca      	subs	r2, r1, r3
   172d4:	b2d3      	uxtb	r3, r2
   172d6:	3330      	adds	r3, #48	; 0x30
   172d8:	b2da      	uxtb	r2, r3
   172da:	f107 010c 	add.w	r1, r7, #12
   172de:	6a3b      	ldr	r3, [r7, #32]
   172e0:	440b      	add	r3, r1
   172e2:	701a      	strb	r2, [r3, #0]
            count ++;
   172e4:	6a3b      	ldr	r3, [r7, #32]
   172e6:	3301      	adds	r3, #1
   172e8:	623b      	str	r3, [r7, #32]
            num /= 10;
   172ea:	69fa      	ldr	r2, [r7, #28]
   172ec:	f246 6367 	movw	r3, #26215	; 0x6667
   172f0:	f2c6 6366 	movt	r3, #26214	; 0x6666
   172f4:	fb83 1302 	smull	r1, r3, r3, r2
   172f8:	1099      	asrs	r1, r3, #2
   172fa:	17d3      	asrs	r3, r2, #31
   172fc:	1acb      	subs	r3, r1, r3
   172fe:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num  )
   17300:	69fb      	ldr	r3, [r7, #28]
   17302:	2b00      	cmp	r3, #0
   17304:	d1d7      	bne.n	172b6 <vPrintNumber+0x26>
            time[count] = num%10 +'0';
            count ++;
            num /= 10;

        }
        time[count] = '\0';
   17306:	f107 020c 	add.w	r2, r7, #12
   1730a:	6a3b      	ldr	r3, [r7, #32]
   1730c:	4413      	add	r3, r2
   1730e:	2200      	movs	r2, #0
   17310:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i )
   17312:	2300      	movs	r3, #0
   17314:	627b      	str	r3, [r7, #36]	; 0x24
   17316:	e020      	b.n	1735a <vPrintNumber+0xca>
        {
            tmp = time[i];
   17318:	f107 020c 	add.w	r2, r7, #12
   1731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1731e:	4413      	add	r3, r2
   17320:	781b      	ldrb	r3, [r3, #0]
   17322:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
   17324:	6a3a      	ldr	r2, [r7, #32]
   17326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17328:	1ad3      	subs	r3, r2, r3
   1732a:	3b01      	subs	r3, #1
   1732c:	f107 0228 	add.w	r2, r7, #40	; 0x28
   17330:	4413      	add	r3, r2
   17332:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
   17336:	f107 010c 	add.w	r1, r7, #12
   1733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1733c:	440b      	add	r3, r1
   1733e:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   17340:	6a3a      	ldr	r2, [r7, #32]
   17342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17344:	1ad3      	subs	r3, r2, r3
   17346:	3b01      	subs	r3, #1
   17348:	f107 0128 	add.w	r1, r7, #40	; 0x28
   1734c:	440b      	add	r3, r1
   1734e:	7efa      	ldrb	r2, [r7, #27]
   17350:	f803 2c1c 	strb.w	r2, [r3, #-28]

        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i )
   17354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17356:	3301      	adds	r3, #1
   17358:	627b      	str	r3, [r7, #36]	; 0x24
   1735a:	6a3b      	ldr	r3, [r7, #32]
   1735c:	085a      	lsrs	r2, r3, #1
   1735e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17360:	429a      	cmp	r2, r3
   17362:	d8d9      	bhi.n	17318 <vPrintNumber+0x88>
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;

        }
        vPrintString(time);
   17364:	f107 030c 	add.w	r3, r7, #12
   17368:	4618      	mov	r0, r3
   1736a:	f7ff ff77 	bl	1725c <vPrintString>
        vPrintString("\n\r");
   1736e:	f648 1038 	movw	r0, #35128	; 0x8938
   17372:	f2c0 0001 	movt	r0, #1
   17376:	f7ff ff71 	bl	1725c <vPrintString>
    }
}
   1737a:	3728      	adds	r7, #40	; 0x28
   1737c:	46bd      	mov	sp, r7
   1737e:	bd80      	pop	{r7, pc}

00017380 <vInitInitialise>:

extern xTaskComplete[NUMBEROFTASK];


void vInitInitialise()
{
   17380:	b480      	push	{r7}
   17382:	b083      	sub	sp, #12
   17384:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    for(i = 0; i < NUMBEROFTASK; ++ i)
   17386:	2300      	movs	r3, #0
   17388:	607b      	str	r3, [r7, #4]
   1738a:	e00a      	b.n	173a2 <vInitInitialise+0x22>
    {
        IS_INIT[i] = 0;
   1738c:	f24b 7364 	movw	r3, #46948	; 0xb764
   17390:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17394:	687a      	ldr	r2, [r7, #4]
   17396:	2100      	movs	r1, #0
   17398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


void vInitInitialise()
{
    portBASE_TYPE i;
    for(i = 0; i < NUMBEROFTASK; ++ i)
   1739c:	687b      	ldr	r3, [r7, #4]
   1739e:	3301      	adds	r3, #1
   173a0:	607b      	str	r3, [r7, #4]
   173a2:	687b      	ldr	r3, [r7, #4]
   173a4:	2b0c      	cmp	r3, #12
   173a6:	ddf1      	ble.n	1738c <vInitInitialise+0xc>
    {
        IS_INIT[i] = 0;
    }
}
   173a8:	370c      	adds	r7, #12
   173aa:	46bd      	mov	sp, r7
   173ac:	f85d 7b04 	ldr.w	r7, [sp], #4
   173b0:	4770      	bx	lr
   173b2:	bf00      	nop

000173b4 <main>:

#define SERVANT_STACK_SIZE 128 
int main(void)
{
   173b4:	b590      	push	{r4, r7, lr}
   173b6:	b089      	sub	sp, #36	; 0x24
   173b8:	af04      	add	r7, sp, #16
    init_led();
   173ba:	f7ff fe45 	bl	17048 <init_led>
    init_rs232();
   173be:	f7ff fea5 	bl	1710c <init_rs232>
    enable_rs232_interrupts();
   173c2:	f7ff fee9 	bl	17198 <enable_rs232_interrupts>
    enable_rs232();
   173c6:	f7ff ff09 	bl	171dc <enable_rs232>

    //vTaskCompleteInitialise();
    vInitInitialise();
   173ca:	f7ff ffd9 	bl	17380 <vInitInitialise>
    vSemaphoreInitialise();
   173ce:	f7eb fdf5 	bl	2fbc <vSemaphoreInitialise>
    vParameterInitialise();
   173d2:	f7eb fe33 	bl	303c <vParameterInitialise>
    portBASE_TYPE i,j;
    portBASE_TYPE flag = 0;
   173d6:	2300      	movs	r3, #0
   173d8:	607b      	str	r3, [r7, #4]

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);
   173da:	2301      	movs	r3, #1
   173dc:	9300      	str	r3, [sp, #0]
   173de:	4b42      	ldr	r3, [pc, #264]	; (174e8 <main+0x134>)
   173e0:	9301      	str	r3, [sp, #4]
   173e2:	2300      	movs	r3, #0
   173e4:	9302      	str	r3, [sp, #8]
   173e6:	2300      	movs	r3, #0
   173e8:	9303      	str	r3, [sp, #12]
   173ea:	f643 1035 	movw	r0, #14645	; 0x3935
   173ee:	f2c0 0000 	movt	r0, #0
   173f2:	f648 113c 	movw	r1, #35132	; 0x893c
   173f6:	f2c0 0101 	movt	r1, #1
   173fa:	2280      	movs	r2, #128	; 0x80
   173fc:	4b3b      	ldr	r3, [pc, #236]	; (174ec <main+0x138>)
   173fe:	f7ed fa05 	bl	480c <xTaskGenericCreate>

    for( i = 0; i < NUMBEROFSERVANT-1; ++ i )
   17402:	2300      	movs	r3, #0
   17404:	60fb      	str	r3, [r7, #12]
   17406:	e064      	b.n	174d2 <main+0x11e>
    {
        for(j = 0; j < NUMBEROFTASK; ++ j)
   17408:	2300      	movs	r3, #0
   1740a:	60bb      	str	r3, [r7, #8]
   1740c:	e00f      	b.n	1742e <main+0x7a>
        {
            if( i == xSensorOfTask[j] )
   1740e:	f240 0360 	movw	r3, #96	; 0x60
   17412:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17416:	68ba      	ldr	r2, [r7, #8]
   17418:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1741c:	68fb      	ldr	r3, [r7, #12]
   1741e:	429a      	cmp	r2, r3
   17420:	d102      	bne.n	17428 <main+0x74>
            {
                flag = 1;  // sensor 
   17422:	2301      	movs	r3, #1
   17424:	607b      	str	r3, [r7, #4]
                break;
   17426:	e005      	b.n	17434 <main+0x80>

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);

    for( i = 0; i < NUMBEROFSERVANT-1; ++ i )
    {
        for(j = 0; j < NUMBEROFTASK; ++ j)
   17428:	68bb      	ldr	r3, [r7, #8]
   1742a:	3301      	adds	r3, #1
   1742c:	60bb      	str	r3, [r7, #8]
   1742e:	68bb      	ldr	r3, [r7, #8]
   17430:	2b0c      	cmp	r3, #12
   17432:	ddec      	ble.n	1740e <main+0x5a>
                flag = 1;  // sensor 
                break;
            }
        }
        // create sensor 
        if(flag == 1)
   17434:	687b      	ldr	r3, [r7, #4]
   17436:	2b01      	cmp	r3, #1
   17438:	d125      	bne.n	17486 <main+0xd2>
        {
            flag = 0; 
   1743a:	2300      	movs	r3, #0
   1743c:	607b      	str	r3, [r7, #4]
            xTaskCreate( vSensor, "sensor", SERVANT_STACK_SIZE, (void *)&pvParameters[i], tskIDLE_PRIORITY + 2, &xTaskOfHandle[i] );
   1743e:	68fb      	ldr	r3, [r7, #12]
   17440:	222c      	movs	r2, #44	; 0x2c
   17442:	fb02 f203 	mul.w	r2, r2, r3
   17446:	f240 5364 	movw	r3, #1380	; 0x564
   1744a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1744e:	18d4      	adds	r4, r2, r3
   17450:	68fb      	ldr	r3, [r7, #12]
   17452:	009a      	lsls	r2, r3, #2
   17454:	f640 33f4 	movw	r3, #3060	; 0xbf4
   17458:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1745c:	4413      	add	r3, r2
   1745e:	2202      	movs	r2, #2
   17460:	9200      	str	r2, [sp, #0]
   17462:	9301      	str	r3, [sp, #4]
   17464:	2300      	movs	r3, #0
   17466:	9302      	str	r3, [sp, #8]
   17468:	2300      	movs	r3, #0
   1746a:	9303      	str	r3, [sp, #12]
   1746c:	f243 40b5 	movw	r0, #13493	; 0x34b5
   17470:	f2c0 0000 	movt	r0, #0
   17474:	f648 1148 	movw	r1, #35144	; 0x8948
   17478:	f2c0 0101 	movt	r1, #1
   1747c:	2280      	movs	r2, #128	; 0x80
   1747e:	4623      	mov	r3, r4
   17480:	f7ed f9c4 	bl	480c <xTaskGenericCreate>
   17484:	e022      	b.n	174cc <main+0x118>
        }
        else  // create servant
        {
            xTaskCreate( vServant, "servant", SERVANT_STACK_SIZE, (void *)&pvParameters[i], tskIDLE_PRIORITY + 2, &xTaskOfHandle[i] );
   17486:	68fb      	ldr	r3, [r7, #12]
   17488:	222c      	movs	r2, #44	; 0x2c
   1748a:	fb02 f203 	mul.w	r2, r2, r3
   1748e:	f240 5364 	movw	r3, #1380	; 0x564
   17492:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17496:	18d4      	adds	r4, r2, r3
   17498:	68fb      	ldr	r3, [r7, #12]
   1749a:	009a      	lsls	r2, r3, #2
   1749c:	f640 33f4 	movw	r3, #3060	; 0xbf4
   174a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   174a4:	4413      	add	r3, r2
   174a6:	2202      	movs	r2, #2
   174a8:	9200      	str	r2, [sp, #0]
   174aa:	9301      	str	r3, [sp, #4]
   174ac:	2300      	movs	r3, #0
   174ae:	9302      	str	r3, [sp, #8]
   174b0:	2300      	movs	r3, #0
   174b2:	9303      	str	r3, [sp, #12]
   174b4:	f243 7019 	movw	r0, #14105	; 0x3719
   174b8:	f2c0 0000 	movt	r0, #0
   174bc:	f648 1150 	movw	r1, #35152	; 0x8950
   174c0:	f2c0 0101 	movt	r1, #1
   174c4:	2280      	movs	r2, #128	; 0x80
   174c6:	4623      	mov	r3, r4
   174c8:	f7ed f9a0 	bl	480c <xTaskGenericCreate>
    portBASE_TYPE i,j;
    portBASE_TYPE flag = 0;

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, (void *)&pvParameters[NUMBEROFSERVANT-1],tskIDLE_PRIORITY + 1, &xTaskOfHandle[NUMBEROFSERVANT-1]);

    for( i = 0; i < NUMBEROFSERVANT-1; ++ i )
   174cc:	68fb      	ldr	r3, [r7, #12]
   174ce:	3301      	adds	r3, #1
   174d0:	60fb      	str	r3, [r7, #12]
   174d2:	68fb      	ldr	r3, [r7, #12]
   174d4:	2b21      	cmp	r3, #33	; 0x21
   174d6:	dd97      	ble.n	17408 <main+0x54>
        {
            xTaskCreate( vServant, "servant", SERVANT_STACK_SIZE, (void *)&pvParameters[i], tskIDLE_PRIORITY + 2, &xTaskOfHandle[i] );
        }
    }
    /* Start running the task. */
    vTaskStartScheduler();
   174d8:	f7ed fd16 	bl	4f08 <vTaskStartScheduler>

    return 0;
   174dc:	2300      	movs	r3, #0
}
   174de:	4618      	mov	r0, r3
   174e0:	3714      	adds	r7, #20
   174e2:	46bd      	mov	sp, r7
   174e4:	bd90      	pop	{r4, r7, pc}
   174e6:	bf00      	nop
   174e8:	20000c7c 	.word	0x20000c7c
   174ec:	20000b3c 	.word	0x20000b3c

000174f0 <myTraceCreate>:

void myTraceCreate      (){
   174f0:	b480      	push	{r7}
   174f2:	af00      	add	r7, sp, #0
}
   174f4:	46bd      	mov	sp, r7
   174f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   174fa:	4770      	bx	lr

000174fc <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   174fc:	b480      	push	{r7}
   174fe:	af00      	add	r7, sp, #0
}
   17500:	46bd      	mov	sp, r7
   17502:	f85d 7b04 	ldr.w	r7, [sp], #4
   17506:	4770      	bx	lr

00017508 <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   17508:	b480      	push	{r7}
   1750a:	af00      	add	r7, sp, #0
}
   1750c:	46bd      	mov	sp, r7
   1750e:	f85d 7b04 	ldr.w	r7, [sp], #4
   17512:	4770      	bx	lr

00017514 <vApplicationTickHook>:
 *
 * if there is any task need to be triggered at this time,
 * tick hook function would send semaphore to them.
 * */
void vApplicationTickHook( void )
{
   17514:	b580      	push	{r7, lr}
   17516:	b082      	sub	sp, #8
   17518:	af00      	add	r7, sp, #0
    portTickType xCurrentTime = xTaskGetTickCount();
   1751a:	f7ed fddf 	bl	50dc <xTaskGetTickCount>
   1751e:	6038      	str	r0, [r7, #0]
    portBASE_TYPE i;
    /* init task */
    if(xCurrentTime > 0 && xCurrentTime < 1001)
   17520:	683b      	ldr	r3, [r7, #0]
   17522:	2b00      	cmp	r3, #0
   17524:	d03f      	beq.n	175a6 <vApplicationTickHook+0x92>
   17526:	683b      	ldr	r3, [r7, #0]
   17528:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1752c:	d83b      	bhi.n	175a6 <vApplicationTickHook+0x92>
    {
        for(i = 0; i < NUMBEROFTASK; ++i)
   1752e:	2300      	movs	r3, #0
   17530:	607b      	str	r3, [r7, #4]
   17532:	e035      	b.n	175a0 <vApplicationTickHook+0x8c>
        {
            if( IS_INIT[i] == 0 && xCurrentTime % xPeriodOfTask[i] == 0 )
   17534:	f24b 7364 	movw	r3, #46948	; 0xb764
   17538:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1753c:	687a      	ldr	r2, [r7, #4]
   1753e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   17542:	2b00      	cmp	r3, #0
   17544:	d129      	bne.n	1759a <vApplicationTickHook+0x86>
   17546:	f240 032c 	movw	r3, #44	; 0x2c
   1754a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1754e:	687a      	ldr	r2, [r7, #4]
   17550:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   17554:	683b      	ldr	r3, [r7, #0]
   17556:	fbb3 f1f2 	udiv	r1, r3, r2
   1755a:	fb02 f201 	mul.w	r2, r2, r1
   1755e:	1a9b      	subs	r3, r3, r2
   17560:	2b00      	cmp	r3, #0
   17562:	d11a      	bne.n	1759a <vApplicationTickHook+0x86>
            {
                IS_INIT[i] = 1;
   17564:	f24b 7364 	movw	r3, #46948	; 0xb764
   17568:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1756c:	687a      	ldr	r2, [r7, #4]
   1756e:	2101      	movs	r1, #1
   17570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xSemaphoreGive( xBinarySemaphore[xSensorOfTask[i]] );
   17574:	f240 0360 	movw	r3, #96	; 0x60
   17578:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1757c:	687a      	ldr	r2, [r7, #4]
   1757e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   17582:	f640 3368 	movw	r3, #2920	; 0xb68
   17586:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1758a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1758e:	4618      	mov	r0, r3
   17590:	2100      	movs	r1, #0
   17592:	2200      	movs	r2, #0
   17594:	2300      	movs	r3, #0
   17596:	f7ec fe27 	bl	41e8 <xQueueGenericSend>
    portTickType xCurrentTime = xTaskGetTickCount();
    portBASE_TYPE i;
    /* init task */
    if(xCurrentTime > 0 && xCurrentTime < 1001)
    {
        for(i = 0; i < NUMBEROFTASK; ++i)
   1759a:	687b      	ldr	r3, [r7, #4]
   1759c:	3301      	adds	r3, #1
   1759e:	607b      	str	r3, [r7, #4]
   175a0:	687b      	ldr	r3, [r7, #4]
   175a2:	2b0c      	cmp	r3, #12
   175a4:	ddc6      	ble.n	17534 <vApplicationTickHook+0x20>
    }
    
    // R-Servant will be suspend when no events need to be proceeded.
    // As a result, we need to send semaphore to R-Servant to triggered it processing events 
    // when time meeting the start time of every task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
   175a6:	f240 032c 	movw	r3, #44	; 0x2c
   175aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   175ae:	681b      	ldr	r3, [r3, #0]
   175b0:	005a      	lsls	r2, r3, #1
   175b2:	683b      	ldr	r3, [r7, #0]
   175b4:	429a      	cmp	r2, r3
   175b6:	d83f      	bhi.n	17638 <vApplicationTickHook+0x124>
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
   175b8:	f240 032c 	movw	r3, #44	; 0x2c
   175bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   175c0:	681a      	ldr	r2, [r3, #0]
   175c2:	683b      	ldr	r3, [r7, #0]
   175c4:	fbb3 f1f2 	udiv	r1, r3, r2
   175c8:	fb02 f201 	mul.w	r2, r2, r1
   175cc:	1a9b      	subs	r3, r3, r2
   175ce:	2b00      	cmp	r3, #0
   175d0:	d026      	beq.n	17620 <vApplicationTickHook+0x10c>
            xCurrentTime % xPeriodOfTask[2] == 0 ||
   175d2:	f240 032c 	movw	r3, #44	; 0x2c
   175d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   175da:	689a      	ldr	r2, [r3, #8]
   175dc:	683b      	ldr	r3, [r7, #0]
   175de:	fbb3 f1f2 	udiv	r1, r3, r2
   175e2:	fb02 f201 	mul.w	r2, r2, r1
   175e6:	1a9b      	subs	r3, r3, r2
    // R-Servant will be suspend when no events need to be proceeded.
    // As a result, we need to send semaphore to R-Servant to triggered it processing events 
    // when time meeting the start time of every task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
   175e8:	2b00      	cmp	r3, #0
   175ea:	d019      	beq.n	17620 <vApplicationTickHook+0x10c>
            xCurrentTime % xPeriodOfTask[2] == 0 ||
            xCurrentTime % xPeriodOfTask[8] == 0 ||
   175ec:	f240 032c 	movw	r3, #44	; 0x2c
   175f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   175f4:	6a1a      	ldr	r2, [r3, #32]
   175f6:	683b      	ldr	r3, [r7, #0]
   175f8:	fbb3 f1f2 	udiv	r1, r3, r2
   175fc:	fb02 f201 	mul.w	r2, r2, r1
   17600:	1a9b      	subs	r3, r3, r2
    // As a result, we need to send semaphore to R-Servant to triggered it processing events 
    // when time meeting the start time of every task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
            xCurrentTime % xPeriodOfTask[2] == 0 ||
   17602:	2b00      	cmp	r3, #0
   17604:	d00c      	beq.n	17620 <vApplicationTickHook+0x10c>
            xCurrentTime % xPeriodOfTask[8] == 0 ||
            xCurrentTime % xPeriodOfTask[12] == 0)
   17606:	f240 032c 	movw	r3, #44	; 0x2c
   1760a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1760e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   17610:	683b      	ldr	r3, [r7, #0]
   17612:	fbb3 f1f2 	udiv	r1, r3, r2
   17616:	fb02 f201 	mul.w	r2, r2, r1
   1761a:	1a9b      	subs	r3, r3, r2
    // when time meeting the start time of every task period
    if( xCurrentTime >= xPeriodOfTask[0] * 2 )
    {
        if( xCurrentTime % xPeriodOfTask[0] == 0 || 
            xCurrentTime % xPeriodOfTask[2] == 0 ||
            xCurrentTime % xPeriodOfTask[8] == 0 ||
   1761c:	2b00      	cmp	r3, #0
   1761e:	d10b      	bne.n	17638 <vApplicationTickHook+0x124>
            xCurrentTime % xPeriodOfTask[12] == 0)
        {
           xSemaphoreGive( xBinarySemaphore[NUMBEROFSERVANT - 1] ); 
   17620:	f640 3368 	movw	r3, #2920	; 0xb68
   17624:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   1762c:	4618      	mov	r0, r3
   1762e:	2100      	movs	r1, #0
   17630:	2200      	movs	r2, #0
   17632:	2300      	movs	r3, #0
   17634:	f7ec fdd8 	bl	41e8 <xQueueGenericSend>
        }
    }
}
   17638:	3708      	adds	r7, #8
   1763a:	46bd      	mov	sp, r7
   1763c:	bd80      	pop	{r7, pc}
   1763e:	bf00      	nop

00017640 <__aeabi_drsub>:
   17640:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   17644:	e002      	b.n	1764c <__adddf3>
   17646:	bf00      	nop

00017648 <__aeabi_dsub>:
   17648:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001764c <__adddf3>:
   1764c:	b530      	push	{r4, r5, lr}
   1764e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   17652:	ea4f 0543 	mov.w	r5, r3, lsl #1
   17656:	ea94 0f05 	teq	r4, r5
   1765a:	bf08      	it	eq
   1765c:	ea90 0f02 	teqeq	r0, r2
   17660:	bf1f      	itttt	ne
   17662:	ea54 0c00 	orrsne.w	ip, r4, r0
   17666:	ea55 0c02 	orrsne.w	ip, r5, r2
   1766a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1766e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   17672:	f000 80e2 	beq.w	1783a <__adddf3+0x1ee>
   17676:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1767a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1767e:	bfb8      	it	lt
   17680:	426d      	neglt	r5, r5
   17682:	dd0c      	ble.n	1769e <__adddf3+0x52>
   17684:	442c      	add	r4, r5
   17686:	ea80 0202 	eor.w	r2, r0, r2
   1768a:	ea81 0303 	eor.w	r3, r1, r3
   1768e:	ea82 0000 	eor.w	r0, r2, r0
   17692:	ea83 0101 	eor.w	r1, r3, r1
   17696:	ea80 0202 	eor.w	r2, r0, r2
   1769a:	ea81 0303 	eor.w	r3, r1, r3
   1769e:	2d36      	cmp	r5, #54	; 0x36
   176a0:	bf88      	it	hi
   176a2:	bd30      	pophi	{r4, r5, pc}
   176a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   176a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   176ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   176b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   176b4:	d002      	beq.n	176bc <__adddf3+0x70>
   176b6:	4240      	negs	r0, r0
   176b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   176bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   176c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   176c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   176c8:	d002      	beq.n	176d0 <__adddf3+0x84>
   176ca:	4252      	negs	r2, r2
   176cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   176d0:	ea94 0f05 	teq	r4, r5
   176d4:	f000 80a7 	beq.w	17826 <__adddf3+0x1da>
   176d8:	f1a4 0401 	sub.w	r4, r4, #1
   176dc:	f1d5 0e20 	rsbs	lr, r5, #32
   176e0:	db0d      	blt.n	176fe <__adddf3+0xb2>
   176e2:	fa02 fc0e 	lsl.w	ip, r2, lr
   176e6:	fa22 f205 	lsr.w	r2, r2, r5
   176ea:	1880      	adds	r0, r0, r2
   176ec:	f141 0100 	adc.w	r1, r1, #0
   176f0:	fa03 f20e 	lsl.w	r2, r3, lr
   176f4:	1880      	adds	r0, r0, r2
   176f6:	fa43 f305 	asr.w	r3, r3, r5
   176fa:	4159      	adcs	r1, r3
   176fc:	e00e      	b.n	1771c <__adddf3+0xd0>
   176fe:	f1a5 0520 	sub.w	r5, r5, #32
   17702:	f10e 0e20 	add.w	lr, lr, #32
   17706:	2a01      	cmp	r2, #1
   17708:	fa03 fc0e 	lsl.w	ip, r3, lr
   1770c:	bf28      	it	cs
   1770e:	f04c 0c02 	orrcs.w	ip, ip, #2
   17712:	fa43 f305 	asr.w	r3, r3, r5
   17716:	18c0      	adds	r0, r0, r3
   17718:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1771c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17720:	d507      	bpl.n	17732 <__adddf3+0xe6>
   17722:	f04f 0e00 	mov.w	lr, #0
   17726:	f1dc 0c00 	rsbs	ip, ip, #0
   1772a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1772e:	eb6e 0101 	sbc.w	r1, lr, r1
   17732:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   17736:	d31b      	bcc.n	17770 <__adddf3+0x124>
   17738:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1773c:	d30c      	bcc.n	17758 <__adddf3+0x10c>
   1773e:	0849      	lsrs	r1, r1, #1
   17740:	ea5f 0030 	movs.w	r0, r0, rrx
   17744:	ea4f 0c3c 	mov.w	ip, ip, rrx
   17748:	f104 0401 	add.w	r4, r4, #1
   1774c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   17750:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   17754:	f080 809a 	bcs.w	1788c <__adddf3+0x240>
   17758:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1775c:	bf08      	it	eq
   1775e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17762:	f150 0000 	adcs.w	r0, r0, #0
   17766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1776a:	ea41 0105 	orr.w	r1, r1, r5
   1776e:	bd30      	pop	{r4, r5, pc}
   17770:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   17774:	4140      	adcs	r0, r0
   17776:	eb41 0101 	adc.w	r1, r1, r1
   1777a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1777e:	f1a4 0401 	sub.w	r4, r4, #1
   17782:	d1e9      	bne.n	17758 <__adddf3+0x10c>
   17784:	f091 0f00 	teq	r1, #0
   17788:	bf04      	itt	eq
   1778a:	4601      	moveq	r1, r0
   1778c:	2000      	moveq	r0, #0
   1778e:	fab1 f381 	clz	r3, r1
   17792:	bf08      	it	eq
   17794:	3320      	addeq	r3, #32
   17796:	f1a3 030b 	sub.w	r3, r3, #11
   1779a:	f1b3 0220 	subs.w	r2, r3, #32
   1779e:	da0c      	bge.n	177ba <__adddf3+0x16e>
   177a0:	320c      	adds	r2, #12
   177a2:	dd08      	ble.n	177b6 <__adddf3+0x16a>
   177a4:	f102 0c14 	add.w	ip, r2, #20
   177a8:	f1c2 020c 	rsb	r2, r2, #12
   177ac:	fa01 f00c 	lsl.w	r0, r1, ip
   177b0:	fa21 f102 	lsr.w	r1, r1, r2
   177b4:	e00c      	b.n	177d0 <__adddf3+0x184>
   177b6:	f102 0214 	add.w	r2, r2, #20
   177ba:	bfd8      	it	le
   177bc:	f1c2 0c20 	rsble	ip, r2, #32
   177c0:	fa01 f102 	lsl.w	r1, r1, r2
   177c4:	fa20 fc0c 	lsr.w	ip, r0, ip
   177c8:	bfdc      	itt	le
   177ca:	ea41 010c 	orrle.w	r1, r1, ip
   177ce:	4090      	lslle	r0, r2
   177d0:	1ae4      	subs	r4, r4, r3
   177d2:	bfa2      	ittt	ge
   177d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   177d8:	4329      	orrge	r1, r5
   177da:	bd30      	popge	{r4, r5, pc}
   177dc:	ea6f 0404 	mvn.w	r4, r4
   177e0:	3c1f      	subs	r4, #31
   177e2:	da1c      	bge.n	1781e <__adddf3+0x1d2>
   177e4:	340c      	adds	r4, #12
   177e6:	dc0e      	bgt.n	17806 <__adddf3+0x1ba>
   177e8:	f104 0414 	add.w	r4, r4, #20
   177ec:	f1c4 0220 	rsb	r2, r4, #32
   177f0:	fa20 f004 	lsr.w	r0, r0, r4
   177f4:	fa01 f302 	lsl.w	r3, r1, r2
   177f8:	ea40 0003 	orr.w	r0, r0, r3
   177fc:	fa21 f304 	lsr.w	r3, r1, r4
   17800:	ea45 0103 	orr.w	r1, r5, r3
   17804:	bd30      	pop	{r4, r5, pc}
   17806:	f1c4 040c 	rsb	r4, r4, #12
   1780a:	f1c4 0220 	rsb	r2, r4, #32
   1780e:	fa20 f002 	lsr.w	r0, r0, r2
   17812:	fa01 f304 	lsl.w	r3, r1, r4
   17816:	ea40 0003 	orr.w	r0, r0, r3
   1781a:	4629      	mov	r1, r5
   1781c:	bd30      	pop	{r4, r5, pc}
   1781e:	fa21 f004 	lsr.w	r0, r1, r4
   17822:	4629      	mov	r1, r5
   17824:	bd30      	pop	{r4, r5, pc}
   17826:	f094 0f00 	teq	r4, #0
   1782a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1782e:	bf06      	itte	eq
   17830:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   17834:	3401      	addeq	r4, #1
   17836:	3d01      	subne	r5, #1
   17838:	e74e      	b.n	176d8 <__adddf3+0x8c>
   1783a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1783e:	bf18      	it	ne
   17840:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   17844:	d029      	beq.n	1789a <__adddf3+0x24e>
   17846:	ea94 0f05 	teq	r4, r5
   1784a:	bf08      	it	eq
   1784c:	ea90 0f02 	teqeq	r0, r2
   17850:	d005      	beq.n	1785e <__adddf3+0x212>
   17852:	ea54 0c00 	orrs.w	ip, r4, r0
   17856:	bf04      	itt	eq
   17858:	4619      	moveq	r1, r3
   1785a:	4610      	moveq	r0, r2
   1785c:	bd30      	pop	{r4, r5, pc}
   1785e:	ea91 0f03 	teq	r1, r3
   17862:	bf1e      	ittt	ne
   17864:	2100      	movne	r1, #0
   17866:	2000      	movne	r0, #0
   17868:	bd30      	popne	{r4, r5, pc}
   1786a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1786e:	d105      	bne.n	1787c <__adddf3+0x230>
   17870:	0040      	lsls	r0, r0, #1
   17872:	4149      	adcs	r1, r1
   17874:	bf28      	it	cs
   17876:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1787a:	bd30      	pop	{r4, r5, pc}
   1787c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   17880:	bf3c      	itt	cc
   17882:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   17886:	bd30      	popcc	{r4, r5, pc}
   17888:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1788c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   17890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17894:	f04f 0000 	mov.w	r0, #0
   17898:	bd30      	pop	{r4, r5, pc}
   1789a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1789e:	bf1a      	itte	ne
   178a0:	4619      	movne	r1, r3
   178a2:	4610      	movne	r0, r2
   178a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   178a8:	bf1c      	itt	ne
   178aa:	460b      	movne	r3, r1
   178ac:	4602      	movne	r2, r0
   178ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   178b2:	bf06      	itte	eq
   178b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   178b8:	ea91 0f03 	teqeq	r1, r3
   178bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   178c0:	bd30      	pop	{r4, r5, pc}
   178c2:	bf00      	nop

000178c4 <__aeabi_ui2d>:
   178c4:	f090 0f00 	teq	r0, #0
   178c8:	bf04      	itt	eq
   178ca:	2100      	moveq	r1, #0
   178cc:	4770      	bxeq	lr
   178ce:	b530      	push	{r4, r5, lr}
   178d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   178d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   178d8:	f04f 0500 	mov.w	r5, #0
   178dc:	f04f 0100 	mov.w	r1, #0
   178e0:	e750      	b.n	17784 <__adddf3+0x138>
   178e2:	bf00      	nop

000178e4 <__aeabi_i2d>:
   178e4:	f090 0f00 	teq	r0, #0
   178e8:	bf04      	itt	eq
   178ea:	2100      	moveq	r1, #0
   178ec:	4770      	bxeq	lr
   178ee:	b530      	push	{r4, r5, lr}
   178f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   178f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   178f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   178fc:	bf48      	it	mi
   178fe:	4240      	negmi	r0, r0
   17900:	f04f 0100 	mov.w	r1, #0
   17904:	e73e      	b.n	17784 <__adddf3+0x138>
   17906:	bf00      	nop

00017908 <__aeabi_f2d>:
   17908:	0042      	lsls	r2, r0, #1
   1790a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1790e:	ea4f 0131 	mov.w	r1, r1, rrx
   17912:	ea4f 7002 	mov.w	r0, r2, lsl #28
   17916:	bf1f      	itttt	ne
   17918:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1791c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17920:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   17924:	4770      	bxne	lr
   17926:	f092 0f00 	teq	r2, #0
   1792a:	bf14      	ite	ne
   1792c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17930:	4770      	bxeq	lr
   17932:	b530      	push	{r4, r5, lr}
   17934:	f44f 7460 	mov.w	r4, #896	; 0x380
   17938:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1793c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17940:	e720      	b.n	17784 <__adddf3+0x138>
   17942:	bf00      	nop

00017944 <__aeabi_ul2d>:
   17944:	ea50 0201 	orrs.w	r2, r0, r1
   17948:	bf08      	it	eq
   1794a:	4770      	bxeq	lr
   1794c:	b530      	push	{r4, r5, lr}
   1794e:	f04f 0500 	mov.w	r5, #0
   17952:	e00a      	b.n	1796a <__aeabi_l2d+0x16>

00017954 <__aeabi_l2d>:
   17954:	ea50 0201 	orrs.w	r2, r0, r1
   17958:	bf08      	it	eq
   1795a:	4770      	bxeq	lr
   1795c:	b530      	push	{r4, r5, lr}
   1795e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   17962:	d502      	bpl.n	1796a <__aeabi_l2d+0x16>
   17964:	4240      	negs	r0, r0
   17966:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1796a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1796e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17972:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   17976:	f43f aedc 	beq.w	17732 <__adddf3+0xe6>
   1797a:	f04f 0203 	mov.w	r2, #3
   1797e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17982:	bf18      	it	ne
   17984:	3203      	addne	r2, #3
   17986:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1798a:	bf18      	it	ne
   1798c:	3203      	addne	r2, #3
   1798e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   17992:	f1c2 0320 	rsb	r3, r2, #32
   17996:	fa00 fc03 	lsl.w	ip, r0, r3
   1799a:	fa20 f002 	lsr.w	r0, r0, r2
   1799e:	fa01 fe03 	lsl.w	lr, r1, r3
   179a2:	ea40 000e 	orr.w	r0, r0, lr
   179a6:	fa21 f102 	lsr.w	r1, r1, r2
   179aa:	4414      	add	r4, r2
   179ac:	e6c1      	b.n	17732 <__adddf3+0xe6>
   179ae:	bf00      	nop

000179b0 <__aeabi_dmul>:
   179b0:	b570      	push	{r4, r5, r6, lr}
   179b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   179b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   179ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   179be:	bf1d      	ittte	ne
   179c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   179c4:	ea94 0f0c 	teqne	r4, ip
   179c8:	ea95 0f0c 	teqne	r5, ip
   179cc:	f000 f8de 	bleq	17b8c <__aeabi_dmul+0x1dc>
   179d0:	442c      	add	r4, r5
   179d2:	ea81 0603 	eor.w	r6, r1, r3
   179d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   179da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   179de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   179e2:	bf18      	it	ne
   179e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   179e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   179ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   179f0:	d038      	beq.n	17a64 <__aeabi_dmul+0xb4>
   179f2:	fba0 ce02 	umull	ip, lr, r0, r2
   179f6:	f04f 0500 	mov.w	r5, #0
   179fa:	fbe1 e502 	umlal	lr, r5, r1, r2
   179fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   17a02:	fbe0 e503 	umlal	lr, r5, r0, r3
   17a06:	f04f 0600 	mov.w	r6, #0
   17a0a:	fbe1 5603 	umlal	r5, r6, r1, r3
   17a0e:	f09c 0f00 	teq	ip, #0
   17a12:	bf18      	it	ne
   17a14:	f04e 0e01 	orrne.w	lr, lr, #1
   17a18:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   17a1c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   17a20:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   17a24:	d204      	bcs.n	17a30 <__aeabi_dmul+0x80>
   17a26:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   17a2a:	416d      	adcs	r5, r5
   17a2c:	eb46 0606 	adc.w	r6, r6, r6
   17a30:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   17a34:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   17a38:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   17a3c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   17a40:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   17a44:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17a48:	bf88      	it	hi
   17a4a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17a4e:	d81e      	bhi.n	17a8e <__aeabi_dmul+0xde>
   17a50:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   17a54:	bf08      	it	eq
   17a56:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   17a5a:	f150 0000 	adcs.w	r0, r0, #0
   17a5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17a62:	bd70      	pop	{r4, r5, r6, pc}
   17a64:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   17a68:	ea46 0101 	orr.w	r1, r6, r1
   17a6c:	ea40 0002 	orr.w	r0, r0, r2
   17a70:	ea81 0103 	eor.w	r1, r1, r3
   17a74:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   17a78:	bfc2      	ittt	gt
   17a7a:	ebd4 050c 	rsbsgt	r5, r4, ip
   17a7e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17a82:	bd70      	popgt	{r4, r5, r6, pc}
   17a84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17a88:	f04f 0e00 	mov.w	lr, #0
   17a8c:	3c01      	subs	r4, #1
   17a8e:	f300 80ab 	bgt.w	17be8 <__aeabi_dmul+0x238>
   17a92:	f114 0f36 	cmn.w	r4, #54	; 0x36
   17a96:	bfde      	ittt	le
   17a98:	2000      	movle	r0, #0
   17a9a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   17a9e:	bd70      	pople	{r4, r5, r6, pc}
   17aa0:	f1c4 0400 	rsb	r4, r4, #0
   17aa4:	3c20      	subs	r4, #32
   17aa6:	da35      	bge.n	17b14 <__aeabi_dmul+0x164>
   17aa8:	340c      	adds	r4, #12
   17aaa:	dc1b      	bgt.n	17ae4 <__aeabi_dmul+0x134>
   17aac:	f104 0414 	add.w	r4, r4, #20
   17ab0:	f1c4 0520 	rsb	r5, r4, #32
   17ab4:	fa00 f305 	lsl.w	r3, r0, r5
   17ab8:	fa20 f004 	lsr.w	r0, r0, r4
   17abc:	fa01 f205 	lsl.w	r2, r1, r5
   17ac0:	ea40 0002 	orr.w	r0, r0, r2
   17ac4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   17ac8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17acc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17ad0:	fa21 f604 	lsr.w	r6, r1, r4
   17ad4:	eb42 0106 	adc.w	r1, r2, r6
   17ad8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17adc:	bf08      	it	eq
   17ade:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17ae2:	bd70      	pop	{r4, r5, r6, pc}
   17ae4:	f1c4 040c 	rsb	r4, r4, #12
   17ae8:	f1c4 0520 	rsb	r5, r4, #32
   17aec:	fa00 f304 	lsl.w	r3, r0, r4
   17af0:	fa20 f005 	lsr.w	r0, r0, r5
   17af4:	fa01 f204 	lsl.w	r2, r1, r4
   17af8:	ea40 0002 	orr.w	r0, r0, r2
   17afc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17b00:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17b04:	f141 0100 	adc.w	r1, r1, #0
   17b08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17b0c:	bf08      	it	eq
   17b0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17b12:	bd70      	pop	{r4, r5, r6, pc}
   17b14:	f1c4 0520 	rsb	r5, r4, #32
   17b18:	fa00 f205 	lsl.w	r2, r0, r5
   17b1c:	ea4e 0e02 	orr.w	lr, lr, r2
   17b20:	fa20 f304 	lsr.w	r3, r0, r4
   17b24:	fa01 f205 	lsl.w	r2, r1, r5
   17b28:	ea43 0302 	orr.w	r3, r3, r2
   17b2c:	fa21 f004 	lsr.w	r0, r1, r4
   17b30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17b34:	fa21 f204 	lsr.w	r2, r1, r4
   17b38:	ea20 0002 	bic.w	r0, r0, r2
   17b3c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   17b40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17b44:	bf08      	it	eq
   17b46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17b4a:	bd70      	pop	{r4, r5, r6, pc}
   17b4c:	f094 0f00 	teq	r4, #0
   17b50:	d10f      	bne.n	17b72 <__aeabi_dmul+0x1c2>
   17b52:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   17b56:	0040      	lsls	r0, r0, #1
   17b58:	eb41 0101 	adc.w	r1, r1, r1
   17b5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17b60:	bf08      	it	eq
   17b62:	3c01      	subeq	r4, #1
   17b64:	d0f7      	beq.n	17b56 <__aeabi_dmul+0x1a6>
   17b66:	ea41 0106 	orr.w	r1, r1, r6
   17b6a:	f095 0f00 	teq	r5, #0
   17b6e:	bf18      	it	ne
   17b70:	4770      	bxne	lr
   17b72:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   17b76:	0052      	lsls	r2, r2, #1
   17b78:	eb43 0303 	adc.w	r3, r3, r3
   17b7c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   17b80:	bf08      	it	eq
   17b82:	3d01      	subeq	r5, #1
   17b84:	d0f7      	beq.n	17b76 <__aeabi_dmul+0x1c6>
   17b86:	ea43 0306 	orr.w	r3, r3, r6
   17b8a:	4770      	bx	lr
   17b8c:	ea94 0f0c 	teq	r4, ip
   17b90:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17b94:	bf18      	it	ne
   17b96:	ea95 0f0c 	teqne	r5, ip
   17b9a:	d00c      	beq.n	17bb6 <__aeabi_dmul+0x206>
   17b9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17ba0:	bf18      	it	ne
   17ba2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17ba6:	d1d1      	bne.n	17b4c <__aeabi_dmul+0x19c>
   17ba8:	ea81 0103 	eor.w	r1, r1, r3
   17bac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17bb0:	f04f 0000 	mov.w	r0, #0
   17bb4:	bd70      	pop	{r4, r5, r6, pc}
   17bb6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17bba:	bf06      	itte	eq
   17bbc:	4610      	moveq	r0, r2
   17bbe:	4619      	moveq	r1, r3
   17bc0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17bc4:	d019      	beq.n	17bfa <__aeabi_dmul+0x24a>
   17bc6:	ea94 0f0c 	teq	r4, ip
   17bca:	d102      	bne.n	17bd2 <__aeabi_dmul+0x222>
   17bcc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   17bd0:	d113      	bne.n	17bfa <__aeabi_dmul+0x24a>
   17bd2:	ea95 0f0c 	teq	r5, ip
   17bd6:	d105      	bne.n	17be4 <__aeabi_dmul+0x234>
   17bd8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   17bdc:	bf1c      	itt	ne
   17bde:	4610      	movne	r0, r2
   17be0:	4619      	movne	r1, r3
   17be2:	d10a      	bne.n	17bfa <__aeabi_dmul+0x24a>
   17be4:	ea81 0103 	eor.w	r1, r1, r3
   17be8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17bec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17bf0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17bf4:	f04f 0000 	mov.w	r0, #0
   17bf8:	bd70      	pop	{r4, r5, r6, pc}
   17bfa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17bfe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   17c02:	bd70      	pop	{r4, r5, r6, pc}

00017c04 <__aeabi_ddiv>:
   17c04:	b570      	push	{r4, r5, r6, lr}
   17c06:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17c0a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17c0e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17c12:	bf1d      	ittte	ne
   17c14:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17c18:	ea94 0f0c 	teqne	r4, ip
   17c1c:	ea95 0f0c 	teqne	r5, ip
   17c20:	f000 f8a7 	bleq	17d72 <__aeabi_ddiv+0x16e>
   17c24:	eba4 0405 	sub.w	r4, r4, r5
   17c28:	ea81 0e03 	eor.w	lr, r1, r3
   17c2c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17c30:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17c34:	f000 8088 	beq.w	17d48 <__aeabi_ddiv+0x144>
   17c38:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17c3c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   17c40:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   17c44:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   17c48:	ea4f 2202 	mov.w	r2, r2, lsl #8
   17c4c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   17c50:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   17c54:	ea4f 2600 	mov.w	r6, r0, lsl #8
   17c58:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   17c5c:	429d      	cmp	r5, r3
   17c5e:	bf08      	it	eq
   17c60:	4296      	cmpeq	r6, r2
   17c62:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   17c66:	f504 7440 	add.w	r4, r4, #768	; 0x300
   17c6a:	d202      	bcs.n	17c72 <__aeabi_ddiv+0x6e>
   17c6c:	085b      	lsrs	r3, r3, #1
   17c6e:	ea4f 0232 	mov.w	r2, r2, rrx
   17c72:	1ab6      	subs	r6, r6, r2
   17c74:	eb65 0503 	sbc.w	r5, r5, r3
   17c78:	085b      	lsrs	r3, r3, #1
   17c7a:	ea4f 0232 	mov.w	r2, r2, rrx
   17c7e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   17c82:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   17c86:	ebb6 0e02 	subs.w	lr, r6, r2
   17c8a:	eb75 0e03 	sbcs.w	lr, r5, r3
   17c8e:	bf22      	ittt	cs
   17c90:	1ab6      	subcs	r6, r6, r2
   17c92:	4675      	movcs	r5, lr
   17c94:	ea40 000c 	orrcs.w	r0, r0, ip
   17c98:	085b      	lsrs	r3, r3, #1
   17c9a:	ea4f 0232 	mov.w	r2, r2, rrx
   17c9e:	ebb6 0e02 	subs.w	lr, r6, r2
   17ca2:	eb75 0e03 	sbcs.w	lr, r5, r3
   17ca6:	bf22      	ittt	cs
   17ca8:	1ab6      	subcs	r6, r6, r2
   17caa:	4675      	movcs	r5, lr
   17cac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   17cb0:	085b      	lsrs	r3, r3, #1
   17cb2:	ea4f 0232 	mov.w	r2, r2, rrx
   17cb6:	ebb6 0e02 	subs.w	lr, r6, r2
   17cba:	eb75 0e03 	sbcs.w	lr, r5, r3
   17cbe:	bf22      	ittt	cs
   17cc0:	1ab6      	subcs	r6, r6, r2
   17cc2:	4675      	movcs	r5, lr
   17cc4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   17cc8:	085b      	lsrs	r3, r3, #1
   17cca:	ea4f 0232 	mov.w	r2, r2, rrx
   17cce:	ebb6 0e02 	subs.w	lr, r6, r2
   17cd2:	eb75 0e03 	sbcs.w	lr, r5, r3
   17cd6:	bf22      	ittt	cs
   17cd8:	1ab6      	subcs	r6, r6, r2
   17cda:	4675      	movcs	r5, lr
   17cdc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   17ce0:	ea55 0e06 	orrs.w	lr, r5, r6
   17ce4:	d018      	beq.n	17d18 <__aeabi_ddiv+0x114>
   17ce6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   17cea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   17cee:	ea4f 1606 	mov.w	r6, r6, lsl #4
   17cf2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   17cf6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   17cfa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   17cfe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   17d02:	d1c0      	bne.n	17c86 <__aeabi_ddiv+0x82>
   17d04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17d08:	d10b      	bne.n	17d22 <__aeabi_ddiv+0x11e>
   17d0a:	ea41 0100 	orr.w	r1, r1, r0
   17d0e:	f04f 0000 	mov.w	r0, #0
   17d12:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   17d16:	e7b6      	b.n	17c86 <__aeabi_ddiv+0x82>
   17d18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17d1c:	bf04      	itt	eq
   17d1e:	4301      	orreq	r1, r0
   17d20:	2000      	moveq	r0, #0
   17d22:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17d26:	bf88      	it	hi
   17d28:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17d2c:	f63f aeaf 	bhi.w	17a8e <__aeabi_dmul+0xde>
   17d30:	ebb5 0c03 	subs.w	ip, r5, r3
   17d34:	bf04      	itt	eq
   17d36:	ebb6 0c02 	subseq.w	ip, r6, r2
   17d3a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17d3e:	f150 0000 	adcs.w	r0, r0, #0
   17d42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17d46:	bd70      	pop	{r4, r5, r6, pc}
   17d48:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   17d4c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   17d50:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   17d54:	bfc2      	ittt	gt
   17d56:	ebd4 050c 	rsbsgt	r5, r4, ip
   17d5a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17d5e:	bd70      	popgt	{r4, r5, r6, pc}
   17d60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17d64:	f04f 0e00 	mov.w	lr, #0
   17d68:	3c01      	subs	r4, #1
   17d6a:	e690      	b.n	17a8e <__aeabi_dmul+0xde>
   17d6c:	ea45 0e06 	orr.w	lr, r5, r6
   17d70:	e68d      	b.n	17a8e <__aeabi_dmul+0xde>
   17d72:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17d76:	ea94 0f0c 	teq	r4, ip
   17d7a:	bf08      	it	eq
   17d7c:	ea95 0f0c 	teqeq	r5, ip
   17d80:	f43f af3b 	beq.w	17bfa <__aeabi_dmul+0x24a>
   17d84:	ea94 0f0c 	teq	r4, ip
   17d88:	d10a      	bne.n	17da0 <__aeabi_ddiv+0x19c>
   17d8a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17d8e:	f47f af34 	bne.w	17bfa <__aeabi_dmul+0x24a>
   17d92:	ea95 0f0c 	teq	r5, ip
   17d96:	f47f af25 	bne.w	17be4 <__aeabi_dmul+0x234>
   17d9a:	4610      	mov	r0, r2
   17d9c:	4619      	mov	r1, r3
   17d9e:	e72c      	b.n	17bfa <__aeabi_dmul+0x24a>
   17da0:	ea95 0f0c 	teq	r5, ip
   17da4:	d106      	bne.n	17db4 <__aeabi_ddiv+0x1b0>
   17da6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17daa:	f43f aefd 	beq.w	17ba8 <__aeabi_dmul+0x1f8>
   17dae:	4610      	mov	r0, r2
   17db0:	4619      	mov	r1, r3
   17db2:	e722      	b.n	17bfa <__aeabi_dmul+0x24a>
   17db4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17db8:	bf18      	it	ne
   17dba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17dbe:	f47f aec5 	bne.w	17b4c <__aeabi_dmul+0x19c>
   17dc2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   17dc6:	f47f af0d 	bne.w	17be4 <__aeabi_dmul+0x234>
   17dca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   17dce:	f47f aeeb 	bne.w	17ba8 <__aeabi_dmul+0x1f8>
   17dd2:	e712      	b.n	17bfa <__aeabi_dmul+0x24a>

00017dd4 <__gedf2>:
   17dd4:	f04f 3cff 	mov.w	ip, #4294967295
   17dd8:	e006      	b.n	17de8 <__cmpdf2+0x4>
   17dda:	bf00      	nop

00017ddc <__ledf2>:
   17ddc:	f04f 0c01 	mov.w	ip, #1
   17de0:	e002      	b.n	17de8 <__cmpdf2+0x4>
   17de2:	bf00      	nop

00017de4 <__cmpdf2>:
   17de4:	f04f 0c01 	mov.w	ip, #1
   17de8:	f84d cd04 	str.w	ip, [sp, #-4]!
   17dec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   17df0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17df4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   17df8:	bf18      	it	ne
   17dfa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   17dfe:	d01b      	beq.n	17e38 <__cmpdf2+0x54>
   17e00:	b001      	add	sp, #4
   17e02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   17e06:	bf0c      	ite	eq
   17e08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   17e0c:	ea91 0f03 	teqne	r1, r3
   17e10:	bf02      	ittt	eq
   17e12:	ea90 0f02 	teqeq	r0, r2
   17e16:	2000      	moveq	r0, #0
   17e18:	4770      	bxeq	lr
   17e1a:	f110 0f00 	cmn.w	r0, #0
   17e1e:	ea91 0f03 	teq	r1, r3
   17e22:	bf58      	it	pl
   17e24:	4299      	cmppl	r1, r3
   17e26:	bf08      	it	eq
   17e28:	4290      	cmpeq	r0, r2
   17e2a:	bf2c      	ite	cs
   17e2c:	17d8      	asrcs	r0, r3, #31
   17e2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   17e32:	f040 0001 	orr.w	r0, r0, #1
   17e36:	4770      	bx	lr
   17e38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   17e3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17e40:	d102      	bne.n	17e48 <__cmpdf2+0x64>
   17e42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   17e46:	d107      	bne.n	17e58 <__cmpdf2+0x74>
   17e48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   17e4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   17e50:	d1d6      	bne.n	17e00 <__cmpdf2+0x1c>
   17e52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   17e56:	d0d3      	beq.n	17e00 <__cmpdf2+0x1c>
   17e58:	f85d 0b04 	ldr.w	r0, [sp], #4
   17e5c:	4770      	bx	lr
   17e5e:	bf00      	nop

00017e60 <__aeabi_cdrcmple>:
   17e60:	4684      	mov	ip, r0
   17e62:	4610      	mov	r0, r2
   17e64:	4662      	mov	r2, ip
   17e66:	468c      	mov	ip, r1
   17e68:	4619      	mov	r1, r3
   17e6a:	4663      	mov	r3, ip
   17e6c:	e000      	b.n	17e70 <__aeabi_cdcmpeq>
   17e6e:	bf00      	nop

00017e70 <__aeabi_cdcmpeq>:
   17e70:	b501      	push	{r0, lr}
   17e72:	f7ff ffb7 	bl	17de4 <__cmpdf2>
   17e76:	2800      	cmp	r0, #0
   17e78:	bf48      	it	mi
   17e7a:	f110 0f00 	cmnmi.w	r0, #0
   17e7e:	bd01      	pop	{r0, pc}

00017e80 <__aeabi_dcmpeq>:
   17e80:	f84d ed08 	str.w	lr, [sp, #-8]!
   17e84:	f7ff fff4 	bl	17e70 <__aeabi_cdcmpeq>
   17e88:	bf0c      	ite	eq
   17e8a:	2001      	moveq	r0, #1
   17e8c:	2000      	movne	r0, #0
   17e8e:	f85d fb08 	ldr.w	pc, [sp], #8
   17e92:	bf00      	nop

00017e94 <__aeabi_dcmplt>:
   17e94:	f84d ed08 	str.w	lr, [sp, #-8]!
   17e98:	f7ff ffea 	bl	17e70 <__aeabi_cdcmpeq>
   17e9c:	bf34      	ite	cc
   17e9e:	2001      	movcc	r0, #1
   17ea0:	2000      	movcs	r0, #0
   17ea2:	f85d fb08 	ldr.w	pc, [sp], #8
   17ea6:	bf00      	nop

00017ea8 <__aeabi_dcmple>:
   17ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
   17eac:	f7ff ffe0 	bl	17e70 <__aeabi_cdcmpeq>
   17eb0:	bf94      	ite	ls
   17eb2:	2001      	movls	r0, #1
   17eb4:	2000      	movhi	r0, #0
   17eb6:	f85d fb08 	ldr.w	pc, [sp], #8
   17eba:	bf00      	nop

00017ebc <__aeabi_dcmpge>:
   17ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
   17ec0:	f7ff ffce 	bl	17e60 <__aeabi_cdrcmple>
   17ec4:	bf94      	ite	ls
   17ec6:	2001      	movls	r0, #1
   17ec8:	2000      	movhi	r0, #0
   17eca:	f85d fb08 	ldr.w	pc, [sp], #8
   17ece:	bf00      	nop

00017ed0 <__aeabi_dcmpgt>:
   17ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
   17ed4:	f7ff ffc4 	bl	17e60 <__aeabi_cdrcmple>
   17ed8:	bf34      	ite	cc
   17eda:	2001      	movcc	r0, #1
   17edc:	2000      	movcs	r0, #0
   17ede:	f85d fb08 	ldr.w	pc, [sp], #8
   17ee2:	bf00      	nop

00017ee4 <__aeabi_d2iz>:
   17ee4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   17ee8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   17eec:	d215      	bcs.n	17f1a <__aeabi_d2iz+0x36>
   17eee:	d511      	bpl.n	17f14 <__aeabi_d2iz+0x30>
   17ef0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   17ef4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   17ef8:	d912      	bls.n	17f20 <__aeabi_d2iz+0x3c>
   17efa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17efe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   17f02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   17f06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17f0a:	fa23 f002 	lsr.w	r0, r3, r2
   17f0e:	bf18      	it	ne
   17f10:	4240      	negne	r0, r0
   17f12:	4770      	bx	lr
   17f14:	f04f 0000 	mov.w	r0, #0
   17f18:	4770      	bx	lr
   17f1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   17f1e:	d105      	bne.n	17f2c <__aeabi_d2iz+0x48>
   17f20:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   17f24:	bf08      	it	eq
   17f26:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   17f2a:	4770      	bx	lr
   17f2c:	f04f 0000 	mov.w	r0, #0
   17f30:	4770      	bx	lr
   17f32:	bf00      	nop

00017f34 <__aeabi_d2uiz>:
   17f34:	004a      	lsls	r2, r1, #1
   17f36:	d211      	bcs.n	17f5c <__aeabi_d2uiz+0x28>
   17f38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   17f3c:	d211      	bcs.n	17f62 <__aeabi_d2uiz+0x2e>
   17f3e:	d50d      	bpl.n	17f5c <__aeabi_d2uiz+0x28>
   17f40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   17f44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   17f48:	d40e      	bmi.n	17f68 <__aeabi_d2uiz+0x34>
   17f4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17f4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   17f52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   17f56:	fa23 f002 	lsr.w	r0, r3, r2
   17f5a:	4770      	bx	lr
   17f5c:	f04f 0000 	mov.w	r0, #0
   17f60:	4770      	bx	lr
   17f62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   17f66:	d102      	bne.n	17f6e <__aeabi_d2uiz+0x3a>
   17f68:	f04f 30ff 	mov.w	r0, #4294967295
   17f6c:	4770      	bx	lr
   17f6e:	f04f 0000 	mov.w	r0, #0
   17f72:	4770      	bx	lr

00017f74 <__aeabi_d2f>:
   17f74:	ea4f 0241 	mov.w	r2, r1, lsl #1
   17f78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   17f7c:	bf24      	itt	cs
   17f7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   17f82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   17f86:	d90d      	bls.n	17fa4 <__aeabi_d2f+0x30>
   17f88:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   17f8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   17f90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   17f94:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   17f98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   17f9c:	bf08      	it	eq
   17f9e:	f020 0001 	biceq.w	r0, r0, #1
   17fa2:	4770      	bx	lr
   17fa4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   17fa8:	d121      	bne.n	17fee <__aeabi_d2f+0x7a>
   17faa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   17fae:	bfbc      	itt	lt
   17fb0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   17fb4:	4770      	bxlt	lr
   17fb6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17fba:	ea4f 5252 	mov.w	r2, r2, lsr #21
   17fbe:	f1c2 0218 	rsb	r2, r2, #24
   17fc2:	f1c2 0c20 	rsb	ip, r2, #32
   17fc6:	fa10 f30c 	lsls.w	r3, r0, ip
   17fca:	fa20 f002 	lsr.w	r0, r0, r2
   17fce:	bf18      	it	ne
   17fd0:	f040 0001 	orrne.w	r0, r0, #1
   17fd4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   17fd8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   17fdc:	fa03 fc0c 	lsl.w	ip, r3, ip
   17fe0:	ea40 000c 	orr.w	r0, r0, ip
   17fe4:	fa23 f302 	lsr.w	r3, r3, r2
   17fe8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   17fec:	e7cc      	b.n	17f88 <__aeabi_d2f+0x14>
   17fee:	ea7f 5362 	mvns.w	r3, r2, asr #21
   17ff2:	d107      	bne.n	18004 <__aeabi_d2f+0x90>
   17ff4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   17ff8:	bf1e      	ittt	ne
   17ffa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   17ffe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   18002:	4770      	bxne	lr
   18004:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   18008:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1800c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18010:	4770      	bx	lr
   18012:	bf00      	nop

00018014 <__aeabi_frsub>:
   18014:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   18018:	e002      	b.n	18020 <__addsf3>
   1801a:	bf00      	nop

0001801c <__aeabi_fsub>:
   1801c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00018020 <__addsf3>:
   18020:	0042      	lsls	r2, r0, #1
   18022:	bf1f      	itttt	ne
   18024:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   18028:	ea92 0f03 	teqne	r2, r3
   1802c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   18030:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18034:	d06a      	beq.n	1810c <__addsf3+0xec>
   18036:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1803a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1803e:	bfc1      	itttt	gt
   18040:	18d2      	addgt	r2, r2, r3
   18042:	4041      	eorgt	r1, r0
   18044:	4048      	eorgt	r0, r1
   18046:	4041      	eorgt	r1, r0
   18048:	bfb8      	it	lt
   1804a:	425b      	neglt	r3, r3
   1804c:	2b19      	cmp	r3, #25
   1804e:	bf88      	it	hi
   18050:	4770      	bxhi	lr
   18052:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   18056:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1805a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1805e:	bf18      	it	ne
   18060:	4240      	negne	r0, r0
   18062:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18066:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1806a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1806e:	bf18      	it	ne
   18070:	4249      	negne	r1, r1
   18072:	ea92 0f03 	teq	r2, r3
   18076:	d03f      	beq.n	180f8 <__addsf3+0xd8>
   18078:	f1a2 0201 	sub.w	r2, r2, #1
   1807c:	fa41 fc03 	asr.w	ip, r1, r3
   18080:	eb10 000c 	adds.w	r0, r0, ip
   18084:	f1c3 0320 	rsb	r3, r3, #32
   18088:	fa01 f103 	lsl.w	r1, r1, r3
   1808c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18090:	d502      	bpl.n	18098 <__addsf3+0x78>
   18092:	4249      	negs	r1, r1
   18094:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   18098:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1809c:	d313      	bcc.n	180c6 <__addsf3+0xa6>
   1809e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   180a2:	d306      	bcc.n	180b2 <__addsf3+0x92>
   180a4:	0840      	lsrs	r0, r0, #1
   180a6:	ea4f 0131 	mov.w	r1, r1, rrx
   180aa:	f102 0201 	add.w	r2, r2, #1
   180ae:	2afe      	cmp	r2, #254	; 0xfe
   180b0:	d251      	bcs.n	18156 <__addsf3+0x136>
   180b2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   180b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   180ba:	bf08      	it	eq
   180bc:	f020 0001 	biceq.w	r0, r0, #1
   180c0:	ea40 0003 	orr.w	r0, r0, r3
   180c4:	4770      	bx	lr
   180c6:	0049      	lsls	r1, r1, #1
   180c8:	eb40 0000 	adc.w	r0, r0, r0
   180cc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   180d0:	f1a2 0201 	sub.w	r2, r2, #1
   180d4:	d1ed      	bne.n	180b2 <__addsf3+0x92>
   180d6:	fab0 fc80 	clz	ip, r0
   180da:	f1ac 0c08 	sub.w	ip, ip, #8
   180de:	ebb2 020c 	subs.w	r2, r2, ip
   180e2:	fa00 f00c 	lsl.w	r0, r0, ip
   180e6:	bfaa      	itet	ge
   180e8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   180ec:	4252      	neglt	r2, r2
   180ee:	4318      	orrge	r0, r3
   180f0:	bfbc      	itt	lt
   180f2:	40d0      	lsrlt	r0, r2
   180f4:	4318      	orrlt	r0, r3
   180f6:	4770      	bx	lr
   180f8:	f092 0f00 	teq	r2, #0
   180fc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   18100:	bf06      	itte	eq
   18102:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   18106:	3201      	addeq	r2, #1
   18108:	3b01      	subne	r3, #1
   1810a:	e7b5      	b.n	18078 <__addsf3+0x58>
   1810c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18110:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18114:	bf18      	it	ne
   18116:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1811a:	d021      	beq.n	18160 <__addsf3+0x140>
   1811c:	ea92 0f03 	teq	r2, r3
   18120:	d004      	beq.n	1812c <__addsf3+0x10c>
   18122:	f092 0f00 	teq	r2, #0
   18126:	bf08      	it	eq
   18128:	4608      	moveq	r0, r1
   1812a:	4770      	bx	lr
   1812c:	ea90 0f01 	teq	r0, r1
   18130:	bf1c      	itt	ne
   18132:	2000      	movne	r0, #0
   18134:	4770      	bxne	lr
   18136:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1813a:	d104      	bne.n	18146 <__addsf3+0x126>
   1813c:	0040      	lsls	r0, r0, #1
   1813e:	bf28      	it	cs
   18140:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   18144:	4770      	bx	lr
   18146:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1814a:	bf3c      	itt	cc
   1814c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   18150:	4770      	bxcc	lr
   18152:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18156:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1815a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1815e:	4770      	bx	lr
   18160:	ea7f 6222 	mvns.w	r2, r2, asr #24
   18164:	bf16      	itet	ne
   18166:	4608      	movne	r0, r1
   18168:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1816c:	4601      	movne	r1, r0
   1816e:	0242      	lsls	r2, r0, #9
   18170:	bf06      	itte	eq
   18172:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   18176:	ea90 0f01 	teqeq	r0, r1
   1817a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1817e:	4770      	bx	lr

00018180 <__aeabi_ui2f>:
   18180:	f04f 0300 	mov.w	r3, #0
   18184:	e004      	b.n	18190 <__aeabi_i2f+0x8>
   18186:	bf00      	nop

00018188 <__aeabi_i2f>:
   18188:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1818c:	bf48      	it	mi
   1818e:	4240      	negmi	r0, r0
   18190:	ea5f 0c00 	movs.w	ip, r0
   18194:	bf08      	it	eq
   18196:	4770      	bxeq	lr
   18198:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1819c:	4601      	mov	r1, r0
   1819e:	f04f 0000 	mov.w	r0, #0
   181a2:	e01c      	b.n	181de <__aeabi_l2f+0x2a>

000181a4 <__aeabi_ul2f>:
   181a4:	ea50 0201 	orrs.w	r2, r0, r1
   181a8:	bf08      	it	eq
   181aa:	4770      	bxeq	lr
   181ac:	f04f 0300 	mov.w	r3, #0
   181b0:	e00a      	b.n	181c8 <__aeabi_l2f+0x14>
   181b2:	bf00      	nop

000181b4 <__aeabi_l2f>:
   181b4:	ea50 0201 	orrs.w	r2, r0, r1
   181b8:	bf08      	it	eq
   181ba:	4770      	bxeq	lr
   181bc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   181c0:	d502      	bpl.n	181c8 <__aeabi_l2f+0x14>
   181c2:	4240      	negs	r0, r0
   181c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   181c8:	ea5f 0c01 	movs.w	ip, r1
   181cc:	bf02      	ittt	eq
   181ce:	4684      	moveq	ip, r0
   181d0:	4601      	moveq	r1, r0
   181d2:	2000      	moveq	r0, #0
   181d4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   181d8:	bf08      	it	eq
   181da:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   181de:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   181e2:	fabc f28c 	clz	r2, ip
   181e6:	3a08      	subs	r2, #8
   181e8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   181ec:	db10      	blt.n	18210 <__aeabi_l2f+0x5c>
   181ee:	fa01 fc02 	lsl.w	ip, r1, r2
   181f2:	4463      	add	r3, ip
   181f4:	fa00 fc02 	lsl.w	ip, r0, r2
   181f8:	f1c2 0220 	rsb	r2, r2, #32
   181fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   18200:	fa20 f202 	lsr.w	r2, r0, r2
   18204:	eb43 0002 	adc.w	r0, r3, r2
   18208:	bf08      	it	eq
   1820a:	f020 0001 	biceq.w	r0, r0, #1
   1820e:	4770      	bx	lr
   18210:	f102 0220 	add.w	r2, r2, #32
   18214:	fa01 fc02 	lsl.w	ip, r1, r2
   18218:	f1c2 0220 	rsb	r2, r2, #32
   1821c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   18220:	fa21 f202 	lsr.w	r2, r1, r2
   18224:	eb43 0002 	adc.w	r0, r3, r2
   18228:	bf08      	it	eq
   1822a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1822e:	4770      	bx	lr

00018230 <__aeabi_fmul>:
   18230:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18234:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18238:	bf1e      	ittt	ne
   1823a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1823e:	ea92 0f0c 	teqne	r2, ip
   18242:	ea93 0f0c 	teqne	r3, ip
   18246:	d06f      	beq.n	18328 <__aeabi_fmul+0xf8>
   18248:	441a      	add	r2, r3
   1824a:	ea80 0c01 	eor.w	ip, r0, r1
   1824e:	0240      	lsls	r0, r0, #9
   18250:	bf18      	it	ne
   18252:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   18256:	d01e      	beq.n	18296 <__aeabi_fmul+0x66>
   18258:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1825c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   18260:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   18264:	fba0 3101 	umull	r3, r1, r0, r1
   18268:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1826c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   18270:	bf3e      	ittt	cc
   18272:	0049      	lslcc	r1, r1, #1
   18274:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   18278:	005b      	lslcc	r3, r3, #1
   1827a:	ea40 0001 	orr.w	r0, r0, r1
   1827e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   18282:	2afd      	cmp	r2, #253	; 0xfd
   18284:	d81d      	bhi.n	182c2 <__aeabi_fmul+0x92>
   18286:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1828a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1828e:	bf08      	it	eq
   18290:	f020 0001 	biceq.w	r0, r0, #1
   18294:	4770      	bx	lr
   18296:	f090 0f00 	teq	r0, #0
   1829a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1829e:	bf08      	it	eq
   182a0:	0249      	lsleq	r1, r1, #9
   182a2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   182a6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   182aa:	3a7f      	subs	r2, #127	; 0x7f
   182ac:	bfc2      	ittt	gt
   182ae:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   182b2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   182b6:	4770      	bxgt	lr
   182b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   182bc:	f04f 0300 	mov.w	r3, #0
   182c0:	3a01      	subs	r2, #1
   182c2:	dc5d      	bgt.n	18380 <__aeabi_fmul+0x150>
   182c4:	f112 0f19 	cmn.w	r2, #25
   182c8:	bfdc      	itt	le
   182ca:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   182ce:	4770      	bxle	lr
   182d0:	f1c2 0200 	rsb	r2, r2, #0
   182d4:	0041      	lsls	r1, r0, #1
   182d6:	fa21 f102 	lsr.w	r1, r1, r2
   182da:	f1c2 0220 	rsb	r2, r2, #32
   182de:	fa00 fc02 	lsl.w	ip, r0, r2
   182e2:	ea5f 0031 	movs.w	r0, r1, rrx
   182e6:	f140 0000 	adc.w	r0, r0, #0
   182ea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   182ee:	bf08      	it	eq
   182f0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   182f4:	4770      	bx	lr
   182f6:	f092 0f00 	teq	r2, #0
   182fa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   182fe:	bf02      	ittt	eq
   18300:	0040      	lsleq	r0, r0, #1
   18302:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   18306:	3a01      	subeq	r2, #1
   18308:	d0f9      	beq.n	182fe <__aeabi_fmul+0xce>
   1830a:	ea40 000c 	orr.w	r0, r0, ip
   1830e:	f093 0f00 	teq	r3, #0
   18312:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18316:	bf02      	ittt	eq
   18318:	0049      	lsleq	r1, r1, #1
   1831a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1831e:	3b01      	subeq	r3, #1
   18320:	d0f9      	beq.n	18316 <__aeabi_fmul+0xe6>
   18322:	ea41 010c 	orr.w	r1, r1, ip
   18326:	e78f      	b.n	18248 <__aeabi_fmul+0x18>
   18328:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1832c:	ea92 0f0c 	teq	r2, ip
   18330:	bf18      	it	ne
   18332:	ea93 0f0c 	teqne	r3, ip
   18336:	d00a      	beq.n	1834e <__aeabi_fmul+0x11e>
   18338:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1833c:	bf18      	it	ne
   1833e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   18342:	d1d8      	bne.n	182f6 <__aeabi_fmul+0xc6>
   18344:	ea80 0001 	eor.w	r0, r0, r1
   18348:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1834c:	4770      	bx	lr
   1834e:	f090 0f00 	teq	r0, #0
   18352:	bf17      	itett	ne
   18354:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   18358:	4608      	moveq	r0, r1
   1835a:	f091 0f00 	teqne	r1, #0
   1835e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   18362:	d014      	beq.n	1838e <__aeabi_fmul+0x15e>
   18364:	ea92 0f0c 	teq	r2, ip
   18368:	d101      	bne.n	1836e <__aeabi_fmul+0x13e>
   1836a:	0242      	lsls	r2, r0, #9
   1836c:	d10f      	bne.n	1838e <__aeabi_fmul+0x15e>
   1836e:	ea93 0f0c 	teq	r3, ip
   18372:	d103      	bne.n	1837c <__aeabi_fmul+0x14c>
   18374:	024b      	lsls	r3, r1, #9
   18376:	bf18      	it	ne
   18378:	4608      	movne	r0, r1
   1837a:	d108      	bne.n	1838e <__aeabi_fmul+0x15e>
   1837c:	ea80 0001 	eor.w	r0, r0, r1
   18380:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   18384:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18388:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1838c:	4770      	bx	lr
   1838e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18392:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   18396:	4770      	bx	lr

00018398 <__aeabi_fdiv>:
   18398:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1839c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   183a0:	bf1e      	ittt	ne
   183a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   183a6:	ea92 0f0c 	teqne	r2, ip
   183aa:	ea93 0f0c 	teqne	r3, ip
   183ae:	d069      	beq.n	18484 <__aeabi_fdiv+0xec>
   183b0:	eba2 0203 	sub.w	r2, r2, r3
   183b4:	ea80 0c01 	eor.w	ip, r0, r1
   183b8:	0249      	lsls	r1, r1, #9
   183ba:	ea4f 2040 	mov.w	r0, r0, lsl #9
   183be:	d037      	beq.n	18430 <__aeabi_fdiv+0x98>
   183c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   183c4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   183c8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   183cc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   183d0:	428b      	cmp	r3, r1
   183d2:	bf38      	it	cc
   183d4:	005b      	lslcc	r3, r3, #1
   183d6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   183da:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   183de:	428b      	cmp	r3, r1
   183e0:	bf24      	itt	cs
   183e2:	1a5b      	subcs	r3, r3, r1
   183e4:	ea40 000c 	orrcs.w	r0, r0, ip
   183e8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   183ec:	bf24      	itt	cs
   183ee:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   183f2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   183f6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   183fa:	bf24      	itt	cs
   183fc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   18400:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   18404:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   18408:	bf24      	itt	cs
   1840a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   1840e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   18412:	011b      	lsls	r3, r3, #4
   18414:	bf18      	it	ne
   18416:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   1841a:	d1e0      	bne.n	183de <__aeabi_fdiv+0x46>
   1841c:	2afd      	cmp	r2, #253	; 0xfd
   1841e:	f63f af50 	bhi.w	182c2 <__aeabi_fmul+0x92>
   18422:	428b      	cmp	r3, r1
   18424:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18428:	bf08      	it	eq
   1842a:	f020 0001 	biceq.w	r0, r0, #1
   1842e:	4770      	bx	lr
   18430:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   18434:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   18438:	327f      	adds	r2, #127	; 0x7f
   1843a:	bfc2      	ittt	gt
   1843c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   18440:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   18444:	4770      	bxgt	lr
   18446:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1844a:	f04f 0300 	mov.w	r3, #0
   1844e:	3a01      	subs	r2, #1
   18450:	e737      	b.n	182c2 <__aeabi_fmul+0x92>
   18452:	f092 0f00 	teq	r2, #0
   18456:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1845a:	bf02      	ittt	eq
   1845c:	0040      	lsleq	r0, r0, #1
   1845e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   18462:	3a01      	subeq	r2, #1
   18464:	d0f9      	beq.n	1845a <__aeabi_fdiv+0xc2>
   18466:	ea40 000c 	orr.w	r0, r0, ip
   1846a:	f093 0f00 	teq	r3, #0
   1846e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18472:	bf02      	ittt	eq
   18474:	0049      	lsleq	r1, r1, #1
   18476:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1847a:	3b01      	subeq	r3, #1
   1847c:	d0f9      	beq.n	18472 <__aeabi_fdiv+0xda>
   1847e:	ea41 010c 	orr.w	r1, r1, ip
   18482:	e795      	b.n	183b0 <__aeabi_fdiv+0x18>
   18484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18488:	ea92 0f0c 	teq	r2, ip
   1848c:	d108      	bne.n	184a0 <__aeabi_fdiv+0x108>
   1848e:	0242      	lsls	r2, r0, #9
   18490:	f47f af7d 	bne.w	1838e <__aeabi_fmul+0x15e>
   18494:	ea93 0f0c 	teq	r3, ip
   18498:	f47f af70 	bne.w	1837c <__aeabi_fmul+0x14c>
   1849c:	4608      	mov	r0, r1
   1849e:	e776      	b.n	1838e <__aeabi_fmul+0x15e>
   184a0:	ea93 0f0c 	teq	r3, ip
   184a4:	d104      	bne.n	184b0 <__aeabi_fdiv+0x118>
   184a6:	024b      	lsls	r3, r1, #9
   184a8:	f43f af4c 	beq.w	18344 <__aeabi_fmul+0x114>
   184ac:	4608      	mov	r0, r1
   184ae:	e76e      	b.n	1838e <__aeabi_fmul+0x15e>
   184b0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   184b4:	bf18      	it	ne
   184b6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   184ba:	d1ca      	bne.n	18452 <__aeabi_fdiv+0xba>
   184bc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   184c0:	f47f af5c 	bne.w	1837c <__aeabi_fmul+0x14c>
   184c4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   184c8:	f47f af3c 	bne.w	18344 <__aeabi_fmul+0x114>
   184cc:	e75f      	b.n	1838e <__aeabi_fmul+0x15e>
   184ce:	bf00      	nop

000184d0 <__gesf2>:
   184d0:	f04f 3cff 	mov.w	ip, #4294967295
   184d4:	e006      	b.n	184e4 <__cmpsf2+0x4>
   184d6:	bf00      	nop

000184d8 <__lesf2>:
   184d8:	f04f 0c01 	mov.w	ip, #1
   184dc:	e002      	b.n	184e4 <__cmpsf2+0x4>
   184de:	bf00      	nop

000184e0 <__cmpsf2>:
   184e0:	f04f 0c01 	mov.w	ip, #1
   184e4:	f84d cd04 	str.w	ip, [sp, #-4]!
   184e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
   184ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
   184f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   184f4:	bf18      	it	ne
   184f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   184fa:	d011      	beq.n	18520 <__cmpsf2+0x40>
   184fc:	b001      	add	sp, #4
   184fe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   18502:	bf18      	it	ne
   18504:	ea90 0f01 	teqne	r0, r1
   18508:	bf58      	it	pl
   1850a:	ebb2 0003 	subspl.w	r0, r2, r3
   1850e:	bf88      	it	hi
   18510:	17c8      	asrhi	r0, r1, #31
   18512:	bf38      	it	cc
   18514:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   18518:	bf18      	it	ne
   1851a:	f040 0001 	orrne.w	r0, r0, #1
   1851e:	4770      	bx	lr
   18520:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18524:	d102      	bne.n	1852c <__cmpsf2+0x4c>
   18526:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   1852a:	d105      	bne.n	18538 <__cmpsf2+0x58>
   1852c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   18530:	d1e4      	bne.n	184fc <__cmpsf2+0x1c>
   18532:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   18536:	d0e1      	beq.n	184fc <__cmpsf2+0x1c>
   18538:	f85d 0b04 	ldr.w	r0, [sp], #4
   1853c:	4770      	bx	lr
   1853e:	bf00      	nop

00018540 <__aeabi_cfrcmple>:
   18540:	4684      	mov	ip, r0
   18542:	4608      	mov	r0, r1
   18544:	4661      	mov	r1, ip
   18546:	e7ff      	b.n	18548 <__aeabi_cfcmpeq>

00018548 <__aeabi_cfcmpeq>:
   18548:	b50f      	push	{r0, r1, r2, r3, lr}
   1854a:	f7ff ffc9 	bl	184e0 <__cmpsf2>
   1854e:	2800      	cmp	r0, #0
   18550:	bf48      	it	mi
   18552:	f110 0f00 	cmnmi.w	r0, #0
   18556:	bd0f      	pop	{r0, r1, r2, r3, pc}

00018558 <__aeabi_fcmpeq>:
   18558:	f84d ed08 	str.w	lr, [sp, #-8]!
   1855c:	f7ff fff4 	bl	18548 <__aeabi_cfcmpeq>
   18560:	bf0c      	ite	eq
   18562:	2001      	moveq	r0, #1
   18564:	2000      	movne	r0, #0
   18566:	f85d fb08 	ldr.w	pc, [sp], #8
   1856a:	bf00      	nop

0001856c <__aeabi_fcmplt>:
   1856c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18570:	f7ff ffea 	bl	18548 <__aeabi_cfcmpeq>
   18574:	bf34      	ite	cc
   18576:	2001      	movcc	r0, #1
   18578:	2000      	movcs	r0, #0
   1857a:	f85d fb08 	ldr.w	pc, [sp], #8
   1857e:	bf00      	nop

00018580 <__aeabi_fcmple>:
   18580:	f84d ed08 	str.w	lr, [sp, #-8]!
   18584:	f7ff ffe0 	bl	18548 <__aeabi_cfcmpeq>
   18588:	bf94      	ite	ls
   1858a:	2001      	movls	r0, #1
   1858c:	2000      	movhi	r0, #0
   1858e:	f85d fb08 	ldr.w	pc, [sp], #8
   18592:	bf00      	nop

00018594 <__aeabi_fcmpge>:
   18594:	f84d ed08 	str.w	lr, [sp, #-8]!
   18598:	f7ff ffd2 	bl	18540 <__aeabi_cfrcmple>
   1859c:	bf94      	ite	ls
   1859e:	2001      	movls	r0, #1
   185a0:	2000      	movhi	r0, #0
   185a2:	f85d fb08 	ldr.w	pc, [sp], #8
   185a6:	bf00      	nop

000185a8 <__aeabi_fcmpgt>:
   185a8:	f84d ed08 	str.w	lr, [sp, #-8]!
   185ac:	f7ff ffc8 	bl	18540 <__aeabi_cfrcmple>
   185b0:	bf34      	ite	cc
   185b2:	2001      	movcc	r0, #1
   185b4:	2000      	movcs	r0, #0
   185b6:	f85d fb08 	ldr.w	pc, [sp], #8
   185ba:	bf00      	nop

000185bc <__aeabi_f2iz>:
   185bc:	ea4f 0240 	mov.w	r2, r0, lsl #1
   185c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   185c4:	d30f      	bcc.n	185e6 <__aeabi_f2iz+0x2a>
   185c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
   185ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   185ce:	d90d      	bls.n	185ec <__aeabi_f2iz+0x30>
   185d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
   185d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   185d8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   185dc:	fa23 f002 	lsr.w	r0, r3, r2
   185e0:	bf18      	it	ne
   185e2:	4240      	negne	r0, r0
   185e4:	4770      	bx	lr
   185e6:	f04f 0000 	mov.w	r0, #0
   185ea:	4770      	bx	lr
   185ec:	f112 0f61 	cmn.w	r2, #97	; 0x61
   185f0:	d101      	bne.n	185f6 <__aeabi_f2iz+0x3a>
   185f2:	0242      	lsls	r2, r0, #9
   185f4:	d105      	bne.n	18602 <__aeabi_f2iz+0x46>
   185f6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   185fa:	bf08      	it	eq
   185fc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   18600:	4770      	bx	lr
   18602:	f04f 0000 	mov.w	r0, #0
   18606:	4770      	bx	lr

00018608 <memcpy>:
   18608:	2a0f      	cmp	r2, #15
   1860a:	b4f0      	push	{r4, r5, r6, r7}
   1860c:	d945      	bls.n	1869a <memcpy+0x92>
   1860e:	ea40 0301 	orr.w	r3, r0, r1
   18612:	079b      	lsls	r3, r3, #30
   18614:	d145      	bne.n	186a2 <memcpy+0x9a>
   18616:	f1a2 0710 	sub.w	r7, r2, #16
   1861a:	460c      	mov	r4, r1
   1861c:	4603      	mov	r3, r0
   1861e:	093f      	lsrs	r7, r7, #4
   18620:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   18624:	3610      	adds	r6, #16
   18626:	6825      	ldr	r5, [r4, #0]
   18628:	3310      	adds	r3, #16
   1862a:	3410      	adds	r4, #16
   1862c:	f843 5c10 	str.w	r5, [r3, #-16]
   18630:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   18634:	f843 5c0c 	str.w	r5, [r3, #-12]
   18638:	f854 5c08 	ldr.w	r5, [r4, #-8]
   1863c:	f843 5c08 	str.w	r5, [r3, #-8]
   18640:	f854 5c04 	ldr.w	r5, [r4, #-4]
   18644:	f843 5c04 	str.w	r5, [r3, #-4]
   18648:	42b3      	cmp	r3, r6
   1864a:	d1ec      	bne.n	18626 <memcpy+0x1e>
   1864c:	1c7b      	adds	r3, r7, #1
   1864e:	f002 0c0f 	and.w	ip, r2, #15
   18652:	f1bc 0f03 	cmp.w	ip, #3
   18656:	ea4f 1303 	mov.w	r3, r3, lsl #4
   1865a:	4419      	add	r1, r3
   1865c:	4403      	add	r3, r0
   1865e:	d922      	bls.n	186a6 <memcpy+0x9e>
   18660:	460e      	mov	r6, r1
   18662:	461d      	mov	r5, r3
   18664:	4664      	mov	r4, ip
   18666:	f856 7b04 	ldr.w	r7, [r6], #4
   1866a:	3c04      	subs	r4, #4
   1866c:	2c03      	cmp	r4, #3
   1866e:	f845 7b04 	str.w	r7, [r5], #4
   18672:	d8f8      	bhi.n	18666 <memcpy+0x5e>
   18674:	f1ac 0404 	sub.w	r4, ip, #4
   18678:	f002 0203 	and.w	r2, r2, #3
   1867c:	f024 0403 	bic.w	r4, r4, #3
   18680:	3404      	adds	r4, #4
   18682:	4423      	add	r3, r4
   18684:	4421      	add	r1, r4
   18686:	b132      	cbz	r2, 18696 <memcpy+0x8e>
   18688:	440a      	add	r2, r1
   1868a:	f811 4b01 	ldrb.w	r4, [r1], #1
   1868e:	4291      	cmp	r1, r2
   18690:	f803 4b01 	strb.w	r4, [r3], #1
   18694:	d1f9      	bne.n	1868a <memcpy+0x82>
   18696:	bcf0      	pop	{r4, r5, r6, r7}
   18698:	4770      	bx	lr
   1869a:	4603      	mov	r3, r0
   1869c:	2a00      	cmp	r2, #0
   1869e:	d1f3      	bne.n	18688 <memcpy+0x80>
   186a0:	e7f9      	b.n	18696 <memcpy+0x8e>
   186a2:	4603      	mov	r3, r0
   186a4:	e7f0      	b.n	18688 <memcpy+0x80>
   186a6:	4662      	mov	r2, ip
   186a8:	2a00      	cmp	r2, #0
   186aa:	d1ed      	bne.n	18688 <memcpy+0x80>
   186ac:	e7f3      	b.n	18696 <memcpy+0x8e>
   186ae:	bf00      	nop

000186b0 <memset>:
   186b0:	0783      	lsls	r3, r0, #30
   186b2:	b4f0      	push	{r4, r5, r6, r7}
   186b4:	d048      	beq.n	18748 <memset+0x98>
   186b6:	1e54      	subs	r4, r2, #1
   186b8:	2a00      	cmp	r2, #0
   186ba:	d043      	beq.n	18744 <memset+0x94>
   186bc:	b2cd      	uxtb	r5, r1
   186be:	4603      	mov	r3, r0
   186c0:	e002      	b.n	186c8 <memset+0x18>
   186c2:	2c00      	cmp	r4, #0
   186c4:	d03e      	beq.n	18744 <memset+0x94>
   186c6:	4614      	mov	r4, r2
   186c8:	f803 5b01 	strb.w	r5, [r3], #1
   186cc:	f013 0f03 	tst.w	r3, #3
   186d0:	f104 32ff 	add.w	r2, r4, #4294967295
   186d4:	d1f5      	bne.n	186c2 <memset+0x12>
   186d6:	2c03      	cmp	r4, #3
   186d8:	d92d      	bls.n	18736 <memset+0x86>
   186da:	b2cd      	uxtb	r5, r1
   186dc:	2c0f      	cmp	r4, #15
   186de:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   186e2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   186e6:	d918      	bls.n	1871a <memset+0x6a>
   186e8:	f1a4 0710 	sub.w	r7, r4, #16
   186ec:	f103 0610 	add.w	r6, r3, #16
   186f0:	461a      	mov	r2, r3
   186f2:	093f      	lsrs	r7, r7, #4
   186f4:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   186f8:	6015      	str	r5, [r2, #0]
   186fa:	3210      	adds	r2, #16
   186fc:	f842 5c0c 	str.w	r5, [r2, #-12]
   18700:	f842 5c08 	str.w	r5, [r2, #-8]
   18704:	f842 5c04 	str.w	r5, [r2, #-4]
   18708:	42b2      	cmp	r2, r6
   1870a:	d1f5      	bne.n	186f8 <memset+0x48>
   1870c:	f004 040f 	and.w	r4, r4, #15
   18710:	3701      	adds	r7, #1
   18712:	2c03      	cmp	r4, #3
   18714:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   18718:	d90d      	bls.n	18736 <memset+0x86>
   1871a:	461e      	mov	r6, r3
   1871c:	4622      	mov	r2, r4
   1871e:	3a04      	subs	r2, #4
   18720:	f846 5b04 	str.w	r5, [r6], #4
   18724:	2a03      	cmp	r2, #3
   18726:	d8fa      	bhi.n	1871e <memset+0x6e>
   18728:	1f22      	subs	r2, r4, #4
   1872a:	f004 0403 	and.w	r4, r4, #3
   1872e:	f022 0203 	bic.w	r2, r2, #3
   18732:	3204      	adds	r2, #4
   18734:	4413      	add	r3, r2
   18736:	b12c      	cbz	r4, 18744 <memset+0x94>
   18738:	b2c9      	uxtb	r1, r1
   1873a:	441c      	add	r4, r3
   1873c:	f803 1b01 	strb.w	r1, [r3], #1
   18740:	42a3      	cmp	r3, r4
   18742:	d1fb      	bne.n	1873c <memset+0x8c>
   18744:	bcf0      	pop	{r4, r5, r6, r7}
   18746:	4770      	bx	lr
   18748:	4614      	mov	r4, r2
   1874a:	4603      	mov	r3, r0
   1874c:	e7c3      	b.n	186d6 <memset+0x26>
   1874e:	bf00      	nop

00018750 <strncpy>:
   18750:	ea40 0301 	orr.w	r3, r0, r1
   18754:	079b      	lsls	r3, r3, #30
   18756:	b470      	push	{r4, r5, r6}
   18758:	d12b      	bne.n	187b2 <strncpy+0x62>
   1875a:	2a03      	cmp	r2, #3
   1875c:	bf84      	itt	hi
   1875e:	460b      	movhi	r3, r1
   18760:	4605      	movhi	r5, r0
   18762:	d926      	bls.n	187b2 <strncpy+0x62>
   18764:	4619      	mov	r1, r3
   18766:	f853 4b04 	ldr.w	r4, [r3], #4
   1876a:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   1876e:	ea26 0604 	bic.w	r6, r6, r4
   18772:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   18776:	d105      	bne.n	18784 <strncpy+0x34>
   18778:	3a04      	subs	r2, #4
   1877a:	f845 4b04 	str.w	r4, [r5], #4
   1877e:	2a03      	cmp	r2, #3
   18780:	4619      	mov	r1, r3
   18782:	d8ef      	bhi.n	18764 <strncpy+0x14>
   18784:	b19a      	cbz	r2, 187ae <strncpy+0x5e>
   18786:	780c      	ldrb	r4, [r1, #0]
   18788:	3a01      	subs	r2, #1
   1878a:	1c6b      	adds	r3, r5, #1
   1878c:	702c      	strb	r4, [r5, #0]
   1878e:	b13c      	cbz	r4, 187a0 <strncpy+0x50>
   18790:	b16a      	cbz	r2, 187ae <strncpy+0x5e>
   18792:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   18796:	3a01      	subs	r2, #1
   18798:	f803 4b01 	strb.w	r4, [r3], #1
   1879c:	2c00      	cmp	r4, #0
   1879e:	d1f7      	bne.n	18790 <strncpy+0x40>
   187a0:	b12a      	cbz	r2, 187ae <strncpy+0x5e>
   187a2:	441a      	add	r2, r3
   187a4:	2100      	movs	r1, #0
   187a6:	f803 1b01 	strb.w	r1, [r3], #1
   187aa:	4293      	cmp	r3, r2
   187ac:	d1fb      	bne.n	187a6 <strncpy+0x56>
   187ae:	bc70      	pop	{r4, r5, r6}
   187b0:	4770      	bx	lr
   187b2:	4605      	mov	r5, r0
   187b4:	e7e6      	b.n	18784 <strncpy+0x34>
   187b6:	bf00      	nop

000187b8 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   187b8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   187ba:	e003      	b.n	187c4 <LoopCopyDataInit>

000187bc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   187bc:	4b0a      	ldr	r3, [pc, #40]	; (187e8 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   187be:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   187c0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   187c2:	3104      	adds	r1, #4

000187c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   187c4:	4809      	ldr	r0, [pc, #36]	; (187ec <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   187c6:	4b0a      	ldr	r3, [pc, #40]	; (187f0 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   187c8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   187ca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   187cc:	d3f6      	bcc.n	187bc <CopyDataInit>
	ldr	r2, =_sbss
   187ce:	4a09      	ldr	r2, [pc, #36]	; (187f4 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   187d0:	e002      	b.n	187d8 <LoopFillZerobss>

000187d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   187d2:	2300      	movs	r3, #0
	str	r3, [r2], #4
   187d4:	f842 3b04 	str.w	r3, [r2], #4

000187d8 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   187d8:	4b07      	ldr	r3, [pc, #28]	; (187f8 <LoopFillZerobss+0x20>)
	cmp	r2, r3
   187da:	429a      	cmp	r2, r3
	bcc	FillZerobss
   187dc:	d3f9      	bcc.n	187d2 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   187de:	f7e7 fdad 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   187e2:	f7fe fde7 	bl	173b4 <main>
	bx	lr    
   187e6:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   187e8:	00018958 	.word	0x00018958
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   187ec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   187f0:	20000488 	.word	0x20000488
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   187f4:	20000488 	.word	0x20000488
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   187f8:	2000b798 	.word	0x2000b798

000187fc <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   187fc:	e7fe      	b.n	187fc <ADC1_2_IRQHandler>
   187fe:	0000      	movs	r0, r0
   18800:	6c6c616d 	.word	0x6c6c616d
   18804:	6620636f 	.word	0x6620636f
   18808:	6520726f 	.word	0x6520726f
   1880c:	746e6576 	.word	0x746e6576
   18810:	61747320 	.word	0x61747320
   18814:	66206b63 	.word	0x66206b63
   18818:	656c6961 	.word	0x656c6961
   1881c:	000d0a64 	.word	0x000d0a64
   18820:	72656874 	.word	0x72656874
   18824:	72612065 	.word	0x72612065
   18828:	65732065 	.word	0x65732065
   1882c:	726f736e 	.word	0x726f736e
   18830:	73696d20 	.word	0x73696d20
   18834:	676e6973 	.word	0x676e6973
   18838:	61656420 	.word	0x61656420
   1883c:	6e696c64 	.word	0x6e696c64
   18840:	000d0a65 	.word	0x000d0a65
   18844:	72656874 	.word	0x72656874
   18848:	72612065 	.word	0x72612065
   1884c:	65732065 	.word	0x65732065
   18850:	6e617672 	.word	0x6e617672
   18854:	6d207374 	.word	0x6d207374
   18858:	69737369 	.word	0x69737369
   1885c:	6420676e 	.word	0x6420676e
   18860:	6c646165 	.word	0x6c646165
   18864:	0a656e69 	.word	0x0a656e69
   18868:	0000000d 	.word	0x0000000d
   1886c:	6f727245 	.word	0x6f727245
   18870:	54203a72 	.word	0x54203a72
   18874:	20736968 	.word	0x20736968
   18878:	6e657665 	.word	0x6e657665
   1887c:	61682074 	.word	0x61682074
   18880:	72612073 	.word	0x72612073
   18884:	65766972 	.word	0x65766972
   18888:	0a212164 	.word	0x0a212164
   1888c:	0000000d 	.word	0x0000000d
   18890:	454c4449 	.word	0x454c4449
   18894:	00000000 	.word	0x00000000

00018898 <ulKernelPriority>:
   18898:	0000007f                                ....

0001889c <heapSTRUCT_SIZE>:
   1889c:	00010010                                         ..

0001889e <version>:
   1889e:	3d5a0001                                         ..

000188a0 <utm_east0>:
   188a0:	00093d5a                                Z=..

000188a4 <utm_north0>:
   188a4:	005875e6                                .uX.

000188a8 <climb_pgain>:
   188a8:	bcf5c28f                                ....

000188ac <climb_igain>:
   188ac:	3dcccccd                                ...=

000188b0 <level_gaz>:
   188b0:	3e9eb852                                R..>

000188b4 <nav_east0>:
   188b4:	00093d5a                                Z=..

000188b8 <nav_north0>:
   188b8:	005875e6                                .uX.

000188bc <nb_waypoint>:
   188bc:	00000007 33323130 37363534 42413938     ....0123456789AB
   188cc:	46454443                                CDEF

000188d0 <failsafe>:
	...
   188e4:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   188f4:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   18904:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   18914:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   18924:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   18934:	000d0a30 00000d0a 65532d52 6e617672     0.......R-Servan
   18944:	00000074 736e6573 0000726f 76726573     t...sensor..serv
   18954:	00746e61                                ant.
