
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 05 20 3d 8b 01 00 81 8b 01 00 81 8b 01 00     .P. =...........
      10:	81 8b 01 00 81 8b 01 00 81 8b 01 00 00 00 00 00     ................
	...
      2c:	95 5d 00 00 81 8b 01 00 00 00 00 00 a1 5e 00 00     .]...........^..
      3c:	dd 5e 00 00 81 8b 01 00 81 8b 01 00 81 8b 01 00     .^..............
      4c:	81 8b 01 00 81 8b 01 00 81 8b 01 00 81 8b 01 00     ................
      5c:	81 8b 01 00 81 8b 01 00 81 8b 01 00 81 8b 01 00     ................
      6c:	81 8b 01 00 81 8b 01 00 81 8b 01 00 81 8b 01 00     ................
      7c:	81 8b 01 00 81 8b 01 00 81 8b 01 00 81 8b 01 00     ................
      8c:	81 8b 01 00 81 8b 01 00 81 8b 01 00 81 8b 01 00     ................
      9c:	81 8b 01 00 81 8b 01 00 81 8b 01 00 81 8b 01 00     ................
      ac:	81 8b 01 00 81 8b 01 00 81 8b 01 00 81 8b 01 00     ................
      bc:	81 8b 01 00 81 8b 01 00 81 8b 01 00 81 8b 01 00     ................
      cc:	81 8b 01 00 81 8b 01 00 81 8b 01 00 81 8b 01 00     ................
      dc:	81 8b 01 00 81 8b 01 00 81 8b 01 00 81 8b 01 00     ................
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	00018c74 	.word	0x00018c74
     6d0:	20000000 	.word	0x20000000
     6d4:	200005d8 	.word	0x200005d8
     6d8:	200005d8 	.word	0x200005d8
     6dc:	2004cba4 	.word	0x2004cba4

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f003 fd99 	bl	5f30 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 6344 	movw	r3, #1604	; 0x644
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 6344 	movw	r3, #1604	; 0x644
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f001 fed8 	bl	4200 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f001 fed3 	bl	4200 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0205 	rsb	r2, r3, #5
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 6348 	movw	r3, #1608	; 0x648
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 6348 	movw	r3, #1608	; 0x648
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 52d8 	movw	r2, #1496	; 0x5d8
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f001 feb3 	bl	4218 <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 634c 	movw	r3, #1612	; 0x64c
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 6344 	movw	r3, #1604	; 0x644
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f001 fef2 	bl	42d8 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 6344 	movw	r3, #1604	; 0x644
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 634c 	movw	r3, #1612	; 0x64c
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 632c 	movw	r3, #1580	; 0x62c
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 6344 	movw	r3, #1604	; 0x644
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f001 fe9c 	bl	4268 <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 6328 	movw	r3, #1576	; 0x628
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 6344 	movw	r3, #1604	; 0x644
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f001 fe8c 	bl	4268 <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 6344 	movw	r3, #1604	; 0x644
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f001 fe7f 	bl	4268 <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 6330 	movw	r3, #1584	; 0x630
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f001 fea0 	bl	42d8 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f001 fe97 	bl	42d8 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 6348 	movw	r3, #1608	; 0x648
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 6348 	movw	r3, #1608	; 0x648
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 52d8 	movw	r2, #1496	; 0x5d8
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f001 fe16 	bl	4218 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 6330 	movw	r3, #1584	; 0x630
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f002 fee5 	bl	53d4 <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 6350 	movw	r3, #1616	; 0x650
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 6354 	movw	r3, #1620	; 0x654
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 634c 	movw	r3, #1612	; 0x64c
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 634c 	movw	r3, #1612	; 0x64c
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 6354 	movw	r3, #1620	; 0x654
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 6354 	movw	r3, #1620	; 0x654
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 634c 	movw	r3, #1612	; 0x64c
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 6328 	movw	r3, #1576	; 0x628
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 632c 	movw	r3, #1580	; 0x62c
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 6328 	movw	r3, #1576	; 0x628
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 632c 	movw	r3, #1580	; 0x62c
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 6328 	movw	r3, #1576	; 0x628
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 634c 	movw	r3, #1612	; 0x64c
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f001 fe0a 	bl	42d8 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f001 fe01 	bl	42d8 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 6348 	movw	r3, #1608	; 0x648
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 6348 	movw	r3, #1608	; 0x648
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 52d8 	movw	r2, #1496	; 0x5d8
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f001 fd7c 	bl	4218 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 6328 	movw	r3, #1576	; 0x628
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 6354 	movw	r3, #1620	; 0x654
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 634c 	movw	r3, #1612	; 0x64c
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 6350 	movw	r3, #1616	; 0x650
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 6348 	movw	r3, #1608	; 0x648
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 6348 	movw	r3, #1608	; 0x648
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 6348 	movw	r3, #1608	; 0x648
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 6348 	movw	r3, #1608	; 0x648
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 52d8 	movw	r2, #1496	; 0x5d8
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 6348 	movw	r3, #1608	; 0x648
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 52d8 	movw	r2, #1496	; 0x5d8
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 6344 	movw	r3, #1604	; 0x644
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 6344 	movw	r3, #1604	; 0x644
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 6344 	movw	r3, #1604	; 0x644
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 6344 	movw	r3, #1604	; 0x644
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 52d8 	movw	r2, #1496	; 0x5d8
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f001 fcb3 	bl	41c0 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 6000 	movw	r0, #1536	; 0x600
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f001 fca7 	bl	41c0 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 6014 	movw	r0, #1556	; 0x614
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f001 fca1 	bl	41c0 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 6030 	movw	r0, #1584	; 0x630
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f001 fc9b 	bl	41c0 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 6328 	movw	r3, #1576	; 0x628
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 6200 	movw	r2, #1536	; 0x600
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 632c 	movw	r3, #1580	; 0x62c
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 6214 	movw	r2, #1556	; 0x614
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f001 fd05 	bl	42d8 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 6030 	movw	r0, #1584	; 0x630
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f001 fc9c 	bl	4218 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 6344 	movw	r3, #1604	; 0x644
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <xIsERLNull>:
static void vEventSetxTag(portTickType xDeadline, portTickType xTimestamp, xEventHandle pxNewEvent );

// if xEventReadyList is not null,
// then return the type of destination servant of the first event
portBASE_TYPE xIsERLNull()
{
    2908:	b580      	push	{r7, lr}
    290a:	b086      	sub	sp, #24
    290c:	af00      	add	r7, sp, #0
    portBASE_TYPE pxDestination;
    struct tag xTag;
    if(listCURRENT_LIST_LENGTH(&xEventReadyList) > 0)
    290e:	f240 63c4 	movw	r3, #1732	; 0x6c4
    2912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2916:	681b      	ldr	r3, [r3, #0]
    2918:	2b00      	cmp	r3, #0
    291a:	d029      	beq.n	2970 <xIsERLNull+0x68>
    {
        pxDestination = xEventGetpxDestination((xEventReadyList.xListEnd.pxNext)->pvOwner); 
    291c:	f240 63c4 	movw	r3, #1732	; 0x6c4
    2920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2924:	68db      	ldr	r3, [r3, #12]
    2926:	68db      	ldr	r3, [r3, #12]
    2928:	4618      	mov	r0, r3
    292a:	f000 f833 	bl	2994 <xEventGetpxDestination>
    292e:	6178      	str	r0, [r7, #20]
        xTag = xEventGetxTag(xEventReadyList.xListEnd.pxNext->pvOwner);
    2930:	f240 63c4 	movw	r3, #1732	; 0x6c4
    2934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2938:	68db      	ldr	r3, [r3, #12]
    293a:	68db      	ldr	r3, [r3, #12]
    293c:	1d3a      	adds	r2, r7, #4
    293e:	4610      	mov	r0, r2
    2940:	4619      	mov	r1, r3
    2942:	f000 f833 	bl	29ac <xEventGetxTag>
        if( xTaskGetTickCount() >= xTag.xTimestamp )
    2946:	f002 fd45 	bl	53d4 <xTaskGetTickCount>
    294a:	4602      	mov	r2, r0
    294c:	68bb      	ldr	r3, [r7, #8]
    294e:	429a      	cmp	r2, r3
    2950:	d30c      	bcc.n	296c <xIsERLNull+0x64>
            return xContexts[pxDestination].xType; 
    2952:	f240 62d8 	movw	r2, #1752	; 0x6d8
    2956:	f2c2 0200 	movt	r2, #8192	; 0x2000
    295a:	6979      	ldr	r1, [r7, #20]
    295c:	460b      	mov	r3, r1
    295e:	00db      	lsls	r3, r3, #3
    2960:	1a5b      	subs	r3, r3, r1
    2962:	00db      	lsls	r3, r3, #3
    2964:	4413      	add	r3, r2
    2966:	3304      	adds	r3, #4
    2968:	681b      	ldr	r3, [r3, #0]
    296a:	e003      	b.n	2974 <xIsERLNull+0x6c>
        else
            return 0;
    296c:	2300      	movs	r3, #0
    296e:	e001      	b.n	2974 <xIsERLNull+0x6c>
    }
    return -1;
    2970:	f04f 33ff 	mov.w	r3, #4294967295
}
    2974:	4618      	mov	r0, r3
    2976:	3718      	adds	r7, #24
    2978:	46bd      	mov	sp, r7
    297a:	bd80      	pop	{r7, pc}

0000297c <xEventGetpxSource>:

portBASE_TYPE xEventGetpxSource( xEventHandle pxEvent )
{
    297c:	b480      	push	{r7}
    297e:	b083      	sub	sp, #12
    2980:	af00      	add	r7, sp, #0
    2982:	6078      	str	r0, [r7, #4]
    return ((eveECB *)pxEvent)->pxSource;
    2984:	687b      	ldr	r3, [r7, #4]
    2986:	681b      	ldr	r3, [r3, #0]
}
    2988:	4618      	mov	r0, r3
    298a:	370c      	adds	r7, #12
    298c:	46bd      	mov	sp, r7
    298e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2992:	4770      	bx	lr

00002994 <xEventGetpxDestination>:

portBASE_TYPE xEventGetpxDestination( xEventHandle pxEvent)
{
    2994:	b480      	push	{r7}
    2996:	b083      	sub	sp, #12
    2998:	af00      	add	r7, sp, #0
    299a:	6078      	str	r0, [r7, #4]
    return ((eveECB *) pxEvent)->pxDestination;
    299c:	687b      	ldr	r3, [r7, #4]
    299e:	685b      	ldr	r3, [r3, #4]
}
    29a0:	4618      	mov	r0, r3
    29a2:	370c      	adds	r7, #12
    29a4:	46bd      	mov	sp, r7
    29a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    29aa:	4770      	bx	lr

000029ac <xEventGetxTag>:

struct tag xEventGetxTag( xEventHandle pxEvent)
{
    29ac:	b490      	push	{r4, r7}
    29ae:	b082      	sub	sp, #8
    29b0:	af00      	add	r7, sp, #0
    29b2:	6078      	str	r0, [r7, #4]
    29b4:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xTag;
    29b6:	687a      	ldr	r2, [r7, #4]
    29b8:	683b      	ldr	r3, [r7, #0]
    29ba:	4614      	mov	r4, r2
    29bc:	3308      	adds	r3, #8
    29be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    29c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    29c4:	6878      	ldr	r0, [r7, #4]
    29c6:	3708      	adds	r7, #8
    29c8:	46bd      	mov	sp, r7
    29ca:	bc90      	pop	{r4, r7}
    29cc:	4770      	bx	lr
    29ce:	bf00      	nop

000029d0 <xEventGetxData>:

struct eventData xEventGetxData( xEventHandle pxEvent)
{
    29d0:	b480      	push	{r7}
    29d2:	b083      	sub	sp, #12
    29d4:	af00      	add	r7, sp, #0
    29d6:	6078      	str	r0, [r7, #4]
    29d8:	6039      	str	r1, [r7, #0]
    return ((eveECB *) pxEvent)->xData;
    29da:	687b      	ldr	r3, [r7, #4]
    29dc:	683a      	ldr	r2, [r7, #0]
    29de:	3218      	adds	r2, #24
    29e0:	e892 0003 	ldmia.w	r2, {r0, r1}
    29e4:	e883 0003 	stmia.w	r3, {r0, r1}
}
    29e8:	6878      	ldr	r0, [r7, #4]
    29ea:	370c      	adds	r7, #12
    29ec:	46bd      	mov	sp, r7
    29ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    29f2:	4770      	bx	lr

000029f4 <getGCD>:

static portBASE_TYPE getGCD(portTickType t1, portTickType t2)
{
    29f4:	b580      	push	{r7, lr}
    29f6:	b082      	sub	sp, #8
    29f8:	af00      	add	r7, sp, #0
    29fa:	6078      	str	r0, [r7, #4]
    29fc:	6039      	str	r1, [r7, #0]
    return t1%t2==0 ? t2 : getGCD(t2, t1 % t2);
    29fe:	687b      	ldr	r3, [r7, #4]
    2a00:	683a      	ldr	r2, [r7, #0]
    2a02:	fbb3 f2f2 	udiv	r2, r3, r2
    2a06:	6839      	ldr	r1, [r7, #0]
    2a08:	fb01 f202 	mul.w	r2, r1, r2
    2a0c:	1a9b      	subs	r3, r3, r2
    2a0e:	2b00      	cmp	r3, #0
    2a10:	d00d      	beq.n	2a2e <getGCD+0x3a>
    2a12:	687b      	ldr	r3, [r7, #4]
    2a14:	683a      	ldr	r2, [r7, #0]
    2a16:	fbb3 f2f2 	udiv	r2, r3, r2
    2a1a:	6839      	ldr	r1, [r7, #0]
    2a1c:	fb01 f202 	mul.w	r2, r1, r2
    2a20:	1a9b      	subs	r3, r3, r2
    2a22:	6838      	ldr	r0, [r7, #0]
    2a24:	4619      	mov	r1, r3
    2a26:	f7ff ffe5 	bl	29f4 <getGCD>
    2a2a:	4603      	mov	r3, r0
    2a2c:	e000      	b.n	2a30 <getGCD+0x3c>
    2a2e:	683b      	ldr	r3, [r7, #0]
}
    2a30:	4618      	mov	r0, r3
    2a32:	3708      	adds	r7, #8
    2a34:	46bd      	mov	sp, r7
    2a36:	bd80      	pop	{r7, pc}

00002a38 <GCDOfTaskPeriod>:

inline static portTickType GCDOfTaskPeriod()
{
    2a38:	b580      	push	{r7, lr}
    2a3a:	b082      	sub	sp, #8
    2a3c:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portTickType result = xPeriodOfTask[0];
    2a3e:	f240 0328 	movw	r3, #40	; 0x28
    2a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a46:	681b      	ldr	r3, [r3, #0]
    2a48:	603b      	str	r3, [r7, #0]

    for( i = 1; i < NUMBEROFTASK; ++ i )
    2a4a:	2301      	movs	r3, #1
    2a4c:	607b      	str	r3, [r7, #4]
    2a4e:	e00f      	b.n	2a70 <GCDOfTaskPeriod+0x38>
    {
        result = getGCD(result , xPeriodOfTask[i]); 
    2a50:	f240 0328 	movw	r3, #40	; 0x28
    2a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a58:	687a      	ldr	r2, [r7, #4]
    2a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2a5e:	6838      	ldr	r0, [r7, #0]
    2a60:	4619      	mov	r1, r3
    2a62:	f7ff ffc7 	bl	29f4 <getGCD>
    2a66:	4603      	mov	r3, r0
    2a68:	603b      	str	r3, [r7, #0]
inline static portTickType GCDOfTaskPeriod()
{
    portBASE_TYPE i;
    portTickType result = xPeriodOfTask[0];

    for( i = 1; i < NUMBEROFTASK; ++ i )
    2a6a:	687b      	ldr	r3, [r7, #4]
    2a6c:	3301      	adds	r3, #1
    2a6e:	607b      	str	r3, [r7, #4]
    2a70:	687b      	ldr	r3, [r7, #4]
    2a72:	2b0c      	cmp	r3, #12
    2a74:	ddec      	ble.n	2a50 <GCDOfTaskPeriod+0x18>
    {
        result = getGCD(result , xPeriodOfTask[i]); 
    }
    return result;
    2a76:	683b      	ldr	r3, [r7, #0]
}
    2a78:	4618      	mov	r0, r3
    2a7a:	3708      	adds	r7, #8
    2a7c:	46bd      	mov	sp, r7
    2a7e:	bd80      	pop	{r7, pc}

00002a80 <vInitialiseEventLists>:

void vInitialiseEventLists() 
{
    2a80:	b590      	push	{r4, r7, lr}
    2a82:	b091      	sub	sp, #68	; 0x44
    2a84:	af00      	add	r7, sp, #0
    volatile portBASE_TYPE xCPU, i;
    eveECB * pxIdleEvents[NUMBEROFEVENTS];
    eveECB * pxEndFlagEvent;

    // init the GCD of Task period;
    GCDPeriod = GCDOfTaskPeriod();
    2a86:	f7ff ffd7 	bl	2a38 <GCDOfTaskPeriod>
    2a8a:	4602      	mov	r2, r0
    2a8c:	f240 6358 	movw	r3, #1624	; 0x658
    2a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a94:	601a      	str	r2, [r3, #0]

    vListInitialise( ( xList * ) &xEventIdleList);
    2a96:	f240 6060 	movw	r0, #1632	; 0x660
    2a9a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2a9e:	f001 fb8f 	bl	41c0 <vListInitialise>
    vListInitialise( ( xList * ) &xEventNonExecutablePool );
    2aa2:	f240 6074 	movw	r0, #1652	; 0x674
    2aa6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2aaa:	f001 fb89 	bl	41c0 <vListInitialise>
    vListInitialise( ( xList * ) &xEventNonExecutableList);
    2aae:	f240 6088 	movw	r0, #1672	; 0x688
    2ab2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ab6:	f001 fb83 	bl	41c0 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutablePool );
    2aba:	f240 609c 	movw	r0, #1692	; 0x69c
    2abe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ac2:	f001 fb7d 	bl	41c0 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutableList );
    2ac6:	f240 60b0 	movw	r0, #1712	; 0x6b0
    2aca:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ace:	f001 fb77 	bl	41c0 <vListInitialise>
    vListInitialise( (xList * ) & xEventReadyList);
    2ad2:	f240 60c4 	movw	r0, #1732	; 0x6c4
    2ad6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ada:	f001 fb71 	bl	41c0 <vListInitialise>

    for( i = 0; i < NUMBEROFEVENTS; ++i )
    2ade:	2300      	movs	r3, #0
    2ae0:	637b      	str	r3, [r7, #52]	; 0x34
    2ae2:	e02f      	b.n	2b44 <vInitialiseEventLists+0xc4>
    {
        pxIdleEvents[i] = (eveECB *) pvPortMalloc(sizeof(eveECB)); 
    2ae4:	6b7c      	ldr	r4, [r7, #52]	; 0x34
    2ae6:	2034      	movs	r0, #52	; 0x34
    2ae8:	f003 fa22 	bl	5f30 <pvPortMalloc>
    2aec:	4602      	mov	r2, r0
    2aee:	00a3      	lsls	r3, r4, #2
    2af0:	f107 0140 	add.w	r1, r7, #64	; 0x40
    2af4:	440b      	add	r3, r1
    2af6:	f843 2c40 	str.w	r2, [r3, #-64]
        vListIntialiseEventItem( pxIdleEvents[i], (xListItem *) & pxIdleEvents[i]->xEventListItem );
    2afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2afc:	009b      	lsls	r3, r3, #2
    2afe:	f107 0240 	add.w	r2, r7, #64	; 0x40
    2b02:	4413      	add	r3, r2
    2b04:	f853 2c40 	ldr.w	r2, [r3, #-64]
    2b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2b0a:	009b      	lsls	r3, r3, #2
    2b0c:	f107 0140 	add.w	r1, r7, #64	; 0x40
    2b10:	440b      	add	r3, r1
    2b12:	f853 3c40 	ldr.w	r3, [r3, #-64]
    2b16:	3320      	adds	r3, #32
    2b18:	4610      	mov	r0, r2
    2b1a:	4619      	mov	r1, r3
    2b1c:	f000 f98a 	bl	2e34 <vListIntialiseEventItem>
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    2b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2b22:	009b      	lsls	r3, r3, #2
    2b24:	f107 0240 	add.w	r2, r7, #64	; 0x40
    2b28:	4413      	add	r3, r2
    2b2a:	f853 3c40 	ldr.w	r3, [r3, #-64]
    2b2e:	3320      	adds	r3, #32
    2b30:	f240 6060 	movw	r0, #1632	; 0x660
    2b34:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2b38:	4619      	mov	r1, r3
    2b3a:	f001 fb6d 	bl	4218 <vListInsertEnd>
    vListInitialise( ( xList * ) &xEventNonExecutableList);
    vListInitialise( ( xList * ) &xEventExecutablePool );
    vListInitialise( ( xList * ) &xEventExecutableList );
    vListInitialise( (xList * ) & xEventReadyList);

    for( i = 0; i < NUMBEROFEVENTS; ++i )
    2b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2b40:	3301      	adds	r3, #1
    2b42:	637b      	str	r3, [r7, #52]	; 0x34
    2b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2b46:	2b0c      	cmp	r3, #12
    2b48:	ddcc      	ble.n	2ae4 <vInitialiseEventLists+0x64>
        vListIntialiseEventItem( pxIdleEvents[i], (xListItem *) & pxIdleEvents[i]->xEventListItem );
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    }

    // Creating an End FLag Event and insert into the end of xEventList, which needs sorted events
    pxEndFlagEvent = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    2b4a:	2034      	movs	r0, #52	; 0x34
    2b4c:	f003 f9f0 	bl	5f30 <pvPortMalloc>
    2b50:	63f8      	str	r0, [r7, #60]	; 0x3c
    if( pxEndFlagEvent != NULL )
    2b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b54:	2b00      	cmp	r3, #0
    2b56:	d01e      	beq.n	2b96 <vInitialiseEventLists+0x116>
    {
       // pxEndFlagEvent->pxSource = pxEndFlagEvent->pxDestination = NULL;
        // there may be some problem here because of this assignment way
        pxEndFlagEvent->xTag.xDeadline= portMAX_DELAY;
    2b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b5a:	f04f 32ff 	mov.w	r2, #4294967295
    2b5e:	609a      	str	r2, [r3, #8]
        pxEndFlagEvent->xTag.xTimestamp = portMAX_DELAY;
    2b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b62:	f04f 32ff 	mov.w	r2, #4294967295
    2b66:	60da      	str	r2, [r3, #12]
        pxEndFlagEvent->xTag.xMicroStep = portMAX_DELAY;
    2b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b6a:	f04f 32ff 	mov.w	r2, #4294967295
    2b6e:	615a      	str	r2, [r3, #20]
        pxEndFlagEvent->xTag.xLevel = portMAX_DELAY;
    2b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b72:	f04f 32ff 	mov.w	r2, #4294967295
    2b76:	611a      	str	r2, [r3, #16]
        vListIntialiseEventItem( pxEndFlagEvent, (xListItem *) & pxEndFlagEvent->xEventListItem );
    2b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b7a:	3320      	adds	r3, #32
    2b7c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    2b7e:	4619      	mov	r1, r3
    2b80:	f000 f958 	bl	2e34 <vListIntialiseEventItem>
        vListInsertEnd(&xEventNonExecutableList, &pxEndFlagEvent->xEventListItem); 
    2b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b86:	3320      	adds	r3, #32
    2b88:	f240 6088 	movw	r0, #1672	; 0x688
    2b8c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2b90:	4619      	mov	r1, r3
    2b92:	f001 fb41 	bl	4218 <vListInsertEnd>
    }

    // Creating an End FLag Event and insert into the end of xEventExecutableList, which needs sorted events
    pxEndFlagEvent = (eveECB *) pvPortMalloc( sizeof( eveECB ) );
    2b96:	2034      	movs	r0, #52	; 0x34
    2b98:	f003 f9ca 	bl	5f30 <pvPortMalloc>
    2b9c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if( pxEndFlagEvent != NULL )
    2b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2ba0:	2b00      	cmp	r3, #0
    2ba2:	d01e      	beq.n	2be2 <vInitialiseEventLists+0x162>
    {
        // there may be some problem here because of this assignment way
        pxEndFlagEvent->xTag.xDeadline= portMAX_DELAY;
    2ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2ba6:	f04f 32ff 	mov.w	r2, #4294967295
    2baa:	609a      	str	r2, [r3, #8]
        pxEndFlagEvent->xTag.xTimestamp = portMAX_DELAY;
    2bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2bae:	f04f 32ff 	mov.w	r2, #4294967295
    2bb2:	60da      	str	r2, [r3, #12]
        pxEndFlagEvent->xTag.xMicroStep = portMAX_DELAY;
    2bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2bb6:	f04f 32ff 	mov.w	r2, #4294967295
    2bba:	615a      	str	r2, [r3, #20]
        pxEndFlagEvent->xTag.xLevel = portMAX_DELAY;
    2bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2bbe:	f04f 32ff 	mov.w	r2, #4294967295
    2bc2:	611a      	str	r2, [r3, #16]
        vListIntialiseEventItem( pxEndFlagEvent, (xListItem *) & pxEndFlagEvent->xEventListItem );
    2bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2bc6:	3320      	adds	r3, #32
    2bc8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    2bca:	4619      	mov	r1, r3
    2bcc:	f000 f932 	bl	2e34 <vListIntialiseEventItem>
        vListInsertEnd(&xEventExecutableList, &pxEndFlagEvent->xEventListItem); 
    2bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2bd2:	3320      	adds	r3, #32
    2bd4:	f240 60b0 	movw	r0, #1712	; 0x6b0
    2bd8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2bdc:	4619      	mov	r1, r3
    2bde:	f001 fb1b 	bl	4218 <vListInsertEnd>
    }
}
    2be2:	3744      	adds	r7, #68	; 0x44
    2be4:	46bd      	mov	sp, r7
    2be6:	bd90      	pop	{r4, r7, pc}

00002be8 <xIsExecutableEventArrive>:

portBASE_TYPE xIsExecutableEventArrive()
{
    2be8:	b580      	push	{r7, lr}
    2bea:	b088      	sub	sp, #32
    2bec:	af00      	add	r7, sp, #0
    volatile xListItem * pxIterator;
    portTickType xCurrentTime;
    portBASE_TYPE xLen, i;
    struct tag xTag;
    
    if((xLen = listCURRENT_LIST_LENGTH(&xEventNonExecutablePool)) > 0)
    2bee:	f240 6374 	movw	r3, #1652	; 0x674
    2bf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bf6:	681b      	ldr	r3, [r3, #0]
    2bf8:	617b      	str	r3, [r7, #20]
    2bfa:	697b      	ldr	r3, [r7, #20]
    2bfc:	2b00      	cmp	r3, #0
    2bfe:	dd24      	ble.n	2c4a <xIsExecutableEventArrive+0x62>
    {

        pxIterator = (xListItem *)&(xEventNonExecutablePool.xListEnd.pxNext);
    2c00:	4b14      	ldr	r3, [pc, #80]	; (2c54 <xIsExecutableEventArrive+0x6c>)
    2c02:	61fb      	str	r3, [r7, #28]
        xCurrentTime = xTaskGetTickCount();
    2c04:	f002 fbe6 	bl	53d4 <xTaskGetTickCount>
    2c08:	6138      	str	r0, [r7, #16]
        for( i = 0; i < xLen ; i++ , pxIterator = pxIterator->pxNext ) 
    2c0a:	2300      	movs	r3, #0
    2c0c:	61bb      	str	r3, [r7, #24]
    2c0e:	e018      	b.n	2c42 <xIsExecutableEventArrive+0x5a>
        {
            vPrintString("world\n\r");
    2c10:	f648 3084 	movw	r0, #35716	; 0x8b84
    2c14:	f2c0 0001 	movt	r0, #1
    2c18:	f014 fd6c 	bl	176f4 <vPrintString>
            xTag = xEventGetxTag( pxIterator->pvOwner );
    2c1c:	69fb      	ldr	r3, [r7, #28]
    2c1e:	68db      	ldr	r3, [r3, #12]
    2c20:	463a      	mov	r2, r7
    2c22:	4610      	mov	r0, r2
    2c24:	4619      	mov	r1, r3
    2c26:	f7ff fec1 	bl	29ac <xEventGetxTag>
            if(xTag.xTimestamp <= xCurrentTime) return pdTRUE;
    2c2a:	687a      	ldr	r2, [r7, #4]
    2c2c:	693b      	ldr	r3, [r7, #16]
    2c2e:	429a      	cmp	r2, r3
    2c30:	d801      	bhi.n	2c36 <xIsExecutableEventArrive+0x4e>
    2c32:	2301      	movs	r3, #1
    2c34:	e00a      	b.n	2c4c <xIsExecutableEventArrive+0x64>
    if((xLen = listCURRENT_LIST_LENGTH(&xEventNonExecutablePool)) > 0)
    {

        pxIterator = (xListItem *)&(xEventNonExecutablePool.xListEnd.pxNext);
        xCurrentTime = xTaskGetTickCount();
        for( i = 0; i < xLen ; i++ , pxIterator = pxIterator->pxNext ) 
    2c36:	69bb      	ldr	r3, [r7, #24]
    2c38:	3301      	adds	r3, #1
    2c3a:	61bb      	str	r3, [r7, #24]
    2c3c:	69fb      	ldr	r3, [r7, #28]
    2c3e:	685b      	ldr	r3, [r3, #4]
    2c40:	61fb      	str	r3, [r7, #28]
    2c42:	69ba      	ldr	r2, [r7, #24]
    2c44:	697b      	ldr	r3, [r7, #20]
    2c46:	429a      	cmp	r2, r3
    2c48:	dbe2      	blt.n	2c10 <xIsExecutableEventArrive+0x28>
       // temp_pxEventListItem = (xListItem *) xEventNonExecutableList.xListEnd.pxNext;
       // xTag = xEventGetxTag( (temp_pxEventListItem->pvOwner) );
       // xCurrentTime = xTaskGetTickCount();
       // return xTag.xTimestamp <= xCurrentTime ? pdTRUE : pdFALSE;
    }
    return pdFALSE;
    2c4a:	2300      	movs	r3, #0
}
    2c4c:	4618      	mov	r0, r3
    2c4e:	3720      	adds	r7, #32
    2c50:	46bd      	mov	sp, r7
    2c52:	bd80      	pop	{r7, pc}
    2c54:	20000680 	.word	0x20000680

00002c58 <xCompareFunction1>:

/* unexecutable event comparison function is used in xEventList. 
 * The event with earlist timestamp will be proceeded first*/
static portBASE_TYPE xCompareFunction1( const struct tag t1, const struct tag t2 )
{
    2c58:	b490      	push	{r4, r7}
    2c5a:	b084      	sub	sp, #16
    2c5c:	af00      	add	r7, sp, #0
    2c5e:	463c      	mov	r4, r7
    2c60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xTimestamp < t2.xTimestamp)
    2c64:	687a      	ldr	r2, [r7, #4]
    2c66:	69fb      	ldr	r3, [r7, #28]
    2c68:	429a      	cmp	r2, r3
    2c6a:	d201      	bcs.n	2c70 <xCompareFunction1+0x18>
    {
        return pdTRUE;
    2c6c:	2301      	movs	r3, #1
    2c6e:	e01e      	b.n	2cae <xCompareFunction1+0x56>
    }
    else if( t1.xTimestamp == t2.xTimestamp)
    2c70:	687a      	ldr	r2, [r7, #4]
    2c72:	69fb      	ldr	r3, [r7, #28]
    2c74:	429a      	cmp	r2, r3
    2c76:	d119      	bne.n	2cac <xCompareFunction1+0x54>
    {
        if( t1.xDeadline < t2.xDeadline )
    2c78:	683a      	ldr	r2, [r7, #0]
    2c7a:	69bb      	ldr	r3, [r7, #24]
    2c7c:	429a      	cmp	r2, r3
    2c7e:	d201      	bcs.n	2c84 <xCompareFunction1+0x2c>
        {
            return pdTRUE;
    2c80:	2301      	movs	r3, #1
    2c82:	e014      	b.n	2cae <xCompareFunction1+0x56>
        }
        else if( t1.xDeadline == t2.xDeadline )
    2c84:	683a      	ldr	r2, [r7, #0]
    2c86:	69bb      	ldr	r3, [r7, #24]
    2c88:	429a      	cmp	r2, r3
    2c8a:	d10f      	bne.n	2cac <xCompareFunction1+0x54>
        {
            if( t1.xLevel < t2.xLevel )
    2c8c:	68ba      	ldr	r2, [r7, #8]
    2c8e:	6a3b      	ldr	r3, [r7, #32]
    2c90:	429a      	cmp	r2, r3
    2c92:	da01      	bge.n	2c98 <xCompareFunction1+0x40>
            {
                return pdTRUE;
    2c94:	2301      	movs	r3, #1
    2c96:	e00a      	b.n	2cae <xCompareFunction1+0x56>
            }
            else if( t1.xLevel == t2.xLevel && t1.xMicroStep < t2.xMicroStep )
    2c98:	68ba      	ldr	r2, [r7, #8]
    2c9a:	6a3b      	ldr	r3, [r7, #32]
    2c9c:	429a      	cmp	r2, r3
    2c9e:	d105      	bne.n	2cac <xCompareFunction1+0x54>
    2ca0:	68fa      	ldr	r2, [r7, #12]
    2ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ca4:	429a      	cmp	r2, r3
    2ca6:	da01      	bge.n	2cac <xCompareFunction1+0x54>
            {
                return pdTRUE;
    2ca8:	2301      	movs	r3, #1
    2caa:	e000      	b.n	2cae <xCompareFunction1+0x56>
            }
        }
    }
    return pdFALSE;
    2cac:	2300      	movs	r3, #0
}
    2cae:	4618      	mov	r0, r3
    2cb0:	3710      	adds	r7, #16
    2cb2:	46bd      	mov	sp, r7
    2cb4:	bc90      	pop	{r4, r7}
    2cb6:	4770      	bx	lr

00002cb8 <xCompareFunction2>:

/* executable event comparison function is used in xEventExecutableList. 
 * The event with earlist deadline will be scheduled to execute first */
static portBASE_TYPE xCompareFunction2( const struct tag t1, const struct tag t2 )
{
    2cb8:	b490      	push	{r4, r7}
    2cba:	b084      	sub	sp, #16
    2cbc:	af00      	add	r7, sp, #0
    2cbe:	463c      	mov	r4, r7
    2cc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( t1.xDeadline < t2.xDeadline)
    2cc4:	683a      	ldr	r2, [r7, #0]
    2cc6:	69bb      	ldr	r3, [r7, #24]
    2cc8:	429a      	cmp	r2, r3
    2cca:	d201      	bcs.n	2cd0 <xCompareFunction2+0x18>
    {
        return pdTRUE;
    2ccc:	2301      	movs	r3, #1
    2cce:	e01e      	b.n	2d0e <xCompareFunction2+0x56>
    }
    else if( t1.xDeadline == t2.xDeadline)
    2cd0:	683a      	ldr	r2, [r7, #0]
    2cd2:	69bb      	ldr	r3, [r7, #24]
    2cd4:	429a      	cmp	r2, r3
    2cd6:	d119      	bne.n	2d0c <xCompareFunction2+0x54>
    {
        if( t1.xTimestamp < t2.xTimestamp)
    2cd8:	687a      	ldr	r2, [r7, #4]
    2cda:	69fb      	ldr	r3, [r7, #28]
    2cdc:	429a      	cmp	r2, r3
    2cde:	d201      	bcs.n	2ce4 <xCompareFunction2+0x2c>
        {
            return pdTRUE;
    2ce0:	2301      	movs	r3, #1
    2ce2:	e014      	b.n	2d0e <xCompareFunction2+0x56>
        }
        else if( t1.xTimestamp == t2.xTimestamp )
    2ce4:	687a      	ldr	r2, [r7, #4]
    2ce6:	69fb      	ldr	r3, [r7, #28]
    2ce8:	429a      	cmp	r2, r3
    2cea:	d10f      	bne.n	2d0c <xCompareFunction2+0x54>
        {
            if( t1.xLevel < t2.xLevel )
    2cec:	68ba      	ldr	r2, [r7, #8]
    2cee:	6a3b      	ldr	r3, [r7, #32]
    2cf0:	429a      	cmp	r2, r3
    2cf2:	da01      	bge.n	2cf8 <xCompareFunction2+0x40>
            {
                return pdTRUE;
    2cf4:	2301      	movs	r3, #1
    2cf6:	e00a      	b.n	2d0e <xCompareFunction2+0x56>
            }
            else if( t1.xLevel == t2.xLevel && t1.xMicroStep < t2.xMicroStep )
    2cf8:	68ba      	ldr	r2, [r7, #8]
    2cfa:	6a3b      	ldr	r3, [r7, #32]
    2cfc:	429a      	cmp	r2, r3
    2cfe:	d105      	bne.n	2d0c <xCompareFunction2+0x54>
    2d00:	68fa      	ldr	r2, [r7, #12]
    2d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d04:	429a      	cmp	r2, r3
    2d06:	da01      	bge.n	2d0c <xCompareFunction2+0x54>
            {
                return pdTRUE;
    2d08:	2301      	movs	r3, #1
    2d0a:	e000      	b.n	2d0e <xCompareFunction2+0x56>
            }
        }
    }

    return pdFALSE;
    2d0c:	2300      	movs	r3, #0
}
    2d0e:	4618      	mov	r0, r3
    2d10:	3710      	adds	r7, #16
    2d12:	46bd      	mov	sp, r7
    2d14:	bc90      	pop	{r4, r7}
    2d16:	4770      	bx	lr

00002d18 <vEventSetxTag>:

static void vEventSetxTag( portTickType xDeadline, portTickType xTimestamp, xEventHandle pxNewEvent )
{
    2d18:	b480      	push	{r7}
    2d1a:	b087      	sub	sp, #28
    2d1c:	af00      	add	r7, sp, #0
    2d1e:	60f8      	str	r0, [r7, #12]
    2d20:	60b9      	str	r1, [r7, #8]
    2d22:	607a      	str	r2, [r7, #4]
    eveECB * pxEvent =(eveECB *) pxNewEvent;
    2d24:	687b      	ldr	r3, [r7, #4]
    2d26:	617b      	str	r3, [r7, #20]

    /* EDF scheduling algorithm */
    pxEvent->xTag.xDeadline = xDeadline ;
    2d28:	697b      	ldr	r3, [r7, #20]
    2d2a:	68fa      	ldr	r2, [r7, #12]
    2d2c:	609a      	str	r2, [r3, #8]
    pxEvent->xTag.xTimestamp = xTimestamp;
    2d2e:	697b      	ldr	r3, [r7, #20]
    2d30:	68ba      	ldr	r2, [r7, #8]
    2d32:	60da      	str	r2, [r3, #12]

    /*the microstep is not used now*/
    pxEvent->xTag.xMicroStep = 0;
    2d34:	697b      	ldr	r3, [r7, #20]
    2d36:	2200      	movs	r2, #0
    2d38:	615a      	str	r2, [r3, #20]
}
    2d3a:	371c      	adds	r7, #28
    2d3c:	46bd      	mov	sp, r7
    2d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d42:	4770      	bx	lr

00002d44 <prvEventListGenericInsert>:

/* insert event to xEventNonExecutableList in terms of comparison function 1 */
static void prvEventListGenericInsert( xListItem *pxNewListItem, portBASE_TYPE comp)
{
    2d44:	b590      	push	{r4, r7, lr}
    2d46:	b095      	sub	sp, #84	; 0x54
    2d48:	af04      	add	r7, sp, #16
    2d4a:	6078      	str	r0, [r7, #4]
    2d4c:	6039      	str	r1, [r7, #0]
    volatile xListItem *pxIterator;
    struct tag xTagOfInsertion;
    xList * pxList; 

    xTagOfInsertion = xEventGetxTag(pxNewListItem->pvOwner);
    2d4e:	687b      	ldr	r3, [r7, #4]
    2d50:	68db      	ldr	r3, [r3, #12]
    2d52:	f107 0208 	add.w	r2, r7, #8
    2d56:	4610      	mov	r0, r2
    2d58:	4619      	mov	r1, r3
    2d5a:	f7ff fe27 	bl	29ac <xEventGetxTag>

    if(comp == 1)
    2d5e:	683b      	ldr	r3, [r7, #0]
    2d60:	2b01      	cmp	r3, #1
    2d62:	d127      	bne.n	2db4 <prvEventListGenericInsert+0x70>
    {
        pxList = &xEventNonExecutableList;
    2d64:	f240 6388 	movw	r3, #1672	; 0x688
    2d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d6c:	63bb      	str	r3, [r7, #56]	; 0x38
        taskENTER_CRITICAL();
    2d6e:	f003 f865 	bl	5e3c <vPortEnterCritical>
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd); 
    2d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2d74:	3308      	adds	r3, #8
    2d76:	63fb      	str	r3, [r7, #60]	; 0x3c
    2d78:	e002      	b.n	2d80 <prvEventListGenericInsert+0x3c>
             xCompareFunction1( xEventGetxTag( pxIterator->pxNext->pvOwner ), xTagOfInsertion ); 
             pxIterator = pxIterator->pxNext ) {}
    2d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2d7c:	685b      	ldr	r3, [r3, #4]
    2d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if(comp == 1)
    {
        pxList = &xEventNonExecutableList;
        taskENTER_CRITICAL();
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd); 
             xCompareFunction1( xEventGetxTag( pxIterator->pxNext->pvOwner ), xTagOfInsertion ); 
    2d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2d82:	685b      	ldr	r3, [r3, #4]
    2d84:	68db      	ldr	r3, [r3, #12]
    2d86:	f107 0218 	add.w	r2, r7, #24
    2d8a:	4610      	mov	r0, r2
    2d8c:	4619      	mov	r1, r3
    2d8e:	f7ff fe0d 	bl	29ac <xEventGetxTag>
    2d92:	466c      	mov	r4, sp
    2d94:	f107 0308 	add.w	r3, r7, #8
    2d98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2d9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2d9e:	f107 0318 	add.w	r3, r7, #24
    2da2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2da4:	f7ff ff58 	bl	2c58 <xCompareFunction1>
    2da8:	4603      	mov	r3, r0

    if(comp == 1)
    {
        pxList = &xEventNonExecutableList;
        taskENTER_CRITICAL();
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd); 
    2daa:	2b00      	cmp	r3, #0
    2dac:	d1e5      	bne.n	2d7a <prvEventListGenericInsert+0x36>
             xCompareFunction1( xEventGetxTag( pxIterator->pxNext->pvOwner ), xTagOfInsertion ); 
             pxIterator = pxIterator->pxNext ) {}
        taskEXIT_CRITICAL();
    2dae:	f003 f85b 	bl	5e68 <vPortExitCritical>
    2db2:	e026      	b.n	2e02 <prvEventListGenericInsert+0xbe>
    }
    else 
    {
        pxList = &xEventExecutableList;
    2db4:	f240 63b0 	movw	r3, #1712	; 0x6b0
    2db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2dbc:	63bb      	str	r3, [r7, #56]	; 0x38
        taskENTER_CRITICAL();
    2dbe:	f003 f83d 	bl	5e3c <vPortEnterCritical>
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd); 
    2dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2dc4:	3308      	adds	r3, #8
    2dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
    2dc8:	e002      	b.n	2dd0 <prvEventListGenericInsert+0x8c>
             xCompareFunction2( xEventGetxTag( pxIterator->pxNext->pvOwner ), xTagOfInsertion ); 
             pxIterator = pxIterator->pxNext ) {}
    2dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2dcc:	685b      	ldr	r3, [r3, #4]
    2dce:	63fb      	str	r3, [r7, #60]	; 0x3c
    else 
    {
        pxList = &xEventExecutableList;
        taskENTER_CRITICAL();
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd); 
             xCompareFunction2( xEventGetxTag( pxIterator->pxNext->pvOwner ), xTagOfInsertion ); 
    2dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2dd2:	685b      	ldr	r3, [r3, #4]
    2dd4:	68db      	ldr	r3, [r3, #12]
    2dd6:	f107 0228 	add.w	r2, r7, #40	; 0x28
    2dda:	4610      	mov	r0, r2
    2ddc:	4619      	mov	r1, r3
    2dde:	f7ff fde5 	bl	29ac <xEventGetxTag>
    2de2:	466c      	mov	r4, sp
    2de4:	f107 0308 	add.w	r3, r7, #8
    2de8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2dea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    2dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
    2df2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    2df4:	f7ff ff60 	bl	2cb8 <xCompareFunction2>
    2df8:	4603      	mov	r3, r0
    }
    else 
    {
        pxList = &xEventExecutableList;
        taskENTER_CRITICAL();
        for( pxIterator = ( xListItem * ) &( pxList->xListEnd); 
    2dfa:	2b00      	cmp	r3, #0
    2dfc:	d1e5      	bne.n	2dca <prvEventListGenericInsert+0x86>
             xCompareFunction2( xEventGetxTag( pxIterator->pxNext->pvOwner ), xTagOfInsertion ); 
             pxIterator = pxIterator->pxNext ) {}
        taskEXIT_CRITICAL();
    2dfe:	f003 f833 	bl	5e68 <vPortExitCritical>
    }

    // insert the new event before a bigger one.
    pxNewListItem->pxNext = pxIterator->pxNext;
    2e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2e04:	685a      	ldr	r2, [r3, #4]
    2e06:	687b      	ldr	r3, [r7, #4]
    2e08:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2e0a:	687b      	ldr	r3, [r7, #4]
    2e0c:	685b      	ldr	r3, [r3, #4]
    2e0e:	687a      	ldr	r2, [r7, #4]
    2e10:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2e12:	687b      	ldr	r3, [r7, #4]
    2e14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2e16:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2e1a:	687a      	ldr	r2, [r7, #4]
    2e1c:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2e1e:	687b      	ldr	r3, [r7, #4]
    2e20:	6bba      	ldr	r2, [r7, #56]	; 0x38
    2e22:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2e26:	681b      	ldr	r3, [r3, #0]
    2e28:	1c5a      	adds	r2, r3, #1
    2e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2e2c:	601a      	str	r2, [r3, #0]
}
    2e2e:	3744      	adds	r7, #68	; 0x44
    2e30:	46bd      	mov	sp, r7
    2e32:	bd90      	pop	{r4, r7, pc}

00002e34 <vListIntialiseEventItem>:


static void vListIntialiseEventItem( xEventHandle pvOwner, xListItem * pxNewEventItem)
{
    2e34:	b480      	push	{r7}
    2e36:	b083      	sub	sp, #12
    2e38:	af00      	add	r7, sp, #0
    2e3a:	6078      	str	r0, [r7, #4]
    2e3c:	6039      	str	r1, [r7, #0]
    /* set the pvOwner of the EventItem as a event*/
    listSET_LIST_ITEM_OWNER( pxNewEventItem, pvOwner );
    2e3e:	683b      	ldr	r3, [r7, #0]
    2e40:	687a      	ldr	r2, [r7, #4]
    2e42:	60da      	str	r2, [r3, #12]
}
    2e44:	370c      	adds	r7, #12
    2e46:	46bd      	mov	sp, r7
    2e48:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e4c:	4770      	bx	lr
    2e4e:	bf00      	nop

00002e50 <pxEventGenericCreate>:


xEventHandle pxEventGenericCreate( portBASE_TYPE pxSource, portTickType xDeadline, portTickType xTimestamp, struct eventData pdData)
{
    2e50:	b082      	sub	sp, #8
    2e52:	b580      	push	{r7, lr}
    2e54:	b086      	sub	sp, #24
    2e56:	af00      	add	r7, sp, #0
    2e58:	60f8      	str	r0, [r7, #12]
    2e5a:	60b9      	str	r1, [r7, #8]
    2e5c:	607a      	str	r2, [r7, #4]
    2e5e:	627b      	str	r3, [r7, #36]	; 0x24
    eveECB * pxNewEvent = NULL;
    2e60:	2300      	movs	r3, #0
    2e62:	617b      	str	r3, [r7, #20]

    /* using the pxCurrentTCB, current task should not be changed */
    taskENTER_CRITICAL();
    2e64:	f002 ffea 	bl	5e3c <vPortEnterCritical>

    pxNewEvent = (eveECB *)xEventIdleList.xListEnd.pxNext->pvOwner;
    2e68:	f240 6360 	movw	r3, #1632	; 0x660
    2e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e70:	68db      	ldr	r3, [r3, #12]
    2e72:	68db      	ldr	r3, [r3, #12]
    2e74:	617b      	str	r3, [r7, #20]
    vListRemove( (xListItem *)&pxNewEvent->xEventListItem );
    2e76:	697b      	ldr	r3, [r7, #20]
    2e78:	3320      	adds	r3, #32
    2e7a:	4618      	mov	r0, r3
    2e7c:	f001 fa2c 	bl	42d8 <vListRemove>

    pxNewEvent->pxSource = pxSource;
    2e80:	697b      	ldr	r3, [r7, #20]
    2e82:	68fa      	ldr	r2, [r7, #12]
    2e84:	601a      	str	r2, [r3, #0]
    vEventSetxTag( xDeadline, xTimestamp, pxNewEvent );
    2e86:	68b8      	ldr	r0, [r7, #8]
    2e88:	6879      	ldr	r1, [r7, #4]
    2e8a:	697a      	ldr	r2, [r7, #20]
    2e8c:	f7ff ff44 	bl	2d18 <vEventSetxTag>
    ((eveECB *) pxNewEvent)->xData = pdData;
    2e90:	697b      	ldr	r3, [r7, #20]
    2e92:	3318      	adds	r3, #24
    2e94:	f107 0224 	add.w	r2, r7, #36	; 0x24
    2e98:	e892 0003 	ldmia.w	r2, {r0, r1}
    2e9c:	e883 0003 	stmia.w	r3, {r0, r1}
    vListIntialiseEventItem( pxNewEvent, (xListItem *) &pxNewEvent->xEventListItem );
    2ea0:	697b      	ldr	r3, [r7, #20]
    2ea2:	3320      	adds	r3, #32
    2ea4:	6978      	ldr	r0, [r7, #20]
    2ea6:	4619      	mov	r1, r3
    2ea8:	f7ff ffc4 	bl	2e34 <vListIntialiseEventItem>

    taskEXIT_CRITICAL();
    2eac:	f002 ffdc 	bl	5e68 <vPortExitCritical>

    return pxNewEvent;
    2eb0:	697b      	ldr	r3, [r7, #20]
}
    2eb2:	4618      	mov	r0, r3
    2eb4:	3718      	adds	r7, #24
    2eb6:	46bd      	mov	sp, r7
    2eb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    2ebc:	b002      	add	sp, #8
    2ebe:	4770      	bx	lr

00002ec0 <vEventGenericTransit>:


// An API to transfer all executable Event Items from xEventNonExecutableList to xEventExecutablePool.
// function : transit the nonexecutable event to executable event, and update the inBoolCount of every event 
void vEventGenericTransit() 
{
    2ec0:	b580      	push	{r7, lr}
    2ec2:	b088      	sub	sp, #32
    2ec4:	af00      	add	r7, sp, #0
    struct tag xTag;
    portBASE_TYPE pxDestination;
    portTickType xCurrentTime;

    // transmit the executable event from xEventNonExecutableList to xEventExecutablePool 
    while( listCURRENT_LIST_LENGTH( &xEventNonExecutableList) > 1 )
    2ec6:	e042      	b.n	2f4e <vEventGenericTransit+0x8e>
    {
        temp_pxEventListItem = (xListItem *)xEventNonExecutableList.xListEnd.pxNext;
    2ec8:	f240 6388 	movw	r3, #1672	; 0x688
    2ecc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ed0:	68db      	ldr	r3, [r3, #12]
    2ed2:	61fb      	str	r3, [r7, #28]
        xTag= xEventGetxTag( temp_pxEventListItem->pvOwner );
    2ed4:	69fb      	ldr	r3, [r7, #28]
    2ed6:	68db      	ldr	r3, [r3, #12]
    2ed8:	1d3a      	adds	r2, r7, #4
    2eda:	4610      	mov	r0, r2
    2edc:	4619      	mov	r1, r3
    2ede:	f7ff fd65 	bl	29ac <xEventGetxTag>
        xCurrentTime = xTaskGetTickCount();
    2ee2:	f002 fa77 	bl	53d4 <xTaskGetTickCount>
    2ee6:	61b8      	str	r0, [r7, #24]

        // the event is executable
        if( xTag.xTimestamp <= xCurrentTime )
    2ee8:	68ba      	ldr	r2, [r7, #8]
    2eea:	69bb      	ldr	r3, [r7, #24]
    2eec:	429a      	cmp	r2, r3
    2eee:	d82d      	bhi.n	2f4c <vEventGenericTransit+0x8c>
        {
            // update the xInBoolCount of pxDestination
            pxDestination = xEventGetpxDestination( temp_pxEventListItem->pvOwner );
    2ef0:	69fb      	ldr	r3, [r7, #28]
    2ef2:	68db      	ldr	r3, [r3, #12]
    2ef4:	4618      	mov	r0, r3
    2ef6:	f7ff fd4d 	bl	2994 <xEventGetpxDestination>
    2efa:	6178      	str	r0, [r7, #20]
            xContexts[pxDestination].xInBoolCount ++ ;
    2efc:	f240 62d8 	movw	r2, #1752	; 0x6d8
    2f00:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f04:	6979      	ldr	r1, [r7, #20]
    2f06:	460b      	mov	r3, r1
    2f08:	00db      	lsls	r3, r3, #3
    2f0a:	1a5b      	subs	r3, r3, r1
    2f0c:	00db      	lsls	r3, r3, #3
    2f0e:	4413      	add	r3, r2
    2f10:	3334      	adds	r3, #52	; 0x34
    2f12:	681b      	ldr	r3, [r3, #0]
    2f14:	1c58      	adds	r0, r3, #1
    2f16:	f240 62d8 	movw	r2, #1752	; 0x6d8
    2f1a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f1e:	6979      	ldr	r1, [r7, #20]
    2f20:	460b      	mov	r3, r1
    2f22:	00db      	lsls	r3, r3, #3
    2f24:	1a5b      	subs	r3, r3, r1
    2f26:	00db      	lsls	r3, r3, #3
    2f28:	4413      	add	r3, r2
    2f2a:	3334      	adds	r3, #52	; 0x34
    2f2c:	6018      	str	r0, [r3, #0]

            taskENTER_CRITICAL();
    2f2e:	f002 ff85 	bl	5e3c <vPortEnterCritical>
            /* remove pxListItem from xEventNonExecutableList */ 
            vListRemove(temp_pxEventListItem);
    2f32:	69f8      	ldr	r0, [r7, #28]
    2f34:	f001 f9d0 	bl	42d8 <vListRemove>
            /* insert the executable event into the xEventExecutablePool*/
            vListInsertEnd(&xEventExecutablePool, temp_pxEventListItem);
    2f38:	f240 609c 	movw	r0, #1692	; 0x69c
    2f3c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2f40:	69f9      	ldr	r1, [r7, #28]
    2f42:	f001 f969 	bl	4218 <vListInsertEnd>
            taskEXIT_CRITICAL();
    2f46:	f002 ff8f 	bl	5e68 <vPortExitCritical>
    2f4a:	e000      	b.n	2f4e <vEventGenericTransit+0x8e>
        }
        else
        {
          // no executable event
           break; 
    2f4c:	e006      	b.n	2f5c <vEventGenericTransit+0x9c>
    struct tag xTag;
    portBASE_TYPE pxDestination;
    portTickType xCurrentTime;

    // transmit the executable event from xEventNonExecutableList to xEventExecutablePool 
    while( listCURRENT_LIST_LENGTH( &xEventNonExecutableList) > 1 )
    2f4e:	f240 6388 	movw	r3, #1672	; 0x688
    2f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f56:	681b      	ldr	r3, [r3, #0]
    2f58:	2b01      	cmp	r3, #1
    2f5a:	d8b5      	bhi.n	2ec8 <vEventGenericTransit+0x8>
        {
          // no executable event
           break; 
        }
    }
}
    2f5c:	3720      	adds	r7, #32
    2f5e:	46bd      	mov	sp, r7
    2f60:	bd80      	pop	{r7, pc}
    2f62:	bf00      	nop

00002f64 <vEventGenericScatter>:

void vEventGenericScatter()
{
    2f64:	b580      	push	{r7, lr}
    2f66:	b088      	sub	sp, #32
    2f68:	af02      	add	r7, sp, #8
    eveECB * pxEvent; 
    eveECB * pxCopyEvent;
    xListItem * temp_pxEventListItem;

    // event scatter
   while(listCURRENT_LIST_LENGTH( &xEventNonExecutablePool ) > 0)
    2f6a:	e074      	b.n	3056 <vEventGenericScatter+0xf2>
    {
        temp_pxEventListItem = (xListItem *) xEventNonExecutablePool.xListEnd.pxNext;    
    2f6c:	f240 6374 	movw	r3, #1652	; 0x674
    2f70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2f74:	68db      	ldr	r3, [r3, #12]
    2f76:	613b      	str	r3, [r7, #16]
        pxEvent = (eveECB *) temp_pxEventListItem->pvOwner;
    2f78:	693b      	ldr	r3, [r7, #16]
    2f7a:	68db      	ldr	r3, [r3, #12]
    2f7c:	60fb      	str	r3, [r7, #12]
        pxSource = pxEvent->pxSource;
    2f7e:	68fb      	ldr	r3, [r7, #12]
    2f80:	681b      	ldr	r3, [r3, #0]
    2f82:	60bb      	str	r3, [r7, #8]
        outs = xContexts[pxSource].xNumOfOut;
    2f84:	f240 62d8 	movw	r2, #1752	; 0x6d8
    2f88:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f8c:	68b9      	ldr	r1, [r7, #8]
    2f8e:	460b      	mov	r3, r1
    2f90:	00db      	lsls	r3, r3, #3
    2f92:	1a5b      	subs	r3, r3, r1
    2f94:	00db      	lsls	r3, r3, #3
    2f96:	4413      	add	r3, r2
    2f98:	3310      	adds	r3, #16
    2f9a:	681b      	ldr	r3, [r3, #0]
    2f9c:	607b      	str	r3, [r7, #4]

        taskENTER_CRITICAL();
    2f9e:	f002 ff4d 	bl	5e3c <vPortEnterCritical>
        vListRemove(temp_pxEventListItem);
    2fa2:	6938      	ldr	r0, [r7, #16]
    2fa4:	f001 f998 	bl	42d8 <vListRemove>
        // complete the information of the origin event.
        pxEvent->pxDestination = xContexts[pxSource].xOutFlag[0];
    2fa8:	f240 62d8 	movw	r2, #1752	; 0x6d8
    2fac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2fb0:	68b9      	ldr	r1, [r7, #8]
    2fb2:	460b      	mov	r3, r1
    2fb4:	00db      	lsls	r3, r3, #3
    2fb6:	1a5b      	subs	r3, r3, r1
    2fb8:	00db      	lsls	r3, r3, #3
    2fba:	4413      	add	r3, r2
    2fbc:	331c      	adds	r3, #28
    2fbe:	681a      	ldr	r2, [r3, #0]
    2fc0:	68fb      	ldr	r3, [r7, #12]
    2fc2:	605a      	str	r2, [r3, #4]
        pxEvent->xTag.xLevel = xContexts[pxEvent->pxDestination].xTaskId;
    2fc4:	68fb      	ldr	r3, [r7, #12]
    2fc6:	6859      	ldr	r1, [r3, #4]
    2fc8:	f240 62d8 	movw	r2, #1752	; 0x6d8
    2fcc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2fd0:	460b      	mov	r3, r1
    2fd2:	00db      	lsls	r3, r3, #3
    2fd4:	1a5b      	subs	r3, r3, r1
    2fd6:	00db      	lsls	r3, r3, #3
    2fd8:	4413      	add	r3, r2
    2fda:	3330      	adds	r3, #48	; 0x30
    2fdc:	681a      	ldr	r2, [r3, #0]
    2fde:	68fb      	ldr	r3, [r7, #12]
    2fe0:	611a      	str	r2, [r3, #16]
        prvEventListGenericInsert(temp_pxEventListItem,1); 
    2fe2:	6938      	ldr	r0, [r7, #16]
    2fe4:	2101      	movs	r1, #1
    2fe6:	f7ff fead 	bl	2d44 <prvEventListGenericInsert>

        // copy one event to multiples
        for(i = 1; i < outs; ++ i)
    2fea:	2301      	movs	r3, #1
    2fec:	617b      	str	r3, [r7, #20]
    2fee:	e02c      	b.n	304a <vEventGenericScatter+0xe6>
        {
            pxCopyEvent = (eveECB *)pxEventGenericCreate(pxSource, pxEvent->xTag.xDeadline, pxEvent->xTag.xTimestamp, pxEvent->xData);
    2ff0:	68fb      	ldr	r3, [r7, #12]
    2ff2:	6899      	ldr	r1, [r3, #8]
    2ff4:	68fb      	ldr	r3, [r7, #12]
    2ff6:	68da      	ldr	r2, [r3, #12]
    2ff8:	68fb      	ldr	r3, [r7, #12]
    2ffa:	69d8      	ldr	r0, [r3, #28]
    2ffc:	9000      	str	r0, [sp, #0]
    2ffe:	699b      	ldr	r3, [r3, #24]
    3000:	68b8      	ldr	r0, [r7, #8]
    3002:	f7ff ff25 	bl	2e50 <pxEventGenericCreate>
    3006:	6038      	str	r0, [r7, #0]
            // complete the information of the copied event.
            pxCopyEvent->xTag.xMicroStep = i;
    3008:	683b      	ldr	r3, [r7, #0]
    300a:	697a      	ldr	r2, [r7, #20]
    300c:	615a      	str	r2, [r3, #20]
            pxCopyEvent->xTag.xLevel = pxEvent->xTag.xLevel;   // copy events have all the same xLevel
    300e:	68fb      	ldr	r3, [r7, #12]
    3010:	691a      	ldr	r2, [r3, #16]
    3012:	683b      	ldr	r3, [r7, #0]
    3014:	611a      	str	r2, [r3, #16]
            pxCopyEvent->pxDestination = xContexts[pxSource].xOutFlag[i];
    3016:	f240 62d8 	movw	r2, #1752	; 0x6d8
    301a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    301e:	68b9      	ldr	r1, [r7, #8]
    3020:	460b      	mov	r3, r1
    3022:	00db      	lsls	r3, r3, #3
    3024:	1a5b      	subs	r3, r3, r1
    3026:	005b      	lsls	r3, r3, #1
    3028:	6979      	ldr	r1, [r7, #20]
    302a:	440b      	add	r3, r1
    302c:	3306      	adds	r3, #6
    302e:	009b      	lsls	r3, r3, #2
    3030:	4413      	add	r3, r2
    3032:	685a      	ldr	r2, [r3, #4]
    3034:	683b      	ldr	r3, [r7, #0]
    3036:	605a      	str	r2, [r3, #4]
            prvEventListGenericInsert( &pxCopyEvent->xEventListItem , 1); 
    3038:	683b      	ldr	r3, [r7, #0]
    303a:	3320      	adds	r3, #32
    303c:	4618      	mov	r0, r3
    303e:	2101      	movs	r1, #1
    3040:	f7ff fe80 	bl	2d44 <prvEventListGenericInsert>
        pxEvent->pxDestination = xContexts[pxSource].xOutFlag[0];
        pxEvent->xTag.xLevel = xContexts[pxEvent->pxDestination].xTaskId;
        prvEventListGenericInsert(temp_pxEventListItem,1); 

        // copy one event to multiples
        for(i = 1; i < outs; ++ i)
    3044:	697b      	ldr	r3, [r7, #20]
    3046:	3301      	adds	r3, #1
    3048:	617b      	str	r3, [r7, #20]
    304a:	697a      	ldr	r2, [r7, #20]
    304c:	687b      	ldr	r3, [r7, #4]
    304e:	429a      	cmp	r2, r3
    3050:	dbce      	blt.n	2ff0 <vEventGenericScatter+0x8c>
            pxCopyEvent->xTag.xMicroStep = i;
            pxCopyEvent->xTag.xLevel = pxEvent->xTag.xLevel;   // copy events have all the same xLevel
            pxCopyEvent->pxDestination = xContexts[pxSource].xOutFlag[i];
            prvEventListGenericInsert( &pxCopyEvent->xEventListItem , 1); 
        }
        taskEXIT_CRITICAL();
    3052:	f002 ff09 	bl	5e68 <vPortExitCritical>
    eveECB * pxEvent; 
    eveECB * pxCopyEvent;
    xListItem * temp_pxEventListItem;

    // event scatter
   while(listCURRENT_LIST_LENGTH( &xEventNonExecutablePool ) > 0)
    3056:	f240 6374 	movw	r3, #1652	; 0x674
    305a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    305e:	681b      	ldr	r3, [r3, #0]
    3060:	2b00      	cmp	r3, #0
    3062:	d183      	bne.n	2f6c <vEventGenericScatter+0x8>
            pxCopyEvent->pxDestination = xContexts[pxSource].xOutFlag[i];
            prvEventListGenericInsert( &pxCopyEvent->xEventListItem , 1); 
        }
        taskEXIT_CRITICAL();
    }
}
    3064:	3718      	adds	r7, #24
    3066:	46bd      	mov	sp, r7
    3068:	bd80      	pop	{r7, pc}
    306a:	bf00      	nop

0000306c <vEventGenericReduce>:

void vEventGenericReduce()
{
    306c:	b580      	push	{r7, lr}
    306e:	b08c      	sub	sp, #48	; 0x30
    3070:	af00      	add	r7, sp, #0
    portBASE_TYPE i, pxDestination;
    struct tag temp_tag;
    struct eventData temp_data;
    volatile xListItem * pxIterator1, *pxIterator2;
    // event reduce 
    if( listCURRENT_LIST_LENGTH(& xEventExecutablePool) > 0 )
    3072:	f240 639c 	movw	r3, #1692	; 0x69c
    3076:	f2c2 0300 	movt	r3, #8192	; 0x2000
    307a:	681b      	ldr	r3, [r3, #0]
    307c:	2b00      	cmp	r3, #0
    307e:	f000 80ad 	beq.w	31dc <vEventGenericReduce+0x170>
    {
        // find at least all the ready event and move it to ready event list
        // ready event has the smallest timestamp and period.
        // if multi ready event exists, then they all have the same timestamp
        for( pxIterator1 = ( xListItem * ) ( xEventExecutablePool.xListEnd.pxNext ); 
    3082:	f240 639c 	movw	r3, #1692	; 0x69c
    3086:	f2c2 0300 	movt	r3, #8192	; 0x2000
    308a:	68db      	ldr	r3, [r3, #12]
    308c:	62bb      	str	r3, [r7, #40]	; 0x28
    308e:	e0a0      	b.n	31d2 <vEventGenericReduce+0x166>
                pxIterator1 != (xListItem *)&xEventExecutablePool.xListEnd; ) 
        {
            reduce_pxEventListItem = (xListItem *) pxIterator1; 
    3090:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3092:	623b      	str	r3, [r7, #32]
            pxDestination = xEventGetpxDestination(reduce_pxEventListItem->pvOwner); 
    3094:	6a3b      	ldr	r3, [r7, #32]
    3096:	68db      	ldr	r3, [r3, #12]
    3098:	4618      	mov	r0, r3
    309a:	f7ff fc7b 	bl	2994 <xEventGetpxDestination>
    309e:	61f8      	str	r0, [r7, #28]

            // if the communication between servant is multiple to one,
            // then other events for the same servant need to be found
            if( xContexts[pxDestination].xInBoolCount == xContexts[pxDestination].xNumOfIn )
    30a0:	f240 62d8 	movw	r2, #1752	; 0x6d8
    30a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    30a8:	69f9      	ldr	r1, [r7, #28]
    30aa:	460b      	mov	r3, r1
    30ac:	00db      	lsls	r3, r3, #3
    30ae:	1a5b      	subs	r3, r3, r1
    30b0:	00db      	lsls	r3, r3, #3
    30b2:	4413      	add	r3, r2
    30b4:	3334      	adds	r3, #52	; 0x34
    30b6:	6818      	ldr	r0, [r3, #0]
    30b8:	f240 62d8 	movw	r2, #1752	; 0x6d8
    30bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    30c0:	69f9      	ldr	r1, [r7, #28]
    30c2:	460b      	mov	r3, r1
    30c4:	00db      	lsls	r3, r3, #3
    30c6:	1a5b      	subs	r3, r3, r1
    30c8:	00db      	lsls	r3, r3, #3
    30ca:	4413      	add	r3, r2
    30cc:	330c      	adds	r3, #12
    30ce:	681b      	ldr	r3, [r3, #0]
    30d0:	4298      	cmp	r0, r3
    30d2:	d17b      	bne.n	31cc <vEventGenericReduce+0x160>
            {
                taskENTER_CRITICAL();
    30d4:	f002 feb2 	bl	5e3c <vPortEnterCritical>
                if(xContexts[pxDestination].xInBoolCount > 1)
    30d8:	f240 62d8 	movw	r2, #1752	; 0x6d8
    30dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    30e0:	69f9      	ldr	r1, [r7, #28]
    30e2:	460b      	mov	r3, r1
    30e4:	00db      	lsls	r3, r3, #3
    30e6:	1a5b      	subs	r3, r3, r1
    30e8:	00db      	lsls	r3, r3, #3
    30ea:	4413      	add	r3, r2
    30ec:	3334      	adds	r3, #52	; 0x34
    30ee:	681b      	ldr	r3, [r3, #0]
    30f0:	2b01      	cmp	r3, #1
    30f2:	dd51      	ble.n	3198 <vEventGenericReduce+0x12c>
                {
                    i = 1;
    30f4:	2301      	movs	r3, #1
    30f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    for( pxIterator2 = pxIterator1->pxNext;  pxIterator2 != (xListItem *)&xEventExecutablePool.xListEnd; ) 
    30f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    30fa:	685b      	ldr	r3, [r3, #4]
    30fc:	627b      	str	r3, [r7, #36]	; 0x24
    30fe:	e047      	b.n	3190 <vEventGenericReduce+0x124>
                    {
                        // find another event for the same destinate servant, copy the data to the first one
                        if( xEventGetpxDestination(pxIterator2->pvOwner) == pxDestination ) 
    3100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3102:	68db      	ldr	r3, [r3, #12]
    3104:	4618      	mov	r0, r3
    3106:	f7ff fc45 	bl	2994 <xEventGetpxDestination>
    310a:	4602      	mov	r2, r0
    310c:	69fb      	ldr	r3, [r7, #28]
    310e:	429a      	cmp	r2, r3
    3110:	d13b      	bne.n	318a <vEventGenericReduce+0x11e>
                        {
                            // collecting data into the first event
                            temp_data = xEventGetxData(pxIterator2->pvOwner); 
    3112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3114:	68db      	ldr	r3, [r3, #12]
    3116:	463a      	mov	r2, r7
    3118:	4610      	mov	r0, r2
    311a:	4619      	mov	r1, r3
    311c:	f7ff fc58 	bl	29d0 <xEventGetxData>
                            ((eveECB *)reduce_pxEventListItem->pvOwner)->xData.xDataArray[i++] = temp_data.xDataArray[0];
    3120:	6a3b      	ldr	r3, [r7, #32]
    3122:	68da      	ldr	r2, [r3, #12]
    3124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3126:	1c59      	adds	r1, r3, #1
    3128:	62f9      	str	r1, [r7, #44]	; 0x2c
    312a:	6839      	ldr	r1, [r7, #0]
    312c:	3306      	adds	r3, #6
    312e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                            // set the timestamp to the biggest one
                            temp_tag = xEventGetxTag(pxIterator2->pvOwner);
    3132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3134:	68db      	ldr	r3, [r3, #12]
    3136:	f107 0208 	add.w	r2, r7, #8
    313a:	4610      	mov	r0, r2
    313c:	4619      	mov	r1, r3
    313e:	f7ff fc35 	bl	29ac <xEventGetxTag>
                            if(((eveECB *)reduce_pxEventListItem->pvOwner)->xTag.xTimestamp < temp_tag.xTimestamp)
    3142:	6a3b      	ldr	r3, [r7, #32]
    3144:	68db      	ldr	r3, [r3, #12]
    3146:	68da      	ldr	r2, [r3, #12]
    3148:	68fb      	ldr	r3, [r7, #12]
    314a:	429a      	cmp	r2, r3
    314c:	d203      	bcs.n	3156 <vEventGenericReduce+0xea>
                            {
                                ((eveECB *)reduce_pxEventListItem->pvOwner)->xTag.xTimestamp = temp_tag.xTimestamp;
    314e:	6a3b      	ldr	r3, [r7, #32]
    3150:	68db      	ldr	r3, [r3, #12]
    3152:	68fa      	ldr	r2, [r7, #12]
    3154:	60da      	str	r2, [r3, #12]
                            }
                            // delete the useless event, and return it back to event idle list
                            temp_pxEventListItem = (xListItem *) pxIterator2; 
    3156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3158:	61bb      	str	r3, [r7, #24]
                            pxIterator2 = pxIterator2->pxNext;
    315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    315c:	685b      	ldr	r3, [r3, #4]
    315e:	627b      	str	r3, [r7, #36]	; 0x24
                            vEventGenericDelete(temp_pxEventListItem->pvOwner); 
    3160:	69bb      	ldr	r3, [r7, #24]
    3162:	68db      	ldr	r3, [r3, #12]
    3164:	4618      	mov	r0, r3
    3166:	f000 f9fb 	bl	3560 <vEventGenericDelete>
                            if( i == xContexts[pxDestination].xInBoolCount )
    316a:	f240 62d8 	movw	r2, #1752	; 0x6d8
    316e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3172:	69f9      	ldr	r1, [r7, #28]
    3174:	460b      	mov	r3, r1
    3176:	00db      	lsls	r3, r3, #3
    3178:	1a5b      	subs	r3, r3, r1
    317a:	00db      	lsls	r3, r3, #3
    317c:	4413      	add	r3, r2
    317e:	3334      	adds	r3, #52	; 0x34
    3180:	681a      	ldr	r2, [r3, #0]
    3182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3184:	429a      	cmp	r2, r3
    3186:	d103      	bne.n	3190 <vEventGenericReduce+0x124>
                            {
                                break;   // find all event for the same servant 
    3188:	e006      	b.n	3198 <vEventGenericReduce+0x12c>
                            }
                        }
                        else
                        {
                            pxIterator2 = pxIterator2->pxNext;
    318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    318c:	685b      	ldr	r3, [r3, #4]
    318e:	627b      	str	r3, [r7, #36]	; 0x24
            {
                taskENTER_CRITICAL();
                if(xContexts[pxDestination].xInBoolCount > 1)
                {
                    i = 1;
                    for( pxIterator2 = pxIterator1->pxNext;  pxIterator2 != (xListItem *)&xEventExecutablePool.xListEnd; ) 
    3190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3192:	4b14      	ldr	r3, [pc, #80]	; (31e4 <vEventGenericReduce+0x178>)
    3194:	429a      	cmp	r2, r3
    3196:	d1b3      	bne.n	3100 <vEventGenericReduce+0x94>
                        {
                            pxIterator2 = pxIterator2->pxNext;
                        }
                    }
                }
                xContexts[pxDestination].xInBoolCount = 0; 
    3198:	f240 62d8 	movw	r2, #1752	; 0x6d8
    319c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    31a0:	69f9      	ldr	r1, [r7, #28]
    31a2:	460b      	mov	r3, r1
    31a4:	00db      	lsls	r3, r3, #3
    31a6:	1a5b      	subs	r3, r3, r1
    31a8:	00db      	lsls	r3, r3, #3
    31aa:	4413      	add	r3, r2
    31ac:	3334      	adds	r3, #52	; 0x34
    31ae:	2200      	movs	r2, #0
    31b0:	601a      	str	r2, [r3, #0]
                pxIterator1 = pxIterator1->pxNext; 
    31b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    31b4:	685b      	ldr	r3, [r3, #4]
    31b6:	62bb      	str	r3, [r7, #40]	; 0x28
                vListRemove(reduce_pxEventListItem);
    31b8:	6a38      	ldr	r0, [r7, #32]
    31ba:	f001 f88d 	bl	42d8 <vListRemove>
                prvEventListGenericInsert(reduce_pxEventListItem, 2);
    31be:	6a38      	ldr	r0, [r7, #32]
    31c0:	2102      	movs	r1, #2
    31c2:	f7ff fdbf 	bl	2d44 <prvEventListGenericInsert>
                taskEXIT_CRITICAL();
    31c6:	f002 fe4f 	bl	5e68 <vPortExitCritical>
    31ca:	e002      	b.n	31d2 <vEventGenericReduce+0x166>
            }
            else
            {
                pxIterator1 = pxIterator1->pxNext;
    31cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    31ce:	685b      	ldr	r3, [r3, #4]
    31d0:	62bb      	str	r3, [r7, #40]	; 0x28
    if( listCURRENT_LIST_LENGTH(& xEventExecutablePool) > 0 )
    {
        // find at least all the ready event and move it to ready event list
        // ready event has the smallest timestamp and period.
        // if multi ready event exists, then they all have the same timestamp
        for( pxIterator1 = ( xListItem * ) ( xEventExecutablePool.xListEnd.pxNext ); 
    31d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    31d4:	4b03      	ldr	r3, [pc, #12]	; (31e4 <vEventGenericReduce+0x178>)
    31d6:	429a      	cmp	r2, r3
    31d8:	f47f af5a 	bne.w	3090 <vEventGenericReduce+0x24>
                pxIterator1 = pxIterator1->pxNext;
            }

        }
    }
}
    31dc:	3730      	adds	r7, #48	; 0x30
    31de:	46bd      	mov	sp, r7
    31e0:	bd80      	pop	{r7, pc}
    31e2:	bf00      	nop
    31e4:	200006a4 	.word	0x200006a4

000031e8 <pOverLap>:



static portBASE_TYPE pOverLap( xListItem * pxEventListItem)
{
    31e8:	b480      	push	{r7}
    31ea:	b087      	sub	sp, #28
    31ec:	af00      	add	r7, sp, #0
    31ee:	6078      	str	r0, [r7, #4]
    eveECB * pxEvent = (eveECB *)pxEventListItem->pvOwner;
    31f0:	687b      	ldr	r3, [r7, #4]
    31f2:	68db      	ldr	r3, [r3, #12]
    31f4:	617b      	str	r3, [r7, #20]
    portBASE_TYPE pxDestination = pxEvent->pxDestination; 
    31f6:	697b      	ldr	r3, [r7, #20]
    31f8:	685b      	ldr	r3, [r3, #4]
    31fa:	613b      	str	r3, [r7, #16]
    portTickType start = pxEvent->xTag.xTimestamp;
    31fc:	697b      	ldr	r3, [r7, #20]
    31fe:	68db      	ldr	r3, [r3, #12]
    3200:	60fb      	str	r3, [r7, #12]
    portTickType end   = start + xContexts[pxDestination].xLet;
    3202:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3206:	f2c2 0200 	movt	r2, #8192	; 0x2000
    320a:	6939      	ldr	r1, [r7, #16]
    320c:	460b      	mov	r3, r1
    320e:	00db      	lsls	r3, r3, #3
    3210:	1a5b      	subs	r3, r3, r1
    3212:	00db      	lsls	r3, r3, #3
    3214:	4413      	add	r3, r2
    3216:	3324      	adds	r3, #36	; 0x24
    3218:	681a      	ldr	r2, [r3, #0]
    321a:	68fb      	ldr	r3, [r7, #12]
    321c:	4413      	add	r3, r2
    321e:	60bb      	str	r3, [r7, #8]

    // different execution time overlaped
    if( start % GCDPeriod < INPUT || start % GCDPeriod > (GCDPeriod - OUTPUT) || 
    3220:	f240 6358 	movw	r3, #1624	; 0x658
    3224:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3228:	681a      	ldr	r2, [r3, #0]
    322a:	68fb      	ldr	r3, [r7, #12]
    322c:	fbb3 f1f2 	udiv	r1, r3, r2
    3230:	fb02 f201 	mul.w	r2, r2, r1
    3234:	1a9b      	subs	r3, r3, r2
    3236:	2b02      	cmp	r3, #2
    3238:	d932      	bls.n	32a0 <pOverLap+0xb8>
    323a:	f240 6358 	movw	r3, #1624	; 0x658
    323e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3242:	681a      	ldr	r2, [r3, #0]
    3244:	68fb      	ldr	r3, [r7, #12]
    3246:	fbb3 f1f2 	udiv	r1, r3, r2
    324a:	fb02 f201 	mul.w	r2, r2, r1
    324e:	1a9a      	subs	r2, r3, r2
    3250:	f240 6358 	movw	r3, #1624	; 0x658
    3254:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3258:	681b      	ldr	r3, [r3, #0]
    325a:	3b03      	subs	r3, #3
    325c:	429a      	cmp	r2, r3
    325e:	d81f      	bhi.n	32a0 <pOverLap+0xb8>
            end % GCDPeriod < INPUT || end % GCDPeriod > (GCDPeriod - OUTPUT))
    3260:	f240 6358 	movw	r3, #1624	; 0x658
    3264:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3268:	681a      	ldr	r2, [r3, #0]
    326a:	68bb      	ldr	r3, [r7, #8]
    326c:	fbb3 f1f2 	udiv	r1, r3, r2
    3270:	fb02 f201 	mul.w	r2, r2, r1
    3274:	1a9b      	subs	r3, r3, r2
    portBASE_TYPE pxDestination = pxEvent->pxDestination; 
    portTickType start = pxEvent->xTag.xTimestamp;
    portTickType end   = start + xContexts[pxDestination].xLet;

    // different execution time overlaped
    if( start % GCDPeriod < INPUT || start % GCDPeriod > (GCDPeriod - OUTPUT) || 
    3276:	2b02      	cmp	r3, #2
    3278:	d912      	bls.n	32a0 <pOverLap+0xb8>
            end % GCDPeriod < INPUT || end % GCDPeriod > (GCDPeriod - OUTPUT))
    327a:	f240 6358 	movw	r3, #1624	; 0x658
    327e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3282:	681a      	ldr	r2, [r3, #0]
    3284:	68bb      	ldr	r3, [r7, #8]
    3286:	fbb3 f1f2 	udiv	r1, r3, r2
    328a:	fb02 f201 	mul.w	r2, r2, r1
    328e:	1a9a      	subs	r2, r3, r2
    3290:	f240 6358 	movw	r3, #1624	; 0x658
    3294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3298:	681b      	ldr	r3, [r3, #0]
    329a:	3b03      	subs	r3, #3
    329c:	429a      	cmp	r2, r3
    329e:	d901      	bls.n	32a4 <pOverLap+0xbc>
    {
        return 1;
    32a0:	2301      	movs	r3, #1
    32a2:	e000      	b.n	32a6 <pOverLap+0xbe>
    }
    return 0;
    32a4:	2300      	movs	r3, #0
}
    32a6:	4618      	mov	r0, r3
    32a8:	371c      	adds	r7, #28
    32aa:	46bd      	mov	sp, r7
    32ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    32b0:	4770      	bx	lr
    32b2:	bf00      	nop

000032b4 <xSetTimestamp>:

static void xSetTimestamp( xListItem * pxEventListItem)
{
    32b4:	b580      	push	{r7, lr}
    32b6:	b084      	sub	sp, #16
    32b8:	af00      	add	r7, sp, #0
    32ba:	6078      	str	r0, [r7, #4]
    portBASE_TYPE i;
    eveECB *pxEvent;  
    
    pxEvent = (eveECB *) pxEventListItem->pvOwner;
    32bc:	687b      	ldr	r3, [r7, #4]
    32be:	68db      	ldr	r3, [r3, #12]
    32c0:	60fb      	str	r3, [r7, #12]
    pxEvent->xTag.xTimestamp = xFutureModelTime;
    32c2:	f240 635c 	movw	r3, #1628	; 0x65c
    32c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32ca:	681a      	ldr	r2, [r3, #0]
    32cc:	68fb      	ldr	r3, [r7, #12]
    32ce:	60da      	str	r2, [r3, #12]

    if( pOverLap(pxEventListItem )== 0 ) // not overlaped
    32d0:	6878      	ldr	r0, [r7, #4]
    32d2:	f7ff ff89 	bl	31e8 <pOverLap>
    32d6:	4603      	mov	r3, r0
    32d8:	2b00      	cmp	r3, #0
    32da:	d122      	bne.n	3322 <xSetTimestamp+0x6e>
    {
        xFutureModelTime += xContexts[pxEvent->pxDestination].xLet; // update future model time
    32dc:	68fb      	ldr	r3, [r7, #12]
    32de:	6859      	ldr	r1, [r3, #4]
    32e0:	f240 62d8 	movw	r2, #1752	; 0x6d8
    32e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    32e8:	460b      	mov	r3, r1
    32ea:	00db      	lsls	r3, r3, #3
    32ec:	1a5b      	subs	r3, r3, r1
    32ee:	00db      	lsls	r3, r3, #3
    32f0:	4413      	add	r3, r2
    32f2:	3324      	adds	r3, #36	; 0x24
    32f4:	681a      	ldr	r2, [r3, #0]
    32f6:	f240 635c 	movw	r3, #1628	; 0x65c
    32fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32fe:	681b      	ldr	r3, [r3, #0]
    3300:	441a      	add	r2, r3
    3302:	f240 635c 	movw	r3, #1628	; 0x65c
    3306:	f2c2 0300 	movt	r3, #8192	; 0x2000
    330a:	601a      	str	r2, [r3, #0]
        vListRemove( pxEventListItem); 
    330c:	6878      	ldr	r0, [r7, #4]
    330e:	f000 ffe3 	bl	42d8 <vListRemove>
        vListInsertEnd(&xEventReadyList, pxEventListItem);
    3312:	f240 60c4 	movw	r0, #1732	; 0x6c4
    3316:	f2c2 0000 	movt	r0, #8192	; 0x2000
    331a:	6879      	ldr	r1, [r7, #4]
    331c:	f000 ff7c 	bl	4218 <vListInsertEnd>
    3320:	e042      	b.n	33a8 <xSetTimestamp+0xf4>
    }
    else  // overlaped
    {
        // set the future model time to start time of next LET
        xFutureModelTime = (xFutureModelTime/GCDPeriod) * GCDPeriod + GCDPeriod + INPUT;  
    3322:	f240 635c 	movw	r3, #1628	; 0x65c
    3326:	f2c2 0300 	movt	r3, #8192	; 0x2000
    332a:	681a      	ldr	r2, [r3, #0]
    332c:	f240 6358 	movw	r3, #1624	; 0x658
    3330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3334:	681b      	ldr	r3, [r3, #0]
    3336:	fbb2 f3f3 	udiv	r3, r2, r3
    333a:	1c5a      	adds	r2, r3, #1
    333c:	f240 6358 	movw	r3, #1624	; 0x658
    3340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3344:	681b      	ldr	r3, [r3, #0]
    3346:	fb03 f302 	mul.w	r3, r3, r2
    334a:	1cda      	adds	r2, r3, #3
    334c:	f240 635c 	movw	r3, #1628	; 0x65c
    3350:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3354:	601a      	str	r2, [r3, #0]
        pxEvent->xTag.xTimestamp = xFutureModelTime;
    3356:	f240 635c 	movw	r3, #1628	; 0x65c
    335a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    335e:	681a      	ldr	r2, [r3, #0]
    3360:	68fb      	ldr	r3, [r7, #12]
    3362:	60da      	str	r2, [r3, #12]
        xFutureModelTime += xContexts[pxEvent->pxDestination].xLet;
    3364:	68fb      	ldr	r3, [r7, #12]
    3366:	6859      	ldr	r1, [r3, #4]
    3368:	f240 62d8 	movw	r2, #1752	; 0x6d8
    336c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3370:	460b      	mov	r3, r1
    3372:	00db      	lsls	r3, r3, #3
    3374:	1a5b      	subs	r3, r3, r1
    3376:	00db      	lsls	r3, r3, #3
    3378:	4413      	add	r3, r2
    337a:	3324      	adds	r3, #36	; 0x24
    337c:	681a      	ldr	r2, [r3, #0]
    337e:	f240 635c 	movw	r3, #1628	; 0x65c
    3382:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3386:	681b      	ldr	r3, [r3, #0]
    3388:	441a      	add	r2, r3
    338a:	f240 635c 	movw	r3, #1628	; 0x65c
    338e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3392:	601a      	str	r2, [r3, #0]

        vListRemove( pxEventListItem); 
    3394:	6878      	ldr	r0, [r7, #4]
    3396:	f000 ff9f 	bl	42d8 <vListRemove>
        vListInsertEnd(&xEventNonExecutablePool, pxEventListItem);
    339a:	f240 6074 	movw	r0, #1652	; 0x674
    339e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    33a2:	6879      	ldr	r1, [r7, #4]
    33a4:	f000 ff38 	bl	4218 <vListInsertEnd>
    }
}
    33a8:	3710      	adds	r7, #16
    33aa:	46bd      	mov	sp, r7
    33ac:	bd80      	pop	{r7, pc}
    33ae:	bf00      	nop

000033b0 <pEqualxDeadline>:

inline static portBASE_TYPE pEqualxDeadline(struct tag xTag1, struct tag xTag2)
{
    33b0:	b490      	push	{r4, r7}
    33b2:	b084      	sub	sp, #16
    33b4:	af00      	add	r7, sp, #0
    33b6:	463c      	mov	r4, r7
    33b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return (xTag1.xDeadline == xTag2.xDeadline);
    33bc:	683a      	ldr	r2, [r7, #0]
    33be:	69bb      	ldr	r3, [r7, #24]
    33c0:	429a      	cmp	r2, r3
    33c2:	bf14      	ite	ne
    33c4:	2300      	movne	r3, #0
    33c6:	2301      	moveq	r3, #1
    33c8:	b2db      	uxtb	r3, r3
}
    33ca:	4618      	mov	r0, r3
    33cc:	3710      	adds	r7, #16
    33ce:	46bd      	mov	sp, r7
    33d0:	bc90      	pop	{r4, r7}
    33d2:	4770      	bx	lr

000033d4 <xEventGenericSerialize>:

// update the timestamp of event in xEventExecutableList in terms of xFutureModelTime
portBASE_TYPE xEventGenericSerialize()
{
    33d4:	b590      	push	{r4, r7, lr}
    33d6:	b08f      	sub	sp, #60	; 0x3c
    33d8:	af04      	add	r7, sp, #16
    xListItem * flag_pxEventListItem;
    struct tag origin_tag;
    portBASE_TYPE count = 1;
    33da:	2301      	movs	r3, #1
    33dc:	627b      	str	r3, [r7, #36]	; 0x24

    if( listCURRENT_LIST_LENGTH( &xEventExecutableList ) > 1 )
    33de:	f240 63b0 	movw	r3, #1712	; 0x6b0
    33e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33e6:	681b      	ldr	r3, [r3, #0]
    33e8:	2b01      	cmp	r3, #1
    33ea:	d90b      	bls.n	3404 <xEventGenericSerialize+0x30>
    {
        origin_tag = xEventGetxTag( (xEventExecutableList.xListEnd.pxNext)->pvOwner );
    33ec:	f240 63b0 	movw	r3, #1712	; 0x6b0
    33f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33f4:	68db      	ldr	r3, [r3, #12]
    33f6:	68db      	ldr	r3, [r3, #12]
    33f8:	463a      	mov	r2, r7
    33fa:	4610      	mov	r0, r2
    33fc:	4619      	mov	r1, r3
    33fe:	f7ff fad5 	bl	29ac <xEventGetxTag>
    }
    
    while( listCURRENT_LIST_LENGTH(&xEventExecutableList) > 1 )
    3402:	e03d      	b.n	3480 <xEventGenericSerialize+0xac>
    3404:	e03c      	b.n	3480 <xEventGenericSerialize+0xac>
    {
        flag_pxEventListItem = (xListItem *) xEventExecutableList.xListEnd.pxNext;
    3406:	f240 63b0 	movw	r3, #1712	; 0x6b0
    340a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    340e:	68db      	ldr	r3, [r3, #12]
    3410:	623b      	str	r3, [r7, #32]
        // only the timestamp of c_servant need updating
        // only remove events that have same xDeadline with the first event in xEventExecutableList to xEventReadyList

        if( xContexts[xEventGetpxDestination(flag_pxEventListItem->pvOwner)].xType == 2 )
    3412:	6a3b      	ldr	r3, [r7, #32]
    3414:	68db      	ldr	r3, [r3, #12]
    3416:	4618      	mov	r0, r3
    3418:	f7ff fabc 	bl	2994 <xEventGetpxDestination>
    341c:	4601      	mov	r1, r0
    341e:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3422:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3426:	460b      	mov	r3, r1
    3428:	00db      	lsls	r3, r3, #3
    342a:	1a5b      	subs	r3, r3, r1
    342c:	00db      	lsls	r3, r3, #3
    342e:	4413      	add	r3, r2
    3430:	3304      	adds	r3, #4
    3432:	681b      	ldr	r3, [r3, #0]
    3434:	2b02      	cmp	r3, #2
    3436:	d119      	bne.n	346c <xEventGenericSerialize+0x98>
        {
            if( pEqualxDeadline( xEventGetxTag( flag_pxEventListItem->pvOwner ), origin_tag ))
    3438:	6a3b      	ldr	r3, [r7, #32]
    343a:	68db      	ldr	r3, [r3, #12]
    343c:	f107 0210 	add.w	r2, r7, #16
    3440:	4610      	mov	r0, r2
    3442:	4619      	mov	r1, r3
    3444:	f7ff fab2 	bl	29ac <xEventGetxTag>
    3448:	466c      	mov	r4, sp
    344a:	463b      	mov	r3, r7
    344c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    344e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    3452:	f107 0310 	add.w	r3, r7, #16
    3456:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3458:	f7ff ffaa 	bl	33b0 <pEqualxDeadline>
    345c:	4603      	mov	r3, r0
    345e:	2b00      	cmp	r3, #0
    3460:	d003      	beq.n	346a <xEventGenericSerialize+0x96>
            {
                // update the timestamp of event
                // if overlaped, then remove the event to xEventNonExecutablePool
                // else, remove the event to xEvenReadyList
                xSetTimestamp( flag_pxEventListItem);
    3462:	6a38      	ldr	r0, [r7, #32]
    3464:	f7ff ff26 	bl	32b4 <xSetTimestamp>
    3468:	e00a      	b.n	3480 <xEventGenericSerialize+0xac>
            }
            else
            {
                break;
    346a:	e010      	b.n	348e <xEventGenericSerialize+0xba>
            }
        }
        else
        {
            vListRemove( flag_pxEventListItem );
    346c:	6a38      	ldr	r0, [r7, #32]
    346e:	f000 ff33 	bl	42d8 <vListRemove>
            vListInsertEnd( &xEventReadyList, flag_pxEventListItem );
    3472:	f240 60c4 	movw	r0, #1732	; 0x6c4
    3476:	f2c2 0000 	movt	r0, #8192	; 0x2000
    347a:	6a39      	ldr	r1, [r7, #32]
    347c:	f000 fecc 	bl	4218 <vListInsertEnd>
    if( listCURRENT_LIST_LENGTH( &xEventExecutableList ) > 1 )
    {
        origin_tag = xEventGetxTag( (xEventExecutableList.xListEnd.pxNext)->pvOwner );
    }
    
    while( listCURRENT_LIST_LENGTH(&xEventExecutableList) > 1 )
    3480:	f240 63b0 	movw	r3, #1712	; 0x6b0
    3484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3488:	681b      	ldr	r3, [r3, #0]
    348a:	2b01      	cmp	r3, #1
    348c:	d8bb      	bhi.n	3406 <xEventGenericSerialize+0x32>
            vListRemove( flag_pxEventListItem );
            vListInsertEnd( &xEventReadyList, flag_pxEventListItem );
        }
    }

    if( listCURRENT_LIST_LENGTH( &xEventReadyList ) > 0 )
    348e:	f240 63c4 	movw	r3, #1732	; 0x6c4
    3492:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3496:	681b      	ldr	r3, [r3, #0]
    3498:	2b00      	cmp	r3, #0
    349a:	d00a      	beq.n	34b2 <xEventGenericSerialize+0xde>
    {
        return xEventGetpxDestination((xEventReadyList.xListEnd.pxNext)->pvOwner); //  the first one repsenting the type of events
    349c:	f240 63c4 	movw	r3, #1732	; 0x6c4
    34a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34a4:	68db      	ldr	r3, [r3, #12]
    34a6:	68db      	ldr	r3, [r3, #12]
    34a8:	4618      	mov	r0, r3
    34aa:	f7ff fa73 	bl	2994 <xEventGetpxDestination>
    34ae:	4603      	mov	r3, r0
    34b0:	e001      	b.n	34b6 <xEventGenericSerialize+0xe2>
    }
    return -1; // no event avaliable
    34b2:	f04f 33ff 	mov.w	r3, #4294967295
}
    34b6:	4618      	mov	r0, r3
    34b8:	372c      	adds	r7, #44	; 0x2c
    34ba:	46bd      	mov	sp, r7
    34bc:	bd90      	pop	{r4, r7, pc}
    34be:	bf00      	nop

000034c0 <vEventGenericSend>:

void vEventGenericSend( xEventHandle pxEvent )
{
    34c0:	b580      	push	{r7, lr}
    34c2:	b082      	sub	sp, #8
    34c4:	af00      	add	r7, sp, #0
    34c6:	6078      	str	r0, [r7, #4]
    vListInsertEnd(&xEventNonExecutablePool, (xListItem *)&((eveECB *)pxEvent)->xEventListItem);
    34c8:	687b      	ldr	r3, [r7, #4]
    34ca:	3320      	adds	r3, #32
    34cc:	f240 6074 	movw	r0, #1652	; 0x674
    34d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    34d4:	4619      	mov	r1, r3
    34d6:	f000 fe9f 	bl	4218 <vListInsertEnd>
}
    34da:	3708      	adds	r7, #8
    34dc:	46bd      	mov	sp, r7
    34de:	bd80      	pop	{r7, pc}

000034e0 <pxEventGenericReceive>:

xEventHandle pxEventGenericReceive()
{
    34e0:	b580      	push	{r7, lr}
    34e2:	b082      	sub	sp, #8
    34e4:	af00      	add	r7, sp, #0
    // xEventReadyList must not be null, which is ensured by servant

    taskENTER_CRITICAL();
    34e6:	f002 fca9 	bl	5e3c <vPortEnterCritical>
    xListItem * pxFlag = (xListItem *)xEventReadyList.xListEnd.pxNext;
    34ea:	f240 63c4 	movw	r3, #1732	; 0x6c4
    34ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    34f2:	68db      	ldr	r3, [r3, #12]
    34f4:	607b      	str	r3, [r7, #4]
    vListRemove(pxFlag);
    34f6:	6878      	ldr	r0, [r7, #4]
    34f8:	f000 feee 	bl	42d8 <vListRemove>
    vListInsertEnd(&xEventNonExecutablePool, pxFlag);  // reuse event, which will be update by servant 
    34fc:	f240 6074 	movw	r0, #1652	; 0x674
    3500:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3504:	6879      	ldr	r1, [r7, #4]
    3506:	f000 fe87 	bl	4218 <vListInsertEnd>
    taskEXIT_CRITICAL();
    350a:	f002 fcad 	bl	5e68 <vPortExitCritical>

    return (xEventHandle) pxFlag->pvOwner;
    350e:	687b      	ldr	r3, [r7, #4]
    3510:	68db      	ldr	r3, [r3, #12]
}
    3512:	4618      	mov	r0, r3
    3514:	3708      	adds	r7, #8
    3516:	46bd      	mov	sp, r7
    3518:	bd80      	pop	{r7, pc}
    351a:	bf00      	nop

0000351c <vEventGenericUpdate>:

void vEventGenericUpdate( xEventHandle xEvent, portBASE_TYPE pxSource, portTickType xDeadline, portTickType xTimestamp, struct eventData xData)
{
    351c:	b480      	push	{r7}
    351e:	b087      	sub	sp, #28
    3520:	af00      	add	r7, sp, #0
    3522:	60f8      	str	r0, [r7, #12]
    3524:	60b9      	str	r1, [r7, #8]
    3526:	607a      	str	r2, [r7, #4]
    3528:	603b      	str	r3, [r7, #0]
    eveECB * pxEvent = (eveECB *)xEvent;
    352a:	68fb      	ldr	r3, [r7, #12]
    352c:	617b      	str	r3, [r7, #20]
    pxEvent->pxSource = pxSource;
    352e:	697b      	ldr	r3, [r7, #20]
    3530:	68ba      	ldr	r2, [r7, #8]
    3532:	601a      	str	r2, [r3, #0]
    pxEvent->xTag.xDeadline = xDeadline;
    3534:	697b      	ldr	r3, [r7, #20]
    3536:	687a      	ldr	r2, [r7, #4]
    3538:	609a      	str	r2, [r3, #8]
    pxEvent->xTag.xTimestamp = xTimestamp; 
    353a:	697b      	ldr	r3, [r7, #20]
    353c:	683a      	ldr	r2, [r7, #0]
    353e:	60da      	str	r2, [r3, #12]
    pxEvent->xTag.xMicroStep = 0;
    3540:	697b      	ldr	r3, [r7, #20]
    3542:	2200      	movs	r2, #0
    3544:	615a      	str	r2, [r3, #20]
    pxEvent->xData = xData;
    3546:	697b      	ldr	r3, [r7, #20]
    3548:	3318      	adds	r3, #24
    354a:	f107 0220 	add.w	r2, r7, #32
    354e:	e892 0003 	ldmia.w	r2, {r0, r1}
    3552:	e883 0003 	stmia.w	r3, {r0, r1}
}
    3556:	371c      	adds	r7, #28
    3558:	46bd      	mov	sp, r7
    355a:	f85d 7b04 	ldr.w	r7, [sp], #4
    355e:	4770      	bx	lr

00003560 <vEventGenericDelete>:

void vEventGenericDelete( xEventHandle xEvent)
{
    3560:	b580      	push	{r7, lr}
    3562:	b084      	sub	sp, #16
    3564:	af00      	add	r7, sp, #0
    3566:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
    3568:	f002 fc68 	bl	5e3c <vPortEnterCritical>

    xListItem * pxEventItem = &((eveECB *)xEvent)->xEventListItem;
    356c:	687b      	ldr	r3, [r7, #4]
    356e:	3320      	adds	r3, #32
    3570:	60fb      	str	r3, [r7, #12]
    vListRemove (pxEventItem);
    3572:	68f8      	ldr	r0, [r7, #12]
    3574:	f000 feb0 	bl	42d8 <vListRemove>
    vListInsertEnd( &xEventIdleList, pxEventItem );
    3578:	f240 6060 	movw	r0, #1632	; 0x660
    357c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3580:	68f9      	ldr	r1, [r7, #12]
    3582:	f000 fe49 	bl	4218 <vListInsertEnd>

    taskEXIT_CRITICAL();
    3586:	f002 fc6f 	bl	5e68 <vPortExitCritical>
}
    358a:	3710      	adds	r7, #16
    358c:	46bd      	mov	sp, r7
    358e:	bd80      	pop	{r7, pc}

00003590 <vSemaphoreInitialise>:

extern portBASE_TYPE xActuatorOfTask[NUMBEROFTASK];

/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    3590:	b580      	push	{r7, lr}
    3592:	b082      	sub	sp, #8
    3594:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTHREAD; ++ i )
    3596:	2300      	movs	r3, #0
    3598:	607b      	str	r3, [r7, #4]
    359a:	e033      	b.n	3604 <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
    359c:	2001      	movs	r0, #1
    359e:	2100      	movs	r1, #0
    35a0:	2203      	movs	r2, #3
    35a2:	f000 ff0f 	bl	43c4 <xQueueGenericCreate>
    35a6:	4601      	mov	r1, r0
    35a8:	f241 1320 	movw	r3, #4384	; 0x1120
    35ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35b0:	687a      	ldr	r2, [r7, #4]
    35b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    35b6:	f241 1320 	movw	r3, #4384	; 0x1120
    35ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35be:	687a      	ldr	r2, [r7, #4]
    35c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35c4:	2b00      	cmp	r3, #0
    35c6:	d00c      	beq.n	35e2 <vSemaphoreInitialise+0x52>
    35c8:	f241 1320 	movw	r3, #4384	; 0x1120
    35cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35d0:	687a      	ldr	r2, [r7, #4]
    35d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35d6:	4618      	mov	r0, r3
    35d8:	2100      	movs	r1, #0
    35da:	2200      	movs	r2, #0
    35dc:	2300      	movs	r3, #0
    35de:	f000 ff7f 	bl	44e0 <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    35e2:	f241 1320 	movw	r3, #4384	; 0x1120
    35e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    35ea:	687a      	ldr	r2, [r7, #4]
    35ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    35f0:	4618      	mov	r0, r3
    35f2:	2100      	movs	r1, #0
    35f4:	f04f 32ff 	mov.w	r2, #4294967295
    35f8:	2300      	movs	r3, #0
    35fa:	f001 f837 	bl	466c <xQueueGenericReceive>
/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTHREAD; ++ i )
    35fe:	687b      	ldr	r3, [r7, #4]
    3600:	3301      	adds	r3, #1
    3602:	607b      	str	r3, [r7, #4]
    3604:	687b      	ldr	r3, [r7, #4]
    3606:	2b03      	cmp	r3, #3
    3608:	ddc8      	ble.n	359c <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    }
}
    360a:	3708      	adds	r7, #8
    360c:	46bd      	mov	sp, r7
    360e:	bd80      	pop	{r7, pc}

00003610 <vContextInit>:
/*
 * Set all the parameters of S-Servants.
 *
 * */
void vContextInit()
{
    3610:	b480      	push	{r7}
    3612:	b085      	sub	sp, #20
    3614:	af00      	add	r7, sp, #0
    portBASE_TYPE i, j;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    3616:	2300      	movs	r3, #0
    3618:	60fb      	str	r3, [r7, #12]
    361a:	e0a1      	b.n	3760 <vContextInit+0x150>
    {
        xContexts[i].xMyFlag = i;
    361c:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3620:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3624:	68f9      	ldr	r1, [r7, #12]
    3626:	460b      	mov	r3, r1
    3628:	00db      	lsls	r3, r3, #3
    362a:	1a5b      	subs	r3, r3, r1
    362c:	00db      	lsls	r3, r3, #3
    362e:	4413      	add	r3, r2
    3630:	68fa      	ldr	r2, [r7, #12]
    3632:	601a      	str	r2, [r3, #0]
        xContexts[i].xType = 2;
    3634:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3638:	f2c2 0200 	movt	r2, #8192	; 0x2000
    363c:	68f9      	ldr	r1, [r7, #12]
    363e:	460b      	mov	r3, r1
    3640:	00db      	lsls	r3, r3, #3
    3642:	1a5b      	subs	r3, r3, r1
    3644:	00db      	lsls	r3, r3, #3
    3646:	4413      	add	r3, r2
    3648:	3304      	adds	r3, #4
    364a:	2202      	movs	r2, #2
    364c:	601a      	str	r2, [r3, #0]
        xContexts[i].xCount = 1; // the first period of task is used to init system
    364e:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3652:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3656:	68f9      	ldr	r1, [r7, #12]
    3658:	460b      	mov	r3, r1
    365a:	00db      	lsls	r3, r3, #3
    365c:	1a5b      	subs	r3, r3, r1
    365e:	00db      	lsls	r3, r3, #3
    3660:	4413      	add	r3, r2
    3662:	3308      	adds	r3, #8
    3664:	2201      	movs	r2, #1
    3666:	601a      	str	r2, [r3, #0]
        xContexts[i].xNumOfIn = 0;
    3668:	f240 62d8 	movw	r2, #1752	; 0x6d8
    366c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3670:	68f9      	ldr	r1, [r7, #12]
    3672:	460b      	mov	r3, r1
    3674:	00db      	lsls	r3, r3, #3
    3676:	1a5b      	subs	r3, r3, r1
    3678:	00db      	lsls	r3, r3, #3
    367a:	4413      	add	r3, r2
    367c:	330c      	adds	r3, #12
    367e:	2200      	movs	r2, #0
    3680:	601a      	str	r2, [r3, #0]
        xContexts[i].xNumOfOut = 0;
    3682:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3686:	f2c2 0200 	movt	r2, #8192	; 0x2000
    368a:	68f9      	ldr	r1, [r7, #12]
    368c:	460b      	mov	r3, r1
    368e:	00db      	lsls	r3, r3, #3
    3690:	1a5b      	subs	r3, r3, r1
    3692:	00db      	lsls	r3, r3, #3
    3694:	4413      	add	r3, r2
    3696:	3310      	adds	r3, #16
    3698:	2200      	movs	r2, #0
    369a:	601a      	str	r2, [r3, #0]
        xContexts[i].xLet = xLetOfServant[i];
    369c:	f240 03c4 	movw	r3, #196	; 0xc4
    36a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36a4:	68fa      	ldr	r2, [r7, #12]
    36a6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    36aa:	f240 62d8 	movw	r2, #1752	; 0x6d8
    36ae:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36b2:	68f9      	ldr	r1, [r7, #12]
    36b4:	460b      	mov	r3, r1
    36b6:	00db      	lsls	r3, r3, #3
    36b8:	1a5b      	subs	r3, r3, r1
    36ba:	00db      	lsls	r3, r3, #3
    36bc:	4413      	add	r3, r2
    36be:	3324      	adds	r3, #36	; 0x24
    36c0:	6018      	str	r0, [r3, #0]
        xContexts[i].xFp = xServantTable[i];
    36c2:	f240 4374 	movw	r3, #1140	; 0x474
    36c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36ca:	68fa      	ldr	r2, [r7, #12]
    36cc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    36d0:	f240 62d8 	movw	r2, #1752	; 0x6d8
    36d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36d8:	68f9      	ldr	r1, [r7, #12]
    36da:	460b      	mov	r3, r1
    36dc:	00db      	lsls	r3, r3, #3
    36de:	1a5b      	subs	r3, r3, r1
    36e0:	00db      	lsls	r3, r3, #3
    36e2:	4413      	add	r3, r2
    36e4:	3328      	adds	r3, #40	; 0x28
    36e6:	6018      	str	r0, [r3, #0]
        xContexts[i].xTaskId = xTaskOfServant[i];
    36e8:	f240 1380 	movw	r3, #384	; 0x180
    36ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36f0:	68fa      	ldr	r2, [r7, #12]
    36f2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    36f6:	f240 62d8 	movw	r2, #1752	; 0x6d8
    36fa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36fe:	68f9      	ldr	r1, [r7, #12]
    3700:	460b      	mov	r3, r1
    3702:	00db      	lsls	r3, r3, #3
    3704:	1a5b      	subs	r3, r3, r1
    3706:	00db      	lsls	r3, r3, #3
    3708:	4413      	add	r3, r2
    370a:	3330      	adds	r3, #48	; 0x30
    370c:	6018      	str	r0, [r3, #0]
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
    370e:	f240 1380 	movw	r3, #384	; 0x180
    3712:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3716:	68fa      	ldr	r2, [r7, #12]
    3718:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    371c:	f240 0328 	movw	r3, #40	; 0x28
    3720:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3724:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    3728:	f240 62d8 	movw	r2, #1752	; 0x6d8
    372c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3730:	68f9      	ldr	r1, [r7, #12]
    3732:	460b      	mov	r3, r1
    3734:	00db      	lsls	r3, r3, #3
    3736:	1a5b      	subs	r3, r3, r1
    3738:	00db      	lsls	r3, r3, #3
    373a:	4413      	add	r3, r2
    373c:	332c      	adds	r3, #44	; 0x2c
    373e:	6018      	str	r0, [r3, #0]
        xContexts[i].xInBoolCount = 0;
    3740:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3744:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3748:	68f9      	ldr	r1, [r7, #12]
    374a:	460b      	mov	r3, r1
    374c:	00db      	lsls	r3, r3, #3
    374e:	1a5b      	subs	r3, r3, r1
    3750:	00db      	lsls	r3, r3, #3
    3752:	4413      	add	r3, r2
    3754:	3334      	adds	r3, #52	; 0x34
    3756:	2200      	movs	r2, #0
    3758:	601a      	str	r2, [r3, #0]
{
    portBASE_TYPE i, j;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    375a:	68fb      	ldr	r3, [r7, #12]
    375c:	3301      	adds	r3, #1
    375e:	60fb      	str	r3, [r7, #12]
    3760:	68fb      	ldr	r3, [r7, #12]
    3762:	2b2e      	cmp	r3, #46	; 0x2e
    3764:	f77f af5a 	ble.w	361c <vContextInit+0xc>
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
        xContexts[i].xInBoolCount = 0;
    }

    // setup the type of servants who are initialised to 2
    for( i = 0; i < NUMBEROFTASK; ++ i )
    3768:	2300      	movs	r3, #0
    376a:	60fb      	str	r3, [r7, #12]
    376c:	e028      	b.n	37c0 <vContextInit+0x1b0>
    {
        xContexts[xSensorOfTask[i]].xType = 1;
    376e:	f240 035c 	movw	r3, #92	; 0x5c
    3772:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3776:	68fa      	ldr	r2, [r7, #12]
    3778:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    377c:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3780:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3784:	460b      	mov	r3, r1
    3786:	00db      	lsls	r3, r3, #3
    3788:	1a5b      	subs	r3, r3, r1
    378a:	00db      	lsls	r3, r3, #3
    378c:	4413      	add	r3, r2
    378e:	3304      	adds	r3, #4
    3790:	2201      	movs	r2, #1
    3792:	601a      	str	r2, [r3, #0]
        xContexts[xActuatorOfTask[i]].xType = 3;
    3794:	f240 0390 	movw	r3, #144	; 0x90
    3798:	f2c2 0300 	movt	r3, #8192	; 0x2000
    379c:	68fa      	ldr	r2, [r7, #12]
    379e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    37a2:	f240 62d8 	movw	r2, #1752	; 0x6d8
    37a6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37aa:	460b      	mov	r3, r1
    37ac:	00db      	lsls	r3, r3, #3
    37ae:	1a5b      	subs	r3, r3, r1
    37b0:	00db      	lsls	r3, r3, #3
    37b2:	4413      	add	r3, r2
    37b4:	3304      	adds	r3, #4
    37b6:	2203      	movs	r2, #3
    37b8:	601a      	str	r2, [r3, #0]
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
        xContexts[i].xInBoolCount = 0;
    }

    // setup the type of servants who are initialised to 2
    for( i = 0; i < NUMBEROFTASK; ++ i )
    37ba:	68fb      	ldr	r3, [r7, #12]
    37bc:	3301      	adds	r3, #1
    37be:	60fb      	str	r3, [r7, #12]
    37c0:	68fb      	ldr	r3, [r7, #12]
    37c2:	2b0c      	cmp	r3, #12
    37c4:	ddd3      	ble.n	376e <vContextInit+0x15e>
        xContexts[xSensorOfTask[i]].xType = 1;
        xContexts[xActuatorOfTask[i]].xType = 3;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    37c6:	2300      	movs	r3, #0
    37c8:	60fb      	str	r3, [r7, #12]
    37ca:	e084      	b.n	38d6 <vContextInit+0x2c6>
    {
        xSource = xRelations.xRelation[i].xInFlag;
    37cc:	f240 223c 	movw	r2, #572	; 0x23c
    37d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37d4:	68f9      	ldr	r1, [r7, #12]
    37d6:	460b      	mov	r3, r1
    37d8:	005b      	lsls	r3, r3, #1
    37da:	440b      	add	r3, r1
    37dc:	009b      	lsls	r3, r3, #2
    37de:	4413      	add	r3, r2
    37e0:	3304      	adds	r3, #4
    37e2:	681b      	ldr	r3, [r3, #0]
    37e4:	60bb      	str	r3, [r7, #8]
        xDest   = xRelations.xRelation[i].xOutFlag;
    37e6:	f240 223c 	movw	r2, #572	; 0x23c
    37ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37ee:	68f9      	ldr	r1, [r7, #12]
    37f0:	460b      	mov	r3, r1
    37f2:	005b      	lsls	r3, r3, #1
    37f4:	440b      	add	r3, r1
    37f6:	009b      	lsls	r3, r3, #2
    37f8:	4413      	add	r3, r2
    37fa:	3308      	adds	r3, #8
    37fc:	681b      	ldr	r3, [r3, #0]
    37fe:	607b      	str	r3, [r7, #4]

        xContexts[xSource].xOutFlag[xContexts[xSource].xNumOfOut] = xDest;
    3800:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3804:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3808:	68b9      	ldr	r1, [r7, #8]
    380a:	460b      	mov	r3, r1
    380c:	00db      	lsls	r3, r3, #3
    380e:	1a5b      	subs	r3, r3, r1
    3810:	00db      	lsls	r3, r3, #3
    3812:	4413      	add	r3, r2
    3814:	3310      	adds	r3, #16
    3816:	6818      	ldr	r0, [r3, #0]
    3818:	f240 62d8 	movw	r2, #1752	; 0x6d8
    381c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3820:	68b9      	ldr	r1, [r7, #8]
    3822:	460b      	mov	r3, r1
    3824:	00db      	lsls	r3, r3, #3
    3826:	1a5b      	subs	r3, r3, r1
    3828:	005b      	lsls	r3, r3, #1
    382a:	4403      	add	r3, r0
    382c:	3306      	adds	r3, #6
    382e:	009b      	lsls	r3, r3, #2
    3830:	4413      	add	r3, r2
    3832:	687a      	ldr	r2, [r7, #4]
    3834:	605a      	str	r2, [r3, #4]
        xContexts[xSource].xNumOfOut ++;
    3836:	f240 62d8 	movw	r2, #1752	; 0x6d8
    383a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    383e:	68b9      	ldr	r1, [r7, #8]
    3840:	460b      	mov	r3, r1
    3842:	00db      	lsls	r3, r3, #3
    3844:	1a5b      	subs	r3, r3, r1
    3846:	00db      	lsls	r3, r3, #3
    3848:	4413      	add	r3, r2
    384a:	3310      	adds	r3, #16
    384c:	681b      	ldr	r3, [r3, #0]
    384e:	1c58      	adds	r0, r3, #1
    3850:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3854:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3858:	68b9      	ldr	r1, [r7, #8]
    385a:	460b      	mov	r3, r1
    385c:	00db      	lsls	r3, r3, #3
    385e:	1a5b      	subs	r3, r3, r1
    3860:	00db      	lsls	r3, r3, #3
    3862:	4413      	add	r3, r2
    3864:	3310      	adds	r3, #16
    3866:	6018      	str	r0, [r3, #0]

        xContexts[xDest].xInFlag[xContexts[xDest].xNumOfIn] = xSource;
    3868:	f240 62d8 	movw	r2, #1752	; 0x6d8
    386c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3870:	6879      	ldr	r1, [r7, #4]
    3872:	460b      	mov	r3, r1
    3874:	00db      	lsls	r3, r3, #3
    3876:	1a5b      	subs	r3, r3, r1
    3878:	00db      	lsls	r3, r3, #3
    387a:	4413      	add	r3, r2
    387c:	330c      	adds	r3, #12
    387e:	6818      	ldr	r0, [r3, #0]
    3880:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3884:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3888:	6879      	ldr	r1, [r7, #4]
    388a:	460b      	mov	r3, r1
    388c:	00db      	lsls	r3, r3, #3
    388e:	1a5b      	subs	r3, r3, r1
    3890:	005b      	lsls	r3, r3, #1
    3892:	4403      	add	r3, r0
    3894:	3304      	adds	r3, #4
    3896:	009b      	lsls	r3, r3, #2
    3898:	4413      	add	r3, r2
    389a:	68ba      	ldr	r2, [r7, #8]
    389c:	605a      	str	r2, [r3, #4]
        xContexts[xDest].xNumOfIn ++;
    389e:	f240 62d8 	movw	r2, #1752	; 0x6d8
    38a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    38a6:	6879      	ldr	r1, [r7, #4]
    38a8:	460b      	mov	r3, r1
    38aa:	00db      	lsls	r3, r3, #3
    38ac:	1a5b      	subs	r3, r3, r1
    38ae:	00db      	lsls	r3, r3, #3
    38b0:	4413      	add	r3, r2
    38b2:	330c      	adds	r3, #12
    38b4:	681b      	ldr	r3, [r3, #0]
    38b6:	1c58      	adds	r0, r3, #1
    38b8:	f240 62d8 	movw	r2, #1752	; 0x6d8
    38bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    38c0:	6879      	ldr	r1, [r7, #4]
    38c2:	460b      	mov	r3, r1
    38c4:	00db      	lsls	r3, r3, #3
    38c6:	1a5b      	subs	r3, r3, r1
    38c8:	00db      	lsls	r3, r3, #3
    38ca:	4413      	add	r3, r2
    38cc:	330c      	adds	r3, #12
    38ce:	6018      	str	r0, [r3, #0]
        xContexts[xSensorOfTask[i]].xType = 1;
        xContexts[xActuatorOfTask[i]].xType = 3;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    38d0:	68fb      	ldr	r3, [r7, #12]
    38d2:	3301      	adds	r3, #1
    38d4:	60fb      	str	r3, [r7, #12]
    38d6:	f240 233c 	movw	r3, #572	; 0x23c
    38da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38de:	681a      	ldr	r2, [r3, #0]
    38e0:	68fb      	ldr	r3, [r7, #12]
    38e2:	429a      	cmp	r2, r3
    38e4:	f73f af72 	bgt.w	37cc <vContextInit+0x1bc>
        xContexts[xSource].xNumOfOut ++;

        xContexts[xDest].xInFlag[xContexts[xDest].xNumOfIn] = xSource;
        xContexts[xDest].xNumOfIn ++;
    }
}
    38e8:	3714      	adds	r7, #20
    38ea:	46bd      	mov	sp, r7
    38ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    38f0:	4770      	bx	lr
    38f2:	bf00      	nop

000038f4 <vSensor>:

void vSensor( void * pvParameter )
{
    38f4:	b580      	push	{r7, lr}
    38f6:	b092      	sub	sp, #72	; 0x48
    38f8:	af02      	add	r7, sp, #8
    38fa:	60f8      	str	r0, [r7, #12]
    struct tag xMyTag;
    portBASE_TYPE boolFlag;

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[1], portMAX_DELAY );
    38fc:	f241 1320 	movw	r3, #4384	; 0x1120
    3900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3904:	685b      	ldr	r3, [r3, #4]
    3906:	4618      	mov	r0, r3
    3908:	2100      	movs	r1, #0
    390a:	f04f 32ff 	mov.w	r2, #4294967295
    390e:	2300      	movs	r3, #0
    3910:	f000 feac 	bl	466c <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    3914:	e071      	b.n	39fa <vSensor+0x106>
        {
            if(boolFlag == 0)
    3916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3918:	2b00      	cmp	r3, #0
    391a:	d100      	bne.n	391e <vSensor+0x2a>
                continue;
    391c:	e06d      	b.n	39fa <vSensor+0x106>
            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    391e:	f7ff fddf 	bl	34e0 <pxEventGenericReceive>
    3922:	63b8      	str	r0, [r7, #56]	; 0x38
            xMyFlag = xEventGetpxDestination( pxEvent );
    3924:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3926:	f7ff f835 	bl	2994 <xEventGetpxDestination>
    392a:	6378      	str	r0, [r7, #52]	; 0x34
            xMyData = xEventGetxData( pxEvent );
    392c:	463b      	mov	r3, r7
    392e:	4618      	mov	r0, r3
    3930:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    3932:	f7ff f84d 	bl	29d0 <xEventGetxData>
    3936:	f107 0324 	add.w	r3, r7, #36	; 0x24
    393a:	463a      	mov	r2, r7
    393c:	e892 0003 	ldmia.w	r2, {r0, r1}
    3940:	e883 0003 	stmia.w	r3, {r0, r1}
            xMyTag = xEventGetxTag( pxEvent );
    3944:	f107 0314 	add.w	r3, r7, #20
    3948:	4618      	mov	r0, r3
    394a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    394c:	f7ff f82e 	bl	29ac <xEventGetxTag>
            xPeriod= xContexts[xMyFlag].xPeriod;
    3950:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3954:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3958:	6b79      	ldr	r1, [r7, #52]	; 0x34
    395a:	460b      	mov	r3, r1
    395c:	00db      	lsls	r3, r3, #3
    395e:	1a5b      	subs	r3, r3, r1
    3960:	00db      	lsls	r3, r3, #3
    3962:	4413      	add	r3, r2
    3964:	332c      	adds	r3, #44	; 0x2c
    3966:	681b      	ldr	r3, [r3, #0]
    3968:	633b      	str	r3, [r7, #48]	; 0x30
            xContexts[xMyFlag].xCount ++;
    396a:	f240 62d8 	movw	r2, #1752	; 0x6d8
    396e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3972:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3974:	460b      	mov	r3, r1
    3976:	00db      	lsls	r3, r3, #3
    3978:	1a5b      	subs	r3, r3, r1
    397a:	00db      	lsls	r3, r3, #3
    397c:	4413      	add	r3, r2
    397e:	3308      	adds	r3, #8
    3980:	681b      	ldr	r3, [r3, #0]
    3982:	1c58      	adds	r0, r3, #1
    3984:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3988:	f2c2 0200 	movt	r2, #8192	; 0x2000
    398c:	6b79      	ldr	r1, [r7, #52]	; 0x34
    398e:	460b      	mov	r3, r1
    3990:	00db      	lsls	r3, r3, #3
    3992:	1a5b      	subs	r3, r3, r1
    3994:	00db      	lsls	r3, r3, #3
    3996:	4413      	add	r3, r2
    3998:	3308      	adds	r3, #8
    399a:	6018      	str	r0, [r3, #0]
            xTimestamp = xMyTag.xTimestamp + INPUT;   
    399c:	69bb      	ldr	r3, [r7, #24]
    399e:	3303      	adds	r3, #3
    39a0:	62fb      	str	r3, [r7, #44]	; 0x2c
            xFutureModelTime = xTimestamp;  // init the future model time to the start of LET execution duration.
    39a2:	f240 635c 	movw	r3, #1628	; 0x65c
    39a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    39ac:	601a      	str	r2, [r3, #0]
            vPrintNumber(xMyFlag);
    39ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
    39b0:	f013 feba 	bl	17728 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    39b4:	f001 fd0e 	bl	53d4 <xTaskGetTickCount>
    39b8:	4603      	mov	r3, r0
    39ba:	4618      	mov	r0, r3
    39bc:	f013 feb4 	bl	17728 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
    39c0:	f240 62d8 	movw	r2, #1752	; 0x6d8
    39c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    39c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
    39ca:	460b      	mov	r3, r1
    39cc:	00db      	lsls	r3, r3, #3
    39ce:	1a5b      	subs	r3, r3, r1
    39d0:	00db      	lsls	r3, r3, #3
    39d2:	4413      	add	r3, r2
    39d4:	3328      	adds	r3, #40	; 0x28
    39d6:	681b      	ldr	r3, [r3, #0]
    39d8:	f107 0224 	add.w	r2, r7, #36	; 0x24
    39dc:	4610      	mov	r0, r2
    39de:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData );  // reuse event
    39e0:	466b      	mov	r3, sp
    39e2:	f107 0224 	add.w	r2, r7, #36	; 0x24
    39e6:	e892 0003 	ldmia.w	r2, {r0, r1}
    39ea:	e883 0003 	stmia.w	r3, {r0, r1}
    39ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    39f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
    39f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    39f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    39f6:	f7ff fd91 	bl	351c <vEventGenericUpdate>

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[1], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    39fa:	f7fe ff85 	bl	2908 <xIsERLNull>
    39fe:	63f8      	str	r0, [r7, #60]	; 0x3c
    3a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3a02:	f1b3 3fff 	cmp.w	r3, #4294967295
    3a06:	d186      	bne.n	3916 <vSensor+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData );  // reuse event
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    3a08:	f241 1320 	movw	r3, #4384	; 0x1120
    3a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a10:	681b      	ldr	r3, [r3, #0]
    3a12:	4618      	mov	r0, r3
    3a14:	2100      	movs	r1, #0
    3a16:	2200      	movs	r2, #0
    3a18:	2300      	movs	r3, #0
    3a1a:	f000 fd61 	bl	44e0 <xQueueGenericSend>
    }
    3a1e:	e76d      	b.n	38fc <vSensor+0x8>

00003a20 <vServant>:
}

void vServant( void * pvParameter )
{
    3a20:	b580      	push	{r7, lr}
    3a22:	b092      	sub	sp, #72	; 0x48
    3a24:	af02      	add	r7, sp, #8
    3a26:	60f8      	str	r0, [r7, #12]
    struct eventData xMyData;
    struct tag xMyTag;
    portBASE_TYPE boolFlag;
    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[2], portMAX_DELAY );
    3a28:	f241 1320 	movw	r3, #4384	; 0x1120
    3a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a30:	689b      	ldr	r3, [r3, #8]
    3a32:	4618      	mov	r0, r3
    3a34:	2100      	movs	r1, #0
    3a36:	f04f 32ff 	mov.w	r2, #4294967295
    3a3a:	2300      	movs	r3, #0
    3a3c:	f000 fe16 	bl	466c <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    3a40:	e0a8      	b.n	3b94 <vServant+0x174>
        {
            if(boolFlag == 0)
    3a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3a44:	2b00      	cmp	r3, #0
    3a46:	d100      	bne.n	3a4a <vServant+0x2a>
                continue;
    3a48:	e0a4      	b.n	3b94 <vServant+0x174>
            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    3a4a:	f7ff fd49 	bl	34e0 <pxEventGenericReceive>
    3a4e:	6378      	str	r0, [r7, #52]	; 0x34
            xMyFlag = xEventGetpxDestination( pxEvent );
    3a50:	6b78      	ldr	r0, [r7, #52]	; 0x34
    3a52:	f7fe ff9f 	bl	2994 <xEventGetpxDestination>
    3a56:	6338      	str	r0, [r7, #48]	; 0x30
            xMyData = xEventGetxData( pxEvent );
    3a58:	463b      	mov	r3, r7
    3a5a:	4618      	mov	r0, r3
    3a5c:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3a5e:	f7fe ffb7 	bl	29d0 <xEventGetxData>
    3a62:	f107 0320 	add.w	r3, r7, #32
    3a66:	463a      	mov	r2, r7
    3a68:	e892 0003 	ldmia.w	r2, {r0, r1}
    3a6c:	e883 0003 	stmia.w	r3, {r0, r1}
            xMyTag = xEventGetxTag( pxEvent );
    3a70:	f107 0310 	add.w	r3, r7, #16
    3a74:	4618      	mov	r0, r3
    3a76:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3a78:	f7fe ff98 	bl	29ac <xEventGetxTag>
            xPeriod= xContexts[xMyFlag].xPeriod;
    3a7c:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3a80:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a84:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3a86:	460b      	mov	r3, r1
    3a88:	00db      	lsls	r3, r3, #3
    3a8a:	1a5b      	subs	r3, r3, r1
    3a8c:	00db      	lsls	r3, r3, #3
    3a8e:	4413      	add	r3, r2
    3a90:	332c      	adds	r3, #44	; 0x2c
    3a92:	681b      	ldr	r3, [r3, #0]
    3a94:	62fb      	str	r3, [r7, #44]	; 0x2c
            xContexts[xMyFlag].xCount ++;
    3a96:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3a9a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3aa0:	460b      	mov	r3, r1
    3aa2:	00db      	lsls	r3, r3, #3
    3aa4:	1a5b      	subs	r3, r3, r1
    3aa6:	00db      	lsls	r3, r3, #3
    3aa8:	4413      	add	r3, r2
    3aaa:	3308      	adds	r3, #8
    3aac:	681b      	ldr	r3, [r3, #0]
    3aae:	1c58      	adds	r0, r3, #1
    3ab0:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3ab4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3ab8:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3aba:	460b      	mov	r3, r1
    3abc:	00db      	lsls	r3, r3, #3
    3abe:	1a5b      	subs	r3, r3, r1
    3ac0:	00db      	lsls	r3, r3, #3
    3ac2:	4413      	add	r3, r2
    3ac4:	3308      	adds	r3, #8
    3ac6:	6018      	str	r0, [r3, #0]
            // set the timestamp of event in terms of destination servant
            // if destination is actuator, then set as the EndOfLET
            // else set as the sum of input event's timestamp and let
            pxDestination = xContexts[xMyFlag].xOutFlag[0];
    3ac8:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3acc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3ad0:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3ad2:	460b      	mov	r3, r1
    3ad4:	00db      	lsls	r3, r3, #3
    3ad6:	1a5b      	subs	r3, r3, r1
    3ad8:	00db      	lsls	r3, r3, #3
    3ada:	4413      	add	r3, r2
    3adc:	331c      	adds	r3, #28
    3ade:	681b      	ldr	r3, [r3, #0]
    3ae0:	62bb      	str	r3, [r7, #40]	; 0x28
            switch(xContexts[pxDestination].xType)
    3ae2:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3ae6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3aea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3aec:	460b      	mov	r3, r1
    3aee:	00db      	lsls	r3, r3, #3
    3af0:	1a5b      	subs	r3, r3, r1
    3af2:	00db      	lsls	r3, r3, #3
    3af4:	4413      	add	r3, r2
    3af6:	3304      	adds	r3, #4
    3af8:	681b      	ldr	r3, [r3, #0]
    3afa:	2b02      	cmp	r3, #2
    3afc:	d002      	beq.n	3b04 <vServant+0xe4>
    3afe:	2b03      	cmp	r3, #3
    3b00:	d010      	beq.n	3b24 <vServant+0x104>
                case 3:
                    // the output execution time start from 3ms before end of the task period
                    xTimestamp = xPeriod * xContexts[xMyFlag].xCount - OUTPUT; 
                    break;
                default:
                    break;
    3b02:	e021      	b.n	3b48 <vServant+0x128>
            // else set as the sum of input event's timestamp and let
            pxDestination = xContexts[xMyFlag].xOutFlag[0];
            switch(xContexts[pxDestination].xType)
            {
                case 2:
                    xTimestamp = xMyTag.xTimestamp + xContexts[xMyFlag].xLet;
    3b04:	6978      	ldr	r0, [r7, #20]
    3b06:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3b0a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3b10:	460b      	mov	r3, r1
    3b12:	00db      	lsls	r3, r3, #3
    3b14:	1a5b      	subs	r3, r3, r1
    3b16:	00db      	lsls	r3, r3, #3
    3b18:	4413      	add	r3, r2
    3b1a:	3324      	adds	r3, #36	; 0x24
    3b1c:	681b      	ldr	r3, [r3, #0]
    3b1e:	4403      	add	r3, r0
    3b20:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
    3b22:	e011      	b.n	3b48 <vServant+0x128>
                case 3:
                    // the output execution time start from 3ms before end of the task period
                    xTimestamp = xPeriod * xContexts[xMyFlag].xCount - OUTPUT; 
    3b24:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3b28:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3b2e:	460b      	mov	r3, r1
    3b30:	00db      	lsls	r3, r3, #3
    3b32:	1a5b      	subs	r3, r3, r1
    3b34:	00db      	lsls	r3, r3, #3
    3b36:	4413      	add	r3, r2
    3b38:	3308      	adds	r3, #8
    3b3a:	681b      	ldr	r3, [r3, #0]
    3b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3b3e:	fb02 f303 	mul.w	r3, r2, r3
    3b42:	3b03      	subs	r3, #3
    3b44:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
    3b46:	bf00      	nop
                default:
                    break;
                    // wrong events type
            }
            vPrintNumber(xMyFlag);
    3b48:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3b4a:	f013 fded 	bl	17728 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3b4e:	f001 fc41 	bl	53d4 <xTaskGetTickCount>
    3b52:	4603      	mov	r3, r0
    3b54:	4618      	mov	r0, r3
    3b56:	f013 fde7 	bl	17728 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
    3b5a:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3b5e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b62:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3b64:	460b      	mov	r3, r1
    3b66:	00db      	lsls	r3, r3, #3
    3b68:	1a5b      	subs	r3, r3, r1
    3b6a:	00db      	lsls	r3, r3, #3
    3b6c:	4413      	add	r3, r2
    3b6e:	3328      	adds	r3, #40	; 0x28
    3b70:	681b      	ldr	r3, [r3, #0]
    3b72:	f107 0220 	add.w	r2, r7, #32
    3b76:	4610      	mov	r0, r2
    3b78:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData );
    3b7a:	466b      	mov	r3, sp
    3b7c:	f107 0220 	add.w	r2, r7, #32
    3b80:	e892 0003 	ldmia.w	r2, {r0, r1}
    3b84:	e883 0003 	stmia.w	r3, {r0, r1}
    3b88:	6b78      	ldr	r0, [r7, #52]	; 0x34
    3b8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3b8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3b90:	f7ff fcc4 	bl	351c <vEventGenericUpdate>
    portBASE_TYPE boolFlag;
    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[2], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    3b94:	f7fe feb8 	bl	2908 <xIsERLNull>
    3b98:	63b8      	str	r0, [r7, #56]	; 0x38
    3b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
    3ba0:	f47f af4f 	bne.w	3a42 <vServant+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData );
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    3ba4:	f241 1320 	movw	r3, #4384	; 0x1120
    3ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bac:	681b      	ldr	r3, [r3, #0]
    3bae:	4618      	mov	r0, r3
    3bb0:	2100      	movs	r1, #0
    3bb2:	2200      	movs	r2, #0
    3bb4:	2300      	movs	r3, #0
    3bb6:	f000 fc93 	bl	44e0 <xQueueGenericSend>
    }
    3bba:	e735      	b.n	3a28 <vServant+0x8>

00003bbc <vActuator>:

}

void vActuator( void * pvParameter )
{
    3bbc:	b580      	push	{r7, lr}
    3bbe:	b092      	sub	sp, #72	; 0x48
    3bc0:	af02      	add	r7, sp, #8
    3bc2:	60f8      	str	r0, [r7, #12]
    struct tag xMyTag;
    portBASE_TYPE boolFlag;

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[3], portMAX_DELAY );
    3bc4:	f241 1320 	movw	r3, #4384	; 0x1120
    3bc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bcc:	68db      	ldr	r3, [r3, #12]
    3bce:	4618      	mov	r0, r3
    3bd0:	2100      	movs	r1, #0
    3bd2:	f04f 32ff 	mov.w	r2, #4294967295
    3bd6:	2300      	movs	r3, #0
    3bd8:	f000 fd48 	bl	466c <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    3bdc:	e06b      	b.n	3cb6 <vActuator+0xfa>
        {
            if(boolFlag == 0)
    3bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3be0:	2b00      	cmp	r3, #0
    3be2:	d100      	bne.n	3be6 <vActuator+0x2a>
                continue;
    3be4:	e067      	b.n	3cb6 <vActuator+0xfa>

            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    3be6:	f7ff fc7b 	bl	34e0 <pxEventGenericReceive>
    3bea:	63b8      	str	r0, [r7, #56]	; 0x38
            xMyFlag = xEventGetpxDestination( pxEvent );
    3bec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3bee:	f7fe fed1 	bl	2994 <xEventGetpxDestination>
    3bf2:	6378      	str	r0, [r7, #52]	; 0x34
            xMyData = xEventGetxData( pxEvent );
    3bf4:	463b      	mov	r3, r7
    3bf6:	4618      	mov	r0, r3
    3bf8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    3bfa:	f7fe fee9 	bl	29d0 <xEventGetxData>
    3bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
    3c02:	463a      	mov	r2, r7
    3c04:	e892 0003 	ldmia.w	r2, {r0, r1}
    3c08:	e883 0003 	stmia.w	r3, {r0, r1}
            xMyTag = xEventGetxTag( pxEvent );
    3c0c:	f107 0314 	add.w	r3, r7, #20
    3c10:	4618      	mov	r0, r3
    3c12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    3c14:	f7fe feca 	bl	29ac <xEventGetxTag>
            xPeriod = xContexts[xMyFlag].xPeriod;
    3c18:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3c1c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3c20:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3c22:	460b      	mov	r3, r1
    3c24:	00db      	lsls	r3, r3, #3
    3c26:	1a5b      	subs	r3, r3, r1
    3c28:	00db      	lsls	r3, r3, #3
    3c2a:	4413      	add	r3, r2
    3c2c:	332c      	adds	r3, #44	; 0x2c
    3c2e:	681b      	ldr	r3, [r3, #0]
    3c30:	633b      	str	r3, [r7, #48]	; 0x30
            xContexts[xMyFlag].xCount ++;
    3c32:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3c36:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3c3a:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3c3c:	460b      	mov	r3, r1
    3c3e:	00db      	lsls	r3, r3, #3
    3c40:	1a5b      	subs	r3, r3, r1
    3c42:	00db      	lsls	r3, r3, #3
    3c44:	4413      	add	r3, r2
    3c46:	3308      	adds	r3, #8
    3c48:	681b      	ldr	r3, [r3, #0]
    3c4a:	1c58      	adds	r0, r3, #1
    3c4c:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3c50:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3c54:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3c56:	460b      	mov	r3, r1
    3c58:	00db      	lsls	r3, r3, #3
    3c5a:	1a5b      	subs	r3, r3, r1
    3c5c:	00db      	lsls	r3, r3, #3
    3c5e:	4413      	add	r3, r2
    3c60:	3308      	adds	r3, #8
    3c62:	6018      	str	r0, [r3, #0]
            xTimestamp = xMyTag.xTimestamp + OUTPUT;  // all sensor are scheduled to execute start from 0 to 4 ms of every period
    3c64:	69bb      	ldr	r3, [r7, #24]
    3c66:	3303      	adds	r3, #3
    3c68:	62fb      	str	r3, [r7, #44]	; 0x2c
            vPrintNumber(xMyFlag);
    3c6a:	6b78      	ldr	r0, [r7, #52]	; 0x34
    3c6c:	f013 fd5c 	bl	17728 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3c70:	f001 fbb0 	bl	53d4 <xTaskGetTickCount>
    3c74:	4603      	mov	r3, r0
    3c76:	4618      	mov	r0, r3
    3c78:	f013 fd56 	bl	17728 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
    3c7c:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3c80:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3c84:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3c86:	460b      	mov	r3, r1
    3c88:	00db      	lsls	r3, r3, #3
    3c8a:	1a5b      	subs	r3, r3, r1
    3c8c:	00db      	lsls	r3, r3, #3
    3c8e:	4413      	add	r3, r2
    3c90:	3328      	adds	r3, #40	; 0x28
    3c92:	681b      	ldr	r3, [r3, #0]
    3c94:	f107 0224 	add.w	r2, r7, #36	; 0x24
    3c98:	4610      	mov	r0, r2
    3c9a:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData ); // update the information of output event 
    3c9c:	466b      	mov	r3, sp
    3c9e:	f107 0224 	add.w	r2, r7, #36	; 0x24
    3ca2:	e892 0003 	ldmia.w	r2, {r0, r1}
    3ca6:	e883 0003 	stmia.w	r3, {r0, r1}
    3caa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3cac:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3cae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3cb2:	f7ff fc33 	bl	351c <vEventGenericUpdate>

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[3], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    3cb6:	f7fe fe27 	bl	2908 <xIsERLNull>
    3cba:	63f8      	str	r0, [r7, #60]	; 0x3c
    3cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
    3cc2:	d18c      	bne.n	3bde <vActuator+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( &xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xPeriod, xTimestamp, xMyData ); // update the information of output event 
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    3cc4:	f241 1320 	movw	r3, #4384	; 0x1120
    3cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ccc:	681b      	ldr	r3, [r3, #0]
    3cce:	4618      	mov	r0, r3
    3cd0:	2100      	movs	r1, #0
    3cd2:	2200      	movs	r2, #0
    3cd4:	2300      	movs	r3, #0
    3cd6:	f000 fc03 	bl	44e0 <xQueueGenericSend>
    }
    3cda:	e773      	b.n	3bc4 <vActuator+0x8>

00003cdc <vR_Servant>:
}


void vR_Servant( void * pvParameter)
{
    3cdc:	b580      	push	{r7, lr}
    3cde:	b084      	sub	sp, #16
    3ce0:	af00      	add	r7, sp, #0
    3ce2:	6078      	str	r0, [r7, #4]
    portBASE_TYPE pxDestination;
    while(1)
    {
        // waiting for events created by tick hook or S-Servant
        xSemaphoreTake( xBinarySemaphore[0], portMAX_DELAY );
    3ce4:	f241 1320 	movw	r3, #4384	; 0x1120
    3ce8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cec:	681b      	ldr	r3, [r3, #0]
    3cee:	4618      	mov	r0, r3
    3cf0:	2100      	movs	r1, #0
    3cf2:	f04f 32ff 	mov.w	r2, #4294967295
    3cf6:	2300      	movs	r3, #0
    3cf8:	f000 fcb8 	bl	466c <xQueueGenericReceive>
        vPrintString("Actuator\n\r");
    3cfc:	f648 308c 	movw	r0, #35724	; 0x8b8c
    3d00:	f2c0 0001 	movt	r0, #1
    3d04:	f013 fcf6 	bl	176f4 <vPrintString>

        // transit the events from events pool to nonexecutable event list
        // Copy one event to multiple when communication mode is 1 to N
        vEventScatter();
    3d08:	f7ff f92c 	bl	2f64 <vEventGenericScatter>

        // transit the events from nonexecutable event list to executable event list
        vEventTransit();
    3d0c:	f7ff f8d8 	bl	2ec0 <vEventGenericTransit>
 
        // reduce multiple event for destination to one when communication mode is N to 1,
        // and transit the event from executable event pool to executable event list
        vEventReduce(); 
    3d10:	f7ff f9ac 	bl	306c <vEventGenericReduce>

        // serialize the timestamp of simulataneous events,
        // and transit the ready events to ready list
        // return the pxDestination of the first ready event in ready list
        pxDestination = xEventSerialize(); 
    3d14:	f7ff fb5e 	bl	33d4 <xEventGenericSerialize>
    3d18:	60f8      	str	r0, [r7, #12]

        switch(xContexts[pxDestination].xType)
    3d1a:	f240 62d8 	movw	r2, #1752	; 0x6d8
    3d1e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3d22:	68f9      	ldr	r1, [r7, #12]
    3d24:	460b      	mov	r3, r1
    3d26:	00db      	lsls	r3, r3, #3
    3d28:	1a5b      	subs	r3, r3, r1
    3d2a:	00db      	lsls	r3, r3, #3
    3d2c:	4413      	add	r3, r2
    3d2e:	3304      	adds	r3, #4
    3d30:	681b      	ldr	r3, [r3, #0]
    3d32:	2b02      	cmp	r3, #2
    3d34:	d010      	beq.n	3d58 <vR_Servant+0x7c>
    3d36:	2b03      	cmp	r3, #3
    3d38:	d01a      	beq.n	3d70 <vR_Servant+0x94>
    3d3a:	2b01      	cmp	r3, #1
    3d3c:	d000      	beq.n	3d40 <vR_Servant+0x64>
                break;
            case 3:
                xSemaphoreGive( xBinarySemaphore[3] );
                break;
            default:
                break;
    3d3e:	e023      	b.n	3d88 <vR_Servant+0xac>
        pxDestination = xEventSerialize(); 

        switch(xContexts[pxDestination].xType)
        {
            case 1:
                xSemaphoreGive( xBinarySemaphore[1] );
    3d40:	f241 1320 	movw	r3, #4384	; 0x1120
    3d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d48:	685b      	ldr	r3, [r3, #4]
    3d4a:	4618      	mov	r0, r3
    3d4c:	2100      	movs	r1, #0
    3d4e:	2200      	movs	r2, #0
    3d50:	2300      	movs	r3, #0
    3d52:	f000 fbc5 	bl	44e0 <xQueueGenericSend>
                break;
    3d56:	e017      	b.n	3d88 <vR_Servant+0xac>
            case 2:
                xSemaphoreGive( xBinarySemaphore[2] );
    3d58:	f241 1320 	movw	r3, #4384	; 0x1120
    3d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d60:	689b      	ldr	r3, [r3, #8]
    3d62:	4618      	mov	r0, r3
    3d64:	2100      	movs	r1, #0
    3d66:	2200      	movs	r2, #0
    3d68:	2300      	movs	r3, #0
    3d6a:	f000 fbb9 	bl	44e0 <xQueueGenericSend>
                break;
    3d6e:	e00b      	b.n	3d88 <vR_Servant+0xac>
            case 3:
                xSemaphoreGive( xBinarySemaphore[3] );
    3d70:	f241 1320 	movw	r3, #4384	; 0x1120
    3d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d78:	68db      	ldr	r3, [r3, #12]
    3d7a:	4618      	mov	r0, r3
    3d7c:	2100      	movs	r1, #0
    3d7e:	2200      	movs	r2, #0
    3d80:	2300      	movs	r3, #0
    3d82:	f000 fbad 	bl	44e0 <xQueueGenericSend>
                break;
    3d86:	bf00      	nop
            default:
                break;
                // no event available 
        }
    }
    3d88:	e7ac      	b.n	3ce4 <vR_Servant+0x8>
    3d8a:	bf00      	nop

00003d8c <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
    3d8c:	b480      	push	{r7}
    3d8e:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
    3d90:	f242 032f 	movw	r3, #8239	; 0x202f
    3d94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d98:	2200      	movs	r2, #0
    3d9a:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
    3d9c:	f242 032e 	movw	r3, #8238	; 0x202e
    3da0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3da4:	2201      	movs	r2, #1
    3da6:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
    3da8:	f242 0325 	movw	r3, #8229	; 0x2025
    3dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3db0:	2207      	movs	r2, #7
    3db2:	701a      	strb	r2, [r3, #0]
}
    3db4:	46bd      	mov	sp, r7
    3db6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dba:	4770      	bx	lr

00003dbc <PapabenchInit>:
extern void ir_init();
extern void estimator_init();
extern void fbw_init();

void PapabenchInit()
{
    3dbc:	b580      	push	{r7, lr}
    3dbe:	af00      	add	r7, sp, #0
    timer_init();
    3dc0:	f7ff ffe4 	bl	3d8c <timer_init>
    modem_init();
    3dc4:	f00d f9a4 	bl	11110 <modem_init>
    adc_init();
    3dc8:	f00d fcee 	bl	117a8 <adc_init>
#ifdef CTL_BRD_V1_1
    adc_buf_channel(ADC_CHANNEL_BAT, &buf_bat);
#endif
    spi_init();
    3dcc:	f00d fc60 	bl	11690 <spi_init>
    link_fbw_init();
    3dd0:	f00d fabc 	bl	1134c <link_fbw_init>
    gps_init();
    3dd4:	f00d fd98 	bl	11908 <gps_init>
    nav_init();
    3dd8:	f011 f890 	bl	14efc <nav_init>
    ir_init();
    3ddc:	f00e f83c 	bl	11e58 <ir_init>
    estimator_init();
    3de0:	f011 fa72 	bl	152c8 <estimator_init>
#ifdef PAPABENCH_SINGLE
    fbw_init();
#endif
}
    3de4:	bd80      	pop	{r7, pc}
    3de6:	bf00      	nop

00003de8 <s_0>:
#define SUNNYBEIKE 1
#ifdef SUNNYBEIKE

/*task0*/
void s_0(struct eventData * pxDataArray) 
{
    3de8:	b480      	push	{r7}
    3dea:	b083      	sub	sp, #12
    3dec:	af00      	add	r7, sp, #0
    3dee:	6078      	str	r0, [r7, #4]
    // do actuator
    // do sensor
}
    3df0:	370c      	adds	r7, #12
    3df2:	46bd      	mov	sp, r7
    3df4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3df8:	4770      	bx	lr
    3dfa:	bf00      	nop

00003dfc <s_1>:
void s_1(struct eventData * pxDataArray) 
{
    3dfc:	b580      	push	{r7, lr}
    3dfe:	b082      	sub	sp, #8
    3e00:	af00      	add	r7, sp, #0
    3e02:	6078      	str	r0, [r7, #4]
    last_radio_from_ppm(); // ppm.h
    3e04:	f012 fa3c 	bl	16280 <last_radio_from_ppm>
}
    3e08:	3708      	adds	r7, #8
    3e0a:	46bd      	mov	sp, r7
    3e0c:	bd80      	pop	{r7, pc}
    3e0e:	bf00      	nop

00003e10 <s_2>:
void s_2(struct eventData * pxDataArray) 
{
    3e10:	b480      	push	{r7}
    3e12:	b083      	sub	sp, #12
    3e14:	af00      	add	r7, sp, #0
    3e16:	6078      	str	r0, [r7, #4]
    //servo_set();  // servo.h, this function is used by multitask which in terms of multiuse of Servant. And this
                    // is not implemented now. So cancel.
}
    3e18:	370c      	adds	r7, #12
    3e1a:	46bd      	mov	sp, r7
    3e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e20:	4770      	bx	lr
    3e22:	bf00      	nop

00003e24 <s_3>:
void s_3(struct eventData * pxDataArray) 
{
    3e24:	b480      	push	{r7}
    3e26:	b083      	sub	sp, #12
    3e28:	af00      	add	r7, sp, #0
    3e2a:	6078      	str	r0, [r7, #4]
}
    3e2c:	370c      	adds	r7, #12
    3e2e:	46bd      	mov	sp, r7
    3e30:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e34:	4770      	bx	lr
    3e36:	bf00      	nop

00003e38 <s_4>:

/*task1*/
void s_4(struct eventData * pxDataArray) 
{
    3e38:	b480      	push	{r7}
    3e3a:	b083      	sub	sp, #12
    3e3c:	af00      	add	r7, sp, #0
    3e3e:	6078      	str	r0, [r7, #4]
}
    3e40:	370c      	adds	r7, #12
    3e42:	46bd      	mov	sp, r7
    3e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e48:	4770      	bx	lr
    3e4a:	bf00      	nop

00003e4c <s_5>:
void s_5(struct eventData * pxDataArray) 
{
    3e4c:	b580      	push	{r7, lr}
    3e4e:	b082      	sub	sp, #8
    3e50:	af00      	add	r7, sp, #0
    3e52:	6078      	str	r0, [r7, #4]
    to_autopilot_from_last_radio(); // main.c
    3e54:	f012 fdce 	bl	169f4 <to_autopilot_from_last_radio>
}
    3e58:	3708      	adds	r7, #8
    3e5a:	46bd      	mov	sp, r7
    3e5c:	bd80      	pop	{r7, pc}
    3e5e:	bf00      	nop

00003e60 <s_6>:
void s_6(struct eventData * pxDataArray) 
{
    3e60:	b580      	push	{r7, lr}
    3e62:	b082      	sub	sp, #8
    3e64:	af00      	add	r7, sp, #0
    3e66:	6078      	str	r0, [r7, #4]
    spi_reset(); // spi_fbw.h
    3e68:	f012 fd02 	bl	16870 <spi_reset>
}
    3e6c:	3708      	adds	r7, #8
    3e6e:	46bd      	mov	sp, r7
    3e70:	bd80      	pop	{r7, pc}
    3e72:	bf00      	nop

00003e74 <s_7>:
void s_7(struct eventData * pxDataArray) 
{
    3e74:	b480      	push	{r7}
    3e76:	b083      	sub	sp, #12
    3e78:	af00      	add	r7, sp, #0
    3e7a:	6078      	str	r0, [r7, #4]
}
    3e7c:	370c      	adds	r7, #12
    3e7e:	46bd      	mov	sp, r7
    3e80:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e84:	4770      	bx	lr
    3e86:	bf00      	nop

00003e88 <s_8>:

/*task 2*/ 
void s_8(struct eventData * pxDataArray) 
{
    3e88:	b480      	push	{r7}
    3e8a:	b083      	sub	sp, #12
    3e8c:	af00      	add	r7, sp, #0
    3e8e:	6078      	str	r0, [r7, #4]
}
    3e90:	370c      	adds	r7, #12
    3e92:	46bd      	mov	sp, r7
    3e94:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e98:	4770      	bx	lr
    3e9a:	bf00      	nop

00003e9c <s_9>:
void s_9(struct eventData * pxDataArray) 
{
    3e9c:	b580      	push	{r7, lr}
    3e9e:	b082      	sub	sp, #8
    3ea0:	af00      	add	r7, sp, #0
    3ea2:	6078      	str	r0, [r7, #4]
    check_mega128_values_task(); // main.c
    3ea4:	f012 ff4a 	bl	16d3c <check_mega128_values_task>
}
    3ea8:	3708      	adds	r7, #8
    3eaa:	46bd      	mov	sp, r7
    3eac:	bd80      	pop	{r7, pc}
    3eae:	bf00      	nop

00003eb0 <s_10>:
void s_10(struct eventData * pxDataArray) 
{
    3eb0:	b480      	push	{r7}
    3eb2:	b083      	sub	sp, #12
    3eb4:	af00      	add	r7, sp, #0
    3eb6:	6078      	str	r0, [r7, #4]
}
    3eb8:	370c      	adds	r7, #12
    3eba:	46bd      	mov	sp, r7
    3ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ec0:	4770      	bx	lr
    3ec2:	bf00      	nop

00003ec4 <s_11>:

/*task 3, servant 8, 9*/ 
void s_11(struct eventData * pxDataArray) 
{
    3ec4:	b480      	push	{r7}
    3ec6:	b083      	sub	sp, #12
    3ec8:	af00      	add	r7, sp, #0
    3eca:	6078      	str	r0, [r7, #4]
}
    3ecc:	370c      	adds	r7, #12
    3ece:	46bd      	mov	sp, r7
    3ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ed4:	4770      	bx	lr
    3ed6:	bf00      	nop

00003ed8 <s_12>:
void s_12(struct eventData * pxDataArray) 
{
    3ed8:	b580      	push	{r7, lr}
    3eda:	b082      	sub	sp, #8
    3edc:	af00      	add	r7, sp, #0
    3ede:	6078      	str	r0, [r7, #4]
    servo_transmit(); //servo.h
    3ee0:	f013 f820 	bl	16f24 <servo_transmit>
}
    3ee4:	3708      	adds	r7, #8
    3ee6:	46bd      	mov	sp, r7
    3ee8:	bd80      	pop	{r7, pc}
    3eea:	bf00      	nop

00003eec <s_13>:
void s_13(struct eventData * pxDataArray) 
{
    3eec:	b480      	push	{r7}
    3eee:	b083      	sub	sp, #12
    3ef0:	af00      	add	r7, sp, #0
    3ef2:	6078      	str	r0, [r7, #4]
}
    3ef4:	370c      	adds	r7, #12
    3ef6:	46bd      	mov	sp, r7
    3ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3efc:	4770      	bx	lr
    3efe:	bf00      	nop

00003f00 <s_14>:

/*task 4, servant 10, 11*/
void s_14(struct eventData * pxDataArray) 
{
    3f00:	b480      	push	{r7}
    3f02:	b083      	sub	sp, #12
    3f04:	af00      	add	r7, sp, #0
    3f06:	6078      	str	r0, [r7, #4]
}
    3f08:	370c      	adds	r7, #12
    3f0a:	46bd      	mov	sp, r7
    3f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f10:	4770      	bx	lr
    3f12:	bf00      	nop

00003f14 <s_15>:
void s_15(struct eventData * pxDataArray) 
{
    3f14:	b580      	push	{r7, lr}
    3f16:	b082      	sub	sp, #8
    3f18:	af00      	add	r7, sp, #0
    3f1a:	6078      	str	r0, [r7, #4]
    check_failsafe_task(); // main.c
    3f1c:	f012 fee8 	bl	16cf0 <check_failsafe_task>
}
    3f20:	3708      	adds	r7, #8
    3f22:	46bd      	mov	sp, r7
    3f24:	bd80      	pop	{r7, pc}
    3f26:	bf00      	nop

00003f28 <s_16>:
void s_16(struct eventData * pxDataArray) 
{
    3f28:	b480      	push	{r7}
    3f2a:	b083      	sub	sp, #12
    3f2c:	af00      	add	r7, sp, #0
    3f2e:	6078      	str	r0, [r7, #4]
}
    3f30:	370c      	adds	r7, #12
    3f32:	46bd      	mov	sp, r7
    3f34:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f38:	4770      	bx	lr
    3f3a:	bf00      	nop

00003f3c <s_17>:

/*task 5, servant 12, 13, 14*/
void s_17(struct eventData * pxDataArray) 
{
    3f3c:	b480      	push	{r7}
    3f3e:	b083      	sub	sp, #12
    3f40:	af00      	add	r7, sp, #0
    3f42:	6078      	str	r0, [r7, #4]
}
    3f44:	370c      	adds	r7, #12
    3f46:	46bd      	mov	sp, r7
    3f48:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f4c:	4770      	bx	lr
    3f4e:	bf00      	nop

00003f50 <s_18>:
void s_18(struct eventData * pxDataArray) 
{
    3f50:	b580      	push	{r7, lr}
    3f52:	b082      	sub	sp, #8
    3f54:	af00      	add	r7, sp, #0
    3f56:	6078      	str	r0, [r7, #4]
     //inflight_calib(pdTRUE); // inflight_calib.h
     //inflight_calib(pdTRUE); // main_auto.c , we transfer this function into main.c because of bugs if not 
     radio_control_task();
    3f58:	f009 f91c 	bl	d194 <radio_control_task>
}
    3f5c:	3708      	adds	r7, #8
    3f5e:	46bd      	mov	sp, r7
    3f60:	bd80      	pop	{r7, pc}
    3f62:	bf00      	nop

00003f64 <s_19>:
void s_19(struct eventData * pxDataArray) 
{
    3f64:	b580      	push	{r7, lr}
    3f66:	b082      	sub	sp, #8
    3f68:	af00      	add	r7, sp, #0
    3f6a:	6078      	str	r0, [r7, #4]
    ir_gain_calib(); //infrared.h
    3f6c:	f00d ffcc 	bl	11f08 <ir_gain_calib>
}
    3f70:	3708      	adds	r7, #8
    3f72:	46bd      	mov	sp, r7
    3f74:	bd80      	pop	{r7, pc}
    3f76:	bf00      	nop

00003f78 <s_20>:
void s_20(struct eventData * pxDataArray) 
{
    3f78:	b480      	push	{r7}
    3f7a:	b083      	sub	sp, #12
    3f7c:	af00      	add	r7, sp, #0
    3f7e:	6078      	str	r0, [r7, #4]
}
    3f80:	370c      	adds	r7, #12
    3f82:	46bd      	mov	sp, r7
    3f84:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f88:	4770      	bx	lr
    3f8a:	bf00      	nop

00003f8c <s_21>:

/*task 6, servant 15,16,17,18*/ 
void s_21(struct eventData * pxDataArray) 
{
    3f8c:	b480      	push	{r7}
    3f8e:	b083      	sub	sp, #12
    3f90:	af00      	add	r7, sp, #0
    3f92:	6078      	str	r0, [r7, #4]
}
    3f94:	370c      	adds	r7, #12
    3f96:	46bd      	mov	sp, r7
    3f98:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f9c:	4770      	bx	lr
    3f9e:	bf00      	nop

00003fa0 <s_22>:
void s_22(struct eventData * pxDataArray) 
{
    3fa0:	b580      	push	{r7, lr}
    3fa2:	b082      	sub	sp, #8
    3fa4:	af00      	add	r7, sp, #0
    3fa6:	6078      	str	r0, [r7, #4]
    ir_update(); // infrared.h
    3fa8:	f00d ff70 	bl	11e8c <ir_update>
}
    3fac:	3708      	adds	r7, #8
    3fae:	46bd      	mov	sp, r7
    3fb0:	bd80      	pop	{r7, pc}
    3fb2:	bf00      	nop

00003fb4 <s_23>:
void s_23(struct eventData * pxDataArray) 
{
    3fb4:	b580      	push	{r7, lr}
    3fb6:	b082      	sub	sp, #8
    3fb8:	af00      	add	r7, sp, #0
    3fba:	6078      	str	r0, [r7, #4]
    //servo_transmit();  // servo.h
    estimator_update_state_infrared(); //estimator.h
    3fbc:	f011 f9ee 	bl	1539c <estimator_update_state_infrared>
}
    3fc0:	3708      	adds	r7, #8
    3fc2:	46bd      	mov	sp, r7
    3fc4:	bd80      	pop	{r7, pc}
    3fc6:	bf00      	nop

00003fc8 <s_24>:
void s_24(struct eventData * pxDataArray) 
{
    3fc8:	b580      	push	{r7, lr}
    3fca:	b082      	sub	sp, #8
    3fcc:	af00      	add	r7, sp, #0
    3fce:	6078      	str	r0, [r7, #4]
    roll_pitch_pid_run(); // pid.h
    3fd0:	f00d ffca 	bl	11f68 <roll_pitch_pid_run>
}
    3fd4:	3708      	adds	r7, #8
    3fd6:	46bd      	mov	sp, r7
    3fd8:	bd80      	pop	{r7, pc}
    3fda:	bf00      	nop

00003fdc <s_25>:
void s_25(struct eventData * pxDataArray) 
{
    3fdc:	b480      	push	{r7}
    3fde:	b083      	sub	sp, #12
    3fe0:	af00      	add	r7, sp, #0
    3fe2:	6078      	str	r0, [r7, #4]
}
    3fe4:	370c      	adds	r7, #12
    3fe6:	46bd      	mov	sp, r7
    3fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fec:	4770      	bx	lr
    3fee:	bf00      	nop

00003ff0 <s_26>:

/*task 7, servant 19, 20*/
void s_26(struct eventData * pxDataArray) 
{
    3ff0:	b480      	push	{r7}
    3ff2:	b083      	sub	sp, #12
    3ff4:	af00      	add	r7, sp, #0
    3ff6:	6078      	str	r0, [r7, #4]
}
    3ff8:	370c      	adds	r7, #12
    3ffa:	46bd      	mov	sp, r7
    3ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4000:	4770      	bx	lr
    4002:	bf00      	nop

00004004 <s_27>:
void s_27(struct eventData * pxDataArray) 
{
    4004:	b580      	push	{r7, lr}
    4006:	b082      	sub	sp, #8
    4008:	af00      	add	r7, sp, #0
    400a:	6078      	str	r0, [r7, #4]
    link_fbw_send(); //link_fbw.h
    400c:	f00d f9b0 	bl	11370 <link_fbw_send>
}
    4010:	3708      	adds	r7, #8
    4012:	46bd      	mov	sp, r7
    4014:	bd80      	pop	{r7, pc}
    4016:	bf00      	nop

00004018 <s_28>:
void s_28(struct eventData * pxDataArray) 
{}
    4018:	b480      	push	{r7}
    401a:	b083      	sub	sp, #12
    401c:	af00      	add	r7, sp, #0
    401e:	6078      	str	r0, [r7, #4]
    4020:	370c      	adds	r7, #12
    4022:	46bd      	mov	sp, r7
    4024:	f85d 7b04 	ldr.w	r7, [sp], #4
    4028:	4770      	bx	lr
    402a:	bf00      	nop

0000402c <s_29>:

/*task 8, sevrvant 21,22,23*/
void s_29(struct eventData * pxDataArray) 
{
    402c:	b480      	push	{r7}
    402e:	b083      	sub	sp, #12
    4030:	af00      	add	r7, sp, #0
    4032:	6078      	str	r0, [r7, #4]
}
    4034:	370c      	adds	r7, #12
    4036:	46bd      	mov	sp, r7
    4038:	f85d 7b04 	ldr.w	r7, [sp], #4
    403c:	4770      	bx	lr
    403e:	bf00      	nop

00004040 <s_30>:
void s_30(struct eventData * pxDataArray) 
{
    4040:	b580      	push	{r7, lr}
    4042:	b082      	sub	sp, #8
    4044:	af00      	add	r7, sp, #0
    4046:	6078      	str	r0, [r7, #4]
    parse_gps_msg(); //gps.h
    4048:	f00d fc6a 	bl	11920 <parse_gps_msg>
}
    404c:	3708      	adds	r7, #8
    404e:	46bd      	mov	sp, r7
    4050:	bd80      	pop	{r7, pc}
    4052:	bf00      	nop

00004054 <s_31>:
void s_31(struct eventData * pxDataArray) 
{
    4054:	b580      	push	{r7, lr}
    4056:	b082      	sub	sp, #8
    4058:	af00      	add	r7, sp, #0
    405a:	6078      	str	r0, [r7, #4]
    //use_gps_pos(); // autopilot.h  is not implemeted.
    send_gps_pos();
    405c:	f00a fe88 	bl	ed70 <send_gps_pos>
    send_radIR();
    4060:	f00c f84c 	bl	100fc <send_radIR>
    send_takeOff();
    4064:	f00c fe44 	bl	10cf0 <send_takeOff>
}
    4068:	3708      	adds	r7, #8
    406a:	46bd      	mov	sp, r7
    406c:	bd80      	pop	{r7, pc}
    406e:	bf00      	nop

00004070 <s_32>:
void s_32(struct eventData * pxDataArray) 
{}
    4070:	b480      	push	{r7}
    4072:	b083      	sub	sp, #12
    4074:	af00      	add	r7, sp, #0
    4076:	6078      	str	r0, [r7, #4]
    4078:	370c      	adds	r7, #12
    407a:	46bd      	mov	sp, r7
    407c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4080:	4770      	bx	lr
    4082:	bf00      	nop

00004084 <s_33>:

/*task 9, servant 24, 25, 26, 27*/
void s_33(struct eventData * pxDataArray) 
{
    4084:	b480      	push	{r7}
    4086:	b083      	sub	sp, #12
    4088:	af00      	add	r7, sp, #0
    408a:	6078      	str	r0, [r7, #4]
}
    408c:	370c      	adds	r7, #12
    408e:	46bd      	mov	sp, r7
    4090:	f85d 7b04 	ldr.w	r7, [sp], #4
    4094:	4770      	bx	lr
    4096:	bf00      	nop

00004098 <s_34>:
void s_34(struct eventData * pxDataArray) 
{
    4098:	b580      	push	{r7, lr}
    409a:	b082      	sub	sp, #8
    409c:	af00      	add	r7, sp, #0
    409e:	6078      	str	r0, [r7, #4]
    nav_home(); // nav.h
    40a0:	f010 fefe 	bl	14ea0 <nav_home>
}
    40a4:	3708      	adds	r7, #8
    40a6:	46bd      	mov	sp, r7
    40a8:	bd80      	pop	{r7, pc}
    40aa:	bf00      	nop

000040ac <s_35>:
void s_35(struct eventData * pxDataArray) 
{
    40ac:	b580      	push	{r7, lr}
    40ae:	b082      	sub	sp, #8
    40b0:	af00      	add	r7, sp, #0
    40b2:	6078      	str	r0, [r7, #4]
    nav_update(); // nav.h
    40b4:	f010 ff1a 	bl	14eec <nav_update>
}
    40b8:	3708      	adds	r7, #8
    40ba:	46bd      	mov	sp, r7
    40bc:	bd80      	pop	{r7, pc}
    40be:	bf00      	nop

000040c0 <s_36>:
void s_36(struct eventData * pxDataArray) 
{
    40c0:	b580      	push	{r7, lr}
    40c2:	b082      	sub	sp, #8
    40c4:	af00      	add	r7, sp, #0
    40c6:	6078      	str	r0, [r7, #4]
    course_pid_run(); // pid.h
    40c8:	f00e f83a 	bl	12140 <course_pid_run>
}
    40cc:	3708      	adds	r7, #8
    40ce:	46bd      	mov	sp, r7
    40d0:	bd80      	pop	{r7, pc}
    40d2:	bf00      	nop

000040d4 <s_37>:
void s_37(struct eventData * pxDataArray) 
{}
    40d4:	b480      	push	{r7}
    40d6:	b083      	sub	sp, #12
    40d8:	af00      	add	r7, sp, #0
    40da:	6078      	str	r0, [r7, #4]
    40dc:	370c      	adds	r7, #12
    40de:	46bd      	mov	sp, r7
    40e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    40e4:	4770      	bx	lr
    40e6:	bf00      	nop

000040e8 <s_38>:

/*task 10, servant 28, 29*/
void s_38(struct eventData * pxDataArray) 
{
    40e8:	b480      	push	{r7}
    40ea:	b083      	sub	sp, #12
    40ec:	af00      	add	r7, sp, #0
    40ee:	6078      	str	r0, [r7, #4]
}
    40f0:	370c      	adds	r7, #12
    40f2:	46bd      	mov	sp, r7
    40f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    40f8:	4770      	bx	lr
    40fa:	bf00      	nop

000040fc <s_39>:
void s_39(struct eventData * pxDataArray) 
{
    40fc:	b580      	push	{r7, lr}
    40fe:	b082      	sub	sp, #8
    4100:	af00      	add	r7, sp, #0
    4102:	6078      	str	r0, [r7, #4]
    altitude_pid_run(); // pid.h
    4104:	f00e faa4 	bl	12650 <altitude_pid_run>
}
    4108:	3708      	adds	r7, #8
    410a:	46bd      	mov	sp, r7
    410c:	bd80      	pop	{r7, pc}
    410e:	bf00      	nop

00004110 <s_40>:
void s_40(struct eventData * pxDataArray) 
{}
    4110:	b480      	push	{r7}
    4112:	b083      	sub	sp, #12
    4114:	af00      	add	r7, sp, #0
    4116:	6078      	str	r0, [r7, #4]
    4118:	370c      	adds	r7, #12
    411a:	46bd      	mov	sp, r7
    411c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4120:	4770      	bx	lr
    4122:	bf00      	nop

00004124 <s_41>:

/*task 11, servant 30, 31*/
void s_41(struct eventData * pxDataArray) 
{
    4124:	b480      	push	{r7}
    4126:	b083      	sub	sp, #12
    4128:	af00      	add	r7, sp, #0
    412a:	6078      	str	r0, [r7, #4]
}
    412c:	370c      	adds	r7, #12
    412e:	46bd      	mov	sp, r7
    4130:	f85d 7b04 	ldr.w	r7, [sp], #4
    4134:	4770      	bx	lr
    4136:	bf00      	nop

00004138 <s_42>:
void s_42(struct eventData * pxDataArray) 
{
    4138:	b580      	push	{r7, lr}
    413a:	b082      	sub	sp, #8
    413c:	af00      	add	r7, sp, #0
    413e:	6078      	str	r0, [r7, #4]
    climb_pid_run(); // pid.h
    4140:	f00e f8b6 	bl	122b0 <climb_pid_run>
}
    4144:	3708      	adds	r7, #8
    4146:	46bd      	mov	sp, r7
    4148:	bd80      	pop	{r7, pc}
    414a:	bf00      	nop

0000414c <s_43>:
void s_43(struct eventData * pxDataArray) 
{}
    414c:	b480      	push	{r7}
    414e:	b083      	sub	sp, #12
    4150:	af00      	add	r7, sp, #0
    4152:	6078      	str	r0, [r7, #4]
    4154:	370c      	adds	r7, #12
    4156:	46bd      	mov	sp, r7
    4158:	f85d 7b04 	ldr.w	r7, [sp], #4
    415c:	4770      	bx	lr
    415e:	bf00      	nop

00004160 <s_44>:

/*task 12, servant 32, 33*/
void s_44(struct eventData * pxDataArray) 
{
    4160:	b480      	push	{r7}
    4162:	b083      	sub	sp, #12
    4164:	af00      	add	r7, sp, #0
    4166:	6078      	str	r0, [r7, #4]
}
    4168:	370c      	adds	r7, #12
    416a:	46bd      	mov	sp, r7
    416c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4170:	4770      	bx	lr
    4172:	bf00      	nop

00004174 <s_45>:
void s_45(struct eventData * pxDataArray) 
{
    4174:	b580      	push	{r7, lr}
    4176:	b082      	sub	sp, #8
    4178:	af00      	add	r7, sp, #0
    417a:	6078      	str	r0, [r7, #4]
    // main.c
    send_boot();
    417c:	f003 fa82 	bl	7684 <send_boot>
    send_attitude();
    4180:	f004 fa58 	bl	8634 <send_attitude>
    send_adc();
    4184:	f004 ff52 	bl	902c <send_adc>
    send_settings();
    4188:	f005 f9e0 	bl	954c <send_settings>
    send_desired();
    418c:	f005 fdea 	bl	9d64 <send_desired>
    send_bat();
    4190:	f006 fd20 	bl	abd4 <send_bat>
    send_climb();
    4194:	f007 f8dc 	bl	b350 <send_climb>
    send_mode();
    4198:	f007 fe54 	bl	be44 <send_mode>
    send_debug();
    419c:	f008 f92e 	bl	c3fc <send_debug>
    send_nav_ref();
    41a0:	f008 fc0a 	bl	c9b8 <send_nav_ref>
}
    41a4:	3708      	adds	r7, #8
    41a6:	46bd      	mov	sp, r7
    41a8:	bd80      	pop	{r7, pc}
    41aa:	bf00      	nop

000041ac <s_46>:
void s_46(struct eventData * pxDataArray) 
{}
    41ac:	b480      	push	{r7}
    41ae:	b083      	sub	sp, #12
    41b0:	af00      	add	r7, sp, #0
    41b2:	6078      	str	r0, [r7, #4]
    41b4:	370c      	adds	r7, #12
    41b6:	46bd      	mov	sp, r7
    41b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    41bc:	4770      	bx	lr
    41be:	bf00      	nop

000041c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    41c0:	b480      	push	{r7}
    41c2:	b083      	sub	sp, #12
    41c4:	af00      	add	r7, sp, #0
    41c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    41c8:	687b      	ldr	r3, [r7, #4]
    41ca:	f103 0208 	add.w	r2, r3, #8
    41ce:	687b      	ldr	r3, [r7, #4]
    41d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    41d2:	687b      	ldr	r3, [r7, #4]
    41d4:	f04f 32ff 	mov.w	r2, #4294967295
    41d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    41da:	687b      	ldr	r3, [r7, #4]
    41dc:	f103 0208 	add.w	r2, r3, #8
    41e0:	687b      	ldr	r3, [r7, #4]
    41e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    41e4:	687b      	ldr	r3, [r7, #4]
    41e6:	f103 0208 	add.w	r2, r3, #8
    41ea:	687b      	ldr	r3, [r7, #4]
    41ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    41ee:	687b      	ldr	r3, [r7, #4]
    41f0:	2200      	movs	r2, #0
    41f2:	601a      	str	r2, [r3, #0]
}
    41f4:	370c      	adds	r7, #12
    41f6:	46bd      	mov	sp, r7
    41f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    41fc:	4770      	bx	lr
    41fe:	bf00      	nop

00004200 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    4200:	b480      	push	{r7}
    4202:	b083      	sub	sp, #12
    4204:	af00      	add	r7, sp, #0
    4206:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    4208:	687b      	ldr	r3, [r7, #4]
    420a:	2200      	movs	r2, #0
    420c:	611a      	str	r2, [r3, #16]
}
    420e:	370c      	adds	r7, #12
    4210:	46bd      	mov	sp, r7
    4212:	f85d 7b04 	ldr.w	r7, [sp], #4
    4216:	4770      	bx	lr

00004218 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    4218:	b480      	push	{r7}
    421a:	b085      	sub	sp, #20
    421c:	af00      	add	r7, sp, #0
    421e:	6078      	str	r0, [r7, #4]
    4220:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    4222:	687b      	ldr	r3, [r7, #4]
    4224:	685b      	ldr	r3, [r3, #4]
    4226:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    4228:	68fb      	ldr	r3, [r7, #12]
    422a:	685a      	ldr	r2, [r3, #4]
    422c:	683b      	ldr	r3, [r7, #0]
    422e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    4230:	687b      	ldr	r3, [r7, #4]
    4232:	685a      	ldr	r2, [r3, #4]
    4234:	683b      	ldr	r3, [r7, #0]
    4236:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    4238:	68fb      	ldr	r3, [r7, #12]
    423a:	685b      	ldr	r3, [r3, #4]
    423c:	683a      	ldr	r2, [r7, #0]
    423e:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    4240:	68fb      	ldr	r3, [r7, #12]
    4242:	683a      	ldr	r2, [r7, #0]
    4244:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    4246:	687b      	ldr	r3, [r7, #4]
    4248:	683a      	ldr	r2, [r7, #0]
    424a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    424c:	683b      	ldr	r3, [r7, #0]
    424e:	687a      	ldr	r2, [r7, #4]
    4250:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    4252:	687b      	ldr	r3, [r7, #4]
    4254:	681b      	ldr	r3, [r3, #0]
    4256:	1c5a      	adds	r2, r3, #1
    4258:	687b      	ldr	r3, [r7, #4]
    425a:	601a      	str	r2, [r3, #0]
}
    425c:	3714      	adds	r7, #20
    425e:	46bd      	mov	sp, r7
    4260:	f85d 7b04 	ldr.w	r7, [sp], #4
    4264:	4770      	bx	lr
    4266:	bf00      	nop

00004268 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    4268:	b480      	push	{r7}
    426a:	b085      	sub	sp, #20
    426c:	af00      	add	r7, sp, #0
    426e:	6078      	str	r0, [r7, #4]
    4270:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    4272:	683b      	ldr	r3, [r7, #0]
    4274:	681b      	ldr	r3, [r3, #0]
    4276:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    4278:	68bb      	ldr	r3, [r7, #8]
    427a:	f1b3 3fff 	cmp.w	r3, #4294967295
    427e:	d103      	bne.n	4288 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    4280:	687b      	ldr	r3, [r7, #4]
    4282:	691b      	ldr	r3, [r3, #16]
    4284:	60fb      	str	r3, [r7, #12]
    4286:	e00c      	b.n	42a2 <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    4288:	687b      	ldr	r3, [r7, #4]
    428a:	3308      	adds	r3, #8
    428c:	60fb      	str	r3, [r7, #12]
    428e:	e002      	b.n	4296 <vListInsert+0x2e>
    4290:	68fb      	ldr	r3, [r7, #12]
    4292:	685b      	ldr	r3, [r3, #4]
    4294:	60fb      	str	r3, [r7, #12]
    4296:	68fb      	ldr	r3, [r7, #12]
    4298:	685b      	ldr	r3, [r3, #4]
    429a:	681a      	ldr	r2, [r3, #0]
    429c:	68bb      	ldr	r3, [r7, #8]
    429e:	429a      	cmp	r2, r3
    42a0:	d9f6      	bls.n	4290 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    42a2:	68fb      	ldr	r3, [r7, #12]
    42a4:	685a      	ldr	r2, [r3, #4]
    42a6:	683b      	ldr	r3, [r7, #0]
    42a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    42aa:	683b      	ldr	r3, [r7, #0]
    42ac:	685b      	ldr	r3, [r3, #4]
    42ae:	683a      	ldr	r2, [r7, #0]
    42b0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    42b2:	683b      	ldr	r3, [r7, #0]
    42b4:	68fa      	ldr	r2, [r7, #12]
    42b6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    42b8:	68fb      	ldr	r3, [r7, #12]
    42ba:	683a      	ldr	r2, [r7, #0]
    42bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    42be:	683b      	ldr	r3, [r7, #0]
    42c0:	687a      	ldr	r2, [r7, #4]
    42c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    42c4:	687b      	ldr	r3, [r7, #4]
    42c6:	681b      	ldr	r3, [r3, #0]
    42c8:	1c5a      	adds	r2, r3, #1
    42ca:	687b      	ldr	r3, [r7, #4]
    42cc:	601a      	str	r2, [r3, #0]
}
    42ce:	3714      	adds	r7, #20
    42d0:	46bd      	mov	sp, r7
    42d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    42d6:	4770      	bx	lr

000042d8 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    42d8:	b480      	push	{r7}
    42da:	b085      	sub	sp, #20
    42dc:	af00      	add	r7, sp, #0
    42de:	6078      	str	r0, [r7, #4]
    xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    42e0:	687b      	ldr	r3, [r7, #4]
    42e2:	685b      	ldr	r3, [r3, #4]
    42e4:	687a      	ldr	r2, [r7, #4]
    42e6:	6892      	ldr	r2, [r2, #8]
    42e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    42ea:	687b      	ldr	r3, [r7, #4]
    42ec:	689b      	ldr	r3, [r3, #8]
    42ee:	687a      	ldr	r2, [r7, #4]
    42f0:	6852      	ldr	r2, [r2, #4]
    42f2:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    42f4:	687b      	ldr	r3, [r7, #4]
    42f6:	691b      	ldr	r3, [r3, #16]
    42f8:	60fb      	str	r3, [r7, #12]
	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    42fa:	68fb      	ldr	r3, [r7, #12]
    42fc:	685a      	ldr	r2, [r3, #4]
    42fe:	687b      	ldr	r3, [r7, #4]
    4300:	429a      	cmp	r2, r3
    4302:	d103      	bne.n	430c <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    4304:	687b      	ldr	r3, [r7, #4]
    4306:	689a      	ldr	r2, [r3, #8]
    4308:	68fb      	ldr	r3, [r7, #12]
    430a:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    430c:	687b      	ldr	r3, [r7, #4]
    430e:	2200      	movs	r2, #0
    4310:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
    4312:	68fb      	ldr	r3, [r7, #12]
    4314:	681b      	ldr	r3, [r3, #0]
    4316:	1e5a      	subs	r2, r3, #1
    4318:	68fb      	ldr	r3, [r7, #12]
    431a:	601a      	str	r2, [r3, #0]
}
    431c:	3714      	adds	r7, #20
    431e:	46bd      	mov	sp, r7
    4320:	f85d 7b04 	ldr.w	r7, [sp], #4
    4324:	4770      	bx	lr
    4326:	bf00      	nop

00004328 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    4328:	b580      	push	{r7, lr}
    432a:	b084      	sub	sp, #16
    432c:	af00      	add	r7, sp, #0
    432e:	6078      	str	r0, [r7, #4]
    4330:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    4332:	2301      	movs	r3, #1
    4334:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    4336:	683b      	ldr	r3, [r7, #0]
    4338:	2b01      	cmp	r3, #1
    433a:	d00b      	beq.n	4354 <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    433c:	687b      	ldr	r3, [r7, #4]
    433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4340:	2b00      	cmp	r3, #0
    4342:	d001      	beq.n	4348 <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    4344:	2300      	movs	r3, #0
    4346:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4348:	687b      	ldr	r3, [r7, #4]
    434a:	691b      	ldr	r3, [r3, #16]
    434c:	2b00      	cmp	r3, #0
    434e:	d001      	beq.n	4354 <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    4350:	2300      	movs	r3, #0
    4352:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    4354:	68fb      	ldr	r3, [r7, #12]
    4356:	2b01      	cmp	r3, #1
    4358:	d12f      	bne.n	43ba <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    435a:	687b      	ldr	r3, [r7, #4]
    435c:	681a      	ldr	r2, [r3, #0]
    435e:	687b      	ldr	r3, [r7, #4]
    4360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4362:	6879      	ldr	r1, [r7, #4]
    4364:	6c09      	ldr	r1, [r1, #64]	; 0x40
    4366:	fb01 f303 	mul.w	r3, r1, r3
    436a:	441a      	add	r2, r3
    436c:	687b      	ldr	r3, [r7, #4]
    436e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    4370:	687b      	ldr	r3, [r7, #4]
    4372:	2200      	movs	r2, #0
    4374:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    4376:	687b      	ldr	r3, [r7, #4]
    4378:	681a      	ldr	r2, [r3, #0]
    437a:	687b      	ldr	r3, [r7, #4]
    437c:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    437e:	687b      	ldr	r3, [r7, #4]
    4380:	681a      	ldr	r2, [r3, #0]
    4382:	687b      	ldr	r3, [r7, #4]
    4384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4386:	3b01      	subs	r3, #1
    4388:	6879      	ldr	r1, [r7, #4]
    438a:	6c09      	ldr	r1, [r1, #64]	; 0x40
    438c:	fb01 f303 	mul.w	r3, r1, r3
    4390:	441a      	add	r2, r3
    4392:	687b      	ldr	r3, [r7, #4]
    4394:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    4396:	687b      	ldr	r3, [r7, #4]
    4398:	f04f 32ff 	mov.w	r2, #4294967295
    439c:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    439e:	687b      	ldr	r3, [r7, #4]
    43a0:	f04f 32ff 	mov.w	r2, #4294967295
    43a4:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    43a6:	687b      	ldr	r3, [r7, #4]
    43a8:	3310      	adds	r3, #16
    43aa:	4618      	mov	r0, r3
    43ac:	f7ff ff08 	bl	41c0 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    43b0:	687b      	ldr	r3, [r7, #4]
    43b2:	3324      	adds	r3, #36	; 0x24
    43b4:	4618      	mov	r0, r3
    43b6:	f7ff ff03 	bl	41c0 <vListInitialise>
	}

	return xReturn;
    43ba:	68fb      	ldr	r3, [r7, #12]
}
    43bc:	4618      	mov	r0, r3
    43be:	3710      	adds	r7, #16
    43c0:	46bd      	mov	sp, r7
    43c2:	bd80      	pop	{r7, pc}

000043c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    43c4:	b580      	push	{r7, lr}
    43c6:	b088      	sub	sp, #32
    43c8:	af00      	add	r7, sp, #0
    43ca:	60f8      	str	r0, [r7, #12]
    43cc:	60b9      	str	r1, [r7, #8]
    43ce:	4613      	mov	r3, r2
    43d0:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    43d2:	2300      	movs	r3, #0
    43d4:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    43d6:	68fb      	ldr	r3, [r7, #12]
    43d8:	2b00      	cmp	r3, #0
    43da:	d026      	beq.n	442a <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    43dc:	204c      	movs	r0, #76	; 0x4c
    43de:	f001 fda7 	bl	5f30 <pvPortMalloc>
    43e2:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    43e4:	69bb      	ldr	r3, [r7, #24]
    43e6:	2b00      	cmp	r3, #0
    43e8:	d01f      	beq.n	442a <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    43ea:	68fb      	ldr	r3, [r7, #12]
    43ec:	68ba      	ldr	r2, [r7, #8]
    43ee:	fb02 f303 	mul.w	r3, r2, r3
    43f2:	3301      	adds	r3, #1
    43f4:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    43f6:	6978      	ldr	r0, [r7, #20]
    43f8:	f001 fd9a 	bl	5f30 <pvPortMalloc>
    43fc:	4602      	mov	r2, r0
    43fe:	69bb      	ldr	r3, [r7, #24]
    4400:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    4402:	69bb      	ldr	r3, [r7, #24]
    4404:	681b      	ldr	r3, [r3, #0]
    4406:	2b00      	cmp	r3, #0
    4408:	d00c      	beq.n	4424 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    440a:	69bb      	ldr	r3, [r7, #24]
    440c:	68fa      	ldr	r2, [r7, #12]
    440e:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    4410:	69bb      	ldr	r3, [r7, #24]
    4412:	68ba      	ldr	r2, [r7, #8]
    4414:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    4416:	69b8      	ldr	r0, [r7, #24]
    4418:	2101      	movs	r1, #1
    441a:	f7ff ff85 	bl	4328 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    441e:	69bb      	ldr	r3, [r7, #24]
    4420:	61fb      	str	r3, [r7, #28]
    4422:	e002      	b.n	442a <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    4424:	69b8      	ldr	r0, [r7, #24]
    4426:	f001 fe47 	bl	60b8 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    442a:	69fb      	ldr	r3, [r7, #28]
}
    442c:	4618      	mov	r0, r3
    442e:	3720      	adds	r7, #32
    4430:	46bd      	mov	sp, r7
    4432:	bd80      	pop	{r7, pc}

00004434 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    4434:	b580      	push	{r7, lr}
    4436:	b084      	sub	sp, #16
    4438:	af00      	add	r7, sp, #0
    443a:	4603      	mov	r3, r0
    443c:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    443e:	204c      	movs	r0, #76	; 0x4c
    4440:	f001 fd76 	bl	5f30 <pvPortMalloc>
    4444:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    4446:	68fb      	ldr	r3, [r7, #12]
    4448:	2b00      	cmp	r3, #0
    444a:	d02c      	beq.n	44a6 <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    444c:	68fb      	ldr	r3, [r7, #12]
    444e:	2200      	movs	r2, #0
    4450:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    4452:	68fb      	ldr	r3, [r7, #12]
    4454:	2200      	movs	r2, #0
    4456:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    4458:	68fb      	ldr	r3, [r7, #12]
    445a:	2200      	movs	r2, #0
    445c:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    445e:	68fb      	ldr	r3, [r7, #12]
    4460:	2200      	movs	r2, #0
    4462:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    4464:	68fb      	ldr	r3, [r7, #12]
    4466:	2200      	movs	r2, #0
    4468:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    446a:	68fb      	ldr	r3, [r7, #12]
    446c:	2201      	movs	r2, #1
    446e:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    4470:	68fb      	ldr	r3, [r7, #12]
    4472:	2200      	movs	r2, #0
    4474:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    4476:	68fb      	ldr	r3, [r7, #12]
    4478:	f04f 32ff 	mov.w	r2, #4294967295
    447c:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    447e:	68fb      	ldr	r3, [r7, #12]
    4480:	f04f 32ff 	mov.w	r2, #4294967295
    4484:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    4486:	68fb      	ldr	r3, [r7, #12]
    4488:	3310      	adds	r3, #16
    448a:	4618      	mov	r0, r3
    448c:	f7ff fe98 	bl	41c0 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    4490:	68fb      	ldr	r3, [r7, #12]
    4492:	3324      	adds	r3, #36	; 0x24
    4494:	4618      	mov	r0, r3
    4496:	f7ff fe93 	bl	41c0 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    449a:	68f8      	ldr	r0, [r7, #12]
    449c:	2100      	movs	r1, #0
    449e:	2200      	movs	r2, #0
    44a0:	2300      	movs	r3, #0
    44a2:	f000 f81d 	bl	44e0 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    44a6:	68fb      	ldr	r3, [r7, #12]
	}
    44a8:	4618      	mov	r0, r3
    44aa:	3710      	adds	r7, #16
    44ac:	46bd      	mov	sp, r7
    44ae:	bd80      	pop	{r7, pc}

000044b0 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    44b0:	b580      	push	{r7, lr}
    44b2:	b084      	sub	sp, #16
    44b4:	af00      	add	r7, sp, #0
    44b6:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    44b8:	f001 fcc0 	bl	5e3c <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    44bc:	687b      	ldr	r3, [r7, #4]
    44be:	681b      	ldr	r3, [r3, #0]
    44c0:	2b00      	cmp	r3, #0
    44c2:	d103      	bne.n	44cc <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    44c4:	687b      	ldr	r3, [r7, #4]
    44c6:	685b      	ldr	r3, [r3, #4]
    44c8:	60fb      	str	r3, [r7, #12]
    44ca:	e001      	b.n	44d0 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    44cc:	2300      	movs	r3, #0
    44ce:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    44d0:	f001 fcca 	bl	5e68 <vPortExitCritical>
		
		return pxReturn;
    44d4:	68fb      	ldr	r3, [r7, #12]
	}
    44d6:	4618      	mov	r0, r3
    44d8:	3710      	adds	r7, #16
    44da:	46bd      	mov	sp, r7
    44dc:	bd80      	pop	{r7, pc}
    44de:	bf00      	nop

000044e0 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    44e0:	b580      	push	{r7, lr}
    44e2:	b088      	sub	sp, #32
    44e4:	af00      	add	r7, sp, #0
    44e6:	60f8      	str	r0, [r7, #12]
    44e8:	60b9      	str	r1, [r7, #8]
    44ea:	607a      	str	r2, [r7, #4]
    44ec:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    44ee:	2300      	movs	r3, #0
    44f0:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    44f2:	f001 fca3 	bl	5e3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    44f6:	68fb      	ldr	r3, [r7, #12]
    44f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    44fa:	68fb      	ldr	r3, [r7, #12]
    44fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    44fe:	429a      	cmp	r2, r3
    4500:	d216      	bcs.n	4530 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    4502:	68f8      	ldr	r0, [r7, #12]
    4504:	68b9      	ldr	r1, [r7, #8]
    4506:	683a      	ldr	r2, [r7, #0]
    4508:	f000 f9d6 	bl	48b8 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    450c:	68fb      	ldr	r3, [r7, #12]
    450e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4510:	2b00      	cmp	r3, #0
    4512:	d009      	beq.n	4528 <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    4514:	68fb      	ldr	r3, [r7, #12]
    4516:	3324      	adds	r3, #36	; 0x24
    4518:	4618      	mov	r0, r3
    451a:	f001 f905 	bl	5728 <xTaskRemoveFromEventList>
    451e:	4603      	mov	r3, r0
    4520:	2b01      	cmp	r3, #1
    4522:	d101      	bne.n	4528 <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    4524:	f001 fc7c 	bl	5e20 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    4528:	f001 fc9e 	bl	5e68 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    452c:	2301      	movs	r3, #1
    452e:	e059      	b.n	45e4 <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    4530:	687b      	ldr	r3, [r7, #4]
    4532:	2b00      	cmp	r3, #0
    4534:	d103      	bne.n	453e <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    4536:	f001 fc97 	bl	5e68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    453a:	2300      	movs	r3, #0
    453c:	e052      	b.n	45e4 <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    453e:	69fb      	ldr	r3, [r7, #28]
    4540:	2b00      	cmp	r3, #0
    4542:	d106      	bne.n	4552 <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    4544:	f107 0314 	add.w	r3, r7, #20
    4548:	4618      	mov	r0, r3
    454a:	f001 f945 	bl	57d8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    454e:	2301      	movs	r3, #1
    4550:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    4552:	f001 fc89 	bl	5e68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4556:	f000 fe93 	bl	5280 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    455a:	f001 fc6f 	bl	5e3c <vPortEnterCritical>
    455e:	68fb      	ldr	r3, [r7, #12]
    4560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4562:	f1b3 3fff 	cmp.w	r3, #4294967295
    4566:	d102      	bne.n	456e <xQueueGenericSend+0x8e>
    4568:	68fb      	ldr	r3, [r7, #12]
    456a:	2200      	movs	r2, #0
    456c:	645a      	str	r2, [r3, #68]	; 0x44
    456e:	68fb      	ldr	r3, [r7, #12]
    4570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4572:	f1b3 3fff 	cmp.w	r3, #4294967295
    4576:	d102      	bne.n	457e <xQueueGenericSend+0x9e>
    4578:	68fb      	ldr	r3, [r7, #12]
    457a:	2200      	movs	r2, #0
    457c:	649a      	str	r2, [r3, #72]	; 0x48
    457e:	f001 fc73 	bl	5e68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4582:	f107 0214 	add.w	r2, r7, #20
    4586:	1d3b      	adds	r3, r7, #4
    4588:	4610      	mov	r0, r2
    458a:	4619      	mov	r1, r3
    458c:	f001 f93c 	bl	5808 <xTaskCheckForTimeOut>
    4590:	4603      	mov	r3, r0
    4592:	2b00      	cmp	r3, #0
    4594:	d11e      	bne.n	45d4 <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    4596:	68f8      	ldr	r0, [r7, #12]
    4598:	f000 fa86 	bl	4aa8 <prvIsQueueFull>
    459c:	4603      	mov	r3, r0
    459e:	2b00      	cmp	r3, #0
    45a0:	d012      	beq.n	45c8 <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    45a2:	68fb      	ldr	r3, [r7, #12]
    45a4:	f103 0210 	add.w	r2, r3, #16
    45a8:	687b      	ldr	r3, [r7, #4]
    45aa:	4610      	mov	r0, r2
    45ac:	4619      	mov	r1, r3
    45ae:	f001 f883 	bl	56b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    45b2:	68f8      	ldr	r0, [r7, #12]
    45b4:	f000 fa02 	bl	49bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    45b8:	f000 fe74 	bl	52a4 <xTaskResumeAll>
    45bc:	4603      	mov	r3, r0
    45be:	2b00      	cmp	r3, #0
    45c0:	d10f      	bne.n	45e2 <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    45c2:	f001 fc2d 	bl	5e20 <vPortYieldFromISR>
    45c6:	e00c      	b.n	45e2 <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    45c8:	68f8      	ldr	r0, [r7, #12]
    45ca:	f000 f9f7 	bl	49bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
    45ce:	f000 fe69 	bl	52a4 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    45d2:	e78e      	b.n	44f2 <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    45d4:	68f8      	ldr	r0, [r7, #12]
    45d6:	f000 f9f1 	bl	49bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
    45da:	f000 fe63 	bl	52a4 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    45de:	2300      	movs	r3, #0
    45e0:	e000      	b.n	45e4 <xQueueGenericSend+0x104>
		}
	}
    45e2:	e786      	b.n	44f2 <xQueueGenericSend+0x12>
}
    45e4:	4618      	mov	r0, r3
    45e6:	3720      	adds	r7, #32
    45e8:	46bd      	mov	sp, r7
    45ea:	bd80      	pop	{r7, pc}

000045ec <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    45ec:	b580      	push	{r7, lr}
    45ee:	b086      	sub	sp, #24
    45f0:	af00      	add	r7, sp, #0
    45f2:	60f8      	str	r0, [r7, #12]
    45f4:	60b9      	str	r1, [r7, #8]
    45f6:	607a      	str	r2, [r7, #4]
    45f8:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    45fa:	2300      	movs	r3, #0
    45fc:	613b      	str	r3, [r7, #16]
    45fe:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4602:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    4606:	68fb      	ldr	r3, [r7, #12]
    4608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    460a:	68fb      	ldr	r3, [r7, #12]
    460c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    460e:	429a      	cmp	r2, r3
    4610:	d221      	bcs.n	4656 <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    4612:	68f8      	ldr	r0, [r7, #12]
    4614:	68b9      	ldr	r1, [r7, #8]
    4616:	683a      	ldr	r2, [r7, #0]
    4618:	f000 f94e 	bl	48b8 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    461c:	68fb      	ldr	r3, [r7, #12]
    461e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4620:	f1b3 3fff 	cmp.w	r3, #4294967295
    4624:	d10f      	bne.n	4646 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4626:	68fb      	ldr	r3, [r7, #12]
    4628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    462a:	2b00      	cmp	r3, #0
    462c:	d010      	beq.n	4650 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    462e:	68fb      	ldr	r3, [r7, #12]
    4630:	3324      	adds	r3, #36	; 0x24
    4632:	4618      	mov	r0, r3
    4634:	f001 f878 	bl	5728 <xTaskRemoveFromEventList>
    4638:	4603      	mov	r3, r0
    463a:	2b00      	cmp	r3, #0
    463c:	d008      	beq.n	4650 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    463e:	687b      	ldr	r3, [r7, #4]
    4640:	2201      	movs	r2, #1
    4642:	601a      	str	r2, [r3, #0]
    4644:	e004      	b.n	4650 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    4646:	68fb      	ldr	r3, [r7, #12]
    4648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    464a:	1c5a      	adds	r2, r3, #1
    464c:	68fb      	ldr	r3, [r7, #12]
    464e:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    4650:	2301      	movs	r3, #1
    4652:	617b      	str	r3, [r7, #20]
    4654:	e001      	b.n	465a <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    4656:	2300      	movs	r3, #0
    4658:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    465a:	f04f 0000 	mov.w	r0, #0
    465e:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4662:	697b      	ldr	r3, [r7, #20]
}
    4664:	4618      	mov	r0, r3
    4666:	3718      	adds	r7, #24
    4668:	46bd      	mov	sp, r7
    466a:	bd80      	pop	{r7, pc}

0000466c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    466c:	b580      	push	{r7, lr}
    466e:	b088      	sub	sp, #32
    4670:	af00      	add	r7, sp, #0
    4672:	60f8      	str	r0, [r7, #12]
    4674:	60b9      	str	r1, [r7, #8]
    4676:	607a      	str	r2, [r7, #4]
    4678:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    467a:	2300      	movs	r3, #0
    467c:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    467e:	f001 fbdd 	bl	5e3c <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    4682:	68fb      	ldr	r3, [r7, #12]
    4684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4686:	2b00      	cmp	r3, #0
    4688:	d03b      	beq.n	4702 <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    468a:	68fb      	ldr	r3, [r7, #12]
    468c:	68db      	ldr	r3, [r3, #12]
    468e:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    4690:	68f8      	ldr	r0, [r7, #12]
    4692:	68b9      	ldr	r1, [r7, #8]
    4694:	f000 f96c 	bl	4970 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    4698:	683b      	ldr	r3, [r7, #0]
    469a:	2b00      	cmp	r3, #0
    469c:	d11c      	bne.n	46d8 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    469e:	68fb      	ldr	r3, [r7, #12]
    46a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    46a2:	1e5a      	subs	r2, r3, #1
    46a4:	68fb      	ldr	r3, [r7, #12]
    46a6:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    46a8:	68fb      	ldr	r3, [r7, #12]
    46aa:	681b      	ldr	r3, [r3, #0]
    46ac:	2b00      	cmp	r3, #0
    46ae:	d104      	bne.n	46ba <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    46b0:	f001 fa5c 	bl	5b6c <xTaskGetCurrentTaskHandle>
    46b4:	4602      	mov	r2, r0
    46b6:	68fb      	ldr	r3, [r7, #12]
    46b8:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    46ba:	68fb      	ldr	r3, [r7, #12]
    46bc:	691b      	ldr	r3, [r3, #16]
    46be:	2b00      	cmp	r3, #0
    46c0:	d01b      	beq.n	46fa <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    46c2:	68fb      	ldr	r3, [r7, #12]
    46c4:	3310      	adds	r3, #16
    46c6:	4618      	mov	r0, r3
    46c8:	f001 f82e 	bl	5728 <xTaskRemoveFromEventList>
    46cc:	4603      	mov	r3, r0
    46ce:	2b01      	cmp	r3, #1
    46d0:	d113      	bne.n	46fa <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    46d2:	f001 fba5 	bl	5e20 <vPortYieldFromISR>
    46d6:	e010      	b.n	46fa <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    46d8:	68fb      	ldr	r3, [r7, #12]
    46da:	69ba      	ldr	r2, [r7, #24]
    46dc:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    46de:	68fb      	ldr	r3, [r7, #12]
    46e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    46e2:	2b00      	cmp	r3, #0
    46e4:	d009      	beq.n	46fa <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    46e6:	68fb      	ldr	r3, [r7, #12]
    46e8:	3324      	adds	r3, #36	; 0x24
    46ea:	4618      	mov	r0, r3
    46ec:	f001 f81c 	bl	5728 <xTaskRemoveFromEventList>
    46f0:	4603      	mov	r3, r0
    46f2:	2b00      	cmp	r3, #0
    46f4:	d001      	beq.n	46fa <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    46f6:	f001 fb93 	bl	5e20 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    46fa:	f001 fbb5 	bl	5e68 <vPortExitCritical>
				return pdPASS;
    46fe:	2301      	movs	r3, #1
    4700:	e066      	b.n	47d0 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    4702:	687b      	ldr	r3, [r7, #4]
    4704:	2b00      	cmp	r3, #0
    4706:	d103      	bne.n	4710 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    4708:	f001 fbae 	bl	5e68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    470c:	2300      	movs	r3, #0
    470e:	e05f      	b.n	47d0 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    4710:	69fb      	ldr	r3, [r7, #28]
    4712:	2b00      	cmp	r3, #0
    4714:	d106      	bne.n	4724 <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    4716:	f107 0310 	add.w	r3, r7, #16
    471a:	4618      	mov	r0, r3
    471c:	f001 f85c 	bl	57d8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4720:	2301      	movs	r3, #1
    4722:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    4724:	f001 fba0 	bl	5e68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4728:	f000 fdaa 	bl	5280 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    472c:	f001 fb86 	bl	5e3c <vPortEnterCritical>
    4730:	68fb      	ldr	r3, [r7, #12]
    4732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4734:	f1b3 3fff 	cmp.w	r3, #4294967295
    4738:	d102      	bne.n	4740 <xQueueGenericReceive+0xd4>
    473a:	68fb      	ldr	r3, [r7, #12]
    473c:	2200      	movs	r2, #0
    473e:	645a      	str	r2, [r3, #68]	; 0x44
    4740:	68fb      	ldr	r3, [r7, #12]
    4742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4744:	f1b3 3fff 	cmp.w	r3, #4294967295
    4748:	d102      	bne.n	4750 <xQueueGenericReceive+0xe4>
    474a:	68fb      	ldr	r3, [r7, #12]
    474c:	2200      	movs	r2, #0
    474e:	649a      	str	r2, [r3, #72]	; 0x48
    4750:	f001 fb8a 	bl	5e68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4754:	f107 0210 	add.w	r2, r7, #16
    4758:	1d3b      	adds	r3, r7, #4
    475a:	4610      	mov	r0, r2
    475c:	4619      	mov	r1, r3
    475e:	f001 f853 	bl	5808 <xTaskCheckForTimeOut>
    4762:	4603      	mov	r3, r0
    4764:	2b00      	cmp	r3, #0
    4766:	d12b      	bne.n	47c0 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    4768:	68f8      	ldr	r0, [r7, #12]
    476a:	f000 f973 	bl	4a54 <prvIsQueueEmpty>
    476e:	4603      	mov	r3, r0
    4770:	2b00      	cmp	r3, #0
    4772:	d01f      	beq.n	47b4 <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4774:	68fb      	ldr	r3, [r7, #12]
    4776:	681b      	ldr	r3, [r3, #0]
    4778:	2b00      	cmp	r3, #0
    477a:	d108      	bne.n	478e <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    477c:	f001 fb5e 	bl	5e3c <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    4780:	68fb      	ldr	r3, [r7, #12]
    4782:	685b      	ldr	r3, [r3, #4]
    4784:	4618      	mov	r0, r3
    4786:	f001 fa01 	bl	5b8c <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    478a:	f001 fb6d 	bl	5e68 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    478e:	68fb      	ldr	r3, [r7, #12]
    4790:	f103 0224 	add.w	r2, r3, #36	; 0x24
    4794:	687b      	ldr	r3, [r7, #4]
    4796:	4610      	mov	r0, r2
    4798:	4619      	mov	r1, r3
    479a:	f000 ff8d 	bl	56b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    479e:	68f8      	ldr	r0, [r7, #12]
    47a0:	f000 f90c 	bl	49bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    47a4:	f000 fd7e 	bl	52a4 <xTaskResumeAll>
    47a8:	4603      	mov	r3, r0
    47aa:	2b00      	cmp	r3, #0
    47ac:	d10f      	bne.n	47ce <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    47ae:	f001 fb37 	bl	5e20 <vPortYieldFromISR>
    47b2:	e00c      	b.n	47ce <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    47b4:	68f8      	ldr	r0, [r7, #12]
    47b6:	f000 f901 	bl	49bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
    47ba:	f000 fd73 	bl	52a4 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    47be:	e75e      	b.n	467e <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    47c0:	68f8      	ldr	r0, [r7, #12]
    47c2:	f000 f8fb 	bl	49bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
    47c6:	f000 fd6d 	bl	52a4 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    47ca:	2300      	movs	r3, #0
    47cc:	e000      	b.n	47d0 <xQueueGenericReceive+0x164>
		}
	}
    47ce:	e756      	b.n	467e <xQueueGenericReceive+0x12>
}
    47d0:	4618      	mov	r0, r3
    47d2:	3720      	adds	r7, #32
    47d4:	46bd      	mov	sp, r7
    47d6:	bd80      	pop	{r7, pc}

000047d8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    47d8:	b580      	push	{r7, lr}
    47da:	b086      	sub	sp, #24
    47dc:	af00      	add	r7, sp, #0
    47de:	60f8      	str	r0, [r7, #12]
    47e0:	60b9      	str	r1, [r7, #8]
    47e2:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    47e4:	2300      	movs	r3, #0
    47e6:	613b      	str	r3, [r7, #16]
    47e8:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    47ec:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    47f0:	68fb      	ldr	r3, [r7, #12]
    47f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    47f4:	2b00      	cmp	r3, #0
    47f6:	d025      	beq.n	4844 <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    47f8:	68f8      	ldr	r0, [r7, #12]
    47fa:	68b9      	ldr	r1, [r7, #8]
    47fc:	f000 f8b8 	bl	4970 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    4800:	68fb      	ldr	r3, [r7, #12]
    4802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4804:	1e5a      	subs	r2, r3, #1
    4806:	68fb      	ldr	r3, [r7, #12]
    4808:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    480a:	68fb      	ldr	r3, [r7, #12]
    480c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    480e:	f1b3 3fff 	cmp.w	r3, #4294967295
    4812:	d10f      	bne.n	4834 <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4814:	68fb      	ldr	r3, [r7, #12]
    4816:	691b      	ldr	r3, [r3, #16]
    4818:	2b00      	cmp	r3, #0
    481a:	d010      	beq.n	483e <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    481c:	68fb      	ldr	r3, [r7, #12]
    481e:	3310      	adds	r3, #16
    4820:	4618      	mov	r0, r3
    4822:	f000 ff81 	bl	5728 <xTaskRemoveFromEventList>
    4826:	4603      	mov	r3, r0
    4828:	2b00      	cmp	r3, #0
    482a:	d008      	beq.n	483e <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    482c:	687b      	ldr	r3, [r7, #4]
    482e:	2201      	movs	r2, #1
    4830:	601a      	str	r2, [r3, #0]
    4832:	e004      	b.n	483e <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    4834:	68fb      	ldr	r3, [r7, #12]
    4836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4838:	1c5a      	adds	r2, r3, #1
    483a:	68fb      	ldr	r3, [r7, #12]
    483c:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    483e:	2301      	movs	r3, #1
    4840:	617b      	str	r3, [r7, #20]
    4842:	e001      	b.n	4848 <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    4844:	2300      	movs	r3, #0
    4846:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4848:	f04f 0000 	mov.w	r0, #0
    484c:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4850:	697b      	ldr	r3, [r7, #20]
}
    4852:	4618      	mov	r0, r3
    4854:	3718      	adds	r7, #24
    4856:	46bd      	mov	sp, r7
    4858:	bd80      	pop	{r7, pc}
    485a:	bf00      	nop

0000485c <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    485c:	b580      	push	{r7, lr}
    485e:	b084      	sub	sp, #16
    4860:	af00      	add	r7, sp, #0
    4862:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    4864:	f001 faea 	bl	5e3c <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    4868:	687b      	ldr	r3, [r7, #4]
    486a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    486c:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    486e:	f001 fafb 	bl	5e68 <vPortExitCritical>

	return uxReturn;
    4872:	68fb      	ldr	r3, [r7, #12]
}
    4874:	4618      	mov	r0, r3
    4876:	3710      	adds	r7, #16
    4878:	46bd      	mov	sp, r7
    487a:	bd80      	pop	{r7, pc}

0000487c <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    487c:	b480      	push	{r7}
    487e:	b085      	sub	sp, #20
    4880:	af00      	add	r7, sp, #0
    4882:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    4884:	687b      	ldr	r3, [r7, #4]
    4886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4888:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    488a:	68fb      	ldr	r3, [r7, #12]
}
    488c:	4618      	mov	r0, r3
    488e:	3714      	adds	r7, #20
    4890:	46bd      	mov	sp, r7
    4892:	f85d 7b04 	ldr.w	r7, [sp], #4
    4896:	4770      	bx	lr

00004898 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    4898:	b580      	push	{r7, lr}
    489a:	b082      	sub	sp, #8
    489c:	af00      	add	r7, sp, #0
    489e:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    48a0:	687b      	ldr	r3, [r7, #4]
    48a2:	681b      	ldr	r3, [r3, #0]
    48a4:	4618      	mov	r0, r3
    48a6:	f001 fc07 	bl	60b8 <vPortFree>
	vPortFree( pxQueue );
    48aa:	6878      	ldr	r0, [r7, #4]
    48ac:	f001 fc04 	bl	60b8 <vPortFree>
}
    48b0:	3708      	adds	r7, #8
    48b2:	46bd      	mov	sp, r7
    48b4:	bd80      	pop	{r7, pc}
    48b6:	bf00      	nop

000048b8 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    48b8:	b580      	push	{r7, lr}
    48ba:	b084      	sub	sp, #16
    48bc:	af00      	add	r7, sp, #0
    48be:	60f8      	str	r0, [r7, #12]
    48c0:	60b9      	str	r1, [r7, #8]
    48c2:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    48c4:	68fb      	ldr	r3, [r7, #12]
    48c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    48c8:	2b00      	cmp	r3, #0
    48ca:	d10c      	bne.n	48e6 <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    48cc:	68fb      	ldr	r3, [r7, #12]
    48ce:	681b      	ldr	r3, [r3, #0]
    48d0:	2b00      	cmp	r3, #0
    48d2:	d145      	bne.n	4960 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    48d4:	68fb      	ldr	r3, [r7, #12]
    48d6:	685b      	ldr	r3, [r3, #4]
    48d8:	4618      	mov	r0, r3
    48da:	f001 f9bb 	bl	5c54 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    48de:	68fb      	ldr	r3, [r7, #12]
    48e0:	2200      	movs	r2, #0
    48e2:	605a      	str	r2, [r3, #4]
    48e4:	e03c      	b.n	4960 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    48e6:	687b      	ldr	r3, [r7, #4]
    48e8:	2b00      	cmp	r3, #0
    48ea:	d11a      	bne.n	4922 <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    48ec:	68fb      	ldr	r3, [r7, #12]
    48ee:	689a      	ldr	r2, [r3, #8]
    48f0:	68fb      	ldr	r3, [r7, #12]
    48f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    48f4:	4610      	mov	r0, r2
    48f6:	68b9      	ldr	r1, [r7, #8]
    48f8:	461a      	mov	r2, r3
    48fa:	f014 f847 	bl	1898c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    48fe:	68fb      	ldr	r3, [r7, #12]
    4900:	689a      	ldr	r2, [r3, #8]
    4902:	68fb      	ldr	r3, [r7, #12]
    4904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4906:	441a      	add	r2, r3
    4908:	68fb      	ldr	r3, [r7, #12]
    490a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    490c:	68fb      	ldr	r3, [r7, #12]
    490e:	689a      	ldr	r2, [r3, #8]
    4910:	68fb      	ldr	r3, [r7, #12]
    4912:	685b      	ldr	r3, [r3, #4]
    4914:	429a      	cmp	r2, r3
    4916:	d323      	bcc.n	4960 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    4918:	68fb      	ldr	r3, [r7, #12]
    491a:	681a      	ldr	r2, [r3, #0]
    491c:	68fb      	ldr	r3, [r7, #12]
    491e:	609a      	str	r2, [r3, #8]
    4920:	e01e      	b.n	4960 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    4922:	68fb      	ldr	r3, [r7, #12]
    4924:	68da      	ldr	r2, [r3, #12]
    4926:	68fb      	ldr	r3, [r7, #12]
    4928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    492a:	4610      	mov	r0, r2
    492c:	68b9      	ldr	r1, [r7, #8]
    492e:	461a      	mov	r2, r3
    4930:	f014 f82c 	bl	1898c <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    4934:	68fb      	ldr	r3, [r7, #12]
    4936:	68da      	ldr	r2, [r3, #12]
    4938:	68fb      	ldr	r3, [r7, #12]
    493a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    493c:	425b      	negs	r3, r3
    493e:	441a      	add	r2, r3
    4940:	68fb      	ldr	r3, [r7, #12]
    4942:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    4944:	68fb      	ldr	r3, [r7, #12]
    4946:	68da      	ldr	r2, [r3, #12]
    4948:	68fb      	ldr	r3, [r7, #12]
    494a:	681b      	ldr	r3, [r3, #0]
    494c:	429a      	cmp	r2, r3
    494e:	d207      	bcs.n	4960 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    4950:	68fb      	ldr	r3, [r7, #12]
    4952:	685a      	ldr	r2, [r3, #4]
    4954:	68fb      	ldr	r3, [r7, #12]
    4956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4958:	425b      	negs	r3, r3
    495a:	441a      	add	r2, r3
    495c:	68fb      	ldr	r3, [r7, #12]
    495e:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    4960:	68fb      	ldr	r3, [r7, #12]
    4962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4964:	1c5a      	adds	r2, r3, #1
    4966:	68fb      	ldr	r3, [r7, #12]
    4968:	639a      	str	r2, [r3, #56]	; 0x38
}
    496a:	3710      	adds	r7, #16
    496c:	46bd      	mov	sp, r7
    496e:	bd80      	pop	{r7, pc}

00004970 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    4970:	b580      	push	{r7, lr}
    4972:	b082      	sub	sp, #8
    4974:	af00      	add	r7, sp, #0
    4976:	6078      	str	r0, [r7, #4]
    4978:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    497a:	687b      	ldr	r3, [r7, #4]
    497c:	681b      	ldr	r3, [r3, #0]
    497e:	2b00      	cmp	r3, #0
    4980:	d019      	beq.n	49b6 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    4982:	687b      	ldr	r3, [r7, #4]
    4984:	68da      	ldr	r2, [r3, #12]
    4986:	687b      	ldr	r3, [r7, #4]
    4988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    498a:	441a      	add	r2, r3
    498c:	687b      	ldr	r3, [r7, #4]
    498e:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    4990:	687b      	ldr	r3, [r7, #4]
    4992:	68da      	ldr	r2, [r3, #12]
    4994:	687b      	ldr	r3, [r7, #4]
    4996:	685b      	ldr	r3, [r3, #4]
    4998:	429a      	cmp	r2, r3
    499a:	d303      	bcc.n	49a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    499c:	687b      	ldr	r3, [r7, #4]
    499e:	681a      	ldr	r2, [r3, #0]
    49a0:	687b      	ldr	r3, [r7, #4]
    49a2:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    49a4:	687b      	ldr	r3, [r7, #4]
    49a6:	68da      	ldr	r2, [r3, #12]
    49a8:	687b      	ldr	r3, [r7, #4]
    49aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    49ac:	6838      	ldr	r0, [r7, #0]
    49ae:	4611      	mov	r1, r2
    49b0:	461a      	mov	r2, r3
    49b2:	f013 ffeb 	bl	1898c <memcpy>
	}
}
    49b6:	3708      	adds	r7, #8
    49b8:	46bd      	mov	sp, r7
    49ba:	bd80      	pop	{r7, pc}

000049bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    49bc:	b580      	push	{r7, lr}
    49be:	b082      	sub	sp, #8
    49c0:	af00      	add	r7, sp, #0
    49c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    49c4:	f001 fa3a 	bl	5e3c <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    49c8:	e014      	b.n	49f4 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    49ca:	687b      	ldr	r3, [r7, #4]
    49cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    49ce:	2b00      	cmp	r3, #0
    49d0:	d00f      	beq.n	49f2 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    49d2:	687b      	ldr	r3, [r7, #4]
    49d4:	3324      	adds	r3, #36	; 0x24
    49d6:	4618      	mov	r0, r3
    49d8:	f000 fea6 	bl	5728 <xTaskRemoveFromEventList>
    49dc:	4603      	mov	r3, r0
    49de:	2b00      	cmp	r3, #0
    49e0:	d001      	beq.n	49e6 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    49e2:	f000 ff5d 	bl	58a0 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    49e6:	687b      	ldr	r3, [r7, #4]
    49e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    49ea:	1e5a      	subs	r2, r3, #1
    49ec:	687b      	ldr	r3, [r7, #4]
    49ee:	649a      	str	r2, [r3, #72]	; 0x48
    49f0:	e000      	b.n	49f4 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    49f2:	e003      	b.n	49fc <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    49f4:	687b      	ldr	r3, [r7, #4]
    49f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    49f8:	2b00      	cmp	r3, #0
    49fa:	dce6      	bgt.n	49ca <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    49fc:	687b      	ldr	r3, [r7, #4]
    49fe:	f04f 32ff 	mov.w	r2, #4294967295
    4a02:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    4a04:	f001 fa30 	bl	5e68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    4a08:	f001 fa18 	bl	5e3c <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4a0c:	e014      	b.n	4a38 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4a0e:	687b      	ldr	r3, [r7, #4]
    4a10:	691b      	ldr	r3, [r3, #16]
    4a12:	2b00      	cmp	r3, #0
    4a14:	d00f      	beq.n	4a36 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4a16:	687b      	ldr	r3, [r7, #4]
    4a18:	3310      	adds	r3, #16
    4a1a:	4618      	mov	r0, r3
    4a1c:	f000 fe84 	bl	5728 <xTaskRemoveFromEventList>
    4a20:	4603      	mov	r3, r0
    4a22:	2b00      	cmp	r3, #0
    4a24:	d001      	beq.n	4a2a <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    4a26:	f000 ff3b 	bl	58a0 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    4a2a:	687b      	ldr	r3, [r7, #4]
    4a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4a2e:	1e5a      	subs	r2, r3, #1
    4a30:	687b      	ldr	r3, [r7, #4]
    4a32:	645a      	str	r2, [r3, #68]	; 0x44
    4a34:	e000      	b.n	4a38 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    4a36:	e003      	b.n	4a40 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4a38:	687b      	ldr	r3, [r7, #4]
    4a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4a3c:	2b00      	cmp	r3, #0
    4a3e:	dce6      	bgt.n	4a0e <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    4a40:	687b      	ldr	r3, [r7, #4]
    4a42:	f04f 32ff 	mov.w	r2, #4294967295
    4a46:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    4a48:	f001 fa0e 	bl	5e68 <vPortExitCritical>
}
    4a4c:	3708      	adds	r7, #8
    4a4e:	46bd      	mov	sp, r7
    4a50:	bd80      	pop	{r7, pc}
    4a52:	bf00      	nop

00004a54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    4a54:	b580      	push	{r7, lr}
    4a56:	b084      	sub	sp, #16
    4a58:	af00      	add	r7, sp, #0
    4a5a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    4a5c:	f001 f9ee 	bl	5e3c <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4a60:	687b      	ldr	r3, [r7, #4]
    4a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4a64:	2b00      	cmp	r3, #0
    4a66:	bf14      	ite	ne
    4a68:	2300      	movne	r3, #0
    4a6a:	2301      	moveq	r3, #1
    4a6c:	b2db      	uxtb	r3, r3
    4a6e:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4a70:	f001 f9fa 	bl	5e68 <vPortExitCritical>

	return xReturn;
    4a74:	68fb      	ldr	r3, [r7, #12]
}
    4a76:	4618      	mov	r0, r3
    4a78:	3710      	adds	r7, #16
    4a7a:	46bd      	mov	sp, r7
    4a7c:	bd80      	pop	{r7, pc}
    4a7e:	bf00      	nop

00004a80 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    4a80:	b480      	push	{r7}
    4a82:	b085      	sub	sp, #20
    4a84:	af00      	add	r7, sp, #0
    4a86:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4a88:	687b      	ldr	r3, [r7, #4]
    4a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4a8c:	2b00      	cmp	r3, #0
    4a8e:	bf14      	ite	ne
    4a90:	2300      	movne	r3, #0
    4a92:	2301      	moveq	r3, #1
    4a94:	b2db      	uxtb	r3, r3
    4a96:	60fb      	str	r3, [r7, #12]

	return xReturn;
    4a98:	68fb      	ldr	r3, [r7, #12]
}
    4a9a:	4618      	mov	r0, r3
    4a9c:	3714      	adds	r7, #20
    4a9e:	46bd      	mov	sp, r7
    4aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4aa4:	4770      	bx	lr
    4aa6:	bf00      	nop

00004aa8 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    4aa8:	b580      	push	{r7, lr}
    4aaa:	b084      	sub	sp, #16
    4aac:	af00      	add	r7, sp, #0
    4aae:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    4ab0:	f001 f9c4 	bl	5e3c <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    4ab4:	687b      	ldr	r3, [r7, #4]
    4ab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4ab8:	687b      	ldr	r3, [r7, #4]
    4aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4abc:	429a      	cmp	r2, r3
    4abe:	bf14      	ite	ne
    4ac0:	2300      	movne	r3, #0
    4ac2:	2301      	moveq	r3, #1
    4ac4:	b2db      	uxtb	r3, r3
    4ac6:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4ac8:	f001 f9ce 	bl	5e68 <vPortExitCritical>

	return xReturn;
    4acc:	68fb      	ldr	r3, [r7, #12]
}
    4ace:	4618      	mov	r0, r3
    4ad0:	3710      	adds	r7, #16
    4ad2:	46bd      	mov	sp, r7
    4ad4:	bd80      	pop	{r7, pc}
    4ad6:	bf00      	nop

00004ad8 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    4ad8:	b480      	push	{r7}
    4ada:	b085      	sub	sp, #20
    4adc:	af00      	add	r7, sp, #0
    4ade:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    4ae0:	687b      	ldr	r3, [r7, #4]
    4ae2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4ae4:	687b      	ldr	r3, [r7, #4]
    4ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4ae8:	429a      	cmp	r2, r3
    4aea:	bf14      	ite	ne
    4aec:	2300      	movne	r3, #0
    4aee:	2301      	moveq	r3, #1
    4af0:	b2db      	uxtb	r3, r3
    4af2:	60fb      	str	r3, [r7, #12]

	return xReturn;
    4af4:	68fb      	ldr	r3, [r7, #12]
}
    4af6:	4618      	mov	r0, r3
    4af8:	3714      	adds	r7, #20
    4afa:	46bd      	mov	sp, r7
    4afc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b00:	4770      	bx	lr
    4b02:	bf00      	nop

00004b04 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    4b04:	b580      	push	{r7, lr}
    4b06:	b08a      	sub	sp, #40	; 0x28
    4b08:	af02      	add	r7, sp, #8
    4b0a:	60f8      	str	r0, [r7, #12]
    4b0c:	60b9      	str	r1, [r7, #8]
    4b0e:	603b      	str	r3, [r7, #0]
    4b10:	4613      	mov	r3, r2
    4b12:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    4b14:	88fb      	ldrh	r3, [r7, #6]
    4b16:	4618      	mov	r0, r3
    4b18:	6b39      	ldr	r1, [r7, #48]	; 0x30
    4b1a:	f000 ffe5 	bl	5ae8 <prvAllocateTCBAndStack>
    4b1e:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    4b20:	69bb      	ldr	r3, [r7, #24]
    4b22:	2b00      	cmp	r3, #0
    4b24:	f000 80a1 	beq.w	4c6a <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    4b28:	69bb      	ldr	r3, [r7, #24]
    4b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4b2c:	88fb      	ldrh	r3, [r7, #6]
    4b2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4b32:	3b01      	subs	r3, #1
    4b34:	009b      	lsls	r3, r3, #2
    4b36:	4413      	add	r3, r2
    4b38:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    4b3a:	697b      	ldr	r3, [r7, #20]
    4b3c:	f023 0307 	bic.w	r3, r3, #7
    4b40:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    4b42:	88fb      	ldrh	r3, [r7, #6]
    4b44:	9300      	str	r3, [sp, #0]
    4b46:	69b8      	ldr	r0, [r7, #24]
    4b48:	68b9      	ldr	r1, [r7, #8]
    4b4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4b4e:	f000 febd 	bl	58cc <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    4b52:	6978      	ldr	r0, [r7, #20]
    4b54:	68f9      	ldr	r1, [r7, #12]
    4b56:	683a      	ldr	r2, [r7, #0]
    4b58:	f001 f8f2 	bl	5d40 <pxPortInitialiseStack>
    4b5c:	4602      	mov	r2, r0
    4b5e:	69bb      	ldr	r3, [r7, #24]
    4b60:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    4b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4b64:	2b00      	cmp	r3, #0
    4b66:	d002      	beq.n	4b6e <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    4b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4b6a:	69ba      	ldr	r2, [r7, #24]
    4b6c:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    4b6e:	f001 f965 	bl	5e3c <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    4b72:	f241 23b4 	movw	r3, #4788	; 0x12b4
    4b76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b7a:	681b      	ldr	r3, [r3, #0]
    4b7c:	1c5a      	adds	r2, r3, #1
    4b7e:	f241 23b4 	movw	r3, #4788	; 0x12b4
    4b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b86:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    4b88:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b90:	681b      	ldr	r3, [r3, #0]
    4b92:	2b00      	cmp	r3, #0
    4b94:	d10f      	bne.n	4bb6 <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    4b96:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b9e:	69ba      	ldr	r2, [r7, #24]
    4ba0:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    4ba2:	f241 23b4 	movw	r3, #4788	; 0x12b4
    4ba6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4baa:	681b      	ldr	r3, [r3, #0]
    4bac:	2b01      	cmp	r3, #1
    4bae:	d118      	bne.n	4be2 <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    4bb0:	f000 fec2 	bl	5938 <prvInitialiseTaskLists>
    4bb4:	e015      	b.n	4be2 <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    4bb6:	f241 23c4 	movw	r3, #4804	; 0x12c4
    4bba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bbe:	681b      	ldr	r3, [r3, #0]
    4bc0:	2b00      	cmp	r3, #0
    4bc2:	d10e      	bne.n	4be2 <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    4bc4:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4bc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bcc:	681b      	ldr	r3, [r3, #0]
    4bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4bd2:	429a      	cmp	r2, r3
    4bd4:	d805      	bhi.n	4be2 <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    4bd6:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4bda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bde:	69ba      	ldr	r2, [r7, #24]
    4be0:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    4be2:	69bb      	ldr	r3, [r7, #24]
    4be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4be6:	f241 23bc 	movw	r3, #4796	; 0x12bc
    4bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bee:	681b      	ldr	r3, [r3, #0]
    4bf0:	429a      	cmp	r2, r3
    4bf2:	d906      	bls.n	4c02 <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    4bf4:	69bb      	ldr	r3, [r7, #24]
    4bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bf8:	f241 23bc 	movw	r3, #4796	; 0x12bc
    4bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c00:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    4c02:	f241 23d8 	movw	r3, #4824	; 0x12d8
    4c06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c0a:	681b      	ldr	r3, [r3, #0]
    4c0c:	1c5a      	adds	r2, r3, #1
    4c0e:	f241 23d8 	movw	r3, #4824	; 0x12d8
    4c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c16:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    4c18:	69bb      	ldr	r3, [r7, #24]
    4c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4c1c:	f241 23c0 	movw	r3, #4800	; 0x12c0
    4c20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c24:	681b      	ldr	r3, [r3, #0]
    4c26:	429a      	cmp	r2, r3
    4c28:	d906      	bls.n	4c38 <xTaskGenericCreate+0x134>
    4c2a:	69bb      	ldr	r3, [r7, #24]
    4c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4c2e:	f241 23c0 	movw	r3, #4800	; 0x12c0
    4c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c36:	601a      	str	r2, [r3, #0]
    4c38:	69bb      	ldr	r3, [r7, #24]
    4c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4c3c:	4613      	mov	r3, r2
    4c3e:	009b      	lsls	r3, r3, #2
    4c40:	4413      	add	r3, r2
    4c42:	009b      	lsls	r3, r3, #2
    4c44:	f241 12e0 	movw	r2, #4576	; 0x11e0
    4c48:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4c4c:	441a      	add	r2, r3
    4c4e:	69bb      	ldr	r3, [r7, #24]
    4c50:	3304      	adds	r3, #4
    4c52:	4610      	mov	r0, r2
    4c54:	4619      	mov	r1, r3
    4c56:	f7ff fadf 	bl	4218 <vListInsertEnd>

			xReturn = pdPASS;
    4c5a:	2301      	movs	r3, #1
    4c5c:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    4c5e:	69b8      	ldr	r0, [r7, #24]
    4c60:	f012 fe8a 	bl	17978 <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    4c64:	f001 f900 	bl	5e68 <vPortExitCritical>
    4c68:	e002      	b.n	4c70 <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4c6a:	f04f 33ff 	mov.w	r3, #4294967295
    4c6e:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    4c70:	69fb      	ldr	r3, [r7, #28]
    4c72:	2b01      	cmp	r3, #1
    4c74:	d111      	bne.n	4c9a <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    4c76:	f241 23c4 	movw	r3, #4804	; 0x12c4
    4c7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c7e:	681b      	ldr	r3, [r3, #0]
    4c80:	2b00      	cmp	r3, #0
    4c82:	d00a      	beq.n	4c9a <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    4c84:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4c88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c8c:	681b      	ldr	r3, [r3, #0]
    4c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4c92:	429a      	cmp	r2, r3
    4c94:	d201      	bcs.n	4c9a <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    4c96:	f001 f8c3 	bl	5e20 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    4c9a:	69fb      	ldr	r3, [r7, #28]
}
    4c9c:	4618      	mov	r0, r3
    4c9e:	3720      	adds	r7, #32
    4ca0:	46bd      	mov	sp, r7
    4ca2:	bd80      	pop	{r7, pc}

00004ca4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    4ca4:	b580      	push	{r7, lr}
    4ca6:	b084      	sub	sp, #16
    4ca8:	af00      	add	r7, sp, #0
    4caa:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4cac:	f001 f8c6 	bl	5e3c <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    4cb0:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cb8:	681b      	ldr	r3, [r3, #0]
    4cba:	687a      	ldr	r2, [r7, #4]
    4cbc:	429a      	cmp	r2, r3
    4cbe:	d101      	bne.n	4cc4 <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    4cc0:	2300      	movs	r3, #0
    4cc2:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    4cc4:	687b      	ldr	r3, [r7, #4]
    4cc6:	2b00      	cmp	r3, #0
    4cc8:	d105      	bne.n	4cd6 <vTaskDelete+0x32>
    4cca:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4cce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cd2:	681b      	ldr	r3, [r3, #0]
    4cd4:	e000      	b.n	4cd8 <vTaskDelete+0x34>
    4cd6:	687b      	ldr	r3, [r7, #4]
    4cd8:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4cda:	68fb      	ldr	r3, [r7, #12]
    4cdc:	3304      	adds	r3, #4
    4cde:	4618      	mov	r0, r3
    4ce0:	f7ff fafa 	bl	42d8 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4ce4:	68fb      	ldr	r3, [r7, #12]
    4ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ce8:	2b00      	cmp	r3, #0
    4cea:	d004      	beq.n	4cf6 <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4cec:	68fb      	ldr	r3, [r7, #12]
    4cee:	3318      	adds	r3, #24
    4cf0:	4618      	mov	r0, r3
    4cf2:	f7ff faf1 	bl	42d8 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    4cf6:	68fb      	ldr	r3, [r7, #12]
    4cf8:	3304      	adds	r3, #4
    4cfa:	f241 2088 	movw	r0, #4744	; 0x1288
    4cfe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4d02:	4619      	mov	r1, r3
    4d04:	f7ff fa88 	bl	4218 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    4d08:	f241 239c 	movw	r3, #4764	; 0x129c
    4d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d10:	681b      	ldr	r3, [r3, #0]
    4d12:	1c5a      	adds	r2, r3, #1
    4d14:	f241 239c 	movw	r3, #4764	; 0x129c
    4d18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d1c:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    4d1e:	f241 23d8 	movw	r3, #4824	; 0x12d8
    4d22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d26:	681b      	ldr	r3, [r3, #0]
    4d28:	1c5a      	adds	r2, r3, #1
    4d2a:	f241 23d8 	movw	r3, #4824	; 0x12d8
    4d2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d32:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    4d34:	f001 f898 	bl	5e68 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    4d38:	f241 23c4 	movw	r3, #4804	; 0x12c4
    4d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d40:	681b      	ldr	r3, [r3, #0]
    4d42:	2b00      	cmp	r3, #0
    4d44:	d004      	beq.n	4d50 <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    4d46:	687b      	ldr	r3, [r7, #4]
    4d48:	2b00      	cmp	r3, #0
    4d4a:	d101      	bne.n	4d50 <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    4d4c:	f001 f868 	bl	5e20 <vPortYieldFromISR>
			}
		}
	}
    4d50:	3710      	adds	r7, #16
    4d52:	46bd      	mov	sp, r7
    4d54:	bd80      	pop	{r7, pc}
    4d56:	bf00      	nop

00004d58 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    4d58:	b580      	push	{r7, lr}
    4d5a:	b086      	sub	sp, #24
    4d5c:	af00      	add	r7, sp, #0
    4d5e:	6078      	str	r0, [r7, #4]
    4d60:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    4d62:	2300      	movs	r3, #0
    4d64:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    4d66:	f000 fa8b 	bl	5280 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4d6a:	687b      	ldr	r3, [r7, #4]
    4d6c:	681a      	ldr	r2, [r3, #0]
    4d6e:	683b      	ldr	r3, [r7, #0]
    4d70:	4413      	add	r3, r2
    4d72:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    4d74:	687b      	ldr	r3, [r7, #4]
    4d76:	681a      	ldr	r2, [r3, #0]
    4d78:	f241 23b8 	movw	r3, #4792	; 0x12b8
    4d7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d80:	681b      	ldr	r3, [r3, #0]
    4d82:	429a      	cmp	r2, r3
    4d84:	d90f      	bls.n	4da6 <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    4d86:	687b      	ldr	r3, [r7, #4]
    4d88:	681a      	ldr	r2, [r3, #0]
    4d8a:	693b      	ldr	r3, [r7, #16]
    4d8c:	429a      	cmp	r2, r3
    4d8e:	d919      	bls.n	4dc4 <vTaskDelayUntil+0x6c>
    4d90:	f241 23b8 	movw	r3, #4792	; 0x12b8
    4d94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d98:	681b      	ldr	r3, [r3, #0]
    4d9a:	693a      	ldr	r2, [r7, #16]
    4d9c:	429a      	cmp	r2, r3
    4d9e:	d911      	bls.n	4dc4 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4da0:	2301      	movs	r3, #1
    4da2:	617b      	str	r3, [r7, #20]
    4da4:	e00e      	b.n	4dc4 <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    4da6:	687b      	ldr	r3, [r7, #4]
    4da8:	681a      	ldr	r2, [r3, #0]
    4daa:	693b      	ldr	r3, [r7, #16]
    4dac:	429a      	cmp	r2, r3
    4dae:	d807      	bhi.n	4dc0 <vTaskDelayUntil+0x68>
    4db0:	f241 23b8 	movw	r3, #4792	; 0x12b8
    4db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4db8:	681b      	ldr	r3, [r3, #0]
    4dba:	693a      	ldr	r2, [r7, #16]
    4dbc:	429a      	cmp	r2, r3
    4dbe:	d901      	bls.n	4dc4 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4dc0:	2301      	movs	r3, #1
    4dc2:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    4dc4:	687b      	ldr	r3, [r7, #4]
    4dc6:	693a      	ldr	r2, [r7, #16]
    4dc8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    4dca:	697b      	ldr	r3, [r7, #20]
    4dcc:	2b00      	cmp	r3, #0
    4dce:	d00b      	beq.n	4de8 <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4dd0:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dd8:	681b      	ldr	r3, [r3, #0]
    4dda:	3304      	adds	r3, #4
    4ddc:	4618      	mov	r0, r3
    4dde:	f7ff fa7b 	bl	42d8 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4de2:	6938      	ldr	r0, [r7, #16]
    4de4:	f000 fe3c 	bl	5a60 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    4de8:	f000 fa5c 	bl	52a4 <xTaskResumeAll>
    4dec:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4dee:	68fb      	ldr	r3, [r7, #12]
    4df0:	2b00      	cmp	r3, #0
    4df2:	d101      	bne.n	4df8 <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    4df4:	f001 f814 	bl	5e20 <vPortYieldFromISR>
		}
	}
    4df8:	3718      	adds	r7, #24
    4dfa:	46bd      	mov	sp, r7
    4dfc:	bd80      	pop	{r7, pc}
    4dfe:	bf00      	nop

00004e00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    4e00:	b580      	push	{r7, lr}
    4e02:	b084      	sub	sp, #16
    4e04:	af00      	add	r7, sp, #0
    4e06:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4e08:	2300      	movs	r3, #0
    4e0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    4e0c:	687b      	ldr	r3, [r7, #4]
    4e0e:	2b00      	cmp	r3, #0
    4e10:	d018      	beq.n	4e44 <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    4e12:	f000 fa35 	bl	5280 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    4e16:	f241 23b8 	movw	r3, #4792	; 0x12b8
    4e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e1e:	681a      	ldr	r2, [r3, #0]
    4e20:	687b      	ldr	r3, [r7, #4]
    4e22:	4413      	add	r3, r2
    4e24:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4e26:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e2e:	681b      	ldr	r3, [r3, #0]
    4e30:	3304      	adds	r3, #4
    4e32:	4618      	mov	r0, r3
    4e34:	f7ff fa50 	bl	42d8 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4e38:	68b8      	ldr	r0, [r7, #8]
    4e3a:	f000 fe11 	bl	5a60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    4e3e:	f000 fa31 	bl	52a4 <xTaskResumeAll>
    4e42:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4e44:	68fb      	ldr	r3, [r7, #12]
    4e46:	2b00      	cmp	r3, #0
    4e48:	d101      	bne.n	4e4e <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    4e4a:	f000 ffe9 	bl	5e20 <vPortYieldFromISR>
		}
	}
    4e4e:	3710      	adds	r7, #16
    4e50:	46bd      	mov	sp, r7
    4e52:	bd80      	pop	{r7, pc}

00004e54 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    4e54:	b580      	push	{r7, lr}
    4e56:	b084      	sub	sp, #16
    4e58:	af00      	add	r7, sp, #0
    4e5a:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    4e5c:	f000 ffee 	bl	5e3c <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4e60:	687b      	ldr	r3, [r7, #4]
    4e62:	2b00      	cmp	r3, #0
    4e64:	d105      	bne.n	4e72 <uxTaskPriorityGet+0x1e>
    4e66:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e6e:	681b      	ldr	r3, [r3, #0]
    4e70:	e000      	b.n	4e74 <uxTaskPriorityGet+0x20>
    4e72:	687b      	ldr	r3, [r7, #4]
    4e74:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    4e76:	68fb      	ldr	r3, [r7, #12]
    4e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4e7a:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    4e7c:	f000 fff4 	bl	5e68 <vPortExitCritical>

		return uxReturn;
    4e80:	68bb      	ldr	r3, [r7, #8]
	}
    4e82:	4618      	mov	r0, r3
    4e84:	3710      	adds	r7, #16
    4e86:	46bd      	mov	sp, r7
    4e88:	bd80      	pop	{r7, pc}
    4e8a:	bf00      	nop

00004e8c <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    4e8c:	b580      	push	{r7, lr}
    4e8e:	b086      	sub	sp, #24
    4e90:	af00      	add	r7, sp, #0
    4e92:	6078      	str	r0, [r7, #4]
    4e94:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    4e96:	2300      	movs	r3, #0
    4e98:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    4e9a:	683b      	ldr	r3, [r7, #0]
    4e9c:	2b04      	cmp	r3, #4
    4e9e:	d901      	bls.n	4ea4 <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4ea0:	2304      	movs	r3, #4
    4ea2:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    4ea4:	f000 ffca 	bl	5e3c <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    4ea8:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eb0:	681b      	ldr	r3, [r3, #0]
    4eb2:	687a      	ldr	r2, [r7, #4]
    4eb4:	429a      	cmp	r2, r3
    4eb6:	d101      	bne.n	4ebc <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    4eb8:	2300      	movs	r3, #0
    4eba:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4ebc:	687b      	ldr	r3, [r7, #4]
    4ebe:	2b00      	cmp	r3, #0
    4ec0:	d105      	bne.n	4ece <vTaskPrioritySet+0x42>
    4ec2:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4ec6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eca:	681b      	ldr	r3, [r3, #0]
    4ecc:	e000      	b.n	4ed0 <vTaskPrioritySet+0x44>
    4ece:	687b      	ldr	r3, [r7, #4]
    4ed0:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    4ed2:	693b      	ldr	r3, [r7, #16]
    4ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4ed6:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    4ed8:	68fa      	ldr	r2, [r7, #12]
    4eda:	683b      	ldr	r3, [r7, #0]
    4edc:	429a      	cmp	r2, r3
    4ede:	d058      	beq.n	4f92 <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    4ee0:	683a      	ldr	r2, [r7, #0]
    4ee2:	68fb      	ldr	r3, [r7, #12]
    4ee4:	429a      	cmp	r2, r3
    4ee6:	d905      	bls.n	4ef4 <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    4ee8:	687b      	ldr	r3, [r7, #4]
    4eea:	2b00      	cmp	r3, #0
    4eec:	d007      	beq.n	4efe <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    4eee:	2301      	movs	r3, #1
    4ef0:	617b      	str	r3, [r7, #20]
    4ef2:	e004      	b.n	4efe <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    4ef4:	687b      	ldr	r3, [r7, #4]
    4ef6:	2b00      	cmp	r3, #0
    4ef8:	d101      	bne.n	4efe <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    4efa:	2301      	movs	r3, #1
    4efc:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    4efe:	693b      	ldr	r3, [r7, #16]
    4f00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4f02:	693b      	ldr	r3, [r7, #16]
    4f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4f06:	429a      	cmp	r2, r3
    4f08:	d102      	bne.n	4f10 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    4f0a:	693b      	ldr	r3, [r7, #16]
    4f0c:	683a      	ldr	r2, [r7, #0]
    4f0e:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    4f10:	693b      	ldr	r3, [r7, #16]
    4f12:	683a      	ldr	r2, [r7, #0]
    4f14:	64da      	str	r2, [r3, #76]	; 0x4c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    4f16:	683b      	ldr	r3, [r7, #0]
    4f18:	f1c3 0205 	rsb	r2, r3, #5
    4f1c:	693b      	ldr	r3, [r7, #16]
    4f1e:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    4f20:	693b      	ldr	r3, [r7, #16]
    4f22:	6959      	ldr	r1, [r3, #20]
    4f24:	68fa      	ldr	r2, [r7, #12]
    4f26:	4613      	mov	r3, r2
    4f28:	009b      	lsls	r3, r3, #2
    4f2a:	4413      	add	r3, r2
    4f2c:	009b      	lsls	r3, r3, #2
    4f2e:	f241 12e0 	movw	r2, #4576	; 0x11e0
    4f32:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4f36:	4413      	add	r3, r2
    4f38:	4299      	cmp	r1, r3
    4f3a:	d125      	bne.n	4f88 <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    4f3c:	693b      	ldr	r3, [r7, #16]
    4f3e:	3304      	adds	r3, #4
    4f40:	4618      	mov	r0, r3
    4f42:	f7ff f9c9 	bl	42d8 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4f46:	693b      	ldr	r3, [r7, #16]
    4f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4f4a:	f241 23c0 	movw	r3, #4800	; 0x12c0
    4f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f52:	681b      	ldr	r3, [r3, #0]
    4f54:	429a      	cmp	r2, r3
    4f56:	d906      	bls.n	4f66 <vTaskPrioritySet+0xda>
    4f58:	693b      	ldr	r3, [r7, #16]
    4f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4f5c:	f241 23c0 	movw	r3, #4800	; 0x12c0
    4f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f64:	601a      	str	r2, [r3, #0]
    4f66:	693b      	ldr	r3, [r7, #16]
    4f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4f6a:	4613      	mov	r3, r2
    4f6c:	009b      	lsls	r3, r3, #2
    4f6e:	4413      	add	r3, r2
    4f70:	009b      	lsls	r3, r3, #2
    4f72:	f241 12e0 	movw	r2, #4576	; 0x11e0
    4f76:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4f7a:	441a      	add	r2, r3
    4f7c:	693b      	ldr	r3, [r7, #16]
    4f7e:	3304      	adds	r3, #4
    4f80:	4610      	mov	r0, r2
    4f82:	4619      	mov	r1, r3
    4f84:	f7ff f948 	bl	4218 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    4f88:	697b      	ldr	r3, [r7, #20]
    4f8a:	2b01      	cmp	r3, #1
    4f8c:	d101      	bne.n	4f92 <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    4f8e:	f000 ff47 	bl	5e20 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    4f92:	f000 ff69 	bl	5e68 <vPortExitCritical>
	}
    4f96:	3718      	adds	r7, #24
    4f98:	46bd      	mov	sp, r7
    4f9a:	bd80      	pop	{r7, pc}

00004f9c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    4f9c:	b580      	push	{r7, lr}
    4f9e:	b084      	sub	sp, #16
    4fa0:	af00      	add	r7, sp, #0
    4fa2:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4fa4:	f000 ff4a 	bl	5e3c <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    4fa8:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fb0:	681b      	ldr	r3, [r3, #0]
    4fb2:	687a      	ldr	r2, [r7, #4]
    4fb4:	429a      	cmp	r2, r3
    4fb6:	d101      	bne.n	4fbc <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    4fb8:	2300      	movs	r3, #0
    4fba:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    4fbc:	687b      	ldr	r3, [r7, #4]
    4fbe:	2b00      	cmp	r3, #0
    4fc0:	d105      	bne.n	4fce <vTaskSuspend+0x32>
    4fc2:	f241 13dc 	movw	r3, #4572	; 0x11dc
    4fc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fca:	681b      	ldr	r3, [r3, #0]
    4fcc:	e000      	b.n	4fd0 <vTaskSuspend+0x34>
    4fce:	687b      	ldr	r3, [r7, #4]
    4fd0:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4fd2:	68fb      	ldr	r3, [r7, #12]
    4fd4:	3304      	adds	r3, #4
    4fd6:	4618      	mov	r0, r3
    4fd8:	f7ff f97e 	bl	42d8 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4fdc:	68fb      	ldr	r3, [r7, #12]
    4fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4fe0:	2b00      	cmp	r3, #0
    4fe2:	d004      	beq.n	4fee <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4fe4:	68fb      	ldr	r3, [r7, #12]
    4fe6:	3318      	adds	r3, #24
    4fe8:	4618      	mov	r0, r3
    4fea:	f7ff f975 	bl	42d8 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    4fee:	68fb      	ldr	r3, [r7, #12]
    4ff0:	3304      	adds	r3, #4
    4ff2:	f241 20a0 	movw	r0, #4768	; 0x12a0
    4ff6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4ffa:	4619      	mov	r1, r3
    4ffc:	f7ff f90c 	bl	4218 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    5000:	f000 ff32 	bl	5e68 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    5004:	687b      	ldr	r3, [r7, #4]
    5006:	2b00      	cmp	r3, #0
    5008:	d11e      	bne.n	5048 <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    500a:	f241 23c4 	movw	r3, #4804	; 0x12c4
    500e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5012:	681b      	ldr	r3, [r3, #0]
    5014:	2b00      	cmp	r3, #0
    5016:	d002      	beq.n	501e <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    5018:	f000 ff02 	bl	5e20 <vPortYieldFromISR>
    501c:	e014      	b.n	5048 <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    501e:	f241 23a0 	movw	r3, #4768	; 0x12a0
    5022:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5026:	681a      	ldr	r2, [r3, #0]
    5028:	f241 23b4 	movw	r3, #4788	; 0x12b4
    502c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5030:	681b      	ldr	r3, [r3, #0]
    5032:	429a      	cmp	r2, r3
    5034:	d106      	bne.n	5044 <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    5036:	f241 13dc 	movw	r3, #4572	; 0x11dc
    503a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    503e:	2200      	movs	r2, #0
    5040:	601a      	str	r2, [r3, #0]
    5042:	e001      	b.n	5048 <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    5044:	f000 fadc 	bl	5600 <vTaskSwitchContext>
				}
			}
		}
	}
    5048:	3710      	adds	r7, #16
    504a:	46bd      	mov	sp, r7
    504c:	bd80      	pop	{r7, pc}
    504e:	bf00      	nop

00005050 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    5050:	b480      	push	{r7}
    5052:	b085      	sub	sp, #20
    5054:	af00      	add	r7, sp, #0
    5056:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    5058:	2300      	movs	r3, #0
    505a:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    505c:	687b      	ldr	r3, [r7, #4]
    505e:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    5060:	68bb      	ldr	r3, [r7, #8]
    5062:	695a      	ldr	r2, [r3, #20]
    5064:	f241 23a0 	movw	r3, #4768	; 0x12a0
    5068:	f2c2 0300 	movt	r3, #8192	; 0x2000
    506c:	429a      	cmp	r2, r3
    506e:	d10d      	bne.n	508c <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    5070:	68bb      	ldr	r3, [r7, #8]
    5072:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5074:	f241 2374 	movw	r3, #4724	; 0x1274
    5078:	f2c2 0300 	movt	r3, #8192	; 0x2000
    507c:	429a      	cmp	r2, r3
    507e:	d005      	beq.n	508c <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    5080:	68bb      	ldr	r3, [r7, #8]
    5082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5084:	2b00      	cmp	r3, #0
    5086:	d101      	bne.n	508c <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    5088:	2301      	movs	r3, #1
    508a:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    508c:	68fb      	ldr	r3, [r7, #12]
	}
    508e:	4618      	mov	r0, r3
    5090:	3714      	adds	r7, #20
    5092:	46bd      	mov	sp, r7
    5094:	f85d 7b04 	ldr.w	r7, [sp], #4
    5098:	4770      	bx	lr
    509a:	bf00      	nop

0000509c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    509c:	b580      	push	{r7, lr}
    509e:	b084      	sub	sp, #16
    50a0:	af00      	add	r7, sp, #0
    50a2:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    50a4:	687b      	ldr	r3, [r7, #4]
    50a6:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    50a8:	68fb      	ldr	r3, [r7, #12]
    50aa:	2b00      	cmp	r3, #0
    50ac:	d043      	beq.n	5136 <vTaskResume+0x9a>
    50ae:	f241 13dc 	movw	r3, #4572	; 0x11dc
    50b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50b6:	681b      	ldr	r3, [r3, #0]
    50b8:	68fa      	ldr	r2, [r7, #12]
    50ba:	429a      	cmp	r2, r3
    50bc:	d03b      	beq.n	5136 <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    50be:	f000 febd 	bl	5e3c <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    50c2:	68f8      	ldr	r0, [r7, #12]
    50c4:	f7ff ffc4 	bl	5050 <xTaskIsTaskSuspended>
    50c8:	4603      	mov	r3, r0
    50ca:	2b01      	cmp	r3, #1
    50cc:	d131      	bne.n	5132 <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    50ce:	68fb      	ldr	r3, [r7, #12]
    50d0:	3304      	adds	r3, #4
    50d2:	4618      	mov	r0, r3
    50d4:	f7ff f900 	bl	42d8 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    50d8:	68fb      	ldr	r3, [r7, #12]
    50da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50dc:	f241 23c0 	movw	r3, #4800	; 0x12c0
    50e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50e4:	681b      	ldr	r3, [r3, #0]
    50e6:	429a      	cmp	r2, r3
    50e8:	d906      	bls.n	50f8 <vTaskResume+0x5c>
    50ea:	68fb      	ldr	r3, [r7, #12]
    50ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50ee:	f241 23c0 	movw	r3, #4800	; 0x12c0
    50f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50f6:	601a      	str	r2, [r3, #0]
    50f8:	68fb      	ldr	r3, [r7, #12]
    50fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50fc:	4613      	mov	r3, r2
    50fe:	009b      	lsls	r3, r3, #2
    5100:	4413      	add	r3, r2
    5102:	009b      	lsls	r3, r3, #2
    5104:	f241 12e0 	movw	r2, #4576	; 0x11e0
    5108:	f2c2 0200 	movt	r2, #8192	; 0x2000
    510c:	441a      	add	r2, r3
    510e:	68fb      	ldr	r3, [r7, #12]
    5110:	3304      	adds	r3, #4
    5112:	4610      	mov	r0, r2
    5114:	4619      	mov	r1, r3
    5116:	f7ff f87f 	bl	4218 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    511a:	68fb      	ldr	r3, [r7, #12]
    511c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    511e:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5122:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5126:	681b      	ldr	r3, [r3, #0]
    5128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    512a:	429a      	cmp	r2, r3
    512c:	d301      	bcc.n	5132 <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    512e:	f000 fe77 	bl	5e20 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    5132:	f000 fe99 	bl	5e68 <vPortExitCritical>
		}
	}
    5136:	3710      	adds	r7, #16
    5138:	46bd      	mov	sp, r7
    513a:	bd80      	pop	{r7, pc}

0000513c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    513c:	b580      	push	{r7, lr}
    513e:	b086      	sub	sp, #24
    5140:	af00      	add	r7, sp, #0
    5142:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    5144:	2300      	movs	r3, #0
    5146:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    5148:	687b      	ldr	r3, [r7, #4]
    514a:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    514c:	2300      	movs	r3, #0
    514e:	60fb      	str	r3, [r7, #12]
    5150:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5154:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    5158:	6938      	ldr	r0, [r7, #16]
    515a:	f7ff ff79 	bl	5050 <xTaskIsTaskSuspended>
    515e:	4603      	mov	r3, r0
    5160:	2b01      	cmp	r3, #1
    5162:	d144      	bne.n	51ee <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5164:	f241 23c8 	movw	r3, #4808	; 0x12c8
    5168:	f2c2 0300 	movt	r3, #8192	; 0x2000
    516c:	681b      	ldr	r3, [r3, #0]
    516e:	2b00      	cmp	r3, #0
    5170:	d134      	bne.n	51dc <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    5172:	693b      	ldr	r3, [r7, #16]
    5174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5176:	f241 13dc 	movw	r3, #4572	; 0x11dc
    517a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    517e:	681b      	ldr	r3, [r3, #0]
    5180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5182:	429a      	cmp	r2, r3
    5184:	bf34      	ite	cc
    5186:	2300      	movcc	r3, #0
    5188:	2301      	movcs	r3, #1
    518a:	b2db      	uxtb	r3, r3
    518c:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    518e:	693b      	ldr	r3, [r7, #16]
    5190:	3304      	adds	r3, #4
    5192:	4618      	mov	r0, r3
    5194:	f7ff f8a0 	bl	42d8 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    5198:	693b      	ldr	r3, [r7, #16]
    519a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    519c:	f241 23c0 	movw	r3, #4800	; 0x12c0
    51a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51a4:	681b      	ldr	r3, [r3, #0]
    51a6:	429a      	cmp	r2, r3
    51a8:	d906      	bls.n	51b8 <xTaskResumeFromISR+0x7c>
    51aa:	693b      	ldr	r3, [r7, #16]
    51ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    51ae:	f241 23c0 	movw	r3, #4800	; 0x12c0
    51b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51b6:	601a      	str	r2, [r3, #0]
    51b8:	693b      	ldr	r3, [r7, #16]
    51ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    51bc:	4613      	mov	r3, r2
    51be:	009b      	lsls	r3, r3, #2
    51c0:	4413      	add	r3, r2
    51c2:	009b      	lsls	r3, r3, #2
    51c4:	f241 12e0 	movw	r2, #4576	; 0x11e0
    51c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    51cc:	441a      	add	r2, r3
    51ce:	693b      	ldr	r3, [r7, #16]
    51d0:	3304      	adds	r3, #4
    51d2:	4610      	mov	r0, r2
    51d4:	4619      	mov	r1, r3
    51d6:	f7ff f81f 	bl	4218 <vListInsertEnd>
    51da:	e008      	b.n	51ee <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    51dc:	693b      	ldr	r3, [r7, #16]
    51de:	3318      	adds	r3, #24
    51e0:	f241 2074 	movw	r0, #4724	; 0x1274
    51e4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    51e8:	4619      	mov	r1, r3
    51ea:	f7ff f815 	bl	4218 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    51ee:	f04f 0000 	mov.w	r0, #0
    51f2:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    51f6:	697b      	ldr	r3, [r7, #20]
	}
    51f8:	4618      	mov	r0, r3
    51fa:	3718      	adds	r7, #24
    51fc:	46bd      	mov	sp, r7
    51fe:	bd80      	pop	{r7, pc}

00005200 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    5200:	b580      	push	{r7, lr}
    5202:	b086      	sub	sp, #24
    5204:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    5206:	2300      	movs	r3, #0
    5208:	9300      	str	r3, [sp, #0]
    520a:	2300      	movs	r3, #0
    520c:	9301      	str	r3, [sp, #4]
    520e:	2300      	movs	r3, #0
    5210:	9302      	str	r3, [sp, #8]
    5212:	2300      	movs	r3, #0
    5214:	9303      	str	r3, [sp, #12]
    5216:	f645 00b9 	movw	r0, #22713	; 0x58b9
    521a:	f2c0 0000 	movt	r0, #0
    521e:	f648 3198 	movw	r1, #35736	; 0x8b98
    5222:	f2c0 0101 	movt	r1, #1
    5226:	2280      	movs	r2, #128	; 0x80
    5228:	2300      	movs	r3, #0
    522a:	f7ff fc6b 	bl	4b04 <xTaskGenericCreate>
    522e:	6078      	str	r0, [r7, #4]
            
		}
	}
	#endif

	if( xReturn == pdPASS )
    5230:	687b      	ldr	r3, [r7, #4]
    5232:	2b01      	cmp	r3, #1
    5234:	d111      	bne.n	525a <vTaskStartScheduler+0x5a>
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */

		portDISABLE_INTERRUPTS();
    5236:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    523a:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    523e:	f241 23c4 	movw	r3, #4804	; 0x12c4
    5242:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5246:	2201      	movs	r2, #1
    5248:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    524a:	f241 23b8 	movw	r3, #4792	; 0x12b8
    524e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5252:	2200      	movs	r2, #0
    5254:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    5256:	f000 fdb5 	bl	5dc4 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    525a:	3708      	adds	r7, #8
    525c:	46bd      	mov	sp, r7
    525e:	bd80      	pop	{r7, pc}

00005260 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    5260:	b580      	push	{r7, lr}
    5262:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    5264:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5268:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    526c:	f241 23c4 	movw	r3, #4804	; 0x12c4
    5270:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5274:	2200      	movs	r2, #0
    5276:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    5278:	f000 fdcc 	bl	5e14 <vPortEndScheduler>
}
    527c:	bd80      	pop	{r7, pc}
    527e:	bf00      	nop

00005280 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    5280:	b480      	push	{r7}
    5282:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    5284:	f241 23c8 	movw	r3, #4808	; 0x12c8
    5288:	f2c2 0300 	movt	r3, #8192	; 0x2000
    528c:	681b      	ldr	r3, [r3, #0]
    528e:	1c5a      	adds	r2, r3, #1
    5290:	f241 23c8 	movw	r3, #4808	; 0x12c8
    5294:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5298:	601a      	str	r2, [r3, #0]
}
    529a:	46bd      	mov	sp, r7
    529c:	f85d 7b04 	ldr.w	r7, [sp], #4
    52a0:	4770      	bx	lr
    52a2:	bf00      	nop

000052a4 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    52a4:	b590      	push	{r4, r7, lr}
    52a6:	b083      	sub	sp, #12
    52a8:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    52aa:	2300      	movs	r3, #0
    52ac:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    52ae:	f000 fdc5 	bl	5e3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    52b2:	f241 23c8 	movw	r3, #4808	; 0x12c8
    52b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52ba:	681b      	ldr	r3, [r3, #0]
    52bc:	1e5a      	subs	r2, r3, #1
    52be:	f241 23c8 	movw	r3, #4808	; 0x12c8
    52c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52c6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    52c8:	f241 23c8 	movw	r3, #4808	; 0x12c8
    52cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52d0:	681b      	ldr	r3, [r3, #0]
    52d2:	2b00      	cmp	r3, #0
    52d4:	d177      	bne.n	53c6 <xTaskResumeAll+0x122>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    52d6:	f241 23b4 	movw	r3, #4788	; 0x12b4
    52da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52de:	681b      	ldr	r3, [r3, #0]
    52e0:	2b00      	cmp	r3, #0
    52e2:	d070      	beq.n	53c6 <xTaskResumeAll+0x122>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    52e4:	2300      	movs	r3, #0
    52e6:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    52e8:	e036      	b.n	5358 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    52ea:	f241 2374 	movw	r3, #4724	; 0x1274
    52ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52f2:	68db      	ldr	r3, [r3, #12]
    52f4:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    52f6:	f104 0318 	add.w	r3, r4, #24
    52fa:	4618      	mov	r0, r3
    52fc:	f7fe ffec 	bl	42d8 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    5300:	1d23      	adds	r3, r4, #4
    5302:	4618      	mov	r0, r3
    5304:	f7fe ffe8 	bl	42d8 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    5308:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    530a:	f241 23c0 	movw	r3, #4800	; 0x12c0
    530e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5312:	681b      	ldr	r3, [r3, #0]
    5314:	429a      	cmp	r2, r3
    5316:	d905      	bls.n	5324 <xTaskResumeAll+0x80>
    5318:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    531a:	f241 23c0 	movw	r3, #4800	; 0x12c0
    531e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5322:	601a      	str	r2, [r3, #0]
    5324:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5326:	4613      	mov	r3, r2
    5328:	009b      	lsls	r3, r3, #2
    532a:	4413      	add	r3, r2
    532c:	009b      	lsls	r3, r3, #2
    532e:	f241 12e0 	movw	r2, #4576	; 0x11e0
    5332:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5336:	441a      	add	r2, r3
    5338:	1d23      	adds	r3, r4, #4
    533a:	4610      	mov	r0, r2
    533c:	4619      	mov	r1, r3
    533e:	f7fe ff6b 	bl	4218 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5342:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5344:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5348:	f2c2 0300 	movt	r3, #8192	; 0x2000
    534c:	681b      	ldr	r3, [r3, #0]
    534e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5350:	429a      	cmp	r2, r3
    5352:	d301      	bcc.n	5358 <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    5354:	2301      	movs	r3, #1
    5356:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    5358:	f241 2374 	movw	r3, #4724	; 0x1274
    535c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5360:	681b      	ldr	r3, [r3, #0]
    5362:	2b00      	cmp	r3, #0
    5364:	d1c1      	bne.n	52ea <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    5366:	f241 23cc 	movw	r3, #4812	; 0x12cc
    536a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    536e:	681b      	ldr	r3, [r3, #0]
    5370:	2b00      	cmp	r3, #0
    5372:	d014      	beq.n	539e <xTaskResumeAll+0xfa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    5374:	e00c      	b.n	5390 <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    5376:	f000 f865 	bl	5444 <vTaskIncrementTick>
						--uxMissedTicks;
    537a:	f241 23cc 	movw	r3, #4812	; 0x12cc
    537e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5382:	681b      	ldr	r3, [r3, #0]
    5384:	1e5a      	subs	r2, r3, #1
    5386:	f241 23cc 	movw	r3, #4812	; 0x12cc
    538a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    538e:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    5390:	f241 23cc 	movw	r3, #4812	; 0x12cc
    5394:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5398:	681b      	ldr	r3, [r3, #0]
    539a:	2b00      	cmp	r3, #0
    539c:	d1eb      	bne.n	5376 <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    539e:	683b      	ldr	r3, [r7, #0]
    53a0:	2b01      	cmp	r3, #1
    53a2:	d006      	beq.n	53b2 <xTaskResumeAll+0x10e>
    53a4:	f241 23d0 	movw	r3, #4816	; 0x12d0
    53a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ac:	681b      	ldr	r3, [r3, #0]
    53ae:	2b01      	cmp	r3, #1
    53b0:	d109      	bne.n	53c6 <xTaskResumeAll+0x122>
				{
					xAlreadyYielded = pdTRUE;
    53b2:	2301      	movs	r3, #1
    53b4:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    53b6:	f241 23d0 	movw	r3, #4816	; 0x12d0
    53ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53be:	2200      	movs	r2, #0
    53c0:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    53c2:	f000 fd2d 	bl	5e20 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    53c6:	f000 fd4f 	bl	5e68 <vPortExitCritical>

	return xAlreadyYielded;
    53ca:	687b      	ldr	r3, [r7, #4]
}
    53cc:	4618      	mov	r0, r3
    53ce:	370c      	adds	r7, #12
    53d0:	46bd      	mov	sp, r7
    53d2:	bd90      	pop	{r4, r7, pc}

000053d4 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    53d4:	b580      	push	{r7, lr}
    53d6:	b082      	sub	sp, #8
    53d8:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    53da:	f000 fd2f 	bl	5e3c <vPortEnterCritical>
	{
		xTicks = xTickCount;
    53de:	f241 23b8 	movw	r3, #4792	; 0x12b8
    53e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53e6:	681b      	ldr	r3, [r3, #0]
    53e8:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    53ea:	f000 fd3d 	bl	5e68 <vPortExitCritical>

	return xTicks;
    53ee:	687b      	ldr	r3, [r7, #4]
}
    53f0:	4618      	mov	r0, r3
    53f2:	3708      	adds	r7, #8
    53f4:	46bd      	mov	sp, r7
    53f6:	bd80      	pop	{r7, pc}

000053f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    53f8:	b480      	push	{r7}
    53fa:	b083      	sub	sp, #12
    53fc:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    53fe:	2300      	movs	r3, #0
    5400:	607b      	str	r3, [r7, #4]
    5402:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5406:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    540a:	f241 23b8 	movw	r3, #4792	; 0x12b8
    540e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5412:	681b      	ldr	r3, [r3, #0]
    5414:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    5416:	f04f 0000 	mov.w	r0, #0
    541a:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    541e:	683b      	ldr	r3, [r7, #0]
}
    5420:	4618      	mov	r0, r3
    5422:	370c      	adds	r7, #12
    5424:	46bd      	mov	sp, r7
    5426:	f85d 7b04 	ldr.w	r7, [sp], #4
    542a:	4770      	bx	lr

0000542c <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    542c:	b480      	push	{r7}
    542e:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    5430:	f241 23b4 	movw	r3, #4788	; 0x12b4
    5434:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5438:	681b      	ldr	r3, [r3, #0]
}
    543a:	4618      	mov	r0, r3
    543c:	46bd      	mov	sp, r7
    543e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5442:	4770      	bx	lr

00005444 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    5444:	b580      	push	{r7, lr}
    5446:	b084      	sub	sp, #16
    5448:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    544a:	f241 23c8 	movw	r3, #4808	; 0x12c8
    544e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5452:	681b      	ldr	r3, [r3, #0]
    5454:	2b00      	cmp	r3, #0
    5456:	f040 80b9 	bne.w	55cc <vTaskIncrementTick+0x188>
	{
		++xTickCount;
    545a:	f241 23b8 	movw	r3, #4792	; 0x12b8
    545e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5462:	681b      	ldr	r3, [r3, #0]
    5464:	1c5a      	adds	r2, r3, #1
    5466:	f241 23b8 	movw	r3, #4792	; 0x12b8
    546a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    546e:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    5470:	f241 23b8 	movw	r3, #4792	; 0x12b8
    5474:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5478:	681b      	ldr	r3, [r3, #0]
    547a:	2b00      	cmp	r3, #0
    547c:	d13f      	bne.n	54fe <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    547e:	f241 236c 	movw	r3, #4716	; 0x126c
    5482:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5486:	681b      	ldr	r3, [r3, #0]
    5488:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    548a:	f241 2370 	movw	r3, #4720	; 0x1270
    548e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5492:	681a      	ldr	r2, [r3, #0]
    5494:	f241 236c 	movw	r3, #4716	; 0x126c
    5498:	f2c2 0300 	movt	r3, #8192	; 0x2000
    549c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    549e:	f241 2370 	movw	r3, #4720	; 0x1270
    54a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54a6:	68fa      	ldr	r2, [r7, #12]
    54a8:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    54aa:	f241 23d4 	movw	r3, #4820	; 0x12d4
    54ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54b2:	681b      	ldr	r3, [r3, #0]
    54b4:	1c5a      	adds	r2, r3, #1
    54b6:	f241 23d4 	movw	r3, #4820	; 0x12d4
    54ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54be:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    54c0:	f241 236c 	movw	r3, #4716	; 0x126c
    54c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54c8:	681b      	ldr	r3, [r3, #0]
    54ca:	681b      	ldr	r3, [r3, #0]
    54cc:	2b00      	cmp	r3, #0
    54ce:	d107      	bne.n	54e0 <vTaskIncrementTick+0x9c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    54d0:	f240 5330 	movw	r3, #1328	; 0x530
    54d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54d8:	f04f 32ff 	mov.w	r2, #4294967295
    54dc:	601a      	str	r2, [r3, #0]
    54de:	e00e      	b.n	54fe <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    54e0:	f241 236c 	movw	r3, #4716	; 0x126c
    54e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54e8:	681b      	ldr	r3, [r3, #0]
    54ea:	68db      	ldr	r3, [r3, #12]
    54ec:	68db      	ldr	r3, [r3, #12]
    54ee:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    54f0:	68bb      	ldr	r3, [r7, #8]
    54f2:	685a      	ldr	r2, [r3, #4]
    54f4:	f240 5330 	movw	r3, #1328	; 0x530
    54f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54fc:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    54fe:	f241 23b8 	movw	r3, #4792	; 0x12b8
    5502:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5506:	681a      	ldr	r2, [r3, #0]
    5508:	f240 5330 	movw	r3, #1328	; 0x530
    550c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5510:	681b      	ldr	r3, [r3, #0]
    5512:	429a      	cmp	r2, r3
    5514:	d359      	bcc.n	55ca <vTaskIncrementTick+0x186>
    5516:	f241 236c 	movw	r3, #4716	; 0x126c
    551a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    551e:	681b      	ldr	r3, [r3, #0]
    5520:	681b      	ldr	r3, [r3, #0]
    5522:	2b00      	cmp	r3, #0
    5524:	d107      	bne.n	5536 <vTaskIncrementTick+0xf2>
    5526:	f240 5330 	movw	r3, #1328	; 0x530
    552a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    552e:	f04f 32ff 	mov.w	r2, #4294967295
    5532:	601a      	str	r2, [r3, #0]
    5534:	e049      	b.n	55ca <vTaskIncrementTick+0x186>
    5536:	f241 236c 	movw	r3, #4716	; 0x126c
    553a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    553e:	681b      	ldr	r3, [r3, #0]
    5540:	68db      	ldr	r3, [r3, #12]
    5542:	68db      	ldr	r3, [r3, #12]
    5544:	60bb      	str	r3, [r7, #8]
    5546:	68bb      	ldr	r3, [r7, #8]
    5548:	685b      	ldr	r3, [r3, #4]
    554a:	607b      	str	r3, [r7, #4]
    554c:	f241 23b8 	movw	r3, #4792	; 0x12b8
    5550:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5554:	681a      	ldr	r2, [r3, #0]
    5556:	687b      	ldr	r3, [r7, #4]
    5558:	429a      	cmp	r2, r3
    555a:	d206      	bcs.n	556a <vTaskIncrementTick+0x126>
    555c:	f240 5330 	movw	r3, #1328	; 0x530
    5560:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5564:	687a      	ldr	r2, [r7, #4]
    5566:	601a      	str	r2, [r3, #0]
    5568:	e02f      	b.n	55ca <vTaskIncrementTick+0x186>
    556a:	68bb      	ldr	r3, [r7, #8]
    556c:	3304      	adds	r3, #4
    556e:	4618      	mov	r0, r3
    5570:	f7fe feb2 	bl	42d8 <vListRemove>
    5574:	68bb      	ldr	r3, [r7, #8]
    5576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5578:	2b00      	cmp	r3, #0
    557a:	d004      	beq.n	5586 <vTaskIncrementTick+0x142>
    557c:	68bb      	ldr	r3, [r7, #8]
    557e:	3318      	adds	r3, #24
    5580:	4618      	mov	r0, r3
    5582:	f7fe fea9 	bl	42d8 <vListRemove>
    5586:	68bb      	ldr	r3, [r7, #8]
    5588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    558a:	f241 23c0 	movw	r3, #4800	; 0x12c0
    558e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5592:	681b      	ldr	r3, [r3, #0]
    5594:	429a      	cmp	r2, r3
    5596:	d906      	bls.n	55a6 <vTaskIncrementTick+0x162>
    5598:	68bb      	ldr	r3, [r7, #8]
    559a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    559c:	f241 23c0 	movw	r3, #4800	; 0x12c0
    55a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55a4:	601a      	str	r2, [r3, #0]
    55a6:	68bb      	ldr	r3, [r7, #8]
    55a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    55aa:	4613      	mov	r3, r2
    55ac:	009b      	lsls	r3, r3, #2
    55ae:	4413      	add	r3, r2
    55b0:	009b      	lsls	r3, r3, #2
    55b2:	f241 12e0 	movw	r2, #4576	; 0x11e0
    55b6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    55ba:	441a      	add	r2, r3
    55bc:	68bb      	ldr	r3, [r7, #8]
    55be:	3304      	adds	r3, #4
    55c0:	4610      	mov	r0, r2
    55c2:	4619      	mov	r1, r3
    55c4:	f7fe fe28 	bl	4218 <vListInsertEnd>
    55c8:	e7a5      	b.n	5516 <vTaskIncrementTick+0xd2>
    55ca:	e00c      	b.n	55e6 <vTaskIncrementTick+0x1a2>
	}
	else
	{
		++uxMissedTicks;
    55cc:	f241 23cc 	movw	r3, #4812	; 0x12cc
    55d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55d4:	681b      	ldr	r3, [r3, #0]
    55d6:	1c5a      	adds	r2, r3, #1
    55d8:	f241 23cc 	movw	r3, #4812	; 0x12cc
    55dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55e0:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    55e2:	f012 f9db 	bl	1799c <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    55e6:	f241 23cc 	movw	r3, #4812	; 0x12cc
    55ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55ee:	681b      	ldr	r3, [r3, #0]
    55f0:	2b00      	cmp	r3, #0
    55f2:	d101      	bne.n	55f8 <vTaskIncrementTick+0x1b4>
		{
			vApplicationTickHook();
    55f4:	f012 f9d2 	bl	1799c <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    55f8:	3710      	adds	r7, #16
    55fa:	46bd      	mov	sp, r7
    55fc:	bd80      	pop	{r7, pc}
    55fe:	bf00      	nop

00005600 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    5600:	b580      	push	{r7, lr}
    5602:	b082      	sub	sp, #8
    5604:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    5606:	f241 23c8 	movw	r3, #4808	; 0x12c8
    560a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    560e:	681b      	ldr	r3, [r3, #0]
    5610:	2b00      	cmp	r3, #0
    5612:	d006      	beq.n	5622 <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    5614:	f241 23d0 	movw	r3, #4816	; 0x12d0
    5618:	f2c2 0300 	movt	r3, #8192	; 0x2000
    561c:	2201      	movs	r2, #1
    561e:	601a      	str	r2, [r3, #0]
    5620:	e047      	b.n	56b2 <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    5622:	f012 f9b5 	bl	17990 <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    5626:	e00a      	b.n	563e <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    5628:	f241 23c0 	movw	r3, #4800	; 0x12c0
    562c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5630:	681b      	ldr	r3, [r3, #0]
    5632:	1e5a      	subs	r2, r3, #1
    5634:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    563c:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    563e:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5642:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5646:	6819      	ldr	r1, [r3, #0]
    5648:	f241 12e0 	movw	r2, #4576	; 0x11e0
    564c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5650:	460b      	mov	r3, r1
    5652:	009b      	lsls	r3, r3, #2
    5654:	440b      	add	r3, r1
    5656:	009b      	lsls	r3, r3, #2
    5658:	4413      	add	r3, r2
    565a:	681b      	ldr	r3, [r3, #0]
    565c:	2b00      	cmp	r3, #0
    565e:	d0e3      	beq.n	5628 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    5660:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5664:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5668:	681a      	ldr	r2, [r3, #0]
    566a:	4613      	mov	r3, r2
    566c:	009b      	lsls	r3, r3, #2
    566e:	4413      	add	r3, r2
    5670:	009b      	lsls	r3, r3, #2
    5672:	f241 12e0 	movw	r2, #4576	; 0x11e0
    5676:	f2c2 0200 	movt	r2, #8192	; 0x2000
    567a:	4413      	add	r3, r2
    567c:	607b      	str	r3, [r7, #4]
    567e:	687b      	ldr	r3, [r7, #4]
    5680:	685b      	ldr	r3, [r3, #4]
    5682:	685a      	ldr	r2, [r3, #4]
    5684:	687b      	ldr	r3, [r7, #4]
    5686:	605a      	str	r2, [r3, #4]
    5688:	687b      	ldr	r3, [r7, #4]
    568a:	685a      	ldr	r2, [r3, #4]
    568c:	687b      	ldr	r3, [r7, #4]
    568e:	3308      	adds	r3, #8
    5690:	429a      	cmp	r2, r3
    5692:	d104      	bne.n	569e <vTaskSwitchContext+0x9e>
    5694:	687b      	ldr	r3, [r7, #4]
    5696:	685b      	ldr	r3, [r3, #4]
    5698:	685a      	ldr	r2, [r3, #4]
    569a:	687b      	ldr	r3, [r7, #4]
    569c:	605a      	str	r2, [r3, #4]
    569e:	687b      	ldr	r3, [r7, #4]
    56a0:	685b      	ldr	r3, [r3, #4]
    56a2:	68da      	ldr	r2, [r3, #12]
    56a4:	f241 13dc 	movw	r3, #4572	; 0x11dc
    56a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56ac:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
    56ae:	f012 f969 	bl	17984 <myTraceSwitchedIn>
	}
}
    56b2:	3708      	adds	r7, #8
    56b4:	46bd      	mov	sp, r7
    56b6:	bd80      	pop	{r7, pc}

000056b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    56b8:	b580      	push	{r7, lr}
    56ba:	b084      	sub	sp, #16
    56bc:	af00      	add	r7, sp, #0
    56be:	6078      	str	r0, [r7, #4]
    56c0:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    56c2:	f241 13dc 	movw	r3, #4572	; 0x11dc
    56c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56ca:	681b      	ldr	r3, [r3, #0]
    56cc:	3318      	adds	r3, #24
    56ce:	6878      	ldr	r0, [r7, #4]
    56d0:	4619      	mov	r1, r3
    56d2:	f7fe fdc9 	bl	4268 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    56d6:	f241 13dc 	movw	r3, #4572	; 0x11dc
    56da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56de:	681b      	ldr	r3, [r3, #0]
    56e0:	3304      	adds	r3, #4
    56e2:	4618      	mov	r0, r3
    56e4:	f7fe fdf8 	bl	42d8 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    56e8:	683b      	ldr	r3, [r7, #0]
    56ea:	f1b3 3fff 	cmp.w	r3, #4294967295
    56ee:	d10d      	bne.n	570c <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    56f0:	f241 13dc 	movw	r3, #4572	; 0x11dc
    56f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56f8:	681b      	ldr	r3, [r3, #0]
    56fa:	3304      	adds	r3, #4
    56fc:	f241 20a0 	movw	r0, #4768	; 0x12a0
    5700:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5704:	4619      	mov	r1, r3
    5706:	f7fe fd87 	bl	4218 <vListInsertEnd>
    570a:	e00a      	b.n	5722 <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    570c:	f241 23b8 	movw	r3, #4792	; 0x12b8
    5710:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5714:	681a      	ldr	r2, [r3, #0]
    5716:	683b      	ldr	r3, [r7, #0]
    5718:	4413      	add	r3, r2
    571a:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    571c:	68f8      	ldr	r0, [r7, #12]
    571e:	f000 f99f 	bl	5a60 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    5722:	3710      	adds	r7, #16
    5724:	46bd      	mov	sp, r7
    5726:	bd80      	pop	{r7, pc}

00005728 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    5728:	b580      	push	{r7, lr}
    572a:	b084      	sub	sp, #16
    572c:	af00      	add	r7, sp, #0
    572e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    5730:	687b      	ldr	r3, [r7, #4]
    5732:	68db      	ldr	r3, [r3, #12]
    5734:	68db      	ldr	r3, [r3, #12]
    5736:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    5738:	68bb      	ldr	r3, [r7, #8]
    573a:	3318      	adds	r3, #24
    573c:	4618      	mov	r0, r3
    573e:	f7fe fdcb 	bl	42d8 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5742:	f241 23c8 	movw	r3, #4808	; 0x12c8
    5746:	f2c2 0300 	movt	r3, #8192	; 0x2000
    574a:	681b      	ldr	r3, [r3, #0]
    574c:	2b00      	cmp	r3, #0
    574e:	d126      	bne.n	579e <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    5750:	68bb      	ldr	r3, [r7, #8]
    5752:	3304      	adds	r3, #4
    5754:	4618      	mov	r0, r3
    5756:	f7fe fdbf 	bl	42d8 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    575a:	68bb      	ldr	r3, [r7, #8]
    575c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    575e:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5762:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5766:	681b      	ldr	r3, [r3, #0]
    5768:	429a      	cmp	r2, r3
    576a:	d906      	bls.n	577a <xTaskRemoveFromEventList+0x52>
    576c:	68bb      	ldr	r3, [r7, #8]
    576e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5770:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5774:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5778:	601a      	str	r2, [r3, #0]
    577a:	68bb      	ldr	r3, [r7, #8]
    577c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    577e:	4613      	mov	r3, r2
    5780:	009b      	lsls	r3, r3, #2
    5782:	4413      	add	r3, r2
    5784:	009b      	lsls	r3, r3, #2
    5786:	f241 12e0 	movw	r2, #4576	; 0x11e0
    578a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    578e:	441a      	add	r2, r3
    5790:	68bb      	ldr	r3, [r7, #8]
    5792:	3304      	adds	r3, #4
    5794:	4610      	mov	r0, r2
    5796:	4619      	mov	r1, r3
    5798:	f7fe fd3e 	bl	4218 <vListInsertEnd>
    579c:	e008      	b.n	57b0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    579e:	68bb      	ldr	r3, [r7, #8]
    57a0:	3318      	adds	r3, #24
    57a2:	f241 2074 	movw	r0, #4724	; 0x1274
    57a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    57aa:	4619      	mov	r1, r3
    57ac:	f7fe fd34 	bl	4218 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    57b0:	68bb      	ldr	r3, [r7, #8]
    57b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    57b4:	f241 13dc 	movw	r3, #4572	; 0x11dc
    57b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57bc:	681b      	ldr	r3, [r3, #0]
    57be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    57c0:	429a      	cmp	r2, r3
    57c2:	d302      	bcc.n	57ca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    57c4:	2301      	movs	r3, #1
    57c6:	60fb      	str	r3, [r7, #12]
    57c8:	e001      	b.n	57ce <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    57ca:	2300      	movs	r3, #0
    57cc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    57ce:	68fb      	ldr	r3, [r7, #12]
}
    57d0:	4618      	mov	r0, r3
    57d2:	3710      	adds	r7, #16
    57d4:	46bd      	mov	sp, r7
    57d6:	bd80      	pop	{r7, pc}

000057d8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    57d8:	b480      	push	{r7}
    57da:	b083      	sub	sp, #12
    57dc:	af00      	add	r7, sp, #0
    57de:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    57e0:	f241 23d4 	movw	r3, #4820	; 0x12d4
    57e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57e8:	681a      	ldr	r2, [r3, #0]
    57ea:	687b      	ldr	r3, [r7, #4]
    57ec:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    57ee:	f241 23b8 	movw	r3, #4792	; 0x12b8
    57f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57f6:	681a      	ldr	r2, [r3, #0]
    57f8:	687b      	ldr	r3, [r7, #4]
    57fa:	605a      	str	r2, [r3, #4]
}
    57fc:	370c      	adds	r7, #12
    57fe:	46bd      	mov	sp, r7
    5800:	f85d 7b04 	ldr.w	r7, [sp], #4
    5804:	4770      	bx	lr
    5806:	bf00      	nop

00005808 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    5808:	b580      	push	{r7, lr}
    580a:	b084      	sub	sp, #16
    580c:	af00      	add	r7, sp, #0
    580e:	6078      	str	r0, [r7, #4]
    5810:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    5812:	f000 fb13 	bl	5e3c <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    5816:	683b      	ldr	r3, [r7, #0]
    5818:	681b      	ldr	r3, [r3, #0]
    581a:	f1b3 3fff 	cmp.w	r3, #4294967295
    581e:	d102      	bne.n	5826 <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    5820:	2300      	movs	r3, #0
    5822:	60fb      	str	r3, [r7, #12]
    5824:	e035      	b.n	5892 <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    5826:	687b      	ldr	r3, [r7, #4]
    5828:	681a      	ldr	r2, [r3, #0]
    582a:	f241 23d4 	movw	r3, #4820	; 0x12d4
    582e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5832:	681b      	ldr	r3, [r3, #0]
    5834:	429a      	cmp	r2, r3
    5836:	d00b      	beq.n	5850 <xTaskCheckForTimeOut+0x48>
    5838:	687b      	ldr	r3, [r7, #4]
    583a:	685a      	ldr	r2, [r3, #4]
    583c:	f241 23b8 	movw	r3, #4792	; 0x12b8
    5840:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5844:	681b      	ldr	r3, [r3, #0]
    5846:	429a      	cmp	r2, r3
    5848:	d802      	bhi.n	5850 <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    584a:	2301      	movs	r3, #1
    584c:	60fb      	str	r3, [r7, #12]
    584e:	e020      	b.n	5892 <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    5850:	f241 23b8 	movw	r3, #4792	; 0x12b8
    5854:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5858:	681a      	ldr	r2, [r3, #0]
    585a:	687b      	ldr	r3, [r7, #4]
    585c:	685b      	ldr	r3, [r3, #4]
    585e:	1ad2      	subs	r2, r2, r3
    5860:	683b      	ldr	r3, [r7, #0]
    5862:	681b      	ldr	r3, [r3, #0]
    5864:	429a      	cmp	r2, r3
    5866:	d212      	bcs.n	588e <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    5868:	683b      	ldr	r3, [r7, #0]
    586a:	681a      	ldr	r2, [r3, #0]
    586c:	687b      	ldr	r3, [r7, #4]
    586e:	6859      	ldr	r1, [r3, #4]
    5870:	f241 23b8 	movw	r3, #4792	; 0x12b8
    5874:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5878:	681b      	ldr	r3, [r3, #0]
    587a:	1acb      	subs	r3, r1, r3
    587c:	441a      	add	r2, r3
    587e:	683b      	ldr	r3, [r7, #0]
    5880:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    5882:	6878      	ldr	r0, [r7, #4]
    5884:	f7ff ffa8 	bl	57d8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    5888:	2300      	movs	r3, #0
    588a:	60fb      	str	r3, [r7, #12]
    588c:	e001      	b.n	5892 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    588e:	2301      	movs	r3, #1
    5890:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    5892:	f000 fae9 	bl	5e68 <vPortExitCritical>

	return xReturn;
    5896:	68fb      	ldr	r3, [r7, #12]
}
    5898:	4618      	mov	r0, r3
    589a:	3710      	adds	r7, #16
    589c:	46bd      	mov	sp, r7
    589e:	bd80      	pop	{r7, pc}

000058a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    58a0:	b480      	push	{r7}
    58a2:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    58a4:	f241 23d0 	movw	r3, #4816	; 0x12d0
    58a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58ac:	2201      	movs	r2, #1
    58ae:	601a      	str	r2, [r3, #0]
}
    58b0:	46bd      	mov	sp, r7
    58b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    58b6:	4770      	bx	lr

000058b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    58b8:	b580      	push	{r7, lr}
    58ba:	b082      	sub	sp, #8
    58bc:	af00      	add	r7, sp, #0
    58be:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    58c0:	f000 f886 	bl	59d0 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    58c4:	f000 faac 	bl	5e20 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    58c8:	e7fa      	b.n	58c0 <prvIdleTask+0x8>
    58ca:	bf00      	nop

000058cc <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    58cc:	b580      	push	{r7, lr}
    58ce:	b084      	sub	sp, #16
    58d0:	af00      	add	r7, sp, #0
    58d2:	60f8      	str	r0, [r7, #12]
    58d4:	60b9      	str	r1, [r7, #8]
    58d6:	607a      	str	r2, [r7, #4]
    58d8:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    58da:	68fb      	ldr	r3, [r7, #12]
    58dc:	3334      	adds	r3, #52	; 0x34
    58de:	4618      	mov	r0, r3
    58e0:	68b9      	ldr	r1, [r7, #8]
    58e2:	2210      	movs	r2, #16
    58e4:	f013 f8f6 	bl	18ad4 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    58e8:	68fb      	ldr	r3, [r7, #12]
    58ea:	2200      	movs	r2, #0
    58ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    58f0:	687b      	ldr	r3, [r7, #4]
    58f2:	2b04      	cmp	r3, #4
    58f4:	d901      	bls.n	58fa <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    58f6:	2304      	movs	r3, #4
    58f8:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    58fa:	68fb      	ldr	r3, [r7, #12]
    58fc:	687a      	ldr	r2, [r7, #4]
    58fe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    5900:	68fb      	ldr	r3, [r7, #12]
    5902:	687a      	ldr	r2, [r7, #4]
    5904:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    5906:	68fb      	ldr	r3, [r7, #12]
    5908:	3304      	adds	r3, #4
    590a:	4618      	mov	r0, r3
    590c:	f7fe fc78 	bl	4200 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    5910:	68fb      	ldr	r3, [r7, #12]
    5912:	3318      	adds	r3, #24
    5914:	4618      	mov	r0, r3
    5916:	f7fe fc73 	bl	4200 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    591a:	68fb      	ldr	r3, [r7, #12]
    591c:	68fa      	ldr	r2, [r7, #12]
    591e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    5920:	687b      	ldr	r3, [r7, #4]
    5922:	f1c3 0205 	rsb	r2, r3, #5
    5926:	68fb      	ldr	r3, [r7, #12]
    5928:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    592a:	68fb      	ldr	r3, [r7, #12]
    592c:	68fa      	ldr	r2, [r7, #12]
    592e:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    5930:	3710      	adds	r7, #16
    5932:	46bd      	mov	sp, r7
    5934:	bd80      	pop	{r7, pc}
    5936:	bf00      	nop

00005938 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    5938:	b580      	push	{r7, lr}
    593a:	b082      	sub	sp, #8
    593c:	af00      	add	r7, sp, #0
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    593e:	2300      	movs	r3, #0
    5940:	607b      	str	r3, [r7, #4]
    5942:	e00f      	b.n	5964 <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    5944:	687a      	ldr	r2, [r7, #4]
    5946:	4613      	mov	r3, r2
    5948:	009b      	lsls	r3, r3, #2
    594a:	4413      	add	r3, r2
    594c:	009b      	lsls	r3, r3, #2
    594e:	f241 12e0 	movw	r2, #4576	; 0x11e0
    5952:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5956:	4413      	add	r3, r2
    5958:	4618      	mov	r0, r3
    595a:	f7fe fc31 	bl	41c0 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    595e:	687b      	ldr	r3, [r7, #4]
    5960:	3301      	adds	r3, #1
    5962:	607b      	str	r3, [r7, #4]
    5964:	687b      	ldr	r3, [r7, #4]
    5966:	2b04      	cmp	r3, #4
    5968:	d9ec      	bls.n	5944 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    596a:	f241 2044 	movw	r0, #4676	; 0x1244
    596e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5972:	f7fe fc25 	bl	41c0 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    5976:	f241 2058 	movw	r0, #4696	; 0x1258
    597a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    597e:	f7fe fc1f 	bl	41c0 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    5982:	f241 2074 	movw	r0, #4724	; 0x1274
    5986:	f2c2 0000 	movt	r0, #8192	; 0x2000
    598a:	f7fe fc19 	bl	41c0 <vListInitialise>


	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    598e:	f241 2088 	movw	r0, #4744	; 0x1288
    5992:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5996:	f7fe fc13 	bl	41c0 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    599a:	f241 20a0 	movw	r0, #4768	; 0x12a0
    599e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    59a2:	f7fe fc0d 	bl	41c0 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    59a6:	f241 236c 	movw	r3, #4716	; 0x126c
    59aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59ae:	f241 2244 	movw	r2, #4676	; 0x1244
    59b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    59b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    59b8:	f241 2370 	movw	r3, #4720	; 0x1270
    59bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59c0:	f241 2258 	movw	r2, #4696	; 0x1258
    59c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    59c8:	601a      	str	r2, [r3, #0]
}
    59ca:	3708      	adds	r7, #8
    59cc:	46bd      	mov	sp, r7
    59ce:	bd80      	pop	{r7, pc}

000059d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    59d0:	b580      	push	{r7, lr}
    59d2:	b082      	sub	sp, #8
    59d4:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    59d6:	f241 239c 	movw	r3, #4764	; 0x129c
    59da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59de:	681b      	ldr	r3, [r3, #0]
    59e0:	2b00      	cmp	r3, #0
    59e2:	d03a      	beq.n	5a5a <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    59e4:	f7ff fc4c 	bl	5280 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    59e8:	f241 2388 	movw	r3, #4744	; 0x1288
    59ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59f0:	681b      	ldr	r3, [r3, #0]
    59f2:	2b00      	cmp	r3, #0
    59f4:	bf14      	ite	ne
    59f6:	2300      	movne	r3, #0
    59f8:	2301      	moveq	r3, #1
    59fa:	b2db      	uxtb	r3, r3
    59fc:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    59fe:	f7ff fc51 	bl	52a4 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    5a02:	687b      	ldr	r3, [r7, #4]
    5a04:	2b00      	cmp	r3, #0
    5a06:	d128      	bne.n	5a5a <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    5a08:	f000 fa18 	bl	5e3c <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    5a0c:	f241 2388 	movw	r3, #4744	; 0x1288
    5a10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a14:	68db      	ldr	r3, [r3, #12]
    5a16:	68db      	ldr	r3, [r3, #12]
    5a18:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    5a1a:	683b      	ldr	r3, [r7, #0]
    5a1c:	3304      	adds	r3, #4
    5a1e:	4618      	mov	r0, r3
    5a20:	f7fe fc5a 	bl	42d8 <vListRemove>
					--uxCurrentNumberOfTasks;
    5a24:	f241 23b4 	movw	r3, #4788	; 0x12b4
    5a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a2c:	681b      	ldr	r3, [r3, #0]
    5a2e:	1e5a      	subs	r2, r3, #1
    5a30:	f241 23b4 	movw	r3, #4788	; 0x12b4
    5a34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a38:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    5a3a:	f241 239c 	movw	r3, #4764	; 0x129c
    5a3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a42:	681b      	ldr	r3, [r3, #0]
    5a44:	1e5a      	subs	r2, r3, #1
    5a46:	f241 239c 	movw	r3, #4764	; 0x129c
    5a4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a4e:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    5a50:	f000 fa0a 	bl	5e68 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    5a54:	6838      	ldr	r0, [r7, #0]
    5a56:	f000 f879 	bl	5b4c <prvDeleteTCB>
			}
		}
	}
	#endif
}
    5a5a:	3708      	adds	r7, #8
    5a5c:	46bd      	mov	sp, r7
    5a5e:	bd80      	pop	{r7, pc}

00005a60 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    5a60:	b580      	push	{r7, lr}
    5a62:	b082      	sub	sp, #8
    5a64:	af00      	add	r7, sp, #0
    5a66:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    5a68:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5a6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a70:	681b      	ldr	r3, [r3, #0]
    5a72:	687a      	ldr	r2, [r7, #4]
    5a74:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    5a76:	f241 23b8 	movw	r3, #4792	; 0x12b8
    5a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a7e:	681b      	ldr	r3, [r3, #0]
    5a80:	687a      	ldr	r2, [r7, #4]
    5a82:	429a      	cmp	r2, r3
    5a84:	d20f      	bcs.n	5aa6 <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5a86:	f241 2370 	movw	r3, #4720	; 0x1270
    5a8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a8e:	681a      	ldr	r2, [r3, #0]
    5a90:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a98:	681b      	ldr	r3, [r3, #0]
    5a9a:	3304      	adds	r3, #4
    5a9c:	4610      	mov	r0, r2
    5a9e:	4619      	mov	r1, r3
    5aa0:	f7fe fbe2 	bl	4268 <vListInsert>
    5aa4:	e01c      	b.n	5ae0 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5aa6:	f241 236c 	movw	r3, #4716	; 0x126c
    5aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5aae:	681a      	ldr	r2, [r3, #0]
    5ab0:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5ab4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ab8:	681b      	ldr	r3, [r3, #0]
    5aba:	3304      	adds	r3, #4
    5abc:	4610      	mov	r0, r2
    5abe:	4619      	mov	r1, r3
    5ac0:	f7fe fbd2 	bl	4268 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    5ac4:	f240 5330 	movw	r3, #1328	; 0x530
    5ac8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5acc:	681b      	ldr	r3, [r3, #0]
    5ace:	687a      	ldr	r2, [r7, #4]
    5ad0:	429a      	cmp	r2, r3
    5ad2:	d205      	bcs.n	5ae0 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    5ad4:	f240 5330 	movw	r3, #1328	; 0x530
    5ad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5adc:	687a      	ldr	r2, [r7, #4]
    5ade:	601a      	str	r2, [r3, #0]
		}
	}
}
    5ae0:	3708      	adds	r7, #8
    5ae2:	46bd      	mov	sp, r7
    5ae4:	bd80      	pop	{r7, pc}
    5ae6:	bf00      	nop

00005ae8 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    5ae8:	b580      	push	{r7, lr}
    5aea:	b084      	sub	sp, #16
    5aec:	af00      	add	r7, sp, #0
    5aee:	4603      	mov	r3, r0
    5af0:	6039      	str	r1, [r7, #0]
    5af2:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    5af4:	2050      	movs	r0, #80	; 0x50
    5af6:	f000 fa1b 	bl	5f30 <pvPortMalloc>
    5afa:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    5afc:	68fb      	ldr	r3, [r7, #12]
    5afe:	2b00      	cmp	r3, #0
    5b00:	d01f      	beq.n	5b42 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    5b02:	683b      	ldr	r3, [r7, #0]
    5b04:	2b00      	cmp	r3, #0
    5b06:	d106      	bne.n	5b16 <prvAllocateTCBAndStack+0x2e>
    5b08:	88fb      	ldrh	r3, [r7, #6]
    5b0a:	009b      	lsls	r3, r3, #2
    5b0c:	4618      	mov	r0, r3
    5b0e:	f000 fa0f 	bl	5f30 <pvPortMalloc>
    5b12:	4603      	mov	r3, r0
    5b14:	e000      	b.n	5b18 <prvAllocateTCBAndStack+0x30>
    5b16:	683b      	ldr	r3, [r7, #0]
    5b18:	68fa      	ldr	r2, [r7, #12]
    5b1a:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    5b1c:	68fb      	ldr	r3, [r7, #12]
    5b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5b20:	2b00      	cmp	r3, #0
    5b22:	d105      	bne.n	5b30 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    5b24:	68f8      	ldr	r0, [r7, #12]
    5b26:	f000 fac7 	bl	60b8 <vPortFree>
			pxNewTCB = NULL;
    5b2a:	2300      	movs	r3, #0
    5b2c:	60fb      	str	r3, [r7, #12]
    5b2e:	e008      	b.n	5b42 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    5b30:	68fb      	ldr	r3, [r7, #12]
    5b32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    5b34:	88fb      	ldrh	r3, [r7, #6]
    5b36:	009b      	lsls	r3, r3, #2
    5b38:	4610      	mov	r0, r2
    5b3a:	21a5      	movs	r1, #165	; 0xa5
    5b3c:	461a      	mov	r2, r3
    5b3e:	f012 ff79 	bl	18a34 <memset>
		}
	}

	return pxNewTCB;
    5b42:	68fb      	ldr	r3, [r7, #12]
}
    5b44:	4618      	mov	r0, r3
    5b46:	3710      	adds	r7, #16
    5b48:	46bd      	mov	sp, r7
    5b4a:	bd80      	pop	{r7, pc}

00005b4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    5b4c:	b580      	push	{r7, lr}
    5b4e:	b082      	sub	sp, #8
    5b50:	af00      	add	r7, sp, #0
    5b52:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    5b54:	687b      	ldr	r3, [r7, #4]
    5b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5b58:	4618      	mov	r0, r3
    5b5a:	f000 faad 	bl	60b8 <vPortFree>
		vPortFree( pxTCB );
    5b5e:	6878      	ldr	r0, [r7, #4]
    5b60:	f000 faaa 	bl	60b8 <vPortFree>
	}
    5b64:	3708      	adds	r7, #8
    5b66:	46bd      	mov	sp, r7
    5b68:	bd80      	pop	{r7, pc}
    5b6a:	bf00      	nop

00005b6c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    5b6c:	b480      	push	{r7}
    5b6e:	b083      	sub	sp, #12
    5b70:	af00      	add	r7, sp, #0
        xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    5b72:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5b76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b7a:	681b      	ldr	r3, [r3, #0]
    5b7c:	607b      	str	r3, [r7, #4]

		return xReturn;
    5b7e:	687b      	ldr	r3, [r7, #4]
	}
    5b80:	4618      	mov	r0, r3
    5b82:	370c      	adds	r7, #12
    5b84:	46bd      	mov	sp, r7
    5b86:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b8a:	4770      	bx	lr

00005b8c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    5b8c:	b580      	push	{r7, lr}
    5b8e:	b084      	sub	sp, #16
    5b90:	af00      	add	r7, sp, #0
    5b92:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5b94:	687b      	ldr	r3, [r7, #4]
    5b96:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    5b98:	68fb      	ldr	r3, [r7, #12]
    5b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b9c:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5ba0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ba4:	681b      	ldr	r3, [r3, #0]
    5ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5ba8:	429a      	cmp	r2, r3
    5baa:	d24f      	bcs.n	5c4c <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    5bac:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5bb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bb4:	681b      	ldr	r3, [r3, #0]
    5bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5bb8:	f1c3 0205 	rsb	r2, r3, #5
    5bbc:	68fb      	ldr	r3, [r7, #12]
    5bbe:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    5bc0:	68fb      	ldr	r3, [r7, #12]
    5bc2:	6959      	ldr	r1, [r3, #20]
    5bc4:	68fb      	ldr	r3, [r7, #12]
    5bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5bc8:	4613      	mov	r3, r2
    5bca:	009b      	lsls	r3, r3, #2
    5bcc:	4413      	add	r3, r2
    5bce:	009b      	lsls	r3, r3, #2
    5bd0:	f241 12e0 	movw	r2, #4576	; 0x11e0
    5bd4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5bd8:	4413      	add	r3, r2
    5bda:	4299      	cmp	r1, r3
    5bdc:	d12e      	bne.n	5c3c <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    5bde:	68fb      	ldr	r3, [r7, #12]
    5be0:	3304      	adds	r3, #4
    5be2:	4618      	mov	r0, r3
    5be4:	f7fe fb78 	bl	42d8 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5be8:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bf0:	681b      	ldr	r3, [r3, #0]
    5bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5bf4:	68fb      	ldr	r3, [r7, #12]
    5bf6:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    5bf8:	68fb      	ldr	r3, [r7, #12]
    5bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5bfc:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c04:	681b      	ldr	r3, [r3, #0]
    5c06:	429a      	cmp	r2, r3
    5c08:	d906      	bls.n	5c18 <vTaskPriorityInherit+0x8c>
    5c0a:	68fb      	ldr	r3, [r7, #12]
    5c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c0e:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c16:	601a      	str	r2, [r3, #0]
    5c18:	68fb      	ldr	r3, [r7, #12]
    5c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c1c:	4613      	mov	r3, r2
    5c1e:	009b      	lsls	r3, r3, #2
    5c20:	4413      	add	r3, r2
    5c22:	009b      	lsls	r3, r3, #2
    5c24:	f241 12e0 	movw	r2, #4576	; 0x11e0
    5c28:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5c2c:	441a      	add	r2, r3
    5c2e:	68fb      	ldr	r3, [r7, #12]
    5c30:	3304      	adds	r3, #4
    5c32:	4610      	mov	r0, r2
    5c34:	4619      	mov	r1, r3
    5c36:	f7fe faef 	bl	4218 <vListInsertEnd>
    5c3a:	e007      	b.n	5c4c <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5c3c:	f241 13dc 	movw	r3, #4572	; 0x11dc
    5c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c44:	681b      	ldr	r3, [r3, #0]
    5c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c48:	68fb      	ldr	r3, [r7, #12]
    5c4a:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    5c4c:	3710      	adds	r7, #16
    5c4e:	46bd      	mov	sp, r7
    5c50:	bd80      	pop	{r7, pc}
    5c52:	bf00      	nop

00005c54 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    5c54:	b580      	push	{r7, lr}
    5c56:	b084      	sub	sp, #16
    5c58:	af00      	add	r7, sp, #0
    5c5a:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5c5c:	687b      	ldr	r3, [r7, #4]
    5c5e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    5c60:	687b      	ldr	r3, [r7, #4]
    5c62:	2b00      	cmp	r3, #0
    5c64:	d035      	beq.n	5cd2 <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    5c66:	68fb      	ldr	r3, [r7, #12]
    5c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c6a:	68fb      	ldr	r3, [r7, #12]
    5c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5c6e:	429a      	cmp	r2, r3
    5c70:	d02f      	beq.n	5cd2 <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    5c72:	68fb      	ldr	r3, [r7, #12]
    5c74:	3304      	adds	r3, #4
    5c76:	4618      	mov	r0, r3
    5c78:	f7fe fb2e 	bl	42d8 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    5c7c:	68fb      	ldr	r3, [r7, #12]
    5c7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5c80:	68fb      	ldr	r3, [r7, #12]
    5c82:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    5c84:	68fb      	ldr	r3, [r7, #12]
    5c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5c88:	f1c3 0205 	rsb	r2, r3, #5
    5c8c:	68fb      	ldr	r3, [r7, #12]
    5c8e:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    5c90:	68fb      	ldr	r3, [r7, #12]
    5c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c94:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c9c:	681b      	ldr	r3, [r3, #0]
    5c9e:	429a      	cmp	r2, r3
    5ca0:	d906      	bls.n	5cb0 <vTaskPriorityDisinherit+0x5c>
    5ca2:	68fb      	ldr	r3, [r7, #12]
    5ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5ca6:	f241 23c0 	movw	r3, #4800	; 0x12c0
    5caa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cae:	601a      	str	r2, [r3, #0]
    5cb0:	68fb      	ldr	r3, [r7, #12]
    5cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5cb4:	4613      	mov	r3, r2
    5cb6:	009b      	lsls	r3, r3, #2
    5cb8:	4413      	add	r3, r2
    5cba:	009b      	lsls	r3, r3, #2
    5cbc:	f241 12e0 	movw	r2, #4576	; 0x11e0
    5cc0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5cc4:	441a      	add	r2, r3
    5cc6:	68fb      	ldr	r3, [r7, #12]
    5cc8:	3304      	adds	r3, #4
    5cca:	4610      	mov	r0, r2
    5ccc:	4619      	mov	r1, r3
    5cce:	f7fe faa3 	bl	4218 <vListInsertEnd>
			}
		}
	}
    5cd2:	3710      	adds	r7, #16
    5cd4:	46bd      	mov	sp, r7
    5cd6:	bd80      	pop	{r7, pc}

00005cd8 <xTaskGetxStartTime>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_SEFM == 1)

    portTickType xTaskGetxStartTime( xTaskHandle pxTCB )
    {
    5cd8:	b480      	push	{r7}
    5cda:	b083      	sub	sp, #12
    5cdc:	af00      	add	r7, sp, #0
    5cde:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xStartTime;
    5ce0:	687b      	ldr	r3, [r7, #4]
    5ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    }
    5ce4:	4618      	mov	r0, r3
    5ce6:	370c      	adds	r7, #12
    5ce8:	46bd      	mov	sp, r7
    5cea:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cee:	4770      	bx	lr

00005cf0 <xTaskGetxLet>:

    portTickType xTaskGetxLet( xTaskHandle pxTCB )
    {
    5cf0:	b480      	push	{r7}
    5cf2:	b083      	sub	sp, #12
    5cf4:	af00      	add	r7, sp, #0
    5cf6:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xLet;
    5cf8:	687b      	ldr	r3, [r7, #4]
    5cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
    5cfc:	4618      	mov	r0, r3
    5cfe:	370c      	adds	r7, #12
    5d00:	46bd      	mov	sp, r7
    5d02:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d06:	4770      	bx	lr

00005d08 <vTaskSetxStartTime>:

    void vTaskSetxStartTime ( xTaskHandle pxTCB, portTickType xStartTime )
    {
    5d08:	b480      	push	{r7}
    5d0a:	b083      	sub	sp, #12
    5d0c:	af00      	add	r7, sp, #0
    5d0e:	6078      	str	r0, [r7, #4]
    5d10:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xStartTime = xStartTime; 
    5d12:	687b      	ldr	r3, [r7, #4]
    5d14:	683a      	ldr	r2, [r7, #0]
    5d16:	645a      	str	r2, [r3, #68]	; 0x44
    }
    5d18:	370c      	adds	r7, #12
    5d1a:	46bd      	mov	sp, r7
    5d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d20:	4770      	bx	lr
    5d22:	bf00      	nop

00005d24 <vTaskSetxLet>:

    void vTaskSetxLet( xTaskHandle pxTCB, portTickType xLet )
    {
    5d24:	b480      	push	{r7}
    5d26:	b083      	sub	sp, #12
    5d28:	af00      	add	r7, sp, #0
    5d2a:	6078      	str	r0, [r7, #4]
    5d2c:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xLet = xLet;
    5d2e:	687b      	ldr	r3, [r7, #4]
    5d30:	683a      	ldr	r2, [r7, #0]
    5d32:	649a      	str	r2, [r3, #72]	; 0x48
    }
    5d34:	370c      	adds	r7, #12
    5d36:	46bd      	mov	sp, r7
    5d38:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d3c:	4770      	bx	lr
    5d3e:	bf00      	nop

00005d40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    5d40:	b480      	push	{r7}
    5d42:	b085      	sub	sp, #20
    5d44:	af00      	add	r7, sp, #0
    5d46:	60f8      	str	r0, [r7, #12]
    5d48:	60b9      	str	r1, [r7, #8]
    5d4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    5d4c:	68fb      	ldr	r3, [r7, #12]
    5d4e:	3b04      	subs	r3, #4
    5d50:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    5d52:	68fb      	ldr	r3, [r7, #12]
    5d54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5d58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5d5a:	68fb      	ldr	r3, [r7, #12]
    5d5c:	3b04      	subs	r3, #4
    5d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    5d60:	68ba      	ldr	r2, [r7, #8]
    5d62:	68fb      	ldr	r3, [r7, #12]
    5d64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5d66:	68fb      	ldr	r3, [r7, #12]
    5d68:	3b04      	subs	r3, #4
    5d6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    5d6c:	68fb      	ldr	r3, [r7, #12]
    5d6e:	2200      	movs	r2, #0
    5d70:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    5d72:	68fb      	ldr	r3, [r7, #12]
    5d74:	3b14      	subs	r3, #20
    5d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    5d78:	687a      	ldr	r2, [r7, #4]
    5d7a:	68fb      	ldr	r3, [r7, #12]
    5d7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    5d7e:	68fb      	ldr	r3, [r7, #12]
    5d80:	3b20      	subs	r3, #32
    5d82:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    5d84:	68fb      	ldr	r3, [r7, #12]
}
    5d86:	4618      	mov	r0, r3
    5d88:	3714      	adds	r7, #20
    5d8a:	46bd      	mov	sp, r7
    5d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d90:	4770      	bx	lr
    5d92:	bf00      	nop

00005d94 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    5d94:	4b06      	ldr	r3, [pc, #24]	; (5db0 <pxCurrentTCBConst2>)
    5d96:	6819      	ldr	r1, [r3, #0]
    5d98:	6808      	ldr	r0, [r1, #0]
    5d9a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5d9e:	f380 8809 	msr	PSP, r0
    5da2:	f04f 0000 	mov.w	r0, #0
    5da6:	f380 8811 	msr	BASEPRI, r0
    5daa:	f04e 0e0d 	orr.w	lr, lr, #13
    5dae:	4770      	bx	lr

00005db0 <pxCurrentTCBConst2>:
    5db0:	200011dc 	.word	0x200011dc

00005db4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    5db4:	485d      	ldr	r0, [pc, #372]	; (5f2c <prvSetupTimerInterrupt+0x2c>)
    5db6:	6800      	ldr	r0, [r0, #0]
    5db8:	6800      	ldr	r0, [r0, #0]
    5dba:	f380 8808 	msr	MSP, r0
    5dbe:	b662      	cpsie	i
    5dc0:	df00      	svc	0
    5dc2:	bf00      	nop

00005dc4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    5dc4:	b580      	push	{r7, lr}
    5dc6:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    5dc8:	f64e 5320 	movw	r3, #60704	; 0xed20
    5dcc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5dd0:	f64e 5220 	movw	r2, #60704	; 0xed20
    5dd4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5dd8:	6812      	ldr	r2, [r2, #0]
    5dda:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    5dde:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    5de0:	f64e 5320 	movw	r3, #60704	; 0xed20
    5de4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5de8:	f64e 5220 	movw	r2, #60704	; 0xed20
    5dec:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5df0:	6812      	ldr	r2, [r2, #0]
    5df2:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    5df6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    5df8:	f000 f882 	bl	5f00 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    5dfc:	f240 5334 	movw	r3, #1332	; 0x534
    5e00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e04:	2200      	movs	r2, #0
    5e06:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    5e08:	f7ff ffd4 	bl	5db4 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    5e0c:	2300      	movs	r3, #0
}
    5e0e:	4618      	mov	r0, r3
    5e10:	bd80      	pop	{r7, pc}
    5e12:	bf00      	nop

00005e14 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    5e14:	b480      	push	{r7}
    5e16:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    5e18:	46bd      	mov	sp, r7
    5e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e1e:	4770      	bx	lr

00005e20 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    5e20:	b480      	push	{r7}
    5e22:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    5e24:	f64e 5304 	movw	r3, #60676	; 0xed04
    5e28:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5e30:	601a      	str	r2, [r3, #0]
}
    5e32:	46bd      	mov	sp, r7
    5e34:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e38:	4770      	bx	lr
    5e3a:	bf00      	nop

00005e3c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    5e3c:	b480      	push	{r7}
    5e3e:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    5e40:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5e44:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    5e48:	f240 5334 	movw	r3, #1332	; 0x534
    5e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e50:	681b      	ldr	r3, [r3, #0]
    5e52:	1c5a      	adds	r2, r3, #1
    5e54:	f240 5334 	movw	r3, #1332	; 0x534
    5e58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e5c:	601a      	str	r2, [r3, #0]
}
    5e5e:	46bd      	mov	sp, r7
    5e60:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e64:	4770      	bx	lr
    5e66:	bf00      	nop

00005e68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    5e68:	b480      	push	{r7}
    5e6a:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    5e6c:	f240 5334 	movw	r3, #1332	; 0x534
    5e70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e74:	681b      	ldr	r3, [r3, #0]
    5e76:	1e5a      	subs	r2, r3, #1
    5e78:	f240 5334 	movw	r3, #1332	; 0x534
    5e7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e80:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    5e82:	f240 5334 	movw	r3, #1332	; 0x534
    5e86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e8a:	681b      	ldr	r3, [r3, #0]
    5e8c:	2b00      	cmp	r3, #0
    5e8e:	d103      	bne.n	5e98 <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    5e90:	f04f 0000 	mov.w	r0, #0
    5e94:	f380 8811 	msr	BASEPRI, r0
	}
}
    5e98:	46bd      	mov	sp, r7
    5e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5e9e:	4770      	bx	lr

00005ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    5ea0:	f3ef 8009 	mrs	r0, PSP
    5ea4:	4b0c      	ldr	r3, [pc, #48]	; (5ed8 <pxCurrentTCBConst>)
    5ea6:	681a      	ldr	r2, [r3, #0]
    5ea8:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5eac:	6010      	str	r0, [r2, #0]
    5eae:	e92d 4008 	stmdb	sp!, {r3, lr}
    5eb2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5eb6:	f380 8811 	msr	BASEPRI, r0
    5eba:	f7ff fba1 	bl	5600 <vTaskSwitchContext>
    5ebe:	f04f 0000 	mov.w	r0, #0
    5ec2:	f380 8811 	msr	BASEPRI, r0
    5ec6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5eca:	6819      	ldr	r1, [r3, #0]
    5ecc:	6808      	ldr	r0, [r1, #0]
    5ece:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5ed2:	f380 8809 	msr	PSP, r0
    5ed6:	4770      	bx	lr

00005ed8 <pxCurrentTCBConst>:
    5ed8:	200011dc 	.word	0x200011dc

00005edc <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    5edc:	b580      	push	{r7, lr}
    5ede:	b082      	sub	sp, #8
    5ee0:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    5ee2:	2300      	movs	r3, #0
    5ee4:	607b      	str	r3, [r7, #4]
    5ee6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5eea:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    5eee:	f7ff faa9 	bl	5444 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    5ef2:	f04f 0000 	mov.w	r0, #0
    5ef6:	f380 8811 	msr	BASEPRI, r0
}
    5efa:	3708      	adds	r7, #8
    5efc:	46bd      	mov	sp, r7
    5efe:	bd80      	pop	{r7, pc}

00005f00 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    5f00:	b480      	push	{r7}
    5f02:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    5f04:	f24e 0314 	movw	r3, #57364	; 0xe014
    5f08:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5f0c:	f644 32bf 	movw	r2, #19391	; 0x4bbf
    5f10:	f2c0 0203 	movt	r2, #3
    5f14:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    5f16:	f24e 0310 	movw	r3, #57360	; 0xe010
    5f1a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5f1e:	2207      	movs	r2, #7
    5f20:	601a      	str	r2, [r3, #0]
}
    5f22:	46bd      	mov	sp, r7
    5f24:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f28:	4770      	bx	lr
    5f2a:	0000      	.short	0x0000
    5f2c:	e000ed08 	.word	0xe000ed08

00005f30 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5f30:	b580      	push	{r7, lr}
    5f32:	b08a      	sub	sp, #40	; 0x28
    5f34:	af00      	add	r7, sp, #0
    5f36:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    5f38:	2300      	movs	r3, #0
    5f3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    5f3c:	f7ff f9a0 	bl	5280 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    5f40:	f24c 23f0 	movw	r3, #49904	; 0xc2f0
    5f44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f48:	681b      	ldr	r3, [r3, #0]
    5f4a:	2b00      	cmp	r3, #0
    5f4c:	d130      	bne.n	5fb0 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    5f4e:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    5f52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f56:	f241 22e0 	movw	r2, #4832	; 0x12e0
    5f5a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5f5e:	601a      	str	r2, [r3, #0]
    5f60:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    5f64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f68:	2200      	movs	r2, #0
    5f6a:	605a      	str	r2, [r3, #4]
    5f6c:	f24c 23e8 	movw	r3, #49896	; 0xc2e8
    5f70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f74:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5f78:	605a      	str	r2, [r3, #4]
    5f7a:	f24c 23e8 	movw	r3, #49896	; 0xc2e8
    5f7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f82:	2200      	movs	r2, #0
    5f84:	601a      	str	r2, [r3, #0]
    5f86:	f241 23e0 	movw	r3, #4832	; 0x12e0
    5f8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f8e:	617b      	str	r3, [r7, #20]
    5f90:	697b      	ldr	r3, [r7, #20]
    5f92:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5f96:	605a      	str	r2, [r3, #4]
    5f98:	697a      	ldr	r2, [r7, #20]
    5f9a:	f24c 23e8 	movw	r3, #49896	; 0xc2e8
    5f9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fa2:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    5fa4:	f24c 23f0 	movw	r3, #49904	; 0xc2f0
    5fa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fac:	2201      	movs	r2, #1
    5fae:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    5fb0:	687b      	ldr	r3, [r7, #4]
    5fb2:	2b00      	cmp	r3, #0
    5fb4:	d00d      	beq.n	5fd2 <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    5fb6:	2310      	movs	r3, #16
    5fb8:	687a      	ldr	r2, [r7, #4]
    5fba:	4413      	add	r3, r2
    5fbc:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    5fbe:	687b      	ldr	r3, [r7, #4]
    5fc0:	f003 0307 	and.w	r3, r3, #7
    5fc4:	2b00      	cmp	r3, #0
    5fc6:	d004      	beq.n	5fd2 <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    5fc8:	687b      	ldr	r3, [r7, #4]
    5fca:	f023 0307 	bic.w	r3, r3, #7
    5fce:	3308      	adds	r3, #8
    5fd0:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    5fd2:	687b      	ldr	r3, [r7, #4]
    5fd4:	2b00      	cmp	r3, #0
    5fd6:	d068      	beq.n	60aa <pvPortMalloc+0x17a>
    5fd8:	687b      	ldr	r3, [r7, #4]
    5fda:	f5b3 2f96 	cmp.w	r3, #307200	; 0x4b000
    5fde:	d264      	bcs.n	60aa <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    5fe0:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    5fe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fe8:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    5fea:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    5fee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ff2:	681b      	ldr	r3, [r3, #0]
    5ff4:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5ff6:	e004      	b.n	6002 <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    5ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5ffa:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    5ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5ffe:	681b      	ldr	r3, [r3, #0]
    6000:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    6002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6004:	685a      	ldr	r2, [r3, #4]
    6006:	687b      	ldr	r3, [r7, #4]
    6008:	429a      	cmp	r2, r3
    600a:	d203      	bcs.n	6014 <pvPortMalloc+0xe4>
    600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    600e:	681b      	ldr	r3, [r3, #0]
    6010:	2b00      	cmp	r3, #0
    6012:	d1f1      	bne.n	5ff8 <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    6014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6016:	f24c 23e8 	movw	r3, #49896	; 0xc2e8
    601a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    601e:	429a      	cmp	r2, r3
    6020:	d043      	beq.n	60aa <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    6022:	6a3b      	ldr	r3, [r7, #32]
    6024:	681a      	ldr	r2, [r3, #0]
    6026:	2310      	movs	r3, #16
    6028:	4413      	add	r3, r2
    602a:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    602e:	681a      	ldr	r2, [r3, #0]
    6030:	6a3b      	ldr	r3, [r7, #32]
    6032:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    6034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6036:	685a      	ldr	r2, [r3, #4]
    6038:	687b      	ldr	r3, [r7, #4]
    603a:	1ad2      	subs	r2, r2, r3
    603c:	2310      	movs	r3, #16
    603e:	005b      	lsls	r3, r3, #1
    6040:	429a      	cmp	r2, r3
    6042:	d925      	bls.n	6090 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    6044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6046:	687b      	ldr	r3, [r7, #4]
    6048:	4413      	add	r3, r2
    604a:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    604c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    604e:	685a      	ldr	r2, [r3, #4]
    6050:	687b      	ldr	r3, [r7, #4]
    6052:	1ad2      	subs	r2, r2, r3
    6054:	693b      	ldr	r3, [r7, #16]
    6056:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    6058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    605a:	687a      	ldr	r2, [r7, #4]
    605c:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    605e:	693b      	ldr	r3, [r7, #16]
    6060:	685b      	ldr	r3, [r3, #4]
    6062:	60fb      	str	r3, [r7, #12]
    6064:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    6068:	f2c2 0304 	movt	r3, #8196	; 0x2004
    606c:	61bb      	str	r3, [r7, #24]
    606e:	e002      	b.n	6076 <pvPortMalloc+0x146>
    6070:	69bb      	ldr	r3, [r7, #24]
    6072:	681b      	ldr	r3, [r3, #0]
    6074:	61bb      	str	r3, [r7, #24]
    6076:	69bb      	ldr	r3, [r7, #24]
    6078:	681b      	ldr	r3, [r3, #0]
    607a:	685a      	ldr	r2, [r3, #4]
    607c:	68fb      	ldr	r3, [r7, #12]
    607e:	429a      	cmp	r2, r3
    6080:	d3f6      	bcc.n	6070 <pvPortMalloc+0x140>
    6082:	69bb      	ldr	r3, [r7, #24]
    6084:	681a      	ldr	r2, [r3, #0]
    6086:	693b      	ldr	r3, [r7, #16]
    6088:	601a      	str	r2, [r3, #0]
    608a:	69bb      	ldr	r3, [r7, #24]
    608c:	693a      	ldr	r2, [r7, #16]
    608e:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    6090:	f240 5338 	movw	r3, #1336	; 0x538
    6094:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6098:	681a      	ldr	r2, [r3, #0]
    609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    609c:	685b      	ldr	r3, [r3, #4]
    609e:	1ad2      	subs	r2, r2, r3
    60a0:	f240 5338 	movw	r3, #1336	; 0x538
    60a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    60a8:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    60aa:	f7ff f8fb 	bl	52a4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    60ae:	69fb      	ldr	r3, [r7, #28]
}
    60b0:	4618      	mov	r0, r3
    60b2:	3728      	adds	r7, #40	; 0x28
    60b4:	46bd      	mov	sp, r7
    60b6:	bd80      	pop	{r7, pc}

000060b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    60b8:	b580      	push	{r7, lr}
    60ba:	b086      	sub	sp, #24
    60bc:	af00      	add	r7, sp, #0
    60be:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    60c0:	687b      	ldr	r3, [r7, #4]
    60c2:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    60c4:	687b      	ldr	r3, [r7, #4]
    60c6:	2b00      	cmp	r3, #0
    60c8:	d030      	beq.n	612c <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    60ca:	2310      	movs	r3, #16
    60cc:	425b      	negs	r3, r3
    60ce:	693a      	ldr	r2, [r7, #16]
    60d0:	4413      	add	r3, r2
    60d2:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    60d4:	693b      	ldr	r3, [r7, #16]
    60d6:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    60d8:	f7ff f8d2 	bl	5280 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    60dc:	68fb      	ldr	r3, [r7, #12]
    60de:	685b      	ldr	r3, [r3, #4]
    60e0:	60bb      	str	r3, [r7, #8]
    60e2:	f24c 23e0 	movw	r3, #49888	; 0xc2e0
    60e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60ea:	617b      	str	r3, [r7, #20]
    60ec:	e002      	b.n	60f4 <vPortFree+0x3c>
    60ee:	697b      	ldr	r3, [r7, #20]
    60f0:	681b      	ldr	r3, [r3, #0]
    60f2:	617b      	str	r3, [r7, #20]
    60f4:	697b      	ldr	r3, [r7, #20]
    60f6:	681b      	ldr	r3, [r3, #0]
    60f8:	685a      	ldr	r2, [r3, #4]
    60fa:	68bb      	ldr	r3, [r7, #8]
    60fc:	429a      	cmp	r2, r3
    60fe:	d3f6      	bcc.n	60ee <vPortFree+0x36>
    6100:	697b      	ldr	r3, [r7, #20]
    6102:	681a      	ldr	r2, [r3, #0]
    6104:	68fb      	ldr	r3, [r7, #12]
    6106:	601a      	str	r2, [r3, #0]
    6108:	697b      	ldr	r3, [r7, #20]
    610a:	68fa      	ldr	r2, [r7, #12]
    610c:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    610e:	68fb      	ldr	r3, [r7, #12]
    6110:	685a      	ldr	r2, [r3, #4]
    6112:	f240 5338 	movw	r3, #1336	; 0x538
    6116:	f2c2 0300 	movt	r3, #8192	; 0x2000
    611a:	681b      	ldr	r3, [r3, #0]
    611c:	441a      	add	r2, r3
    611e:	f240 5338 	movw	r3, #1336	; 0x538
    6122:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6126:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    6128:	f7ff f8bc 	bl	52a4 <xTaskResumeAll>
	}
}
    612c:	3718      	adds	r7, #24
    612e:	46bd      	mov	sp, r7
    6130:	bd80      	pop	{r7, pc}
    6132:	bf00      	nop

00006134 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    6134:	b480      	push	{r7}
    6136:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    6138:	f240 5338 	movw	r3, #1336	; 0x538
    613c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6140:	681b      	ldr	r3, [r3, #0]
}
    6142:	4618      	mov	r0, r3
    6144:	46bd      	mov	sp, r7
    6146:	f85d 7b04 	ldr.w	r7, [sp], #4
    614a:	4770      	bx	lr

0000614c <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    614c:	b480      	push	{r7}
    614e:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    6150:	46bd      	mov	sp, r7
    6152:	f85d 7b04 	ldr.w	r7, [sp], #4
    6156:	4770      	bx	lr

00006158 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    6158:	b580      	push	{r7, lr}
    615a:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    615c:	f24c 3312 	movw	r3, #49938	; 0xc312
    6160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6164:	781b      	ldrb	r3, [r3, #0]
    6166:	2b00      	cmp	r3, #0
    6168:	f040 815d 	bne.w	6426 <ground_calibrate+0x2ce>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    616c:	f24c 23fa 	movw	r3, #49914	; 0xc2fa
    6170:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6174:	881b      	ldrh	r3, [r3, #0]
    6176:	2b09      	cmp	r3, #9
    6178:	f201 8145 	bhi.w	7406 <ground_calibrate+0x12ae>
    617c:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    6180:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6184:	781b      	ldrb	r3, [r3, #0]
    6186:	2b01      	cmp	r3, #1
    6188:	f041 813d 	bne.w	7406 <ground_calibrate+0x12ae>
      calib_status = WAITING_CALIB_CONTRAST;
    618c:	f24c 3312 	movw	r3, #49938	; 0xc312
    6190:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6194:	2201      	movs	r2, #1
    6196:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_START();
    6198:	f24c 3319 	movw	r3, #49945	; 0xc319
    619c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61a0:	781a      	ldrb	r2, [r3, #0]
    61a2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    61a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61aa:	781b      	ldrb	r3, [r3, #0]
    61ac:	b2db      	uxtb	r3, r3
    61ae:	429a      	cmp	r2, r3
    61b0:	d313      	bcc.n	61da <ground_calibrate+0x82>
    61b2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    61b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61ba:	781b      	ldrb	r3, [r3, #0]
    61bc:	b2db      	uxtb	r3, r3
    61be:	461a      	mov	r2, r3
    61c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    61c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61c8:	781b      	ldrb	r3, [r3, #0]
    61ca:	1ad3      	subs	r3, r2, r3
    61cc:	33ff      	adds	r3, #255	; 0xff
    61ce:	2b04      	cmp	r3, #4
    61d0:	bfd4      	ite	le
    61d2:	2300      	movle	r3, #0
    61d4:	2301      	movgt	r3, #1
    61d6:	b2db      	uxtb	r3, r3
    61d8:	e011      	b.n	61fe <ground_calibrate+0xa6>
    61da:	f24c 331a 	movw	r3, #49946	; 0xc31a
    61de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61e2:	781b      	ldrb	r3, [r3, #0]
    61e4:	b2db      	uxtb	r3, r3
    61e6:	461a      	mov	r2, r3
    61e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    61ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61f0:	781b      	ldrb	r3, [r3, #0]
    61f2:	1ad3      	subs	r3, r2, r3
    61f4:	2b04      	cmp	r3, #4
    61f6:	bfd4      	ite	le
    61f8:	2300      	movle	r3, #0
    61fa:	2301      	movgt	r3, #1
    61fc:	b2db      	uxtb	r3, r3
    61fe:	2b00      	cmp	r3, #0
    6200:	f000 8103 	beq.w	640a <ground_calibrate+0x2b2>
    6204:	f24c 3319 	movw	r3, #49945	; 0xc319
    6208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    620c:	781b      	ldrb	r3, [r3, #0]
    620e:	461a      	mov	r2, r3
    6210:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6218:	2105      	movs	r1, #5
    621a:	5499      	strb	r1, [r3, r2]
    621c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6220:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6224:	781b      	ldrb	r3, [r3, #0]
    6226:	3301      	adds	r3, #1
    6228:	b2da      	uxtb	r2, r3
    622a:	f24c 3319 	movw	r3, #49945	; 0xc319
    622e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6232:	701a      	strb	r2, [r3, #0]
    6234:	f24c 3319 	movw	r3, #49945	; 0xc319
    6238:	f2c2 0304 	movt	r3, #8196	; 0x2004
    623c:	781b      	ldrb	r3, [r3, #0]
    623e:	2bff      	cmp	r3, #255	; 0xff
    6240:	d105      	bne.n	624e <ground_calibrate+0xf6>
    6242:	f24c 3319 	movw	r3, #49945	; 0xc319
    6246:	f2c2 0304 	movt	r3, #8196	; 0x2004
    624a:	2200      	movs	r2, #0
    624c:	701a      	strb	r2, [r3, #0]
    624e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6252:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6256:	781b      	ldrb	r3, [r3, #0]
    6258:	461a      	mov	r2, r3
    625a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    625e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6262:	2102      	movs	r1, #2
    6264:	5499      	strb	r1, [r3, r2]
    6266:	f24c 3319 	movw	r3, #49945	; 0xc319
    626a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    626e:	781b      	ldrb	r3, [r3, #0]
    6270:	3301      	adds	r3, #1
    6272:	b2da      	uxtb	r2, r3
    6274:	f24c 3319 	movw	r3, #49945	; 0xc319
    6278:	f2c2 0304 	movt	r3, #8196	; 0x2004
    627c:	701a      	strb	r2, [r3, #0]
    627e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6286:	781b      	ldrb	r3, [r3, #0]
    6288:	2bff      	cmp	r3, #255	; 0xff
    628a:	d105      	bne.n	6298 <ground_calibrate+0x140>
    628c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6290:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6294:	2200      	movs	r2, #0
    6296:	701a      	strb	r2, [r3, #0]
    6298:	f24c 431d 	movw	r3, #50205	; 0xc41d
    629c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62a0:	2202      	movs	r2, #2
    62a2:	701a      	strb	r2, [r3, #0]
    62a4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    62a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62ac:	2202      	movs	r2, #2
    62ae:	701a      	strb	r2, [r3, #0]
    62b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    62b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62b8:	781b      	ldrb	r3, [r3, #0]
    62ba:	461a      	mov	r2, r3
    62bc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    62c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62c4:	7819      	ldrb	r1, [r3, #0]
    62c6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    62ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62ce:	5499      	strb	r1, [r3, r2]
    62d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    62d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62d8:	781b      	ldrb	r3, [r3, #0]
    62da:	3301      	adds	r3, #1
    62dc:	b2da      	uxtb	r2, r3
    62de:	f24c 3319 	movw	r3, #49945	; 0xc319
    62e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62e6:	701a      	strb	r2, [r3, #0]
    62e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    62ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62f0:	781b      	ldrb	r3, [r3, #0]
    62f2:	2bff      	cmp	r3, #255	; 0xff
    62f4:	d105      	bne.n	6302 <ground_calibrate+0x1aa>
    62f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    62fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62fe:	2200      	movs	r2, #0
    6300:	701a      	strb	r2, [r3, #0]
    6302:	f24c 3319 	movw	r3, #49945	; 0xc319
    6306:	f2c2 0304 	movt	r3, #8196	; 0x2004
    630a:	781b      	ldrb	r3, [r3, #0]
    630c:	461a      	mov	r2, r3
    630e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6316:	7819      	ldrb	r1, [r3, #0]
    6318:	f24c 331c 	movw	r3, #49948	; 0xc31c
    631c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6320:	5499      	strb	r1, [r3, r2]
    6322:	f24c 3319 	movw	r3, #49945	; 0xc319
    6326:	f2c2 0304 	movt	r3, #8196	; 0x2004
    632a:	781b      	ldrb	r3, [r3, #0]
    632c:	3301      	adds	r3, #1
    632e:	b2da      	uxtb	r2, r3
    6330:	f24c 3319 	movw	r3, #49945	; 0xc319
    6334:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6338:	701a      	strb	r2, [r3, #0]
    633a:	f24c 3319 	movw	r3, #49945	; 0xc319
    633e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6342:	781b      	ldrb	r3, [r3, #0]
    6344:	2bff      	cmp	r3, #255	; 0xff
    6346:	d105      	bne.n	6354 <ground_calibrate+0x1fc>
    6348:	f24c 3319 	movw	r3, #49945	; 0xc319
    634c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6350:	2200      	movs	r2, #0
    6352:	701a      	strb	r2, [r3, #0]
    6354:	f242 0339 	movw	r3, #8249	; 0x2039
    6358:	f2c2 0300 	movt	r3, #8192	; 0x2000
    635c:	781b      	ldrb	r3, [r3, #0]
    635e:	b2db      	uxtb	r3, r3
    6360:	f003 0310 	and.w	r3, r3, #16
    6364:	2b00      	cmp	r3, #0
    6366:	f041 804e 	bne.w	7406 <ground_calibrate+0x12ae>
    636a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    636e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6372:	781b      	ldrb	r3, [r3, #0]
    6374:	b2db      	uxtb	r3, r3
    6376:	461a      	mov	r2, r3
    6378:	f24c 331c 	movw	r3, #49948	; 0xc31c
    637c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6380:	5c9a      	ldrb	r2, [r3, r2]
    6382:	f24c 431b 	movw	r3, #50203	; 0xc41b
    6386:	f2c2 0304 	movt	r3, #8196	; 0x2004
    638a:	701a      	strb	r2, [r3, #0]
    638c:	f24c 431c 	movw	r3, #50204	; 0xc41c
    6390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6394:	2200      	movs	r2, #0
    6396:	701a      	strb	r2, [r3, #0]
    6398:	f24c 331a 	movw	r3, #49946	; 0xc31a
    639c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63a0:	781b      	ldrb	r3, [r3, #0]
    63a2:	b2db      	uxtb	r3, r3
    63a4:	3301      	adds	r3, #1
    63a6:	b2da      	uxtb	r2, r3
    63a8:	f24c 331a 	movw	r3, #49946	; 0xc31a
    63ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63b0:	701a      	strb	r2, [r3, #0]
    63b2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    63b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63ba:	781b      	ldrb	r3, [r3, #0]
    63bc:	b2db      	uxtb	r3, r3
    63be:	2bff      	cmp	r3, #255	; 0xff
    63c0:	d105      	bne.n	63ce <ground_calibrate+0x276>
    63c2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    63c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63ca:	2200      	movs	r2, #0
    63cc:	701a      	strb	r2, [r3, #0]
    63ce:	f242 0338 	movw	r3, #8248	; 0x2038
    63d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63d6:	f242 0238 	movw	r2, #8248	; 0x2038
    63da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    63de:	7812      	ldrb	r2, [r2, #0]
    63e0:	b2d2      	uxtb	r2, r2
    63e2:	f042 0201 	orr.w	r2, r2, #1
    63e6:	b2d2      	uxtb	r2, r2
    63e8:	701a      	strb	r2, [r3, #0]
    63ea:	f242 0339 	movw	r3, #8249	; 0x2039
    63ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63f2:	f242 0239 	movw	r2, #8249	; 0x2039
    63f6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    63fa:	7812      	ldrb	r2, [r2, #0]
    63fc:	b2d2      	uxtb	r2, r2
    63fe:	f042 0210 	orr.w	r2, r2, #16
    6402:	b2d2      	uxtb	r2, r2
    6404:	701a      	strb	r2, [r3, #0]
    6406:	f000 bffe 	b.w	7406 <ground_calibrate+0x12ae>
    640a:	f24c 3318 	movw	r3, #49944	; 0xc318
    640e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6412:	781b      	ldrb	r3, [r3, #0]
    6414:	3301      	adds	r3, #1
    6416:	b2da      	uxtb	r2, r3
    6418:	f24c 3318 	movw	r3, #49944	; 0xc318
    641c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6420:	701a      	strb	r2, [r3, #0]
    6422:	f000 bff0 	b.w	7406 <ground_calibrate+0x12ae>
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    6426:	f24c 3312 	movw	r3, #49938	; 0xc312
    642a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    642e:	781b      	ldrb	r3, [r3, #0]
    6430:	2b01      	cmp	r3, #1
    6432:	f040 87e8 	bne.w	7406 <ground_calibrate+0x12ae>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    6436:	f24c 4320 	movw	r3, #50208	; 0xc420
    643a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    643e:	885b      	ldrh	r3, [r3, #2]
    6440:	b21b      	sxth	r3, r3
    6442:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    6446:	db09      	blt.n	645c <ground_calibrate+0x304>
    6448:	f24c 4320 	movw	r3, #50208	; 0xc420
    644c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6450:	885b      	ldrh	r3, [r3, #2]
    6452:	b21b      	sxth	r3, r3
    6454:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    6458:	f340 87d5 	ble.w	7406 <ground_calibrate+0x12ae>
      ir_gain_calib();
    645c:	f00b fd54 	bl	11f08 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    6460:	f240 5348 	movw	r3, #1352	; 0x548
    6464:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6468:	681a      	ldr	r2, [r3, #0]
    646a:	f64c 130c 	movw	r3, #51468	; 0xc90c
    646e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6472:	601a      	str	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    6474:	f24c 3319 	movw	r3, #49945	; 0xc319
    6478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    647c:	781a      	ldrb	r2, [r3, #0]
    647e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6482:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6486:	781b      	ldrb	r3, [r3, #0]
    6488:	b2db      	uxtb	r3, r3
    648a:	429a      	cmp	r2, r3
    648c:	d313      	bcc.n	64b6 <ground_calibrate+0x35e>
    648e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6496:	781b      	ldrb	r3, [r3, #0]
    6498:	b2db      	uxtb	r3, r3
    649a:	461a      	mov	r2, r3
    649c:	f24c 3319 	movw	r3, #49945	; 0xc319
    64a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64a4:	781b      	ldrb	r3, [r3, #0]
    64a6:	1ad3      	subs	r3, r2, r3
    64a8:	33ff      	adds	r3, #255	; 0xff
    64aa:	2b14      	cmp	r3, #20
    64ac:	bfd4      	ite	le
    64ae:	2300      	movle	r3, #0
    64b0:	2301      	movgt	r3, #1
    64b2:	b2db      	uxtb	r3, r3
    64b4:	e011      	b.n	64da <ground_calibrate+0x382>
    64b6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    64ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64be:	781b      	ldrb	r3, [r3, #0]
    64c0:	b2db      	uxtb	r3, r3
    64c2:	461a      	mov	r2, r3
    64c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    64c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64cc:	781b      	ldrb	r3, [r3, #0]
    64ce:	1ad3      	subs	r3, r2, r3
    64d0:	2b14      	cmp	r3, #20
    64d2:	bfd4      	ite	le
    64d4:	2300      	movle	r3, #0
    64d6:	2301      	movgt	r3, #1
    64d8:	b2db      	uxtb	r3, r3
    64da:	2b00      	cmp	r3, #0
    64dc:	f000 85a6 	beq.w	702c <ground_calibrate+0xed4>
    64e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    64e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64e8:	781b      	ldrb	r3, [r3, #0]
    64ea:	461a      	mov	r2, r3
    64ec:	f24c 331c 	movw	r3, #49948	; 0xc31c
    64f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64f4:	2105      	movs	r1, #5
    64f6:	5499      	strb	r1, [r3, r2]
    64f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    64fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6500:	781b      	ldrb	r3, [r3, #0]
    6502:	3301      	adds	r3, #1
    6504:	b2da      	uxtb	r2, r3
    6506:	f24c 3319 	movw	r3, #49945	; 0xc319
    650a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    650e:	701a      	strb	r2, [r3, #0]
    6510:	f24c 3319 	movw	r3, #49945	; 0xc319
    6514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6518:	781b      	ldrb	r3, [r3, #0]
    651a:	2bff      	cmp	r3, #255	; 0xff
    651c:	d105      	bne.n	652a <ground_calibrate+0x3d2>
    651e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6526:	2200      	movs	r2, #0
    6528:	701a      	strb	r2, [r3, #0]
    652a:	f24c 3319 	movw	r3, #49945	; 0xc319
    652e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6532:	781b      	ldrb	r3, [r3, #0]
    6534:	461a      	mov	r2, r3
    6536:	f24c 331c 	movw	r3, #49948	; 0xc31c
    653a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    653e:	2105      	movs	r1, #5
    6540:	5499      	strb	r1, [r3, r2]
    6542:	f24c 3319 	movw	r3, #49945	; 0xc319
    6546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    654a:	781b      	ldrb	r3, [r3, #0]
    654c:	3301      	adds	r3, #1
    654e:	b2da      	uxtb	r2, r3
    6550:	f24c 3319 	movw	r3, #49945	; 0xc319
    6554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6558:	701a      	strb	r2, [r3, #0]
    655a:	f24c 3319 	movw	r3, #49945	; 0xc319
    655e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6562:	781b      	ldrb	r3, [r3, #0]
    6564:	2bff      	cmp	r3, #255	; 0xff
    6566:	d105      	bne.n	6574 <ground_calibrate+0x41c>
    6568:	f24c 3319 	movw	r3, #49945	; 0xc319
    656c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6570:	2200      	movs	r2, #0
    6572:	701a      	strb	r2, [r3, #0]
    6574:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6578:	f2c2 0304 	movt	r3, #8196	; 0x2004
    657c:	2205      	movs	r2, #5
    657e:	701a      	strb	r2, [r3, #0]
    6580:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6588:	2205      	movs	r2, #5
    658a:	701a      	strb	r2, [r3, #0]
    658c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6594:	781b      	ldrb	r3, [r3, #0]
    6596:	461a      	mov	r2, r3
    6598:	f64c 1310 	movw	r3, #51472	; 0xc910
    659c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65a0:	7819      	ldrb	r1, [r3, #0]
    65a2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    65a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65aa:	5499      	strb	r1, [r3, r2]
    65ac:	f64c 1310 	movw	r3, #51472	; 0xc910
    65b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65b4:	781a      	ldrb	r2, [r3, #0]
    65b6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    65ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65be:	781b      	ldrb	r3, [r3, #0]
    65c0:	4413      	add	r3, r2
    65c2:	b2da      	uxtb	r2, r3
    65c4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    65c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65cc:	701a      	strb	r2, [r3, #0]
    65ce:	f24c 431e 	movw	r3, #50206	; 0xc41e
    65d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65d6:	781a      	ldrb	r2, [r3, #0]
    65d8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    65dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65e0:	781b      	ldrb	r3, [r3, #0]
    65e2:	4413      	add	r3, r2
    65e4:	b2da      	uxtb	r2, r3
    65e6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    65ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65ee:	701a      	strb	r2, [r3, #0]
    65f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    65f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65f8:	781b      	ldrb	r3, [r3, #0]
    65fa:	3301      	adds	r3, #1
    65fc:	b2da      	uxtb	r2, r3
    65fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    6602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6606:	701a      	strb	r2, [r3, #0]
    6608:	f24c 3319 	movw	r3, #49945	; 0xc319
    660c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6610:	781b      	ldrb	r3, [r3, #0]
    6612:	2bff      	cmp	r3, #255	; 0xff
    6614:	d105      	bne.n	6622 <ground_calibrate+0x4ca>
    6616:	f24c 3319 	movw	r3, #49945	; 0xc319
    661a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    661e:	2200      	movs	r2, #0
    6620:	701a      	strb	r2, [r3, #0]
    6622:	f24c 3319 	movw	r3, #49945	; 0xc319
    6626:	f2c2 0304 	movt	r3, #8196	; 0x2004
    662a:	781b      	ldrb	r3, [r3, #0]
    662c:	461a      	mov	r2, r3
    662e:	f64c 1310 	movw	r3, #51472	; 0xc910
    6632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6636:	7859      	ldrb	r1, [r3, #1]
    6638:	f24c 331c 	movw	r3, #49948	; 0xc31c
    663c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6640:	5499      	strb	r1, [r3, r2]
    6642:	4bd2      	ldr	r3, [pc, #840]	; (698c <ground_calibrate+0x834>)
    6644:	781a      	ldrb	r2, [r3, #0]
    6646:	f24c 431d 	movw	r3, #50205	; 0xc41d
    664a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    664e:	781b      	ldrb	r3, [r3, #0]
    6650:	4413      	add	r3, r2
    6652:	b2da      	uxtb	r2, r3
    6654:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6658:	f2c2 0304 	movt	r3, #8196	; 0x2004
    665c:	701a      	strb	r2, [r3, #0]
    665e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6666:	781a      	ldrb	r2, [r3, #0]
    6668:	f24c 431d 	movw	r3, #50205	; 0xc41d
    666c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6670:	781b      	ldrb	r3, [r3, #0]
    6672:	4413      	add	r3, r2
    6674:	b2da      	uxtb	r2, r3
    6676:	f24c 431e 	movw	r3, #50206	; 0xc41e
    667a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    667e:	701a      	strb	r2, [r3, #0]
    6680:	f24c 3319 	movw	r3, #49945	; 0xc319
    6684:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6688:	781b      	ldrb	r3, [r3, #0]
    668a:	3301      	adds	r3, #1
    668c:	b2da      	uxtb	r2, r3
    668e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6696:	701a      	strb	r2, [r3, #0]
    6698:	f24c 3319 	movw	r3, #49945	; 0xc319
    669c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66a0:	781b      	ldrb	r3, [r3, #0]
    66a2:	2bff      	cmp	r3, #255	; 0xff
    66a4:	d105      	bne.n	66b2 <ground_calibrate+0x55a>
    66a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    66aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66ae:	2200      	movs	r2, #0
    66b0:	701a      	strb	r2, [r3, #0]
    66b2:	f24c 3319 	movw	r3, #49945	; 0xc319
    66b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66ba:	781b      	ldrb	r3, [r3, #0]
    66bc:	461a      	mov	r2, r3
    66be:	f64c 1310 	movw	r3, #51472	; 0xc910
    66c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66c6:	7899      	ldrb	r1, [r3, #2]
    66c8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    66cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66d0:	5499      	strb	r1, [r3, r2]
    66d2:	4baf      	ldr	r3, [pc, #700]	; (6990 <ground_calibrate+0x838>)
    66d4:	781a      	ldrb	r2, [r3, #0]
    66d6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    66da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66de:	781b      	ldrb	r3, [r3, #0]
    66e0:	4413      	add	r3, r2
    66e2:	b2da      	uxtb	r2, r3
    66e4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    66e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66ec:	701a      	strb	r2, [r3, #0]
    66ee:	f24c 431e 	movw	r3, #50206	; 0xc41e
    66f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66f6:	781a      	ldrb	r2, [r3, #0]
    66f8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    66fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6700:	781b      	ldrb	r3, [r3, #0]
    6702:	4413      	add	r3, r2
    6704:	b2da      	uxtb	r2, r3
    6706:	f24c 431e 	movw	r3, #50206	; 0xc41e
    670a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    670e:	701a      	strb	r2, [r3, #0]
    6710:	f24c 3319 	movw	r3, #49945	; 0xc319
    6714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6718:	781b      	ldrb	r3, [r3, #0]
    671a:	3301      	adds	r3, #1
    671c:	b2da      	uxtb	r2, r3
    671e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6726:	701a      	strb	r2, [r3, #0]
    6728:	f24c 3319 	movw	r3, #49945	; 0xc319
    672c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6730:	781b      	ldrb	r3, [r3, #0]
    6732:	2bff      	cmp	r3, #255	; 0xff
    6734:	d105      	bne.n	6742 <ground_calibrate+0x5ea>
    6736:	f24c 3319 	movw	r3, #49945	; 0xc319
    673a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    673e:	2200      	movs	r2, #0
    6740:	701a      	strb	r2, [r3, #0]
    6742:	f24c 3319 	movw	r3, #49945	; 0xc319
    6746:	f2c2 0304 	movt	r3, #8196	; 0x2004
    674a:	781b      	ldrb	r3, [r3, #0]
    674c:	461a      	mov	r2, r3
    674e:	f64c 1310 	movw	r3, #51472	; 0xc910
    6752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6756:	78d9      	ldrb	r1, [r3, #3]
    6758:	f24c 331c 	movw	r3, #49948	; 0xc31c
    675c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6760:	5499      	strb	r1, [r3, r2]
    6762:	4b8c      	ldr	r3, [pc, #560]	; (6994 <ground_calibrate+0x83c>)
    6764:	781a      	ldrb	r2, [r3, #0]
    6766:	f24c 431d 	movw	r3, #50205	; 0xc41d
    676a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    676e:	781b      	ldrb	r3, [r3, #0]
    6770:	4413      	add	r3, r2
    6772:	b2da      	uxtb	r2, r3
    6774:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    677c:	701a      	strb	r2, [r3, #0]
    677e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6786:	781a      	ldrb	r2, [r3, #0]
    6788:	f24c 431d 	movw	r3, #50205	; 0xc41d
    678c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6790:	781b      	ldrb	r3, [r3, #0]
    6792:	4413      	add	r3, r2
    6794:	b2da      	uxtb	r2, r3
    6796:	f24c 431e 	movw	r3, #50206	; 0xc41e
    679a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    679e:	701a      	strb	r2, [r3, #0]
    67a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    67a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67a8:	781b      	ldrb	r3, [r3, #0]
    67aa:	3301      	adds	r3, #1
    67ac:	b2da      	uxtb	r2, r3
    67ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    67b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67b6:	701a      	strb	r2, [r3, #0]
    67b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    67bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67c0:	781b      	ldrb	r3, [r3, #0]
    67c2:	2bff      	cmp	r3, #255	; 0xff
    67c4:	d105      	bne.n	67d2 <ground_calibrate+0x67a>
    67c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    67ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ce:	2200      	movs	r2, #0
    67d0:	701a      	strb	r2, [r3, #0]
    67d2:	f24c 3319 	movw	r3, #49945	; 0xc319
    67d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67da:	781b      	ldrb	r3, [r3, #0]
    67dc:	461a      	mov	r2, r3
    67de:	f64c 1314 	movw	r3, #51476	; 0xc914
    67e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67e6:	7819      	ldrb	r1, [r3, #0]
    67e8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    67ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67f0:	5499      	strb	r1, [r3, r2]
    67f2:	f64c 1314 	movw	r3, #51476	; 0xc914
    67f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67fa:	781a      	ldrb	r2, [r3, #0]
    67fc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6800:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6804:	781b      	ldrb	r3, [r3, #0]
    6806:	4413      	add	r3, r2
    6808:	b2da      	uxtb	r2, r3
    680a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    680e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6812:	701a      	strb	r2, [r3, #0]
    6814:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6818:	f2c2 0304 	movt	r3, #8196	; 0x2004
    681c:	781a      	ldrb	r2, [r3, #0]
    681e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6826:	781b      	ldrb	r3, [r3, #0]
    6828:	4413      	add	r3, r2
    682a:	b2da      	uxtb	r2, r3
    682c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6834:	701a      	strb	r2, [r3, #0]
    6836:	f24c 3319 	movw	r3, #49945	; 0xc319
    683a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    683e:	781b      	ldrb	r3, [r3, #0]
    6840:	3301      	adds	r3, #1
    6842:	b2da      	uxtb	r2, r3
    6844:	f24c 3319 	movw	r3, #49945	; 0xc319
    6848:	f2c2 0304 	movt	r3, #8196	; 0x2004
    684c:	701a      	strb	r2, [r3, #0]
    684e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6852:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6856:	781b      	ldrb	r3, [r3, #0]
    6858:	2bff      	cmp	r3, #255	; 0xff
    685a:	d105      	bne.n	6868 <ground_calibrate+0x710>
    685c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6864:	2200      	movs	r2, #0
    6866:	701a      	strb	r2, [r3, #0]
    6868:	f24c 3319 	movw	r3, #49945	; 0xc319
    686c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6870:	781b      	ldrb	r3, [r3, #0]
    6872:	461a      	mov	r2, r3
    6874:	f64c 1314 	movw	r3, #51476	; 0xc914
    6878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    687c:	7859      	ldrb	r1, [r3, #1]
    687e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6882:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6886:	5499      	strb	r1, [r3, r2]
    6888:	4b43      	ldr	r3, [pc, #268]	; (6998 <ground_calibrate+0x840>)
    688a:	781a      	ldrb	r2, [r3, #0]
    688c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6894:	781b      	ldrb	r3, [r3, #0]
    6896:	4413      	add	r3, r2
    6898:	b2da      	uxtb	r2, r3
    689a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    689e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68a2:	701a      	strb	r2, [r3, #0]
    68a4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    68a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ac:	781a      	ldrb	r2, [r3, #0]
    68ae:	f24c 431d 	movw	r3, #50205	; 0xc41d
    68b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68b6:	781b      	ldrb	r3, [r3, #0]
    68b8:	4413      	add	r3, r2
    68ba:	b2da      	uxtb	r2, r3
    68bc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    68c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68c4:	701a      	strb	r2, [r3, #0]
    68c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    68ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ce:	781b      	ldrb	r3, [r3, #0]
    68d0:	3301      	adds	r3, #1
    68d2:	b2da      	uxtb	r2, r3
    68d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    68d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68dc:	701a      	strb	r2, [r3, #0]
    68de:	f24c 3319 	movw	r3, #49945	; 0xc319
    68e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68e6:	781b      	ldrb	r3, [r3, #0]
    68e8:	2bff      	cmp	r3, #255	; 0xff
    68ea:	d105      	bne.n	68f8 <ground_calibrate+0x7a0>
    68ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    68f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68f4:	2200      	movs	r2, #0
    68f6:	701a      	strb	r2, [r3, #0]
    68f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    68fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6900:	781b      	ldrb	r3, [r3, #0]
    6902:	461a      	mov	r2, r3
    6904:	f64c 1314 	movw	r3, #51476	; 0xc914
    6908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    690c:	7899      	ldrb	r1, [r3, #2]
    690e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6916:	5499      	strb	r1, [r3, r2]
    6918:	4b20      	ldr	r3, [pc, #128]	; (699c <ground_calibrate+0x844>)
    691a:	781a      	ldrb	r2, [r3, #0]
    691c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6924:	781b      	ldrb	r3, [r3, #0]
    6926:	4413      	add	r3, r2
    6928:	b2da      	uxtb	r2, r3
    692a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    692e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6932:	701a      	strb	r2, [r3, #0]
    6934:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    693c:	781a      	ldrb	r2, [r3, #0]
    693e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6946:	781b      	ldrb	r3, [r3, #0]
    6948:	4413      	add	r3, r2
    694a:	b2da      	uxtb	r2, r3
    694c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6954:	701a      	strb	r2, [r3, #0]
    6956:	f24c 3319 	movw	r3, #49945	; 0xc319
    695a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    695e:	781b      	ldrb	r3, [r3, #0]
    6960:	3301      	adds	r3, #1
    6962:	b2da      	uxtb	r2, r3
    6964:	f24c 3319 	movw	r3, #49945	; 0xc319
    6968:	f2c2 0304 	movt	r3, #8196	; 0x2004
    696c:	701a      	strb	r2, [r3, #0]
    696e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6976:	781b      	ldrb	r3, [r3, #0]
    6978:	2bff      	cmp	r3, #255	; 0xff
    697a:	d111      	bne.n	69a0 <ground_calibrate+0x848>
    697c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6984:	2200      	movs	r2, #0
    6986:	701a      	strb	r2, [r3, #0]
    6988:	e00a      	b.n	69a0 <ground_calibrate+0x848>
    698a:	bf00      	nop
    698c:	2004c911 	.word	0x2004c911
    6990:	2004c912 	.word	0x2004c912
    6994:	2004c913 	.word	0x2004c913
    6998:	2004c915 	.word	0x2004c915
    699c:	2004c916 	.word	0x2004c916
    69a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    69a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69a8:	781b      	ldrb	r3, [r3, #0]
    69aa:	461a      	mov	r2, r3
    69ac:	f64c 1314 	movw	r3, #51476	; 0xc914
    69b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69b4:	78d9      	ldrb	r1, [r3, #3]
    69b6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    69ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69be:	5499      	strb	r1, [r3, r2]
    69c0:	4bd3      	ldr	r3, [pc, #844]	; (6d10 <ground_calibrate+0xbb8>)
    69c2:	781a      	ldrb	r2, [r3, #0]
    69c4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    69c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69cc:	781b      	ldrb	r3, [r3, #0]
    69ce:	4413      	add	r3, r2
    69d0:	b2da      	uxtb	r2, r3
    69d2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    69d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69da:	701a      	strb	r2, [r3, #0]
    69dc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    69e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69e4:	781a      	ldrb	r2, [r3, #0]
    69e6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    69ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69ee:	781b      	ldrb	r3, [r3, #0]
    69f0:	4413      	add	r3, r2
    69f2:	b2da      	uxtb	r2, r3
    69f4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    69f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69fc:	701a      	strb	r2, [r3, #0]
    69fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a06:	781b      	ldrb	r3, [r3, #0]
    6a08:	3301      	adds	r3, #1
    6a0a:	b2da      	uxtb	r2, r3
    6a0c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a14:	701a      	strb	r2, [r3, #0]
    6a16:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a1e:	781b      	ldrb	r3, [r3, #0]
    6a20:	2bff      	cmp	r3, #255	; 0xff
    6a22:	d105      	bne.n	6a30 <ground_calibrate+0x8d8>
    6a24:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a2c:	2200      	movs	r2, #0
    6a2e:	701a      	strb	r2, [r3, #0]
    6a30:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a38:	781b      	ldrb	r3, [r3, #0]
    6a3a:	461a      	mov	r2, r3
    6a3c:	f64c 130c 	movw	r3, #51468	; 0xc90c
    6a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a44:	7819      	ldrb	r1, [r3, #0]
    6a46:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6a4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a4e:	5499      	strb	r1, [r3, r2]
    6a50:	f64c 130c 	movw	r3, #51468	; 0xc90c
    6a54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a58:	781a      	ldrb	r2, [r3, #0]
    6a5a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6a5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a62:	781b      	ldrb	r3, [r3, #0]
    6a64:	4413      	add	r3, r2
    6a66:	b2da      	uxtb	r2, r3
    6a68:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6a6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a70:	701a      	strb	r2, [r3, #0]
    6a72:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6a76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a7a:	781a      	ldrb	r2, [r3, #0]
    6a7c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6a80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a84:	781b      	ldrb	r3, [r3, #0]
    6a86:	4413      	add	r3, r2
    6a88:	b2da      	uxtb	r2, r3
    6a8a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6a8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a92:	701a      	strb	r2, [r3, #0]
    6a94:	f24c 3319 	movw	r3, #49945	; 0xc319
    6a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a9c:	781b      	ldrb	r3, [r3, #0]
    6a9e:	3301      	adds	r3, #1
    6aa0:	b2da      	uxtb	r2, r3
    6aa2:	f24c 3319 	movw	r3, #49945	; 0xc319
    6aa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aaa:	701a      	strb	r2, [r3, #0]
    6aac:	f24c 3319 	movw	r3, #49945	; 0xc319
    6ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ab4:	781b      	ldrb	r3, [r3, #0]
    6ab6:	2bff      	cmp	r3, #255	; 0xff
    6ab8:	d105      	bne.n	6ac6 <ground_calibrate+0x96e>
    6aba:	f24c 3319 	movw	r3, #49945	; 0xc319
    6abe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ac2:	2200      	movs	r2, #0
    6ac4:	701a      	strb	r2, [r3, #0]
    6ac6:	f24c 3319 	movw	r3, #49945	; 0xc319
    6aca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ace:	781b      	ldrb	r3, [r3, #0]
    6ad0:	461a      	mov	r2, r3
    6ad2:	f64c 130c 	movw	r3, #51468	; 0xc90c
    6ad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ada:	7859      	ldrb	r1, [r3, #1]
    6adc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6ae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ae4:	5499      	strb	r1, [r3, r2]
    6ae6:	4b8b      	ldr	r3, [pc, #556]	; (6d14 <ground_calibrate+0xbbc>)
    6ae8:	781a      	ldrb	r2, [r3, #0]
    6aea:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6aee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6af2:	781b      	ldrb	r3, [r3, #0]
    6af4:	4413      	add	r3, r2
    6af6:	b2da      	uxtb	r2, r3
    6af8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6afc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b00:	701a      	strb	r2, [r3, #0]
    6b02:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6b06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b0a:	781a      	ldrb	r2, [r3, #0]
    6b0c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6b10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b14:	781b      	ldrb	r3, [r3, #0]
    6b16:	4413      	add	r3, r2
    6b18:	b2da      	uxtb	r2, r3
    6b1a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6b1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b22:	701a      	strb	r2, [r3, #0]
    6b24:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b2c:	781b      	ldrb	r3, [r3, #0]
    6b2e:	3301      	adds	r3, #1
    6b30:	b2da      	uxtb	r2, r3
    6b32:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b3a:	701a      	strb	r2, [r3, #0]
    6b3c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b44:	781b      	ldrb	r3, [r3, #0]
    6b46:	2bff      	cmp	r3, #255	; 0xff
    6b48:	d105      	bne.n	6b56 <ground_calibrate+0x9fe>
    6b4a:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b52:	2200      	movs	r2, #0
    6b54:	701a      	strb	r2, [r3, #0]
    6b56:	f24c 3319 	movw	r3, #49945	; 0xc319
    6b5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b5e:	781b      	ldrb	r3, [r3, #0]
    6b60:	461a      	mov	r2, r3
    6b62:	f64c 130c 	movw	r3, #51468	; 0xc90c
    6b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b6a:	7899      	ldrb	r1, [r3, #2]
    6b6c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b74:	5499      	strb	r1, [r3, r2]
    6b76:	4b68      	ldr	r3, [pc, #416]	; (6d18 <ground_calibrate+0xbc0>)
    6b78:	781a      	ldrb	r2, [r3, #0]
    6b7a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6b7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b82:	781b      	ldrb	r3, [r3, #0]
    6b84:	4413      	add	r3, r2
    6b86:	b2da      	uxtb	r2, r3
    6b88:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6b8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b90:	701a      	strb	r2, [r3, #0]
    6b92:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6b96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b9a:	781a      	ldrb	r2, [r3, #0]
    6b9c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6ba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ba4:	781b      	ldrb	r3, [r3, #0]
    6ba6:	4413      	add	r3, r2
    6ba8:	b2da      	uxtb	r2, r3
    6baa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6bae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bb2:	701a      	strb	r2, [r3, #0]
    6bb4:	f24c 3319 	movw	r3, #49945	; 0xc319
    6bb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bbc:	781b      	ldrb	r3, [r3, #0]
    6bbe:	3301      	adds	r3, #1
    6bc0:	b2da      	uxtb	r2, r3
    6bc2:	f24c 3319 	movw	r3, #49945	; 0xc319
    6bc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bca:	701a      	strb	r2, [r3, #0]
    6bcc:	f24c 3319 	movw	r3, #49945	; 0xc319
    6bd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bd4:	781b      	ldrb	r3, [r3, #0]
    6bd6:	2bff      	cmp	r3, #255	; 0xff
    6bd8:	d105      	bne.n	6be6 <ground_calibrate+0xa8e>
    6bda:	f24c 3319 	movw	r3, #49945	; 0xc319
    6bde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6be2:	2200      	movs	r2, #0
    6be4:	701a      	strb	r2, [r3, #0]
    6be6:	f24c 3319 	movw	r3, #49945	; 0xc319
    6bea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bee:	781b      	ldrb	r3, [r3, #0]
    6bf0:	461a      	mov	r2, r3
    6bf2:	f64c 130c 	movw	r3, #51468	; 0xc90c
    6bf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bfa:	78d9      	ldrb	r1, [r3, #3]
    6bfc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6c00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c04:	5499      	strb	r1, [r3, r2]
    6c06:	4b45      	ldr	r3, [pc, #276]	; (6d1c <ground_calibrate+0xbc4>)
    6c08:	781a      	ldrb	r2, [r3, #0]
    6c0a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6c0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c12:	781b      	ldrb	r3, [r3, #0]
    6c14:	4413      	add	r3, r2
    6c16:	b2da      	uxtb	r2, r3
    6c18:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6c1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c20:	701a      	strb	r2, [r3, #0]
    6c22:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6c26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c2a:	781a      	ldrb	r2, [r3, #0]
    6c2c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6c30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c34:	781b      	ldrb	r3, [r3, #0]
    6c36:	4413      	add	r3, r2
    6c38:	b2da      	uxtb	r2, r3
    6c3a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6c3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c42:	701a      	strb	r2, [r3, #0]
    6c44:	f24c 3319 	movw	r3, #49945	; 0xc319
    6c48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c4c:	781b      	ldrb	r3, [r3, #0]
    6c4e:	3301      	adds	r3, #1
    6c50:	b2da      	uxtb	r2, r3
    6c52:	f24c 3319 	movw	r3, #49945	; 0xc319
    6c56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c5a:	701a      	strb	r2, [r3, #0]
    6c5c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6c60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c64:	781b      	ldrb	r3, [r3, #0]
    6c66:	2bff      	cmp	r3, #255	; 0xff
    6c68:	d105      	bne.n	6c76 <ground_calibrate+0xb1e>
    6c6a:	f24c 3319 	movw	r3, #49945	; 0xc319
    6c6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c72:	2200      	movs	r2, #0
    6c74:	701a      	strb	r2, [r3, #0]
    6c76:	f24c 3319 	movw	r3, #49945	; 0xc319
    6c7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c7e:	781b      	ldrb	r3, [r3, #0]
    6c80:	461a      	mov	r2, r3
    6c82:	f240 5342 	movw	r3, #1346	; 0x542
    6c86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c8a:	7819      	ldrb	r1, [r3, #0]
    6c8c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6c90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c94:	5499      	strb	r1, [r3, r2]
    6c96:	f240 5342 	movw	r3, #1346	; 0x542
    6c9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c9e:	781a      	ldrb	r2, [r3, #0]
    6ca0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6ca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ca8:	781b      	ldrb	r3, [r3, #0]
    6caa:	4413      	add	r3, r2
    6cac:	b2da      	uxtb	r2, r3
    6cae:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6cb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cb6:	701a      	strb	r2, [r3, #0]
    6cb8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6cbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cc0:	781a      	ldrb	r2, [r3, #0]
    6cc2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6cc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cca:	781b      	ldrb	r3, [r3, #0]
    6ccc:	4413      	add	r3, r2
    6cce:	b2da      	uxtb	r2, r3
    6cd0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6cd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cd8:	701a      	strb	r2, [r3, #0]
    6cda:	f24c 3319 	movw	r3, #49945	; 0xc319
    6cde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ce2:	781b      	ldrb	r3, [r3, #0]
    6ce4:	3301      	adds	r3, #1
    6ce6:	b2da      	uxtb	r2, r3
    6ce8:	f24c 3319 	movw	r3, #49945	; 0xc319
    6cec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cf0:	701a      	strb	r2, [r3, #0]
    6cf2:	f24c 3319 	movw	r3, #49945	; 0xc319
    6cf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cfa:	781b      	ldrb	r3, [r3, #0]
    6cfc:	2bff      	cmp	r3, #255	; 0xff
    6cfe:	d10f      	bne.n	6d20 <ground_calibrate+0xbc8>
    6d00:	f24c 3319 	movw	r3, #49945	; 0xc319
    6d04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d08:	2200      	movs	r2, #0
    6d0a:	701a      	strb	r2, [r3, #0]
    6d0c:	e008      	b.n	6d20 <ground_calibrate+0xbc8>
    6d0e:	bf00      	nop
    6d10:	2004c917 	.word	0x2004c917
    6d14:	2004c90d 	.word	0x2004c90d
    6d18:	2004c90e 	.word	0x2004c90e
    6d1c:	2004c90f 	.word	0x2004c90f
    6d20:	f24c 3319 	movw	r3, #49945	; 0xc319
    6d24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d28:	781b      	ldrb	r3, [r3, #0]
    6d2a:	461a      	mov	r2, r3
    6d2c:	f240 5342 	movw	r3, #1346	; 0x542
    6d30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d34:	7859      	ldrb	r1, [r3, #1]
    6d36:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6d3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d3e:	5499      	strb	r1, [r3, r2]
    6d40:	4bd4      	ldr	r3, [pc, #848]	; (7094 <ground_calibrate+0xf3c>)
    6d42:	781a      	ldrb	r2, [r3, #0]
    6d44:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6d48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d4c:	781b      	ldrb	r3, [r3, #0]
    6d4e:	4413      	add	r3, r2
    6d50:	b2da      	uxtb	r2, r3
    6d52:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6d56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d5a:	701a      	strb	r2, [r3, #0]
    6d5c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6d60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d64:	781a      	ldrb	r2, [r3, #0]
    6d66:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6d6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d6e:	781b      	ldrb	r3, [r3, #0]
    6d70:	4413      	add	r3, r2
    6d72:	b2da      	uxtb	r2, r3
    6d74:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6d78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d7c:	701a      	strb	r2, [r3, #0]
    6d7e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6d82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d86:	781b      	ldrb	r3, [r3, #0]
    6d88:	3301      	adds	r3, #1
    6d8a:	b2da      	uxtb	r2, r3
    6d8c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6d90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d94:	701a      	strb	r2, [r3, #0]
    6d96:	f24c 3319 	movw	r3, #49945	; 0xc319
    6d9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d9e:	781b      	ldrb	r3, [r3, #0]
    6da0:	2bff      	cmp	r3, #255	; 0xff
    6da2:	d105      	bne.n	6db0 <ground_calibrate+0xc58>
    6da4:	f24c 3319 	movw	r3, #49945	; 0xc319
    6da8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dac:	2200      	movs	r2, #0
    6dae:	701a      	strb	r2, [r3, #0]
    6db0:	f24c 3319 	movw	r3, #49945	; 0xc319
    6db4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6db8:	781b      	ldrb	r3, [r3, #0]
    6dba:	461a      	mov	r2, r3
    6dbc:	f240 5344 	movw	r3, #1348	; 0x544
    6dc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dc4:	7819      	ldrb	r1, [r3, #0]
    6dc6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6dca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dce:	5499      	strb	r1, [r3, r2]
    6dd0:	f240 5344 	movw	r3, #1348	; 0x544
    6dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dd8:	781a      	ldrb	r2, [r3, #0]
    6dda:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6dde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6de2:	781b      	ldrb	r3, [r3, #0]
    6de4:	4413      	add	r3, r2
    6de6:	b2da      	uxtb	r2, r3
    6de8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6dec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6df0:	701a      	strb	r2, [r3, #0]
    6df2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dfa:	781a      	ldrb	r2, [r3, #0]
    6dfc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6e00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e04:	781b      	ldrb	r3, [r3, #0]
    6e06:	4413      	add	r3, r2
    6e08:	b2da      	uxtb	r2, r3
    6e0a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6e0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e12:	701a      	strb	r2, [r3, #0]
    6e14:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e1c:	781b      	ldrb	r3, [r3, #0]
    6e1e:	3301      	adds	r3, #1
    6e20:	b2da      	uxtb	r2, r3
    6e22:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e2a:	701a      	strb	r2, [r3, #0]
    6e2c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e34:	781b      	ldrb	r3, [r3, #0]
    6e36:	2bff      	cmp	r3, #255	; 0xff
    6e38:	d105      	bne.n	6e46 <ground_calibrate+0xcee>
    6e3a:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e42:	2200      	movs	r2, #0
    6e44:	701a      	strb	r2, [r3, #0]
    6e46:	f24c 3319 	movw	r3, #49945	; 0xc319
    6e4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e4e:	781b      	ldrb	r3, [r3, #0]
    6e50:	461a      	mov	r2, r3
    6e52:	f240 5344 	movw	r3, #1348	; 0x544
    6e56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e5a:	7859      	ldrb	r1, [r3, #1]
    6e5c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6e60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e64:	5499      	strb	r1, [r3, r2]
    6e66:	4b8c      	ldr	r3, [pc, #560]	; (7098 <ground_calibrate+0xf40>)
    6e68:	781a      	ldrb	r2, [r3, #0]
    6e6a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6e6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e72:	781b      	ldrb	r3, [r3, #0]
    6e74:	4413      	add	r3, r2
    6e76:	b2da      	uxtb	r2, r3
    6e78:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6e7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e80:	701a      	strb	r2, [r3, #0]
    6e82:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6e86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e8a:	781a      	ldrb	r2, [r3, #0]
    6e8c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6e90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e94:	781b      	ldrb	r3, [r3, #0]
    6e96:	4413      	add	r3, r2
    6e98:	b2da      	uxtb	r2, r3
    6e9a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6e9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ea2:	701a      	strb	r2, [r3, #0]
    6ea4:	f24c 3319 	movw	r3, #49945	; 0xc319
    6ea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eac:	781b      	ldrb	r3, [r3, #0]
    6eae:	3301      	adds	r3, #1
    6eb0:	b2da      	uxtb	r2, r3
    6eb2:	f24c 3319 	movw	r3, #49945	; 0xc319
    6eb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eba:	701a      	strb	r2, [r3, #0]
    6ebc:	f24c 3319 	movw	r3, #49945	; 0xc319
    6ec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ec4:	781b      	ldrb	r3, [r3, #0]
    6ec6:	2bff      	cmp	r3, #255	; 0xff
    6ec8:	d105      	bne.n	6ed6 <ground_calibrate+0xd7e>
    6eca:	f24c 3319 	movw	r3, #49945	; 0xc319
    6ece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ed2:	2200      	movs	r2, #0
    6ed4:	701a      	strb	r2, [r3, #0]
    6ed6:	f24c 3319 	movw	r3, #49945	; 0xc319
    6eda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ede:	781b      	ldrb	r3, [r3, #0]
    6ee0:	461a      	mov	r2, r3
    6ee2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    6ee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eea:	7819      	ldrb	r1, [r3, #0]
    6eec:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6ef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ef4:	5499      	strb	r1, [r3, r2]
    6ef6:	f24c 3319 	movw	r3, #49945	; 0xc319
    6efa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6efe:	781b      	ldrb	r3, [r3, #0]
    6f00:	3301      	adds	r3, #1
    6f02:	b2da      	uxtb	r2, r3
    6f04:	f24c 3319 	movw	r3, #49945	; 0xc319
    6f08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f0c:	701a      	strb	r2, [r3, #0]
    6f0e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6f12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f16:	781b      	ldrb	r3, [r3, #0]
    6f18:	2bff      	cmp	r3, #255	; 0xff
    6f1a:	d105      	bne.n	6f28 <ground_calibrate+0xdd0>
    6f1c:	f24c 3319 	movw	r3, #49945	; 0xc319
    6f20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f24:	2200      	movs	r2, #0
    6f26:	701a      	strb	r2, [r3, #0]
    6f28:	f24c 3319 	movw	r3, #49945	; 0xc319
    6f2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f30:	781b      	ldrb	r3, [r3, #0]
    6f32:	461a      	mov	r2, r3
    6f34:	f24c 431e 	movw	r3, #50206	; 0xc41e
    6f38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f3c:	7819      	ldrb	r1, [r3, #0]
    6f3e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6f42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f46:	5499      	strb	r1, [r3, r2]
    6f48:	f24c 3319 	movw	r3, #49945	; 0xc319
    6f4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f50:	781b      	ldrb	r3, [r3, #0]
    6f52:	3301      	adds	r3, #1
    6f54:	b2da      	uxtb	r2, r3
    6f56:	f24c 3319 	movw	r3, #49945	; 0xc319
    6f5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f5e:	701a      	strb	r2, [r3, #0]
    6f60:	f24c 3319 	movw	r3, #49945	; 0xc319
    6f64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f68:	781b      	ldrb	r3, [r3, #0]
    6f6a:	2bff      	cmp	r3, #255	; 0xff
    6f6c:	d105      	bne.n	6f7a <ground_calibrate+0xe22>
    6f6e:	f24c 3319 	movw	r3, #49945	; 0xc319
    6f72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f76:	2200      	movs	r2, #0
    6f78:	701a      	strb	r2, [r3, #0]
    6f7a:	f242 0339 	movw	r3, #8249	; 0x2039
    6f7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f82:	781b      	ldrb	r3, [r3, #0]
    6f84:	b2db      	uxtb	r3, r3
    6f86:	f003 0310 	and.w	r3, r3, #16
    6f8a:	2b00      	cmp	r3, #0
    6f8c:	d15a      	bne.n	7044 <ground_calibrate+0xeec>
    6f8e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6f92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f96:	781b      	ldrb	r3, [r3, #0]
    6f98:	b2db      	uxtb	r3, r3
    6f9a:	461a      	mov	r2, r3
    6f9c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    6fa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fa4:	5c9a      	ldrb	r2, [r3, r2]
    6fa6:	f24c 431b 	movw	r3, #50203	; 0xc41b
    6faa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fae:	701a      	strb	r2, [r3, #0]
    6fb0:	f24c 431c 	movw	r3, #50204	; 0xc41c
    6fb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fb8:	2200      	movs	r2, #0
    6fba:	701a      	strb	r2, [r3, #0]
    6fbc:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6fc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fc4:	781b      	ldrb	r3, [r3, #0]
    6fc6:	b2db      	uxtb	r3, r3
    6fc8:	3301      	adds	r3, #1
    6fca:	b2da      	uxtb	r2, r3
    6fcc:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6fd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fd4:	701a      	strb	r2, [r3, #0]
    6fd6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6fda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fde:	781b      	ldrb	r3, [r3, #0]
    6fe0:	b2db      	uxtb	r3, r3
    6fe2:	2bff      	cmp	r3, #255	; 0xff
    6fe4:	d105      	bne.n	6ff2 <ground_calibrate+0xe9a>
    6fe6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    6fea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fee:	2200      	movs	r2, #0
    6ff0:	701a      	strb	r2, [r3, #0]
    6ff2:	f242 0338 	movw	r3, #8248	; 0x2038
    6ff6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ffa:	f242 0238 	movw	r2, #8248	; 0x2038
    6ffe:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7002:	7812      	ldrb	r2, [r2, #0]
    7004:	b2d2      	uxtb	r2, r2
    7006:	f042 0201 	orr.w	r2, r2, #1
    700a:	b2d2      	uxtb	r2, r2
    700c:	701a      	strb	r2, [r3, #0]
    700e:	f242 0339 	movw	r3, #8249	; 0x2039
    7012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7016:	f242 0239 	movw	r2, #8249	; 0x2039
    701a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    701e:	7812      	ldrb	r2, [r2, #0]
    7020:	b2d2      	uxtb	r2, r2
    7022:	f042 0210 	orr.w	r2, r2, #16
    7026:	b2d2      	uxtb	r2, r2
    7028:	701a      	strb	r2, [r3, #0]
    702a:	e00b      	b.n	7044 <ground_calibrate+0xeec>
    702c:	f24c 3318 	movw	r3, #49944	; 0xc318
    7030:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7034:	781b      	ldrb	r3, [r3, #0]
    7036:	3301      	adds	r3, #1
    7038:	b2da      	uxtb	r2, r3
    703a:	f24c 3318 	movw	r3, #49944	; 0xc318
    703e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7042:	701a      	strb	r2, [r3, #0]
      calib_status = CALIB_DONE;
    7044:	f24c 3312 	movw	r3, #49938	; 0xc312
    7048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    704c:	2202      	movs	r2, #2
    704e:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_CONTRAST(&ir_contrast);
    7050:	f24c 3319 	movw	r3, #49945	; 0xc319
    7054:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7058:	781a      	ldrb	r2, [r3, #0]
    705a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    705e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7062:	781b      	ldrb	r3, [r3, #0]
    7064:	b2db      	uxtb	r3, r3
    7066:	429a      	cmp	r2, r3
    7068:	d318      	bcc.n	709c <ground_calibrate+0xf44>
    706a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    706e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7072:	781b      	ldrb	r3, [r3, #0]
    7074:	b2db      	uxtb	r3, r3
    7076:	461a      	mov	r2, r3
    7078:	f24c 3319 	movw	r3, #49945	; 0xc319
    707c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7080:	781b      	ldrb	r3, [r3, #0]
    7082:	1ad3      	subs	r3, r2, r3
    7084:	33ff      	adds	r3, #255	; 0xff
    7086:	2b06      	cmp	r3, #6
    7088:	bfd4      	ite	le
    708a:	2300      	movle	r3, #0
    708c:	2301      	movgt	r3, #1
    708e:	b2db      	uxtb	r3, r3
    7090:	e016      	b.n	70c0 <ground_calibrate+0xf68>
    7092:	bf00      	nop
    7094:	20000543 	.word	0x20000543
    7098:	20000545 	.word	0x20000545
    709c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    70a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70a4:	781b      	ldrb	r3, [r3, #0]
    70a6:	b2db      	uxtb	r3, r3
    70a8:	461a      	mov	r2, r3
    70aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    70ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70b2:	781b      	ldrb	r3, [r3, #0]
    70b4:	1ad3      	subs	r3, r2, r3
    70b6:	2b06      	cmp	r3, #6
    70b8:	bfd4      	ite	le
    70ba:	2300      	movle	r3, #0
    70bc:	2301      	movgt	r3, #1
    70be:	b2db      	uxtb	r3, r3
    70c0:	2b00      	cmp	r3, #0
    70c2:	f000 8194 	beq.w	73ee <ground_calibrate+0x1296>
    70c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    70ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70ce:	781b      	ldrb	r3, [r3, #0]
    70d0:	461a      	mov	r2, r3
    70d2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    70d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70da:	2105      	movs	r1, #5
    70dc:	5499      	strb	r1, [r3, r2]
    70de:	f24c 3319 	movw	r3, #49945	; 0xc319
    70e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70e6:	781b      	ldrb	r3, [r3, #0]
    70e8:	3301      	adds	r3, #1
    70ea:	b2da      	uxtb	r2, r3
    70ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    70f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70f4:	701a      	strb	r2, [r3, #0]
    70f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    70fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70fe:	781b      	ldrb	r3, [r3, #0]
    7100:	2bff      	cmp	r3, #255	; 0xff
    7102:	d105      	bne.n	7110 <ground_calibrate+0xfb8>
    7104:	f24c 3319 	movw	r3, #49945	; 0xc319
    7108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    710c:	2200      	movs	r2, #0
    710e:	701a      	strb	r2, [r3, #0]
    7110:	f24c 3319 	movw	r3, #49945	; 0xc319
    7114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7118:	781b      	ldrb	r3, [r3, #0]
    711a:	461a      	mov	r2, r3
    711c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7120:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7124:	2103      	movs	r1, #3
    7126:	5499      	strb	r1, [r3, r2]
    7128:	f24c 3319 	movw	r3, #49945	; 0xc319
    712c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7130:	781b      	ldrb	r3, [r3, #0]
    7132:	3301      	adds	r3, #1
    7134:	b2da      	uxtb	r2, r3
    7136:	f24c 3319 	movw	r3, #49945	; 0xc319
    713a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    713e:	701a      	strb	r2, [r3, #0]
    7140:	f24c 3319 	movw	r3, #49945	; 0xc319
    7144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7148:	781b      	ldrb	r3, [r3, #0]
    714a:	2bff      	cmp	r3, #255	; 0xff
    714c:	d105      	bne.n	715a <ground_calibrate+0x1002>
    714e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7156:	2200      	movs	r2, #0
    7158:	701a      	strb	r2, [r3, #0]
    715a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    715e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7162:	2203      	movs	r2, #3
    7164:	701a      	strb	r2, [r3, #0]
    7166:	f24c 431e 	movw	r3, #50206	; 0xc41e
    716a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    716e:	2203      	movs	r2, #3
    7170:	701a      	strb	r2, [r3, #0]
    7172:	f24c 3319 	movw	r3, #49945	; 0xc319
    7176:	f2c2 0304 	movt	r3, #8196	; 0x2004
    717a:	781b      	ldrb	r3, [r3, #0]
    717c:	461a      	mov	r2, r3
    717e:	f240 5340 	movw	r3, #1344	; 0x540
    7182:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7186:	7819      	ldrb	r1, [r3, #0]
    7188:	f24c 331c 	movw	r3, #49948	; 0xc31c
    718c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7190:	5499      	strb	r1, [r3, r2]
    7192:	f240 5340 	movw	r3, #1344	; 0x540
    7196:	f2c2 0300 	movt	r3, #8192	; 0x2000
    719a:	781a      	ldrb	r2, [r3, #0]
    719c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    71a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71a4:	781b      	ldrb	r3, [r3, #0]
    71a6:	4413      	add	r3, r2
    71a8:	b2da      	uxtb	r2, r3
    71aa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    71ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71b2:	701a      	strb	r2, [r3, #0]
    71b4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    71b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71bc:	781a      	ldrb	r2, [r3, #0]
    71be:	f24c 431d 	movw	r3, #50205	; 0xc41d
    71c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71c6:	781b      	ldrb	r3, [r3, #0]
    71c8:	4413      	add	r3, r2
    71ca:	b2da      	uxtb	r2, r3
    71cc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    71d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71d4:	701a      	strb	r2, [r3, #0]
    71d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    71da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71de:	781b      	ldrb	r3, [r3, #0]
    71e0:	3301      	adds	r3, #1
    71e2:	b2da      	uxtb	r2, r3
    71e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    71e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71ec:	701a      	strb	r2, [r3, #0]
    71ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    71f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71f6:	781b      	ldrb	r3, [r3, #0]
    71f8:	2bff      	cmp	r3, #255	; 0xff
    71fa:	d105      	bne.n	7208 <ground_calibrate+0x10b0>
    71fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    7200:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7204:	2200      	movs	r2, #0
    7206:	701a      	strb	r2, [r3, #0]
    7208:	f24c 3319 	movw	r3, #49945	; 0xc319
    720c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7210:	781b      	ldrb	r3, [r3, #0]
    7212:	461a      	mov	r2, r3
    7214:	f240 5340 	movw	r3, #1344	; 0x540
    7218:	f2c2 0300 	movt	r3, #8192	; 0x2000
    721c:	7859      	ldrb	r1, [r3, #1]
    721e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7226:	5499      	strb	r1, [r3, r2]
    7228:	4b77      	ldr	r3, [pc, #476]	; (7408 <ground_calibrate+0x12b0>)
    722a:	781a      	ldrb	r2, [r3, #0]
    722c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7230:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7234:	781b      	ldrb	r3, [r3, #0]
    7236:	4413      	add	r3, r2
    7238:	b2da      	uxtb	r2, r3
    723a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    723e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7242:	701a      	strb	r2, [r3, #0]
    7244:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7248:	f2c2 0304 	movt	r3, #8196	; 0x2004
    724c:	781a      	ldrb	r2, [r3, #0]
    724e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7252:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7256:	781b      	ldrb	r3, [r3, #0]
    7258:	4413      	add	r3, r2
    725a:	b2da      	uxtb	r2, r3
    725c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7260:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7264:	701a      	strb	r2, [r3, #0]
    7266:	f24c 3319 	movw	r3, #49945	; 0xc319
    726a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    726e:	781b      	ldrb	r3, [r3, #0]
    7270:	3301      	adds	r3, #1
    7272:	b2da      	uxtb	r2, r3
    7274:	f24c 3319 	movw	r3, #49945	; 0xc319
    7278:	f2c2 0304 	movt	r3, #8196	; 0x2004
    727c:	701a      	strb	r2, [r3, #0]
    727e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7286:	781b      	ldrb	r3, [r3, #0]
    7288:	2bff      	cmp	r3, #255	; 0xff
    728a:	d105      	bne.n	7298 <ground_calibrate+0x1140>
    728c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7290:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7294:	2200      	movs	r2, #0
    7296:	701a      	strb	r2, [r3, #0]
    7298:	f24c 3319 	movw	r3, #49945	; 0xc319
    729c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72a0:	781b      	ldrb	r3, [r3, #0]
    72a2:	461a      	mov	r2, r3
    72a4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    72a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72ac:	7819      	ldrb	r1, [r3, #0]
    72ae:	f24c 331c 	movw	r3, #49948	; 0xc31c
    72b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72b6:	5499      	strb	r1, [r3, r2]
    72b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    72bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72c0:	781b      	ldrb	r3, [r3, #0]
    72c2:	3301      	adds	r3, #1
    72c4:	b2da      	uxtb	r2, r3
    72c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    72ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72ce:	701a      	strb	r2, [r3, #0]
    72d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    72d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72d8:	781b      	ldrb	r3, [r3, #0]
    72da:	2bff      	cmp	r3, #255	; 0xff
    72dc:	d105      	bne.n	72ea <ground_calibrate+0x1192>
    72de:	f24c 3319 	movw	r3, #49945	; 0xc319
    72e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72e6:	2200      	movs	r2, #0
    72e8:	701a      	strb	r2, [r3, #0]
    72ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    72ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72f2:	781b      	ldrb	r3, [r3, #0]
    72f4:	461a      	mov	r2, r3
    72f6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    72fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72fe:	7819      	ldrb	r1, [r3, #0]
    7300:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7308:	5499      	strb	r1, [r3, r2]
    730a:	f24c 3319 	movw	r3, #49945	; 0xc319
    730e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7312:	781b      	ldrb	r3, [r3, #0]
    7314:	3301      	adds	r3, #1
    7316:	b2da      	uxtb	r2, r3
    7318:	f24c 3319 	movw	r3, #49945	; 0xc319
    731c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7320:	701a      	strb	r2, [r3, #0]
    7322:	f24c 3319 	movw	r3, #49945	; 0xc319
    7326:	f2c2 0304 	movt	r3, #8196	; 0x2004
    732a:	781b      	ldrb	r3, [r3, #0]
    732c:	2bff      	cmp	r3, #255	; 0xff
    732e:	d105      	bne.n	733c <ground_calibrate+0x11e4>
    7330:	f24c 3319 	movw	r3, #49945	; 0xc319
    7334:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7338:	2200      	movs	r2, #0
    733a:	701a      	strb	r2, [r3, #0]
    733c:	f242 0339 	movw	r3, #8249	; 0x2039
    7340:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7344:	781b      	ldrb	r3, [r3, #0]
    7346:	b2db      	uxtb	r3, r3
    7348:	f003 0310 	and.w	r3, r3, #16
    734c:	2b00      	cmp	r3, #0
    734e:	d15a      	bne.n	7406 <ground_calibrate+0x12ae>
    7350:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7354:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7358:	781b      	ldrb	r3, [r3, #0]
    735a:	b2db      	uxtb	r3, r3
    735c:	461a      	mov	r2, r3
    735e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7362:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7366:	5c9a      	ldrb	r2, [r3, r2]
    7368:	f24c 431b 	movw	r3, #50203	; 0xc41b
    736c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7370:	701a      	strb	r2, [r3, #0]
    7372:	f24c 431c 	movw	r3, #50204	; 0xc41c
    7376:	f2c2 0304 	movt	r3, #8196	; 0x2004
    737a:	2200      	movs	r2, #0
    737c:	701a      	strb	r2, [r3, #0]
    737e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7386:	781b      	ldrb	r3, [r3, #0]
    7388:	b2db      	uxtb	r3, r3
    738a:	3301      	adds	r3, #1
    738c:	b2da      	uxtb	r2, r3
    738e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7396:	701a      	strb	r2, [r3, #0]
    7398:	f24c 331a 	movw	r3, #49946	; 0xc31a
    739c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73a0:	781b      	ldrb	r3, [r3, #0]
    73a2:	b2db      	uxtb	r3, r3
    73a4:	2bff      	cmp	r3, #255	; 0xff
    73a6:	d105      	bne.n	73b4 <ground_calibrate+0x125c>
    73a8:	f24c 331a 	movw	r3, #49946	; 0xc31a
    73ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73b0:	2200      	movs	r2, #0
    73b2:	701a      	strb	r2, [r3, #0]
    73b4:	f242 0338 	movw	r3, #8248	; 0x2038
    73b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73bc:	f242 0238 	movw	r2, #8248	; 0x2038
    73c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    73c4:	7812      	ldrb	r2, [r2, #0]
    73c6:	b2d2      	uxtb	r2, r2
    73c8:	f042 0201 	orr.w	r2, r2, #1
    73cc:	b2d2      	uxtb	r2, r2
    73ce:	701a      	strb	r2, [r3, #0]
    73d0:	f242 0339 	movw	r3, #8249	; 0x2039
    73d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73d8:	f242 0239 	movw	r2, #8249	; 0x2039
    73dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    73e0:	7812      	ldrb	r2, [r2, #0]
    73e2:	b2d2      	uxtb	r2, r2
    73e4:	f042 0210 	orr.w	r2, r2, #16
    73e8:	b2d2      	uxtb	r2, r2
    73ea:	701a      	strb	r2, [r3, #0]
    73ec:	e00b      	b.n	7406 <ground_calibrate+0x12ae>
    73ee:	f24c 3318 	movw	r3, #49944	; 0xc318
    73f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73f6:	781b      	ldrb	r3, [r3, #0]
    73f8:	3301      	adds	r3, #1
    73fa:	b2da      	uxtb	r2, r3
    73fc:	f24c 3318 	movw	r3, #49944	; 0xc318
    7400:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7404:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    7406:	bd80      	pop	{r7, pc}
    7408:	20000541 	.word	0x20000541

0000740c <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    740c:	b480      	push	{r7}
    740e:	b083      	sub	sp, #12
    7410:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    7412:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    7416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    741a:	781b      	ldrb	r3, [r3, #0]
    741c:	2b03      	cmp	r3, #3
    741e:	d10c      	bne.n	743a <pprz_mode_update+0x2e>
    7420:	f24c 3300 	movw	r3, #49920	; 0xc300
    7424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7428:	781b      	ldrb	r3, [r3, #0]
    742a:	2b00      	cmp	r3, #0
    742c:	d032      	beq.n	7494 <pprz_mode_update+0x88>
    742e:	f24c 3300 	movw	r3, #49920	; 0xc300
    7432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7436:	2200      	movs	r2, #0
    7438:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    743a:	f24c 4320 	movw	r3, #50208	; 0xc420
    743e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7442:	891b      	ldrh	r3, [r3, #8]
    7444:	b21b      	sxth	r3, r3
    7446:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    744a:	dc0f      	bgt.n	746c <pprz_mode_update+0x60>
    744c:	f24c 4320 	movw	r3, #50208	; 0xc420
    7450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7454:	891b      	ldrh	r3, [r3, #8]
    7456:	b21a      	sxth	r2, r3
    7458:	f64e 5341 	movw	r3, #60737	; 0xed41
    745c:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    7460:	429a      	cmp	r2, r3
    7462:	bfb4      	ite	lt
    7464:	2300      	movlt	r3, #0
    7466:	2301      	movge	r3, #1
    7468:	b2db      	uxtb	r3, r3
    746a:	e000      	b.n	746e <pprz_mode_update+0x62>
    746c:	2302      	movs	r3, #2
    746e:	71fb      	strb	r3, [r7, #7]
    7470:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    7474:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7478:	781b      	ldrb	r3, [r3, #0]
    747a:	79fa      	ldrb	r2, [r7, #7]
    747c:	429a      	cmp	r2, r3
    747e:	d007      	beq.n	7490 <pprz_mode_update+0x84>
    7480:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    7484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7488:	79fa      	ldrb	r2, [r7, #7]
    748a:	701a      	strb	r2, [r3, #0]
    748c:	2301      	movs	r3, #1
    748e:	e002      	b.n	7496 <pprz_mode_update+0x8a>
    7490:	2300      	movs	r3, #0
    7492:	e000      	b.n	7496 <pprz_mode_update+0x8a>
  } else
    return FALSE;
    7494:	2300      	movs	r3, #0
}
    7496:	4618      	mov	r0, r3
    7498:	370c      	adds	r7, #12
    749a:	46bd      	mov	sp, r7
    749c:	f85d 7b04 	ldr.w	r7, [sp], #4
    74a0:	4770      	bx	lr
    74a2:	bf00      	nop

000074a4 <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    74a4:	b480      	push	{r7}
    74a6:	b083      	sub	sp, #12
    74a8:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    74aa:	f24c 4320 	movw	r3, #50208	; 0xc420
    74ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74b2:	89db      	ldrh	r3, [r3, #14]
    74b4:	b21a      	sxth	r2, r3
    74b6:	f640 437f 	movw	r3, #3199	; 0xc7f
    74ba:	429a      	cmp	r2, r3
    74bc:	bfd4      	ite	le
    74be:	2300      	movle	r3, #0
    74c0:	2301      	movgt	r3, #1
    74c2:	b2db      	uxtb	r3, r3
    74c4:	71fb      	strb	r3, [r7, #7]
    74c6:	f240 533c 	movw	r3, #1340	; 0x53c
    74ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74ce:	781b      	ldrb	r3, [r3, #0]
    74d0:	79fa      	ldrb	r2, [r7, #7]
    74d2:	429a      	cmp	r2, r3
    74d4:	d007      	beq.n	74e6 <ir_estim_mode_update+0x42>
    74d6:	f240 533c 	movw	r3, #1340	; 0x53c
    74da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74de:	79fa      	ldrb	r2, [r7, #7]
    74e0:	701a      	strb	r2, [r3, #0]
    74e2:	2301      	movs	r3, #1
    74e4:	e000      	b.n	74e8 <ir_estim_mode_update+0x44>
    74e6:	2300      	movs	r3, #0
}
    74e8:	4618      	mov	r0, r3
    74ea:	370c      	adds	r7, #12
    74ec:	46bd      	mov	sp, r7
    74ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    74f2:	4770      	bx	lr

000074f4 <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    74f4:	b480      	push	{r7}
    74f6:	b083      	sub	sp, #12
    74f8:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    74fa:	f24c 4320 	movw	r3, #50208	; 0xc420
    74fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7502:	7cdb      	ldrb	r3, [r3, #19]
    7504:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    7506:	f24c 3303 	movw	r3, #49923	; 0xc303
    750a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    750e:	781b      	ldrb	r3, [r3, #0]
    7510:	79fa      	ldrb	r2, [r7, #7]
    7512:	429a      	cmp	r2, r3
    7514:	d017      	beq.n	7546 <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    7516:	f24c 3303 	movw	r3, #49923	; 0xc303
    751a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    751e:	781b      	ldrb	r3, [r3, #0]
    7520:	461a      	mov	r2, r3
    7522:	79fb      	ldrb	r3, [r7, #7]
    7524:	4053      	eors	r3, r2
    7526:	f003 0303 	and.w	r3, r3, #3
    752a:	2b00      	cmp	r3, #0
    752c:	bf0c      	ite	eq
    752e:	2300      	moveq	r3, #0
    7530:	2301      	movne	r3, #1
    7532:	b2db      	uxtb	r3, r3
    7534:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    7536:	f24c 3303 	movw	r3, #49923	; 0xc303
    753a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    753e:	79fa      	ldrb	r2, [r7, #7]
    7540:	701a      	strb	r2, [r3, #0]
    return changed;
    7542:	79bb      	ldrb	r3, [r7, #6]
    7544:	e000      	b.n	7548 <mcu1_status_update+0x54>
  }
  return FALSE;
    7546:	2300      	movs	r3, #0
}
    7548:	4618      	mov	r0, r3
    754a:	370c      	adds	r7, #12
    754c:	46bd      	mov	sp, r7
    754e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7552:	4770      	bx	lr

00007554 <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    7554:	b480      	push	{r7}
    7556:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    7558:	f64c 132c 	movw	r3, #51500	; 0xc92c
    755c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7560:	781b      	ldrb	r3, [r3, #0]
    7562:	2b00      	cmp	r3, #0
    7564:	d12a      	bne.n	75bc <events_update+0x68>
    7566:	f24c 4320 	movw	r3, #50208	; 0xc420
    756a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    756e:	895b      	ldrh	r3, [r3, #10]
    7570:	b21b      	sxth	r3, r3
    7572:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    7576:	dd21      	ble.n	75bc <events_update+0x68>
    7578:	f24c 3314 	movw	r3, #49940	; 0xc314
    757c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7580:	881b      	ldrh	r3, [r3, #0]
    7582:	2b13      	cmp	r3, #19
    7584:	d819      	bhi.n	75ba <events_update+0x66>
    7586:	f24c 3314 	movw	r3, #49940	; 0xc314
    758a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    758e:	881b      	ldrh	r3, [r3, #0]
    7590:	3301      	adds	r3, #1
    7592:	b29a      	uxth	r2, r3
    7594:	f24c 3314 	movw	r3, #49940	; 0xc314
    7598:	f2c2 0304 	movt	r3, #8196	; 0x2004
    759c:	801a      	strh	r2, [r3, #0]
    759e:	f24c 3314 	movw	r3, #49940	; 0xc314
    75a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75a6:	881b      	ldrh	r3, [r3, #0]
    75a8:	2b14      	cmp	r3, #20
    75aa:	d106      	bne.n	75ba <events_update+0x66>
    75ac:	f24c 3300 	movw	r3, #49920	; 0xc300
    75b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75b4:	2201      	movs	r2, #1
    75b6:	701a      	strb	r2, [r3, #0]
    75b8:	e00c      	b.n	75d4 <events_update+0x80>
    75ba:	e00b      	b.n	75d4 <events_update+0x80>
    75bc:	f24c 3314 	movw	r3, #49940	; 0xc314
    75c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75c4:	2200      	movs	r2, #0
    75c6:	801a      	strh	r2, [r3, #0]
    75c8:	f24c 3300 	movw	r3, #49920	; 0xc300
    75cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75d0:	2200      	movs	r2, #0
    75d2:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    75d4:	f64c 132c 	movw	r3, #51500	; 0xc92c
    75d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75dc:	781b      	ldrb	r3, [r3, #0]
    75de:	2b00      	cmp	r3, #0
    75e0:	d12a      	bne.n	7638 <events_update+0xe4>
    75e2:	f24c 4320 	movw	r3, #50208	; 0xc420
    75e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75ea:	895b      	ldrh	r3, [r3, #10]
    75ec:	b21b      	sxth	r3, r3
    75ee:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    75f2:	da21      	bge.n	7638 <events_update+0xe4>
    75f4:	f24c 3316 	movw	r3, #49942	; 0xc316
    75f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75fc:	881b      	ldrh	r3, [r3, #0]
    75fe:	2b13      	cmp	r3, #19
    7600:	d819      	bhi.n	7636 <events_update+0xe2>
    7602:	f24c 3316 	movw	r3, #49942	; 0xc316
    7606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    760a:	881b      	ldrh	r3, [r3, #0]
    760c:	3301      	adds	r3, #1
    760e:	b29a      	uxth	r2, r3
    7610:	f24c 3316 	movw	r3, #49942	; 0xc316
    7614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7618:	801a      	strh	r2, [r3, #0]
    761a:	f24c 3316 	movw	r3, #49942	; 0xc316
    761e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7622:	881b      	ldrh	r3, [r3, #0]
    7624:	2b14      	cmp	r3, #20
    7626:	d106      	bne.n	7636 <events_update+0xe2>
    7628:	f24c 3301 	movw	r3, #49921	; 0xc301
    762c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7630:	2201      	movs	r2, #1
    7632:	701a      	strb	r2, [r3, #0]
    7634:	e00c      	b.n	7650 <events_update+0xfc>
    7636:	e00b      	b.n	7650 <events_update+0xfc>
    7638:	f24c 3316 	movw	r3, #49942	; 0xc316
    763c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7640:	2200      	movs	r2, #0
    7642:	801a      	strh	r2, [r3, #0]
    7644:	f24c 3301 	movw	r3, #49921	; 0xc301
    7648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    764c:	2200      	movs	r2, #0
    764e:	701a      	strb	r2, [r3, #0]
}  
    7650:	46bd      	mov	sp, r7
    7652:	f85d 7b04 	ldr.w	r7, [sp], #4
    7656:	4770      	bx	lr

00007658 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    7658:	b480      	push	{r7}
    765a:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    765c:	f24c 4320 	movw	r3, #50208	; 0xc420
    7660:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7664:	88da      	ldrh	r2, [r3, #6]
    7666:	f24c 4338 	movw	r3, #50232	; 0xc438
    766a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    766e:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    7670:	f24c 4338 	movw	r3, #50232	; 0xc438
    7674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7678:	2200      	movs	r2, #0
    767a:	74da      	strb	r2, [r3, #19]
}
    767c:	46bd      	mov	sp, r7
    767e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7682:	4770      	bx	lr

00007684 <send_boot>:
/** \fn inline void reporting_task( void )
 *  \brief Send a serie of initialisation messages followed by a stream of periodic ones\n
 * Called at 20Hz.
 */

void send_boot(void){
    7684:	b480      	push	{r7}
    7686:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  if (boot) 
    7688:	f240 533d 	movw	r3, #1341	; 0x53d
    768c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7690:	781b      	ldrb	r3, [r3, #0]
    7692:	2b00      	cmp	r3, #0
    7694:	f000 87c6 	beq.w	8624 <send_boot+0xfa0>
  {
      DOWNLINK_SEND_BOOT(&version);
    7698:	f24c 3319 	movw	r3, #49945	; 0xc319
    769c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76a0:	781a      	ldrb	r2, [r3, #0]
    76a2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    76a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76aa:	781b      	ldrb	r3, [r3, #0]
    76ac:	b2db      	uxtb	r3, r3
    76ae:	429a      	cmp	r2, r3
    76b0:	d313      	bcc.n	76da <send_boot+0x56>
    76b2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    76b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76ba:	781b      	ldrb	r3, [r3, #0]
    76bc:	b2db      	uxtb	r3, r3
    76be:	461a      	mov	r2, r3
    76c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    76c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76c8:	781b      	ldrb	r3, [r3, #0]
    76ca:	1ad3      	subs	r3, r2, r3
    76cc:	33ff      	adds	r3, #255	; 0xff
    76ce:	2b06      	cmp	r3, #6
    76d0:	bfd4      	ite	le
    76d2:	2300      	movle	r3, #0
    76d4:	2301      	movgt	r3, #1
    76d6:	b2db      	uxtb	r3, r3
    76d8:	e011      	b.n	76fe <send_boot+0x7a>
    76da:	f24c 331a 	movw	r3, #49946	; 0xc31a
    76de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76e2:	781b      	ldrb	r3, [r3, #0]
    76e4:	b2db      	uxtb	r3, r3
    76e6:	461a      	mov	r2, r3
    76e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    76ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76f0:	781b      	ldrb	r3, [r3, #0]
    76f2:	1ad3      	subs	r3, r2, r3
    76f4:	2b06      	cmp	r3, #6
    76f6:	bfd4      	ite	le
    76f8:	2300      	movle	r3, #0
    76fa:	2301      	movgt	r3, #1
    76fc:	b2db      	uxtb	r3, r3
    76fe:	2b00      	cmp	r3, #0
    7700:	f000 8194 	beq.w	7a2c <send_boot+0x3a8>
    7704:	f24c 3319 	movw	r3, #49945	; 0xc319
    7708:	f2c2 0304 	movt	r3, #8196	; 0x2004
    770c:	781b      	ldrb	r3, [r3, #0]
    770e:	461a      	mov	r2, r3
    7710:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7714:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7718:	2105      	movs	r1, #5
    771a:	5499      	strb	r1, [r3, r2]
    771c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7720:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7724:	781b      	ldrb	r3, [r3, #0]
    7726:	3301      	adds	r3, #1
    7728:	b2da      	uxtb	r2, r3
    772a:	f24c 3319 	movw	r3, #49945	; 0xc319
    772e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7732:	701a      	strb	r2, [r3, #0]
    7734:	f24c 3319 	movw	r3, #49945	; 0xc319
    7738:	f2c2 0304 	movt	r3, #8196	; 0x2004
    773c:	781b      	ldrb	r3, [r3, #0]
    773e:	2bff      	cmp	r3, #255	; 0xff
    7740:	d105      	bne.n	774e <send_boot+0xca>
    7742:	f24c 3319 	movw	r3, #49945	; 0xc319
    7746:	f2c2 0304 	movt	r3, #8196	; 0x2004
    774a:	2200      	movs	r2, #0
    774c:	701a      	strb	r2, [r3, #0]
    774e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7756:	781b      	ldrb	r3, [r3, #0]
    7758:	461a      	mov	r2, r3
    775a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    775e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7762:	2101      	movs	r1, #1
    7764:	5499      	strb	r1, [r3, r2]
    7766:	f24c 3319 	movw	r3, #49945	; 0xc319
    776a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    776e:	781b      	ldrb	r3, [r3, #0]
    7770:	3301      	adds	r3, #1
    7772:	b2da      	uxtb	r2, r3
    7774:	f24c 3319 	movw	r3, #49945	; 0xc319
    7778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    777c:	701a      	strb	r2, [r3, #0]
    777e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7786:	781b      	ldrb	r3, [r3, #0]
    7788:	2bff      	cmp	r3, #255	; 0xff
    778a:	d105      	bne.n	7798 <send_boot+0x114>
    778c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7794:	2200      	movs	r2, #0
    7796:	701a      	strb	r2, [r3, #0]
    7798:	f24c 431d 	movw	r3, #50205	; 0xc41d
    779c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77a0:	2201      	movs	r2, #1
    77a2:	701a      	strb	r2, [r3, #0]
    77a4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    77a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ac:	2201      	movs	r2, #1
    77ae:	701a      	strb	r2, [r3, #0]
    77b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    77b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77b8:	781b      	ldrb	r3, [r3, #0]
    77ba:	461a      	mov	r2, r3
    77bc:	f648 33a6 	movw	r3, #35750	; 0x8ba6
    77c0:	f2c0 0301 	movt	r3, #1
    77c4:	7819      	ldrb	r1, [r3, #0]
    77c6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    77ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ce:	5499      	strb	r1, [r3, r2]
    77d0:	f648 33a6 	movw	r3, #35750	; 0x8ba6
    77d4:	f2c0 0301 	movt	r3, #1
    77d8:	781a      	ldrb	r2, [r3, #0]
    77da:	f24c 431d 	movw	r3, #50205	; 0xc41d
    77de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77e2:	781b      	ldrb	r3, [r3, #0]
    77e4:	4413      	add	r3, r2
    77e6:	b2da      	uxtb	r2, r3
    77e8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    77ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77f0:	701a      	strb	r2, [r3, #0]
    77f2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    77f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77fa:	781a      	ldrb	r2, [r3, #0]
    77fc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7800:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7804:	781b      	ldrb	r3, [r3, #0]
    7806:	4413      	add	r3, r2
    7808:	b2da      	uxtb	r2, r3
    780a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    780e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7812:	701a      	strb	r2, [r3, #0]
    7814:	f24c 3319 	movw	r3, #49945	; 0xc319
    7818:	f2c2 0304 	movt	r3, #8196	; 0x2004
    781c:	781b      	ldrb	r3, [r3, #0]
    781e:	3301      	adds	r3, #1
    7820:	b2da      	uxtb	r2, r3
    7822:	f24c 3319 	movw	r3, #49945	; 0xc319
    7826:	f2c2 0304 	movt	r3, #8196	; 0x2004
    782a:	701a      	strb	r2, [r3, #0]
    782c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7834:	781b      	ldrb	r3, [r3, #0]
    7836:	2bff      	cmp	r3, #255	; 0xff
    7838:	d105      	bne.n	7846 <send_boot+0x1c2>
    783a:	f24c 3319 	movw	r3, #49945	; 0xc319
    783e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7842:	2200      	movs	r2, #0
    7844:	701a      	strb	r2, [r3, #0]
    7846:	f24c 3319 	movw	r3, #49945	; 0xc319
    784a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    784e:	781b      	ldrb	r3, [r3, #0]
    7850:	461a      	mov	r2, r3
    7852:	f648 33a6 	movw	r3, #35750	; 0x8ba6
    7856:	f2c0 0301 	movt	r3, #1
    785a:	7859      	ldrb	r1, [r3, #1]
    785c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7864:	5499      	strb	r1, [r3, r2]
    7866:	4b88      	ldr	r3, [pc, #544]	; (7a88 <send_boot+0x404>)
    7868:	781a      	ldrb	r2, [r3, #0]
    786a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    786e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7872:	781b      	ldrb	r3, [r3, #0]
    7874:	4413      	add	r3, r2
    7876:	b2da      	uxtb	r2, r3
    7878:	f24c 431d 	movw	r3, #50205	; 0xc41d
    787c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7880:	701a      	strb	r2, [r3, #0]
    7882:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7886:	f2c2 0304 	movt	r3, #8196	; 0x2004
    788a:	781a      	ldrb	r2, [r3, #0]
    788c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7894:	781b      	ldrb	r3, [r3, #0]
    7896:	4413      	add	r3, r2
    7898:	b2da      	uxtb	r2, r3
    789a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    789e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78a2:	701a      	strb	r2, [r3, #0]
    78a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    78a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78ac:	781b      	ldrb	r3, [r3, #0]
    78ae:	3301      	adds	r3, #1
    78b0:	b2da      	uxtb	r2, r3
    78b2:	f24c 3319 	movw	r3, #49945	; 0xc319
    78b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78ba:	701a      	strb	r2, [r3, #0]
    78bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    78c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78c4:	781b      	ldrb	r3, [r3, #0]
    78c6:	2bff      	cmp	r3, #255	; 0xff
    78c8:	d105      	bne.n	78d6 <send_boot+0x252>
    78ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    78ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78d2:	2200      	movs	r2, #0
    78d4:	701a      	strb	r2, [r3, #0]
    78d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    78da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78de:	781b      	ldrb	r3, [r3, #0]
    78e0:	461a      	mov	r2, r3
    78e2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    78e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78ea:	7819      	ldrb	r1, [r3, #0]
    78ec:	f24c 331c 	movw	r3, #49948	; 0xc31c
    78f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78f4:	5499      	strb	r1, [r3, r2]
    78f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    78fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78fe:	781b      	ldrb	r3, [r3, #0]
    7900:	3301      	adds	r3, #1
    7902:	b2da      	uxtb	r2, r3
    7904:	f24c 3319 	movw	r3, #49945	; 0xc319
    7908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    790c:	701a      	strb	r2, [r3, #0]
    790e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7916:	781b      	ldrb	r3, [r3, #0]
    7918:	2bff      	cmp	r3, #255	; 0xff
    791a:	d105      	bne.n	7928 <send_boot+0x2a4>
    791c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7924:	2200      	movs	r2, #0
    7926:	701a      	strb	r2, [r3, #0]
    7928:	f24c 3319 	movw	r3, #49945	; 0xc319
    792c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7930:	781b      	ldrb	r3, [r3, #0]
    7932:	461a      	mov	r2, r3
    7934:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    793c:	7819      	ldrb	r1, [r3, #0]
    793e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7946:	5499      	strb	r1, [r3, r2]
    7948:	f24c 3319 	movw	r3, #49945	; 0xc319
    794c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7950:	781b      	ldrb	r3, [r3, #0]
    7952:	3301      	adds	r3, #1
    7954:	b2da      	uxtb	r2, r3
    7956:	f24c 3319 	movw	r3, #49945	; 0xc319
    795a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    795e:	701a      	strb	r2, [r3, #0]
    7960:	f24c 3319 	movw	r3, #49945	; 0xc319
    7964:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7968:	781b      	ldrb	r3, [r3, #0]
    796a:	2bff      	cmp	r3, #255	; 0xff
    796c:	d105      	bne.n	797a <send_boot+0x2f6>
    796e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7976:	2200      	movs	r2, #0
    7978:	701a      	strb	r2, [r3, #0]
    797a:	f242 0339 	movw	r3, #8249	; 0x2039
    797e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7982:	781b      	ldrb	r3, [r3, #0]
    7984:	b2db      	uxtb	r3, r3
    7986:	f003 0310 	and.w	r3, r3, #16
    798a:	2b00      	cmp	r3, #0
    798c:	d15a      	bne.n	7a44 <send_boot+0x3c0>
    798e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7996:	781b      	ldrb	r3, [r3, #0]
    7998:	b2db      	uxtb	r3, r3
    799a:	461a      	mov	r2, r3
    799c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    79a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79a4:	5c9a      	ldrb	r2, [r3, r2]
    79a6:	f24c 431b 	movw	r3, #50203	; 0xc41b
    79aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ae:	701a      	strb	r2, [r3, #0]
    79b0:	f24c 431c 	movw	r3, #50204	; 0xc41c
    79b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79b8:	2200      	movs	r2, #0
    79ba:	701a      	strb	r2, [r3, #0]
    79bc:	f24c 331a 	movw	r3, #49946	; 0xc31a
    79c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79c4:	781b      	ldrb	r3, [r3, #0]
    79c6:	b2db      	uxtb	r3, r3
    79c8:	3301      	adds	r3, #1
    79ca:	b2da      	uxtb	r2, r3
    79cc:	f24c 331a 	movw	r3, #49946	; 0xc31a
    79d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79d4:	701a      	strb	r2, [r3, #0]
    79d6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    79da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79de:	781b      	ldrb	r3, [r3, #0]
    79e0:	b2db      	uxtb	r3, r3
    79e2:	2bff      	cmp	r3, #255	; 0xff
    79e4:	d105      	bne.n	79f2 <send_boot+0x36e>
    79e6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    79ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ee:	2200      	movs	r2, #0
    79f0:	701a      	strb	r2, [r3, #0]
    79f2:	f242 0338 	movw	r3, #8248	; 0x2038
    79f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79fa:	f242 0238 	movw	r2, #8248	; 0x2038
    79fe:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7a02:	7812      	ldrb	r2, [r2, #0]
    7a04:	b2d2      	uxtb	r2, r2
    7a06:	f042 0201 	orr.w	r2, r2, #1
    7a0a:	b2d2      	uxtb	r2, r2
    7a0c:	701a      	strb	r2, [r3, #0]
    7a0e:	f242 0339 	movw	r3, #8249	; 0x2039
    7a12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a16:	f242 0239 	movw	r2, #8249	; 0x2039
    7a1a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7a1e:	7812      	ldrb	r2, [r2, #0]
    7a20:	b2d2      	uxtb	r2, r2
    7a22:	f042 0210 	orr.w	r2, r2, #16
    7a26:	b2d2      	uxtb	r2, r2
    7a28:	701a      	strb	r2, [r3, #0]
    7a2a:	e00b      	b.n	7a44 <send_boot+0x3c0>
    7a2c:	f24c 3318 	movw	r3, #49944	; 0xc318
    7a30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a34:	781b      	ldrb	r3, [r3, #0]
    7a36:	3301      	adds	r3, #1
    7a38:	b2da      	uxtb	r2, r3
    7a3a:	f24c 3318 	movw	r3, #49944	; 0xc318
    7a3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a42:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    7a44:	f24c 3319 	movw	r3, #49945	; 0xc319
    7a48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a4c:	781a      	ldrb	r2, [r3, #0]
    7a4e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7a52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a56:	781b      	ldrb	r3, [r3, #0]
    7a58:	b2db      	uxtb	r3, r3
    7a5a:	429a      	cmp	r2, r3
    7a5c:	d316      	bcc.n	7a8c <send_boot+0x408>
    7a5e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7a62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a66:	781b      	ldrb	r3, [r3, #0]
    7a68:	b2db      	uxtb	r3, r3
    7a6a:	461a      	mov	r2, r3
    7a6c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a74:	781b      	ldrb	r3, [r3, #0]
    7a76:	1ad3      	subs	r3, r2, r3
    7a78:	33ff      	adds	r3, #255	; 0xff
    7a7a:	2b14      	cmp	r3, #20
    7a7c:	bfd4      	ite	le
    7a7e:	2300      	movle	r3, #0
    7a80:	2301      	movgt	r3, #1
    7a82:	b2db      	uxtb	r3, r3
    7a84:	e014      	b.n	7ab0 <send_boot+0x42c>
    7a86:	bf00      	nop
    7a88:	00018ba7 	.word	0x00018ba7
    7a8c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    7a90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a94:	781b      	ldrb	r3, [r3, #0]
    7a96:	b2db      	uxtb	r3, r3
    7a98:	461a      	mov	r2, r3
    7a9a:	f24c 3319 	movw	r3, #49945	; 0xc319
    7a9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aa2:	781b      	ldrb	r3, [r3, #0]
    7aa4:	1ad3      	subs	r3, r2, r3
    7aa6:	2b14      	cmp	r3, #20
    7aa8:	bfd4      	ite	le
    7aaa:	2300      	movle	r3, #0
    7aac:	2301      	movgt	r3, #1
    7aae:	b2db      	uxtb	r3, r3
    7ab0:	2b00      	cmp	r3, #0
    7ab2:	f000 85a5 	beq.w	8600 <send_boot+0xf7c>
    7ab6:	f24c 3319 	movw	r3, #49945	; 0xc319
    7aba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7abe:	781b      	ldrb	r3, [r3, #0]
    7ac0:	461a      	mov	r2, r3
    7ac2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7ac6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aca:	2105      	movs	r1, #5
    7acc:	5499      	strb	r1, [r3, r2]
    7ace:	f24c 3319 	movw	r3, #49945	; 0xc319
    7ad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ad6:	781b      	ldrb	r3, [r3, #0]
    7ad8:	3301      	adds	r3, #1
    7ada:	b2da      	uxtb	r2, r3
    7adc:	f24c 3319 	movw	r3, #49945	; 0xc319
    7ae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ae4:	701a      	strb	r2, [r3, #0]
    7ae6:	f24c 3319 	movw	r3, #49945	; 0xc319
    7aea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aee:	781b      	ldrb	r3, [r3, #0]
    7af0:	2bff      	cmp	r3, #255	; 0xff
    7af2:	d105      	bne.n	7b00 <send_boot+0x47c>
    7af4:	f24c 3319 	movw	r3, #49945	; 0xc319
    7af8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7afc:	2200      	movs	r2, #0
    7afe:	701a      	strb	r2, [r3, #0]
    7b00:	f24c 3319 	movw	r3, #49945	; 0xc319
    7b04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b08:	781b      	ldrb	r3, [r3, #0]
    7b0a:	461a      	mov	r2, r3
    7b0c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7b10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b14:	2105      	movs	r1, #5
    7b16:	5499      	strb	r1, [r3, r2]
    7b18:	f24c 3319 	movw	r3, #49945	; 0xc319
    7b1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b20:	781b      	ldrb	r3, [r3, #0]
    7b22:	3301      	adds	r3, #1
    7b24:	b2da      	uxtb	r2, r3
    7b26:	f24c 3319 	movw	r3, #49945	; 0xc319
    7b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b2e:	701a      	strb	r2, [r3, #0]
    7b30:	f24c 3319 	movw	r3, #49945	; 0xc319
    7b34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b38:	781b      	ldrb	r3, [r3, #0]
    7b3a:	2bff      	cmp	r3, #255	; 0xff
    7b3c:	d105      	bne.n	7b4a <send_boot+0x4c6>
    7b3e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7b42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b46:	2200      	movs	r2, #0
    7b48:	701a      	strb	r2, [r3, #0]
    7b4a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7b4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b52:	2205      	movs	r2, #5
    7b54:	701a      	strb	r2, [r3, #0]
    7b56:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7b5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b5e:	2205      	movs	r2, #5
    7b60:	701a      	strb	r2, [r3, #0]
    7b62:	f24c 3319 	movw	r3, #49945	; 0xc319
    7b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b6a:	781b      	ldrb	r3, [r3, #0]
    7b6c:	461a      	mov	r2, r3
    7b6e:	f64c 1310 	movw	r3, #51472	; 0xc910
    7b72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b76:	7819      	ldrb	r1, [r3, #0]
    7b78:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7b7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b80:	5499      	strb	r1, [r3, r2]
    7b82:	f64c 1310 	movw	r3, #51472	; 0xc910
    7b86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b8a:	781a      	ldrb	r2, [r3, #0]
    7b8c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b94:	781b      	ldrb	r3, [r3, #0]
    7b96:	4413      	add	r3, r2
    7b98:	b2da      	uxtb	r2, r3
    7b9a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7b9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ba2:	701a      	strb	r2, [r3, #0]
    7ba4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7ba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bac:	781a      	ldrb	r2, [r3, #0]
    7bae:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7bb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bb6:	781b      	ldrb	r3, [r3, #0]
    7bb8:	4413      	add	r3, r2
    7bba:	b2da      	uxtb	r2, r3
    7bbc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7bc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bc4:	701a      	strb	r2, [r3, #0]
    7bc6:	f24c 3319 	movw	r3, #49945	; 0xc319
    7bca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bce:	781b      	ldrb	r3, [r3, #0]
    7bd0:	3301      	adds	r3, #1
    7bd2:	b2da      	uxtb	r2, r3
    7bd4:	f24c 3319 	movw	r3, #49945	; 0xc319
    7bd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bdc:	701a      	strb	r2, [r3, #0]
    7bde:	f24c 3319 	movw	r3, #49945	; 0xc319
    7be2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7be6:	781b      	ldrb	r3, [r3, #0]
    7be8:	2bff      	cmp	r3, #255	; 0xff
    7bea:	d105      	bne.n	7bf8 <send_boot+0x574>
    7bec:	f24c 3319 	movw	r3, #49945	; 0xc319
    7bf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bf4:	2200      	movs	r2, #0
    7bf6:	701a      	strb	r2, [r3, #0]
    7bf8:	f24c 3319 	movw	r3, #49945	; 0xc319
    7bfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c00:	781b      	ldrb	r3, [r3, #0]
    7c02:	461a      	mov	r2, r3
    7c04:	f64c 1310 	movw	r3, #51472	; 0xc910
    7c08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c0c:	7859      	ldrb	r1, [r3, #1]
    7c0e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7c12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c16:	5499      	strb	r1, [r3, r2]
    7c18:	4bd1      	ldr	r3, [pc, #836]	; (7f60 <send_boot+0x8dc>)
    7c1a:	781a      	ldrb	r2, [r3, #0]
    7c1c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c24:	781b      	ldrb	r3, [r3, #0]
    7c26:	4413      	add	r3, r2
    7c28:	b2da      	uxtb	r2, r3
    7c2a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7c2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c32:	701a      	strb	r2, [r3, #0]
    7c34:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7c38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c3c:	781a      	ldrb	r2, [r3, #0]
    7c3e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7c42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c46:	781b      	ldrb	r3, [r3, #0]
    7c48:	4413      	add	r3, r2
    7c4a:	b2da      	uxtb	r2, r3
    7c4c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7c50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c54:	701a      	strb	r2, [r3, #0]
    7c56:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c5e:	781b      	ldrb	r3, [r3, #0]
    7c60:	3301      	adds	r3, #1
    7c62:	b2da      	uxtb	r2, r3
    7c64:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c6c:	701a      	strb	r2, [r3, #0]
    7c6e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c76:	781b      	ldrb	r3, [r3, #0]
    7c78:	2bff      	cmp	r3, #255	; 0xff
    7c7a:	d105      	bne.n	7c88 <send_boot+0x604>
    7c7c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c84:	2200      	movs	r2, #0
    7c86:	701a      	strb	r2, [r3, #0]
    7c88:	f24c 3319 	movw	r3, #49945	; 0xc319
    7c8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c90:	781b      	ldrb	r3, [r3, #0]
    7c92:	461a      	mov	r2, r3
    7c94:	f64c 1310 	movw	r3, #51472	; 0xc910
    7c98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c9c:	7899      	ldrb	r1, [r3, #2]
    7c9e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7ca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ca6:	5499      	strb	r1, [r3, r2]
    7ca8:	4bae      	ldr	r3, [pc, #696]	; (7f64 <send_boot+0x8e0>)
    7caa:	781a      	ldrb	r2, [r3, #0]
    7cac:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7cb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cb4:	781b      	ldrb	r3, [r3, #0]
    7cb6:	4413      	add	r3, r2
    7cb8:	b2da      	uxtb	r2, r3
    7cba:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7cbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cc2:	701a      	strb	r2, [r3, #0]
    7cc4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7cc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ccc:	781a      	ldrb	r2, [r3, #0]
    7cce:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7cd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cd6:	781b      	ldrb	r3, [r3, #0]
    7cd8:	4413      	add	r3, r2
    7cda:	b2da      	uxtb	r2, r3
    7cdc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7ce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ce4:	701a      	strb	r2, [r3, #0]
    7ce6:	f24c 3319 	movw	r3, #49945	; 0xc319
    7cea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cee:	781b      	ldrb	r3, [r3, #0]
    7cf0:	3301      	adds	r3, #1
    7cf2:	b2da      	uxtb	r2, r3
    7cf4:	f24c 3319 	movw	r3, #49945	; 0xc319
    7cf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cfc:	701a      	strb	r2, [r3, #0]
    7cfe:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d06:	781b      	ldrb	r3, [r3, #0]
    7d08:	2bff      	cmp	r3, #255	; 0xff
    7d0a:	d105      	bne.n	7d18 <send_boot+0x694>
    7d0c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d14:	2200      	movs	r2, #0
    7d16:	701a      	strb	r2, [r3, #0]
    7d18:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d20:	781b      	ldrb	r3, [r3, #0]
    7d22:	461a      	mov	r2, r3
    7d24:	f64c 1310 	movw	r3, #51472	; 0xc910
    7d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d2c:	78d9      	ldrb	r1, [r3, #3]
    7d2e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7d32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d36:	5499      	strb	r1, [r3, r2]
    7d38:	4b8b      	ldr	r3, [pc, #556]	; (7f68 <send_boot+0x8e4>)
    7d3a:	781a      	ldrb	r2, [r3, #0]
    7d3c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7d40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d44:	781b      	ldrb	r3, [r3, #0]
    7d46:	4413      	add	r3, r2
    7d48:	b2da      	uxtb	r2, r3
    7d4a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7d4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d52:	701a      	strb	r2, [r3, #0]
    7d54:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7d58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d5c:	781a      	ldrb	r2, [r3, #0]
    7d5e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7d62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d66:	781b      	ldrb	r3, [r3, #0]
    7d68:	4413      	add	r3, r2
    7d6a:	b2da      	uxtb	r2, r3
    7d6c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7d70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d74:	701a      	strb	r2, [r3, #0]
    7d76:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d7e:	781b      	ldrb	r3, [r3, #0]
    7d80:	3301      	adds	r3, #1
    7d82:	b2da      	uxtb	r2, r3
    7d84:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d8c:	701a      	strb	r2, [r3, #0]
    7d8e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d96:	781b      	ldrb	r3, [r3, #0]
    7d98:	2bff      	cmp	r3, #255	; 0xff
    7d9a:	d105      	bne.n	7da8 <send_boot+0x724>
    7d9c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7da0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7da4:	2200      	movs	r2, #0
    7da6:	701a      	strb	r2, [r3, #0]
    7da8:	f24c 3319 	movw	r3, #49945	; 0xc319
    7dac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7db0:	781b      	ldrb	r3, [r3, #0]
    7db2:	461a      	mov	r2, r3
    7db4:	f64c 1314 	movw	r3, #51476	; 0xc914
    7db8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dbc:	7819      	ldrb	r1, [r3, #0]
    7dbe:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7dc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dc6:	5499      	strb	r1, [r3, r2]
    7dc8:	f64c 1314 	movw	r3, #51476	; 0xc914
    7dcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dd0:	781a      	ldrb	r2, [r3, #0]
    7dd2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7dd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dda:	781b      	ldrb	r3, [r3, #0]
    7ddc:	4413      	add	r3, r2
    7dde:	b2da      	uxtb	r2, r3
    7de0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7de4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7de8:	701a      	strb	r2, [r3, #0]
    7dea:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7dee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7df2:	781a      	ldrb	r2, [r3, #0]
    7df4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7df8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dfc:	781b      	ldrb	r3, [r3, #0]
    7dfe:	4413      	add	r3, r2
    7e00:	b2da      	uxtb	r2, r3
    7e02:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7e06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e0a:	701a      	strb	r2, [r3, #0]
    7e0c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e14:	781b      	ldrb	r3, [r3, #0]
    7e16:	3301      	adds	r3, #1
    7e18:	b2da      	uxtb	r2, r3
    7e1a:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e22:	701a      	strb	r2, [r3, #0]
    7e24:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e2c:	781b      	ldrb	r3, [r3, #0]
    7e2e:	2bff      	cmp	r3, #255	; 0xff
    7e30:	d105      	bne.n	7e3e <send_boot+0x7ba>
    7e32:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e3a:	2200      	movs	r2, #0
    7e3c:	701a      	strb	r2, [r3, #0]
    7e3e:	f24c 3319 	movw	r3, #49945	; 0xc319
    7e42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e46:	781b      	ldrb	r3, [r3, #0]
    7e48:	461a      	mov	r2, r3
    7e4a:	f64c 1314 	movw	r3, #51476	; 0xc914
    7e4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e52:	7859      	ldrb	r1, [r3, #1]
    7e54:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7e58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e5c:	5499      	strb	r1, [r3, r2]
    7e5e:	4b43      	ldr	r3, [pc, #268]	; (7f6c <send_boot+0x8e8>)
    7e60:	781a      	ldrb	r2, [r3, #0]
    7e62:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7e66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e6a:	781b      	ldrb	r3, [r3, #0]
    7e6c:	4413      	add	r3, r2
    7e6e:	b2da      	uxtb	r2, r3
    7e70:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7e74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e78:	701a      	strb	r2, [r3, #0]
    7e7a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e82:	781a      	ldrb	r2, [r3, #0]
    7e84:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7e88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e8c:	781b      	ldrb	r3, [r3, #0]
    7e8e:	4413      	add	r3, r2
    7e90:	b2da      	uxtb	r2, r3
    7e92:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7e96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e9a:	701a      	strb	r2, [r3, #0]
    7e9c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7ea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ea4:	781b      	ldrb	r3, [r3, #0]
    7ea6:	3301      	adds	r3, #1
    7ea8:	b2da      	uxtb	r2, r3
    7eaa:	f24c 3319 	movw	r3, #49945	; 0xc319
    7eae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eb2:	701a      	strb	r2, [r3, #0]
    7eb4:	f24c 3319 	movw	r3, #49945	; 0xc319
    7eb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ebc:	781b      	ldrb	r3, [r3, #0]
    7ebe:	2bff      	cmp	r3, #255	; 0xff
    7ec0:	d105      	bne.n	7ece <send_boot+0x84a>
    7ec2:	f24c 3319 	movw	r3, #49945	; 0xc319
    7ec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eca:	2200      	movs	r2, #0
    7ecc:	701a      	strb	r2, [r3, #0]
    7ece:	f24c 3319 	movw	r3, #49945	; 0xc319
    7ed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ed6:	781b      	ldrb	r3, [r3, #0]
    7ed8:	461a      	mov	r2, r3
    7eda:	f64c 1314 	movw	r3, #51476	; 0xc914
    7ede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ee2:	7899      	ldrb	r1, [r3, #2]
    7ee4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7ee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eec:	5499      	strb	r1, [r3, r2]
    7eee:	4b20      	ldr	r3, [pc, #128]	; (7f70 <send_boot+0x8ec>)
    7ef0:	781a      	ldrb	r2, [r3, #0]
    7ef2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7ef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7efa:	781b      	ldrb	r3, [r3, #0]
    7efc:	4413      	add	r3, r2
    7efe:	b2da      	uxtb	r2, r3
    7f00:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7f04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f08:	701a      	strb	r2, [r3, #0]
    7f0a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7f0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f12:	781a      	ldrb	r2, [r3, #0]
    7f14:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f1c:	781b      	ldrb	r3, [r3, #0]
    7f1e:	4413      	add	r3, r2
    7f20:	b2da      	uxtb	r2, r3
    7f22:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7f26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f2a:	701a      	strb	r2, [r3, #0]
    7f2c:	f24c 3319 	movw	r3, #49945	; 0xc319
    7f30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f34:	781b      	ldrb	r3, [r3, #0]
    7f36:	3301      	adds	r3, #1
    7f38:	b2da      	uxtb	r2, r3
    7f3a:	f24c 3319 	movw	r3, #49945	; 0xc319
    7f3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f42:	701a      	strb	r2, [r3, #0]
    7f44:	f24c 3319 	movw	r3, #49945	; 0xc319
    7f48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f4c:	781b      	ldrb	r3, [r3, #0]
    7f4e:	2bff      	cmp	r3, #255	; 0xff
    7f50:	d110      	bne.n	7f74 <send_boot+0x8f0>
    7f52:	f24c 3319 	movw	r3, #49945	; 0xc319
    7f56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f5a:	2200      	movs	r2, #0
    7f5c:	701a      	strb	r2, [r3, #0]
    7f5e:	e009      	b.n	7f74 <send_boot+0x8f0>
    7f60:	2004c911 	.word	0x2004c911
    7f64:	2004c912 	.word	0x2004c912
    7f68:	2004c913 	.word	0x2004c913
    7f6c:	2004c915 	.word	0x2004c915
    7f70:	2004c916 	.word	0x2004c916
    7f74:	f24c 3319 	movw	r3, #49945	; 0xc319
    7f78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f7c:	781b      	ldrb	r3, [r3, #0]
    7f7e:	461a      	mov	r2, r3
    7f80:	f64c 1314 	movw	r3, #51476	; 0xc914
    7f84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f88:	78d9      	ldrb	r1, [r3, #3]
    7f8a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    7f8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f92:	5499      	strb	r1, [r3, r2]
    7f94:	4bd3      	ldr	r3, [pc, #844]	; (82e4 <send_boot+0xc60>)
    7f96:	781a      	ldrb	r2, [r3, #0]
    7f98:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7f9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fa0:	781b      	ldrb	r3, [r3, #0]
    7fa2:	4413      	add	r3, r2
    7fa4:	b2da      	uxtb	r2, r3
    7fa6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7faa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fae:	701a      	strb	r2, [r3, #0]
    7fb0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7fb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fb8:	781a      	ldrb	r2, [r3, #0]
    7fba:	f24c 431d 	movw	r3, #50205	; 0xc41d
    7fbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fc2:	781b      	ldrb	r3, [r3, #0]
    7fc4:	4413      	add	r3, r2
    7fc6:	b2da      	uxtb	r2, r3
    7fc8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    7fcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fd0:	701a      	strb	r2, [r3, #0]
    7fd2:	f24c 3319 	movw	r3, #49945	; 0xc319
    7fd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fda:	781b      	ldrb	r3, [r3, #0]
    7fdc:	3301      	adds	r3, #1
    7fde:	b2da      	uxtb	r2, r3
    7fe0:	f24c 3319 	movw	r3, #49945	; 0xc319
    7fe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fe8:	701a      	strb	r2, [r3, #0]
    7fea:	f24c 3319 	movw	r3, #49945	; 0xc319
    7fee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ff2:	781b      	ldrb	r3, [r3, #0]
    7ff4:	2bff      	cmp	r3, #255	; 0xff
    7ff6:	d105      	bne.n	8004 <send_boot+0x980>
    7ff8:	f24c 3319 	movw	r3, #49945	; 0xc319
    7ffc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8000:	2200      	movs	r2, #0
    8002:	701a      	strb	r2, [r3, #0]
    8004:	f24c 3319 	movw	r3, #49945	; 0xc319
    8008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    800c:	781b      	ldrb	r3, [r3, #0]
    800e:	461a      	mov	r2, r3
    8010:	f64c 130c 	movw	r3, #51468	; 0xc90c
    8014:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8018:	7819      	ldrb	r1, [r3, #0]
    801a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    801e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8022:	5499      	strb	r1, [r3, r2]
    8024:	f64c 130c 	movw	r3, #51468	; 0xc90c
    8028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    802c:	781a      	ldrb	r2, [r3, #0]
    802e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8036:	781b      	ldrb	r3, [r3, #0]
    8038:	4413      	add	r3, r2
    803a:	b2da      	uxtb	r2, r3
    803c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8044:	701a      	strb	r2, [r3, #0]
    8046:	f24c 431e 	movw	r3, #50206	; 0xc41e
    804a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    804e:	781a      	ldrb	r2, [r3, #0]
    8050:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8054:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8058:	781b      	ldrb	r3, [r3, #0]
    805a:	4413      	add	r3, r2
    805c:	b2da      	uxtb	r2, r3
    805e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8066:	701a      	strb	r2, [r3, #0]
    8068:	f24c 3319 	movw	r3, #49945	; 0xc319
    806c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8070:	781b      	ldrb	r3, [r3, #0]
    8072:	3301      	adds	r3, #1
    8074:	b2da      	uxtb	r2, r3
    8076:	f24c 3319 	movw	r3, #49945	; 0xc319
    807a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    807e:	701a      	strb	r2, [r3, #0]
    8080:	f24c 3319 	movw	r3, #49945	; 0xc319
    8084:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8088:	781b      	ldrb	r3, [r3, #0]
    808a:	2bff      	cmp	r3, #255	; 0xff
    808c:	d105      	bne.n	809a <send_boot+0xa16>
    808e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8096:	2200      	movs	r2, #0
    8098:	701a      	strb	r2, [r3, #0]
    809a:	f24c 3319 	movw	r3, #49945	; 0xc319
    809e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80a2:	781b      	ldrb	r3, [r3, #0]
    80a4:	461a      	mov	r2, r3
    80a6:	f64c 130c 	movw	r3, #51468	; 0xc90c
    80aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80ae:	7859      	ldrb	r1, [r3, #1]
    80b0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    80b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80b8:	5499      	strb	r1, [r3, r2]
    80ba:	4b8b      	ldr	r3, [pc, #556]	; (82e8 <send_boot+0xc64>)
    80bc:	781a      	ldrb	r2, [r3, #0]
    80be:	f24c 431d 	movw	r3, #50205	; 0xc41d
    80c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80c6:	781b      	ldrb	r3, [r3, #0]
    80c8:	4413      	add	r3, r2
    80ca:	b2da      	uxtb	r2, r3
    80cc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    80d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80d4:	701a      	strb	r2, [r3, #0]
    80d6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    80da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80de:	781a      	ldrb	r2, [r3, #0]
    80e0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    80e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80e8:	781b      	ldrb	r3, [r3, #0]
    80ea:	4413      	add	r3, r2
    80ec:	b2da      	uxtb	r2, r3
    80ee:	f24c 431e 	movw	r3, #50206	; 0xc41e
    80f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80f6:	701a      	strb	r2, [r3, #0]
    80f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    80fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8100:	781b      	ldrb	r3, [r3, #0]
    8102:	3301      	adds	r3, #1
    8104:	b2da      	uxtb	r2, r3
    8106:	f24c 3319 	movw	r3, #49945	; 0xc319
    810a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    810e:	701a      	strb	r2, [r3, #0]
    8110:	f24c 3319 	movw	r3, #49945	; 0xc319
    8114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8118:	781b      	ldrb	r3, [r3, #0]
    811a:	2bff      	cmp	r3, #255	; 0xff
    811c:	d105      	bne.n	812a <send_boot+0xaa6>
    811e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8126:	2200      	movs	r2, #0
    8128:	701a      	strb	r2, [r3, #0]
    812a:	f24c 3319 	movw	r3, #49945	; 0xc319
    812e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8132:	781b      	ldrb	r3, [r3, #0]
    8134:	461a      	mov	r2, r3
    8136:	f64c 130c 	movw	r3, #51468	; 0xc90c
    813a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    813e:	7899      	ldrb	r1, [r3, #2]
    8140:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8148:	5499      	strb	r1, [r3, r2]
    814a:	4b68      	ldr	r3, [pc, #416]	; (82ec <send_boot+0xc68>)
    814c:	781a      	ldrb	r2, [r3, #0]
    814e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8156:	781b      	ldrb	r3, [r3, #0]
    8158:	4413      	add	r3, r2
    815a:	b2da      	uxtb	r2, r3
    815c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8164:	701a      	strb	r2, [r3, #0]
    8166:	f24c 431e 	movw	r3, #50206	; 0xc41e
    816a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    816e:	781a      	ldrb	r2, [r3, #0]
    8170:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8178:	781b      	ldrb	r3, [r3, #0]
    817a:	4413      	add	r3, r2
    817c:	b2da      	uxtb	r2, r3
    817e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8186:	701a      	strb	r2, [r3, #0]
    8188:	f24c 3319 	movw	r3, #49945	; 0xc319
    818c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8190:	781b      	ldrb	r3, [r3, #0]
    8192:	3301      	adds	r3, #1
    8194:	b2da      	uxtb	r2, r3
    8196:	f24c 3319 	movw	r3, #49945	; 0xc319
    819a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    819e:	701a      	strb	r2, [r3, #0]
    81a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    81a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81a8:	781b      	ldrb	r3, [r3, #0]
    81aa:	2bff      	cmp	r3, #255	; 0xff
    81ac:	d105      	bne.n	81ba <send_boot+0xb36>
    81ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    81b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81b6:	2200      	movs	r2, #0
    81b8:	701a      	strb	r2, [r3, #0]
    81ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    81be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81c2:	781b      	ldrb	r3, [r3, #0]
    81c4:	461a      	mov	r2, r3
    81c6:	f64c 130c 	movw	r3, #51468	; 0xc90c
    81ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81ce:	78d9      	ldrb	r1, [r3, #3]
    81d0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    81d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81d8:	5499      	strb	r1, [r3, r2]
    81da:	4b45      	ldr	r3, [pc, #276]	; (82f0 <send_boot+0xc6c>)
    81dc:	781a      	ldrb	r2, [r3, #0]
    81de:	f24c 431d 	movw	r3, #50205	; 0xc41d
    81e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81e6:	781b      	ldrb	r3, [r3, #0]
    81e8:	4413      	add	r3, r2
    81ea:	b2da      	uxtb	r2, r3
    81ec:	f24c 431d 	movw	r3, #50205	; 0xc41d
    81f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81f4:	701a      	strb	r2, [r3, #0]
    81f6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    81fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81fe:	781a      	ldrb	r2, [r3, #0]
    8200:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8208:	781b      	ldrb	r3, [r3, #0]
    820a:	4413      	add	r3, r2
    820c:	b2da      	uxtb	r2, r3
    820e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8212:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8216:	701a      	strb	r2, [r3, #0]
    8218:	f24c 3319 	movw	r3, #49945	; 0xc319
    821c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8220:	781b      	ldrb	r3, [r3, #0]
    8222:	3301      	adds	r3, #1
    8224:	b2da      	uxtb	r2, r3
    8226:	f24c 3319 	movw	r3, #49945	; 0xc319
    822a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    822e:	701a      	strb	r2, [r3, #0]
    8230:	f24c 3319 	movw	r3, #49945	; 0xc319
    8234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8238:	781b      	ldrb	r3, [r3, #0]
    823a:	2bff      	cmp	r3, #255	; 0xff
    823c:	d105      	bne.n	824a <send_boot+0xbc6>
    823e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8246:	2200      	movs	r2, #0
    8248:	701a      	strb	r2, [r3, #0]
    824a:	f24c 3319 	movw	r3, #49945	; 0xc319
    824e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8252:	781b      	ldrb	r3, [r3, #0]
    8254:	461a      	mov	r2, r3
    8256:	f240 5342 	movw	r3, #1346	; 0x542
    825a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    825e:	7819      	ldrb	r1, [r3, #0]
    8260:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8268:	5499      	strb	r1, [r3, r2]
    826a:	f240 5342 	movw	r3, #1346	; 0x542
    826e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8272:	781a      	ldrb	r2, [r3, #0]
    8274:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8278:	f2c2 0304 	movt	r3, #8196	; 0x2004
    827c:	781b      	ldrb	r3, [r3, #0]
    827e:	4413      	add	r3, r2
    8280:	b2da      	uxtb	r2, r3
    8282:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8286:	f2c2 0304 	movt	r3, #8196	; 0x2004
    828a:	701a      	strb	r2, [r3, #0]
    828c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8290:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8294:	781a      	ldrb	r2, [r3, #0]
    8296:	f24c 431d 	movw	r3, #50205	; 0xc41d
    829a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    829e:	781b      	ldrb	r3, [r3, #0]
    82a0:	4413      	add	r3, r2
    82a2:	b2da      	uxtb	r2, r3
    82a4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    82a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82ac:	701a      	strb	r2, [r3, #0]
    82ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    82b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82b6:	781b      	ldrb	r3, [r3, #0]
    82b8:	3301      	adds	r3, #1
    82ba:	b2da      	uxtb	r2, r3
    82bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    82c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82c4:	701a      	strb	r2, [r3, #0]
    82c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    82ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82ce:	781b      	ldrb	r3, [r3, #0]
    82d0:	2bff      	cmp	r3, #255	; 0xff
    82d2:	d10f      	bne.n	82f4 <send_boot+0xc70>
    82d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    82d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82dc:	2200      	movs	r2, #0
    82de:	701a      	strb	r2, [r3, #0]
    82e0:	e008      	b.n	82f4 <send_boot+0xc70>
    82e2:	bf00      	nop
    82e4:	2004c917 	.word	0x2004c917
    82e8:	2004c90d 	.word	0x2004c90d
    82ec:	2004c90e 	.word	0x2004c90e
    82f0:	2004c90f 	.word	0x2004c90f
    82f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    82f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82fc:	781b      	ldrb	r3, [r3, #0]
    82fe:	461a      	mov	r2, r3
    8300:	f240 5342 	movw	r3, #1346	; 0x542
    8304:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8308:	7859      	ldrb	r1, [r3, #1]
    830a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    830e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8312:	5499      	strb	r1, [r3, r2]
    8314:	4bc5      	ldr	r3, [pc, #788]	; (862c <send_boot+0xfa8>)
    8316:	781a      	ldrb	r2, [r3, #0]
    8318:	f24c 431d 	movw	r3, #50205	; 0xc41d
    831c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8320:	781b      	ldrb	r3, [r3, #0]
    8322:	4413      	add	r3, r2
    8324:	b2da      	uxtb	r2, r3
    8326:	f24c 431d 	movw	r3, #50205	; 0xc41d
    832a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    832e:	701a      	strb	r2, [r3, #0]
    8330:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8334:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8338:	781a      	ldrb	r2, [r3, #0]
    833a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    833e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8342:	781b      	ldrb	r3, [r3, #0]
    8344:	4413      	add	r3, r2
    8346:	b2da      	uxtb	r2, r3
    8348:	f24c 431e 	movw	r3, #50206	; 0xc41e
    834c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8350:	701a      	strb	r2, [r3, #0]
    8352:	f24c 3319 	movw	r3, #49945	; 0xc319
    8356:	f2c2 0304 	movt	r3, #8196	; 0x2004
    835a:	781b      	ldrb	r3, [r3, #0]
    835c:	3301      	adds	r3, #1
    835e:	b2da      	uxtb	r2, r3
    8360:	f24c 3319 	movw	r3, #49945	; 0xc319
    8364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8368:	701a      	strb	r2, [r3, #0]
    836a:	f24c 3319 	movw	r3, #49945	; 0xc319
    836e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8372:	781b      	ldrb	r3, [r3, #0]
    8374:	2bff      	cmp	r3, #255	; 0xff
    8376:	d105      	bne.n	8384 <send_boot+0xd00>
    8378:	f24c 3319 	movw	r3, #49945	; 0xc319
    837c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8380:	2200      	movs	r2, #0
    8382:	701a      	strb	r2, [r3, #0]
    8384:	f24c 3319 	movw	r3, #49945	; 0xc319
    8388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    838c:	781b      	ldrb	r3, [r3, #0]
    838e:	461a      	mov	r2, r3
    8390:	f240 5344 	movw	r3, #1348	; 0x544
    8394:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8398:	7819      	ldrb	r1, [r3, #0]
    839a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    839e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83a2:	5499      	strb	r1, [r3, r2]
    83a4:	f240 5344 	movw	r3, #1348	; 0x544
    83a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83ac:	781a      	ldrb	r2, [r3, #0]
    83ae:	f24c 431d 	movw	r3, #50205	; 0xc41d
    83b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83b6:	781b      	ldrb	r3, [r3, #0]
    83b8:	4413      	add	r3, r2
    83ba:	b2da      	uxtb	r2, r3
    83bc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    83c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83c4:	701a      	strb	r2, [r3, #0]
    83c6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    83ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83ce:	781a      	ldrb	r2, [r3, #0]
    83d0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    83d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83d8:	781b      	ldrb	r3, [r3, #0]
    83da:	4413      	add	r3, r2
    83dc:	b2da      	uxtb	r2, r3
    83de:	f24c 431e 	movw	r3, #50206	; 0xc41e
    83e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83e6:	701a      	strb	r2, [r3, #0]
    83e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    83ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83f0:	781b      	ldrb	r3, [r3, #0]
    83f2:	3301      	adds	r3, #1
    83f4:	b2da      	uxtb	r2, r3
    83f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    83fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83fe:	701a      	strb	r2, [r3, #0]
    8400:	f24c 3319 	movw	r3, #49945	; 0xc319
    8404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8408:	781b      	ldrb	r3, [r3, #0]
    840a:	2bff      	cmp	r3, #255	; 0xff
    840c:	d105      	bne.n	841a <send_boot+0xd96>
    840e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8412:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8416:	2200      	movs	r2, #0
    8418:	701a      	strb	r2, [r3, #0]
    841a:	f24c 3319 	movw	r3, #49945	; 0xc319
    841e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8422:	781b      	ldrb	r3, [r3, #0]
    8424:	461a      	mov	r2, r3
    8426:	f240 5344 	movw	r3, #1348	; 0x544
    842a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    842e:	7859      	ldrb	r1, [r3, #1]
    8430:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8434:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8438:	5499      	strb	r1, [r3, r2]
    843a:	4b7d      	ldr	r3, [pc, #500]	; (8630 <send_boot+0xfac>)
    843c:	781a      	ldrb	r2, [r3, #0]
    843e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8446:	781b      	ldrb	r3, [r3, #0]
    8448:	4413      	add	r3, r2
    844a:	b2da      	uxtb	r2, r3
    844c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8454:	701a      	strb	r2, [r3, #0]
    8456:	f24c 431e 	movw	r3, #50206	; 0xc41e
    845a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    845e:	781a      	ldrb	r2, [r3, #0]
    8460:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8464:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8468:	781b      	ldrb	r3, [r3, #0]
    846a:	4413      	add	r3, r2
    846c:	b2da      	uxtb	r2, r3
    846e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8476:	701a      	strb	r2, [r3, #0]
    8478:	f24c 3319 	movw	r3, #49945	; 0xc319
    847c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8480:	781b      	ldrb	r3, [r3, #0]
    8482:	3301      	adds	r3, #1
    8484:	b2da      	uxtb	r2, r3
    8486:	f24c 3319 	movw	r3, #49945	; 0xc319
    848a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    848e:	701a      	strb	r2, [r3, #0]
    8490:	f24c 3319 	movw	r3, #49945	; 0xc319
    8494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8498:	781b      	ldrb	r3, [r3, #0]
    849a:	2bff      	cmp	r3, #255	; 0xff
    849c:	d105      	bne.n	84aa <send_boot+0xe26>
    849e:	f24c 3319 	movw	r3, #49945	; 0xc319
    84a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84a6:	2200      	movs	r2, #0
    84a8:	701a      	strb	r2, [r3, #0]
    84aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    84ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84b2:	781b      	ldrb	r3, [r3, #0]
    84b4:	461a      	mov	r2, r3
    84b6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    84ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84be:	7819      	ldrb	r1, [r3, #0]
    84c0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    84c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84c8:	5499      	strb	r1, [r3, r2]
    84ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    84ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84d2:	781b      	ldrb	r3, [r3, #0]
    84d4:	3301      	adds	r3, #1
    84d6:	b2da      	uxtb	r2, r3
    84d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    84dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84e0:	701a      	strb	r2, [r3, #0]
    84e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    84e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84ea:	781b      	ldrb	r3, [r3, #0]
    84ec:	2bff      	cmp	r3, #255	; 0xff
    84ee:	d105      	bne.n	84fc <send_boot+0xe78>
    84f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    84f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84f8:	2200      	movs	r2, #0
    84fa:	701a      	strb	r2, [r3, #0]
    84fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    8500:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8504:	781b      	ldrb	r3, [r3, #0]
    8506:	461a      	mov	r2, r3
    8508:	f24c 431e 	movw	r3, #50206	; 0xc41e
    850c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8510:	7819      	ldrb	r1, [r3, #0]
    8512:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8516:	f2c2 0304 	movt	r3, #8196	; 0x2004
    851a:	5499      	strb	r1, [r3, r2]
    851c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8520:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8524:	781b      	ldrb	r3, [r3, #0]
    8526:	3301      	adds	r3, #1
    8528:	b2da      	uxtb	r2, r3
    852a:	f24c 3319 	movw	r3, #49945	; 0xc319
    852e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8532:	701a      	strb	r2, [r3, #0]
    8534:	f24c 3319 	movw	r3, #49945	; 0xc319
    8538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    853c:	781b      	ldrb	r3, [r3, #0]
    853e:	2bff      	cmp	r3, #255	; 0xff
    8540:	d105      	bne.n	854e <send_boot+0xeca>
    8542:	f24c 3319 	movw	r3, #49945	; 0xc319
    8546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    854a:	2200      	movs	r2, #0
    854c:	701a      	strb	r2, [r3, #0]
    854e:	f242 0339 	movw	r3, #8249	; 0x2039
    8552:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8556:	781b      	ldrb	r3, [r3, #0]
    8558:	b2db      	uxtb	r3, r3
    855a:	f003 0310 	and.w	r3, r3, #16
    855e:	2b00      	cmp	r3, #0
    8560:	d15a      	bne.n	8618 <send_boot+0xf94>
    8562:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8566:	f2c2 0304 	movt	r3, #8196	; 0x2004
    856a:	781b      	ldrb	r3, [r3, #0]
    856c:	b2db      	uxtb	r3, r3
    856e:	461a      	mov	r2, r3
    8570:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8578:	5c9a      	ldrb	r2, [r3, r2]
    857a:	f24c 431b 	movw	r3, #50203	; 0xc41b
    857e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8582:	701a      	strb	r2, [r3, #0]
    8584:	f24c 431c 	movw	r3, #50204	; 0xc41c
    8588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    858c:	2200      	movs	r2, #0
    858e:	701a      	strb	r2, [r3, #0]
    8590:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8598:	781b      	ldrb	r3, [r3, #0]
    859a:	b2db      	uxtb	r3, r3
    859c:	3301      	adds	r3, #1
    859e:	b2da      	uxtb	r2, r3
    85a0:	f24c 331a 	movw	r3, #49946	; 0xc31a
    85a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85a8:	701a      	strb	r2, [r3, #0]
    85aa:	f24c 331a 	movw	r3, #49946	; 0xc31a
    85ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85b2:	781b      	ldrb	r3, [r3, #0]
    85b4:	b2db      	uxtb	r3, r3
    85b6:	2bff      	cmp	r3, #255	; 0xff
    85b8:	d105      	bne.n	85c6 <send_boot+0xf42>
    85ba:	f24c 331a 	movw	r3, #49946	; 0xc31a
    85be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85c2:	2200      	movs	r2, #0
    85c4:	701a      	strb	r2, [r3, #0]
    85c6:	f242 0338 	movw	r3, #8248	; 0x2038
    85ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85ce:	f242 0238 	movw	r2, #8248	; 0x2038
    85d2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    85d6:	7812      	ldrb	r2, [r2, #0]
    85d8:	b2d2      	uxtb	r2, r2
    85da:	f042 0201 	orr.w	r2, r2, #1
    85de:	b2d2      	uxtb	r2, r2
    85e0:	701a      	strb	r2, [r3, #0]
    85e2:	f242 0339 	movw	r3, #8249	; 0x2039
    85e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85ea:	f242 0239 	movw	r2, #8249	; 0x2039
    85ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    85f2:	7812      	ldrb	r2, [r2, #0]
    85f4:	b2d2      	uxtb	r2, r2
    85f6:	f042 0210 	orr.w	r2, r2, #16
    85fa:	b2d2      	uxtb	r2, r2
    85fc:	701a      	strb	r2, [r3, #0]
    85fe:	e00b      	b.n	8618 <send_boot+0xf94>
    8600:	f24c 3318 	movw	r3, #49944	; 0xc318
    8604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8608:	781b      	ldrb	r3, [r3, #0]
    860a:	3301      	adds	r3, #1
    860c:	b2da      	uxtb	r2, r3
    860e:	f24c 3318 	movw	r3, #49944	; 0xc318
    8612:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8616:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    8618:	f240 533d 	movw	r3, #1341	; 0x53d
    861c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8620:	2200      	movs	r2, #0
    8622:	701a      	strb	r2, [r3, #0]
  }
}
    8624:	46bd      	mov	sp, r7
    8626:	f85d 7b04 	ldr.w	r7, [sp], #4
    862a:	4770      	bx	lr
    862c:	20000543 	.word	0x20000543
    8630:	20000545 	.word	0x20000545

00008634 <send_attitude>:
void send_attitude(void){ //499ms
    8634:	b480      	push	{r7}
    8636:	af00      	add	r7, sp, #0
    // add by wanbo
  if(!boot)
    8638:	f240 533d 	movw	r3, #1341	; 0x53d
    863c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8640:	781b      	ldrb	r3, [r3, #0]
    8642:	2b00      	cmp	r3, #0
    8644:	f040 84ee 	bne.w	9024 <send_attitude+0x9f0>
  {
    count++;
    8648:	f24c 3311 	movw	r3, #49937	; 0xc311
    864c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8650:	781b      	ldrb	r3, [r3, #0]
    8652:	3301      	adds	r3, #1
    8654:	b2da      	uxtb	r2, r3
    8656:	f24c 3311 	movw	r3, #49937	; 0xc311
    865a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    865e:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    8660:	f24c 3311 	movw	r3, #49937	; 0xc311
    8664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8668:	781b      	ldrb	r3, [r3, #0]
    866a:	2bfa      	cmp	r3, #250	; 0xfa
    866c:	d105      	bne.n	867a <send_attitude+0x46>
    866e:	f24c 3311 	movw	r3, #49937	; 0xc311
    8672:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8676:	2200      	movs	r2, #0
    8678:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    867a:	f24c 3311 	movw	r3, #49937	; 0xc311
    867e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8682:	781a      	ldrb	r2, [r3, #0]
    8684:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8688:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    868c:	fba3 1302 	umull	r1, r3, r3, r2
    8690:	0899      	lsrs	r1, r3, #2
    8692:	460b      	mov	r3, r1
    8694:	009b      	lsls	r3, r3, #2
    8696:	440b      	add	r3, r1
    8698:	1ad3      	subs	r3, r2, r3
    869a:	b2db      	uxtb	r3, r3
    869c:	2b00      	cmp	r3, #0
    869e:	f040 84c1 	bne.w	9024 <send_attitude+0x9f0>
       PERIODIC_SEND_ATTITUDE(); 
    86a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    86a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86aa:	781a      	ldrb	r2, [r3, #0]
    86ac:	f24c 331a 	movw	r3, #49946	; 0xc31a
    86b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86b4:	781b      	ldrb	r3, [r3, #0]
    86b6:	b2db      	uxtb	r3, r3
    86b8:	429a      	cmp	r2, r3
    86ba:	d313      	bcc.n	86e4 <send_attitude+0xb0>
    86bc:	f24c 331a 	movw	r3, #49946	; 0xc31a
    86c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86c4:	781b      	ldrb	r3, [r3, #0]
    86c6:	b2db      	uxtb	r3, r3
    86c8:	461a      	mov	r2, r3
    86ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    86ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86d2:	781b      	ldrb	r3, [r3, #0]
    86d4:	1ad3      	subs	r3, r2, r3
    86d6:	33ff      	adds	r3, #255	; 0xff
    86d8:	2b10      	cmp	r3, #16
    86da:	bfd4      	ite	le
    86dc:	2300      	movle	r3, #0
    86de:	2301      	movgt	r3, #1
    86e0:	b2db      	uxtb	r3, r3
    86e2:	e011      	b.n	8708 <send_attitude+0xd4>
    86e4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    86e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86ec:	781b      	ldrb	r3, [r3, #0]
    86ee:	b2db      	uxtb	r3, r3
    86f0:	461a      	mov	r2, r3
    86f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    86f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86fa:	781b      	ldrb	r3, [r3, #0]
    86fc:	1ad3      	subs	r3, r2, r3
    86fe:	2b10      	cmp	r3, #16
    8700:	bfd4      	ite	le
    8702:	2300      	movle	r3, #0
    8704:	2301      	movgt	r3, #1
    8706:	b2db      	uxtb	r3, r3
    8708:	2b00      	cmp	r3, #0
    870a:	f000 847f 	beq.w	900c <send_attitude+0x9d8>
    870e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8716:	781b      	ldrb	r3, [r3, #0]
    8718:	461a      	mov	r2, r3
    871a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    871e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8722:	2105      	movs	r1, #5
    8724:	5499      	strb	r1, [r3, r2]
    8726:	f24c 3319 	movw	r3, #49945	; 0xc319
    872a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    872e:	781b      	ldrb	r3, [r3, #0]
    8730:	3301      	adds	r3, #1
    8732:	b2da      	uxtb	r2, r3
    8734:	f24c 3319 	movw	r3, #49945	; 0xc319
    8738:	f2c2 0304 	movt	r3, #8196	; 0x2004
    873c:	701a      	strb	r2, [r3, #0]
    873e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8746:	781b      	ldrb	r3, [r3, #0]
    8748:	2bff      	cmp	r3, #255	; 0xff
    874a:	d105      	bne.n	8758 <send_attitude+0x124>
    874c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8750:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8754:	2200      	movs	r2, #0
    8756:	701a      	strb	r2, [r3, #0]
    8758:	f24c 3319 	movw	r3, #49945	; 0xc319
    875c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8760:	781b      	ldrb	r3, [r3, #0]
    8762:	461a      	mov	r2, r3
    8764:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8768:	f2c2 0304 	movt	r3, #8196	; 0x2004
    876c:	2106      	movs	r1, #6
    876e:	5499      	strb	r1, [r3, r2]
    8770:	f24c 3319 	movw	r3, #49945	; 0xc319
    8774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8778:	781b      	ldrb	r3, [r3, #0]
    877a:	3301      	adds	r3, #1
    877c:	b2da      	uxtb	r2, r3
    877e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8786:	701a      	strb	r2, [r3, #0]
    8788:	f24c 3319 	movw	r3, #49945	; 0xc319
    878c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8790:	781b      	ldrb	r3, [r3, #0]
    8792:	2bff      	cmp	r3, #255	; 0xff
    8794:	d105      	bne.n	87a2 <send_attitude+0x16e>
    8796:	f24c 3319 	movw	r3, #49945	; 0xc319
    879a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    879e:	2200      	movs	r2, #0
    87a0:	701a      	strb	r2, [r3, #0]
    87a2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    87a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87aa:	2206      	movs	r2, #6
    87ac:	701a      	strb	r2, [r3, #0]
    87ae:	f24c 431e 	movw	r3, #50206	; 0xc41e
    87b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87b6:	2206      	movs	r2, #6
    87b8:	701a      	strb	r2, [r3, #0]
    87ba:	f24c 3319 	movw	r3, #49945	; 0xc319
    87be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87c2:	781b      	ldrb	r3, [r3, #0]
    87c4:	461a      	mov	r2, r3
    87c6:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    87ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87ce:	7819      	ldrb	r1, [r3, #0]
    87d0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    87d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87d8:	5499      	strb	r1, [r3, r2]
    87da:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    87de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87e2:	781a      	ldrb	r2, [r3, #0]
    87e4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    87e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87ec:	781b      	ldrb	r3, [r3, #0]
    87ee:	4413      	add	r3, r2
    87f0:	b2da      	uxtb	r2, r3
    87f2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    87f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87fa:	701a      	strb	r2, [r3, #0]
    87fc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8800:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8804:	781a      	ldrb	r2, [r3, #0]
    8806:	f24c 431d 	movw	r3, #50205	; 0xc41d
    880a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    880e:	781b      	ldrb	r3, [r3, #0]
    8810:	4413      	add	r3, r2
    8812:	b2da      	uxtb	r2, r3
    8814:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8818:	f2c2 0304 	movt	r3, #8196	; 0x2004
    881c:	701a      	strb	r2, [r3, #0]
    881e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8826:	781b      	ldrb	r3, [r3, #0]
    8828:	3301      	adds	r3, #1
    882a:	b2da      	uxtb	r2, r3
    882c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8834:	701a      	strb	r2, [r3, #0]
    8836:	f24c 3319 	movw	r3, #49945	; 0xc319
    883a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    883e:	781b      	ldrb	r3, [r3, #0]
    8840:	2bff      	cmp	r3, #255	; 0xff
    8842:	d105      	bne.n	8850 <send_attitude+0x21c>
    8844:	f24c 3319 	movw	r3, #49945	; 0xc319
    8848:	f2c2 0304 	movt	r3, #8196	; 0x2004
    884c:	2200      	movs	r2, #0
    884e:	701a      	strb	r2, [r3, #0]
    8850:	f24c 3319 	movw	r3, #49945	; 0xc319
    8854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8858:	781b      	ldrb	r3, [r3, #0]
    885a:	461a      	mov	r2, r3
    885c:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    8860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8864:	7859      	ldrb	r1, [r3, #1]
    8866:	f24c 331c 	movw	r3, #49948	; 0xc31c
    886a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    886e:	5499      	strb	r1, [r3, r2]
    8870:	4bd1      	ldr	r3, [pc, #836]	; (8bb8 <send_attitude+0x584>)
    8872:	781a      	ldrb	r2, [r3, #0]
    8874:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    887c:	781b      	ldrb	r3, [r3, #0]
    887e:	4413      	add	r3, r2
    8880:	b2da      	uxtb	r2, r3
    8882:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8886:	f2c2 0304 	movt	r3, #8196	; 0x2004
    888a:	701a      	strb	r2, [r3, #0]
    888c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8894:	781a      	ldrb	r2, [r3, #0]
    8896:	f24c 431d 	movw	r3, #50205	; 0xc41d
    889a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    889e:	781b      	ldrb	r3, [r3, #0]
    88a0:	4413      	add	r3, r2
    88a2:	b2da      	uxtb	r2, r3
    88a4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    88a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88ac:	701a      	strb	r2, [r3, #0]
    88ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    88b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88b6:	781b      	ldrb	r3, [r3, #0]
    88b8:	3301      	adds	r3, #1
    88ba:	b2da      	uxtb	r2, r3
    88bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    88c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88c4:	701a      	strb	r2, [r3, #0]
    88c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    88ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88ce:	781b      	ldrb	r3, [r3, #0]
    88d0:	2bff      	cmp	r3, #255	; 0xff
    88d2:	d105      	bne.n	88e0 <send_attitude+0x2ac>
    88d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    88d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88dc:	2200      	movs	r2, #0
    88de:	701a      	strb	r2, [r3, #0]
    88e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    88e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88e8:	781b      	ldrb	r3, [r3, #0]
    88ea:	461a      	mov	r2, r3
    88ec:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    88f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88f4:	7899      	ldrb	r1, [r3, #2]
    88f6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    88fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88fe:	5499      	strb	r1, [r3, r2]
    8900:	4bae      	ldr	r3, [pc, #696]	; (8bbc <send_attitude+0x588>)
    8902:	781a      	ldrb	r2, [r3, #0]
    8904:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    890c:	781b      	ldrb	r3, [r3, #0]
    890e:	4413      	add	r3, r2
    8910:	b2da      	uxtb	r2, r3
    8912:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8916:	f2c2 0304 	movt	r3, #8196	; 0x2004
    891a:	701a      	strb	r2, [r3, #0]
    891c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8924:	781a      	ldrb	r2, [r3, #0]
    8926:	f24c 431d 	movw	r3, #50205	; 0xc41d
    892a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    892e:	781b      	ldrb	r3, [r3, #0]
    8930:	4413      	add	r3, r2
    8932:	b2da      	uxtb	r2, r3
    8934:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    893c:	701a      	strb	r2, [r3, #0]
    893e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8942:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8946:	781b      	ldrb	r3, [r3, #0]
    8948:	3301      	adds	r3, #1
    894a:	b2da      	uxtb	r2, r3
    894c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8954:	701a      	strb	r2, [r3, #0]
    8956:	f24c 3319 	movw	r3, #49945	; 0xc319
    895a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    895e:	781b      	ldrb	r3, [r3, #0]
    8960:	2bff      	cmp	r3, #255	; 0xff
    8962:	d105      	bne.n	8970 <send_attitude+0x33c>
    8964:	f24c 3319 	movw	r3, #49945	; 0xc319
    8968:	f2c2 0304 	movt	r3, #8196	; 0x2004
    896c:	2200      	movs	r2, #0
    896e:	701a      	strb	r2, [r3, #0]
    8970:	f24c 3319 	movw	r3, #49945	; 0xc319
    8974:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8978:	781b      	ldrb	r3, [r3, #0]
    897a:	461a      	mov	r2, r3
    897c:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    8980:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8984:	78d9      	ldrb	r1, [r3, #3]
    8986:	f24c 331c 	movw	r3, #49948	; 0xc31c
    898a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    898e:	5499      	strb	r1, [r3, r2]
    8990:	4b8b      	ldr	r3, [pc, #556]	; (8bc0 <send_attitude+0x58c>)
    8992:	781a      	ldrb	r2, [r3, #0]
    8994:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    899c:	781b      	ldrb	r3, [r3, #0]
    899e:	4413      	add	r3, r2
    89a0:	b2da      	uxtb	r2, r3
    89a2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    89a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89aa:	701a      	strb	r2, [r3, #0]
    89ac:	f24c 431e 	movw	r3, #50206	; 0xc41e
    89b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89b4:	781a      	ldrb	r2, [r3, #0]
    89b6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    89ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89be:	781b      	ldrb	r3, [r3, #0]
    89c0:	4413      	add	r3, r2
    89c2:	b2da      	uxtb	r2, r3
    89c4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    89c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89cc:	701a      	strb	r2, [r3, #0]
    89ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    89d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89d6:	781b      	ldrb	r3, [r3, #0]
    89d8:	3301      	adds	r3, #1
    89da:	b2da      	uxtb	r2, r3
    89dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    89e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89e4:	701a      	strb	r2, [r3, #0]
    89e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    89ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89ee:	781b      	ldrb	r3, [r3, #0]
    89f0:	2bff      	cmp	r3, #255	; 0xff
    89f2:	d105      	bne.n	8a00 <send_attitude+0x3cc>
    89f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    89f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89fc:	2200      	movs	r2, #0
    89fe:	701a      	strb	r2, [r3, #0]
    8a00:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a08:	781b      	ldrb	r3, [r3, #0]
    8a0a:	461a      	mov	r2, r3
    8a0c:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    8a10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a14:	7819      	ldrb	r1, [r3, #0]
    8a16:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8a1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a1e:	5499      	strb	r1, [r3, r2]
    8a20:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    8a24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a28:	781a      	ldrb	r2, [r3, #0]
    8a2a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8a2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a32:	781b      	ldrb	r3, [r3, #0]
    8a34:	4413      	add	r3, r2
    8a36:	b2da      	uxtb	r2, r3
    8a38:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8a3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a40:	701a      	strb	r2, [r3, #0]
    8a42:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8a46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a4a:	781a      	ldrb	r2, [r3, #0]
    8a4c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8a50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a54:	781b      	ldrb	r3, [r3, #0]
    8a56:	4413      	add	r3, r2
    8a58:	b2da      	uxtb	r2, r3
    8a5a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8a5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a62:	701a      	strb	r2, [r3, #0]
    8a64:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a6c:	781b      	ldrb	r3, [r3, #0]
    8a6e:	3301      	adds	r3, #1
    8a70:	b2da      	uxtb	r2, r3
    8a72:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a7a:	701a      	strb	r2, [r3, #0]
    8a7c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a84:	781b      	ldrb	r3, [r3, #0]
    8a86:	2bff      	cmp	r3, #255	; 0xff
    8a88:	d105      	bne.n	8a96 <send_attitude+0x462>
    8a8a:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a92:	2200      	movs	r2, #0
    8a94:	701a      	strb	r2, [r3, #0]
    8a96:	f24c 3319 	movw	r3, #49945	; 0xc319
    8a9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a9e:	781b      	ldrb	r3, [r3, #0]
    8aa0:	461a      	mov	r2, r3
    8aa2:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    8aa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aaa:	7859      	ldrb	r1, [r3, #1]
    8aac:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ab4:	5499      	strb	r1, [r3, r2]
    8ab6:	4b43      	ldr	r3, [pc, #268]	; (8bc4 <send_attitude+0x590>)
    8ab8:	781a      	ldrb	r2, [r3, #0]
    8aba:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8abe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ac2:	781b      	ldrb	r3, [r3, #0]
    8ac4:	4413      	add	r3, r2
    8ac6:	b2da      	uxtb	r2, r3
    8ac8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ad0:	701a      	strb	r2, [r3, #0]
    8ad2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8ad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ada:	781a      	ldrb	r2, [r3, #0]
    8adc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8ae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ae4:	781b      	ldrb	r3, [r3, #0]
    8ae6:	4413      	add	r3, r2
    8ae8:	b2da      	uxtb	r2, r3
    8aea:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8aee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8af2:	701a      	strb	r2, [r3, #0]
    8af4:	f24c 3319 	movw	r3, #49945	; 0xc319
    8af8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8afc:	781b      	ldrb	r3, [r3, #0]
    8afe:	3301      	adds	r3, #1
    8b00:	b2da      	uxtb	r2, r3
    8b02:	f24c 3319 	movw	r3, #49945	; 0xc319
    8b06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b0a:	701a      	strb	r2, [r3, #0]
    8b0c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8b10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b14:	781b      	ldrb	r3, [r3, #0]
    8b16:	2bff      	cmp	r3, #255	; 0xff
    8b18:	d105      	bne.n	8b26 <send_attitude+0x4f2>
    8b1a:	f24c 3319 	movw	r3, #49945	; 0xc319
    8b1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b22:	2200      	movs	r2, #0
    8b24:	701a      	strb	r2, [r3, #0]
    8b26:	f24c 3319 	movw	r3, #49945	; 0xc319
    8b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b2e:	781b      	ldrb	r3, [r3, #0]
    8b30:	461a      	mov	r2, r3
    8b32:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    8b36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b3a:	7899      	ldrb	r1, [r3, #2]
    8b3c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8b40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b44:	5499      	strb	r1, [r3, r2]
    8b46:	4b20      	ldr	r3, [pc, #128]	; (8bc8 <send_attitude+0x594>)
    8b48:	781a      	ldrb	r2, [r3, #0]
    8b4a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8b4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b52:	781b      	ldrb	r3, [r3, #0]
    8b54:	4413      	add	r3, r2
    8b56:	b2da      	uxtb	r2, r3
    8b58:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b60:	701a      	strb	r2, [r3, #0]
    8b62:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b6a:	781a      	ldrb	r2, [r3, #0]
    8b6c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b74:	781b      	ldrb	r3, [r3, #0]
    8b76:	4413      	add	r3, r2
    8b78:	b2da      	uxtb	r2, r3
    8b7a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8b7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b82:	701a      	strb	r2, [r3, #0]
    8b84:	f24c 3319 	movw	r3, #49945	; 0xc319
    8b88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b8c:	781b      	ldrb	r3, [r3, #0]
    8b8e:	3301      	adds	r3, #1
    8b90:	b2da      	uxtb	r2, r3
    8b92:	f24c 3319 	movw	r3, #49945	; 0xc319
    8b96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b9a:	701a      	strb	r2, [r3, #0]
    8b9c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8ba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ba4:	781b      	ldrb	r3, [r3, #0]
    8ba6:	2bff      	cmp	r3, #255	; 0xff
    8ba8:	d110      	bne.n	8bcc <send_attitude+0x598>
    8baa:	f24c 3319 	movw	r3, #49945	; 0xc319
    8bae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bb2:	2200      	movs	r2, #0
    8bb4:	701a      	strb	r2, [r3, #0]
    8bb6:	e009      	b.n	8bcc <send_attitude+0x598>
    8bb8:	2004c8d9 	.word	0x2004c8d9
    8bbc:	2004c8da 	.word	0x2004c8da
    8bc0:	2004c8db 	.word	0x2004c8db
    8bc4:	2004c8dd 	.word	0x2004c8dd
    8bc8:	2004c8de 	.word	0x2004c8de
    8bcc:	f24c 3319 	movw	r3, #49945	; 0xc319
    8bd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bd4:	781b      	ldrb	r3, [r3, #0]
    8bd6:	461a      	mov	r2, r3
    8bd8:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    8bdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8be0:	78d9      	ldrb	r1, [r3, #3]
    8be2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8be6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bea:	5499      	strb	r1, [r3, r2]
    8bec:	4bc2      	ldr	r3, [pc, #776]	; (8ef8 <send_attitude+0x8c4>)
    8bee:	781a      	ldrb	r2, [r3, #0]
    8bf0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8bf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bf8:	781b      	ldrb	r3, [r3, #0]
    8bfa:	4413      	add	r3, r2
    8bfc:	b2da      	uxtb	r2, r3
    8bfe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8c02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c06:	701a      	strb	r2, [r3, #0]
    8c08:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8c0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c10:	781a      	ldrb	r2, [r3, #0]
    8c12:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8c16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c1a:	781b      	ldrb	r3, [r3, #0]
    8c1c:	4413      	add	r3, r2
    8c1e:	b2da      	uxtb	r2, r3
    8c20:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8c24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c28:	701a      	strb	r2, [r3, #0]
    8c2a:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c32:	781b      	ldrb	r3, [r3, #0]
    8c34:	3301      	adds	r3, #1
    8c36:	b2da      	uxtb	r2, r3
    8c38:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c40:	701a      	strb	r2, [r3, #0]
    8c42:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c4a:	781b      	ldrb	r3, [r3, #0]
    8c4c:	2bff      	cmp	r3, #255	; 0xff
    8c4e:	d105      	bne.n	8c5c <send_attitude+0x628>
    8c50:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c58:	2200      	movs	r2, #0
    8c5a:	701a      	strb	r2, [r3, #0]
    8c5c:	f24c 3319 	movw	r3, #49945	; 0xc319
    8c60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c64:	781b      	ldrb	r3, [r3, #0]
    8c66:	461a      	mov	r2, r3
    8c68:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
    8c6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c70:	7819      	ldrb	r1, [r3, #0]
    8c72:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8c76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c7a:	5499      	strb	r1, [r3, r2]
    8c7c:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
    8c80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c84:	781a      	ldrb	r2, [r3, #0]
    8c86:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8c8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c8e:	781b      	ldrb	r3, [r3, #0]
    8c90:	4413      	add	r3, r2
    8c92:	b2da      	uxtb	r2, r3
    8c94:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8c98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c9c:	701a      	strb	r2, [r3, #0]
    8c9e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8ca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ca6:	781a      	ldrb	r2, [r3, #0]
    8ca8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8cac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cb0:	781b      	ldrb	r3, [r3, #0]
    8cb2:	4413      	add	r3, r2
    8cb4:	b2da      	uxtb	r2, r3
    8cb6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8cba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cbe:	701a      	strb	r2, [r3, #0]
    8cc0:	f24c 3319 	movw	r3, #49945	; 0xc319
    8cc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cc8:	781b      	ldrb	r3, [r3, #0]
    8cca:	3301      	adds	r3, #1
    8ccc:	b2da      	uxtb	r2, r3
    8cce:	f24c 3319 	movw	r3, #49945	; 0xc319
    8cd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cd6:	701a      	strb	r2, [r3, #0]
    8cd8:	f24c 3319 	movw	r3, #49945	; 0xc319
    8cdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ce0:	781b      	ldrb	r3, [r3, #0]
    8ce2:	2bff      	cmp	r3, #255	; 0xff
    8ce4:	d105      	bne.n	8cf2 <send_attitude+0x6be>
    8ce6:	f24c 3319 	movw	r3, #49945	; 0xc319
    8cea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cee:	2200      	movs	r2, #0
    8cf0:	701a      	strb	r2, [r3, #0]
    8cf2:	f24c 3319 	movw	r3, #49945	; 0xc319
    8cf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cfa:	781b      	ldrb	r3, [r3, #0]
    8cfc:	461a      	mov	r2, r3
    8cfe:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
    8d02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d06:	7859      	ldrb	r1, [r3, #1]
    8d08:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8d0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d10:	5499      	strb	r1, [r3, r2]
    8d12:	4b7a      	ldr	r3, [pc, #488]	; (8efc <send_attitude+0x8c8>)
    8d14:	781a      	ldrb	r2, [r3, #0]
    8d16:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8d1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d1e:	781b      	ldrb	r3, [r3, #0]
    8d20:	4413      	add	r3, r2
    8d22:	b2da      	uxtb	r2, r3
    8d24:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d2c:	701a      	strb	r2, [r3, #0]
    8d2e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8d32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d36:	781a      	ldrb	r2, [r3, #0]
    8d38:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8d3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d40:	781b      	ldrb	r3, [r3, #0]
    8d42:	4413      	add	r3, r2
    8d44:	b2da      	uxtb	r2, r3
    8d46:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d4e:	701a      	strb	r2, [r3, #0]
    8d50:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d58:	781b      	ldrb	r3, [r3, #0]
    8d5a:	3301      	adds	r3, #1
    8d5c:	b2da      	uxtb	r2, r3
    8d5e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d66:	701a      	strb	r2, [r3, #0]
    8d68:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d70:	781b      	ldrb	r3, [r3, #0]
    8d72:	2bff      	cmp	r3, #255	; 0xff
    8d74:	d105      	bne.n	8d82 <send_attitude+0x74e>
    8d76:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d7e:	2200      	movs	r2, #0
    8d80:	701a      	strb	r2, [r3, #0]
    8d82:	f24c 3319 	movw	r3, #49945	; 0xc319
    8d86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d8a:	781b      	ldrb	r3, [r3, #0]
    8d8c:	461a      	mov	r2, r3
    8d8e:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
    8d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d96:	7899      	ldrb	r1, [r3, #2]
    8d98:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8d9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8da0:	5499      	strb	r1, [r3, r2]
    8da2:	4b57      	ldr	r3, [pc, #348]	; (8f00 <send_attitude+0x8cc>)
    8da4:	781a      	ldrb	r2, [r3, #0]
    8da6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dae:	781b      	ldrb	r3, [r3, #0]
    8db0:	4413      	add	r3, r2
    8db2:	b2da      	uxtb	r2, r3
    8db4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8db8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dbc:	701a      	strb	r2, [r3, #0]
    8dbe:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8dc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dc6:	781a      	ldrb	r2, [r3, #0]
    8dc8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8dcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dd0:	781b      	ldrb	r3, [r3, #0]
    8dd2:	4413      	add	r3, r2
    8dd4:	b2da      	uxtb	r2, r3
    8dd6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8dda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dde:	701a      	strb	r2, [r3, #0]
    8de0:	f24c 3319 	movw	r3, #49945	; 0xc319
    8de4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8de8:	781b      	ldrb	r3, [r3, #0]
    8dea:	3301      	adds	r3, #1
    8dec:	b2da      	uxtb	r2, r3
    8dee:	f24c 3319 	movw	r3, #49945	; 0xc319
    8df2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8df6:	701a      	strb	r2, [r3, #0]
    8df8:	f24c 3319 	movw	r3, #49945	; 0xc319
    8dfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e00:	781b      	ldrb	r3, [r3, #0]
    8e02:	2bff      	cmp	r3, #255	; 0xff
    8e04:	d105      	bne.n	8e12 <send_attitude+0x7de>
    8e06:	f24c 3319 	movw	r3, #49945	; 0xc319
    8e0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e0e:	2200      	movs	r2, #0
    8e10:	701a      	strb	r2, [r3, #0]
    8e12:	f24c 3319 	movw	r3, #49945	; 0xc319
    8e16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e1a:	781b      	ldrb	r3, [r3, #0]
    8e1c:	461a      	mov	r2, r3
    8e1e:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
    8e22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e26:	78d9      	ldrb	r1, [r3, #3]
    8e28:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8e2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e30:	5499      	strb	r1, [r3, r2]
    8e32:	4b34      	ldr	r3, [pc, #208]	; (8f04 <send_attitude+0x8d0>)
    8e34:	781a      	ldrb	r2, [r3, #0]
    8e36:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8e3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e3e:	781b      	ldrb	r3, [r3, #0]
    8e40:	4413      	add	r3, r2
    8e42:	b2da      	uxtb	r2, r3
    8e44:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8e48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e4c:	701a      	strb	r2, [r3, #0]
    8e4e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8e52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e56:	781a      	ldrb	r2, [r3, #0]
    8e58:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8e5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e60:	781b      	ldrb	r3, [r3, #0]
    8e62:	4413      	add	r3, r2
    8e64:	b2da      	uxtb	r2, r3
    8e66:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8e6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e6e:	701a      	strb	r2, [r3, #0]
    8e70:	f24c 3319 	movw	r3, #49945	; 0xc319
    8e74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e78:	781b      	ldrb	r3, [r3, #0]
    8e7a:	3301      	adds	r3, #1
    8e7c:	b2da      	uxtb	r2, r3
    8e7e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8e82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e86:	701a      	strb	r2, [r3, #0]
    8e88:	f24c 3319 	movw	r3, #49945	; 0xc319
    8e8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e90:	781b      	ldrb	r3, [r3, #0]
    8e92:	2bff      	cmp	r3, #255	; 0xff
    8e94:	d105      	bne.n	8ea2 <send_attitude+0x86e>
    8e96:	f24c 3319 	movw	r3, #49945	; 0xc319
    8e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e9e:	2200      	movs	r2, #0
    8ea0:	701a      	strb	r2, [r3, #0]
    8ea2:	f24c 3319 	movw	r3, #49945	; 0xc319
    8ea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eaa:	781b      	ldrb	r3, [r3, #0]
    8eac:	461a      	mov	r2, r3
    8eae:	f24c 431d 	movw	r3, #50205	; 0xc41d
    8eb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eb6:	7819      	ldrb	r1, [r3, #0]
    8eb8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8ebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ec0:	5499      	strb	r1, [r3, r2]
    8ec2:	f24c 3319 	movw	r3, #49945	; 0xc319
    8ec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eca:	781b      	ldrb	r3, [r3, #0]
    8ecc:	3301      	adds	r3, #1
    8ece:	b2da      	uxtb	r2, r3
    8ed0:	f24c 3319 	movw	r3, #49945	; 0xc319
    8ed4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ed8:	701a      	strb	r2, [r3, #0]
    8eda:	f24c 3319 	movw	r3, #49945	; 0xc319
    8ede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ee2:	781b      	ldrb	r3, [r3, #0]
    8ee4:	2bff      	cmp	r3, #255	; 0xff
    8ee6:	d10f      	bne.n	8f08 <send_attitude+0x8d4>
    8ee8:	f24c 3319 	movw	r3, #49945	; 0xc319
    8eec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ef0:	2200      	movs	r2, #0
    8ef2:	701a      	strb	r2, [r3, #0]
    8ef4:	e008      	b.n	8f08 <send_attitude+0x8d4>
    8ef6:	bf00      	nop
    8ef8:	2004c8df 	.word	0x2004c8df
    8efc:	2004c8e1 	.word	0x2004c8e1
    8f00:	2004c8e2 	.word	0x2004c8e2
    8f04:	2004c8e3 	.word	0x2004c8e3
    8f08:	f24c 3319 	movw	r3, #49945	; 0xc319
    8f0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f10:	781b      	ldrb	r3, [r3, #0]
    8f12:	461a      	mov	r2, r3
    8f14:	f24c 431e 	movw	r3, #50206	; 0xc41e
    8f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f1c:	7819      	ldrb	r1, [r3, #0]
    8f1e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8f22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f26:	5499      	strb	r1, [r3, r2]
    8f28:	f24c 3319 	movw	r3, #49945	; 0xc319
    8f2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f30:	781b      	ldrb	r3, [r3, #0]
    8f32:	3301      	adds	r3, #1
    8f34:	b2da      	uxtb	r2, r3
    8f36:	f24c 3319 	movw	r3, #49945	; 0xc319
    8f3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f3e:	701a      	strb	r2, [r3, #0]
    8f40:	f24c 3319 	movw	r3, #49945	; 0xc319
    8f44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f48:	781b      	ldrb	r3, [r3, #0]
    8f4a:	2bff      	cmp	r3, #255	; 0xff
    8f4c:	d105      	bne.n	8f5a <send_attitude+0x926>
    8f4e:	f24c 3319 	movw	r3, #49945	; 0xc319
    8f52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f56:	2200      	movs	r2, #0
    8f58:	701a      	strb	r2, [r3, #0]
    8f5a:	f242 0339 	movw	r3, #8249	; 0x2039
    8f5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8f62:	781b      	ldrb	r3, [r3, #0]
    8f64:	b2db      	uxtb	r3, r3
    8f66:	f003 0310 	and.w	r3, r3, #16
    8f6a:	2b00      	cmp	r3, #0
    8f6c:	d15a      	bne.n	9024 <send_attitude+0x9f0>
    8f6e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8f72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f76:	781b      	ldrb	r3, [r3, #0]
    8f78:	b2db      	uxtb	r3, r3
    8f7a:	461a      	mov	r2, r3
    8f7c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    8f80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f84:	5c9a      	ldrb	r2, [r3, r2]
    8f86:	f24c 431b 	movw	r3, #50203	; 0xc41b
    8f8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f8e:	701a      	strb	r2, [r3, #0]
    8f90:	f24c 431c 	movw	r3, #50204	; 0xc41c
    8f94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f98:	2200      	movs	r2, #0
    8f9a:	701a      	strb	r2, [r3, #0]
    8f9c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8fa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fa4:	781b      	ldrb	r3, [r3, #0]
    8fa6:	b2db      	uxtb	r3, r3
    8fa8:	3301      	adds	r3, #1
    8faa:	b2da      	uxtb	r2, r3
    8fac:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8fb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fb4:	701a      	strb	r2, [r3, #0]
    8fb6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8fba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fbe:	781b      	ldrb	r3, [r3, #0]
    8fc0:	b2db      	uxtb	r3, r3
    8fc2:	2bff      	cmp	r3, #255	; 0xff
    8fc4:	d105      	bne.n	8fd2 <send_attitude+0x99e>
    8fc6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    8fca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fce:	2200      	movs	r2, #0
    8fd0:	701a      	strb	r2, [r3, #0]
    8fd2:	f242 0338 	movw	r3, #8248	; 0x2038
    8fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8fda:	f242 0238 	movw	r2, #8248	; 0x2038
    8fde:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8fe2:	7812      	ldrb	r2, [r2, #0]
    8fe4:	b2d2      	uxtb	r2, r2
    8fe6:	f042 0201 	orr.w	r2, r2, #1
    8fea:	b2d2      	uxtb	r2, r2
    8fec:	701a      	strb	r2, [r3, #0]
    8fee:	f242 0339 	movw	r3, #8249	; 0x2039
    8ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ff6:	f242 0239 	movw	r2, #8249	; 0x2039
    8ffa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8ffe:	7812      	ldrb	r2, [r2, #0]
    9000:	b2d2      	uxtb	r2, r2
    9002:	f042 0210 	orr.w	r2, r2, #16
    9006:	b2d2      	uxtb	r2, r2
    9008:	701a      	strb	r2, [r3, #0]
    900a:	e00b      	b.n	9024 <send_attitude+0x9f0>
    900c:	f24c 3318 	movw	r3, #49944	; 0xc318
    9010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9014:	781b      	ldrb	r3, [r3, #0]
    9016:	3301      	adds	r3, #1
    9018:	b2da      	uxtb	r2, r3
    901a:	f24c 3318 	movw	r3, #49944	; 0xc318
    901e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9022:	701a      	strb	r2, [r3, #0]
  }
}
    9024:	46bd      	mov	sp, r7
    9026:	f85d 7b04 	ldr.w	r7, [sp], #4
    902a:	4770      	bx	lr

0000902c <send_adc>:
  
void send_adc(void){  //500ms
    902c:	b480      	push	{r7}
    902e:	af00      	add	r7, sp, #0
  if(!boot)
    9030:	f240 533d 	movw	r3, #1341	; 0x53d
    9034:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9038:	781b      	ldrb	r3, [r3, #0]
    903a:	2b00      	cmp	r3, #0
    903c:	f040 827d 	bne.w	953a <send_adc+0x50e>
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    9040:	f24c 3311 	movw	r3, #49937	; 0xc311
    9044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9048:	781a      	ldrb	r2, [r3, #0]
    904a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    904e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9052:	fba3 1302 	umull	r1, r3, r3, r2
    9056:	0899      	lsrs	r1, r3, #2
    9058:	460b      	mov	r3, r1
    905a:	009b      	lsls	r3, r3, #2
    905c:	440b      	add	r3, r1
    905e:	1ad3      	subs	r3, r2, r3
    9060:	b2db      	uxtb	r3, r3
    9062:	2b01      	cmp	r3, #1
    9064:	f040 8269 	bne.w	953a <send_adc+0x50e>
    9068:	f24c 3319 	movw	r3, #49945	; 0xc319
    906c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9070:	781a      	ldrb	r2, [r3, #0]
    9072:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9076:	f2c2 0304 	movt	r3, #8196	; 0x2004
    907a:	781b      	ldrb	r3, [r3, #0]
    907c:	b2db      	uxtb	r3, r3
    907e:	429a      	cmp	r2, r3
    9080:	d313      	bcc.n	90aa <send_adc+0x7e>
    9082:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9086:	f2c2 0304 	movt	r3, #8196	; 0x2004
    908a:	781b      	ldrb	r3, [r3, #0]
    908c:	b2db      	uxtb	r3, r3
    908e:	461a      	mov	r2, r3
    9090:	f24c 3319 	movw	r3, #49945	; 0xc319
    9094:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9098:	781b      	ldrb	r3, [r3, #0]
    909a:	1ad3      	subs	r3, r2, r3
    909c:	33ff      	adds	r3, #255	; 0xff
    909e:	2b08      	cmp	r3, #8
    90a0:	bfd4      	ite	le
    90a2:	2300      	movle	r3, #0
    90a4:	2301      	movgt	r3, #1
    90a6:	b2db      	uxtb	r3, r3
    90a8:	e011      	b.n	90ce <send_adc+0xa2>
    90aa:	f24c 331a 	movw	r3, #49946	; 0xc31a
    90ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90b2:	781b      	ldrb	r3, [r3, #0]
    90b4:	b2db      	uxtb	r3, r3
    90b6:	461a      	mov	r2, r3
    90b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    90bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90c0:	781b      	ldrb	r3, [r3, #0]
    90c2:	1ad3      	subs	r3, r2, r3
    90c4:	2b08      	cmp	r3, #8
    90c6:	bfd4      	ite	le
    90c8:	2300      	movle	r3, #0
    90ca:	2301      	movgt	r3, #1
    90cc:	b2db      	uxtb	r3, r3
    90ce:	2b00      	cmp	r3, #0
    90d0:	f000 8227 	beq.w	9522 <send_adc+0x4f6>
    90d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    90d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90dc:	781b      	ldrb	r3, [r3, #0]
    90de:	461a      	mov	r2, r3
    90e0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    90e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90e8:	2105      	movs	r1, #5
    90ea:	5499      	strb	r1, [r3, r2]
    90ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    90f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90f4:	781b      	ldrb	r3, [r3, #0]
    90f6:	3301      	adds	r3, #1
    90f8:	b2da      	uxtb	r2, r3
    90fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    90fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9102:	701a      	strb	r2, [r3, #0]
    9104:	f24c 3319 	movw	r3, #49945	; 0xc319
    9108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    910c:	781b      	ldrb	r3, [r3, #0]
    910e:	2bff      	cmp	r3, #255	; 0xff
    9110:	d105      	bne.n	911e <send_adc+0xf2>
    9112:	f24c 3319 	movw	r3, #49945	; 0xc319
    9116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    911a:	2200      	movs	r2, #0
    911c:	701a      	strb	r2, [r3, #0]
    911e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9126:	781b      	ldrb	r3, [r3, #0]
    9128:	461a      	mov	r2, r3
    912a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    912e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9132:	2107      	movs	r1, #7
    9134:	5499      	strb	r1, [r3, r2]
    9136:	f24c 3319 	movw	r3, #49945	; 0xc319
    913a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    913e:	781b      	ldrb	r3, [r3, #0]
    9140:	3301      	adds	r3, #1
    9142:	b2da      	uxtb	r2, r3
    9144:	f24c 3319 	movw	r3, #49945	; 0xc319
    9148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    914c:	701a      	strb	r2, [r3, #0]
    914e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9156:	781b      	ldrb	r3, [r3, #0]
    9158:	2bff      	cmp	r3, #255	; 0xff
    915a:	d105      	bne.n	9168 <send_adc+0x13c>
    915c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9164:	2200      	movs	r2, #0
    9166:	701a      	strb	r2, [r3, #0]
    9168:	f24c 431d 	movw	r3, #50205	; 0xc41d
    916c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9170:	2207      	movs	r2, #7
    9172:	701a      	strb	r2, [r3, #0]
    9174:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    917c:	2207      	movs	r2, #7
    917e:	701a      	strb	r2, [r3, #0]
    9180:	f24c 3319 	movw	r3, #49945	; 0xc319
    9184:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9188:	781b      	ldrb	r3, [r3, #0]
    918a:	461a      	mov	r2, r3
    918c:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
    9190:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9194:	7819      	ldrb	r1, [r3, #0]
    9196:	f24c 331c 	movw	r3, #49948	; 0xc31c
    919a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    919e:	5499      	strb	r1, [r3, r2]
    91a0:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
    91a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91a8:	781a      	ldrb	r2, [r3, #0]
    91aa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    91ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91b2:	781b      	ldrb	r3, [r3, #0]
    91b4:	4413      	add	r3, r2
    91b6:	b2da      	uxtb	r2, r3
    91b8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    91bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91c0:	701a      	strb	r2, [r3, #0]
    91c2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    91c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91ca:	781a      	ldrb	r2, [r3, #0]
    91cc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    91d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91d4:	781b      	ldrb	r3, [r3, #0]
    91d6:	4413      	add	r3, r2
    91d8:	b2da      	uxtb	r2, r3
    91da:	f24c 431e 	movw	r3, #50206	; 0xc41e
    91de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91e2:	701a      	strb	r2, [r3, #0]
    91e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    91e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91ec:	781b      	ldrb	r3, [r3, #0]
    91ee:	3301      	adds	r3, #1
    91f0:	b2da      	uxtb	r2, r3
    91f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    91f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91fa:	701a      	strb	r2, [r3, #0]
    91fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    9200:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9204:	781b      	ldrb	r3, [r3, #0]
    9206:	2bff      	cmp	r3, #255	; 0xff
    9208:	d105      	bne.n	9216 <send_adc+0x1ea>
    920a:	f24c 3319 	movw	r3, #49945	; 0xc319
    920e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9212:	2200      	movs	r2, #0
    9214:	701a      	strb	r2, [r3, #0]
    9216:	f24c 3319 	movw	r3, #49945	; 0xc319
    921a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    921e:	781b      	ldrb	r3, [r3, #0]
    9220:	461a      	mov	r2, r3
    9222:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
    9226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    922a:	7859      	ldrb	r1, [r3, #1]
    922c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9230:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9234:	5499      	strb	r1, [r3, r2]
    9236:	4bc3      	ldr	r3, [pc, #780]	; (9544 <send_adc+0x518>)
    9238:	781a      	ldrb	r2, [r3, #0]
    923a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    923e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9242:	781b      	ldrb	r3, [r3, #0]
    9244:	4413      	add	r3, r2
    9246:	b2da      	uxtb	r2, r3
    9248:	f24c 431d 	movw	r3, #50205	; 0xc41d
    924c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9250:	701a      	strb	r2, [r3, #0]
    9252:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9256:	f2c2 0304 	movt	r3, #8196	; 0x2004
    925a:	781a      	ldrb	r2, [r3, #0]
    925c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9260:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9264:	781b      	ldrb	r3, [r3, #0]
    9266:	4413      	add	r3, r2
    9268:	b2da      	uxtb	r2, r3
    926a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    926e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9272:	701a      	strb	r2, [r3, #0]
    9274:	f24c 3319 	movw	r3, #49945	; 0xc319
    9278:	f2c2 0304 	movt	r3, #8196	; 0x2004
    927c:	781b      	ldrb	r3, [r3, #0]
    927e:	3301      	adds	r3, #1
    9280:	b2da      	uxtb	r2, r3
    9282:	f24c 3319 	movw	r3, #49945	; 0xc319
    9286:	f2c2 0304 	movt	r3, #8196	; 0x2004
    928a:	701a      	strb	r2, [r3, #0]
    928c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9290:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9294:	781b      	ldrb	r3, [r3, #0]
    9296:	2bff      	cmp	r3, #255	; 0xff
    9298:	d105      	bne.n	92a6 <send_adc+0x27a>
    929a:	f24c 3319 	movw	r3, #49945	; 0xc319
    929e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92a2:	2200      	movs	r2, #0
    92a4:	701a      	strb	r2, [r3, #0]
    92a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    92aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92ae:	781b      	ldrb	r3, [r3, #0]
    92b0:	461a      	mov	r2, r3
    92b2:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
    92b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92ba:	7819      	ldrb	r1, [r3, #0]
    92bc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    92c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92c4:	5499      	strb	r1, [r3, r2]
    92c6:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
    92ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92ce:	781a      	ldrb	r2, [r3, #0]
    92d0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    92d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92d8:	781b      	ldrb	r3, [r3, #0]
    92da:	4413      	add	r3, r2
    92dc:	b2da      	uxtb	r2, r3
    92de:	f24c 431d 	movw	r3, #50205	; 0xc41d
    92e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92e6:	701a      	strb	r2, [r3, #0]
    92e8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    92ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92f0:	781a      	ldrb	r2, [r3, #0]
    92f2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    92f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92fa:	781b      	ldrb	r3, [r3, #0]
    92fc:	4413      	add	r3, r2
    92fe:	b2da      	uxtb	r2, r3
    9300:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9308:	701a      	strb	r2, [r3, #0]
    930a:	f24c 3319 	movw	r3, #49945	; 0xc319
    930e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9312:	781b      	ldrb	r3, [r3, #0]
    9314:	3301      	adds	r3, #1
    9316:	b2da      	uxtb	r2, r3
    9318:	f24c 3319 	movw	r3, #49945	; 0xc319
    931c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9320:	701a      	strb	r2, [r3, #0]
    9322:	f24c 3319 	movw	r3, #49945	; 0xc319
    9326:	f2c2 0304 	movt	r3, #8196	; 0x2004
    932a:	781b      	ldrb	r3, [r3, #0]
    932c:	2bff      	cmp	r3, #255	; 0xff
    932e:	d105      	bne.n	933c <send_adc+0x310>
    9330:	f24c 3319 	movw	r3, #49945	; 0xc319
    9334:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9338:	2200      	movs	r2, #0
    933a:	701a      	strb	r2, [r3, #0]
    933c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9340:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9344:	781b      	ldrb	r3, [r3, #0]
    9346:	461a      	mov	r2, r3
    9348:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
    934c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9350:	7859      	ldrb	r1, [r3, #1]
    9352:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9356:	f2c2 0304 	movt	r3, #8196	; 0x2004
    935a:	5499      	strb	r1, [r3, r2]
    935c:	4b7a      	ldr	r3, [pc, #488]	; (9548 <send_adc+0x51c>)
    935e:	781a      	ldrb	r2, [r3, #0]
    9360:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9368:	781b      	ldrb	r3, [r3, #0]
    936a:	4413      	add	r3, r2
    936c:	b2da      	uxtb	r2, r3
    936e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9372:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9376:	701a      	strb	r2, [r3, #0]
    9378:	f24c 431e 	movw	r3, #50206	; 0xc41e
    937c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9380:	781a      	ldrb	r2, [r3, #0]
    9382:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9386:	f2c2 0304 	movt	r3, #8196	; 0x2004
    938a:	781b      	ldrb	r3, [r3, #0]
    938c:	4413      	add	r3, r2
    938e:	b2da      	uxtb	r2, r3
    9390:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9394:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9398:	701a      	strb	r2, [r3, #0]
    939a:	f24c 3319 	movw	r3, #49945	; 0xc319
    939e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93a2:	781b      	ldrb	r3, [r3, #0]
    93a4:	3301      	adds	r3, #1
    93a6:	b2da      	uxtb	r2, r3
    93a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    93ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93b0:	701a      	strb	r2, [r3, #0]
    93b2:	f24c 3319 	movw	r3, #49945	; 0xc319
    93b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93ba:	781b      	ldrb	r3, [r3, #0]
    93bc:	2bff      	cmp	r3, #255	; 0xff
    93be:	d105      	bne.n	93cc <send_adc+0x3a0>
    93c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    93c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93c8:	2200      	movs	r2, #0
    93ca:	701a      	strb	r2, [r3, #0]
    93cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    93d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93d4:	781b      	ldrb	r3, [r3, #0]
    93d6:	461a      	mov	r2, r3
    93d8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    93dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93e0:	7819      	ldrb	r1, [r3, #0]
    93e2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    93e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93ea:	5499      	strb	r1, [r3, r2]
    93ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    93f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93f4:	781b      	ldrb	r3, [r3, #0]
    93f6:	3301      	adds	r3, #1
    93f8:	b2da      	uxtb	r2, r3
    93fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    93fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9402:	701a      	strb	r2, [r3, #0]
    9404:	f24c 3319 	movw	r3, #49945	; 0xc319
    9408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    940c:	781b      	ldrb	r3, [r3, #0]
    940e:	2bff      	cmp	r3, #255	; 0xff
    9410:	d105      	bne.n	941e <send_adc+0x3f2>
    9412:	f24c 3319 	movw	r3, #49945	; 0xc319
    9416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    941a:	2200      	movs	r2, #0
    941c:	701a      	strb	r2, [r3, #0]
    941e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9426:	781b      	ldrb	r3, [r3, #0]
    9428:	461a      	mov	r2, r3
    942a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    942e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9432:	7819      	ldrb	r1, [r3, #0]
    9434:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9438:	f2c2 0304 	movt	r3, #8196	; 0x2004
    943c:	5499      	strb	r1, [r3, r2]
    943e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9446:	781b      	ldrb	r3, [r3, #0]
    9448:	3301      	adds	r3, #1
    944a:	b2da      	uxtb	r2, r3
    944c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9454:	701a      	strb	r2, [r3, #0]
    9456:	f24c 3319 	movw	r3, #49945	; 0xc319
    945a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    945e:	781b      	ldrb	r3, [r3, #0]
    9460:	2bff      	cmp	r3, #255	; 0xff
    9462:	d105      	bne.n	9470 <send_adc+0x444>
    9464:	f24c 3319 	movw	r3, #49945	; 0xc319
    9468:	f2c2 0304 	movt	r3, #8196	; 0x2004
    946c:	2200      	movs	r2, #0
    946e:	701a      	strb	r2, [r3, #0]
    9470:	f242 0339 	movw	r3, #8249	; 0x2039
    9474:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9478:	781b      	ldrb	r3, [r3, #0]
    947a:	b2db      	uxtb	r3, r3
    947c:	f003 0310 	and.w	r3, r3, #16
    9480:	2b00      	cmp	r3, #0
    9482:	d15a      	bne.n	953a <send_adc+0x50e>
    9484:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    948c:	781b      	ldrb	r3, [r3, #0]
    948e:	b2db      	uxtb	r3, r3
    9490:	461a      	mov	r2, r3
    9492:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9496:	f2c2 0304 	movt	r3, #8196	; 0x2004
    949a:	5c9a      	ldrb	r2, [r3, r2]
    949c:	f24c 431b 	movw	r3, #50203	; 0xc41b
    94a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94a4:	701a      	strb	r2, [r3, #0]
    94a6:	f24c 431c 	movw	r3, #50204	; 0xc41c
    94aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94ae:	2200      	movs	r2, #0
    94b0:	701a      	strb	r2, [r3, #0]
    94b2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    94b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94ba:	781b      	ldrb	r3, [r3, #0]
    94bc:	b2db      	uxtb	r3, r3
    94be:	3301      	adds	r3, #1
    94c0:	b2da      	uxtb	r2, r3
    94c2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    94c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94ca:	701a      	strb	r2, [r3, #0]
    94cc:	f24c 331a 	movw	r3, #49946	; 0xc31a
    94d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94d4:	781b      	ldrb	r3, [r3, #0]
    94d6:	b2db      	uxtb	r3, r3
    94d8:	2bff      	cmp	r3, #255	; 0xff
    94da:	d105      	bne.n	94e8 <send_adc+0x4bc>
    94dc:	f24c 331a 	movw	r3, #49946	; 0xc31a
    94e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94e4:	2200      	movs	r2, #0
    94e6:	701a      	strb	r2, [r3, #0]
    94e8:	f242 0338 	movw	r3, #8248	; 0x2038
    94ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94f0:	f242 0238 	movw	r2, #8248	; 0x2038
    94f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    94f8:	7812      	ldrb	r2, [r2, #0]
    94fa:	b2d2      	uxtb	r2, r2
    94fc:	f042 0201 	orr.w	r2, r2, #1
    9500:	b2d2      	uxtb	r2, r2
    9502:	701a      	strb	r2, [r3, #0]
    9504:	f242 0339 	movw	r3, #8249	; 0x2039
    9508:	f2c2 0300 	movt	r3, #8192	; 0x2000
    950c:	f242 0239 	movw	r2, #8249	; 0x2039
    9510:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9514:	7812      	ldrb	r2, [r2, #0]
    9516:	b2d2      	uxtb	r2, r2
    9518:	f042 0210 	orr.w	r2, r2, #16
    951c:	b2d2      	uxtb	r2, r2
    951e:	701a      	strb	r2, [r3, #0]
    9520:	e00b      	b.n	953a <send_adc+0x50e>
    9522:	f24c 3318 	movw	r3, #49944	; 0xc318
    9526:	f2c2 0304 	movt	r3, #8196	; 0x2004
    952a:	781b      	ldrb	r3, [r3, #0]
    952c:	3301      	adds	r3, #1
    952e:	b2da      	uxtb	r2, r3
    9530:	f24c 3318 	movw	r3, #49944	; 0xc318
    9534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9538:	701a      	strb	r2, [r3, #0]
}
    953a:	46bd      	mov	sp, r7
    953c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9540:	4770      	bx	lr
    9542:	bf00      	nop
    9544:	2004c5b9 	.word	0x2004c5b9
    9548:	2004c5bb 	.word	0x2004c5bb

0000954c <send_settings>:
void send_settings(void){ //500ms
    954c:	b480      	push	{r7}
    954e:	af00      	add	r7, sp, #0
  if(!boot)
    9550:	f240 533d 	movw	r3, #1341	; 0x53d
    9554:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9558:	781b      	ldrb	r3, [r3, #0]
    955a:	2b00      	cmp	r3, #0
    955c:	f040 83fb 	bne.w	9d56 <send_settings+0x80a>
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    9560:	f24c 3311 	movw	r3, #49937	; 0xc311
    9564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9568:	781a      	ldrb	r2, [r3, #0]
    956a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    956e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9572:	fba3 1302 	umull	r1, r3, r3, r2
    9576:	0899      	lsrs	r1, r3, #2
    9578:	460b      	mov	r3, r1
    957a:	009b      	lsls	r3, r3, #2
    957c:	440b      	add	r3, r1
    957e:	1ad3      	subs	r3, r2, r3
    9580:	b2db      	uxtb	r3, r3
    9582:	2b02      	cmp	r3, #2
    9584:	f040 83e7 	bne.w	9d56 <send_settings+0x80a>
    9588:	f64c 132c 	movw	r3, #51500	; 0xc92c
    958c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9590:	781b      	ldrb	r3, [r3, #0]
    9592:	2b00      	cmp	r3, #0
    9594:	f000 83df 	beq.w	9d56 <send_settings+0x80a>
    9598:	f24c 3319 	movw	r3, #49945	; 0xc319
    959c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95a0:	781a      	ldrb	r2, [r3, #0]
    95a2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    95a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95aa:	781b      	ldrb	r3, [r3, #0]
    95ac:	b2db      	uxtb	r3, r3
    95ae:	429a      	cmp	r2, r3
    95b0:	d313      	bcc.n	95da <send_settings+0x8e>
    95b2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    95b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ba:	781b      	ldrb	r3, [r3, #0]
    95bc:	b2db      	uxtb	r3, r3
    95be:	461a      	mov	r2, r3
    95c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    95c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95c8:	781b      	ldrb	r3, [r3, #0]
    95ca:	1ad3      	subs	r3, r2, r3
    95cc:	33ff      	adds	r3, #255	; 0xff
    95ce:	2b0d      	cmp	r3, #13
    95d0:	bfd4      	ite	le
    95d2:	2300      	movle	r3, #0
    95d4:	2301      	movgt	r3, #1
    95d6:	b2db      	uxtb	r3, r3
    95d8:	e011      	b.n	95fe <send_settings+0xb2>
    95da:	f24c 331a 	movw	r3, #49946	; 0xc31a
    95de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95e2:	781b      	ldrb	r3, [r3, #0]
    95e4:	b2db      	uxtb	r3, r3
    95e6:	461a      	mov	r2, r3
    95e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    95ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95f0:	781b      	ldrb	r3, [r3, #0]
    95f2:	1ad3      	subs	r3, r2, r3
    95f4:	2b0d      	cmp	r3, #13
    95f6:	bfd4      	ite	le
    95f8:	2300      	movle	r3, #0
    95fa:	2301      	movgt	r3, #1
    95fc:	b2db      	uxtb	r3, r3
    95fe:	2b00      	cmp	r3, #0
    9600:	f000 839d 	beq.w	9d3e <send_settings+0x7f2>
    9604:	f24c 3319 	movw	r3, #49945	; 0xc319
    9608:	f2c2 0304 	movt	r3, #8196	; 0x2004
    960c:	781b      	ldrb	r3, [r3, #0]
    960e:	461a      	mov	r2, r3
    9610:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9618:	2105      	movs	r1, #5
    961a:	5499      	strb	r1, [r3, r2]
    961c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9620:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9624:	781b      	ldrb	r3, [r3, #0]
    9626:	3301      	adds	r3, #1
    9628:	b2da      	uxtb	r2, r3
    962a:	f24c 3319 	movw	r3, #49945	; 0xc319
    962e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9632:	701a      	strb	r2, [r3, #0]
    9634:	f24c 3319 	movw	r3, #49945	; 0xc319
    9638:	f2c2 0304 	movt	r3, #8196	; 0x2004
    963c:	781b      	ldrb	r3, [r3, #0]
    963e:	2bff      	cmp	r3, #255	; 0xff
    9640:	d105      	bne.n	964e <send_settings+0x102>
    9642:	f24c 3319 	movw	r3, #49945	; 0xc319
    9646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    964a:	2200      	movs	r2, #0
    964c:	701a      	strb	r2, [r3, #0]
    964e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9656:	781b      	ldrb	r3, [r3, #0]
    9658:	461a      	mov	r2, r3
    965a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    965e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9662:	2111      	movs	r1, #17
    9664:	5499      	strb	r1, [r3, r2]
    9666:	f24c 3319 	movw	r3, #49945	; 0xc319
    966a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    966e:	781b      	ldrb	r3, [r3, #0]
    9670:	3301      	adds	r3, #1
    9672:	b2da      	uxtb	r2, r3
    9674:	f24c 3319 	movw	r3, #49945	; 0xc319
    9678:	f2c2 0304 	movt	r3, #8196	; 0x2004
    967c:	701a      	strb	r2, [r3, #0]
    967e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9686:	781b      	ldrb	r3, [r3, #0]
    9688:	2bff      	cmp	r3, #255	; 0xff
    968a:	d105      	bne.n	9698 <send_settings+0x14c>
    968c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9690:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9694:	2200      	movs	r2, #0
    9696:	701a      	strb	r2, [r3, #0]
    9698:	f24c 431d 	movw	r3, #50205	; 0xc41d
    969c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96a0:	2211      	movs	r2, #17
    96a2:	701a      	strb	r2, [r3, #0]
    96a4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    96a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96ac:	2211      	movs	r2, #17
    96ae:	701a      	strb	r2, [r3, #0]
    96b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    96b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96b8:	781b      	ldrb	r3, [r3, #0]
    96ba:	461a      	mov	r2, r3
    96bc:	f64c 132c 	movw	r3, #51500	; 0xc92c
    96c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96c4:	7819      	ldrb	r1, [r3, #0]
    96c6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    96ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96ce:	5499      	strb	r1, [r3, r2]
    96d0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    96d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96d8:	781a      	ldrb	r2, [r3, #0]
    96da:	f64c 132c 	movw	r3, #51500	; 0xc92c
    96de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96e2:	781b      	ldrb	r3, [r3, #0]
    96e4:	4413      	add	r3, r2
    96e6:	b2da      	uxtb	r2, r3
    96e8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    96ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96f0:	701a      	strb	r2, [r3, #0]
    96f2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    96f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96fa:	781a      	ldrb	r2, [r3, #0]
    96fc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9704:	781b      	ldrb	r3, [r3, #0]
    9706:	4413      	add	r3, r2
    9708:	b2da      	uxtb	r2, r3
    970a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    970e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9712:	701a      	strb	r2, [r3, #0]
    9714:	f24c 3319 	movw	r3, #49945	; 0xc319
    9718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    971c:	781b      	ldrb	r3, [r3, #0]
    971e:	3301      	adds	r3, #1
    9720:	b2da      	uxtb	r2, r3
    9722:	f24c 3319 	movw	r3, #49945	; 0xc319
    9726:	f2c2 0304 	movt	r3, #8196	; 0x2004
    972a:	701a      	strb	r2, [r3, #0]
    972c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9734:	781b      	ldrb	r3, [r3, #0]
    9736:	2bff      	cmp	r3, #255	; 0xff
    9738:	d105      	bne.n	9746 <send_settings+0x1fa>
    973a:	f24c 3319 	movw	r3, #49945	; 0xc319
    973e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9742:	2200      	movs	r2, #0
    9744:	701a      	strb	r2, [r3, #0]
    9746:	f24c 3319 	movw	r3, #49945	; 0xc319
    974a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    974e:	781b      	ldrb	r3, [r3, #0]
    9750:	461a      	mov	r2, r3
    9752:	f24c 3308 	movw	r3, #49928	; 0xc308
    9756:	f2c2 0304 	movt	r3, #8196	; 0x2004
    975a:	7819      	ldrb	r1, [r3, #0]
    975c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9764:	5499      	strb	r1, [r3, r2]
    9766:	f24c 3308 	movw	r3, #49928	; 0xc308
    976a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    976e:	781a      	ldrb	r2, [r3, #0]
    9770:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9778:	781b      	ldrb	r3, [r3, #0]
    977a:	4413      	add	r3, r2
    977c:	b2da      	uxtb	r2, r3
    977e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9786:	701a      	strb	r2, [r3, #0]
    9788:	f24c 431e 	movw	r3, #50206	; 0xc41e
    978c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9790:	781a      	ldrb	r2, [r3, #0]
    9792:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9796:	f2c2 0304 	movt	r3, #8196	; 0x2004
    979a:	781b      	ldrb	r3, [r3, #0]
    979c:	4413      	add	r3, r2
    979e:	b2da      	uxtb	r2, r3
    97a0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    97a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97a8:	701a      	strb	r2, [r3, #0]
    97aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    97ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97b2:	781b      	ldrb	r3, [r3, #0]
    97b4:	3301      	adds	r3, #1
    97b6:	b2da      	uxtb	r2, r3
    97b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    97bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97c0:	701a      	strb	r2, [r3, #0]
    97c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    97c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97ca:	781b      	ldrb	r3, [r3, #0]
    97cc:	2bff      	cmp	r3, #255	; 0xff
    97ce:	d105      	bne.n	97dc <send_settings+0x290>
    97d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    97d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97d8:	2200      	movs	r2, #0
    97da:	701a      	strb	r2, [r3, #0]
    97dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    97e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97e4:	781b      	ldrb	r3, [r3, #0]
    97e6:	461a      	mov	r2, r3
    97e8:	f24c 3308 	movw	r3, #49928	; 0xc308
    97ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97f0:	7859      	ldrb	r1, [r3, #1]
    97f2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    97f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97fa:	5499      	strb	r1, [r3, r2]
    97fc:	4bd1      	ldr	r3, [pc, #836]	; (9b44 <send_settings+0x5f8>)
    97fe:	781a      	ldrb	r2, [r3, #0]
    9800:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9808:	781b      	ldrb	r3, [r3, #0]
    980a:	4413      	add	r3, r2
    980c:	b2da      	uxtb	r2, r3
    980e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9816:	701a      	strb	r2, [r3, #0]
    9818:	f24c 431e 	movw	r3, #50206	; 0xc41e
    981c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9820:	781a      	ldrb	r2, [r3, #0]
    9822:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9826:	f2c2 0304 	movt	r3, #8196	; 0x2004
    982a:	781b      	ldrb	r3, [r3, #0]
    982c:	4413      	add	r3, r2
    982e:	b2da      	uxtb	r2, r3
    9830:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9834:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9838:	701a      	strb	r2, [r3, #0]
    983a:	f24c 3319 	movw	r3, #49945	; 0xc319
    983e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9842:	781b      	ldrb	r3, [r3, #0]
    9844:	3301      	adds	r3, #1
    9846:	b2da      	uxtb	r2, r3
    9848:	f24c 3319 	movw	r3, #49945	; 0xc319
    984c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9850:	701a      	strb	r2, [r3, #0]
    9852:	f24c 3319 	movw	r3, #49945	; 0xc319
    9856:	f2c2 0304 	movt	r3, #8196	; 0x2004
    985a:	781b      	ldrb	r3, [r3, #0]
    985c:	2bff      	cmp	r3, #255	; 0xff
    985e:	d105      	bne.n	986c <send_settings+0x320>
    9860:	f24c 3319 	movw	r3, #49945	; 0xc319
    9864:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9868:	2200      	movs	r2, #0
    986a:	701a      	strb	r2, [r3, #0]
    986c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9870:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9874:	781b      	ldrb	r3, [r3, #0]
    9876:	461a      	mov	r2, r3
    9878:	f24c 3308 	movw	r3, #49928	; 0xc308
    987c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9880:	7899      	ldrb	r1, [r3, #2]
    9882:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9886:	f2c2 0304 	movt	r3, #8196	; 0x2004
    988a:	5499      	strb	r1, [r3, r2]
    988c:	4bae      	ldr	r3, [pc, #696]	; (9b48 <send_settings+0x5fc>)
    988e:	781a      	ldrb	r2, [r3, #0]
    9890:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9894:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9898:	781b      	ldrb	r3, [r3, #0]
    989a:	4413      	add	r3, r2
    989c:	b2da      	uxtb	r2, r3
    989e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    98a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98a6:	701a      	strb	r2, [r3, #0]
    98a8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    98ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98b0:	781a      	ldrb	r2, [r3, #0]
    98b2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    98b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98ba:	781b      	ldrb	r3, [r3, #0]
    98bc:	4413      	add	r3, r2
    98be:	b2da      	uxtb	r2, r3
    98c0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    98c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98c8:	701a      	strb	r2, [r3, #0]
    98ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    98ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98d2:	781b      	ldrb	r3, [r3, #0]
    98d4:	3301      	adds	r3, #1
    98d6:	b2da      	uxtb	r2, r3
    98d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    98dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98e0:	701a      	strb	r2, [r3, #0]
    98e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    98e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98ea:	781b      	ldrb	r3, [r3, #0]
    98ec:	2bff      	cmp	r3, #255	; 0xff
    98ee:	d105      	bne.n	98fc <send_settings+0x3b0>
    98f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    98f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98f8:	2200      	movs	r2, #0
    98fa:	701a      	strb	r2, [r3, #0]
    98fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    9900:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9904:	781b      	ldrb	r3, [r3, #0]
    9906:	461a      	mov	r2, r3
    9908:	f24c 3308 	movw	r3, #49928	; 0xc308
    990c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9910:	78d9      	ldrb	r1, [r3, #3]
    9912:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9916:	f2c2 0304 	movt	r3, #8196	; 0x2004
    991a:	5499      	strb	r1, [r3, r2]
    991c:	4b8b      	ldr	r3, [pc, #556]	; (9b4c <send_settings+0x600>)
    991e:	781a      	ldrb	r2, [r3, #0]
    9920:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9924:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9928:	781b      	ldrb	r3, [r3, #0]
    992a:	4413      	add	r3, r2
    992c:	b2da      	uxtb	r2, r3
    992e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9936:	701a      	strb	r2, [r3, #0]
    9938:	f24c 431e 	movw	r3, #50206	; 0xc41e
    993c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9940:	781a      	ldrb	r2, [r3, #0]
    9942:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9946:	f2c2 0304 	movt	r3, #8196	; 0x2004
    994a:	781b      	ldrb	r3, [r3, #0]
    994c:	4413      	add	r3, r2
    994e:	b2da      	uxtb	r2, r3
    9950:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9958:	701a      	strb	r2, [r3, #0]
    995a:	f24c 3319 	movw	r3, #49945	; 0xc319
    995e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9962:	781b      	ldrb	r3, [r3, #0]
    9964:	3301      	adds	r3, #1
    9966:	b2da      	uxtb	r2, r3
    9968:	f24c 3319 	movw	r3, #49945	; 0xc319
    996c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9970:	701a      	strb	r2, [r3, #0]
    9972:	f24c 3319 	movw	r3, #49945	; 0xc319
    9976:	f2c2 0304 	movt	r3, #8196	; 0x2004
    997a:	781b      	ldrb	r3, [r3, #0]
    997c:	2bff      	cmp	r3, #255	; 0xff
    997e:	d105      	bne.n	998c <send_settings+0x440>
    9980:	f24c 3319 	movw	r3, #49945	; 0xc319
    9984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9988:	2200      	movs	r2, #0
    998a:	701a      	strb	r2, [r3, #0]
    998c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9994:	781b      	ldrb	r3, [r3, #0]
    9996:	461a      	mov	r2, r3
    9998:	f24c 330c 	movw	r3, #49932	; 0xc30c
    999c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99a0:	7819      	ldrb	r1, [r3, #0]
    99a2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    99a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99aa:	5499      	strb	r1, [r3, r2]
    99ac:	f24c 330c 	movw	r3, #49932	; 0xc30c
    99b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99b4:	781a      	ldrb	r2, [r3, #0]
    99b6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    99ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99be:	781b      	ldrb	r3, [r3, #0]
    99c0:	4413      	add	r3, r2
    99c2:	b2da      	uxtb	r2, r3
    99c4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    99c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99cc:	701a      	strb	r2, [r3, #0]
    99ce:	f24c 431e 	movw	r3, #50206	; 0xc41e
    99d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99d6:	781a      	ldrb	r2, [r3, #0]
    99d8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    99dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99e0:	781b      	ldrb	r3, [r3, #0]
    99e2:	4413      	add	r3, r2
    99e4:	b2da      	uxtb	r2, r3
    99e6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    99ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99ee:	701a      	strb	r2, [r3, #0]
    99f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    99f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99f8:	781b      	ldrb	r3, [r3, #0]
    99fa:	3301      	adds	r3, #1
    99fc:	b2da      	uxtb	r2, r3
    99fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    9a02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a06:	701a      	strb	r2, [r3, #0]
    9a08:	f24c 3319 	movw	r3, #49945	; 0xc319
    9a0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a10:	781b      	ldrb	r3, [r3, #0]
    9a12:	2bff      	cmp	r3, #255	; 0xff
    9a14:	d105      	bne.n	9a22 <send_settings+0x4d6>
    9a16:	f24c 3319 	movw	r3, #49945	; 0xc319
    9a1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a1e:	2200      	movs	r2, #0
    9a20:	701a      	strb	r2, [r3, #0]
    9a22:	f24c 3319 	movw	r3, #49945	; 0xc319
    9a26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a2a:	781b      	ldrb	r3, [r3, #0]
    9a2c:	461a      	mov	r2, r3
    9a2e:	f24c 330c 	movw	r3, #49932	; 0xc30c
    9a32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a36:	7859      	ldrb	r1, [r3, #1]
    9a38:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9a3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a40:	5499      	strb	r1, [r3, r2]
    9a42:	4b43      	ldr	r3, [pc, #268]	; (9b50 <send_settings+0x604>)
    9a44:	781a      	ldrb	r2, [r3, #0]
    9a46:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9a4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a4e:	781b      	ldrb	r3, [r3, #0]
    9a50:	4413      	add	r3, r2
    9a52:	b2da      	uxtb	r2, r3
    9a54:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a5c:	701a      	strb	r2, [r3, #0]
    9a5e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9a62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a66:	781a      	ldrb	r2, [r3, #0]
    9a68:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9a6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a70:	781b      	ldrb	r3, [r3, #0]
    9a72:	4413      	add	r3, r2
    9a74:	b2da      	uxtb	r2, r3
    9a76:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9a7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a7e:	701a      	strb	r2, [r3, #0]
    9a80:	f24c 3319 	movw	r3, #49945	; 0xc319
    9a84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a88:	781b      	ldrb	r3, [r3, #0]
    9a8a:	3301      	adds	r3, #1
    9a8c:	b2da      	uxtb	r2, r3
    9a8e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9a92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a96:	701a      	strb	r2, [r3, #0]
    9a98:	f24c 3319 	movw	r3, #49945	; 0xc319
    9a9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aa0:	781b      	ldrb	r3, [r3, #0]
    9aa2:	2bff      	cmp	r3, #255	; 0xff
    9aa4:	d105      	bne.n	9ab2 <send_settings+0x566>
    9aa6:	f24c 3319 	movw	r3, #49945	; 0xc319
    9aaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aae:	2200      	movs	r2, #0
    9ab0:	701a      	strb	r2, [r3, #0]
    9ab2:	f24c 3319 	movw	r3, #49945	; 0xc319
    9ab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aba:	781b      	ldrb	r3, [r3, #0]
    9abc:	461a      	mov	r2, r3
    9abe:	f24c 330c 	movw	r3, #49932	; 0xc30c
    9ac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ac6:	7899      	ldrb	r1, [r3, #2]
    9ac8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ad0:	5499      	strb	r1, [r3, r2]
    9ad2:	4b20      	ldr	r3, [pc, #128]	; (9b54 <send_settings+0x608>)
    9ad4:	781a      	ldrb	r2, [r3, #0]
    9ad6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9ada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ade:	781b      	ldrb	r3, [r3, #0]
    9ae0:	4413      	add	r3, r2
    9ae2:	b2da      	uxtb	r2, r3
    9ae4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9ae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aec:	701a      	strb	r2, [r3, #0]
    9aee:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9af2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9af6:	781a      	ldrb	r2, [r3, #0]
    9af8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9afc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b00:	781b      	ldrb	r3, [r3, #0]
    9b02:	4413      	add	r3, r2
    9b04:	b2da      	uxtb	r2, r3
    9b06:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9b0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b0e:	701a      	strb	r2, [r3, #0]
    9b10:	f24c 3319 	movw	r3, #49945	; 0xc319
    9b14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b18:	781b      	ldrb	r3, [r3, #0]
    9b1a:	3301      	adds	r3, #1
    9b1c:	b2da      	uxtb	r2, r3
    9b1e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9b22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b26:	701a      	strb	r2, [r3, #0]
    9b28:	f24c 3319 	movw	r3, #49945	; 0xc319
    9b2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b30:	781b      	ldrb	r3, [r3, #0]
    9b32:	2bff      	cmp	r3, #255	; 0xff
    9b34:	d110      	bne.n	9b58 <send_settings+0x60c>
    9b36:	f24c 3319 	movw	r3, #49945	; 0xc319
    9b3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b3e:	2200      	movs	r2, #0
    9b40:	701a      	strb	r2, [r3, #0]
    9b42:	e009      	b.n	9b58 <send_settings+0x60c>
    9b44:	2004c309 	.word	0x2004c309
    9b48:	2004c30a 	.word	0x2004c30a
    9b4c:	2004c30b 	.word	0x2004c30b
    9b50:	2004c30d 	.word	0x2004c30d
    9b54:	2004c30e 	.word	0x2004c30e
    9b58:	f24c 3319 	movw	r3, #49945	; 0xc319
    9b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b60:	781b      	ldrb	r3, [r3, #0]
    9b62:	461a      	mov	r2, r3
    9b64:	f24c 330c 	movw	r3, #49932	; 0xc30c
    9b68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b6c:	78d9      	ldrb	r1, [r3, #3]
    9b6e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9b72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b76:	5499      	strb	r1, [r3, r2]
    9b78:	4b79      	ldr	r3, [pc, #484]	; (9d60 <send_settings+0x814>)
    9b7a:	781a      	ldrb	r2, [r3, #0]
    9b7c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9b80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b84:	781b      	ldrb	r3, [r3, #0]
    9b86:	4413      	add	r3, r2
    9b88:	b2da      	uxtb	r2, r3
    9b8a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9b8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b92:	701a      	strb	r2, [r3, #0]
    9b94:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9b98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b9c:	781a      	ldrb	r2, [r3, #0]
    9b9e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9ba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ba6:	781b      	ldrb	r3, [r3, #0]
    9ba8:	4413      	add	r3, r2
    9baa:	b2da      	uxtb	r2, r3
    9bac:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9bb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bb4:	701a      	strb	r2, [r3, #0]
    9bb6:	f24c 3319 	movw	r3, #49945	; 0xc319
    9bba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bbe:	781b      	ldrb	r3, [r3, #0]
    9bc0:	3301      	adds	r3, #1
    9bc2:	b2da      	uxtb	r2, r3
    9bc4:	f24c 3319 	movw	r3, #49945	; 0xc319
    9bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bcc:	701a      	strb	r2, [r3, #0]
    9bce:	f24c 3319 	movw	r3, #49945	; 0xc319
    9bd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bd6:	781b      	ldrb	r3, [r3, #0]
    9bd8:	2bff      	cmp	r3, #255	; 0xff
    9bda:	d105      	bne.n	9be8 <send_settings+0x69c>
    9bdc:	f24c 3319 	movw	r3, #49945	; 0xc319
    9be0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9be4:	2200      	movs	r2, #0
    9be6:	701a      	strb	r2, [r3, #0]
    9be8:	f24c 3319 	movw	r3, #49945	; 0xc319
    9bec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bf0:	781b      	ldrb	r3, [r3, #0]
    9bf2:	461a      	mov	r2, r3
    9bf4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bfc:	7819      	ldrb	r1, [r3, #0]
    9bfe:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9c02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c06:	5499      	strb	r1, [r3, r2]
    9c08:	f24c 3319 	movw	r3, #49945	; 0xc319
    9c0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c10:	781b      	ldrb	r3, [r3, #0]
    9c12:	3301      	adds	r3, #1
    9c14:	b2da      	uxtb	r2, r3
    9c16:	f24c 3319 	movw	r3, #49945	; 0xc319
    9c1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c1e:	701a      	strb	r2, [r3, #0]
    9c20:	f24c 3319 	movw	r3, #49945	; 0xc319
    9c24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c28:	781b      	ldrb	r3, [r3, #0]
    9c2a:	2bff      	cmp	r3, #255	; 0xff
    9c2c:	d105      	bne.n	9c3a <send_settings+0x6ee>
    9c2e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9c32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c36:	2200      	movs	r2, #0
    9c38:	701a      	strb	r2, [r3, #0]
    9c3a:	f24c 3319 	movw	r3, #49945	; 0xc319
    9c3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c42:	781b      	ldrb	r3, [r3, #0]
    9c44:	461a      	mov	r2, r3
    9c46:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9c4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c4e:	7819      	ldrb	r1, [r3, #0]
    9c50:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9c54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c58:	5499      	strb	r1, [r3, r2]
    9c5a:	f24c 3319 	movw	r3, #49945	; 0xc319
    9c5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c62:	781b      	ldrb	r3, [r3, #0]
    9c64:	3301      	adds	r3, #1
    9c66:	b2da      	uxtb	r2, r3
    9c68:	f24c 3319 	movw	r3, #49945	; 0xc319
    9c6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c70:	701a      	strb	r2, [r3, #0]
    9c72:	f24c 3319 	movw	r3, #49945	; 0xc319
    9c76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c7a:	781b      	ldrb	r3, [r3, #0]
    9c7c:	2bff      	cmp	r3, #255	; 0xff
    9c7e:	d105      	bne.n	9c8c <send_settings+0x740>
    9c80:	f24c 3319 	movw	r3, #49945	; 0xc319
    9c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c88:	2200      	movs	r2, #0
    9c8a:	701a      	strb	r2, [r3, #0]
    9c8c:	f242 0339 	movw	r3, #8249	; 0x2039
    9c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9c94:	781b      	ldrb	r3, [r3, #0]
    9c96:	b2db      	uxtb	r3, r3
    9c98:	f003 0310 	and.w	r3, r3, #16
    9c9c:	2b00      	cmp	r3, #0
    9c9e:	d15a      	bne.n	9d56 <send_settings+0x80a>
    9ca0:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9ca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ca8:	781b      	ldrb	r3, [r3, #0]
    9caa:	b2db      	uxtb	r3, r3
    9cac:	461a      	mov	r2, r3
    9cae:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9cb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cb6:	5c9a      	ldrb	r2, [r3, r2]
    9cb8:	f24c 431b 	movw	r3, #50203	; 0xc41b
    9cbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cc0:	701a      	strb	r2, [r3, #0]
    9cc2:	f24c 431c 	movw	r3, #50204	; 0xc41c
    9cc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cca:	2200      	movs	r2, #0
    9ccc:	701a      	strb	r2, [r3, #0]
    9cce:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9cd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cd6:	781b      	ldrb	r3, [r3, #0]
    9cd8:	b2db      	uxtb	r3, r3
    9cda:	3301      	adds	r3, #1
    9cdc:	b2da      	uxtb	r2, r3
    9cde:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9ce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ce6:	701a      	strb	r2, [r3, #0]
    9ce8:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9cec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cf0:	781b      	ldrb	r3, [r3, #0]
    9cf2:	b2db      	uxtb	r3, r3
    9cf4:	2bff      	cmp	r3, #255	; 0xff
    9cf6:	d105      	bne.n	9d04 <send_settings+0x7b8>
    9cf8:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d00:	2200      	movs	r2, #0
    9d02:	701a      	strb	r2, [r3, #0]
    9d04:	f242 0338 	movw	r3, #8248	; 0x2038
    9d08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d0c:	f242 0238 	movw	r2, #8248	; 0x2038
    9d10:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9d14:	7812      	ldrb	r2, [r2, #0]
    9d16:	b2d2      	uxtb	r2, r2
    9d18:	f042 0201 	orr.w	r2, r2, #1
    9d1c:	b2d2      	uxtb	r2, r2
    9d1e:	701a      	strb	r2, [r3, #0]
    9d20:	f242 0339 	movw	r3, #8249	; 0x2039
    9d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d28:	f242 0239 	movw	r2, #8249	; 0x2039
    9d2c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9d30:	7812      	ldrb	r2, [r2, #0]
    9d32:	b2d2      	uxtb	r2, r2
    9d34:	f042 0210 	orr.w	r2, r2, #16
    9d38:	b2d2      	uxtb	r2, r2
    9d3a:	701a      	strb	r2, [r3, #0]
    9d3c:	e00b      	b.n	9d56 <send_settings+0x80a>
    9d3e:	f24c 3318 	movw	r3, #49944	; 0xc318
    9d42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d46:	781b      	ldrb	r3, [r3, #0]
    9d48:	3301      	adds	r3, #1
    9d4a:	b2da      	uxtb	r2, r3
    9d4c:	f24c 3318 	movw	r3, #49944	; 0xc318
    9d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d54:	701a      	strb	r2, [r3, #0]
}
    9d56:	46bd      	mov	sp, r7
    9d58:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d5c:	4770      	bx	lr
    9d5e:	bf00      	nop
    9d60:	2004c30f 	.word	0x2004c30f

00009d64 <send_desired>:
void send_desired(void){  //1000ms
    9d64:	b480      	push	{r7}
    9d66:	af00      	add	r7, sp, #0
  if(!boot)
    9d68:	f240 533d 	movw	r3, #1341	; 0x53d
    9d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9d70:	781b      	ldrb	r3, [r3, #0]
    9d72:	2b00      	cmp	r3, #0
    9d74:	f040 8727 	bne.w	abc6 <send_desired+0xe62>
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    9d78:	f24c 3311 	movw	r3, #49937	; 0xc311
    9d7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d80:	781a      	ldrb	r2, [r3, #0]
    9d82:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9d86:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9d8a:	fba3 1302 	umull	r1, r3, r3, r2
    9d8e:	08d9      	lsrs	r1, r3, #3
    9d90:	460b      	mov	r3, r1
    9d92:	009b      	lsls	r3, r3, #2
    9d94:	440b      	add	r3, r1
    9d96:	005b      	lsls	r3, r3, #1
    9d98:	1ad3      	subs	r3, r2, r3
    9d9a:	b2db      	uxtb	r3, r3
    9d9c:	2b03      	cmp	r3, #3
    9d9e:	f040 8712 	bne.w	abc6 <send_desired+0xe62>
    9da2:	f24c 3319 	movw	r3, #49945	; 0xc319
    9da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9daa:	781a      	ldrb	r2, [r3, #0]
    9dac:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9db0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9db4:	781b      	ldrb	r3, [r3, #0]
    9db6:	b2db      	uxtb	r3, r3
    9db8:	429a      	cmp	r2, r3
    9dba:	d313      	bcc.n	9de4 <send_desired+0x80>
    9dbc:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9dc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dc4:	781b      	ldrb	r3, [r3, #0]
    9dc6:	b2db      	uxtb	r3, r3
    9dc8:	461a      	mov	r2, r3
    9dca:	f24c 3319 	movw	r3, #49945	; 0xc319
    9dce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dd2:	781b      	ldrb	r3, [r3, #0]
    9dd4:	1ad3      	subs	r3, r2, r3
    9dd6:	33ff      	adds	r3, #255	; 0xff
    9dd8:	2b18      	cmp	r3, #24
    9dda:	bfd4      	ite	le
    9ddc:	2300      	movle	r3, #0
    9dde:	2301      	movgt	r3, #1
    9de0:	b2db      	uxtb	r3, r3
    9de2:	e011      	b.n	9e08 <send_desired+0xa4>
    9de4:	f24c 331a 	movw	r3, #49946	; 0xc31a
    9de8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dec:	781b      	ldrb	r3, [r3, #0]
    9dee:	b2db      	uxtb	r3, r3
    9df0:	461a      	mov	r2, r3
    9df2:	f24c 3319 	movw	r3, #49945	; 0xc319
    9df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dfa:	781b      	ldrb	r3, [r3, #0]
    9dfc:	1ad3      	subs	r3, r2, r3
    9dfe:	2b18      	cmp	r3, #24
    9e00:	bfd4      	ite	le
    9e02:	2300      	movle	r3, #0
    9e04:	2301      	movgt	r3, #1
    9e06:	b2db      	uxtb	r3, r3
    9e08:	2b00      	cmp	r3, #0
    9e0a:	f000 86d0 	beq.w	abae <send_desired+0xe4a>
    9e0e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e16:	781b      	ldrb	r3, [r3, #0]
    9e18:	461a      	mov	r2, r3
    9e1a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9e1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e22:	2105      	movs	r1, #5
    9e24:	5499      	strb	r1, [r3, r2]
    9e26:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e2e:	781b      	ldrb	r3, [r3, #0]
    9e30:	3301      	adds	r3, #1
    9e32:	b2da      	uxtb	r2, r3
    9e34:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e3c:	701a      	strb	r2, [r3, #0]
    9e3e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e46:	781b      	ldrb	r3, [r3, #0]
    9e48:	2bff      	cmp	r3, #255	; 0xff
    9e4a:	d105      	bne.n	9e58 <send_desired+0xf4>
    9e4c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e54:	2200      	movs	r2, #0
    9e56:	701a      	strb	r2, [r3, #0]
    9e58:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e60:	781b      	ldrb	r3, [r3, #0]
    9e62:	461a      	mov	r2, r3
    9e64:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9e68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e6c:	2112      	movs	r1, #18
    9e6e:	5499      	strb	r1, [r3, r2]
    9e70:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e78:	781b      	ldrb	r3, [r3, #0]
    9e7a:	3301      	adds	r3, #1
    9e7c:	b2da      	uxtb	r2, r3
    9e7e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e86:	701a      	strb	r2, [r3, #0]
    9e88:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e90:	781b      	ldrb	r3, [r3, #0]
    9e92:	2bff      	cmp	r3, #255	; 0xff
    9e94:	d105      	bne.n	9ea2 <send_desired+0x13e>
    9e96:	f24c 3319 	movw	r3, #49945	; 0xc319
    9e9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e9e:	2200      	movs	r2, #0
    9ea0:	701a      	strb	r2, [r3, #0]
    9ea2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9ea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eaa:	2212      	movs	r2, #18
    9eac:	701a      	strb	r2, [r3, #0]
    9eae:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9eb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eb6:	2212      	movs	r2, #18
    9eb8:	701a      	strb	r2, [r3, #0]
    9eba:	f24c 3319 	movw	r3, #49945	; 0xc319
    9ebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ec2:	781b      	ldrb	r3, [r3, #0]
    9ec4:	461a      	mov	r2, r3
    9ec6:	f24c 6344 	movw	r3, #50756	; 0xc644
    9eca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ece:	7819      	ldrb	r1, [r3, #0]
    9ed0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9ed4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ed8:	5499      	strb	r1, [r3, r2]
    9eda:	f24c 6344 	movw	r3, #50756	; 0xc644
    9ede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ee2:	781a      	ldrb	r2, [r3, #0]
    9ee4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9ee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eec:	781b      	ldrb	r3, [r3, #0]
    9eee:	4413      	add	r3, r2
    9ef0:	b2da      	uxtb	r2, r3
    9ef2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9ef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9efa:	701a      	strb	r2, [r3, #0]
    9efc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9f00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f04:	781a      	ldrb	r2, [r3, #0]
    9f06:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9f0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f0e:	781b      	ldrb	r3, [r3, #0]
    9f10:	4413      	add	r3, r2
    9f12:	b2da      	uxtb	r2, r3
    9f14:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f1c:	701a      	strb	r2, [r3, #0]
    9f1e:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f26:	781b      	ldrb	r3, [r3, #0]
    9f28:	3301      	adds	r3, #1
    9f2a:	b2da      	uxtb	r2, r3
    9f2c:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f34:	701a      	strb	r2, [r3, #0]
    9f36:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f3e:	781b      	ldrb	r3, [r3, #0]
    9f40:	2bff      	cmp	r3, #255	; 0xff
    9f42:	d105      	bne.n	9f50 <send_desired+0x1ec>
    9f44:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f4c:	2200      	movs	r2, #0
    9f4e:	701a      	strb	r2, [r3, #0]
    9f50:	f24c 3319 	movw	r3, #49945	; 0xc319
    9f54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f58:	781b      	ldrb	r3, [r3, #0]
    9f5a:	461a      	mov	r2, r3
    9f5c:	f24c 6344 	movw	r3, #50756	; 0xc644
    9f60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f64:	7859      	ldrb	r1, [r3, #1]
    9f66:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9f6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f6e:	5499      	strb	r1, [r3, r2]
    9f70:	4bd1      	ldr	r3, [pc, #836]	; (a2b8 <send_desired+0x554>)
    9f72:	781a      	ldrb	r2, [r3, #0]
    9f74:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9f78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f7c:	781b      	ldrb	r3, [r3, #0]
    9f7e:	4413      	add	r3, r2
    9f80:	b2da      	uxtb	r2, r3
    9f82:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9f86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f8a:	701a      	strb	r2, [r3, #0]
    9f8c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9f90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f94:	781a      	ldrb	r2, [r3, #0]
    9f96:	f24c 431d 	movw	r3, #50205	; 0xc41d
    9f9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f9e:	781b      	ldrb	r3, [r3, #0]
    9fa0:	4413      	add	r3, r2
    9fa2:	b2da      	uxtb	r2, r3
    9fa4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    9fa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fac:	701a      	strb	r2, [r3, #0]
    9fae:	f24c 3319 	movw	r3, #49945	; 0xc319
    9fb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fb6:	781b      	ldrb	r3, [r3, #0]
    9fb8:	3301      	adds	r3, #1
    9fba:	b2da      	uxtb	r2, r3
    9fbc:	f24c 3319 	movw	r3, #49945	; 0xc319
    9fc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fc4:	701a      	strb	r2, [r3, #0]
    9fc6:	f24c 3319 	movw	r3, #49945	; 0xc319
    9fca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fce:	781b      	ldrb	r3, [r3, #0]
    9fd0:	2bff      	cmp	r3, #255	; 0xff
    9fd2:	d105      	bne.n	9fe0 <send_desired+0x27c>
    9fd4:	f24c 3319 	movw	r3, #49945	; 0xc319
    9fd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fdc:	2200      	movs	r2, #0
    9fde:	701a      	strb	r2, [r3, #0]
    9fe0:	f24c 3319 	movw	r3, #49945	; 0xc319
    9fe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fe8:	781b      	ldrb	r3, [r3, #0]
    9fea:	461a      	mov	r2, r3
    9fec:	f24c 6344 	movw	r3, #50756	; 0xc644
    9ff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ff4:	7899      	ldrb	r1, [r3, #2]
    9ff6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    9ffa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ffe:	5499      	strb	r1, [r3, r2]
    a000:	4bae      	ldr	r3, [pc, #696]	; (a2bc <send_desired+0x558>)
    a002:	781a      	ldrb	r2, [r3, #0]
    a004:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a00c:	781b      	ldrb	r3, [r3, #0]
    a00e:	4413      	add	r3, r2
    a010:	b2da      	uxtb	r2, r3
    a012:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a016:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a01a:	701a      	strb	r2, [r3, #0]
    a01c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a020:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a024:	781a      	ldrb	r2, [r3, #0]
    a026:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a02a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a02e:	781b      	ldrb	r3, [r3, #0]
    a030:	4413      	add	r3, r2
    a032:	b2da      	uxtb	r2, r3
    a034:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a038:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a03c:	701a      	strb	r2, [r3, #0]
    a03e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a042:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a046:	781b      	ldrb	r3, [r3, #0]
    a048:	3301      	adds	r3, #1
    a04a:	b2da      	uxtb	r2, r3
    a04c:	f24c 3319 	movw	r3, #49945	; 0xc319
    a050:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a054:	701a      	strb	r2, [r3, #0]
    a056:	f24c 3319 	movw	r3, #49945	; 0xc319
    a05a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a05e:	781b      	ldrb	r3, [r3, #0]
    a060:	2bff      	cmp	r3, #255	; 0xff
    a062:	d105      	bne.n	a070 <send_desired+0x30c>
    a064:	f24c 3319 	movw	r3, #49945	; 0xc319
    a068:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a06c:	2200      	movs	r2, #0
    a06e:	701a      	strb	r2, [r3, #0]
    a070:	f24c 3319 	movw	r3, #49945	; 0xc319
    a074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a078:	781b      	ldrb	r3, [r3, #0]
    a07a:	461a      	mov	r2, r3
    a07c:	f24c 6344 	movw	r3, #50756	; 0xc644
    a080:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a084:	78d9      	ldrb	r1, [r3, #3]
    a086:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a08a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a08e:	5499      	strb	r1, [r3, r2]
    a090:	4b8b      	ldr	r3, [pc, #556]	; (a2c0 <send_desired+0x55c>)
    a092:	781a      	ldrb	r2, [r3, #0]
    a094:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a098:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a09c:	781b      	ldrb	r3, [r3, #0]
    a09e:	4413      	add	r3, r2
    a0a0:	b2da      	uxtb	r2, r3
    a0a2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a0a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0aa:	701a      	strb	r2, [r3, #0]
    a0ac:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a0b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0b4:	781a      	ldrb	r2, [r3, #0]
    a0b6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a0ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0be:	781b      	ldrb	r3, [r3, #0]
    a0c0:	4413      	add	r3, r2
    a0c2:	b2da      	uxtb	r2, r3
    a0c4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a0c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0cc:	701a      	strb	r2, [r3, #0]
    a0ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    a0d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0d6:	781b      	ldrb	r3, [r3, #0]
    a0d8:	3301      	adds	r3, #1
    a0da:	b2da      	uxtb	r2, r3
    a0dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    a0e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0e4:	701a      	strb	r2, [r3, #0]
    a0e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    a0ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0ee:	781b      	ldrb	r3, [r3, #0]
    a0f0:	2bff      	cmp	r3, #255	; 0xff
    a0f2:	d105      	bne.n	a100 <send_desired+0x39c>
    a0f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    a0f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0fc:	2200      	movs	r2, #0
    a0fe:	701a      	strb	r2, [r3, #0]
    a100:	f24c 3319 	movw	r3, #49945	; 0xc319
    a104:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a108:	781b      	ldrb	r3, [r3, #0]
    a10a:	461a      	mov	r2, r3
    a10c:	f24c 6348 	movw	r3, #50760	; 0xc648
    a110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a114:	7819      	ldrb	r1, [r3, #0]
    a116:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a11a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a11e:	5499      	strb	r1, [r3, r2]
    a120:	f24c 6348 	movw	r3, #50760	; 0xc648
    a124:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a128:	781a      	ldrb	r2, [r3, #0]
    a12a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a12e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a132:	781b      	ldrb	r3, [r3, #0]
    a134:	4413      	add	r3, r2
    a136:	b2da      	uxtb	r2, r3
    a138:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a13c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a140:	701a      	strb	r2, [r3, #0]
    a142:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a146:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a14a:	781a      	ldrb	r2, [r3, #0]
    a14c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a150:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a154:	781b      	ldrb	r3, [r3, #0]
    a156:	4413      	add	r3, r2
    a158:	b2da      	uxtb	r2, r3
    a15a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a15e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a162:	701a      	strb	r2, [r3, #0]
    a164:	f24c 3319 	movw	r3, #49945	; 0xc319
    a168:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a16c:	781b      	ldrb	r3, [r3, #0]
    a16e:	3301      	adds	r3, #1
    a170:	b2da      	uxtb	r2, r3
    a172:	f24c 3319 	movw	r3, #49945	; 0xc319
    a176:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a17a:	701a      	strb	r2, [r3, #0]
    a17c:	f24c 3319 	movw	r3, #49945	; 0xc319
    a180:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a184:	781b      	ldrb	r3, [r3, #0]
    a186:	2bff      	cmp	r3, #255	; 0xff
    a188:	d105      	bne.n	a196 <send_desired+0x432>
    a18a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a18e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a192:	2200      	movs	r2, #0
    a194:	701a      	strb	r2, [r3, #0]
    a196:	f24c 3319 	movw	r3, #49945	; 0xc319
    a19a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a19e:	781b      	ldrb	r3, [r3, #0]
    a1a0:	461a      	mov	r2, r3
    a1a2:	f24c 6348 	movw	r3, #50760	; 0xc648
    a1a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1aa:	7859      	ldrb	r1, [r3, #1]
    a1ac:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a1b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1b4:	5499      	strb	r1, [r3, r2]
    a1b6:	4b43      	ldr	r3, [pc, #268]	; (a2c4 <send_desired+0x560>)
    a1b8:	781a      	ldrb	r2, [r3, #0]
    a1ba:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a1be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1c2:	781b      	ldrb	r3, [r3, #0]
    a1c4:	4413      	add	r3, r2
    a1c6:	b2da      	uxtb	r2, r3
    a1c8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a1cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1d0:	701a      	strb	r2, [r3, #0]
    a1d2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a1d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1da:	781a      	ldrb	r2, [r3, #0]
    a1dc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a1e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1e4:	781b      	ldrb	r3, [r3, #0]
    a1e6:	4413      	add	r3, r2
    a1e8:	b2da      	uxtb	r2, r3
    a1ea:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a1ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1f2:	701a      	strb	r2, [r3, #0]
    a1f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    a1f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1fc:	781b      	ldrb	r3, [r3, #0]
    a1fe:	3301      	adds	r3, #1
    a200:	b2da      	uxtb	r2, r3
    a202:	f24c 3319 	movw	r3, #49945	; 0xc319
    a206:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a20a:	701a      	strb	r2, [r3, #0]
    a20c:	f24c 3319 	movw	r3, #49945	; 0xc319
    a210:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a214:	781b      	ldrb	r3, [r3, #0]
    a216:	2bff      	cmp	r3, #255	; 0xff
    a218:	d105      	bne.n	a226 <send_desired+0x4c2>
    a21a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a21e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a222:	2200      	movs	r2, #0
    a224:	701a      	strb	r2, [r3, #0]
    a226:	f24c 3319 	movw	r3, #49945	; 0xc319
    a22a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a22e:	781b      	ldrb	r3, [r3, #0]
    a230:	461a      	mov	r2, r3
    a232:	f24c 6348 	movw	r3, #50760	; 0xc648
    a236:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a23a:	7899      	ldrb	r1, [r3, #2]
    a23c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a240:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a244:	5499      	strb	r1, [r3, r2]
    a246:	4b20      	ldr	r3, [pc, #128]	; (a2c8 <send_desired+0x564>)
    a248:	781a      	ldrb	r2, [r3, #0]
    a24a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a24e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a252:	781b      	ldrb	r3, [r3, #0]
    a254:	4413      	add	r3, r2
    a256:	b2da      	uxtb	r2, r3
    a258:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a25c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a260:	701a      	strb	r2, [r3, #0]
    a262:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a26a:	781a      	ldrb	r2, [r3, #0]
    a26c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a270:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a274:	781b      	ldrb	r3, [r3, #0]
    a276:	4413      	add	r3, r2
    a278:	b2da      	uxtb	r2, r3
    a27a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a27e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a282:	701a      	strb	r2, [r3, #0]
    a284:	f24c 3319 	movw	r3, #49945	; 0xc319
    a288:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a28c:	781b      	ldrb	r3, [r3, #0]
    a28e:	3301      	adds	r3, #1
    a290:	b2da      	uxtb	r2, r3
    a292:	f24c 3319 	movw	r3, #49945	; 0xc319
    a296:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a29a:	701a      	strb	r2, [r3, #0]
    a29c:	f24c 3319 	movw	r3, #49945	; 0xc319
    a2a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2a4:	781b      	ldrb	r3, [r3, #0]
    a2a6:	2bff      	cmp	r3, #255	; 0xff
    a2a8:	d110      	bne.n	a2cc <send_desired+0x568>
    a2aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    a2ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2b2:	2200      	movs	r2, #0
    a2b4:	701a      	strb	r2, [r3, #0]
    a2b6:	e009      	b.n	a2cc <send_desired+0x568>
    a2b8:	2004c645 	.word	0x2004c645
    a2bc:	2004c646 	.word	0x2004c646
    a2c0:	2004c647 	.word	0x2004c647
    a2c4:	2004c649 	.word	0x2004c649
    a2c8:	2004c64a 	.word	0x2004c64a
    a2cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    a2d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2d4:	781b      	ldrb	r3, [r3, #0]
    a2d6:	461a      	mov	r2, r3
    a2d8:	f24c 6348 	movw	r3, #50760	; 0xc648
    a2dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2e0:	78d9      	ldrb	r1, [r3, #3]
    a2e2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a2e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2ea:	5499      	strb	r1, [r3, r2]
    a2ec:	4bd3      	ldr	r3, [pc, #844]	; (a63c <send_desired+0x8d8>)
    a2ee:	781a      	ldrb	r2, [r3, #0]
    a2f0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a2f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2f8:	781b      	ldrb	r3, [r3, #0]
    a2fa:	4413      	add	r3, r2
    a2fc:	b2da      	uxtb	r2, r3
    a2fe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a302:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a306:	701a      	strb	r2, [r3, #0]
    a308:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a30c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a310:	781a      	ldrb	r2, [r3, #0]
    a312:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a316:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a31a:	781b      	ldrb	r3, [r3, #0]
    a31c:	4413      	add	r3, r2
    a31e:	b2da      	uxtb	r2, r3
    a320:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a328:	701a      	strb	r2, [r3, #0]
    a32a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a32e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a332:	781b      	ldrb	r3, [r3, #0]
    a334:	3301      	adds	r3, #1
    a336:	b2da      	uxtb	r2, r3
    a338:	f24c 3319 	movw	r3, #49945	; 0xc319
    a33c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a340:	701a      	strb	r2, [r3, #0]
    a342:	f24c 3319 	movw	r3, #49945	; 0xc319
    a346:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a34a:	781b      	ldrb	r3, [r3, #0]
    a34c:	2bff      	cmp	r3, #255	; 0xff
    a34e:	d105      	bne.n	a35c <send_desired+0x5f8>
    a350:	f24c 3319 	movw	r3, #49945	; 0xc319
    a354:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a358:	2200      	movs	r2, #0
    a35a:	701a      	strb	r2, [r3, #0]
    a35c:	f24c 3319 	movw	r3, #49945	; 0xc319
    a360:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a364:	781b      	ldrb	r3, [r3, #0]
    a366:	461a      	mov	r2, r3
    a368:	f24c 6390 	movw	r3, #50832	; 0xc690
    a36c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a370:	7819      	ldrb	r1, [r3, #0]
    a372:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a376:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a37a:	5499      	strb	r1, [r3, r2]
    a37c:	f24c 6390 	movw	r3, #50832	; 0xc690
    a380:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a384:	781a      	ldrb	r2, [r3, #0]
    a386:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a38a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a38e:	781b      	ldrb	r3, [r3, #0]
    a390:	4413      	add	r3, r2
    a392:	b2da      	uxtb	r2, r3
    a394:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a398:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a39c:	701a      	strb	r2, [r3, #0]
    a39e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a3a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3a6:	781a      	ldrb	r2, [r3, #0]
    a3a8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a3ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3b0:	781b      	ldrb	r3, [r3, #0]
    a3b2:	4413      	add	r3, r2
    a3b4:	b2da      	uxtb	r2, r3
    a3b6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a3ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3be:	701a      	strb	r2, [r3, #0]
    a3c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    a3c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3c8:	781b      	ldrb	r3, [r3, #0]
    a3ca:	3301      	adds	r3, #1
    a3cc:	b2da      	uxtb	r2, r3
    a3ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    a3d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3d6:	701a      	strb	r2, [r3, #0]
    a3d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    a3dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3e0:	781b      	ldrb	r3, [r3, #0]
    a3e2:	2bff      	cmp	r3, #255	; 0xff
    a3e4:	d105      	bne.n	a3f2 <send_desired+0x68e>
    a3e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    a3ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3ee:	2200      	movs	r2, #0
    a3f0:	701a      	strb	r2, [r3, #0]
    a3f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    a3f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3fa:	781b      	ldrb	r3, [r3, #0]
    a3fc:	461a      	mov	r2, r3
    a3fe:	f24c 6390 	movw	r3, #50832	; 0xc690
    a402:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a406:	7859      	ldrb	r1, [r3, #1]
    a408:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a40c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a410:	5499      	strb	r1, [r3, r2]
    a412:	4b8b      	ldr	r3, [pc, #556]	; (a640 <send_desired+0x8dc>)
    a414:	781a      	ldrb	r2, [r3, #0]
    a416:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a41a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a41e:	781b      	ldrb	r3, [r3, #0]
    a420:	4413      	add	r3, r2
    a422:	b2da      	uxtb	r2, r3
    a424:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a42c:	701a      	strb	r2, [r3, #0]
    a42e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a436:	781a      	ldrb	r2, [r3, #0]
    a438:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a43c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a440:	781b      	ldrb	r3, [r3, #0]
    a442:	4413      	add	r3, r2
    a444:	b2da      	uxtb	r2, r3
    a446:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a44a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a44e:	701a      	strb	r2, [r3, #0]
    a450:	f24c 3319 	movw	r3, #49945	; 0xc319
    a454:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a458:	781b      	ldrb	r3, [r3, #0]
    a45a:	3301      	adds	r3, #1
    a45c:	b2da      	uxtb	r2, r3
    a45e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a462:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a466:	701a      	strb	r2, [r3, #0]
    a468:	f24c 3319 	movw	r3, #49945	; 0xc319
    a46c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a470:	781b      	ldrb	r3, [r3, #0]
    a472:	2bff      	cmp	r3, #255	; 0xff
    a474:	d105      	bne.n	a482 <send_desired+0x71e>
    a476:	f24c 3319 	movw	r3, #49945	; 0xc319
    a47a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a47e:	2200      	movs	r2, #0
    a480:	701a      	strb	r2, [r3, #0]
    a482:	f24c 3319 	movw	r3, #49945	; 0xc319
    a486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a48a:	781b      	ldrb	r3, [r3, #0]
    a48c:	461a      	mov	r2, r3
    a48e:	f24c 6390 	movw	r3, #50832	; 0xc690
    a492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a496:	7899      	ldrb	r1, [r3, #2]
    a498:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a49c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4a0:	5499      	strb	r1, [r3, r2]
    a4a2:	4b68      	ldr	r3, [pc, #416]	; (a644 <send_desired+0x8e0>)
    a4a4:	781a      	ldrb	r2, [r3, #0]
    a4a6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a4aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4ae:	781b      	ldrb	r3, [r3, #0]
    a4b0:	4413      	add	r3, r2
    a4b2:	b2da      	uxtb	r2, r3
    a4b4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a4b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4bc:	701a      	strb	r2, [r3, #0]
    a4be:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a4c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4c6:	781a      	ldrb	r2, [r3, #0]
    a4c8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a4cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4d0:	781b      	ldrb	r3, [r3, #0]
    a4d2:	4413      	add	r3, r2
    a4d4:	b2da      	uxtb	r2, r3
    a4d6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a4da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4de:	701a      	strb	r2, [r3, #0]
    a4e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    a4e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4e8:	781b      	ldrb	r3, [r3, #0]
    a4ea:	3301      	adds	r3, #1
    a4ec:	b2da      	uxtb	r2, r3
    a4ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    a4f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4f6:	701a      	strb	r2, [r3, #0]
    a4f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    a4fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a500:	781b      	ldrb	r3, [r3, #0]
    a502:	2bff      	cmp	r3, #255	; 0xff
    a504:	d105      	bne.n	a512 <send_desired+0x7ae>
    a506:	f24c 3319 	movw	r3, #49945	; 0xc319
    a50a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a50e:	2200      	movs	r2, #0
    a510:	701a      	strb	r2, [r3, #0]
    a512:	f24c 3319 	movw	r3, #49945	; 0xc319
    a516:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a51a:	781b      	ldrb	r3, [r3, #0]
    a51c:	461a      	mov	r2, r3
    a51e:	f24c 6390 	movw	r3, #50832	; 0xc690
    a522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a526:	78d9      	ldrb	r1, [r3, #3]
    a528:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a52c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a530:	5499      	strb	r1, [r3, r2]
    a532:	4b45      	ldr	r3, [pc, #276]	; (a648 <send_desired+0x8e4>)
    a534:	781a      	ldrb	r2, [r3, #0]
    a536:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a53a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a53e:	781b      	ldrb	r3, [r3, #0]
    a540:	4413      	add	r3, r2
    a542:	b2da      	uxtb	r2, r3
    a544:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a54c:	701a      	strb	r2, [r3, #0]
    a54e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a556:	781a      	ldrb	r2, [r3, #0]
    a558:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a55c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a560:	781b      	ldrb	r3, [r3, #0]
    a562:	4413      	add	r3, r2
    a564:	b2da      	uxtb	r2, r3
    a566:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a56a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a56e:	701a      	strb	r2, [r3, #0]
    a570:	f24c 3319 	movw	r3, #49945	; 0xc319
    a574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a578:	781b      	ldrb	r3, [r3, #0]
    a57a:	3301      	adds	r3, #1
    a57c:	b2da      	uxtb	r2, r3
    a57e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a582:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a586:	701a      	strb	r2, [r3, #0]
    a588:	f24c 3319 	movw	r3, #49945	; 0xc319
    a58c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a590:	781b      	ldrb	r3, [r3, #0]
    a592:	2bff      	cmp	r3, #255	; 0xff
    a594:	d105      	bne.n	a5a2 <send_desired+0x83e>
    a596:	f24c 3319 	movw	r3, #49945	; 0xc319
    a59a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a59e:	2200      	movs	r2, #0
    a5a0:	701a      	strb	r2, [r3, #0]
    a5a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    a5a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5aa:	781b      	ldrb	r3, [r3, #0]
    a5ac:	461a      	mov	r2, r3
    a5ae:	f24c 6394 	movw	r3, #50836	; 0xc694
    a5b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5b6:	7819      	ldrb	r1, [r3, #0]
    a5b8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a5bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5c0:	5499      	strb	r1, [r3, r2]
    a5c2:	f24c 6394 	movw	r3, #50836	; 0xc694
    a5c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5ca:	781a      	ldrb	r2, [r3, #0]
    a5cc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a5d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5d4:	781b      	ldrb	r3, [r3, #0]
    a5d6:	4413      	add	r3, r2
    a5d8:	b2da      	uxtb	r2, r3
    a5da:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a5de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5e2:	701a      	strb	r2, [r3, #0]
    a5e4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a5e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5ec:	781a      	ldrb	r2, [r3, #0]
    a5ee:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a5f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5f6:	781b      	ldrb	r3, [r3, #0]
    a5f8:	4413      	add	r3, r2
    a5fa:	b2da      	uxtb	r2, r3
    a5fc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a600:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a604:	701a      	strb	r2, [r3, #0]
    a606:	f24c 3319 	movw	r3, #49945	; 0xc319
    a60a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a60e:	781b      	ldrb	r3, [r3, #0]
    a610:	3301      	adds	r3, #1
    a612:	b2da      	uxtb	r2, r3
    a614:	f24c 3319 	movw	r3, #49945	; 0xc319
    a618:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a61c:	701a      	strb	r2, [r3, #0]
    a61e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a626:	781b      	ldrb	r3, [r3, #0]
    a628:	2bff      	cmp	r3, #255	; 0xff
    a62a:	d10f      	bne.n	a64c <send_desired+0x8e8>
    a62c:	f24c 3319 	movw	r3, #49945	; 0xc319
    a630:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a634:	2200      	movs	r2, #0
    a636:	701a      	strb	r2, [r3, #0]
    a638:	e008      	b.n	a64c <send_desired+0x8e8>
    a63a:	bf00      	nop
    a63c:	2004c64b 	.word	0x2004c64b
    a640:	2004c691 	.word	0x2004c691
    a644:	2004c692 	.word	0x2004c692
    a648:	2004c693 	.word	0x2004c693
    a64c:	f24c 3319 	movw	r3, #49945	; 0xc319
    a650:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a654:	781b      	ldrb	r3, [r3, #0]
    a656:	461a      	mov	r2, r3
    a658:	f24c 6394 	movw	r3, #50836	; 0xc694
    a65c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a660:	7859      	ldrb	r1, [r3, #1]
    a662:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a666:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a66a:	5499      	strb	r1, [r3, r2]
    a66c:	4bd1      	ldr	r3, [pc, #836]	; (a9b4 <send_desired+0xc50>)
    a66e:	781a      	ldrb	r2, [r3, #0]
    a670:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a678:	781b      	ldrb	r3, [r3, #0]
    a67a:	4413      	add	r3, r2
    a67c:	b2da      	uxtb	r2, r3
    a67e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a686:	701a      	strb	r2, [r3, #0]
    a688:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a68c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a690:	781a      	ldrb	r2, [r3, #0]
    a692:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a69a:	781b      	ldrb	r3, [r3, #0]
    a69c:	4413      	add	r3, r2
    a69e:	b2da      	uxtb	r2, r3
    a6a0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a6a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6a8:	701a      	strb	r2, [r3, #0]
    a6aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    a6ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6b2:	781b      	ldrb	r3, [r3, #0]
    a6b4:	3301      	adds	r3, #1
    a6b6:	b2da      	uxtb	r2, r3
    a6b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    a6bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6c0:	701a      	strb	r2, [r3, #0]
    a6c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    a6c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6ca:	781b      	ldrb	r3, [r3, #0]
    a6cc:	2bff      	cmp	r3, #255	; 0xff
    a6ce:	d105      	bne.n	a6dc <send_desired+0x978>
    a6d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    a6d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6d8:	2200      	movs	r2, #0
    a6da:	701a      	strb	r2, [r3, #0]
    a6dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    a6e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6e4:	781b      	ldrb	r3, [r3, #0]
    a6e6:	461a      	mov	r2, r3
    a6e8:	f24c 6394 	movw	r3, #50836	; 0xc694
    a6ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6f0:	7899      	ldrb	r1, [r3, #2]
    a6f2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a6f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6fa:	5499      	strb	r1, [r3, r2]
    a6fc:	4bae      	ldr	r3, [pc, #696]	; (a9b8 <send_desired+0xc54>)
    a6fe:	781a      	ldrb	r2, [r3, #0]
    a700:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a708:	781b      	ldrb	r3, [r3, #0]
    a70a:	4413      	add	r3, r2
    a70c:	b2da      	uxtb	r2, r3
    a70e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a716:	701a      	strb	r2, [r3, #0]
    a718:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a71c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a720:	781a      	ldrb	r2, [r3, #0]
    a722:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a726:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a72a:	781b      	ldrb	r3, [r3, #0]
    a72c:	4413      	add	r3, r2
    a72e:	b2da      	uxtb	r2, r3
    a730:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a738:	701a      	strb	r2, [r3, #0]
    a73a:	f24c 3319 	movw	r3, #49945	; 0xc319
    a73e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a742:	781b      	ldrb	r3, [r3, #0]
    a744:	3301      	adds	r3, #1
    a746:	b2da      	uxtb	r2, r3
    a748:	f24c 3319 	movw	r3, #49945	; 0xc319
    a74c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a750:	701a      	strb	r2, [r3, #0]
    a752:	f24c 3319 	movw	r3, #49945	; 0xc319
    a756:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a75a:	781b      	ldrb	r3, [r3, #0]
    a75c:	2bff      	cmp	r3, #255	; 0xff
    a75e:	d105      	bne.n	a76c <send_desired+0xa08>
    a760:	f24c 3319 	movw	r3, #49945	; 0xc319
    a764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a768:	2200      	movs	r2, #0
    a76a:	701a      	strb	r2, [r3, #0]
    a76c:	f24c 3319 	movw	r3, #49945	; 0xc319
    a770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a774:	781b      	ldrb	r3, [r3, #0]
    a776:	461a      	mov	r2, r3
    a778:	f24c 6394 	movw	r3, #50836	; 0xc694
    a77c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a780:	78d9      	ldrb	r1, [r3, #3]
    a782:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a786:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a78a:	5499      	strb	r1, [r3, r2]
    a78c:	4b8b      	ldr	r3, [pc, #556]	; (a9bc <send_desired+0xc58>)
    a78e:	781a      	ldrb	r2, [r3, #0]
    a790:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a798:	781b      	ldrb	r3, [r3, #0]
    a79a:	4413      	add	r3, r2
    a79c:	b2da      	uxtb	r2, r3
    a79e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a7a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7a6:	701a      	strb	r2, [r3, #0]
    a7a8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a7ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7b0:	781a      	ldrb	r2, [r3, #0]
    a7b2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a7b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7ba:	781b      	ldrb	r3, [r3, #0]
    a7bc:	4413      	add	r3, r2
    a7be:	b2da      	uxtb	r2, r3
    a7c0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a7c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7c8:	701a      	strb	r2, [r3, #0]
    a7ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    a7ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7d2:	781b      	ldrb	r3, [r3, #0]
    a7d4:	3301      	adds	r3, #1
    a7d6:	b2da      	uxtb	r2, r3
    a7d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    a7dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7e0:	701a      	strb	r2, [r3, #0]
    a7e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    a7e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7ea:	781b      	ldrb	r3, [r3, #0]
    a7ec:	2bff      	cmp	r3, #255	; 0xff
    a7ee:	d105      	bne.n	a7fc <send_desired+0xa98>
    a7f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    a7f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7f8:	2200      	movs	r2, #0
    a7fa:	701a      	strb	r2, [r3, #0]
    a7fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    a800:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a804:	781b      	ldrb	r3, [r3, #0]
    a806:	461a      	mov	r2, r3
    a808:	f240 5374 	movw	r3, #1396	; 0x574
    a80c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a810:	7819      	ldrb	r1, [r3, #0]
    a812:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a816:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a81a:	5499      	strb	r1, [r3, r2]
    a81c:	f240 5374 	movw	r3, #1396	; 0x574
    a820:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a824:	781a      	ldrb	r2, [r3, #0]
    a826:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a82a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a82e:	781b      	ldrb	r3, [r3, #0]
    a830:	4413      	add	r3, r2
    a832:	b2da      	uxtb	r2, r3
    a834:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a83c:	701a      	strb	r2, [r3, #0]
    a83e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a846:	781a      	ldrb	r2, [r3, #0]
    a848:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a84c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a850:	781b      	ldrb	r3, [r3, #0]
    a852:	4413      	add	r3, r2
    a854:	b2da      	uxtb	r2, r3
    a856:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a85a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a85e:	701a      	strb	r2, [r3, #0]
    a860:	f24c 3319 	movw	r3, #49945	; 0xc319
    a864:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a868:	781b      	ldrb	r3, [r3, #0]
    a86a:	3301      	adds	r3, #1
    a86c:	b2da      	uxtb	r2, r3
    a86e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a876:	701a      	strb	r2, [r3, #0]
    a878:	f24c 3319 	movw	r3, #49945	; 0xc319
    a87c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a880:	781b      	ldrb	r3, [r3, #0]
    a882:	2bff      	cmp	r3, #255	; 0xff
    a884:	d105      	bne.n	a892 <send_desired+0xb2e>
    a886:	f24c 3319 	movw	r3, #49945	; 0xc319
    a88a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a88e:	2200      	movs	r2, #0
    a890:	701a      	strb	r2, [r3, #0]
    a892:	f24c 3319 	movw	r3, #49945	; 0xc319
    a896:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a89a:	781b      	ldrb	r3, [r3, #0]
    a89c:	461a      	mov	r2, r3
    a89e:	f240 5374 	movw	r3, #1396	; 0x574
    a8a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a8a6:	7859      	ldrb	r1, [r3, #1]
    a8a8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a8ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8b0:	5499      	strb	r1, [r3, r2]
    a8b2:	4b43      	ldr	r3, [pc, #268]	; (a9c0 <send_desired+0xc5c>)
    a8b4:	781a      	ldrb	r2, [r3, #0]
    a8b6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a8ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8be:	781b      	ldrb	r3, [r3, #0]
    a8c0:	4413      	add	r3, r2
    a8c2:	b2da      	uxtb	r2, r3
    a8c4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a8c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8cc:	701a      	strb	r2, [r3, #0]
    a8ce:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a8d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8d6:	781a      	ldrb	r2, [r3, #0]
    a8d8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a8dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8e0:	781b      	ldrb	r3, [r3, #0]
    a8e2:	4413      	add	r3, r2
    a8e4:	b2da      	uxtb	r2, r3
    a8e6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a8ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8ee:	701a      	strb	r2, [r3, #0]
    a8f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    a8f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8f8:	781b      	ldrb	r3, [r3, #0]
    a8fa:	3301      	adds	r3, #1
    a8fc:	b2da      	uxtb	r2, r3
    a8fe:	f24c 3319 	movw	r3, #49945	; 0xc319
    a902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a906:	701a      	strb	r2, [r3, #0]
    a908:	f24c 3319 	movw	r3, #49945	; 0xc319
    a90c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a910:	781b      	ldrb	r3, [r3, #0]
    a912:	2bff      	cmp	r3, #255	; 0xff
    a914:	d105      	bne.n	a922 <send_desired+0xbbe>
    a916:	f24c 3319 	movw	r3, #49945	; 0xc319
    a91a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a91e:	2200      	movs	r2, #0
    a920:	701a      	strb	r2, [r3, #0]
    a922:	f24c 3319 	movw	r3, #49945	; 0xc319
    a926:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a92a:	781b      	ldrb	r3, [r3, #0]
    a92c:	461a      	mov	r2, r3
    a92e:	f240 5374 	movw	r3, #1396	; 0x574
    a932:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a936:	7899      	ldrb	r1, [r3, #2]
    a938:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a93c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a940:	5499      	strb	r1, [r3, r2]
    a942:	4b20      	ldr	r3, [pc, #128]	; (a9c4 <send_desired+0xc60>)
    a944:	781a      	ldrb	r2, [r3, #0]
    a946:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a94a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a94e:	781b      	ldrb	r3, [r3, #0]
    a950:	4413      	add	r3, r2
    a952:	b2da      	uxtb	r2, r3
    a954:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a958:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a95c:	701a      	strb	r2, [r3, #0]
    a95e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a966:	781a      	ldrb	r2, [r3, #0]
    a968:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a96c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a970:	781b      	ldrb	r3, [r3, #0]
    a972:	4413      	add	r3, r2
    a974:	b2da      	uxtb	r2, r3
    a976:	f24c 431e 	movw	r3, #50206	; 0xc41e
    a97a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a97e:	701a      	strb	r2, [r3, #0]
    a980:	f24c 3319 	movw	r3, #49945	; 0xc319
    a984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a988:	781b      	ldrb	r3, [r3, #0]
    a98a:	3301      	adds	r3, #1
    a98c:	b2da      	uxtb	r2, r3
    a98e:	f24c 3319 	movw	r3, #49945	; 0xc319
    a992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a996:	701a      	strb	r2, [r3, #0]
    a998:	f24c 3319 	movw	r3, #49945	; 0xc319
    a99c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9a0:	781b      	ldrb	r3, [r3, #0]
    a9a2:	2bff      	cmp	r3, #255	; 0xff
    a9a4:	d110      	bne.n	a9c8 <send_desired+0xc64>
    a9a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    a9aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9ae:	2200      	movs	r2, #0
    a9b0:	701a      	strb	r2, [r3, #0]
    a9b2:	e009      	b.n	a9c8 <send_desired+0xc64>
    a9b4:	2004c695 	.word	0x2004c695
    a9b8:	2004c696 	.word	0x2004c696
    a9bc:	2004c697 	.word	0x2004c697
    a9c0:	20000575 	.word	0x20000575
    a9c4:	20000576 	.word	0x20000576
    a9c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    a9cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9d0:	781b      	ldrb	r3, [r3, #0]
    a9d2:	461a      	mov	r2, r3
    a9d4:	f240 5374 	movw	r3, #1396	; 0x574
    a9d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9dc:	78d9      	ldrb	r1, [r3, #3]
    a9de:	f24c 331c 	movw	r3, #49948	; 0xc31c
    a9e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9e6:	5499      	strb	r1, [r3, r2]
    a9e8:	4b79      	ldr	r3, [pc, #484]	; (abd0 <send_desired+0xe6c>)
    a9ea:	781a      	ldrb	r2, [r3, #0]
    a9ec:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a9f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9f4:	781b      	ldrb	r3, [r3, #0]
    a9f6:	4413      	add	r3, r2
    a9f8:	b2da      	uxtb	r2, r3
    a9fa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    a9fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa02:	701a      	strb	r2, [r3, #0]
    aa04:	f24c 431e 	movw	r3, #50206	; 0xc41e
    aa08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa0c:	781a      	ldrb	r2, [r3, #0]
    aa0e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    aa12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa16:	781b      	ldrb	r3, [r3, #0]
    aa18:	4413      	add	r3, r2
    aa1a:	b2da      	uxtb	r2, r3
    aa1c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    aa20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa24:	701a      	strb	r2, [r3, #0]
    aa26:	f24c 3319 	movw	r3, #49945	; 0xc319
    aa2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa2e:	781b      	ldrb	r3, [r3, #0]
    aa30:	3301      	adds	r3, #1
    aa32:	b2da      	uxtb	r2, r3
    aa34:	f24c 3319 	movw	r3, #49945	; 0xc319
    aa38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa3c:	701a      	strb	r2, [r3, #0]
    aa3e:	f24c 3319 	movw	r3, #49945	; 0xc319
    aa42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa46:	781b      	ldrb	r3, [r3, #0]
    aa48:	2bff      	cmp	r3, #255	; 0xff
    aa4a:	d105      	bne.n	aa58 <send_desired+0xcf4>
    aa4c:	f24c 3319 	movw	r3, #49945	; 0xc319
    aa50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa54:	2200      	movs	r2, #0
    aa56:	701a      	strb	r2, [r3, #0]
    aa58:	f24c 3319 	movw	r3, #49945	; 0xc319
    aa5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa60:	781b      	ldrb	r3, [r3, #0]
    aa62:	461a      	mov	r2, r3
    aa64:	f24c 431d 	movw	r3, #50205	; 0xc41d
    aa68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa6c:	7819      	ldrb	r1, [r3, #0]
    aa6e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    aa72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa76:	5499      	strb	r1, [r3, r2]
    aa78:	f24c 3319 	movw	r3, #49945	; 0xc319
    aa7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa80:	781b      	ldrb	r3, [r3, #0]
    aa82:	3301      	adds	r3, #1
    aa84:	b2da      	uxtb	r2, r3
    aa86:	f24c 3319 	movw	r3, #49945	; 0xc319
    aa8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa8e:	701a      	strb	r2, [r3, #0]
    aa90:	f24c 3319 	movw	r3, #49945	; 0xc319
    aa94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa98:	781b      	ldrb	r3, [r3, #0]
    aa9a:	2bff      	cmp	r3, #255	; 0xff
    aa9c:	d105      	bne.n	aaaa <send_desired+0xd46>
    aa9e:	f24c 3319 	movw	r3, #49945	; 0xc319
    aaa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaa6:	2200      	movs	r2, #0
    aaa8:	701a      	strb	r2, [r3, #0]
    aaaa:	f24c 3319 	movw	r3, #49945	; 0xc319
    aaae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aab2:	781b      	ldrb	r3, [r3, #0]
    aab4:	461a      	mov	r2, r3
    aab6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    aaba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aabe:	7819      	ldrb	r1, [r3, #0]
    aac0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    aac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aac8:	5499      	strb	r1, [r3, r2]
    aaca:	f24c 3319 	movw	r3, #49945	; 0xc319
    aace:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aad2:	781b      	ldrb	r3, [r3, #0]
    aad4:	3301      	adds	r3, #1
    aad6:	b2da      	uxtb	r2, r3
    aad8:	f24c 3319 	movw	r3, #49945	; 0xc319
    aadc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aae0:	701a      	strb	r2, [r3, #0]
    aae2:	f24c 3319 	movw	r3, #49945	; 0xc319
    aae6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaea:	781b      	ldrb	r3, [r3, #0]
    aaec:	2bff      	cmp	r3, #255	; 0xff
    aaee:	d105      	bne.n	aafc <send_desired+0xd98>
    aaf0:	f24c 3319 	movw	r3, #49945	; 0xc319
    aaf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaf8:	2200      	movs	r2, #0
    aafa:	701a      	strb	r2, [r3, #0]
    aafc:	f242 0339 	movw	r3, #8249	; 0x2039
    ab00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab04:	781b      	ldrb	r3, [r3, #0]
    ab06:	b2db      	uxtb	r3, r3
    ab08:	f003 0310 	and.w	r3, r3, #16
    ab0c:	2b00      	cmp	r3, #0
    ab0e:	d15a      	bne.n	abc6 <send_desired+0xe62>
    ab10:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ab14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab18:	781b      	ldrb	r3, [r3, #0]
    ab1a:	b2db      	uxtb	r3, r3
    ab1c:	461a      	mov	r2, r3
    ab1e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ab22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab26:	5c9a      	ldrb	r2, [r3, r2]
    ab28:	f24c 431b 	movw	r3, #50203	; 0xc41b
    ab2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab30:	701a      	strb	r2, [r3, #0]
    ab32:	f24c 431c 	movw	r3, #50204	; 0xc41c
    ab36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab3a:	2200      	movs	r2, #0
    ab3c:	701a      	strb	r2, [r3, #0]
    ab3e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ab42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab46:	781b      	ldrb	r3, [r3, #0]
    ab48:	b2db      	uxtb	r3, r3
    ab4a:	3301      	adds	r3, #1
    ab4c:	b2da      	uxtb	r2, r3
    ab4e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ab52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab56:	701a      	strb	r2, [r3, #0]
    ab58:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ab5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab60:	781b      	ldrb	r3, [r3, #0]
    ab62:	b2db      	uxtb	r3, r3
    ab64:	2bff      	cmp	r3, #255	; 0xff
    ab66:	d105      	bne.n	ab74 <send_desired+0xe10>
    ab68:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ab6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab70:	2200      	movs	r2, #0
    ab72:	701a      	strb	r2, [r3, #0]
    ab74:	f242 0338 	movw	r3, #8248	; 0x2038
    ab78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab7c:	f242 0238 	movw	r2, #8248	; 0x2038
    ab80:	f2c2 0200 	movt	r2, #8192	; 0x2000
    ab84:	7812      	ldrb	r2, [r2, #0]
    ab86:	b2d2      	uxtb	r2, r2
    ab88:	f042 0201 	orr.w	r2, r2, #1
    ab8c:	b2d2      	uxtb	r2, r2
    ab8e:	701a      	strb	r2, [r3, #0]
    ab90:	f242 0339 	movw	r3, #8249	; 0x2039
    ab94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ab98:	f242 0239 	movw	r2, #8249	; 0x2039
    ab9c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    aba0:	7812      	ldrb	r2, [r2, #0]
    aba2:	b2d2      	uxtb	r2, r2
    aba4:	f042 0210 	orr.w	r2, r2, #16
    aba8:	b2d2      	uxtb	r2, r2
    abaa:	701a      	strb	r2, [r3, #0]
    abac:	e00b      	b.n	abc6 <send_desired+0xe62>
    abae:	f24c 3318 	movw	r3, #49944	; 0xc318
    abb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abb6:	781b      	ldrb	r3, [r3, #0]
    abb8:	3301      	adds	r3, #1
    abba:	b2da      	uxtb	r2, r3
    abbc:	f24c 3318 	movw	r3, #49944	; 0xc318
    abc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abc4:	701a      	strb	r2, [r3, #0]
}
    abc6:	46bd      	mov	sp, r7
    abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    abcc:	4770      	bx	lr
    abce:	bf00      	nop
    abd0:	20000577 	.word	0x20000577

0000abd4 <send_bat>:
void send_bat(void){  //2000ms
    abd4:	b480      	push	{r7}
    abd6:	af00      	add	r7, sp, #0
  if(!boot)
    abd8:	f240 533d 	movw	r3, #1341	; 0x53d
    abdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    abe0:	781b      	ldrb	r3, [r3, #0]
    abe2:	2b00      	cmp	r3, #0
    abe4:	f040 83af 	bne.w	b346 <send_bat+0x772>
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    abe8:	f24c 3311 	movw	r3, #49937	; 0xc311
    abec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abf0:	781a      	ldrb	r2, [r3, #0]
    abf2:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    abf6:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    abfa:	fba3 1302 	umull	r1, r3, r3, r2
    abfe:	0919      	lsrs	r1, r3, #4
    ac00:	460b      	mov	r3, r1
    ac02:	009b      	lsls	r3, r3, #2
    ac04:	440b      	add	r3, r1
    ac06:	009b      	lsls	r3, r3, #2
    ac08:	1ad3      	subs	r3, r2, r3
    ac0a:	b2db      	uxtb	r3, r3
    ac0c:	2b08      	cmp	r3, #8
    ac0e:	f040 839a 	bne.w	b346 <send_bat+0x772>
    ac12:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac1a:	781a      	ldrb	r2, [r3, #0]
    ac1c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ac20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac24:	781b      	ldrb	r3, [r3, #0]
    ac26:	b2db      	uxtb	r3, r3
    ac28:	429a      	cmp	r2, r3
    ac2a:	d313      	bcc.n	ac54 <send_bat+0x80>
    ac2c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ac30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac34:	781b      	ldrb	r3, [r3, #0]
    ac36:	b2db      	uxtb	r3, r3
    ac38:	461a      	mov	r2, r3
    ac3a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac42:	781b      	ldrb	r3, [r3, #0]
    ac44:	1ad3      	subs	r3, r2, r3
    ac46:	33ff      	adds	r3, #255	; 0xff
    ac48:	2b0c      	cmp	r3, #12
    ac4a:	bfd4      	ite	le
    ac4c:	2300      	movle	r3, #0
    ac4e:	2301      	movgt	r3, #1
    ac50:	b2db      	uxtb	r3, r3
    ac52:	e011      	b.n	ac78 <send_bat+0xa4>
    ac54:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ac58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac5c:	781b      	ldrb	r3, [r3, #0]
    ac5e:	b2db      	uxtb	r3, r3
    ac60:	461a      	mov	r2, r3
    ac62:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac6a:	781b      	ldrb	r3, [r3, #0]
    ac6c:	1ad3      	subs	r3, r2, r3
    ac6e:	2b0c      	cmp	r3, #12
    ac70:	bfd4      	ite	le
    ac72:	2300      	movle	r3, #0
    ac74:	2301      	movgt	r3, #1
    ac76:	b2db      	uxtb	r3, r3
    ac78:	2b00      	cmp	r3, #0
    ac7a:	f000 8358 	beq.w	b32e <send_bat+0x75a>
    ac7e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac86:	781b      	ldrb	r3, [r3, #0]
    ac88:	461a      	mov	r2, r3
    ac8a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ac8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac92:	2105      	movs	r1, #5
    ac94:	5499      	strb	r1, [r3, r2]
    ac96:	f24c 3319 	movw	r3, #49945	; 0xc319
    ac9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac9e:	781b      	ldrb	r3, [r3, #0]
    aca0:	3301      	adds	r3, #1
    aca2:	b2da      	uxtb	r2, r3
    aca4:	f24c 3319 	movw	r3, #49945	; 0xc319
    aca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acac:	701a      	strb	r2, [r3, #0]
    acae:	f24c 3319 	movw	r3, #49945	; 0xc319
    acb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acb6:	781b      	ldrb	r3, [r3, #0]
    acb8:	2bff      	cmp	r3, #255	; 0xff
    acba:	d105      	bne.n	acc8 <send_bat+0xf4>
    acbc:	f24c 3319 	movw	r3, #49945	; 0xc319
    acc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acc4:	2200      	movs	r2, #0
    acc6:	701a      	strb	r2, [r3, #0]
    acc8:	f24c 3319 	movw	r3, #49945	; 0xc319
    accc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acd0:	781b      	ldrb	r3, [r3, #0]
    acd2:	461a      	mov	r2, r3
    acd4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    acd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acdc:	210c      	movs	r1, #12
    acde:	5499      	strb	r1, [r3, r2]
    ace0:	f24c 3319 	movw	r3, #49945	; 0xc319
    ace4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ace8:	781b      	ldrb	r3, [r3, #0]
    acea:	3301      	adds	r3, #1
    acec:	b2da      	uxtb	r2, r3
    acee:	f24c 3319 	movw	r3, #49945	; 0xc319
    acf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acf6:	701a      	strb	r2, [r3, #0]
    acf8:	f24c 3319 	movw	r3, #49945	; 0xc319
    acfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad00:	781b      	ldrb	r3, [r3, #0]
    ad02:	2bff      	cmp	r3, #255	; 0xff
    ad04:	d105      	bne.n	ad12 <send_bat+0x13e>
    ad06:	f24c 3319 	movw	r3, #49945	; 0xc319
    ad0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad0e:	2200      	movs	r2, #0
    ad10:	701a      	strb	r2, [r3, #0]
    ad12:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ad16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad1a:	220c      	movs	r2, #12
    ad1c:	701a      	strb	r2, [r3, #0]
    ad1e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ad22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad26:	220c      	movs	r2, #12
    ad28:	701a      	strb	r2, [r3, #0]
    ad2a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ad2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad32:	781b      	ldrb	r3, [r3, #0]
    ad34:	461a      	mov	r2, r3
    ad36:	f24c 3302 	movw	r3, #49922	; 0xc302
    ad3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad3e:	7819      	ldrb	r1, [r3, #0]
    ad40:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ad44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad48:	5499      	strb	r1, [r3, r2]
    ad4a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ad4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad52:	781a      	ldrb	r2, [r3, #0]
    ad54:	f24c 3302 	movw	r3, #49922	; 0xc302
    ad58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad5c:	781b      	ldrb	r3, [r3, #0]
    ad5e:	4413      	add	r3, r2
    ad60:	b2da      	uxtb	r2, r3
    ad62:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ad66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad6a:	701a      	strb	r2, [r3, #0]
    ad6c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ad70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad74:	781a      	ldrb	r2, [r3, #0]
    ad76:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ad7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad7e:	781b      	ldrb	r3, [r3, #0]
    ad80:	4413      	add	r3, r2
    ad82:	b2da      	uxtb	r2, r3
    ad84:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ad88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad8c:	701a      	strb	r2, [r3, #0]
    ad8e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ad92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad96:	781b      	ldrb	r3, [r3, #0]
    ad98:	3301      	adds	r3, #1
    ad9a:	b2da      	uxtb	r2, r3
    ad9c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ada0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ada4:	701a      	strb	r2, [r3, #0]
    ada6:	f24c 3319 	movw	r3, #49945	; 0xc319
    adaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adae:	781b      	ldrb	r3, [r3, #0]
    adb0:	2bff      	cmp	r3, #255	; 0xff
    adb2:	d105      	bne.n	adc0 <send_bat+0x1ec>
    adb4:	f24c 3319 	movw	r3, #49945	; 0xc319
    adb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adbc:	2200      	movs	r2, #0
    adbe:	701a      	strb	r2, [r3, #0]
    adc0:	f24c 3319 	movw	r3, #49945	; 0xc319
    adc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adc8:	781b      	ldrb	r3, [r3, #0]
    adca:	461a      	mov	r2, r3
    adcc:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
    add0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    add4:	7819      	ldrb	r1, [r3, #0]
    add6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    adda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adde:	5499      	strb	r1, [r3, r2]
    ade0:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
    ade4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ade8:	781a      	ldrb	r2, [r3, #0]
    adea:	f24c 431d 	movw	r3, #50205	; 0xc41d
    adee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adf2:	781b      	ldrb	r3, [r3, #0]
    adf4:	4413      	add	r3, r2
    adf6:	b2da      	uxtb	r2, r3
    adf8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    adfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae00:	701a      	strb	r2, [r3, #0]
    ae02:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ae06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae0a:	781a      	ldrb	r2, [r3, #0]
    ae0c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ae10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae14:	781b      	ldrb	r3, [r3, #0]
    ae16:	4413      	add	r3, r2
    ae18:	b2da      	uxtb	r2, r3
    ae1a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ae1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae22:	701a      	strb	r2, [r3, #0]
    ae24:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae2c:	781b      	ldrb	r3, [r3, #0]
    ae2e:	3301      	adds	r3, #1
    ae30:	b2da      	uxtb	r2, r3
    ae32:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae3a:	701a      	strb	r2, [r3, #0]
    ae3c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae44:	781b      	ldrb	r3, [r3, #0]
    ae46:	2bff      	cmp	r3, #255	; 0xff
    ae48:	d105      	bne.n	ae56 <send_bat+0x282>
    ae4a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae52:	2200      	movs	r2, #0
    ae54:	701a      	strb	r2, [r3, #0]
    ae56:	f24c 3319 	movw	r3, #49945	; 0xc319
    ae5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae5e:	781b      	ldrb	r3, [r3, #0]
    ae60:	461a      	mov	r2, r3
    ae62:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
    ae66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae6a:	7859      	ldrb	r1, [r3, #1]
    ae6c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ae70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae74:	5499      	strb	r1, [r3, r2]
    ae76:	4bd5      	ldr	r3, [pc, #852]	; (b1cc <send_bat+0x5f8>)
    ae78:	781a      	ldrb	r2, [r3, #0]
    ae7a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ae7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae82:	781b      	ldrb	r3, [r3, #0]
    ae84:	4413      	add	r3, r2
    ae86:	b2da      	uxtb	r2, r3
    ae88:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ae8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae90:	701a      	strb	r2, [r3, #0]
    ae92:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ae96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae9a:	781a      	ldrb	r2, [r3, #0]
    ae9c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    aea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aea4:	781b      	ldrb	r3, [r3, #0]
    aea6:	4413      	add	r3, r2
    aea8:	b2da      	uxtb	r2, r3
    aeaa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    aeae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeb2:	701a      	strb	r2, [r3, #0]
    aeb4:	f24c 3319 	movw	r3, #49945	; 0xc319
    aeb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aebc:	781b      	ldrb	r3, [r3, #0]
    aebe:	3301      	adds	r3, #1
    aec0:	b2da      	uxtb	r2, r3
    aec2:	f24c 3319 	movw	r3, #49945	; 0xc319
    aec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeca:	701a      	strb	r2, [r3, #0]
    aecc:	f24c 3319 	movw	r3, #49945	; 0xc319
    aed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aed4:	781b      	ldrb	r3, [r3, #0]
    aed6:	2bff      	cmp	r3, #255	; 0xff
    aed8:	d105      	bne.n	aee6 <send_bat+0x312>
    aeda:	f24c 3319 	movw	r3, #49945	; 0xc319
    aede:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aee2:	2200      	movs	r2, #0
    aee4:	701a      	strb	r2, [r3, #0]
    aee6:	f24c 3319 	movw	r3, #49945	; 0xc319
    aeea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeee:	781b      	ldrb	r3, [r3, #0]
    aef0:	461a      	mov	r2, r3
    aef2:	f24c 3305 	movw	r3, #49925	; 0xc305
    aef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aefa:	7819      	ldrb	r1, [r3, #0]
    aefc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    af00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af04:	5499      	strb	r1, [r3, r2]
    af06:	f24c 3305 	movw	r3, #49925	; 0xc305
    af0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af0e:	781a      	ldrb	r2, [r3, #0]
    af10:	f24c 431d 	movw	r3, #50205	; 0xc41d
    af14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af18:	781b      	ldrb	r3, [r3, #0]
    af1a:	4413      	add	r3, r2
    af1c:	b2da      	uxtb	r2, r3
    af1e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    af22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af26:	701a      	strb	r2, [r3, #0]
    af28:	f24c 431e 	movw	r3, #50206	; 0xc41e
    af2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af30:	781a      	ldrb	r2, [r3, #0]
    af32:	f24c 431d 	movw	r3, #50205	; 0xc41d
    af36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af3a:	781b      	ldrb	r3, [r3, #0]
    af3c:	4413      	add	r3, r2
    af3e:	b2da      	uxtb	r2, r3
    af40:	f24c 431e 	movw	r3, #50206	; 0xc41e
    af44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af48:	701a      	strb	r2, [r3, #0]
    af4a:	f24c 3319 	movw	r3, #49945	; 0xc319
    af4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af52:	781b      	ldrb	r3, [r3, #0]
    af54:	3301      	adds	r3, #1
    af56:	b2da      	uxtb	r2, r3
    af58:	f24c 3319 	movw	r3, #49945	; 0xc319
    af5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af60:	701a      	strb	r2, [r3, #0]
    af62:	f24c 3319 	movw	r3, #49945	; 0xc319
    af66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af6a:	781b      	ldrb	r3, [r3, #0]
    af6c:	2bff      	cmp	r3, #255	; 0xff
    af6e:	d105      	bne.n	af7c <send_bat+0x3a8>
    af70:	f24c 3319 	movw	r3, #49945	; 0xc319
    af74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af78:	2200      	movs	r2, #0
    af7a:	701a      	strb	r2, [r3, #0]
    af7c:	f24c 3319 	movw	r3, #49945	; 0xc319
    af80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af84:	781b      	ldrb	r3, [r3, #0]
    af86:	461a      	mov	r2, r3
    af88:	f24c 6386 	movw	r3, #50822	; 0xc686
    af8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af90:	7819      	ldrb	r1, [r3, #0]
    af92:	f24c 331c 	movw	r3, #49948	; 0xc31c
    af96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af9a:	5499      	strb	r1, [r3, r2]
    af9c:	f24c 6386 	movw	r3, #50822	; 0xc686
    afa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afa4:	781a      	ldrb	r2, [r3, #0]
    afa6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    afaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afae:	781b      	ldrb	r3, [r3, #0]
    afb0:	4413      	add	r3, r2
    afb2:	b2da      	uxtb	r2, r3
    afb4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    afb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afbc:	701a      	strb	r2, [r3, #0]
    afbe:	f24c 431e 	movw	r3, #50206	; 0xc41e
    afc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afc6:	781a      	ldrb	r2, [r3, #0]
    afc8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    afcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afd0:	781b      	ldrb	r3, [r3, #0]
    afd2:	4413      	add	r3, r2
    afd4:	b2da      	uxtb	r2, r3
    afd6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    afda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afde:	701a      	strb	r2, [r3, #0]
    afe0:	f24c 3319 	movw	r3, #49945	; 0xc319
    afe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afe8:	781b      	ldrb	r3, [r3, #0]
    afea:	3301      	adds	r3, #1
    afec:	b2da      	uxtb	r2, r3
    afee:	f24c 3319 	movw	r3, #49945	; 0xc319
    aff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aff6:	701a      	strb	r2, [r3, #0]
    aff8:	f24c 3319 	movw	r3, #49945	; 0xc319
    affc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b000:	781b      	ldrb	r3, [r3, #0]
    b002:	2bff      	cmp	r3, #255	; 0xff
    b004:	d105      	bne.n	b012 <send_bat+0x43e>
    b006:	f24c 3319 	movw	r3, #49945	; 0xc319
    b00a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b00e:	2200      	movs	r2, #0
    b010:	701a      	strb	r2, [r3, #0]
    b012:	f24c 3319 	movw	r3, #49945	; 0xc319
    b016:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b01a:	781b      	ldrb	r3, [r3, #0]
    b01c:	461a      	mov	r2, r3
    b01e:	f24c 6386 	movw	r3, #50822	; 0xc686
    b022:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b026:	7859      	ldrb	r1, [r3, #1]
    b028:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b02c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b030:	5499      	strb	r1, [r3, r2]
    b032:	4b67      	ldr	r3, [pc, #412]	; (b1d0 <send_bat+0x5fc>)
    b034:	781a      	ldrb	r2, [r3, #0]
    b036:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b03a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b03e:	781b      	ldrb	r3, [r3, #0]
    b040:	4413      	add	r3, r2
    b042:	b2da      	uxtb	r2, r3
    b044:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b04c:	701a      	strb	r2, [r3, #0]
    b04e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b056:	781a      	ldrb	r2, [r3, #0]
    b058:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b05c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b060:	781b      	ldrb	r3, [r3, #0]
    b062:	4413      	add	r3, r2
    b064:	b2da      	uxtb	r2, r3
    b066:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b06a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b06e:	701a      	strb	r2, [r3, #0]
    b070:	f24c 3319 	movw	r3, #49945	; 0xc319
    b074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b078:	781b      	ldrb	r3, [r3, #0]
    b07a:	3301      	adds	r3, #1
    b07c:	b2da      	uxtb	r2, r3
    b07e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b086:	701a      	strb	r2, [r3, #0]
    b088:	f24c 3319 	movw	r3, #49945	; 0xc319
    b08c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b090:	781b      	ldrb	r3, [r3, #0]
    b092:	2bff      	cmp	r3, #255	; 0xff
    b094:	d105      	bne.n	b0a2 <send_bat+0x4ce>
    b096:	f24c 3319 	movw	r3, #49945	; 0xc319
    b09a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b09e:	2200      	movs	r2, #0
    b0a0:	701a      	strb	r2, [r3, #0]
    b0a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    b0a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0aa:	781b      	ldrb	r3, [r3, #0]
    b0ac:	461a      	mov	r2, r3
    b0ae:	f24c 6384 	movw	r3, #50820	; 0xc684
    b0b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0b6:	7819      	ldrb	r1, [r3, #0]
    b0b8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b0bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0c0:	5499      	strb	r1, [r3, r2]
    b0c2:	f24c 6384 	movw	r3, #50820	; 0xc684
    b0c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ca:	781a      	ldrb	r2, [r3, #0]
    b0cc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b0d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0d4:	781b      	ldrb	r3, [r3, #0]
    b0d6:	4413      	add	r3, r2
    b0d8:	b2da      	uxtb	r2, r3
    b0da:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b0de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0e2:	701a      	strb	r2, [r3, #0]
    b0e4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b0e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ec:	781a      	ldrb	r2, [r3, #0]
    b0ee:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b0f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0f6:	781b      	ldrb	r3, [r3, #0]
    b0f8:	4413      	add	r3, r2
    b0fa:	b2da      	uxtb	r2, r3
    b0fc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b100:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b104:	701a      	strb	r2, [r3, #0]
    b106:	f24c 3319 	movw	r3, #49945	; 0xc319
    b10a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b10e:	781b      	ldrb	r3, [r3, #0]
    b110:	3301      	adds	r3, #1
    b112:	b2da      	uxtb	r2, r3
    b114:	f24c 3319 	movw	r3, #49945	; 0xc319
    b118:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b11c:	701a      	strb	r2, [r3, #0]
    b11e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b126:	781b      	ldrb	r3, [r3, #0]
    b128:	2bff      	cmp	r3, #255	; 0xff
    b12a:	d105      	bne.n	b138 <send_bat+0x564>
    b12c:	f24c 3319 	movw	r3, #49945	; 0xc319
    b130:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b134:	2200      	movs	r2, #0
    b136:	701a      	strb	r2, [r3, #0]
    b138:	f24c 3319 	movw	r3, #49945	; 0xc319
    b13c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b140:	781b      	ldrb	r3, [r3, #0]
    b142:	461a      	mov	r2, r3
    b144:	f24c 6384 	movw	r3, #50820	; 0xc684
    b148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b14c:	7859      	ldrb	r1, [r3, #1]
    b14e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b156:	5499      	strb	r1, [r3, r2]
    b158:	4b1e      	ldr	r3, [pc, #120]	; (b1d4 <send_bat+0x600>)
    b15a:	781a      	ldrb	r2, [r3, #0]
    b15c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b164:	781b      	ldrb	r3, [r3, #0]
    b166:	4413      	add	r3, r2
    b168:	b2da      	uxtb	r2, r3
    b16a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b16e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b172:	701a      	strb	r2, [r3, #0]
    b174:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b17c:	781a      	ldrb	r2, [r3, #0]
    b17e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b186:	781b      	ldrb	r3, [r3, #0]
    b188:	4413      	add	r3, r2
    b18a:	b2da      	uxtb	r2, r3
    b18c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b190:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b194:	701a      	strb	r2, [r3, #0]
    b196:	f24c 3319 	movw	r3, #49945	; 0xc319
    b19a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b19e:	781b      	ldrb	r3, [r3, #0]
    b1a0:	3301      	adds	r3, #1
    b1a2:	b2da      	uxtb	r2, r3
    b1a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    b1a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1ac:	701a      	strb	r2, [r3, #0]
    b1ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    b1b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1b6:	781b      	ldrb	r3, [r3, #0]
    b1b8:	2bff      	cmp	r3, #255	; 0xff
    b1ba:	d10d      	bne.n	b1d8 <send_bat+0x604>
    b1bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    b1c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1c4:	2200      	movs	r2, #0
    b1c6:	701a      	strb	r2, [r3, #0]
    b1c8:	e006      	b.n	b1d8 <send_bat+0x604>
    b1ca:	bf00      	nop
    b1cc:	2004c8fd 	.word	0x2004c8fd
    b1d0:	2004c687 	.word	0x2004c687
    b1d4:	2004c685 	.word	0x2004c685
    b1d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    b1dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1e0:	781b      	ldrb	r3, [r3, #0]
    b1e2:	461a      	mov	r2, r3
    b1e4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b1e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1ec:	7819      	ldrb	r1, [r3, #0]
    b1ee:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b1f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1f6:	5499      	strb	r1, [r3, r2]
    b1f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    b1fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b200:	781b      	ldrb	r3, [r3, #0]
    b202:	3301      	adds	r3, #1
    b204:	b2da      	uxtb	r2, r3
    b206:	f24c 3319 	movw	r3, #49945	; 0xc319
    b20a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b20e:	701a      	strb	r2, [r3, #0]
    b210:	f24c 3319 	movw	r3, #49945	; 0xc319
    b214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b218:	781b      	ldrb	r3, [r3, #0]
    b21a:	2bff      	cmp	r3, #255	; 0xff
    b21c:	d105      	bne.n	b22a <send_bat+0x656>
    b21e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b226:	2200      	movs	r2, #0
    b228:	701a      	strb	r2, [r3, #0]
    b22a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b22e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b232:	781b      	ldrb	r3, [r3, #0]
    b234:	461a      	mov	r2, r3
    b236:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b23a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b23e:	7819      	ldrb	r1, [r3, #0]
    b240:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b244:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b248:	5499      	strb	r1, [r3, r2]
    b24a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b24e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b252:	781b      	ldrb	r3, [r3, #0]
    b254:	3301      	adds	r3, #1
    b256:	b2da      	uxtb	r2, r3
    b258:	f24c 3319 	movw	r3, #49945	; 0xc319
    b25c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b260:	701a      	strb	r2, [r3, #0]
    b262:	f24c 3319 	movw	r3, #49945	; 0xc319
    b266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b26a:	781b      	ldrb	r3, [r3, #0]
    b26c:	2bff      	cmp	r3, #255	; 0xff
    b26e:	d105      	bne.n	b27c <send_bat+0x6a8>
    b270:	f24c 3319 	movw	r3, #49945	; 0xc319
    b274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b278:	2200      	movs	r2, #0
    b27a:	701a      	strb	r2, [r3, #0]
    b27c:	f242 0339 	movw	r3, #8249	; 0x2039
    b280:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b284:	781b      	ldrb	r3, [r3, #0]
    b286:	b2db      	uxtb	r3, r3
    b288:	f003 0310 	and.w	r3, r3, #16
    b28c:	2b00      	cmp	r3, #0
    b28e:	d15a      	bne.n	b346 <send_bat+0x772>
    b290:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b298:	781b      	ldrb	r3, [r3, #0]
    b29a:	b2db      	uxtb	r3, r3
    b29c:	461a      	mov	r2, r3
    b29e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b2a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2a6:	5c9a      	ldrb	r2, [r3, r2]
    b2a8:	f24c 431b 	movw	r3, #50203	; 0xc41b
    b2ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2b0:	701a      	strb	r2, [r3, #0]
    b2b2:	f24c 431c 	movw	r3, #50204	; 0xc41c
    b2b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2ba:	2200      	movs	r2, #0
    b2bc:	701a      	strb	r2, [r3, #0]
    b2be:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b2c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2c6:	781b      	ldrb	r3, [r3, #0]
    b2c8:	b2db      	uxtb	r3, r3
    b2ca:	3301      	adds	r3, #1
    b2cc:	b2da      	uxtb	r2, r3
    b2ce:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b2d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2d6:	701a      	strb	r2, [r3, #0]
    b2d8:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b2dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2e0:	781b      	ldrb	r3, [r3, #0]
    b2e2:	b2db      	uxtb	r3, r3
    b2e4:	2bff      	cmp	r3, #255	; 0xff
    b2e6:	d105      	bne.n	b2f4 <send_bat+0x720>
    b2e8:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b2ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2f0:	2200      	movs	r2, #0
    b2f2:	701a      	strb	r2, [r3, #0]
    b2f4:	f242 0338 	movw	r3, #8248	; 0x2038
    b2f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b2fc:	f242 0238 	movw	r2, #8248	; 0x2038
    b300:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b304:	7812      	ldrb	r2, [r2, #0]
    b306:	b2d2      	uxtb	r2, r2
    b308:	f042 0201 	orr.w	r2, r2, #1
    b30c:	b2d2      	uxtb	r2, r2
    b30e:	701a      	strb	r2, [r3, #0]
    b310:	f242 0339 	movw	r3, #8249	; 0x2039
    b314:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b318:	f242 0239 	movw	r2, #8249	; 0x2039
    b31c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b320:	7812      	ldrb	r2, [r2, #0]
    b322:	b2d2      	uxtb	r2, r2
    b324:	f042 0210 	orr.w	r2, r2, #16
    b328:	b2d2      	uxtb	r2, r2
    b32a:	701a      	strb	r2, [r3, #0]
    b32c:	e00b      	b.n	b346 <send_bat+0x772>
    b32e:	f24c 3318 	movw	r3, #49944	; 0xc318
    b332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b336:	781b      	ldrb	r3, [r3, #0]
    b338:	3301      	adds	r3, #1
    b33a:	b2da      	uxtb	r2, r3
    b33c:	f24c 3318 	movw	r3, #49944	; 0xc318
    b340:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b344:	701a      	strb	r2, [r3, #0]
}
    b346:	46bd      	mov	sp, r7
    b348:	f85d 7b04 	ldr.w	r7, [sp], #4
    b34c:	4770      	bx	lr
    b34e:	bf00      	nop

0000b350 <send_climb>:
void send_climb(void){  //2000ms
    b350:	b480      	push	{r7}
    b352:	af00      	add	r7, sp, #0
  if(!boot)
    b354:	f240 533d 	movw	r3, #1341	; 0x53d
    b358:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b35c:	781b      	ldrb	r3, [r3, #0]
    b35e:	2b00      	cmp	r3, #0
    b360:	f040 8569 	bne.w	be36 <send_climb+0xae6>
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    b364:	f24c 3311 	movw	r3, #49937	; 0xc311
    b368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b36c:	781a      	ldrb	r2, [r3, #0]
    b36e:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    b372:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    b376:	fba3 1302 	umull	r1, r3, r3, r2
    b37a:	0919      	lsrs	r1, r3, #4
    b37c:	460b      	mov	r3, r1
    b37e:	009b      	lsls	r3, r3, #2
    b380:	440b      	add	r3, r1
    b382:	009b      	lsls	r3, r3, #2
    b384:	1ad3      	subs	r3, r2, r3
    b386:	b2db      	uxtb	r3, r3
    b388:	2b12      	cmp	r3, #18
    b38a:	f040 8554 	bne.w	be36 <send_climb+0xae6>
    b38e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b396:	781a      	ldrb	r2, [r3, #0]
    b398:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b39c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3a0:	781b      	ldrb	r3, [r3, #0]
    b3a2:	b2db      	uxtb	r3, r3
    b3a4:	429a      	cmp	r2, r3
    b3a6:	d313      	bcc.n	b3d0 <send_climb+0x80>
    b3a8:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b3ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3b0:	781b      	ldrb	r3, [r3, #0]
    b3b2:	b2db      	uxtb	r3, r3
    b3b4:	461a      	mov	r2, r3
    b3b6:	f24c 3319 	movw	r3, #49945	; 0xc319
    b3ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3be:	781b      	ldrb	r3, [r3, #0]
    b3c0:	1ad3      	subs	r3, r2, r3
    b3c2:	33ff      	adds	r3, #255	; 0xff
    b3c4:	2b12      	cmp	r3, #18
    b3c6:	bfd4      	ite	le
    b3c8:	2300      	movle	r3, #0
    b3ca:	2301      	movgt	r3, #1
    b3cc:	b2db      	uxtb	r3, r3
    b3ce:	e011      	b.n	b3f4 <send_climb+0xa4>
    b3d0:	f24c 331a 	movw	r3, #49946	; 0xc31a
    b3d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3d8:	781b      	ldrb	r3, [r3, #0]
    b3da:	b2db      	uxtb	r3, r3
    b3dc:	461a      	mov	r2, r3
    b3de:	f24c 3319 	movw	r3, #49945	; 0xc319
    b3e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3e6:	781b      	ldrb	r3, [r3, #0]
    b3e8:	1ad3      	subs	r3, r2, r3
    b3ea:	2b12      	cmp	r3, #18
    b3ec:	bfd4      	ite	le
    b3ee:	2300      	movle	r3, #0
    b3f0:	2301      	movgt	r3, #1
    b3f2:	b2db      	uxtb	r3, r3
    b3f4:	2b00      	cmp	r3, #0
    b3f6:	f000 8512 	beq.w	be1e <send_climb+0xace>
    b3fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    b3fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b402:	781b      	ldrb	r3, [r3, #0]
    b404:	461a      	mov	r2, r3
    b406:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b40a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b40e:	2105      	movs	r1, #5
    b410:	5499      	strb	r1, [r3, r2]
    b412:	f24c 3319 	movw	r3, #49945	; 0xc319
    b416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b41a:	781b      	ldrb	r3, [r3, #0]
    b41c:	3301      	adds	r3, #1
    b41e:	b2da      	uxtb	r2, r3
    b420:	f24c 3319 	movw	r3, #49945	; 0xc319
    b424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b428:	701a      	strb	r2, [r3, #0]
    b42a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b42e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b432:	781b      	ldrb	r3, [r3, #0]
    b434:	2bff      	cmp	r3, #255	; 0xff
    b436:	d105      	bne.n	b444 <send_climb+0xf4>
    b438:	f24c 3319 	movw	r3, #49945	; 0xc319
    b43c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b440:	2200      	movs	r2, #0
    b442:	701a      	strb	r2, [r3, #0]
    b444:	f24c 3319 	movw	r3, #49945	; 0xc319
    b448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b44c:	781b      	ldrb	r3, [r3, #0]
    b44e:	461a      	mov	r2, r3
    b450:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b454:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b458:	210e      	movs	r1, #14
    b45a:	5499      	strb	r1, [r3, r2]
    b45c:	f24c 3319 	movw	r3, #49945	; 0xc319
    b460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b464:	781b      	ldrb	r3, [r3, #0]
    b466:	3301      	adds	r3, #1
    b468:	b2da      	uxtb	r2, r3
    b46a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b46e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b472:	701a      	strb	r2, [r3, #0]
    b474:	f24c 3319 	movw	r3, #49945	; 0xc319
    b478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b47c:	781b      	ldrb	r3, [r3, #0]
    b47e:	2bff      	cmp	r3, #255	; 0xff
    b480:	d105      	bne.n	b48e <send_climb+0x13e>
    b482:	f24c 3319 	movw	r3, #49945	; 0xc319
    b486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b48a:	2200      	movs	r2, #0
    b48c:	701a      	strb	r2, [r3, #0]
    b48e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b496:	220e      	movs	r2, #14
    b498:	701a      	strb	r2, [r3, #0]
    b49a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b49e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4a2:	220e      	movs	r2, #14
    b4a4:	701a      	strb	r2, [r3, #0]
    b4a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    b4aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ae:	781b      	ldrb	r3, [r3, #0]
    b4b0:	461a      	mov	r2, r3
    b4b2:	f24c 634c 	movw	r3, #50764	; 0xc64c
    b4b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ba:	7819      	ldrb	r1, [r3, #0]
    b4bc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b4c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4c4:	5499      	strb	r1, [r3, r2]
    b4c6:	f24c 634c 	movw	r3, #50764	; 0xc64c
    b4ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ce:	781a      	ldrb	r2, [r3, #0]
    b4d0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b4d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4d8:	781b      	ldrb	r3, [r3, #0]
    b4da:	4413      	add	r3, r2
    b4dc:	b2da      	uxtb	r2, r3
    b4de:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b4e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4e6:	701a      	strb	r2, [r3, #0]
    b4e8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b4ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4f0:	781a      	ldrb	r2, [r3, #0]
    b4f2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b4f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4fa:	781b      	ldrb	r3, [r3, #0]
    b4fc:	4413      	add	r3, r2
    b4fe:	b2da      	uxtb	r2, r3
    b500:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b508:	701a      	strb	r2, [r3, #0]
    b50a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b50e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b512:	781b      	ldrb	r3, [r3, #0]
    b514:	3301      	adds	r3, #1
    b516:	b2da      	uxtb	r2, r3
    b518:	f24c 3319 	movw	r3, #49945	; 0xc319
    b51c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b520:	701a      	strb	r2, [r3, #0]
    b522:	f24c 3319 	movw	r3, #49945	; 0xc319
    b526:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b52a:	781b      	ldrb	r3, [r3, #0]
    b52c:	2bff      	cmp	r3, #255	; 0xff
    b52e:	d105      	bne.n	b53c <send_climb+0x1ec>
    b530:	f24c 3319 	movw	r3, #49945	; 0xc319
    b534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b538:	2200      	movs	r2, #0
    b53a:	701a      	strb	r2, [r3, #0]
    b53c:	f24c 3319 	movw	r3, #49945	; 0xc319
    b540:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b544:	781b      	ldrb	r3, [r3, #0]
    b546:	461a      	mov	r2, r3
    b548:	f24c 634c 	movw	r3, #50764	; 0xc64c
    b54c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b550:	7859      	ldrb	r1, [r3, #1]
    b552:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b55a:	5499      	strb	r1, [r3, r2]
    b55c:	4bd3      	ldr	r3, [pc, #844]	; (b8ac <send_climb+0x55c>)
    b55e:	781a      	ldrb	r2, [r3, #0]
    b560:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b568:	781b      	ldrb	r3, [r3, #0]
    b56a:	4413      	add	r3, r2
    b56c:	b2da      	uxtb	r2, r3
    b56e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b576:	701a      	strb	r2, [r3, #0]
    b578:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b57c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b580:	781a      	ldrb	r2, [r3, #0]
    b582:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b586:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b58a:	781b      	ldrb	r3, [r3, #0]
    b58c:	4413      	add	r3, r2
    b58e:	b2da      	uxtb	r2, r3
    b590:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b598:	701a      	strb	r2, [r3, #0]
    b59a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b59e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5a2:	781b      	ldrb	r3, [r3, #0]
    b5a4:	3301      	adds	r3, #1
    b5a6:	b2da      	uxtb	r2, r3
    b5a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    b5ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5b0:	701a      	strb	r2, [r3, #0]
    b5b2:	f24c 3319 	movw	r3, #49945	; 0xc319
    b5b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5ba:	781b      	ldrb	r3, [r3, #0]
    b5bc:	2bff      	cmp	r3, #255	; 0xff
    b5be:	d105      	bne.n	b5cc <send_climb+0x27c>
    b5c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b5c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5c8:	2200      	movs	r2, #0
    b5ca:	701a      	strb	r2, [r3, #0]
    b5cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    b5d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5d4:	781b      	ldrb	r3, [r3, #0]
    b5d6:	461a      	mov	r2, r3
    b5d8:	f24c 6360 	movw	r3, #50784	; 0xc660
    b5dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5e0:	7819      	ldrb	r1, [r3, #0]
    b5e2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b5e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5ea:	5499      	strb	r1, [r3, r2]
    b5ec:	f24c 6360 	movw	r3, #50784	; 0xc660
    b5f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5f4:	781a      	ldrb	r2, [r3, #0]
    b5f6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b5fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5fe:	781b      	ldrb	r3, [r3, #0]
    b600:	4413      	add	r3, r2
    b602:	b2da      	uxtb	r2, r3
    b604:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b608:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b60c:	701a      	strb	r2, [r3, #0]
    b60e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b612:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b616:	781a      	ldrb	r2, [r3, #0]
    b618:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b61c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b620:	781b      	ldrb	r3, [r3, #0]
    b622:	4413      	add	r3, r2
    b624:	b2da      	uxtb	r2, r3
    b626:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b62a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b62e:	701a      	strb	r2, [r3, #0]
    b630:	f24c 3319 	movw	r3, #49945	; 0xc319
    b634:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b638:	781b      	ldrb	r3, [r3, #0]
    b63a:	3301      	adds	r3, #1
    b63c:	b2da      	uxtb	r2, r3
    b63e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b646:	701a      	strb	r2, [r3, #0]
    b648:	f24c 3319 	movw	r3, #49945	; 0xc319
    b64c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b650:	781b      	ldrb	r3, [r3, #0]
    b652:	2bff      	cmp	r3, #255	; 0xff
    b654:	d105      	bne.n	b662 <send_climb+0x312>
    b656:	f24c 3319 	movw	r3, #49945	; 0xc319
    b65a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b65e:	2200      	movs	r2, #0
    b660:	701a      	strb	r2, [r3, #0]
    b662:	f24c 3319 	movw	r3, #49945	; 0xc319
    b666:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b66a:	781b      	ldrb	r3, [r3, #0]
    b66c:	461a      	mov	r2, r3
    b66e:	f24c 6360 	movw	r3, #50784	; 0xc660
    b672:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b676:	7859      	ldrb	r1, [r3, #1]
    b678:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b67c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b680:	5499      	strb	r1, [r3, r2]
    b682:	4b8b      	ldr	r3, [pc, #556]	; (b8b0 <send_climb+0x560>)
    b684:	781a      	ldrb	r2, [r3, #0]
    b686:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b68a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b68e:	781b      	ldrb	r3, [r3, #0]
    b690:	4413      	add	r3, r2
    b692:	b2da      	uxtb	r2, r3
    b694:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b69c:	701a      	strb	r2, [r3, #0]
    b69e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b6a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6a6:	781a      	ldrb	r2, [r3, #0]
    b6a8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b6ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6b0:	781b      	ldrb	r3, [r3, #0]
    b6b2:	4413      	add	r3, r2
    b6b4:	b2da      	uxtb	r2, r3
    b6b6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b6ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6be:	701a      	strb	r2, [r3, #0]
    b6c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b6c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6c8:	781b      	ldrb	r3, [r3, #0]
    b6ca:	3301      	adds	r3, #1
    b6cc:	b2da      	uxtb	r2, r3
    b6ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    b6d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6d6:	701a      	strb	r2, [r3, #0]
    b6d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    b6dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6e0:	781b      	ldrb	r3, [r3, #0]
    b6e2:	2bff      	cmp	r3, #255	; 0xff
    b6e4:	d105      	bne.n	b6f2 <send_climb+0x3a2>
    b6e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    b6ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6ee:	2200      	movs	r2, #0
    b6f0:	701a      	strb	r2, [r3, #0]
    b6f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    b6f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6fa:	781b      	ldrb	r3, [r3, #0]
    b6fc:	461a      	mov	r2, r3
    b6fe:	f24c 6360 	movw	r3, #50784	; 0xc660
    b702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b706:	7899      	ldrb	r1, [r3, #2]
    b708:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b70c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b710:	5499      	strb	r1, [r3, r2]
    b712:	4b68      	ldr	r3, [pc, #416]	; (b8b4 <send_climb+0x564>)
    b714:	781a      	ldrb	r2, [r3, #0]
    b716:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b71a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b71e:	781b      	ldrb	r3, [r3, #0]
    b720:	4413      	add	r3, r2
    b722:	b2da      	uxtb	r2, r3
    b724:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b72c:	701a      	strb	r2, [r3, #0]
    b72e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b736:	781a      	ldrb	r2, [r3, #0]
    b738:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b73c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b740:	781b      	ldrb	r3, [r3, #0]
    b742:	4413      	add	r3, r2
    b744:	b2da      	uxtb	r2, r3
    b746:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b74a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b74e:	701a      	strb	r2, [r3, #0]
    b750:	f24c 3319 	movw	r3, #49945	; 0xc319
    b754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b758:	781b      	ldrb	r3, [r3, #0]
    b75a:	3301      	adds	r3, #1
    b75c:	b2da      	uxtb	r2, r3
    b75e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b766:	701a      	strb	r2, [r3, #0]
    b768:	f24c 3319 	movw	r3, #49945	; 0xc319
    b76c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b770:	781b      	ldrb	r3, [r3, #0]
    b772:	2bff      	cmp	r3, #255	; 0xff
    b774:	d105      	bne.n	b782 <send_climb+0x432>
    b776:	f24c 3319 	movw	r3, #49945	; 0xc319
    b77a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b77e:	2200      	movs	r2, #0
    b780:	701a      	strb	r2, [r3, #0]
    b782:	f24c 3319 	movw	r3, #49945	; 0xc319
    b786:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b78a:	781b      	ldrb	r3, [r3, #0]
    b78c:	461a      	mov	r2, r3
    b78e:	f24c 6360 	movw	r3, #50784	; 0xc660
    b792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b796:	78d9      	ldrb	r1, [r3, #3]
    b798:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b79c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7a0:	5499      	strb	r1, [r3, r2]
    b7a2:	4b45      	ldr	r3, [pc, #276]	; (b8b8 <send_climb+0x568>)
    b7a4:	781a      	ldrb	r2, [r3, #0]
    b7a6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b7aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7ae:	781b      	ldrb	r3, [r3, #0]
    b7b0:	4413      	add	r3, r2
    b7b2:	b2da      	uxtb	r2, r3
    b7b4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b7b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7bc:	701a      	strb	r2, [r3, #0]
    b7be:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b7c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7c6:	781a      	ldrb	r2, [r3, #0]
    b7c8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b7cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7d0:	781b      	ldrb	r3, [r3, #0]
    b7d2:	4413      	add	r3, r2
    b7d4:	b2da      	uxtb	r2, r3
    b7d6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b7da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7de:	701a      	strb	r2, [r3, #0]
    b7e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b7e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7e8:	781b      	ldrb	r3, [r3, #0]
    b7ea:	3301      	adds	r3, #1
    b7ec:	b2da      	uxtb	r2, r3
    b7ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    b7f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7f6:	701a      	strb	r2, [r3, #0]
    b7f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    b7fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b800:	781b      	ldrb	r3, [r3, #0]
    b802:	2bff      	cmp	r3, #255	; 0xff
    b804:	d105      	bne.n	b812 <send_climb+0x4c2>
    b806:	f24c 3319 	movw	r3, #49945	; 0xc319
    b80a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b80e:	2200      	movs	r2, #0
    b810:	701a      	strb	r2, [r3, #0]
    b812:	f24c 3319 	movw	r3, #49945	; 0xc319
    b816:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b81a:	781b      	ldrb	r3, [r3, #0]
    b81c:	461a      	mov	r2, r3
    b81e:	f24c 6368 	movw	r3, #50792	; 0xc668
    b822:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b826:	7819      	ldrb	r1, [r3, #0]
    b828:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b82c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b830:	5499      	strb	r1, [r3, r2]
    b832:	f24c 6368 	movw	r3, #50792	; 0xc668
    b836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b83a:	781a      	ldrb	r2, [r3, #0]
    b83c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b840:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b844:	781b      	ldrb	r3, [r3, #0]
    b846:	4413      	add	r3, r2
    b848:	b2da      	uxtb	r2, r3
    b84a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b84e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b852:	701a      	strb	r2, [r3, #0]
    b854:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b85c:	781a      	ldrb	r2, [r3, #0]
    b85e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b862:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b866:	781b      	ldrb	r3, [r3, #0]
    b868:	4413      	add	r3, r2
    b86a:	b2da      	uxtb	r2, r3
    b86c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b870:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b874:	701a      	strb	r2, [r3, #0]
    b876:	f24c 3319 	movw	r3, #49945	; 0xc319
    b87a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b87e:	781b      	ldrb	r3, [r3, #0]
    b880:	3301      	adds	r3, #1
    b882:	b2da      	uxtb	r2, r3
    b884:	f24c 3319 	movw	r3, #49945	; 0xc319
    b888:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b88c:	701a      	strb	r2, [r3, #0]
    b88e:	f24c 3319 	movw	r3, #49945	; 0xc319
    b892:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b896:	781b      	ldrb	r3, [r3, #0]
    b898:	2bff      	cmp	r3, #255	; 0xff
    b89a:	d10f      	bne.n	b8bc <send_climb+0x56c>
    b89c:	f24c 3319 	movw	r3, #49945	; 0xc319
    b8a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8a4:	2200      	movs	r2, #0
    b8a6:	701a      	strb	r2, [r3, #0]
    b8a8:	e008      	b.n	b8bc <send_climb+0x56c>
    b8aa:	bf00      	nop
    b8ac:	2004c64d 	.word	0x2004c64d
    b8b0:	2004c661 	.word	0x2004c661
    b8b4:	2004c662 	.word	0x2004c662
    b8b8:	2004c663 	.word	0x2004c663
    b8bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    b8c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8c4:	781b      	ldrb	r3, [r3, #0]
    b8c6:	461a      	mov	r2, r3
    b8c8:	f24c 6368 	movw	r3, #50792	; 0xc668
    b8cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8d0:	7859      	ldrb	r1, [r3, #1]
    b8d2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b8d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8da:	5499      	strb	r1, [r3, r2]
    b8dc:	4bd1      	ldr	r3, [pc, #836]	; (bc24 <send_climb+0x8d4>)
    b8de:	781a      	ldrb	r2, [r3, #0]
    b8e0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b8e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8e8:	781b      	ldrb	r3, [r3, #0]
    b8ea:	4413      	add	r3, r2
    b8ec:	b2da      	uxtb	r2, r3
    b8ee:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b8f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8f6:	701a      	strb	r2, [r3, #0]
    b8f8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b8fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b900:	781a      	ldrb	r2, [r3, #0]
    b902:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b906:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b90a:	781b      	ldrb	r3, [r3, #0]
    b90c:	4413      	add	r3, r2
    b90e:	b2da      	uxtb	r2, r3
    b910:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b918:	701a      	strb	r2, [r3, #0]
    b91a:	f24c 3319 	movw	r3, #49945	; 0xc319
    b91e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b922:	781b      	ldrb	r3, [r3, #0]
    b924:	3301      	adds	r3, #1
    b926:	b2da      	uxtb	r2, r3
    b928:	f24c 3319 	movw	r3, #49945	; 0xc319
    b92c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b930:	701a      	strb	r2, [r3, #0]
    b932:	f24c 3319 	movw	r3, #49945	; 0xc319
    b936:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b93a:	781b      	ldrb	r3, [r3, #0]
    b93c:	2bff      	cmp	r3, #255	; 0xff
    b93e:	d105      	bne.n	b94c <send_climb+0x5fc>
    b940:	f24c 3319 	movw	r3, #49945	; 0xc319
    b944:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b948:	2200      	movs	r2, #0
    b94a:	701a      	strb	r2, [r3, #0]
    b94c:	f24c 3319 	movw	r3, #49945	; 0xc319
    b950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b954:	781b      	ldrb	r3, [r3, #0]
    b956:	461a      	mov	r2, r3
    b958:	f24c 6368 	movw	r3, #50792	; 0xc668
    b95c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b960:	7899      	ldrb	r1, [r3, #2]
    b962:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b966:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b96a:	5499      	strb	r1, [r3, r2]
    b96c:	4bae      	ldr	r3, [pc, #696]	; (bc28 <send_climb+0x8d8>)
    b96e:	781a      	ldrb	r2, [r3, #0]
    b970:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b974:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b978:	781b      	ldrb	r3, [r3, #0]
    b97a:	4413      	add	r3, r2
    b97c:	b2da      	uxtb	r2, r3
    b97e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b982:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b986:	701a      	strb	r2, [r3, #0]
    b988:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b98c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b990:	781a      	ldrb	r2, [r3, #0]
    b992:	f24c 431d 	movw	r3, #50205	; 0xc41d
    b996:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b99a:	781b      	ldrb	r3, [r3, #0]
    b99c:	4413      	add	r3, r2
    b99e:	b2da      	uxtb	r2, r3
    b9a0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    b9a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9a8:	701a      	strb	r2, [r3, #0]
    b9aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    b9ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9b2:	781b      	ldrb	r3, [r3, #0]
    b9b4:	3301      	adds	r3, #1
    b9b6:	b2da      	uxtb	r2, r3
    b9b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    b9bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9c0:	701a      	strb	r2, [r3, #0]
    b9c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    b9c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9ca:	781b      	ldrb	r3, [r3, #0]
    b9cc:	2bff      	cmp	r3, #255	; 0xff
    b9ce:	d105      	bne.n	b9dc <send_climb+0x68c>
    b9d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    b9d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9d8:	2200      	movs	r2, #0
    b9da:	701a      	strb	r2, [r3, #0]
    b9dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    b9e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9e4:	781b      	ldrb	r3, [r3, #0]
    b9e6:	461a      	mov	r2, r3
    b9e8:	f24c 6368 	movw	r3, #50792	; 0xc668
    b9ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9f0:	78d9      	ldrb	r1, [r3, #3]
    b9f2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    b9f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9fa:	5499      	strb	r1, [r3, r2]
    b9fc:	4b8b      	ldr	r3, [pc, #556]	; (bc2c <send_climb+0x8dc>)
    b9fe:	781a      	ldrb	r2, [r3, #0]
    ba00:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ba04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba08:	781b      	ldrb	r3, [r3, #0]
    ba0a:	4413      	add	r3, r2
    ba0c:	b2da      	uxtb	r2, r3
    ba0e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ba12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba16:	701a      	strb	r2, [r3, #0]
    ba18:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ba1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba20:	781a      	ldrb	r2, [r3, #0]
    ba22:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ba26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba2a:	781b      	ldrb	r3, [r3, #0]
    ba2c:	4413      	add	r3, r2
    ba2e:	b2da      	uxtb	r2, r3
    ba30:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ba34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba38:	701a      	strb	r2, [r3, #0]
    ba3a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba42:	781b      	ldrb	r3, [r3, #0]
    ba44:	3301      	adds	r3, #1
    ba46:	b2da      	uxtb	r2, r3
    ba48:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba50:	701a      	strb	r2, [r3, #0]
    ba52:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba5a:	781b      	ldrb	r3, [r3, #0]
    ba5c:	2bff      	cmp	r3, #255	; 0xff
    ba5e:	d105      	bne.n	ba6c <send_climb+0x71c>
    ba60:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba68:	2200      	movs	r2, #0
    ba6a:	701a      	strb	r2, [r3, #0]
    ba6c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ba70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba74:	781b      	ldrb	r3, [r3, #0]
    ba76:	461a      	mov	r2, r3
    ba78:	f648 33b0 	movw	r3, #35760	; 0x8bb0
    ba7c:	f2c0 0301 	movt	r3, #1
    ba80:	7819      	ldrb	r1, [r3, #0]
    ba82:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ba86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba8a:	5499      	strb	r1, [r3, r2]
    ba8c:	f648 33b0 	movw	r3, #35760	; 0x8bb0
    ba90:	f2c0 0301 	movt	r3, #1
    ba94:	781a      	ldrb	r2, [r3, #0]
    ba96:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ba9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba9e:	781b      	ldrb	r3, [r3, #0]
    baa0:	4413      	add	r3, r2
    baa2:	b2da      	uxtb	r2, r3
    baa4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    baa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baac:	701a      	strb	r2, [r3, #0]
    baae:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bab6:	781a      	ldrb	r2, [r3, #0]
    bab8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    babc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bac0:	781b      	ldrb	r3, [r3, #0]
    bac2:	4413      	add	r3, r2
    bac4:	b2da      	uxtb	r2, r3
    bac6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    baca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bace:	701a      	strb	r2, [r3, #0]
    bad0:	f24c 3319 	movw	r3, #49945	; 0xc319
    bad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bad8:	781b      	ldrb	r3, [r3, #0]
    bada:	3301      	adds	r3, #1
    badc:	b2da      	uxtb	r2, r3
    bade:	f24c 3319 	movw	r3, #49945	; 0xc319
    bae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bae6:	701a      	strb	r2, [r3, #0]
    bae8:	f24c 3319 	movw	r3, #49945	; 0xc319
    baec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baf0:	781b      	ldrb	r3, [r3, #0]
    baf2:	2bff      	cmp	r3, #255	; 0xff
    baf4:	d105      	bne.n	bb02 <send_climb+0x7b2>
    baf6:	f24c 3319 	movw	r3, #49945	; 0xc319
    bafa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bafe:	2200      	movs	r2, #0
    bb00:	701a      	strb	r2, [r3, #0]
    bb02:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb0a:	781b      	ldrb	r3, [r3, #0]
    bb0c:	461a      	mov	r2, r3
    bb0e:	f648 33b0 	movw	r3, #35760	; 0x8bb0
    bb12:	f2c0 0301 	movt	r3, #1
    bb16:	7859      	ldrb	r1, [r3, #1]
    bb18:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bb1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb20:	5499      	strb	r1, [r3, r2]
    bb22:	4b43      	ldr	r3, [pc, #268]	; (bc30 <send_climb+0x8e0>)
    bb24:	781a      	ldrb	r2, [r3, #0]
    bb26:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bb2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb2e:	781b      	ldrb	r3, [r3, #0]
    bb30:	4413      	add	r3, r2
    bb32:	b2da      	uxtb	r2, r3
    bb34:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bb38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb3c:	701a      	strb	r2, [r3, #0]
    bb3e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bb42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb46:	781a      	ldrb	r2, [r3, #0]
    bb48:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bb4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb50:	781b      	ldrb	r3, [r3, #0]
    bb52:	4413      	add	r3, r2
    bb54:	b2da      	uxtb	r2, r3
    bb56:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bb5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb5e:	701a      	strb	r2, [r3, #0]
    bb60:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb68:	781b      	ldrb	r3, [r3, #0]
    bb6a:	3301      	adds	r3, #1
    bb6c:	b2da      	uxtb	r2, r3
    bb6e:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb76:	701a      	strb	r2, [r3, #0]
    bb78:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb80:	781b      	ldrb	r3, [r3, #0]
    bb82:	2bff      	cmp	r3, #255	; 0xff
    bb84:	d105      	bne.n	bb92 <send_climb+0x842>
    bb86:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb8e:	2200      	movs	r2, #0
    bb90:	701a      	strb	r2, [r3, #0]
    bb92:	f24c 3319 	movw	r3, #49945	; 0xc319
    bb96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb9a:	781b      	ldrb	r3, [r3, #0]
    bb9c:	461a      	mov	r2, r3
    bb9e:	f648 33b0 	movw	r3, #35760	; 0x8bb0
    bba2:	f2c0 0301 	movt	r3, #1
    bba6:	7899      	ldrb	r1, [r3, #2]
    bba8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bbac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbb0:	5499      	strb	r1, [r3, r2]
    bbb2:	4b20      	ldr	r3, [pc, #128]	; (bc34 <send_climb+0x8e4>)
    bbb4:	781a      	ldrb	r2, [r3, #0]
    bbb6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bbba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbbe:	781b      	ldrb	r3, [r3, #0]
    bbc0:	4413      	add	r3, r2
    bbc2:	b2da      	uxtb	r2, r3
    bbc4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bbc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbcc:	701a      	strb	r2, [r3, #0]
    bbce:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bbd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbd6:	781a      	ldrb	r2, [r3, #0]
    bbd8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bbdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbe0:	781b      	ldrb	r3, [r3, #0]
    bbe2:	4413      	add	r3, r2
    bbe4:	b2da      	uxtb	r2, r3
    bbe6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bbea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbee:	701a      	strb	r2, [r3, #0]
    bbf0:	f24c 3319 	movw	r3, #49945	; 0xc319
    bbf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbf8:	781b      	ldrb	r3, [r3, #0]
    bbfa:	3301      	adds	r3, #1
    bbfc:	b2da      	uxtb	r2, r3
    bbfe:	f24c 3319 	movw	r3, #49945	; 0xc319
    bc02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc06:	701a      	strb	r2, [r3, #0]
    bc08:	f24c 3319 	movw	r3, #49945	; 0xc319
    bc0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc10:	781b      	ldrb	r3, [r3, #0]
    bc12:	2bff      	cmp	r3, #255	; 0xff
    bc14:	d110      	bne.n	bc38 <send_climb+0x8e8>
    bc16:	f24c 3319 	movw	r3, #49945	; 0xc319
    bc1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc1e:	2200      	movs	r2, #0
    bc20:	701a      	strb	r2, [r3, #0]
    bc22:	e009      	b.n	bc38 <send_climb+0x8e8>
    bc24:	2004c669 	.word	0x2004c669
    bc28:	2004c66a 	.word	0x2004c66a
    bc2c:	2004c66b 	.word	0x2004c66b
    bc30:	00018bb1 	.word	0x00018bb1
    bc34:	00018bb2 	.word	0x00018bb2
    bc38:	f24c 3319 	movw	r3, #49945	; 0xc319
    bc3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc40:	781b      	ldrb	r3, [r3, #0]
    bc42:	461a      	mov	r2, r3
    bc44:	f648 33b0 	movw	r3, #35760	; 0x8bb0
    bc48:	f2c0 0301 	movt	r3, #1
    bc4c:	78d9      	ldrb	r1, [r3, #3]
    bc4e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bc52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc56:	5499      	strb	r1, [r3, r2]
    bc58:	4b79      	ldr	r3, [pc, #484]	; (be40 <send_climb+0xaf0>)
    bc5a:	781a      	ldrb	r2, [r3, #0]
    bc5c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bc60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc64:	781b      	ldrb	r3, [r3, #0]
    bc66:	4413      	add	r3, r2
    bc68:	b2da      	uxtb	r2, r3
    bc6a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bc6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc72:	701a      	strb	r2, [r3, #0]
    bc74:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bc78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc7c:	781a      	ldrb	r2, [r3, #0]
    bc7e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bc82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc86:	781b      	ldrb	r3, [r3, #0]
    bc88:	4413      	add	r3, r2
    bc8a:	b2da      	uxtb	r2, r3
    bc8c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bc90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc94:	701a      	strb	r2, [r3, #0]
    bc96:	f24c 3319 	movw	r3, #49945	; 0xc319
    bc9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc9e:	781b      	ldrb	r3, [r3, #0]
    bca0:	3301      	adds	r3, #1
    bca2:	b2da      	uxtb	r2, r3
    bca4:	f24c 3319 	movw	r3, #49945	; 0xc319
    bca8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcac:	701a      	strb	r2, [r3, #0]
    bcae:	f24c 3319 	movw	r3, #49945	; 0xc319
    bcb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcb6:	781b      	ldrb	r3, [r3, #0]
    bcb8:	2bff      	cmp	r3, #255	; 0xff
    bcba:	d105      	bne.n	bcc8 <send_climb+0x978>
    bcbc:	f24c 3319 	movw	r3, #49945	; 0xc319
    bcc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcc4:	2200      	movs	r2, #0
    bcc6:	701a      	strb	r2, [r3, #0]
    bcc8:	f24c 3319 	movw	r3, #49945	; 0xc319
    bccc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcd0:	781b      	ldrb	r3, [r3, #0]
    bcd2:	461a      	mov	r2, r3
    bcd4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bcd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcdc:	7819      	ldrb	r1, [r3, #0]
    bcde:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bce2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bce6:	5499      	strb	r1, [r3, r2]
    bce8:	f24c 3319 	movw	r3, #49945	; 0xc319
    bcec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcf0:	781b      	ldrb	r3, [r3, #0]
    bcf2:	3301      	adds	r3, #1
    bcf4:	b2da      	uxtb	r2, r3
    bcf6:	f24c 3319 	movw	r3, #49945	; 0xc319
    bcfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcfe:	701a      	strb	r2, [r3, #0]
    bd00:	f24c 3319 	movw	r3, #49945	; 0xc319
    bd04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd08:	781b      	ldrb	r3, [r3, #0]
    bd0a:	2bff      	cmp	r3, #255	; 0xff
    bd0c:	d105      	bne.n	bd1a <send_climb+0x9ca>
    bd0e:	f24c 3319 	movw	r3, #49945	; 0xc319
    bd12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd16:	2200      	movs	r2, #0
    bd18:	701a      	strb	r2, [r3, #0]
    bd1a:	f24c 3319 	movw	r3, #49945	; 0xc319
    bd1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd22:	781b      	ldrb	r3, [r3, #0]
    bd24:	461a      	mov	r2, r3
    bd26:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bd2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd2e:	7819      	ldrb	r1, [r3, #0]
    bd30:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bd34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd38:	5499      	strb	r1, [r3, r2]
    bd3a:	f24c 3319 	movw	r3, #49945	; 0xc319
    bd3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd42:	781b      	ldrb	r3, [r3, #0]
    bd44:	3301      	adds	r3, #1
    bd46:	b2da      	uxtb	r2, r3
    bd48:	f24c 3319 	movw	r3, #49945	; 0xc319
    bd4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd50:	701a      	strb	r2, [r3, #0]
    bd52:	f24c 3319 	movw	r3, #49945	; 0xc319
    bd56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd5a:	781b      	ldrb	r3, [r3, #0]
    bd5c:	2bff      	cmp	r3, #255	; 0xff
    bd5e:	d105      	bne.n	bd6c <send_climb+0xa1c>
    bd60:	f24c 3319 	movw	r3, #49945	; 0xc319
    bd64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd68:	2200      	movs	r2, #0
    bd6a:	701a      	strb	r2, [r3, #0]
    bd6c:	f242 0339 	movw	r3, #8249	; 0x2039
    bd70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bd74:	781b      	ldrb	r3, [r3, #0]
    bd76:	b2db      	uxtb	r3, r3
    bd78:	f003 0310 	and.w	r3, r3, #16
    bd7c:	2b00      	cmp	r3, #0
    bd7e:	d15a      	bne.n	be36 <send_climb+0xae6>
    bd80:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bd84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd88:	781b      	ldrb	r3, [r3, #0]
    bd8a:	b2db      	uxtb	r3, r3
    bd8c:	461a      	mov	r2, r3
    bd8e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bd92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd96:	5c9a      	ldrb	r2, [r3, r2]
    bd98:	f24c 431b 	movw	r3, #50203	; 0xc41b
    bd9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bda0:	701a      	strb	r2, [r3, #0]
    bda2:	f24c 431c 	movw	r3, #50204	; 0xc41c
    bda6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdaa:	2200      	movs	r2, #0
    bdac:	701a      	strb	r2, [r3, #0]
    bdae:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bdb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdb6:	781b      	ldrb	r3, [r3, #0]
    bdb8:	b2db      	uxtb	r3, r3
    bdba:	3301      	adds	r3, #1
    bdbc:	b2da      	uxtb	r2, r3
    bdbe:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bdc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdc6:	701a      	strb	r2, [r3, #0]
    bdc8:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bdcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdd0:	781b      	ldrb	r3, [r3, #0]
    bdd2:	b2db      	uxtb	r3, r3
    bdd4:	2bff      	cmp	r3, #255	; 0xff
    bdd6:	d105      	bne.n	bde4 <send_climb+0xa94>
    bdd8:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bde0:	2200      	movs	r2, #0
    bde2:	701a      	strb	r2, [r3, #0]
    bde4:	f242 0338 	movw	r3, #8248	; 0x2038
    bde8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bdec:	f242 0238 	movw	r2, #8248	; 0x2038
    bdf0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bdf4:	7812      	ldrb	r2, [r2, #0]
    bdf6:	b2d2      	uxtb	r2, r2
    bdf8:	f042 0201 	orr.w	r2, r2, #1
    bdfc:	b2d2      	uxtb	r2, r2
    bdfe:	701a      	strb	r2, [r3, #0]
    be00:	f242 0339 	movw	r3, #8249	; 0x2039
    be04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be08:	f242 0239 	movw	r2, #8249	; 0x2039
    be0c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    be10:	7812      	ldrb	r2, [r2, #0]
    be12:	b2d2      	uxtb	r2, r2
    be14:	f042 0210 	orr.w	r2, r2, #16
    be18:	b2d2      	uxtb	r2, r2
    be1a:	701a      	strb	r2, [r3, #0]
    be1c:	e00b      	b.n	be36 <send_climb+0xae6>
    be1e:	f24c 3318 	movw	r3, #49944	; 0xc318
    be22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be26:	781b      	ldrb	r3, [r3, #0]
    be28:	3301      	adds	r3, #1
    be2a:	b2da      	uxtb	r2, r3
    be2c:	f24c 3318 	movw	r3, #49944	; 0xc318
    be30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be34:	701a      	strb	r2, [r3, #0]
}
    be36:	46bd      	mov	sp, r7
    be38:	f85d 7b04 	ldr.w	r7, [sp], #4
    be3c:	4770      	bx	lr
    be3e:	bf00      	nop
    be40:	00018bb3 	.word	0x00018bb3

0000be44 <send_mode>:
void send_mode(void){  //5000ms
    be44:	b480      	push	{r7}
    be46:	af00      	add	r7, sp, #0
  if(!boot)
    be48:	f240 533d 	movw	r3, #1341	; 0x53d
    be4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    be50:	781b      	ldrb	r3, [r3, #0]
    be52:	2b00      	cmp	r3, #0
    be54:	f040 82ce 	bne.w	c3f4 <send_mode+0x5b0>
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    be58:	f24c 3311 	movw	r3, #49937	; 0xc311
    be5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be60:	781a      	ldrb	r2, [r3, #0]
    be62:	f248 531f 	movw	r3, #34079	; 0x851f
    be66:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    be6a:	fba3 1302 	umull	r1, r3, r3, r2
    be6e:	091b      	lsrs	r3, r3, #4
    be70:	2132      	movs	r1, #50	; 0x32
    be72:	fb01 f303 	mul.w	r3, r1, r3
    be76:	1ad3      	subs	r3, r2, r3
    be78:	b2db      	uxtb	r3, r3
    be7a:	2b09      	cmp	r3, #9
    be7c:	f040 82ba 	bne.w	c3f4 <send_mode+0x5b0>
    be80:	f24c 3319 	movw	r3, #49945	; 0xc319
    be84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be88:	781a      	ldrb	r2, [r3, #0]
    be8a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    be8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be92:	781b      	ldrb	r3, [r3, #0]
    be94:	b2db      	uxtb	r3, r3
    be96:	429a      	cmp	r2, r3
    be98:	d313      	bcc.n	bec2 <send_mode+0x7e>
    be9a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    be9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bea2:	781b      	ldrb	r3, [r3, #0]
    bea4:	b2db      	uxtb	r3, r3
    bea6:	461a      	mov	r2, r3
    bea8:	f24c 3319 	movw	r3, #49945	; 0xc319
    beac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beb0:	781b      	ldrb	r3, [r3, #0]
    beb2:	1ad3      	subs	r3, r2, r3
    beb4:	33ff      	adds	r3, #255	; 0xff
    beb6:	2b09      	cmp	r3, #9
    beb8:	bfd4      	ite	le
    beba:	2300      	movle	r3, #0
    bebc:	2301      	movgt	r3, #1
    bebe:	b2db      	uxtb	r3, r3
    bec0:	e011      	b.n	bee6 <send_mode+0xa2>
    bec2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    bec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beca:	781b      	ldrb	r3, [r3, #0]
    becc:	b2db      	uxtb	r3, r3
    bece:	461a      	mov	r2, r3
    bed0:	f24c 3319 	movw	r3, #49945	; 0xc319
    bed4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bed8:	781b      	ldrb	r3, [r3, #0]
    beda:	1ad3      	subs	r3, r2, r3
    bedc:	2b09      	cmp	r3, #9
    bede:	bfd4      	ite	le
    bee0:	2300      	movle	r3, #0
    bee2:	2301      	movgt	r3, #1
    bee4:	b2db      	uxtb	r3, r3
    bee6:	2b00      	cmp	r3, #0
    bee8:	f000 8278 	beq.w	c3dc <send_mode+0x598>
    beec:	f24c 3319 	movw	r3, #49945	; 0xc319
    bef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bef4:	781b      	ldrb	r3, [r3, #0]
    bef6:	461a      	mov	r2, r3
    bef8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    befc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf00:	2105      	movs	r1, #5
    bf02:	5499      	strb	r1, [r3, r2]
    bf04:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf0c:	781b      	ldrb	r3, [r3, #0]
    bf0e:	3301      	adds	r3, #1
    bf10:	b2da      	uxtb	r2, r3
    bf12:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf1a:	701a      	strb	r2, [r3, #0]
    bf1c:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf24:	781b      	ldrb	r3, [r3, #0]
    bf26:	2bff      	cmp	r3, #255	; 0xff
    bf28:	d105      	bne.n	bf36 <send_mode+0xf2>
    bf2a:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf32:	2200      	movs	r2, #0
    bf34:	701a      	strb	r2, [r3, #0]
    bf36:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf3e:	781b      	ldrb	r3, [r3, #0]
    bf40:	461a      	mov	r2, r3
    bf42:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bf46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf4a:	210b      	movs	r1, #11
    bf4c:	5499      	strb	r1, [r3, r2]
    bf4e:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf56:	781b      	ldrb	r3, [r3, #0]
    bf58:	3301      	adds	r3, #1
    bf5a:	b2da      	uxtb	r2, r3
    bf5c:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf64:	701a      	strb	r2, [r3, #0]
    bf66:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf6e:	781b      	ldrb	r3, [r3, #0]
    bf70:	2bff      	cmp	r3, #255	; 0xff
    bf72:	d105      	bne.n	bf80 <send_mode+0x13c>
    bf74:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf7c:	2200      	movs	r2, #0
    bf7e:	701a      	strb	r2, [r3, #0]
    bf80:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bf84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf88:	220b      	movs	r2, #11
    bf8a:	701a      	strb	r2, [r3, #0]
    bf8c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bf90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf94:	220b      	movs	r2, #11
    bf96:	701a      	strb	r2, [r3, #0]
    bf98:	f24c 3319 	movw	r3, #49945	; 0xc319
    bf9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfa0:	781b      	ldrb	r3, [r3, #0]
    bfa2:	461a      	mov	r2, r3
    bfa4:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    bfa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfac:	7819      	ldrb	r1, [r3, #0]
    bfae:	f24c 331c 	movw	r3, #49948	; 0xc31c
    bfb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfb6:	5499      	strb	r1, [r3, r2]
    bfb8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bfbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfc0:	781a      	ldrb	r2, [r3, #0]
    bfc2:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    bfc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfca:	781b      	ldrb	r3, [r3, #0]
    bfcc:	4413      	add	r3, r2
    bfce:	b2da      	uxtb	r2, r3
    bfd0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bfd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfd8:	701a      	strb	r2, [r3, #0]
    bfda:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bfde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfe2:	781a      	ldrb	r2, [r3, #0]
    bfe4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    bfe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfec:	781b      	ldrb	r3, [r3, #0]
    bfee:	4413      	add	r3, r2
    bff0:	b2da      	uxtb	r2, r3
    bff2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    bff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bffa:	701a      	strb	r2, [r3, #0]
    bffc:	f24c 3319 	movw	r3, #49945	; 0xc319
    c000:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c004:	781b      	ldrb	r3, [r3, #0]
    c006:	3301      	adds	r3, #1
    c008:	b2da      	uxtb	r2, r3
    c00a:	f24c 3319 	movw	r3, #49945	; 0xc319
    c00e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c012:	701a      	strb	r2, [r3, #0]
    c014:	f24c 3319 	movw	r3, #49945	; 0xc319
    c018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c01c:	781b      	ldrb	r3, [r3, #0]
    c01e:	2bff      	cmp	r3, #255	; 0xff
    c020:	d105      	bne.n	c02e <send_mode+0x1ea>
    c022:	f24c 3319 	movw	r3, #49945	; 0xc319
    c026:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c02a:	2200      	movs	r2, #0
    c02c:	701a      	strb	r2, [r3, #0]
    c02e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c036:	781b      	ldrb	r3, [r3, #0]
    c038:	461a      	mov	r2, r3
    c03a:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    c03e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c042:	7819      	ldrb	r1, [r3, #0]
    c044:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c04c:	5499      	strb	r1, [r3, r2]
    c04e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c056:	781a      	ldrb	r2, [r3, #0]
    c058:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    c05c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c060:	781b      	ldrb	r3, [r3, #0]
    c062:	4413      	add	r3, r2
    c064:	b2da      	uxtb	r2, r3
    c066:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c06a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c06e:	701a      	strb	r2, [r3, #0]
    c070:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c078:	781a      	ldrb	r2, [r3, #0]
    c07a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c07e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c082:	781b      	ldrb	r3, [r3, #0]
    c084:	4413      	add	r3, r2
    c086:	b2da      	uxtb	r2, r3
    c088:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c08c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c090:	701a      	strb	r2, [r3, #0]
    c092:	f24c 3319 	movw	r3, #49945	; 0xc319
    c096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c09a:	781b      	ldrb	r3, [r3, #0]
    c09c:	3301      	adds	r3, #1
    c09e:	b2da      	uxtb	r2, r3
    c0a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    c0a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0a8:	701a      	strb	r2, [r3, #0]
    c0aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    c0ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0b2:	781b      	ldrb	r3, [r3, #0]
    c0b4:	2bff      	cmp	r3, #255	; 0xff
    c0b6:	d105      	bne.n	c0c4 <send_mode+0x280>
    c0b8:	f24c 3319 	movw	r3, #49945	; 0xc319
    c0bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0c0:	2200      	movs	r2, #0
    c0c2:	701a      	strb	r2, [r3, #0]
    c0c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    c0c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0cc:	781b      	ldrb	r3, [r3, #0]
    c0ce:	461a      	mov	r2, r3
    c0d0:	f64c 132c 	movw	r3, #51500	; 0xc92c
    c0d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0d8:	7819      	ldrb	r1, [r3, #0]
    c0da:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c0de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0e2:	5499      	strb	r1, [r3, r2]
    c0e4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c0e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0ec:	781a      	ldrb	r2, [r3, #0]
    c0ee:	f64c 132c 	movw	r3, #51500	; 0xc92c
    c0f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0f6:	781b      	ldrb	r3, [r3, #0]
    c0f8:	4413      	add	r3, r2
    c0fa:	b2da      	uxtb	r2, r3
    c0fc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c100:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c104:	701a      	strb	r2, [r3, #0]
    c106:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c10a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c10e:	781a      	ldrb	r2, [r3, #0]
    c110:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c118:	781b      	ldrb	r3, [r3, #0]
    c11a:	4413      	add	r3, r2
    c11c:	b2da      	uxtb	r2, r3
    c11e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c126:	701a      	strb	r2, [r3, #0]
    c128:	f24c 3319 	movw	r3, #49945	; 0xc319
    c12c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c130:	781b      	ldrb	r3, [r3, #0]
    c132:	3301      	adds	r3, #1
    c134:	b2da      	uxtb	r2, r3
    c136:	f24c 3319 	movw	r3, #49945	; 0xc319
    c13a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c13e:	701a      	strb	r2, [r3, #0]
    c140:	f24c 3319 	movw	r3, #49945	; 0xc319
    c144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c148:	781b      	ldrb	r3, [r3, #0]
    c14a:	2bff      	cmp	r3, #255	; 0xff
    c14c:	d105      	bne.n	c15a <send_mode+0x316>
    c14e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c156:	2200      	movs	r2, #0
    c158:	701a      	strb	r2, [r3, #0]
    c15a:	f24c 3319 	movw	r3, #49945	; 0xc319
    c15e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c162:	781b      	ldrb	r3, [r3, #0]
    c164:	461a      	mov	r2, r3
    c166:	f24c 3303 	movw	r3, #49923	; 0xc303
    c16a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c16e:	7819      	ldrb	r1, [r3, #0]
    c170:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c178:	5499      	strb	r1, [r3, r2]
    c17a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c17e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c182:	781a      	ldrb	r2, [r3, #0]
    c184:	f24c 3303 	movw	r3, #49923	; 0xc303
    c188:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c18c:	781b      	ldrb	r3, [r3, #0]
    c18e:	4413      	add	r3, r2
    c190:	b2da      	uxtb	r2, r3
    c192:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c19a:	701a      	strb	r2, [r3, #0]
    c19c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c1a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1a4:	781a      	ldrb	r2, [r3, #0]
    c1a6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c1aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1ae:	781b      	ldrb	r3, [r3, #0]
    c1b0:	4413      	add	r3, r2
    c1b2:	b2da      	uxtb	r2, r3
    c1b4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c1b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1bc:	701a      	strb	r2, [r3, #0]
    c1be:	f24c 3319 	movw	r3, #49945	; 0xc319
    c1c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1c6:	781b      	ldrb	r3, [r3, #0]
    c1c8:	3301      	adds	r3, #1
    c1ca:	b2da      	uxtb	r2, r3
    c1cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    c1d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1d4:	701a      	strb	r2, [r3, #0]
    c1d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    c1da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1de:	781b      	ldrb	r3, [r3, #0]
    c1e0:	2bff      	cmp	r3, #255	; 0xff
    c1e2:	d105      	bne.n	c1f0 <send_mode+0x3ac>
    c1e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    c1e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1ec:	2200      	movs	r2, #0
    c1ee:	701a      	strb	r2, [r3, #0]
    c1f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    c1f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1f8:	781b      	ldrb	r3, [r3, #0]
    c1fa:	461a      	mov	r2, r3
    c1fc:	f240 533c 	movw	r3, #1340	; 0x53c
    c200:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c204:	7819      	ldrb	r1, [r3, #0]
    c206:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c20a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c20e:	5499      	strb	r1, [r3, r2]
    c210:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c218:	781a      	ldrb	r2, [r3, #0]
    c21a:	f240 533c 	movw	r3, #1340	; 0x53c
    c21e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c222:	781b      	ldrb	r3, [r3, #0]
    c224:	4413      	add	r3, r2
    c226:	b2da      	uxtb	r2, r3
    c228:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c22c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c230:	701a      	strb	r2, [r3, #0]
    c232:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c236:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c23a:	781a      	ldrb	r2, [r3, #0]
    c23c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c240:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c244:	781b      	ldrb	r3, [r3, #0]
    c246:	4413      	add	r3, r2
    c248:	b2da      	uxtb	r2, r3
    c24a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c24e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c252:	701a      	strb	r2, [r3, #0]
    c254:	f24c 3319 	movw	r3, #49945	; 0xc319
    c258:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c25c:	781b      	ldrb	r3, [r3, #0]
    c25e:	3301      	adds	r3, #1
    c260:	b2da      	uxtb	r2, r3
    c262:	f24c 3319 	movw	r3, #49945	; 0xc319
    c266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c26a:	701a      	strb	r2, [r3, #0]
    c26c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c270:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c274:	781b      	ldrb	r3, [r3, #0]
    c276:	2bff      	cmp	r3, #255	; 0xff
    c278:	d105      	bne.n	c286 <send_mode+0x442>
    c27a:	f24c 3319 	movw	r3, #49945	; 0xc319
    c27e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c282:	2200      	movs	r2, #0
    c284:	701a      	strb	r2, [r3, #0]
    c286:	f24c 3319 	movw	r3, #49945	; 0xc319
    c28a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c28e:	781b      	ldrb	r3, [r3, #0]
    c290:	461a      	mov	r2, r3
    c292:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c296:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c29a:	7819      	ldrb	r1, [r3, #0]
    c29c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c2a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2a4:	5499      	strb	r1, [r3, r2]
    c2a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    c2aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2ae:	781b      	ldrb	r3, [r3, #0]
    c2b0:	3301      	adds	r3, #1
    c2b2:	b2da      	uxtb	r2, r3
    c2b4:	f24c 3319 	movw	r3, #49945	; 0xc319
    c2b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2bc:	701a      	strb	r2, [r3, #0]
    c2be:	f24c 3319 	movw	r3, #49945	; 0xc319
    c2c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2c6:	781b      	ldrb	r3, [r3, #0]
    c2c8:	2bff      	cmp	r3, #255	; 0xff
    c2ca:	d105      	bne.n	c2d8 <send_mode+0x494>
    c2cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    c2d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2d4:	2200      	movs	r2, #0
    c2d6:	701a      	strb	r2, [r3, #0]
    c2d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    c2dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2e0:	781b      	ldrb	r3, [r3, #0]
    c2e2:	461a      	mov	r2, r3
    c2e4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c2e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2ec:	7819      	ldrb	r1, [r3, #0]
    c2ee:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c2f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2f6:	5499      	strb	r1, [r3, r2]
    c2f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    c2fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c300:	781b      	ldrb	r3, [r3, #0]
    c302:	3301      	adds	r3, #1
    c304:	b2da      	uxtb	r2, r3
    c306:	f24c 3319 	movw	r3, #49945	; 0xc319
    c30a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c30e:	701a      	strb	r2, [r3, #0]
    c310:	f24c 3319 	movw	r3, #49945	; 0xc319
    c314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c318:	781b      	ldrb	r3, [r3, #0]
    c31a:	2bff      	cmp	r3, #255	; 0xff
    c31c:	d105      	bne.n	c32a <send_mode+0x4e6>
    c31e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c322:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c326:	2200      	movs	r2, #0
    c328:	701a      	strb	r2, [r3, #0]
    c32a:	f242 0339 	movw	r3, #8249	; 0x2039
    c32e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c332:	781b      	ldrb	r3, [r3, #0]
    c334:	b2db      	uxtb	r3, r3
    c336:	f003 0310 	and.w	r3, r3, #16
    c33a:	2b00      	cmp	r3, #0
    c33c:	d15a      	bne.n	c3f4 <send_mode+0x5b0>
    c33e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c346:	781b      	ldrb	r3, [r3, #0]
    c348:	b2db      	uxtb	r3, r3
    c34a:	461a      	mov	r2, r3
    c34c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c350:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c354:	5c9a      	ldrb	r2, [r3, r2]
    c356:	f24c 431b 	movw	r3, #50203	; 0xc41b
    c35a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c35e:	701a      	strb	r2, [r3, #0]
    c360:	f24c 431c 	movw	r3, #50204	; 0xc41c
    c364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c368:	2200      	movs	r2, #0
    c36a:	701a      	strb	r2, [r3, #0]
    c36c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c374:	781b      	ldrb	r3, [r3, #0]
    c376:	b2db      	uxtb	r3, r3
    c378:	3301      	adds	r3, #1
    c37a:	b2da      	uxtb	r2, r3
    c37c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c380:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c384:	701a      	strb	r2, [r3, #0]
    c386:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c38a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c38e:	781b      	ldrb	r3, [r3, #0]
    c390:	b2db      	uxtb	r3, r3
    c392:	2bff      	cmp	r3, #255	; 0xff
    c394:	d105      	bne.n	c3a2 <send_mode+0x55e>
    c396:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c39a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c39e:	2200      	movs	r2, #0
    c3a0:	701a      	strb	r2, [r3, #0]
    c3a2:	f242 0338 	movw	r3, #8248	; 0x2038
    c3a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3aa:	f242 0238 	movw	r2, #8248	; 0x2038
    c3ae:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c3b2:	7812      	ldrb	r2, [r2, #0]
    c3b4:	b2d2      	uxtb	r2, r2
    c3b6:	f042 0201 	orr.w	r2, r2, #1
    c3ba:	b2d2      	uxtb	r2, r2
    c3bc:	701a      	strb	r2, [r3, #0]
    c3be:	f242 0339 	movw	r3, #8249	; 0x2039
    c3c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c3c6:	f242 0239 	movw	r2, #8249	; 0x2039
    c3ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c3ce:	7812      	ldrb	r2, [r2, #0]
    c3d0:	b2d2      	uxtb	r2, r2
    c3d2:	f042 0210 	orr.w	r2, r2, #16
    c3d6:	b2d2      	uxtb	r2, r2
    c3d8:	701a      	strb	r2, [r3, #0]
    c3da:	e00b      	b.n	c3f4 <send_mode+0x5b0>
    c3dc:	f24c 3318 	movw	r3, #49944	; 0xc318
    c3e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3e4:	781b      	ldrb	r3, [r3, #0]
    c3e6:	3301      	adds	r3, #1
    c3e8:	b2da      	uxtb	r2, r3
    c3ea:	f24c 3318 	movw	r3, #49944	; 0xc318
    c3ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3f2:	701a      	strb	r2, [r3, #0]
}
    c3f4:	46bd      	mov	sp, r7
    c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    c3fa:	4770      	bx	lr

0000c3fc <send_debug>:
void send_debug(void){  //5000ms
    c3fc:	b480      	push	{r7}
    c3fe:	af00      	add	r7, sp, #0
  if(!boot)
    c400:	f240 533d 	movw	r3, #1341	; 0x53d
    c404:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c408:	781b      	ldrb	r3, [r3, #0]
    c40a:	2b00      	cmp	r3, #0
    c40c:	f040 82cf 	bne.w	c9ae <send_debug+0x5b2>
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    c410:	f24c 3311 	movw	r3, #49937	; 0xc311
    c414:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c418:	781a      	ldrb	r2, [r3, #0]
    c41a:	f248 531f 	movw	r3, #34079	; 0x851f
    c41e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c422:	fba3 1302 	umull	r1, r3, r3, r2
    c426:	091b      	lsrs	r3, r3, #4
    c428:	2132      	movs	r1, #50	; 0x32
    c42a:	fb01 f303 	mul.w	r3, r1, r3
    c42e:	1ad3      	subs	r3, r2, r3
    c430:	b2db      	uxtb	r3, r3
    c432:	2b1d      	cmp	r3, #29
    c434:	f040 82bb 	bne.w	c9ae <send_debug+0x5b2>
    c438:	f24c 3319 	movw	r3, #49945	; 0xc319
    c43c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c440:	781a      	ldrb	r2, [r3, #0]
    c442:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c44a:	781b      	ldrb	r3, [r3, #0]
    c44c:	b2db      	uxtb	r3, r3
    c44e:	429a      	cmp	r2, r3
    c450:	d313      	bcc.n	c47a <send_debug+0x7e>
    c452:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c45a:	781b      	ldrb	r3, [r3, #0]
    c45c:	b2db      	uxtb	r3, r3
    c45e:	461a      	mov	r2, r3
    c460:	f24c 3319 	movw	r3, #49945	; 0xc319
    c464:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c468:	781b      	ldrb	r3, [r3, #0]
    c46a:	1ad3      	subs	r3, r2, r3
    c46c:	33ff      	adds	r3, #255	; 0xff
    c46e:	2b09      	cmp	r3, #9
    c470:	bfd4      	ite	le
    c472:	2300      	movle	r3, #0
    c474:	2301      	movgt	r3, #1
    c476:	b2db      	uxtb	r3, r3
    c478:	e011      	b.n	c49e <send_debug+0xa2>
    c47a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c47e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c482:	781b      	ldrb	r3, [r3, #0]
    c484:	b2db      	uxtb	r3, r3
    c486:	461a      	mov	r2, r3
    c488:	f24c 3319 	movw	r3, #49945	; 0xc319
    c48c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c490:	781b      	ldrb	r3, [r3, #0]
    c492:	1ad3      	subs	r3, r2, r3
    c494:	2b09      	cmp	r3, #9
    c496:	bfd4      	ite	le
    c498:	2300      	movle	r3, #0
    c49a:	2301      	movgt	r3, #1
    c49c:	b2db      	uxtb	r3, r3
    c49e:	2b00      	cmp	r3, #0
    c4a0:	f000 8279 	beq.w	c996 <send_debug+0x59a>
    c4a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    c4a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ac:	781b      	ldrb	r3, [r3, #0]
    c4ae:	461a      	mov	r2, r3
    c4b0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c4b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4b8:	2105      	movs	r1, #5
    c4ba:	5499      	strb	r1, [r3, r2]
    c4bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    c4c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4c4:	781b      	ldrb	r3, [r3, #0]
    c4c6:	3301      	adds	r3, #1
    c4c8:	b2da      	uxtb	r2, r3
    c4ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    c4ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4d2:	701a      	strb	r2, [r3, #0]
    c4d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    c4d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4dc:	781b      	ldrb	r3, [r3, #0]
    c4de:	2bff      	cmp	r3, #255	; 0xff
    c4e0:	d105      	bne.n	c4ee <send_debug+0xf2>
    c4e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    c4e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ea:	2200      	movs	r2, #0
    c4ec:	701a      	strb	r2, [r3, #0]
    c4ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    c4f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4f6:	781b      	ldrb	r3, [r3, #0]
    c4f8:	461a      	mov	r2, r3
    c4fa:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c4fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c502:	210d      	movs	r1, #13
    c504:	5499      	strb	r1, [r3, r2]
    c506:	f24c 3319 	movw	r3, #49945	; 0xc319
    c50a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c50e:	781b      	ldrb	r3, [r3, #0]
    c510:	3301      	adds	r3, #1
    c512:	b2da      	uxtb	r2, r3
    c514:	f24c 3319 	movw	r3, #49945	; 0xc319
    c518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c51c:	701a      	strb	r2, [r3, #0]
    c51e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c526:	781b      	ldrb	r3, [r3, #0]
    c528:	2bff      	cmp	r3, #255	; 0xff
    c52a:	d105      	bne.n	c538 <send_debug+0x13c>
    c52c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c530:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c534:	2200      	movs	r2, #0
    c536:	701a      	strb	r2, [r3, #0]
    c538:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c53c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c540:	220d      	movs	r2, #13
    c542:	701a      	strb	r2, [r3, #0]
    c544:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c54c:	220d      	movs	r2, #13
    c54e:	701a      	strb	r2, [r3, #0]
    c550:	f24c 3319 	movw	r3, #49945	; 0xc319
    c554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c558:	781b      	ldrb	r3, [r3, #0]
    c55a:	461a      	mov	r2, r3
    c55c:	f24c 434f 	movw	r3, #50255	; 0xc44f
    c560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c564:	781b      	ldrb	r3, [r3, #0]
    c566:	b2d9      	uxtb	r1, r3
    c568:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c56c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c570:	5499      	strb	r1, [r3, r2]
    c572:	f24c 434f 	movw	r3, #50255	; 0xc44f
    c576:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c57a:	781a      	ldrb	r2, [r3, #0]
    c57c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c584:	781b      	ldrb	r3, [r3, #0]
    c586:	4413      	add	r3, r2
    c588:	b2da      	uxtb	r2, r3
    c58a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c58e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c592:	701a      	strb	r2, [r3, #0]
    c594:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c598:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c59c:	781a      	ldrb	r2, [r3, #0]
    c59e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c5a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5a6:	781b      	ldrb	r3, [r3, #0]
    c5a8:	4413      	add	r3, r2
    c5aa:	b2da      	uxtb	r2, r3
    c5ac:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c5b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5b4:	701a      	strb	r2, [r3, #0]
    c5b6:	f24c 3319 	movw	r3, #49945	; 0xc319
    c5ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5be:	781b      	ldrb	r3, [r3, #0]
    c5c0:	3301      	adds	r3, #1
    c5c2:	b2da      	uxtb	r2, r3
    c5c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    c5c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5cc:	701a      	strb	r2, [r3, #0]
    c5ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    c5d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5d6:	781b      	ldrb	r3, [r3, #0]
    c5d8:	2bff      	cmp	r3, #255	; 0xff
    c5da:	d105      	bne.n	c5e8 <send_debug+0x1ec>
    c5dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    c5e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5e4:	2200      	movs	r2, #0
    c5e6:	701a      	strb	r2, [r3, #0]
    c5e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    c5ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5f0:	781b      	ldrb	r3, [r3, #0]
    c5f2:	461a      	mov	r2, r3
    c5f4:	f24c 4350 	movw	r3, #50256	; 0xc450
    c5f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5fc:	7819      	ldrb	r1, [r3, #0]
    c5fe:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c606:	5499      	strb	r1, [r3, r2]
    c608:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c60c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c610:	781a      	ldrb	r2, [r3, #0]
    c612:	f24c 4350 	movw	r3, #50256	; 0xc450
    c616:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c61a:	781b      	ldrb	r3, [r3, #0]
    c61c:	4413      	add	r3, r2
    c61e:	b2da      	uxtb	r2, r3
    c620:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c624:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c628:	701a      	strb	r2, [r3, #0]
    c62a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c62e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c632:	781a      	ldrb	r2, [r3, #0]
    c634:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c638:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c63c:	781b      	ldrb	r3, [r3, #0]
    c63e:	4413      	add	r3, r2
    c640:	b2da      	uxtb	r2, r3
    c642:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c646:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c64a:	701a      	strb	r2, [r3, #0]
    c64c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c650:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c654:	781b      	ldrb	r3, [r3, #0]
    c656:	3301      	adds	r3, #1
    c658:	b2da      	uxtb	r2, r3
    c65a:	f24c 3319 	movw	r3, #49945	; 0xc319
    c65e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c662:	701a      	strb	r2, [r3, #0]
    c664:	f24c 3319 	movw	r3, #49945	; 0xc319
    c668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c66c:	781b      	ldrb	r3, [r3, #0]
    c66e:	2bff      	cmp	r3, #255	; 0xff
    c670:	d105      	bne.n	c67e <send_debug+0x282>
    c672:	f24c 3319 	movw	r3, #49945	; 0xc319
    c676:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c67a:	2200      	movs	r2, #0
    c67c:	701a      	strb	r2, [r3, #0]
    c67e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c686:	781b      	ldrb	r3, [r3, #0]
    c688:	461a      	mov	r2, r3
    c68a:	f24c 3318 	movw	r3, #49944	; 0xc318
    c68e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c692:	7819      	ldrb	r1, [r3, #0]
    c694:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c69c:	5499      	strb	r1, [r3, r2]
    c69e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c6a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6a6:	781a      	ldrb	r2, [r3, #0]
    c6a8:	f24c 3318 	movw	r3, #49944	; 0xc318
    c6ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6b0:	781b      	ldrb	r3, [r3, #0]
    c6b2:	4413      	add	r3, r2
    c6b4:	b2da      	uxtb	r2, r3
    c6b6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c6ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6be:	701a      	strb	r2, [r3, #0]
    c6c0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c6c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6c8:	781a      	ldrb	r2, [r3, #0]
    c6ca:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c6ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6d2:	781b      	ldrb	r3, [r3, #0]
    c6d4:	4413      	add	r3, r2
    c6d6:	b2da      	uxtb	r2, r3
    c6d8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c6dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6e0:	701a      	strb	r2, [r3, #0]
    c6e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    c6e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6ea:	781b      	ldrb	r3, [r3, #0]
    c6ec:	3301      	adds	r3, #1
    c6ee:	b2da      	uxtb	r2, r3
    c6f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    c6f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6f8:	701a      	strb	r2, [r3, #0]
    c6fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    c6fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c702:	781b      	ldrb	r3, [r3, #0]
    c704:	2bff      	cmp	r3, #255	; 0xff
    c706:	d105      	bne.n	c714 <send_debug+0x318>
    c708:	f24c 3319 	movw	r3, #49945	; 0xc319
    c70c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c710:	2200      	movs	r2, #0
    c712:	701a      	strb	r2, [r3, #0]
    c714:	f24c 3319 	movw	r3, #49945	; 0xc319
    c718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c71c:	781b      	ldrb	r3, [r3, #0]
    c71e:	461a      	mov	r2, r3
    c720:	f24c 53b7 	movw	r3, #50615	; 0xc5b7
    c724:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c728:	7819      	ldrb	r1, [r3, #0]
    c72a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c72e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c732:	5499      	strb	r1, [r3, r2]
    c734:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c738:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c73c:	781a      	ldrb	r2, [r3, #0]
    c73e:	f24c 53b7 	movw	r3, #50615	; 0xc5b7
    c742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c746:	781b      	ldrb	r3, [r3, #0]
    c748:	4413      	add	r3, r2
    c74a:	b2da      	uxtb	r2, r3
    c74c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c750:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c754:	701a      	strb	r2, [r3, #0]
    c756:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c75a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c75e:	781a      	ldrb	r2, [r3, #0]
    c760:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c768:	781b      	ldrb	r3, [r3, #0]
    c76a:	4413      	add	r3, r2
    c76c:	b2da      	uxtb	r2, r3
    c76e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c776:	701a      	strb	r2, [r3, #0]
    c778:	f24c 3319 	movw	r3, #49945	; 0xc319
    c77c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c780:	781b      	ldrb	r3, [r3, #0]
    c782:	3301      	adds	r3, #1
    c784:	b2da      	uxtb	r2, r3
    c786:	f24c 3319 	movw	r3, #49945	; 0xc319
    c78a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c78e:	701a      	strb	r2, [r3, #0]
    c790:	f24c 3319 	movw	r3, #49945	; 0xc319
    c794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c798:	781b      	ldrb	r3, [r3, #0]
    c79a:	2bff      	cmp	r3, #255	; 0xff
    c79c:	d105      	bne.n	c7aa <send_debug+0x3ae>
    c79e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c7a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7a6:	2200      	movs	r2, #0
    c7a8:	701a      	strb	r2, [r3, #0]
    c7aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    c7ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7b2:	781b      	ldrb	r3, [r3, #0]
    c7b4:	461a      	mov	r2, r3
    c7b6:	f24c 3304 	movw	r3, #49924	; 0xc304
    c7ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7be:	7819      	ldrb	r1, [r3, #0]
    c7c0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c7c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7c8:	5499      	strb	r1, [r3, r2]
    c7ca:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c7ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7d2:	781a      	ldrb	r2, [r3, #0]
    c7d4:	f24c 3304 	movw	r3, #49924	; 0xc304
    c7d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7dc:	781b      	ldrb	r3, [r3, #0]
    c7de:	4413      	add	r3, r2
    c7e0:	b2da      	uxtb	r2, r3
    c7e2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c7e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7ea:	701a      	strb	r2, [r3, #0]
    c7ec:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c7f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7f4:	781a      	ldrb	r2, [r3, #0]
    c7f6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c7fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7fe:	781b      	ldrb	r3, [r3, #0]
    c800:	4413      	add	r3, r2
    c802:	b2da      	uxtb	r2, r3
    c804:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c80c:	701a      	strb	r2, [r3, #0]
    c80e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c816:	781b      	ldrb	r3, [r3, #0]
    c818:	3301      	adds	r3, #1
    c81a:	b2da      	uxtb	r2, r3
    c81c:	f24c 3319 	movw	r3, #49945	; 0xc319
    c820:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c824:	701a      	strb	r2, [r3, #0]
    c826:	f24c 3319 	movw	r3, #49945	; 0xc319
    c82a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c82e:	781b      	ldrb	r3, [r3, #0]
    c830:	2bff      	cmp	r3, #255	; 0xff
    c832:	d105      	bne.n	c840 <send_debug+0x444>
    c834:	f24c 3319 	movw	r3, #49945	; 0xc319
    c838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c83c:	2200      	movs	r2, #0
    c83e:	701a      	strb	r2, [r3, #0]
    c840:	f24c 3319 	movw	r3, #49945	; 0xc319
    c844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c848:	781b      	ldrb	r3, [r3, #0]
    c84a:	461a      	mov	r2, r3
    c84c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    c850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c854:	7819      	ldrb	r1, [r3, #0]
    c856:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c85a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c85e:	5499      	strb	r1, [r3, r2]
    c860:	f24c 3319 	movw	r3, #49945	; 0xc319
    c864:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c868:	781b      	ldrb	r3, [r3, #0]
    c86a:	3301      	adds	r3, #1
    c86c:	b2da      	uxtb	r2, r3
    c86e:	f24c 3319 	movw	r3, #49945	; 0xc319
    c872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c876:	701a      	strb	r2, [r3, #0]
    c878:	f24c 3319 	movw	r3, #49945	; 0xc319
    c87c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c880:	781b      	ldrb	r3, [r3, #0]
    c882:	2bff      	cmp	r3, #255	; 0xff
    c884:	d105      	bne.n	c892 <send_debug+0x496>
    c886:	f24c 3319 	movw	r3, #49945	; 0xc319
    c88a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c88e:	2200      	movs	r2, #0
    c890:	701a      	strb	r2, [r3, #0]
    c892:	f24c 3319 	movw	r3, #49945	; 0xc319
    c896:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c89a:	781b      	ldrb	r3, [r3, #0]
    c89c:	461a      	mov	r2, r3
    c89e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    c8a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8a6:	7819      	ldrb	r1, [r3, #0]
    c8a8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c8ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8b0:	5499      	strb	r1, [r3, r2]
    c8b2:	f24c 3319 	movw	r3, #49945	; 0xc319
    c8b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8ba:	781b      	ldrb	r3, [r3, #0]
    c8bc:	3301      	adds	r3, #1
    c8be:	b2da      	uxtb	r2, r3
    c8c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    c8c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8c8:	701a      	strb	r2, [r3, #0]
    c8ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    c8ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8d2:	781b      	ldrb	r3, [r3, #0]
    c8d4:	2bff      	cmp	r3, #255	; 0xff
    c8d6:	d105      	bne.n	c8e4 <send_debug+0x4e8>
    c8d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    c8dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8e0:	2200      	movs	r2, #0
    c8e2:	701a      	strb	r2, [r3, #0]
    c8e4:	f242 0339 	movw	r3, #8249	; 0x2039
    c8e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c8ec:	781b      	ldrb	r3, [r3, #0]
    c8ee:	b2db      	uxtb	r3, r3
    c8f0:	f003 0310 	and.w	r3, r3, #16
    c8f4:	2b00      	cmp	r3, #0
    c8f6:	d15a      	bne.n	c9ae <send_debug+0x5b2>
    c8f8:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c8fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c900:	781b      	ldrb	r3, [r3, #0]
    c902:	b2db      	uxtb	r3, r3
    c904:	461a      	mov	r2, r3
    c906:	f24c 331c 	movw	r3, #49948	; 0xc31c
    c90a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c90e:	5c9a      	ldrb	r2, [r3, r2]
    c910:	f24c 431b 	movw	r3, #50203	; 0xc41b
    c914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c918:	701a      	strb	r2, [r3, #0]
    c91a:	f24c 431c 	movw	r3, #50204	; 0xc41c
    c91e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c922:	2200      	movs	r2, #0
    c924:	701a      	strb	r2, [r3, #0]
    c926:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c92a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c92e:	781b      	ldrb	r3, [r3, #0]
    c930:	b2db      	uxtb	r3, r3
    c932:	3301      	adds	r3, #1
    c934:	b2da      	uxtb	r2, r3
    c936:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c93a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c93e:	701a      	strb	r2, [r3, #0]
    c940:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c944:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c948:	781b      	ldrb	r3, [r3, #0]
    c94a:	b2db      	uxtb	r3, r3
    c94c:	2bff      	cmp	r3, #255	; 0xff
    c94e:	d105      	bne.n	c95c <send_debug+0x560>
    c950:	f24c 331a 	movw	r3, #49946	; 0xc31a
    c954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c958:	2200      	movs	r2, #0
    c95a:	701a      	strb	r2, [r3, #0]
    c95c:	f242 0338 	movw	r3, #8248	; 0x2038
    c960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c964:	f242 0238 	movw	r2, #8248	; 0x2038
    c968:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c96c:	7812      	ldrb	r2, [r2, #0]
    c96e:	b2d2      	uxtb	r2, r2
    c970:	f042 0201 	orr.w	r2, r2, #1
    c974:	b2d2      	uxtb	r2, r2
    c976:	701a      	strb	r2, [r3, #0]
    c978:	f242 0339 	movw	r3, #8249	; 0x2039
    c97c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c980:	f242 0239 	movw	r2, #8249	; 0x2039
    c984:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c988:	7812      	ldrb	r2, [r2, #0]
    c98a:	b2d2      	uxtb	r2, r2
    c98c:	f042 0210 	orr.w	r2, r2, #16
    c990:	b2d2      	uxtb	r2, r2
    c992:	701a      	strb	r2, [r3, #0]
    c994:	e00b      	b.n	c9ae <send_debug+0x5b2>
    c996:	f24c 3318 	movw	r3, #49944	; 0xc318
    c99a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c99e:	781b      	ldrb	r3, [r3, #0]
    c9a0:	3301      	adds	r3, #1
    c9a2:	b2da      	uxtb	r2, r3
    c9a4:	f24c 3318 	movw	r3, #49944	; 0xc318
    c9a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9ac:	701a      	strb	r2, [r3, #0]
}
    c9ae:	46bd      	mov	sp, r7
    c9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c9b4:	4770      	bx	lr
    c9b6:	bf00      	nop

0000c9b8 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    c9b8:	b480      	push	{r7}
    c9ba:	af00      	add	r7, sp, #0
  if(!boot)
    c9bc:	f240 533d 	movw	r3, #1341	; 0x53d
    c9c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c9c4:	781b      	ldrb	r3, [r3, #0]
    c9c6:	2b00      	cmp	r3, #0
    c9c8:	f040 83a9 	bne.w	d11e <send_nav_ref+0x766>
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    c9cc:	f24c 3311 	movw	r3, #49937	; 0xc311
    c9d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9d4:	781a      	ldrb	r2, [r3, #0]
    c9d6:	f248 531f 	movw	r3, #34079	; 0x851f
    c9da:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c9de:	fba3 1302 	umull	r1, r3, r3, r2
    c9e2:	095b      	lsrs	r3, r3, #5
    c9e4:	2164      	movs	r1, #100	; 0x64
    c9e6:	fb01 f303 	mul.w	r3, r1, r3
    c9ea:	1ad3      	subs	r3, r2, r3
    c9ec:	b2db      	uxtb	r3, r3
    c9ee:	2b31      	cmp	r3, #49	; 0x31
    c9f0:	f040 8395 	bne.w	d11e <send_nav_ref+0x766>
    c9f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    c9f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9fc:	781a      	ldrb	r2, [r3, #0]
    c9fe:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ca02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca06:	781b      	ldrb	r3, [r3, #0]
    ca08:	b2db      	uxtb	r3, r3
    ca0a:	429a      	cmp	r2, r3
    ca0c:	d313      	bcc.n	ca36 <send_nav_ref+0x7e>
    ca0e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ca12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca16:	781b      	ldrb	r3, [r3, #0]
    ca18:	b2db      	uxtb	r3, r3
    ca1a:	461a      	mov	r2, r3
    ca1c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca24:	781b      	ldrb	r3, [r3, #0]
    ca26:	1ad3      	subs	r3, r2, r3
    ca28:	33ff      	adds	r3, #255	; 0xff
    ca2a:	2b0c      	cmp	r3, #12
    ca2c:	bfd4      	ite	le
    ca2e:	2300      	movle	r3, #0
    ca30:	2301      	movgt	r3, #1
    ca32:	b2db      	uxtb	r3, r3
    ca34:	e011      	b.n	ca5a <send_nav_ref+0xa2>
    ca36:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ca3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca3e:	781b      	ldrb	r3, [r3, #0]
    ca40:	b2db      	uxtb	r3, r3
    ca42:	461a      	mov	r2, r3
    ca44:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca4c:	781b      	ldrb	r3, [r3, #0]
    ca4e:	1ad3      	subs	r3, r2, r3
    ca50:	2b0c      	cmp	r3, #12
    ca52:	bfd4      	ite	le
    ca54:	2300      	movle	r3, #0
    ca56:	2301      	movgt	r3, #1
    ca58:	b2db      	uxtb	r3, r3
    ca5a:	2b00      	cmp	r3, #0
    ca5c:	f000 8353 	beq.w	d106 <send_nav_ref+0x74e>
    ca60:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca68:	781b      	ldrb	r3, [r3, #0]
    ca6a:	461a      	mov	r2, r3
    ca6c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ca70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca74:	2105      	movs	r1, #5
    ca76:	5499      	strb	r1, [r3, r2]
    ca78:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca80:	781b      	ldrb	r3, [r3, #0]
    ca82:	3301      	adds	r3, #1
    ca84:	b2da      	uxtb	r2, r3
    ca86:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca8e:	701a      	strb	r2, [r3, #0]
    ca90:	f24c 3319 	movw	r3, #49945	; 0xc319
    ca94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca98:	781b      	ldrb	r3, [r3, #0]
    ca9a:	2bff      	cmp	r3, #255	; 0xff
    ca9c:	d105      	bne.n	caaa <send_nav_ref+0xf2>
    ca9e:	f24c 3319 	movw	r3, #49945	; 0xc319
    caa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caa6:	2200      	movs	r2, #0
    caa8:	701a      	strb	r2, [r3, #0]
    caaa:	f24c 3319 	movw	r3, #49945	; 0xc319
    caae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cab2:	781b      	ldrb	r3, [r3, #0]
    cab4:	461a      	mov	r2, r3
    cab6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    caba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cabe:	2109      	movs	r1, #9
    cac0:	5499      	strb	r1, [r3, r2]
    cac2:	f24c 3319 	movw	r3, #49945	; 0xc319
    cac6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caca:	781b      	ldrb	r3, [r3, #0]
    cacc:	3301      	adds	r3, #1
    cace:	b2da      	uxtb	r2, r3
    cad0:	f24c 3319 	movw	r3, #49945	; 0xc319
    cad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cad8:	701a      	strb	r2, [r3, #0]
    cada:	f24c 3319 	movw	r3, #49945	; 0xc319
    cade:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cae2:	781b      	ldrb	r3, [r3, #0]
    cae4:	2bff      	cmp	r3, #255	; 0xff
    cae6:	d105      	bne.n	caf4 <send_nav_ref+0x13c>
    cae8:	f24c 3319 	movw	r3, #49945	; 0xc319
    caec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caf0:	2200      	movs	r2, #0
    caf2:	701a      	strb	r2, [r3, #0]
    caf4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    caf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cafc:	2209      	movs	r2, #9
    cafe:	701a      	strb	r2, [r3, #0]
    cb00:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cb04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb08:	2209      	movs	r2, #9
    cb0a:	701a      	strb	r2, [r3, #0]
    cb0c:	f24c 3319 	movw	r3, #49945	; 0xc319
    cb10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb14:	781b      	ldrb	r3, [r3, #0]
    cb16:	461a      	mov	r2, r3
    cb18:	f648 33a8 	movw	r3, #35752	; 0x8ba8
    cb1c:	f2c0 0301 	movt	r3, #1
    cb20:	7819      	ldrb	r1, [r3, #0]
    cb22:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cb26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb2a:	5499      	strb	r1, [r3, r2]
    cb2c:	f648 33a8 	movw	r3, #35752	; 0x8ba8
    cb30:	f2c0 0301 	movt	r3, #1
    cb34:	781a      	ldrb	r2, [r3, #0]
    cb36:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cb3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb3e:	781b      	ldrb	r3, [r3, #0]
    cb40:	4413      	add	r3, r2
    cb42:	b2da      	uxtb	r2, r3
    cb44:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cb48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb4c:	701a      	strb	r2, [r3, #0]
    cb4e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cb52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb56:	781a      	ldrb	r2, [r3, #0]
    cb58:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cb5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb60:	781b      	ldrb	r3, [r3, #0]
    cb62:	4413      	add	r3, r2
    cb64:	b2da      	uxtb	r2, r3
    cb66:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cb6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb6e:	701a      	strb	r2, [r3, #0]
    cb70:	f24c 3319 	movw	r3, #49945	; 0xc319
    cb74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb78:	781b      	ldrb	r3, [r3, #0]
    cb7a:	3301      	adds	r3, #1
    cb7c:	b2da      	uxtb	r2, r3
    cb7e:	f24c 3319 	movw	r3, #49945	; 0xc319
    cb82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb86:	701a      	strb	r2, [r3, #0]
    cb88:	f24c 3319 	movw	r3, #49945	; 0xc319
    cb8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb90:	781b      	ldrb	r3, [r3, #0]
    cb92:	2bff      	cmp	r3, #255	; 0xff
    cb94:	d105      	bne.n	cba2 <send_nav_ref+0x1ea>
    cb96:	f24c 3319 	movw	r3, #49945	; 0xc319
    cb9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb9e:	2200      	movs	r2, #0
    cba0:	701a      	strb	r2, [r3, #0]
    cba2:	f24c 3319 	movw	r3, #49945	; 0xc319
    cba6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbaa:	781b      	ldrb	r3, [r3, #0]
    cbac:	461a      	mov	r2, r3
    cbae:	f648 33a8 	movw	r3, #35752	; 0x8ba8
    cbb2:	f2c0 0301 	movt	r3, #1
    cbb6:	7859      	ldrb	r1, [r3, #1]
    cbb8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cbbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbc0:	5499      	strb	r1, [r3, r2]
    cbc2:	4bd2      	ldr	r3, [pc, #840]	; (cf0c <send_nav_ref+0x554>)
    cbc4:	781a      	ldrb	r2, [r3, #0]
    cbc6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cbca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbce:	781b      	ldrb	r3, [r3, #0]
    cbd0:	4413      	add	r3, r2
    cbd2:	b2da      	uxtb	r2, r3
    cbd4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cbd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbdc:	701a      	strb	r2, [r3, #0]
    cbde:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cbe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbe6:	781a      	ldrb	r2, [r3, #0]
    cbe8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cbec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbf0:	781b      	ldrb	r3, [r3, #0]
    cbf2:	4413      	add	r3, r2
    cbf4:	b2da      	uxtb	r2, r3
    cbf6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cbfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbfe:	701a      	strb	r2, [r3, #0]
    cc00:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc08:	781b      	ldrb	r3, [r3, #0]
    cc0a:	3301      	adds	r3, #1
    cc0c:	b2da      	uxtb	r2, r3
    cc0e:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc16:	701a      	strb	r2, [r3, #0]
    cc18:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc20:	781b      	ldrb	r3, [r3, #0]
    cc22:	2bff      	cmp	r3, #255	; 0xff
    cc24:	d105      	bne.n	cc32 <send_nav_ref+0x27a>
    cc26:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc2e:	2200      	movs	r2, #0
    cc30:	701a      	strb	r2, [r3, #0]
    cc32:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc3a:	781b      	ldrb	r3, [r3, #0]
    cc3c:	461a      	mov	r2, r3
    cc3e:	f648 33a8 	movw	r3, #35752	; 0x8ba8
    cc42:	f2c0 0301 	movt	r3, #1
    cc46:	7899      	ldrb	r1, [r3, #2]
    cc48:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cc4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc50:	5499      	strb	r1, [r3, r2]
    cc52:	4baf      	ldr	r3, [pc, #700]	; (cf10 <send_nav_ref+0x558>)
    cc54:	781a      	ldrb	r2, [r3, #0]
    cc56:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cc5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc5e:	781b      	ldrb	r3, [r3, #0]
    cc60:	4413      	add	r3, r2
    cc62:	b2da      	uxtb	r2, r3
    cc64:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cc68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc6c:	701a      	strb	r2, [r3, #0]
    cc6e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cc72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc76:	781a      	ldrb	r2, [r3, #0]
    cc78:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cc7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc80:	781b      	ldrb	r3, [r3, #0]
    cc82:	4413      	add	r3, r2
    cc84:	b2da      	uxtb	r2, r3
    cc86:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cc8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc8e:	701a      	strb	r2, [r3, #0]
    cc90:	f24c 3319 	movw	r3, #49945	; 0xc319
    cc94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc98:	781b      	ldrb	r3, [r3, #0]
    cc9a:	3301      	adds	r3, #1
    cc9c:	b2da      	uxtb	r2, r3
    cc9e:	f24c 3319 	movw	r3, #49945	; 0xc319
    cca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cca6:	701a      	strb	r2, [r3, #0]
    cca8:	f24c 3319 	movw	r3, #49945	; 0xc319
    ccac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccb0:	781b      	ldrb	r3, [r3, #0]
    ccb2:	2bff      	cmp	r3, #255	; 0xff
    ccb4:	d105      	bne.n	ccc2 <send_nav_ref+0x30a>
    ccb6:	f24c 3319 	movw	r3, #49945	; 0xc319
    ccba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccbe:	2200      	movs	r2, #0
    ccc0:	701a      	strb	r2, [r3, #0]
    ccc2:	f24c 3319 	movw	r3, #49945	; 0xc319
    ccc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccca:	781b      	ldrb	r3, [r3, #0]
    cccc:	461a      	mov	r2, r3
    ccce:	f648 33a8 	movw	r3, #35752	; 0x8ba8
    ccd2:	f2c0 0301 	movt	r3, #1
    ccd6:	78d9      	ldrb	r1, [r3, #3]
    ccd8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ccdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cce0:	5499      	strb	r1, [r3, r2]
    cce2:	4b8c      	ldr	r3, [pc, #560]	; (cf14 <send_nav_ref+0x55c>)
    cce4:	781a      	ldrb	r2, [r3, #0]
    cce6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ccea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccee:	781b      	ldrb	r3, [r3, #0]
    ccf0:	4413      	add	r3, r2
    ccf2:	b2da      	uxtb	r2, r3
    ccf4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ccf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccfc:	701a      	strb	r2, [r3, #0]
    ccfe:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cd02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd06:	781a      	ldrb	r2, [r3, #0]
    cd08:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cd0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd10:	781b      	ldrb	r3, [r3, #0]
    cd12:	4413      	add	r3, r2
    cd14:	b2da      	uxtb	r2, r3
    cd16:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cd1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd1e:	701a      	strb	r2, [r3, #0]
    cd20:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd28:	781b      	ldrb	r3, [r3, #0]
    cd2a:	3301      	adds	r3, #1
    cd2c:	b2da      	uxtb	r2, r3
    cd2e:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd36:	701a      	strb	r2, [r3, #0]
    cd38:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd40:	781b      	ldrb	r3, [r3, #0]
    cd42:	2bff      	cmp	r3, #255	; 0xff
    cd44:	d105      	bne.n	cd52 <send_nav_ref+0x39a>
    cd46:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd4e:	2200      	movs	r2, #0
    cd50:	701a      	strb	r2, [r3, #0]
    cd52:	f24c 3319 	movw	r3, #49945	; 0xc319
    cd56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd5a:	781b      	ldrb	r3, [r3, #0]
    cd5c:	461a      	mov	r2, r3
    cd5e:	f648 33ac 	movw	r3, #35756	; 0x8bac
    cd62:	f2c0 0301 	movt	r3, #1
    cd66:	7819      	ldrb	r1, [r3, #0]
    cd68:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cd6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd70:	5499      	strb	r1, [r3, r2]
    cd72:	f648 33ac 	movw	r3, #35756	; 0x8bac
    cd76:	f2c0 0301 	movt	r3, #1
    cd7a:	781a      	ldrb	r2, [r3, #0]
    cd7c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cd80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd84:	781b      	ldrb	r3, [r3, #0]
    cd86:	4413      	add	r3, r2
    cd88:	b2da      	uxtb	r2, r3
    cd8a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cd8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd92:	701a      	strb	r2, [r3, #0]
    cd94:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cd98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd9c:	781a      	ldrb	r2, [r3, #0]
    cd9e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cda2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cda6:	781b      	ldrb	r3, [r3, #0]
    cda8:	4413      	add	r3, r2
    cdaa:	b2da      	uxtb	r2, r3
    cdac:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cdb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdb4:	701a      	strb	r2, [r3, #0]
    cdb6:	f24c 3319 	movw	r3, #49945	; 0xc319
    cdba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdbe:	781b      	ldrb	r3, [r3, #0]
    cdc0:	3301      	adds	r3, #1
    cdc2:	b2da      	uxtb	r2, r3
    cdc4:	f24c 3319 	movw	r3, #49945	; 0xc319
    cdc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdcc:	701a      	strb	r2, [r3, #0]
    cdce:	f24c 3319 	movw	r3, #49945	; 0xc319
    cdd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdd6:	781b      	ldrb	r3, [r3, #0]
    cdd8:	2bff      	cmp	r3, #255	; 0xff
    cdda:	d105      	bne.n	cde8 <send_nav_ref+0x430>
    cddc:	f24c 3319 	movw	r3, #49945	; 0xc319
    cde0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cde4:	2200      	movs	r2, #0
    cde6:	701a      	strb	r2, [r3, #0]
    cde8:	f24c 3319 	movw	r3, #49945	; 0xc319
    cdec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdf0:	781b      	ldrb	r3, [r3, #0]
    cdf2:	461a      	mov	r2, r3
    cdf4:	f648 33ac 	movw	r3, #35756	; 0x8bac
    cdf8:	f2c0 0301 	movt	r3, #1
    cdfc:	7859      	ldrb	r1, [r3, #1]
    cdfe:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ce02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce06:	5499      	strb	r1, [r3, r2]
    ce08:	4b43      	ldr	r3, [pc, #268]	; (cf18 <send_nav_ref+0x560>)
    ce0a:	781a      	ldrb	r2, [r3, #0]
    ce0c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ce10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce14:	781b      	ldrb	r3, [r3, #0]
    ce16:	4413      	add	r3, r2
    ce18:	b2da      	uxtb	r2, r3
    ce1a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ce1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce22:	701a      	strb	r2, [r3, #0]
    ce24:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ce28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce2c:	781a      	ldrb	r2, [r3, #0]
    ce2e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ce32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce36:	781b      	ldrb	r3, [r3, #0]
    ce38:	4413      	add	r3, r2
    ce3a:	b2da      	uxtb	r2, r3
    ce3c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ce40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce44:	701a      	strb	r2, [r3, #0]
    ce46:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce4e:	781b      	ldrb	r3, [r3, #0]
    ce50:	3301      	adds	r3, #1
    ce52:	b2da      	uxtb	r2, r3
    ce54:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce5c:	701a      	strb	r2, [r3, #0]
    ce5e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce66:	781b      	ldrb	r3, [r3, #0]
    ce68:	2bff      	cmp	r3, #255	; 0xff
    ce6a:	d105      	bne.n	ce78 <send_nav_ref+0x4c0>
    ce6c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce74:	2200      	movs	r2, #0
    ce76:	701a      	strb	r2, [r3, #0]
    ce78:	f24c 3319 	movw	r3, #49945	; 0xc319
    ce7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce80:	781b      	ldrb	r3, [r3, #0]
    ce82:	461a      	mov	r2, r3
    ce84:	f648 33ac 	movw	r3, #35756	; 0x8bac
    ce88:	f2c0 0301 	movt	r3, #1
    ce8c:	7899      	ldrb	r1, [r3, #2]
    ce8e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ce92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce96:	5499      	strb	r1, [r3, r2]
    ce98:	4b20      	ldr	r3, [pc, #128]	; (cf1c <send_nav_ref+0x564>)
    ce9a:	781a      	ldrb	r2, [r3, #0]
    ce9c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cea4:	781b      	ldrb	r3, [r3, #0]
    cea6:	4413      	add	r3, r2
    cea8:	b2da      	uxtb	r2, r3
    ceaa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ceae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ceb2:	701a      	strb	r2, [r3, #0]
    ceb4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ceb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cebc:	781a      	ldrb	r2, [r3, #0]
    cebe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cec6:	781b      	ldrb	r3, [r3, #0]
    cec8:	4413      	add	r3, r2
    ceca:	b2da      	uxtb	r2, r3
    cecc:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ced0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ced4:	701a      	strb	r2, [r3, #0]
    ced6:	f24c 3319 	movw	r3, #49945	; 0xc319
    ceda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cede:	781b      	ldrb	r3, [r3, #0]
    cee0:	3301      	adds	r3, #1
    cee2:	b2da      	uxtb	r2, r3
    cee4:	f24c 3319 	movw	r3, #49945	; 0xc319
    cee8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ceec:	701a      	strb	r2, [r3, #0]
    ceee:	f24c 3319 	movw	r3, #49945	; 0xc319
    cef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cef6:	781b      	ldrb	r3, [r3, #0]
    cef8:	2bff      	cmp	r3, #255	; 0xff
    cefa:	d111      	bne.n	cf20 <send_nav_ref+0x568>
    cefc:	f24c 3319 	movw	r3, #49945	; 0xc319
    cf00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf04:	2200      	movs	r2, #0
    cf06:	701a      	strb	r2, [r3, #0]
    cf08:	e00a      	b.n	cf20 <send_nav_ref+0x568>
    cf0a:	bf00      	nop
    cf0c:	00018ba9 	.word	0x00018ba9
    cf10:	00018baa 	.word	0x00018baa
    cf14:	00018bab 	.word	0x00018bab
    cf18:	00018bad 	.word	0x00018bad
    cf1c:	00018bae 	.word	0x00018bae
    cf20:	f24c 3319 	movw	r3, #49945	; 0xc319
    cf24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf28:	781b      	ldrb	r3, [r3, #0]
    cf2a:	461a      	mov	r2, r3
    cf2c:	f648 33ac 	movw	r3, #35756	; 0x8bac
    cf30:	f2c0 0301 	movt	r3, #1
    cf34:	78d9      	ldrb	r1, [r3, #3]
    cf36:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cf3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf3e:	5499      	strb	r1, [r3, r2]
    cf40:	4b79      	ldr	r3, [pc, #484]	; (d128 <send_nav_ref+0x770>)
    cf42:	781a      	ldrb	r2, [r3, #0]
    cf44:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cf48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf4c:	781b      	ldrb	r3, [r3, #0]
    cf4e:	4413      	add	r3, r2
    cf50:	b2da      	uxtb	r2, r3
    cf52:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cf56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf5a:	701a      	strb	r2, [r3, #0]
    cf5c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cf60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf64:	781a      	ldrb	r2, [r3, #0]
    cf66:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cf6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf6e:	781b      	ldrb	r3, [r3, #0]
    cf70:	4413      	add	r3, r2
    cf72:	b2da      	uxtb	r2, r3
    cf74:	f24c 431e 	movw	r3, #50206	; 0xc41e
    cf78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf7c:	701a      	strb	r2, [r3, #0]
    cf7e:	f24c 3319 	movw	r3, #49945	; 0xc319
    cf82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf86:	781b      	ldrb	r3, [r3, #0]
    cf88:	3301      	adds	r3, #1
    cf8a:	b2da      	uxtb	r2, r3
    cf8c:	f24c 3319 	movw	r3, #49945	; 0xc319
    cf90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf94:	701a      	strb	r2, [r3, #0]
    cf96:	f24c 3319 	movw	r3, #49945	; 0xc319
    cf9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf9e:	781b      	ldrb	r3, [r3, #0]
    cfa0:	2bff      	cmp	r3, #255	; 0xff
    cfa2:	d105      	bne.n	cfb0 <send_nav_ref+0x5f8>
    cfa4:	f24c 3319 	movw	r3, #49945	; 0xc319
    cfa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfac:	2200      	movs	r2, #0
    cfae:	701a      	strb	r2, [r3, #0]
    cfb0:	f24c 3319 	movw	r3, #49945	; 0xc319
    cfb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfb8:	781b      	ldrb	r3, [r3, #0]
    cfba:	461a      	mov	r2, r3
    cfbc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    cfc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfc4:	7819      	ldrb	r1, [r3, #0]
    cfc6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    cfca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfce:	5499      	strb	r1, [r3, r2]
    cfd0:	f24c 3319 	movw	r3, #49945	; 0xc319
    cfd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfd8:	781b      	ldrb	r3, [r3, #0]
    cfda:	3301      	adds	r3, #1
    cfdc:	b2da      	uxtb	r2, r3
    cfde:	f24c 3319 	movw	r3, #49945	; 0xc319
    cfe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfe6:	701a      	strb	r2, [r3, #0]
    cfe8:	f24c 3319 	movw	r3, #49945	; 0xc319
    cfec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cff0:	781b      	ldrb	r3, [r3, #0]
    cff2:	2bff      	cmp	r3, #255	; 0xff
    cff4:	d105      	bne.n	d002 <send_nav_ref+0x64a>
    cff6:	f24c 3319 	movw	r3, #49945	; 0xc319
    cffa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cffe:	2200      	movs	r2, #0
    d000:	701a      	strb	r2, [r3, #0]
    d002:	f24c 3319 	movw	r3, #49945	; 0xc319
    d006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d00a:	781b      	ldrb	r3, [r3, #0]
    d00c:	461a      	mov	r2, r3
    d00e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d012:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d016:	7819      	ldrb	r1, [r3, #0]
    d018:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d01c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d020:	5499      	strb	r1, [r3, r2]
    d022:	f24c 3319 	movw	r3, #49945	; 0xc319
    d026:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d02a:	781b      	ldrb	r3, [r3, #0]
    d02c:	3301      	adds	r3, #1
    d02e:	b2da      	uxtb	r2, r3
    d030:	f24c 3319 	movw	r3, #49945	; 0xc319
    d034:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d038:	701a      	strb	r2, [r3, #0]
    d03a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d03e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d042:	781b      	ldrb	r3, [r3, #0]
    d044:	2bff      	cmp	r3, #255	; 0xff
    d046:	d105      	bne.n	d054 <send_nav_ref+0x69c>
    d048:	f24c 3319 	movw	r3, #49945	; 0xc319
    d04c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d050:	2200      	movs	r2, #0
    d052:	701a      	strb	r2, [r3, #0]
    d054:	f242 0339 	movw	r3, #8249	; 0x2039
    d058:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d05c:	781b      	ldrb	r3, [r3, #0]
    d05e:	b2db      	uxtb	r3, r3
    d060:	f003 0310 	and.w	r3, r3, #16
    d064:	2b00      	cmp	r3, #0
    d066:	d15a      	bne.n	d11e <send_nav_ref+0x766>
    d068:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d06c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d070:	781b      	ldrb	r3, [r3, #0]
    d072:	b2db      	uxtb	r3, r3
    d074:	461a      	mov	r2, r3
    d076:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d07a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d07e:	5c9a      	ldrb	r2, [r3, r2]
    d080:	f24c 431b 	movw	r3, #50203	; 0xc41b
    d084:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d088:	701a      	strb	r2, [r3, #0]
    d08a:	f24c 431c 	movw	r3, #50204	; 0xc41c
    d08e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d092:	2200      	movs	r2, #0
    d094:	701a      	strb	r2, [r3, #0]
    d096:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d09a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d09e:	781b      	ldrb	r3, [r3, #0]
    d0a0:	b2db      	uxtb	r3, r3
    d0a2:	3301      	adds	r3, #1
    d0a4:	b2da      	uxtb	r2, r3
    d0a6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d0aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0ae:	701a      	strb	r2, [r3, #0]
    d0b0:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d0b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0b8:	781b      	ldrb	r3, [r3, #0]
    d0ba:	b2db      	uxtb	r3, r3
    d0bc:	2bff      	cmp	r3, #255	; 0xff
    d0be:	d105      	bne.n	d0cc <send_nav_ref+0x714>
    d0c0:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d0c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0c8:	2200      	movs	r2, #0
    d0ca:	701a      	strb	r2, [r3, #0]
    d0cc:	f242 0338 	movw	r3, #8248	; 0x2038
    d0d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0d4:	f242 0238 	movw	r2, #8248	; 0x2038
    d0d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d0dc:	7812      	ldrb	r2, [r2, #0]
    d0de:	b2d2      	uxtb	r2, r2
    d0e0:	f042 0201 	orr.w	r2, r2, #1
    d0e4:	b2d2      	uxtb	r2, r2
    d0e6:	701a      	strb	r2, [r3, #0]
    d0e8:	f242 0339 	movw	r3, #8249	; 0x2039
    d0ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d0f0:	f242 0239 	movw	r2, #8249	; 0x2039
    d0f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d0f8:	7812      	ldrb	r2, [r2, #0]
    d0fa:	b2d2      	uxtb	r2, r2
    d0fc:	f042 0210 	orr.w	r2, r2, #16
    d100:	b2d2      	uxtb	r2, r2
    d102:	701a      	strb	r2, [r3, #0]
    d104:	e00b      	b.n	d11e <send_nav_ref+0x766>
    d106:	f24c 3318 	movw	r3, #49944	; 0xc318
    d10a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d10e:	781b      	ldrb	r3, [r3, #0]
    d110:	3301      	adds	r3, #1
    d112:	b2da      	uxtb	r2, r3
    d114:	f24c 3318 	movw	r3, #49944	; 0xc318
    d118:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d11c:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    d11e:	46bd      	mov	sp, r7
    d120:	f85d 7b04 	ldr.w	r7, [sp], #4
    d124:	4770      	bx	lr
    d126:	bf00      	nop
    d128:	00018baf 	.word	0x00018baf

0000d12c <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    d12c:	b480      	push	{r7}
    d12e:	b083      	sub	sp, #12
    d130:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    d132:	f24c 4320 	movw	r3, #50208	; 0xc420
    d136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d13a:	8a1b      	ldrh	r3, [r3, #16]
    d13c:	b21b      	sxth	r3, r3
    d13e:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    d142:	db0d      	blt.n	d160 <inflight_calib_mode_update+0x34>
    d144:	f24c 4320 	movw	r3, #50208	; 0xc420
    d148:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d14c:	8a1b      	ldrh	r3, [r3, #16]
    d14e:	b21a      	sxth	r2, r3
    d150:	f640 437f 	movw	r3, #3199	; 0xc7f
    d154:	429a      	cmp	r2, r3
    d156:	bfd4      	ite	le
    d158:	2300      	movle	r3, #0
    d15a:	2301      	movgt	r3, #1
    d15c:	b2db      	uxtb	r3, r3
    d15e:	e000      	b.n	d162 <inflight_calib_mode_update+0x36>
    d160:	2302      	movs	r3, #2
    d162:	71fb      	strb	r3, [r7, #7]
    d164:	f64c 132c 	movw	r3, #51500	; 0xc92c
    d168:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d16c:	781b      	ldrb	r3, [r3, #0]
    d16e:	79fa      	ldrb	r2, [r7, #7]
    d170:	429a      	cmp	r2, r3
    d172:	d007      	beq.n	d184 <inflight_calib_mode_update+0x58>
    d174:	f64c 132c 	movw	r3, #51500	; 0xc92c
    d178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d17c:	79fa      	ldrb	r2, [r7, #7]
    d17e:	701a      	strb	r2, [r3, #0]
    d180:	2301      	movs	r3, #1
    d182:	e000      	b.n	d186 <inflight_calib_mode_update+0x5a>
    d184:	2300      	movs	r3, #0
}
    d186:	4618      	mov	r0, r3
    d188:	370c      	adds	r7, #12
    d18a:	46bd      	mov	sp, r7
    d18c:	f85d 7b04 	ldr.w	r7, [sp], #4
    d190:	4770      	bx	lr
    d192:	bf00      	nop

0000d194 <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    d194:	b580      	push	{r7, lr}
    d196:	b082      	sub	sp, #8
    d198:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    d19a:	f24c 434e 	movw	r3, #50254	; 0xc44e
    d19e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1a2:	2201      	movs	r2, #1
    d1a4:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    d1a6:	f24c 434e 	movw	r3, #50254	; 0xc44e
    d1aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1ae:	781b      	ldrb	r3, [r3, #0]
    d1b0:	b2db      	uxtb	r3, r3
    d1b2:	2b00      	cmp	r3, #0
    d1b4:	f000 83c0 	beq.w	d938 <radio_control_task+0x7a4>
    uint8_t mode_changed = FALSE;
    d1b8:	2300      	movs	r3, #0
    d1ba:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    d1bc:	f7fa fa4c 	bl	7658 <copy_from_to_fbw>
    if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) {
    d1c0:	4b3e      	ldr	r3, [pc, #248]	; (d2bc <radio_control_task+0x128>)
    d1c2:	781b      	ldrb	r3, [r3, #0]
    d1c4:	b2db      	uxtb	r3, r3
    d1c6:	f003 0302 	and.w	r3, r3, #2
    d1ca:	2b00      	cmp	r3, #0
    d1cc:	d00d      	beq.n	d1ea <radio_control_task+0x56>
    d1ce:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d1d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1d6:	781b      	ldrb	r3, [r3, #0]
    d1d8:	2b01      	cmp	r3, #1
    d1da:	d00d      	beq.n	d1f8 <radio_control_task+0x64>
    d1dc:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d1e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1e4:	781b      	ldrb	r3, [r3, #0]
    d1e6:	2b00      	cmp	r3, #0
    d1e8:	d006      	beq.n	d1f8 <radio_control_task+0x64>
    d1ea:	f24c 63ac 	movw	r3, #50860	; 0xc6ac
    d1ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1f2:	781b      	ldrb	r3, [r3, #0]
    d1f4:	2b00      	cmp	r3, #0
    d1f6:	d007      	beq.n	d208 <radio_control_task+0x74>
      pprz_mode = PPRZ_MODE_HOME;
    d1f8:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d1fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d200:	2203      	movs	r2, #3
    d202:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    d204:	2301      	movs	r3, #1
    d206:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    d208:	4b2c      	ldr	r3, [pc, #176]	; (d2bc <radio_control_task+0x128>)
    d20a:	781b      	ldrb	r3, [r3, #0]
    d20c:	b2db      	uxtb	r3, r3
    d20e:	f003 0304 	and.w	r3, r3, #4
    d212:	2b00      	cmp	r3, #0
    d214:	d023      	beq.n	d25e <radio_control_task+0xca>
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    d216:	f7fa f8f9 	bl	740c <pprz_mode_update>
    d21a:	4603      	mov	r3, r0
    d21c:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    d21e:	79fa      	ldrb	r2, [r7, #7]
    d220:	79bb      	ldrb	r3, [r7, #6]
    d222:	4313      	orrs	r3, r2
    d224:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    d226:	f7fa f93d 	bl	74a4 <ir_estim_mode_update>
    d22a:	4603      	mov	r3, r0
    d22c:	461a      	mov	r2, r3
    d22e:	79fb      	ldrb	r3, [r7, #7]
    d230:	4313      	orrs	r3, r2
    d232:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    d234:	f7ff ff7a 	bl	d12c <inflight_calib_mode_update>
    d238:	4603      	mov	r3, r0
    d23a:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    d23c:	797b      	ldrb	r3, [r7, #5]
    d23e:	2b00      	cmp	r3, #0
    d240:	d102      	bne.n	d248 <radio_control_task+0xb4>
    d242:	79bb      	ldrb	r3, [r7, #6]
    d244:	2b00      	cmp	r3, #0
    d246:	d001      	beq.n	d24c <radio_control_task+0xb8>
    d248:	2301      	movs	r3, #1
    d24a:	e000      	b.n	d24e <radio_control_task+0xba>
    d24c:	2300      	movs	r3, #0
    d24e:	b2db      	uxtb	r3, r3
    d250:	4618      	mov	r0, r3
    d252:	f008 fba1 	bl	15998 <inflight_calib>
      mode_changed |= calib_mode_changed;
    d256:	79fa      	ldrb	r2, [r7, #7]
    d258:	797b      	ldrb	r3, [r7, #5]
    d25a:	4313      	orrs	r3, r2
    d25c:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    d25e:	f7fa f949 	bl	74f4 <mcu1_status_update>
    d262:	4603      	mov	r3, r0
    d264:	461a      	mov	r2, r3
    d266:	79fb      	ldrb	r3, [r7, #7]
    d268:	4313      	orrs	r3, r2
    d26a:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    d26c:	2301      	movs	r3, #1
    d26e:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    d270:	79fb      	ldrb	r3, [r7, #7]
    d272:	2b00      	cmp	r3, #0
    d274:	f000 82bd 	beq.w	d7f2 <radio_control_task+0x65e>
      DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
    d278:	f24c 3319 	movw	r3, #49945	; 0xc319
    d27c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d280:	781a      	ldrb	r2, [r3, #0]
    d282:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d286:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d28a:	781b      	ldrb	r3, [r3, #0]
    d28c:	b2db      	uxtb	r3, r3
    d28e:	429a      	cmp	r2, r3
    d290:	d316      	bcc.n	d2c0 <radio_control_task+0x12c>
    d292:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d296:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d29a:	781b      	ldrb	r3, [r3, #0]
    d29c:	b2db      	uxtb	r3, r3
    d29e:	461a      	mov	r2, r3
    d2a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    d2a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2a8:	781b      	ldrb	r3, [r3, #0]
    d2aa:	1ad3      	subs	r3, r2, r3
    d2ac:	33ff      	adds	r3, #255	; 0xff
    d2ae:	2b09      	cmp	r3, #9
    d2b0:	bfd4      	ite	le
    d2b2:	2300      	movle	r3, #0
    d2b4:	2301      	movgt	r3, #1
    d2b6:	b2db      	uxtb	r3, r3
    d2b8:	e014      	b.n	d2e4 <radio_control_task+0x150>
    d2ba:	bf00      	nop
    d2bc:	2004c433 	.word	0x2004c433
    d2c0:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d2c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2c8:	781b      	ldrb	r3, [r3, #0]
    d2ca:	b2db      	uxtb	r3, r3
    d2cc:	461a      	mov	r2, r3
    d2ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    d2d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2d6:	781b      	ldrb	r3, [r3, #0]
    d2d8:	1ad3      	subs	r3, r2, r3
    d2da:	2b09      	cmp	r3, #9
    d2dc:	bfd4      	ite	le
    d2de:	2300      	movle	r3, #0
    d2e0:	2301      	movgt	r3, #1
    d2e2:	b2db      	uxtb	r3, r3
    d2e4:	2b00      	cmp	r3, #0
    d2e6:	f000 8278 	beq.w	d7da <radio_control_task+0x646>
    d2ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    d2ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2f2:	781b      	ldrb	r3, [r3, #0]
    d2f4:	461a      	mov	r2, r3
    d2f6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d2fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2fe:	2105      	movs	r1, #5
    d300:	5499      	strb	r1, [r3, r2]
    d302:	f24c 3319 	movw	r3, #49945	; 0xc319
    d306:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d30a:	781b      	ldrb	r3, [r3, #0]
    d30c:	3301      	adds	r3, #1
    d30e:	b2da      	uxtb	r2, r3
    d310:	f24c 3319 	movw	r3, #49945	; 0xc319
    d314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d318:	701a      	strb	r2, [r3, #0]
    d31a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d31e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d322:	781b      	ldrb	r3, [r3, #0]
    d324:	2bff      	cmp	r3, #255	; 0xff
    d326:	d105      	bne.n	d334 <radio_control_task+0x1a0>
    d328:	f24c 3319 	movw	r3, #49945	; 0xc319
    d32c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d330:	2200      	movs	r2, #0
    d332:	701a      	strb	r2, [r3, #0]
    d334:	f24c 3319 	movw	r3, #49945	; 0xc319
    d338:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d33c:	781b      	ldrb	r3, [r3, #0]
    d33e:	461a      	mov	r2, r3
    d340:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d344:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d348:	210b      	movs	r1, #11
    d34a:	5499      	strb	r1, [r3, r2]
    d34c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d350:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d354:	781b      	ldrb	r3, [r3, #0]
    d356:	3301      	adds	r3, #1
    d358:	b2da      	uxtb	r2, r3
    d35a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d35e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d362:	701a      	strb	r2, [r3, #0]
    d364:	f24c 3319 	movw	r3, #49945	; 0xc319
    d368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d36c:	781b      	ldrb	r3, [r3, #0]
    d36e:	2bff      	cmp	r3, #255	; 0xff
    d370:	d105      	bne.n	d37e <radio_control_task+0x1ea>
    d372:	f24c 3319 	movw	r3, #49945	; 0xc319
    d376:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d37a:	2200      	movs	r2, #0
    d37c:	701a      	strb	r2, [r3, #0]
    d37e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d382:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d386:	220b      	movs	r2, #11
    d388:	701a      	strb	r2, [r3, #0]
    d38a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d38e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d392:	220b      	movs	r2, #11
    d394:	701a      	strb	r2, [r3, #0]
    d396:	f24c 3319 	movw	r3, #49945	; 0xc319
    d39a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d39e:	781b      	ldrb	r3, [r3, #0]
    d3a0:	461a      	mov	r2, r3
    d3a2:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d3a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3aa:	7819      	ldrb	r1, [r3, #0]
    d3ac:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d3b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3b4:	5499      	strb	r1, [r3, r2]
    d3b6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d3ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3be:	781a      	ldrb	r2, [r3, #0]
    d3c0:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d3c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3c8:	781b      	ldrb	r3, [r3, #0]
    d3ca:	4413      	add	r3, r2
    d3cc:	b2da      	uxtb	r2, r3
    d3ce:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d3d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3d6:	701a      	strb	r2, [r3, #0]
    d3d8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d3dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3e0:	781a      	ldrb	r2, [r3, #0]
    d3e2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d3e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3ea:	781b      	ldrb	r3, [r3, #0]
    d3ec:	4413      	add	r3, r2
    d3ee:	b2da      	uxtb	r2, r3
    d3f0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d3f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3f8:	701a      	strb	r2, [r3, #0]
    d3fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    d3fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d402:	781b      	ldrb	r3, [r3, #0]
    d404:	3301      	adds	r3, #1
    d406:	b2da      	uxtb	r2, r3
    d408:	f24c 3319 	movw	r3, #49945	; 0xc319
    d40c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d410:	701a      	strb	r2, [r3, #0]
    d412:	f24c 3319 	movw	r3, #49945	; 0xc319
    d416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d41a:	781b      	ldrb	r3, [r3, #0]
    d41c:	2bff      	cmp	r3, #255	; 0xff
    d41e:	d105      	bne.n	d42c <radio_control_task+0x298>
    d420:	f24c 3319 	movw	r3, #49945	; 0xc319
    d424:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d428:	2200      	movs	r2, #0
    d42a:	701a      	strb	r2, [r3, #0]
    d42c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d434:	781b      	ldrb	r3, [r3, #0]
    d436:	461a      	mov	r2, r3
    d438:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    d43c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d440:	7819      	ldrb	r1, [r3, #0]
    d442:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d44a:	5499      	strb	r1, [r3, r2]
    d44c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d454:	781a      	ldrb	r2, [r3, #0]
    d456:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    d45a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d45e:	781b      	ldrb	r3, [r3, #0]
    d460:	4413      	add	r3, r2
    d462:	b2da      	uxtb	r2, r3
    d464:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d468:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d46c:	701a      	strb	r2, [r3, #0]
    d46e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d476:	781a      	ldrb	r2, [r3, #0]
    d478:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d47c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d480:	781b      	ldrb	r3, [r3, #0]
    d482:	4413      	add	r3, r2
    d484:	b2da      	uxtb	r2, r3
    d486:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d48a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d48e:	701a      	strb	r2, [r3, #0]
    d490:	f24c 3319 	movw	r3, #49945	; 0xc319
    d494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d498:	781b      	ldrb	r3, [r3, #0]
    d49a:	3301      	adds	r3, #1
    d49c:	b2da      	uxtb	r2, r3
    d49e:	f24c 3319 	movw	r3, #49945	; 0xc319
    d4a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4a6:	701a      	strb	r2, [r3, #0]
    d4a8:	f24c 3319 	movw	r3, #49945	; 0xc319
    d4ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4b0:	781b      	ldrb	r3, [r3, #0]
    d4b2:	2bff      	cmp	r3, #255	; 0xff
    d4b4:	d105      	bne.n	d4c2 <radio_control_task+0x32e>
    d4b6:	f24c 3319 	movw	r3, #49945	; 0xc319
    d4ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4be:	2200      	movs	r2, #0
    d4c0:	701a      	strb	r2, [r3, #0]
    d4c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    d4c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4ca:	781b      	ldrb	r3, [r3, #0]
    d4cc:	461a      	mov	r2, r3
    d4ce:	f64c 132c 	movw	r3, #51500	; 0xc92c
    d4d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4d6:	7819      	ldrb	r1, [r3, #0]
    d4d8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d4dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4e0:	5499      	strb	r1, [r3, r2]
    d4e2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d4e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4ea:	781a      	ldrb	r2, [r3, #0]
    d4ec:	f64c 132c 	movw	r3, #51500	; 0xc92c
    d4f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4f4:	781b      	ldrb	r3, [r3, #0]
    d4f6:	4413      	add	r3, r2
    d4f8:	b2da      	uxtb	r2, r3
    d4fa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d4fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d502:	701a      	strb	r2, [r3, #0]
    d504:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d50c:	781a      	ldrb	r2, [r3, #0]
    d50e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d516:	781b      	ldrb	r3, [r3, #0]
    d518:	4413      	add	r3, r2
    d51a:	b2da      	uxtb	r2, r3
    d51c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d520:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d524:	701a      	strb	r2, [r3, #0]
    d526:	f24c 3319 	movw	r3, #49945	; 0xc319
    d52a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d52e:	781b      	ldrb	r3, [r3, #0]
    d530:	3301      	adds	r3, #1
    d532:	b2da      	uxtb	r2, r3
    d534:	f24c 3319 	movw	r3, #49945	; 0xc319
    d538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d53c:	701a      	strb	r2, [r3, #0]
    d53e:	f24c 3319 	movw	r3, #49945	; 0xc319
    d542:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d546:	781b      	ldrb	r3, [r3, #0]
    d548:	2bff      	cmp	r3, #255	; 0xff
    d54a:	d105      	bne.n	d558 <radio_control_task+0x3c4>
    d54c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d550:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d554:	2200      	movs	r2, #0
    d556:	701a      	strb	r2, [r3, #0]
    d558:	f24c 3319 	movw	r3, #49945	; 0xc319
    d55c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d560:	781b      	ldrb	r3, [r3, #0]
    d562:	461a      	mov	r2, r3
    d564:	f24c 3303 	movw	r3, #49923	; 0xc303
    d568:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d56c:	7819      	ldrb	r1, [r3, #0]
    d56e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d576:	5499      	strb	r1, [r3, r2]
    d578:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d57c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d580:	781a      	ldrb	r2, [r3, #0]
    d582:	f24c 3303 	movw	r3, #49923	; 0xc303
    d586:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d58a:	781b      	ldrb	r3, [r3, #0]
    d58c:	4413      	add	r3, r2
    d58e:	b2da      	uxtb	r2, r3
    d590:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d598:	701a      	strb	r2, [r3, #0]
    d59a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d59e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5a2:	781a      	ldrb	r2, [r3, #0]
    d5a4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d5a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5ac:	781b      	ldrb	r3, [r3, #0]
    d5ae:	4413      	add	r3, r2
    d5b0:	b2da      	uxtb	r2, r3
    d5b2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d5b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5ba:	701a      	strb	r2, [r3, #0]
    d5bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    d5c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5c4:	781b      	ldrb	r3, [r3, #0]
    d5c6:	3301      	adds	r3, #1
    d5c8:	b2da      	uxtb	r2, r3
    d5ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    d5ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5d2:	701a      	strb	r2, [r3, #0]
    d5d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    d5d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5dc:	781b      	ldrb	r3, [r3, #0]
    d5de:	2bff      	cmp	r3, #255	; 0xff
    d5e0:	d105      	bne.n	d5ee <radio_control_task+0x45a>
    d5e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    d5e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5ea:	2200      	movs	r2, #0
    d5ec:	701a      	strb	r2, [r3, #0]
    d5ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    d5f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5f6:	781b      	ldrb	r3, [r3, #0]
    d5f8:	461a      	mov	r2, r3
    d5fa:	f240 533c 	movw	r3, #1340	; 0x53c
    d5fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d602:	7819      	ldrb	r1, [r3, #0]
    d604:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d608:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d60c:	5499      	strb	r1, [r3, r2]
    d60e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d612:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d616:	781a      	ldrb	r2, [r3, #0]
    d618:	f240 533c 	movw	r3, #1340	; 0x53c
    d61c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d620:	781b      	ldrb	r3, [r3, #0]
    d622:	4413      	add	r3, r2
    d624:	b2da      	uxtb	r2, r3
    d626:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d62a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d62e:	701a      	strb	r2, [r3, #0]
    d630:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d634:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d638:	781a      	ldrb	r2, [r3, #0]
    d63a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d63e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d642:	781b      	ldrb	r3, [r3, #0]
    d644:	4413      	add	r3, r2
    d646:	b2da      	uxtb	r2, r3
    d648:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d64c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d650:	701a      	strb	r2, [r3, #0]
    d652:	f24c 3319 	movw	r3, #49945	; 0xc319
    d656:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d65a:	781b      	ldrb	r3, [r3, #0]
    d65c:	3301      	adds	r3, #1
    d65e:	b2da      	uxtb	r2, r3
    d660:	f24c 3319 	movw	r3, #49945	; 0xc319
    d664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d668:	701a      	strb	r2, [r3, #0]
    d66a:	f24c 3319 	movw	r3, #49945	; 0xc319
    d66e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d672:	781b      	ldrb	r3, [r3, #0]
    d674:	2bff      	cmp	r3, #255	; 0xff
    d676:	d105      	bne.n	d684 <radio_control_task+0x4f0>
    d678:	f24c 3319 	movw	r3, #49945	; 0xc319
    d67c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d680:	2200      	movs	r2, #0
    d682:	701a      	strb	r2, [r3, #0]
    d684:	f24c 3319 	movw	r3, #49945	; 0xc319
    d688:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d68c:	781b      	ldrb	r3, [r3, #0]
    d68e:	461a      	mov	r2, r3
    d690:	f24c 431d 	movw	r3, #50205	; 0xc41d
    d694:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d698:	7819      	ldrb	r1, [r3, #0]
    d69a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d69e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6a2:	5499      	strb	r1, [r3, r2]
    d6a4:	f24c 3319 	movw	r3, #49945	; 0xc319
    d6a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6ac:	781b      	ldrb	r3, [r3, #0]
    d6ae:	3301      	adds	r3, #1
    d6b0:	b2da      	uxtb	r2, r3
    d6b2:	f24c 3319 	movw	r3, #49945	; 0xc319
    d6b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6ba:	701a      	strb	r2, [r3, #0]
    d6bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    d6c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6c4:	781b      	ldrb	r3, [r3, #0]
    d6c6:	2bff      	cmp	r3, #255	; 0xff
    d6c8:	d105      	bne.n	d6d6 <radio_control_task+0x542>
    d6ca:	f24c 3319 	movw	r3, #49945	; 0xc319
    d6ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6d2:	2200      	movs	r2, #0
    d6d4:	701a      	strb	r2, [r3, #0]
    d6d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    d6da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6de:	781b      	ldrb	r3, [r3, #0]
    d6e0:	461a      	mov	r2, r3
    d6e2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    d6e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6ea:	7819      	ldrb	r1, [r3, #0]
    d6ec:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d6f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6f4:	5499      	strb	r1, [r3, r2]
    d6f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    d6fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6fe:	781b      	ldrb	r3, [r3, #0]
    d700:	3301      	adds	r3, #1
    d702:	b2da      	uxtb	r2, r3
    d704:	f24c 3319 	movw	r3, #49945	; 0xc319
    d708:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d70c:	701a      	strb	r2, [r3, #0]
    d70e:	f24c 3319 	movw	r3, #49945	; 0xc319
    d712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d716:	781b      	ldrb	r3, [r3, #0]
    d718:	2bff      	cmp	r3, #255	; 0xff
    d71a:	d105      	bne.n	d728 <radio_control_task+0x594>
    d71c:	f24c 3319 	movw	r3, #49945	; 0xc319
    d720:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d724:	2200      	movs	r2, #0
    d726:	701a      	strb	r2, [r3, #0]
    d728:	f242 0339 	movw	r3, #8249	; 0x2039
    d72c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d730:	781b      	ldrb	r3, [r3, #0]
    d732:	b2db      	uxtb	r3, r3
    d734:	f003 0310 	and.w	r3, r3, #16
    d738:	2b00      	cmp	r3, #0
    d73a:	d15a      	bne.n	d7f2 <radio_control_task+0x65e>
    d73c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d744:	781b      	ldrb	r3, [r3, #0]
    d746:	b2db      	uxtb	r3, r3
    d748:	461a      	mov	r2, r3
    d74a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d74e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d752:	5c9a      	ldrb	r2, [r3, r2]
    d754:	f24c 431b 	movw	r3, #50203	; 0xc41b
    d758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d75c:	701a      	strb	r2, [r3, #0]
    d75e:	f24c 431c 	movw	r3, #50204	; 0xc41c
    d762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d766:	2200      	movs	r2, #0
    d768:	701a      	strb	r2, [r3, #0]
    d76a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d76e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d772:	781b      	ldrb	r3, [r3, #0]
    d774:	b2db      	uxtb	r3, r3
    d776:	3301      	adds	r3, #1
    d778:	b2da      	uxtb	r2, r3
    d77a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d77e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d782:	701a      	strb	r2, [r3, #0]
    d784:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d78c:	781b      	ldrb	r3, [r3, #0]
    d78e:	b2db      	uxtb	r3, r3
    d790:	2bff      	cmp	r3, #255	; 0xff
    d792:	d105      	bne.n	d7a0 <radio_control_task+0x60c>
    d794:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d798:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d79c:	2200      	movs	r2, #0
    d79e:	701a      	strb	r2, [r3, #0]
    d7a0:	f242 0338 	movw	r3, #8248	; 0x2038
    d7a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7a8:	f242 0238 	movw	r2, #8248	; 0x2038
    d7ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d7b0:	7812      	ldrb	r2, [r2, #0]
    d7b2:	b2d2      	uxtb	r2, r2
    d7b4:	f042 0201 	orr.w	r2, r2, #1
    d7b8:	b2d2      	uxtb	r2, r2
    d7ba:	701a      	strb	r2, [r3, #0]
    d7bc:	f242 0339 	movw	r3, #8249	; 0x2039
    d7c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d7c4:	f242 0239 	movw	r2, #8249	; 0x2039
    d7c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d7cc:	7812      	ldrb	r2, [r2, #0]
    d7ce:	b2d2      	uxtb	r2, r2
    d7d0:	f042 0210 	orr.w	r2, r2, #16
    d7d4:	b2d2      	uxtb	r2, r2
    d7d6:	701a      	strb	r2, [r3, #0]
    d7d8:	e00b      	b.n	d7f2 <radio_control_task+0x65e>
    d7da:	f24c 3318 	movw	r3, #49944	; 0xc318
    d7de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7e2:	781b      	ldrb	r3, [r3, #0]
    d7e4:	3301      	adds	r3, #1
    d7e6:	b2da      	uxtb	r2, r3
    d7e8:	f24c 3318 	movw	r3, #49944	; 0xc318
    d7ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7f0:	701a      	strb	r2, [r3, #0]
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    d7f2:	f24c 4320 	movw	r3, #50208	; 0xc420
    d7f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7fa:	885b      	ldrh	r3, [r3, #2]
    d7fc:	b21b      	sxth	r3, r3
    d7fe:	4618      	mov	r0, r3
    d800:	f00a fe84 	bl	1850c <__aeabi_i2f>
    d804:	4603      	mov	r3, r0
    d806:	4618      	mov	r0, r3
    d808:	f04f 0100 	mov.w	r1, #0
    d80c:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d810:	f00a ff84 	bl	1871c <__aeabi_fdiv>
    d814:	4603      	mov	r3, r0
    d816:	4618      	mov	r0, r3
    d818:	f00a fa38 	bl	17c8c <__aeabi_f2d>
    d81c:	4602      	mov	r2, r0
    d81e:	460b      	mov	r3, r1
    d820:	4610      	mov	r0, r2
    d822:	4619      	mov	r1, r3
    d824:	a346      	add	r3, pc, #280	; (adr r3, d940 <radio_control_task+0x7ac>)
    d826:	e9d3 2300 	ldrd	r2, r3, [r3]
    d82a:	f00a fa83 	bl	17d34 <__aeabi_dmul>
    d82e:	4602      	mov	r2, r0
    d830:	460b      	mov	r3, r1
    d832:	4610      	mov	r0, r2
    d834:	4619      	mov	r1, r3
    d836:	f04f 0200 	mov.w	r2, #0
    d83a:	f04f 0300 	mov.w	r3, #0
    d83e:	f00a f8c7 	bl	179d0 <__adddf3>
    d842:	4602      	mov	r2, r0
    d844:	460b      	mov	r3, r1
    d846:	4610      	mov	r0, r2
    d848:	4619      	mov	r1, r3
    d84a:	f00a fd55 	bl	182f8 <__aeabi_d2f>
    d84e:	4602      	mov	r2, r0
    d850:	f24c 6344 	movw	r3, #50756	; 0xc644
    d854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d858:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    d85a:	f24c 4320 	movw	r3, #50208	; 0xc420
    d85e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d862:	889b      	ldrh	r3, [r3, #4]
    d864:	b21b      	sxth	r3, r3
    d866:	4618      	mov	r0, r3
    d868:	f00a fe50 	bl	1850c <__aeabi_i2f>
    d86c:	4603      	mov	r3, r0
    d86e:	4618      	mov	r0, r3
    d870:	f04f 0100 	mov.w	r1, #0
    d874:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d878:	f00a ff50 	bl	1871c <__aeabi_fdiv>
    d87c:	4603      	mov	r3, r0
    d87e:	4618      	mov	r0, r3
    d880:	f00a fa04 	bl	17c8c <__aeabi_f2d>
    d884:	4602      	mov	r2, r0
    d886:	460b      	mov	r3, r1
    d888:	4610      	mov	r0, r2
    d88a:	4619      	mov	r1, r3
    d88c:	f04f 0200 	mov.w	r2, #0
    d890:	f04f 0300 	mov.w	r3, #0
    d894:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    d898:	f00a fa4c 	bl	17d34 <__aeabi_dmul>
    d89c:	4602      	mov	r2, r0
    d89e:	460b      	mov	r3, r1
    d8a0:	4610      	mov	r0, r2
    d8a2:	4619      	mov	r1, r3
    d8a4:	f04f 0200 	mov.w	r2, #0
    d8a8:	f04f 0300 	mov.w	r3, #0
    d8ac:	f00a f890 	bl	179d0 <__adddf3>
    d8b0:	4602      	mov	r2, r0
    d8b2:	460b      	mov	r3, r1
    d8b4:	4610      	mov	r0, r2
    d8b6:	4619      	mov	r1, r3
    d8b8:	f00a fd1e 	bl	182f8 <__aeabi_d2f>
    d8bc:	4602      	mov	r2, r0
    d8be:	f24c 6348 	movw	r3, #50760	; 0xc648
    d8c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8c6:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    d8c8:	f24c 4320 	movw	r3, #50208	; 0xc420
    d8cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8d0:	881a      	ldrh	r2, [r3, #0]
    d8d2:	f24c 634c 	movw	r3, #50764	; 0xc64c
    d8d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8da:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    d8dc:	f24c 4320 	movw	r3, #50208	; 0xc420
    d8e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8e4:	7c9a      	ldrb	r2, [r3, #18]
    d8e6:	f24c 3304 	movw	r3, #49924	; 0xc304
    d8ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8ee:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    d8f0:	f24c 4320 	movw	r3, #50208	; 0xc420
    d8f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8f8:	7d5a      	ldrb	r2, [r3, #21]
    d8fa:	f24c 3302 	movw	r3, #49922	; 0xc302
    d8fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d902:	701a      	strb	r2, [r3, #0]

    events_update();
    d904:	f7f9 fe26 	bl	7554 <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    d908:	f7f8 fc26 	bl	6158 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    d90c:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d910:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d914:	781b      	ldrb	r3, [r3, #0]
    d916:	2b02      	cmp	r3, #2
    d918:	d10e      	bne.n	d938 <radio_control_task+0x7a4>
    d91a:	f24c 4320 	movw	r3, #50208	; 0xc420
    d91e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d922:	881b      	ldrh	r3, [r3, #0]
    d924:	b21b      	sxth	r3, r3
    d926:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    d92a:	dd05      	ble.n	d938 <radio_control_task+0x7a4>
	launch = TRUE;
    d92c:	f24c 3310 	movw	r3, #49936	; 0xc310
    d930:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d934:	2201      	movs	r2, #1
    d936:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    d938:	3708      	adds	r7, #8
    d93a:	46bd      	mov	sp, r7
    d93c:	bd80      	pop	{r7, pc}
    d93e:	bf00      	nop
    d940:	33333333 	.word	0x33333333
    d944:	bfe33333 	.word	0xbfe33333

0000d948 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    d948:	b580      	push	{r7, lr}
    d94a:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    d94c:	f24c 23fe 	movw	r3, #49918	; 0xc2fe
    d950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d954:	2203      	movs	r2, #3
    d956:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    d958:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    d95c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d960:	781b      	ldrb	r3, [r3, #0]
    d962:	2b03      	cmp	r3, #3
    d964:	d102      	bne.n	d96c <navigation_update+0x24>
    nav_home();
    d966:	f007 fa9b 	bl	14ea0 <nav_home>
    d96a:	e001      	b.n	d970 <navigation_update+0x28>
  else
    nav_update();
    d96c:	f007 fabe 	bl	14eec <nav_update>
}
    d970:	bd80      	pop	{r7, pc}
    d972:	bf00      	nop

0000d974 <send_nav_values>:

void send_nav_values(void){
    d974:	b480      	push	{r7}
    d976:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    d978:	f24c 3319 	movw	r3, #49945	; 0xc319
    d97c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d980:	781a      	ldrb	r2, [r3, #0]
    d982:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d98a:	781b      	ldrb	r3, [r3, #0]
    d98c:	b2db      	uxtb	r3, r3
    d98e:	429a      	cmp	r2, r3
    d990:	d313      	bcc.n	d9ba <send_nav_values+0x46>
    d992:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d996:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d99a:	781b      	ldrb	r3, [r3, #0]
    d99c:	b2db      	uxtb	r3, r3
    d99e:	461a      	mov	r2, r3
    d9a0:	f24c 3319 	movw	r3, #49945	; 0xc319
    d9a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9a8:	781b      	ldrb	r3, [r3, #0]
    d9aa:	1ad3      	subs	r3, r2, r3
    d9ac:	33ff      	adds	r3, #255	; 0xff
    d9ae:	2b1e      	cmp	r3, #30
    d9b0:	bfd4      	ite	le
    d9b2:	2300      	movle	r3, #0
    d9b4:	2301      	movgt	r3, #1
    d9b6:	b2db      	uxtb	r3, r3
    d9b8:	e011      	b.n	d9de <send_nav_values+0x6a>
    d9ba:	f24c 331a 	movw	r3, #49946	; 0xc31a
    d9be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9c2:	781b      	ldrb	r3, [r3, #0]
    d9c4:	b2db      	uxtb	r3, r3
    d9c6:	461a      	mov	r2, r3
    d9c8:	f24c 3319 	movw	r3, #49945	; 0xc319
    d9cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9d0:	781b      	ldrb	r3, [r3, #0]
    d9d2:	1ad3      	subs	r3, r2, r3
    d9d4:	2b1e      	cmp	r3, #30
    d9d6:	bfd4      	ite	le
    d9d8:	2300      	movle	r3, #0
    d9da:	2301      	movgt	r3, #1
    d9dc:	b2db      	uxtb	r3, r3
    d9de:	2b00      	cmp	r3, #0
    d9e0:	f001 8094 	beq.w	eb0c <send_nav_values+0x1198>
    d9e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    d9e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9ec:	781b      	ldrb	r3, [r3, #0]
    d9ee:	461a      	mov	r2, r3
    d9f0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    d9f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9f8:	2105      	movs	r1, #5
    d9fa:	5499      	strb	r1, [r3, r2]
    d9fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    da00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da04:	781b      	ldrb	r3, [r3, #0]
    da06:	3301      	adds	r3, #1
    da08:	b2da      	uxtb	r2, r3
    da0a:	f24c 3319 	movw	r3, #49945	; 0xc319
    da0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da12:	701a      	strb	r2, [r3, #0]
    da14:	f24c 3319 	movw	r3, #49945	; 0xc319
    da18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da1c:	781b      	ldrb	r3, [r3, #0]
    da1e:	2bff      	cmp	r3, #255	; 0xff
    da20:	d105      	bne.n	da2e <send_nav_values+0xba>
    da22:	f24c 3319 	movw	r3, #49945	; 0xc319
    da26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da2a:	2200      	movs	r2, #0
    da2c:	701a      	strb	r2, [r3, #0]
    da2e:	f24c 3319 	movw	r3, #49945	; 0xc319
    da32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da36:	781b      	ldrb	r3, [r3, #0]
    da38:	461a      	mov	r2, r3
    da3a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    da3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da42:	210a      	movs	r1, #10
    da44:	5499      	strb	r1, [r3, r2]
    da46:	f24c 3319 	movw	r3, #49945	; 0xc319
    da4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da4e:	781b      	ldrb	r3, [r3, #0]
    da50:	3301      	adds	r3, #1
    da52:	b2da      	uxtb	r2, r3
    da54:	f24c 3319 	movw	r3, #49945	; 0xc319
    da58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da5c:	701a      	strb	r2, [r3, #0]
    da5e:	f24c 3319 	movw	r3, #49945	; 0xc319
    da62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da66:	781b      	ldrb	r3, [r3, #0]
    da68:	2bff      	cmp	r3, #255	; 0xff
    da6a:	d105      	bne.n	da78 <send_nav_values+0x104>
    da6c:	f24c 3319 	movw	r3, #49945	; 0xc319
    da70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da74:	2200      	movs	r2, #0
    da76:	701a      	strb	r2, [r3, #0]
    da78:	f24c 431d 	movw	r3, #50205	; 0xc41d
    da7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da80:	220a      	movs	r2, #10
    da82:	701a      	strb	r2, [r3, #0]
    da84:	f24c 431e 	movw	r3, #50206	; 0xc41e
    da88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da8c:	220a      	movs	r2, #10
    da8e:	701a      	strb	r2, [r3, #0]
    da90:	f24c 3319 	movw	r3, #49945	; 0xc319
    da94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da98:	781b      	ldrb	r3, [r3, #0]
    da9a:	461a      	mov	r2, r3
    da9c:	f24c 6371 	movw	r3, #50801	; 0xc671
    daa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daa4:	7819      	ldrb	r1, [r3, #0]
    daa6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    daaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daae:	5499      	strb	r1, [r3, r2]
    dab0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dab8:	781a      	ldrb	r2, [r3, #0]
    daba:	f24c 6371 	movw	r3, #50801	; 0xc671
    dabe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dac2:	781b      	ldrb	r3, [r3, #0]
    dac4:	4413      	add	r3, r2
    dac6:	b2da      	uxtb	r2, r3
    dac8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dacc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dad0:	701a      	strb	r2, [r3, #0]
    dad2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dada:	781a      	ldrb	r2, [r3, #0]
    dadc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dae4:	781b      	ldrb	r3, [r3, #0]
    dae6:	4413      	add	r3, r2
    dae8:	b2da      	uxtb	r2, r3
    daea:	f24c 431e 	movw	r3, #50206	; 0xc41e
    daee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daf2:	701a      	strb	r2, [r3, #0]
    daf4:	f24c 3319 	movw	r3, #49945	; 0xc319
    daf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dafc:	781b      	ldrb	r3, [r3, #0]
    dafe:	3301      	adds	r3, #1
    db00:	b2da      	uxtb	r2, r3
    db02:	f24c 3319 	movw	r3, #49945	; 0xc319
    db06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db0a:	701a      	strb	r2, [r3, #0]
    db0c:	f24c 3319 	movw	r3, #49945	; 0xc319
    db10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db14:	781b      	ldrb	r3, [r3, #0]
    db16:	2bff      	cmp	r3, #255	; 0xff
    db18:	d105      	bne.n	db26 <send_nav_values+0x1b2>
    db1a:	f24c 3319 	movw	r3, #49945	; 0xc319
    db1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db22:	2200      	movs	r2, #0
    db24:	701a      	strb	r2, [r3, #0]
    db26:	f24c 3319 	movw	r3, #49945	; 0xc319
    db2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db2e:	781b      	ldrb	r3, [r3, #0]
    db30:	461a      	mov	r2, r3
    db32:	f24c 6370 	movw	r3, #50800	; 0xc670
    db36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db3a:	7819      	ldrb	r1, [r3, #0]
    db3c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    db40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db44:	5499      	strb	r1, [r3, r2]
    db46:	f24c 431d 	movw	r3, #50205	; 0xc41d
    db4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db4e:	781a      	ldrb	r2, [r3, #0]
    db50:	f24c 6370 	movw	r3, #50800	; 0xc670
    db54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db58:	781b      	ldrb	r3, [r3, #0]
    db5a:	4413      	add	r3, r2
    db5c:	b2da      	uxtb	r2, r3
    db5e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    db62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db66:	701a      	strb	r2, [r3, #0]
    db68:	f24c 431e 	movw	r3, #50206	; 0xc41e
    db6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db70:	781a      	ldrb	r2, [r3, #0]
    db72:	f24c 431d 	movw	r3, #50205	; 0xc41d
    db76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db7a:	781b      	ldrb	r3, [r3, #0]
    db7c:	4413      	add	r3, r2
    db7e:	b2da      	uxtb	r2, r3
    db80:	f24c 431e 	movw	r3, #50206	; 0xc41e
    db84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db88:	701a      	strb	r2, [r3, #0]
    db8a:	f24c 3319 	movw	r3, #49945	; 0xc319
    db8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db92:	781b      	ldrb	r3, [r3, #0]
    db94:	3301      	adds	r3, #1
    db96:	b2da      	uxtb	r2, r3
    db98:	f24c 3319 	movw	r3, #49945	; 0xc319
    db9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dba0:	701a      	strb	r2, [r3, #0]
    dba2:	f24c 3319 	movw	r3, #49945	; 0xc319
    dba6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbaa:	781b      	ldrb	r3, [r3, #0]
    dbac:	2bff      	cmp	r3, #255	; 0xff
    dbae:	d105      	bne.n	dbbc <send_nav_values+0x248>
    dbb0:	f24c 3319 	movw	r3, #49945	; 0xc319
    dbb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbb8:	2200      	movs	r2, #0
    dbba:	701a      	strb	r2, [r3, #0]
    dbbc:	f24c 3319 	movw	r3, #49945	; 0xc319
    dbc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbc4:	781b      	ldrb	r3, [r3, #0]
    dbc6:	461a      	mov	r2, r3
    dbc8:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
    dbcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbd0:	7819      	ldrb	r1, [r3, #0]
    dbd2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    dbd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbda:	5499      	strb	r1, [r3, r2]
    dbdc:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
    dbe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbe4:	781a      	ldrb	r2, [r3, #0]
    dbe6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dbea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbee:	781b      	ldrb	r3, [r3, #0]
    dbf0:	4413      	add	r3, r2
    dbf2:	b2da      	uxtb	r2, r3
    dbf4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dbf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbfc:	701a      	strb	r2, [r3, #0]
    dbfe:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dc02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc06:	781a      	ldrb	r2, [r3, #0]
    dc08:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dc0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc10:	781b      	ldrb	r3, [r3, #0]
    dc12:	4413      	add	r3, r2
    dc14:	b2da      	uxtb	r2, r3
    dc16:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dc1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc1e:	701a      	strb	r2, [r3, #0]
    dc20:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc28:	781b      	ldrb	r3, [r3, #0]
    dc2a:	3301      	adds	r3, #1
    dc2c:	b2da      	uxtb	r2, r3
    dc2e:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc36:	701a      	strb	r2, [r3, #0]
    dc38:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc40:	781b      	ldrb	r3, [r3, #0]
    dc42:	2bff      	cmp	r3, #255	; 0xff
    dc44:	d105      	bne.n	dc52 <send_nav_values+0x2de>
    dc46:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc4e:	2200      	movs	r2, #0
    dc50:	701a      	strb	r2, [r3, #0]
    dc52:	f24c 3319 	movw	r3, #49945	; 0xc319
    dc56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc5a:	781b      	ldrb	r3, [r3, #0]
    dc5c:	461a      	mov	r2, r3
    dc5e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
    dc62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc66:	7859      	ldrb	r1, [r3, #1]
    dc68:	f24c 331c 	movw	r3, #49948	; 0xc31c
    dc6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc70:	5499      	strb	r1, [r3, r2]
    dc72:	4bd2      	ldr	r3, [pc, #840]	; (dfbc <send_nav_values+0x648>)
    dc74:	781a      	ldrb	r2, [r3, #0]
    dc76:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dc7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc7e:	781b      	ldrb	r3, [r3, #0]
    dc80:	4413      	add	r3, r2
    dc82:	b2da      	uxtb	r2, r3
    dc84:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dc88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc8c:	701a      	strb	r2, [r3, #0]
    dc8e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dc92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc96:	781a      	ldrb	r2, [r3, #0]
    dc98:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dc9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dca0:	781b      	ldrb	r3, [r3, #0]
    dca2:	4413      	add	r3, r2
    dca4:	b2da      	uxtb	r2, r3
    dca6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dcaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcae:	701a      	strb	r2, [r3, #0]
    dcb0:	f24c 3319 	movw	r3, #49945	; 0xc319
    dcb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcb8:	781b      	ldrb	r3, [r3, #0]
    dcba:	3301      	adds	r3, #1
    dcbc:	b2da      	uxtb	r2, r3
    dcbe:	f24c 3319 	movw	r3, #49945	; 0xc319
    dcc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcc6:	701a      	strb	r2, [r3, #0]
    dcc8:	f24c 3319 	movw	r3, #49945	; 0xc319
    dccc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcd0:	781b      	ldrb	r3, [r3, #0]
    dcd2:	2bff      	cmp	r3, #255	; 0xff
    dcd4:	d105      	bne.n	dce2 <send_nav_values+0x36e>
    dcd6:	f24c 3319 	movw	r3, #49945	; 0xc319
    dcda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcde:	2200      	movs	r2, #0
    dce0:	701a      	strb	r2, [r3, #0]
    dce2:	f24c 3319 	movw	r3, #49945	; 0xc319
    dce6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcea:	781b      	ldrb	r3, [r3, #0]
    dcec:	461a      	mov	r2, r3
    dcee:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
    dcf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcf6:	7899      	ldrb	r1, [r3, #2]
    dcf8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    dcfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd00:	5499      	strb	r1, [r3, r2]
    dd02:	4baf      	ldr	r3, [pc, #700]	; (dfc0 <send_nav_values+0x64c>)
    dd04:	781a      	ldrb	r2, [r3, #0]
    dd06:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dd0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd0e:	781b      	ldrb	r3, [r3, #0]
    dd10:	4413      	add	r3, r2
    dd12:	b2da      	uxtb	r2, r3
    dd14:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dd18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd1c:	701a      	strb	r2, [r3, #0]
    dd1e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dd22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd26:	781a      	ldrb	r2, [r3, #0]
    dd28:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dd2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd30:	781b      	ldrb	r3, [r3, #0]
    dd32:	4413      	add	r3, r2
    dd34:	b2da      	uxtb	r2, r3
    dd36:	f24c 431e 	movw	r3, #50206	; 0xc41e
    dd3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd3e:	701a      	strb	r2, [r3, #0]
    dd40:	f24c 3319 	movw	r3, #49945	; 0xc319
    dd44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd48:	781b      	ldrb	r3, [r3, #0]
    dd4a:	3301      	adds	r3, #1
    dd4c:	b2da      	uxtb	r2, r3
    dd4e:	f24c 3319 	movw	r3, #49945	; 0xc319
    dd52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd56:	701a      	strb	r2, [r3, #0]
    dd58:	f24c 3319 	movw	r3, #49945	; 0xc319
    dd5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd60:	781b      	ldrb	r3, [r3, #0]
    dd62:	2bff      	cmp	r3, #255	; 0xff
    dd64:	d105      	bne.n	dd72 <send_nav_values+0x3fe>
    dd66:	f24c 3319 	movw	r3, #49945	; 0xc319
    dd6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd6e:	2200      	movs	r2, #0
    dd70:	701a      	strb	r2, [r3, #0]
    dd72:	f24c 3319 	movw	r3, #49945	; 0xc319
    dd76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd7a:	781b      	ldrb	r3, [r3, #0]
    dd7c:	461a      	mov	r2, r3
    dd7e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
    dd82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd86:	78d9      	ldrb	r1, [r3, #3]
    dd88:	f24c 331c 	movw	r3, #49948	; 0xc31c
    dd8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd90:	5499      	strb	r1, [r3, r2]
    dd92:	4b8c      	ldr	r3, [pc, #560]	; (dfc4 <send_nav_values+0x650>)
    dd94:	781a      	ldrb	r2, [r3, #0]
    dd96:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dd9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd9e:	781b      	ldrb	r3, [r3, #0]
    dda0:	4413      	add	r3, r2
    dda2:	b2da      	uxtb	r2, r3
    dda4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dda8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddac:	701a      	strb	r2, [r3, #0]
    ddae:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ddb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddb6:	781a      	ldrb	r2, [r3, #0]
    ddb8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ddbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddc0:	781b      	ldrb	r3, [r3, #0]
    ddc2:	4413      	add	r3, r2
    ddc4:	b2da      	uxtb	r2, r3
    ddc6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ddca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddce:	701a      	strb	r2, [r3, #0]
    ddd0:	f24c 3319 	movw	r3, #49945	; 0xc319
    ddd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddd8:	781b      	ldrb	r3, [r3, #0]
    ddda:	3301      	adds	r3, #1
    dddc:	b2da      	uxtb	r2, r3
    ddde:	f24c 3319 	movw	r3, #49945	; 0xc319
    dde2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dde6:	701a      	strb	r2, [r3, #0]
    dde8:	f24c 3319 	movw	r3, #49945	; 0xc319
    ddec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddf0:	781b      	ldrb	r3, [r3, #0]
    ddf2:	2bff      	cmp	r3, #255	; 0xff
    ddf4:	d105      	bne.n	de02 <send_nav_values+0x48e>
    ddf6:	f24c 3319 	movw	r3, #49945	; 0xc319
    ddfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddfe:	2200      	movs	r2, #0
    de00:	701a      	strb	r2, [r3, #0]
    de02:	f24c 3319 	movw	r3, #49945	; 0xc319
    de06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de0a:	781b      	ldrb	r3, [r3, #0]
    de0c:	461a      	mov	r2, r3
    de0e:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    de12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de16:	7819      	ldrb	r1, [r3, #0]
    de18:	f24c 331c 	movw	r3, #49948	; 0xc31c
    de1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de20:	5499      	strb	r1, [r3, r2]
    de22:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    de26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de2a:	781a      	ldrb	r2, [r3, #0]
    de2c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    de30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de34:	781b      	ldrb	r3, [r3, #0]
    de36:	4413      	add	r3, r2
    de38:	b2da      	uxtb	r2, r3
    de3a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    de3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de42:	701a      	strb	r2, [r3, #0]
    de44:	f24c 431e 	movw	r3, #50206	; 0xc41e
    de48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de4c:	781a      	ldrb	r2, [r3, #0]
    de4e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    de52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de56:	781b      	ldrb	r3, [r3, #0]
    de58:	4413      	add	r3, r2
    de5a:	b2da      	uxtb	r2, r3
    de5c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    de60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de64:	701a      	strb	r2, [r3, #0]
    de66:	f24c 3319 	movw	r3, #49945	; 0xc319
    de6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de6e:	781b      	ldrb	r3, [r3, #0]
    de70:	3301      	adds	r3, #1
    de72:	b2da      	uxtb	r2, r3
    de74:	f24c 3319 	movw	r3, #49945	; 0xc319
    de78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de7c:	701a      	strb	r2, [r3, #0]
    de7e:	f24c 3319 	movw	r3, #49945	; 0xc319
    de82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de86:	781b      	ldrb	r3, [r3, #0]
    de88:	2bff      	cmp	r3, #255	; 0xff
    de8a:	d105      	bne.n	de98 <send_nav_values+0x524>
    de8c:	f24c 3319 	movw	r3, #49945	; 0xc319
    de90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de94:	2200      	movs	r2, #0
    de96:	701a      	strb	r2, [r3, #0]
    de98:	f24c 3319 	movw	r3, #49945	; 0xc319
    de9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dea0:	781b      	ldrb	r3, [r3, #0]
    dea2:	461a      	mov	r2, r3
    dea4:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    dea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deac:	7859      	ldrb	r1, [r3, #1]
    deae:	f24c 331c 	movw	r3, #49948	; 0xc31c
    deb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deb6:	5499      	strb	r1, [r3, r2]
    deb8:	4b43      	ldr	r3, [pc, #268]	; (dfc8 <send_nav_values+0x654>)
    deba:	781a      	ldrb	r2, [r3, #0]
    debc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dec4:	781b      	ldrb	r3, [r3, #0]
    dec6:	4413      	add	r3, r2
    dec8:	b2da      	uxtb	r2, r3
    deca:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ded2:	701a      	strb	r2, [r3, #0]
    ded4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ded8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dedc:	781a      	ldrb	r2, [r3, #0]
    dede:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dee6:	781b      	ldrb	r3, [r3, #0]
    dee8:	4413      	add	r3, r2
    deea:	b2da      	uxtb	r2, r3
    deec:	f24c 431e 	movw	r3, #50206	; 0xc41e
    def0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    def4:	701a      	strb	r2, [r3, #0]
    def6:	f24c 3319 	movw	r3, #49945	; 0xc319
    defa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    defe:	781b      	ldrb	r3, [r3, #0]
    df00:	3301      	adds	r3, #1
    df02:	b2da      	uxtb	r2, r3
    df04:	f24c 3319 	movw	r3, #49945	; 0xc319
    df08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df0c:	701a      	strb	r2, [r3, #0]
    df0e:	f24c 3319 	movw	r3, #49945	; 0xc319
    df12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df16:	781b      	ldrb	r3, [r3, #0]
    df18:	2bff      	cmp	r3, #255	; 0xff
    df1a:	d105      	bne.n	df28 <send_nav_values+0x5b4>
    df1c:	f24c 3319 	movw	r3, #49945	; 0xc319
    df20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df24:	2200      	movs	r2, #0
    df26:	701a      	strb	r2, [r3, #0]
    df28:	f24c 3319 	movw	r3, #49945	; 0xc319
    df2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df30:	781b      	ldrb	r3, [r3, #0]
    df32:	461a      	mov	r2, r3
    df34:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    df38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df3c:	7899      	ldrb	r1, [r3, #2]
    df3e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    df42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df46:	5499      	strb	r1, [r3, r2]
    df48:	4b20      	ldr	r3, [pc, #128]	; (dfcc <send_nav_values+0x658>)
    df4a:	781a      	ldrb	r2, [r3, #0]
    df4c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    df50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df54:	781b      	ldrb	r3, [r3, #0]
    df56:	4413      	add	r3, r2
    df58:	b2da      	uxtb	r2, r3
    df5a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    df5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df62:	701a      	strb	r2, [r3, #0]
    df64:	f24c 431e 	movw	r3, #50206	; 0xc41e
    df68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df6c:	781a      	ldrb	r2, [r3, #0]
    df6e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    df72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df76:	781b      	ldrb	r3, [r3, #0]
    df78:	4413      	add	r3, r2
    df7a:	b2da      	uxtb	r2, r3
    df7c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    df80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df84:	701a      	strb	r2, [r3, #0]
    df86:	f24c 3319 	movw	r3, #49945	; 0xc319
    df8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df8e:	781b      	ldrb	r3, [r3, #0]
    df90:	3301      	adds	r3, #1
    df92:	b2da      	uxtb	r2, r3
    df94:	f24c 3319 	movw	r3, #49945	; 0xc319
    df98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df9c:	701a      	strb	r2, [r3, #0]
    df9e:	f24c 3319 	movw	r3, #49945	; 0xc319
    dfa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfa6:	781b      	ldrb	r3, [r3, #0]
    dfa8:	2bff      	cmp	r3, #255	; 0xff
    dfaa:	d111      	bne.n	dfd0 <send_nav_values+0x65c>
    dfac:	f24c 3319 	movw	r3, #49945	; 0xc319
    dfb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfb4:	2200      	movs	r2, #0
    dfb6:	701a      	strb	r2, [r3, #0]
    dfb8:	e00a      	b.n	dfd0 <send_nav_values+0x65c>
    dfba:	bf00      	nop
    dfbc:	2004c8cd 	.word	0x2004c8cd
    dfc0:	2004c8ce 	.word	0x2004c8ce
    dfc4:	2004c8cf 	.word	0x2004c8cf
    dfc8:	2004c8d1 	.word	0x2004c8d1
    dfcc:	2004c8d2 	.word	0x2004c8d2
    dfd0:	f24c 3319 	movw	r3, #49945	; 0xc319
    dfd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfd8:	781b      	ldrb	r3, [r3, #0]
    dfda:	461a      	mov	r2, r3
    dfdc:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    dfe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfe4:	78d9      	ldrb	r1, [r3, #3]
    dfe6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    dfea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfee:	5499      	strb	r1, [r3, r2]
    dff0:	4bd3      	ldr	r3, [pc, #844]	; (e340 <send_nav_values+0x9cc>)
    dff2:	781a      	ldrb	r2, [r3, #0]
    dff4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    dff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dffc:	781b      	ldrb	r3, [r3, #0]
    dffe:	4413      	add	r3, r2
    e000:	b2da      	uxtb	r2, r3
    e002:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e00a:	701a      	strb	r2, [r3, #0]
    e00c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e014:	781a      	ldrb	r2, [r3, #0]
    e016:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e01a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e01e:	781b      	ldrb	r3, [r3, #0]
    e020:	4413      	add	r3, r2
    e022:	b2da      	uxtb	r2, r3
    e024:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e02c:	701a      	strb	r2, [r3, #0]
    e02e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e036:	781b      	ldrb	r3, [r3, #0]
    e038:	3301      	adds	r3, #1
    e03a:	b2da      	uxtb	r2, r3
    e03c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e040:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e044:	701a      	strb	r2, [r3, #0]
    e046:	f24c 3319 	movw	r3, #49945	; 0xc319
    e04a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e04e:	781b      	ldrb	r3, [r3, #0]
    e050:	2bff      	cmp	r3, #255	; 0xff
    e052:	d105      	bne.n	e060 <send_nav_values+0x6ec>
    e054:	f24c 3319 	movw	r3, #49945	; 0xc319
    e058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e05c:	2200      	movs	r2, #0
    e05e:	701a      	strb	r2, [r3, #0]
    e060:	f24c 3319 	movw	r3, #49945	; 0xc319
    e064:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e068:	781b      	ldrb	r3, [r3, #0]
    e06a:	461a      	mov	r2, r3
    e06c:	f24c 635c 	movw	r3, #50780	; 0xc65c
    e070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e074:	7819      	ldrb	r1, [r3, #0]
    e076:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e07a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e07e:	5499      	strb	r1, [r3, r2]
    e080:	f24c 635c 	movw	r3, #50780	; 0xc65c
    e084:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e088:	781a      	ldrb	r2, [r3, #0]
    e08a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e08e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e092:	781b      	ldrb	r3, [r3, #0]
    e094:	4413      	add	r3, r2
    e096:	b2da      	uxtb	r2, r3
    e098:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e09c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0a0:	701a      	strb	r2, [r3, #0]
    e0a2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e0a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0aa:	781a      	ldrb	r2, [r3, #0]
    e0ac:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e0b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0b4:	781b      	ldrb	r3, [r3, #0]
    e0b6:	4413      	add	r3, r2
    e0b8:	b2da      	uxtb	r2, r3
    e0ba:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e0be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0c2:	701a      	strb	r2, [r3, #0]
    e0c4:	f24c 3319 	movw	r3, #49945	; 0xc319
    e0c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0cc:	781b      	ldrb	r3, [r3, #0]
    e0ce:	3301      	adds	r3, #1
    e0d0:	b2da      	uxtb	r2, r3
    e0d2:	f24c 3319 	movw	r3, #49945	; 0xc319
    e0d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0da:	701a      	strb	r2, [r3, #0]
    e0dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    e0e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0e4:	781b      	ldrb	r3, [r3, #0]
    e0e6:	2bff      	cmp	r3, #255	; 0xff
    e0e8:	d105      	bne.n	e0f6 <send_nav_values+0x782>
    e0ea:	f24c 3319 	movw	r3, #49945	; 0xc319
    e0ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0f2:	2200      	movs	r2, #0
    e0f4:	701a      	strb	r2, [r3, #0]
    e0f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    e0fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0fe:	781b      	ldrb	r3, [r3, #0]
    e100:	461a      	mov	r2, r3
    e102:	f24c 635c 	movw	r3, #50780	; 0xc65c
    e106:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e10a:	7859      	ldrb	r1, [r3, #1]
    e10c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e114:	5499      	strb	r1, [r3, r2]
    e116:	4b8b      	ldr	r3, [pc, #556]	; (e344 <send_nav_values+0x9d0>)
    e118:	781a      	ldrb	r2, [r3, #0]
    e11a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e11e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e122:	781b      	ldrb	r3, [r3, #0]
    e124:	4413      	add	r3, r2
    e126:	b2da      	uxtb	r2, r3
    e128:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e12c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e130:	701a      	strb	r2, [r3, #0]
    e132:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e13a:	781a      	ldrb	r2, [r3, #0]
    e13c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e140:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e144:	781b      	ldrb	r3, [r3, #0]
    e146:	4413      	add	r3, r2
    e148:	b2da      	uxtb	r2, r3
    e14a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e14e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e152:	701a      	strb	r2, [r3, #0]
    e154:	f24c 3319 	movw	r3, #49945	; 0xc319
    e158:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e15c:	781b      	ldrb	r3, [r3, #0]
    e15e:	3301      	adds	r3, #1
    e160:	b2da      	uxtb	r2, r3
    e162:	f24c 3319 	movw	r3, #49945	; 0xc319
    e166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e16a:	701a      	strb	r2, [r3, #0]
    e16c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e170:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e174:	781b      	ldrb	r3, [r3, #0]
    e176:	2bff      	cmp	r3, #255	; 0xff
    e178:	d105      	bne.n	e186 <send_nav_values+0x812>
    e17a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e17e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e182:	2200      	movs	r2, #0
    e184:	701a      	strb	r2, [r3, #0]
    e186:	f24c 3319 	movw	r3, #49945	; 0xc319
    e18a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e18e:	781b      	ldrb	r3, [r3, #0]
    e190:	461a      	mov	r2, r3
    e192:	f24c 635c 	movw	r3, #50780	; 0xc65c
    e196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e19a:	7899      	ldrb	r1, [r3, #2]
    e19c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e1a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1a4:	5499      	strb	r1, [r3, r2]
    e1a6:	4b68      	ldr	r3, [pc, #416]	; (e348 <send_nav_values+0x9d4>)
    e1a8:	781a      	ldrb	r2, [r3, #0]
    e1aa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e1ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1b2:	781b      	ldrb	r3, [r3, #0]
    e1b4:	4413      	add	r3, r2
    e1b6:	b2da      	uxtb	r2, r3
    e1b8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e1bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1c0:	701a      	strb	r2, [r3, #0]
    e1c2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e1c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1ca:	781a      	ldrb	r2, [r3, #0]
    e1cc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e1d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1d4:	781b      	ldrb	r3, [r3, #0]
    e1d6:	4413      	add	r3, r2
    e1d8:	b2da      	uxtb	r2, r3
    e1da:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e1de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1e2:	701a      	strb	r2, [r3, #0]
    e1e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    e1e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1ec:	781b      	ldrb	r3, [r3, #0]
    e1ee:	3301      	adds	r3, #1
    e1f0:	b2da      	uxtb	r2, r3
    e1f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    e1f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1fa:	701a      	strb	r2, [r3, #0]
    e1fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    e200:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e204:	781b      	ldrb	r3, [r3, #0]
    e206:	2bff      	cmp	r3, #255	; 0xff
    e208:	d105      	bne.n	e216 <send_nav_values+0x8a2>
    e20a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e20e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e212:	2200      	movs	r2, #0
    e214:	701a      	strb	r2, [r3, #0]
    e216:	f24c 3319 	movw	r3, #49945	; 0xc319
    e21a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e21e:	781b      	ldrb	r3, [r3, #0]
    e220:	461a      	mov	r2, r3
    e222:	f24c 635c 	movw	r3, #50780	; 0xc65c
    e226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e22a:	78d9      	ldrb	r1, [r3, #3]
    e22c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e230:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e234:	5499      	strb	r1, [r3, r2]
    e236:	4b45      	ldr	r3, [pc, #276]	; (e34c <send_nav_values+0x9d8>)
    e238:	781a      	ldrb	r2, [r3, #0]
    e23a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e23e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e242:	781b      	ldrb	r3, [r3, #0]
    e244:	4413      	add	r3, r2
    e246:	b2da      	uxtb	r2, r3
    e248:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e24c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e250:	701a      	strb	r2, [r3, #0]
    e252:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e256:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e25a:	781a      	ldrb	r2, [r3, #0]
    e25c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e260:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e264:	781b      	ldrb	r3, [r3, #0]
    e266:	4413      	add	r3, r2
    e268:	b2da      	uxtb	r2, r3
    e26a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e26e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e272:	701a      	strb	r2, [r3, #0]
    e274:	f24c 3319 	movw	r3, #49945	; 0xc319
    e278:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e27c:	781b      	ldrb	r3, [r3, #0]
    e27e:	3301      	adds	r3, #1
    e280:	b2da      	uxtb	r2, r3
    e282:	f24c 3319 	movw	r3, #49945	; 0xc319
    e286:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e28a:	701a      	strb	r2, [r3, #0]
    e28c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e290:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e294:	781b      	ldrb	r3, [r3, #0]
    e296:	2bff      	cmp	r3, #255	; 0xff
    e298:	d105      	bne.n	e2a6 <send_nav_values+0x932>
    e29a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e29e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2a2:	2200      	movs	r2, #0
    e2a4:	701a      	strb	r2, [r3, #0]
    e2a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    e2aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2ae:	781b      	ldrb	r3, [r3, #0]
    e2b0:	461a      	mov	r2, r3
    e2b2:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
    e2b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2ba:	7819      	ldrb	r1, [r3, #0]
    e2bc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e2c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2c4:	5499      	strb	r1, [r3, r2]
    e2c6:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
    e2ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2ce:	781a      	ldrb	r2, [r3, #0]
    e2d0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e2d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2d8:	781b      	ldrb	r3, [r3, #0]
    e2da:	4413      	add	r3, r2
    e2dc:	b2da      	uxtb	r2, r3
    e2de:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e2e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2e6:	701a      	strb	r2, [r3, #0]
    e2e8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e2ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2f0:	781a      	ldrb	r2, [r3, #0]
    e2f2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e2f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2fa:	781b      	ldrb	r3, [r3, #0]
    e2fc:	4413      	add	r3, r2
    e2fe:	b2da      	uxtb	r2, r3
    e300:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e308:	701a      	strb	r2, [r3, #0]
    e30a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e30e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e312:	781b      	ldrb	r3, [r3, #0]
    e314:	3301      	adds	r3, #1
    e316:	b2da      	uxtb	r2, r3
    e318:	f24c 3319 	movw	r3, #49945	; 0xc319
    e31c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e320:	701a      	strb	r2, [r3, #0]
    e322:	f24c 3319 	movw	r3, #49945	; 0xc319
    e326:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e32a:	781b      	ldrb	r3, [r3, #0]
    e32c:	2bff      	cmp	r3, #255	; 0xff
    e32e:	d10f      	bne.n	e350 <send_nav_values+0x9dc>
    e330:	f24c 3319 	movw	r3, #49945	; 0xc319
    e334:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e338:	2200      	movs	r2, #0
    e33a:	701a      	strb	r2, [r3, #0]
    e33c:	e008      	b.n	e350 <send_nav_values+0x9dc>
    e33e:	bf00      	nop
    e340:	2004c8d3 	.word	0x2004c8d3
    e344:	2004c65d 	.word	0x2004c65d
    e348:	2004c65e 	.word	0x2004c65e
    e34c:	2004c65f 	.word	0x2004c65f
    e350:	f24c 3319 	movw	r3, #49945	; 0xc319
    e354:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e358:	781b      	ldrb	r3, [r3, #0]
    e35a:	461a      	mov	r2, r3
    e35c:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
    e360:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e364:	7859      	ldrb	r1, [r3, #1]
    e366:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e36a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e36e:	5499      	strb	r1, [r3, r2]
    e370:	4bd1      	ldr	r3, [pc, #836]	; (e6b8 <send_nav_values+0xd44>)
    e372:	781a      	ldrb	r2, [r3, #0]
    e374:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e37c:	781b      	ldrb	r3, [r3, #0]
    e37e:	4413      	add	r3, r2
    e380:	b2da      	uxtb	r2, r3
    e382:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e386:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e38a:	701a      	strb	r2, [r3, #0]
    e38c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e394:	781a      	ldrb	r2, [r3, #0]
    e396:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e39a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e39e:	781b      	ldrb	r3, [r3, #0]
    e3a0:	4413      	add	r3, r2
    e3a2:	b2da      	uxtb	r2, r3
    e3a4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e3a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3ac:	701a      	strb	r2, [r3, #0]
    e3ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    e3b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3b6:	781b      	ldrb	r3, [r3, #0]
    e3b8:	3301      	adds	r3, #1
    e3ba:	b2da      	uxtb	r2, r3
    e3bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    e3c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3c4:	701a      	strb	r2, [r3, #0]
    e3c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    e3ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3ce:	781b      	ldrb	r3, [r3, #0]
    e3d0:	2bff      	cmp	r3, #255	; 0xff
    e3d2:	d105      	bne.n	e3e0 <send_nav_values+0xa6c>
    e3d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    e3d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3dc:	2200      	movs	r2, #0
    e3de:	701a      	strb	r2, [r3, #0]
    e3e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    e3e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3e8:	781b      	ldrb	r3, [r3, #0]
    e3ea:	461a      	mov	r2, r3
    e3ec:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
    e3f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3f4:	7899      	ldrb	r1, [r3, #2]
    e3f6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e3fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3fe:	5499      	strb	r1, [r3, r2]
    e400:	4bae      	ldr	r3, [pc, #696]	; (e6bc <send_nav_values+0xd48>)
    e402:	781a      	ldrb	r2, [r3, #0]
    e404:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e40c:	781b      	ldrb	r3, [r3, #0]
    e40e:	4413      	add	r3, r2
    e410:	b2da      	uxtb	r2, r3
    e412:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e41a:	701a      	strb	r2, [r3, #0]
    e41c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e420:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e424:	781a      	ldrb	r2, [r3, #0]
    e426:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e42a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e42e:	781b      	ldrb	r3, [r3, #0]
    e430:	4413      	add	r3, r2
    e432:	b2da      	uxtb	r2, r3
    e434:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e438:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e43c:	701a      	strb	r2, [r3, #0]
    e43e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e446:	781b      	ldrb	r3, [r3, #0]
    e448:	3301      	adds	r3, #1
    e44a:	b2da      	uxtb	r2, r3
    e44c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e450:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e454:	701a      	strb	r2, [r3, #0]
    e456:	f24c 3319 	movw	r3, #49945	; 0xc319
    e45a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e45e:	781b      	ldrb	r3, [r3, #0]
    e460:	2bff      	cmp	r3, #255	; 0xff
    e462:	d105      	bne.n	e470 <send_nav_values+0xafc>
    e464:	f24c 3319 	movw	r3, #49945	; 0xc319
    e468:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e46c:	2200      	movs	r2, #0
    e46e:	701a      	strb	r2, [r3, #0]
    e470:	f24c 3319 	movw	r3, #49945	; 0xc319
    e474:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e478:	781b      	ldrb	r3, [r3, #0]
    e47a:	461a      	mov	r2, r3
    e47c:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
    e480:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e484:	78d9      	ldrb	r1, [r3, #3]
    e486:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e48a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e48e:	5499      	strb	r1, [r3, r2]
    e490:	4b8b      	ldr	r3, [pc, #556]	; (e6c0 <send_nav_values+0xd4c>)
    e492:	781a      	ldrb	r2, [r3, #0]
    e494:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e49c:	781b      	ldrb	r3, [r3, #0]
    e49e:	4413      	add	r3, r2
    e4a0:	b2da      	uxtb	r2, r3
    e4a2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e4a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4aa:	701a      	strb	r2, [r3, #0]
    e4ac:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e4b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4b4:	781a      	ldrb	r2, [r3, #0]
    e4b6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e4ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4be:	781b      	ldrb	r3, [r3, #0]
    e4c0:	4413      	add	r3, r2
    e4c2:	b2da      	uxtb	r2, r3
    e4c4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e4c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4cc:	701a      	strb	r2, [r3, #0]
    e4ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    e4d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4d6:	781b      	ldrb	r3, [r3, #0]
    e4d8:	3301      	adds	r3, #1
    e4da:	b2da      	uxtb	r2, r3
    e4dc:	f24c 3319 	movw	r3, #49945	; 0xc319
    e4e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4e4:	701a      	strb	r2, [r3, #0]
    e4e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    e4ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4ee:	781b      	ldrb	r3, [r3, #0]
    e4f0:	2bff      	cmp	r3, #255	; 0xff
    e4f2:	d105      	bne.n	e500 <send_nav_values+0xb8c>
    e4f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    e4f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4fc:	2200      	movs	r2, #0
    e4fe:	701a      	strb	r2, [r3, #0]
    e500:	f24c 3319 	movw	r3, #49945	; 0xc319
    e504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e508:	781b      	ldrb	r3, [r3, #0]
    e50a:	461a      	mov	r2, r3
    e50c:	f240 5358 	movw	r3, #1368	; 0x558
    e510:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e514:	7819      	ldrb	r1, [r3, #0]
    e516:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e51a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e51e:	5499      	strb	r1, [r3, r2]
    e520:	f240 5358 	movw	r3, #1368	; 0x558
    e524:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e528:	781a      	ldrb	r2, [r3, #0]
    e52a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e52e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e532:	781b      	ldrb	r3, [r3, #0]
    e534:	4413      	add	r3, r2
    e536:	b2da      	uxtb	r2, r3
    e538:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e53c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e540:	701a      	strb	r2, [r3, #0]
    e542:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e54a:	781a      	ldrb	r2, [r3, #0]
    e54c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e550:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e554:	781b      	ldrb	r3, [r3, #0]
    e556:	4413      	add	r3, r2
    e558:	b2da      	uxtb	r2, r3
    e55a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e55e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e562:	701a      	strb	r2, [r3, #0]
    e564:	f24c 3319 	movw	r3, #49945	; 0xc319
    e568:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e56c:	781b      	ldrb	r3, [r3, #0]
    e56e:	3301      	adds	r3, #1
    e570:	b2da      	uxtb	r2, r3
    e572:	f24c 3319 	movw	r3, #49945	; 0xc319
    e576:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e57a:	701a      	strb	r2, [r3, #0]
    e57c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e584:	781b      	ldrb	r3, [r3, #0]
    e586:	2bff      	cmp	r3, #255	; 0xff
    e588:	d105      	bne.n	e596 <send_nav_values+0xc22>
    e58a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e58e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e592:	2200      	movs	r2, #0
    e594:	701a      	strb	r2, [r3, #0]
    e596:	f24c 3319 	movw	r3, #49945	; 0xc319
    e59a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e59e:	781b      	ldrb	r3, [r3, #0]
    e5a0:	461a      	mov	r2, r3
    e5a2:	f240 5358 	movw	r3, #1368	; 0x558
    e5a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e5aa:	7859      	ldrb	r1, [r3, #1]
    e5ac:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e5b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5b4:	5499      	strb	r1, [r3, r2]
    e5b6:	4b43      	ldr	r3, [pc, #268]	; (e6c4 <send_nav_values+0xd50>)
    e5b8:	781a      	ldrb	r2, [r3, #0]
    e5ba:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e5be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5c2:	781b      	ldrb	r3, [r3, #0]
    e5c4:	4413      	add	r3, r2
    e5c6:	b2da      	uxtb	r2, r3
    e5c8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e5cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5d0:	701a      	strb	r2, [r3, #0]
    e5d2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e5d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5da:	781a      	ldrb	r2, [r3, #0]
    e5dc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e5e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5e4:	781b      	ldrb	r3, [r3, #0]
    e5e6:	4413      	add	r3, r2
    e5e8:	b2da      	uxtb	r2, r3
    e5ea:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e5ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5f2:	701a      	strb	r2, [r3, #0]
    e5f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    e5f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5fc:	781b      	ldrb	r3, [r3, #0]
    e5fe:	3301      	adds	r3, #1
    e600:	b2da      	uxtb	r2, r3
    e602:	f24c 3319 	movw	r3, #49945	; 0xc319
    e606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e60a:	701a      	strb	r2, [r3, #0]
    e60c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e614:	781b      	ldrb	r3, [r3, #0]
    e616:	2bff      	cmp	r3, #255	; 0xff
    e618:	d105      	bne.n	e626 <send_nav_values+0xcb2>
    e61a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e61e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e622:	2200      	movs	r2, #0
    e624:	701a      	strb	r2, [r3, #0]
    e626:	f24c 3319 	movw	r3, #49945	; 0xc319
    e62a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e62e:	781b      	ldrb	r3, [r3, #0]
    e630:	461a      	mov	r2, r3
    e632:	f240 5358 	movw	r3, #1368	; 0x558
    e636:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e63a:	7899      	ldrb	r1, [r3, #2]
    e63c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e640:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e644:	5499      	strb	r1, [r3, r2]
    e646:	4b20      	ldr	r3, [pc, #128]	; (e6c8 <send_nav_values+0xd54>)
    e648:	781a      	ldrb	r2, [r3, #0]
    e64a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e64e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e652:	781b      	ldrb	r3, [r3, #0]
    e654:	4413      	add	r3, r2
    e656:	b2da      	uxtb	r2, r3
    e658:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e65c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e660:	701a      	strb	r2, [r3, #0]
    e662:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e666:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e66a:	781a      	ldrb	r2, [r3, #0]
    e66c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e674:	781b      	ldrb	r3, [r3, #0]
    e676:	4413      	add	r3, r2
    e678:	b2da      	uxtb	r2, r3
    e67a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e67e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e682:	701a      	strb	r2, [r3, #0]
    e684:	f24c 3319 	movw	r3, #49945	; 0xc319
    e688:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e68c:	781b      	ldrb	r3, [r3, #0]
    e68e:	3301      	adds	r3, #1
    e690:	b2da      	uxtb	r2, r3
    e692:	f24c 3319 	movw	r3, #49945	; 0xc319
    e696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e69a:	701a      	strb	r2, [r3, #0]
    e69c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e6a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6a4:	781b      	ldrb	r3, [r3, #0]
    e6a6:	2bff      	cmp	r3, #255	; 0xff
    e6a8:	d110      	bne.n	e6cc <send_nav_values+0xd58>
    e6aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    e6ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6b2:	2200      	movs	r2, #0
    e6b4:	701a      	strb	r2, [r3, #0]
    e6b6:	e009      	b.n	e6cc <send_nav_values+0xd58>
    e6b8:	2004c6a5 	.word	0x2004c6a5
    e6bc:	2004c6a6 	.word	0x2004c6a6
    e6c0:	2004c6a7 	.word	0x2004c6a7
    e6c4:	20000559 	.word	0x20000559
    e6c8:	2000055a 	.word	0x2000055a
    e6cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    e6d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6d4:	781b      	ldrb	r3, [r3, #0]
    e6d6:	461a      	mov	r2, r3
    e6d8:	f240 5358 	movw	r3, #1368	; 0x558
    e6dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e6e0:	78d9      	ldrb	r1, [r3, #3]
    e6e2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e6e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6ea:	5499      	strb	r1, [r3, r2]
    e6ec:	4bc2      	ldr	r3, [pc, #776]	; (e9f8 <send_nav_values+0x1084>)
    e6ee:	781a      	ldrb	r2, [r3, #0]
    e6f0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e6f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6f8:	781b      	ldrb	r3, [r3, #0]
    e6fa:	4413      	add	r3, r2
    e6fc:	b2da      	uxtb	r2, r3
    e6fe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e706:	701a      	strb	r2, [r3, #0]
    e708:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e70c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e710:	781a      	ldrb	r2, [r3, #0]
    e712:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e716:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e71a:	781b      	ldrb	r3, [r3, #0]
    e71c:	4413      	add	r3, r2
    e71e:	b2da      	uxtb	r2, r3
    e720:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e724:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e728:	701a      	strb	r2, [r3, #0]
    e72a:	f24c 3319 	movw	r3, #49945	; 0xc319
    e72e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e732:	781b      	ldrb	r3, [r3, #0]
    e734:	3301      	adds	r3, #1
    e736:	b2da      	uxtb	r2, r3
    e738:	f24c 3319 	movw	r3, #49945	; 0xc319
    e73c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e740:	701a      	strb	r2, [r3, #0]
    e742:	f24c 3319 	movw	r3, #49945	; 0xc319
    e746:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e74a:	781b      	ldrb	r3, [r3, #0]
    e74c:	2bff      	cmp	r3, #255	; 0xff
    e74e:	d105      	bne.n	e75c <send_nav_values+0xde8>
    e750:	f24c 3319 	movw	r3, #49945	; 0xc319
    e754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e758:	2200      	movs	r2, #0
    e75a:	701a      	strb	r2, [r3, #0]
    e75c:	f24c 3319 	movw	r3, #49945	; 0xc319
    e760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e764:	781b      	ldrb	r3, [r3, #0]
    e766:	461a      	mov	r2, r3
    e768:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
    e76c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e770:	7819      	ldrb	r1, [r3, #0]
    e772:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e776:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e77a:	5499      	strb	r1, [r3, r2]
    e77c:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
    e780:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e784:	781a      	ldrb	r2, [r3, #0]
    e786:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e78a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e78e:	781b      	ldrb	r3, [r3, #0]
    e790:	4413      	add	r3, r2
    e792:	b2da      	uxtb	r2, r3
    e794:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e798:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e79c:	701a      	strb	r2, [r3, #0]
    e79e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e7a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7a6:	781a      	ldrb	r2, [r3, #0]
    e7a8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e7ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7b0:	781b      	ldrb	r3, [r3, #0]
    e7b2:	4413      	add	r3, r2
    e7b4:	b2da      	uxtb	r2, r3
    e7b6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e7ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7be:	701a      	strb	r2, [r3, #0]
    e7c0:	f24c 3319 	movw	r3, #49945	; 0xc319
    e7c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7c8:	781b      	ldrb	r3, [r3, #0]
    e7ca:	3301      	adds	r3, #1
    e7cc:	b2da      	uxtb	r2, r3
    e7ce:	f24c 3319 	movw	r3, #49945	; 0xc319
    e7d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7d6:	701a      	strb	r2, [r3, #0]
    e7d8:	f24c 3319 	movw	r3, #49945	; 0xc319
    e7dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7e0:	781b      	ldrb	r3, [r3, #0]
    e7e2:	2bff      	cmp	r3, #255	; 0xff
    e7e4:	d105      	bne.n	e7f2 <send_nav_values+0xe7e>
    e7e6:	f24c 3319 	movw	r3, #49945	; 0xc319
    e7ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7ee:	2200      	movs	r2, #0
    e7f0:	701a      	strb	r2, [r3, #0]
    e7f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    e7f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7fa:	781b      	ldrb	r3, [r3, #0]
    e7fc:	461a      	mov	r2, r3
    e7fe:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
    e802:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e806:	7859      	ldrb	r1, [r3, #1]
    e808:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e80c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e810:	5499      	strb	r1, [r3, r2]
    e812:	4b7a      	ldr	r3, [pc, #488]	; (e9fc <send_nav_values+0x1088>)
    e814:	781a      	ldrb	r2, [r3, #0]
    e816:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e81a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e81e:	781b      	ldrb	r3, [r3, #0]
    e820:	4413      	add	r3, r2
    e822:	b2da      	uxtb	r2, r3
    e824:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e828:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e82c:	701a      	strb	r2, [r3, #0]
    e82e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e832:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e836:	781a      	ldrb	r2, [r3, #0]
    e838:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e83c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e840:	781b      	ldrb	r3, [r3, #0]
    e842:	4413      	add	r3, r2
    e844:	b2da      	uxtb	r2, r3
    e846:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e84a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e84e:	701a      	strb	r2, [r3, #0]
    e850:	f24c 3319 	movw	r3, #49945	; 0xc319
    e854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e858:	781b      	ldrb	r3, [r3, #0]
    e85a:	3301      	adds	r3, #1
    e85c:	b2da      	uxtb	r2, r3
    e85e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e862:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e866:	701a      	strb	r2, [r3, #0]
    e868:	f24c 3319 	movw	r3, #49945	; 0xc319
    e86c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e870:	781b      	ldrb	r3, [r3, #0]
    e872:	2bff      	cmp	r3, #255	; 0xff
    e874:	d105      	bne.n	e882 <send_nav_values+0xf0e>
    e876:	f24c 3319 	movw	r3, #49945	; 0xc319
    e87a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e87e:	2200      	movs	r2, #0
    e880:	701a      	strb	r2, [r3, #0]
    e882:	f24c 3319 	movw	r3, #49945	; 0xc319
    e886:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e88a:	781b      	ldrb	r3, [r3, #0]
    e88c:	461a      	mov	r2, r3
    e88e:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
    e892:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e896:	7899      	ldrb	r1, [r3, #2]
    e898:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e89c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8a0:	5499      	strb	r1, [r3, r2]
    e8a2:	4b57      	ldr	r3, [pc, #348]	; (ea00 <send_nav_values+0x108c>)
    e8a4:	781a      	ldrb	r2, [r3, #0]
    e8a6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e8aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8ae:	781b      	ldrb	r3, [r3, #0]
    e8b0:	4413      	add	r3, r2
    e8b2:	b2da      	uxtb	r2, r3
    e8b4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e8b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8bc:	701a      	strb	r2, [r3, #0]
    e8be:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e8c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8c6:	781a      	ldrb	r2, [r3, #0]
    e8c8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e8cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8d0:	781b      	ldrb	r3, [r3, #0]
    e8d2:	4413      	add	r3, r2
    e8d4:	b2da      	uxtb	r2, r3
    e8d6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e8da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8de:	701a      	strb	r2, [r3, #0]
    e8e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    e8e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8e8:	781b      	ldrb	r3, [r3, #0]
    e8ea:	3301      	adds	r3, #1
    e8ec:	b2da      	uxtb	r2, r3
    e8ee:	f24c 3319 	movw	r3, #49945	; 0xc319
    e8f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8f6:	701a      	strb	r2, [r3, #0]
    e8f8:	f24c 3319 	movw	r3, #49945	; 0xc319
    e8fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e900:	781b      	ldrb	r3, [r3, #0]
    e902:	2bff      	cmp	r3, #255	; 0xff
    e904:	d105      	bne.n	e912 <send_nav_values+0xf9e>
    e906:	f24c 3319 	movw	r3, #49945	; 0xc319
    e90a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e90e:	2200      	movs	r2, #0
    e910:	701a      	strb	r2, [r3, #0]
    e912:	f24c 3319 	movw	r3, #49945	; 0xc319
    e916:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e91a:	781b      	ldrb	r3, [r3, #0]
    e91c:	461a      	mov	r2, r3
    e91e:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
    e922:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e926:	78d9      	ldrb	r1, [r3, #3]
    e928:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e92c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e930:	5499      	strb	r1, [r3, r2]
    e932:	4b34      	ldr	r3, [pc, #208]	; (ea04 <send_nav_values+0x1090>)
    e934:	781a      	ldrb	r2, [r3, #0]
    e936:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e93a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e93e:	781b      	ldrb	r3, [r3, #0]
    e940:	4413      	add	r3, r2
    e942:	b2da      	uxtb	r2, r3
    e944:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e948:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e94c:	701a      	strb	r2, [r3, #0]
    e94e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e956:	781a      	ldrb	r2, [r3, #0]
    e958:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e95c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e960:	781b      	ldrb	r3, [r3, #0]
    e962:	4413      	add	r3, r2
    e964:	b2da      	uxtb	r2, r3
    e966:	f24c 431e 	movw	r3, #50206	; 0xc41e
    e96a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e96e:	701a      	strb	r2, [r3, #0]
    e970:	f24c 3319 	movw	r3, #49945	; 0xc319
    e974:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e978:	781b      	ldrb	r3, [r3, #0]
    e97a:	3301      	adds	r3, #1
    e97c:	b2da      	uxtb	r2, r3
    e97e:	f24c 3319 	movw	r3, #49945	; 0xc319
    e982:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e986:	701a      	strb	r2, [r3, #0]
    e988:	f24c 3319 	movw	r3, #49945	; 0xc319
    e98c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e990:	781b      	ldrb	r3, [r3, #0]
    e992:	2bff      	cmp	r3, #255	; 0xff
    e994:	d105      	bne.n	e9a2 <send_nav_values+0x102e>
    e996:	f24c 3319 	movw	r3, #49945	; 0xc319
    e99a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e99e:	2200      	movs	r2, #0
    e9a0:	701a      	strb	r2, [r3, #0]
    e9a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    e9a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9aa:	781b      	ldrb	r3, [r3, #0]
    e9ac:	461a      	mov	r2, r3
    e9ae:	f24c 431d 	movw	r3, #50205	; 0xc41d
    e9b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9b6:	7819      	ldrb	r1, [r3, #0]
    e9b8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    e9bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9c0:	5499      	strb	r1, [r3, r2]
    e9c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    e9c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9ca:	781b      	ldrb	r3, [r3, #0]
    e9cc:	3301      	adds	r3, #1
    e9ce:	b2da      	uxtb	r2, r3
    e9d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    e9d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9d8:	701a      	strb	r2, [r3, #0]
    e9da:	f24c 3319 	movw	r3, #49945	; 0xc319
    e9de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9e2:	781b      	ldrb	r3, [r3, #0]
    e9e4:	2bff      	cmp	r3, #255	; 0xff
    e9e6:	d10f      	bne.n	ea08 <send_nav_values+0x1094>
    e9e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    e9ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9f0:	2200      	movs	r2, #0
    e9f2:	701a      	strb	r2, [r3, #0]
    e9f4:	e008      	b.n	ea08 <send_nav_values+0x1094>
    e9f6:	bf00      	nop
    e9f8:	2000055b 	.word	0x2000055b
    e9fc:	2004c6a9 	.word	0x2004c6a9
    ea00:	2004c6aa 	.word	0x2004c6aa
    ea04:	2004c6ab 	.word	0x2004c6ab
    ea08:	f24c 3319 	movw	r3, #49945	; 0xc319
    ea0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea10:	781b      	ldrb	r3, [r3, #0]
    ea12:	461a      	mov	r2, r3
    ea14:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ea18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea1c:	7819      	ldrb	r1, [r3, #0]
    ea1e:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ea22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea26:	5499      	strb	r1, [r3, r2]
    ea28:	f24c 3319 	movw	r3, #49945	; 0xc319
    ea2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea30:	781b      	ldrb	r3, [r3, #0]
    ea32:	3301      	adds	r3, #1
    ea34:	b2da      	uxtb	r2, r3
    ea36:	f24c 3319 	movw	r3, #49945	; 0xc319
    ea3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea3e:	701a      	strb	r2, [r3, #0]
    ea40:	f24c 3319 	movw	r3, #49945	; 0xc319
    ea44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea48:	781b      	ldrb	r3, [r3, #0]
    ea4a:	2bff      	cmp	r3, #255	; 0xff
    ea4c:	d105      	bne.n	ea5a <send_nav_values+0x10e6>
    ea4e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ea52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea56:	2200      	movs	r2, #0
    ea58:	701a      	strb	r2, [r3, #0]
    ea5a:	f242 0339 	movw	r3, #8249	; 0x2039
    ea5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ea62:	781b      	ldrb	r3, [r3, #0]
    ea64:	b2db      	uxtb	r3, r3
    ea66:	f003 0310 	and.w	r3, r3, #16
    ea6a:	2b00      	cmp	r3, #0
    ea6c:	d15a      	bne.n	eb24 <send_nav_values+0x11b0>
    ea6e:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ea72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea76:	781b      	ldrb	r3, [r3, #0]
    ea78:	b2db      	uxtb	r3, r3
    ea7a:	461a      	mov	r2, r3
    ea7c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ea80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea84:	5c9a      	ldrb	r2, [r3, r2]
    ea86:	f24c 431b 	movw	r3, #50203	; 0xc41b
    ea8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea8e:	701a      	strb	r2, [r3, #0]
    ea90:	f24c 431c 	movw	r3, #50204	; 0xc41c
    ea94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea98:	2200      	movs	r2, #0
    ea9a:	701a      	strb	r2, [r3, #0]
    ea9c:	f24c 331a 	movw	r3, #49946	; 0xc31a
    eaa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaa4:	781b      	ldrb	r3, [r3, #0]
    eaa6:	b2db      	uxtb	r3, r3
    eaa8:	3301      	adds	r3, #1
    eaaa:	b2da      	uxtb	r2, r3
    eaac:	f24c 331a 	movw	r3, #49946	; 0xc31a
    eab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eab4:	701a      	strb	r2, [r3, #0]
    eab6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    eaba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eabe:	781b      	ldrb	r3, [r3, #0]
    eac0:	b2db      	uxtb	r3, r3
    eac2:	2bff      	cmp	r3, #255	; 0xff
    eac4:	d105      	bne.n	ead2 <send_nav_values+0x115e>
    eac6:	f24c 331a 	movw	r3, #49946	; 0xc31a
    eaca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eace:	2200      	movs	r2, #0
    ead0:	701a      	strb	r2, [r3, #0]
    ead2:	f242 0338 	movw	r3, #8248	; 0x2038
    ead6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eada:	f242 0238 	movw	r2, #8248	; 0x2038
    eade:	f2c2 0200 	movt	r2, #8192	; 0x2000
    eae2:	7812      	ldrb	r2, [r2, #0]
    eae4:	b2d2      	uxtb	r2, r2
    eae6:	f042 0201 	orr.w	r2, r2, #1
    eaea:	b2d2      	uxtb	r2, r2
    eaec:	701a      	strb	r2, [r3, #0]
    eaee:	f242 0339 	movw	r3, #8249	; 0x2039
    eaf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    eaf6:	f242 0239 	movw	r2, #8249	; 0x2039
    eafa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    eafe:	7812      	ldrb	r2, [r2, #0]
    eb00:	b2d2      	uxtb	r2, r2
    eb02:	f042 0210 	orr.w	r2, r2, #16
    eb06:	b2d2      	uxtb	r2, r2
    eb08:	701a      	strb	r2, [r3, #0]
    eb0a:	e00b      	b.n	eb24 <send_nav_values+0x11b0>
    eb0c:	f24c 3318 	movw	r3, #49944	; 0xc318
    eb10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb14:	781b      	ldrb	r3, [r3, #0]
    eb16:	3301      	adds	r3, #1
    eb18:	b2da      	uxtb	r2, r3
    eb1a:	f24c 3318 	movw	r3, #49944	; 0xc318
    eb1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb22:	701a      	strb	r2, [r3, #0]
}
    eb24:	46bd      	mov	sp, r7
    eb26:	f85d 7b04 	ldr.w	r7, [sp], #4
    eb2a:	4770      	bx	lr

0000eb2c <course_run>:

void course_run(void){
    eb2c:	b580      	push	{r7, lr}
    eb2e:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    eb30:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    eb34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb38:	781b      	ldrb	r3, [r3, #0]
    eb3a:	2b02      	cmp	r3, #2
    eb3c:	d006      	beq.n	eb4c <course_run+0x20>
    eb3e:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    eb42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb46:	781b      	ldrb	r3, [r3, #0]
    eb48:	2b03      	cmp	r3, #3
    eb4a:	d112      	bne.n	eb72 <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    eb4c:	f24c 23fe 	movw	r3, #49918	; 0xc2fe
    eb50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb54:	781b      	ldrb	r3, [r3, #0]
    eb56:	2b02      	cmp	r3, #2
    eb58:	d901      	bls.n	eb5e <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    eb5a:	f003 faf1 	bl	12140 <course_pid_run>
    desired_roll = nav_desired_roll;
    eb5e:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
    eb62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb66:	681a      	ldr	r2, [r3, #0]
    eb68:	f24c 6344 	movw	r3, #50756	; 0xc644
    eb6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb70:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    eb72:	bd80      	pop	{r7, pc}

0000eb74 <altitude_control_task>:

void altitude_control_task(void)
{
    eb74:	b580      	push	{r7, lr}
    eb76:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    eb78:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    eb7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb80:	781b      	ldrb	r3, [r3, #0]
    eb82:	2b02      	cmp	r3, #2
    eb84:	d006      	beq.n	eb94 <altitude_control_task+0x20>
    eb86:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    eb8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb8e:	781b      	ldrb	r3, [r3, #0]
    eb90:	2b03      	cmp	r3, #3
    eb92:	d108      	bne.n	eba6 <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    eb94:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    eb98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb9c:	781b      	ldrb	r3, [r3, #0]
    eb9e:	2b03      	cmp	r3, #3
    eba0:	d101      	bne.n	eba6 <altitude_control_task+0x32>
      			altitude_pid_run();
    eba2:	f003 fd55 	bl	12650 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    eba6:	bd80      	pop	{r7, pc}

0000eba8 <climb_control_task>:
void climb_control_task(void)
{
    eba8:	b580      	push	{r7, lr}
    ebaa:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    ebac:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    ebb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebb4:	781b      	ldrb	r3, [r3, #0]
    ebb6:	2b02      	cmp	r3, #2
    ebb8:	d006      	beq.n	ebc8 <climb_control_task+0x20>
    ebba:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
    ebbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebc2:	781b      	ldrb	r3, [r3, #0]
    ebc4:	2b03      	cmp	r3, #3
    ebc6:	d135      	bne.n	ec34 <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    ebc8:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    ebcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebd0:	781b      	ldrb	r3, [r3, #0]
    ebd2:	2b01      	cmp	r3, #1
    ebd4:	d901      	bls.n	ebda <climb_control_task+0x32>
        	climb_pid_run();
    ebd6:	f003 fb6b 	bl	122b0 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    ebda:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
    ebde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebe2:	781b      	ldrb	r3, [r3, #0]
    ebe4:	2b01      	cmp	r3, #1
    ebe6:	d10a      	bne.n	ebfe <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    ebe8:	f24c 6398 	movw	r3, #50840	; 0xc698
    ebec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebf0:	881b      	ldrh	r3, [r3, #0]
    ebf2:	b29a      	uxth	r2, r3
    ebf4:	f24c 634c 	movw	r3, #50764	; 0xc64c
    ebf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebfc:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    ebfe:	f24c 3305 	movw	r3, #49925	; 0xc305
    ec02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec06:	781b      	ldrb	r3, [r3, #0]
    ec08:	2b00      	cmp	r3, #0
    ec0a:	d10d      	bne.n	ec28 <climb_control_task+0x80>
    ec0c:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
    ec10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec14:	881b      	ldrh	r3, [r3, #0]
    ec16:	2b00      	cmp	r3, #0
    ec18:	d10c      	bne.n	ec34 <climb_control_task+0x8c>
    ec1a:	f24c 3310 	movw	r3, #49936	; 0xc310
    ec1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec22:	781b      	ldrb	r3, [r3, #0]
    ec24:	2b00      	cmp	r3, #0
    ec26:	d105      	bne.n	ec34 <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    ec28:	f24c 634c 	movw	r3, #50764	; 0xc64c
    ec2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec30:	2200      	movs	r2, #0
    ec32:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    ec34:	bd80      	pop	{r7, pc}
    ec36:	bf00      	nop

0000ec38 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    ec38:	b580      	push	{r7, lr}
    ec3a:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    ec3c:	f003 f926 	bl	11e8c <ir_update>
    estimator_update_state_infrared();
    ec40:	f006 fbac 	bl	1539c <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    ec44:	f003 f990 	bl	11f68 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    ec48:	f24c 634c 	movw	r3, #50764	; 0xc64c
    ec4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec50:	881a      	ldrh	r2, [r3, #0]
    ec52:	f24c 4338 	movw	r3, #50232	; 0xc438
    ec56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec5a:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    ec5c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ec60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec64:	881a      	ldrh	r2, [r3, #0]
    ec66:	f24c 4338 	movw	r3, #50232	; 0xc438
    ec6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec6e:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    ec70:	f24c 6350 	movw	r3, #50768	; 0xc650
    ec74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec78:	881a      	ldrh	r2, [r3, #0]
    ec7a:	f24c 4338 	movw	r3, #50232	; 0xc438
    ec7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec82:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    ec84:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    ec88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec8c:	681b      	ldr	r3, [r3, #0]
    ec8e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    ec92:	4618      	mov	r0, r3
    ec94:	f008 fffa 	bl	17c8c <__aeabi_f2d>
    ec98:	4602      	mov	r2, r0
    ec9a:	460b      	mov	r3, r1
    ec9c:	4610      	mov	r0, r2
    ec9e:	4619      	mov	r1, r3
    eca0:	f04f 0200 	mov.w	r2, #0
    eca4:	f04f 0300 	mov.w	r3, #0
    eca8:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    ecac:	f009 f842 	bl	17d34 <__aeabi_dmul>
    ecb0:	4602      	mov	r2, r0
    ecb2:	460b      	mov	r3, r1
    ecb4:	4610      	mov	r0, r2
    ecb6:	4619      	mov	r1, r3
    ecb8:	f04f 0200 	mov.w	r2, #0
    ecbc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    ecc0:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    ecc4:	f009 faa8 	bl	18218 <__aeabi_dcmplt>
    ecc8:	4603      	mov	r3, r0
    ecca:	2b00      	cmp	r3, #0
    eccc:	d002      	beq.n	ecd4 <stabilisation_task+0x9c>
    ecce:	f64d 2280 	movw	r2, #55936	; 0xda80
    ecd2:	e046      	b.n	ed62 <stabilisation_task+0x12a>
    ecd4:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    ecd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecdc:	681b      	ldr	r3, [r3, #0]
    ecde:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    ece2:	4618      	mov	r0, r3
    ece4:	f008 ffd2 	bl	17c8c <__aeabi_f2d>
    ece8:	4602      	mov	r2, r0
    ecea:	460b      	mov	r3, r1
    ecec:	4610      	mov	r0, r2
    ecee:	4619      	mov	r1, r3
    ecf0:	f04f 0200 	mov.w	r2, #0
    ecf4:	f04f 0300 	mov.w	r3, #0
    ecf8:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    ecfc:	f009 f81a 	bl	17d34 <__aeabi_dmul>
    ed00:	4602      	mov	r2, r0
    ed02:	460b      	mov	r3, r1
    ed04:	4610      	mov	r0, r2
    ed06:	4619      	mov	r1, r3
    ed08:	f04f 0200 	mov.w	r2, #0
    ed0c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    ed10:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    ed14:	f009 fa9e 	bl	18254 <__aeabi_dcmpgt>
    ed18:	4603      	mov	r3, r0
    ed1a:	2b00      	cmp	r3, #0
    ed1c:	d002      	beq.n	ed24 <stabilisation_task+0xec>
    ed1e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    ed22:	e01d      	b.n	ed60 <stabilisation_task+0x128>
    ed24:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    ed28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed2c:	681b      	ldr	r3, [r3, #0]
    ed2e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    ed32:	4618      	mov	r0, r3
    ed34:	f008 ffaa 	bl	17c8c <__aeabi_f2d>
    ed38:	4602      	mov	r2, r0
    ed3a:	460b      	mov	r3, r1
    ed3c:	4610      	mov	r0, r2
    ed3e:	4619      	mov	r1, r3
    ed40:	f04f 0200 	mov.w	r2, #0
    ed44:	f04f 0300 	mov.w	r3, #0
    ed48:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    ed4c:	f008 fff2 	bl	17d34 <__aeabi_dmul>
    ed50:	4602      	mov	r2, r0
    ed52:	460b      	mov	r3, r1
    ed54:	4610      	mov	r0, r2
    ed56:	4619      	mov	r1, r3
    ed58:	f009 fa86 	bl	18268 <__aeabi_d2iz>
    ed5c:	4603      	mov	r3, r0
    ed5e:	b29b      	uxth	r3, r3
    ed60:	b29a      	uxth	r2, r3
    ed62:	f24c 4338 	movw	r3, #50232	; 0xc438
    ed66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed6a:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    ed6c:	bd80      	pop	{r7, pc}
    ed6e:	bf00      	nop

0000ed70 <send_gps_pos>:
 * If \a estimator_flight_time is null and \a estimator_hspeed_mod is greater
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void send_gps_pos( void ) {
    ed70:	b580      	push	{r7, lr}
    ed72:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    ed74:	f24c 43ad 	movw	r3, #50349	; 0xc4ad
    ed78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed7c:	2200      	movs	r2, #0
    ed7e:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    ed80:	f24c 43ae 	movw	r3, #50350	; 0xc4ae
    ed84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed88:	781b      	ldrb	r3, [r3, #0]
    ed8a:	2b00      	cmp	r3, #0
    ed8c:	f001 81af 	beq.w	100ee <send_gps_pos+0x137e>
     DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
    ed90:	f24c 3319 	movw	r3, #49945	; 0xc319
    ed94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed98:	781a      	ldrb	r2, [r3, #0]
    ed9a:	f24c 331a 	movw	r3, #49946	; 0xc31a
    ed9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eda2:	781b      	ldrb	r3, [r3, #0]
    eda4:	b2db      	uxtb	r3, r3
    eda6:	429a      	cmp	r2, r3
    eda8:	d313      	bcc.n	edd2 <send_gps_pos+0x62>
    edaa:	f24c 331a 	movw	r3, #49946	; 0xc31a
    edae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edb2:	781b      	ldrb	r3, [r3, #0]
    edb4:	b2db      	uxtb	r3, r3
    edb6:	461a      	mov	r2, r3
    edb8:	f24c 3319 	movw	r3, #49945	; 0xc319
    edbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edc0:	781b      	ldrb	r3, [r3, #0]
    edc2:	1ad3      	subs	r3, r2, r3
    edc4:	33ff      	adds	r3, #255	; 0xff
    edc6:	2b21      	cmp	r3, #33	; 0x21
    edc8:	bfd4      	ite	le
    edca:	2300      	movle	r3, #0
    edcc:	2301      	movgt	r3, #1
    edce:	b2db      	uxtb	r3, r3
    edd0:	e011      	b.n	edf6 <send_gps_pos+0x86>
    edd2:	f24c 331a 	movw	r3, #49946	; 0xc31a
    edd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edda:	781b      	ldrb	r3, [r3, #0]
    eddc:	b2db      	uxtb	r3, r3
    edde:	461a      	mov	r2, r3
    ede0:	f24c 3319 	movw	r3, #49945	; 0xc319
    ede4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ede8:	781b      	ldrb	r3, [r3, #0]
    edea:	1ad3      	subs	r3, r2, r3
    edec:	2b21      	cmp	r3, #33	; 0x21
    edee:	bfd4      	ite	le
    edf0:	2300      	movle	r3, #0
    edf2:	2301      	movgt	r3, #1
    edf4:	b2db      	uxtb	r3, r3
    edf6:	2b00      	cmp	r3, #0
    edf8:	f001 816b 	beq.w	100d2 <send_gps_pos+0x1362>
    edfc:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee04:	781b      	ldrb	r3, [r3, #0]
    ee06:	461a      	mov	r2, r3
    ee08:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ee0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee10:	2105      	movs	r1, #5
    ee12:	5499      	strb	r1, [r3, r2]
    ee14:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee1c:	781b      	ldrb	r3, [r3, #0]
    ee1e:	3301      	adds	r3, #1
    ee20:	b2da      	uxtb	r2, r3
    ee22:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee2a:	701a      	strb	r2, [r3, #0]
    ee2c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee34:	781b      	ldrb	r3, [r3, #0]
    ee36:	2bff      	cmp	r3, #255	; 0xff
    ee38:	d105      	bne.n	ee46 <send_gps_pos+0xd6>
    ee3a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee42:	2200      	movs	r2, #0
    ee44:	701a      	strb	r2, [r3, #0]
    ee46:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee4e:	781b      	ldrb	r3, [r3, #0]
    ee50:	461a      	mov	r2, r3
    ee52:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ee56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee5a:	2108      	movs	r1, #8
    ee5c:	5499      	strb	r1, [r3, r2]
    ee5e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee66:	781b      	ldrb	r3, [r3, #0]
    ee68:	3301      	adds	r3, #1
    ee6a:	b2da      	uxtb	r2, r3
    ee6c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee74:	701a      	strb	r2, [r3, #0]
    ee76:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee7e:	781b      	ldrb	r3, [r3, #0]
    ee80:	2bff      	cmp	r3, #255	; 0xff
    ee82:	d105      	bne.n	ee90 <send_gps_pos+0x120>
    ee84:	f24c 3319 	movw	r3, #49945	; 0xc319
    ee88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee8c:	2200      	movs	r2, #0
    ee8e:	701a      	strb	r2, [r3, #0]
    ee90:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ee94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee98:	2208      	movs	r2, #8
    ee9a:	701a      	strb	r2, [r3, #0]
    ee9c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    eea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eea4:	2208      	movs	r2, #8
    eea6:	701a      	strb	r2, [r3, #0]
    eea8:	f24c 3319 	movw	r3, #49945	; 0xc319
    eeac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeb0:	781b      	ldrb	r3, [r3, #0]
    eeb2:	461a      	mov	r2, r3
    eeb4:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
    eeb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eebc:	7819      	ldrb	r1, [r3, #0]
    eebe:	f24c 331c 	movw	r3, #49948	; 0xc31c
    eec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eec6:	5499      	strb	r1, [r3, r2]
    eec8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    eecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eed0:	781a      	ldrb	r2, [r3, #0]
    eed2:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
    eed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeda:	781b      	ldrb	r3, [r3, #0]
    eedc:	4413      	add	r3, r2
    eede:	b2da      	uxtb	r2, r3
    eee0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    eee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eee8:	701a      	strb	r2, [r3, #0]
    eeea:	f24c 431e 	movw	r3, #50206	; 0xc41e
    eeee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eef2:	781a      	ldrb	r2, [r3, #0]
    eef4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    eef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eefc:	781b      	ldrb	r3, [r3, #0]
    eefe:	4413      	add	r3, r2
    ef00:	b2da      	uxtb	r2, r3
    ef02:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ef06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef0a:	701a      	strb	r2, [r3, #0]
    ef0c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef14:	781b      	ldrb	r3, [r3, #0]
    ef16:	3301      	adds	r3, #1
    ef18:	b2da      	uxtb	r2, r3
    ef1a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef22:	701a      	strb	r2, [r3, #0]
    ef24:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef2c:	781b      	ldrb	r3, [r3, #0]
    ef2e:	2bff      	cmp	r3, #255	; 0xff
    ef30:	d105      	bne.n	ef3e <send_gps_pos+0x1ce>
    ef32:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef3a:	2200      	movs	r2, #0
    ef3c:	701a      	strb	r2, [r3, #0]
    ef3e:	f24c 3319 	movw	r3, #49945	; 0xc319
    ef42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef46:	781b      	ldrb	r3, [r3, #0]
    ef48:	461a      	mov	r2, r3
    ef4a:	f24c 439c 	movw	r3, #50332	; 0xc49c
    ef4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef52:	7819      	ldrb	r1, [r3, #0]
    ef54:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ef58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef5c:	5499      	strb	r1, [r3, r2]
    ef5e:	f24c 439c 	movw	r3, #50332	; 0xc49c
    ef62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef66:	781a      	ldrb	r2, [r3, #0]
    ef68:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ef6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef70:	781b      	ldrb	r3, [r3, #0]
    ef72:	4413      	add	r3, r2
    ef74:	b2da      	uxtb	r2, r3
    ef76:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ef7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef7e:	701a      	strb	r2, [r3, #0]
    ef80:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ef84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef88:	781a      	ldrb	r2, [r3, #0]
    ef8a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ef8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef92:	781b      	ldrb	r3, [r3, #0]
    ef94:	4413      	add	r3, r2
    ef96:	b2da      	uxtb	r2, r3
    ef98:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ef9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efa0:	701a      	strb	r2, [r3, #0]
    efa2:	f24c 3319 	movw	r3, #49945	; 0xc319
    efa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efaa:	781b      	ldrb	r3, [r3, #0]
    efac:	3301      	adds	r3, #1
    efae:	b2da      	uxtb	r2, r3
    efb0:	f24c 3319 	movw	r3, #49945	; 0xc319
    efb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efb8:	701a      	strb	r2, [r3, #0]
    efba:	f24c 3319 	movw	r3, #49945	; 0xc319
    efbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efc2:	781b      	ldrb	r3, [r3, #0]
    efc4:	2bff      	cmp	r3, #255	; 0xff
    efc6:	d105      	bne.n	efd4 <send_gps_pos+0x264>
    efc8:	f24c 3319 	movw	r3, #49945	; 0xc319
    efcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efd0:	2200      	movs	r2, #0
    efd2:	701a      	strb	r2, [r3, #0]
    efd4:	f24c 3319 	movw	r3, #49945	; 0xc319
    efd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efdc:	781b      	ldrb	r3, [r3, #0]
    efde:	461a      	mov	r2, r3
    efe0:	f24c 439c 	movw	r3, #50332	; 0xc49c
    efe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efe8:	7859      	ldrb	r1, [r3, #1]
    efea:	f24c 331c 	movw	r3, #49948	; 0xc31c
    efee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eff2:	5499      	strb	r1, [r3, r2]
    eff4:	4bd1      	ldr	r3, [pc, #836]	; (f33c <send_gps_pos+0x5cc>)
    eff6:	781a      	ldrb	r2, [r3, #0]
    eff8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    effc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f000:	781b      	ldrb	r3, [r3, #0]
    f002:	4413      	add	r3, r2
    f004:	b2da      	uxtb	r2, r3
    f006:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f00a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f00e:	701a      	strb	r2, [r3, #0]
    f010:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f014:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f018:	781a      	ldrb	r2, [r3, #0]
    f01a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f01e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f022:	781b      	ldrb	r3, [r3, #0]
    f024:	4413      	add	r3, r2
    f026:	b2da      	uxtb	r2, r3
    f028:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f02c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f030:	701a      	strb	r2, [r3, #0]
    f032:	f24c 3319 	movw	r3, #49945	; 0xc319
    f036:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f03a:	781b      	ldrb	r3, [r3, #0]
    f03c:	3301      	adds	r3, #1
    f03e:	b2da      	uxtb	r2, r3
    f040:	f24c 3319 	movw	r3, #49945	; 0xc319
    f044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f048:	701a      	strb	r2, [r3, #0]
    f04a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f04e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f052:	781b      	ldrb	r3, [r3, #0]
    f054:	2bff      	cmp	r3, #255	; 0xff
    f056:	d105      	bne.n	f064 <send_gps_pos+0x2f4>
    f058:	f24c 3319 	movw	r3, #49945	; 0xc319
    f05c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f060:	2200      	movs	r2, #0
    f062:	701a      	strb	r2, [r3, #0]
    f064:	f24c 3319 	movw	r3, #49945	; 0xc319
    f068:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f06c:	781b      	ldrb	r3, [r3, #0]
    f06e:	461a      	mov	r2, r3
    f070:	f24c 439c 	movw	r3, #50332	; 0xc49c
    f074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f078:	7899      	ldrb	r1, [r3, #2]
    f07a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f07e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f082:	5499      	strb	r1, [r3, r2]
    f084:	4bae      	ldr	r3, [pc, #696]	; (f340 <send_gps_pos+0x5d0>)
    f086:	781a      	ldrb	r2, [r3, #0]
    f088:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f08c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f090:	781b      	ldrb	r3, [r3, #0]
    f092:	4413      	add	r3, r2
    f094:	b2da      	uxtb	r2, r3
    f096:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f09a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f09e:	701a      	strb	r2, [r3, #0]
    f0a0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f0a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0a8:	781a      	ldrb	r2, [r3, #0]
    f0aa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f0ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0b2:	781b      	ldrb	r3, [r3, #0]
    f0b4:	4413      	add	r3, r2
    f0b6:	b2da      	uxtb	r2, r3
    f0b8:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f0bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0c0:	701a      	strb	r2, [r3, #0]
    f0c2:	f24c 3319 	movw	r3, #49945	; 0xc319
    f0c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0ca:	781b      	ldrb	r3, [r3, #0]
    f0cc:	3301      	adds	r3, #1
    f0ce:	b2da      	uxtb	r2, r3
    f0d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    f0d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0d8:	701a      	strb	r2, [r3, #0]
    f0da:	f24c 3319 	movw	r3, #49945	; 0xc319
    f0de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0e2:	781b      	ldrb	r3, [r3, #0]
    f0e4:	2bff      	cmp	r3, #255	; 0xff
    f0e6:	d105      	bne.n	f0f4 <send_gps_pos+0x384>
    f0e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    f0ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0f0:	2200      	movs	r2, #0
    f0f2:	701a      	strb	r2, [r3, #0]
    f0f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    f0f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0fc:	781b      	ldrb	r3, [r3, #0]
    f0fe:	461a      	mov	r2, r3
    f100:	f24c 439c 	movw	r3, #50332	; 0xc49c
    f104:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f108:	78d9      	ldrb	r1, [r3, #3]
    f10a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f10e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f112:	5499      	strb	r1, [r3, r2]
    f114:	4b8b      	ldr	r3, [pc, #556]	; (f344 <send_gps_pos+0x5d4>)
    f116:	781a      	ldrb	r2, [r3, #0]
    f118:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f11c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f120:	781b      	ldrb	r3, [r3, #0]
    f122:	4413      	add	r3, r2
    f124:	b2da      	uxtb	r2, r3
    f126:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f12a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f12e:	701a      	strb	r2, [r3, #0]
    f130:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f138:	781a      	ldrb	r2, [r3, #0]
    f13a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f13e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f142:	781b      	ldrb	r3, [r3, #0]
    f144:	4413      	add	r3, r2
    f146:	b2da      	uxtb	r2, r3
    f148:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f14c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f150:	701a      	strb	r2, [r3, #0]
    f152:	f24c 3319 	movw	r3, #49945	; 0xc319
    f156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f15a:	781b      	ldrb	r3, [r3, #0]
    f15c:	3301      	adds	r3, #1
    f15e:	b2da      	uxtb	r2, r3
    f160:	f24c 3319 	movw	r3, #49945	; 0xc319
    f164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f168:	701a      	strb	r2, [r3, #0]
    f16a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f16e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f172:	781b      	ldrb	r3, [r3, #0]
    f174:	2bff      	cmp	r3, #255	; 0xff
    f176:	d105      	bne.n	f184 <send_gps_pos+0x414>
    f178:	f24c 3319 	movw	r3, #49945	; 0xc319
    f17c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f180:	2200      	movs	r2, #0
    f182:	701a      	strb	r2, [r3, #0]
    f184:	f24c 3319 	movw	r3, #49945	; 0xc319
    f188:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f18c:	781b      	ldrb	r3, [r3, #0]
    f18e:	461a      	mov	r2, r3
    f190:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    f194:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f198:	7819      	ldrb	r1, [r3, #0]
    f19a:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f19e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1a2:	5499      	strb	r1, [r3, r2]
    f1a4:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    f1a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1ac:	781a      	ldrb	r2, [r3, #0]
    f1ae:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f1b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1b6:	781b      	ldrb	r3, [r3, #0]
    f1b8:	4413      	add	r3, r2
    f1ba:	b2da      	uxtb	r2, r3
    f1bc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f1c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1c4:	701a      	strb	r2, [r3, #0]
    f1c6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f1ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1ce:	781a      	ldrb	r2, [r3, #0]
    f1d0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f1d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1d8:	781b      	ldrb	r3, [r3, #0]
    f1da:	4413      	add	r3, r2
    f1dc:	b2da      	uxtb	r2, r3
    f1de:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f1e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1e6:	701a      	strb	r2, [r3, #0]
    f1e8:	f24c 3319 	movw	r3, #49945	; 0xc319
    f1ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1f0:	781b      	ldrb	r3, [r3, #0]
    f1f2:	3301      	adds	r3, #1
    f1f4:	b2da      	uxtb	r2, r3
    f1f6:	f24c 3319 	movw	r3, #49945	; 0xc319
    f1fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1fe:	701a      	strb	r2, [r3, #0]
    f200:	f24c 3319 	movw	r3, #49945	; 0xc319
    f204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f208:	781b      	ldrb	r3, [r3, #0]
    f20a:	2bff      	cmp	r3, #255	; 0xff
    f20c:	d105      	bne.n	f21a <send_gps_pos+0x4aa>
    f20e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f212:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f216:	2200      	movs	r2, #0
    f218:	701a      	strb	r2, [r3, #0]
    f21a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f21e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f222:	781b      	ldrb	r3, [r3, #0]
    f224:	461a      	mov	r2, r3
    f226:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    f22a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f22e:	7859      	ldrb	r1, [r3, #1]
    f230:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f238:	5499      	strb	r1, [r3, r2]
    f23a:	4b43      	ldr	r3, [pc, #268]	; (f348 <send_gps_pos+0x5d8>)
    f23c:	781a      	ldrb	r2, [r3, #0]
    f23e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f246:	781b      	ldrb	r3, [r3, #0]
    f248:	4413      	add	r3, r2
    f24a:	b2da      	uxtb	r2, r3
    f24c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f250:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f254:	701a      	strb	r2, [r3, #0]
    f256:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f25a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f25e:	781a      	ldrb	r2, [r3, #0]
    f260:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f268:	781b      	ldrb	r3, [r3, #0]
    f26a:	4413      	add	r3, r2
    f26c:	b2da      	uxtb	r2, r3
    f26e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f276:	701a      	strb	r2, [r3, #0]
    f278:	f24c 3319 	movw	r3, #49945	; 0xc319
    f27c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f280:	781b      	ldrb	r3, [r3, #0]
    f282:	3301      	adds	r3, #1
    f284:	b2da      	uxtb	r2, r3
    f286:	f24c 3319 	movw	r3, #49945	; 0xc319
    f28a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f28e:	701a      	strb	r2, [r3, #0]
    f290:	f24c 3319 	movw	r3, #49945	; 0xc319
    f294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f298:	781b      	ldrb	r3, [r3, #0]
    f29a:	2bff      	cmp	r3, #255	; 0xff
    f29c:	d105      	bne.n	f2aa <send_gps_pos+0x53a>
    f29e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f2a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2a6:	2200      	movs	r2, #0
    f2a8:	701a      	strb	r2, [r3, #0]
    f2aa:	f24c 3319 	movw	r3, #49945	; 0xc319
    f2ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2b2:	781b      	ldrb	r3, [r3, #0]
    f2b4:	461a      	mov	r2, r3
    f2b6:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    f2ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2be:	7899      	ldrb	r1, [r3, #2]
    f2c0:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f2c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2c8:	5499      	strb	r1, [r3, r2]
    f2ca:	4b20      	ldr	r3, [pc, #128]	; (f34c <send_gps_pos+0x5dc>)
    f2cc:	781a      	ldrb	r2, [r3, #0]
    f2ce:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f2d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2d6:	781b      	ldrb	r3, [r3, #0]
    f2d8:	4413      	add	r3, r2
    f2da:	b2da      	uxtb	r2, r3
    f2dc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f2e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2e4:	701a      	strb	r2, [r3, #0]
    f2e6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f2ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2ee:	781a      	ldrb	r2, [r3, #0]
    f2f0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f2f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2f8:	781b      	ldrb	r3, [r3, #0]
    f2fa:	4413      	add	r3, r2
    f2fc:	b2da      	uxtb	r2, r3
    f2fe:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f302:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f306:	701a      	strb	r2, [r3, #0]
    f308:	f24c 3319 	movw	r3, #49945	; 0xc319
    f30c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f310:	781b      	ldrb	r3, [r3, #0]
    f312:	3301      	adds	r3, #1
    f314:	b2da      	uxtb	r2, r3
    f316:	f24c 3319 	movw	r3, #49945	; 0xc319
    f31a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f31e:	701a      	strb	r2, [r3, #0]
    f320:	f24c 3319 	movw	r3, #49945	; 0xc319
    f324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f328:	781b      	ldrb	r3, [r3, #0]
    f32a:	2bff      	cmp	r3, #255	; 0xff
    f32c:	d110      	bne.n	f350 <send_gps_pos+0x5e0>
    f32e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f336:	2200      	movs	r2, #0
    f338:	701a      	strb	r2, [r3, #0]
    f33a:	e009      	b.n	f350 <send_gps_pos+0x5e0>
    f33c:	2004c49d 	.word	0x2004c49d
    f340:	2004c49e 	.word	0x2004c49e
    f344:	2004c49f 	.word	0x2004c49f
    f348:	2004c4a1 	.word	0x2004c4a1
    f34c:	2004c4a2 	.word	0x2004c4a2
    f350:	f24c 3319 	movw	r3, #49945	; 0xc319
    f354:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f358:	781b      	ldrb	r3, [r3, #0]
    f35a:	461a      	mov	r2, r3
    f35c:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
    f360:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f364:	78d9      	ldrb	r1, [r3, #3]
    f366:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f36a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f36e:	5499      	strb	r1, [r3, r2]
    f370:	4bd3      	ldr	r3, [pc, #844]	; (f6c0 <send_gps_pos+0x950>)
    f372:	781a      	ldrb	r2, [r3, #0]
    f374:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f37c:	781b      	ldrb	r3, [r3, #0]
    f37e:	4413      	add	r3, r2
    f380:	b2da      	uxtb	r2, r3
    f382:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f386:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f38a:	701a      	strb	r2, [r3, #0]
    f38c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f394:	781a      	ldrb	r2, [r3, #0]
    f396:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f39a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f39e:	781b      	ldrb	r3, [r3, #0]
    f3a0:	4413      	add	r3, r2
    f3a2:	b2da      	uxtb	r2, r3
    f3a4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f3a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3ac:	701a      	strb	r2, [r3, #0]
    f3ae:	f24c 3319 	movw	r3, #49945	; 0xc319
    f3b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3b6:	781b      	ldrb	r3, [r3, #0]
    f3b8:	3301      	adds	r3, #1
    f3ba:	b2da      	uxtb	r2, r3
    f3bc:	f24c 3319 	movw	r3, #49945	; 0xc319
    f3c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3c4:	701a      	strb	r2, [r3, #0]
    f3c6:	f24c 3319 	movw	r3, #49945	; 0xc319
    f3ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3ce:	781b      	ldrb	r3, [r3, #0]
    f3d0:	2bff      	cmp	r3, #255	; 0xff
    f3d2:	d105      	bne.n	f3e0 <send_gps_pos+0x670>
    f3d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    f3d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3dc:	2200      	movs	r2, #0
    f3de:	701a      	strb	r2, [r3, #0]
    f3e0:	f24c 3319 	movw	r3, #49945	; 0xc319
    f3e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3e8:	781b      	ldrb	r3, [r3, #0]
    f3ea:	461a      	mov	r2, r3
    f3ec:	f24c 4398 	movw	r3, #50328	; 0xc498
    f3f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3f4:	7819      	ldrb	r1, [r3, #0]
    f3f6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f3fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3fe:	5499      	strb	r1, [r3, r2]
    f400:	f24c 4398 	movw	r3, #50328	; 0xc498
    f404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f408:	781a      	ldrb	r2, [r3, #0]
    f40a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f40e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f412:	781b      	ldrb	r3, [r3, #0]
    f414:	4413      	add	r3, r2
    f416:	b2da      	uxtb	r2, r3
    f418:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f41c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f420:	701a      	strb	r2, [r3, #0]
    f422:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f426:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f42a:	781a      	ldrb	r2, [r3, #0]
    f42c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f434:	781b      	ldrb	r3, [r3, #0]
    f436:	4413      	add	r3, r2
    f438:	b2da      	uxtb	r2, r3
    f43a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f43e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f442:	701a      	strb	r2, [r3, #0]
    f444:	f24c 3319 	movw	r3, #49945	; 0xc319
    f448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f44c:	781b      	ldrb	r3, [r3, #0]
    f44e:	3301      	adds	r3, #1
    f450:	b2da      	uxtb	r2, r3
    f452:	f24c 3319 	movw	r3, #49945	; 0xc319
    f456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f45a:	701a      	strb	r2, [r3, #0]
    f45c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f464:	781b      	ldrb	r3, [r3, #0]
    f466:	2bff      	cmp	r3, #255	; 0xff
    f468:	d105      	bne.n	f476 <send_gps_pos+0x706>
    f46a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f46e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f472:	2200      	movs	r2, #0
    f474:	701a      	strb	r2, [r3, #0]
    f476:	f24c 3319 	movw	r3, #49945	; 0xc319
    f47a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f47e:	781b      	ldrb	r3, [r3, #0]
    f480:	461a      	mov	r2, r3
    f482:	f24c 4398 	movw	r3, #50328	; 0xc498
    f486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f48a:	7859      	ldrb	r1, [r3, #1]
    f48c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f494:	5499      	strb	r1, [r3, r2]
    f496:	4b8b      	ldr	r3, [pc, #556]	; (f6c4 <send_gps_pos+0x954>)
    f498:	781a      	ldrb	r2, [r3, #0]
    f49a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f49e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4a2:	781b      	ldrb	r3, [r3, #0]
    f4a4:	4413      	add	r3, r2
    f4a6:	b2da      	uxtb	r2, r3
    f4a8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f4ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4b0:	701a      	strb	r2, [r3, #0]
    f4b2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f4b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4ba:	781a      	ldrb	r2, [r3, #0]
    f4bc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f4c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4c4:	781b      	ldrb	r3, [r3, #0]
    f4c6:	4413      	add	r3, r2
    f4c8:	b2da      	uxtb	r2, r3
    f4ca:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f4ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4d2:	701a      	strb	r2, [r3, #0]
    f4d4:	f24c 3319 	movw	r3, #49945	; 0xc319
    f4d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4dc:	781b      	ldrb	r3, [r3, #0]
    f4de:	3301      	adds	r3, #1
    f4e0:	b2da      	uxtb	r2, r3
    f4e2:	f24c 3319 	movw	r3, #49945	; 0xc319
    f4e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4ea:	701a      	strb	r2, [r3, #0]
    f4ec:	f24c 3319 	movw	r3, #49945	; 0xc319
    f4f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4f4:	781b      	ldrb	r3, [r3, #0]
    f4f6:	2bff      	cmp	r3, #255	; 0xff
    f4f8:	d105      	bne.n	f506 <send_gps_pos+0x796>
    f4fa:	f24c 3319 	movw	r3, #49945	; 0xc319
    f4fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f502:	2200      	movs	r2, #0
    f504:	701a      	strb	r2, [r3, #0]
    f506:	f24c 3319 	movw	r3, #49945	; 0xc319
    f50a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f50e:	781b      	ldrb	r3, [r3, #0]
    f510:	461a      	mov	r2, r3
    f512:	f24c 4398 	movw	r3, #50328	; 0xc498
    f516:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f51a:	7899      	ldrb	r1, [r3, #2]
    f51c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f520:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f524:	5499      	strb	r1, [r3, r2]
    f526:	4b68      	ldr	r3, [pc, #416]	; (f6c8 <send_gps_pos+0x958>)
    f528:	781a      	ldrb	r2, [r3, #0]
    f52a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f52e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f532:	781b      	ldrb	r3, [r3, #0]
    f534:	4413      	add	r3, r2
    f536:	b2da      	uxtb	r2, r3
    f538:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f53c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f540:	701a      	strb	r2, [r3, #0]
    f542:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f54a:	781a      	ldrb	r2, [r3, #0]
    f54c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f550:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f554:	781b      	ldrb	r3, [r3, #0]
    f556:	4413      	add	r3, r2
    f558:	b2da      	uxtb	r2, r3
    f55a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f55e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f562:	701a      	strb	r2, [r3, #0]
    f564:	f24c 3319 	movw	r3, #49945	; 0xc319
    f568:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f56c:	781b      	ldrb	r3, [r3, #0]
    f56e:	3301      	adds	r3, #1
    f570:	b2da      	uxtb	r2, r3
    f572:	f24c 3319 	movw	r3, #49945	; 0xc319
    f576:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f57a:	701a      	strb	r2, [r3, #0]
    f57c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f584:	781b      	ldrb	r3, [r3, #0]
    f586:	2bff      	cmp	r3, #255	; 0xff
    f588:	d105      	bne.n	f596 <send_gps_pos+0x826>
    f58a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f58e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f592:	2200      	movs	r2, #0
    f594:	701a      	strb	r2, [r3, #0]
    f596:	f24c 3319 	movw	r3, #49945	; 0xc319
    f59a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f59e:	781b      	ldrb	r3, [r3, #0]
    f5a0:	461a      	mov	r2, r3
    f5a2:	f24c 4398 	movw	r3, #50328	; 0xc498
    f5a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5aa:	78d9      	ldrb	r1, [r3, #3]
    f5ac:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f5b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5b4:	5499      	strb	r1, [r3, r2]
    f5b6:	4b45      	ldr	r3, [pc, #276]	; (f6cc <send_gps_pos+0x95c>)
    f5b8:	781a      	ldrb	r2, [r3, #0]
    f5ba:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f5be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5c2:	781b      	ldrb	r3, [r3, #0]
    f5c4:	4413      	add	r3, r2
    f5c6:	b2da      	uxtb	r2, r3
    f5c8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f5cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5d0:	701a      	strb	r2, [r3, #0]
    f5d2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f5d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5da:	781a      	ldrb	r2, [r3, #0]
    f5dc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f5e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5e4:	781b      	ldrb	r3, [r3, #0]
    f5e6:	4413      	add	r3, r2
    f5e8:	b2da      	uxtb	r2, r3
    f5ea:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f5ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5f2:	701a      	strb	r2, [r3, #0]
    f5f4:	f24c 3319 	movw	r3, #49945	; 0xc319
    f5f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5fc:	781b      	ldrb	r3, [r3, #0]
    f5fe:	3301      	adds	r3, #1
    f600:	b2da      	uxtb	r2, r3
    f602:	f24c 3319 	movw	r3, #49945	; 0xc319
    f606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f60a:	701a      	strb	r2, [r3, #0]
    f60c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f614:	781b      	ldrb	r3, [r3, #0]
    f616:	2bff      	cmp	r3, #255	; 0xff
    f618:	d105      	bne.n	f626 <send_gps_pos+0x8b6>
    f61a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f61e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f622:	2200      	movs	r2, #0
    f624:	701a      	strb	r2, [r3, #0]
    f626:	f24c 3319 	movw	r3, #49945	; 0xc319
    f62a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f62e:	781b      	ldrb	r3, [r3, #0]
    f630:	461a      	mov	r2, r3
    f632:	f24c 438c 	movw	r3, #50316	; 0xc48c
    f636:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f63a:	7819      	ldrb	r1, [r3, #0]
    f63c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f640:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f644:	5499      	strb	r1, [r3, r2]
    f646:	f24c 438c 	movw	r3, #50316	; 0xc48c
    f64a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f64e:	781a      	ldrb	r2, [r3, #0]
    f650:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f658:	781b      	ldrb	r3, [r3, #0]
    f65a:	4413      	add	r3, r2
    f65c:	b2da      	uxtb	r2, r3
    f65e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f666:	701a      	strb	r2, [r3, #0]
    f668:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f66c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f670:	781a      	ldrb	r2, [r3, #0]
    f672:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f676:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f67a:	781b      	ldrb	r3, [r3, #0]
    f67c:	4413      	add	r3, r2
    f67e:	b2da      	uxtb	r2, r3
    f680:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f684:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f688:	701a      	strb	r2, [r3, #0]
    f68a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f68e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f692:	781b      	ldrb	r3, [r3, #0]
    f694:	3301      	adds	r3, #1
    f696:	b2da      	uxtb	r2, r3
    f698:	f24c 3319 	movw	r3, #49945	; 0xc319
    f69c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6a0:	701a      	strb	r2, [r3, #0]
    f6a2:	f24c 3319 	movw	r3, #49945	; 0xc319
    f6a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6aa:	781b      	ldrb	r3, [r3, #0]
    f6ac:	2bff      	cmp	r3, #255	; 0xff
    f6ae:	d10f      	bne.n	f6d0 <send_gps_pos+0x960>
    f6b0:	f24c 3319 	movw	r3, #49945	; 0xc319
    f6b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6b8:	2200      	movs	r2, #0
    f6ba:	701a      	strb	r2, [r3, #0]
    f6bc:	e008      	b.n	f6d0 <send_gps_pos+0x960>
    f6be:	bf00      	nop
    f6c0:	2004c4a3 	.word	0x2004c4a3
    f6c4:	2004c499 	.word	0x2004c499
    f6c8:	2004c49a 	.word	0x2004c49a
    f6cc:	2004c49b 	.word	0x2004c49b
    f6d0:	f24c 3319 	movw	r3, #49945	; 0xc319
    f6d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6d8:	781b      	ldrb	r3, [r3, #0]
    f6da:	461a      	mov	r2, r3
    f6dc:	f24c 438c 	movw	r3, #50316	; 0xc48c
    f6e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6e4:	7859      	ldrb	r1, [r3, #1]
    f6e6:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f6ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6ee:	5499      	strb	r1, [r3, r2]
    f6f0:	4bd1      	ldr	r3, [pc, #836]	; (fa38 <send_gps_pos+0xcc8>)
    f6f2:	781a      	ldrb	r2, [r3, #0]
    f6f4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f6f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6fc:	781b      	ldrb	r3, [r3, #0]
    f6fe:	4413      	add	r3, r2
    f700:	b2da      	uxtb	r2, r3
    f702:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f706:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f70a:	701a      	strb	r2, [r3, #0]
    f70c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f714:	781a      	ldrb	r2, [r3, #0]
    f716:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f71a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f71e:	781b      	ldrb	r3, [r3, #0]
    f720:	4413      	add	r3, r2
    f722:	b2da      	uxtb	r2, r3
    f724:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f72c:	701a      	strb	r2, [r3, #0]
    f72e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f736:	781b      	ldrb	r3, [r3, #0]
    f738:	3301      	adds	r3, #1
    f73a:	b2da      	uxtb	r2, r3
    f73c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f740:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f744:	701a      	strb	r2, [r3, #0]
    f746:	f24c 3319 	movw	r3, #49945	; 0xc319
    f74a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f74e:	781b      	ldrb	r3, [r3, #0]
    f750:	2bff      	cmp	r3, #255	; 0xff
    f752:	d105      	bne.n	f760 <send_gps_pos+0x9f0>
    f754:	f24c 3319 	movw	r3, #49945	; 0xc319
    f758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f75c:	2200      	movs	r2, #0
    f75e:	701a      	strb	r2, [r3, #0]
    f760:	f24c 3319 	movw	r3, #49945	; 0xc319
    f764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f768:	781b      	ldrb	r3, [r3, #0]
    f76a:	461a      	mov	r2, r3
    f76c:	f24c 438c 	movw	r3, #50316	; 0xc48c
    f770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f774:	7899      	ldrb	r1, [r3, #2]
    f776:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f77a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f77e:	5499      	strb	r1, [r3, r2]
    f780:	4bae      	ldr	r3, [pc, #696]	; (fa3c <send_gps_pos+0xccc>)
    f782:	781a      	ldrb	r2, [r3, #0]
    f784:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f78c:	781b      	ldrb	r3, [r3, #0]
    f78e:	4413      	add	r3, r2
    f790:	b2da      	uxtb	r2, r3
    f792:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f796:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f79a:	701a      	strb	r2, [r3, #0]
    f79c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f7a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7a4:	781a      	ldrb	r2, [r3, #0]
    f7a6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f7aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7ae:	781b      	ldrb	r3, [r3, #0]
    f7b0:	4413      	add	r3, r2
    f7b2:	b2da      	uxtb	r2, r3
    f7b4:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f7b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7bc:	701a      	strb	r2, [r3, #0]
    f7be:	f24c 3319 	movw	r3, #49945	; 0xc319
    f7c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7c6:	781b      	ldrb	r3, [r3, #0]
    f7c8:	3301      	adds	r3, #1
    f7ca:	b2da      	uxtb	r2, r3
    f7cc:	f24c 3319 	movw	r3, #49945	; 0xc319
    f7d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7d4:	701a      	strb	r2, [r3, #0]
    f7d6:	f24c 3319 	movw	r3, #49945	; 0xc319
    f7da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7de:	781b      	ldrb	r3, [r3, #0]
    f7e0:	2bff      	cmp	r3, #255	; 0xff
    f7e2:	d105      	bne.n	f7f0 <send_gps_pos+0xa80>
    f7e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    f7e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7ec:	2200      	movs	r2, #0
    f7ee:	701a      	strb	r2, [r3, #0]
    f7f0:	f24c 3319 	movw	r3, #49945	; 0xc319
    f7f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7f8:	781b      	ldrb	r3, [r3, #0]
    f7fa:	461a      	mov	r2, r3
    f7fc:	f24c 438c 	movw	r3, #50316	; 0xc48c
    f800:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f804:	78d9      	ldrb	r1, [r3, #3]
    f806:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f80a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f80e:	5499      	strb	r1, [r3, r2]
    f810:	4b8b      	ldr	r3, [pc, #556]	; (fa40 <send_gps_pos+0xcd0>)
    f812:	781a      	ldrb	r2, [r3, #0]
    f814:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f818:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f81c:	781b      	ldrb	r3, [r3, #0]
    f81e:	4413      	add	r3, r2
    f820:	b2da      	uxtb	r2, r3
    f822:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f826:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f82a:	701a      	strb	r2, [r3, #0]
    f82c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f834:	781a      	ldrb	r2, [r3, #0]
    f836:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f83a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f83e:	781b      	ldrb	r3, [r3, #0]
    f840:	4413      	add	r3, r2
    f842:	b2da      	uxtb	r2, r3
    f844:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f848:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f84c:	701a      	strb	r2, [r3, #0]
    f84e:	f24c 3319 	movw	r3, #49945	; 0xc319
    f852:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f856:	781b      	ldrb	r3, [r3, #0]
    f858:	3301      	adds	r3, #1
    f85a:	b2da      	uxtb	r2, r3
    f85c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f864:	701a      	strb	r2, [r3, #0]
    f866:	f24c 3319 	movw	r3, #49945	; 0xc319
    f86a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f86e:	781b      	ldrb	r3, [r3, #0]
    f870:	2bff      	cmp	r3, #255	; 0xff
    f872:	d105      	bne.n	f880 <send_gps_pos+0xb10>
    f874:	f24c 3319 	movw	r3, #49945	; 0xc319
    f878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f87c:	2200      	movs	r2, #0
    f87e:	701a      	strb	r2, [r3, #0]
    f880:	f24c 3319 	movw	r3, #49945	; 0xc319
    f884:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f888:	781b      	ldrb	r3, [r3, #0]
    f88a:	461a      	mov	r2, r3
    f88c:	f24c 4390 	movw	r3, #50320	; 0xc490
    f890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f894:	7819      	ldrb	r1, [r3, #0]
    f896:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f89a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f89e:	5499      	strb	r1, [r3, r2]
    f8a0:	f24c 4390 	movw	r3, #50320	; 0xc490
    f8a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8a8:	781a      	ldrb	r2, [r3, #0]
    f8aa:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f8ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8b2:	781b      	ldrb	r3, [r3, #0]
    f8b4:	4413      	add	r3, r2
    f8b6:	b2da      	uxtb	r2, r3
    f8b8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f8bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8c0:	701a      	strb	r2, [r3, #0]
    f8c2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f8c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8ca:	781a      	ldrb	r2, [r3, #0]
    f8cc:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f8d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8d4:	781b      	ldrb	r3, [r3, #0]
    f8d6:	4413      	add	r3, r2
    f8d8:	b2da      	uxtb	r2, r3
    f8da:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f8de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8e2:	701a      	strb	r2, [r3, #0]
    f8e4:	f24c 3319 	movw	r3, #49945	; 0xc319
    f8e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8ec:	781b      	ldrb	r3, [r3, #0]
    f8ee:	3301      	adds	r3, #1
    f8f0:	b2da      	uxtb	r2, r3
    f8f2:	f24c 3319 	movw	r3, #49945	; 0xc319
    f8f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8fa:	701a      	strb	r2, [r3, #0]
    f8fc:	f24c 3319 	movw	r3, #49945	; 0xc319
    f900:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f904:	781b      	ldrb	r3, [r3, #0]
    f906:	2bff      	cmp	r3, #255	; 0xff
    f908:	d105      	bne.n	f916 <send_gps_pos+0xba6>
    f90a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f90e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f912:	2200      	movs	r2, #0
    f914:	701a      	strb	r2, [r3, #0]
    f916:	f24c 3319 	movw	r3, #49945	; 0xc319
    f91a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f91e:	781b      	ldrb	r3, [r3, #0]
    f920:	461a      	mov	r2, r3
    f922:	f24c 4390 	movw	r3, #50320	; 0xc490
    f926:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f92a:	7859      	ldrb	r1, [r3, #1]
    f92c:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f930:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f934:	5499      	strb	r1, [r3, r2]
    f936:	4b43      	ldr	r3, [pc, #268]	; (fa44 <send_gps_pos+0xcd4>)
    f938:	781a      	ldrb	r2, [r3, #0]
    f93a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f93e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f942:	781b      	ldrb	r3, [r3, #0]
    f944:	4413      	add	r3, r2
    f946:	b2da      	uxtb	r2, r3
    f948:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f94c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f950:	701a      	strb	r2, [r3, #0]
    f952:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f956:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f95a:	781a      	ldrb	r2, [r3, #0]
    f95c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f960:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f964:	781b      	ldrb	r3, [r3, #0]
    f966:	4413      	add	r3, r2
    f968:	b2da      	uxtb	r2, r3
    f96a:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f96e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f972:	701a      	strb	r2, [r3, #0]
    f974:	f24c 3319 	movw	r3, #49945	; 0xc319
    f978:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f97c:	781b      	ldrb	r3, [r3, #0]
    f97e:	3301      	adds	r3, #1
    f980:	b2da      	uxtb	r2, r3
    f982:	f24c 3319 	movw	r3, #49945	; 0xc319
    f986:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f98a:	701a      	strb	r2, [r3, #0]
    f98c:	f24c 3319 	movw	r3, #49945	; 0xc319
    f990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f994:	781b      	ldrb	r3, [r3, #0]
    f996:	2bff      	cmp	r3, #255	; 0xff
    f998:	d105      	bne.n	f9a6 <send_gps_pos+0xc36>
    f99a:	f24c 3319 	movw	r3, #49945	; 0xc319
    f99e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9a2:	2200      	movs	r2, #0
    f9a4:	701a      	strb	r2, [r3, #0]
    f9a6:	f24c 3319 	movw	r3, #49945	; 0xc319
    f9aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9ae:	781b      	ldrb	r3, [r3, #0]
    f9b0:	461a      	mov	r2, r3
    f9b2:	f24c 4390 	movw	r3, #50320	; 0xc490
    f9b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9ba:	7899      	ldrb	r1, [r3, #2]
    f9bc:	f24c 331c 	movw	r3, #49948	; 0xc31c
    f9c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9c4:	5499      	strb	r1, [r3, r2]
    f9c6:	4b20      	ldr	r3, [pc, #128]	; (fa48 <send_gps_pos+0xcd8>)
    f9c8:	781a      	ldrb	r2, [r3, #0]
    f9ca:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f9ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9d2:	781b      	ldrb	r3, [r3, #0]
    f9d4:	4413      	add	r3, r2
    f9d6:	b2da      	uxtb	r2, r3
    f9d8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f9dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9e0:	701a      	strb	r2, [r3, #0]
    f9e2:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f9e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9ea:	781a      	ldrb	r2, [r3, #0]
    f9ec:	f24c 431d 	movw	r3, #50205	; 0xc41d
    f9f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9f4:	781b      	ldrb	r3, [r3, #0]
    f9f6:	4413      	add	r3, r2
    f9f8:	b2da      	uxtb	r2, r3
    f9fa:	f24c 431e 	movw	r3, #50206	; 0xc41e
    f9fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa02:	701a      	strb	r2, [r3, #0]
    fa04:	f24c 3319 	movw	r3, #49945	; 0xc319
    fa08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa0c:	781b      	ldrb	r3, [r3, #0]
    fa0e:	3301      	adds	r3, #1
    fa10:	b2da      	uxtb	r2, r3
    fa12:	f24c 3319 	movw	r3, #49945	; 0xc319
    fa16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa1a:	701a      	strb	r2, [r3, #0]
    fa1c:	f24c 3319 	movw	r3, #49945	; 0xc319
    fa20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa24:	781b      	ldrb	r3, [r3, #0]
    fa26:	2bff      	cmp	r3, #255	; 0xff
    fa28:	d110      	bne.n	fa4c <send_gps_pos+0xcdc>
    fa2a:	f24c 3319 	movw	r3, #49945	; 0xc319
    fa2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa32:	2200      	movs	r2, #0
    fa34:	701a      	strb	r2, [r3, #0]
    fa36:	e009      	b.n	fa4c <send_gps_pos+0xcdc>
    fa38:	2004c48d 	.word	0x2004c48d
    fa3c:	2004c48e 	.word	0x2004c48e
    fa40:	2004c48f 	.word	0x2004c48f
    fa44:	2004c491 	.word	0x2004c491
    fa48:	2004c492 	.word	0x2004c492
    fa4c:	f24c 3319 	movw	r3, #49945	; 0xc319
    fa50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa54:	781b      	ldrb	r3, [r3, #0]
    fa56:	461a      	mov	r2, r3
    fa58:	f24c 4390 	movw	r3, #50320	; 0xc490
    fa5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa60:	78d9      	ldrb	r1, [r3, #3]
    fa62:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fa66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa6a:	5499      	strb	r1, [r3, r2]
    fa6c:	4bd3      	ldr	r3, [pc, #844]	; (fdbc <send_gps_pos+0x104c>)
    fa6e:	781a      	ldrb	r2, [r3, #0]
    fa70:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fa74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa78:	781b      	ldrb	r3, [r3, #0]
    fa7a:	4413      	add	r3, r2
    fa7c:	b2da      	uxtb	r2, r3
    fa7e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fa82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa86:	701a      	strb	r2, [r3, #0]
    fa88:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fa8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa90:	781a      	ldrb	r2, [r3, #0]
    fa92:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fa96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa9a:	781b      	ldrb	r3, [r3, #0]
    fa9c:	4413      	add	r3, r2
    fa9e:	b2da      	uxtb	r2, r3
    faa0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    faa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faa8:	701a      	strb	r2, [r3, #0]
    faaa:	f24c 3319 	movw	r3, #49945	; 0xc319
    faae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fab2:	781b      	ldrb	r3, [r3, #0]
    fab4:	3301      	adds	r3, #1
    fab6:	b2da      	uxtb	r2, r3
    fab8:	f24c 3319 	movw	r3, #49945	; 0xc319
    fabc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fac0:	701a      	strb	r2, [r3, #0]
    fac2:	f24c 3319 	movw	r3, #49945	; 0xc319
    fac6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faca:	781b      	ldrb	r3, [r3, #0]
    facc:	2bff      	cmp	r3, #255	; 0xff
    face:	d105      	bne.n	fadc <send_gps_pos+0xd6c>
    fad0:	f24c 3319 	movw	r3, #49945	; 0xc319
    fad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fad8:	2200      	movs	r2, #0
    fada:	701a      	strb	r2, [r3, #0]
    fadc:	f24c 3319 	movw	r3, #49945	; 0xc319
    fae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fae4:	781b      	ldrb	r3, [r3, #0]
    fae6:	461a      	mov	r2, r3
    fae8:	f24c 4394 	movw	r3, #50324	; 0xc494
    faec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faf0:	7819      	ldrb	r1, [r3, #0]
    faf2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    faf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fafa:	5499      	strb	r1, [r3, r2]
    fafc:	f24c 4394 	movw	r3, #50324	; 0xc494
    fb00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb04:	781a      	ldrb	r2, [r3, #0]
    fb06:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fb0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb0e:	781b      	ldrb	r3, [r3, #0]
    fb10:	4413      	add	r3, r2
    fb12:	b2da      	uxtb	r2, r3
    fb14:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fb18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb1c:	701a      	strb	r2, [r3, #0]
    fb1e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fb22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb26:	781a      	ldrb	r2, [r3, #0]
    fb28:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fb2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb30:	781b      	ldrb	r3, [r3, #0]
    fb32:	4413      	add	r3, r2
    fb34:	b2da      	uxtb	r2, r3
    fb36:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fb3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb3e:	701a      	strb	r2, [r3, #0]
    fb40:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb48:	781b      	ldrb	r3, [r3, #0]
    fb4a:	3301      	adds	r3, #1
    fb4c:	b2da      	uxtb	r2, r3
    fb4e:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb56:	701a      	strb	r2, [r3, #0]
    fb58:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb60:	781b      	ldrb	r3, [r3, #0]
    fb62:	2bff      	cmp	r3, #255	; 0xff
    fb64:	d105      	bne.n	fb72 <send_gps_pos+0xe02>
    fb66:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb6e:	2200      	movs	r2, #0
    fb70:	701a      	strb	r2, [r3, #0]
    fb72:	f24c 3319 	movw	r3, #49945	; 0xc319
    fb76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb7a:	781b      	ldrb	r3, [r3, #0]
    fb7c:	461a      	mov	r2, r3
    fb7e:	f24c 4394 	movw	r3, #50324	; 0xc494
    fb82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb86:	7859      	ldrb	r1, [r3, #1]
    fb88:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fb8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb90:	5499      	strb	r1, [r3, r2]
    fb92:	4b8b      	ldr	r3, [pc, #556]	; (fdc0 <send_gps_pos+0x1050>)
    fb94:	781a      	ldrb	r2, [r3, #0]
    fb96:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fb9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb9e:	781b      	ldrb	r3, [r3, #0]
    fba0:	4413      	add	r3, r2
    fba2:	b2da      	uxtb	r2, r3
    fba4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbac:	701a      	strb	r2, [r3, #0]
    fbae:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fbb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbb6:	781a      	ldrb	r2, [r3, #0]
    fbb8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fbbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbc0:	781b      	ldrb	r3, [r3, #0]
    fbc2:	4413      	add	r3, r2
    fbc4:	b2da      	uxtb	r2, r3
    fbc6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fbca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbce:	701a      	strb	r2, [r3, #0]
    fbd0:	f24c 3319 	movw	r3, #49945	; 0xc319
    fbd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbd8:	781b      	ldrb	r3, [r3, #0]
    fbda:	3301      	adds	r3, #1
    fbdc:	b2da      	uxtb	r2, r3
    fbde:	f24c 3319 	movw	r3, #49945	; 0xc319
    fbe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbe6:	701a      	strb	r2, [r3, #0]
    fbe8:	f24c 3319 	movw	r3, #49945	; 0xc319
    fbec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbf0:	781b      	ldrb	r3, [r3, #0]
    fbf2:	2bff      	cmp	r3, #255	; 0xff
    fbf4:	d105      	bne.n	fc02 <send_gps_pos+0xe92>
    fbf6:	f24c 3319 	movw	r3, #49945	; 0xc319
    fbfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbfe:	2200      	movs	r2, #0
    fc00:	701a      	strb	r2, [r3, #0]
    fc02:	f24c 3319 	movw	r3, #49945	; 0xc319
    fc06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc0a:	781b      	ldrb	r3, [r3, #0]
    fc0c:	461a      	mov	r2, r3
    fc0e:	f24c 4394 	movw	r3, #50324	; 0xc494
    fc12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc16:	7899      	ldrb	r1, [r3, #2]
    fc18:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fc1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc20:	5499      	strb	r1, [r3, r2]
    fc22:	4b68      	ldr	r3, [pc, #416]	; (fdc4 <send_gps_pos+0x1054>)
    fc24:	781a      	ldrb	r2, [r3, #0]
    fc26:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fc2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc2e:	781b      	ldrb	r3, [r3, #0]
    fc30:	4413      	add	r3, r2
    fc32:	b2da      	uxtb	r2, r3
    fc34:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fc38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc3c:	701a      	strb	r2, [r3, #0]
    fc3e:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fc42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc46:	781a      	ldrb	r2, [r3, #0]
    fc48:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fc4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc50:	781b      	ldrb	r3, [r3, #0]
    fc52:	4413      	add	r3, r2
    fc54:	b2da      	uxtb	r2, r3
    fc56:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fc5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc5e:	701a      	strb	r2, [r3, #0]
    fc60:	f24c 3319 	movw	r3, #49945	; 0xc319
    fc64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc68:	781b      	ldrb	r3, [r3, #0]
    fc6a:	3301      	adds	r3, #1
    fc6c:	b2da      	uxtb	r2, r3
    fc6e:	f24c 3319 	movw	r3, #49945	; 0xc319
    fc72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc76:	701a      	strb	r2, [r3, #0]
    fc78:	f24c 3319 	movw	r3, #49945	; 0xc319
    fc7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc80:	781b      	ldrb	r3, [r3, #0]
    fc82:	2bff      	cmp	r3, #255	; 0xff
    fc84:	d105      	bne.n	fc92 <send_gps_pos+0xf22>
    fc86:	f24c 3319 	movw	r3, #49945	; 0xc319
    fc8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc8e:	2200      	movs	r2, #0
    fc90:	701a      	strb	r2, [r3, #0]
    fc92:	f24c 3319 	movw	r3, #49945	; 0xc319
    fc96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc9a:	781b      	ldrb	r3, [r3, #0]
    fc9c:	461a      	mov	r2, r3
    fc9e:	f24c 4394 	movw	r3, #50324	; 0xc494
    fca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fca6:	78d9      	ldrb	r1, [r3, #3]
    fca8:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fcac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcb0:	5499      	strb	r1, [r3, r2]
    fcb2:	4b45      	ldr	r3, [pc, #276]	; (fdc8 <send_gps_pos+0x1058>)
    fcb4:	781a      	ldrb	r2, [r3, #0]
    fcb6:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fcba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcbe:	781b      	ldrb	r3, [r3, #0]
    fcc0:	4413      	add	r3, r2
    fcc2:	b2da      	uxtb	r2, r3
    fcc4:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fcc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fccc:	701a      	strb	r2, [r3, #0]
    fcce:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fcd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcd6:	781a      	ldrb	r2, [r3, #0]
    fcd8:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fcdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fce0:	781b      	ldrb	r3, [r3, #0]
    fce2:	4413      	add	r3, r2
    fce4:	b2da      	uxtb	r2, r3
    fce6:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fcea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcee:	701a      	strb	r2, [r3, #0]
    fcf0:	f24c 3319 	movw	r3, #49945	; 0xc319
    fcf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcf8:	781b      	ldrb	r3, [r3, #0]
    fcfa:	3301      	adds	r3, #1
    fcfc:	b2da      	uxtb	r2, r3
    fcfe:	f24c 3319 	movw	r3, #49945	; 0xc319
    fd02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd06:	701a      	strb	r2, [r3, #0]
    fd08:	f24c 3319 	movw	r3, #49945	; 0xc319
    fd0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd10:	781b      	ldrb	r3, [r3, #0]
    fd12:	2bff      	cmp	r3, #255	; 0xff
    fd14:	d105      	bne.n	fd22 <send_gps_pos+0xfb2>
    fd16:	f24c 3319 	movw	r3, #49945	; 0xc319
    fd1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd1e:	2200      	movs	r2, #0
    fd20:	701a      	strb	r2, [r3, #0]
    fd22:	f24c 3319 	movw	r3, #49945	; 0xc319
    fd26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd2a:	781b      	ldrb	r3, [r3, #0]
    fd2c:	461a      	mov	r2, r3
    fd2e:	f24c 4388 	movw	r3, #50312	; 0xc488
    fd32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd36:	7819      	ldrb	r1, [r3, #0]
    fd38:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fd3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd40:	5499      	strb	r1, [r3, r2]
    fd42:	f24c 4388 	movw	r3, #50312	; 0xc488
    fd46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd4a:	781a      	ldrb	r2, [r3, #0]
    fd4c:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fd50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd54:	781b      	ldrb	r3, [r3, #0]
    fd56:	4413      	add	r3, r2
    fd58:	b2da      	uxtb	r2, r3
    fd5a:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fd5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd62:	701a      	strb	r2, [r3, #0]
    fd64:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fd68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd6c:	781a      	ldrb	r2, [r3, #0]
    fd6e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fd72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd76:	781b      	ldrb	r3, [r3, #0]
    fd78:	4413      	add	r3, r2
    fd7a:	b2da      	uxtb	r2, r3
    fd7c:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fd80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd84:	701a      	strb	r2, [r3, #0]
    fd86:	f24c 3319 	movw	r3, #49945	; 0xc319
    fd8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd8e:	781b      	ldrb	r3, [r3, #0]
    fd90:	3301      	adds	r3, #1
    fd92:	b2da      	uxtb	r2, r3
    fd94:	f24c 3319 	movw	r3, #49945	; 0xc319
    fd98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd9c:	701a      	strb	r2, [r3, #0]
    fd9e:	f24c 3319 	movw	r3, #49945	; 0xc319
    fda2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fda6:	781b      	ldrb	r3, [r3, #0]
    fda8:	2bff      	cmp	r3, #255	; 0xff
    fdaa:	d10f      	bne.n	fdcc <send_gps_pos+0x105c>
    fdac:	f24c 3319 	movw	r3, #49945	; 0xc319
    fdb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdb4:	2200      	movs	r2, #0
    fdb6:	701a      	strb	r2, [r3, #0]
    fdb8:	e008      	b.n	fdcc <send_gps_pos+0x105c>
    fdba:	bf00      	nop
    fdbc:	2004c493 	.word	0x2004c493
    fdc0:	2004c495 	.word	0x2004c495
    fdc4:	2004c496 	.word	0x2004c496
    fdc8:	2004c497 	.word	0x2004c497
    fdcc:	f24c 3319 	movw	r3, #49945	; 0xc319
    fdd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdd4:	781b      	ldrb	r3, [r3, #0]
    fdd6:	461a      	mov	r2, r3
    fdd8:	f24c 4388 	movw	r3, #50312	; 0xc488
    fddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fde0:	7859      	ldrb	r1, [r3, #1]
    fde2:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fde6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdea:	5499      	strb	r1, [r3, r2]
    fdec:	4bc0      	ldr	r3, [pc, #768]	; (100f0 <send_gps_pos+0x1380>)
    fdee:	781a      	ldrb	r2, [r3, #0]
    fdf0:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fdf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdf8:	781b      	ldrb	r3, [r3, #0]
    fdfa:	4413      	add	r3, r2
    fdfc:	b2da      	uxtb	r2, r3
    fdfe:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fe02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe06:	701a      	strb	r2, [r3, #0]
    fe08:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fe0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe10:	781a      	ldrb	r2, [r3, #0]
    fe12:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fe16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe1a:	781b      	ldrb	r3, [r3, #0]
    fe1c:	4413      	add	r3, r2
    fe1e:	b2da      	uxtb	r2, r3
    fe20:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fe24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe28:	701a      	strb	r2, [r3, #0]
    fe2a:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe32:	781b      	ldrb	r3, [r3, #0]
    fe34:	3301      	adds	r3, #1
    fe36:	b2da      	uxtb	r2, r3
    fe38:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe40:	701a      	strb	r2, [r3, #0]
    fe42:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe4a:	781b      	ldrb	r3, [r3, #0]
    fe4c:	2bff      	cmp	r3, #255	; 0xff
    fe4e:	d105      	bne.n	fe5c <send_gps_pos+0x10ec>
    fe50:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe58:	2200      	movs	r2, #0
    fe5a:	701a      	strb	r2, [r3, #0]
    fe5c:	f24c 3319 	movw	r3, #49945	; 0xc319
    fe60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe64:	781b      	ldrb	r3, [r3, #0]
    fe66:	461a      	mov	r2, r3
    fe68:	f24c 4388 	movw	r3, #50312	; 0xc488
    fe6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe70:	7899      	ldrb	r1, [r3, #2]
    fe72:	f24c 331c 	movw	r3, #49948	; 0xc31c
    fe76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe7a:	5499      	strb	r1, [r3, r2]
    fe7c:	4b9d      	ldr	r3, [pc, #628]	; (100f4 <send_gps_pos+0x1384>)
    fe7e:	781a      	ldrb	r2, [r3, #0]
    fe80:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fe84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe88:	781b      	ldrb	r3, [r3, #0]
    fe8a:	4413      	add	r3, r2
    fe8c:	b2da      	uxtb	r2, r3
    fe8e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fe92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe96:	701a      	strb	r2, [r3, #0]
    fe98:	f24c 431e 	movw	r3, #50206	; 0xc41e
    fe9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fea0:	781a      	ldrb	r2, [r3, #0]
    fea2:	f24c 431d 	movw	r3, #50205	; 0xc41d
    fea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feaa:	781b      	ldrb	r3, [r3, #0]
    feac:	4413      	add	r3, r2
    feae:	b2da      	uxtb	r2, r3
    feb0:	f24c 431e 	movw	r3, #50206	; 0xc41e
    feb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feb8:	701a      	strb	r2, [r3, #0]
    feba:	f24c 3319 	movw	r3, #49945	; 0xc319
    febe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fec2:	781b      	ldrb	r3, [r3, #0]
    fec4:	3301      	adds	r3, #1
    fec6:	b2da      	uxtb	r2, r3
    fec8:	f24c 3319 	movw	r3, #49945	; 0xc319
    fecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fed0:	701a      	strb	r2, [r3, #0]
    fed2:	f24c 3319 	movw	r3, #49945	; 0xc319
    fed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feda:	781b      	ldrb	r3, [r3, #0]
    fedc:	2bff      	cmp	r3, #255	; 0xff
    fede:	d105      	bne.n	feec <send_gps_pos+0x117c>
    fee0:	f24c 3319 	movw	r3, #49945	; 0xc319
    fee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fee8:	2200      	movs	r2, #0
    feea:	701a      	strb	r2, [r3, #0]
    feec:	f24c 3319 	movw	r3, #49945	; 0xc319
    fef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fef4:	781b      	ldrb	r3, [r3, #0]
    fef6:	461a      	mov	r2, r3
    fef8:	f24c 4388 	movw	r3, #50312	; 0xc488
    fefc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff00:	78d9      	ldrb	r1, [r3, #3]
    ff02:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ff06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff0a:	5499      	strb	r1, [r3, r2]
    ff0c:	4b7a      	ldr	r3, [pc, #488]	; (100f8 <send_gps_pos+0x1388>)
    ff0e:	781a      	ldrb	r2, [r3, #0]
    ff10:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ff14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff18:	781b      	ldrb	r3, [r3, #0]
    ff1a:	4413      	add	r3, r2
    ff1c:	b2da      	uxtb	r2, r3
    ff1e:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ff22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff26:	701a      	strb	r2, [r3, #0]
    ff28:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ff2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff30:	781a      	ldrb	r2, [r3, #0]
    ff32:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ff36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff3a:	781b      	ldrb	r3, [r3, #0]
    ff3c:	4413      	add	r3, r2
    ff3e:	b2da      	uxtb	r2, r3
    ff40:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ff44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff48:	701a      	strb	r2, [r3, #0]
    ff4a:	f24c 3319 	movw	r3, #49945	; 0xc319
    ff4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff52:	781b      	ldrb	r3, [r3, #0]
    ff54:	3301      	adds	r3, #1
    ff56:	b2da      	uxtb	r2, r3
    ff58:	f24c 3319 	movw	r3, #49945	; 0xc319
    ff5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff60:	701a      	strb	r2, [r3, #0]
    ff62:	f24c 3319 	movw	r3, #49945	; 0xc319
    ff66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff6a:	781b      	ldrb	r3, [r3, #0]
    ff6c:	2bff      	cmp	r3, #255	; 0xff
    ff6e:	d105      	bne.n	ff7c <send_gps_pos+0x120c>
    ff70:	f24c 3319 	movw	r3, #49945	; 0xc319
    ff74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff78:	2200      	movs	r2, #0
    ff7a:	701a      	strb	r2, [r3, #0]
    ff7c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ff80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff84:	781b      	ldrb	r3, [r3, #0]
    ff86:	461a      	mov	r2, r3
    ff88:	f24c 431d 	movw	r3, #50205	; 0xc41d
    ff8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff90:	7819      	ldrb	r1, [r3, #0]
    ff92:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ff96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff9a:	5499      	strb	r1, [r3, r2]
    ff9c:	f24c 3319 	movw	r3, #49945	; 0xc319
    ffa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffa4:	781b      	ldrb	r3, [r3, #0]
    ffa6:	3301      	adds	r3, #1
    ffa8:	b2da      	uxtb	r2, r3
    ffaa:	f24c 3319 	movw	r3, #49945	; 0xc319
    ffae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffb2:	701a      	strb	r2, [r3, #0]
    ffb4:	f24c 3319 	movw	r3, #49945	; 0xc319
    ffb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffbc:	781b      	ldrb	r3, [r3, #0]
    ffbe:	2bff      	cmp	r3, #255	; 0xff
    ffc0:	d105      	bne.n	ffce <send_gps_pos+0x125e>
    ffc2:	f24c 3319 	movw	r3, #49945	; 0xc319
    ffc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffca:	2200      	movs	r2, #0
    ffcc:	701a      	strb	r2, [r3, #0]
    ffce:	f24c 3319 	movw	r3, #49945	; 0xc319
    ffd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffd6:	781b      	ldrb	r3, [r3, #0]
    ffd8:	461a      	mov	r2, r3
    ffda:	f24c 431e 	movw	r3, #50206	; 0xc41e
    ffde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffe2:	7819      	ldrb	r1, [r3, #0]
    ffe4:	f24c 331c 	movw	r3, #49948	; 0xc31c
    ffe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffec:	5499      	strb	r1, [r3, r2]
    ffee:	f24c 3319 	movw	r3, #49945	; 0xc319
    fff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fff6:	781b      	ldrb	r3, [r3, #0]
    fff8:	3301      	adds	r3, #1
    fffa:	b2da      	uxtb	r2, r3
    fffc:	f24c 3319 	movw	r3, #49945	; 0xc319
   10000:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10004:	701a      	strb	r2, [r3, #0]
   10006:	f24c 3319 	movw	r3, #49945	; 0xc319
   1000a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1000e:	781b      	ldrb	r3, [r3, #0]
   10010:	2bff      	cmp	r3, #255	; 0xff
   10012:	d105      	bne.n	10020 <send_gps_pos+0x12b0>
   10014:	f24c 3319 	movw	r3, #49945	; 0xc319
   10018:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1001c:	2200      	movs	r2, #0
   1001e:	701a      	strb	r2, [r3, #0]
   10020:	f242 0339 	movw	r3, #8249	; 0x2039
   10024:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10028:	781b      	ldrb	r3, [r3, #0]
   1002a:	b2db      	uxtb	r3, r3
   1002c:	f003 0310 	and.w	r3, r3, #16
   10030:	2b00      	cmp	r3, #0
   10032:	d15a      	bne.n	100ea <send_gps_pos+0x137a>
   10034:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10038:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1003c:	781b      	ldrb	r3, [r3, #0]
   1003e:	b2db      	uxtb	r3, r3
   10040:	461a      	mov	r2, r3
   10042:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10046:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1004a:	5c9a      	ldrb	r2, [r3, r2]
   1004c:	f24c 431b 	movw	r3, #50203	; 0xc41b
   10050:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10054:	701a      	strb	r2, [r3, #0]
   10056:	f24c 431c 	movw	r3, #50204	; 0xc41c
   1005a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1005e:	2200      	movs	r2, #0
   10060:	701a      	strb	r2, [r3, #0]
   10062:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10066:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1006a:	781b      	ldrb	r3, [r3, #0]
   1006c:	b2db      	uxtb	r3, r3
   1006e:	3301      	adds	r3, #1
   10070:	b2da      	uxtb	r2, r3
   10072:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10076:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1007a:	701a      	strb	r2, [r3, #0]
   1007c:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10080:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10084:	781b      	ldrb	r3, [r3, #0]
   10086:	b2db      	uxtb	r3, r3
   10088:	2bff      	cmp	r3, #255	; 0xff
   1008a:	d105      	bne.n	10098 <send_gps_pos+0x1328>
   1008c:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10090:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10094:	2200      	movs	r2, #0
   10096:	701a      	strb	r2, [r3, #0]
   10098:	f242 0338 	movw	r3, #8248	; 0x2038
   1009c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100a0:	f242 0238 	movw	r2, #8248	; 0x2038
   100a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   100a8:	7812      	ldrb	r2, [r2, #0]
   100aa:	b2d2      	uxtb	r2, r2
   100ac:	f042 0201 	orr.w	r2, r2, #1
   100b0:	b2d2      	uxtb	r2, r2
   100b2:	701a      	strb	r2, [r3, #0]
   100b4:	f242 0339 	movw	r3, #8249	; 0x2039
   100b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   100bc:	f242 0239 	movw	r2, #8249	; 0x2039
   100c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   100c4:	7812      	ldrb	r2, [r2, #0]
   100c6:	b2d2      	uxtb	r2, r2
   100c8:	f042 0210 	orr.w	r2, r2, #16
   100cc:	b2d2      	uxtb	r2, r2
   100ce:	701a      	strb	r2, [r3, #0]
   100d0:	e00b      	b.n	100ea <send_gps_pos+0x137a>
   100d2:	f24c 3318 	movw	r3, #49944	; 0xc318
   100d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100da:	781b      	ldrb	r3, [r3, #0]
   100dc:	3301      	adds	r3, #1
   100de:	b2da      	uxtb	r2, r3
   100e0:	f24c 3318 	movw	r3, #49944	; 0xc318
   100e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100e8:	701a      	strb	r2, [r3, #0]
     estimator_update_state_gps();
   100ea:	f005 fbfd 	bl	158e8 <estimator_update_state_gps>
  }
}
   100ee:	bd80      	pop	{r7, pc}
   100f0:	2004c489 	.word	0x2004c489
   100f4:	2004c48a 	.word	0x2004c48a
   100f8:	2004c48b 	.word	0x2004c48b

000100fc <send_radIR>:

void send_radIR(void){
   100fc:	b480      	push	{r7}
   100fe:	af00      	add	r7, sp, #0
  if (gps_pos_available)
   10100:	f24c 43ae 	movw	r3, #50350	; 0xc4ae
   10104:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10108:	781b      	ldrb	r3, [r3, #0]
   1010a:	2b00      	cmp	r3, #0
   1010c:	f000 85e8 	beq.w	10ce0 <send_radIR+0xbe4>
     DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
   10110:	f24c 3319 	movw	r3, #49945	; 0xc319
   10114:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10118:	781a      	ldrb	r2, [r3, #0]
   1011a:	f24c 331a 	movw	r3, #49946	; 0xc31a
   1011e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10122:	781b      	ldrb	r3, [r3, #0]
   10124:	b2db      	uxtb	r3, r3
   10126:	429a      	cmp	r2, r3
   10128:	d313      	bcc.n	10152 <send_radIR+0x56>
   1012a:	f24c 331a 	movw	r3, #49946	; 0xc31a
   1012e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10132:	781b      	ldrb	r3, [r3, #0]
   10134:	b2db      	uxtb	r3, r3
   10136:	461a      	mov	r2, r3
   10138:	f24c 3319 	movw	r3, #49945	; 0xc319
   1013c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10140:	781b      	ldrb	r3, [r3, #0]
   10142:	1ad3      	subs	r3, r2, r3
   10144:	33ff      	adds	r3, #255	; 0xff
   10146:	2b14      	cmp	r3, #20
   10148:	bfd4      	ite	le
   1014a:	2300      	movle	r3, #0
   1014c:	2301      	movgt	r3, #1
   1014e:	b2db      	uxtb	r3, r3
   10150:	e011      	b.n	10176 <send_radIR+0x7a>
   10152:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10156:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1015a:	781b      	ldrb	r3, [r3, #0]
   1015c:	b2db      	uxtb	r3, r3
   1015e:	461a      	mov	r2, r3
   10160:	f24c 3319 	movw	r3, #49945	; 0xc319
   10164:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10168:	781b      	ldrb	r3, [r3, #0]
   1016a:	1ad3      	subs	r3, r2, r3
   1016c:	2b14      	cmp	r3, #20
   1016e:	bfd4      	ite	le
   10170:	2300      	movle	r3, #0
   10172:	2301      	movgt	r3, #1
   10174:	b2db      	uxtb	r3, r3
   10176:	2b00      	cmp	r3, #0
   10178:	f000 85a6 	beq.w	10cc8 <send_radIR+0xbcc>
   1017c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10180:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10184:	781b      	ldrb	r3, [r3, #0]
   10186:	461a      	mov	r2, r3
   10188:	f24c 331c 	movw	r3, #49948	; 0xc31c
   1018c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10190:	2105      	movs	r1, #5
   10192:	5499      	strb	r1, [r3, r2]
   10194:	f24c 3319 	movw	r3, #49945	; 0xc319
   10198:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1019c:	781b      	ldrb	r3, [r3, #0]
   1019e:	3301      	adds	r3, #1
   101a0:	b2da      	uxtb	r2, r3
   101a2:	f24c 3319 	movw	r3, #49945	; 0xc319
   101a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101aa:	701a      	strb	r2, [r3, #0]
   101ac:	f24c 3319 	movw	r3, #49945	; 0xc319
   101b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101b4:	781b      	ldrb	r3, [r3, #0]
   101b6:	2bff      	cmp	r3, #255	; 0xff
   101b8:	d105      	bne.n	101c6 <send_radIR+0xca>
   101ba:	f24c 3319 	movw	r3, #49945	; 0xc319
   101be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101c2:	2200      	movs	r2, #0
   101c4:	701a      	strb	r2, [r3, #0]
   101c6:	f24c 3319 	movw	r3, #49945	; 0xc319
   101ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101ce:	781b      	ldrb	r3, [r3, #0]
   101d0:	461a      	mov	r2, r3
   101d2:	f24c 331c 	movw	r3, #49948	; 0xc31c
   101d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101da:	2105      	movs	r1, #5
   101dc:	5499      	strb	r1, [r3, r2]
   101de:	f24c 3319 	movw	r3, #49945	; 0xc319
   101e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101e6:	781b      	ldrb	r3, [r3, #0]
   101e8:	3301      	adds	r3, #1
   101ea:	b2da      	uxtb	r2, r3
   101ec:	f24c 3319 	movw	r3, #49945	; 0xc319
   101f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101f4:	701a      	strb	r2, [r3, #0]
   101f6:	f24c 3319 	movw	r3, #49945	; 0xc319
   101fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101fe:	781b      	ldrb	r3, [r3, #0]
   10200:	2bff      	cmp	r3, #255	; 0xff
   10202:	d105      	bne.n	10210 <send_radIR+0x114>
   10204:	f24c 3319 	movw	r3, #49945	; 0xc319
   10208:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1020c:	2200      	movs	r2, #0
   1020e:	701a      	strb	r2, [r3, #0]
   10210:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10214:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10218:	2205      	movs	r2, #5
   1021a:	701a      	strb	r2, [r3, #0]
   1021c:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10220:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10224:	2205      	movs	r2, #5
   10226:	701a      	strb	r2, [r3, #0]
   10228:	f24c 3319 	movw	r3, #49945	; 0xc319
   1022c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10230:	781b      	ldrb	r3, [r3, #0]
   10232:	461a      	mov	r2, r3
   10234:	f64c 1310 	movw	r3, #51472	; 0xc910
   10238:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1023c:	7819      	ldrb	r1, [r3, #0]
   1023e:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10242:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10246:	5499      	strb	r1, [r3, r2]
   10248:	f64c 1310 	movw	r3, #51472	; 0xc910
   1024c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10250:	781a      	ldrb	r2, [r3, #0]
   10252:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10256:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1025a:	781b      	ldrb	r3, [r3, #0]
   1025c:	4413      	add	r3, r2
   1025e:	b2da      	uxtb	r2, r3
   10260:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10264:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10268:	701a      	strb	r2, [r3, #0]
   1026a:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1026e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10272:	781a      	ldrb	r2, [r3, #0]
   10274:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10278:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1027c:	781b      	ldrb	r3, [r3, #0]
   1027e:	4413      	add	r3, r2
   10280:	b2da      	uxtb	r2, r3
   10282:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10286:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1028a:	701a      	strb	r2, [r3, #0]
   1028c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10290:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10294:	781b      	ldrb	r3, [r3, #0]
   10296:	3301      	adds	r3, #1
   10298:	b2da      	uxtb	r2, r3
   1029a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1029e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102a2:	701a      	strb	r2, [r3, #0]
   102a4:	f24c 3319 	movw	r3, #49945	; 0xc319
   102a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102ac:	781b      	ldrb	r3, [r3, #0]
   102ae:	2bff      	cmp	r3, #255	; 0xff
   102b0:	d105      	bne.n	102be <send_radIR+0x1c2>
   102b2:	f24c 3319 	movw	r3, #49945	; 0xc319
   102b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102ba:	2200      	movs	r2, #0
   102bc:	701a      	strb	r2, [r3, #0]
   102be:	f24c 3319 	movw	r3, #49945	; 0xc319
   102c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102c6:	781b      	ldrb	r3, [r3, #0]
   102c8:	461a      	mov	r2, r3
   102ca:	f64c 1310 	movw	r3, #51472	; 0xc910
   102ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102d2:	7859      	ldrb	r1, [r3, #1]
   102d4:	f24c 331c 	movw	r3, #49948	; 0xc31c
   102d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102dc:	5499      	strb	r1, [r3, r2]
   102de:	4bd2      	ldr	r3, [pc, #840]	; (10628 <send_radIR+0x52c>)
   102e0:	781a      	ldrb	r2, [r3, #0]
   102e2:	f24c 431d 	movw	r3, #50205	; 0xc41d
   102e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102ea:	781b      	ldrb	r3, [r3, #0]
   102ec:	4413      	add	r3, r2
   102ee:	b2da      	uxtb	r2, r3
   102f0:	f24c 431d 	movw	r3, #50205	; 0xc41d
   102f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102f8:	701a      	strb	r2, [r3, #0]
   102fa:	f24c 431e 	movw	r3, #50206	; 0xc41e
   102fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10302:	781a      	ldrb	r2, [r3, #0]
   10304:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10308:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1030c:	781b      	ldrb	r3, [r3, #0]
   1030e:	4413      	add	r3, r2
   10310:	b2da      	uxtb	r2, r3
   10312:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10316:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1031a:	701a      	strb	r2, [r3, #0]
   1031c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10320:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10324:	781b      	ldrb	r3, [r3, #0]
   10326:	3301      	adds	r3, #1
   10328:	b2da      	uxtb	r2, r3
   1032a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1032e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10332:	701a      	strb	r2, [r3, #0]
   10334:	f24c 3319 	movw	r3, #49945	; 0xc319
   10338:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1033c:	781b      	ldrb	r3, [r3, #0]
   1033e:	2bff      	cmp	r3, #255	; 0xff
   10340:	d105      	bne.n	1034e <send_radIR+0x252>
   10342:	f24c 3319 	movw	r3, #49945	; 0xc319
   10346:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1034a:	2200      	movs	r2, #0
   1034c:	701a      	strb	r2, [r3, #0]
   1034e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10352:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10356:	781b      	ldrb	r3, [r3, #0]
   10358:	461a      	mov	r2, r3
   1035a:	f64c 1310 	movw	r3, #51472	; 0xc910
   1035e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10362:	7899      	ldrb	r1, [r3, #2]
   10364:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10368:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1036c:	5499      	strb	r1, [r3, r2]
   1036e:	4baf      	ldr	r3, [pc, #700]	; (1062c <send_radIR+0x530>)
   10370:	781a      	ldrb	r2, [r3, #0]
   10372:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10376:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1037a:	781b      	ldrb	r3, [r3, #0]
   1037c:	4413      	add	r3, r2
   1037e:	b2da      	uxtb	r2, r3
   10380:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10384:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10388:	701a      	strb	r2, [r3, #0]
   1038a:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1038e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10392:	781a      	ldrb	r2, [r3, #0]
   10394:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10398:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1039c:	781b      	ldrb	r3, [r3, #0]
   1039e:	4413      	add	r3, r2
   103a0:	b2da      	uxtb	r2, r3
   103a2:	f24c 431e 	movw	r3, #50206	; 0xc41e
   103a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103aa:	701a      	strb	r2, [r3, #0]
   103ac:	f24c 3319 	movw	r3, #49945	; 0xc319
   103b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103b4:	781b      	ldrb	r3, [r3, #0]
   103b6:	3301      	adds	r3, #1
   103b8:	b2da      	uxtb	r2, r3
   103ba:	f24c 3319 	movw	r3, #49945	; 0xc319
   103be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103c2:	701a      	strb	r2, [r3, #0]
   103c4:	f24c 3319 	movw	r3, #49945	; 0xc319
   103c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103cc:	781b      	ldrb	r3, [r3, #0]
   103ce:	2bff      	cmp	r3, #255	; 0xff
   103d0:	d105      	bne.n	103de <send_radIR+0x2e2>
   103d2:	f24c 3319 	movw	r3, #49945	; 0xc319
   103d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103da:	2200      	movs	r2, #0
   103dc:	701a      	strb	r2, [r3, #0]
   103de:	f24c 3319 	movw	r3, #49945	; 0xc319
   103e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103e6:	781b      	ldrb	r3, [r3, #0]
   103e8:	461a      	mov	r2, r3
   103ea:	f64c 1310 	movw	r3, #51472	; 0xc910
   103ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103f2:	78d9      	ldrb	r1, [r3, #3]
   103f4:	f24c 331c 	movw	r3, #49948	; 0xc31c
   103f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103fc:	5499      	strb	r1, [r3, r2]
   103fe:	4b8c      	ldr	r3, [pc, #560]	; (10630 <send_radIR+0x534>)
   10400:	781a      	ldrb	r2, [r3, #0]
   10402:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10406:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1040a:	781b      	ldrb	r3, [r3, #0]
   1040c:	4413      	add	r3, r2
   1040e:	b2da      	uxtb	r2, r3
   10410:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10414:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10418:	701a      	strb	r2, [r3, #0]
   1041a:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1041e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10422:	781a      	ldrb	r2, [r3, #0]
   10424:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10428:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1042c:	781b      	ldrb	r3, [r3, #0]
   1042e:	4413      	add	r3, r2
   10430:	b2da      	uxtb	r2, r3
   10432:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10436:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1043a:	701a      	strb	r2, [r3, #0]
   1043c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10440:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10444:	781b      	ldrb	r3, [r3, #0]
   10446:	3301      	adds	r3, #1
   10448:	b2da      	uxtb	r2, r3
   1044a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1044e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10452:	701a      	strb	r2, [r3, #0]
   10454:	f24c 3319 	movw	r3, #49945	; 0xc319
   10458:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1045c:	781b      	ldrb	r3, [r3, #0]
   1045e:	2bff      	cmp	r3, #255	; 0xff
   10460:	d105      	bne.n	1046e <send_radIR+0x372>
   10462:	f24c 3319 	movw	r3, #49945	; 0xc319
   10466:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1046a:	2200      	movs	r2, #0
   1046c:	701a      	strb	r2, [r3, #0]
   1046e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10472:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10476:	781b      	ldrb	r3, [r3, #0]
   10478:	461a      	mov	r2, r3
   1047a:	f64c 1314 	movw	r3, #51476	; 0xc914
   1047e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10482:	7819      	ldrb	r1, [r3, #0]
   10484:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10488:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1048c:	5499      	strb	r1, [r3, r2]
   1048e:	f64c 1314 	movw	r3, #51476	; 0xc914
   10492:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10496:	781a      	ldrb	r2, [r3, #0]
   10498:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1049c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104a0:	781b      	ldrb	r3, [r3, #0]
   104a2:	4413      	add	r3, r2
   104a4:	b2da      	uxtb	r2, r3
   104a6:	f24c 431d 	movw	r3, #50205	; 0xc41d
   104aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104ae:	701a      	strb	r2, [r3, #0]
   104b0:	f24c 431e 	movw	r3, #50206	; 0xc41e
   104b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104b8:	781a      	ldrb	r2, [r3, #0]
   104ba:	f24c 431d 	movw	r3, #50205	; 0xc41d
   104be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104c2:	781b      	ldrb	r3, [r3, #0]
   104c4:	4413      	add	r3, r2
   104c6:	b2da      	uxtb	r2, r3
   104c8:	f24c 431e 	movw	r3, #50206	; 0xc41e
   104cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104d0:	701a      	strb	r2, [r3, #0]
   104d2:	f24c 3319 	movw	r3, #49945	; 0xc319
   104d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104da:	781b      	ldrb	r3, [r3, #0]
   104dc:	3301      	adds	r3, #1
   104de:	b2da      	uxtb	r2, r3
   104e0:	f24c 3319 	movw	r3, #49945	; 0xc319
   104e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104e8:	701a      	strb	r2, [r3, #0]
   104ea:	f24c 3319 	movw	r3, #49945	; 0xc319
   104ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104f2:	781b      	ldrb	r3, [r3, #0]
   104f4:	2bff      	cmp	r3, #255	; 0xff
   104f6:	d105      	bne.n	10504 <send_radIR+0x408>
   104f8:	f24c 3319 	movw	r3, #49945	; 0xc319
   104fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10500:	2200      	movs	r2, #0
   10502:	701a      	strb	r2, [r3, #0]
   10504:	f24c 3319 	movw	r3, #49945	; 0xc319
   10508:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1050c:	781b      	ldrb	r3, [r3, #0]
   1050e:	461a      	mov	r2, r3
   10510:	f64c 1314 	movw	r3, #51476	; 0xc914
   10514:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10518:	7859      	ldrb	r1, [r3, #1]
   1051a:	f24c 331c 	movw	r3, #49948	; 0xc31c
   1051e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10522:	5499      	strb	r1, [r3, r2]
   10524:	4b43      	ldr	r3, [pc, #268]	; (10634 <send_radIR+0x538>)
   10526:	781a      	ldrb	r2, [r3, #0]
   10528:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1052c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10530:	781b      	ldrb	r3, [r3, #0]
   10532:	4413      	add	r3, r2
   10534:	b2da      	uxtb	r2, r3
   10536:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1053a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1053e:	701a      	strb	r2, [r3, #0]
   10540:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10544:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10548:	781a      	ldrb	r2, [r3, #0]
   1054a:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1054e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10552:	781b      	ldrb	r3, [r3, #0]
   10554:	4413      	add	r3, r2
   10556:	b2da      	uxtb	r2, r3
   10558:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1055c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10560:	701a      	strb	r2, [r3, #0]
   10562:	f24c 3319 	movw	r3, #49945	; 0xc319
   10566:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1056a:	781b      	ldrb	r3, [r3, #0]
   1056c:	3301      	adds	r3, #1
   1056e:	b2da      	uxtb	r2, r3
   10570:	f24c 3319 	movw	r3, #49945	; 0xc319
   10574:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10578:	701a      	strb	r2, [r3, #0]
   1057a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1057e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10582:	781b      	ldrb	r3, [r3, #0]
   10584:	2bff      	cmp	r3, #255	; 0xff
   10586:	d105      	bne.n	10594 <send_radIR+0x498>
   10588:	f24c 3319 	movw	r3, #49945	; 0xc319
   1058c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10590:	2200      	movs	r2, #0
   10592:	701a      	strb	r2, [r3, #0]
   10594:	f24c 3319 	movw	r3, #49945	; 0xc319
   10598:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1059c:	781b      	ldrb	r3, [r3, #0]
   1059e:	461a      	mov	r2, r3
   105a0:	f64c 1314 	movw	r3, #51476	; 0xc914
   105a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105a8:	7899      	ldrb	r1, [r3, #2]
   105aa:	f24c 331c 	movw	r3, #49948	; 0xc31c
   105ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105b2:	5499      	strb	r1, [r3, r2]
   105b4:	4b20      	ldr	r3, [pc, #128]	; (10638 <send_radIR+0x53c>)
   105b6:	781a      	ldrb	r2, [r3, #0]
   105b8:	f24c 431d 	movw	r3, #50205	; 0xc41d
   105bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105c0:	781b      	ldrb	r3, [r3, #0]
   105c2:	4413      	add	r3, r2
   105c4:	b2da      	uxtb	r2, r3
   105c6:	f24c 431d 	movw	r3, #50205	; 0xc41d
   105ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105ce:	701a      	strb	r2, [r3, #0]
   105d0:	f24c 431e 	movw	r3, #50206	; 0xc41e
   105d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105d8:	781a      	ldrb	r2, [r3, #0]
   105da:	f24c 431d 	movw	r3, #50205	; 0xc41d
   105de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105e2:	781b      	ldrb	r3, [r3, #0]
   105e4:	4413      	add	r3, r2
   105e6:	b2da      	uxtb	r2, r3
   105e8:	f24c 431e 	movw	r3, #50206	; 0xc41e
   105ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105f0:	701a      	strb	r2, [r3, #0]
   105f2:	f24c 3319 	movw	r3, #49945	; 0xc319
   105f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105fa:	781b      	ldrb	r3, [r3, #0]
   105fc:	3301      	adds	r3, #1
   105fe:	b2da      	uxtb	r2, r3
   10600:	f24c 3319 	movw	r3, #49945	; 0xc319
   10604:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10608:	701a      	strb	r2, [r3, #0]
   1060a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1060e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10612:	781b      	ldrb	r3, [r3, #0]
   10614:	2bff      	cmp	r3, #255	; 0xff
   10616:	d111      	bne.n	1063c <send_radIR+0x540>
   10618:	f24c 3319 	movw	r3, #49945	; 0xc319
   1061c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10620:	2200      	movs	r2, #0
   10622:	701a      	strb	r2, [r3, #0]
   10624:	e00a      	b.n	1063c <send_radIR+0x540>
   10626:	bf00      	nop
   10628:	2004c911 	.word	0x2004c911
   1062c:	2004c912 	.word	0x2004c912
   10630:	2004c913 	.word	0x2004c913
   10634:	2004c915 	.word	0x2004c915
   10638:	2004c916 	.word	0x2004c916
   1063c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10640:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10644:	781b      	ldrb	r3, [r3, #0]
   10646:	461a      	mov	r2, r3
   10648:	f64c 1314 	movw	r3, #51476	; 0xc914
   1064c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10650:	78d9      	ldrb	r1, [r3, #3]
   10652:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10656:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1065a:	5499      	strb	r1, [r3, r2]
   1065c:	4bd3      	ldr	r3, [pc, #844]	; (109ac <send_radIR+0x8b0>)
   1065e:	781a      	ldrb	r2, [r3, #0]
   10660:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10664:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10668:	781b      	ldrb	r3, [r3, #0]
   1066a:	4413      	add	r3, r2
   1066c:	b2da      	uxtb	r2, r3
   1066e:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10672:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10676:	701a      	strb	r2, [r3, #0]
   10678:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1067c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10680:	781a      	ldrb	r2, [r3, #0]
   10682:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10686:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1068a:	781b      	ldrb	r3, [r3, #0]
   1068c:	4413      	add	r3, r2
   1068e:	b2da      	uxtb	r2, r3
   10690:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10694:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10698:	701a      	strb	r2, [r3, #0]
   1069a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1069e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106a2:	781b      	ldrb	r3, [r3, #0]
   106a4:	3301      	adds	r3, #1
   106a6:	b2da      	uxtb	r2, r3
   106a8:	f24c 3319 	movw	r3, #49945	; 0xc319
   106ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106b0:	701a      	strb	r2, [r3, #0]
   106b2:	f24c 3319 	movw	r3, #49945	; 0xc319
   106b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106ba:	781b      	ldrb	r3, [r3, #0]
   106bc:	2bff      	cmp	r3, #255	; 0xff
   106be:	d105      	bne.n	106cc <send_radIR+0x5d0>
   106c0:	f24c 3319 	movw	r3, #49945	; 0xc319
   106c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106c8:	2200      	movs	r2, #0
   106ca:	701a      	strb	r2, [r3, #0]
   106cc:	f24c 3319 	movw	r3, #49945	; 0xc319
   106d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106d4:	781b      	ldrb	r3, [r3, #0]
   106d6:	461a      	mov	r2, r3
   106d8:	f64c 130c 	movw	r3, #51468	; 0xc90c
   106dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106e0:	7819      	ldrb	r1, [r3, #0]
   106e2:	f24c 331c 	movw	r3, #49948	; 0xc31c
   106e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106ea:	5499      	strb	r1, [r3, r2]
   106ec:	f64c 130c 	movw	r3, #51468	; 0xc90c
   106f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106f4:	781a      	ldrb	r2, [r3, #0]
   106f6:	f24c 431d 	movw	r3, #50205	; 0xc41d
   106fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106fe:	781b      	ldrb	r3, [r3, #0]
   10700:	4413      	add	r3, r2
   10702:	b2da      	uxtb	r2, r3
   10704:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10708:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1070c:	701a      	strb	r2, [r3, #0]
   1070e:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10712:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10716:	781a      	ldrb	r2, [r3, #0]
   10718:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1071c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10720:	781b      	ldrb	r3, [r3, #0]
   10722:	4413      	add	r3, r2
   10724:	b2da      	uxtb	r2, r3
   10726:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1072a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1072e:	701a      	strb	r2, [r3, #0]
   10730:	f24c 3319 	movw	r3, #49945	; 0xc319
   10734:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10738:	781b      	ldrb	r3, [r3, #0]
   1073a:	3301      	adds	r3, #1
   1073c:	b2da      	uxtb	r2, r3
   1073e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10742:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10746:	701a      	strb	r2, [r3, #0]
   10748:	f24c 3319 	movw	r3, #49945	; 0xc319
   1074c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10750:	781b      	ldrb	r3, [r3, #0]
   10752:	2bff      	cmp	r3, #255	; 0xff
   10754:	d105      	bne.n	10762 <send_radIR+0x666>
   10756:	f24c 3319 	movw	r3, #49945	; 0xc319
   1075a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1075e:	2200      	movs	r2, #0
   10760:	701a      	strb	r2, [r3, #0]
   10762:	f24c 3319 	movw	r3, #49945	; 0xc319
   10766:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1076a:	781b      	ldrb	r3, [r3, #0]
   1076c:	461a      	mov	r2, r3
   1076e:	f64c 130c 	movw	r3, #51468	; 0xc90c
   10772:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10776:	7859      	ldrb	r1, [r3, #1]
   10778:	f24c 331c 	movw	r3, #49948	; 0xc31c
   1077c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10780:	5499      	strb	r1, [r3, r2]
   10782:	4b8b      	ldr	r3, [pc, #556]	; (109b0 <send_radIR+0x8b4>)
   10784:	781a      	ldrb	r2, [r3, #0]
   10786:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1078a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1078e:	781b      	ldrb	r3, [r3, #0]
   10790:	4413      	add	r3, r2
   10792:	b2da      	uxtb	r2, r3
   10794:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10798:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1079c:	701a      	strb	r2, [r3, #0]
   1079e:	f24c 431e 	movw	r3, #50206	; 0xc41e
   107a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107a6:	781a      	ldrb	r2, [r3, #0]
   107a8:	f24c 431d 	movw	r3, #50205	; 0xc41d
   107ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107b0:	781b      	ldrb	r3, [r3, #0]
   107b2:	4413      	add	r3, r2
   107b4:	b2da      	uxtb	r2, r3
   107b6:	f24c 431e 	movw	r3, #50206	; 0xc41e
   107ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107be:	701a      	strb	r2, [r3, #0]
   107c0:	f24c 3319 	movw	r3, #49945	; 0xc319
   107c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107c8:	781b      	ldrb	r3, [r3, #0]
   107ca:	3301      	adds	r3, #1
   107cc:	b2da      	uxtb	r2, r3
   107ce:	f24c 3319 	movw	r3, #49945	; 0xc319
   107d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107d6:	701a      	strb	r2, [r3, #0]
   107d8:	f24c 3319 	movw	r3, #49945	; 0xc319
   107dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107e0:	781b      	ldrb	r3, [r3, #0]
   107e2:	2bff      	cmp	r3, #255	; 0xff
   107e4:	d105      	bne.n	107f2 <send_radIR+0x6f6>
   107e6:	f24c 3319 	movw	r3, #49945	; 0xc319
   107ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107ee:	2200      	movs	r2, #0
   107f0:	701a      	strb	r2, [r3, #0]
   107f2:	f24c 3319 	movw	r3, #49945	; 0xc319
   107f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107fa:	781b      	ldrb	r3, [r3, #0]
   107fc:	461a      	mov	r2, r3
   107fe:	f64c 130c 	movw	r3, #51468	; 0xc90c
   10802:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10806:	7899      	ldrb	r1, [r3, #2]
   10808:	f24c 331c 	movw	r3, #49948	; 0xc31c
   1080c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10810:	5499      	strb	r1, [r3, r2]
   10812:	4b68      	ldr	r3, [pc, #416]	; (109b4 <send_radIR+0x8b8>)
   10814:	781a      	ldrb	r2, [r3, #0]
   10816:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1081a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1081e:	781b      	ldrb	r3, [r3, #0]
   10820:	4413      	add	r3, r2
   10822:	b2da      	uxtb	r2, r3
   10824:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10828:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1082c:	701a      	strb	r2, [r3, #0]
   1082e:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10832:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10836:	781a      	ldrb	r2, [r3, #0]
   10838:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1083c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10840:	781b      	ldrb	r3, [r3, #0]
   10842:	4413      	add	r3, r2
   10844:	b2da      	uxtb	r2, r3
   10846:	f24c 431e 	movw	r3, #50206	; 0xc41e
   1084a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1084e:	701a      	strb	r2, [r3, #0]
   10850:	f24c 3319 	movw	r3, #49945	; 0xc319
   10854:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10858:	781b      	ldrb	r3, [r3, #0]
   1085a:	3301      	adds	r3, #1
   1085c:	b2da      	uxtb	r2, r3
   1085e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10862:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10866:	701a      	strb	r2, [r3, #0]
   10868:	f24c 3319 	movw	r3, #49945	; 0xc319
   1086c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10870:	781b      	ldrb	r3, [r3, #0]
   10872:	2bff      	cmp	r3, #255	; 0xff
   10874:	d105      	bne.n	10882 <send_radIR+0x786>
   10876:	f24c 3319 	movw	r3, #49945	; 0xc319
   1087a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1087e:	2200      	movs	r2, #0
   10880:	701a      	strb	r2, [r3, #0]
   10882:	f24c 3319 	movw	r3, #49945	; 0xc319
   10886:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1088a:	781b      	ldrb	r3, [r3, #0]
   1088c:	461a      	mov	r2, r3
   1088e:	f64c 130c 	movw	r3, #51468	; 0xc90c
   10892:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10896:	78d9      	ldrb	r1, [r3, #3]
   10898:	f24c 331c 	movw	r3, #49948	; 0xc31c
   1089c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108a0:	5499      	strb	r1, [r3, r2]
   108a2:	4b45      	ldr	r3, [pc, #276]	; (109b8 <send_radIR+0x8bc>)
   108a4:	781a      	ldrb	r2, [r3, #0]
   108a6:	f24c 431d 	movw	r3, #50205	; 0xc41d
   108aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108ae:	781b      	ldrb	r3, [r3, #0]
   108b0:	4413      	add	r3, r2
   108b2:	b2da      	uxtb	r2, r3
   108b4:	f24c 431d 	movw	r3, #50205	; 0xc41d
   108b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108bc:	701a      	strb	r2, [r3, #0]
   108be:	f24c 431e 	movw	r3, #50206	; 0xc41e
   108c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108c6:	781a      	ldrb	r2, [r3, #0]
   108c8:	f24c 431d 	movw	r3, #50205	; 0xc41d
   108cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108d0:	781b      	ldrb	r3, [r3, #0]
   108d2:	4413      	add	r3, r2
   108d4:	b2da      	uxtb	r2, r3
   108d6:	f24c 431e 	movw	r3, #50206	; 0xc41e
   108da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108de:	701a      	strb	r2, [r3, #0]
   108e0:	f24c 3319 	movw	r3, #49945	; 0xc319
   108e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108e8:	781b      	ldrb	r3, [r3, #0]
   108ea:	3301      	adds	r3, #1
   108ec:	b2da      	uxtb	r2, r3
   108ee:	f24c 3319 	movw	r3, #49945	; 0xc319
   108f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108f6:	701a      	strb	r2, [r3, #0]
   108f8:	f24c 3319 	movw	r3, #49945	; 0xc319
   108fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10900:	781b      	ldrb	r3, [r3, #0]
   10902:	2bff      	cmp	r3, #255	; 0xff
   10904:	d105      	bne.n	10912 <send_radIR+0x816>
   10906:	f24c 3319 	movw	r3, #49945	; 0xc319
   1090a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1090e:	2200      	movs	r2, #0
   10910:	701a      	strb	r2, [r3, #0]
   10912:	f24c 3319 	movw	r3, #49945	; 0xc319
   10916:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1091a:	781b      	ldrb	r3, [r3, #0]
   1091c:	461a      	mov	r2, r3
   1091e:	f240 5342 	movw	r3, #1346	; 0x542
   10922:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10926:	7819      	ldrb	r1, [r3, #0]
   10928:	f24c 331c 	movw	r3, #49948	; 0xc31c
   1092c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10930:	5499      	strb	r1, [r3, r2]
   10932:	f240 5342 	movw	r3, #1346	; 0x542
   10936:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1093a:	781a      	ldrb	r2, [r3, #0]
   1093c:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10940:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10944:	781b      	ldrb	r3, [r3, #0]
   10946:	4413      	add	r3, r2
   10948:	b2da      	uxtb	r2, r3
   1094a:	f24c 431d 	movw	r3, #50205	; 0xc41d
   1094e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10952:	701a      	strb	r2, [r3, #0]
   10954:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10958:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1095c:	781a      	ldrb	r2, [r3, #0]
   1095e:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10962:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10966:	781b      	ldrb	r3, [r3, #0]
   10968:	4413      	add	r3, r2
   1096a:	b2da      	uxtb	r2, r3
   1096c:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10970:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10974:	701a      	strb	r2, [r3, #0]
   10976:	f24c 3319 	movw	r3, #49945	; 0xc319
   1097a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1097e:	781b      	ldrb	r3, [r3, #0]
   10980:	3301      	adds	r3, #1
   10982:	b2da      	uxtb	r2, r3
   10984:	f24c 3319 	movw	r3, #49945	; 0xc319
   10988:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1098c:	701a      	strb	r2, [r3, #0]
   1098e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10992:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10996:	781b      	ldrb	r3, [r3, #0]
   10998:	2bff      	cmp	r3, #255	; 0xff
   1099a:	d10f      	bne.n	109bc <send_radIR+0x8c0>
   1099c:	f24c 3319 	movw	r3, #49945	; 0xc319
   109a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109a4:	2200      	movs	r2, #0
   109a6:	701a      	strb	r2, [r3, #0]
   109a8:	e008      	b.n	109bc <send_radIR+0x8c0>
   109aa:	bf00      	nop
   109ac:	2004c917 	.word	0x2004c917
   109b0:	2004c90d 	.word	0x2004c90d
   109b4:	2004c90e 	.word	0x2004c90e
   109b8:	2004c90f 	.word	0x2004c90f
   109bc:	f24c 3319 	movw	r3, #49945	; 0xc319
   109c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109c4:	781b      	ldrb	r3, [r3, #0]
   109c6:	461a      	mov	r2, r3
   109c8:	f240 5342 	movw	r3, #1346	; 0x542
   109cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   109d0:	7859      	ldrb	r1, [r3, #1]
   109d2:	f24c 331c 	movw	r3, #49948	; 0xc31c
   109d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109da:	5499      	strb	r1, [r3, r2]
   109dc:	4bc2      	ldr	r3, [pc, #776]	; (10ce8 <send_radIR+0xbec>)
   109de:	781a      	ldrb	r2, [r3, #0]
   109e0:	f24c 431d 	movw	r3, #50205	; 0xc41d
   109e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109e8:	781b      	ldrb	r3, [r3, #0]
   109ea:	4413      	add	r3, r2
   109ec:	b2da      	uxtb	r2, r3
   109ee:	f24c 431d 	movw	r3, #50205	; 0xc41d
   109f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109f6:	701a      	strb	r2, [r3, #0]
   109f8:	f24c 431e 	movw	r3, #50206	; 0xc41e
   109fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a00:	781a      	ldrb	r2, [r3, #0]
   10a02:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a0a:	781b      	ldrb	r3, [r3, #0]
   10a0c:	4413      	add	r3, r2
   10a0e:	b2da      	uxtb	r2, r3
   10a10:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10a14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a18:	701a      	strb	r2, [r3, #0]
   10a1a:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a22:	781b      	ldrb	r3, [r3, #0]
   10a24:	3301      	adds	r3, #1
   10a26:	b2da      	uxtb	r2, r3
   10a28:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a30:	701a      	strb	r2, [r3, #0]
   10a32:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a3a:	781b      	ldrb	r3, [r3, #0]
   10a3c:	2bff      	cmp	r3, #255	; 0xff
   10a3e:	d105      	bne.n	10a4c <send_radIR+0x950>
   10a40:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a48:	2200      	movs	r2, #0
   10a4a:	701a      	strb	r2, [r3, #0]
   10a4c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10a50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a54:	781b      	ldrb	r3, [r3, #0]
   10a56:	461a      	mov	r2, r3
   10a58:	f240 5344 	movw	r3, #1348	; 0x544
   10a5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a60:	7819      	ldrb	r1, [r3, #0]
   10a62:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10a66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a6a:	5499      	strb	r1, [r3, r2]
   10a6c:	f240 5344 	movw	r3, #1348	; 0x544
   10a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a74:	781a      	ldrb	r2, [r3, #0]
   10a76:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10a7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a7e:	781b      	ldrb	r3, [r3, #0]
   10a80:	4413      	add	r3, r2
   10a82:	b2da      	uxtb	r2, r3
   10a84:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a8c:	701a      	strb	r2, [r3, #0]
   10a8e:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10a92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a96:	781a      	ldrb	r2, [r3, #0]
   10a98:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10a9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10aa0:	781b      	ldrb	r3, [r3, #0]
   10aa2:	4413      	add	r3, r2
   10aa4:	b2da      	uxtb	r2, r3
   10aa6:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10aaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10aae:	701a      	strb	r2, [r3, #0]
   10ab0:	f24c 3319 	movw	r3, #49945	; 0xc319
   10ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ab8:	781b      	ldrb	r3, [r3, #0]
   10aba:	3301      	adds	r3, #1
   10abc:	b2da      	uxtb	r2, r3
   10abe:	f24c 3319 	movw	r3, #49945	; 0xc319
   10ac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ac6:	701a      	strb	r2, [r3, #0]
   10ac8:	f24c 3319 	movw	r3, #49945	; 0xc319
   10acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ad0:	781b      	ldrb	r3, [r3, #0]
   10ad2:	2bff      	cmp	r3, #255	; 0xff
   10ad4:	d105      	bne.n	10ae2 <send_radIR+0x9e6>
   10ad6:	f24c 3319 	movw	r3, #49945	; 0xc319
   10ada:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ade:	2200      	movs	r2, #0
   10ae0:	701a      	strb	r2, [r3, #0]
   10ae2:	f24c 3319 	movw	r3, #49945	; 0xc319
   10ae6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10aea:	781b      	ldrb	r3, [r3, #0]
   10aec:	461a      	mov	r2, r3
   10aee:	f240 5344 	movw	r3, #1348	; 0x544
   10af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10af6:	7859      	ldrb	r1, [r3, #1]
   10af8:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10afc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b00:	5499      	strb	r1, [r3, r2]
   10b02:	4b7a      	ldr	r3, [pc, #488]	; (10cec <send_radIR+0xbf0>)
   10b04:	781a      	ldrb	r2, [r3, #0]
   10b06:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10b0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b0e:	781b      	ldrb	r3, [r3, #0]
   10b10:	4413      	add	r3, r2
   10b12:	b2da      	uxtb	r2, r3
   10b14:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10b18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b1c:	701a      	strb	r2, [r3, #0]
   10b1e:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10b22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b26:	781a      	ldrb	r2, [r3, #0]
   10b28:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10b2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b30:	781b      	ldrb	r3, [r3, #0]
   10b32:	4413      	add	r3, r2
   10b34:	b2da      	uxtb	r2, r3
   10b36:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10b3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b3e:	701a      	strb	r2, [r3, #0]
   10b40:	f24c 3319 	movw	r3, #49945	; 0xc319
   10b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b48:	781b      	ldrb	r3, [r3, #0]
   10b4a:	3301      	adds	r3, #1
   10b4c:	b2da      	uxtb	r2, r3
   10b4e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10b52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b56:	701a      	strb	r2, [r3, #0]
   10b58:	f24c 3319 	movw	r3, #49945	; 0xc319
   10b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b60:	781b      	ldrb	r3, [r3, #0]
   10b62:	2bff      	cmp	r3, #255	; 0xff
   10b64:	d105      	bne.n	10b72 <send_radIR+0xa76>
   10b66:	f24c 3319 	movw	r3, #49945	; 0xc319
   10b6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b6e:	2200      	movs	r2, #0
   10b70:	701a      	strb	r2, [r3, #0]
   10b72:	f24c 3319 	movw	r3, #49945	; 0xc319
   10b76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b7a:	781b      	ldrb	r3, [r3, #0]
   10b7c:	461a      	mov	r2, r3
   10b7e:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10b82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b86:	7819      	ldrb	r1, [r3, #0]
   10b88:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10b8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b90:	5499      	strb	r1, [r3, r2]
   10b92:	f24c 3319 	movw	r3, #49945	; 0xc319
   10b96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b9a:	781b      	ldrb	r3, [r3, #0]
   10b9c:	3301      	adds	r3, #1
   10b9e:	b2da      	uxtb	r2, r3
   10ba0:	f24c 3319 	movw	r3, #49945	; 0xc319
   10ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ba8:	701a      	strb	r2, [r3, #0]
   10baa:	f24c 3319 	movw	r3, #49945	; 0xc319
   10bae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bb2:	781b      	ldrb	r3, [r3, #0]
   10bb4:	2bff      	cmp	r3, #255	; 0xff
   10bb6:	d105      	bne.n	10bc4 <send_radIR+0xac8>
   10bb8:	f24c 3319 	movw	r3, #49945	; 0xc319
   10bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bc0:	2200      	movs	r2, #0
   10bc2:	701a      	strb	r2, [r3, #0]
   10bc4:	f24c 3319 	movw	r3, #49945	; 0xc319
   10bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bcc:	781b      	ldrb	r3, [r3, #0]
   10bce:	461a      	mov	r2, r3
   10bd0:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10bd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bd8:	7819      	ldrb	r1, [r3, #0]
   10bda:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10bde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10be2:	5499      	strb	r1, [r3, r2]
   10be4:	f24c 3319 	movw	r3, #49945	; 0xc319
   10be8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bec:	781b      	ldrb	r3, [r3, #0]
   10bee:	3301      	adds	r3, #1
   10bf0:	b2da      	uxtb	r2, r3
   10bf2:	f24c 3319 	movw	r3, #49945	; 0xc319
   10bf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bfa:	701a      	strb	r2, [r3, #0]
   10bfc:	f24c 3319 	movw	r3, #49945	; 0xc319
   10c00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c04:	781b      	ldrb	r3, [r3, #0]
   10c06:	2bff      	cmp	r3, #255	; 0xff
   10c08:	d105      	bne.n	10c16 <send_radIR+0xb1a>
   10c0a:	f24c 3319 	movw	r3, #49945	; 0xc319
   10c0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c12:	2200      	movs	r2, #0
   10c14:	701a      	strb	r2, [r3, #0]
   10c16:	f242 0339 	movw	r3, #8249	; 0x2039
   10c1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c1e:	781b      	ldrb	r3, [r3, #0]
   10c20:	b2db      	uxtb	r3, r3
   10c22:	f003 0310 	and.w	r3, r3, #16
   10c26:	2b00      	cmp	r3, #0
   10c28:	d15a      	bne.n	10ce0 <send_radIR+0xbe4>
   10c2a:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10c2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c32:	781b      	ldrb	r3, [r3, #0]
   10c34:	b2db      	uxtb	r3, r3
   10c36:	461a      	mov	r2, r3
   10c38:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10c3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c40:	5c9a      	ldrb	r2, [r3, r2]
   10c42:	f24c 431b 	movw	r3, #50203	; 0xc41b
   10c46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c4a:	701a      	strb	r2, [r3, #0]
   10c4c:	f24c 431c 	movw	r3, #50204	; 0xc41c
   10c50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c54:	2200      	movs	r2, #0
   10c56:	701a      	strb	r2, [r3, #0]
   10c58:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10c5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c60:	781b      	ldrb	r3, [r3, #0]
   10c62:	b2db      	uxtb	r3, r3
   10c64:	3301      	adds	r3, #1
   10c66:	b2da      	uxtb	r2, r3
   10c68:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10c6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c70:	701a      	strb	r2, [r3, #0]
   10c72:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10c76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c7a:	781b      	ldrb	r3, [r3, #0]
   10c7c:	b2db      	uxtb	r3, r3
   10c7e:	2bff      	cmp	r3, #255	; 0xff
   10c80:	d105      	bne.n	10c8e <send_radIR+0xb92>
   10c82:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10c86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c8a:	2200      	movs	r2, #0
   10c8c:	701a      	strb	r2, [r3, #0]
   10c8e:	f242 0338 	movw	r3, #8248	; 0x2038
   10c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10c96:	f242 0238 	movw	r2, #8248	; 0x2038
   10c9a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10c9e:	7812      	ldrb	r2, [r2, #0]
   10ca0:	b2d2      	uxtb	r2, r2
   10ca2:	f042 0201 	orr.w	r2, r2, #1
   10ca6:	b2d2      	uxtb	r2, r2
   10ca8:	701a      	strb	r2, [r3, #0]
   10caa:	f242 0339 	movw	r3, #8249	; 0x2039
   10cae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10cb2:	f242 0239 	movw	r2, #8249	; 0x2039
   10cb6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10cba:	7812      	ldrb	r2, [r2, #0]
   10cbc:	b2d2      	uxtb	r2, r2
   10cbe:	f042 0210 	orr.w	r2, r2, #16
   10cc2:	b2d2      	uxtb	r2, r2
   10cc4:	701a      	strb	r2, [r3, #0]
   10cc6:	e00b      	b.n	10ce0 <send_radIR+0xbe4>
   10cc8:	f24c 3318 	movw	r3, #49944	; 0xc318
   10ccc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cd0:	781b      	ldrb	r3, [r3, #0]
   10cd2:	3301      	adds	r3, #1
   10cd4:	b2da      	uxtb	r2, r3
   10cd6:	f24c 3318 	movw	r3, #49944	; 0xc318
   10cda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cde:	701a      	strb	r2, [r3, #0]
}
   10ce0:	46bd      	mov	sp, r7
   10ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
   10ce6:	4770      	bx	lr
   10ce8:	20000543 	.word	0x20000543
   10cec:	20000545 	.word	0x20000545

00010cf0 <send_takeOff>:

void send_takeOff(void){
   10cf0:	b580      	push	{r7, lr}
   10cf2:	af00      	add	r7, sp, #0
  if (gps_pos_available){
   10cf4:	f24c 43ae 	movw	r3, #50350	; 0xc4ae
   10cf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cfc:	781b      	ldrb	r3, [r3, #0]
   10cfe:	2b00      	cmp	r3, #0
   10d00:	f000 8200 	beq.w	11104 <send_takeOff+0x414>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
   10d04:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   10d08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d0c:	881b      	ldrh	r3, [r3, #0]
   10d0e:	2b00      	cmp	r3, #0
   10d10:	f040 81f2 	bne.w	110f8 <send_takeOff+0x408>
   10d14:	f64c 1304 	movw	r3, #51460	; 0xc904
   10d18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d1c:	681b      	ldr	r3, [r3, #0]
   10d1e:	4618      	mov	r0, r3
   10d20:	f04f 0100 	mov.w	r1, #0
   10d24:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   10d28:	f007 fe00 	bl	1892c <__aeabi_fcmpgt>
   10d2c:	4603      	mov	r3, r0
   10d2e:	2b00      	cmp	r3, #0
   10d30:	f000 81e2 	beq.w	110f8 <send_takeOff+0x408>
        estimator_flight_time = 1;
   10d34:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   10d38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d3c:	2201      	movs	r2, #1
   10d3e:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
   10d40:	f24c 3310 	movw	r3, #49936	; 0xc310
   10d44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d48:	2201      	movs	r2, #1
   10d4a:	701a      	strb	r2, [r3, #0]
        DOWNLINK_SEND_TAKEOFF(&cputime);
   10d4c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d54:	781a      	ldrb	r2, [r3, #0]
   10d56:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10d5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d5e:	781b      	ldrb	r3, [r3, #0]
   10d60:	b2db      	uxtb	r3, r3
   10d62:	429a      	cmp	r2, r3
   10d64:	d313      	bcc.n	10d8e <send_takeOff+0x9e>
   10d66:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10d6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d6e:	781b      	ldrb	r3, [r3, #0]
   10d70:	b2db      	uxtb	r3, r3
   10d72:	461a      	mov	r2, r3
   10d74:	f24c 3319 	movw	r3, #49945	; 0xc319
   10d78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d7c:	781b      	ldrb	r3, [r3, #0]
   10d7e:	1ad3      	subs	r3, r2, r3
   10d80:	33ff      	adds	r3, #255	; 0xff
   10d82:	2b06      	cmp	r3, #6
   10d84:	bfd4      	ite	le
   10d86:	2300      	movle	r3, #0
   10d88:	2301      	movgt	r3, #1
   10d8a:	b2db      	uxtb	r3, r3
   10d8c:	e011      	b.n	10db2 <send_takeOff+0xc2>
   10d8e:	f24c 331a 	movw	r3, #49946	; 0xc31a
   10d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d96:	781b      	ldrb	r3, [r3, #0]
   10d98:	b2db      	uxtb	r3, r3
   10d9a:	461a      	mov	r2, r3
   10d9c:	f24c 3319 	movw	r3, #49945	; 0xc319
   10da0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10da4:	781b      	ldrb	r3, [r3, #0]
   10da6:	1ad3      	subs	r3, r2, r3
   10da8:	2b06      	cmp	r3, #6
   10daa:	bfd4      	ite	le
   10dac:	2300      	movle	r3, #0
   10dae:	2301      	movgt	r3, #1
   10db0:	b2db      	uxtb	r3, r3
   10db2:	2b00      	cmp	r3, #0
   10db4:	f000 8194 	beq.w	110e0 <send_takeOff+0x3f0>
   10db8:	f24c 3319 	movw	r3, #49945	; 0xc319
   10dbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dc0:	781b      	ldrb	r3, [r3, #0]
   10dc2:	461a      	mov	r2, r3
   10dc4:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10dc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dcc:	2105      	movs	r1, #5
   10dce:	5499      	strb	r1, [r3, r2]
   10dd0:	f24c 3319 	movw	r3, #49945	; 0xc319
   10dd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dd8:	781b      	ldrb	r3, [r3, #0]
   10dda:	3301      	adds	r3, #1
   10ddc:	b2da      	uxtb	r2, r3
   10dde:	f24c 3319 	movw	r3, #49945	; 0xc319
   10de2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10de6:	701a      	strb	r2, [r3, #0]
   10de8:	f24c 3319 	movw	r3, #49945	; 0xc319
   10dec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10df0:	781b      	ldrb	r3, [r3, #0]
   10df2:	2bff      	cmp	r3, #255	; 0xff
   10df4:	d105      	bne.n	10e02 <send_takeOff+0x112>
   10df6:	f24c 3319 	movw	r3, #49945	; 0xc319
   10dfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dfe:	2200      	movs	r2, #0
   10e00:	701a      	strb	r2, [r3, #0]
   10e02:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e0a:	781b      	ldrb	r3, [r3, #0]
   10e0c:	461a      	mov	r2, r3
   10e0e:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10e12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e16:	2104      	movs	r1, #4
   10e18:	5499      	strb	r1, [r3, r2]
   10e1a:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e22:	781b      	ldrb	r3, [r3, #0]
   10e24:	3301      	adds	r3, #1
   10e26:	b2da      	uxtb	r2, r3
   10e28:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e30:	701a      	strb	r2, [r3, #0]
   10e32:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e3a:	781b      	ldrb	r3, [r3, #0]
   10e3c:	2bff      	cmp	r3, #255	; 0xff
   10e3e:	d105      	bne.n	10e4c <send_takeOff+0x15c>
   10e40:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e48:	2200      	movs	r2, #0
   10e4a:	701a      	strb	r2, [r3, #0]
   10e4c:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10e50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e54:	2204      	movs	r2, #4
   10e56:	701a      	strb	r2, [r3, #0]
   10e58:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10e5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e60:	2204      	movs	r2, #4
   10e62:	701a      	strb	r2, [r3, #0]
   10e64:	f24c 3319 	movw	r3, #49945	; 0xc319
   10e68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e6c:	781b      	ldrb	r3, [r3, #0]
   10e6e:	461a      	mov	r2, r3
   10e70:	f24c 23fa 	movw	r3, #49914	; 0xc2fa
   10e74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e78:	7819      	ldrb	r1, [r3, #0]
   10e7a:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e82:	5499      	strb	r1, [r3, r2]
   10e84:	f24c 23fa 	movw	r3, #49914	; 0xc2fa
   10e88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e8c:	781a      	ldrb	r2, [r3, #0]
   10e8e:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10e92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e96:	781b      	ldrb	r3, [r3, #0]
   10e98:	4413      	add	r3, r2
   10e9a:	b2da      	uxtb	r2, r3
   10e9c:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10ea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ea4:	701a      	strb	r2, [r3, #0]
   10ea6:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10eaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eae:	781a      	ldrb	r2, [r3, #0]
   10eb0:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10eb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eb8:	781b      	ldrb	r3, [r3, #0]
   10eba:	4413      	add	r3, r2
   10ebc:	b2da      	uxtb	r2, r3
   10ebe:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10ec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ec6:	701a      	strb	r2, [r3, #0]
   10ec8:	f24c 3319 	movw	r3, #49945	; 0xc319
   10ecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ed0:	781b      	ldrb	r3, [r3, #0]
   10ed2:	3301      	adds	r3, #1
   10ed4:	b2da      	uxtb	r2, r3
   10ed6:	f24c 3319 	movw	r3, #49945	; 0xc319
   10eda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ede:	701a      	strb	r2, [r3, #0]
   10ee0:	f24c 3319 	movw	r3, #49945	; 0xc319
   10ee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ee8:	781b      	ldrb	r3, [r3, #0]
   10eea:	2bff      	cmp	r3, #255	; 0xff
   10eec:	d105      	bne.n	10efa <send_takeOff+0x20a>
   10eee:	f24c 3319 	movw	r3, #49945	; 0xc319
   10ef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ef6:	2200      	movs	r2, #0
   10ef8:	701a      	strb	r2, [r3, #0]
   10efa:	f24c 3319 	movw	r3, #49945	; 0xc319
   10efe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f02:	781b      	ldrb	r3, [r3, #0]
   10f04:	461a      	mov	r2, r3
   10f06:	f24c 23fa 	movw	r3, #49914	; 0xc2fa
   10f0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f0e:	7859      	ldrb	r1, [r3, #1]
   10f10:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10f14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f18:	5499      	strb	r1, [r3, r2]
   10f1a:	4b7b      	ldr	r3, [pc, #492]	; (11108 <send_takeOff+0x418>)
   10f1c:	781a      	ldrb	r2, [r3, #0]
   10f1e:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10f22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f26:	781b      	ldrb	r3, [r3, #0]
   10f28:	4413      	add	r3, r2
   10f2a:	b2da      	uxtb	r2, r3
   10f2c:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10f30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f34:	701a      	strb	r2, [r3, #0]
   10f36:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10f3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f3e:	781a      	ldrb	r2, [r3, #0]
   10f40:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10f44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f48:	781b      	ldrb	r3, [r3, #0]
   10f4a:	4413      	add	r3, r2
   10f4c:	b2da      	uxtb	r2, r3
   10f4e:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10f52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f56:	701a      	strb	r2, [r3, #0]
   10f58:	f24c 3319 	movw	r3, #49945	; 0xc319
   10f5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f60:	781b      	ldrb	r3, [r3, #0]
   10f62:	3301      	adds	r3, #1
   10f64:	b2da      	uxtb	r2, r3
   10f66:	f24c 3319 	movw	r3, #49945	; 0xc319
   10f6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f6e:	701a      	strb	r2, [r3, #0]
   10f70:	f24c 3319 	movw	r3, #49945	; 0xc319
   10f74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f78:	781b      	ldrb	r3, [r3, #0]
   10f7a:	2bff      	cmp	r3, #255	; 0xff
   10f7c:	d105      	bne.n	10f8a <send_takeOff+0x29a>
   10f7e:	f24c 3319 	movw	r3, #49945	; 0xc319
   10f82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f86:	2200      	movs	r2, #0
   10f88:	701a      	strb	r2, [r3, #0]
   10f8a:	f24c 3319 	movw	r3, #49945	; 0xc319
   10f8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f92:	781b      	ldrb	r3, [r3, #0]
   10f94:	461a      	mov	r2, r3
   10f96:	f24c 431d 	movw	r3, #50205	; 0xc41d
   10f9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f9e:	7819      	ldrb	r1, [r3, #0]
   10fa0:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10fa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fa8:	5499      	strb	r1, [r3, r2]
   10faa:	f24c 3319 	movw	r3, #49945	; 0xc319
   10fae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fb2:	781b      	ldrb	r3, [r3, #0]
   10fb4:	3301      	adds	r3, #1
   10fb6:	b2da      	uxtb	r2, r3
   10fb8:	f24c 3319 	movw	r3, #49945	; 0xc319
   10fbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fc0:	701a      	strb	r2, [r3, #0]
   10fc2:	f24c 3319 	movw	r3, #49945	; 0xc319
   10fc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fca:	781b      	ldrb	r3, [r3, #0]
   10fcc:	2bff      	cmp	r3, #255	; 0xff
   10fce:	d105      	bne.n	10fdc <send_takeOff+0x2ec>
   10fd0:	f24c 3319 	movw	r3, #49945	; 0xc319
   10fd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fd8:	2200      	movs	r2, #0
   10fda:	701a      	strb	r2, [r3, #0]
   10fdc:	f24c 3319 	movw	r3, #49945	; 0xc319
   10fe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10fe4:	781b      	ldrb	r3, [r3, #0]
   10fe6:	461a      	mov	r2, r3
   10fe8:	f24c 431e 	movw	r3, #50206	; 0xc41e
   10fec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ff0:	7819      	ldrb	r1, [r3, #0]
   10ff2:	f24c 331c 	movw	r3, #49948	; 0xc31c
   10ff6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ffa:	5499      	strb	r1, [r3, r2]
   10ffc:	f24c 3319 	movw	r3, #49945	; 0xc319
   11000:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11004:	781b      	ldrb	r3, [r3, #0]
   11006:	3301      	adds	r3, #1
   11008:	b2da      	uxtb	r2, r3
   1100a:	f24c 3319 	movw	r3, #49945	; 0xc319
   1100e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11012:	701a      	strb	r2, [r3, #0]
   11014:	f24c 3319 	movw	r3, #49945	; 0xc319
   11018:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1101c:	781b      	ldrb	r3, [r3, #0]
   1101e:	2bff      	cmp	r3, #255	; 0xff
   11020:	d105      	bne.n	1102e <send_takeOff+0x33e>
   11022:	f24c 3319 	movw	r3, #49945	; 0xc319
   11026:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1102a:	2200      	movs	r2, #0
   1102c:	701a      	strb	r2, [r3, #0]
   1102e:	f242 0339 	movw	r3, #8249	; 0x2039
   11032:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11036:	781b      	ldrb	r3, [r3, #0]
   11038:	b2db      	uxtb	r3, r3
   1103a:	f003 0310 	and.w	r3, r3, #16
   1103e:	2b00      	cmp	r3, #0
   11040:	d15a      	bne.n	110f8 <send_takeOff+0x408>
   11042:	f24c 331a 	movw	r3, #49946	; 0xc31a
   11046:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1104a:	781b      	ldrb	r3, [r3, #0]
   1104c:	b2db      	uxtb	r3, r3
   1104e:	461a      	mov	r2, r3
   11050:	f24c 331c 	movw	r3, #49948	; 0xc31c
   11054:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11058:	5c9a      	ldrb	r2, [r3, r2]
   1105a:	f24c 431b 	movw	r3, #50203	; 0xc41b
   1105e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11062:	701a      	strb	r2, [r3, #0]
   11064:	f24c 431c 	movw	r3, #50204	; 0xc41c
   11068:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1106c:	2200      	movs	r2, #0
   1106e:	701a      	strb	r2, [r3, #0]
   11070:	f24c 331a 	movw	r3, #49946	; 0xc31a
   11074:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11078:	781b      	ldrb	r3, [r3, #0]
   1107a:	b2db      	uxtb	r3, r3
   1107c:	3301      	adds	r3, #1
   1107e:	b2da      	uxtb	r2, r3
   11080:	f24c 331a 	movw	r3, #49946	; 0xc31a
   11084:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11088:	701a      	strb	r2, [r3, #0]
   1108a:	f24c 331a 	movw	r3, #49946	; 0xc31a
   1108e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11092:	781b      	ldrb	r3, [r3, #0]
   11094:	b2db      	uxtb	r3, r3
   11096:	2bff      	cmp	r3, #255	; 0xff
   11098:	d105      	bne.n	110a6 <send_takeOff+0x3b6>
   1109a:	f24c 331a 	movw	r3, #49946	; 0xc31a
   1109e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110a2:	2200      	movs	r2, #0
   110a4:	701a      	strb	r2, [r3, #0]
   110a6:	f242 0338 	movw	r3, #8248	; 0x2038
   110aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110ae:	f242 0238 	movw	r2, #8248	; 0x2038
   110b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110b6:	7812      	ldrb	r2, [r2, #0]
   110b8:	b2d2      	uxtb	r2, r2
   110ba:	f042 0201 	orr.w	r2, r2, #1
   110be:	b2d2      	uxtb	r2, r2
   110c0:	701a      	strb	r2, [r3, #0]
   110c2:	f242 0339 	movw	r3, #8249	; 0x2039
   110c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110ca:	f242 0239 	movw	r2, #8249	; 0x2039
   110ce:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110d2:	7812      	ldrb	r2, [r2, #0]
   110d4:	b2d2      	uxtb	r2, r2
   110d6:	f042 0210 	orr.w	r2, r2, #16
   110da:	b2d2      	uxtb	r2, r2
   110dc:	701a      	strb	r2, [r3, #0]
   110de:	e00b      	b.n	110f8 <send_takeOff+0x408>
   110e0:	f24c 3318 	movw	r3, #49944	; 0xc318
   110e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110e8:	781b      	ldrb	r3, [r3, #0]
   110ea:	3301      	adds	r3, #1
   110ec:	b2da      	uxtb	r2, r3
   110ee:	f24c 3318 	movw	r3, #49944	; 0xc318
   110f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110f6:	701a      	strb	r2, [r3, #0]
     }
     gps_pos_available = FALSE; 
   110f8:	f24c 43ae 	movw	r3, #50350	; 0xc4ae
   110fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11100:	2200      	movs	r2, #0
   11102:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
   11104:	bd80      	pop	{r7, pc}
   11106:	bf00      	nop
   11108:	2004c2fb 	.word	0x2004c2fb
   1110c:	f3af 8000 	nop.w

00011110 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
   11110:	b480      	push	{r7}
   11112:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
   11114:	f242 0317 	movw	r3, #8215	; 0x2017
   11118:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1111c:	f242 0217 	movw	r2, #8215	; 0x2017
   11120:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11124:	7812      	ldrb	r2, [r2, #0]
   11126:	b2d2      	uxtb	r2, r2
   11128:	f042 0210 	orr.w	r2, r2, #16
   1112c:	b2d2      	uxtb	r2, r2
   1112e:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
   11130:	f242 0331 	movw	r3, #8241	; 0x2031
   11134:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11138:	2201      	movs	r2, #1
   1113a:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
   1113c:	f242 0333 	movw	r3, #8243	; 0x2033
   11140:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11144:	2219      	movs	r2, #25
   11146:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
   11148:	f242 0311 	movw	r3, #8209	; 0x2011
   1114c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11150:	f242 0211 	movw	r2, #8209	; 0x2011
   11154:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11158:	7812      	ldrb	r2, [r2, #0]
   1115a:	b2d2      	uxtb	r2, r2
   1115c:	f062 023f 	orn	r2, r2, #63	; 0x3f
   11160:	b2d2      	uxtb	r2, r2
   11162:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   11164:	f242 0312 	movw	r3, #8210	; 0x2012
   11168:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1116c:	f242 0212 	movw	r2, #8210	; 0x2012
   11170:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11174:	7812      	ldrb	r2, [r2, #0]
   11176:	b2d2      	uxtb	r2, r2
   11178:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1117c:	b2d2      	uxtb	r2, r2
   1117e:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
   11180:	f242 0312 	movw	r3, #8210	; 0x2012
   11184:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11188:	f242 0212 	movw	r2, #8210	; 0x2012
   1118c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11190:	7812      	ldrb	r2, [r2, #0]
   11192:	b2d2      	uxtb	r2, r2
   11194:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11198:	b2d2      	uxtb	r2, r2
   1119a:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
   1119c:	f242 033a 	movw	r3, #8250	; 0x203a
   111a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111a4:	f242 023a 	movw	r2, #8250	; 0x203a
   111a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   111ac:	7812      	ldrb	r2, [r2, #0]
   111ae:	b2d2      	uxtb	r2, r2
   111b0:	f042 0202 	orr.w	r2, r2, #2
   111b4:	b2d2      	uxtb	r2, r2
   111b6:	701a      	strb	r2, [r3, #0]
}
   111b8:	46bd      	mov	sp, r7
   111ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   111be:	4770      	bx	lr

000111c0 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
   111c0:	b480      	push	{r7}
   111c2:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
   111c4:	f24c 431c 	movw	r3, #50204	; 0xc41c
   111c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111cc:	781b      	ldrb	r3, [r3, #0]
   111ce:	2b00      	cmp	r3, #0
   111d0:	d10e      	bne.n	111f0 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   111d2:	f242 0312 	movw	r3, #8210	; 0x2012
   111d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111da:	f242 0212 	movw	r2, #8210	; 0x2012
   111de:	f2c2 0200 	movt	r2, #8192	; 0x2000
   111e2:	7812      	ldrb	r2, [r2, #0]
   111e4:	b2d2      	uxtb	r2, r2
   111e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   111ea:	b2d2      	uxtb	r2, r2
   111ec:	701a      	strb	r2, [r3, #0]
   111ee:	e047      	b.n	11280 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
   111f0:	f24c 431c 	movw	r3, #50204	; 0xc41c
   111f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111f8:	781b      	ldrb	r3, [r3, #0]
   111fa:	2b08      	cmp	r3, #8
   111fc:	d832      	bhi.n	11264 <__vector_5+0xa4>
    if (tx_byte & 0x01)
   111fe:	f24c 431b 	movw	r3, #50203	; 0xc41b
   11202:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11206:	781b      	ldrb	r3, [r3, #0]
   11208:	f003 0301 	and.w	r3, r3, #1
   1120c:	2b00      	cmp	r3, #0
   1120e:	d00e      	beq.n	1122e <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   11210:	f242 0312 	movw	r3, #8210	; 0x2012
   11214:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11218:	f242 0212 	movw	r2, #8210	; 0x2012
   1121c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11220:	7812      	ldrb	r2, [r2, #0]
   11222:	b2d2      	uxtb	r2, r2
   11224:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11228:	b2d2      	uxtb	r2, r2
   1122a:	701a      	strb	r2, [r3, #0]
   1122c:	e00d      	b.n	1124a <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   1122e:	f242 0312 	movw	r3, #8210	; 0x2012
   11232:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11236:	f242 0212 	movw	r2, #8210	; 0x2012
   1123a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1123e:	7812      	ldrb	r2, [r2, #0]
   11240:	b2d2      	uxtb	r2, r2
   11242:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   11246:	b2d2      	uxtb	r2, r2
   11248:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
   1124a:	f24c 431b 	movw	r3, #50203	; 0xc41b
   1124e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11252:	781b      	ldrb	r3, [r3, #0]
   11254:	085b      	lsrs	r3, r3, #1
   11256:	b2da      	uxtb	r2, r3
   11258:	f24c 431b 	movw	r3, #50203	; 0xc41b
   1125c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11260:	701a      	strb	r2, [r3, #0]
   11262:	e00d      	b.n	11280 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
   11264:	f242 0312 	movw	r3, #8210	; 0x2012
   11268:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1126c:	f242 0212 	movw	r2, #8210	; 0x2012
   11270:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11274:	7812      	ldrb	r2, [r2, #0]
   11276:	b2d2      	uxtb	r2, r2
   11278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1127c:	b2d2      	uxtb	r2, r2
   1127e:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
   11280:	f24c 431c 	movw	r3, #50204	; 0xc41c
   11284:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11288:	781b      	ldrb	r3, [r3, #0]
   1128a:	3301      	adds	r3, #1
   1128c:	b2da      	uxtb	r2, r3
   1128e:	f24c 431c 	movw	r3, #50204	; 0xc41c
   11292:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11296:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
   11298:	f24c 431c 	movw	r3, #50204	; 0xc41c
   1129c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112a0:	781b      	ldrb	r3, [r3, #0]
   112a2:	2b09      	cmp	r3, #9
   112a4:	d94d      	bls.n	11342 <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
   112a6:	f24c 3319 	movw	r3, #49945	; 0xc319
   112aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112ae:	781a      	ldrb	r2, [r3, #0]
   112b0:	f24c 331a 	movw	r3, #49946	; 0xc31a
   112b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112b8:	781b      	ldrb	r3, [r3, #0]
   112ba:	b2db      	uxtb	r3, r3
   112bc:	429a      	cmp	r2, r3
   112be:	d10e      	bne.n	112de <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
   112c0:	f242 0339 	movw	r3, #8249	; 0x2039
   112c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112c8:	f242 0239 	movw	r2, #8249	; 0x2039
   112cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   112d0:	7812      	ldrb	r2, [r2, #0]
   112d2:	b2d2      	uxtb	r2, r2
   112d4:	f022 0210 	bic.w	r2, r2, #16
   112d8:	b2d2      	uxtb	r2, r2
   112da:	701a      	strb	r2, [r3, #0]
   112dc:	e031      	b.n	11342 <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
   112de:	f24c 331a 	movw	r3, #49946	; 0xc31a
   112e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112e6:	781b      	ldrb	r3, [r3, #0]
   112e8:	b2db      	uxtb	r3, r3
   112ea:	461a      	mov	r2, r3
   112ec:	f24c 331c 	movw	r3, #49948	; 0xc31c
   112f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112f4:	5c9a      	ldrb	r2, [r3, r2]
   112f6:	f24c 431b 	movw	r3, #50203	; 0xc41b
   112fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   112fe:	701a      	strb	r2, [r3, #0]
   11300:	f24c 431c 	movw	r3, #50204	; 0xc41c
   11304:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11308:	2200      	movs	r2, #0
   1130a:	701a      	strb	r2, [r3, #0]
   1130c:	f24c 331a 	movw	r3, #49946	; 0xc31a
   11310:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11314:	781b      	ldrb	r3, [r3, #0]
   11316:	b2db      	uxtb	r3, r3
   11318:	3301      	adds	r3, #1
   1131a:	b2da      	uxtb	r2, r3
   1131c:	f24c 331a 	movw	r3, #49946	; 0xc31a
   11320:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11324:	701a      	strb	r2, [r3, #0]
   11326:	f24c 331a 	movw	r3, #49946	; 0xc31a
   1132a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1132e:	781b      	ldrb	r3, [r3, #0]
   11330:	b2db      	uxtb	r3, r3
   11332:	2bff      	cmp	r3, #255	; 0xff
   11334:	d105      	bne.n	11342 <__vector_5+0x182>
   11336:	f24c 331a 	movw	r3, #49946	; 0xc31a
   1133a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1133e:	2200      	movs	r2, #0
   11340:	701a      	strb	r2, [r3, #0]
    }
  }
}
   11342:	46bd      	mov	sp, r7
   11344:	f85d 7b04 	ldr.w	r7, [sp], #4
   11348:	4770      	bx	lr
   1134a:	bf00      	nop

0001134c <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
   1134c:	b480      	push	{r7}
   1134e:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
   11350:	f24c 434f 	movw	r3, #50255	; 0xc44f
   11354:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11358:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
   1135a:	f240 533e 	movw	r3, #1342	; 0x53e
   1135e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11362:	2200      	movs	r2, #0
   11364:	701a      	strb	r2, [r3, #0]
}
   11366:	46bd      	mov	sp, r7
   11368:	f85d 7b04 	ldr.w	r7, [sp], #4
   1136c:	4770      	bx	lr
   1136e:	bf00      	nop

00011370 <link_fbw_send>:

void link_fbw_send(void) {
   11370:	b480      	push	{r7}
   11372:	b083      	sub	sp, #12
   11374:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
   11376:	f24c 4354 	movw	r3, #50260	; 0xc454
   1137a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1137e:	781b      	ldrb	r3, [r3, #0]
   11380:	b2db      	uxtb	r3, r3
   11382:	2b00      	cmp	r3, #0
   11384:	d00c      	beq.n	113a0 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
   11386:	f24c 4355 	movw	r3, #50261	; 0xc455
   1138a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1138e:	781b      	ldrb	r3, [r3, #0]
   11390:	3301      	adds	r3, #1
   11392:	b2da      	uxtb	r2, r3
   11394:	f24c 4355 	movw	r3, #50261	; 0xc455
   11398:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1139c:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
   1139e:	e064      	b.n	1146a <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
   113a0:	f242 030d 	movw	r3, #8205	; 0x200d
   113a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113a8:	2251      	movs	r2, #81	; 0x51
   113aa:	701a      	strb	r2, [r3, #0]
   113ac:	f242 030e 	movw	r3, #8206	; 0x200e
   113b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113b4:	781b      	ldrb	r3, [r3, #0]
   113b6:	b2db      	uxtb	r3, r3
   113b8:	b2db      	uxtb	r3, r3
   113ba:	b25b      	sxtb	r3, r3
   113bc:	2b00      	cmp	r3, #0
   113be:	da05      	bge.n	113cc <link_fbw_send+0x5c>
   113c0:	f242 030f 	movw	r3, #8207	; 0x200f
   113c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113c8:	781b      	ldrb	r3, [r3, #0]
   113ca:	71fb      	strb	r3, [r7, #7]
   113cc:	f242 030d 	movw	r3, #8205	; 0x200d
   113d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113d4:	f242 020d 	movw	r2, #8205	; 0x200d
   113d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   113dc:	7812      	ldrb	r2, [r2, #0]
   113de:	b2d2      	uxtb	r2, r2
   113e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
   113e4:	b2d2      	uxtb	r2, r2
   113e6:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
   113e8:	f24c 4354 	movw	r3, #50260	; 0xc454
   113ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113f0:	2201      	movs	r2, #1
   113f2:	701a      	strb	r2, [r3, #0]
   113f4:	f242 0318 	movw	r3, #8216	; 0x2018
   113f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113fc:	f242 0218 	movw	r2, #8216	; 0x2018
   11400:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11404:	7812      	ldrb	r2, [r2, #0]
   11406:	b2d2      	uxtb	r2, r2
   11408:	f022 0201 	bic.w	r2, r2, #1
   1140c:	b2d2      	uxtb	r2, r2
   1140e:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
   11410:	f24c 4351 	movw	r3, #50257	; 0xc451
   11414:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11418:	2200      	movs	r2, #0
   1141a:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
   1141c:	f24c 4352 	movw	r3, #50258	; 0xc452
   11420:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11424:	2200      	movs	r2, #0
   11426:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
   11428:	f24c 4351 	movw	r3, #50257	; 0xc451
   1142c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11430:	781b      	ldrb	r3, [r3, #0]
   11432:	461a      	mov	r2, r3
   11434:	f24c 4338 	movw	r3, #50232	; 0xc438
   11438:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1143c:	4413      	add	r3, r2
   1143e:	781a      	ldrb	r2, [r3, #0]
   11440:	f24c 4353 	movw	r3, #50259	; 0xc453
   11444:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11448:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
   1144a:	f242 030f 	movw	r3, #8207	; 0x200f
   1144e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11452:	f24c 4253 	movw	r2, #50259	; 0xc453
   11456:	f2c2 0204 	movt	r2, #8196	; 0x2004
   1145a:	7812      	ldrb	r2, [r2, #0]
   1145c:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
   1145e:	f24c 434e 	movw	r3, #50254	; 0xc44e
   11462:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11466:	2200      	movs	r2, #0
   11468:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
   1146a:	370c      	adds	r7, #12
   1146c:	46bd      	mov	sp, r7
   1146e:	f85d 7b04 	ldr.w	r7, [sp], #4
   11472:	4770      	bx	lr

00011474 <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
   11474:	b480      	push	{r7}
   11476:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
   11478:	f242 032a 	movw	r3, #8234	; 0x202a
   1147c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11480:	f242 022c 	movw	r2, #8236	; 0x202c
   11484:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11488:	8812      	ldrh	r2, [r2, #0]
   1148a:	b292      	uxth	r2, r2
   1148c:	32c8      	adds	r2, #200	; 0xc8
   1148e:	b292      	uxth	r2, r2
   11490:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
   11492:	f242 0336 	movw	r3, #8246	; 0x2036
   11496:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1149a:	f242 0236 	movw	r2, #8246	; 0x2036
   1149e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   114a2:	7812      	ldrb	r2, [r2, #0]
   114a4:	b2d2      	uxtb	r2, r2
   114a6:	f042 0210 	orr.w	r2, r2, #16
   114aa:	b2d2      	uxtb	r2, r2
   114ac:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
   114ae:	f242 0337 	movw	r3, #8247	; 0x2037
   114b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114b6:	f242 0237 	movw	r2, #8247	; 0x2037
   114ba:	f2c2 0200 	movt	r2, #8192	; 0x2000
   114be:	7812      	ldrb	r2, [r2, #0]
   114c0:	b2d2      	uxtb	r2, r2
   114c2:	f042 0210 	orr.w	r2, r2, #16
   114c6:	b2d2      	uxtb	r2, r2
   114c8:	701a      	strb	r2, [r3, #0]
}
   114ca:	46bd      	mov	sp, r7
   114cc:	f85d 7b04 	ldr.w	r7, [sp], #4
   114d0:	4770      	bx	lr
   114d2:	bf00      	nop

000114d4 <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
   114d4:	b480      	push	{r7}
   114d6:	b083      	sub	sp, #12
   114d8:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
   114da:	f242 0337 	movw	r3, #8247	; 0x2037
   114de:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114e2:	f242 0237 	movw	r2, #8247	; 0x2037
   114e6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   114ea:	7812      	ldrb	r2, [r2, #0]
   114ec:	b2d2      	uxtb	r2, r2
   114ee:	f022 0210 	bic.w	r2, r2, #16
   114f2:	b2d2      	uxtb	r2, r2
   114f4:	701a      	strb	r2, [r3, #0]

  idx_buf++;
   114f6:	f24c 4351 	movw	r3, #50257	; 0xc451
   114fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114fe:	781b      	ldrb	r3, [r3, #0]
   11500:	3301      	adds	r3, #1
   11502:	b2da      	uxtb	r2, r3
   11504:	f24c 4351 	movw	r3, #50257	; 0xc451
   11508:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1150c:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
   1150e:	f24c 4351 	movw	r3, #50257	; 0xc451
   11512:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11516:	781b      	ldrb	r3, [r3, #0]
   11518:	2b17      	cmp	r3, #23
   1151a:	d162      	bne.n	115e2 <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
   1151c:	f242 030f 	movw	r3, #8207	; 0x200f
   11520:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11524:	781b      	ldrb	r3, [r3, #0]
   11526:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
   11528:	f24c 4352 	movw	r3, #50258	; 0xc452
   1152c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11530:	781b      	ldrb	r3, [r3, #0]
   11532:	79fa      	ldrb	r2, [r7, #7]
   11534:	429a      	cmp	r2, r3
   11536:	d110      	bne.n	1155a <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
   11538:	f24c 434e 	movw	r3, #50254	; 0xc44e
   1153c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11540:	2201      	movs	r2, #1
   11542:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
   11544:	f24c 4320 	movw	r3, #50208	; 0xc420
   11548:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1154c:	7d1a      	ldrb	r2, [r3, #20]
   1154e:	f24c 4350 	movw	r3, #50256	; 0xc450
   11552:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11556:	701a      	strb	r2, [r3, #0]
   11558:	e00c      	b.n	11574 <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
   1155a:	f24c 434f 	movw	r3, #50255	; 0xc44f
   1155e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11562:	781b      	ldrb	r3, [r3, #0]
   11564:	b2db      	uxtb	r3, r3
   11566:	3301      	adds	r3, #1
   11568:	b2da      	uxtb	r2, r3
   1156a:	f24c 434f 	movw	r3, #50255	; 0xc44f
   1156e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11572:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
   11574:	f240 533e 	movw	r3, #1342	; 0x53e
   11578:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1157c:	2201      	movs	r2, #1
   1157e:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
   11580:	f24c 4354 	movw	r3, #50260	; 0xc454
   11584:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11588:	2200      	movs	r2, #0
   1158a:	701a      	strb	r2, [r3, #0]
   1158c:	f242 0318 	movw	r3, #8216	; 0x2018
   11590:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11594:	f242 0218 	movw	r2, #8216	; 0x2018
   11598:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1159c:	7812      	ldrb	r2, [r2, #0]
   1159e:	b2d2      	uxtb	r2, r2
   115a0:	f042 0201 	orr.w	r2, r2, #1
   115a4:	b2d2      	uxtb	r2, r2
   115a6:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
   115a8:	f242 030d 	movw	r3, #8205	; 0x200d
   115ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115b0:	f242 020d 	movw	r2, #8205	; 0x200d
   115b4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   115b8:	7812      	ldrb	r2, [r2, #0]
   115ba:	b2d2      	uxtb	r2, r2
   115bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   115c0:	b2d2      	uxtb	r2, r2
   115c2:	701a      	strb	r2, [r3, #0]
   115c4:	f242 030d 	movw	r3, #8205	; 0x200d
   115c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115cc:	f242 020d 	movw	r2, #8205	; 0x200d
   115d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   115d4:	7812      	ldrb	r2, [r2, #0]
   115d6:	b2d2      	uxtb	r2, r2
   115d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   115dc:	b2d2      	uxtb	r2, r2
   115de:	701a      	strb	r2, [r3, #0]
    return;
   115e0:	e051      	b.n	11686 <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
   115e2:	f24c 4351 	movw	r3, #50257	; 0xc451
   115e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115ea:	781b      	ldrb	r3, [r3, #0]
   115ec:	2b15      	cmp	r3, #21
   115ee:	d820      	bhi.n	11632 <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
   115f0:	f24c 4351 	movw	r3, #50257	; 0xc451
   115f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115f8:	781b      	ldrb	r3, [r3, #0]
   115fa:	461a      	mov	r2, r3
   115fc:	f24c 4338 	movw	r3, #50232	; 0xc438
   11600:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11604:	4413      	add	r3, r2
   11606:	781b      	ldrb	r3, [r3, #0]
   11608:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
   1160a:	f242 030f 	movw	r3, #8207	; 0x200f
   1160e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11612:	79fa      	ldrb	r2, [r7, #7]
   11614:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
   11616:	f24c 4353 	movw	r3, #50259	; 0xc453
   1161a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1161e:	781a      	ldrb	r2, [r3, #0]
   11620:	79fb      	ldrb	r3, [r7, #7]
   11622:	4053      	eors	r3, r2
   11624:	b2da      	uxtb	r2, r3
   11626:	f24c 4353 	movw	r3, #50259	; 0xc453
   1162a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1162e:	701a      	strb	r2, [r3, #0]
   11630:	e009      	b.n	11646 <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
   11632:	f242 030f 	movw	r3, #8207	; 0x200f
   11636:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1163a:	f24c 4253 	movw	r2, #50259	; 0xc453
   1163e:	f2c2 0204 	movt	r2, #8196	; 0x2004
   11642:	7812      	ldrb	r2, [r2, #0]
   11644:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
   11646:	f242 030f 	movw	r3, #8207	; 0x200f
   1164a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1164e:	781b      	ldrb	r3, [r3, #0]
   11650:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
   11652:	f24c 4351 	movw	r3, #50257	; 0xc451
   11656:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1165a:	781b      	ldrb	r3, [r3, #0]
   1165c:	1e5a      	subs	r2, r3, #1
   1165e:	f24c 4320 	movw	r3, #50208	; 0xc420
   11662:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11666:	4413      	add	r3, r2
   11668:	79fa      	ldrb	r2, [r7, #7]
   1166a:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
   1166c:	f24c 4352 	movw	r3, #50258	; 0xc452
   11670:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11674:	781a      	ldrb	r2, [r3, #0]
   11676:	79fb      	ldrb	r3, [r7, #7]
   11678:	4053      	eors	r3, r2
   1167a:	b2da      	uxtb	r2, r3
   1167c:	f24c 4352 	movw	r3, #50258	; 0xc452
   11680:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11684:	701a      	strb	r2, [r3, #0]
}
   11686:	370c      	adds	r7, #12
   11688:	46bd      	mov	sp, r7
   1168a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1168e:	4770      	bx	lr

00011690 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
   11690:	b480      	push	{r7}
   11692:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
   11694:	f242 0317 	movw	r3, #8215	; 0x2017
   11698:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1169c:	f242 0217 	movw	r2, #8215	; 0x2017
   116a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   116a4:	7812      	ldrb	r2, [r2, #0]
   116a6:	b2d2      	uxtb	r2, r2
   116a8:	f042 0206 	orr.w	r2, r2, #6
   116ac:	b2d2      	uxtb	r2, r2
   116ae:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
   116b0:	f242 0317 	movw	r3, #8215	; 0x2017
   116b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116b8:	f242 0217 	movw	r2, #8215	; 0x2017
   116bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   116c0:	7812      	ldrb	r2, [r2, #0]
   116c2:	b2d2      	uxtb	r2, r2
   116c4:	f042 0201 	orr.w	r2, r2, #1
   116c8:	b2d2      	uxtb	r2, r2
   116ca:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
   116cc:	f24c 4354 	movw	r3, #50260	; 0xc454
   116d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   116d4:	2200      	movs	r2, #0
   116d6:	701a      	strb	r2, [r3, #0]
   116d8:	f242 0318 	movw	r3, #8216	; 0x2018
   116dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116e0:	f242 0218 	movw	r2, #8216	; 0x2018
   116e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   116e8:	7812      	ldrb	r2, [r2, #0]
   116ea:	b2d2      	uxtb	r2, r2
   116ec:	f042 0201 	orr.w	r2, r2, #1
   116f0:	b2d2      	uxtb	r2, r2
   116f2:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
   116f4:	f242 0302 	movw	r3, #8194	; 0x2002
   116f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116fc:	f242 0202 	movw	r2, #8194	; 0x2002
   11700:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11704:	7812      	ldrb	r2, [r2, #0]
   11706:	b2d2      	uxtb	r2, r2
   11708:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1170c:	b2d2      	uxtb	r2, r2
   1170e:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
   11710:	f24c 4354 	movw	r3, #50260	; 0xc454
   11714:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11718:	2200      	movs	r2, #0
   1171a:	701a      	strb	r2, [r3, #0]
   1171c:	f242 0303 	movw	r3, #8195	; 0x2003
   11720:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11724:	f242 0203 	movw	r2, #8195	; 0x2003
   11728:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1172c:	7812      	ldrb	r2, [r2, #0]
   1172e:	b2d2      	uxtb	r2, r2
   11730:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11734:	b2d2      	uxtb	r2, r2
   11736:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
   11738:	f24c 4354 	movw	r3, #50260	; 0xc454
   1173c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11740:	2200      	movs	r2, #0
   11742:	701a      	strb	r2, [r3, #0]
}
   11744:	46bd      	mov	sp, r7
   11746:	f85d 7b04 	ldr.w	r7, [sp], #4
   1174a:	4770      	bx	lr

0001174c <__vector_17>:


SIGNAL(SIG_SPI) {
   1174c:	b580      	push	{r7, lr}
   1174e:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
   11750:	f24c 4354 	movw	r3, #50260	; 0xc454
   11754:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11758:	781b      	ldrb	r3, [r3, #0]
   1175a:	b2db      	uxtb	r3, r3
   1175c:	2b01      	cmp	r3, #1
   1175e:	d102      	bne.n	11766 <__vector_17+0x1a>
    link_fbw_on_spi_it();
   11760:	f7ff fe88 	bl	11474 <link_fbw_on_spi_it>
   11764:	e00b      	b.n	1177e <__vector_17+0x32>
  else
    fatal_error_nb++;
   11766:	f24c 23f8 	movw	r3, #49912	; 0xc2f8
   1176a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1176e:	781b      	ldrb	r3, [r3, #0]
   11770:	3301      	adds	r3, #1
   11772:	b2da      	uxtb	r2, r3
   11774:	f24c 23f8 	movw	r3, #49912	; 0xc2f8
   11778:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1177c:	701a      	strb	r2, [r3, #0]
}
   1177e:	bd80      	pop	{r7, pc}

00011780 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
   11780:	b480      	push	{r7}
   11782:	b083      	sub	sp, #12
   11784:	af00      	add	r7, sp, #0
   11786:	4603      	mov	r3, r0
   11788:	6039      	str	r1, [r7, #0]
   1178a:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   1178c:	79fa      	ldrb	r2, [r7, #7]
   1178e:	f24c 4368 	movw	r3, #50280	; 0xc468
   11792:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11796:	6839      	ldr	r1, [r7, #0]
   11798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   1179c:	370c      	adds	r7, #12
   1179e:	46bd      	mov	sp, r7
   117a0:	f85d 7b04 	ldr.w	r7, [sp], #4
   117a4:	4770      	bx	lr
   117a6:	bf00      	nop

000117a8 <adc_init>:

void 
adc_init( void )
{
   117a8:	b480      	push	{r7}
   117aa:	b083      	sub	sp, #12
   117ac:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   117ae:	f242 0362 	movw	r3, #8290	; 0x2062
   117b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117b6:	2200      	movs	r2, #0
   117b8:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   117ba:	f242 0361 	movw	r3, #8289	; 0x2061
   117be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117c2:	2200      	movs	r2, #0
   117c4:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
   117c6:	f242 0307 	movw	r3, #8199	; 0x2007
   117ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117ce:	2240      	movs	r2, #64	; 0x40
   117d0:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
   117d2:	f242 0308 	movw	r3, #8200	; 0x2008
   117d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117da:	f242 0208 	movw	r2, #8200	; 0x2008
   117de:	f2c2 0200 	movt	r2, #8192	; 0x2000
   117e2:	7812      	ldrb	r2, [r2, #0]
   117e4:	b2d2      	uxtb	r2, r2
   117e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
   117ea:	b2d2      	uxtb	r2, r2
   117ec:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
   117ee:	f242 0306 	movw	r3, #8198	; 0x2006
   117f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   117f6:	22cf      	movs	r2, #207	; 0xcf
   117f8:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   117fa:	2300      	movs	r3, #0
   117fc:	71fb      	strb	r3, [r7, #7]
   117fe:	e00a      	b.n	11816 <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
   11800:	79fa      	ldrb	r2, [r7, #7]
   11802:	f24c 4368 	movw	r3, #50280	; 0xc468
   11806:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1180a:	2100      	movs	r1, #0
   1180c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   11810:	79fb      	ldrb	r3, [r7, #7]
   11812:	3301      	adds	r3, #1
   11814:	71fb      	strb	r3, [r7, #7]
   11816:	79fb      	ldrb	r3, [r7, #7]
   11818:	2b07      	cmp	r3, #7
   1181a:	d9f1      	bls.n	11800 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
   1181c:	370c      	adds	r7, #12
   1181e:	46bd      	mov	sp, r7
   11820:	f85d 7b04 	ldr.w	r7, [sp], #4
   11824:	4770      	bx	lr
   11826:	bf00      	nop

00011828 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
   11828:	b480      	push	{r7}
   1182a:	b085      	sub	sp, #20
   1182c:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
   1182e:	f242 0307 	movw	r3, #8199	; 0x2007
   11832:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11836:	781b      	ldrb	r3, [r3, #0]
   11838:	b2db      	uxtb	r3, r3
   1183a:	f003 0307 	and.w	r3, r3, #7
   1183e:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
   11840:	7bfa      	ldrb	r2, [r7, #15]
   11842:	f24c 4368 	movw	r3, #50280	; 0xc468
   11846:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1184a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1184e:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
   11850:	f242 0304 	movw	r3, #8196	; 0x2004
   11854:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11858:	881b      	ldrh	r3, [r3, #0]
   1185a:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
   1185c:	7bfa      	ldrb	r2, [r7, #15]
   1185e:	f24c 4358 	movw	r3, #50264	; 0xc458
   11862:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11866:	88f9      	ldrh	r1, [r7, #6]
   11868:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
   1186c:	68bb      	ldr	r3, [r7, #8]
   1186e:	2b00      	cmp	r3, #0
   11870:	d025      	beq.n	118be <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
   11872:	68bb      	ldr	r3, [r7, #8]
   11874:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   11878:	3301      	adds	r3, #1
   1187a:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
   1187c:	7bbb      	ldrb	r3, [r7, #14]
   1187e:	2b1f      	cmp	r3, #31
   11880:	d901      	bls.n	11886 <__vector_21+0x5e>
   11882:	2300      	movs	r3, #0
   11884:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
   11886:	68bb      	ldr	r3, [r7, #8]
   11888:	881a      	ldrh	r2, [r3, #0]
   1188a:	7bbb      	ldrb	r3, [r7, #14]
   1188c:	68b9      	ldr	r1, [r7, #8]
   1188e:	005b      	lsls	r3, r3, #1
   11890:	440b      	add	r3, r1
   11892:	885b      	ldrh	r3, [r3, #2]
   11894:	1ad3      	subs	r3, r2, r3
   11896:	b29a      	uxth	r2, r3
   11898:	68bb      	ldr	r3, [r7, #8]
   1189a:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
   1189c:	7bbb      	ldrb	r3, [r7, #14]
   1189e:	68ba      	ldr	r2, [r7, #8]
   118a0:	005b      	lsls	r3, r3, #1
   118a2:	4413      	add	r3, r2
   118a4:	88fa      	ldrh	r2, [r7, #6]
   118a6:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
   118a8:	68bb      	ldr	r3, [r7, #8]
   118aa:	881a      	ldrh	r2, [r3, #0]
   118ac:	88fb      	ldrh	r3, [r7, #6]
   118ae:	4413      	add	r3, r2
   118b0:	b29a      	uxth	r2, r3
   118b2:	68bb      	ldr	r3, [r7, #8]
   118b4:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
   118b6:	68bb      	ldr	r3, [r7, #8]
   118b8:	7bba      	ldrb	r2, [r7, #14]
   118ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
   118be:	7bfb      	ldrb	r3, [r7, #15]
   118c0:	3301      	adds	r3, #1
   118c2:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
   118c4:	7bfb      	ldrb	r3, [r7, #15]
   118c6:	2b07      	cmp	r3, #7
   118c8:	d901      	bls.n	118ce <__vector_21+0xa6>
    adc_input = 0;
   118ca:	2300      	movs	r3, #0
   118cc:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
   118ce:	f242 0307 	movw	r3, #8199	; 0x2007
   118d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118d6:	7bfa      	ldrb	r2, [r7, #15]
   118d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   118dc:	b2d2      	uxtb	r2, r2
   118de:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
   118e0:	f242 0306 	movw	r3, #8198	; 0x2006
   118e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   118e8:	f242 0206 	movw	r2, #8198	; 0x2006
   118ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
   118f0:	7812      	ldrb	r2, [r2, #0]
   118f2:	b2d2      	uxtb	r2, r2
   118f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   118f8:	b2d2      	uxtb	r2, r2
   118fa:	701a      	strb	r2, [r3, #0]
  
}
   118fc:	3714      	adds	r7, #20
   118fe:	46bd      	mov	sp, r7
   11900:	f85d 7b04 	ldr.w	r7, [sp], #4
   11904:	4770      	bx	lr
   11906:	bf00      	nop

00011908 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
   11908:	b580      	push	{r7, lr}
   1190a:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
   1190c:	f003 fca8 	bl	15260 <uart1_init>
#endif
  ubx_status = UNINIT;
   11910:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11914:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11918:	2200      	movs	r2, #0
   1191a:	701a      	strb	r2, [r3, #0]
}
   1191c:	bd80      	pop	{r7, pc}
   1191e:	bf00      	nop

00011920 <parse_gps_msg>:

void parse_gps_msg( void ) {
   11920:	b580      	push	{r7, lr}
   11922:	af00      	add	r7, sp, #0
    ubx_class = 1;
    ubx_id = (ubx_id + 1)%0x40;
    */
    //end

  if (ubx_class == UBX_NAV_ID) {
   11924:	f24c 53b6 	movw	r3, #50614	; 0xc5b6
   11928:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1192c:	781b      	ldrb	r3, [r3, #0]
   1192e:	2b01      	cmp	r3, #1
   11930:	f040 80f9 	bne.w	11b26 <parse_gps_msg+0x206>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
   11934:	f24c 53b5 	movw	r3, #50613	; 0xc5b5
   11938:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1193c:	781b      	ldrb	r3, [r3, #0]
   1193e:	2b08      	cmp	r3, #8
   11940:	d128      	bne.n	11994 <parse_gps_msg+0x74>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
   11942:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   11946:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1194a:	685a      	ldr	r2, [r3, #4]
   1194c:	f24c 439c 	movw	r3, #50332	; 0xc49c
   11950:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11954:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
   11956:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   1195a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1195e:	689a      	ldr	r2, [r3, #8]
   11960:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   11964:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11968:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
   1196a:	4b73      	ldr	r3, [pc, #460]	; (11b38 <parse_gps_msg+0x218>)
   1196c:	681b      	ldr	r3, [r3, #0]
   1196e:	4618      	mov	r0, r3
   11970:	f006 fdcc 	bl	1850c <__aeabi_i2f>
   11974:	4603      	mov	r3, r0
   11976:	4618      	mov	r0, r3
   11978:	f04f 0100 	mov.w	r1, #0
   1197c:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11980:	f006 fecc 	bl	1871c <__aeabi_fdiv>
   11984:	4603      	mov	r3, r0
   11986:	461a      	mov	r2, r3
   11988:	f24c 438c 	movw	r3, #50316	; 0xc48c
   1198c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11990:	601a      	str	r2, [r3, #0]
   11992:	e0c8      	b.n	11b26 <parse_gps_msg+0x206>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
   11994:	f24c 53b5 	movw	r3, #50613	; 0xc5b5
   11998:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1199c:	781b      	ldrb	r3, [r3, #0]
   1199e:	2b03      	cmp	r3, #3
   119a0:	d10a      	bne.n	119b8 <parse_gps_msg+0x98>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
   119a2:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   119a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119aa:	791a      	ldrb	r2, [r3, #4]
   119ac:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   119b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119b4:	701a      	strb	r2, [r3, #0]
   119b6:	e0b6      	b.n	11b26 <parse_gps_msg+0x206>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
   119b8:	f24c 53b5 	movw	r3, #50613	; 0xc5b5
   119bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119c0:	781b      	ldrb	r3, [r3, #0]
   119c2:	2b12      	cmp	r3, #18
   119c4:	f040 80af 	bne.w	11b26 <parse_gps_msg+0x206>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
   119c8:	4b5c      	ldr	r3, [pc, #368]	; (11b3c <parse_gps_msg+0x21c>)
   119ca:	681b      	ldr	r3, [r3, #0]
   119cc:	4618      	mov	r0, r3
   119ce:	f006 fd99 	bl	18504 <__aeabi_ui2f>
   119d2:	4603      	mov	r3, r0
   119d4:	4618      	mov	r0, r3
   119d6:	f04f 0100 	mov.w	r1, #0
   119da:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   119de:	f006 fe9d 	bl	1871c <__aeabi_fdiv>
   119e2:	4603      	mov	r3, r0
   119e4:	461a      	mov	r2, r3
   119e6:	f24c 4390 	movw	r3, #50320	; 0xc490
   119ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119ee:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
   119f0:	4b51      	ldr	r3, [pc, #324]	; (11b38 <parse_gps_msg+0x218>)
   119f2:	681b      	ldr	r3, [r3, #0]
   119f4:	4618      	mov	r0, r3
   119f6:	f006 fd89 	bl	1850c <__aeabi_i2f>
   119fa:	4603      	mov	r3, r0
   119fc:	4618      	mov	r0, r3
   119fe:	f04f 0100 	mov.w	r1, #0
   11a02:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   11a06:	f006 fe89 	bl	1871c <__aeabi_fdiv>
   11a0a:	4603      	mov	r3, r0
   11a0c:	461a      	mov	r2, r3
   11a0e:	f24c 4394 	movw	r3, #50324	; 0xc494
   11a12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a16:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
   11a18:	4b49      	ldr	r3, [pc, #292]	; (11b40 <parse_gps_msg+0x220>)
   11a1a:	681b      	ldr	r3, [r3, #0]
   11a1c:	4618      	mov	r0, r3
   11a1e:	f006 fd75 	bl	1850c <__aeabi_i2f>
   11a22:	4603      	mov	r3, r0
   11a24:	4618      	mov	r0, r3
   11a26:	f006 f931 	bl	17c8c <__aeabi_f2d>
   11a2a:	4602      	mov	r2, r0
   11a2c:	460b      	mov	r3, r1
   11a2e:	4610      	mov	r0, r2
   11a30:	4619      	mov	r1, r3
   11a32:	a33d      	add	r3, pc, #244	; (adr r3, 11b28 <parse_gps_msg+0x208>)
   11a34:	e9d3 2300 	ldrd	r2, r3, [r3]
   11a38:	f006 faa6 	bl	17f88 <__aeabi_ddiv>
   11a3c:	4602      	mov	r2, r0
   11a3e:	460b      	mov	r3, r1
   11a40:	4610      	mov	r0, r2
   11a42:	4619      	mov	r1, r3
   11a44:	f04f 0200 	mov.w	r2, #0
   11a48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   11a4c:	f2c4 0366 	movt	r3, #16486	; 0x4066
   11a50:	f006 fa9a 	bl	17f88 <__aeabi_ddiv>
   11a54:	4602      	mov	r2, r0
   11a56:	460b      	mov	r3, r1
   11a58:	4610      	mov	r0, r2
   11a5a:	4619      	mov	r1, r3
   11a5c:	a334      	add	r3, pc, #208	; (adr r3, 11b30 <parse_gps_msg+0x210>)
   11a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11a62:	f006 f967 	bl	17d34 <__aeabi_dmul>
   11a66:	4602      	mov	r2, r0
   11a68:	460b      	mov	r3, r1
   11a6a:	4610      	mov	r0, r2
   11a6c:	4619      	mov	r1, r3
   11a6e:	f006 fc43 	bl	182f8 <__aeabi_d2f>
   11a72:	4602      	mov	r2, r0
   11a74:	f24c 4398 	movw	r3, #50328	; 0xc498
   11a78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a7c:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
   11a7e:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   11a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a86:	681b      	ldr	r3, [r3, #0]
   11a88:	4618      	mov	r0, r3
   11a8a:	f006 fd3b 	bl	18504 <__aeabi_ui2f>
   11a8e:	4603      	mov	r3, r0
   11a90:	4618      	mov	r0, r3
   11a92:	f04f 0100 	mov.w	r1, #0
   11a96:	f2c4 417a 	movt	r1, #17530	; 0x447a
   11a9a:	f006 fe3f 	bl	1871c <__aeabi_fdiv>
   11a9e:	4603      	mov	r3, r0
   11aa0:	461a      	mov	r2, r3
   11aa2:	f24c 4388 	movw	r3, #50312	; 0xc488
   11aa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11aaa:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
   11aac:	f24c 439c 	movw	r3, #50332	; 0xc49c
   11ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ab4:	681a      	ldr	r2, [r3, #0]
   11ab6:	f248 531f 	movw	r3, #34079	; 0x851f
   11aba:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   11abe:	fb83 1302 	smull	r1, r3, r3, r2
   11ac2:	1159      	asrs	r1, r3, #5
   11ac4:	17d3      	asrs	r3, r2, #31
   11ac6:	1acb      	subs	r3, r1, r3
   11ac8:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
   11acc:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
   11ad0:	4618      	mov	r0, r3
   11ad2:	f006 fd1b 	bl	1850c <__aeabi_i2f>
   11ad6:	4602      	mov	r2, r0
   11ad8:	f24c 43a4 	movw	r3, #50340	; 0xc4a4
   11adc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ae0:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
   11ae2:	f24c 43a0 	movw	r3, #50336	; 0xc4a0
   11ae6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11aea:	681a      	ldr	r2, [r3, #0]
   11aec:	f248 531f 	movw	r3, #34079	; 0x851f
   11af0:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   11af4:	fb83 1302 	smull	r1, r3, r3, r2
   11af8:	1159      	asrs	r1, r3, #5
   11afa:	17d3      	asrs	r3, r2, #31
   11afc:	1aca      	subs	r2, r1, r3
   11afe:	f648 231a 	movw	r3, #35354	; 0x8a1a
   11b02:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
   11b06:	4413      	add	r3, r2
   11b08:	4618      	mov	r0, r3
   11b0a:	f006 fcff 	bl	1850c <__aeabi_i2f>
   11b0e:	4602      	mov	r2, r0
   11b10:	f24c 43a8 	movw	r3, #50344	; 0xc4a8
   11b14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b18:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
   11b1a:	f24c 43ae 	movw	r3, #50350	; 0xc4ae
   11b1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b22:	2201      	movs	r2, #1
   11b24:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
   11b26:	bd80      	pop	{r7, pc}
   11b28:	00000000 	.word	0x00000000
   11b2c:	40f86a00 	.word	0x40f86a00
   11b30:	5a7ed197 	.word	0x5a7ed197
   11b34:	400921fb 	.word	0x400921fb
   11b38:	2004c4bc 	.word	0x2004c4bc
   11b3c:	2004c4c4 	.word	0x2004c4c4
   11b40:	2004c4c8 	.word	0x2004c4c8

00011b44 <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
   11b44:	b480      	push	{r7}
   11b46:	b083      	sub	sp, #12
   11b48:	af00      	add	r7, sp, #0
   11b4a:	4603      	mov	r3, r0
   11b4c:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
   11b4e:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11b52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b56:	781b      	ldrb	r3, [r3, #0]
   11b58:	2b06      	cmp	r3, #6
   11b5a:	d81d      	bhi.n	11b98 <parse_ubx+0x54>
    ck_a += c;
   11b5c:	f24c 53b3 	movw	r3, #50611	; 0xc5b3
   11b60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b64:	781a      	ldrb	r2, [r3, #0]
   11b66:	79fb      	ldrb	r3, [r7, #7]
   11b68:	4413      	add	r3, r2
   11b6a:	b2da      	uxtb	r2, r3
   11b6c:	f24c 53b3 	movw	r3, #50611	; 0xc5b3
   11b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b74:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
   11b76:	f24c 53b4 	movw	r3, #50612	; 0xc5b4
   11b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b7e:	781a      	ldrb	r2, [r3, #0]
   11b80:	f24c 53b3 	movw	r3, #50611	; 0xc5b3
   11b84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b88:	781b      	ldrb	r3, [r3, #0]
   11b8a:	4413      	add	r3, r2
   11b8c:	b2da      	uxtb	r2, r3
   11b8e:	f24c 53b4 	movw	r3, #50612	; 0xc5b4
   11b92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b96:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
   11b98:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11b9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ba0:	781b      	ldrb	r3, [r3, #0]
   11ba2:	2b00      	cmp	r3, #0
   11ba4:	d110      	bne.n	11bc8 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
   11ba6:	79fb      	ldrb	r3, [r7, #7]
   11ba8:	2bb5      	cmp	r3, #181	; 0xb5
   11baa:	f040 8135 	bne.w	11e18 <parse_ubx+0x2d4>
      ubx_status++;
   11bae:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11bb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bb6:	781b      	ldrb	r3, [r3, #0]
   11bb8:	3301      	adds	r3, #1
   11bba:	b2da      	uxtb	r2, r3
   11bbc:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11bc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bc4:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11bc6:	e12f      	b.n	11e28 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
   11bc8:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11bcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bd0:	781b      	ldrb	r3, [r3, #0]
   11bd2:	2b01      	cmp	r3, #1
   11bd4:	d11c      	bne.n	11c10 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
   11bd6:	79fb      	ldrb	r3, [r7, #7]
   11bd8:	2b62      	cmp	r3, #98	; 0x62
   11bda:	d000      	beq.n	11bde <parse_ubx+0x9a>
      goto error;
   11bdc:	e11d      	b.n	11e1a <parse_ubx+0x2d6>
    ck_a = 0;
   11bde:	f24c 53b3 	movw	r3, #50611	; 0xc5b3
   11be2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11be6:	2200      	movs	r2, #0
   11be8:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
   11bea:	f24c 53b4 	movw	r3, #50612	; 0xc5b4
   11bee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bf2:	2200      	movs	r2, #0
   11bf4:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11bf6:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11bfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bfe:	781b      	ldrb	r3, [r3, #0]
   11c00:	3301      	adds	r3, #1
   11c02:	b2da      	uxtb	r2, r3
   11c04:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c0c:	701a      	strb	r2, [r3, #0]
   11c0e:	e103      	b.n	11e18 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
   11c10:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c18:	781b      	ldrb	r3, [r3, #0]
   11c1a:	2b02      	cmp	r3, #2
   11c1c:	d127      	bne.n	11c6e <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
   11c1e:	f24c 43ad 	movw	r3, #50349	; 0xc4ad
   11c22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c26:	781b      	ldrb	r3, [r3, #0]
   11c28:	b2db      	uxtb	r3, r3
   11c2a:	2b00      	cmp	r3, #0
   11c2c:	d00c      	beq.n	11c48 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
   11c2e:	f24c 53b7 	movw	r3, #50615	; 0xc5b7
   11c32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c36:	781b      	ldrb	r3, [r3, #0]
   11c38:	3301      	adds	r3, #1
   11c3a:	b2da      	uxtb	r2, r3
   11c3c:	f24c 53b7 	movw	r3, #50615	; 0xc5b7
   11c40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c44:	701a      	strb	r2, [r3, #0]
      goto error;
   11c46:	e0e8      	b.n	11e1a <parse_ubx+0x2d6>
    }
    ubx_class = c;
   11c48:	f24c 53b6 	movw	r3, #50614	; 0xc5b6
   11c4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c50:	79fa      	ldrb	r2, [r7, #7]
   11c52:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11c54:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c5c:	781b      	ldrb	r3, [r3, #0]
   11c5e:	3301      	adds	r3, #1
   11c60:	b2da      	uxtb	r2, r3
   11c62:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c6a:	701a      	strb	r2, [r3, #0]
   11c6c:	e0d4      	b.n	11e18 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
   11c6e:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c76:	781b      	ldrb	r3, [r3, #0]
   11c78:	2b03      	cmp	r3, #3
   11c7a:	d112      	bne.n	11ca2 <parse_ubx+0x15e>
  {
    ubx_id = c;
   11c7c:	f24c 53b5 	movw	r3, #50613	; 0xc5b5
   11c80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c84:	79fa      	ldrb	r2, [r7, #7]
   11c86:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11c88:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c90:	781b      	ldrb	r3, [r3, #0]
   11c92:	3301      	adds	r3, #1
   11c94:	b2da      	uxtb	r2, r3
   11c96:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11c9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c9e:	701a      	strb	r2, [r3, #0]
   11ca0:	e0ba      	b.n	11e18 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
   11ca2:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11ca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11caa:	781b      	ldrb	r3, [r3, #0]
   11cac:	2b04      	cmp	r3, #4
   11cae:	d113      	bne.n	11cd8 <parse_ubx+0x194>
  {
    ubx_len = c;
   11cb0:	79fb      	ldrb	r3, [r7, #7]
   11cb2:	b29a      	uxth	r2, r3
   11cb4:	f24c 53b0 	movw	r3, #50608	; 0xc5b0
   11cb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cbc:	801a      	strh	r2, [r3, #0]
    ubx_status++;
   11cbe:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11cc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cc6:	781b      	ldrb	r3, [r3, #0]
   11cc8:	3301      	adds	r3, #1
   11cca:	b2da      	uxtb	r2, r3
   11ccc:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11cd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cd4:	701a      	strb	r2, [r3, #0]
   11cd6:	e09f      	b.n	11e18 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
   11cd8:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11cdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ce0:	781b      	ldrb	r3, [r3, #0]
   11ce2:	2b05      	cmp	r3, #5
   11ce4:	d12b      	bne.n	11d3e <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
   11ce6:	79fb      	ldrb	r3, [r7, #7]
   11ce8:	021b      	lsls	r3, r3, #8
   11cea:	b29a      	uxth	r2, r3
   11cec:	f24c 53b0 	movw	r3, #50608	; 0xc5b0
   11cf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cf4:	881b      	ldrh	r3, [r3, #0]
   11cf6:	b29b      	uxth	r3, r3
   11cf8:	4313      	orrs	r3, r2
   11cfa:	b29b      	uxth	r3, r3
   11cfc:	b29a      	uxth	r2, r3
   11cfe:	f24c 53b0 	movw	r3, #50608	; 0xc5b0
   11d02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d06:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
   11d08:	f24c 53b0 	movw	r3, #50608	; 0xc5b0
   11d0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d10:	881b      	ldrh	r3, [r3, #0]
   11d12:	2bff      	cmp	r3, #255	; 0xff
   11d14:	d900      	bls.n	11d18 <parse_ubx+0x1d4>
      goto error;
   11d16:	e080      	b.n	11e1a <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
   11d18:	f24c 53b2 	movw	r3, #50610	; 0xc5b2
   11d1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d20:	2200      	movs	r2, #0
   11d22:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11d24:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d2c:	781b      	ldrb	r3, [r3, #0]
   11d2e:	3301      	adds	r3, #1
   11d30:	b2da      	uxtb	r2, r3
   11d32:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11d36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d3a:	701a      	strb	r2, [r3, #0]
   11d3c:	e06c      	b.n	11e18 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
   11d3e:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11d42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d46:	781b      	ldrb	r3, [r3, #0]
   11d48:	2b06      	cmp	r3, #6
   11d4a:	d131      	bne.n	11db0 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
   11d4c:	f24c 53b2 	movw	r3, #50610	; 0xc5b2
   11d50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d54:	781b      	ldrb	r3, [r3, #0]
   11d56:	461a      	mov	r2, r3
   11d58:	f24c 43b0 	movw	r3, #50352	; 0xc4b0
   11d5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d60:	79f9      	ldrb	r1, [r7, #7]
   11d62:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
   11d64:	f24c 53b2 	movw	r3, #50610	; 0xc5b2
   11d68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d6c:	781b      	ldrb	r3, [r3, #0]
   11d6e:	3301      	adds	r3, #1
   11d70:	b2da      	uxtb	r2, r3
   11d72:	f24c 53b2 	movw	r3, #50610	; 0xc5b2
   11d76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d7a:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
   11d7c:	f24c 53b2 	movw	r3, #50610	; 0xc5b2
   11d80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d84:	781b      	ldrb	r3, [r3, #0]
   11d86:	461a      	mov	r2, r3
   11d88:	f24c 53b0 	movw	r3, #50608	; 0xc5b0
   11d8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d90:	881b      	ldrh	r3, [r3, #0]
   11d92:	429a      	cmp	r2, r3
   11d94:	d340      	bcc.n	11e18 <parse_ubx+0x2d4>
      ubx_status++;
   11d96:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11d9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d9e:	781b      	ldrb	r3, [r3, #0]
   11da0:	3301      	adds	r3, #1
   11da2:	b2da      	uxtb	r2, r3
   11da4:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11da8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11dac:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11dae:	e03b      	b.n	11e28 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
   11db0:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11db4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11db8:	781b      	ldrb	r3, [r3, #0]
   11dba:	2b07      	cmp	r3, #7
   11dbc:	d115      	bne.n	11dea <parse_ubx+0x2a6>
  {
    if (c != ck_a)
   11dbe:	f24c 53b3 	movw	r3, #50611	; 0xc5b3
   11dc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11dc6:	781b      	ldrb	r3, [r3, #0]
   11dc8:	79fa      	ldrb	r2, [r7, #7]
   11dca:	429a      	cmp	r2, r3
   11dcc:	d000      	beq.n	11dd0 <parse_ubx+0x28c>
      goto error;
   11dce:	e024      	b.n	11e1a <parse_ubx+0x2d6>
    ubx_status++;
   11dd0:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11dd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11dd8:	781b      	ldrb	r3, [r3, #0]
   11dda:	3301      	adds	r3, #1
   11ddc:	b2da      	uxtb	r2, r3
   11dde:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11de2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11de6:	701a      	strb	r2, [r3, #0]
   11de8:	e016      	b.n	11e18 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
   11dea:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11dee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11df2:	781b      	ldrb	r3, [r3, #0]
   11df4:	2b08      	cmp	r3, #8
   11df6:	d10f      	bne.n	11e18 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
   11df8:	f24c 53b4 	movw	r3, #50612	; 0xc5b4
   11dfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e00:	781b      	ldrb	r3, [r3, #0]
   11e02:	79fa      	ldrb	r2, [r7, #7]
   11e04:	429a      	cmp	r2, r3
   11e06:	d000      	beq.n	11e0a <parse_ubx+0x2c6>
      goto error;
   11e08:	e007      	b.n	11e1a <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
   11e0a:	f24c 43ad 	movw	r3, #50349	; 0xc4ad
   11e0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e12:	2201      	movs	r2, #1
   11e14:	701a      	strb	r2, [r3, #0]
    goto restart;
   11e16:	e000      	b.n	11e1a <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
   11e18:	e006      	b.n	11e28 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
   11e1a:	f24c 53af 	movw	r3, #50607	; 0xc5af
   11e1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e22:	2200      	movs	r2, #0
   11e24:	701a      	strb	r2, [r3, #0]
  return;
   11e26:	bf00      	nop
}
   11e28:	370c      	adds	r7, #12
   11e2a:	46bd      	mov	sp, r7
   11e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
   11e30:	4770      	bx	lr
   11e32:	bf00      	nop

00011e34 <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
   11e34:	b580      	push	{r7, lr}
   11e36:	b082      	sub	sp, #8
   11e38:	af00      	add	r7, sp, #0
   11e3a:	f242 039c 	movw	r3, #8348	; 0x209c
   11e3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e42:	781b      	ldrb	r3, [r3, #0]
   11e44:	71fb      	strb	r3, [r7, #7]
   11e46:	79fb      	ldrb	r3, [r7, #7]
   11e48:	4618      	mov	r0, r3
   11e4a:	f7ff fe7b 	bl	11b44 <parse_ubx>
   11e4e:	3708      	adds	r7, #8
   11e50:	46bd      	mov	sp, r7
   11e52:	bd80      	pop	{r7, pc}
   11e54:	f3af 8000 	nop.w

00011e58 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
   11e58:	b580      	push	{r7, lr}
   11e5a:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
   11e5c:	f240 5348 	movw	r3, #1352	; 0x548
   11e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e64:	f24c 228f 	movw	r2, #49807	; 0xc28f
   11e68:	f6c3 3275 	movt	r2, #15221	; 0x3b75
   11e6c:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
   11e6e:	2001      	movs	r0, #1
   11e70:	f24c 51bc 	movw	r1, #50620	; 0xc5bc
   11e74:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11e78:	f7ff fc82 	bl	11780 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
   11e7c:	2002      	movs	r0, #2
   11e7e:	f24c 6100 	movw	r1, #50688	; 0xc600
   11e82:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11e86:	f7ff fc7b 	bl	11780 <adc_buf_channel>
}
   11e8a:	bd80      	pop	{r7, pc}

00011e8c <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
   11e8c:	b480      	push	{r7}
   11e8e:	b083      	sub	sp, #12
   11e90:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
   11e92:	f24c 53bc 	movw	r3, #50620	; 0xc5bc
   11e96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e9a:	881b      	ldrh	r3, [r3, #0]
   11e9c:	095b      	lsrs	r3, r3, #5
   11e9e:	b29b      	uxth	r3, r3
   11ea0:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
   11ea2:	f24c 6300 	movw	r3, #50688	; 0xc600
   11ea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11eaa:	881b      	ldrh	r3, [r3, #0]
   11eac:	095b      	lsrs	r3, r3, #5
   11eae:	b29b      	uxth	r3, r3
   11eb0:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
   11eb2:	88fb      	ldrh	r3, [r7, #6]
   11eb4:	425b      	negs	r3, r3
   11eb6:	b29a      	uxth	r2, r3
   11eb8:	88bb      	ldrh	r3, [r7, #4]
   11eba:	1ad3      	subs	r3, r2, r3
   11ebc:	b29a      	uxth	r2, r3
   11ebe:	f240 5342 	movw	r3, #1346	; 0x542
   11ec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ec6:	881b      	ldrh	r3, [r3, #0]
   11ec8:	b29b      	uxth	r3, r3
   11eca:	1ad3      	subs	r3, r2, r3
   11ecc:	b29b      	uxth	r3, r3
   11ece:	b29a      	uxth	r2, r3
   11ed0:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
   11ed4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ed8:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
   11eda:	88ba      	ldrh	r2, [r7, #4]
   11edc:	88fb      	ldrh	r3, [r7, #6]
   11ede:	1ad3      	subs	r3, r2, r3
   11ee0:	b29a      	uxth	r2, r3
   11ee2:	f240 5344 	movw	r3, #1348	; 0x544
   11ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11eea:	881b      	ldrh	r3, [r3, #0]
   11eec:	b29b      	uxth	r3, r3
   11eee:	1ad3      	subs	r3, r2, r3
   11ef0:	b29b      	uxth	r3, r3
   11ef2:	b29a      	uxth	r2, r3
   11ef4:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
   11ef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11efc:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
   11efe:	370c      	adds	r7, #12
   11f00:	46bd      	mov	sp, r7
   11f02:	f85d 7b04 	ldr.w	r7, [sp], #4
   11f06:	4770      	bx	lr

00011f08 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
   11f08:	b580      	push	{r7, lr}
   11f0a:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
   11f0c:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
   11f10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f14:	881b      	ldrh	r3, [r3, #0]
   11f16:	b29b      	uxth	r3, r3
   11f18:	425b      	negs	r3, r3
   11f1a:	b29b      	uxth	r3, r3
   11f1c:	b29a      	uxth	r2, r3
   11f1e:	f240 5340 	movw	r3, #1344	; 0x540
   11f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f26:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
   11f28:	f240 5340 	movw	r3, #1344	; 0x540
   11f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f30:	881b      	ldrh	r3, [r3, #0]
   11f32:	b21b      	sxth	r3, r3
   11f34:	4618      	mov	r0, r3
   11f36:	f005 fe97 	bl	17c68 <__aeabi_i2d>
   11f3a:	4602      	mov	r2, r0
   11f3c:	460b      	mov	r3, r1
   11f3e:	f04f 0000 	mov.w	r0, #0
   11f42:	f04f 0100 	mov.w	r1, #0
   11f46:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
   11f4a:	f006 f81d 	bl	17f88 <__aeabi_ddiv>
   11f4e:	4602      	mov	r2, r0
   11f50:	460b      	mov	r3, r1
   11f52:	4610      	mov	r0, r2
   11f54:	4619      	mov	r1, r3
   11f56:	f006 f9cf 	bl	182f8 <__aeabi_d2f>
   11f5a:	4602      	mov	r2, r0
   11f5c:	f240 5348 	movw	r3, #1352	; 0x548
   11f60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f64:	601a      	str	r2, [r3, #0]
}
   11f66:	bd80      	pop	{r7, pc}

00011f68 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
   11f68:	b590      	push	{r4, r7, lr}
   11f6a:	b083      	sub	sp, #12
   11f6c:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
   11f6e:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   11f72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f76:	681a      	ldr	r2, [r3, #0]
   11f78:	f24c 6344 	movw	r3, #50756	; 0xc644
   11f7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f80:	681b      	ldr	r3, [r3, #0]
   11f82:	4610      	mov	r0, r2
   11f84:	4619      	mov	r1, r3
   11f86:	f006 fa0b 	bl	183a0 <__aeabi_fsub>
   11f8a:	4603      	mov	r3, r0
   11f8c:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
   11f8e:	f240 534c 	movw	r3, #1356	; 0x54c
   11f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f96:	681b      	ldr	r3, [r3, #0]
   11f98:	4618      	mov	r0, r3
   11f9a:	6879      	ldr	r1, [r7, #4]
   11f9c:	f006 fb0a 	bl	185b4 <__aeabi_fmul>
   11fa0:	4603      	mov	r3, r0
   11fa2:	4618      	mov	r0, r3
   11fa4:	f04f 0100 	mov.w	r1, #0
   11fa8:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11fac:	f006 fca0 	bl	188f0 <__aeabi_fcmplt>
   11fb0:	4603      	mov	r3, r0
   11fb2:	2b00      	cmp	r3, #0
   11fb4:	d002      	beq.n	11fbc <roll_pitch_pid_run+0x54>
   11fb6:	f64d 2280 	movw	r2, #55936	; 0xda80
   11fba:	e026      	b.n	1200a <roll_pitch_pid_run+0xa2>
   11fbc:	f240 534c 	movw	r3, #1356	; 0x54c
   11fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11fc4:	681b      	ldr	r3, [r3, #0]
   11fc6:	4618      	mov	r0, r3
   11fc8:	6879      	ldr	r1, [r7, #4]
   11fca:	f006 faf3 	bl	185b4 <__aeabi_fmul>
   11fce:	4603      	mov	r3, r0
   11fd0:	4618      	mov	r0, r3
   11fd2:	f04f 0100 	mov.w	r1, #0
   11fd6:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11fda:	f006 fca7 	bl	1892c <__aeabi_fcmpgt>
   11fde:	4603      	mov	r3, r0
   11fe0:	2b00      	cmp	r3, #0
   11fe2:	d002      	beq.n	11fea <roll_pitch_pid_run+0x82>
   11fe4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11fe8:	e00e      	b.n	12008 <roll_pitch_pid_run+0xa0>
   11fea:	f240 534c 	movw	r3, #1356	; 0x54c
   11fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ff2:	681b      	ldr	r3, [r3, #0]
   11ff4:	4618      	mov	r0, r3
   11ff6:	6879      	ldr	r1, [r7, #4]
   11ff8:	f006 fadc 	bl	185b4 <__aeabi_fmul>
   11ffc:	4603      	mov	r3, r0
   11ffe:	4618      	mov	r0, r3
   12000:	f006 fc9e 	bl	18940 <__aeabi_f2iz>
   12004:	4603      	mov	r3, r0
   12006:	b29b      	uxth	r3, r3
   12008:	b29a      	uxth	r2, r3
   1200a:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1200e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12012:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
   12014:	f24c 6354 	movw	r3, #50772	; 0xc654
   12018:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1201c:	681b      	ldr	r3, [r3, #0]
   1201e:	4618      	mov	r0, r3
   12020:	f04f 0100 	mov.w	r1, #0
   12024:	f006 fc64 	bl	188f0 <__aeabi_fcmplt>
   12028:	4603      	mov	r3, r0
   1202a:	2b00      	cmp	r3, #0
   1202c:	d006      	beq.n	1203c <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
   1202e:	f24c 6354 	movw	r3, #50772	; 0xc654
   12032:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12036:	f04f 0200 	mov.w	r2, #0
   1203a:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
   1203c:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   12040:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12044:	681a      	ldr	r2, [r3, #0]
   12046:	f24c 6348 	movw	r3, #50760	; 0xc648
   1204a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1204e:	681b      	ldr	r3, [r3, #0]
   12050:	4610      	mov	r0, r2
   12052:	4619      	mov	r1, r3
   12054:	f006 f9a4 	bl	183a0 <__aeabi_fsub>
   12058:	4603      	mov	r3, r0
   1205a:	461c      	mov	r4, r3
   1205c:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   12060:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12064:	681b      	ldr	r3, [r3, #0]
   12066:	4618      	mov	r0, r3
   12068:	f04f 0100 	mov.w	r1, #0
   1206c:	f006 fc40 	bl	188f0 <__aeabi_fcmplt>
   12070:	4603      	mov	r3, r0
   12072:	2b00      	cmp	r3, #0
   12074:	d007      	beq.n	12086 <roll_pitch_pid_run+0x11e>
   12076:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   1207a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1207e:	681b      	ldr	r3, [r3, #0]
   12080:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   12084:	e004      	b.n	12090 <roll_pitch_pid_run+0x128>
   12086:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   1208a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1208e:	681a      	ldr	r2, [r3, #0]
   12090:	f24c 6354 	movw	r3, #50772	; 0xc654
   12094:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12098:	681b      	ldr	r3, [r3, #0]
   1209a:	4610      	mov	r0, r2
   1209c:	4619      	mov	r1, r3
   1209e:	f006 fa89 	bl	185b4 <__aeabi_fmul>
   120a2:	4603      	mov	r3, r0
   120a4:	4620      	mov	r0, r4
   120a6:	4619      	mov	r1, r3
   120a8:	f006 f97a 	bl	183a0 <__aeabi_fsub>
   120ac:	4603      	mov	r3, r0
   120ae:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   120b2:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
   120b4:	f240 5350 	movw	r3, #1360	; 0x550
   120b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120bc:	681b      	ldr	r3, [r3, #0]
   120be:	4618      	mov	r0, r3
   120c0:	6879      	ldr	r1, [r7, #4]
   120c2:	f006 fa77 	bl	185b4 <__aeabi_fmul>
   120c6:	4603      	mov	r3, r0
   120c8:	4618      	mov	r0, r3
   120ca:	f04f 0100 	mov.w	r1, #0
   120ce:	f2cc 6116 	movt	r1, #50710	; 0xc616
   120d2:	f006 fc0d 	bl	188f0 <__aeabi_fcmplt>
   120d6:	4603      	mov	r3, r0
   120d8:	2b00      	cmp	r3, #0
   120da:	d002      	beq.n	120e2 <roll_pitch_pid_run+0x17a>
   120dc:	f64d 2280 	movw	r2, #55936	; 0xda80
   120e0:	e026      	b.n	12130 <roll_pitch_pid_run+0x1c8>
   120e2:	f240 5350 	movw	r3, #1360	; 0x550
   120e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120ea:	681b      	ldr	r3, [r3, #0]
   120ec:	4618      	mov	r0, r3
   120ee:	6879      	ldr	r1, [r7, #4]
   120f0:	f006 fa60 	bl	185b4 <__aeabi_fmul>
   120f4:	4603      	mov	r3, r0
   120f6:	4618      	mov	r0, r3
   120f8:	f04f 0100 	mov.w	r1, #0
   120fc:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12100:	f006 fc14 	bl	1892c <__aeabi_fcmpgt>
   12104:	4603      	mov	r3, r0
   12106:	2b00      	cmp	r3, #0
   12108:	d002      	beq.n	12110 <roll_pitch_pid_run+0x1a8>
   1210a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   1210e:	e00e      	b.n	1212e <roll_pitch_pid_run+0x1c6>
   12110:	f240 5350 	movw	r3, #1360	; 0x550
   12114:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12118:	681b      	ldr	r3, [r3, #0]
   1211a:	4618      	mov	r0, r3
   1211c:	6879      	ldr	r1, [r7, #4]
   1211e:	f006 fa49 	bl	185b4 <__aeabi_fmul>
   12122:	4603      	mov	r3, r0
   12124:	4618      	mov	r0, r3
   12126:	f006 fc0b 	bl	18940 <__aeabi_f2iz>
   1212a:	4603      	mov	r3, r0
   1212c:	b29b      	uxth	r3, r3
   1212e:	b29a      	uxth	r2, r3
   12130:	f24c 6350 	movw	r3, #50768	; 0xc650
   12134:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12138:	801a      	strh	r2, [r3, #0]
}
   1213a:	370c      	adds	r7, #12
   1213c:	46bd      	mov	sp, r7
   1213e:	bd90      	pop	{r4, r7, pc}

00012140 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
   12140:	b580      	push	{r7, lr}
   12142:	b082      	sub	sp, #8
   12144:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
   12146:	f64c 1308 	movw	r3, #51464	; 0xc908
   1214a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1214e:	681a      	ldr	r2, [r3, #0]
   12150:	f24c 635c 	movw	r3, #50780	; 0xc65c
   12154:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12158:	681b      	ldr	r3, [r3, #0]
   1215a:	4610      	mov	r0, r2
   1215c:	4619      	mov	r1, r3
   1215e:	f006 f91f 	bl	183a0 <__aeabi_fsub>
   12162:	4603      	mov	r3, r0
   12164:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
   12166:	e013      	b.n	12190 <course_pid_run+0x50>
   12168:	6878      	ldr	r0, [r7, #4]
   1216a:	f005 fd8f 	bl	17c8c <__aeabi_f2d>
   1216e:	4602      	mov	r2, r0
   12170:	460b      	mov	r3, r1
   12172:	4610      	mov	r0, r2
   12174:	4619      	mov	r1, r3
   12176:	a348      	add	r3, pc, #288	; (adr r3, 12298 <course_pid_run+0x158>)
   12178:	e9d3 2300 	ldrd	r2, r3, [r3]
   1217c:	f005 fc26 	bl	179cc <__aeabi_dsub>
   12180:	4602      	mov	r2, r0
   12182:	460b      	mov	r3, r1
   12184:	4610      	mov	r0, r2
   12186:	4619      	mov	r1, r3
   12188:	f006 f8b6 	bl	182f8 <__aeabi_d2f>
   1218c:	4603      	mov	r3, r0
   1218e:	607b      	str	r3, [r7, #4]
   12190:	6878      	ldr	r0, [r7, #4]
   12192:	f005 fd7b 	bl	17c8c <__aeabi_f2d>
   12196:	4602      	mov	r2, r0
   12198:	460b      	mov	r3, r1
   1219a:	4610      	mov	r0, r2
   1219c:	4619      	mov	r1, r3
   1219e:	a340      	add	r3, pc, #256	; (adr r3, 122a0 <course_pid_run+0x160>)
   121a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   121a4:	f006 f856 	bl	18254 <__aeabi_dcmpgt>
   121a8:	4603      	mov	r3, r0
   121aa:	2b00      	cmp	r3, #0
   121ac:	d1dc      	bne.n	12168 <course_pid_run+0x28>
   121ae:	e013      	b.n	121d8 <course_pid_run+0x98>
   121b0:	6878      	ldr	r0, [r7, #4]
   121b2:	f005 fd6b 	bl	17c8c <__aeabi_f2d>
   121b6:	4602      	mov	r2, r0
   121b8:	460b      	mov	r3, r1
   121ba:	4610      	mov	r0, r2
   121bc:	4619      	mov	r1, r3
   121be:	a336      	add	r3, pc, #216	; (adr r3, 12298 <course_pid_run+0x158>)
   121c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   121c4:	f005 fc04 	bl	179d0 <__adddf3>
   121c8:	4602      	mov	r2, r0
   121ca:	460b      	mov	r3, r1
   121cc:	4610      	mov	r0, r2
   121ce:	4619      	mov	r1, r3
   121d0:	f006 f892 	bl	182f8 <__aeabi_d2f>
   121d4:	4603      	mov	r3, r0
   121d6:	607b      	str	r3, [r7, #4]
   121d8:	6878      	ldr	r0, [r7, #4]
   121da:	f005 fd57 	bl	17c8c <__aeabi_f2d>
   121de:	4602      	mov	r2, r0
   121e0:	460b      	mov	r3, r1
   121e2:	4610      	mov	r0, r2
   121e4:	4619      	mov	r1, r3
   121e6:	a330      	add	r3, pc, #192	; (adr r3, 122a8 <course_pid_run+0x168>)
   121e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   121ec:	f006 f814 	bl	18218 <__aeabi_dcmplt>
   121f0:	4603      	mov	r3, r0
   121f2:	2b00      	cmp	r3, #0
   121f4:	d1dc      	bne.n	121b0 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
   121f6:	f240 5358 	movw	r3, #1368	; 0x558
   121fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121fe:	681b      	ldr	r3, [r3, #0]
   12200:	4618      	mov	r0, r3
   12202:	6879      	ldr	r1, [r7, #4]
   12204:	f006 f9d6 	bl	185b4 <__aeabi_fmul>
   12208:	4603      	mov	r3, r0
   1220a:	461a      	mov	r2, r3
   1220c:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
   12210:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12214:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
   12216:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
   1221a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1221e:	681a      	ldr	r2, [r3, #0]
   12220:	f240 535c 	movw	r3, #1372	; 0x55c
   12224:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12228:	681b      	ldr	r3, [r3, #0]
   1222a:	4610      	mov	r0, r2
   1222c:	4619      	mov	r1, r3
   1222e:	f006 fb7d 	bl	1892c <__aeabi_fcmpgt>
   12232:	4603      	mov	r3, r0
   12234:	2b00      	cmp	r3, #0
   12236:	d00a      	beq.n	1224e <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
   12238:	f240 535c 	movw	r3, #1372	; 0x55c
   1223c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12240:	681a      	ldr	r2, [r3, #0]
   12242:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
   12246:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1224a:	601a      	str	r2, [r3, #0]
   1224c:	e01e      	b.n	1228c <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
   1224e:	f240 535c 	movw	r3, #1372	; 0x55c
   12252:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12256:	681b      	ldr	r3, [r3, #0]
   12258:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   1225c:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
   12260:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12264:	681b      	ldr	r3, [r3, #0]
   12266:	4610      	mov	r0, r2
   12268:	4619      	mov	r1, r3
   1226a:	f006 fb5f 	bl	1892c <__aeabi_fcmpgt>
   1226e:	4603      	mov	r3, r0
   12270:	2b00      	cmp	r3, #0
   12272:	d00b      	beq.n	1228c <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
   12274:	f240 535c 	movw	r3, #1372	; 0x55c
   12278:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1227c:	681b      	ldr	r3, [r3, #0]
   1227e:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   12282:	f24c 63a0 	movw	r3, #50848	; 0xc6a0
   12286:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1228a:	601a      	str	r2, [r3, #0]
}
   1228c:	3708      	adds	r7, #8
   1228e:	46bd      	mov	sp, r7
   12290:	bd80      	pop	{r7, pc}
   12292:	bf00      	nop
   12294:	f3af 8000 	nop.w
   12298:	54442d18 	.word	0x54442d18
   1229c:	401921fb 	.word	0x401921fb
   122a0:	54442d18 	.word	0x54442d18
   122a4:	400921fb 	.word	0x400921fb
   122a8:	54442d18 	.word	0x54442d18
   122ac:	c00921fb 	.word	0xc00921fb

000122b0 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
   122b0:	b5b0      	push	{r4, r5, r7, lr}
   122b2:	b082      	sub	sp, #8
   122b4:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
   122b6:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   122ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122be:	681a      	ldr	r2, [r3, #0]
   122c0:	f24c 6360 	movw	r3, #50784	; 0xc660
   122c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122c8:	681b      	ldr	r3, [r3, #0]
   122ca:	4610      	mov	r0, r2
   122cc:	4619      	mov	r1, r3
   122ce:	f006 f867 	bl	183a0 <__aeabi_fsub>
   122d2:	4603      	mov	r3, r0
   122d4:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
   122d6:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   122da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122de:	781b      	ldrb	r3, [r3, #0]
   122e0:	2b00      	cmp	r3, #0
   122e2:	f000 80a8 	beq.w	12436 <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
   122e6:	f24c 6398 	movw	r3, #50840	; 0xc698
   122ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122ee:	881b      	ldrh	r3, [r3, #0]
   122f0:	b29a      	uxth	r2, r3
   122f2:	f24c 634c 	movw	r3, #50764	; 0xc64c
   122f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122fa:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
   122fc:	f240 5364 	movw	r3, #1380	; 0x564
   12300:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12304:	681a      	ldr	r2, [r3, #0]
   12306:	f24c 636c 	movw	r3, #50796	; 0xc66c
   1230a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1230e:	681b      	ldr	r3, [r3, #0]
   12310:	4610      	mov	r0, r2
   12312:	4619      	mov	r1, r3
   12314:	f006 f94e 	bl	185b4 <__aeabi_fmul>
   12318:	4603      	mov	r3, r0
   1231a:	4618      	mov	r0, r3
   1231c:	6879      	ldr	r1, [r7, #4]
   1231e:	f006 f841 	bl	183a4 <__addsf3>
   12322:	4603      	mov	r3, r0
   12324:	461a      	mov	r2, r3
   12326:	f240 5360 	movw	r3, #1376	; 0x560
   1232a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1232e:	681b      	ldr	r3, [r3, #0]
   12330:	4610      	mov	r0, r2
   12332:	4619      	mov	r1, r3
   12334:	f006 f93e 	bl	185b4 <__aeabi_fmul>
   12338:	4603      	mov	r3, r0
   1233a:	461a      	mov	r2, r3
   1233c:	f24c 6348 	movw	r3, #50760	; 0xc648
   12340:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12344:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
   12346:	f24c 6348 	movw	r3, #50760	; 0xc648
   1234a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1234e:	681a      	ldr	r2, [r3, #0]
   12350:	f240 5368 	movw	r3, #1384	; 0x568
   12354:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12358:	681b      	ldr	r3, [r3, #0]
   1235a:	4610      	mov	r0, r2
   1235c:	4619      	mov	r1, r3
   1235e:	f006 fae5 	bl	1892c <__aeabi_fcmpgt>
   12362:	4603      	mov	r3, r0
   12364:	2b00      	cmp	r3, #0
   12366:	d009      	beq.n	1237c <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
   12368:	f240 5368 	movw	r3, #1384	; 0x568
   1236c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12370:	681a      	ldr	r2, [r3, #0]
   12372:	f24c 6348 	movw	r3, #50760	; 0xc648
   12376:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1237a:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
   1237c:	f24c 6348 	movw	r3, #50760	; 0xc648
   12380:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12384:	681a      	ldr	r2, [r3, #0]
   12386:	f240 536c 	movw	r3, #1388	; 0x56c
   1238a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1238e:	681b      	ldr	r3, [r3, #0]
   12390:	4610      	mov	r0, r2
   12392:	4619      	mov	r1, r3
   12394:	f006 faac 	bl	188f0 <__aeabi_fcmplt>
   12398:	4603      	mov	r3, r0
   1239a:	2b00      	cmp	r3, #0
   1239c:	d009      	beq.n	123b2 <climb_pid_run+0x102>
      desired_pitch = min_pitch;
   1239e:	f240 536c 	movw	r3, #1388	; 0x56c
   123a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   123a6:	681a      	ldr	r2, [r3, #0]
   123a8:	f24c 6348 	movw	r3, #50760	; 0xc648
   123ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123b0:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
   123b2:	f24c 636c 	movw	r3, #50796	; 0xc66c
   123b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123ba:	681b      	ldr	r3, [r3, #0]
   123bc:	4618      	mov	r0, r3
   123be:	6879      	ldr	r1, [r7, #4]
   123c0:	f005 fff0 	bl	183a4 <__addsf3>
   123c4:	4603      	mov	r3, r0
   123c6:	461a      	mov	r2, r3
   123c8:	f24c 636c 	movw	r3, #50796	; 0xc66c
   123cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123d0:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
   123d2:	f24c 636c 	movw	r3, #50796	; 0xc66c
   123d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123da:	681b      	ldr	r3, [r3, #0]
   123dc:	4618      	mov	r0, r3
   123de:	f04f 0100 	mov.w	r1, #0
   123e2:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   123e6:	f006 faa1 	bl	1892c <__aeabi_fcmpgt>
   123ea:	4603      	mov	r3, r0
   123ec:	2b00      	cmp	r3, #0
   123ee:	d008      	beq.n	12402 <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
   123f0:	f24c 636c 	movw	r3, #50796	; 0xc66c
   123f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123f8:	f04f 0200 	mov.w	r2, #0
   123fc:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   12400:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
   12402:	f24c 636c 	movw	r3, #50796	; 0xc66c
   12406:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1240a:	681b      	ldr	r3, [r3, #0]
   1240c:	4618      	mov	r0, r3
   1240e:	f04f 0100 	mov.w	r1, #0
   12412:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   12416:	f006 fa6b 	bl	188f0 <__aeabi_fcmplt>
   1241a:	4603      	mov	r3, r0
   1241c:	2b00      	cmp	r3, #0
   1241e:	d100      	bne.n	12422 <climb_pid_run+0x172>
   12420:	e109      	b.n	12636 <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
   12422:	f24c 636c 	movw	r3, #50796	; 0xc66c
   12426:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1242a:	f04f 0200 	mov.w	r2, #0
   1242e:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   12432:	601a      	str	r2, [r3, #0]
   12434:	e0ff      	b.n	12636 <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
   12436:	f24c 6360 	movw	r3, #50784	; 0xc660
   1243a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1243e:	681b      	ldr	r3, [r3, #0]
   12440:	4618      	mov	r0, r3
   12442:	f04f 0100 	mov.w	r1, #0
   12446:	f006 fa71 	bl	1892c <__aeabi_fcmpgt>
   1244a:	4603      	mov	r3, r0
   1244c:	2b00      	cmp	r3, #0
   1244e:	d010      	beq.n	12472 <climb_pid_run+0x1c2>
   12450:	f24c 6360 	movw	r3, #50784	; 0xc660
   12454:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12458:	681a      	ldr	r2, [r3, #0]
   1245a:	f240 5354 	movw	r3, #1364	; 0x554
   1245e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12462:	681b      	ldr	r3, [r3, #0]
   12464:	4610      	mov	r0, r2
   12466:	4619      	mov	r1, r3
   12468:	f006 f8a4 	bl	185b4 <__aeabi_fmul>
   1246c:	4603      	mov	r3, r0
   1246e:	461a      	mov	r2, r3
   12470:	e001      	b.n	12476 <climb_pid_run+0x1c6>
   12472:	f04f 0200 	mov.w	r2, #0
   12476:	f24c 6358 	movw	r3, #50776	; 0xc658
   1247a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1247e:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
   12480:	f64c 42cd 	movw	r2, #52429	; 0xcccd
   12484:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
   12488:	f24c 6368 	movw	r3, #50792	; 0xc668
   1248c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12490:	681b      	ldr	r3, [r3, #0]
   12492:	4610      	mov	r0, r2
   12494:	4619      	mov	r1, r3
   12496:	f006 f88d 	bl	185b4 <__aeabi_fmul>
   1249a:	4603      	mov	r3, r0
   1249c:	4618      	mov	r0, r3
   1249e:	6879      	ldr	r1, [r7, #4]
   124a0:	f005 ff80 	bl	183a4 <__addsf3>
   124a4:	4603      	mov	r3, r0
   124a6:	461a      	mov	r2, r3
   124a8:	f24c 238f 	movw	r3, #49807	; 0xc28f
   124ac:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
   124b0:	4610      	mov	r0, r2
   124b2:	4619      	mov	r1, r3
   124b4:	f006 f87e 	bl	185b4 <__aeabi_fmul>
   124b8:	4603      	mov	r3, r0
   124ba:	4618      	mov	r0, r3
   124bc:	f005 fbe6 	bl	17c8c <__aeabi_f2d>
   124c0:	4602      	mov	r2, r0
   124c2:	460b      	mov	r3, r1
   124c4:	4610      	mov	r0, r2
   124c6:	4619      	mov	r1, r3
   124c8:	a35d      	add	r3, pc, #372	; (adr r3, 12640 <climb_pid_run+0x390>)
   124ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   124ce:	f005 fa7f 	bl	179d0 <__adddf3>
   124d2:	4602      	mov	r2, r0
   124d4:	460b      	mov	r3, r1
   124d6:	4614      	mov	r4, r2
   124d8:	461d      	mov	r5, r3
   124da:	f24c 6360 	movw	r3, #50784	; 0xc660
   124de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124e2:	681b      	ldr	r3, [r3, #0]
   124e4:	4618      	mov	r0, r3
   124e6:	f005 fbd1 	bl	17c8c <__aeabi_f2d>
   124ea:	4602      	mov	r2, r0
   124ec:	460b      	mov	r3, r1
   124ee:	4610      	mov	r0, r2
   124f0:	4619      	mov	r1, r3
   124f2:	a355      	add	r3, pc, #340	; (adr r3, 12648 <climb_pid_run+0x398>)
   124f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   124f8:	f005 fc1c 	bl	17d34 <__aeabi_dmul>
   124fc:	4602      	mov	r2, r0
   124fe:	460b      	mov	r3, r1
   12500:	4620      	mov	r0, r4
   12502:	4629      	mov	r1, r5
   12504:	f005 fa64 	bl	179d0 <__adddf3>
   12508:	4602      	mov	r2, r0
   1250a:	460b      	mov	r3, r1
   1250c:	4610      	mov	r0, r2
   1250e:	4619      	mov	r1, r3
   12510:	f005 fef2 	bl	182f8 <__aeabi_d2f>
   12514:	4603      	mov	r3, r0
   12516:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
   12518:	f24c 6368 	movw	r3, #50792	; 0xc668
   1251c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12520:	681b      	ldr	r3, [r3, #0]
   12522:	4618      	mov	r0, r3
   12524:	6879      	ldr	r1, [r7, #4]
   12526:	f005 ff3d 	bl	183a4 <__addsf3>
   1252a:	4603      	mov	r3, r0
   1252c:	461a      	mov	r2, r3
   1252e:	f24c 6368 	movw	r3, #50792	; 0xc668
   12532:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12536:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
   12538:	f24c 6368 	movw	r3, #50792	; 0xc668
   1253c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12540:	681b      	ldr	r3, [r3, #0]
   12542:	4618      	mov	r0, r3
   12544:	f04f 0100 	mov.w	r1, #0
   12548:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   1254c:	f006 f9ee 	bl	1892c <__aeabi_fcmpgt>
   12550:	4603      	mov	r3, r0
   12552:	2b00      	cmp	r3, #0
   12554:	d008      	beq.n	12568 <climb_pid_run+0x2b8>
   12556:	f24c 6368 	movw	r3, #50792	; 0xc668
   1255a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1255e:	f04f 0200 	mov.w	r2, #0
   12562:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   12566:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
   12568:	f24c 6368 	movw	r3, #50792	; 0xc668
   1256c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12570:	681b      	ldr	r3, [r3, #0]
   12572:	4618      	mov	r0, r3
   12574:	f04f 0100 	mov.w	r1, #0
   12578:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1257c:	f006 f9b8 	bl	188f0 <__aeabi_fcmplt>
   12580:	4603      	mov	r3, r0
   12582:	2b00      	cmp	r3, #0
   12584:	d008      	beq.n	12598 <climb_pid_run+0x2e8>
   12586:	f24c 6368 	movw	r3, #50792	; 0xc668
   1258a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1258e:	f04f 0200 	mov.w	r2, #0
   12592:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   12596:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
   12598:	6838      	ldr	r0, [r7, #0]
   1259a:	f04f 0100 	mov.w	r1, #0
   1259e:	f2c4 6116 	movt	r1, #17942	; 0x4616
   125a2:	f006 f807 	bl	185b4 <__aeabi_fmul>
   125a6:	4603      	mov	r3, r0
   125a8:	4618      	mov	r0, r3
   125aa:	f04f 0100 	mov.w	r1, #0
   125ae:	f006 f99f 	bl	188f0 <__aeabi_fcmplt>
   125b2:	4603      	mov	r3, r0
   125b4:	2b00      	cmp	r3, #0
   125b6:	d001      	beq.n	125bc <climb_pid_run+0x30c>
   125b8:	2200      	movs	r2, #0
   125ba:	e022      	b.n	12602 <climb_pid_run+0x352>
   125bc:	6838      	ldr	r0, [r7, #0]
   125be:	f04f 0100 	mov.w	r1, #0
   125c2:	f2c4 6116 	movt	r1, #17942	; 0x4616
   125c6:	f005 fff5 	bl	185b4 <__aeabi_fmul>
   125ca:	4603      	mov	r3, r0
   125cc:	4618      	mov	r0, r3
   125ce:	f04f 0100 	mov.w	r1, #0
   125d2:	f2c4 6116 	movt	r1, #17942	; 0x4616
   125d6:	f006 f9a9 	bl	1892c <__aeabi_fcmpgt>
   125da:	4603      	mov	r3, r0
   125dc:	2b00      	cmp	r3, #0
   125de:	d002      	beq.n	125e6 <climb_pid_run+0x336>
   125e0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   125e4:	e00c      	b.n	12600 <climb_pid_run+0x350>
   125e6:	6838      	ldr	r0, [r7, #0]
   125e8:	f04f 0100 	mov.w	r1, #0
   125ec:	f2c4 6116 	movt	r1, #17942	; 0x4616
   125f0:	f005 ffe0 	bl	185b4 <__aeabi_fmul>
   125f4:	4603      	mov	r3, r0
   125f6:	4618      	mov	r0, r3
   125f8:	f006 f9a2 	bl	18940 <__aeabi_f2iz>
   125fc:	4603      	mov	r3, r0
   125fe:	b29b      	uxth	r3, r3
   12600:	b29a      	uxth	r2, r3
   12602:	f24c 634c 	movw	r3, #50764	; 0xc64c
   12606:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1260a:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
   1260c:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12610:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12614:	681a      	ldr	r2, [r3, #0]
   12616:	f24c 6358 	movw	r3, #50776	; 0xc658
   1261a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1261e:	681b      	ldr	r3, [r3, #0]
   12620:	4610      	mov	r0, r2
   12622:	4619      	mov	r1, r3
   12624:	f005 febe 	bl	183a4 <__addsf3>
   12628:	4603      	mov	r3, r0
   1262a:	461a      	mov	r2, r3
   1262c:	f24c 6348 	movw	r3, #50760	; 0xc648
   12630:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12634:	601a      	str	r2, [r3, #0]
  }
}
   12636:	3708      	adds	r7, #8
   12638:	46bd      	mov	sp, r7
   1263a:	bdb0      	pop	{r4, r5, r7, pc}
   1263c:	f3af 8000 	nop.w
   12640:	3d70a3d7 	.word	0x3d70a3d7
   12644:	3fd3d70a 	.word	0x3fd3d70a
   12648:	9999999a 	.word	0x9999999a
   1264c:	3fc99999 	.word	0x3fc99999

00012650 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
   12650:	b580      	push	{r7, lr}
   12652:	b082      	sub	sp, #8
   12654:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
   12656:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   1265a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1265e:	681a      	ldr	r2, [r3, #0]
   12660:	f240 5374 	movw	r3, #1396	; 0x574
   12664:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12668:	681b      	ldr	r3, [r3, #0]
   1266a:	4610      	mov	r0, r2
   1266c:	4619      	mov	r1, r3
   1266e:	f005 fe97 	bl	183a0 <__aeabi_fsub>
   12672:	4603      	mov	r3, r0
   12674:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
   12676:	f240 5370 	movw	r3, #1392	; 0x570
   1267a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1267e:	681b      	ldr	r3, [r3, #0]
   12680:	4618      	mov	r0, r3
   12682:	6879      	ldr	r1, [r7, #4]
   12684:	f005 ff96 	bl	185b4 <__aeabi_fmul>
   12688:	4603      	mov	r3, r0
   1268a:	461a      	mov	r2, r3
   1268c:	f24c 6364 	movw	r3, #50788	; 0xc664
   12690:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12694:	681b      	ldr	r3, [r3, #0]
   12696:	4610      	mov	r0, r2
   12698:	4619      	mov	r1, r3
   1269a:	f005 fe83 	bl	183a4 <__addsf3>
   1269e:	4603      	mov	r3, r0
   126a0:	461a      	mov	r2, r3
   126a2:	f24c 6360 	movw	r3, #50784	; 0xc660
   126a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126aa:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
   126ac:	f24c 6360 	movw	r3, #50784	; 0xc660
   126b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126b4:	681b      	ldr	r3, [r3, #0]
   126b6:	4618      	mov	r0, r3
   126b8:	f04f 0100 	mov.w	r1, #0
   126bc:	f6cb 7180 	movt	r1, #49024	; 0xbf80
   126c0:	f006 f916 	bl	188f0 <__aeabi_fcmplt>
   126c4:	4603      	mov	r3, r0
   126c6:	2b00      	cmp	r3, #0
   126c8:	d008      	beq.n	126dc <altitude_pid_run+0x8c>
   126ca:	f24c 6360 	movw	r3, #50784	; 0xc660
   126ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126d2:	f04f 0200 	mov.w	r2, #0
   126d6:	f6cb 7280 	movt	r2, #49024	; 0xbf80
   126da:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
   126dc:	f24c 6360 	movw	r3, #50784	; 0xc660
   126e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126e4:	681b      	ldr	r3, [r3, #0]
   126e6:	4618      	mov	r0, r3
   126e8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   126ec:	f006 f91e 	bl	1892c <__aeabi_fcmpgt>
   126f0:	4603      	mov	r3, r0
   126f2:	2b00      	cmp	r3, #0
   126f4:	d006      	beq.n	12704 <altitude_pid_run+0xb4>
   126f6:	f24c 6360 	movw	r3, #50784	; 0xc660
   126fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126fe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   12702:	601a      	str	r2, [r3, #0]
}
   12704:	3708      	adds	r7, #8
   12706:	46bd      	mov	sp, r7
   12708:	bd80      	pop	{r7, pc}
   1270a:	bf00      	nop
   1270c:	f3af 8000 	nop.w

00012710 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
   12710:	b5f0      	push	{r4, r5, r6, r7, lr}
   12712:	b08b      	sub	sp, #44	; 0x2c
   12714:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
   12716:	f24c 6371 	movw	r3, #50801	; 0xc671
   1271a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1271e:	781b      	ldrb	r3, [r3, #0]
   12720:	2b00      	cmp	r3, #0
   12722:	f040 8169 	bne.w	129f8 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
   12726:	f24c 6370 	movw	r3, #50800	; 0xc670
   1272a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1272e:	781b      	ldrb	r3, [r3, #0]
   12730:	2b00      	cmp	r3, #0
   12732:	d13c      	bne.n	127ae <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
   12734:	f24c 6370 	movw	r3, #50800	; 0xc670
   12738:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1273c:	2200      	movs	r2, #0
   1273e:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
   12740:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   12744:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12748:	881b      	ldrh	r3, [r3, #0]
   1274a:	2b00      	cmp	r3, #0
   1274c:	d000      	beq.n	12750 <auto_nav+0x40>
   1274e:	e03d      	b.n	127cc <auto_nav+0xbc>
	else NextStage(); 
   12750:	f24c 6370 	movw	r3, #50800	; 0xc670
   12754:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12758:	781b      	ldrb	r3, [r3, #0]
   1275a:	3301      	adds	r3, #1
   1275c:	b2da      	uxtb	r2, r3
   1275e:	f24c 6370 	movw	r3, #50800	; 0xc670
   12762:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12766:	701a      	strb	r2, [r3, #0]
   12768:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1276c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12770:	681a      	ldr	r2, [r3, #0]
   12772:	f24c 6374 	movw	r3, #50804	; 0xc674
   12776:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1277a:	601a      	str	r2, [r3, #0]
   1277c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12780:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12784:	681a      	ldr	r2, [r3, #0]
   12786:	f24c 6378 	movw	r3, #50808	; 0xc678
   1278a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1278e:	601a      	str	r2, [r3, #0]
   12790:	f24c 6384 	movw	r3, #50820	; 0xc684
   12794:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12798:	2200      	movs	r2, #0
   1279a:	801a      	strh	r2, [r3, #0]
   1279c:	f24c 6388 	movw	r3, #50824	; 0xc688
   127a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127a4:	f04f 0200 	mov.w	r2, #0
   127a8:	601a      	str	r2, [r3, #0]
   127aa:	f002 b883 	b.w	148b4 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   127ae:	f24c 6370 	movw	r3, #50800	; 0xc670
   127b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127b6:	781b      	ldrb	r3, [r3, #0]
   127b8:	2b01      	cmp	r3, #1
   127ba:	d100      	bne.n	127be <auto_nav+0xae>
    {   Goto(while_1)}
   127bc:	e7ba      	b.n	12734 <auto_nav+0x24>
    else if (nav_stage == 2)
   127be:	f24c 6370 	movw	r3, #50800	; 0xc670
   127c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127c6:	781b      	ldrb	r3, [r3, #0]
   127c8:	2b02      	cmp	r3, #2
   127ca:	d162      	bne.n	12892 <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
   127cc:	f24c 6370 	movw	r3, #50800	; 0xc670
   127d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127d4:	2202      	movs	r2, #2
   127d6:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
   127d8:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   127dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127e0:	881b      	ldrh	r3, [r3, #0]
   127e2:	2b08      	cmp	r3, #8
   127e4:	d92e      	bls.n	12844 <auto_nav+0x134>
   127e6:	f24c 6370 	movw	r3, #50800	; 0xc670
   127ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127ee:	781b      	ldrb	r3, [r3, #0]
   127f0:	3301      	adds	r3, #1
   127f2:	b2da      	uxtb	r2, r3
   127f4:	f24c 6370 	movw	r3, #50800	; 0xc670
   127f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127fc:	701a      	strb	r2, [r3, #0]
   127fe:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12802:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12806:	681a      	ldr	r2, [r3, #0]
   12808:	f24c 6374 	movw	r3, #50804	; 0xc674
   1280c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12810:	601a      	str	r2, [r3, #0]
   12812:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12816:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1281a:	681a      	ldr	r2, [r3, #0]
   1281c:	f24c 6378 	movw	r3, #50808	; 0xc678
   12820:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12824:	601a      	str	r2, [r3, #0]
   12826:	f24c 6384 	movw	r3, #50820	; 0xc684
   1282a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1282e:	2200      	movs	r2, #0
   12830:	801a      	strh	r2, [r3, #0]
   12832:	f24c 6388 	movw	r3, #50824	; 0xc688
   12836:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1283a:	f04f 0200 	mov.w	r2, #0
   1283e:	601a      	str	r2, [r3, #0]
   12840:	f002 b838 	b.w	148b4 <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   12844:	f24c 635c 	movw	r3, #50780	; 0xc65c
   12848:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1284c:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   12850:	f2c4 0296 	movt	r2, #16534	; 0x4096
   12854:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   12856:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   1285a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1285e:	2200      	movs	r2, #0
   12860:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
   12862:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12866:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1286a:	f649 129a 	movw	r2, #39322	; 0x999a
   1286e:	f6c3 6219 	movt	r2, #15897	; 0x3e19
   12872:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
   12874:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   12878:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1287c:	2201      	movs	r2, #1
   1287e:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
   12880:	f24c 6398 	movw	r3, #50840	; 0xc698
   12884:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12888:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
   1288c:	801a      	strh	r2, [r3, #0]
        }
        return;
   1288e:	f002 b811 	b.w	148b4 <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
   12892:	f24c 6370 	movw	r3, #50800	; 0xc670
   12896:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1289a:	781b      	ldrb	r3, [r3, #0]
   1289c:	2b03      	cmp	r3, #3
   1289e:	d168      	bne.n	12972 <auto_nav+0x262>
     {
	nav_stage = 3;	
   128a0:	f24c 6370 	movw	r3, #50800	; 0xc670
   128a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128a8:	2203      	movs	r2, #3
   128aa:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
   128ac:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   128b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128b4:	681b      	ldr	r3, [r3, #0]
   128b6:	4618      	mov	r0, r3
   128b8:	f04f 0100 	mov.w	r1, #0
   128bc:	f2c4 3116 	movt	r1, #17174	; 0x4316
   128c0:	f006 f834 	bl	1892c <__aeabi_fcmpgt>
   128c4:	4603      	mov	r3, r0
   128c6:	2b00      	cmp	r3, #0
   128c8:	d02e      	beq.n	12928 <auto_nav+0x218>
   128ca:	f24c 6370 	movw	r3, #50800	; 0xc670
   128ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128d2:	781b      	ldrb	r3, [r3, #0]
   128d4:	3301      	adds	r3, #1
   128d6:	b2da      	uxtb	r2, r3
   128d8:	f24c 6370 	movw	r3, #50800	; 0xc670
   128dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128e0:	701a      	strb	r2, [r3, #0]
   128e2:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   128e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128ea:	681a      	ldr	r2, [r3, #0]
   128ec:	f24c 6374 	movw	r3, #50804	; 0xc674
   128f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128f4:	601a      	str	r2, [r3, #0]
   128f6:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   128fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128fe:	681a      	ldr	r2, [r3, #0]
   12900:	f24c 6378 	movw	r3, #50808	; 0xc678
   12904:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12908:	601a      	str	r2, [r3, #0]
   1290a:	f24c 6384 	movw	r3, #50820	; 0xc684
   1290e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12912:	2200      	movs	r2, #0
   12914:	801a      	strh	r2, [r3, #0]
   12916:	f24c 6388 	movw	r3, #50824	; 0xc688
   1291a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1291e:	f04f 0200 	mov.w	r2, #0
   12922:	601a      	str	r2, [r3, #0]
   12924:	f001 bfc6 	b.w	148b4 <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   12928:	f24c 635c 	movw	r3, #50780	; 0xc65c
   1292c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12930:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   12934:	f2c4 0296 	movt	r2, #16534	; 0x4096
   12938:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   1293a:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   1293e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12942:	2200      	movs	r2, #0
   12944:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   12946:	f24c 639c 	movw	r3, #50844	; 0xc69c
   1294a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1294e:	f04f 0200 	mov.w	r2, #0
   12952:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
   12954:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   12958:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1295c:	2202      	movs	r2, #2
   1295e:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
   12960:	f24c 6360 	movw	r3, #50784	; 0xc660
   12964:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12968:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   1296c:	601a      	str	r2, [r3, #0]
        }
        return;
   1296e:	f001 bfa1 	b.w	148b4 <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
   12972:	f24c 6370 	movw	r3, #50800	; 0xc670
   12976:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1297a:	781b      	ldrb	r3, [r3, #0]
   1297c:	2b04      	cmp	r3, #4
   1297e:	f041 8799 	bne.w	148b4 <auto_nav+0x21a4>
        NextBlock()
   12982:	f24c 6371 	movw	r3, #50801	; 0xc671
   12986:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1298a:	781b      	ldrb	r3, [r3, #0]
   1298c:	3301      	adds	r3, #1
   1298e:	b2da      	uxtb	r2, r3
   12990:	f24c 6371 	movw	r3, #50801	; 0xc671
   12994:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12998:	701a      	strb	r2, [r3, #0]
   1299a:	f24c 6370 	movw	r3, #50800	; 0xc670
   1299e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129a2:	2200      	movs	r2, #0
   129a4:	701a      	strb	r2, [r3, #0]
   129a6:	f24c 6386 	movw	r3, #50822	; 0xc686
   129aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129ae:	2200      	movs	r2, #0
   129b0:	801a      	strh	r2, [r3, #0]
   129b2:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   129b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129ba:	681a      	ldr	r2, [r3, #0]
   129bc:	f24c 6374 	movw	r3, #50804	; 0xc674
   129c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129c4:	601a      	str	r2, [r3, #0]
   129c6:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   129ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129ce:	681a      	ldr	r2, [r3, #0]
   129d0:	f24c 6378 	movw	r3, #50808	; 0xc678
   129d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129d8:	601a      	str	r2, [r3, #0]
   129da:	f24c 6384 	movw	r3, #50820	; 0xc684
   129de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129e2:	2200      	movs	r2, #0
   129e4:	801a      	strh	r2, [r3, #0]
   129e6:	f24c 6388 	movw	r3, #50824	; 0xc688
   129ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129ee:	f04f 0200 	mov.w	r2, #0
   129f2:	601a      	str	r2, [r3, #0]
   129f4:	f001 bf5e 	b.w	148b4 <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
   129f8:	f24c 6371 	movw	r3, #50801	; 0xc671
   129fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a00:	781b      	ldrb	r3, [r3, #0]
   12a02:	2b01      	cmp	r3, #1
   12a04:	f040 81bc 	bne.w	12d80 <auto_nav+0x670>
{
    nav_block = 1;
   12a08:	f24c 6371 	movw	r3, #50801	; 0xc671
   12a0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a10:	2201      	movs	r2, #1
   12a12:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
   12a14:	f24c 3300 	movw	r3, #49920	; 0xc300
   12a18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a1c:	781b      	ldrb	r3, [r3, #0]
   12a1e:	2b00      	cmp	r3, #0
   12a20:	d007      	beq.n	12a32 <auto_nav+0x322>
   12a22:	f24c 3300 	movw	r3, #49920	; 0xc300
   12a26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a2a:	2200      	movs	r2, #0
   12a2c:	701a      	strb	r2, [r3, #0]
   12a2e:	2301      	movs	r3, #1
   12a30:	e000      	b.n	12a34 <auto_nav+0x324>
   12a32:	2300      	movs	r3, #0
   12a34:	2b00      	cmp	r3, #0
   12a36:	d034      	beq.n	12aa2 <auto_nav+0x392>
	{ GotoBlock(2) }
   12a38:	f24c 6371 	movw	r3, #50801	; 0xc671
   12a3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a40:	2202      	movs	r2, #2
   12a42:	701a      	strb	r2, [r3, #0]
   12a44:	f24c 6370 	movw	r3, #50800	; 0xc670
   12a48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a4c:	2200      	movs	r2, #0
   12a4e:	701a      	strb	r2, [r3, #0]
   12a50:	f24c 6386 	movw	r3, #50822	; 0xc686
   12a54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a58:	2200      	movs	r2, #0
   12a5a:	801a      	strh	r2, [r3, #0]
   12a5c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12a60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a64:	681a      	ldr	r2, [r3, #0]
   12a66:	f24c 6374 	movw	r3, #50804	; 0xc674
   12a6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a6e:	601a      	str	r2, [r3, #0]
   12a70:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12a74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a78:	681a      	ldr	r2, [r3, #0]
   12a7a:	f24c 6378 	movw	r3, #50808	; 0xc678
   12a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a82:	601a      	str	r2, [r3, #0]
   12a84:	f24c 6384 	movw	r3, #50820	; 0xc684
   12a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a8c:	2200      	movs	r2, #0
   12a8e:	801a      	strh	r2, [r3, #0]
   12a90:	f24c 6388 	movw	r3, #50824	; 0xc688
   12a94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a98:	f04f 0200 	mov.w	r2, #0
   12a9c:	601a      	str	r2, [r3, #0]
   12a9e:	f001 bf09 	b.w	148b4 <auto_nav+0x21a4>
    if(nav_stage == 0)
   12aa2:	f24c 6370 	movw	r3, #50800	; 0xc670
   12aa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12aaa:	781b      	ldrb	r3, [r3, #0]
   12aac:	2b00      	cmp	r3, #0
   12aae:	d12e      	bne.n	12b0e <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
   12ab0:	f24c 6370 	movw	r3, #50800	; 0xc670
   12ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ab8:	781b      	ldrb	r3, [r3, #0]
   12aba:	3301      	adds	r3, #1
   12abc:	b2da      	uxtb	r2, r3
   12abe:	f24c 6370 	movw	r3, #50800	; 0xc670
   12ac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ac6:	701a      	strb	r2, [r3, #0]
   12ac8:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ad0:	681a      	ldr	r2, [r3, #0]
   12ad2:	f24c 6374 	movw	r3, #50804	; 0xc674
   12ad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ada:	601a      	str	r2, [r3, #0]
   12adc:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12ae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ae4:	681a      	ldr	r2, [r3, #0]
   12ae6:	f24c 6378 	movw	r3, #50808	; 0xc678
   12aea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12aee:	601a      	str	r2, [r3, #0]
   12af0:	f24c 6384 	movw	r3, #50820	; 0xc684
   12af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12af8:	2200      	movs	r2, #0
   12afa:	801a      	strh	r2, [r3, #0]
   12afc:	f24c 6388 	movw	r3, #50824	; 0xc688
   12b00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b04:	f04f 0200 	mov.w	r2, #0
   12b08:	601a      	str	r2, [r3, #0]
   12b0a:	f001 bed3 	b.w	148b4 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   12b0e:	f24c 6370 	movw	r3, #50800	; 0xc670
   12b12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b16:	781b      	ldrb	r3, [r3, #0]
   12b18:	2b01      	cmp	r3, #1
   12b1a:	d169      	bne.n	12bf0 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
   12b1c:	f24c 6370 	movw	r3, #50800	; 0xc670
   12b20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b24:	2201      	movs	r2, #1
   12b26:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
   12b28:	2001      	movs	r0, #1
   12b2a:	f001 fed1 	bl	148d0 <approaching>
   12b2e:	4603      	mov	r3, r0
   12b30:	2b00      	cmp	r3, #0
   12b32:	d034      	beq.n	12b9e <auto_nav+0x48e>
   12b34:	f24c 637c 	movw	r3, #50812	; 0xc67c
   12b38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b3c:	2201      	movs	r2, #1
   12b3e:	701a      	strb	r2, [r3, #0]
   12b40:	f24c 6370 	movw	r3, #50800	; 0xc670
   12b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b48:	781b      	ldrb	r3, [r3, #0]
   12b4a:	3301      	adds	r3, #1
   12b4c:	b2da      	uxtb	r2, r3
   12b4e:	f24c 6370 	movw	r3, #50800	; 0xc670
   12b52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b56:	701a      	strb	r2, [r3, #0]
   12b58:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12b5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b60:	681a      	ldr	r2, [r3, #0]
   12b62:	f24c 6374 	movw	r3, #50804	; 0xc674
   12b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b6a:	601a      	str	r2, [r3, #0]
   12b6c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b74:	681a      	ldr	r2, [r3, #0]
   12b76:	f24c 6378 	movw	r3, #50808	; 0xc678
   12b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b7e:	601a      	str	r2, [r3, #0]
   12b80:	f24c 6384 	movw	r3, #50820	; 0xc684
   12b84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b88:	2200      	movs	r2, #0
   12b8a:	801a      	strh	r2, [r3, #0]
   12b8c:	f24c 6388 	movw	r3, #50824	; 0xc688
   12b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b94:	f04f 0200 	mov.w	r2, #0
   12b98:	601a      	str	r2, [r3, #0]
   12b9a:	f001 be8b 	b.w	148b4 <auto_nav+0x21a4>
            fly_to(1);
   12b9e:	2001      	movs	r0, #1
   12ba0:	f001 ffca 	bl	14b38 <fly_to>
            auto_pitch = FALSE;
   12ba4:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   12ba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bac:	2200      	movs	r2, #0
   12bae:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12bb0:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12bb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bb8:	f04f 0200 	mov.w	r2, #0
   12bbc:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12bbe:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   12bc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bc6:	2203      	movs	r2, #3
   12bc8:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12bca:	f240 5378 	movw	r3, #1400	; 0x578
   12bce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bd2:	695a      	ldr	r2, [r3, #20]
   12bd4:	f240 5374 	movw	r3, #1396	; 0x574
   12bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12bdc:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12bde:	f24c 6364 	movw	r3, #50788	; 0xc664
   12be2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12be6:	f04f 0200 	mov.w	r2, #0
   12bea:	601a      	str	r2, [r3, #0]
          }
          return;
   12bec:	f001 be62 	b.w	148b4 <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12bf0:	f24c 6370 	movw	r3, #50800	; 0xc670
   12bf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bf8:	781b      	ldrb	r3, [r3, #0]
   12bfa:	2b02      	cmp	r3, #2
   12bfc:	d169      	bne.n	12cd2 <auto_nav+0x5c2>
     {
	  nav_stage = 2;
   12bfe:	f24c 6370 	movw	r3, #50800	; 0xc670
   12c02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c06:	2202      	movs	r2, #2
   12c08:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   12c0a:	2004      	movs	r0, #4
   12c0c:	f001 fe60 	bl	148d0 <approaching>
   12c10:	4603      	mov	r3, r0
   12c12:	2b00      	cmp	r3, #0
   12c14:	d034      	beq.n	12c80 <auto_nav+0x570>
   12c16:	f24c 637c 	movw	r3, #50812	; 0xc67c
   12c1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c1e:	2204      	movs	r2, #4
   12c20:	701a      	strb	r2, [r3, #0]
   12c22:	f24c 6370 	movw	r3, #50800	; 0xc670
   12c26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c2a:	781b      	ldrb	r3, [r3, #0]
   12c2c:	3301      	adds	r3, #1
   12c2e:	b2da      	uxtb	r2, r3
   12c30:	f24c 6370 	movw	r3, #50800	; 0xc670
   12c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c38:	701a      	strb	r2, [r3, #0]
   12c3a:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12c3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c42:	681a      	ldr	r2, [r3, #0]
   12c44:	f24c 6374 	movw	r3, #50804	; 0xc674
   12c48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c4c:	601a      	str	r2, [r3, #0]
   12c4e:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12c52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c56:	681a      	ldr	r2, [r3, #0]
   12c58:	f24c 6378 	movw	r3, #50808	; 0xc678
   12c5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c60:	601a      	str	r2, [r3, #0]
   12c62:	f24c 6384 	movw	r3, #50820	; 0xc684
   12c66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c6a:	2200      	movs	r2, #0
   12c6c:	801a      	strh	r2, [r3, #0]
   12c6e:	f24c 6388 	movw	r3, #50824	; 0xc688
   12c72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c76:	f04f 0200 	mov.w	r2, #0
   12c7a:	601a      	str	r2, [r3, #0]
   12c7c:	f001 be1a 	b.w	148b4 <auto_nav+0x21a4>
            fly_to(4);
   12c80:	2004      	movs	r0, #4
   12c82:	f001 ff59 	bl	14b38 <fly_to>
            auto_pitch = FALSE;
   12c86:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   12c8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c8e:	2200      	movs	r2, #0
   12c90:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12c92:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12c96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c9a:	f04f 0200 	mov.w	r2, #0
   12c9e:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12ca0:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   12ca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ca8:	2203      	movs	r2, #3
   12caa:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   12cac:	f240 5378 	movw	r3, #1400	; 0x578
   12cb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12cb6:	f240 5374 	movw	r3, #1396	; 0x574
   12cba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12cbe:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12cc0:	f24c 6364 	movw	r3, #50788	; 0xc664
   12cc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cc8:	f04f 0200 	mov.w	r2, #0
   12ccc:	601a      	str	r2, [r3, #0]
          }
          return;
   12cce:	f001 bdf1 	b.w	148b4 <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12cd2:	f24c 6370 	movw	r3, #50800	; 0xc670
   12cd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cda:	781b      	ldrb	r3, [r3, #0]
   12cdc:	2b03      	cmp	r3, #3
   12cde:	d106      	bne.n	12cee <auto_nav+0x5de>
      {
	  nav_stage = 3;
   12ce0:	f24c 6370 	movw	r3, #50800	; 0xc670
   12ce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ce8:	2203      	movs	r2, #3
   12cea:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
   12cec:	e6e0      	b.n	12ab0 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
   12cee:	f24c 6370 	movw	r3, #50800	; 0xc670
   12cf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cf6:	781b      	ldrb	r3, [r3, #0]
   12cf8:	2b04      	cmp	r3, #4
   12cfa:	f041 85db 	bne.w	148b4 <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
   12cfe:	f24c 6370 	movw	r3, #50800	; 0xc670
   12d02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d06:	2204      	movs	r2, #4
   12d08:	701a      	strb	r2, [r3, #0]
        NextBlock()
   12d0a:	f24c 6371 	movw	r3, #50801	; 0xc671
   12d0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d12:	781b      	ldrb	r3, [r3, #0]
   12d14:	3301      	adds	r3, #1
   12d16:	b2da      	uxtb	r2, r3
   12d18:	f24c 6371 	movw	r3, #50801	; 0xc671
   12d1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d20:	701a      	strb	r2, [r3, #0]
   12d22:	f24c 6370 	movw	r3, #50800	; 0xc670
   12d26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d2a:	2200      	movs	r2, #0
   12d2c:	701a      	strb	r2, [r3, #0]
   12d2e:	f24c 6386 	movw	r3, #50822	; 0xc686
   12d32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d36:	2200      	movs	r2, #0
   12d38:	801a      	strh	r2, [r3, #0]
   12d3a:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12d3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d42:	681a      	ldr	r2, [r3, #0]
   12d44:	f24c 6374 	movw	r3, #50804	; 0xc674
   12d48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d4c:	601a      	str	r2, [r3, #0]
   12d4e:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12d52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d56:	681a      	ldr	r2, [r3, #0]
   12d58:	f24c 6378 	movw	r3, #50808	; 0xc678
   12d5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d60:	601a      	str	r2, [r3, #0]
   12d62:	f24c 6384 	movw	r3, #50820	; 0xc684
   12d66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d6a:	2200      	movs	r2, #0
   12d6c:	801a      	strh	r2, [r3, #0]
   12d6e:	f24c 6388 	movw	r3, #50824	; 0xc688
   12d72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d76:	f04f 0200 	mov.w	r2, #0
   12d7a:	601a      	str	r2, [r3, #0]
   12d7c:	f001 bd9a 	b.w	148b4 <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
   12d80:	f24c 6371 	movw	r3, #50801	; 0xc671
   12d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d88:	781b      	ldrb	r3, [r3, #0]
   12d8a:	2b02      	cmp	r3, #2
   12d8c:	f040 8392 	bne.w	134b4 <auto_nav+0xda4>
{
	nav_block = 2;
   12d90:	f24c 6371 	movw	r3, #50801	; 0xc671
   12d94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d98:	2202      	movs	r2, #2
   12d9a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
   12d9c:	f24c 3300 	movw	r3, #49920	; 0xc300
   12da0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12da4:	781b      	ldrb	r3, [r3, #0]
   12da6:	2b00      	cmp	r3, #0
   12da8:	d007      	beq.n	12dba <auto_nav+0x6aa>
   12daa:	f24c 3300 	movw	r3, #49920	; 0xc300
   12dae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12db2:	2200      	movs	r2, #0
   12db4:	701a      	strb	r2, [r3, #0]
   12db6:	2301      	movs	r3, #1
   12db8:	e000      	b.n	12dbc <auto_nav+0x6ac>
   12dba:	2300      	movs	r3, #0
   12dbc:	2b00      	cmp	r3, #0
   12dbe:	d034      	beq.n	12e2a <auto_nav+0x71a>
   12dc0:	f24c 6371 	movw	r3, #50801	; 0xc671
   12dc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dc8:	2203      	movs	r2, #3
   12dca:	701a      	strb	r2, [r3, #0]
   12dcc:	f24c 6370 	movw	r3, #50800	; 0xc670
   12dd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dd4:	2200      	movs	r2, #0
   12dd6:	701a      	strb	r2, [r3, #0]
   12dd8:	f24c 6386 	movw	r3, #50822	; 0xc686
   12ddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12de0:	2200      	movs	r2, #0
   12de2:	801a      	strh	r2, [r3, #0]
   12de4:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12de8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dec:	681a      	ldr	r2, [r3, #0]
   12dee:	f24c 6374 	movw	r3, #50804	; 0xc674
   12df2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12df6:	601a      	str	r2, [r3, #0]
   12df8:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12dfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e00:	681a      	ldr	r2, [r3, #0]
   12e02:	f24c 6378 	movw	r3, #50808	; 0xc678
   12e06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e0a:	601a      	str	r2, [r3, #0]
   12e0c:	f24c 6384 	movw	r3, #50820	; 0xc684
   12e10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e14:	2200      	movs	r2, #0
   12e16:	801a      	strh	r2, [r3, #0]
   12e18:	f24c 6388 	movw	r3, #50824	; 0xc688
   12e1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e20:	f04f 0200 	mov.w	r2, #0
   12e24:	601a      	str	r2, [r3, #0]
   12e26:	f001 bd45 	b.w	148b4 <auto_nav+0x21a4>
    
    if(nav_stage == 0)
   12e2a:	f24c 6370 	movw	r3, #50800	; 0xc670
   12e2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e32:	781b      	ldrb	r3, [r3, #0]
   12e34:	2b00      	cmp	r3, #0
   12e36:	d134      	bne.n	12ea2 <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
   12e38:	f24c 6370 	movw	r3, #50800	; 0xc670
   12e3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e40:	2200      	movs	r2, #0
   12e42:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
   12e44:	f24c 6370 	movw	r3, #50800	; 0xc670
   12e48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e4c:	781b      	ldrb	r3, [r3, #0]
   12e4e:	3301      	adds	r3, #1
   12e50:	b2da      	uxtb	r2, r3
   12e52:	f24c 6370 	movw	r3, #50800	; 0xc670
   12e56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e5a:	701a      	strb	r2, [r3, #0]
   12e5c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12e60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e64:	681a      	ldr	r2, [r3, #0]
   12e66:	f24c 6374 	movw	r3, #50804	; 0xc674
   12e6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e6e:	601a      	str	r2, [r3, #0]
   12e70:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12e74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e78:	681a      	ldr	r2, [r3, #0]
   12e7a:	f24c 6378 	movw	r3, #50808	; 0xc678
   12e7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e82:	601a      	str	r2, [r3, #0]
   12e84:	f24c 6384 	movw	r3, #50820	; 0xc684
   12e88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e8c:	2200      	movs	r2, #0
   12e8e:	801a      	strh	r2, [r3, #0]
   12e90:	f24c 6388 	movw	r3, #50824	; 0xc688
   12e94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e98:	f04f 0200 	mov.w	r2, #0
   12e9c:	601a      	str	r2, [r3, #0]
   12e9e:	f001 bd09 	b.w	148b4 <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
   12ea2:	f24c 6370 	movw	r3, #50800	; 0xc670
   12ea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12eaa:	781b      	ldrb	r3, [r3, #0]
   12eac:	2b01      	cmp	r3, #1
   12eae:	d169      	bne.n	12f84 <auto_nav+0x874>
    {
         nav_stage =1;
   12eb0:	f24c 6370 	movw	r3, #50800	; 0xc670
   12eb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12eb8:	2201      	movs	r2, #1
   12eba:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
   12ebc:	2006      	movs	r0, #6
   12ebe:	f001 fd07 	bl	148d0 <approaching>
   12ec2:	4603      	mov	r3, r0
   12ec4:	2b00      	cmp	r3, #0
   12ec6:	d034      	beq.n	12f32 <auto_nav+0x822>
   12ec8:	f24c 637c 	movw	r3, #50812	; 0xc67c
   12ecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ed0:	2206      	movs	r2, #6
   12ed2:	701a      	strb	r2, [r3, #0]
   12ed4:	f24c 6370 	movw	r3, #50800	; 0xc670
   12ed8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12edc:	781b      	ldrb	r3, [r3, #0]
   12ede:	3301      	adds	r3, #1
   12ee0:	b2da      	uxtb	r2, r3
   12ee2:	f24c 6370 	movw	r3, #50800	; 0xc670
   12ee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12eea:	701a      	strb	r2, [r3, #0]
   12eec:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12ef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ef4:	681a      	ldr	r2, [r3, #0]
   12ef6:	f24c 6374 	movw	r3, #50804	; 0xc674
   12efa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12efe:	601a      	str	r2, [r3, #0]
   12f00:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12f04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f08:	681a      	ldr	r2, [r3, #0]
   12f0a:	f24c 6378 	movw	r3, #50808	; 0xc678
   12f0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f12:	601a      	str	r2, [r3, #0]
   12f14:	f24c 6384 	movw	r3, #50820	; 0xc684
   12f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f1c:	2200      	movs	r2, #0
   12f1e:	801a      	strh	r2, [r3, #0]
   12f20:	f24c 6388 	movw	r3, #50824	; 0xc688
   12f24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f28:	f04f 0200 	mov.w	r2, #0
   12f2c:	601a      	str	r2, [r3, #0]
   12f2e:	f001 bcc1 	b.w	148b4 <auto_nav+0x21a4>
            fly_to(6);
   12f32:	2006      	movs	r0, #6
   12f34:	f001 fe00 	bl	14b38 <fly_to>
            auto_pitch = FALSE;
   12f38:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   12f3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f40:	2200      	movs	r2, #0
   12f42:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12f44:	f24c 639c 	movw	r3, #50844	; 0xc69c
   12f48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f4c:	f04f 0200 	mov.w	r2, #0
   12f50:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12f52:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   12f56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f5a:	2203      	movs	r2, #3
   12f5c:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
   12f5e:	f240 5378 	movw	r3, #1400	; 0x578
   12f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   12f68:	f240 5374 	movw	r3, #1396	; 0x574
   12f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f70:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12f72:	f24c 6364 	movw	r3, #50788	; 0xc664
   12f76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f7a:	f04f 0200 	mov.w	r2, #0
   12f7e:	601a      	str	r2, [r3, #0]
          }
          return;
   12f80:	f001 bc98 	b.w	148b4 <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12f84:	f24c 6370 	movw	r3, #50800	; 0xc670
   12f88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f8c:	781b      	ldrb	r3, [r3, #0]
   12f8e:	2b02      	cmp	r3, #2
   12f90:	d169      	bne.n	13066 <auto_nav+0x956>
     {
         nav_stage =2; 
   12f92:	f24c 6370 	movw	r3, #50800	; 0xc670
   12f96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f9a:	2202      	movs	r2, #2
   12f9c:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
   12f9e:	2001      	movs	r0, #1
   12fa0:	f001 fc96 	bl	148d0 <approaching>
   12fa4:	4603      	mov	r3, r0
   12fa6:	2b00      	cmp	r3, #0
   12fa8:	d034      	beq.n	13014 <auto_nav+0x904>
   12faa:	f24c 637c 	movw	r3, #50812	; 0xc67c
   12fae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fb2:	2201      	movs	r2, #1
   12fb4:	701a      	strb	r2, [r3, #0]
   12fb6:	f24c 6370 	movw	r3, #50800	; 0xc670
   12fba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fbe:	781b      	ldrb	r3, [r3, #0]
   12fc0:	3301      	adds	r3, #1
   12fc2:	b2da      	uxtb	r2, r3
   12fc4:	f24c 6370 	movw	r3, #50800	; 0xc670
   12fc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fcc:	701a      	strb	r2, [r3, #0]
   12fce:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12fd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fd6:	681a      	ldr	r2, [r3, #0]
   12fd8:	f24c 6374 	movw	r3, #50804	; 0xc674
   12fdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fe0:	601a      	str	r2, [r3, #0]
   12fe2:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12fe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fea:	681a      	ldr	r2, [r3, #0]
   12fec:	f24c 6378 	movw	r3, #50808	; 0xc678
   12ff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ff4:	601a      	str	r2, [r3, #0]
   12ff6:	f24c 6384 	movw	r3, #50820	; 0xc684
   12ffa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ffe:	2200      	movs	r2, #0
   13000:	801a      	strh	r2, [r3, #0]
   13002:	f24c 6388 	movw	r3, #50824	; 0xc688
   13006:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1300a:	f04f 0200 	mov.w	r2, #0
   1300e:	601a      	str	r2, [r3, #0]
   13010:	f001 bc50 	b.w	148b4 <auto_nav+0x21a4>
            fly_to(1);
   13014:	2001      	movs	r0, #1
   13016:	f001 fd8f 	bl	14b38 <fly_to>
            auto_pitch = FALSE;
   1301a:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   1301e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13022:	2200      	movs	r2, #0
   13024:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   13026:	f24c 639c 	movw	r3, #50844	; 0xc69c
   1302a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1302e:	f04f 0200 	mov.w	r2, #0
   13032:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13034:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   13038:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1303c:	2203      	movs	r2, #3
   1303e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   13040:	f240 5378 	movw	r3, #1400	; 0x578
   13044:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13048:	695a      	ldr	r2, [r3, #20]
   1304a:	f240 5374 	movw	r3, #1396	; 0x574
   1304e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13052:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   13054:	f24c 6364 	movw	r3, #50788	; 0xc664
   13058:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1305c:	f04f 0200 	mov.w	r2, #0
   13060:	601a      	str	r2, [r3, #0]
          }
          return;
   13062:	f001 bc27 	b.w	148b4 <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   13066:	f24c 6370 	movw	r3, #50800	; 0xc670
   1306a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1306e:	781b      	ldrb	r3, [r3, #0]
   13070:	2b03      	cmp	r3, #3
   13072:	d16f      	bne.n	13154 <auto_nav+0xa44>
      {
	   nav_stage = 3;         
   13074:	f24c 6370 	movw	r3, #50800	; 0xc670
   13078:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1307c:	2203      	movs	r2, #3
   1307e:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
   13080:	2002      	movs	r0, #2
   13082:	f001 fc25 	bl	148d0 <approaching>
   13086:	4603      	mov	r3, r0
   13088:	2b00      	cmp	r3, #0
   1308a:	d034      	beq.n	130f6 <auto_nav+0x9e6>
   1308c:	f24c 637c 	movw	r3, #50812	; 0xc67c
   13090:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13094:	2202      	movs	r2, #2
   13096:	701a      	strb	r2, [r3, #0]
   13098:	f24c 6370 	movw	r3, #50800	; 0xc670
   1309c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130a0:	781b      	ldrb	r3, [r3, #0]
   130a2:	3301      	adds	r3, #1
   130a4:	b2da      	uxtb	r2, r3
   130a6:	f24c 6370 	movw	r3, #50800	; 0xc670
   130aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130ae:	701a      	strb	r2, [r3, #0]
   130b0:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   130b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130b8:	681a      	ldr	r2, [r3, #0]
   130ba:	f24c 6374 	movw	r3, #50804	; 0xc674
   130be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130c2:	601a      	str	r2, [r3, #0]
   130c4:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   130c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130cc:	681a      	ldr	r2, [r3, #0]
   130ce:	f24c 6378 	movw	r3, #50808	; 0xc678
   130d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130d6:	601a      	str	r2, [r3, #0]
   130d8:	f24c 6384 	movw	r3, #50820	; 0xc684
   130dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130e0:	2200      	movs	r2, #0
   130e2:	801a      	strh	r2, [r3, #0]
   130e4:	f24c 6388 	movw	r3, #50824	; 0xc688
   130e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130ec:	f04f 0200 	mov.w	r2, #0
   130f0:	601a      	str	r2, [r3, #0]
   130f2:	f001 bbdf 	b.w	148b4 <auto_nav+0x21a4>
            route_to(last_wp, 2);
   130f6:	f24c 637c 	movw	r3, #50812	; 0xc67c
   130fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130fe:	781b      	ldrb	r3, [r3, #0]
   13100:	4618      	mov	r0, r3
   13102:	2102      	movs	r1, #2
   13104:	f001 fd3a 	bl	14b7c <route_to>
            auto_pitch = FALSE;
   13108:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   1310c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13110:	2200      	movs	r2, #0
   13112:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   13114:	f24c 639c 	movw	r3, #50844	; 0xc69c
   13118:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1311c:	f04f 0200 	mov.w	r2, #0
   13120:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13122:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   13126:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1312a:	2203      	movs	r2, #3
   1312c:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
   1312e:	f240 5378 	movw	r3, #1400	; 0x578
   13132:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13136:	6a1a      	ldr	r2, [r3, #32]
   13138:	f240 5374 	movw	r3, #1396	; 0x574
   1313c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13140:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   13142:	f24c 6364 	movw	r3, #50788	; 0xc664
   13146:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1314a:	f04f 0200 	mov.w	r2, #0
   1314e:	601a      	str	r2, [r3, #0]
          }
          return;
   13150:	f001 bbb0 	b.w	148b4 <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
   13154:	f24c 6370 	movw	r3, #50800	; 0xc670
   13158:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1315c:	781b      	ldrb	r3, [r3, #0]
   1315e:	2b04      	cmp	r3, #4
   13160:	d169      	bne.n	13236 <auto_nav+0xb26>
       {
          nav_stage = 4;
   13162:	f24c 6370 	movw	r3, #50800	; 0xc670
   13166:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1316a:	2204      	movs	r2, #4
   1316c:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
   1316e:	2003      	movs	r0, #3
   13170:	f001 fbae 	bl	148d0 <approaching>
   13174:	4603      	mov	r3, r0
   13176:	2b00      	cmp	r3, #0
   13178:	d034      	beq.n	131e4 <auto_nav+0xad4>
   1317a:	f24c 637c 	movw	r3, #50812	; 0xc67c
   1317e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13182:	2203      	movs	r2, #3
   13184:	701a      	strb	r2, [r3, #0]
   13186:	f24c 6370 	movw	r3, #50800	; 0xc670
   1318a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1318e:	781b      	ldrb	r3, [r3, #0]
   13190:	3301      	adds	r3, #1
   13192:	b2da      	uxtb	r2, r3
   13194:	f24c 6370 	movw	r3, #50800	; 0xc670
   13198:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1319c:	701a      	strb	r2, [r3, #0]
   1319e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   131a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131a6:	681a      	ldr	r2, [r3, #0]
   131a8:	f24c 6374 	movw	r3, #50804	; 0xc674
   131ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131b0:	601a      	str	r2, [r3, #0]
   131b2:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   131b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131ba:	681a      	ldr	r2, [r3, #0]
   131bc:	f24c 6378 	movw	r3, #50808	; 0xc678
   131c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131c4:	601a      	str	r2, [r3, #0]
   131c6:	f24c 6384 	movw	r3, #50820	; 0xc684
   131ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131ce:	2200      	movs	r2, #0
   131d0:	801a      	strh	r2, [r3, #0]
   131d2:	f24c 6388 	movw	r3, #50824	; 0xc688
   131d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131da:	f04f 0200 	mov.w	r2, #0
   131de:	601a      	str	r2, [r3, #0]
   131e0:	f001 bb68 	b.w	148b4 <auto_nav+0x21a4>
            fly_to(3);
   131e4:	2003      	movs	r0, #3
   131e6:	f001 fca7 	bl	14b38 <fly_to>
            auto_pitch = FALSE;
   131ea:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   131ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131f2:	2200      	movs	r2, #0
   131f4:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   131f6:	f24c 639c 	movw	r3, #50844	; 0xc69c
   131fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131fe:	f04f 0200 	mov.w	r2, #0
   13202:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13204:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   13208:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1320c:	2203      	movs	r2, #3
   1320e:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
   13210:	f240 5378 	movw	r3, #1400	; 0x578
   13214:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1321a:	f240 5374 	movw	r3, #1396	; 0x574
   1321e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13222:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   13224:	f24c 6364 	movw	r3, #50788	; 0xc664
   13228:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1322c:	f04f 0200 	mov.w	r2, #0
   13230:	601a      	str	r2, [r3, #0]
          }
          return;
   13232:	f001 bb3f 	b.w	148b4 <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
   13236:	f24c 6370 	movw	r3, #50800	; 0xc670
   1323a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1323e:	781b      	ldrb	r3, [r3, #0]
   13240:	2b05      	cmp	r3, #5
   13242:	d169      	bne.n	13318 <auto_nav+0xc08>
       {
          nav_stage =5;
   13244:	f24c 6370 	movw	r3, #50800	; 0xc670
   13248:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1324c:	2205      	movs	r2, #5
   1324e:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   13250:	2004      	movs	r0, #4
   13252:	f001 fb3d 	bl	148d0 <approaching>
   13256:	4603      	mov	r3, r0
   13258:	2b00      	cmp	r3, #0
   1325a:	d034      	beq.n	132c6 <auto_nav+0xbb6>
   1325c:	f24c 637c 	movw	r3, #50812	; 0xc67c
   13260:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13264:	2204      	movs	r2, #4
   13266:	701a      	strb	r2, [r3, #0]
   13268:	f24c 6370 	movw	r3, #50800	; 0xc670
   1326c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13270:	781b      	ldrb	r3, [r3, #0]
   13272:	3301      	adds	r3, #1
   13274:	b2da      	uxtb	r2, r3
   13276:	f24c 6370 	movw	r3, #50800	; 0xc670
   1327a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1327e:	701a      	strb	r2, [r3, #0]
   13280:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13284:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13288:	681a      	ldr	r2, [r3, #0]
   1328a:	f24c 6374 	movw	r3, #50804	; 0xc674
   1328e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13292:	601a      	str	r2, [r3, #0]
   13294:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13298:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1329c:	681a      	ldr	r2, [r3, #0]
   1329e:	f24c 6378 	movw	r3, #50808	; 0xc678
   132a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132a6:	601a      	str	r2, [r3, #0]
   132a8:	f24c 6384 	movw	r3, #50820	; 0xc684
   132ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132b0:	2200      	movs	r2, #0
   132b2:	801a      	strh	r2, [r3, #0]
   132b4:	f24c 6388 	movw	r3, #50824	; 0xc688
   132b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132bc:	f04f 0200 	mov.w	r2, #0
   132c0:	601a      	str	r2, [r3, #0]
   132c2:	f001 baf7 	b.w	148b4 <auto_nav+0x21a4>
            fly_to(4);
   132c6:	2004      	movs	r0, #4
   132c8:	f001 fc36 	bl	14b38 <fly_to>
            auto_pitch = FALSE;
   132cc:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   132d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132d4:	2200      	movs	r2, #0
   132d6:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   132d8:	f24c 639c 	movw	r3, #50844	; 0xc69c
   132dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132e0:	f04f 0200 	mov.w	r2, #0
   132e4:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   132e6:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   132ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132ee:	2203      	movs	r2, #3
   132f0:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   132f2:	f240 5378 	movw	r3, #1400	; 0x578
   132f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   132fc:	f240 5374 	movw	r3, #1396	; 0x574
   13300:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13304:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   13306:	f24c 6364 	movw	r3, #50788	; 0xc664
   1330a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1330e:	f04f 0200 	mov.w	r2, #0
   13312:	601a      	str	r2, [r3, #0]
          }
          return;
   13314:	f001 bace 	b.w	148b4 <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
   13318:	f24c 6370 	movw	r3, #50800	; 0xc670
   1331c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13320:	781b      	ldrb	r3, [r3, #0]
   13322:	2b06      	cmp	r3, #6
   13324:	d16f      	bne.n	13406 <auto_nav+0xcf6>
       {
          nav_stage =6;
   13326:	f24c 6370 	movw	r3, #50800	; 0xc670
   1332a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1332e:	2206      	movs	r2, #6
   13330:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
   13332:	2005      	movs	r0, #5
   13334:	f001 facc 	bl	148d0 <approaching>
   13338:	4603      	mov	r3, r0
   1333a:	2b00      	cmp	r3, #0
   1333c:	d034      	beq.n	133a8 <auto_nav+0xc98>
   1333e:	f24c 637c 	movw	r3, #50812	; 0xc67c
   13342:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13346:	2205      	movs	r2, #5
   13348:	701a      	strb	r2, [r3, #0]
   1334a:	f24c 6370 	movw	r3, #50800	; 0xc670
   1334e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13352:	781b      	ldrb	r3, [r3, #0]
   13354:	3301      	adds	r3, #1
   13356:	b2da      	uxtb	r2, r3
   13358:	f24c 6370 	movw	r3, #50800	; 0xc670
   1335c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13360:	701a      	strb	r2, [r3, #0]
   13362:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13366:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1336a:	681a      	ldr	r2, [r3, #0]
   1336c:	f24c 6374 	movw	r3, #50804	; 0xc674
   13370:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13374:	601a      	str	r2, [r3, #0]
   13376:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   1337a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1337e:	681a      	ldr	r2, [r3, #0]
   13380:	f24c 6378 	movw	r3, #50808	; 0xc678
   13384:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13388:	601a      	str	r2, [r3, #0]
   1338a:	f24c 6384 	movw	r3, #50820	; 0xc684
   1338e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13392:	2200      	movs	r2, #0
   13394:	801a      	strh	r2, [r3, #0]
   13396:	f24c 6388 	movw	r3, #50824	; 0xc688
   1339a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1339e:	f04f 0200 	mov.w	r2, #0
   133a2:	601a      	str	r2, [r3, #0]
   133a4:	f001 ba86 	b.w	148b4 <auto_nav+0x21a4>
            route_to(last_wp, 5);
   133a8:	f24c 637c 	movw	r3, #50812	; 0xc67c
   133ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133b0:	781b      	ldrb	r3, [r3, #0]
   133b2:	4618      	mov	r0, r3
   133b4:	2105      	movs	r1, #5
   133b6:	f001 fbe1 	bl	14b7c <route_to>
            auto_pitch = FALSE;
   133ba:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   133be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133c2:	2200      	movs	r2, #0
   133c4:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   133c6:	f24c 639c 	movw	r3, #50844	; 0xc69c
   133ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133ce:	f04f 0200 	mov.w	r2, #0
   133d2:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   133d4:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   133d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133dc:	2203      	movs	r2, #3
   133de:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
   133e0:	f240 5378 	movw	r3, #1400	; 0x578
   133e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   133ea:	f240 5374 	movw	r3, #1396	; 0x574
   133ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   133f2:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   133f4:	f24c 6364 	movw	r3, #50788	; 0xc664
   133f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133fc:	f04f 0200 	mov.w	r2, #0
   13400:	601a      	str	r2, [r3, #0]
          }
          return;
   13402:	f001 ba57 	b.w	148b4 <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
   13406:	f24c 6370 	movw	r3, #50800	; 0xc670
   1340a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1340e:	781b      	ldrb	r3, [r3, #0]
   13410:	2b07      	cmp	r3, #7
   13412:	d106      	bne.n	13422 <auto_nav+0xd12>
       {
	   nav_stage =7;
   13414:	f24c 6370 	movw	r3, #50800	; 0xc670
   13418:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1341c:	2207      	movs	r2, #7
   1341e:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
   13420:	e50a      	b.n	12e38 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
   13422:	f24c 6370 	movw	r3, #50800	; 0xc670
   13426:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1342a:	781b      	ldrb	r3, [r3, #0]
   1342c:	2b08      	cmp	r3, #8
   1342e:	f041 8241 	bne.w	148b4 <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
   13432:	f24c 6370 	movw	r3, #50800	; 0xc670
   13436:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1343a:	2208      	movs	r2, #8
   1343c:	701a      	strb	r2, [r3, #0]
          NextBlock();
   1343e:	f24c 6371 	movw	r3, #50801	; 0xc671
   13442:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13446:	781b      	ldrb	r3, [r3, #0]
   13448:	3301      	adds	r3, #1
   1344a:	b2da      	uxtb	r2, r3
   1344c:	f24c 6371 	movw	r3, #50801	; 0xc671
   13450:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13454:	701a      	strb	r2, [r3, #0]
   13456:	f24c 6370 	movw	r3, #50800	; 0xc670
   1345a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1345e:	2200      	movs	r2, #0
   13460:	701a      	strb	r2, [r3, #0]
   13462:	f24c 6386 	movw	r3, #50822	; 0xc686
   13466:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1346a:	2200      	movs	r2, #0
   1346c:	801a      	strh	r2, [r3, #0]
   1346e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13472:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13476:	681a      	ldr	r2, [r3, #0]
   13478:	f24c 6374 	movw	r3, #50804	; 0xc674
   1347c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13480:	601a      	str	r2, [r3, #0]
   13482:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13486:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1348a:	681a      	ldr	r2, [r3, #0]
   1348c:	f24c 6378 	movw	r3, #50808	; 0xc678
   13490:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13494:	601a      	str	r2, [r3, #0]
   13496:	f24c 6384 	movw	r3, #50820	; 0xc684
   1349a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1349e:	2200      	movs	r2, #0
   134a0:	801a      	strh	r2, [r3, #0]
   134a2:	f24c 6388 	movw	r3, #50824	; 0xc688
   134a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134aa:	f04f 0200 	mov.w	r2, #0
   134ae:	601a      	str	r2, [r3, #0]
   134b0:	f001 ba00 	b.w	148b4 <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
   134b4:	f24c 6371 	movw	r3, #50801	; 0xc671
   134b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134bc:	781b      	ldrb	r3, [r3, #0]
   134be:	2b03      	cmp	r3, #3
   134c0:	f040 8388 	bne.w	13bd4 <auto_nav+0x14c4>
{
    nav_block = 3;
   134c4:	f24c 6371 	movw	r3, #50801	; 0xc671
   134c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134cc:	2203      	movs	r2, #3
   134ce:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
   134d0:	f24c 3300 	movw	r3, #49920	; 0xc300
   134d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134d8:	781b      	ldrb	r3, [r3, #0]
   134da:	2b00      	cmp	r3, #0
   134dc:	d007      	beq.n	134ee <auto_nav+0xdde>
   134de:	f24c 3300 	movw	r3, #49920	; 0xc300
   134e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134e6:	2200      	movs	r2, #0
   134e8:	701a      	strb	r2, [r3, #0]
   134ea:	2301      	movs	r3, #1
   134ec:	e000      	b.n	134f0 <auto_nav+0xde0>
   134ee:	2300      	movs	r3, #0
   134f0:	2b00      	cmp	r3, #0
   134f2:	d034      	beq.n	1355e <auto_nav+0xe4e>
   134f4:	f24c 6371 	movw	r3, #50801	; 0xc671
   134f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134fc:	2204      	movs	r2, #4
   134fe:	701a      	strb	r2, [r3, #0]
   13500:	f24c 6370 	movw	r3, #50800	; 0xc670
   13504:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13508:	2200      	movs	r2, #0
   1350a:	701a      	strb	r2, [r3, #0]
   1350c:	f24c 6386 	movw	r3, #50822	; 0xc686
   13510:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13514:	2200      	movs	r2, #0
   13516:	801a      	strh	r2, [r3, #0]
   13518:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1351c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13520:	681a      	ldr	r2, [r3, #0]
   13522:	f24c 6374 	movw	r3, #50804	; 0xc674
   13526:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1352a:	601a      	str	r2, [r3, #0]
   1352c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13530:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13534:	681a      	ldr	r2, [r3, #0]
   13536:	f24c 6378 	movw	r3, #50808	; 0xc678
   1353a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1353e:	601a      	str	r2, [r3, #0]
   13540:	f24c 6384 	movw	r3, #50820	; 0xc684
   13544:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13548:	2200      	movs	r2, #0
   1354a:	801a      	strh	r2, [r3, #0]
   1354c:	f24c 6388 	movw	r3, #50824	; 0xc688
   13550:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13554:	f04f 0200 	mov.w	r2, #0
   13558:	601a      	str	r2, [r3, #0]
   1355a:	f001 b9ab 	b.w	148b4 <auto_nav+0x21a4>
    if(nav_stage == 0)
   1355e:	f24c 6370 	movw	r3, #50800	; 0xc670
   13562:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13566:	781b      	ldrb	r3, [r3, #0]
   13568:	2b00      	cmp	r3, #0
   1356a:	f040 82ea 	bne.w	13b42 <auto_nav+0x1432>
    {
        nav_stage = 0;
   1356e:	f24c 6370 	movw	r3, #50800	; 0xc670
   13572:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13576:	2200      	movs	r2, #0
   13578:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
   1357a:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
   1357e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13582:	781b      	ldrb	r3, [r3, #0]
   13584:	2b02      	cmp	r3, #2
   13586:	f040 81a5 	bne.w	138d4 <auto_nav+0x11c4>
   1358a:	f24c 4320 	movw	r3, #50208	; 0xc420
   1358e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13592:	88db      	ldrh	r3, [r3, #6]
   13594:	84fb      	strh	r3, [r7, #38]	; 0x26
   13596:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   1359a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   1359e:	dc04      	bgt.n	135aa <auto_nav+0xe9a>
   135a0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   135a4:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   135a8:	da7e      	bge.n	136a8 <auto_nav+0xf98>
   135aa:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   135ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135b2:	681b      	ldr	r3, [r3, #0]
   135b4:	4618      	mov	r0, r3
   135b6:	f004 fb69 	bl	17c8c <__aeabi_f2d>
   135ba:	4604      	mov	r4, r0
   135bc:	460d      	mov	r5, r1
   135be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   135c2:	4618      	mov	r0, r3
   135c4:	f004 ffa2 	bl	1850c <__aeabi_i2f>
   135c8:	4603      	mov	r3, r0
   135ca:	4618      	mov	r0, r3
   135cc:	f04f 0100 	mov.w	r1, #0
   135d0:	f2c4 6116 	movt	r1, #17942	; 0x4616
   135d4:	f005 f8a2 	bl	1871c <__aeabi_fdiv>
   135d8:	4603      	mov	r3, r0
   135da:	4618      	mov	r0, r3
   135dc:	f004 fb56 	bl	17c8c <__aeabi_f2d>
   135e0:	4602      	mov	r2, r0
   135e2:	460b      	mov	r3, r1
   135e4:	4610      	mov	r0, r2
   135e6:	4619      	mov	r1, r3
   135e8:	f04f 0200 	mov.w	r2, #0
   135ec:	f04f 0300 	mov.w	r3, #0
   135f0:	f2cc 0334 	movt	r3, #49204	; 0xc034
   135f4:	f004 fb9e 	bl	17d34 <__aeabi_dmul>
   135f8:	4602      	mov	r2, r0
   135fa:	460b      	mov	r3, r1
   135fc:	4610      	mov	r0, r2
   135fe:	4619      	mov	r1, r3
   13600:	f04f 0200 	mov.w	r2, #0
   13604:	f04f 0300 	mov.w	r3, #0
   13608:	f004 f9e2 	bl	179d0 <__adddf3>
   1360c:	4602      	mov	r2, r0
   1360e:	460b      	mov	r3, r1
   13610:	4620      	mov	r0, r4
   13612:	4629      	mov	r1, r5
   13614:	f004 f9dc 	bl	179d0 <__adddf3>
   13618:	4602      	mov	r2, r0
   1361a:	460b      	mov	r3, r1
   1361c:	4610      	mov	r0, r2
   1361e:	4619      	mov	r1, r3
   13620:	f004 fe6a 	bl	182f8 <__aeabi_d2f>
   13624:	4602      	mov	r2, r0
   13626:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   1362a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1362e:	601a      	str	r2, [r3, #0]
   13630:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   13634:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13638:	681b      	ldr	r3, [r3, #0]
   1363a:	4618      	mov	r0, r3
   1363c:	f04f 0100 	mov.w	r1, #0
   13640:	f2c4 317a 	movt	r1, #17274	; 0x437a
   13644:	f005 f95e 	bl	18904 <__aeabi_fcmple>
   13648:	4603      	mov	r3, r0
   1364a:	2b00      	cmp	r3, #0
   1364c:	d005      	beq.n	1365a <auto_nav+0xf4a>
   1364e:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   13652:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13656:	681a      	ldr	r2, [r3, #0]
   13658:	e003      	b.n	13662 <auto_nav+0xf52>
   1365a:	f04f 0200 	mov.w	r2, #0
   1365e:	f2c4 327a 	movt	r2, #17274	; 0x437a
   13662:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   13666:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1366a:	601a      	str	r2, [r3, #0]
   1366c:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   13670:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13674:	681b      	ldr	r3, [r3, #0]
   13676:	4618      	mov	r0, r3
   13678:	f04f 0100 	mov.w	r1, #0
   1367c:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   13680:	f005 f94a 	bl	18918 <__aeabi_fcmpge>
   13684:	4603      	mov	r3, r0
   13686:	2b00      	cmp	r3, #0
   13688:	d005      	beq.n	13696 <auto_nav+0xf86>
   1368a:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   1368e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13692:	681a      	ldr	r2, [r3, #0]
   13694:	e003      	b.n	1369e <auto_nav+0xf8e>
   13696:	f04f 0200 	mov.w	r2, #0
   1369a:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   1369e:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   136a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   136a6:	601a      	str	r2, [r3, #0]
   136a8:	f24c 4320 	movw	r3, #50208	; 0xc420
   136ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   136b0:	889b      	ldrh	r3, [r3, #4]
   136b2:	84bb      	strh	r3, [r7, #36]	; 0x24
   136b4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   136b8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   136bc:	dc04      	bgt.n	136c8 <auto_nav+0xfb8>
   136be:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   136c2:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   136c6:	da7e      	bge.n	137c6 <auto_nav+0x10b6>
   136c8:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   136cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   136d0:	681b      	ldr	r3, [r3, #0]
   136d2:	4618      	mov	r0, r3
   136d4:	f004 fada 	bl	17c8c <__aeabi_f2d>
   136d8:	4604      	mov	r4, r0
   136da:	460d      	mov	r5, r1
   136dc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   136e0:	4618      	mov	r0, r3
   136e2:	f004 ff13 	bl	1850c <__aeabi_i2f>
   136e6:	4603      	mov	r3, r0
   136e8:	4618      	mov	r0, r3
   136ea:	f04f 0100 	mov.w	r1, #0
   136ee:	f2c4 6116 	movt	r1, #17942	; 0x4616
   136f2:	f005 f813 	bl	1871c <__aeabi_fdiv>
   136f6:	4603      	mov	r3, r0
   136f8:	4618      	mov	r0, r3
   136fa:	f004 fac7 	bl	17c8c <__aeabi_f2d>
   136fe:	4602      	mov	r2, r0
   13700:	460b      	mov	r3, r1
   13702:	4610      	mov	r0, r2
   13704:	4619      	mov	r1, r3
   13706:	f04f 0200 	mov.w	r2, #0
   1370a:	f04f 0300 	mov.w	r3, #0
   1370e:	f2cc 0334 	movt	r3, #49204	; 0xc034
   13712:	f004 fb0f 	bl	17d34 <__aeabi_dmul>
   13716:	4602      	mov	r2, r0
   13718:	460b      	mov	r3, r1
   1371a:	4610      	mov	r0, r2
   1371c:	4619      	mov	r1, r3
   1371e:	f04f 0200 	mov.w	r2, #0
   13722:	f04f 0300 	mov.w	r3, #0
   13726:	f004 f953 	bl	179d0 <__adddf3>
   1372a:	4602      	mov	r2, r0
   1372c:	460b      	mov	r3, r1
   1372e:	4620      	mov	r0, r4
   13730:	4629      	mov	r1, r5
   13732:	f004 f94d 	bl	179d0 <__adddf3>
   13736:	4602      	mov	r2, r0
   13738:	460b      	mov	r3, r1
   1373a:	4610      	mov	r0, r2
   1373c:	4619      	mov	r1, r3
   1373e:	f004 fddb 	bl	182f8 <__aeabi_d2f>
   13742:	4602      	mov	r2, r0
   13744:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   13748:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1374c:	601a      	str	r2, [r3, #0]
   1374e:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   13752:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13756:	681b      	ldr	r3, [r3, #0]
   13758:	4618      	mov	r0, r3
   1375a:	f04f 0100 	mov.w	r1, #0
   1375e:	f2c4 317a 	movt	r1, #17274	; 0x437a
   13762:	f005 f8cf 	bl	18904 <__aeabi_fcmple>
   13766:	4603      	mov	r3, r0
   13768:	2b00      	cmp	r3, #0
   1376a:	d005      	beq.n	13778 <auto_nav+0x1068>
   1376c:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   13770:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13774:	681a      	ldr	r2, [r3, #0]
   13776:	e003      	b.n	13780 <auto_nav+0x1070>
   13778:	f04f 0200 	mov.w	r2, #0
   1377c:	f2c4 327a 	movt	r2, #17274	; 0x437a
   13780:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   13784:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13788:	601a      	str	r2, [r3, #0]
   1378a:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   1378e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13792:	681b      	ldr	r3, [r3, #0]
   13794:	4618      	mov	r0, r3
   13796:	f04f 0100 	mov.w	r1, #0
   1379a:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   1379e:	f005 f8bb 	bl	18918 <__aeabi_fcmpge>
   137a2:	4603      	mov	r3, r0
   137a4:	2b00      	cmp	r3, #0
   137a6:	d005      	beq.n	137b4 <auto_nav+0x10a4>
   137a8:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   137ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   137b0:	681a      	ldr	r2, [r3, #0]
   137b2:	e003      	b.n	137bc <auto_nav+0x10ac>
   137b4:	f04f 0200 	mov.w	r2, #0
   137b8:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   137bc:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   137c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   137c4:	601a      	str	r2, [r3, #0]
   137c6:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   137ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   137ce:	2203      	movs	r2, #3
   137d0:	701a      	strb	r2, [r3, #0]
   137d2:	f24c 4320 	movw	r3, #50208	; 0xc420
   137d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   137da:	885b      	ldrh	r3, [r3, #2]
   137dc:	847b      	strh	r3, [r7, #34]	; 0x22
   137de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   137e2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   137e6:	dc04      	bgt.n	137f2 <auto_nav+0x10e2>
   137e8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   137ec:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   137f0:	da70      	bge.n	138d4 <auto_nav+0x11c4>
   137f2:	f240 5374 	movw	r3, #1396	; 0x574
   137f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   137fa:	681b      	ldr	r3, [r3, #0]
   137fc:	4618      	mov	r0, r3
   137fe:	f004 fa45 	bl	17c8c <__aeabi_f2d>
   13802:	4604      	mov	r4, r0
   13804:	460d      	mov	r5, r1
   13806:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   1380a:	4618      	mov	r0, r3
   1380c:	f004 fe7e 	bl	1850c <__aeabi_i2f>
   13810:	4603      	mov	r3, r0
   13812:	4618      	mov	r0, r3
   13814:	f04f 0100 	mov.w	r1, #0
   13818:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1381c:	f004 ff7e 	bl	1871c <__aeabi_fdiv>
   13820:	4603      	mov	r3, r0
   13822:	4618      	mov	r0, r3
   13824:	f004 fa32 	bl	17c8c <__aeabi_f2d>
   13828:	4602      	mov	r2, r0
   1382a:	460b      	mov	r3, r1
   1382c:	f04f 0000 	mov.w	r0, #0
   13830:	f04f 0100 	mov.w	r1, #0
   13834:	f004 f8ca 	bl	179cc <__aeabi_dsub>
   13838:	4602      	mov	r2, r0
   1383a:	460b      	mov	r3, r1
   1383c:	4620      	mov	r0, r4
   1383e:	4629      	mov	r1, r5
   13840:	f004 f8c6 	bl	179d0 <__adddf3>
   13844:	4602      	mov	r2, r0
   13846:	460b      	mov	r3, r1
   13848:	4610      	mov	r0, r2
   1384a:	4619      	mov	r1, r3
   1384c:	f004 fd54 	bl	182f8 <__aeabi_d2f>
   13850:	4602      	mov	r2, r0
   13852:	f240 5374 	movw	r3, #1396	; 0x574
   13856:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1385a:	601a      	str	r2, [r3, #0]
   1385c:	f240 5374 	movw	r3, #1396	; 0x574
   13860:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13864:	681b      	ldr	r3, [r3, #0]
   13866:	4618      	mov	r0, r3
   13868:	f04f 0100 	mov.w	r1, #0
   1386c:	f2c4 312f 	movt	r1, #17199	; 0x432f
   13870:	f005 f852 	bl	18918 <__aeabi_fcmpge>
   13874:	4603      	mov	r3, r0
   13876:	2b00      	cmp	r3, #0
   13878:	d005      	beq.n	13886 <auto_nav+0x1176>
   1387a:	f240 5374 	movw	r3, #1396	; 0x574
   1387e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13882:	681a      	ldr	r2, [r3, #0]
   13884:	e003      	b.n	1388e <auto_nav+0x117e>
   13886:	f04f 0200 	mov.w	r2, #0
   1388a:	f2c4 322f 	movt	r2, #17199	; 0x432f
   1388e:	f240 5374 	movw	r3, #1396	; 0x574
   13892:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13896:	601a      	str	r2, [r3, #0]
   13898:	f240 5374 	movw	r3, #1396	; 0x574
   1389c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138a0:	681b      	ldr	r3, [r3, #0]
   138a2:	4618      	mov	r0, r3
   138a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   138a8:	f2c4 3189 	movt	r1, #17289	; 0x4389
   138ac:	f005 f82a 	bl	18904 <__aeabi_fcmple>
   138b0:	4603      	mov	r3, r0
   138b2:	2b00      	cmp	r3, #0
   138b4:	d005      	beq.n	138c2 <auto_nav+0x11b2>
   138b6:	f240 5374 	movw	r3, #1396	; 0x574
   138ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138be:	681a      	ldr	r2, [r3, #0]
   138c0:	e003      	b.n	138ca <auto_nav+0x11ba>
   138c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   138c6:	f2c4 3289 	movt	r2, #17289	; 0x4389
   138ca:	f240 5374 	movw	r3, #1396	; 0x574
   138ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   138d2:	601a      	str	r2, [r3, #0]
   138d4:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   138d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138dc:	681a      	ldr	r2, [r3, #0]
   138de:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   138e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138e6:	681b      	ldr	r3, [r3, #0]
   138e8:	4610      	mov	r0, r2
   138ea:	4619      	mov	r1, r3
   138ec:	f004 fd58 	bl	183a0 <__aeabi_fsub>
   138f0:	4603      	mov	r3, r0
   138f2:	4618      	mov	r0, r3
   138f4:	f004 f9ca 	bl	17c8c <__aeabi_f2d>
   138f8:	4604      	mov	r4, r0
   138fa:	460d      	mov	r5, r1
   138fc:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13900:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13904:	681a      	ldr	r2, [r3, #0]
   13906:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   1390a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1390e:	681b      	ldr	r3, [r3, #0]
   13910:	4610      	mov	r0, r2
   13912:	4619      	mov	r1, r3
   13914:	f004 fd44 	bl	183a0 <__aeabi_fsub>
   13918:	4603      	mov	r3, r0
   1391a:	4618      	mov	r0, r3
   1391c:	f004 f9b6 	bl	17c8c <__aeabi_f2d>
   13920:	4602      	mov	r2, r0
   13922:	460b      	mov	r3, r1
   13924:	4620      	mov	r0, r4
   13926:	4629      	mov	r1, r5
   13928:	f002 fa12 	bl	15d50 <pp_atan2>
   1392c:	4602      	mov	r2, r0
   1392e:	460b      	mov	r3, r1
   13930:	4610      	mov	r0, r2
   13932:	4619      	mov	r1, r3
   13934:	f004 fce0 	bl	182f8 <__aeabi_d2f>
   13938:	4603      	mov	r3, r0
   1393a:	61fb      	str	r3, [r7, #28]
   1393c:	69f8      	ldr	r0, [r7, #28]
   1393e:	f004 f9a5 	bl	17c8c <__aeabi_f2d>
   13942:	4604      	mov	r4, r0
   13944:	460d      	mov	r5, r1
   13946:	f64c 1304 	movw	r3, #51460	; 0xc904
   1394a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1394e:	681b      	ldr	r3, [r3, #0]
   13950:	4618      	mov	r0, r3
   13952:	f04f 0100 	mov.w	r1, #0
   13956:	f2cc 2148 	movt	r1, #49736	; 0xc248
   1395a:	f004 fe2b 	bl	185b4 <__aeabi_fmul>
   1395e:	4603      	mov	r3, r0
   13960:	4618      	mov	r0, r3
   13962:	f004 f993 	bl	17c8c <__aeabi_f2d>
   13966:	4602      	mov	r2, r0
   13968:	460b      	mov	r3, r1
   1396a:	f04f 0000 	mov.w	r0, #0
   1396e:	f04f 0100 	mov.w	r1, #0
   13972:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13976:	f004 fb07 	bl	17f88 <__aeabi_ddiv>
   1397a:	4602      	mov	r2, r0
   1397c:	460b      	mov	r3, r1
   1397e:	4620      	mov	r0, r4
   13980:	4629      	mov	r1, r5
   13982:	f004 f825 	bl	179d0 <__adddf3>
   13986:	4602      	mov	r2, r0
   13988:	460b      	mov	r3, r1
   1398a:	4610      	mov	r0, r2
   1398c:	4619      	mov	r1, r3
   1398e:	f004 fcb3 	bl	182f8 <__aeabi_d2f>
   13992:	4603      	mov	r3, r0
   13994:	61bb      	str	r3, [r7, #24]
   13996:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   1399a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1399e:	681b      	ldr	r3, [r3, #0]
   139a0:	4618      	mov	r0, r3
   139a2:	f004 f973 	bl	17c8c <__aeabi_f2d>
   139a6:	4604      	mov	r4, r0
   139a8:	460d      	mov	r5, r1
   139aa:	69b8      	ldr	r0, [r7, #24]
   139ac:	f004 f96e 	bl	17c8c <__aeabi_f2d>
   139b0:	4602      	mov	r2, r0
   139b2:	460b      	mov	r3, r1
   139b4:	4610      	mov	r0, r2
   139b6:	4619      	mov	r1, r3
   139b8:	a3b1      	add	r3, pc, #708	; (adr r3, 13c80 <auto_nav+0x1570>)
   139ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   139be:	f004 f807 	bl	179d0 <__adddf3>
   139c2:	4602      	mov	r2, r0
   139c4:	460b      	mov	r3, r1
   139c6:	4610      	mov	r0, r2
   139c8:	4619      	mov	r1, r3
   139ca:	f002 fa81 	bl	15ed0 <pp_sin>
   139ce:	4602      	mov	r2, r0
   139d0:	460b      	mov	r3, r1
   139d2:	4610      	mov	r0, r2
   139d4:	4619      	mov	r1, r3
   139d6:	f04f 0200 	mov.w	r2, #0
   139da:	f04f 0300 	mov.w	r3, #0
   139de:	f2c4 0349 	movt	r3, #16457	; 0x4049
   139e2:	f004 f9a7 	bl	17d34 <__aeabi_dmul>
   139e6:	4602      	mov	r2, r0
   139e8:	460b      	mov	r3, r1
   139ea:	4620      	mov	r0, r4
   139ec:	4629      	mov	r1, r5
   139ee:	f003 ffef 	bl	179d0 <__adddf3>
   139f2:	4602      	mov	r2, r0
   139f4:	460b      	mov	r3, r1
   139f6:	4610      	mov	r0, r2
   139f8:	4619      	mov	r1, r3
   139fa:	f004 fc7d 	bl	182f8 <__aeabi_d2f>
   139fe:	4606      	mov	r6, r0
   13a00:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   13a04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a08:	681b      	ldr	r3, [r3, #0]
   13a0a:	4618      	mov	r0, r3
   13a0c:	f004 f93e 	bl	17c8c <__aeabi_f2d>
   13a10:	4604      	mov	r4, r0
   13a12:	460d      	mov	r5, r1
   13a14:	69b8      	ldr	r0, [r7, #24]
   13a16:	f004 f939 	bl	17c8c <__aeabi_f2d>
   13a1a:	4602      	mov	r2, r0
   13a1c:	460b      	mov	r3, r1
   13a1e:	4610      	mov	r0, r2
   13a20:	4619      	mov	r1, r3
   13a22:	f002 fa55 	bl	15ed0 <pp_sin>
   13a26:	4602      	mov	r2, r0
   13a28:	460b      	mov	r3, r1
   13a2a:	4610      	mov	r0, r2
   13a2c:	4619      	mov	r1, r3
   13a2e:	f04f 0200 	mov.w	r2, #0
   13a32:	f04f 0300 	mov.w	r3, #0
   13a36:	f2c4 0349 	movt	r3, #16457	; 0x4049
   13a3a:	f004 f97b 	bl	17d34 <__aeabi_dmul>
   13a3e:	4602      	mov	r2, r0
   13a40:	460b      	mov	r3, r1
   13a42:	4620      	mov	r0, r4
   13a44:	4629      	mov	r1, r5
   13a46:	f003 ffc3 	bl	179d0 <__adddf3>
   13a4a:	4602      	mov	r2, r0
   13a4c:	460b      	mov	r3, r1
   13a4e:	4610      	mov	r0, r2
   13a50:	4619      	mov	r1, r3
   13a52:	f004 fc51 	bl	182f8 <__aeabi_d2f>
   13a56:	4603      	mov	r3, r0
   13a58:	4630      	mov	r0, r6
   13a5a:	4619      	mov	r1, r3
   13a5c:	f001 f81c 	bl	14a98 <fly_to_xy>
   13a60:	69b8      	ldr	r0, [r7, #24]
   13a62:	f004 f913 	bl	17c8c <__aeabi_f2d>
   13a66:	4602      	mov	r2, r0
   13a68:	460b      	mov	r3, r1
   13a6a:	a185      	add	r1, pc, #532	; (adr r1, 13c80 <auto_nav+0x1570>)
   13a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
   13a70:	f003 ffac 	bl	179cc <__aeabi_dsub>
   13a74:	4602      	mov	r2, r0
   13a76:	460b      	mov	r3, r1
   13a78:	4610      	mov	r0, r2
   13a7a:	4619      	mov	r1, r3
   13a7c:	a382      	add	r3, pc, #520	; (adr r3, 13c88 <auto_nav+0x1578>)
   13a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   13a82:	f004 fa81 	bl	17f88 <__aeabi_ddiv>
   13a86:	4602      	mov	r2, r0
   13a88:	460b      	mov	r3, r1
   13a8a:	4610      	mov	r0, r2
   13a8c:	4619      	mov	r1, r3
   13a8e:	f04f 0200 	mov.w	r2, #0
   13a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13a96:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13a9a:	f004 f94b 	bl	17d34 <__aeabi_dmul>
   13a9e:	4602      	mov	r2, r0
   13aa0:	460b      	mov	r3, r1
   13aa2:	4610      	mov	r0, r2
   13aa4:	4619      	mov	r1, r3
   13aa6:	f004 fc27 	bl	182f8 <__aeabi_d2f>
   13aaa:	4602      	mov	r2, r0
   13aac:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ab4:	601a      	str	r2, [r3, #0]
   13ab6:	e012      	b.n	13ade <auto_nav+0x13ce>
   13ab8:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13abc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ac0:	681b      	ldr	r3, [r3, #0]
   13ac2:	4618      	mov	r0, r3
   13ac4:	f04f 0100 	mov.w	r1, #0
   13ac8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13acc:	f004 fc6a 	bl	183a4 <__addsf3>
   13ad0:	4603      	mov	r3, r0
   13ad2:	461a      	mov	r2, r3
   13ad4:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13ad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13adc:	601a      	str	r2, [r3, #0]
   13ade:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ae6:	681b      	ldr	r3, [r3, #0]
   13ae8:	4618      	mov	r0, r3
   13aea:	f04f 0100 	mov.w	r1, #0
   13aee:	f004 feff 	bl	188f0 <__aeabi_fcmplt>
   13af2:	4603      	mov	r3, r0
   13af4:	2b00      	cmp	r3, #0
   13af6:	d1df      	bne.n	13ab8 <auto_nav+0x13a8>
   13af8:	e012      	b.n	13b20 <auto_nav+0x1410>
   13afa:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13afe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b02:	681b      	ldr	r3, [r3, #0]
   13b04:	4618      	mov	r0, r3
   13b06:	f04f 0100 	mov.w	r1, #0
   13b0a:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13b0e:	f004 fc47 	bl	183a0 <__aeabi_fsub>
   13b12:	4603      	mov	r3, r0
   13b14:	461a      	mov	r2, r3
   13b16:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13b1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b1e:	601a      	str	r2, [r3, #0]
   13b20:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13b24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b28:	681b      	ldr	r3, [r3, #0]
   13b2a:	4618      	mov	r0, r3
   13b2c:	f04f 0100 	mov.w	r1, #0
   13b30:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13b34:	f004 fef0 	bl	18918 <__aeabi_fcmpge>
   13b38:	4603      	mov	r3, r0
   13b3a:	2b00      	cmp	r3, #0
   13b3c:	d1dd      	bne.n	13afa <auto_nav+0x13ea>
        return;
   13b3e:	f000 beb9 	b.w	148b4 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13b42:	f24c 6370 	movw	r3, #50800	; 0xc670
   13b46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b4a:	781b      	ldrb	r3, [r3, #0]
   13b4c:	2b01      	cmp	r3, #1
   13b4e:	f040 86b1 	bne.w	148b4 <auto_nav+0x21a4>
    {
        nav_stage = 1;
   13b52:	f24c 6370 	movw	r3, #50800	; 0xc670
   13b56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b5a:	2201      	movs	r2, #1
   13b5c:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13b5e:	f24c 6371 	movw	r3, #50801	; 0xc671
   13b62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b66:	781b      	ldrb	r3, [r3, #0]
   13b68:	3301      	adds	r3, #1
   13b6a:	b2da      	uxtb	r2, r3
   13b6c:	f24c 6371 	movw	r3, #50801	; 0xc671
   13b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b74:	701a      	strb	r2, [r3, #0]
   13b76:	f24c 6370 	movw	r3, #50800	; 0xc670
   13b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b7e:	2200      	movs	r2, #0
   13b80:	701a      	strb	r2, [r3, #0]
   13b82:	f24c 6386 	movw	r3, #50822	; 0xc686
   13b86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b8a:	2200      	movs	r2, #0
   13b8c:	801a      	strh	r2, [r3, #0]
   13b8e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13b92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b96:	681a      	ldr	r2, [r3, #0]
   13b98:	f24c 6374 	movw	r3, #50804	; 0xc674
   13b9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ba0:	601a      	str	r2, [r3, #0]
   13ba2:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13ba6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13baa:	681a      	ldr	r2, [r3, #0]
   13bac:	f24c 6378 	movw	r3, #50808	; 0xc678
   13bb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bb4:	601a      	str	r2, [r3, #0]
   13bb6:	f24c 6384 	movw	r3, #50820	; 0xc684
   13bba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bbe:	2200      	movs	r2, #0
   13bc0:	801a      	strh	r2, [r3, #0]
   13bc2:	f24c 6388 	movw	r3, #50824	; 0xc688
   13bc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bca:	f04f 0200 	mov.w	r2, #0
   13bce:	601a      	str	r2, [r3, #0]
   13bd0:	f000 be70 	b.w	148b4 <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
   13bd4:	f24c 6371 	movw	r3, #50801	; 0xc671
   13bd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bdc:	781b      	ldrb	r3, [r3, #0]
   13bde:	2b04      	cmp	r3, #4
   13be0:	f040 8202 	bne.w	13fe8 <auto_nav+0x18d8>
{
    nav_block = 4;
   13be4:	f24c 6371 	movw	r3, #50801	; 0xc671
   13be8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bec:	2204      	movs	r2, #4
   13bee:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
   13bf0:	f24c 3300 	movw	r3, #49920	; 0xc300
   13bf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13bf8:	781b      	ldrb	r3, [r3, #0]
   13bfa:	2b00      	cmp	r3, #0
   13bfc:	d007      	beq.n	13c0e <auto_nav+0x14fe>
   13bfe:	f24c 3300 	movw	r3, #49920	; 0xc300
   13c02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c06:	2200      	movs	r2, #0
   13c08:	701a      	strb	r2, [r3, #0]
   13c0a:	2301      	movs	r3, #1
   13c0c:	e000      	b.n	13c10 <auto_nav+0x1500>
   13c0e:	2300      	movs	r3, #0
   13c10:	2b00      	cmp	r3, #0
   13c12:	d03d      	beq.n	13c90 <auto_nav+0x1580>
   13c14:	f24c 6371 	movw	r3, #50801	; 0xc671
   13c18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c1c:	2205      	movs	r2, #5
   13c1e:	701a      	strb	r2, [r3, #0]
   13c20:	f24c 6370 	movw	r3, #50800	; 0xc670
   13c24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c28:	2200      	movs	r2, #0
   13c2a:	701a      	strb	r2, [r3, #0]
   13c2c:	f24c 6386 	movw	r3, #50822	; 0xc686
   13c30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c34:	2200      	movs	r2, #0
   13c36:	801a      	strh	r2, [r3, #0]
   13c38:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13c3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c40:	681a      	ldr	r2, [r3, #0]
   13c42:	f24c 6374 	movw	r3, #50804	; 0xc674
   13c46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c4a:	601a      	str	r2, [r3, #0]
   13c4c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13c50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c54:	681a      	ldr	r2, [r3, #0]
   13c56:	f24c 6378 	movw	r3, #50808	; 0xc678
   13c5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c5e:	601a      	str	r2, [r3, #0]
   13c60:	f24c 6384 	movw	r3, #50820	; 0xc684
   13c64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c68:	2200      	movs	r2, #0
   13c6a:	801a      	strh	r2, [r3, #0]
   13c6c:	f24c 6388 	movw	r3, #50824	; 0xc688
   13c70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c74:	f04f 0200 	mov.w	r2, #0
   13c78:	601a      	str	r2, [r3, #0]
   13c7a:	f000 be1b 	b.w	148b4 <auto_nav+0x21a4>
   13c7e:	bf00      	nop
   13c80:	54442d18 	.word	0x54442d18
   13c84:	3ff921fb 	.word	0x3ff921fb
   13c88:	54442d18 	.word	0x54442d18
   13c8c:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
   13c90:	f24c 6370 	movw	r3, #50800	; 0xc670
   13c94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13c98:	781b      	ldrb	r3, [r3, #0]
   13c9a:	2b00      	cmp	r3, #0
   13c9c:	f040 815b 	bne.w	13f56 <auto_nav+0x1846>
    {
        nav_stage = 0;
   13ca0:	f24c 6370 	movw	r3, #50800	; 0xc670
   13ca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ca8:	2200      	movs	r2, #0
   13caa:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13cac:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   13cb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13cb4:	2200      	movs	r2, #0
   13cb6:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13cb8:	f24c 639c 	movw	r3, #50844	; 0xc69c
   13cbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13cc0:	f04f 0200 	mov.w	r2, #0
   13cc4:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13cc6:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   13cca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13cce:	2203      	movs	r2, #3
   13cd0:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
   13cd2:	f240 5378 	movw	r3, #1400	; 0x578
   13cd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13cda:	689a      	ldr	r2, [r3, #8]
   13cdc:	f240 5374 	movw	r3, #1396	; 0x574
   13ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13ce4:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13ce6:	f24c 6364 	movw	r3, #50788	; 0xc664
   13cea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13cee:	f04f 0200 	mov.w	r2, #0
   13cf2:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
   13cf4:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13cf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13cfc:	681a      	ldr	r2, [r3, #0]
   13cfe:	f240 5378 	movw	r3, #1400	; 0x578
   13d02:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d06:	685b      	ldr	r3, [r3, #4]
   13d08:	4610      	mov	r0, r2
   13d0a:	4619      	mov	r1, r3
   13d0c:	f004 fb48 	bl	183a0 <__aeabi_fsub>
   13d10:	4603      	mov	r3, r0
   13d12:	4618      	mov	r0, r3
   13d14:	f003 ffba 	bl	17c8c <__aeabi_f2d>
   13d18:	4604      	mov	r4, r0
   13d1a:	460d      	mov	r5, r1
   13d1c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13d20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d24:	681a      	ldr	r2, [r3, #0]
   13d26:	f240 5378 	movw	r3, #1400	; 0x578
   13d2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d2e:	681b      	ldr	r3, [r3, #0]
   13d30:	4610      	mov	r0, r2
   13d32:	4619      	mov	r1, r3
   13d34:	f004 fb34 	bl	183a0 <__aeabi_fsub>
   13d38:	4603      	mov	r3, r0
   13d3a:	4618      	mov	r0, r3
   13d3c:	f003 ffa6 	bl	17c8c <__aeabi_f2d>
   13d40:	4602      	mov	r2, r0
   13d42:	460b      	mov	r3, r1
   13d44:	4620      	mov	r0, r4
   13d46:	4629      	mov	r1, r5
   13d48:	f002 f802 	bl	15d50 <pp_atan2>
   13d4c:	4602      	mov	r2, r0
   13d4e:	460b      	mov	r3, r1
   13d50:	4610      	mov	r0, r2
   13d52:	4619      	mov	r1, r3
   13d54:	f004 fad0 	bl	182f8 <__aeabi_d2f>
   13d58:	4603      	mov	r3, r0
   13d5a:	617b      	str	r3, [r7, #20]
   13d5c:	6978      	ldr	r0, [r7, #20]
   13d5e:	f003 ff95 	bl	17c8c <__aeabi_f2d>
   13d62:	4604      	mov	r4, r0
   13d64:	460d      	mov	r5, r1
   13d66:	f64c 1304 	movw	r3, #51460	; 0xc904
   13d6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d6e:	681b      	ldr	r3, [r3, #0]
   13d70:	4618      	mov	r0, r3
   13d72:	f04f 0100 	mov.w	r1, #0
   13d76:	f2cc 3116 	movt	r1, #49942	; 0xc316
   13d7a:	f004 fc1b 	bl	185b4 <__aeabi_fmul>
   13d7e:	4603      	mov	r3, r0
   13d80:	4618      	mov	r0, r3
   13d82:	f003 ff83 	bl	17c8c <__aeabi_f2d>
   13d86:	4602      	mov	r2, r0
   13d88:	460b      	mov	r3, r1
   13d8a:	f04f 0000 	mov.w	r0, #0
   13d8e:	f04f 0100 	mov.w	r1, #0
   13d92:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13d96:	f004 f8f7 	bl	17f88 <__aeabi_ddiv>
   13d9a:	4602      	mov	r2, r0
   13d9c:	460b      	mov	r3, r1
   13d9e:	4620      	mov	r0, r4
   13da0:	4629      	mov	r1, r5
   13da2:	f003 fe15 	bl	179d0 <__adddf3>
   13da6:	4602      	mov	r2, r0
   13da8:	460b      	mov	r3, r1
   13daa:	4610      	mov	r0, r2
   13dac:	4619      	mov	r1, r3
   13dae:	f004 faa3 	bl	182f8 <__aeabi_d2f>
   13db2:	4603      	mov	r3, r0
   13db4:	613b      	str	r3, [r7, #16]
   13db6:	f240 5378 	movw	r3, #1400	; 0x578
   13dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13dbe:	681b      	ldr	r3, [r3, #0]
   13dc0:	4618      	mov	r0, r3
   13dc2:	f003 ff63 	bl	17c8c <__aeabi_f2d>
   13dc6:	4604      	mov	r4, r0
   13dc8:	460d      	mov	r5, r1
   13dca:	6938      	ldr	r0, [r7, #16]
   13dcc:	f003 ff5e 	bl	17c8c <__aeabi_f2d>
   13dd0:	4602      	mov	r2, r0
   13dd2:	460b      	mov	r3, r1
   13dd4:	4610      	mov	r0, r2
   13dd6:	4619      	mov	r1, r3
   13dd8:	a3af      	add	r3, pc, #700	; (adr r3, 14098 <auto_nav+0x1988>)
   13dda:	e9d3 2300 	ldrd	r2, r3, [r3]
   13dde:	f003 fdf7 	bl	179d0 <__adddf3>
   13de2:	4602      	mov	r2, r0
   13de4:	460b      	mov	r3, r1
   13de6:	4610      	mov	r0, r2
   13de8:	4619      	mov	r1, r3
   13dea:	f002 f871 	bl	15ed0 <pp_sin>
   13dee:	4602      	mov	r2, r0
   13df0:	460b      	mov	r3, r1
   13df2:	4610      	mov	r0, r2
   13df4:	4619      	mov	r1, r3
   13df6:	a3aa      	add	r3, pc, #680	; (adr r3, 140a0 <auto_nav+0x1990>)
   13df8:	e9d3 2300 	ldrd	r2, r3, [r3]
   13dfc:	f003 ff9a 	bl	17d34 <__aeabi_dmul>
   13e00:	4602      	mov	r2, r0
   13e02:	460b      	mov	r3, r1
   13e04:	4620      	mov	r0, r4
   13e06:	4629      	mov	r1, r5
   13e08:	f003 fde2 	bl	179d0 <__adddf3>
   13e0c:	4602      	mov	r2, r0
   13e0e:	460b      	mov	r3, r1
   13e10:	4610      	mov	r0, r2
   13e12:	4619      	mov	r1, r3
   13e14:	f004 fa70 	bl	182f8 <__aeabi_d2f>
   13e18:	4606      	mov	r6, r0
   13e1a:	f240 5378 	movw	r3, #1400	; 0x578
   13e1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e22:	685b      	ldr	r3, [r3, #4]
   13e24:	4618      	mov	r0, r3
   13e26:	f003 ff31 	bl	17c8c <__aeabi_f2d>
   13e2a:	4604      	mov	r4, r0
   13e2c:	460d      	mov	r5, r1
   13e2e:	6938      	ldr	r0, [r7, #16]
   13e30:	f003 ff2c 	bl	17c8c <__aeabi_f2d>
   13e34:	4602      	mov	r2, r0
   13e36:	460b      	mov	r3, r1
   13e38:	4610      	mov	r0, r2
   13e3a:	4619      	mov	r1, r3
   13e3c:	f002 f848 	bl	15ed0 <pp_sin>
   13e40:	4602      	mov	r2, r0
   13e42:	460b      	mov	r3, r1
   13e44:	4610      	mov	r0, r2
   13e46:	4619      	mov	r1, r3
   13e48:	a395      	add	r3, pc, #596	; (adr r3, 140a0 <auto_nav+0x1990>)
   13e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   13e4e:	f003 ff71 	bl	17d34 <__aeabi_dmul>
   13e52:	4602      	mov	r2, r0
   13e54:	460b      	mov	r3, r1
   13e56:	4620      	mov	r0, r4
   13e58:	4629      	mov	r1, r5
   13e5a:	f003 fdb9 	bl	179d0 <__adddf3>
   13e5e:	4602      	mov	r2, r0
   13e60:	460b      	mov	r3, r1
   13e62:	4610      	mov	r0, r2
   13e64:	4619      	mov	r1, r3
   13e66:	f004 fa47 	bl	182f8 <__aeabi_d2f>
   13e6a:	4603      	mov	r3, r0
   13e6c:	4630      	mov	r0, r6
   13e6e:	4619      	mov	r1, r3
   13e70:	f000 fe12 	bl	14a98 <fly_to_xy>
   13e74:	6938      	ldr	r0, [r7, #16]
   13e76:	f003 ff09 	bl	17c8c <__aeabi_f2d>
   13e7a:	4602      	mov	r2, r0
   13e7c:	460b      	mov	r3, r1
   13e7e:	a186      	add	r1, pc, #536	; (adr r1, 14098 <auto_nav+0x1988>)
   13e80:	e9d1 0100 	ldrd	r0, r1, [r1]
   13e84:	f003 fda2 	bl	179cc <__aeabi_dsub>
   13e88:	4602      	mov	r2, r0
   13e8a:	460b      	mov	r3, r1
   13e8c:	4610      	mov	r0, r2
   13e8e:	4619      	mov	r1, r3
   13e90:	a385      	add	r3, pc, #532	; (adr r3, 140a8 <auto_nav+0x1998>)
   13e92:	e9d3 2300 	ldrd	r2, r3, [r3]
   13e96:	f004 f877 	bl	17f88 <__aeabi_ddiv>
   13e9a:	4602      	mov	r2, r0
   13e9c:	460b      	mov	r3, r1
   13e9e:	4610      	mov	r0, r2
   13ea0:	4619      	mov	r1, r3
   13ea2:	f04f 0200 	mov.w	r2, #0
   13ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13eaa:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13eae:	f003 ff41 	bl	17d34 <__aeabi_dmul>
   13eb2:	4602      	mov	r2, r0
   13eb4:	460b      	mov	r3, r1
   13eb6:	4610      	mov	r0, r2
   13eb8:	4619      	mov	r1, r3
   13eba:	f004 fa1d 	bl	182f8 <__aeabi_d2f>
   13ebe:	4602      	mov	r2, r0
   13ec0:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13ec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ec8:	601a      	str	r2, [r3, #0]
   13eca:	e012      	b.n	13ef2 <auto_nav+0x17e2>
   13ecc:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13ed0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ed4:	681b      	ldr	r3, [r3, #0]
   13ed6:	4618      	mov	r0, r3
   13ed8:	f04f 0100 	mov.w	r1, #0
   13edc:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13ee0:	f004 fa60 	bl	183a4 <__addsf3>
   13ee4:	4603      	mov	r3, r0
   13ee6:	461a      	mov	r2, r3
   13ee8:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13eec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ef0:	601a      	str	r2, [r3, #0]
   13ef2:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13ef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13efa:	681b      	ldr	r3, [r3, #0]
   13efc:	4618      	mov	r0, r3
   13efe:	f04f 0100 	mov.w	r1, #0
   13f02:	f004 fcf5 	bl	188f0 <__aeabi_fcmplt>
   13f06:	4603      	mov	r3, r0
   13f08:	2b00      	cmp	r3, #0
   13f0a:	d1df      	bne.n	13ecc <auto_nav+0x17bc>
   13f0c:	e012      	b.n	13f34 <auto_nav+0x1824>
   13f0e:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13f12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f16:	681b      	ldr	r3, [r3, #0]
   13f18:	4618      	mov	r0, r3
   13f1a:	f04f 0100 	mov.w	r1, #0
   13f1e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13f22:	f004 fa3d 	bl	183a0 <__aeabi_fsub>
   13f26:	4603      	mov	r3, r0
   13f28:	461a      	mov	r2, r3
   13f2a:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13f2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f32:	601a      	str	r2, [r3, #0]
   13f34:	f24c 638c 	movw	r3, #50828	; 0xc68c
   13f38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f3c:	681b      	ldr	r3, [r3, #0]
   13f3e:	4618      	mov	r0, r3
   13f40:	f04f 0100 	mov.w	r1, #0
   13f44:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13f48:	f004 fce6 	bl	18918 <__aeabi_fcmpge>
   13f4c:	4603      	mov	r3, r0
   13f4e:	2b00      	cmp	r3, #0
   13f50:	d1dd      	bne.n	13f0e <auto_nav+0x17fe>
        return;
   13f52:	f000 bcaf 	b.w	148b4 <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13f56:	f24c 6370 	movw	r3, #50800	; 0xc670
   13f5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f5e:	781b      	ldrb	r3, [r3, #0]
   13f60:	2b01      	cmp	r3, #1
   13f62:	f040 84a7 	bne.w	148b4 <auto_nav+0x21a4>
    {
        nav_stage =1;
   13f66:	f24c 6370 	movw	r3, #50800	; 0xc670
   13f6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f6e:	2201      	movs	r2, #1
   13f70:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13f72:	f24c 6371 	movw	r3, #50801	; 0xc671
   13f76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f7a:	781b      	ldrb	r3, [r3, #0]
   13f7c:	3301      	adds	r3, #1
   13f7e:	b2da      	uxtb	r2, r3
   13f80:	f24c 6371 	movw	r3, #50801	; 0xc671
   13f84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f88:	701a      	strb	r2, [r3, #0]
   13f8a:	f24c 6370 	movw	r3, #50800	; 0xc670
   13f8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f92:	2200      	movs	r2, #0
   13f94:	701a      	strb	r2, [r3, #0]
   13f96:	f24c 6386 	movw	r3, #50822	; 0xc686
   13f9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f9e:	2200      	movs	r2, #0
   13fa0:	801a      	strh	r2, [r3, #0]
   13fa2:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13fa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13faa:	681a      	ldr	r2, [r3, #0]
   13fac:	f24c 6374 	movw	r3, #50804	; 0xc674
   13fb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fb4:	601a      	str	r2, [r3, #0]
   13fb6:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   13fba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fbe:	681a      	ldr	r2, [r3, #0]
   13fc0:	f24c 6378 	movw	r3, #50808	; 0xc678
   13fc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fc8:	601a      	str	r2, [r3, #0]
   13fca:	f24c 6384 	movw	r3, #50820	; 0xc684
   13fce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fd2:	2200      	movs	r2, #0
   13fd4:	801a      	strh	r2, [r3, #0]
   13fd6:	f24c 6388 	movw	r3, #50824	; 0xc688
   13fda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fde:	f04f 0200 	mov.w	r2, #0
   13fe2:	601a      	str	r2, [r3, #0]
   13fe4:	f000 bc66 	b.w	148b4 <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
   13fe8:	f24c 6371 	movw	r3, #50801	; 0xc671
   13fec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ff0:	781b      	ldrb	r3, [r3, #0]
   13ff2:	2b05      	cmp	r3, #5
   13ff4:	f040 845e 	bne.w	148b4 <auto_nav+0x21a4>
{
    nav_block = 5;
   13ff8:	f24c 6371 	movw	r3, #50801	; 0xc671
   13ffc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14000:	2205      	movs	r2, #5
   14002:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
   14004:	f24c 3300 	movw	r3, #49920	; 0xc300
   14008:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1400c:	781b      	ldrb	r3, [r3, #0]
   1400e:	2b00      	cmp	r3, #0
   14010:	d007      	beq.n	14022 <auto_nav+0x1912>
   14012:	f24c 3300 	movw	r3, #49920	; 0xc300
   14016:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1401a:	2200      	movs	r2, #0
   1401c:	701a      	strb	r2, [r3, #0]
   1401e:	2301      	movs	r3, #1
   14020:	e000      	b.n	14024 <auto_nav+0x1914>
   14022:	2300      	movs	r3, #0
   14024:	2b00      	cmp	r3, #0
   14026:	d043      	beq.n	140b0 <auto_nav+0x19a0>
   14028:	f24c 6371 	movw	r3, #50801	; 0xc671
   1402c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14030:	2201      	movs	r2, #1
   14032:	701a      	strb	r2, [r3, #0]
   14034:	f24c 6370 	movw	r3, #50800	; 0xc670
   14038:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1403c:	2200      	movs	r2, #0
   1403e:	701a      	strb	r2, [r3, #0]
   14040:	f24c 6386 	movw	r3, #50822	; 0xc686
   14044:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14048:	2200      	movs	r2, #0
   1404a:	801a      	strh	r2, [r3, #0]
   1404c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14050:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14054:	681a      	ldr	r2, [r3, #0]
   14056:	f24c 6374 	movw	r3, #50804	; 0xc674
   1405a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1405e:	601a      	str	r2, [r3, #0]
   14060:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14064:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14068:	681a      	ldr	r2, [r3, #0]
   1406a:	f24c 6378 	movw	r3, #50808	; 0xc678
   1406e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14072:	601a      	str	r2, [r3, #0]
   14074:	f24c 6384 	movw	r3, #50820	; 0xc684
   14078:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1407c:	2200      	movs	r2, #0
   1407e:	801a      	strh	r2, [r3, #0]
   14080:	f24c 6388 	movw	r3, #50824	; 0xc688
   14084:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14088:	f04f 0200 	mov.w	r2, #0
   1408c:	601a      	str	r2, [r3, #0]
   1408e:	f000 bc11 	b.w	148b4 <auto_nav+0x21a4>
   14092:	bf00      	nop
   14094:	f3af 8000 	nop.w
   14098:	54442d18 	.word	0x54442d18
   1409c:	3ff921fb 	.word	0x3ff921fb
   140a0:	00000000 	.word	0x00000000
   140a4:	4062c000 	.word	0x4062c000
   140a8:	54442d18 	.word	0x54442d18
   140ac:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
   140b0:	f24c 6370 	movw	r3, #50800	; 0xc670
   140b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140b8:	781b      	ldrb	r3, [r3, #0]
   140ba:	2b00      	cmp	r3, #0
   140bc:	d133      	bne.n	14126 <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
   140be:	f24c 6370 	movw	r3, #50800	; 0xc670
   140c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140c6:	2200      	movs	r2, #0
   140c8:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
   140ca:	f24c 6370 	movw	r3, #50800	; 0xc670
   140ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140d2:	781b      	ldrb	r3, [r3, #0]
   140d4:	3301      	adds	r3, #1
   140d6:	b2da      	uxtb	r2, r3
   140d8:	f24c 6370 	movw	r3, #50800	; 0xc670
   140dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140e0:	701a      	strb	r2, [r3, #0]
   140e2:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   140e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140ea:	681a      	ldr	r2, [r3, #0]
   140ec:	f24c 6374 	movw	r3, #50804	; 0xc674
   140f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140f4:	601a      	str	r2, [r3, #0]
   140f6:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   140fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   140fe:	681a      	ldr	r2, [r3, #0]
   14100:	f24c 6378 	movw	r3, #50808	; 0xc678
   14104:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14108:	601a      	str	r2, [r3, #0]
   1410a:	f24c 6384 	movw	r3, #50820	; 0xc684
   1410e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14112:	2200      	movs	r2, #0
   14114:	801a      	strh	r2, [r3, #0]
   14116:	f24c 6388 	movw	r3, #50824	; 0xc688
   1411a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1411e:	f04f 0200 	mov.w	r2, #0
   14122:	601a      	str	r2, [r3, #0]
   14124:	e3c6      	b.n	148b4 <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
   14126:	f24c 6370 	movw	r3, #50800	; 0xc670
   1412a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1412e:	781b      	ldrb	r3, [r3, #0]
   14130:	2b01      	cmp	r3, #1
   14132:	f040 81b5 	bne.w	144a0 <auto_nav+0x1d90>
    {
        nav_stage =1;
   14136:	f24c 6370 	movw	r3, #50800	; 0xc670
   1413a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1413e:	2201      	movs	r2, #1
   14140:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   14142:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   14146:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1414a:	2200      	movs	r2, #0
   1414c:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   1414e:	f24c 639c 	movw	r3, #50844	; 0xc69c
   14152:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14156:	f04f 0200 	mov.w	r2, #0
   1415a:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1415c:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   14160:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14164:	2203      	movs	r2, #3
   14166:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
   14168:	f240 5378 	movw	r3, #1400	; 0x578
   1416c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14170:	695a      	ldr	r2, [r3, #20]
   14172:	f240 5374 	movw	r3, #1396	; 0x574
   14176:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1417a:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   1417c:	f24c 6364 	movw	r3, #50788	; 0xc664
   14180:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14184:	f04f 0200 	mov.w	r2, #0
   14188:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
   1418a:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   1418e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14192:	681a      	ldr	r2, [r3, #0]
   14194:	f240 5378 	movw	r3, #1400	; 0x578
   14198:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1419c:	691b      	ldr	r3, [r3, #16]
   1419e:	4610      	mov	r0, r2
   141a0:	4619      	mov	r1, r3
   141a2:	f004 f8fd 	bl	183a0 <__aeabi_fsub>
   141a6:	4603      	mov	r3, r0
   141a8:	4618      	mov	r0, r3
   141aa:	f003 fd6f 	bl	17c8c <__aeabi_f2d>
   141ae:	4604      	mov	r4, r0
   141b0:	460d      	mov	r5, r1
   141b2:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   141b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   141ba:	681a      	ldr	r2, [r3, #0]
   141bc:	f240 5378 	movw	r3, #1400	; 0x578
   141c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   141c4:	68db      	ldr	r3, [r3, #12]
   141c6:	4610      	mov	r0, r2
   141c8:	4619      	mov	r1, r3
   141ca:	f004 f8e9 	bl	183a0 <__aeabi_fsub>
   141ce:	4603      	mov	r3, r0
   141d0:	4618      	mov	r0, r3
   141d2:	f003 fd5b 	bl	17c8c <__aeabi_f2d>
   141d6:	4602      	mov	r2, r0
   141d8:	460b      	mov	r3, r1
   141da:	4620      	mov	r0, r4
   141dc:	4629      	mov	r1, r5
   141de:	f001 fdb7 	bl	15d50 <pp_atan2>
   141e2:	4602      	mov	r2, r0
   141e4:	460b      	mov	r3, r1
   141e6:	4610      	mov	r0, r2
   141e8:	4619      	mov	r1, r3
   141ea:	f004 f885 	bl	182f8 <__aeabi_d2f>
   141ee:	4603      	mov	r3, r0
   141f0:	60fb      	str	r3, [r7, #12]
   141f2:	68f8      	ldr	r0, [r7, #12]
   141f4:	f003 fd4a 	bl	17c8c <__aeabi_f2d>
   141f8:	4604      	mov	r4, r0
   141fa:	460d      	mov	r5, r1
   141fc:	f64c 1304 	movw	r3, #51460	; 0xc904
   14200:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14204:	681b      	ldr	r3, [r3, #0]
   14206:	4618      	mov	r0, r3
   14208:	f04f 0100 	mov.w	r1, #0
   1420c:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   14210:	f004 f9d0 	bl	185b4 <__aeabi_fmul>
   14214:	4603      	mov	r3, r0
   14216:	4618      	mov	r0, r3
   14218:	f003 fd38 	bl	17c8c <__aeabi_f2d>
   1421c:	4602      	mov	r2, r0
   1421e:	460b      	mov	r3, r1
   14220:	f04f 0000 	mov.w	r0, #0
   14224:	f04f 0100 	mov.w	r1, #0
   14228:	f2c4 0114 	movt	r1, #16404	; 0x4014
   1422c:	f003 feac 	bl	17f88 <__aeabi_ddiv>
   14230:	4602      	mov	r2, r0
   14232:	460b      	mov	r3, r1
   14234:	4620      	mov	r0, r4
   14236:	4629      	mov	r1, r5
   14238:	f003 fbca 	bl	179d0 <__adddf3>
   1423c:	4602      	mov	r2, r0
   1423e:	460b      	mov	r3, r1
   14240:	4610      	mov	r0, r2
   14242:	4619      	mov	r1, r3
   14244:	f004 f858 	bl	182f8 <__aeabi_d2f>
   14248:	4603      	mov	r3, r0
   1424a:	60bb      	str	r3, [r7, #8]
   1424c:	f240 5378 	movw	r3, #1400	; 0x578
   14250:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14254:	68db      	ldr	r3, [r3, #12]
   14256:	4618      	mov	r0, r3
   14258:	f003 fd18 	bl	17c8c <__aeabi_f2d>
   1425c:	4604      	mov	r4, r0
   1425e:	460d      	mov	r5, r1
   14260:	68b8      	ldr	r0, [r7, #8]
   14262:	f003 fd13 	bl	17c8c <__aeabi_f2d>
   14266:	4602      	mov	r2, r0
   14268:	460b      	mov	r3, r1
   1426a:	4610      	mov	r0, r2
   1426c:	4619      	mov	r1, r3
   1426e:	a388      	add	r3, pc, #544	; (adr r3, 14490 <auto_nav+0x1d80>)
   14270:	e9d3 2300 	ldrd	r2, r3, [r3]
   14274:	f003 fbac 	bl	179d0 <__adddf3>
   14278:	4602      	mov	r2, r0
   1427a:	460b      	mov	r3, r1
   1427c:	4610      	mov	r0, r2
   1427e:	4619      	mov	r1, r3
   14280:	f001 fe26 	bl	15ed0 <pp_sin>
   14284:	4602      	mov	r2, r0
   14286:	460b      	mov	r3, r1
   14288:	4610      	mov	r0, r2
   1428a:	4619      	mov	r1, r3
   1428c:	f04f 0200 	mov.w	r2, #0
   14290:	f04f 0300 	mov.w	r3, #0
   14294:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14298:	f003 fd4c 	bl	17d34 <__aeabi_dmul>
   1429c:	4602      	mov	r2, r0
   1429e:	460b      	mov	r3, r1
   142a0:	4620      	mov	r0, r4
   142a2:	4629      	mov	r1, r5
   142a4:	f003 fb94 	bl	179d0 <__adddf3>
   142a8:	4602      	mov	r2, r0
   142aa:	460b      	mov	r3, r1
   142ac:	4610      	mov	r0, r2
   142ae:	4619      	mov	r1, r3
   142b0:	f004 f822 	bl	182f8 <__aeabi_d2f>
   142b4:	4606      	mov	r6, r0
   142b6:	f240 5378 	movw	r3, #1400	; 0x578
   142ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   142be:	691b      	ldr	r3, [r3, #16]
   142c0:	4618      	mov	r0, r3
   142c2:	f003 fce3 	bl	17c8c <__aeabi_f2d>
   142c6:	4604      	mov	r4, r0
   142c8:	460d      	mov	r5, r1
   142ca:	68b8      	ldr	r0, [r7, #8]
   142cc:	f003 fcde 	bl	17c8c <__aeabi_f2d>
   142d0:	4602      	mov	r2, r0
   142d2:	460b      	mov	r3, r1
   142d4:	4610      	mov	r0, r2
   142d6:	4619      	mov	r1, r3
   142d8:	f001 fdfa 	bl	15ed0 <pp_sin>
   142dc:	4602      	mov	r2, r0
   142de:	460b      	mov	r3, r1
   142e0:	4610      	mov	r0, r2
   142e2:	4619      	mov	r1, r3
   142e4:	f04f 0200 	mov.w	r2, #0
   142e8:	f04f 0300 	mov.w	r3, #0
   142ec:	f2c4 0359 	movt	r3, #16473	; 0x4059
   142f0:	f003 fd20 	bl	17d34 <__aeabi_dmul>
   142f4:	4602      	mov	r2, r0
   142f6:	460b      	mov	r3, r1
   142f8:	4620      	mov	r0, r4
   142fa:	4629      	mov	r1, r5
   142fc:	f003 fb68 	bl	179d0 <__adddf3>
   14300:	4602      	mov	r2, r0
   14302:	460b      	mov	r3, r1
   14304:	4610      	mov	r0, r2
   14306:	4619      	mov	r1, r3
   14308:	f003 fff6 	bl	182f8 <__aeabi_d2f>
   1430c:	4603      	mov	r3, r0
   1430e:	4630      	mov	r0, r6
   14310:	4619      	mov	r1, r3
   14312:	f000 fbc1 	bl	14a98 <fly_to_xy>
   14316:	68b8      	ldr	r0, [r7, #8]
   14318:	f003 fcb8 	bl	17c8c <__aeabi_f2d>
   1431c:	4602      	mov	r2, r0
   1431e:	460b      	mov	r3, r1
   14320:	a15b      	add	r1, pc, #364	; (adr r1, 14490 <auto_nav+0x1d80>)
   14322:	e9d1 0100 	ldrd	r0, r1, [r1]
   14326:	f003 fb51 	bl	179cc <__aeabi_dsub>
   1432a:	4602      	mov	r2, r0
   1432c:	460b      	mov	r3, r1
   1432e:	4610      	mov	r0, r2
   14330:	4619      	mov	r1, r3
   14332:	a359      	add	r3, pc, #356	; (adr r3, 14498 <auto_nav+0x1d88>)
   14334:	e9d3 2300 	ldrd	r2, r3, [r3]
   14338:	f003 fe26 	bl	17f88 <__aeabi_ddiv>
   1433c:	4602      	mov	r2, r0
   1433e:	460b      	mov	r3, r1
   14340:	4610      	mov	r0, r2
   14342:	4619      	mov	r1, r3
   14344:	f04f 0200 	mov.w	r2, #0
   14348:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1434c:	f2c4 0366 	movt	r3, #16486	; 0x4066
   14350:	f003 fcf0 	bl	17d34 <__aeabi_dmul>
   14354:	4602      	mov	r2, r0
   14356:	460b      	mov	r3, r1
   14358:	4610      	mov	r0, r2
   1435a:	4619      	mov	r1, r3
   1435c:	f003 ffcc 	bl	182f8 <__aeabi_d2f>
   14360:	4602      	mov	r2, r0
   14362:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14366:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1436a:	601a      	str	r2, [r3, #0]
   1436c:	e012      	b.n	14394 <auto_nav+0x1c84>
   1436e:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14372:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14376:	681b      	ldr	r3, [r3, #0]
   14378:	4618      	mov	r0, r3
   1437a:	f04f 0100 	mov.w	r1, #0
   1437e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14382:	f004 f80f 	bl	183a4 <__addsf3>
   14386:	4603      	mov	r3, r0
   14388:	461a      	mov	r2, r3
   1438a:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1438e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14392:	601a      	str	r2, [r3, #0]
   14394:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14398:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1439c:	681b      	ldr	r3, [r3, #0]
   1439e:	4618      	mov	r0, r3
   143a0:	f04f 0100 	mov.w	r1, #0
   143a4:	f004 faa4 	bl	188f0 <__aeabi_fcmplt>
   143a8:	4603      	mov	r3, r0
   143aa:	2b00      	cmp	r3, #0
   143ac:	d1df      	bne.n	1436e <auto_nav+0x1c5e>
   143ae:	e012      	b.n	143d6 <auto_nav+0x1cc6>
   143b0:	f24c 638c 	movw	r3, #50828	; 0xc68c
   143b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143b8:	681b      	ldr	r3, [r3, #0]
   143ba:	4618      	mov	r0, r3
   143bc:	f04f 0100 	mov.w	r1, #0
   143c0:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   143c4:	f003 ffec 	bl	183a0 <__aeabi_fsub>
   143c8:	4603      	mov	r3, r0
   143ca:	461a      	mov	r2, r3
   143cc:	f24c 638c 	movw	r3, #50828	; 0xc68c
   143d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143d4:	601a      	str	r2, [r3, #0]
   143d6:	f24c 638c 	movw	r3, #50828	; 0xc68c
   143da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143de:	681b      	ldr	r3, [r3, #0]
   143e0:	4618      	mov	r0, r3
   143e2:	f04f 0100 	mov.w	r1, #0
   143e6:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   143ea:	f004 fa95 	bl	18918 <__aeabi_fcmpge>
   143ee:	4603      	mov	r3, r0
   143f0:	2b00      	cmp	r3, #0
   143f2:	d1dd      	bne.n	143b0 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
   143f4:	f24c 638c 	movw	r3, #50828	; 0xc68c
   143f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143fc:	681b      	ldr	r3, [r3, #0]
   143fe:	4618      	mov	r0, r3
   14400:	f04f 0100 	mov.w	r1, #0
   14404:	f004 fa92 	bl	1892c <__aeabi_fcmpgt>
   14408:	4603      	mov	r3, r0
   1440a:	2b00      	cmp	r3, #0
   1440c:	d100      	bne.n	14410 <auto_nav+0x1d00>
        return;
   1440e:	e251      	b.n	148b4 <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   14410:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14414:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14418:	681b      	ldr	r3, [r3, #0]
   1441a:	4618      	mov	r0, r3
   1441c:	f04f 0100 	mov.w	r1, #0
   14420:	f2c4 1120 	movt	r1, #16672	; 0x4120
   14424:	f004 fa64 	bl	188f0 <__aeabi_fcmplt>
   14428:	4603      	mov	r3, r0
   1442a:	2b00      	cmp	r3, #0
   1442c:	d100      	bne.n	14430 <auto_nav+0x1d20>
        return;
   1442e:	e241      	b.n	148b4 <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   14430:	f24c 6370 	movw	r3, #50800	; 0xc670
   14434:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14438:	781b      	ldrb	r3, [r3, #0]
   1443a:	3301      	adds	r3, #1
   1443c:	b2da      	uxtb	r2, r3
   1443e:	f24c 6370 	movw	r3, #50800	; 0xc670
   14442:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14446:	701a      	strb	r2, [r3, #0]
   14448:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1444c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14450:	681a      	ldr	r2, [r3, #0]
   14452:	f24c 6374 	movw	r3, #50804	; 0xc674
   14456:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1445a:	601a      	str	r2, [r3, #0]
   1445c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14460:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14464:	681a      	ldr	r2, [r3, #0]
   14466:	f24c 6378 	movw	r3, #50808	; 0xc678
   1446a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1446e:	601a      	str	r2, [r3, #0]
   14470:	f24c 6384 	movw	r3, #50820	; 0xc684
   14474:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14478:	2200      	movs	r2, #0
   1447a:	801a      	strh	r2, [r3, #0]
   1447c:	f24c 6388 	movw	r3, #50824	; 0xc688
   14480:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14484:	f04f 0200 	mov.w	r2, #0
   14488:	601a      	str	r2, [r3, #0]
   1448a:	e213      	b.n	148b4 <auto_nav+0x21a4>
   1448c:	f3af 8000 	nop.w
   14490:	54442d18 	.word	0x54442d18
   14494:	3ff921fb 	.word	0x3ff921fb
   14498:	54442d18 	.word	0x54442d18
   1449c:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
   144a0:	f24c 6370 	movw	r3, #50800	; 0xc670
   144a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144a8:	781b      	ldrb	r3, [r3, #0]
   144aa:	2b02      	cmp	r3, #2
   144ac:	f040 81ad 	bne.w	1480a <auto_nav+0x20fa>
    {
         nav_stage = 2;
   144b0:	f24c 6370 	movw	r3, #50800	; 0xc670
   144b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144b8:	2202      	movs	r2, #2
   144ba:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
   144bc:	f24c 23ff 	movw	r3, #49919	; 0xc2ff
   144c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144c4:	2200      	movs	r2, #0
   144c6:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   144c8:	f24c 639c 	movw	r3, #50844	; 0xc69c
   144cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144d0:	f04f 0200 	mov.w	r2, #0
   144d4:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
   144d6:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   144da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144de:	2203      	movs	r2, #3
   144e0:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
   144e2:	f240 5378 	movw	r3, #1400	; 0x578
   144e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   144ec:	f240 5374 	movw	r3, #1396	; 0x574
   144f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   144f4:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
   144f6:	f24c 6364 	movw	r3, #50788	; 0xc664
   144fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   144fe:	f04f 0200 	mov.w	r2, #0
   14502:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
   14504:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14508:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1450c:	681a      	ldr	r2, [r3, #0]
   1450e:	f240 5378 	movw	r3, #1400	; 0x578
   14512:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14518:	4610      	mov	r0, r2
   1451a:	4619      	mov	r1, r3
   1451c:	f003 ff40 	bl	183a0 <__aeabi_fsub>
   14520:	4603      	mov	r3, r0
   14522:	4618      	mov	r0, r3
   14524:	f003 fbb2 	bl	17c8c <__aeabi_f2d>
   14528:	4604      	mov	r4, r0
   1452a:	460d      	mov	r5, r1
   1452c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14530:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14534:	681a      	ldr	r2, [r3, #0]
   14536:	f240 5378 	movw	r3, #1400	; 0x578
   1453a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1453e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14540:	4610      	mov	r0, r2
   14542:	4619      	mov	r1, r3
   14544:	f003 ff2c 	bl	183a0 <__aeabi_fsub>
   14548:	4603      	mov	r3, r0
   1454a:	4618      	mov	r0, r3
   1454c:	f003 fb9e 	bl	17c8c <__aeabi_f2d>
   14550:	4602      	mov	r2, r0
   14552:	460b      	mov	r3, r1
   14554:	4620      	mov	r0, r4
   14556:	4629      	mov	r1, r5
   14558:	f001 fbfa 	bl	15d50 <pp_atan2>
   1455c:	4602      	mov	r2, r0
   1455e:	460b      	mov	r3, r1
   14560:	4610      	mov	r0, r2
   14562:	4619      	mov	r1, r3
   14564:	f003 fec8 	bl	182f8 <__aeabi_d2f>
   14568:	4603      	mov	r3, r0
   1456a:	607b      	str	r3, [r7, #4]
   1456c:	6878      	ldr	r0, [r7, #4]
   1456e:	f003 fb8d 	bl	17c8c <__aeabi_f2d>
   14572:	4604      	mov	r4, r0
   14574:	460d      	mov	r5, r1
   14576:	f64c 1304 	movw	r3, #51460	; 0xc904
   1457a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1457e:	681b      	ldr	r3, [r3, #0]
   14580:	4618      	mov	r0, r3
   14582:	f04f 0100 	mov.w	r1, #0
   14586:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1458a:	f004 f813 	bl	185b4 <__aeabi_fmul>
   1458e:	4603      	mov	r3, r0
   14590:	4618      	mov	r0, r3
   14592:	f003 fb7b 	bl	17c8c <__aeabi_f2d>
   14596:	4602      	mov	r2, r0
   14598:	460b      	mov	r3, r1
   1459a:	f04f 0000 	mov.w	r0, #0
   1459e:	f04f 0100 	mov.w	r1, #0
   145a2:	f2c4 0114 	movt	r1, #16404	; 0x4014
   145a6:	f003 fcef 	bl	17f88 <__aeabi_ddiv>
   145aa:	4602      	mov	r2, r0
   145ac:	460b      	mov	r3, r1
   145ae:	4620      	mov	r0, r4
   145b0:	4629      	mov	r1, r5
   145b2:	f003 fa0d 	bl	179d0 <__adddf3>
   145b6:	4602      	mov	r2, r0
   145b8:	460b      	mov	r3, r1
   145ba:	4610      	mov	r0, r2
   145bc:	4619      	mov	r1, r3
   145be:	f003 fe9b 	bl	182f8 <__aeabi_d2f>
   145c2:	4603      	mov	r3, r0
   145c4:	603b      	str	r3, [r7, #0]
   145c6:	f240 5378 	movw	r3, #1400	; 0x578
   145ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   145ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   145d0:	4618      	mov	r0, r3
   145d2:	f003 fb5b 	bl	17c8c <__aeabi_f2d>
   145d6:	4604      	mov	r4, r0
   145d8:	460d      	mov	r5, r1
   145da:	6838      	ldr	r0, [r7, #0]
   145dc:	f003 fb56 	bl	17c8c <__aeabi_f2d>
   145e0:	4602      	mov	r2, r0
   145e2:	460b      	mov	r3, r1
   145e4:	4610      	mov	r0, r2
   145e6:	4619      	mov	r1, r3
   145e8:	a3b5      	add	r3, pc, #724	; (adr r3, 148c0 <auto_nav+0x21b0>)
   145ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   145ee:	f003 f9ef 	bl	179d0 <__adddf3>
   145f2:	4602      	mov	r2, r0
   145f4:	460b      	mov	r3, r1
   145f6:	4610      	mov	r0, r2
   145f8:	4619      	mov	r1, r3
   145fa:	f001 fc69 	bl	15ed0 <pp_sin>
   145fe:	4602      	mov	r2, r0
   14600:	460b      	mov	r3, r1
   14602:	4610      	mov	r0, r2
   14604:	4619      	mov	r1, r3
   14606:	f04f 0200 	mov.w	r2, #0
   1460a:	f04f 0300 	mov.w	r3, #0
   1460e:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14612:	f003 fb8f 	bl	17d34 <__aeabi_dmul>
   14616:	4602      	mov	r2, r0
   14618:	460b      	mov	r3, r1
   1461a:	4620      	mov	r0, r4
   1461c:	4629      	mov	r1, r5
   1461e:	f003 f9d7 	bl	179d0 <__adddf3>
   14622:	4602      	mov	r2, r0
   14624:	460b      	mov	r3, r1
   14626:	4610      	mov	r0, r2
   14628:	4619      	mov	r1, r3
   1462a:	f003 fe65 	bl	182f8 <__aeabi_d2f>
   1462e:	4606      	mov	r6, r0
   14630:	f240 5378 	movw	r3, #1400	; 0x578
   14634:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1463a:	4618      	mov	r0, r3
   1463c:	f003 fb26 	bl	17c8c <__aeabi_f2d>
   14640:	4604      	mov	r4, r0
   14642:	460d      	mov	r5, r1
   14644:	6838      	ldr	r0, [r7, #0]
   14646:	f003 fb21 	bl	17c8c <__aeabi_f2d>
   1464a:	4602      	mov	r2, r0
   1464c:	460b      	mov	r3, r1
   1464e:	4610      	mov	r0, r2
   14650:	4619      	mov	r1, r3
   14652:	f001 fc3d 	bl	15ed0 <pp_sin>
   14656:	4602      	mov	r2, r0
   14658:	460b      	mov	r3, r1
   1465a:	4610      	mov	r0, r2
   1465c:	4619      	mov	r1, r3
   1465e:	f04f 0200 	mov.w	r2, #0
   14662:	f04f 0300 	mov.w	r3, #0
   14666:	f2c4 0359 	movt	r3, #16473	; 0x4059
   1466a:	f003 fb63 	bl	17d34 <__aeabi_dmul>
   1466e:	4602      	mov	r2, r0
   14670:	460b      	mov	r3, r1
   14672:	4620      	mov	r0, r4
   14674:	4629      	mov	r1, r5
   14676:	f003 f9ab 	bl	179d0 <__adddf3>
   1467a:	4602      	mov	r2, r0
   1467c:	460b      	mov	r3, r1
   1467e:	4610      	mov	r0, r2
   14680:	4619      	mov	r1, r3
   14682:	f003 fe39 	bl	182f8 <__aeabi_d2f>
   14686:	4603      	mov	r3, r0
   14688:	4630      	mov	r0, r6
   1468a:	4619      	mov	r1, r3
   1468c:	f000 fa04 	bl	14a98 <fly_to_xy>
   14690:	6838      	ldr	r0, [r7, #0]
   14692:	f003 fafb 	bl	17c8c <__aeabi_f2d>
   14696:	4602      	mov	r2, r0
   14698:	460b      	mov	r3, r1
   1469a:	a189      	add	r1, pc, #548	; (adr r1, 148c0 <auto_nav+0x21b0>)
   1469c:	e9d1 0100 	ldrd	r0, r1, [r1]
   146a0:	f003 f994 	bl	179cc <__aeabi_dsub>
   146a4:	4602      	mov	r2, r0
   146a6:	460b      	mov	r3, r1
   146a8:	4610      	mov	r0, r2
   146aa:	4619      	mov	r1, r3
   146ac:	a386      	add	r3, pc, #536	; (adr r3, 148c8 <auto_nav+0x21b8>)
   146ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   146b2:	f003 fc69 	bl	17f88 <__aeabi_ddiv>
   146b6:	4602      	mov	r2, r0
   146b8:	460b      	mov	r3, r1
   146ba:	4610      	mov	r0, r2
   146bc:	4619      	mov	r1, r3
   146be:	f04f 0200 	mov.w	r2, #0
   146c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   146c6:	f2c4 0366 	movt	r3, #16486	; 0x4066
   146ca:	f003 fb33 	bl	17d34 <__aeabi_dmul>
   146ce:	4602      	mov	r2, r0
   146d0:	460b      	mov	r3, r1
   146d2:	4610      	mov	r0, r2
   146d4:	4619      	mov	r1, r3
   146d6:	f003 fe0f 	bl	182f8 <__aeabi_d2f>
   146da:	4602      	mov	r2, r0
   146dc:	f24c 638c 	movw	r3, #50828	; 0xc68c
   146e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146e4:	601a      	str	r2, [r3, #0]
   146e6:	e012      	b.n	1470e <auto_nav+0x1ffe>
   146e8:	f24c 638c 	movw	r3, #50828	; 0xc68c
   146ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146f0:	681b      	ldr	r3, [r3, #0]
   146f2:	4618      	mov	r0, r3
   146f4:	f04f 0100 	mov.w	r1, #0
   146f8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   146fc:	f003 fe52 	bl	183a4 <__addsf3>
   14700:	4603      	mov	r3, r0
   14702:	461a      	mov	r2, r3
   14704:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14708:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1470c:	601a      	str	r2, [r3, #0]
   1470e:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14712:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14716:	681b      	ldr	r3, [r3, #0]
   14718:	4618      	mov	r0, r3
   1471a:	f04f 0100 	mov.w	r1, #0
   1471e:	f004 f8e7 	bl	188f0 <__aeabi_fcmplt>
   14722:	4603      	mov	r3, r0
   14724:	2b00      	cmp	r3, #0
   14726:	d1df      	bne.n	146e8 <auto_nav+0x1fd8>
   14728:	e012      	b.n	14750 <auto_nav+0x2040>
   1472a:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1472e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14732:	681b      	ldr	r3, [r3, #0]
   14734:	4618      	mov	r0, r3
   14736:	f04f 0100 	mov.w	r1, #0
   1473a:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1473e:	f003 fe2f 	bl	183a0 <__aeabi_fsub>
   14742:	4603      	mov	r3, r0
   14744:	461a      	mov	r2, r3
   14746:	f24c 638c 	movw	r3, #50828	; 0xc68c
   1474a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1474e:	601a      	str	r2, [r3, #0]
   14750:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14754:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14758:	681b      	ldr	r3, [r3, #0]
   1475a:	4618      	mov	r0, r3
   1475c:	f04f 0100 	mov.w	r1, #0
   14760:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14764:	f004 f8d8 	bl	18918 <__aeabi_fcmpge>
   14768:	4603      	mov	r3, r0
   1476a:	2b00      	cmp	r3, #0
   1476c:	d1dd      	bne.n	1472a <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
   1476e:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14772:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14776:	681b      	ldr	r3, [r3, #0]
   14778:	4618      	mov	r0, r3
   1477a:	f04f 0100 	mov.w	r1, #0
   1477e:	f2c4 3134 	movt	r1, #17204	; 0x4334
   14782:	f004 f8d3 	bl	1892c <__aeabi_fcmpgt>
   14786:	4603      	mov	r3, r0
   14788:	2b00      	cmp	r3, #0
   1478a:	d100      	bne.n	1478e <auto_nav+0x207e>
          return;
   1478c:	e092      	b.n	148b4 <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   1478e:	f24c 638c 	movw	r3, #50828	; 0xc68c
   14792:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14796:	681b      	ldr	r3, [r3, #0]
   14798:	4618      	mov	r0, r3
   1479a:	f04f 0100 	mov.w	r1, #0
   1479e:	f2c4 313e 	movt	r1, #17214	; 0x433e
   147a2:	f004 f8a5 	bl	188f0 <__aeabi_fcmplt>
   147a6:	4603      	mov	r3, r0
   147a8:	2b00      	cmp	r3, #0
   147aa:	d100      	bne.n	147ae <auto_nav+0x209e>
          return;
   147ac:	e082      	b.n	148b4 <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   147ae:	f24c 6370 	movw	r3, #50800	; 0xc670
   147b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147b6:	781b      	ldrb	r3, [r3, #0]
   147b8:	3301      	adds	r3, #1
   147ba:	b2da      	uxtb	r2, r3
   147bc:	f24c 6370 	movw	r3, #50800	; 0xc670
   147c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147c4:	701a      	strb	r2, [r3, #0]
   147c6:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   147ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147ce:	681a      	ldr	r2, [r3, #0]
   147d0:	f24c 6374 	movw	r3, #50804	; 0xc674
   147d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147d8:	601a      	str	r2, [r3, #0]
   147da:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   147de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147e2:	681a      	ldr	r2, [r3, #0]
   147e4:	f24c 6378 	movw	r3, #50808	; 0xc678
   147e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147ec:	601a      	str	r2, [r3, #0]
   147ee:	f24c 6384 	movw	r3, #50820	; 0xc684
   147f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147f6:	2200      	movs	r2, #0
   147f8:	801a      	strh	r2, [r3, #0]
   147fa:	f24c 6388 	movw	r3, #50824	; 0xc688
   147fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14802:	f04f 0200 	mov.w	r2, #0
   14806:	601a      	str	r2, [r3, #0]
   14808:	e054      	b.n	148b4 <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
   1480a:	f24c 6370 	movw	r3, #50800	; 0xc670
   1480e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14812:	781b      	ldrb	r3, [r3, #0]
   14814:	2b03      	cmp	r3, #3
   14816:	d106      	bne.n	14826 <auto_nav+0x2116>
    {
	  nav_stage = 3;
   14818:	f24c 6370 	movw	r3, #50800	; 0xc670
   1481c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14820:	2203      	movs	r2, #3
   14822:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
   14824:	e44b      	b.n	140be <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
   14826:	f24c 6370 	movw	r3, #50800	; 0xc670
   1482a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1482e:	781b      	ldrb	r3, [r3, #0]
   14830:	2b04      	cmp	r3, #4
   14832:	d13f      	bne.n	148b4 <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
   14834:	f24c 6370 	movw	r3, #50800	; 0xc670
   14838:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1483c:	2204      	movs	r2, #4
   1483e:	701a      	strb	r2, [r3, #0]
        NextBlock()
   14840:	f24c 6371 	movw	r3, #50801	; 0xc671
   14844:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14848:	781b      	ldrb	r3, [r3, #0]
   1484a:	3301      	adds	r3, #1
   1484c:	b2da      	uxtb	r2, r3
   1484e:	f24c 6371 	movw	r3, #50801	; 0xc671
   14852:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14856:	701a      	strb	r2, [r3, #0]
   14858:	f24c 6370 	movw	r3, #50800	; 0xc670
   1485c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14860:	2200      	movs	r2, #0
   14862:	701a      	strb	r2, [r3, #0]
   14864:	f24c 6386 	movw	r3, #50822	; 0xc686
   14868:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1486c:	2200      	movs	r2, #0
   1486e:	801a      	strh	r2, [r3, #0]
   14870:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14874:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14878:	681a      	ldr	r2, [r3, #0]
   1487a:	f24c 6374 	movw	r3, #50804	; 0xc674
   1487e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14882:	601a      	str	r2, [r3, #0]
   14884:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14888:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1488c:	681a      	ldr	r2, [r3, #0]
   1488e:	f24c 6378 	movw	r3, #50808	; 0xc678
   14892:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14896:	601a      	str	r2, [r3, #0]
   14898:	f24c 6384 	movw	r3, #50820	; 0xc684
   1489c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148a0:	2200      	movs	r2, #0
   148a2:	801a      	strh	r2, [r3, #0]
   148a4:	f24c 6388 	movw	r3, #50824	; 0xc688
   148a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148ac:	f04f 0200 	mov.w	r2, #0
   148b0:	601a      	str	r2, [r3, #0]
   148b2:	bf00      	nop
    else { }
}
else { }

//#endif
}
   148b4:	372c      	adds	r7, #44	; 0x2c
   148b6:	46bd      	mov	sp, r7
   148b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   148ba:	bf00      	nop
   148bc:	f3af 8000 	nop.w
   148c0:	54442d18 	.word	0x54442d18
   148c4:	3ff921fb 	.word	0x3ff921fb
   148c8:	54442d18 	.word	0x54442d18
   148cc:	400921fb 	.word	0x400921fb

000148d0 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
   148d0:	b590      	push	{r4, r7, lr}
   148d2:	b087      	sub	sp, #28
   148d4:	af00      	add	r7, sp, #0
   148d6:	4603      	mov	r3, r0
   148d8:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
   148da:	79f9      	ldrb	r1, [r7, #7]
   148dc:	f240 5278 	movw	r2, #1400	; 0x578
   148e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   148e4:	460b      	mov	r3, r1
   148e6:	005b      	lsls	r3, r3, #1
   148e8:	440b      	add	r3, r1
   148ea:	009b      	lsls	r3, r3, #2
   148ec:	4413      	add	r3, r2
   148ee:	681a      	ldr	r2, [r3, #0]
   148f0:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   148f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148f8:	681b      	ldr	r3, [r3, #0]
   148fa:	4610      	mov	r0, r2
   148fc:	4619      	mov	r1, r3
   148fe:	f003 fd4f 	bl	183a0 <__aeabi_fsub>
   14902:	4603      	mov	r3, r0
   14904:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
   14906:	79f9      	ldrb	r1, [r7, #7]
   14908:	f240 5278 	movw	r2, #1400	; 0x578
   1490c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14910:	460b      	mov	r3, r1
   14912:	005b      	lsls	r3, r3, #1
   14914:	440b      	add	r3, r1
   14916:	009b      	lsls	r3, r3, #2
   14918:	4413      	add	r3, r2
   1491a:	3304      	adds	r3, #4
   1491c:	681a      	ldr	r2, [r3, #0]
   1491e:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14922:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14926:	681b      	ldr	r3, [r3, #0]
   14928:	4610      	mov	r0, r2
   1492a:	4619      	mov	r1, r3
   1492c:	f003 fd38 	bl	183a0 <__aeabi_fsub>
   14930:	4603      	mov	r3, r0
   14932:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
   14934:	6978      	ldr	r0, [r7, #20]
   14936:	6979      	ldr	r1, [r7, #20]
   14938:	f003 fe3c 	bl	185b4 <__aeabi_fmul>
   1493c:	4603      	mov	r3, r0
   1493e:	461c      	mov	r4, r3
   14940:	6938      	ldr	r0, [r7, #16]
   14942:	6939      	ldr	r1, [r7, #16]
   14944:	f003 fe36 	bl	185b4 <__aeabi_fmul>
   14948:	4603      	mov	r3, r0
   1494a:	4620      	mov	r0, r4
   1494c:	4619      	mov	r1, r3
   1494e:	f003 fd29 	bl	183a4 <__addsf3>
   14952:	4603      	mov	r3, r0
   14954:	461a      	mov	r2, r3
   14956:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
   1495a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1495e:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
   14960:	f64c 1304 	movw	r3, #51460	; 0xc904
   14964:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14968:	681b      	ldr	r3, [r3, #0]
   1496a:	4618      	mov	r0, r3
   1496c:	f04f 0100 	mov.w	r1, #0
   14970:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   14974:	f003 fe1e 	bl	185b4 <__aeabi_fmul>
   14978:	4603      	mov	r3, r0
   1497a:	461a      	mov	r2, r3
   1497c:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   14980:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14984:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
   14986:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   1498a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1498e:	681b      	ldr	r3, [r3, #0]
   14990:	4618      	mov	r0, r3
   14992:	f04f 0100 	mov.w	r1, #0
   14996:	f2c4 2120 	movt	r1, #16928	; 0x4220
   1499a:	f003 ffa9 	bl	188f0 <__aeabi_fcmplt>
   1499e:	4603      	mov	r3, r0
   149a0:	2b00      	cmp	r3, #0
   149a2:	d004      	beq.n	149ae <approaching+0xde>
   149a4:	f04f 0200 	mov.w	r2, #0
   149a8:	f2c4 2220 	movt	r2, #16928	; 0x4220
   149ac:	e004      	b.n	149b8 <approaching+0xe8>
   149ae:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   149b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149b6:	681a      	ldr	r2, [r3, #0]
   149b8:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   149bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149c0:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
   149c2:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   149c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149ca:	681a      	ldr	r2, [r3, #0]
   149cc:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   149d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149d4:	681b      	ldr	r3, [r3, #0]
   149d6:	4610      	mov	r0, r2
   149d8:	4619      	mov	r1, r3
   149da:	f003 fdeb 	bl	185b4 <__aeabi_fmul>
   149de:	4603      	mov	r3, r0
   149e0:	461a      	mov	r2, r3
   149e2:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
   149e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   149ea:	681b      	ldr	r3, [r3, #0]
   149ec:	4610      	mov	r0, r2
   149ee:	4619      	mov	r1, r3
   149f0:	f003 ff9c 	bl	1892c <__aeabi_fcmpgt>
   149f4:	4603      	mov	r3, r0
   149f6:	2b00      	cmp	r3, #0
   149f8:	d001      	beq.n	149fe <approaching+0x12e>
    return TRUE;
   149fa:	2301      	movs	r3, #1
   149fc:	e048      	b.n	14a90 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
   149fe:	79f9      	ldrb	r1, [r7, #7]
   14a00:	f240 5278 	movw	r2, #1400	; 0x578
   14a04:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a08:	460b      	mov	r3, r1
   14a0a:	005b      	lsls	r3, r3, #1
   14a0c:	440b      	add	r3, r1
   14a0e:	009b      	lsls	r3, r3, #2
   14a10:	4413      	add	r3, r2
   14a12:	681a      	ldr	r2, [r3, #0]
   14a14:	f24c 6374 	movw	r3, #50804	; 0xc674
   14a18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a1c:	681b      	ldr	r3, [r3, #0]
   14a1e:	4610      	mov	r0, r2
   14a20:	4619      	mov	r1, r3
   14a22:	f003 fcbd 	bl	183a0 <__aeabi_fsub>
   14a26:	4603      	mov	r3, r0
   14a28:	4618      	mov	r0, r3
   14a2a:	6979      	ldr	r1, [r7, #20]
   14a2c:	f003 fdc2 	bl	185b4 <__aeabi_fmul>
   14a30:	4603      	mov	r3, r0
   14a32:	461c      	mov	r4, r3
   14a34:	79f9      	ldrb	r1, [r7, #7]
   14a36:	f240 5278 	movw	r2, #1400	; 0x578
   14a3a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a3e:	460b      	mov	r3, r1
   14a40:	005b      	lsls	r3, r3, #1
   14a42:	440b      	add	r3, r1
   14a44:	009b      	lsls	r3, r3, #2
   14a46:	4413      	add	r3, r2
   14a48:	3304      	adds	r3, #4
   14a4a:	681a      	ldr	r2, [r3, #0]
   14a4c:	f24c 6378 	movw	r3, #50808	; 0xc678
   14a50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a54:	681b      	ldr	r3, [r3, #0]
   14a56:	4610      	mov	r0, r2
   14a58:	4619      	mov	r1, r3
   14a5a:	f003 fca1 	bl	183a0 <__aeabi_fsub>
   14a5e:	4603      	mov	r3, r0
   14a60:	4618      	mov	r0, r3
   14a62:	6939      	ldr	r1, [r7, #16]
   14a64:	f003 fda6 	bl	185b4 <__aeabi_fmul>
   14a68:	4603      	mov	r3, r0
   14a6a:	4620      	mov	r0, r4
   14a6c:	4619      	mov	r1, r3
   14a6e:	f003 fc99 	bl	183a4 <__addsf3>
   14a72:	4603      	mov	r3, r0
   14a74:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
   14a76:	2301      	movs	r3, #1
   14a78:	461c      	mov	r4, r3
   14a7a:	68f8      	ldr	r0, [r7, #12]
   14a7c:	f04f 0100 	mov.w	r1, #0
   14a80:	f003 ff36 	bl	188f0 <__aeabi_fcmplt>
   14a84:	4603      	mov	r3, r0
   14a86:	2b00      	cmp	r3, #0
   14a88:	d101      	bne.n	14a8e <approaching+0x1be>
   14a8a:	2300      	movs	r3, #0
   14a8c:	461c      	mov	r4, r3
   14a8e:	b2e3      	uxtb	r3, r4
}
   14a90:	4618      	mov	r0, r3
   14a92:	371c      	adds	r7, #28
   14a94:	46bd      	mov	sp, r7
   14a96:	bd90      	pop	{r4, r7, pc}

00014a98 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
   14a98:	b5b0      	push	{r4, r5, r7, lr}
   14a9a:	b082      	sub	sp, #8
   14a9c:	af00      	add	r7, sp, #0
   14a9e:	6078      	str	r0, [r7, #4]
   14aa0:	6039      	str	r1, [r7, #0]
  desired_x = x;
   14aa2:	f24c 6390 	movw	r3, #50832	; 0xc690
   14aa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14aaa:	687a      	ldr	r2, [r7, #4]
   14aac:	601a      	str	r2, [r3, #0]
  desired_y = y;
   14aae:	f24c 6394 	movw	r3, #50836	; 0xc694
   14ab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ab6:	683a      	ldr	r2, [r7, #0]
   14ab8:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
   14aba:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14abe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ac2:	681b      	ldr	r3, [r3, #0]
   14ac4:	6838      	ldr	r0, [r7, #0]
   14ac6:	4619      	mov	r1, r3
   14ac8:	f003 fc6a 	bl	183a0 <__aeabi_fsub>
   14acc:	4603      	mov	r3, r0
   14ace:	4618      	mov	r0, r3
   14ad0:	f003 f8dc 	bl	17c8c <__aeabi_f2d>
   14ad4:	4604      	mov	r4, r0
   14ad6:	460d      	mov	r5, r1
   14ad8:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14adc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ae0:	681b      	ldr	r3, [r3, #0]
   14ae2:	6878      	ldr	r0, [r7, #4]
   14ae4:	4619      	mov	r1, r3
   14ae6:	f003 fc5b 	bl	183a0 <__aeabi_fsub>
   14aea:	4603      	mov	r3, r0
   14aec:	4618      	mov	r0, r3
   14aee:	f003 f8cd 	bl	17c8c <__aeabi_f2d>
   14af2:	4602      	mov	r2, r0
   14af4:	460b      	mov	r3, r1
   14af6:	4620      	mov	r0, r4
   14af8:	4629      	mov	r1, r5
   14afa:	f001 f929 	bl	15d50 <pp_atan2>
   14afe:	4602      	mov	r2, r0
   14b00:	460b      	mov	r3, r1
   14b02:	a10b      	add	r1, pc, #44	; (adr r1, 14b30 <fly_to_xy+0x98>)
   14b04:	e9d1 0100 	ldrd	r0, r1, [r1]
   14b08:	f002 ff60 	bl	179cc <__aeabi_dsub>
   14b0c:	4602      	mov	r2, r0
   14b0e:	460b      	mov	r3, r1
   14b10:	4610      	mov	r0, r2
   14b12:	4619      	mov	r1, r3
   14b14:	f003 fbf0 	bl	182f8 <__aeabi_d2f>
   14b18:	4602      	mov	r2, r0
   14b1a:	f24c 635c 	movw	r3, #50780	; 0xc65c
   14b1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b22:	601a      	str	r2, [r3, #0]
}
   14b24:	3708      	adds	r7, #8
   14b26:	46bd      	mov	sp, r7
   14b28:	bdb0      	pop	{r4, r5, r7, pc}
   14b2a:	bf00      	nop
   14b2c:	f3af 8000 	nop.w
   14b30:	54442d18 	.word	0x54442d18
   14b34:	3ff921fb 	.word	0x3ff921fb

00014b38 <fly_to>:

static void fly_to(uint8_t wp) { 
   14b38:	b580      	push	{r7, lr}
   14b3a:	b082      	sub	sp, #8
   14b3c:	af00      	add	r7, sp, #0
   14b3e:	4603      	mov	r3, r0
   14b40:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
   14b42:	79f9      	ldrb	r1, [r7, #7]
   14b44:	f240 5278 	movw	r2, #1400	; 0x578
   14b48:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14b4c:	460b      	mov	r3, r1
   14b4e:	005b      	lsls	r3, r3, #1
   14b50:	440b      	add	r3, r1
   14b52:	009b      	lsls	r3, r3, #2
   14b54:	4413      	add	r3, r2
   14b56:	6818      	ldr	r0, [r3, #0]
   14b58:	79f9      	ldrb	r1, [r7, #7]
   14b5a:	f240 5278 	movw	r2, #1400	; 0x578
   14b5e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14b62:	460b      	mov	r3, r1
   14b64:	005b      	lsls	r3, r3, #1
   14b66:	440b      	add	r3, r1
   14b68:	009b      	lsls	r3, r3, #2
   14b6a:	4413      	add	r3, r2
   14b6c:	3304      	adds	r3, #4
   14b6e:	681b      	ldr	r3, [r3, #0]
   14b70:	4619      	mov	r1, r3
   14b72:	f7ff ff91 	bl	14a98 <fly_to_xy>
}
   14b76:	3708      	adds	r7, #8
   14b78:	46bd      	mov	sp, r7
   14b7a:	bd80      	pop	{r7, pc}

00014b7c <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
   14b7c:	b5b0      	push	{r4, r5, r7, lr}
   14b7e:	b088      	sub	sp, #32
   14b80:	af00      	add	r7, sp, #0
   14b82:	4602      	mov	r2, r0
   14b84:	460b      	mov	r3, r1
   14b86:	71fa      	strb	r2, [r7, #7]
   14b88:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
   14b8a:	79f9      	ldrb	r1, [r7, #7]
   14b8c:	f240 5278 	movw	r2, #1400	; 0x578
   14b90:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14b94:	460b      	mov	r3, r1
   14b96:	005b      	lsls	r3, r3, #1
   14b98:	440b      	add	r3, r1
   14b9a:	009b      	lsls	r3, r3, #2
   14b9c:	4413      	add	r3, r2
   14b9e:	681b      	ldr	r3, [r3, #0]
   14ba0:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
   14ba2:	79f9      	ldrb	r1, [r7, #7]
   14ba4:	f240 5278 	movw	r2, #1400	; 0x578
   14ba8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14bac:	460b      	mov	r3, r1
   14bae:	005b      	lsls	r3, r3, #1
   14bb0:	440b      	add	r3, r1
   14bb2:	009b      	lsls	r3, r3, #2
   14bb4:	4413      	add	r3, r2
   14bb6:	3304      	adds	r3, #4
   14bb8:	681b      	ldr	r3, [r3, #0]
   14bba:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
   14bbc:	79b9      	ldrb	r1, [r7, #6]
   14bbe:	f240 5278 	movw	r2, #1400	; 0x578
   14bc2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14bc6:	460b      	mov	r3, r1
   14bc8:	005b      	lsls	r3, r3, #1
   14bca:	440b      	add	r3, r1
   14bcc:	009b      	lsls	r3, r3, #2
   14bce:	4413      	add	r3, r2
   14bd0:	681b      	ldr	r3, [r3, #0]
   14bd2:	4618      	mov	r0, r3
   14bd4:	69f9      	ldr	r1, [r7, #28]
   14bd6:	f003 fbe3 	bl	183a0 <__aeabi_fsub>
   14bda:	4603      	mov	r3, r0
   14bdc:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
   14bde:	79b9      	ldrb	r1, [r7, #6]
   14be0:	f240 5278 	movw	r2, #1400	; 0x578
   14be4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14be8:	460b      	mov	r3, r1
   14bea:	005b      	lsls	r3, r3, #1
   14bec:	440b      	add	r3, r1
   14bee:	009b      	lsls	r3, r3, #2
   14bf0:	4413      	add	r3, r2
   14bf2:	3304      	adds	r3, #4
   14bf4:	681b      	ldr	r3, [r3, #0]
   14bf6:	4618      	mov	r0, r3
   14bf8:	69b9      	ldr	r1, [r7, #24]
   14bfa:	f003 fbd1 	bl	183a0 <__aeabi_fsub>
   14bfe:	4603      	mov	r3, r0
   14c00:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
   14c02:	6978      	ldr	r0, [r7, #20]
   14c04:	6979      	ldr	r1, [r7, #20]
   14c06:	f003 fcd5 	bl	185b4 <__aeabi_fmul>
   14c0a:	4603      	mov	r3, r0
   14c0c:	461c      	mov	r4, r3
   14c0e:	6938      	ldr	r0, [r7, #16]
   14c10:	6939      	ldr	r1, [r7, #16]
   14c12:	f003 fccf 	bl	185b4 <__aeabi_fmul>
   14c16:	4603      	mov	r3, r0
   14c18:	4620      	mov	r0, r4
   14c1a:	4619      	mov	r1, r3
   14c1c:	f003 fbc2 	bl	183a4 <__addsf3>
   14c20:	4603      	mov	r3, r0
   14c22:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
   14c24:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14c28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c2c:	681b      	ldr	r3, [r3, #0]
   14c2e:	4618      	mov	r0, r3
   14c30:	69f9      	ldr	r1, [r7, #28]
   14c32:	f003 fbb5 	bl	183a0 <__aeabi_fsub>
   14c36:	4603      	mov	r3, r0
   14c38:	4618      	mov	r0, r3
   14c3a:	6979      	ldr	r1, [r7, #20]
   14c3c:	f003 fcba 	bl	185b4 <__aeabi_fmul>
   14c40:	4603      	mov	r3, r0
   14c42:	461c      	mov	r4, r3
   14c44:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14c48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c4c:	681b      	ldr	r3, [r3, #0]
   14c4e:	4618      	mov	r0, r3
   14c50:	69b9      	ldr	r1, [r7, #24]
   14c52:	f003 fba5 	bl	183a0 <__aeabi_fsub>
   14c56:	4603      	mov	r3, r0
   14c58:	4618      	mov	r0, r3
   14c5a:	6939      	ldr	r1, [r7, #16]
   14c5c:	f003 fcaa 	bl	185b4 <__aeabi_fmul>
   14c60:	4603      	mov	r3, r0
   14c62:	4620      	mov	r0, r4
   14c64:	4619      	mov	r1, r3
   14c66:	f003 fb9d 	bl	183a4 <__addsf3>
   14c6a:	4603      	mov	r3, r0
   14c6c:	4618      	mov	r0, r3
   14c6e:	68f9      	ldr	r1, [r7, #12]
   14c70:	f003 fd54 	bl	1871c <__aeabi_fdiv>
   14c74:	4603      	mov	r3, r0
   14c76:	461a      	mov	r2, r3
   14c78:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14c7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c80:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
   14c82:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14c86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c8a:	681b      	ldr	r3, [r3, #0]
   14c8c:	4618      	mov	r0, r3
   14c8e:	f04f 0100 	mov.w	r1, #0
   14c92:	f003 fe41 	bl	18918 <__aeabi_fcmpge>
   14c96:	4603      	mov	r3, r0
   14c98:	2b00      	cmp	r3, #0
   14c9a:	d005      	beq.n	14ca8 <route_to+0x12c>
   14c9c:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14ca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ca4:	681a      	ldr	r2, [r3, #0]
   14ca6:	e001      	b.n	14cac <route_to+0x130>
   14ca8:	f04f 0200 	mov.w	r2, #0
   14cac:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14cb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cb4:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
   14cb6:	68f8      	ldr	r0, [r7, #12]
   14cb8:	f002 ffe8 	bl	17c8c <__aeabi_f2d>
   14cbc:	4602      	mov	r2, r0
   14cbe:	460b      	mov	r3, r1
   14cc0:	4610      	mov	r0, r2
   14cc2:	4619      	mov	r1, r3
   14cc4:	f001 f9f4 	bl	160b0 <pp_sqrt>
   14cc8:	4602      	mov	r2, r0
   14cca:	460b      	mov	r3, r1
   14ccc:	4610      	mov	r0, r2
   14cce:	4619      	mov	r1, r3
   14cd0:	f003 fb12 	bl	182f8 <__aeabi_d2f>
   14cd4:	4602      	mov	r2, r0
   14cd6:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   14cda:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cde:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
   14ce0:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14ce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ce8:	681b      	ldr	r3, [r3, #0]
   14cea:	4618      	mov	r0, r3
   14cec:	f002 ffce 	bl	17c8c <__aeabi_f2d>
   14cf0:	4604      	mov	r4, r0
   14cf2:	460d      	mov	r5, r1
   14cf4:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   14cf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cfc:	681a      	ldr	r2, [r3, #0]
   14cfe:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   14d02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d06:	681b      	ldr	r3, [r3, #0]
   14d08:	4610      	mov	r0, r2
   14d0a:	4619      	mov	r1, r3
   14d0c:	f003 fd06 	bl	1871c <__aeabi_fdiv>
   14d10:	4603      	mov	r3, r0
   14d12:	4618      	mov	r0, r3
   14d14:	f04f 0100 	mov.w	r1, #0
   14d18:	f003 fdfe 	bl	18918 <__aeabi_fcmpge>
   14d1c:	4603      	mov	r3, r0
   14d1e:	2b00      	cmp	r3, #0
   14d20:	d014      	beq.n	14d4c <route_to+0x1d0>
   14d22:	f24c 63b0 	movw	r3, #50864	; 0xc6b0
   14d26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d2a:	681a      	ldr	r2, [r3, #0]
   14d2c:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   14d30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d34:	681b      	ldr	r3, [r3, #0]
   14d36:	4610      	mov	r0, r2
   14d38:	4619      	mov	r1, r3
   14d3a:	f003 fcef 	bl	1871c <__aeabi_fdiv>
   14d3e:	4603      	mov	r3, r0
   14d40:	4618      	mov	r0, r3
   14d42:	f002 ffa3 	bl	17c8c <__aeabi_f2d>
   14d46:	4602      	mov	r2, r0
   14d48:	460b      	mov	r3, r1
   14d4a:	e003      	b.n	14d54 <route_to+0x1d8>
   14d4c:	f04f 0200 	mov.w	r2, #0
   14d50:	f04f 0300 	mov.w	r3, #0
   14d54:	4620      	mov	r0, r4
   14d56:	4629      	mov	r1, r5
   14d58:	f002 fe3a 	bl	179d0 <__adddf3>
   14d5c:	4602      	mov	r2, r0
   14d5e:	460b      	mov	r3, r1
   14d60:	4610      	mov	r0, r2
   14d62:	4619      	mov	r1, r3
   14d64:	f003 fac8 	bl	182f8 <__aeabi_d2f>
   14d68:	4602      	mov	r2, r0
   14d6a:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14d6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d72:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
   14d74:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14d78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d7c:	681b      	ldr	r3, [r3, #0]
   14d7e:	4618      	mov	r0, r3
   14d80:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   14d84:	f003 fdc8 	bl	18918 <__aeabi_fcmpge>
   14d88:	4603      	mov	r3, r0
   14d8a:	2b00      	cmp	r3, #0
   14d8c:	d002      	beq.n	14d94 <route_to+0x218>
   14d8e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   14d92:	e004      	b.n	14d9e <route_to+0x222>
   14d94:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14d98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d9c:	681a      	ldr	r2, [r3, #0]
   14d9e:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14da2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14da6:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
   14da8:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14dac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14db0:	681b      	ldr	r3, [r3, #0]
   14db2:	4618      	mov	r0, r3
   14db4:	6979      	ldr	r1, [r7, #20]
   14db6:	f003 fbfd 	bl	185b4 <__aeabi_fmul>
   14dba:	4603      	mov	r3, r0
   14dbc:	4618      	mov	r0, r3
   14dbe:	69f9      	ldr	r1, [r7, #28]
   14dc0:	f003 faf0 	bl	183a4 <__addsf3>
   14dc4:	4603      	mov	r3, r0
   14dc6:	461c      	mov	r4, r3
   14dc8:	f24c 63b4 	movw	r3, #50868	; 0xc6b4
   14dcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14dd0:	681b      	ldr	r3, [r3, #0]
   14dd2:	4618      	mov	r0, r3
   14dd4:	6939      	ldr	r1, [r7, #16]
   14dd6:	f003 fbed 	bl	185b4 <__aeabi_fmul>
   14dda:	4603      	mov	r3, r0
   14ddc:	4618      	mov	r0, r3
   14dde:	69b9      	ldr	r1, [r7, #24]
   14de0:	f003 fae0 	bl	183a4 <__addsf3>
   14de4:	4603      	mov	r3, r0
   14de6:	4620      	mov	r0, r4
   14de8:	4619      	mov	r1, r3
   14dea:	f7ff fe55 	bl	14a98 <fly_to_xy>
}
   14dee:	3720      	adds	r7, #32
   14df0:	46bd      	mov	sp, r7
   14df2:	bdb0      	pop	{r4, r5, r7, pc}

00014df4 <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
   14df4:	b590      	push	{r4, r7, lr}
   14df6:	b083      	sub	sp, #12
   14df8:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
   14dfa:	f240 5378 	movw	r3, #1400	; 0x578
   14dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e02:	681a      	ldr	r2, [r3, #0]
   14e04:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14e08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e0c:	681b      	ldr	r3, [r3, #0]
   14e0e:	4610      	mov	r0, r2
   14e10:	4619      	mov	r1, r3
   14e12:	f003 fac5 	bl	183a0 <__aeabi_fsub>
   14e16:	4603      	mov	r3, r0
   14e18:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
   14e1a:	f240 5378 	movw	r3, #1400	; 0x578
   14e1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e22:	685a      	ldr	r2, [r3, #4]
   14e24:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   14e28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e2c:	681b      	ldr	r3, [r3, #0]
   14e2e:	4610      	mov	r0, r2
   14e30:	4619      	mov	r1, r3
   14e32:	f003 fab5 	bl	183a0 <__aeabi_fsub>
   14e36:	4603      	mov	r3, r0
   14e38:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
   14e3a:	6878      	ldr	r0, [r7, #4]
   14e3c:	6879      	ldr	r1, [r7, #4]
   14e3e:	f003 fbb9 	bl	185b4 <__aeabi_fmul>
   14e42:	4603      	mov	r3, r0
   14e44:	461c      	mov	r4, r3
   14e46:	6838      	ldr	r0, [r7, #0]
   14e48:	6839      	ldr	r1, [r7, #0]
   14e4a:	f003 fbb3 	bl	185b4 <__aeabi_fmul>
   14e4e:	4603      	mov	r3, r0
   14e50:	4620      	mov	r0, r4
   14e52:	4619      	mov	r1, r3
   14e54:	f003 faa6 	bl	183a4 <__addsf3>
   14e58:	4603      	mov	r3, r0
   14e5a:	461a      	mov	r2, r3
   14e5c:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
   14e60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e64:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
   14e66:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
   14e6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e6e:	681b      	ldr	r3, [r3, #0]
   14e70:	2201      	movs	r2, #1
   14e72:	4614      	mov	r4, r2
   14e74:	4618      	mov	r0, r3
   14e76:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   14e7a:	f6c4 0174 	movt	r1, #18548	; 0x4874
   14e7e:	f003 fd55 	bl	1892c <__aeabi_fcmpgt>
   14e82:	4603      	mov	r3, r0
   14e84:	2b00      	cmp	r3, #0
   14e86:	d101      	bne.n	14e8c <compute_dist2_to_home+0x98>
   14e88:	2300      	movs	r3, #0
   14e8a:	461c      	mov	r4, r3
   14e8c:	b2e3      	uxtb	r3, r4
   14e8e:	461a      	mov	r2, r3
   14e90:	f24c 63ac 	movw	r3, #50860	; 0xc6ac
   14e94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e98:	701a      	strb	r2, [r3, #0]
}
   14e9a:	370c      	adds	r7, #12
   14e9c:	46bd      	mov	sp, r7
   14e9e:	bd90      	pop	{r4, r7, pc}

00014ea0 <nav_home>:

void nav_home(void) {
   14ea0:	b580      	push	{r7, lr}
   14ea2:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
   14ea4:	f24c 639c 	movw	r3, #50844	; 0xc69c
   14ea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14eac:	f04f 0200 	mov.w	r2, #0
   14eb0:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
   14eb2:	f24c 23fd 	movw	r3, #49917	; 0xc2fd
   14eb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14eba:	2203      	movs	r2, #3
   14ebc:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
   14ebe:	f240 5374 	movw	r3, #1396	; 0x574
   14ec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14ec6:	f04f 0200 	mov.w	r2, #0
   14eca:	f2c4 322f 	movt	r2, #17199	; 0x432f
   14ece:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
   14ed0:	f7ff ff90 	bl	14df4 <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
   14ed4:	f24c 63a8 	movw	r3, #50856	; 0xc6a8
   14ed8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14edc:	681a      	ldr	r2, [r3, #0]
   14ede:	f24c 63a4 	movw	r3, #50852	; 0xc6a4
   14ee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ee6:	601a      	str	r2, [r3, #0]
}
   14ee8:	bd80      	pop	{r7, pc}
   14eea:	bf00      	nop

00014eec <nav_update>:

void nav_update(void) {
   14eec:	b580      	push	{r7, lr}
   14eee:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
   14ef0:	f7ff ff80 	bl	14df4 <compute_dist2_to_home>

  auto_nav();
   14ef4:	f7fd fc0c 	bl	12710 <auto_nav>
}
   14ef8:	bd80      	pop	{r7, pc}
   14efa:	bf00      	nop

00014efc <nav_init>:


void nav_init(void) {
   14efc:	b480      	push	{r7}
   14efe:	af00      	add	r7, sp, #0
  nav_block = 0;
   14f00:	f24c 6371 	movw	r3, #50801	; 0xc671
   14f04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f08:	2200      	movs	r2, #0
   14f0a:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
   14f0c:	f24c 6370 	movw	r3, #50800	; 0xc670
   14f10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f14:	2200      	movs	r2, #0
   14f16:	701a      	strb	r2, [r3, #0]
}
   14f18:	46bd      	mov	sp, r7
   14f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
   14f1e:	4770      	bx	lr

00014f20 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
   14f20:	b480      	push	{r7}
   14f22:	b083      	sub	sp, #12
   14f24:	af00      	add	r7, sp, #0
   14f26:	4603      	mov	r3, r0
   14f28:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
   14f2a:	f242 030a 	movw	r3, #8202	; 0x200a
   14f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f32:	781b      	ldrb	r3, [r3, #0]
   14f34:	b2db      	uxtb	r3, r3
   14f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14f3a:	2b00      	cmp	r3, #0
   14f3c:	d028      	beq.n	14f90 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
   14f3e:	f24c 63c5 	movw	r3, #50885	; 0xc6c5
   14f42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f46:	781b      	ldrb	r3, [r3, #0]
   14f48:	b2db      	uxtb	r3, r3
   14f4a:	461a      	mov	r2, r3
   14f4c:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   14f50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f54:	781b      	ldrb	r3, [r3, #0]
   14f56:	3301      	adds	r3, #1
   14f58:	429a      	cmp	r2, r3
   14f5a:	d100      	bne.n	14f5e <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14f5c:	e02c      	b.n	14fb8 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
   14f5e:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   14f62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f66:	781b      	ldrb	r3, [r3, #0]
   14f68:	461a      	mov	r2, r3
   14f6a:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
   14f6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f72:	79f9      	ldrb	r1, [r7, #7]
   14f74:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
   14f76:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   14f7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f7e:	781b      	ldrb	r3, [r3, #0]
   14f80:	3301      	adds	r3, #1
   14f82:	b2da      	uxtb	r2, r3
   14f84:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   14f88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f8c:	701a      	strb	r2, [r3, #0]
   14f8e:	e013      	b.n	14fb8 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
   14f90:	f242 030c 	movw	r3, #8204	; 0x200c
   14f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f98:	79fa      	ldrb	r2, [r7, #7]
   14f9a:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
   14f9c:	f242 030a 	movw	r3, #8202	; 0x200a
   14fa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fa4:	f242 020a 	movw	r2, #8202	; 0x200a
   14fa8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14fac:	7812      	ldrb	r2, [r2, #0]
   14fae:	b2d2      	uxtb	r2, r2
   14fb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14fb4:	b2d2      	uxtb	r2, r2
   14fb6:	701a      	strb	r2, [r3, #0]
  }
}
   14fb8:	370c      	adds	r7, #12
   14fba:	46bd      	mov	sp, r7
   14fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
   14fc0:	4770      	bx	lr
   14fc2:	bf00      	nop

00014fc4 <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
   14fc4:	b480      	push	{r7}
   14fc6:	b083      	sub	sp, #12
   14fc8:	af00      	add	r7, sp, #0
   14fca:	4603      	mov	r3, r0
   14fcc:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
   14fce:	f242 039a 	movw	r3, #8346	; 0x209a
   14fd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fd6:	781b      	ldrb	r3, [r3, #0]
   14fd8:	b2db      	uxtb	r3, r3
   14fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14fde:	2b00      	cmp	r3, #0
   14fe0:	d028      	beq.n	15034 <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
   14fe2:	f24c 73c9 	movw	r3, #51145	; 0xc7c9
   14fe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14fea:	781b      	ldrb	r3, [r3, #0]
   14fec:	b2db      	uxtb	r3, r3
   14fee:	461a      	mov	r2, r3
   14ff0:	f24c 73c8 	movw	r3, #51144	; 0xc7c8
   14ff4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ff8:	781b      	ldrb	r3, [r3, #0]
   14ffa:	3301      	adds	r3, #1
   14ffc:	429a      	cmp	r2, r3
   14ffe:	d100      	bne.n	15002 <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   15000:	e02c      	b.n	1505c <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
   15002:	f24c 73c8 	movw	r3, #51144	; 0xc7c8
   15006:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1500a:	781b      	ldrb	r3, [r3, #0]
   1500c:	461a      	mov	r2, r3
   1500e:	f24c 73cc 	movw	r3, #51148	; 0xc7cc
   15012:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15016:	79f9      	ldrb	r1, [r7, #7]
   15018:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
   1501a:	f24c 73c8 	movw	r3, #51144	; 0xc7c8
   1501e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15022:	781b      	ldrb	r3, [r3, #0]
   15024:	3301      	adds	r3, #1
   15026:	b2da      	uxtb	r2, r3
   15028:	f24c 73c8 	movw	r3, #51144	; 0xc7c8
   1502c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15030:	701a      	strb	r2, [r3, #0]
   15032:	e013      	b.n	1505c <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
   15034:	f242 039c 	movw	r3, #8348	; 0x209c
   15038:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1503c:	79fa      	ldrb	r2, [r7, #7]
   1503e:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
   15040:	f242 039a 	movw	r3, #8346	; 0x209a
   15044:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15048:	f242 029a 	movw	r2, #8346	; 0x209a
   1504c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15050:	7812      	ldrb	r2, [r2, #0]
   15052:	b2d2      	uxtb	r2, r2
   15054:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   15058:	b2d2      	uxtb	r2, r2
   1505a:	701a      	strb	r2, [r3, #0]
  }
}
   1505c:	370c      	adds	r7, #12
   1505e:	46bd      	mov	sp, r7
   15060:	f85d 7b04 	ldr.w	r7, [sp], #4
   15064:	4770      	bx	lr
   15066:	bf00      	nop

00015068 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
   15068:	b580      	push	{r7, lr}
   1506a:	b084      	sub	sp, #16
   1506c:	af00      	add	r7, sp, #0
   1506e:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   15070:	2300      	movs	r3, #0
   15072:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   15074:	e009      	b.n	1508a <uart0_print_string+0x22>
    uart0_transmit(s[i]);
   15076:	7bfb      	ldrb	r3, [r7, #15]
   15078:	687a      	ldr	r2, [r7, #4]
   1507a:	4413      	add	r3, r2
   1507c:	781b      	ldrb	r3, [r3, #0]
   1507e:	4618      	mov	r0, r3
   15080:	f7ff ff4e 	bl	14f20 <uart0_transmit>
    i++;
   15084:	7bfb      	ldrb	r3, [r7, #15]
   15086:	3301      	adds	r3, #1
   15088:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   1508a:	7bfb      	ldrb	r3, [r7, #15]
   1508c:	687a      	ldr	r2, [r7, #4]
   1508e:	4413      	add	r3, r2
   15090:	781b      	ldrb	r3, [r3, #0]
   15092:	2b00      	cmp	r3, #0
   15094:	d1ef      	bne.n	15076 <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
   15096:	3710      	adds	r7, #16
   15098:	46bd      	mov	sp, r7
   1509a:	bd80      	pop	{r7, pc}

0001509c <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
   1509c:	b590      	push	{r4, r7, lr}
   1509e:	b089      	sub	sp, #36	; 0x24
   150a0:	af00      	add	r7, sp, #0
   150a2:	4603      	mov	r3, r0
   150a4:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   150a6:	f648 33c8 	movw	r3, #35784	; 0x8bc8
   150aa:	f2c0 0301 	movt	r3, #1
   150ae:	f107 040c 	add.w	r4, r7, #12
   150b2:	6818      	ldr	r0, [r3, #0]
   150b4:	6859      	ldr	r1, [r3, #4]
   150b6:	689a      	ldr	r2, [r3, #8]
   150b8:	68db      	ldr	r3, [r3, #12]
   150ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   150bc:	79fb      	ldrb	r3, [r7, #7]
   150be:	091b      	lsrs	r3, r3, #4
   150c0:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   150c2:	79fb      	ldrb	r3, [r7, #7]
   150c4:	f003 030f 	and.w	r3, r3, #15
   150c8:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
   150ca:	230f      	movs	r3, #15
   150cc:	77fb      	strb	r3, [r7, #31]
    low = 15;
   150ce:	230f      	movs	r3, #15
   150d0:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
   150d2:	7ffb      	ldrb	r3, [r7, #31]
   150d4:	f107 0220 	add.w	r2, r7, #32
   150d8:	4413      	add	r3, r2
   150da:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   150de:	4618      	mov	r0, r3
   150e0:	f7ff ff1e 	bl	14f20 <uart0_transmit>
  uart0_transmit(hex[low]);
   150e4:	7fbb      	ldrb	r3, [r7, #30]
   150e6:	f107 0220 	add.w	r2, r7, #32
   150ea:	4413      	add	r3, r2
   150ec:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   150f0:	4618      	mov	r0, r3
   150f2:	f7ff ff15 	bl	14f20 <uart0_transmit>
}
   150f6:	3724      	adds	r7, #36	; 0x24
   150f8:	46bd      	mov	sp, r7
   150fa:	bd90      	pop	{r4, r7, pc}

000150fc <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
   150fc:	b480      	push	{r7}
   150fe:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
   15100:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   15104:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15108:	781a      	ldrb	r2, [r3, #0]
   1510a:	f24c 63c5 	movw	r3, #50885	; 0xc6c5
   1510e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15112:	781b      	ldrb	r3, [r3, #0]
   15114:	b2db      	uxtb	r3, r3
   15116:	429a      	cmp	r2, r3
   15118:	d10e      	bne.n	15138 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
   1511a:	f242 030a 	movw	r3, #8202	; 0x200a
   1511e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15122:	f242 020a 	movw	r2, #8202	; 0x200a
   15126:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1512a:	7812      	ldrb	r2, [r2, #0]
   1512c:	b2d2      	uxtb	r2, r2
   1512e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   15132:	b2d2      	uxtb	r2, r2
   15134:	701a      	strb	r2, [r3, #0]
   15136:	e01d      	b.n	15174 <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
   15138:	f242 030c 	movw	r3, #8204	; 0x200c
   1513c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15140:	f24c 62c5 	movw	r2, #50885	; 0xc6c5
   15144:	f2c2 0204 	movt	r2, #8196	; 0x2004
   15148:	7812      	ldrb	r2, [r2, #0]
   1514a:	b2d2      	uxtb	r2, r2
   1514c:	4611      	mov	r1, r2
   1514e:	f24c 62c8 	movw	r2, #50888	; 0xc6c8
   15152:	f2c2 0204 	movt	r2, #8196	; 0x2004
   15156:	5c52      	ldrb	r2, [r2, r1]
   15158:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
   1515a:	f24c 63c5 	movw	r3, #50885	; 0xc6c5
   1515e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15162:	781b      	ldrb	r3, [r3, #0]
   15164:	b2db      	uxtb	r3, r3
   15166:	3301      	adds	r3, #1
   15168:	b2da      	uxtb	r2, r3
   1516a:	f24c 63c5 	movw	r3, #50885	; 0xc6c5
   1516e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15172:	701a      	strb	r2, [r3, #0]
  }
}
   15174:	46bd      	mov	sp, r7
   15176:	f85d 7b04 	ldr.w	r7, [sp], #4
   1517a:	4770      	bx	lr

0001517c <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
   1517c:	b480      	push	{r7}
   1517e:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
   15180:	f24c 73c8 	movw	r3, #51144	; 0xc7c8
   15184:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15188:	781a      	ldrb	r2, [r3, #0]
   1518a:	f24c 73c9 	movw	r3, #51145	; 0xc7c9
   1518e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15192:	781b      	ldrb	r3, [r3, #0]
   15194:	b2db      	uxtb	r3, r3
   15196:	429a      	cmp	r2, r3
   15198:	d10e      	bne.n	151b8 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
   1519a:	f242 039a 	movw	r3, #8346	; 0x209a
   1519e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151a2:	f242 029a 	movw	r2, #8346	; 0x209a
   151a6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   151aa:	7812      	ldrb	r2, [r2, #0]
   151ac:	b2d2      	uxtb	r2, r2
   151ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   151b2:	b2d2      	uxtb	r2, r2
   151b4:	701a      	strb	r2, [r3, #0]
   151b6:	e01d      	b.n	151f4 <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
   151b8:	f242 039c 	movw	r3, #8348	; 0x209c
   151bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151c0:	f24c 72c9 	movw	r2, #51145	; 0xc7c9
   151c4:	f2c2 0204 	movt	r2, #8196	; 0x2004
   151c8:	7812      	ldrb	r2, [r2, #0]
   151ca:	b2d2      	uxtb	r2, r2
   151cc:	4611      	mov	r1, r2
   151ce:	f24c 72cc 	movw	r2, #51148	; 0xc7cc
   151d2:	f2c2 0204 	movt	r2, #8196	; 0x2004
   151d6:	5c52      	ldrb	r2, [r2, r1]
   151d8:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
   151da:	f24c 73c9 	movw	r3, #51145	; 0xc7c9
   151de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151e2:	781b      	ldrb	r3, [r3, #0]
   151e4:	b2db      	uxtb	r3, r3
   151e6:	3301      	adds	r3, #1
   151e8:	b2da      	uxtb	r2, r3
   151ea:	f24c 73c9 	movw	r3, #51145	; 0xc7c9
   151ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151f2:	701a      	strb	r2, [r3, #0]
  }
}
   151f4:	46bd      	mov	sp, r7
   151f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   151fa:	4770      	bx	lr

000151fc <uart0_init>:

void uart0_init( void ) {
   151fc:	b480      	push	{r7}
   151fe:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
   15200:	f242 0390 	movw	r3, #8336	; 0x2090
   15204:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15208:	2200      	movs	r2, #0
   1520a:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
   1520c:	f242 0309 	movw	r3, #8201	; 0x2009
   15210:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15214:	2219      	movs	r2, #25
   15216:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
   15218:	f242 030b 	movw	r3, #8203	; 0x200b
   1521c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15220:	2200      	movs	r2, #0
   15222:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
   15224:	f242 030a 	movw	r3, #8202	; 0x200a
   15228:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1522c:	2218      	movs	r2, #24
   1522e:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
   15230:	f242 0395 	movw	r3, #8341	; 0x2095
   15234:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15238:	2206      	movs	r2, #6
   1523a:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
   1523c:	f242 030a 	movw	r3, #8202	; 0x200a
   15240:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15244:	f242 020a 	movw	r2, #8202	; 0x200a
   15248:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1524c:	7812      	ldrb	r2, [r2, #0]
   1524e:	b2d2      	uxtb	r2, r2
   15250:	f062 027f 	orn	r2, r2, #127	; 0x7f
   15254:	b2d2      	uxtb	r2, r2
   15256:	701a      	strb	r2, [r3, #0]
}
   15258:	46bd      	mov	sp, r7
   1525a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1525e:	4770      	bx	lr

00015260 <uart1_init>:

void uart1_init( void ) {
   15260:	b480      	push	{r7}
   15262:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
   15264:	f242 0398 	movw	r3, #8344	; 0x2098
   15268:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1526c:	2200      	movs	r2, #0
   1526e:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
   15270:	f242 0399 	movw	r3, #8345	; 0x2099
   15274:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15278:	2219      	movs	r2, #25
   1527a:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
   1527c:	f242 039b 	movw	r3, #8347	; 0x209b
   15280:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15284:	2200      	movs	r2, #0
   15286:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
   15288:	f242 039a 	movw	r3, #8346	; 0x209a
   1528c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15290:	2218      	movs	r2, #24
   15292:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
   15294:	f242 039d 	movw	r3, #8349	; 0x209d
   15298:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1529c:	2206      	movs	r2, #6
   1529e:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
   152a0:	f242 039a 	movw	r3, #8346	; 0x209a
   152a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   152a8:	f242 029a 	movw	r2, #8346	; 0x209a
   152ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
   152b0:	7812      	ldrb	r2, [r2, #0]
   152b2:	b2d2      	uxtb	r2, r2
   152b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   152b8:	b2d2      	uxtb	r2, r2
   152ba:	701a      	strb	r2, [r3, #0]
}
   152bc:	46bd      	mov	sp, r7
   152be:	f85d 7b04 	ldr.w	r7, [sp], #4
   152c2:	4770      	bx	lr
   152c4:	0000      	movs	r0, r0
	...

000152c8 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
   152c8:	b480      	push	{r7}
   152ca:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
   152cc:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   152d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152d4:	f04f 0200 	mov.w	r2, #0
   152d8:	601a      	str	r2, [r3, #0]
   152da:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   152de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152e2:	f04f 0200 	mov.w	r2, #0
   152e6:	601a      	str	r2, [r3, #0]
   152e8:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   152ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152f0:	f04f 0200 	mov.w	r2, #0
   152f4:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
   152f6:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   152fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152fe:	f04f 0200 	mov.w	r2, #0
   15302:	601a      	str	r2, [r3, #0]
   15304:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
   15308:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1530c:	f04f 0200 	mov.w	r2, #0
   15310:	601a      	str	r2, [r3, #0]
   15312:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   15316:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1531a:	f04f 0200 	mov.w	r2, #0
   1531e:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   15320:	f64c 1304 	movw	r3, #51460	; 0xc904
   15324:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15328:	f04f 0200 	mov.w	r2, #0
   1532c:	601a      	str	r2, [r3, #0]
   1532e:	f64c 1308 	movw	r3, #51464	; 0xc908
   15332:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15336:	f04f 0200 	mov.w	r2, #0
   1533a:	601a      	str	r2, [r3, #0]
   1533c:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   15340:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15344:	f04f 0200 	mov.w	r2, #0
   15348:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   1534a:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   1534e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15352:	f04f 0200 	mov.w	r2, #0
   15356:	601a      	str	r2, [r3, #0]
   15358:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   1535c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15360:	f04f 0200 	mov.w	r2, #0
   15364:	601a      	str	r2, [r3, #0]
   15366:	f64c 03f8 	movw	r3, #51448	; 0xc8f8
   1536a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1536e:	f04f 0200 	mov.w	r2, #0
   15372:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   15374:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   15378:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1537c:	2200      	movs	r2, #0
   1537e:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   15380:	f240 5348 	movw	r3, #1352	; 0x548
   15384:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15388:	681a      	ldr	r2, [r3, #0]
   1538a:	f64c 130c 	movw	r3, #51468	; 0xc90c
   1538e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15392:	601a      	str	r2, [r3, #0]
}
   15394:	46bd      	mov	sp, r7
   15396:	f85d 7b04 	ldr.w	r7, [sp], #4
   1539a:	4770      	bx	lr

0001539c <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   1539c:	b580      	push	{r7, lr}
   1539e:	b082      	sub	sp, #8
   153a0:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   153a2:	f240 533c 	movw	r3, #1340	; 0x53c
   153a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153aa:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   153ac:	2b01      	cmp	r3, #1
   153ae:	d105      	bne.n	153bc <estimator_update_state_infrared+0x20>
   153b0:	f64c 130c 	movw	r3, #51468	; 0xc90c
   153b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   153b8:	681b      	ldr	r3, [r3, #0]
   153ba:	e004      	b.n	153c6 <estimator_update_state_infrared+0x2a>
   153bc:	f240 5348 	movw	r3, #1352	; 0x548
   153c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   153c4:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   153c6:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   153c8:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
   153cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   153d0:	881b      	ldrh	r3, [r3, #0]
   153d2:	b21b      	sxth	r3, r3
   153d4:	4618      	mov	r0, r3
   153d6:	f003 f899 	bl	1850c <__aeabi_i2f>
   153da:	4603      	mov	r3, r0
   153dc:	4618      	mov	r0, r3
   153de:	6879      	ldr	r1, [r7, #4]
   153e0:	f003 f8e8 	bl	185b4 <__aeabi_fmul>
   153e4:	4603      	mov	r3, r0
   153e6:	461a      	mov	r2, r3
   153e8:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   153ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   153f0:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   153f2:	f24c 53ba 	movw	r3, #50618	; 0xc5ba
   153f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   153fa:	881b      	ldrh	r3, [r3, #0]
   153fc:	b21b      	sxth	r3, r3
   153fe:	4618      	mov	r0, r3
   15400:	f003 f884 	bl	1850c <__aeabi_i2f>
   15404:	4603      	mov	r3, r0
   15406:	4618      	mov	r0, r3
   15408:	6879      	ldr	r1, [r7, #4]
   1540a:	f003 f8d3 	bl	185b4 <__aeabi_fmul>
   1540e:	4603      	mov	r3, r0
   15410:	461a      	mov	r2, r3
   15412:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   15416:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1541a:	601a      	str	r2, [r3, #0]
}
   1541c:	3708      	adds	r7, #8
   1541e:	46bd      	mov	sp, r7
   15420:	bd80      	pop	{r7, pc}
   15422:	bf00      	nop

00015424 <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   15424:	b5b0      	push	{r4, r5, r7, lr}
   15426:	b084      	sub	sp, #16
   15428:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   1542a:	f64c 1318 	movw	r3, #51480	; 0xc918
   1542e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15432:	781b      	ldrb	r3, [r3, #0]
   15434:	2b00      	cmp	r3, #0
   15436:	f000 81e8 	beq.w	1580a <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   1543a:	f24c 4388 	movw	r3, #50312	; 0xc488
   1543e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15442:	681a      	ldr	r2, [r3, #0]
   15444:	f64c 131c 	movw	r3, #51484	; 0xc91c
   15448:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1544c:	681b      	ldr	r3, [r3, #0]
   1544e:	4610      	mov	r0, r2
   15450:	4619      	mov	r1, r3
   15452:	f002 ffa5 	bl	183a0 <__aeabi_fsub>
   15456:	4603      	mov	r3, r0
   15458:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   1545a:	68b8      	ldr	r0, [r7, #8]
   1545c:	f002 fc16 	bl	17c8c <__aeabi_f2d>
   15460:	4602      	mov	r2, r0
   15462:	460b      	mov	r3, r1
   15464:	4610      	mov	r0, r2
   15466:	4619      	mov	r1, r3
   15468:	a385      	add	r3, pc, #532	; (adr r3, 15680 <estimator_update_ir_estim+0x25c>)
   1546a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1546e:	f002 fef1 	bl	18254 <__aeabi_dcmpgt>
   15472:	4603      	mov	r3, r0
   15474:	2b00      	cmp	r3, #0
   15476:	d100      	bne.n	1547a <estimator_update_ir_estim+0x56>
   15478:	e219      	b.n	158ae <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   1547a:	f64c 1308 	movw	r3, #51464	; 0xc908
   1547e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15482:	681a      	ldr	r2, [r3, #0]
   15484:	f64c 1320 	movw	r3, #51488	; 0xc920
   15488:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1548c:	681b      	ldr	r3, [r3, #0]
   1548e:	4610      	mov	r0, r2
   15490:	4619      	mov	r1, r3
   15492:	f002 ff85 	bl	183a0 <__aeabi_fsub>
   15496:	4603      	mov	r3, r0
   15498:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   1549a:	e013      	b.n	154c4 <estimator_update_ir_estim+0xa0>
   1549c:	68f8      	ldr	r0, [r7, #12]
   1549e:	f002 fbf5 	bl	17c8c <__aeabi_f2d>
   154a2:	4602      	mov	r2, r0
   154a4:	460b      	mov	r3, r1
   154a6:	4610      	mov	r0, r2
   154a8:	4619      	mov	r1, r3
   154aa:	a377      	add	r3, pc, #476	; (adr r3, 15688 <estimator_update_ir_estim+0x264>)
   154ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   154b0:	f002 fa8c 	bl	179cc <__aeabi_dsub>
   154b4:	4602      	mov	r2, r0
   154b6:	460b      	mov	r3, r1
   154b8:	4610      	mov	r0, r2
   154ba:	4619      	mov	r1, r3
   154bc:	f002 ff1c 	bl	182f8 <__aeabi_d2f>
   154c0:	4603      	mov	r3, r0
   154c2:	60fb      	str	r3, [r7, #12]
   154c4:	68f8      	ldr	r0, [r7, #12]
   154c6:	f002 fbe1 	bl	17c8c <__aeabi_f2d>
   154ca:	4602      	mov	r2, r0
   154cc:	460b      	mov	r3, r1
   154ce:	4610      	mov	r0, r2
   154d0:	4619      	mov	r1, r3
   154d2:	a36f      	add	r3, pc, #444	; (adr r3, 15690 <estimator_update_ir_estim+0x26c>)
   154d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   154d8:	f002 febc 	bl	18254 <__aeabi_dcmpgt>
   154dc:	4603      	mov	r3, r0
   154de:	2b00      	cmp	r3, #0
   154e0:	d1dc      	bne.n	1549c <estimator_update_ir_estim+0x78>
   154e2:	e013      	b.n	1550c <estimator_update_ir_estim+0xe8>
   154e4:	68f8      	ldr	r0, [r7, #12]
   154e6:	f002 fbd1 	bl	17c8c <__aeabi_f2d>
   154ea:	4602      	mov	r2, r0
   154ec:	460b      	mov	r3, r1
   154ee:	4610      	mov	r0, r2
   154f0:	4619      	mov	r1, r3
   154f2:	a365      	add	r3, pc, #404	; (adr r3, 15688 <estimator_update_ir_estim+0x264>)
   154f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   154f8:	f002 fa6a 	bl	179d0 <__adddf3>
   154fc:	4602      	mov	r2, r0
   154fe:	460b      	mov	r3, r1
   15500:	4610      	mov	r0, r2
   15502:	4619      	mov	r1, r3
   15504:	f002 fef8 	bl	182f8 <__aeabi_d2f>
   15508:	4603      	mov	r3, r0
   1550a:	60fb      	str	r3, [r7, #12]
   1550c:	68f8      	ldr	r0, [r7, #12]
   1550e:	f002 fbbd 	bl	17c8c <__aeabi_f2d>
   15512:	4602      	mov	r2, r0
   15514:	460b      	mov	r3, r1
   15516:	4610      	mov	r0, r2
   15518:	4619      	mov	r1, r3
   1551a:	a35f      	add	r3, pc, #380	; (adr r3, 15698 <estimator_update_ir_estim+0x274>)
   1551c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15520:	f002 fe7a 	bl	18218 <__aeabi_dcmplt>
   15524:	4603      	mov	r3, r0
   15526:	2b00      	cmp	r3, #0
   15528:	d1dc      	bne.n	154e4 <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   1552a:	68f8      	ldr	r0, [r7, #12]
   1552c:	68b9      	ldr	r1, [r7, #8]
   1552e:	f003 f8f5 	bl	1871c <__aeabi_fdiv>
   15532:	4603      	mov	r3, r0
   15534:	4618      	mov	r0, r3
   15536:	f002 fba9 	bl	17c8c <__aeabi_f2d>
   1553a:	4602      	mov	r2, r0
   1553c:	460b      	mov	r3, r1
   1553e:	4610      	mov	r0, r2
   15540:	4619      	mov	r1, r3
   15542:	f04f 0200 	mov.w	r2, #0
   15546:	f04f 0300 	mov.w	r3, #0
   1554a:	f2c4 0324 	movt	r3, #16420	; 0x4024
   1554e:	f002 fbf1 	bl	17d34 <__aeabi_dmul>
   15552:	4602      	mov	r2, r0
   15554:	460b      	mov	r3, r1
   15556:	4610      	mov	r0, r2
   15558:	4619      	mov	r1, r3
   1555a:	a351      	add	r3, pc, #324	; (adr r3, 156a0 <estimator_update_ir_estim+0x27c>)
   1555c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15560:	f002 fd12 	bl	17f88 <__aeabi_ddiv>
   15564:	4602      	mov	r2, r0
   15566:	460b      	mov	r3, r1
   15568:	4610      	mov	r0, r2
   1556a:	4619      	mov	r1, r3
   1556c:	f002 fec4 	bl	182f8 <__aeabi_d2f>
   15570:	4603      	mov	r3, r0
   15572:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   15574:	e013      	b.n	1559e <estimator_update_ir_estim+0x17a>
   15576:	68f8      	ldr	r0, [r7, #12]
   15578:	f002 fb88 	bl	17c8c <__aeabi_f2d>
   1557c:	4602      	mov	r2, r0
   1557e:	460b      	mov	r3, r1
   15580:	4610      	mov	r0, r2
   15582:	4619      	mov	r1, r3
   15584:	a340      	add	r3, pc, #256	; (adr r3, 15688 <estimator_update_ir_estim+0x264>)
   15586:	e9d3 2300 	ldrd	r2, r3, [r3]
   1558a:	f002 fa1f 	bl	179cc <__aeabi_dsub>
   1558e:	4602      	mov	r2, r0
   15590:	460b      	mov	r3, r1
   15592:	4610      	mov	r0, r2
   15594:	4619      	mov	r1, r3
   15596:	f002 feaf 	bl	182f8 <__aeabi_d2f>
   1559a:	4603      	mov	r3, r0
   1559c:	60fb      	str	r3, [r7, #12]
   1559e:	68f8      	ldr	r0, [r7, #12]
   155a0:	f002 fb74 	bl	17c8c <__aeabi_f2d>
   155a4:	4602      	mov	r2, r0
   155a6:	460b      	mov	r3, r1
   155a8:	4610      	mov	r0, r2
   155aa:	4619      	mov	r1, r3
   155ac:	a338      	add	r3, pc, #224	; (adr r3, 15690 <estimator_update_ir_estim+0x26c>)
   155ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   155b2:	f002 fe4f 	bl	18254 <__aeabi_dcmpgt>
   155b6:	4603      	mov	r3, r0
   155b8:	2b00      	cmp	r3, #0
   155ba:	d1dc      	bne.n	15576 <estimator_update_ir_estim+0x152>
   155bc:	e013      	b.n	155e6 <estimator_update_ir_estim+0x1c2>
   155be:	68f8      	ldr	r0, [r7, #12]
   155c0:	f002 fb64 	bl	17c8c <__aeabi_f2d>
   155c4:	4602      	mov	r2, r0
   155c6:	460b      	mov	r3, r1
   155c8:	4610      	mov	r0, r2
   155ca:	4619      	mov	r1, r3
   155cc:	a32e      	add	r3, pc, #184	; (adr r3, 15688 <estimator_update_ir_estim+0x264>)
   155ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   155d2:	f002 f9fd 	bl	179d0 <__adddf3>
   155d6:	4602      	mov	r2, r0
   155d8:	460b      	mov	r3, r1
   155da:	4610      	mov	r0, r2
   155dc:	4619      	mov	r1, r3
   155de:	f002 fe8b 	bl	182f8 <__aeabi_d2f>
   155e2:	4603      	mov	r3, r0
   155e4:	60fb      	str	r3, [r7, #12]
   155e6:	68f8      	ldr	r0, [r7, #12]
   155e8:	f002 fb50 	bl	17c8c <__aeabi_f2d>
   155ec:	4602      	mov	r2, r0
   155ee:	460b      	mov	r3, r1
   155f0:	4610      	mov	r0, r2
   155f2:	4619      	mov	r1, r3
   155f4:	a328      	add	r3, pc, #160	; (adr r3, 15698 <estimator_update_ir_estim+0x274>)
   155f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   155fa:	f002 fe0d 	bl	18218 <__aeabi_dcmplt>
   155fe:	4603      	mov	r3, r0
   15600:	2b00      	cmp	r3, #0
   15602:	d1dc      	bne.n	155be <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   15604:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
   15608:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1560c:	881b      	ldrh	r3, [r3, #0]
   1560e:	b21b      	sxth	r3, r3
   15610:	4618      	mov	r0, r3
   15612:	f002 ff7b 	bl	1850c <__aeabi_i2f>
   15616:	4602      	mov	r2, r0
   15618:	f64c 1310 	movw	r3, #51472	; 0xc910
   1561c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15620:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   15622:	f64c 1314 	movw	r3, #51476	; 0xc914
   15626:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1562a:	68fa      	ldr	r2, [r7, #12]
   1562c:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   1562e:	68f8      	ldr	r0, [r7, #12]
   15630:	f04f 0100 	mov.w	r1, #0
   15634:	f003 f95c 	bl	188f0 <__aeabi_fcmplt>
   15638:	4603      	mov	r3, r0
   1563a:	2b00      	cmp	r3, #0
   1563c:	d003      	beq.n	15646 <estimator_update_ir_estim+0x222>
   1563e:	68fb      	ldr	r3, [r7, #12]
   15640:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   15644:	e000      	b.n	15648 <estimator_update_ir_estim+0x224>
   15646:	68fb      	ldr	r3, [r7, #12]
   15648:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   1564a:	6878      	ldr	r0, [r7, #4]
   1564c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   15650:	f003 f94e 	bl	188f0 <__aeabi_fcmplt>
   15654:	4603      	mov	r3, r0
   15656:	2b00      	cmp	r3, #0
   15658:	d100      	bne.n	1565c <estimator_update_ir_estim+0x238>
   1565a:	e128      	b.n	158ae <estimator_update_ir_estim+0x48a>
   1565c:	6878      	ldr	r0, [r7, #4]
   1565e:	f002 fb15 	bl	17c8c <__aeabi_f2d>
   15662:	4602      	mov	r2, r0
   15664:	460b      	mov	r3, r1
   15666:	4610      	mov	r0, r2
   15668:	4619      	mov	r1, r3
   1566a:	a30f      	add	r3, pc, #60	; (adr r3, 156a8 <estimator_update_ir_estim+0x284>)
   1566c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15670:	f002 fdf0 	bl	18254 <__aeabi_dcmpgt>
   15674:	4603      	mov	r3, r0
   15676:	2b00      	cmp	r3, #0
   15678:	d11a      	bne.n	156b0 <estimator_update_ir_estim+0x28c>
   1567a:	e118      	b.n	158ae <estimator_update_ir_estim+0x48a>
   1567c:	f3af 8000 	nop.w
   15680:	9999999a 	.word	0x9999999a
   15684:	3fb99999 	.word	0x3fb99999
   15688:	54442d18 	.word	0x54442d18
   1568c:	401921fb 	.word	0x401921fb
   15690:	54442d18 	.word	0x54442d18
   15694:	400921fb 	.word	0x400921fb
   15698:	54442d18 	.word	0x54442d18
   1569c:	c00921fb 	.word	0xc00921fb
   156a0:	51eb851f 	.word	0x51eb851f
   156a4:	40239eb8 	.word	0x40239eb8
   156a8:	9999999a 	.word	0x9999999a
   156ac:	3fa99999 	.word	0x3fa99999
   156b0:	f240 5340 	movw	r3, #1344	; 0x540
   156b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156b8:	881b      	ldrh	r3, [r3, #0]
   156ba:	b21b      	sxth	r3, r3
   156bc:	425b      	negs	r3, r3
   156be:	0fda      	lsrs	r2, r3, #31
   156c0:	4413      	add	r3, r2
   156c2:	105b      	asrs	r3, r3, #1
   156c4:	461a      	mov	r2, r3
   156c6:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
   156ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156ce:	881b      	ldrh	r3, [r3, #0]
   156d0:	b21b      	sxth	r3, r3
   156d2:	429a      	cmp	r2, r3
   156d4:	f280 8098 	bge.w	15808 <estimator_update_ir_estim+0x3e4>
   156d8:	f240 5340 	movw	r3, #1344	; 0x540
   156dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   156e0:	881b      	ldrh	r3, [r3, #0]
   156e2:	b21b      	sxth	r3, r3
   156e4:	0fda      	lsrs	r2, r3, #31
   156e6:	4413      	add	r3, r2
   156e8:	105b      	asrs	r3, r3, #1
   156ea:	b29a      	uxth	r2, r3
   156ec:	f24c 53b8 	movw	r3, #50616	; 0xc5b8
   156f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156f4:	881b      	ldrh	r3, [r3, #0]
   156f6:	b212      	sxth	r2, r2
   156f8:	b21b      	sxth	r3, r3
   156fa:	429a      	cmp	r2, r3
   156fc:	f340 8084 	ble.w	15808 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   15700:	f64c 1314 	movw	r3, #51476	; 0xc914
   15704:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15708:	681a      	ldr	r2, [r3, #0]
   1570a:	f64c 1310 	movw	r3, #51472	; 0xc910
   1570e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15712:	681b      	ldr	r3, [r3, #0]
   15714:	4610      	mov	r0, r2
   15716:	4619      	mov	r1, r3
   15718:	f002 ff4c 	bl	185b4 <__aeabi_fmul>
   1571c:	4603      	mov	r3, r0
   1571e:	4618      	mov	r0, r3
   15720:	f002 fab4 	bl	17c8c <__aeabi_f2d>
   15724:	4604      	mov	r4, r0
   15726:	460d      	mov	r5, r1
   15728:	f64c 1324 	movw	r3, #51492	; 0xc924
   1572c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15730:	681b      	ldr	r3, [r3, #0]
   15732:	4618      	mov	r0, r3
   15734:	f002 faaa 	bl	17c8c <__aeabi_f2d>
   15738:	4602      	mov	r2, r0
   1573a:	460b      	mov	r3, r1
   1573c:	4610      	mov	r0, r2
   1573e:	4619      	mov	r1, r3
   15740:	a367      	add	r3, pc, #412	; (adr r3, 158e0 <estimator_update_ir_estim+0x4bc>)
   15742:	e9d3 2300 	ldrd	r2, r3, [r3]
   15746:	f002 faf5 	bl	17d34 <__aeabi_dmul>
   1574a:	4602      	mov	r2, r0
   1574c:	460b      	mov	r3, r1
   1574e:	4620      	mov	r0, r4
   15750:	4629      	mov	r1, r5
   15752:	f002 f93d 	bl	179d0 <__adddf3>
   15756:	4602      	mov	r2, r0
   15758:	460b      	mov	r3, r1
   1575a:	4610      	mov	r0, r2
   1575c:	4619      	mov	r1, r3
   1575e:	f002 fdcb 	bl	182f8 <__aeabi_d2f>
   15762:	4602      	mov	r2, r0
   15764:	f64c 1324 	movw	r3, #51492	; 0xc924
   15768:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1576c:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   1576e:	f64c 1310 	movw	r3, #51472	; 0xc910
   15772:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15776:	681a      	ldr	r2, [r3, #0]
   15778:	f64c 1310 	movw	r3, #51472	; 0xc910
   1577c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15780:	681b      	ldr	r3, [r3, #0]
   15782:	4610      	mov	r0, r2
   15784:	4619      	mov	r1, r3
   15786:	f002 ff15 	bl	185b4 <__aeabi_fmul>
   1578a:	4603      	mov	r3, r0
   1578c:	4618      	mov	r0, r3
   1578e:	f002 fa7d 	bl	17c8c <__aeabi_f2d>
   15792:	4604      	mov	r4, r0
   15794:	460d      	mov	r5, r1
   15796:	f64c 1328 	movw	r3, #51496	; 0xc928
   1579a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1579e:	681b      	ldr	r3, [r3, #0]
   157a0:	4618      	mov	r0, r3
   157a2:	f002 fa73 	bl	17c8c <__aeabi_f2d>
   157a6:	4602      	mov	r2, r0
   157a8:	460b      	mov	r3, r1
   157aa:	4610      	mov	r0, r2
   157ac:	4619      	mov	r1, r3
   157ae:	a34c      	add	r3, pc, #304	; (adr r3, 158e0 <estimator_update_ir_estim+0x4bc>)
   157b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   157b4:	f002 fabe 	bl	17d34 <__aeabi_dmul>
   157b8:	4602      	mov	r2, r0
   157ba:	460b      	mov	r3, r1
   157bc:	4620      	mov	r0, r4
   157be:	4629      	mov	r1, r5
   157c0:	f002 f906 	bl	179d0 <__adddf3>
   157c4:	4602      	mov	r2, r0
   157c6:	460b      	mov	r3, r1
   157c8:	4610      	mov	r0, r2
   157ca:	4619      	mov	r1, r3
   157cc:	f002 fd94 	bl	182f8 <__aeabi_d2f>
   157d0:	4602      	mov	r2, r0
   157d2:	f64c 1328 	movw	r3, #51496	; 0xc928
   157d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157da:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   157dc:	f64c 1324 	movw	r3, #51492	; 0xc924
   157e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157e4:	681a      	ldr	r2, [r3, #0]
   157e6:	f64c 1328 	movw	r3, #51496	; 0xc928
   157ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157ee:	681b      	ldr	r3, [r3, #0]
   157f0:	4610      	mov	r0, r2
   157f2:	4619      	mov	r1, r3
   157f4:	f002 ff92 	bl	1871c <__aeabi_fdiv>
   157f8:	4603      	mov	r3, r0
   157fa:	461a      	mov	r2, r3
   157fc:	f64c 130c 	movw	r3, #51468	; 0xc90c
   15800:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15804:	601a      	str	r2, [r3, #0]
   15806:	e052      	b.n	158ae <estimator_update_ir_estim+0x48a>
   15808:	e051      	b.n	158ae <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   1580a:	f64c 1318 	movw	r3, #51480	; 0xc918
   1580e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15812:	2201      	movs	r2, #1
   15814:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   15816:	f240 5340 	movw	r3, #1344	; 0x540
   1581a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1581e:	881b      	ldrh	r3, [r3, #0]
   15820:	b21b      	sxth	r3, r3
   15822:	4618      	mov	r0, r3
   15824:	f002 fe72 	bl	1850c <__aeabi_i2f>
   15828:	4603      	mov	r3, r0
   1582a:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   1582c:	6838      	ldr	r0, [r7, #0]
   1582e:	6839      	ldr	r1, [r7, #0]
   15830:	f002 fec0 	bl	185b4 <__aeabi_fmul>
   15834:	4603      	mov	r3, r0
   15836:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   15838:	f64c 130c 	movw	r3, #51468	; 0xc90c
   1583c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15840:	681b      	ldr	r3, [r3, #0]
   15842:	4618      	mov	r0, r3
   15844:	f002 fa22 	bl	17c8c <__aeabi_f2d>
   15848:	4602      	mov	r2, r0
   1584a:	460b      	mov	r3, r1
   1584c:	4610      	mov	r0, r2
   1584e:	4619      	mov	r1, r3
   15850:	f04f 0200 	mov.w	r2, #0
   15854:	f04f 0300 	mov.w	r3, #0
   15858:	f2c4 0359 	movt	r3, #16473	; 0x4059
   1585c:	f002 fa6a 	bl	17d34 <__aeabi_dmul>
   15860:	4602      	mov	r2, r0
   15862:	460b      	mov	r3, r1
   15864:	4614      	mov	r4, r2
   15866:	461d      	mov	r5, r3
   15868:	6838      	ldr	r0, [r7, #0]
   1586a:	f002 fa0f 	bl	17c8c <__aeabi_f2d>
   1586e:	4602      	mov	r2, r0
   15870:	460b      	mov	r3, r1
   15872:	4620      	mov	r0, r4
   15874:	4629      	mov	r1, r5
   15876:	f002 fa5d 	bl	17d34 <__aeabi_dmul>
   1587a:	4602      	mov	r2, r0
   1587c:	460b      	mov	r3, r1
   1587e:	4610      	mov	r0, r2
   15880:	4619      	mov	r1, r3
   15882:	f002 fd39 	bl	182f8 <__aeabi_d2f>
   15886:	4602      	mov	r2, r0
   15888:	f64c 1324 	movw	r3, #51492	; 0xc924
   1588c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15890:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   15892:	6838      	ldr	r0, [r7, #0]
   15894:	f04f 0100 	mov.w	r1, #0
   15898:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   1589c:	f002 fe8a 	bl	185b4 <__aeabi_fmul>
   158a0:	4603      	mov	r3, r0
   158a2:	461a      	mov	r2, r3
   158a4:	f64c 1328 	movw	r3, #51496	; 0xc928
   158a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158ac:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   158ae:	f64c 1308 	movw	r3, #51464	; 0xc908
   158b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158b6:	681a      	ldr	r2, [r3, #0]
   158b8:	f64c 1320 	movw	r3, #51488	; 0xc920
   158bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158c0:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   158c2:	f24c 4388 	movw	r3, #50312	; 0xc488
   158c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158ca:	681a      	ldr	r2, [r3, #0]
   158cc:	f64c 131c 	movw	r3, #51484	; 0xc91c
   158d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158d4:	601a      	str	r2, [r3, #0]
}
   158d6:	3710      	adds	r7, #16
   158d8:	46bd      	mov	sp, r7
   158da:	bdb0      	pop	{r4, r5, r7, pc}
   158dc:	f3af 8000 	nop.w
   158e0:	d916872b 	.word	0xd916872b
   158e4:	3feff7ce 	.word	0x3feff7ce

000158e8 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   158e8:	b580      	push	{r7, lr}
   158ea:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   158ec:	f24c 43ac 	movw	r3, #50348	; 0xc4ac
   158f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158f4:	781b      	ldrb	r3, [r3, #0]
   158f6:	f003 0320 	and.w	r3, r3, #32
   158fa:	2b00      	cmp	r3, #0
   158fc:	d044      	beq.n	15988 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   158fe:	f24c 43a4 	movw	r3, #50340	; 0xc4a4
   15902:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15906:	681a      	ldr	r2, [r3, #0]
   15908:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1590c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15910:	601a      	str	r2, [r3, #0]
   15912:	f24c 43a8 	movw	r3, #50344	; 0xc4a8
   15916:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1591a:	681a      	ldr	r2, [r3, #0]
   1591c:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   15920:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15924:	601a      	str	r2, [r3, #0]
   15926:	f24c 438c 	movw	r3, #50316	; 0xc48c
   1592a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1592e:	681a      	ldr	r2, [r3, #0]
   15930:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   15934:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15938:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   1593a:	f24c 4390 	movw	r3, #50320	; 0xc490
   1593e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15942:	681a      	ldr	r2, [r3, #0]
   15944:	f64c 1304 	movw	r3, #51460	; 0xc904
   15948:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1594c:	601a      	str	r2, [r3, #0]
   1594e:	f24c 4398 	movw	r3, #50328	; 0xc498
   15952:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15956:	681a      	ldr	r2, [r3, #0]
   15958:	f64c 1308 	movw	r3, #51464	; 0xc908
   1595c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15960:	601a      	str	r2, [r3, #0]
   15962:	f24c 4394 	movw	r3, #50324	; 0xc494
   15966:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1596a:	681a      	ldr	r2, [r3, #0]
   1596c:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   15970:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15974:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   15976:	f64c 03fc 	movw	r3, #51452	; 0xc8fc
   1597a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1597e:	881b      	ldrh	r3, [r3, #0]
   15980:	2b00      	cmp	r3, #0
   15982:	d001      	beq.n	15988 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   15984:	f7ff fd4e 	bl	15424 <estimator_update_ir_estim>
  }
}
   15988:	bd80      	pop	{r7, pc}
   1598a:	bf00      	nop

0001598c <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   1598c:	b480      	push	{r7}
   1598e:	af00      	add	r7, sp, #0
  
}
   15990:	46bd      	mov	sp, r7
   15992:	f85d 7b04 	ldr.w	r7, [sp], #4
   15996:	4770      	bx	lr

00015998 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   15998:	b5b0      	push	{r4, r5, r7, lr}
   1599a:	b082      	sub	sp, #8
   1599c:	af00      	add	r7, sp, #0
   1599e:	4603      	mov	r3, r0
   159a0:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   159a2:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
   159a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159aa:	781b      	ldrb	r3, [r3, #0]
   159ac:	2b01      	cmp	r3, #1
   159ae:	f040 80e0 	bne.w	15b72 <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   159b2:	f64c 132c 	movw	r3, #51500	; 0xc92c
   159b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159ba:	781b      	ldrb	r3, [r3, #0]
   159bc:	2b02      	cmp	r3, #2
   159be:	d168      	bne.n	15a92 <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   159c0:	79fb      	ldrb	r3, [r7, #7]
   159c2:	2b00      	cmp	r3, #0
   159c4:	d013      	beq.n	159ee <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   159c6:	f240 5344 	movw	r3, #1348	; 0x544
   159ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159ce:	881a      	ldrh	r2, [r3, #0]
   159d0:	f64c 1332 	movw	r3, #51506	; 0xc932
   159d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159d8:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   159da:	f24c 4320 	movw	r3, #50208	; 0xc420
   159de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159e2:	895a      	ldrh	r2, [r3, #10]
   159e4:	f64c 132e 	movw	r3, #51502	; 0xc92e
   159e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159ec:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   159ee:	f24c 4320 	movw	r3, #50208	; 0xc420
   159f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159f6:	895b      	ldrh	r3, [r3, #10]
   159f8:	b21a      	sxth	r2, r3
   159fa:	f64c 132e 	movw	r3, #51502	; 0xc92e
   159fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a02:	881b      	ldrh	r3, [r3, #0]
   15a04:	b21b      	sxth	r3, r3
   15a06:	1ad3      	subs	r3, r2, r3
   15a08:	4618      	mov	r0, r3
   15a0a:	f002 fd7f 	bl	1850c <__aeabi_i2f>
   15a0e:	4603      	mov	r3, r0
   15a10:	4618      	mov	r0, r3
   15a12:	f002 f93b 	bl	17c8c <__aeabi_f2d>
   15a16:	4602      	mov	r2, r0
   15a18:	460b      	mov	r3, r1
   15a1a:	4610      	mov	r0, r2
   15a1c:	4619      	mov	r1, r3
   15a1e:	f04f 0200 	mov.w	r2, #0
   15a22:	f04f 0300 	mov.w	r3, #0
   15a26:	f2c4 034e 	movt	r3, #16462	; 0x404e
   15a2a:	f002 f983 	bl	17d34 <__aeabi_dmul>
   15a2e:	4602      	mov	r2, r0
   15a30:	460b      	mov	r3, r1
   15a32:	4610      	mov	r0, r2
   15a34:	4619      	mov	r1, r3
   15a36:	f04f 0200 	mov.w	r2, #0
   15a3a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15a3e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15a42:	f002 faa1 	bl	17f88 <__aeabi_ddiv>
   15a46:	4602      	mov	r2, r0
   15a48:	460b      	mov	r3, r1
   15a4a:	4610      	mov	r0, r2
   15a4c:	4619      	mov	r1, r3
   15a4e:	f002 fc0b 	bl	18268 <__aeabi_d2iz>
   15a52:	4603      	mov	r3, r0
   15a54:	b29b      	uxth	r3, r3
   15a56:	b29a      	uxth	r2, r3
   15a58:	f64c 1332 	movw	r3, #51506	; 0xc932
   15a5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a60:	881b      	ldrh	r3, [r3, #0]
   15a62:	b29b      	uxth	r3, r3
   15a64:	4413      	add	r3, r2
   15a66:	b29b      	uxth	r3, r3
   15a68:	b29a      	uxth	r2, r3
   15a6a:	f240 5344 	movw	r3, #1348	; 0x544
   15a6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a72:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   15a74:	f240 5344 	movw	r3, #1348	; 0x544
   15a78:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a7c:	881b      	ldrh	r3, [r3, #0]
   15a7e:	b21b      	sxth	r3, r3
   15a80:	4618      	mov	r0, r3
   15a82:	f002 fd43 	bl	1850c <__aeabi_i2f>
   15a86:	4602      	mov	r2, r0
   15a88:	f24c 3308 	movw	r3, #49928	; 0xc308
   15a8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a90:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15a92:	f64c 132c 	movw	r3, #51500	; 0xc92c
   15a96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a9a:	781b      	ldrb	r3, [r3, #0]
   15a9c:	2b02      	cmp	r3, #2
   15a9e:	d168      	bne.n	15b72 <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   15aa0:	79fb      	ldrb	r3, [r7, #7]
   15aa2:	2b00      	cmp	r3, #0
   15aa4:	d013      	beq.n	15ace <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   15aa6:	f240 5342 	movw	r3, #1346	; 0x542
   15aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15aae:	881a      	ldrh	r2, [r3, #0]
   15ab0:	f64c 1334 	movw	r3, #51508	; 0xc934
   15ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ab8:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   15aba:	f24c 4320 	movw	r3, #50208	; 0xc420
   15abe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ac2:	899a      	ldrh	r2, [r3, #12]
   15ac4:	f64c 1330 	movw	r3, #51504	; 0xc930
   15ac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15acc:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   15ace:	f24c 4320 	movw	r3, #50208	; 0xc420
   15ad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ad6:	899b      	ldrh	r3, [r3, #12]
   15ad8:	b21a      	sxth	r2, r3
   15ada:	f64c 1330 	movw	r3, #51504	; 0xc930
   15ade:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ae2:	881b      	ldrh	r3, [r3, #0]
   15ae4:	b21b      	sxth	r3, r3
   15ae6:	1ad3      	subs	r3, r2, r3
   15ae8:	4618      	mov	r0, r3
   15aea:	f002 fd0f 	bl	1850c <__aeabi_i2f>
   15aee:	4603      	mov	r3, r0
   15af0:	4618      	mov	r0, r3
   15af2:	f002 f8cb 	bl	17c8c <__aeabi_f2d>
   15af6:	4602      	mov	r2, r0
   15af8:	460b      	mov	r3, r1
   15afa:	4610      	mov	r0, r2
   15afc:	4619      	mov	r1, r3
   15afe:	f04f 0200 	mov.w	r2, #0
   15b02:	f04f 0300 	mov.w	r3, #0
   15b06:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   15b0a:	f002 f913 	bl	17d34 <__aeabi_dmul>
   15b0e:	4602      	mov	r2, r0
   15b10:	460b      	mov	r3, r1
   15b12:	4610      	mov	r0, r2
   15b14:	4619      	mov	r1, r3
   15b16:	f04f 0200 	mov.w	r2, #0
   15b1a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15b1e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15b22:	f002 fa31 	bl	17f88 <__aeabi_ddiv>
   15b26:	4602      	mov	r2, r0
   15b28:	460b      	mov	r3, r1
   15b2a:	4610      	mov	r0, r2
   15b2c:	4619      	mov	r1, r3
   15b2e:	f002 fb9b 	bl	18268 <__aeabi_d2iz>
   15b32:	4603      	mov	r3, r0
   15b34:	b29b      	uxth	r3, r3
   15b36:	b29a      	uxth	r2, r3
   15b38:	f64c 1334 	movw	r3, #51508	; 0xc934
   15b3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b40:	881b      	ldrh	r3, [r3, #0]
   15b42:	b29b      	uxth	r3, r3
   15b44:	4413      	add	r3, r2
   15b46:	b29b      	uxth	r3, r3
   15b48:	b29a      	uxth	r2, r3
   15b4a:	f240 5342 	movw	r3, #1346	; 0x542
   15b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b52:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   15b54:	f240 5342 	movw	r3, #1346	; 0x542
   15b58:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b5c:	881b      	ldrh	r3, [r3, #0]
   15b5e:	b21b      	sxth	r3, r3
   15b60:	4618      	mov	r0, r3
   15b62:	f002 fcd3 	bl	1850c <__aeabi_i2f>
   15b66:	4602      	mov	r2, r0
   15b68:	f24c 330c 	movw	r3, #49932	; 0xc30c
   15b6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b70:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   15b72:	f24c 23fc 	movw	r3, #49916	; 0xc2fc
   15b76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b7a:	781b      	ldrb	r3, [r3, #0]
   15b7c:	2b02      	cmp	r3, #2
   15b7e:	f040 80da 	bne.w	15d36 <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15b82:	f64c 132c 	movw	r3, #51500	; 0xc92c
   15b86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b8a:	781b      	ldrb	r3, [r3, #0]
   15b8c:	2b02      	cmp	r3, #2
   15b8e:	d165      	bne.n	15c5c <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   15b90:	79fb      	ldrb	r3, [r7, #7]
   15b92:	2b00      	cmp	r3, #0
   15b94:	d013      	beq.n	15bbe <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   15b96:	f240 5358 	movw	r3, #1368	; 0x558
   15b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b9e:	681a      	ldr	r2, [r3, #0]
   15ba0:	f64c 1338 	movw	r3, #51512	; 0xc938
   15ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ba8:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   15baa:	f24c 4320 	movw	r3, #50208	; 0xc420
   15bae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15bb2:	895a      	ldrh	r2, [r3, #10]
   15bb4:	f64c 132e 	movw	r3, #51502	; 0xc92e
   15bb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15bbc:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   15bbe:	f64c 1338 	movw	r3, #51512	; 0xc938
   15bc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15bc6:	681b      	ldr	r3, [r3, #0]
   15bc8:	4618      	mov	r0, r3
   15bca:	f002 f85f 	bl	17c8c <__aeabi_f2d>
   15bce:	4604      	mov	r4, r0
   15bd0:	460d      	mov	r5, r1
   15bd2:	f24c 4320 	movw	r3, #50208	; 0xc420
   15bd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15bda:	895b      	ldrh	r3, [r3, #10]
   15bdc:	b21a      	sxth	r2, r3
   15bde:	f64c 132e 	movw	r3, #51502	; 0xc92e
   15be2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15be6:	881b      	ldrh	r3, [r3, #0]
   15be8:	b21b      	sxth	r3, r3
   15bea:	1ad3      	subs	r3, r2, r3
   15bec:	4618      	mov	r0, r3
   15bee:	f002 fc8d 	bl	1850c <__aeabi_i2f>
   15bf2:	4603      	mov	r3, r0
   15bf4:	4618      	mov	r0, r3
   15bf6:	f002 f849 	bl	17c8c <__aeabi_f2d>
   15bfa:	4602      	mov	r2, r0
   15bfc:	460b      	mov	r3, r1
   15bfe:	4610      	mov	r0, r2
   15c00:	4619      	mov	r1, r3
   15c02:	a34f      	add	r3, pc, #316	; (adr r3, 15d40 <inflight_calib+0x3a8>)
   15c04:	e9d3 2300 	ldrd	r2, r3, [r3]
   15c08:	f002 f894 	bl	17d34 <__aeabi_dmul>
   15c0c:	4602      	mov	r2, r0
   15c0e:	460b      	mov	r3, r1
   15c10:	4610      	mov	r0, r2
   15c12:	4619      	mov	r1, r3
   15c14:	f04f 0200 	mov.w	r2, #0
   15c18:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15c1c:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15c20:	f002 f9b2 	bl	17f88 <__aeabi_ddiv>
   15c24:	4602      	mov	r2, r0
   15c26:	460b      	mov	r3, r1
   15c28:	4620      	mov	r0, r4
   15c2a:	4629      	mov	r1, r5
   15c2c:	f001 fed0 	bl	179d0 <__adddf3>
   15c30:	4602      	mov	r2, r0
   15c32:	460b      	mov	r3, r1
   15c34:	4610      	mov	r0, r2
   15c36:	4619      	mov	r1, r3
   15c38:	f002 fb5e 	bl	182f8 <__aeabi_d2f>
   15c3c:	4602      	mov	r2, r0
   15c3e:	f240 5358 	movw	r3, #1368	; 0x558
   15c42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c46:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   15c48:	f240 5358 	movw	r3, #1368	; 0x558
   15c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c50:	681a      	ldr	r2, [r3, #0]
   15c52:	f24c 3308 	movw	r3, #49928	; 0xc308
   15c56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15c5a:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15c5c:	f64c 132c 	movw	r3, #51500	; 0xc92c
   15c60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15c64:	781b      	ldrb	r3, [r3, #0]
   15c66:	2b02      	cmp	r3, #2
   15c68:	d165      	bne.n	15d36 <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   15c6a:	79fb      	ldrb	r3, [r7, #7]
   15c6c:	2b00      	cmp	r3, #0
   15c6e:	d013      	beq.n	15c98 <inflight_calib+0x300>
        max_roll_init = max_roll;
   15c70:	f240 535c 	movw	r3, #1372	; 0x55c
   15c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15c78:	681a      	ldr	r2, [r3, #0]
   15c7a:	f64c 133c 	movw	r3, #51516	; 0xc93c
   15c7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15c82:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   15c84:	f24c 4320 	movw	r3, #50208	; 0xc420
   15c88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15c8c:	899a      	ldrh	r2, [r3, #12]
   15c8e:	f64c 1330 	movw	r3, #51504	; 0xc930
   15c92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15c96:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   15c98:	f64c 133c 	movw	r3, #51516	; 0xc93c
   15c9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ca0:	681b      	ldr	r3, [r3, #0]
   15ca2:	4618      	mov	r0, r3
   15ca4:	f001 fff2 	bl	17c8c <__aeabi_f2d>
   15ca8:	4604      	mov	r4, r0
   15caa:	460d      	mov	r5, r1
   15cac:	f24c 4320 	movw	r3, #50208	; 0xc420
   15cb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15cb4:	899b      	ldrh	r3, [r3, #12]
   15cb6:	b21a      	sxth	r2, r3
   15cb8:	f64c 1330 	movw	r3, #51504	; 0xc930
   15cbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15cc0:	881b      	ldrh	r3, [r3, #0]
   15cc2:	b21b      	sxth	r3, r3
   15cc4:	1ad3      	subs	r3, r2, r3
   15cc6:	4618      	mov	r0, r3
   15cc8:	f002 fc20 	bl	1850c <__aeabi_i2f>
   15ccc:	4603      	mov	r3, r0
   15cce:	4618      	mov	r0, r3
   15cd0:	f001 ffdc 	bl	17c8c <__aeabi_f2d>
   15cd4:	4602      	mov	r2, r0
   15cd6:	460b      	mov	r3, r1
   15cd8:	4610      	mov	r0, r2
   15cda:	4619      	mov	r1, r3
   15cdc:	a31a      	add	r3, pc, #104	; (adr r3, 15d48 <inflight_calib+0x3b0>)
   15cde:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ce2:	f002 f827 	bl	17d34 <__aeabi_dmul>
   15ce6:	4602      	mov	r2, r0
   15ce8:	460b      	mov	r3, r1
   15cea:	4610      	mov	r0, r2
   15cec:	4619      	mov	r1, r3
   15cee:	f04f 0200 	mov.w	r2, #0
   15cf2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15cf6:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15cfa:	f002 f945 	bl	17f88 <__aeabi_ddiv>
   15cfe:	4602      	mov	r2, r0
   15d00:	460b      	mov	r3, r1
   15d02:	4620      	mov	r0, r4
   15d04:	4629      	mov	r1, r5
   15d06:	f001 fe63 	bl	179d0 <__adddf3>
   15d0a:	4602      	mov	r2, r0
   15d0c:	460b      	mov	r3, r1
   15d0e:	4610      	mov	r0, r2
   15d10:	4619      	mov	r1, r3
   15d12:	f002 faf1 	bl	182f8 <__aeabi_d2f>
   15d16:	4602      	mov	r2, r0
   15d18:	f240 535c 	movw	r3, #1372	; 0x55c
   15d1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d20:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   15d22:	f240 535c 	movw	r3, #1372	; 0x55c
   15d26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15d2a:	681a      	ldr	r2, [r3, #0]
   15d2c:	f24c 330c 	movw	r3, #49932	; 0xc30c
   15d30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15d34:	601a      	str	r2, [r3, #0]
    }
  }
}
   15d36:	3708      	adds	r7, #8
   15d38:	46bd      	mov	sp, r7
   15d3a:	bdb0      	pop	{r4, r5, r7, pc}
   15d3c:	f3af 8000 	nop.w
   15d40:	9999999a 	.word	0x9999999a
   15d44:	3fb99999 	.word	0x3fb99999
   15d48:	9999999a 	.word	0x9999999a
   15d4c:	bfc99999 	.word	0xbfc99999

00015d50 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   15d50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   15d54:	b08e      	sub	sp, #56	; 0x38
   15d56:	af00      	add	r7, sp, #0
   15d58:	e9c7 0102 	strd	r0, r1, [r7, #8]
   15d5c:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   15d60:	a357      	add	r3, pc, #348	; (adr r3, 15ec0 <pp_atan2+0x170>)
   15d62:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d66:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   15d6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d6e:	f04f 0200 	mov.w	r2, #0
   15d72:	f04f 0300 	mov.w	r3, #0
   15d76:	f2c4 0308 	movt	r3, #16392	; 0x4008
   15d7a:	f001 ffdb 	bl	17d34 <__aeabi_dmul>
   15d7e:	4602      	mov	r2, r0
   15d80:	460b      	mov	r3, r1
   15d82:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   15d86:	e9d7 0100 	ldrd	r0, r1, [r7]
   15d8a:	f04f 0200 	mov.w	r2, #0
   15d8e:	f04f 0300 	mov.w	r3, #0
   15d92:	f002 fa41 	bl	18218 <__aeabi_dcmplt>
   15d96:	4603      	mov	r3, r0
   15d98:	2b00      	cmp	r3, #0
   15d9a:	d009      	beq.n	15db0 <pp_atan2+0x60>
   15d9c:	a14a      	add	r1, pc, #296	; (adr r1, 15ec8 <pp_atan2+0x178>)
   15d9e:	e9d1 0100 	ldrd	r0, r1, [r1]
   15da2:	e9d7 2300 	ldrd	r2, r3, [r7]
   15da6:	f001 fe11 	bl	179cc <__aeabi_dsub>
   15daa:	4602      	mov	r2, r0
   15dac:	460b      	mov	r3, r1
   15dae:	e008      	b.n	15dc2 <pp_atan2+0x72>
   15db0:	e9d7 0100 	ldrd	r0, r1, [r7]
   15db4:	a344      	add	r3, pc, #272	; (adr r3, 15ec8 <pp_atan2+0x178>)
   15db6:	e9d3 2300 	ldrd	r2, r3, [r3]
   15dba:	f001 fe09 	bl	179d0 <__adddf3>
   15dbe:	4602      	mov	r2, r0
   15dc0:	460b      	mov	r3, r1
   15dc2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   15dc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15dca:	f04f 0200 	mov.w	r2, #0
   15dce:	f04f 0300 	mov.w	r3, #0
   15dd2:	f002 fa3f 	bl	18254 <__aeabi_dcmpgt>
   15dd6:	4603      	mov	r3, r0
   15dd8:	2b00      	cmp	r3, #0
   15dda:	d02a      	beq.n	15e32 <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   15ddc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15de0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15de4:	f001 fdf2 	bl	179cc <__aeabi_dsub>
   15de8:	4602      	mov	r2, r0
   15dea:	460b      	mov	r3, r1
   15dec:	4690      	mov	r8, r2
   15dee:	4699      	mov	r9, r3
   15df0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15df4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15df8:	f001 fdea 	bl	179d0 <__adddf3>
   15dfc:	4602      	mov	r2, r0
   15dfe:	460b      	mov	r3, r1
   15e00:	4640      	mov	r0, r8
   15e02:	4649      	mov	r1, r9
   15e04:	f002 f8c0 	bl	17f88 <__aeabi_ddiv>
   15e08:	4602      	mov	r2, r0
   15e0a:	460b      	mov	r3, r1
   15e0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   15e10:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15e18:	f001 ff8c 	bl	17d34 <__aeabi_dmul>
   15e1c:	4602      	mov	r2, r0
   15e1e:	460b      	mov	r3, r1
   15e20:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e24:	f001 fdd2 	bl	179cc <__aeabi_dsub>
   15e28:	4602      	mov	r2, r0
   15e2a:	460b      	mov	r3, r1
   15e2c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   15e30:	e029      	b.n	15e86 <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   15e32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15e36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15e3a:	f001 fdc9 	bl	179d0 <__adddf3>
   15e3e:	4602      	mov	r2, r0
   15e40:	460b      	mov	r3, r1
   15e42:	4690      	mov	r8, r2
   15e44:	4699      	mov	r9, r3
   15e46:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15e4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   15e4e:	f001 fdbd 	bl	179cc <__aeabi_dsub>
   15e52:	4602      	mov	r2, r0
   15e54:	460b      	mov	r3, r1
   15e56:	4640      	mov	r0, r8
   15e58:	4649      	mov	r1, r9
   15e5a:	f002 f895 	bl	17f88 <__aeabi_ddiv>
   15e5e:	4602      	mov	r2, r0
   15e60:	460b      	mov	r3, r1
   15e62:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   15e66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15e6a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15e6e:	f001 ff61 	bl	17d34 <__aeabi_dmul>
   15e72:	4602      	mov	r2, r0
   15e74:	460b      	mov	r3, r1
   15e76:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   15e7a:	f001 fda7 	bl	179cc <__aeabi_dsub>
   15e7e:	4602      	mov	r2, r0
   15e80:	460b      	mov	r3, r1
   15e82:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   15e86:	e9d7 0100 	ldrd	r0, r1, [r7]
   15e8a:	f04f 0200 	mov.w	r2, #0
   15e8e:	f04f 0300 	mov.w	r3, #0
   15e92:	f002 f9c1 	bl	18218 <__aeabi_dcmplt>
   15e96:	4603      	mov	r3, r0
   15e98:	2b00      	cmp	r3, #0
   15e9a:	d004      	beq.n	15ea6 <pp_atan2+0x156>
		return (-angle);
   15e9c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   15e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15ea0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15ea4:	e001      	b.n	15eaa <pp_atan2+0x15a>
	else
		return angle;
   15ea6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   15eaa:	4622      	mov	r2, r4
   15eac:	462b      	mov	r3, r5
}
   15eae:	4610      	mov	r0, r2
   15eb0:	4619      	mov	r1, r3
   15eb2:	3738      	adds	r7, #56	; 0x38
   15eb4:	46bd      	mov	sp, r7
   15eb6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   15eba:	bf00      	nop
   15ebc:	f3af 8000 	nop.w
   15ec0:	54442d18 	.word	0x54442d18
   15ec4:	3fe921fb 	.word	0x3fe921fb
   15ec8:	d9d7bdbb 	.word	0xd9d7bdbb
   15ecc:	3ddb7cdf 	.word	0x3ddb7cdf

00015ed0 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   15ed0:	b5b0      	push	{r4, r5, r7, lr}
   15ed2:	b08c      	sub	sp, #48	; 0x30
   15ed4:	af00      	add	r7, sp, #0
   15ed6:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   15eda:	e9d7 2300 	ldrd	r2, r3, [r7]
   15ede:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15ee2:	2301      	movs	r3, #1
   15ee4:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   15ee6:	e00a      	b.n	15efe <pp_sin+0x2e>
   15ee8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15eec:	a35a      	add	r3, pc, #360	; (adr r3, 16058 <pp_sin+0x188>)
   15eee:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ef2:	f001 fd6d 	bl	179d0 <__adddf3>
   15ef6:	4602      	mov	r2, r0
   15ef8:	460b      	mov	r3, r1
   15efa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15efe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15f02:	a357      	add	r3, pc, #348	; (adr r3, 16060 <pp_sin+0x190>)
   15f04:	e9d3 2300 	ldrd	r2, r3, [r3]
   15f08:	f002 f986 	bl	18218 <__aeabi_dcmplt>
   15f0c:	4603      	mov	r3, r0
   15f0e:	2b00      	cmp	r3, #0
   15f10:	d1ea      	bne.n	15ee8 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   15f12:	e00a      	b.n	15f2a <pp_sin+0x5a>
   15f14:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15f18:	a34f      	add	r3, pc, #316	; (adr r3, 16058 <pp_sin+0x188>)
   15f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   15f1e:	f001 fd55 	bl	179cc <__aeabi_dsub>
   15f22:	4602      	mov	r2, r0
   15f24:	460b      	mov	r3, r1
   15f26:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15f2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15f2e:	a34e      	add	r3, pc, #312	; (adr r3, 16068 <pp_sin+0x198>)
   15f30:	e9d3 2300 	ldrd	r2, r3, [r3]
   15f34:	f002 f98e 	bl	18254 <__aeabi_dcmpgt>
   15f38:	4603      	mov	r3, r0
   15f3a:	2b00      	cmp	r3, #0
   15f3c:	d1ea      	bne.n	15f14 <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   15f3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15f42:	a34b      	add	r3, pc, #300	; (adr r3, 16070 <pp_sin+0x1a0>)
   15f44:	e9d3 2300 	ldrd	r2, r3, [r3]
   15f48:	f002 f984 	bl	18254 <__aeabi_dcmpgt>
   15f4c:	4603      	mov	r3, r0
   15f4e:	2b00      	cmp	r3, #0
   15f50:	d00d      	beq.n	15f6e <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   15f52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15f56:	a348      	add	r3, pc, #288	; (adr r3, 16078 <pp_sin+0x1a8>)
   15f58:	e9d3 2300 	ldrd	r2, r3, [r3]
   15f5c:	f001 fd36 	bl	179cc <__aeabi_dsub>
   15f60:	4602      	mov	r2, r0
   15f62:	460b      	mov	r3, r1
   15f64:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   15f68:	f04f 33ff 	mov.w	r3, #4294967295
   15f6c:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   15f6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15f72:	a343      	add	r3, pc, #268	; (adr r3, 16080 <pp_sin+0x1b0>)
   15f74:	e9d3 2300 	ldrd	r2, r3, [r3]
   15f78:	f002 f806 	bl	17f88 <__aeabi_ddiv>
   15f7c:	4602      	mov	r2, r0
   15f7e:	460b      	mov	r3, r1
   15f80:	e9c7 2306 	strd	r2, r3, [r7, #24]
   15f84:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15f88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15f8c:	f001 fed2 	bl	17d34 <__aeabi_dmul>
   15f90:	4602      	mov	r2, r0
   15f92:	460b      	mov	r3, r1
   15f94:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   15f98:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   15f9c:	a33a      	add	r3, pc, #232	; (adr r3, 16088 <pp_sin+0x1b8>)
   15f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15fa2:	f001 fec7 	bl	17d34 <__aeabi_dmul>
   15fa6:	4602      	mov	r2, r0
   15fa8:	460b      	mov	r3, r1
	      - .00467376557) * q2
   15faa:	4610      	mov	r0, r2
   15fac:	4619      	mov	r1, r3
   15fae:	a338      	add	r3, pc, #224	; (adr r3, 16090 <pp_sin+0x1c0>)
   15fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   15fb4:	f001 fd0a 	bl	179cc <__aeabi_dsub>
   15fb8:	4602      	mov	r2, r0
   15fba:	460b      	mov	r3, r1
   15fbc:	4610      	mov	r0, r2
   15fbe:	4619      	mov	r1, r3
   15fc0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15fc4:	f001 feb6 	bl	17d34 <__aeabi_dmul>
   15fc8:	4602      	mov	r2, r0
   15fca:	460b      	mov	r3, r1
	      + .07968967928) * q2
   15fcc:	4610      	mov	r0, r2
   15fce:	4619      	mov	r1, r3
   15fd0:	a331      	add	r3, pc, #196	; (adr r3, 16098 <pp_sin+0x1c8>)
   15fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
   15fd6:	f001 fcfb 	bl	179d0 <__adddf3>
   15fda:	4602      	mov	r2, r0
   15fdc:	460b      	mov	r3, r1
   15fde:	4610      	mov	r0, r2
   15fe0:	4619      	mov	r1, r3
   15fe2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15fe6:	f001 fea5 	bl	17d34 <__aeabi_dmul>
   15fea:	4602      	mov	r2, r0
   15fec:	460b      	mov	r3, r1
	      - .64596371106) * q2
   15fee:	4610      	mov	r0, r2
   15ff0:	4619      	mov	r1, r3
   15ff2:	a32b      	add	r3, pc, #172	; (adr r3, 160a0 <pp_sin+0x1d0>)
   15ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ff8:	f001 fce8 	bl	179cc <__aeabi_dsub>
   15ffc:	4602      	mov	r2, r0
   15ffe:	460b      	mov	r3, r1
   16000:	4610      	mov	r0, r2
   16002:	4619      	mov	r1, r3
   16004:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   16008:	f001 fe94 	bl	17d34 <__aeabi_dmul>
   1600c:	4602      	mov	r2, r0
   1600e:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   16010:	4610      	mov	r0, r2
   16012:	4619      	mov	r1, r3
   16014:	a324      	add	r3, pc, #144	; (adr r3, 160a8 <pp_sin+0x1d8>)
   16016:	e9d3 2300 	ldrd	r2, r3, [r3]
   1601a:	f001 fcd9 	bl	179d0 <__adddf3>
   1601e:	4602      	mov	r2, r0
   16020:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   16022:	4610      	mov	r0, r2
   16024:	4619      	mov	r1, r3
   16026:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1602a:	f001 fe83 	bl	17d34 <__aeabi_dmul>
   1602e:	4602      	mov	r2, r0
   16030:	460b      	mov	r3, r1
   16032:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   16036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16038:	2b00      	cmp	r3, #0
   1603a:	da04      	bge.n	16046 <pp_sin+0x176>
   1603c:	68bc      	ldr	r4, [r7, #8]
   1603e:	68fb      	ldr	r3, [r7, #12]
   16040:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   16044:	e001      	b.n	1604a <pp_sin+0x17a>
   16046:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   1604a:	4622      	mov	r2, r4
   1604c:	462b      	mov	r3, r5
}
   1604e:	4610      	mov	r0, r2
   16050:	4619      	mov	r1, r3
   16052:	3730      	adds	r7, #48	; 0x30
   16054:	46bd      	mov	sp, r7
   16056:	bdb0      	pop	{r4, r5, r7, pc}
   16058:	54442d18 	.word	0x54442d18
   1605c:	401921fb 	.word	0x401921fb
   16060:	54442d18 	.word	0x54442d18
   16064:	bff921fb 	.word	0xbff921fb
   16068:	7f3321d2 	.word	0x7f3321d2
   1606c:	4012d97c 	.word	0x4012d97c
   16070:	54442d18 	.word	0x54442d18
   16074:	3ff921fb 	.word	0x3ff921fb
   16078:	54442d18 	.word	0x54442d18
   1607c:	400921fb 	.word	0x400921fb
   16080:	5443d6f4 	.word	0x5443d6f4
   16084:	3ff921fb 	.word	0x3ff921fb
   16088:	48a890af 	.word	0x48a890af
   1608c:	3f23daf7 	.word	0x3f23daf7
   16090:	645b6d0e 	.word	0x645b6d0e
   16094:	3f7324cc 	.word	0x3f7324cc
   16098:	f65619a5 	.word	0xf65619a5
   1609c:	3fb4668a 	.word	0x3fb4668a
   160a0:	16acf9cd 	.word	0x16acf9cd
   160a4:	3fe4abbc 	.word	0x3fe4abbc
   160a8:	520817f7 	.word	0x520817f7
   160ac:	3ff921fb 	.word	0x3ff921fb

000160b0 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   160b0:	b480      	push	{r7}
   160b2:	b083      	sub	sp, #12
   160b4:	af00      	add	r7, sp, #0
   160b6:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   160ba:	4610      	mov	r0, r2
   160bc:	4619      	mov	r1, r3
   160be:	370c      	adds	r7, #12
   160c0:	46bd      	mov	sp, r7
   160c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   160c6:	4770      	bx	lr

000160c8 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   160c8:	b480      	push	{r7}
   160ca:	b083      	sub	sp, #12
   160cc:	af00      	add	r7, sp, #0
   160ce:	4603      	mov	r3, r0
   160d0:	6039      	str	r1, [r7, #0]
   160d2:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   160d4:	79fa      	ldrb	r2, [r7, #7]
   160d6:	f64c 1350 	movw	r3, #51536	; 0xc950
   160da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160de:	6839      	ldr	r1, [r7, #0]
   160e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   160e4:	370c      	adds	r7, #12
   160e6:	46bd      	mov	sp, r7
   160e8:	f85d 7b04 	ldr.w	r7, [sp], #4
   160ec:	4770      	bx	lr
   160ee:	bf00      	nop

000160f0 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   160f0:	b480      	push	{r7}
   160f2:	b083      	sub	sp, #12
   160f4:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   160f6:	f242 0315 	movw	r3, #8213	; 0x2015
   160fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   160fe:	2200      	movs	r2, #0
   16100:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   16102:	f242 0314 	movw	r3, #8212	; 0x2014
   16106:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1610a:	2200      	movs	r2, #0
   1610c:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   1610e:	f242 0307 	movw	r3, #8199	; 0x2007
   16112:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16116:	22c0      	movs	r2, #192	; 0xc0
   16118:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   1611a:	f242 0306 	movw	r3, #8198	; 0x2006
   1611e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16122:	22cf      	movs	r2, #207	; 0xcf
   16124:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   16126:	2300      	movs	r3, #0
   16128:	71fb      	strb	r3, [r7, #7]
   1612a:	e00a      	b.n	16142 <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   1612c:	79fa      	ldrb	r2, [r7, #7]
   1612e:	f64c 1350 	movw	r3, #51536	; 0xc950
   16132:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16136:	2100      	movs	r1, #0
   16138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   1613c:	79fb      	ldrb	r3, [r7, #7]
   1613e:	3301      	adds	r3, #1
   16140:	71fb      	strb	r3, [r7, #7]
   16142:	79fb      	ldrb	r3, [r7, #7]
   16144:	2b07      	cmp	r3, #7
   16146:	d9f1      	bls.n	1612c <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   16148:	370c      	adds	r7, #12
   1614a:	46bd      	mov	sp, r7
   1614c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16150:	4770      	bx	lr
   16152:	bf00      	nop

00016154 <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   16154:	b480      	push	{r7}
   16156:	b083      	sub	sp, #12
   16158:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   1615a:	f242 0326 	movw	r3, #8230	; 0x2026
   1615e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16162:	881b      	ldrh	r3, [r3, #0]
   16164:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   16166:	f64c 13ac 	movw	r3, #51628	; 0xc9ac
   1616a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1616e:	881b      	ldrh	r3, [r3, #0]
   16170:	88fa      	ldrh	r2, [r7, #6]
   16172:	1ad3      	subs	r3, r2, r3
   16174:	80bb      	strh	r3, [r7, #4]
  last		= this;
   16176:	f64c 13ac 	movw	r3, #51628	; 0xc9ac
   1617a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1617e:	88fa      	ldrh	r2, [r7, #6]
   16180:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   16182:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   16186:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1618a:	781b      	ldrb	r3, [r3, #0]
   1618c:	2b00      	cmp	r3, #0
   1618e:	d11e      	bne.n	161ce <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   16190:	f242 0324 	movw	r3, #8228	; 0x2024
   16194:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16198:	781b      	ldrb	r3, [r3, #0]
   1619a:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   1619c:	f64c 13af 	movw	r3, #51631	; 0xc9af
   161a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161a4:	781b      	ldrb	r3, [r3, #0]
   161a6:	78fa      	ldrb	r2, [r7, #3]
   161a8:	1ad3      	subs	r3, r2, r3
   161aa:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   161ac:	f64c 13af 	movw	r3, #51631	; 0xc9af
   161b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161b4:	78fa      	ldrb	r2, [r7, #3]
   161b6:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   161b8:	78bb      	ldrb	r3, [r7, #2]
   161ba:	2b6d      	cmp	r3, #109	; 0x6d
   161bc:	d906      	bls.n	161cc <__vector_34+0x78>
      state = 1;
   161be:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   161c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161c6:	2201      	movs	r2, #1
   161c8:	701a      	strb	r2, [r3, #0]
   161ca:	e053      	b.n	16274 <__vector_34+0x120>
   161cc:	e052      	b.n	16274 <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   161ce:	88bb      	ldrh	r3, [r7, #4]
   161d0:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   161d4:	d304      	bcc.n	161e0 <__vector_34+0x8c>
   161d6:	88ba      	ldrh	r2, [r7, #4]
   161d8:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   161dc:	429a      	cmp	r2, r3
   161de:	d911      	bls.n	16204 <__vector_34+0xb0>
      RestartPpmCycle();
   161e0:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   161e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161e8:	2200      	movs	r2, #0
   161ea:	701a      	strb	r2, [r3, #0]
   161ec:	f242 0324 	movw	r3, #8228	; 0x2024
   161f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   161f4:	781b      	ldrb	r3, [r3, #0]
   161f6:	b2da      	uxtb	r2, r3
   161f8:	f64c 13af 	movw	r3, #51631	; 0xc9af
   161fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16200:	701a      	strb	r2, [r3, #0]
   16202:	e038      	b.n	16276 <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   16204:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   16208:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1620c:	781b      	ldrb	r3, [r3, #0]
   1620e:	1e5a      	subs	r2, r3, #1
   16210:	f64c 1370 	movw	r3, #51568	; 0xc970
   16214:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16218:	88b9      	ldrh	r1, [r7, #4]
   1621a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   1621e:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   16222:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16226:	781b      	ldrb	r3, [r3, #0]
   16228:	2b08      	cmp	r3, #8
   1622a:	d917      	bls.n	1625c <__vector_34+0x108>
      ppm_valid	= 1;
   1622c:	f64c 13ab 	movw	r3, #51627	; 0xc9ab
   16230:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16234:	2201      	movs	r2, #1
   16236:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   16238:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   1623c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16240:	2200      	movs	r2, #0
   16242:	701a      	strb	r2, [r3, #0]
   16244:	f242 0324 	movw	r3, #8228	; 0x2024
   16248:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1624c:	781b      	ldrb	r3, [r3, #0]
   1624e:	b2da      	uxtb	r2, r3
   16250:	f64c 13af 	movw	r3, #51631	; 0xc9af
   16254:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16258:	701a      	strb	r2, [r3, #0]
   1625a:	e00c      	b.n	16276 <__vector_34+0x122>
    } else 
      state++;
   1625c:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   16260:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16264:	781b      	ldrb	r3, [r3, #0]
   16266:	3301      	adds	r3, #1
   16268:	b2da      	uxtb	r2, r3
   1626a:	f64c 13ae 	movw	r3, #51630	; 0xc9ae
   1626e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16272:	701a      	strb	r2, [r3, #0]
  }
  return;
   16274:	bf00      	nop
}
   16276:	370c      	adds	r7, #12
   16278:	46bd      	mov	sp, r7
   1627a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1627e:	4770      	bx	lr

00016280 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   16280:	b590      	push	{r4, r7, lr}
   16282:	b083      	sub	sp, #12
   16284:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   16286:	f64c 1370 	movw	r3, #51568	; 0xc970
   1628a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1628e:	881b      	ldrh	r3, [r3, #0]
   16290:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   16294:	b29b      	uxth	r3, r3
   16296:	80fb      	strh	r3, [r7, #6]
   16298:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   1629c:	4618      	mov	r0, r3
   1629e:	f002 f935 	bl	1850c <__aeabi_i2f>
   162a2:	4603      	mov	r3, r0
   162a4:	4618      	mov	r0, r3
   162a6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   162aa:	f002 f983 	bl	185b4 <__aeabi_fmul>
   162ae:	4603      	mov	r3, r0
   162b0:	4618      	mov	r0, r3
   162b2:	f002 fb45 	bl	18940 <__aeabi_f2iz>
   162b6:	4603      	mov	r3, r0
   162b8:	b29a      	uxth	r2, r3
   162ba:	f64c 1384 	movw	r3, #51588	; 0xc984
   162be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162c2:	801a      	strh	r2, [r3, #0]
   162c4:	f64c 1384 	movw	r3, #51588	; 0xc984
   162c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162cc:	881b      	ldrh	r3, [r3, #0]
   162ce:	b21b      	sxth	r3, r3
   162d0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   162d4:	dd07      	ble.n	162e6 <last_radio_from_ppm+0x66>
   162d6:	f64c 1384 	movw	r3, #51588	; 0xc984
   162da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162de:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   162e2:	801a      	strh	r2, [r3, #0]
   162e4:	e00d      	b.n	16302 <last_radio_from_ppm+0x82>
   162e6:	f64c 1384 	movw	r3, #51588	; 0xc984
   162ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162ee:	881b      	ldrh	r3, [r3, #0]
   162f0:	b21b      	sxth	r3, r3
   162f2:	2b00      	cmp	r3, #0
   162f4:	da05      	bge.n	16302 <last_radio_from_ppm+0x82>
   162f6:	f64c 1384 	movw	r3, #51588	; 0xc984
   162fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162fe:	2200      	movs	r2, #0
   16300:	801a      	strh	r2, [r3, #0]
   16302:	f64c 1370 	movw	r3, #51568	; 0xc970
   16306:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1630a:	885b      	ldrh	r3, [r3, #2]
   1630c:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16310:	b29b      	uxth	r3, r3
   16312:	80fb      	strh	r3, [r7, #6]
   16314:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16318:	4618      	mov	r0, r3
   1631a:	f002 f8f7 	bl	1850c <__aeabi_i2f>
   1631e:	4603      	mov	r3, r0
   16320:	4618      	mov	r0, r3
   16322:	f002 fb0d 	bl	18940 <__aeabi_f2iz>
   16326:	4603      	mov	r3, r0
   16328:	b29a      	uxth	r2, r3
   1632a:	f64c 1384 	movw	r3, #51588	; 0xc984
   1632e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16332:	805a      	strh	r2, [r3, #2]
   16334:	f64c 1384 	movw	r3, #51588	; 0xc984
   16338:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1633c:	885b      	ldrh	r3, [r3, #2]
   1633e:	b21b      	sxth	r3, r3
   16340:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16344:	dd07      	ble.n	16356 <last_radio_from_ppm+0xd6>
   16346:	f64c 1384 	movw	r3, #51588	; 0xc984
   1634a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1634e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16352:	805a      	strh	r2, [r3, #2]
   16354:	e00f      	b.n	16376 <last_radio_from_ppm+0xf6>
   16356:	f64c 1384 	movw	r3, #51588	; 0xc984
   1635a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1635e:	885b      	ldrh	r3, [r3, #2]
   16360:	b21b      	sxth	r3, r3
   16362:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16366:	da06      	bge.n	16376 <last_radio_from_ppm+0xf6>
   16368:	f64c 1384 	movw	r3, #51588	; 0xc984
   1636c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16370:	f64d 2280 	movw	r2, #55936	; 0xda80
   16374:	805a      	strh	r2, [r3, #2]
   16376:	f64c 1370 	movw	r3, #51568	; 0xc970
   1637a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1637e:	889b      	ldrh	r3, [r3, #4]
   16380:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16384:	b29b      	uxth	r3, r3
   16386:	80fb      	strh	r3, [r7, #6]
   16388:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   1638c:	4618      	mov	r0, r3
   1638e:	f002 f8bd 	bl	1850c <__aeabi_i2f>
   16392:	4603      	mov	r3, r0
   16394:	4618      	mov	r0, r3
   16396:	f002 fad3 	bl	18940 <__aeabi_f2iz>
   1639a:	4603      	mov	r3, r0
   1639c:	b29a      	uxth	r2, r3
   1639e:	f64c 1384 	movw	r3, #51588	; 0xc984
   163a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163a6:	809a      	strh	r2, [r3, #4]
   163a8:	f64c 1384 	movw	r3, #51588	; 0xc984
   163ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163b0:	889b      	ldrh	r3, [r3, #4]
   163b2:	b21b      	sxth	r3, r3
   163b4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   163b8:	dd07      	ble.n	163ca <last_radio_from_ppm+0x14a>
   163ba:	f64c 1384 	movw	r3, #51588	; 0xc984
   163be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163c2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   163c6:	809a      	strh	r2, [r3, #4]
   163c8:	e00f      	b.n	163ea <last_radio_from_ppm+0x16a>
   163ca:	f64c 1384 	movw	r3, #51588	; 0xc984
   163ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163d2:	889b      	ldrh	r3, [r3, #4]
   163d4:	b21b      	sxth	r3, r3
   163d6:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   163da:	da06      	bge.n	163ea <last_radio_from_ppm+0x16a>
   163dc:	f64c 1384 	movw	r3, #51588	; 0xc984
   163e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163e4:	f64d 2280 	movw	r2, #55936	; 0xda80
   163e8:	809a      	strh	r2, [r3, #4]
   163ea:	f64c 1370 	movw	r3, #51568	; 0xc970
   163ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163f2:	88db      	ldrh	r3, [r3, #6]
   163f4:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   163f8:	b29b      	uxth	r3, r3
   163fa:	80fb      	strh	r3, [r7, #6]
   163fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16400:	4618      	mov	r0, r3
   16402:	f002 f883 	bl	1850c <__aeabi_i2f>
   16406:	4603      	mov	r3, r0
   16408:	4618      	mov	r0, r3
   1640a:	f002 fa99 	bl	18940 <__aeabi_f2iz>
   1640e:	4603      	mov	r3, r0
   16410:	b29a      	uxth	r2, r3
   16412:	f64c 1384 	movw	r3, #51588	; 0xc984
   16416:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1641a:	80da      	strh	r2, [r3, #6]
   1641c:	f64c 1384 	movw	r3, #51588	; 0xc984
   16420:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16424:	88db      	ldrh	r3, [r3, #6]
   16426:	b21b      	sxth	r3, r3
   16428:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1642c:	dd07      	ble.n	1643e <last_radio_from_ppm+0x1be>
   1642e:	f64c 1384 	movw	r3, #51588	; 0xc984
   16432:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16436:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1643a:	80da      	strh	r2, [r3, #6]
   1643c:	e00f      	b.n	1645e <last_radio_from_ppm+0x1de>
   1643e:	f64c 1384 	movw	r3, #51588	; 0xc984
   16442:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16446:	88db      	ldrh	r3, [r3, #6]
   16448:	b21b      	sxth	r3, r3
   1644a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1644e:	da06      	bge.n	1645e <last_radio_from_ppm+0x1de>
   16450:	f64c 1384 	movw	r3, #51588	; 0xc984
   16454:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16458:	f64d 2280 	movw	r2, #55936	; 0xda80
   1645c:	80da      	strh	r2, [r3, #6]
   1645e:	f64c 1370 	movw	r3, #51568	; 0xc970
   16462:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16466:	891b      	ldrh	r3, [r3, #8]
   16468:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1646c:	b29b      	uxth	r3, r3
   1646e:	80fb      	strh	r3, [r7, #6]
   16470:	f64c 1398 	movw	r3, #51608	; 0xc998
   16474:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16478:	891b      	ldrh	r3, [r3, #8]
   1647a:	b21b      	sxth	r3, r3
   1647c:	4618      	mov	r0, r3
   1647e:	f002 f845 	bl	1850c <__aeabi_i2f>
   16482:	4604      	mov	r4, r0
   16484:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16488:	4618      	mov	r0, r3
   1648a:	f002 f83f 	bl	1850c <__aeabi_i2f>
   1648e:	4603      	mov	r3, r0
   16490:	4618      	mov	r0, r3
   16492:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   16496:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1649a:	f002 f88b 	bl	185b4 <__aeabi_fmul>
   1649e:	4603      	mov	r3, r0
   164a0:	4620      	mov	r0, r4
   164a2:	4619      	mov	r1, r3
   164a4:	f001 ff7e 	bl	183a4 <__addsf3>
   164a8:	4603      	mov	r3, r0
   164aa:	4618      	mov	r0, r3
   164ac:	f002 fa48 	bl	18940 <__aeabi_f2iz>
   164b0:	4603      	mov	r3, r0
   164b2:	b29a      	uxth	r2, r3
   164b4:	f64c 1398 	movw	r3, #51608	; 0xc998
   164b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164bc:	811a      	strh	r2, [r3, #8]
   164be:	f64c 1370 	movw	r3, #51568	; 0xc970
   164c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164c6:	895b      	ldrh	r3, [r3, #10]
   164c8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   164cc:	b29b      	uxth	r3, r3
   164ce:	80fb      	strh	r3, [r7, #6]
   164d0:	f64c 1398 	movw	r3, #51608	; 0xc998
   164d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164d8:	895b      	ldrh	r3, [r3, #10]
   164da:	b21b      	sxth	r3, r3
   164dc:	4618      	mov	r0, r3
   164de:	f002 f815 	bl	1850c <__aeabi_i2f>
   164e2:	4604      	mov	r4, r0
   164e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   164e8:	4618      	mov	r0, r3
   164ea:	f002 f80f 	bl	1850c <__aeabi_i2f>
   164ee:	4603      	mov	r3, r0
   164f0:	4618      	mov	r0, r3
   164f2:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   164f6:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   164fa:	f002 f85b 	bl	185b4 <__aeabi_fmul>
   164fe:	4603      	mov	r3, r0
   16500:	4620      	mov	r0, r4
   16502:	4619      	mov	r1, r3
   16504:	f001 ff4e 	bl	183a4 <__addsf3>
   16508:	4603      	mov	r3, r0
   1650a:	4618      	mov	r0, r3
   1650c:	f002 fa18 	bl	18940 <__aeabi_f2iz>
   16510:	4603      	mov	r3, r0
   16512:	b29a      	uxth	r2, r3
   16514:	f64c 1398 	movw	r3, #51608	; 0xc998
   16518:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1651c:	815a      	strh	r2, [r3, #10]
   1651e:	f64c 1370 	movw	r3, #51568	; 0xc970
   16522:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16526:	899b      	ldrh	r3, [r3, #12]
   16528:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1652c:	b29b      	uxth	r3, r3
   1652e:	80fb      	strh	r3, [r7, #6]
   16530:	f64c 1398 	movw	r3, #51608	; 0xc998
   16534:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16538:	899b      	ldrh	r3, [r3, #12]
   1653a:	b21b      	sxth	r3, r3
   1653c:	4618      	mov	r0, r3
   1653e:	f001 ffe5 	bl	1850c <__aeabi_i2f>
   16542:	4604      	mov	r4, r0
   16544:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16548:	4618      	mov	r0, r3
   1654a:	f001 ffdf 	bl	1850c <__aeabi_i2f>
   1654e:	4603      	mov	r3, r0
   16550:	4618      	mov	r0, r3
   16552:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   16556:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1655a:	f002 f82b 	bl	185b4 <__aeabi_fmul>
   1655e:	4603      	mov	r3, r0
   16560:	4620      	mov	r0, r4
   16562:	4619      	mov	r1, r3
   16564:	f001 ff1e 	bl	183a4 <__addsf3>
   16568:	4603      	mov	r3, r0
   1656a:	4618      	mov	r0, r3
   1656c:	f002 f9e8 	bl	18940 <__aeabi_f2iz>
   16570:	4603      	mov	r3, r0
   16572:	b29a      	uxth	r2, r3
   16574:	f64c 1398 	movw	r3, #51608	; 0xc998
   16578:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1657c:	819a      	strh	r2, [r3, #12]
   1657e:	f64c 1370 	movw	r3, #51568	; 0xc970
   16582:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16586:	89db      	ldrh	r3, [r3, #14]
   16588:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   1658c:	b29b      	uxth	r3, r3
   1658e:	80fb      	strh	r3, [r7, #6]
   16590:	f64c 1398 	movw	r3, #51608	; 0xc998
   16594:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16598:	89db      	ldrh	r3, [r3, #14]
   1659a:	b21b      	sxth	r3, r3
   1659c:	4618      	mov	r0, r3
   1659e:	f001 ffb5 	bl	1850c <__aeabi_i2f>
   165a2:	4604      	mov	r4, r0
   165a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   165a8:	4618      	mov	r0, r3
   165aa:	f001 ffaf 	bl	1850c <__aeabi_i2f>
   165ae:	4603      	mov	r3, r0
   165b0:	4618      	mov	r0, r3
   165b2:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   165b6:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   165ba:	f001 fffb 	bl	185b4 <__aeabi_fmul>
   165be:	4603      	mov	r3, r0
   165c0:	4620      	mov	r0, r4
   165c2:	4619      	mov	r1, r3
   165c4:	f001 feee 	bl	183a4 <__addsf3>
   165c8:	4603      	mov	r3, r0
   165ca:	4618      	mov	r0, r3
   165cc:	f002 f9b8 	bl	18940 <__aeabi_f2iz>
   165d0:	4603      	mov	r3, r0
   165d2:	b29a      	uxth	r2, r3
   165d4:	f64c 1398 	movw	r3, #51608	; 0xc998
   165d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165dc:	81da      	strh	r2, [r3, #14]
   165de:	f64c 1370 	movw	r3, #51568	; 0xc970
   165e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165e6:	8a1b      	ldrh	r3, [r3, #16]
   165e8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   165ec:	b29b      	uxth	r3, r3
   165ee:	80fb      	strh	r3, [r7, #6]
   165f0:	f64c 1398 	movw	r3, #51608	; 0xc998
   165f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165f8:	8a1b      	ldrh	r3, [r3, #16]
   165fa:	b21b      	sxth	r3, r3
   165fc:	4618      	mov	r0, r3
   165fe:	f001 ff85 	bl	1850c <__aeabi_i2f>
   16602:	4604      	mov	r4, r0
   16604:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16608:	4618      	mov	r0, r3
   1660a:	f001 ff7f 	bl	1850c <__aeabi_i2f>
   1660e:	4603      	mov	r3, r0
   16610:	4618      	mov	r0, r3
   16612:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   16616:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   1661a:	f001 ffcb 	bl	185b4 <__aeabi_fmul>
   1661e:	4603      	mov	r3, r0
   16620:	4620      	mov	r0, r4
   16622:	4619      	mov	r1, r3
   16624:	f001 febe 	bl	183a4 <__addsf3>
   16628:	4603      	mov	r3, r0
   1662a:	4618      	mov	r0, r3
   1662c:	f002 f988 	bl	18940 <__aeabi_f2iz>
   16630:	4603      	mov	r3, r0
   16632:	b29a      	uxth	r2, r3
   16634:	f64c 1398 	movw	r3, #51608	; 0xc998
   16638:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1663c:	821a      	strh	r2, [r3, #16]
   1663e:	f64c 13b0 	movw	r3, #51632	; 0xc9b0
   16642:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16646:	781b      	ldrb	r3, [r3, #0]
   16648:	3301      	adds	r3, #1
   1664a:	b2da      	uxtb	r2, r3
   1664c:	f64c 13b0 	movw	r3, #51632	; 0xc9b0
   16650:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16654:	701a      	strb	r2, [r3, #0]
   16656:	f64c 13b0 	movw	r3, #51632	; 0xc9b0
   1665a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1665e:	781b      	ldrb	r3, [r3, #0]
   16660:	2b0a      	cmp	r3, #10
   16662:	f040 8101 	bne.w	16868 <last_radio_from_ppm+0x5e8>
   16666:	f64c 13b0 	movw	r3, #51632	; 0xc9b0
   1666a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1666e:	2200      	movs	r2, #0
   16670:	701a      	strb	r2, [r3, #0]
   16672:	f64c 1398 	movw	r3, #51608	; 0xc998
   16676:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1667a:	891a      	ldrh	r2, [r3, #8]
   1667c:	f64c 1384 	movw	r3, #51588	; 0xc984
   16680:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16684:	811a      	strh	r2, [r3, #8]
   16686:	f64c 1398 	movw	r3, #51608	; 0xc998
   1668a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1668e:	2200      	movs	r2, #0
   16690:	811a      	strh	r2, [r3, #8]
   16692:	f64c 1384 	movw	r3, #51588	; 0xc984
   16696:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1669a:	891b      	ldrh	r3, [r3, #8]
   1669c:	b21b      	sxth	r3, r3
   1669e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   166a2:	dd07      	ble.n	166b4 <last_radio_from_ppm+0x434>
   166a4:	f64c 1384 	movw	r3, #51588	; 0xc984
   166a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   166b0:	811a      	strh	r2, [r3, #8]
   166b2:	e00f      	b.n	166d4 <last_radio_from_ppm+0x454>
   166b4:	f64c 1384 	movw	r3, #51588	; 0xc984
   166b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166bc:	891b      	ldrh	r3, [r3, #8]
   166be:	b21b      	sxth	r3, r3
   166c0:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   166c4:	da06      	bge.n	166d4 <last_radio_from_ppm+0x454>
   166c6:	f64c 1384 	movw	r3, #51588	; 0xc984
   166ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166ce:	f64d 2280 	movw	r2, #55936	; 0xda80
   166d2:	811a      	strh	r2, [r3, #8]
   166d4:	f64c 1398 	movw	r3, #51608	; 0xc998
   166d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166dc:	895a      	ldrh	r2, [r3, #10]
   166de:	f64c 1384 	movw	r3, #51588	; 0xc984
   166e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166e6:	815a      	strh	r2, [r3, #10]
   166e8:	f64c 1398 	movw	r3, #51608	; 0xc998
   166ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166f0:	2200      	movs	r2, #0
   166f2:	815a      	strh	r2, [r3, #10]
   166f4:	f64c 1384 	movw	r3, #51588	; 0xc984
   166f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166fc:	895b      	ldrh	r3, [r3, #10]
   166fe:	b21b      	sxth	r3, r3
   16700:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16704:	dd07      	ble.n	16716 <last_radio_from_ppm+0x496>
   16706:	f64c 1384 	movw	r3, #51588	; 0xc984
   1670a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1670e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16712:	815a      	strh	r2, [r3, #10]
   16714:	e00f      	b.n	16736 <last_radio_from_ppm+0x4b6>
   16716:	f64c 1384 	movw	r3, #51588	; 0xc984
   1671a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1671e:	895b      	ldrh	r3, [r3, #10]
   16720:	b21b      	sxth	r3, r3
   16722:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16726:	da06      	bge.n	16736 <last_radio_from_ppm+0x4b6>
   16728:	f64c 1384 	movw	r3, #51588	; 0xc984
   1672c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16730:	f64d 2280 	movw	r2, #55936	; 0xda80
   16734:	815a      	strh	r2, [r3, #10]
   16736:	f64c 1398 	movw	r3, #51608	; 0xc998
   1673a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1673e:	899a      	ldrh	r2, [r3, #12]
   16740:	f64c 1384 	movw	r3, #51588	; 0xc984
   16744:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16748:	819a      	strh	r2, [r3, #12]
   1674a:	f64c 1398 	movw	r3, #51608	; 0xc998
   1674e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16752:	2200      	movs	r2, #0
   16754:	819a      	strh	r2, [r3, #12]
   16756:	f64c 1384 	movw	r3, #51588	; 0xc984
   1675a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1675e:	899b      	ldrh	r3, [r3, #12]
   16760:	b21b      	sxth	r3, r3
   16762:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16766:	dd07      	ble.n	16778 <last_radio_from_ppm+0x4f8>
   16768:	f64c 1384 	movw	r3, #51588	; 0xc984
   1676c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16770:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16774:	819a      	strh	r2, [r3, #12]
   16776:	e00f      	b.n	16798 <last_radio_from_ppm+0x518>
   16778:	f64c 1384 	movw	r3, #51588	; 0xc984
   1677c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16780:	899b      	ldrh	r3, [r3, #12]
   16782:	b21b      	sxth	r3, r3
   16784:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16788:	da06      	bge.n	16798 <last_radio_from_ppm+0x518>
   1678a:	f64c 1384 	movw	r3, #51588	; 0xc984
   1678e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16792:	f64d 2280 	movw	r2, #55936	; 0xda80
   16796:	819a      	strh	r2, [r3, #12]
   16798:	f64c 1398 	movw	r3, #51608	; 0xc998
   1679c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167a0:	89da      	ldrh	r2, [r3, #14]
   167a2:	f64c 1384 	movw	r3, #51588	; 0xc984
   167a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167aa:	81da      	strh	r2, [r3, #14]
   167ac:	f64c 1398 	movw	r3, #51608	; 0xc998
   167b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167b4:	2200      	movs	r2, #0
   167b6:	81da      	strh	r2, [r3, #14]
   167b8:	f64c 1384 	movw	r3, #51588	; 0xc984
   167bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167c0:	89db      	ldrh	r3, [r3, #14]
   167c2:	b21b      	sxth	r3, r3
   167c4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   167c8:	dd07      	ble.n	167da <last_radio_from_ppm+0x55a>
   167ca:	f64c 1384 	movw	r3, #51588	; 0xc984
   167ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167d2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   167d6:	81da      	strh	r2, [r3, #14]
   167d8:	e00f      	b.n	167fa <last_radio_from_ppm+0x57a>
   167da:	f64c 1384 	movw	r3, #51588	; 0xc984
   167de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167e2:	89db      	ldrh	r3, [r3, #14]
   167e4:	b21b      	sxth	r3, r3
   167e6:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   167ea:	da06      	bge.n	167fa <last_radio_from_ppm+0x57a>
   167ec:	f64c 1384 	movw	r3, #51588	; 0xc984
   167f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   167f4:	f64d 2280 	movw	r2, #55936	; 0xda80
   167f8:	81da      	strh	r2, [r3, #14]
   167fa:	f64c 1398 	movw	r3, #51608	; 0xc998
   167fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16802:	8a1a      	ldrh	r2, [r3, #16]
   16804:	f64c 1384 	movw	r3, #51588	; 0xc984
   16808:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1680c:	821a      	strh	r2, [r3, #16]
   1680e:	f64c 1398 	movw	r3, #51608	; 0xc998
   16812:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16816:	2200      	movs	r2, #0
   16818:	821a      	strh	r2, [r3, #16]
   1681a:	f64c 1384 	movw	r3, #51588	; 0xc984
   1681e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16822:	8a1b      	ldrh	r3, [r3, #16]
   16824:	b21b      	sxth	r3, r3
   16826:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1682a:	dd07      	ble.n	1683c <last_radio_from_ppm+0x5bc>
   1682c:	f64c 1384 	movw	r3, #51588	; 0xc984
   16830:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16834:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16838:	821a      	strh	r2, [r3, #16]
   1683a:	e00f      	b.n	1685c <last_radio_from_ppm+0x5dc>
   1683c:	f64c 1384 	movw	r3, #51588	; 0xc984
   16840:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16844:	8a1b      	ldrh	r3, [r3, #16]
   16846:	b21b      	sxth	r3, r3
   16848:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1684c:	da06      	bge.n	1685c <last_radio_from_ppm+0x5dc>
   1684e:	f64c 1384 	movw	r3, #51588	; 0xc984
   16852:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16856:	f64d 2280 	movw	r2, #55936	; 0xda80
   1685a:	821a      	strh	r2, [r3, #16]
   1685c:	f64c 13aa 	movw	r3, #51626	; 0xc9aa
   16860:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16864:	2201      	movs	r2, #1
   16866:	701a      	strb	r2, [r3, #0]
}
   16868:	370c      	adds	r7, #12
   1686a:	46bd      	mov	sp, r7
   1686c:	bd90      	pop	{r4, r7, pc}
   1686e:	bf00      	nop

00016870 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   16870:	b480      	push	{r7}
   16872:	af00      	add	r7, sp, #0
  idx_buf = 0;
   16874:	f64c 13e4 	movw	r3, #51684	; 0xc9e4
   16878:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1687c:	2200      	movs	r2, #0
   1687e:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   16880:	f64c 13e5 	movw	r3, #51685	; 0xc9e5
   16884:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16888:	2200      	movs	r2, #0
   1688a:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   1688c:	f64c 13e4 	movw	r3, #51684	; 0xc9e4
   16890:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16894:	781b      	ldrb	r3, [r3, #0]
   16896:	b2db      	uxtb	r3, r3
   16898:	461a      	mov	r2, r3
   1689a:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   1689e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168a2:	4413      	add	r3, r2
   168a4:	781a      	ldrb	r2, [r3, #0]
   168a6:	f64c 13e6 	movw	r3, #51686	; 0xc9e6
   168aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168ae:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   168b0:	f242 030f 	movw	r3, #8207	; 0x200f
   168b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   168b8:	f64c 12e6 	movw	r2, #51686	; 0xc9e6
   168bc:	f2c2 0204 	movt	r2, #8196	; 0x2004
   168c0:	7812      	ldrb	r2, [r2, #0]
   168c2:	b2d2      	uxtb	r2, r2
   168c4:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   168c6:	f64c 13e2 	movw	r3, #51682	; 0xc9e2
   168ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168ce:	2200      	movs	r2, #0
   168d0:	701a      	strb	r2, [r3, #0]
}
   168d2:	46bd      	mov	sp, r7
   168d4:	f85d 7b04 	ldr.w	r7, [sp], #4
   168d8:	4770      	bx	lr
   168da:	bf00      	nop

000168dc <fbw_spi_init>:

void fbw_spi_init(void) {
   168dc:	b480      	push	{r7}
   168de:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   168e0:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   168e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168e8:	2200      	movs	r2, #0
   168ea:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   168ec:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   168f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168f4:	2200      	movs	r2, #0
   168f6:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   168f8:	f242 0317 	movw	r3, #8215	; 0x2017
   168fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16900:	f242 0217 	movw	r2, #8215	; 0x2017
   16904:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16908:	7812      	ldrb	r2, [r2, #0]
   1690a:	b2d2      	uxtb	r2, r2
   1690c:	f042 0210 	orr.w	r2, r2, #16
   16910:	b2d2      	uxtb	r2, r2
   16912:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   16914:	f242 030d 	movw	r3, #8205	; 0x200d
   16918:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1691c:	2240      	movs	r2, #64	; 0x40
   1691e:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   16920:	f242 030d 	movw	r3, #8205	; 0x200d
   16924:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16928:	f242 020d 	movw	r2, #8205	; 0x200d
   1692c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16930:	7812      	ldrb	r2, [r2, #0]
   16932:	b2d2      	uxtb	r2, r2
   16934:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16938:	b2d2      	uxtb	r2, r2
   1693a:	701a      	strb	r2, [r3, #0]
}
   1693c:	46bd      	mov	sp, r7
   1693e:	f85d 7b04 	ldr.w	r7, [sp], #4
   16942:	4770      	bx	lr
   16944:	0000      	movs	r0, r0
	...

00016948 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   16948:	b480      	push	{r7}
   1694a:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   1694c:	f242 032f 	movw	r3, #8239	; 0x202f
   16950:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16954:	2200      	movs	r2, #0
   16956:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   16958:	f242 032e 	movw	r3, #8238	; 0x202e
   1695c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16960:	2201      	movs	r2, #1
   16962:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   16964:	f242 0325 	movw	r3, #8229	; 0x2025
   16968:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1696c:	2207      	movs	r2, #7
   1696e:	701a      	strb	r2, [r3, #0]
}
   16970:	46bd      	mov	sp, r7
   16972:	f85d 7b04 	ldr.w	r7, [sp], #4
   16976:	4770      	bx	lr

00016978 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   16978:	b480      	push	{r7}
   1697a:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   1697c:	f242 032e 	movw	r3, #8238	; 0x202e
   16980:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16984:	f242 022e 	movw	r2, #8238	; 0x202e
   16988:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1698c:	7812      	ldrb	r2, [r2, #0]
   1698e:	b2d2      	uxtb	r2, r2
   16990:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   16994:	b2d2      	uxtb	r2, r2
   16996:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   16998:	f242 032e 	movw	r3, #8238	; 0x202e
   1699c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   169a0:	f242 022e 	movw	r2, #8238	; 0x202e
   169a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   169a8:	7812      	ldrb	r2, [r2, #0]
   169aa:	b2d2      	uxtb	r2, r2
   169ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
   169b0:	b2d2      	uxtb	r2, r2
   169b2:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   169b4:	f242 0317 	movw	r3, #8215	; 0x2017
   169b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   169bc:	f242 0217 	movw	r2, #8215	; 0x2017
   169c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   169c4:	7812      	ldrb	r2, [r2, #0]
   169c6:	b2d2      	uxtb	r2, r2
   169c8:	f022 0201 	bic.w	r2, r2, #1
   169cc:	b2d2      	uxtb	r2, r2
   169ce:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   169d0:	f242 0337 	movw	r3, #8247	; 0x2037
   169d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   169d8:	f242 0237 	movw	r2, #8247	; 0x2037
   169dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   169e0:	7812      	ldrb	r2, [r2, #0]
   169e2:	b2d2      	uxtb	r2, r2
   169e4:	f042 0220 	orr.w	r2, r2, #32
   169e8:	b2d2      	uxtb	r2, r2
   169ea:	701a      	strb	r2, [r3, #0]
}
   169ec:	46bd      	mov	sp, r7
   169ee:	f85d 7b04 	ldr.w	r7, [sp], #4
   169f2:	4770      	bx	lr

000169f4 <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   169f4:	b580      	push	{r7, lr}
   169f6:	b082      	sub	sp, #8
   169f8:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   169fa:	2300      	movs	r3, #0
   169fc:	71fb      	strb	r3, [r7, #7]
   169fe:	e010      	b.n	16a22 <to_autopilot_from_last_radio+0x2e>
     to_mega128.channels[i] = last_radio[i];
   16a00:	79fa      	ldrb	r2, [r7, #7]
   16a02:	79f9      	ldrb	r1, [r7, #7]
   16a04:	f64c 1384 	movw	r3, #51588	; 0xc984
   16a08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a0c:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   16a10:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   16a14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a18:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   16a1c:	79fb      	ldrb	r3, [r7, #7]
   16a1e:	3301      	adds	r3, #1
   16a20:	71fb      	strb	r3, [r7, #7]
   16a22:	79fb      	ldrb	r3, [r7, #7]
   16a24:	2b08      	cmp	r3, #8
   16a26:	d9eb      	bls.n	16a00 <to_autopilot_from_last_radio+0xc>
     to_mega128.channels[i] = last_radio[i];
  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   16a28:	f64c 2374 	movw	r3, #51828	; 0xca74
   16a2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a30:	781b      	ldrb	r3, [r3, #0]
   16a32:	2b00      	cmp	r3, #0
   16a34:	bf0c      	ite	eq
   16a36:	2300      	moveq	r3, #0
   16a38:	2301      	movne	r3, #1
   16a3a:	b2db      	uxtb	r3, r3
   16a3c:	461a      	mov	r2, r3
   16a3e:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   16a42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a46:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   16a48:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   16a4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a50:	7cdb      	ldrb	r3, [r3, #19]
   16a52:	b2da      	uxtb	r2, r3
   16a54:	f64c 2376 	movw	r3, #51830	; 0xca76
   16a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a5c:	781b      	ldrb	r3, [r3, #0]
   16a5e:	2b00      	cmp	r3, #0
   16a60:	d001      	beq.n	16a66 <to_autopilot_from_last_radio+0x72>
   16a62:	2302      	movs	r3, #2
   16a64:	e000      	b.n	16a68 <to_autopilot_from_last_radio+0x74>
   16a66:	2300      	movs	r3, #0
   16a68:	4313      	orrs	r3, r2
   16a6a:	b2db      	uxtb	r3, r3
   16a6c:	b2da      	uxtb	r2, r3
   16a6e:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   16a72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a76:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   16a78:	f64c 13aa 	movw	r3, #51626	; 0xc9aa
   16a7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a80:	781b      	ldrb	r3, [r3, #0]
   16a82:	2b00      	cmp	r3, #0
   16a84:	d012      	beq.n	16aac <to_autopilot_from_last_radio+0xb8>
    to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   16a86:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   16a8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a8e:	7cdb      	ldrb	r3, [r3, #19]
   16a90:	f043 0304 	orr.w	r3, r3, #4
   16a94:	b2da      	uxtb	r2, r3
   16a96:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   16a9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a9e:	74da      	strb	r2, [r3, #19]
    last_radio_contains_avg_channels = FALSE;
   16aa0:	f64c 13aa 	movw	r3, #51626	; 0xc9aa
   16aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16aa8:	2200      	movs	r2, #0
   16aaa:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   16aac:	f64c 2378 	movw	r3, #51832	; 0xca78
   16ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ab4:	781a      	ldrb	r2, [r3, #0]
   16ab6:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   16aba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16abe:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   16ac0:	f64c 13e8 	movw	r3, #51688	; 0xc9e8
   16ac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ac8:	881b      	ldrh	r3, [r3, #0]
   16aca:	4618      	mov	r0, r3
   16acc:	f001 f8cc 	bl	17c68 <__aeabi_i2d>
   16ad0:	4602      	mov	r2, r0
   16ad2:	460b      	mov	r3, r1
   16ad4:	4610      	mov	r0, r2
   16ad6:	4619      	mov	r1, r3
   16ad8:	a31b      	add	r3, pc, #108	; (adr r3, 16b48 <to_autopilot_from_last_radio+0x154>)
   16ada:	e9d3 2300 	ldrd	r2, r3, [r3]
   16ade:	f001 f929 	bl	17d34 <__aeabi_dmul>
   16ae2:	4602      	mov	r2, r0
   16ae4:	460b      	mov	r3, r1
   16ae6:	4610      	mov	r0, r2
   16ae8:	4619      	mov	r1, r3
   16aea:	f04f 0200 	mov.w	r2, #0
   16aee:	f04f 0300 	mov.w	r3, #0
   16af2:	f2c4 0340 	movt	r3, #16448	; 0x4040
   16af6:	f001 fa47 	bl	17f88 <__aeabi_ddiv>
   16afa:	4602      	mov	r2, r0
   16afc:	460b      	mov	r3, r1
   16afe:	4610      	mov	r0, r2
   16b00:	4619      	mov	r1, r3
   16b02:	a313      	add	r3, pc, #76	; (adr r3, 16b50 <to_autopilot_from_last_radio+0x15c>)
   16b04:	e9d3 2300 	ldrd	r2, r3, [r3]
   16b08:	f000 ff62 	bl	179d0 <__adddf3>
   16b0c:	4602      	mov	r2, r0
   16b0e:	460b      	mov	r3, r1
   16b10:	4610      	mov	r0, r2
   16b12:	4619      	mov	r1, r3
   16b14:	f04f 0200 	mov.w	r2, #0
   16b18:	f04f 0300 	mov.w	r3, #0
   16b1c:	f2c4 0324 	movt	r3, #16420	; 0x4024
   16b20:	f001 f908 	bl	17d34 <__aeabi_dmul>
   16b24:	4602      	mov	r2, r0
   16b26:	460b      	mov	r3, r1
   16b28:	4610      	mov	r0, r2
   16b2a:	4619      	mov	r1, r3
   16b2c:	f001 fbc4 	bl	182b8 <__aeabi_d2uiz>
   16b30:	4603      	mov	r3, r0
   16b32:	b2da      	uxtb	r2, r3
   16b34:	f64c 13cc 	movw	r3, #51660	; 0xc9cc
   16b38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b3c:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   16b3e:	3708      	adds	r7, #8
   16b40:	46bd      	mov	sp, r7
   16b42:	bd80      	pop	{r7, pc}
   16b44:	f3af 8000 	nop.w
   16b48:	1eb851ec 	.word	0x1eb851ec
   16b4c:	3f91eb85 	.word	0x3f91eb85
   16b50:	020c49ba 	.word	0x020c49ba
   16b54:	3fb6872b 	.word	0x3fb6872b

00016b58 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   16b58:	b580      	push	{r7, lr}
   16b5a:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
   if ( !SpiIsSelected() && spi_was_interrupted ) 
   16b5c:	f242 0316 	movw	r3, #8214	; 0x2016
   16b60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b64:	781b      	ldrb	r3, [r3, #0]
   16b66:	b2db      	uxtb	r3, r3
   16b68:	f003 0304 	and.w	r3, r3, #4
   16b6c:	2b00      	cmp	r3, #0
   16b6e:	d011      	beq.n	16b94 <send_data_to_autopilot_task+0x3c>
   16b70:	f64c 13e3 	movw	r3, #51683	; 0xc9e3
   16b74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b78:	781b      	ldrb	r3, [r3, #0]
   16b7a:	b2db      	uxtb	r3, r3
   16b7c:	2b00      	cmp	r3, #0
   16b7e:	d009      	beq.n	16b94 <send_data_to_autopilot_task+0x3c>
   {
      spi_was_interrupted = FALSE;
   16b80:	f64c 13e3 	movw	r3, #51683	; 0xc9e3
   16b84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b88:	2200      	movs	r2, #0
   16b8a:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   16b8c:	f7ff ff32 	bl	169f4 <to_autopilot_from_last_radio>
      spi_reset();
   16b90:	f7ff fe6e 	bl	16870 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   16b94:	bd80      	pop	{r7, pc}
   16b96:	bf00      	nop

00016b98 <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   16b98:	b580      	push	{r7, lr}
   16b9a:	af00      	add	r7, sp, #0
  uart_init_tx();
   16b9c:	f000 fb68 	bl	17270 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   16ba0:	f648 30ec 	movw	r0, #35820	; 0x8bec
   16ba4:	f2c0 0001 	movt	r0, #1
   16ba8:	f000 fc40 	bl	1742c <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   16bac:	f7ff faa0 	bl	160f0 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   16bb0:	2003      	movs	r0, #3
   16bb2:	f64c 11e8 	movw	r1, #51688	; 0xc9e8
   16bb6:	f2c2 0104 	movt	r1, #8196	; 0x2004
   16bba:	f7ff fa85 	bl	160c8 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   16bbe:	2006      	movs	r0, #6
   16bc0:	f64c 212c 	movw	r1, #51756	; 0xca2c
   16bc4:	f2c2 0104 	movt	r1, #8196	; 0x2004
   16bc8:	f7ff fa7e 	bl	160c8 <fbw_adc_buf_channel>
#endif
  timer_init();
   16bcc:	f7ff febc 	bl	16948 <timer_init>
  servo_init();
   16bd0:	f000 f8fa 	bl	16dc8 <servo_init>
  ppm_init();
   16bd4:	f7ff fed0 	bl	16978 <ppm_init>
  fbw_spi_init();
   16bd8:	f7ff fe80 	bl	168dc <fbw_spi_init>
  //sei(); //FN
}
   16bdc:	bd80      	pop	{r7, pc}
   16bde:	bf00      	nop

00016be0 <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   16be0:	b580      	push	{r7, lr}
   16be2:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    if( ppm_valid ) 
   16be4:	f64c 13ab 	movw	r3, #51627	; 0xc9ab
   16be8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bec:	781b      	ldrb	r3, [r3, #0]
   16bee:	b2db      	uxtb	r3, r3
   16bf0:	2b00      	cmp	r3, #0
   16bf2:	d04c      	beq.n	16c8e <test_ppm_task+0xae>
    {
      ppm_valid = FALSE;
   16bf4:	f64c 13ab 	movw	r3, #51627	; 0xc9ab
   16bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bfc:	2200      	movs	r2, #0
   16bfe:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   16c00:	f64c 2377 	movw	r3, #51831	; 0xca77
   16c04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c08:	781b      	ldrb	r3, [r3, #0]
   16c0a:	3301      	adds	r3, #1
   16c0c:	b2da      	uxtb	r2, r3
   16c0e:	f64c 2377 	movw	r3, #51831	; 0xca77
   16c12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c16:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   16c18:	f64c 2374 	movw	r3, #51828	; 0xca74
   16c1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c20:	2201      	movs	r2, #1
   16c22:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   16c24:	f64c 2376 	movw	r3, #51830	; 0xca76
   16c28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c2c:	2200      	movs	r2, #0
   16c2e:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   16c30:	f64c 2372 	movw	r3, #51826	; 0xca72
   16c34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c38:	2200      	movs	r2, #0
   16c3a:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   16c3c:	f7ff fb20 	bl	16280 <last_radio_from_ppm>
      if (last_radio_contains_avg_channels) 
   16c40:	f64c 13aa 	movw	r3, #51626	; 0xc9aa
   16c44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c48:	781b      	ldrb	r3, [r3, #0]
   16c4a:	2b00      	cmp	r3, #0
   16c4c:	d011      	beq.n	16c72 <test_ppm_task+0x92>
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   16c4e:	f64c 1384 	movw	r3, #51588	; 0xc984
   16c52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c56:	891b      	ldrh	r3, [r3, #8]
   16c58:	b21b      	sxth	r3, r3
   16c5a:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   16c5e:	bfb4      	ite	lt
   16c60:	2300      	movlt	r3, #0
   16c62:	2301      	movge	r3, #1
   16c64:	b2db      	uxtb	r3, r3
   16c66:	461a      	mov	r2, r3
   16c68:	f64c 2370 	movw	r3, #51824	; 0xca70
   16c6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c70:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   16c72:	f64c 2370 	movw	r3, #51824	; 0xca70
   16c76:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c7a:	781b      	ldrb	r3, [r3, #0]
   16c7c:	2b00      	cmp	r3, #0
   16c7e:	d11a      	bne.n	16cb6 <test_ppm_task+0xd6>
      {
	servo_set(last_radio);
   16c80:	f64c 1084 	movw	r0, #51588	; 0xc984
   16c84:	f2c2 0004 	movt	r0, #8196	; 0x2004
   16c88:	f000 f97c 	bl	16f84 <servo_set>
   16c8c:	e013      	b.n	16cb6 <test_ppm_task+0xd6>
      }
    } 
    else if (mode == MODE_MANUAL && radio_really_lost) 
   16c8e:	f64c 2370 	movw	r3, #51824	; 0xca70
   16c92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c96:	781b      	ldrb	r3, [r3, #0]
   16c98:	2b00      	cmp	r3, #0
   16c9a:	d10c      	bne.n	16cb6 <test_ppm_task+0xd6>
   16c9c:	f64c 2376 	movw	r3, #51830	; 0xca76
   16ca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ca4:	781b      	ldrb	r3, [r3, #0]
   16ca6:	2b00      	cmp	r3, #0
   16ca8:	d005      	beq.n	16cb6 <test_ppm_task+0xd6>
    {
      mode = MODE_AUTO;
   16caa:	f64c 2370 	movw	r3, #51824	; 0xca70
   16cae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16cb2:	2201      	movs	r2, #1
   16cb4:	701a      	strb	r2, [r3, #0]
    }
    if (time_since_last_ppm >= STALLED_TIME) 
   16cb6:	f64c 2372 	movw	r3, #51826	; 0xca72
   16cba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16cbe:	881b      	ldrh	r3, [r3, #0]
   16cc0:	2b1d      	cmp	r3, #29
   16cc2:	d905      	bls.n	16cd0 <test_ppm_task+0xf0>
    {
      radio_ok = FALSE;
   16cc4:	f64c 2374 	movw	r3, #51828	; 0xca74
   16cc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ccc:	2200      	movs	r2, #0
   16cce:	701a      	strb	r2, [r3, #0]
    }
    if (time_since_last_ppm >= REALLY_STALLED_TIME) 
   16cd0:	f64c 2372 	movw	r3, #51826	; 0xca72
   16cd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16cd8:	881b      	ldrh	r3, [r3, #0]
   16cda:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   16cde:	d305      	bcc.n	16cec <test_ppm_task+0x10c>
    {
      radio_really_lost = TRUE;
   16ce0:	f64c 2376 	movw	r3, #51830	; 0xca76
   16ce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ce8:	2201      	movs	r2, #1
   16cea:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   16cec:	bd80      	pop	{r7, pc}
   16cee:	bf00      	nop

00016cf0 <check_failsafe_task>:
void check_failsafe_task(void)
{
   16cf0:	b580      	push	{r7, lr}
   16cf2:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
   16cf4:	f64c 2370 	movw	r3, #51824	; 0xca70
   16cf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16cfc:	781b      	ldrb	r3, [r3, #0]
   16cfe:	2b00      	cmp	r3, #0
   16d00:	d106      	bne.n	16d10 <check_failsafe_task+0x20>
   16d02:	f64c 2374 	movw	r3, #51828	; 0xca74
   16d06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d0a:	781b      	ldrb	r3, [r3, #0]
   16d0c:	2b00      	cmp	r3, #0
   16d0e:	d00d      	beq.n	16d2c <check_failsafe_task+0x3c>
   16d10:	f64c 2370 	movw	r3, #51824	; 0xca70
   16d14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d18:	781b      	ldrb	r3, [r3, #0]
   16d1a:	2b01      	cmp	r3, #1
   16d1c:	d10c      	bne.n	16d38 <check_failsafe_task+0x48>
   16d1e:	f64c 2375 	movw	r3, #51829	; 0xca75
   16d22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d26:	781b      	ldrb	r3, [r3, #0]
   16d28:	2b00      	cmp	r3, #0
   16d2a:	d105      	bne.n	16d38 <check_failsafe_task+0x48>
    {
      servo_set(failsafe);
   16d2c:	f648 30d8 	movw	r0, #35800	; 0x8bd8
   16d30:	f2c0 0001 	movt	r0, #1
   16d34:	f000 f926 	bl	16f84 <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   16d38:	bd80      	pop	{r7, pc}
   16d3a:	bf00      	nop

00016d3c <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   16d3c:	b580      	push	{r7, lr}
   16d3e:	af00      	add	r7, sp, #0
	//vPrintString("S_8 check_mega128_values_task start! \n\r"); //SunnyBeike
// modified by wanbo
     if ( !SpiIsSelected() && spi_was_interrupted ) 
   16d40:	f242 0316 	movw	r3, #8214	; 0x2016
   16d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16d48:	781b      	ldrb	r3, [r3, #0]
   16d4a:	b2db      	uxtb	r3, r3
   16d4c:	f003 0304 	and.w	r3, r3, #4
   16d50:	2b00      	cmp	r3, #0
   16d52:	d028      	beq.n	16da6 <check_mega128_values_task+0x6a>
   16d54:	f64c 13e3 	movw	r3, #51683	; 0xc9e3
   16d58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d5c:	781b      	ldrb	r3, [r3, #0]
   16d5e:	b2db      	uxtb	r3, r3
   16d60:	2b00      	cmp	r3, #0
   16d62:	d020      	beq.n	16da6 <check_mega128_values_task+0x6a>
     {
         if (mega128_receive_valid)
   16d64:	f64c 13e2 	movw	r3, #51682	; 0xc9e2
   16d68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d6c:	781b      	ldrb	r3, [r3, #0]
   16d6e:	b2db      	uxtb	r3, r3
   16d70:	2b00      	cmp	r3, #0
   16d72:	d018      	beq.n	16da6 <check_mega128_values_task+0x6a>
         { 
             time_since_last_mega128 = 0;
   16d74:	f64c 2371 	movw	r3, #51825	; 0xca71
   16d78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d7c:	2200      	movs	r2, #0
   16d7e:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   16d80:	f64c 2375 	movw	r3, #51829	; 0xca75
   16d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d88:	2201      	movs	r2, #1
   16d8a:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   16d8c:	f64c 2370 	movw	r3, #51824	; 0xca70
   16d90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d94:	781b      	ldrb	r3, [r3, #0]
   16d96:	2b01      	cmp	r3, #1
   16d98:	d105      	bne.n	16da6 <check_mega128_values_task+0x6a>
                 servo_set(from_mega128.channels);
   16d9a:	f64c 10b4 	movw	r0, #51636	; 0xc9b4
   16d9e:	f2c2 0004 	movt	r0, #8196	; 0x2004
   16da2:	f000 f8ef 	bl	16f84 <servo_set>
         }
     }
     if (time_since_last_mega128 == STALLED_TIME) 
   16da6:	f64c 2371 	movw	r3, #51825	; 0xca71
   16daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16dae:	781b      	ldrb	r3, [r3, #0]
   16db0:	2b1e      	cmp	r3, #30
   16db2:	d105      	bne.n	16dc0 <check_mega128_values_task+0x84>
     {
         mega128_ok = FALSE;
   16db4:	f64c 2375 	movw	r3, #51829	; 0xca75
   16db8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16dbc:	2200      	movs	r2, #0
   16dbe:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   16dc0:	bd80      	pop	{r7, pc}
   16dc2:	bf00      	nop
   16dc4:	f3af 8000 	nop.w

00016dc8 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   16dc8:	b480      	push	{r7}
   16dca:	b083      	sub	sp, #12
   16dcc:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   16dce:	f242 0311 	movw	r3, #8209	; 0x2011
   16dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16dd6:	f242 0211 	movw	r2, #8209	; 0x2011
   16dda:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16dde:	7812      	ldrb	r2, [r2, #0]
   16de0:	b2d2      	uxtb	r2, r2
   16de2:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16de6:	b2d2      	uxtb	r2, r2
   16de8:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   16dea:	f242 0317 	movw	r3, #8215	; 0x2017
   16dee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16df2:	f242 0217 	movw	r2, #8215	; 0x2017
   16df6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16dfa:	7812      	ldrb	r2, [r2, #0]
   16dfc:	b2d2      	uxtb	r2, r2
   16dfe:	f042 0202 	orr.w	r2, r2, #2
   16e02:	b2d2      	uxtb	r2, r2
   16e04:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16e06:	f242 0312 	movw	r3, #8210	; 0x2012
   16e0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e0e:	f242 0212 	movw	r2, #8210	; 0x2012
   16e12:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16e16:	7812      	ldrb	r2, [r2, #0]
   16e18:	b2d2      	uxtb	r2, r2
   16e1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16e1e:	b2d2      	uxtb	r2, r2
   16e20:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   16e22:	f242 0318 	movw	r3, #8216	; 0x2018
   16e26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e2a:	f242 0218 	movw	r2, #8216	; 0x2018
   16e2e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16e32:	7812      	ldrb	r2, [r2, #0]
   16e34:	b2d2      	uxtb	r2, r2
   16e36:	f022 0202 	bic.w	r2, r2, #2
   16e3a:	b2d2      	uxtb	r2, r2
   16e3c:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16e3e:	2300      	movs	r3, #0
   16e40:	71fb      	strb	r3, [r7, #7]
   16e42:	e00b      	b.n	16e5c <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   16e44:	79fa      	ldrb	r2, [r7, #7]
   16e46:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16e4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16e4e:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   16e52:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16e56:	79fb      	ldrb	r3, [r7, #7]
   16e58:	3301      	adds	r3, #1
   16e5a:	71fb      	strb	r3, [r7, #7]
   16e5c:	79fb      	ldrb	r3, [r7, #7]
   16e5e:	2b09      	cmp	r3, #9
   16e60:	d9f0      	bls.n	16e44 <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   16e62:	f242 032a 	movw	r3, #8234	; 0x202a
   16e66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e6a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   16e6e:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   16e70:	f242 032f 	movw	r3, #8239	; 0x202f
   16e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e78:	f242 022f 	movw	r2, #8239	; 0x202f
   16e7c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16e80:	7812      	ldrb	r2, [r2, #0]
   16e82:	b2d2      	uxtb	r2, r2
   16e84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16e88:	b2d2      	uxtb	r2, r2
   16e8a:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   16e8c:	f242 0336 	movw	r3, #8246	; 0x2036
   16e90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16e94:	2210      	movs	r2, #16
   16e96:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16e98:	f242 0312 	movw	r3, #8210	; 0x2012
   16e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ea0:	f242 0212 	movw	r2, #8210	; 0x2012
   16ea4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16ea8:	7812      	ldrb	r2, [r2, #0]
   16eaa:	b2d2      	uxtb	r2, r2
   16eac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16eb0:	b2d2      	uxtb	r2, r2
   16eb2:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   16eb4:	f242 0337 	movw	r3, #8247	; 0x2037
   16eb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ebc:	f242 0237 	movw	r2, #8247	; 0x2037
   16ec0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16ec4:	7812      	ldrb	r2, [r2, #0]
   16ec6:	b2d2      	uxtb	r2, r2
   16ec8:	f042 0210 	orr.w	r2, r2, #16
   16ecc:	b2d2      	uxtb	r2, r2
   16ece:	701a      	strb	r2, [r3, #0]
}
   16ed0:	370c      	adds	r7, #12
   16ed2:	46bd      	mov	sp, r7
   16ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
   16ed8:	4770      	bx	lr
   16eda:	bf00      	nop

00016edc <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   16edc:	b480      	push	{r7}
   16ede:	b083      	sub	sp, #12
   16ee0:	af00      	add	r7, sp, #0
   16ee2:	4602      	mov	r2, r0
   16ee4:	460b      	mov	r3, r1
   16ee6:	71fa      	strb	r2, [r7, #7]
   16ee8:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   16eea:	79f9      	ldrb	r1, [r7, #7]
   16eec:	88bb      	ldrh	r3, [r7, #4]
   16eee:	011b      	lsls	r3, r3, #4
   16ef0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16ef4:	d308      	bcc.n	16f08 <servo_set_one+0x2c>
   16ef6:	88bb      	ldrh	r3, [r7, #4]
   16ef8:	011b      	lsls	r3, r3, #4
   16efa:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16efe:	bf28      	it	cs
   16f00:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16f04:	b29a      	uxth	r2, r3
   16f06:	e001      	b.n	16f0c <servo_set_one+0x30>
   16f08:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16f0c:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16f10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16f14:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   16f18:	370c      	adds	r7, #12
   16f1a:	46bd      	mov	sp, r7
   16f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
   16f20:	4770      	bx	lr
   16f22:	bf00      	nop

00016f24 <servo_transmit>:

void 
servo_transmit(void) {
   16f24:	b580      	push	{r7, lr}
   16f26:	b082      	sub	sp, #8
   16f28:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   16f2a:	2000      	movs	r0, #0
   16f2c:	f000 f9e6 	bl	172fc <uart_transmit>
   16f30:	2000      	movs	r0, #0
   16f32:	f000 f9e3 	bl	172fc <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16f36:	2300      	movs	r3, #0
   16f38:	71fb      	strb	r3, [r7, #7]
   16f3a:	e01a      	b.n	16f72 <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   16f3c:	79fa      	ldrb	r2, [r7, #7]
   16f3e:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16f42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16f46:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16f4a:	0a1b      	lsrs	r3, r3, #8
   16f4c:	b29b      	uxth	r3, r3
   16f4e:	b2db      	uxtb	r3, r3
   16f50:	4618      	mov	r0, r3
   16f52:	f000 f9d3 	bl	172fc <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   16f56:	79fa      	ldrb	r2, [r7, #7]
   16f58:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16f5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16f60:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16f64:	b2db      	uxtb	r3, r3
   16f66:	4618      	mov	r0, r3
   16f68:	f000 f9c8 	bl	172fc <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16f6c:	79fb      	ldrb	r3, [r7, #7]
   16f6e:	3301      	adds	r3, #1
   16f70:	71fb      	strb	r3, [r7, #7]
   16f72:	79fb      	ldrb	r3, [r7, #7]
   16f74:	2b09      	cmp	r3, #9
   16f76:	d9e1      	bls.n	16f3c <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   16f78:	200a      	movs	r0, #10
   16f7a:	f000 f9bf 	bl	172fc <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   16f7e:	3708      	adds	r7, #8
   16f80:	46bd      	mov	sp, r7
   16f82:	bd80      	pop	{r7, pc}

00016f84 <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   16f84:	b5b0      	push	{r4, r5, r7, lr}
   16f86:	b084      	sub	sp, #16
   16f88:	af00      	add	r7, sp, #0
   16f8a:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   16f8c:	687b      	ldr	r3, [r7, #4]
   16f8e:	330a      	adds	r3, #10
   16f90:	881b      	ldrh	r3, [r3, #0]
   16f92:	b21b      	sxth	r3, r3
   16f94:	005b      	lsls	r3, r3, #1
   16f96:	4618      	mov	r0, r3
   16f98:	f000 fe66 	bl	17c68 <__aeabi_i2d>
   16f9c:	4602      	mov	r2, r0
   16f9e:	460b      	mov	r3, r1
   16fa0:	4610      	mov	r0, r2
   16fa2:	4619      	mov	r1, r3
   16fa4:	a3a6      	add	r3, pc, #664	; (adr r3, 17240 <servo_set+0x2bc>)
   16fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
   16faa:	f000 fec3 	bl	17d34 <__aeabi_dmul>
   16fae:	4602      	mov	r2, r0
   16fb0:	460b      	mov	r3, r1
   16fb2:	4610      	mov	r0, r2
   16fb4:	4619      	mov	r1, r3
   16fb6:	f001 f957 	bl	18268 <__aeabi_d2iz>
   16fba:	4603      	mov	r3, r0
   16fbc:	b29b      	uxth	r3, r3
   16fbe:	b29b      	uxth	r3, r3
   16fc0:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16fc4:	81fb      	strh	r3, [r7, #14]
   16fc6:	89fb      	ldrh	r3, [r7, #14]
   16fc8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16fcc:	d307      	bcc.n	16fde <servo_set+0x5a>
   16fce:	89fb      	ldrh	r3, [r7, #14]
   16fd0:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16fd4:	bf28      	it	cs
   16fd6:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16fda:	b29a      	uxth	r2, r3
   16fdc:	e001      	b.n	16fe2 <servo_set+0x5e>
   16fde:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16fe2:	f64c 237c 	movw	r3, #51836	; 0xca7c
   16fe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16fea:	80da      	strh	r2, [r3, #6]
   16fec:	687b      	ldr	r3, [r7, #4]
   16fee:	881b      	ldrh	r3, [r3, #0]
   16ff0:	b21b      	sxth	r3, r3
   16ff2:	005b      	lsls	r3, r3, #1
   16ff4:	4618      	mov	r0, r3
   16ff6:	f000 fe37 	bl	17c68 <__aeabi_i2d>
   16ffa:	4602      	mov	r2, r0
   16ffc:	460b      	mov	r3, r1
   16ffe:	4610      	mov	r0, r2
   17000:	4619      	mov	r1, r3
   17002:	a38f      	add	r3, pc, #572	; (adr r3, 17240 <servo_set+0x2bc>)
   17004:	e9d3 2300 	ldrd	r2, r3, [r3]
   17008:	f000 fe94 	bl	17d34 <__aeabi_dmul>
   1700c:	4602      	mov	r2, r0
   1700e:	460b      	mov	r3, r1
   17010:	4610      	mov	r0, r2
   17012:	4619      	mov	r1, r3
   17014:	f001 f928 	bl	18268 <__aeabi_d2iz>
   17018:	4603      	mov	r3, r0
   1701a:	b29b      	uxth	r3, r3
   1701c:	b29b      	uxth	r3, r3
   1701e:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   17022:	81fb      	strh	r3, [r7, #14]
   17024:	89fb      	ldrh	r3, [r7, #14]
   17026:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1702a:	d307      	bcc.n	1703c <servo_set+0xb8>
   1702c:	89fb      	ldrh	r3, [r7, #14]
   1702e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   17032:	bf28      	it	cs
   17034:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   17038:	b29a      	uxth	r2, r3
   1703a:	e001      	b.n	17040 <servo_set+0xbc>
   1703c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   17040:	f64c 237c 	movw	r3, #51836	; 0xca7c
   17044:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17048:	825a      	strh	r2, [r3, #18]
   1704a:	687b      	ldr	r3, [r7, #4]
   1704c:	3304      	adds	r3, #4
   1704e:	881b      	ldrh	r3, [r3, #0]
   17050:	b21b      	sxth	r3, r3
   17052:	4618      	mov	r0, r3
   17054:	f000 fe08 	bl	17c68 <__aeabi_i2d>
   17058:	4602      	mov	r2, r0
   1705a:	460b      	mov	r3, r1
   1705c:	4610      	mov	r0, r2
   1705e:	4619      	mov	r1, r3
   17060:	a379      	add	r3, pc, #484	; (adr r3, 17248 <servo_set+0x2c4>)
   17062:	e9d3 2300 	ldrd	r2, r3, [r3]
   17066:	f000 fe65 	bl	17d34 <__aeabi_dmul>
   1706a:	4602      	mov	r2, r0
   1706c:	460b      	mov	r3, r1
   1706e:	4610      	mov	r0, r2
   17070:	4619      	mov	r1, r3
   17072:	f001 f8f9 	bl	18268 <__aeabi_d2iz>
   17076:	4603      	mov	r3, r0
   17078:	b29b      	uxth	r3, r3
   1707a:	b29b      	uxth	r3, r3
   1707c:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   17080:	3320      	adds	r3, #32
   17082:	81fb      	strh	r3, [r7, #14]
   17084:	89fb      	ldrh	r3, [r7, #14]
   17086:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1708a:	d307      	bcc.n	1709c <servo_set+0x118>
   1708c:	89fb      	ldrh	r3, [r7, #14]
   1708e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   17092:	bf28      	it	cs
   17094:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   17098:	b29a      	uxth	r2, r3
   1709a:	e001      	b.n	170a0 <servo_set+0x11c>
   1709c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   170a0:	f64c 237c 	movw	r3, #51836	; 0xca7c
   170a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   170a8:	819a      	strh	r2, [r3, #12]
   170aa:	687b      	ldr	r3, [r7, #4]
   170ac:	885b      	ldrh	r3, [r3, #2]
   170ae:	81bb      	strh	r3, [r7, #12]
   170b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   170b4:	2b00      	cmp	r3, #0
   170b6:	dd06      	ble.n	170c6 <servo_set+0x142>
   170b8:	f04f 0400 	mov.w	r4, #0
   170bc:	f04f 0500 	mov.w	r5, #0
   170c0:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   170c4:	e002      	b.n	170cc <servo_set+0x148>
   170c6:	a562      	add	r5, pc, #392	; (adr r5, 17250 <servo_set+0x2cc>)
   170c8:	e9d5 4500 	ldrd	r4, r5, [r5]
   170cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   170d0:	4618      	mov	r0, r3
   170d2:	f000 fdc9 	bl	17c68 <__aeabi_i2d>
   170d6:	4602      	mov	r2, r0
   170d8:	460b      	mov	r3, r1
   170da:	4620      	mov	r0, r4
   170dc:	4629      	mov	r1, r5
   170de:	f000 fe29 	bl	17d34 <__aeabi_dmul>
   170e2:	4602      	mov	r2, r0
   170e4:	460b      	mov	r3, r1
   170e6:	4610      	mov	r0, r2
   170e8:	4619      	mov	r1, r3
   170ea:	a35b      	add	r3, pc, #364	; (adr r3, 17258 <servo_set+0x2d4>)
   170ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   170f0:	f000 fe20 	bl	17d34 <__aeabi_dmul>
   170f4:	4602      	mov	r2, r0
   170f6:	460b      	mov	r3, r1
   170f8:	4610      	mov	r0, r2
   170fa:	4619      	mov	r1, r3
   170fc:	f001 f8b4 	bl	18268 <__aeabi_d2iz>
   17100:	4603      	mov	r3, r0
   17102:	b29b      	uxth	r3, r3
   17104:	b29b      	uxth	r3, r3
   17106:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   1710a:	81fb      	strh	r3, [r7, #14]
   1710c:	89fb      	ldrh	r3, [r7, #14]
   1710e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   17112:	d307      	bcc.n	17124 <servo_set+0x1a0>
   17114:	89fb      	ldrh	r3, [r7, #14]
   17116:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   1711a:	bf28      	it	cs
   1711c:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   17120:	b29a      	uxth	r2, r3
   17122:	e001      	b.n	17128 <servo_set+0x1a4>
   17124:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   17128:	f64c 237c 	movw	r3, #51836	; 0xca7c
   1712c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17130:	801a      	strh	r2, [r3, #0]
   17132:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   17136:	2b00      	cmp	r3, #0
   17138:	dd03      	ble.n	17142 <servo_set+0x1be>
   1713a:	a545      	add	r5, pc, #276	; (adr r5, 17250 <servo_set+0x2cc>)
   1713c:	e9d5 4500 	ldrd	r4, r5, [r5]
   17140:	e005      	b.n	1714e <servo_set+0x1ca>
   17142:	f04f 0400 	mov.w	r4, #0
   17146:	f04f 0500 	mov.w	r5, #0
   1714a:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   1714e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   17152:	4618      	mov	r0, r3
   17154:	f000 fd88 	bl	17c68 <__aeabi_i2d>
   17158:	4602      	mov	r2, r0
   1715a:	460b      	mov	r3, r1
   1715c:	4620      	mov	r0, r4
   1715e:	4629      	mov	r1, r5
   17160:	f000 fde8 	bl	17d34 <__aeabi_dmul>
   17164:	4602      	mov	r2, r0
   17166:	460b      	mov	r3, r1
   17168:	4610      	mov	r0, r2
   1716a:	4619      	mov	r1, r3
   1716c:	a33c      	add	r3, pc, #240	; (adr r3, 17260 <servo_set+0x2dc>)
   1716e:	e9d3 2300 	ldrd	r2, r3, [r3]
   17172:	f000 fddf 	bl	17d34 <__aeabi_dmul>
   17176:	4602      	mov	r2, r0
   17178:	460b      	mov	r3, r1
   1717a:	4610      	mov	r0, r2
   1717c:	4619      	mov	r1, r3
   1717e:	f001 f873 	bl	18268 <__aeabi_d2iz>
   17182:	4603      	mov	r3, r0
   17184:	b29b      	uxth	r3, r3
   17186:	b29b      	uxth	r3, r3
   17188:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   1718c:	3320      	adds	r3, #32
   1718e:	81fb      	strh	r3, [r7, #14]
   17190:	89fb      	ldrh	r3, [r7, #14]
   17192:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   17196:	d307      	bcc.n	171a8 <servo_set+0x224>
   17198:	89fb      	ldrh	r3, [r7, #14]
   1719a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   1719e:	bf28      	it	cs
   171a0:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   171a4:	b29a      	uxth	r2, r3
   171a6:	e001      	b.n	171ac <servo_set+0x228>
   171a8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   171ac:	f64c 237c 	movw	r3, #51836	; 0xca7c
   171b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   171b4:	809a      	strh	r2, [r3, #4]
   171b6:	687b      	ldr	r3, [r7, #4]
   171b8:	3306      	adds	r3, #6
   171ba:	881b      	ldrh	r3, [r3, #0]
   171bc:	b21b      	sxth	r3, r3
   171be:	4618      	mov	r0, r3
   171c0:	f000 fd52 	bl	17c68 <__aeabi_i2d>
   171c4:	4604      	mov	r4, r0
   171c6:	460d      	mov	r5, r1
   171c8:	687b      	ldr	r3, [r7, #4]
   171ca:	3302      	adds	r3, #2
   171cc:	881b      	ldrh	r3, [r3, #0]
   171ce:	b21b      	sxth	r3, r3
   171d0:	4618      	mov	r0, r3
   171d2:	f000 fd49 	bl	17c68 <__aeabi_i2d>
   171d6:	4602      	mov	r2, r0
   171d8:	460b      	mov	r3, r1
   171da:	4620      	mov	r0, r4
   171dc:	4629      	mov	r1, r5
   171de:	f000 fbf7 	bl	179d0 <__adddf3>
   171e2:	4602      	mov	r2, r0
   171e4:	460b      	mov	r3, r1
   171e6:	4610      	mov	r0, r2
   171e8:	4619      	mov	r1, r3
   171ea:	a31f      	add	r3, pc, #124	; (adr r3, 17268 <servo_set+0x2e4>)
   171ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   171f0:	f000 fda0 	bl	17d34 <__aeabi_dmul>
   171f4:	4602      	mov	r2, r0
   171f6:	460b      	mov	r3, r1
   171f8:	4610      	mov	r0, r2
   171fa:	4619      	mov	r1, r3
   171fc:	f001 f834 	bl	18268 <__aeabi_d2iz>
   17200:	4603      	mov	r3, r0
   17202:	b29b      	uxth	r3, r3
   17204:	b29b      	uxth	r3, r3
   17206:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   1720a:	3320      	adds	r3, #32
   1720c:	81fb      	strh	r3, [r7, #14]
   1720e:	89fb      	ldrh	r3, [r7, #14]
   17210:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   17214:	d307      	bcc.n	17226 <servo_set+0x2a2>
   17216:	89fb      	ldrh	r3, [r7, #14]
   17218:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   1721c:	bf28      	it	cs
   1721e:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   17222:	b29a      	uxth	r2, r3
   17224:	e001      	b.n	1722a <servo_set+0x2a6>
   17226:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   1722a:	f64c 237c 	movw	r3, #51836	; 0xca7c
   1722e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17232:	81da      	strh	r2, [r3, #14]
}
   17234:	3710      	adds	r7, #16
   17236:	46bd      	mov	sp, r7
   17238:	bdb0      	pop	{r4, r5, r7, pc}
   1723a:	bf00      	nop
   1723c:	f3af 8000 	nop.w
   17240:	aaaa9ef0 	.word	0xaaaa9ef0
   17244:	3feaaaaa 	.word	0x3feaaaaa
   17248:	fc96473e 	.word	0xfc96473e
   1724c:	3fdfc962 	.word	0x3fdfc962
   17250:	51eb851f 	.word	0x51eb851f
   17254:	3fe51eb8 	.word	0x3fe51eb8
   17258:	9999999a 	.word	0x9999999a
   1725c:	bfe19999 	.word	0xbfe19999
   17260:	aaaa9ef0 	.word	0xaaaa9ef0
   17264:	bfe0aaaa 	.word	0xbfe0aaaa
   17268:	eeeed77a 	.word	0xeeeed77a
   1726c:	bfdeeeee 	.word	0xbfdeeeee

00017270 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   17270:	b480      	push	{r7}
   17272:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   17274:	f242 0320 	movw	r3, #8224	; 0x2020
   17278:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1727c:	2200      	movs	r2, #0
   1727e:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   17280:	f242 0309 	movw	r3, #8201	; 0x2009
   17284:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17288:	2219      	movs	r2, #25
   1728a:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   1728c:	f242 030b 	movw	r3, #8203	; 0x200b
   17290:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17294:	2200      	movs	r2, #0
   17296:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   17298:	f242 030a 	movw	r3, #8202	; 0x200a
   1729c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   172a0:	2208      	movs	r2, #8
   172a2:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   172a4:	f242 0320 	movw	r3, #8224	; 0x2020
   172a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   172ac:	2286      	movs	r2, #134	; 0x86
   172ae:	701a      	strb	r2, [r3, #0]
}
   172b0:	46bd      	mov	sp, r7
   172b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   172b6:	4770      	bx	lr

000172b8 <uart_init_rx>:

void uart_init_rx() {
   172b8:	b480      	push	{r7}
   172ba:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   172bc:	f242 030a 	movw	r3, #8202	; 0x200a
   172c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   172c4:	f242 020a 	movw	r2, #8202	; 0x200a
   172c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   172cc:	7812      	ldrb	r2, [r2, #0]
   172ce:	b2d2      	uxtb	r2, r2
   172d0:	f042 0210 	orr.w	r2, r2, #16
   172d4:	b2d2      	uxtb	r2, r2
   172d6:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   172d8:	f242 030a 	movw	r3, #8202	; 0x200a
   172dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   172e0:	f242 020a 	movw	r2, #8202	; 0x200a
   172e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   172e8:	7812      	ldrb	r2, [r2, #0]
   172ea:	b2d2      	uxtb	r2, r2
   172ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
   172f0:	b2d2      	uxtb	r2, r2
   172f2:	701a      	strb	r2, [r3, #0]
}
   172f4:	46bd      	mov	sp, r7
   172f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   172fa:	4770      	bx	lr

000172fc <uart_transmit>:

void uart_transmit( unsigned char data ) {
   172fc:	b480      	push	{r7}
   172fe:	b083      	sub	sp, #12
   17300:	af00      	add	r7, sp, #0
   17302:	4603      	mov	r3, r0
   17304:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   17306:	f242 030a 	movw	r3, #8202	; 0x200a
   1730a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1730e:	781b      	ldrb	r3, [r3, #0]
   17310:	b2db      	uxtb	r3, r3
   17312:	f003 0340 	and.w	r3, r3, #64	; 0x40
   17316:	2b00      	cmp	r3, #0
   17318:	d028      	beq.n	1736c <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   1731a:	f64c 2391 	movw	r3, #51857	; 0xca91
   1731e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17322:	781b      	ldrb	r3, [r3, #0]
   17324:	b2db      	uxtb	r3, r3
   17326:	461a      	mov	r2, r3
   17328:	f64c 2390 	movw	r3, #51856	; 0xca90
   1732c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17330:	781b      	ldrb	r3, [r3, #0]
   17332:	3301      	adds	r3, #1
   17334:	429a      	cmp	r2, r3
   17336:	d100      	bne.n	1733a <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   17338:	e02c      	b.n	17394 <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   1733a:	f64c 2390 	movw	r3, #51856	; 0xca90
   1733e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17342:	781b      	ldrb	r3, [r3, #0]
   17344:	461a      	mov	r2, r3
   17346:	f64c 2394 	movw	r3, #51860	; 0xca94
   1734a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1734e:	79f9      	ldrb	r1, [r7, #7]
   17350:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   17352:	f64c 2390 	movw	r3, #51856	; 0xca90
   17356:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1735a:	781b      	ldrb	r3, [r3, #0]
   1735c:	3301      	adds	r3, #1
   1735e:	b2da      	uxtb	r2, r3
   17360:	f64c 2390 	movw	r3, #51856	; 0xca90
   17364:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17368:	701a      	strb	r2, [r3, #0]
   1736a:	e013      	b.n	17394 <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   1736c:	f242 030c 	movw	r3, #8204	; 0x200c
   17370:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17374:	79fa      	ldrb	r2, [r7, #7]
   17376:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   17378:	f242 030a 	movw	r3, #8202	; 0x200a
   1737c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17380:	f242 020a 	movw	r2, #8202	; 0x200a
   17384:	f2c2 0200 	movt	r2, #8192	; 0x2000
   17388:	7812      	ldrb	r2, [r2, #0]
   1738a:	b2d2      	uxtb	r2, r2
   1738c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   17390:	b2d2      	uxtb	r2, r2
   17392:	701a      	strb	r2, [r3, #0]
  }
}
   17394:	370c      	adds	r7, #12
   17396:	46bd      	mov	sp, r7
   17398:	f85d 7b04 	ldr.w	r7, [sp], #4
   1739c:	4770      	bx	lr
   1739e:	bf00      	nop

000173a0 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   173a0:	b590      	push	{r4, r7, lr}
   173a2:	b089      	sub	sp, #36	; 0x24
   173a4:	af00      	add	r7, sp, #0
   173a6:	4603      	mov	r3, r0
   173a8:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   173aa:	f648 432c 	movw	r3, #35884	; 0x8c2c
   173ae:	f2c0 0301 	movt	r3, #1
   173b2:	f107 040c 	add.w	r4, r7, #12
   173b6:	6818      	ldr	r0, [r3, #0]
   173b8:	6859      	ldr	r1, [r3, #4]
   173ba:	689a      	ldr	r2, [r3, #8]
   173bc:	68db      	ldr	r3, [r3, #12]
   173be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   173c0:	79fb      	ldrb	r3, [r7, #7]
   173c2:	091b      	lsrs	r3, r3, #4
   173c4:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   173c6:	79fb      	ldrb	r3, [r7, #7]
   173c8:	f003 030f 	and.w	r3, r3, #15
   173cc:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   173ce:	230f      	movs	r3, #15
   173d0:	77fb      	strb	r3, [r7, #31]
        low = 15;
   173d2:	230f      	movs	r3, #15
   173d4:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   173d6:	7ffb      	ldrb	r3, [r7, #31]
   173d8:	f107 0220 	add.w	r2, r7, #32
   173dc:	4413      	add	r3, r2
   173de:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   173e2:	4618      	mov	r0, r3
   173e4:	f7ff ff8a 	bl	172fc <uart_transmit>
  uart_transmit(hex[low]);
   173e8:	7fbb      	ldrb	r3, [r7, #30]
   173ea:	f107 0220 	add.w	r2, r7, #32
   173ee:	4413      	add	r3, r2
   173f0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   173f4:	4618      	mov	r0, r3
   173f6:	f7ff ff81 	bl	172fc <uart_transmit>
} 
   173fa:	3724      	adds	r7, #36	; 0x24
   173fc:	46bd      	mov	sp, r7
   173fe:	bd90      	pop	{r4, r7, pc}

00017400 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   17400:	b580      	push	{r7, lr}
   17402:	b084      	sub	sp, #16
   17404:	af00      	add	r7, sp, #0
   17406:	4603      	mov	r3, r0
   17408:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   1740a:	88fb      	ldrh	r3, [r7, #6]
   1740c:	0a1b      	lsrs	r3, r3, #8
   1740e:	b29b      	uxth	r3, r3
   17410:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   17412:	88fb      	ldrh	r3, [r7, #6]
   17414:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   17416:	7bfb      	ldrb	r3, [r7, #15]
   17418:	4618      	mov	r0, r3
   1741a:	f7ff ffc1 	bl	173a0 <uart_print_hex>
  uart_print_hex(low);
   1741e:	7bbb      	ldrb	r3, [r7, #14]
   17420:	4618      	mov	r0, r3
   17422:	f7ff ffbd 	bl	173a0 <uart_print_hex>
}
   17426:	3710      	adds	r7, #16
   17428:	46bd      	mov	sp, r7
   1742a:	bd80      	pop	{r7, pc}

0001742c <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   1742c:	b580      	push	{r7, lr}
   1742e:	b084      	sub	sp, #16
   17430:	af00      	add	r7, sp, #0
   17432:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   17434:	2300      	movs	r3, #0
   17436:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   17438:	e009      	b.n	1744e <uart_print_string+0x22>
    uart_transmit(s[i]);
   1743a:	7bfb      	ldrb	r3, [r7, #15]
   1743c:	687a      	ldr	r2, [r7, #4]
   1743e:	4413      	add	r3, r2
   17440:	781b      	ldrb	r3, [r3, #0]
   17442:	4618      	mov	r0, r3
   17444:	f7ff ff5a 	bl	172fc <uart_transmit>
    i++;
   17448:	7bfb      	ldrb	r3, [r7, #15]
   1744a:	3301      	adds	r3, #1
   1744c:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   1744e:	7bfb      	ldrb	r3, [r7, #15]
   17450:	687a      	ldr	r2, [r7, #4]
   17452:	4413      	add	r3, r2
   17454:	781b      	ldrb	r3, [r3, #0]
   17456:	2b00      	cmp	r3, #0
   17458:	d1ef      	bne.n	1743a <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   1745a:	3710      	adds	r7, #16
   1745c:	46bd      	mov	sp, r7
   1745e:	bd80      	pop	{r7, pc}

00017460 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   17460:	b480      	push	{r7}
   17462:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   17464:	f64c 2390 	movw	r3, #51856	; 0xca90
   17468:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1746c:	781a      	ldrb	r2, [r3, #0]
   1746e:	f64c 2391 	movw	r3, #51857	; 0xca91
   17472:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17476:	781b      	ldrb	r3, [r3, #0]
   17478:	b2db      	uxtb	r3, r3
   1747a:	429a      	cmp	r2, r3
   1747c:	d10e      	bne.n	1749c <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   1747e:	f242 030a 	movw	r3, #8202	; 0x200a
   17482:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17486:	f242 020a 	movw	r2, #8202	; 0x200a
   1748a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1748e:	7812      	ldrb	r2, [r2, #0]
   17490:	b2d2      	uxtb	r2, r2
   17492:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   17496:	b2d2      	uxtb	r2, r2
   17498:	701a      	strb	r2, [r3, #0]
   1749a:	e01d      	b.n	174d8 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   1749c:	f242 030c 	movw	r3, #8204	; 0x200c
   174a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   174a4:	f64c 2291 	movw	r2, #51857	; 0xca91
   174a8:	f2c2 0204 	movt	r2, #8196	; 0x2004
   174ac:	7812      	ldrb	r2, [r2, #0]
   174ae:	b2d2      	uxtb	r2, r2
   174b0:	4611      	mov	r1, r2
   174b2:	f64c 2294 	movw	r2, #51860	; 0xca94
   174b6:	f2c2 0204 	movt	r2, #8196	; 0x2004
   174ba:	5c52      	ldrb	r2, [r2, r1]
   174bc:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   174be:	f64c 2391 	movw	r3, #51857	; 0xca91
   174c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   174c6:	781b      	ldrb	r3, [r3, #0]
   174c8:	b2db      	uxtb	r3, r3
   174ca:	3301      	adds	r3, #1
   174cc:	b2da      	uxtb	r2, r3
   174ce:	f64c 2391 	movw	r3, #51857	; 0xca91
   174d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   174d6:	701a      	strb	r2, [r3, #0]
  }
}
   174d8:	46bd      	mov	sp, r7
   174da:	f85d 7b04 	ldr.w	r7, [sp], #4
   174de:	4770      	bx	lr

000174e0 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   174e0:	b580      	push	{r7, lr}
   174e2:	b082      	sub	sp, #8
   174e4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   174e6:	2010      	movs	r0, #16
   174e8:	2101      	movs	r1, #1
   174ea:	f7e9 fc69 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   174ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   174f2:	f2c4 0001 	movt	r0, #16385	; 0x4001
   174f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   174fa:	2201      	movs	r2, #1
   174fc:	f7e9 ff70 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   17500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   17504:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   17506:	2310      	movs	r3, #16
   17508:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   1750a:	2303      	movs	r3, #3
   1750c:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   1750e:	1d3b      	adds	r3, r7, #4
   17510:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   17514:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17518:	4619      	mov	r1, r3
   1751a:	f7e9 fe25 	bl	1168 <GPIO_Init>
}
   1751e:	3708      	adds	r7, #8
   17520:	46bd      	mov	sp, r7
   17522:	bd80      	pop	{r7, pc}

00017524 <init_button>:

void init_button(void)
{
   17524:	b580      	push	{r7, lr}
   17526:	b082      	sub	sp, #8
   17528:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   1752a:	2004      	movs	r0, #4
   1752c:	2101      	movs	r1, #1
   1752e:	f7e9 fc47 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   17532:	2301      	movs	r3, #1
   17534:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   17536:	2304      	movs	r3, #4
   17538:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   1753a:	2303      	movs	r3, #3
   1753c:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   1753e:	1d3b      	adds	r3, r7, #4
   17540:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   17544:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17548:	4619      	mov	r1, r3
   1754a:	f7e9 fe0d 	bl	1168 <GPIO_Init>
}
   1754e:	3708      	adds	r7, #8
   17550:	46bd      	mov	sp, r7
   17552:	bd80      	pop	{r7, pc}

00017554 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   17554:	b580      	push	{r7, lr}
   17556:	b084      	sub	sp, #16
   17558:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   1755a:	2001      	movs	r0, #1
   1755c:	2101      	movs	r1, #1
   1755e:	f7e9 fc2f 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   17562:	2000      	movs	r0, #0
   17564:	2100      	movs	r1, #0
   17566:	f7ea f833 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   1756a:	2301      	movs	r3, #1
   1756c:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   1756e:	2300      	movs	r3, #0
   17570:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   17572:	2308      	movs	r3, #8
   17574:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   17576:	2301      	movs	r3, #1
   17578:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   1757a:	f107 0308 	add.w	r3, r7, #8
   1757e:	4618      	mov	r0, r3
   17580:	f7ea fd2c 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   17584:	2306      	movs	r3, #6
   17586:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   17588:	230f      	movs	r3, #15
   1758a:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   1758c:	230f      	movs	r3, #15
   1758e:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   17590:	2301      	movs	r3, #1
   17592:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   17594:	1d3b      	adds	r3, r7, #4
   17596:	4618      	mov	r0, r3
   17598:	f7ea fe5a 	bl	2250 <NVIC_Init>
}
   1759c:	3710      	adds	r7, #16
   1759e:	46bd      	mov	sp, r7
   175a0:	bd80      	pop	{r7, pc}
   175a2:	bf00      	nop

000175a4 <init_rs232>:

void init_rs232(void)
{
   175a4:	b580      	push	{r7, lr}
   175a6:	b086      	sub	sp, #24
   175a8:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   175aa:	2005      	movs	r0, #5
   175ac:	2101      	movs	r1, #1
   175ae:	f7e9 fc07 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   175b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   175b6:	2101      	movs	r1, #1
   175b8:	f7e9 fc2a 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   175bc:	2308      	movs	r3, #8
   175be:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   175c0:	2304      	movs	r3, #4
   175c2:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   175c4:	1d3b      	adds	r3, r7, #4
   175c6:	f44f 6000 	mov.w	r0, #2048	; 0x800
   175ca:	f2c4 0001 	movt	r0, #16385	; 0x4001
   175ce:	4619      	mov	r1, r3
   175d0:	f7e9 fdca 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   175d4:	2304      	movs	r3, #4
   175d6:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   175d8:	2303      	movs	r3, #3
   175da:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   175dc:	2318      	movs	r3, #24
   175de:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   175e0:	1d3b      	adds	r3, r7, #4
   175e2:	f44f 6000 	mov.w	r0, #2048	; 0x800
   175e6:	f2c4 0001 	movt	r0, #16385	; 0x4001
   175ea:	4619      	mov	r1, r3
   175ec:	f7e9 fdbc 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   175f0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   175f4:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   175f6:	2300      	movs	r3, #0
   175f8:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   175fa:	2300      	movs	r3, #0
   175fc:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   175fe:	2300      	movs	r3, #0
   17600:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   17602:	2300      	movs	r3, #0
   17604:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   17606:	230c      	movs	r3, #12
   17608:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   1760a:	f107 0308 	add.w	r3, r7, #8
   1760e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17612:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17616:	4619      	mov	r1, r3
   17618:	f7ea f88e 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   1761c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17620:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17624:	2101      	movs	r1, #1
   17626:	f7ea f9a5 	bl	1974 <USART_Cmd>
}
   1762a:	3718      	adds	r7, #24
   1762c:	46bd      	mov	sp, r7
   1762e:	bd80      	pop	{r7, pc}

00017630 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   17630:	b580      	push	{r7, lr}
   17632:	b082      	sub	sp, #8
   17634:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   17636:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1763a:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1763e:	f240 7127 	movw	r1, #1831	; 0x727
   17642:	2200      	movs	r2, #0
   17644:	f7ea f9b6 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   17648:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1764c:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17650:	f240 5125 	movw	r1, #1317	; 0x525
   17654:	2201      	movs	r2, #1
   17656:	f7ea f9ad 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   1765a:	2326      	movs	r3, #38	; 0x26
   1765c:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   1765e:	2300      	movs	r3, #0
   17660:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   17662:	2301      	movs	r3, #1
   17664:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   17666:	1d3b      	adds	r3, r7, #4
   17668:	4618      	mov	r0, r3
   1766a:	f7ea fdf1 	bl	2250 <NVIC_Init>
}
   1766e:	3708      	adds	r7, #8
   17670:	46bd      	mov	sp, r7
   17672:	bd80      	pop	{r7, pc}

00017674 <enable_rs232>:

void enable_rs232(void)
{
   17674:	b580      	push	{r7, lr}
   17676:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   17678:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1767c:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17680:	2101      	movs	r1, #1
   17682:	f7ea f977 	bl	1974 <USART_Cmd>
}
   17686:	bd80      	pop	{r7, pc}

00017688 <send_byte>:

void send_byte(uint8_t b)
{
   17688:	b580      	push	{r7, lr}
   1768a:	b082      	sub	sp, #8
   1768c:	af00      	add	r7, sp, #0
   1768e:	4603      	mov	r3, r0
   17690:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   17692:	bf00      	nop
   17694:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17698:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1769c:	2180      	movs	r1, #128	; 0x80
   1769e:	f7ea fbd5 	bl	1e4c <USART_GetFlagStatus>
   176a2:	4603      	mov	r3, r0
   176a4:	2b00      	cmp	r3, #0
   176a6:	d0f5      	beq.n	17694 <send_byte+0xc>
    
    GPIOC->ODR ^= 0x00001000;
   176a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   176ac:	f2c4 0301 	movt	r3, #16385	; 0x4001
   176b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   176b4:	f2c4 0201 	movt	r2, #16385	; 0x4001
   176b8:	68d2      	ldr	r2, [r2, #12]
   176ba:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   176be:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   176c0:	79fb      	ldrb	r3, [r7, #7]
   176c2:	b29b      	uxth	r3, r3
   176c4:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   176c8:	f2c4 0000 	movt	r0, #16384	; 0x4000
   176cc:	4619      	mov	r1, r3
   176ce:	f7ea fa71 	bl	1bb4 <USART_SendData>
}
   176d2:	3708      	adds	r7, #8
   176d4:	46bd      	mov	sp, r7
   176d6:	bd80      	pop	{r7, pc}

000176d8 <send_num>:
/**
 *  can print a num which is smaller than 10
 */

void send_num(uint8_t b)
{
   176d8:	b580      	push	{r7, lr}
   176da:	b082      	sub	sp, #8
   176dc:	af00      	add	r7, sp, #0
   176de:	4603      	mov	r3, r0
   176e0:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   176e2:	79fb      	ldrb	r3, [r7, #7]
   176e4:	3330      	adds	r3, #48	; 0x30
   176e6:	b2db      	uxtb	r3, r3
   176e8:	4618      	mov	r0, r3
   176ea:	f7ff ffcd 	bl	17688 <send_byte>
}
   176ee:	3708      	adds	r7, #8
   176f0:	46bd      	mov	sp, r7
   176f2:	bd80      	pop	{r7, pc}

000176f4 <vPrintString>:
 * print a string
 *
 * */

void vPrintString( const char * string)
{
   176f4:	b580      	push	{r7, lr}
   176f6:	b084      	sub	sp, #16
   176f8:	af00      	add	r7, sp, #0
   176fa:	6078      	str	r0, [r7, #4]
    int i = 0;
   176fc:	2300      	movs	r3, #0
   176fe:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   17700:	e009      	b.n	17716 <vPrintString+0x22>
    {
        send_byte(string[i]);
   17702:	68fb      	ldr	r3, [r7, #12]
   17704:	687a      	ldr	r2, [r7, #4]
   17706:	4413      	add	r3, r2
   17708:	781b      	ldrb	r3, [r3, #0]
   1770a:	4618      	mov	r0, r3
   1770c:	f7ff ffbc 	bl	17688 <send_byte>
        i++;
   17710:	68fb      	ldr	r3, [r7, #12]
   17712:	3301      	adds	r3, #1
   17714:	60fb      	str	r3, [r7, #12]
 * */

void vPrintString( const char * string)
{
    int i = 0;
    while(string[i] != '\0')
   17716:	68fb      	ldr	r3, [r7, #12]
   17718:	687a      	ldr	r2, [r7, #4]
   1771a:	4413      	add	r3, r2
   1771c:	781b      	ldrb	r3, [r3, #0]
   1771e:	2b00      	cmp	r3, #0
   17720:	d1ef      	bne.n	17702 <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   17722:	3710      	adds	r7, #16
   17724:	46bd      	mov	sp, r7
   17726:	bd80      	pop	{r7, pc}

00017728 <vPrintNumber>:
/*
 * print a number which is less than 10
 *
 * */
void vPrintNumber( const long c_num)
{
   17728:	b580      	push	{r7, lr}
   1772a:	b08a      	sub	sp, #40	; 0x28
   1772c:	af00      	add	r7, sp, #0
   1772e:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
   17730:	2300      	movs	r3, #0
   17732:	623b      	str	r3, [r7, #32]
    long num = c_num;
   17734:	687b      	ldr	r3, [r7, #4]
   17736:	61fb      	str	r3, [r7, #28]

    if(num == 0)
   17738:	69fb      	ldr	r3, [r7, #28]
   1773a:	2b00      	cmp	r3, #0
   1773c:	d106      	bne.n	1774c <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   1773e:	f648 403c 	movw	r0, #35900	; 0x8c3c
   17742:	f2c0 0001 	movt	r0, #1
   17746:	f7ff ffd5 	bl	176f4 <vPrintString>
   1774a:	e062      	b.n	17812 <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num  )
   1774c:	e024      	b.n	17798 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   1774e:	69f9      	ldr	r1, [r7, #28]
   17750:	f246 6367 	movw	r3, #26215	; 0x6667
   17754:	f2c6 6366 	movt	r3, #26214	; 0x6666
   17758:	fb83 2301 	smull	r2, r3, r3, r1
   1775c:	109a      	asrs	r2, r3, #2
   1775e:	17cb      	asrs	r3, r1, #31
   17760:	1ad2      	subs	r2, r2, r3
   17762:	4613      	mov	r3, r2
   17764:	009b      	lsls	r3, r3, #2
   17766:	4413      	add	r3, r2
   17768:	005b      	lsls	r3, r3, #1
   1776a:	1aca      	subs	r2, r1, r3
   1776c:	b2d3      	uxtb	r3, r2
   1776e:	3330      	adds	r3, #48	; 0x30
   17770:	b2da      	uxtb	r2, r3
   17772:	f107 010c 	add.w	r1, r7, #12
   17776:	6a3b      	ldr	r3, [r7, #32]
   17778:	440b      	add	r3, r1
   1777a:	701a      	strb	r2, [r3, #0]
            count ++;
   1777c:	6a3b      	ldr	r3, [r7, #32]
   1777e:	3301      	adds	r3, #1
   17780:	623b      	str	r3, [r7, #32]
            num /= 10;
   17782:	69fa      	ldr	r2, [r7, #28]
   17784:	f246 6367 	movw	r3, #26215	; 0x6667
   17788:	f2c6 6366 	movt	r3, #26214	; 0x6666
   1778c:	fb83 1302 	smull	r1, r3, r3, r2
   17790:	1099      	asrs	r1, r3, #2
   17792:	17d3      	asrs	r3, r2, #31
   17794:	1acb      	subs	r3, r1, r3
   17796:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num  )
   17798:	69fb      	ldr	r3, [r7, #28]
   1779a:	2b00      	cmp	r3, #0
   1779c:	d1d7      	bne.n	1774e <vPrintNumber+0x26>
            time[count] = num%10 +'0';
            count ++;
            num /= 10;

        }
        time[count] = '\0';
   1779e:	f107 020c 	add.w	r2, r7, #12
   177a2:	6a3b      	ldr	r3, [r7, #32]
   177a4:	4413      	add	r3, r2
   177a6:	2200      	movs	r2, #0
   177a8:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i )
   177aa:	2300      	movs	r3, #0
   177ac:	627b      	str	r3, [r7, #36]	; 0x24
   177ae:	e020      	b.n	177f2 <vPrintNumber+0xca>
        {
            tmp = time[i];
   177b0:	f107 020c 	add.w	r2, r7, #12
   177b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   177b6:	4413      	add	r3, r2
   177b8:	781b      	ldrb	r3, [r3, #0]
   177ba:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
   177bc:	6a3a      	ldr	r2, [r7, #32]
   177be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   177c0:	1ad3      	subs	r3, r2, r3
   177c2:	3b01      	subs	r3, #1
   177c4:	f107 0228 	add.w	r2, r7, #40	; 0x28
   177c8:	4413      	add	r3, r2
   177ca:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
   177ce:	f107 010c 	add.w	r1, r7, #12
   177d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   177d4:	440b      	add	r3, r1
   177d6:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   177d8:	6a3a      	ldr	r2, [r7, #32]
   177da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   177dc:	1ad3      	subs	r3, r2, r3
   177de:	3b01      	subs	r3, #1
   177e0:	f107 0128 	add.w	r1, r7, #40	; 0x28
   177e4:	440b      	add	r3, r1
   177e6:	7efa      	ldrb	r2, [r7, #27]
   177e8:	f803 2c1c 	strb.w	r2, [r3, #-28]

        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i )
   177ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   177ee:	3301      	adds	r3, #1
   177f0:	627b      	str	r3, [r7, #36]	; 0x24
   177f2:	6a3b      	ldr	r3, [r7, #32]
   177f4:	085a      	lsrs	r2, r3, #1
   177f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   177f8:	429a      	cmp	r2, r3
   177fa:	d8d9      	bhi.n	177b0 <vPrintNumber+0x88>
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;

        }
        vPrintString(time);
   177fc:	f107 030c 	add.w	r3, r7, #12
   17800:	4618      	mov	r0, r3
   17802:	f7ff ff77 	bl	176f4 <vPrintString>
        vPrintString("\n\r");
   17806:	f648 4040 	movw	r0, #35904	; 0x8c40
   1780a:	f2c0 0001 	movt	r0, #1
   1780e:	f7ff ff71 	bl	176f4 <vPrintString>
    }
}
   17812:	3728      	adds	r7, #40	; 0x28
   17814:	46bd      	mov	sp, r7
   17816:	bd80      	pop	{r7, pc}

00017818 <vStartTask>:
extern portBASE_TYPE xSensorOfTask[NUMBEROFTASK];
extern portBASE_TYPE xActuatorOfTask[NUMBEROFTASK];

// init program to start all task when system init
void vStartTask()
{
   17818:	b580      	push	{r7, lr}
   1781a:	b086      	sub	sp, #24
   1781c:	af02      	add	r7, sp, #8
    portBASE_TYPE i;
    xEventHandle pxEvent;
    struct eventData null_data;
    for( i = 0; i < NUMBEROFTASK; ++i )
   1781e:	2300      	movs	r3, #0
   17820:	60fb      	str	r3, [r7, #12]
   17822:	e020      	b.n	17866 <vStartTask+0x4e>
    {
        pxEvent = pxEventCreate(xActuatorOfTask[i], xPeriodOfTask[i], xPeriodOfTask[i], null_data);
   17824:	f240 0390 	movw	r3, #144	; 0x90
   17828:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1782c:	68fa      	ldr	r2, [r7, #12]
   1782e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   17832:	f240 0328 	movw	r3, #40	; 0x28
   17836:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1783a:	68fa      	ldr	r2, [r7, #12]
   1783c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   17840:	f240 0328 	movw	r3, #40	; 0x28
   17844:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17848:	68fa      	ldr	r2, [r7, #12]
   1784a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1784e:	687b      	ldr	r3, [r7, #4]
   17850:	9300      	str	r3, [sp, #0]
   17852:	683b      	ldr	r3, [r7, #0]
   17854:	f7eb fafc 	bl	2e50 <pxEventGenericCreate>
   17858:	60b8      	str	r0, [r7, #8]
        vEventSend( pxEvent );   
   1785a:	68b8      	ldr	r0, [r7, #8]
   1785c:	f7eb fe30 	bl	34c0 <vEventGenericSend>
void vStartTask()
{
    portBASE_TYPE i;
    xEventHandle pxEvent;
    struct eventData null_data;
    for( i = 0; i < NUMBEROFTASK; ++i )
   17860:	68fb      	ldr	r3, [r7, #12]
   17862:	3301      	adds	r3, #1
   17864:	60fb      	str	r3, [r7, #12]
   17866:	68fb      	ldr	r3, [r7, #12]
   17868:	2b0c      	cmp	r3, #12
   1786a:	dddb      	ble.n	17824 <vStartTask+0xc>
    {
        pxEvent = pxEventCreate(xActuatorOfTask[i], xPeriodOfTask[i], xPeriodOfTask[i], null_data);
        vEventSend( pxEvent );   
    }
}
   1786c:	3710      	adds	r7, #16
   1786e:	46bd      	mov	sp, r7
   17870:	bd80      	pop	{r7, pc}
   17872:	bf00      	nop

00017874 <main>:

#define SERVANT_STACK_SIZE 128 
int main(void)
{
   17874:	b580      	push	{r7, lr}
   17876:	b086      	sub	sp, #24
   17878:	af04      	add	r7, sp, #16
    init_led();
   1787a:	f7ff fe31 	bl	174e0 <init_led>
    init_rs232();
   1787e:	f7ff fe91 	bl	175a4 <init_rs232>
    enable_rs232_interrupts();
   17882:	f7ff fed5 	bl	17630 <enable_rs232_interrupts>
    enable_rs232();
   17886:	f7ff fef5 	bl	17674 <enable_rs232>
    vSemaphoreInitialise();
   1788a:	f7eb fe81 	bl	3590 <vSemaphoreInitialise>
    vContextInit();
   1788e:	f7eb febf 	bl	3610 <vContextInit>
    vInitialiseEventLists();  
   17892:	f7eb f8f5 	bl	2a80 <vInitialiseEventLists>
    vStartTask();
   17896:	f7ff ffbf 	bl	17818 <vStartTask>
    PapabenchInit();
   1789a:	f7ec fa8f 	bl	3dbc <PapabenchInit>
    portBASE_TYPE i,j;
    portBASE_TYPE flag = 0;
   1789e:	2300      	movs	r3, #0
   178a0:	607b      	str	r3, [r7, #4]

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 1, &xTaskOfHandle[0]);
   178a2:	2301      	movs	r3, #1
   178a4:	9300      	str	r3, [sp, #0]
   178a6:	f64c 3394 	movw	r3, #52116	; 0xcb94
   178aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   178ae:	9301      	str	r3, [sp, #4]
   178b0:	2300      	movs	r3, #0
   178b2:	9302      	str	r3, [sp, #8]
   178b4:	2300      	movs	r3, #0
   178b6:	9303      	str	r3, [sp, #12]
   178b8:	f643 40dd 	movw	r0, #15581	; 0x3cdd
   178bc:	f2c0 0000 	movt	r0, #0
   178c0:	f648 4144 	movw	r1, #35908	; 0x8c44
   178c4:	f2c0 0101 	movt	r1, #1
   178c8:	2280      	movs	r2, #128	; 0x80
   178ca:	2300      	movs	r3, #0
   178cc:	f7ed f91a 	bl	4b04 <xTaskGenericCreate>
    xTaskCreate( vSensor, "I-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 4, &xTaskOfHandle[1]);
   178d0:	2304      	movs	r3, #4
   178d2:	9300      	str	r3, [sp, #0]
   178d4:	4b25      	ldr	r3, [pc, #148]	; (1796c <main+0xf8>)
   178d6:	9301      	str	r3, [sp, #4]
   178d8:	2300      	movs	r3, #0
   178da:	9302      	str	r3, [sp, #8]
   178dc:	2300      	movs	r3, #0
   178de:	9303      	str	r3, [sp, #12]
   178e0:	f643 00f5 	movw	r0, #14581	; 0x38f5
   178e4:	f2c0 0000 	movt	r0, #0
   178e8:	f648 4150 	movw	r1, #35920	; 0x8c50
   178ec:	f2c0 0101 	movt	r1, #1
   178f0:	2280      	movs	r2, #128	; 0x80
   178f2:	2300      	movs	r3, #0
   178f4:	f7ed f906 	bl	4b04 <xTaskGenericCreate>
    xTaskCreate( vServant, "C-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 2, &xTaskOfHandle[2]);
   178f8:	2302      	movs	r3, #2
   178fa:	9300      	str	r3, [sp, #0]
   178fc:	4b1c      	ldr	r3, [pc, #112]	; (17970 <main+0xfc>)
   178fe:	9301      	str	r3, [sp, #4]
   17900:	2300      	movs	r3, #0
   17902:	9302      	str	r3, [sp, #8]
   17904:	2300      	movs	r3, #0
   17906:	9303      	str	r3, [sp, #12]
   17908:	f643 2021 	movw	r0, #14881	; 0x3a21
   1790c:	f2c0 0000 	movt	r0, #0
   17910:	f648 415c 	movw	r1, #35932	; 0x8c5c
   17914:	f2c0 0101 	movt	r1, #1
   17918:	2280      	movs	r2, #128	; 0x80
   1791a:	2300      	movs	r3, #0
   1791c:	f7ed f8f2 	bl	4b04 <xTaskGenericCreate>
    xTaskCreate( vActuator, "O-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 3, &xTaskOfHandle[3]);
   17920:	2303      	movs	r3, #3
   17922:	9300      	str	r3, [sp, #0]
   17924:	4b13      	ldr	r3, [pc, #76]	; (17974 <main+0x100>)
   17926:	9301      	str	r3, [sp, #4]
   17928:	2300      	movs	r3, #0
   1792a:	9302      	str	r3, [sp, #8]
   1792c:	2300      	movs	r3, #0
   1792e:	9303      	str	r3, [sp, #12]
   17930:	f643 30bd 	movw	r0, #15293	; 0x3bbd
   17934:	f2c0 0000 	movt	r0, #0
   17938:	f648 4168 	movw	r1, #35944	; 0x8c68
   1793c:	f2c0 0101 	movt	r1, #1
   17940:	2280      	movs	r2, #128	; 0x80
   17942:	2300      	movs	r3, #0
   17944:	f7ed f8de 	bl	4b04 <xTaskGenericCreate>

    xSemaphoreGive(xBinarySemaphore[0]);
   17948:	f241 1320 	movw	r3, #4384	; 0x1120
   1794c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17950:	681b      	ldr	r3, [r3, #0]
   17952:	4618      	mov	r0, r3
   17954:	2100      	movs	r1, #0
   17956:	2200      	movs	r2, #0
   17958:	2300      	movs	r3, #0
   1795a:	f7ec fdc1 	bl	44e0 <xQueueGenericSend>
    vTaskStartScheduler();
   1795e:	f7ed fc4f 	bl	5200 <vTaskStartScheduler>

    return 0;
   17962:	2300      	movs	r3, #0
}
   17964:	4618      	mov	r0, r3
   17966:	3708      	adds	r7, #8
   17968:	46bd      	mov	sp, r7
   1796a:	bd80      	pop	{r7, pc}
   1796c:	2004cb98 	.word	0x2004cb98
   17970:	2004cb9c 	.word	0x2004cb9c
   17974:	2004cba0 	.word	0x2004cba0

00017978 <myTraceCreate>:

void myTraceCreate      (){
   17978:	b480      	push	{r7}
   1797a:	af00      	add	r7, sp, #0
}
   1797c:	46bd      	mov	sp, r7
   1797e:	f85d 7b04 	ldr.w	r7, [sp], #4
   17982:	4770      	bx	lr

00017984 <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   17984:	b480      	push	{r7}
   17986:	af00      	add	r7, sp, #0
}
   17988:	46bd      	mov	sp, r7
   1798a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1798e:	4770      	bx	lr

00017990 <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   17990:	b480      	push	{r7}
   17992:	af00      	add	r7, sp, #0
}
   17994:	46bd      	mov	sp, r7
   17996:	f85d 7b04 	ldr.w	r7, [sp], #4
   1799a:	4770      	bx	lr

0001799c <vApplicationTickHook>:
 /*
 * if there is any task need to be triggered at this time,
 * tick hook function would send semaphore to them.
 * */
void vApplicationTickHook( void )
{
   1799c:	b580      	push	{r7, lr}
   1799e:	af00      	add	r7, sp, #0
    if(xIsExecutableEventArrive())
   179a0:	f7eb f922 	bl	2be8 <xIsExecutableEventArrive>
   179a4:	4603      	mov	r3, r0
   179a6:	2b00      	cmp	r3, #0
   179a8:	d00a      	beq.n	179c0 <vApplicationTickHook+0x24>
       xSemaphoreGive( xBinarySemaphore[0] ); 
   179aa:	f241 1320 	movw	r3, #4384	; 0x1120
   179ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
   179b2:	681b      	ldr	r3, [r3, #0]
   179b4:	4618      	mov	r0, r3
   179b6:	2100      	movs	r1, #0
   179b8:	2200      	movs	r2, #0
   179ba:	2300      	movs	r3, #0
   179bc:	f7ec fd90 	bl	44e0 <xQueueGenericSend>
}
   179c0:	bd80      	pop	{r7, pc}
   179c2:	bf00      	nop

000179c4 <__aeabi_drsub>:
   179c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   179c8:	e002      	b.n	179d0 <__adddf3>
   179ca:	bf00      	nop

000179cc <__aeabi_dsub>:
   179cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000179d0 <__adddf3>:
   179d0:	b530      	push	{r4, r5, lr}
   179d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   179d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   179da:	ea94 0f05 	teq	r4, r5
   179de:	bf08      	it	eq
   179e0:	ea90 0f02 	teqeq	r0, r2
   179e4:	bf1f      	itttt	ne
   179e6:	ea54 0c00 	orrsne.w	ip, r4, r0
   179ea:	ea55 0c02 	orrsne.w	ip, r5, r2
   179ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   179f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   179f6:	f000 80e2 	beq.w	17bbe <__adddf3+0x1ee>
   179fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   179fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   17a02:	bfb8      	it	lt
   17a04:	426d      	neglt	r5, r5
   17a06:	dd0c      	ble.n	17a22 <__adddf3+0x52>
   17a08:	442c      	add	r4, r5
   17a0a:	ea80 0202 	eor.w	r2, r0, r2
   17a0e:	ea81 0303 	eor.w	r3, r1, r3
   17a12:	ea82 0000 	eor.w	r0, r2, r0
   17a16:	ea83 0101 	eor.w	r1, r3, r1
   17a1a:	ea80 0202 	eor.w	r2, r0, r2
   17a1e:	ea81 0303 	eor.w	r3, r1, r3
   17a22:	2d36      	cmp	r5, #54	; 0x36
   17a24:	bf88      	it	hi
   17a26:	bd30      	pophi	{r4, r5, pc}
   17a28:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   17a2c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17a30:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   17a34:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   17a38:	d002      	beq.n	17a40 <__adddf3+0x70>
   17a3a:	4240      	negs	r0, r0
   17a3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17a40:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   17a44:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17a48:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   17a4c:	d002      	beq.n	17a54 <__adddf3+0x84>
   17a4e:	4252      	negs	r2, r2
   17a50:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   17a54:	ea94 0f05 	teq	r4, r5
   17a58:	f000 80a7 	beq.w	17baa <__adddf3+0x1da>
   17a5c:	f1a4 0401 	sub.w	r4, r4, #1
   17a60:	f1d5 0e20 	rsbs	lr, r5, #32
   17a64:	db0d      	blt.n	17a82 <__adddf3+0xb2>
   17a66:	fa02 fc0e 	lsl.w	ip, r2, lr
   17a6a:	fa22 f205 	lsr.w	r2, r2, r5
   17a6e:	1880      	adds	r0, r0, r2
   17a70:	f141 0100 	adc.w	r1, r1, #0
   17a74:	fa03 f20e 	lsl.w	r2, r3, lr
   17a78:	1880      	adds	r0, r0, r2
   17a7a:	fa43 f305 	asr.w	r3, r3, r5
   17a7e:	4159      	adcs	r1, r3
   17a80:	e00e      	b.n	17aa0 <__adddf3+0xd0>
   17a82:	f1a5 0520 	sub.w	r5, r5, #32
   17a86:	f10e 0e20 	add.w	lr, lr, #32
   17a8a:	2a01      	cmp	r2, #1
   17a8c:	fa03 fc0e 	lsl.w	ip, r3, lr
   17a90:	bf28      	it	cs
   17a92:	f04c 0c02 	orrcs.w	ip, ip, #2
   17a96:	fa43 f305 	asr.w	r3, r3, r5
   17a9a:	18c0      	adds	r0, r0, r3
   17a9c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   17aa0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17aa4:	d507      	bpl.n	17ab6 <__adddf3+0xe6>
   17aa6:	f04f 0e00 	mov.w	lr, #0
   17aaa:	f1dc 0c00 	rsbs	ip, ip, #0
   17aae:	eb7e 0000 	sbcs.w	r0, lr, r0
   17ab2:	eb6e 0101 	sbc.w	r1, lr, r1
   17ab6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   17aba:	d31b      	bcc.n	17af4 <__adddf3+0x124>
   17abc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   17ac0:	d30c      	bcc.n	17adc <__adddf3+0x10c>
   17ac2:	0849      	lsrs	r1, r1, #1
   17ac4:	ea5f 0030 	movs.w	r0, r0, rrx
   17ac8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   17acc:	f104 0401 	add.w	r4, r4, #1
   17ad0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   17ad4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   17ad8:	f080 809a 	bcs.w	17c10 <__adddf3+0x240>
   17adc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   17ae0:	bf08      	it	eq
   17ae2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17ae6:	f150 0000 	adcs.w	r0, r0, #0
   17aea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17aee:	ea41 0105 	orr.w	r1, r1, r5
   17af2:	bd30      	pop	{r4, r5, pc}
   17af4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   17af8:	4140      	adcs	r0, r0
   17afa:	eb41 0101 	adc.w	r1, r1, r1
   17afe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17b02:	f1a4 0401 	sub.w	r4, r4, #1
   17b06:	d1e9      	bne.n	17adc <__adddf3+0x10c>
   17b08:	f091 0f00 	teq	r1, #0
   17b0c:	bf04      	itt	eq
   17b0e:	4601      	moveq	r1, r0
   17b10:	2000      	moveq	r0, #0
   17b12:	fab1 f381 	clz	r3, r1
   17b16:	bf08      	it	eq
   17b18:	3320      	addeq	r3, #32
   17b1a:	f1a3 030b 	sub.w	r3, r3, #11
   17b1e:	f1b3 0220 	subs.w	r2, r3, #32
   17b22:	da0c      	bge.n	17b3e <__adddf3+0x16e>
   17b24:	320c      	adds	r2, #12
   17b26:	dd08      	ble.n	17b3a <__adddf3+0x16a>
   17b28:	f102 0c14 	add.w	ip, r2, #20
   17b2c:	f1c2 020c 	rsb	r2, r2, #12
   17b30:	fa01 f00c 	lsl.w	r0, r1, ip
   17b34:	fa21 f102 	lsr.w	r1, r1, r2
   17b38:	e00c      	b.n	17b54 <__adddf3+0x184>
   17b3a:	f102 0214 	add.w	r2, r2, #20
   17b3e:	bfd8      	it	le
   17b40:	f1c2 0c20 	rsble	ip, r2, #32
   17b44:	fa01 f102 	lsl.w	r1, r1, r2
   17b48:	fa20 fc0c 	lsr.w	ip, r0, ip
   17b4c:	bfdc      	itt	le
   17b4e:	ea41 010c 	orrle.w	r1, r1, ip
   17b52:	4090      	lslle	r0, r2
   17b54:	1ae4      	subs	r4, r4, r3
   17b56:	bfa2      	ittt	ge
   17b58:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   17b5c:	4329      	orrge	r1, r5
   17b5e:	bd30      	popge	{r4, r5, pc}
   17b60:	ea6f 0404 	mvn.w	r4, r4
   17b64:	3c1f      	subs	r4, #31
   17b66:	da1c      	bge.n	17ba2 <__adddf3+0x1d2>
   17b68:	340c      	adds	r4, #12
   17b6a:	dc0e      	bgt.n	17b8a <__adddf3+0x1ba>
   17b6c:	f104 0414 	add.w	r4, r4, #20
   17b70:	f1c4 0220 	rsb	r2, r4, #32
   17b74:	fa20 f004 	lsr.w	r0, r0, r4
   17b78:	fa01 f302 	lsl.w	r3, r1, r2
   17b7c:	ea40 0003 	orr.w	r0, r0, r3
   17b80:	fa21 f304 	lsr.w	r3, r1, r4
   17b84:	ea45 0103 	orr.w	r1, r5, r3
   17b88:	bd30      	pop	{r4, r5, pc}
   17b8a:	f1c4 040c 	rsb	r4, r4, #12
   17b8e:	f1c4 0220 	rsb	r2, r4, #32
   17b92:	fa20 f002 	lsr.w	r0, r0, r2
   17b96:	fa01 f304 	lsl.w	r3, r1, r4
   17b9a:	ea40 0003 	orr.w	r0, r0, r3
   17b9e:	4629      	mov	r1, r5
   17ba0:	bd30      	pop	{r4, r5, pc}
   17ba2:	fa21 f004 	lsr.w	r0, r1, r4
   17ba6:	4629      	mov	r1, r5
   17ba8:	bd30      	pop	{r4, r5, pc}
   17baa:	f094 0f00 	teq	r4, #0
   17bae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   17bb2:	bf06      	itte	eq
   17bb4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   17bb8:	3401      	addeq	r4, #1
   17bba:	3d01      	subne	r5, #1
   17bbc:	e74e      	b.n	17a5c <__adddf3+0x8c>
   17bbe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17bc2:	bf18      	it	ne
   17bc4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   17bc8:	d029      	beq.n	17c1e <__adddf3+0x24e>
   17bca:	ea94 0f05 	teq	r4, r5
   17bce:	bf08      	it	eq
   17bd0:	ea90 0f02 	teqeq	r0, r2
   17bd4:	d005      	beq.n	17be2 <__adddf3+0x212>
   17bd6:	ea54 0c00 	orrs.w	ip, r4, r0
   17bda:	bf04      	itt	eq
   17bdc:	4619      	moveq	r1, r3
   17bde:	4610      	moveq	r0, r2
   17be0:	bd30      	pop	{r4, r5, pc}
   17be2:	ea91 0f03 	teq	r1, r3
   17be6:	bf1e      	ittt	ne
   17be8:	2100      	movne	r1, #0
   17bea:	2000      	movne	r0, #0
   17bec:	bd30      	popne	{r4, r5, pc}
   17bee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   17bf2:	d105      	bne.n	17c00 <__adddf3+0x230>
   17bf4:	0040      	lsls	r0, r0, #1
   17bf6:	4149      	adcs	r1, r1
   17bf8:	bf28      	it	cs
   17bfa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   17bfe:	bd30      	pop	{r4, r5, pc}
   17c00:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   17c04:	bf3c      	itt	cc
   17c06:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   17c0a:	bd30      	popcc	{r4, r5, pc}
   17c0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17c10:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   17c14:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17c18:	f04f 0000 	mov.w	r0, #0
   17c1c:	bd30      	pop	{r4, r5, pc}
   17c1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17c22:	bf1a      	itte	ne
   17c24:	4619      	movne	r1, r3
   17c26:	4610      	movne	r0, r2
   17c28:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   17c2c:	bf1c      	itt	ne
   17c2e:	460b      	movne	r3, r1
   17c30:	4602      	movne	r2, r0
   17c32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17c36:	bf06      	itte	eq
   17c38:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   17c3c:	ea91 0f03 	teqeq	r1, r3
   17c40:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   17c44:	bd30      	pop	{r4, r5, pc}
   17c46:	bf00      	nop

00017c48 <__aeabi_ui2d>:
   17c48:	f090 0f00 	teq	r0, #0
   17c4c:	bf04      	itt	eq
   17c4e:	2100      	moveq	r1, #0
   17c50:	4770      	bxeq	lr
   17c52:	b530      	push	{r4, r5, lr}
   17c54:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17c58:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17c5c:	f04f 0500 	mov.w	r5, #0
   17c60:	f04f 0100 	mov.w	r1, #0
   17c64:	e750      	b.n	17b08 <__adddf3+0x138>
   17c66:	bf00      	nop

00017c68 <__aeabi_i2d>:
   17c68:	f090 0f00 	teq	r0, #0
   17c6c:	bf04      	itt	eq
   17c6e:	2100      	moveq	r1, #0
   17c70:	4770      	bxeq	lr
   17c72:	b530      	push	{r4, r5, lr}
   17c74:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17c78:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17c7c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   17c80:	bf48      	it	mi
   17c82:	4240      	negmi	r0, r0
   17c84:	f04f 0100 	mov.w	r1, #0
   17c88:	e73e      	b.n	17b08 <__adddf3+0x138>
   17c8a:	bf00      	nop

00017c8c <__aeabi_f2d>:
   17c8c:	0042      	lsls	r2, r0, #1
   17c8e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   17c92:	ea4f 0131 	mov.w	r1, r1, rrx
   17c96:	ea4f 7002 	mov.w	r0, r2, lsl #28
   17c9a:	bf1f      	itttt	ne
   17c9c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   17ca0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17ca4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   17ca8:	4770      	bxne	lr
   17caa:	f092 0f00 	teq	r2, #0
   17cae:	bf14      	ite	ne
   17cb0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17cb4:	4770      	bxeq	lr
   17cb6:	b530      	push	{r4, r5, lr}
   17cb8:	f44f 7460 	mov.w	r4, #896	; 0x380
   17cbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17cc0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17cc4:	e720      	b.n	17b08 <__adddf3+0x138>
   17cc6:	bf00      	nop

00017cc8 <__aeabi_ul2d>:
   17cc8:	ea50 0201 	orrs.w	r2, r0, r1
   17ccc:	bf08      	it	eq
   17cce:	4770      	bxeq	lr
   17cd0:	b530      	push	{r4, r5, lr}
   17cd2:	f04f 0500 	mov.w	r5, #0
   17cd6:	e00a      	b.n	17cee <__aeabi_l2d+0x16>

00017cd8 <__aeabi_l2d>:
   17cd8:	ea50 0201 	orrs.w	r2, r0, r1
   17cdc:	bf08      	it	eq
   17cde:	4770      	bxeq	lr
   17ce0:	b530      	push	{r4, r5, lr}
   17ce2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   17ce6:	d502      	bpl.n	17cee <__aeabi_l2d+0x16>
   17ce8:	4240      	negs	r0, r0
   17cea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17cee:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17cf2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17cf6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   17cfa:	f43f aedc 	beq.w	17ab6 <__adddf3+0xe6>
   17cfe:	f04f 0203 	mov.w	r2, #3
   17d02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17d06:	bf18      	it	ne
   17d08:	3203      	addne	r2, #3
   17d0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17d0e:	bf18      	it	ne
   17d10:	3203      	addne	r2, #3
   17d12:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   17d16:	f1c2 0320 	rsb	r3, r2, #32
   17d1a:	fa00 fc03 	lsl.w	ip, r0, r3
   17d1e:	fa20 f002 	lsr.w	r0, r0, r2
   17d22:	fa01 fe03 	lsl.w	lr, r1, r3
   17d26:	ea40 000e 	orr.w	r0, r0, lr
   17d2a:	fa21 f102 	lsr.w	r1, r1, r2
   17d2e:	4414      	add	r4, r2
   17d30:	e6c1      	b.n	17ab6 <__adddf3+0xe6>
   17d32:	bf00      	nop

00017d34 <__aeabi_dmul>:
   17d34:	b570      	push	{r4, r5, r6, lr}
   17d36:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17d3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17d3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17d42:	bf1d      	ittte	ne
   17d44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17d48:	ea94 0f0c 	teqne	r4, ip
   17d4c:	ea95 0f0c 	teqne	r5, ip
   17d50:	f000 f8de 	bleq	17f10 <__aeabi_dmul+0x1dc>
   17d54:	442c      	add	r4, r5
   17d56:	ea81 0603 	eor.w	r6, r1, r3
   17d5a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   17d5e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   17d62:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   17d66:	bf18      	it	ne
   17d68:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   17d6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17d70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   17d74:	d038      	beq.n	17de8 <__aeabi_dmul+0xb4>
   17d76:	fba0 ce02 	umull	ip, lr, r0, r2
   17d7a:	f04f 0500 	mov.w	r5, #0
   17d7e:	fbe1 e502 	umlal	lr, r5, r1, r2
   17d82:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   17d86:	fbe0 e503 	umlal	lr, r5, r0, r3
   17d8a:	f04f 0600 	mov.w	r6, #0
   17d8e:	fbe1 5603 	umlal	r5, r6, r1, r3
   17d92:	f09c 0f00 	teq	ip, #0
   17d96:	bf18      	it	ne
   17d98:	f04e 0e01 	orrne.w	lr, lr, #1
   17d9c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   17da0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   17da4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   17da8:	d204      	bcs.n	17db4 <__aeabi_dmul+0x80>
   17daa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   17dae:	416d      	adcs	r5, r5
   17db0:	eb46 0606 	adc.w	r6, r6, r6
   17db4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   17db8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   17dbc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   17dc0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   17dc4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   17dc8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17dcc:	bf88      	it	hi
   17dce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17dd2:	d81e      	bhi.n	17e12 <__aeabi_dmul+0xde>
   17dd4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   17dd8:	bf08      	it	eq
   17dda:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   17dde:	f150 0000 	adcs.w	r0, r0, #0
   17de2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17de6:	bd70      	pop	{r4, r5, r6, pc}
   17de8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   17dec:	ea46 0101 	orr.w	r1, r6, r1
   17df0:	ea40 0002 	orr.w	r0, r0, r2
   17df4:	ea81 0103 	eor.w	r1, r1, r3
   17df8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   17dfc:	bfc2      	ittt	gt
   17dfe:	ebd4 050c 	rsbsgt	r5, r4, ip
   17e02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17e06:	bd70      	popgt	{r4, r5, r6, pc}
   17e08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17e0c:	f04f 0e00 	mov.w	lr, #0
   17e10:	3c01      	subs	r4, #1
   17e12:	f300 80ab 	bgt.w	17f6c <__aeabi_dmul+0x238>
   17e16:	f114 0f36 	cmn.w	r4, #54	; 0x36
   17e1a:	bfde      	ittt	le
   17e1c:	2000      	movle	r0, #0
   17e1e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   17e22:	bd70      	pople	{r4, r5, r6, pc}
   17e24:	f1c4 0400 	rsb	r4, r4, #0
   17e28:	3c20      	subs	r4, #32
   17e2a:	da35      	bge.n	17e98 <__aeabi_dmul+0x164>
   17e2c:	340c      	adds	r4, #12
   17e2e:	dc1b      	bgt.n	17e68 <__aeabi_dmul+0x134>
   17e30:	f104 0414 	add.w	r4, r4, #20
   17e34:	f1c4 0520 	rsb	r5, r4, #32
   17e38:	fa00 f305 	lsl.w	r3, r0, r5
   17e3c:	fa20 f004 	lsr.w	r0, r0, r4
   17e40:	fa01 f205 	lsl.w	r2, r1, r5
   17e44:	ea40 0002 	orr.w	r0, r0, r2
   17e48:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   17e4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17e50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17e54:	fa21 f604 	lsr.w	r6, r1, r4
   17e58:	eb42 0106 	adc.w	r1, r2, r6
   17e5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17e60:	bf08      	it	eq
   17e62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17e66:	bd70      	pop	{r4, r5, r6, pc}
   17e68:	f1c4 040c 	rsb	r4, r4, #12
   17e6c:	f1c4 0520 	rsb	r5, r4, #32
   17e70:	fa00 f304 	lsl.w	r3, r0, r4
   17e74:	fa20 f005 	lsr.w	r0, r0, r5
   17e78:	fa01 f204 	lsl.w	r2, r1, r4
   17e7c:	ea40 0002 	orr.w	r0, r0, r2
   17e80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17e84:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17e88:	f141 0100 	adc.w	r1, r1, #0
   17e8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17e90:	bf08      	it	eq
   17e92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17e96:	bd70      	pop	{r4, r5, r6, pc}
   17e98:	f1c4 0520 	rsb	r5, r4, #32
   17e9c:	fa00 f205 	lsl.w	r2, r0, r5
   17ea0:	ea4e 0e02 	orr.w	lr, lr, r2
   17ea4:	fa20 f304 	lsr.w	r3, r0, r4
   17ea8:	fa01 f205 	lsl.w	r2, r1, r5
   17eac:	ea43 0302 	orr.w	r3, r3, r2
   17eb0:	fa21 f004 	lsr.w	r0, r1, r4
   17eb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17eb8:	fa21 f204 	lsr.w	r2, r1, r4
   17ebc:	ea20 0002 	bic.w	r0, r0, r2
   17ec0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   17ec4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17ec8:	bf08      	it	eq
   17eca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17ece:	bd70      	pop	{r4, r5, r6, pc}
   17ed0:	f094 0f00 	teq	r4, #0
   17ed4:	d10f      	bne.n	17ef6 <__aeabi_dmul+0x1c2>
   17ed6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   17eda:	0040      	lsls	r0, r0, #1
   17edc:	eb41 0101 	adc.w	r1, r1, r1
   17ee0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17ee4:	bf08      	it	eq
   17ee6:	3c01      	subeq	r4, #1
   17ee8:	d0f7      	beq.n	17eda <__aeabi_dmul+0x1a6>
   17eea:	ea41 0106 	orr.w	r1, r1, r6
   17eee:	f095 0f00 	teq	r5, #0
   17ef2:	bf18      	it	ne
   17ef4:	4770      	bxne	lr
   17ef6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   17efa:	0052      	lsls	r2, r2, #1
   17efc:	eb43 0303 	adc.w	r3, r3, r3
   17f00:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   17f04:	bf08      	it	eq
   17f06:	3d01      	subeq	r5, #1
   17f08:	d0f7      	beq.n	17efa <__aeabi_dmul+0x1c6>
   17f0a:	ea43 0306 	orr.w	r3, r3, r6
   17f0e:	4770      	bx	lr
   17f10:	ea94 0f0c 	teq	r4, ip
   17f14:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17f18:	bf18      	it	ne
   17f1a:	ea95 0f0c 	teqne	r5, ip
   17f1e:	d00c      	beq.n	17f3a <__aeabi_dmul+0x206>
   17f20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17f24:	bf18      	it	ne
   17f26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17f2a:	d1d1      	bne.n	17ed0 <__aeabi_dmul+0x19c>
   17f2c:	ea81 0103 	eor.w	r1, r1, r3
   17f30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17f34:	f04f 0000 	mov.w	r0, #0
   17f38:	bd70      	pop	{r4, r5, r6, pc}
   17f3a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17f3e:	bf06      	itte	eq
   17f40:	4610      	moveq	r0, r2
   17f42:	4619      	moveq	r1, r3
   17f44:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17f48:	d019      	beq.n	17f7e <__aeabi_dmul+0x24a>
   17f4a:	ea94 0f0c 	teq	r4, ip
   17f4e:	d102      	bne.n	17f56 <__aeabi_dmul+0x222>
   17f50:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   17f54:	d113      	bne.n	17f7e <__aeabi_dmul+0x24a>
   17f56:	ea95 0f0c 	teq	r5, ip
   17f5a:	d105      	bne.n	17f68 <__aeabi_dmul+0x234>
   17f5c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   17f60:	bf1c      	itt	ne
   17f62:	4610      	movne	r0, r2
   17f64:	4619      	movne	r1, r3
   17f66:	d10a      	bne.n	17f7e <__aeabi_dmul+0x24a>
   17f68:	ea81 0103 	eor.w	r1, r1, r3
   17f6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17f70:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17f74:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17f78:	f04f 0000 	mov.w	r0, #0
   17f7c:	bd70      	pop	{r4, r5, r6, pc}
   17f7e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17f82:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   17f86:	bd70      	pop	{r4, r5, r6, pc}

00017f88 <__aeabi_ddiv>:
   17f88:	b570      	push	{r4, r5, r6, lr}
   17f8a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17f8e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17f92:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17f96:	bf1d      	ittte	ne
   17f98:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17f9c:	ea94 0f0c 	teqne	r4, ip
   17fa0:	ea95 0f0c 	teqne	r5, ip
   17fa4:	f000 f8a7 	bleq	180f6 <__aeabi_ddiv+0x16e>
   17fa8:	eba4 0405 	sub.w	r4, r4, r5
   17fac:	ea81 0e03 	eor.w	lr, r1, r3
   17fb0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17fb4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17fb8:	f000 8088 	beq.w	180cc <__aeabi_ddiv+0x144>
   17fbc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17fc0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   17fc4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   17fc8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   17fcc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   17fd0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   17fd4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   17fd8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   17fdc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   17fe0:	429d      	cmp	r5, r3
   17fe2:	bf08      	it	eq
   17fe4:	4296      	cmpeq	r6, r2
   17fe6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   17fea:	f504 7440 	add.w	r4, r4, #768	; 0x300
   17fee:	d202      	bcs.n	17ff6 <__aeabi_ddiv+0x6e>
   17ff0:	085b      	lsrs	r3, r3, #1
   17ff2:	ea4f 0232 	mov.w	r2, r2, rrx
   17ff6:	1ab6      	subs	r6, r6, r2
   17ff8:	eb65 0503 	sbc.w	r5, r5, r3
   17ffc:	085b      	lsrs	r3, r3, #1
   17ffe:	ea4f 0232 	mov.w	r2, r2, rrx
   18002:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   18006:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1800a:	ebb6 0e02 	subs.w	lr, r6, r2
   1800e:	eb75 0e03 	sbcs.w	lr, r5, r3
   18012:	bf22      	ittt	cs
   18014:	1ab6      	subcs	r6, r6, r2
   18016:	4675      	movcs	r5, lr
   18018:	ea40 000c 	orrcs.w	r0, r0, ip
   1801c:	085b      	lsrs	r3, r3, #1
   1801e:	ea4f 0232 	mov.w	r2, r2, rrx
   18022:	ebb6 0e02 	subs.w	lr, r6, r2
   18026:	eb75 0e03 	sbcs.w	lr, r5, r3
   1802a:	bf22      	ittt	cs
   1802c:	1ab6      	subcs	r6, r6, r2
   1802e:	4675      	movcs	r5, lr
   18030:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   18034:	085b      	lsrs	r3, r3, #1
   18036:	ea4f 0232 	mov.w	r2, r2, rrx
   1803a:	ebb6 0e02 	subs.w	lr, r6, r2
   1803e:	eb75 0e03 	sbcs.w	lr, r5, r3
   18042:	bf22      	ittt	cs
   18044:	1ab6      	subcs	r6, r6, r2
   18046:	4675      	movcs	r5, lr
   18048:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1804c:	085b      	lsrs	r3, r3, #1
   1804e:	ea4f 0232 	mov.w	r2, r2, rrx
   18052:	ebb6 0e02 	subs.w	lr, r6, r2
   18056:	eb75 0e03 	sbcs.w	lr, r5, r3
   1805a:	bf22      	ittt	cs
   1805c:	1ab6      	subcs	r6, r6, r2
   1805e:	4675      	movcs	r5, lr
   18060:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   18064:	ea55 0e06 	orrs.w	lr, r5, r6
   18068:	d018      	beq.n	1809c <__aeabi_ddiv+0x114>
   1806a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1806e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   18072:	ea4f 1606 	mov.w	r6, r6, lsl #4
   18076:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1807a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1807e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   18082:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   18086:	d1c0      	bne.n	1800a <__aeabi_ddiv+0x82>
   18088:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1808c:	d10b      	bne.n	180a6 <__aeabi_ddiv+0x11e>
   1808e:	ea41 0100 	orr.w	r1, r1, r0
   18092:	f04f 0000 	mov.w	r0, #0
   18096:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1809a:	e7b6      	b.n	1800a <__aeabi_ddiv+0x82>
   1809c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   180a0:	bf04      	itt	eq
   180a2:	4301      	orreq	r1, r0
   180a4:	2000      	moveq	r0, #0
   180a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   180aa:	bf88      	it	hi
   180ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   180b0:	f63f aeaf 	bhi.w	17e12 <__aeabi_dmul+0xde>
   180b4:	ebb5 0c03 	subs.w	ip, r5, r3
   180b8:	bf04      	itt	eq
   180ba:	ebb6 0c02 	subseq.w	ip, r6, r2
   180be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   180c2:	f150 0000 	adcs.w	r0, r0, #0
   180c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   180ca:	bd70      	pop	{r4, r5, r6, pc}
   180cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   180d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   180d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   180d8:	bfc2      	ittt	gt
   180da:	ebd4 050c 	rsbsgt	r5, r4, ip
   180de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   180e2:	bd70      	popgt	{r4, r5, r6, pc}
   180e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   180e8:	f04f 0e00 	mov.w	lr, #0
   180ec:	3c01      	subs	r4, #1
   180ee:	e690      	b.n	17e12 <__aeabi_dmul+0xde>
   180f0:	ea45 0e06 	orr.w	lr, r5, r6
   180f4:	e68d      	b.n	17e12 <__aeabi_dmul+0xde>
   180f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   180fa:	ea94 0f0c 	teq	r4, ip
   180fe:	bf08      	it	eq
   18100:	ea95 0f0c 	teqeq	r5, ip
   18104:	f43f af3b 	beq.w	17f7e <__aeabi_dmul+0x24a>
   18108:	ea94 0f0c 	teq	r4, ip
   1810c:	d10a      	bne.n	18124 <__aeabi_ddiv+0x19c>
   1810e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18112:	f47f af34 	bne.w	17f7e <__aeabi_dmul+0x24a>
   18116:	ea95 0f0c 	teq	r5, ip
   1811a:	f47f af25 	bne.w	17f68 <__aeabi_dmul+0x234>
   1811e:	4610      	mov	r0, r2
   18120:	4619      	mov	r1, r3
   18122:	e72c      	b.n	17f7e <__aeabi_dmul+0x24a>
   18124:	ea95 0f0c 	teq	r5, ip
   18128:	d106      	bne.n	18138 <__aeabi_ddiv+0x1b0>
   1812a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1812e:	f43f aefd 	beq.w	17f2c <__aeabi_dmul+0x1f8>
   18132:	4610      	mov	r0, r2
   18134:	4619      	mov	r1, r3
   18136:	e722      	b.n	17f7e <__aeabi_dmul+0x24a>
   18138:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1813c:	bf18      	it	ne
   1813e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18142:	f47f aec5 	bne.w	17ed0 <__aeabi_dmul+0x19c>
   18146:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1814a:	f47f af0d 	bne.w	17f68 <__aeabi_dmul+0x234>
   1814e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   18152:	f47f aeeb 	bne.w	17f2c <__aeabi_dmul+0x1f8>
   18156:	e712      	b.n	17f7e <__aeabi_dmul+0x24a>

00018158 <__gedf2>:
   18158:	f04f 3cff 	mov.w	ip, #4294967295
   1815c:	e006      	b.n	1816c <__cmpdf2+0x4>
   1815e:	bf00      	nop

00018160 <__ledf2>:
   18160:	f04f 0c01 	mov.w	ip, #1
   18164:	e002      	b.n	1816c <__cmpdf2+0x4>
   18166:	bf00      	nop

00018168 <__cmpdf2>:
   18168:	f04f 0c01 	mov.w	ip, #1
   1816c:	f84d cd04 	str.w	ip, [sp, #-4]!
   18170:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   18174:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18178:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1817c:	bf18      	it	ne
   1817e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   18182:	d01b      	beq.n	181bc <__cmpdf2+0x54>
   18184:	b001      	add	sp, #4
   18186:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1818a:	bf0c      	ite	eq
   1818c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   18190:	ea91 0f03 	teqne	r1, r3
   18194:	bf02      	ittt	eq
   18196:	ea90 0f02 	teqeq	r0, r2
   1819a:	2000      	moveq	r0, #0
   1819c:	4770      	bxeq	lr
   1819e:	f110 0f00 	cmn.w	r0, #0
   181a2:	ea91 0f03 	teq	r1, r3
   181a6:	bf58      	it	pl
   181a8:	4299      	cmppl	r1, r3
   181aa:	bf08      	it	eq
   181ac:	4290      	cmpeq	r0, r2
   181ae:	bf2c      	ite	cs
   181b0:	17d8      	asrcs	r0, r3, #31
   181b2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   181b6:	f040 0001 	orr.w	r0, r0, #1
   181ba:	4770      	bx	lr
   181bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   181c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   181c4:	d102      	bne.n	181cc <__cmpdf2+0x64>
   181c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   181ca:	d107      	bne.n	181dc <__cmpdf2+0x74>
   181cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   181d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   181d4:	d1d6      	bne.n	18184 <__cmpdf2+0x1c>
   181d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   181da:	d0d3      	beq.n	18184 <__cmpdf2+0x1c>
   181dc:	f85d 0b04 	ldr.w	r0, [sp], #4
   181e0:	4770      	bx	lr
   181e2:	bf00      	nop

000181e4 <__aeabi_cdrcmple>:
   181e4:	4684      	mov	ip, r0
   181e6:	4610      	mov	r0, r2
   181e8:	4662      	mov	r2, ip
   181ea:	468c      	mov	ip, r1
   181ec:	4619      	mov	r1, r3
   181ee:	4663      	mov	r3, ip
   181f0:	e000      	b.n	181f4 <__aeabi_cdcmpeq>
   181f2:	bf00      	nop

000181f4 <__aeabi_cdcmpeq>:
   181f4:	b501      	push	{r0, lr}
   181f6:	f7ff ffb7 	bl	18168 <__cmpdf2>
   181fa:	2800      	cmp	r0, #0
   181fc:	bf48      	it	mi
   181fe:	f110 0f00 	cmnmi.w	r0, #0
   18202:	bd01      	pop	{r0, pc}

00018204 <__aeabi_dcmpeq>:
   18204:	f84d ed08 	str.w	lr, [sp, #-8]!
   18208:	f7ff fff4 	bl	181f4 <__aeabi_cdcmpeq>
   1820c:	bf0c      	ite	eq
   1820e:	2001      	moveq	r0, #1
   18210:	2000      	movne	r0, #0
   18212:	f85d fb08 	ldr.w	pc, [sp], #8
   18216:	bf00      	nop

00018218 <__aeabi_dcmplt>:
   18218:	f84d ed08 	str.w	lr, [sp, #-8]!
   1821c:	f7ff ffea 	bl	181f4 <__aeabi_cdcmpeq>
   18220:	bf34      	ite	cc
   18222:	2001      	movcc	r0, #1
   18224:	2000      	movcs	r0, #0
   18226:	f85d fb08 	ldr.w	pc, [sp], #8
   1822a:	bf00      	nop

0001822c <__aeabi_dcmple>:
   1822c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18230:	f7ff ffe0 	bl	181f4 <__aeabi_cdcmpeq>
   18234:	bf94      	ite	ls
   18236:	2001      	movls	r0, #1
   18238:	2000      	movhi	r0, #0
   1823a:	f85d fb08 	ldr.w	pc, [sp], #8
   1823e:	bf00      	nop

00018240 <__aeabi_dcmpge>:
   18240:	f84d ed08 	str.w	lr, [sp, #-8]!
   18244:	f7ff ffce 	bl	181e4 <__aeabi_cdrcmple>
   18248:	bf94      	ite	ls
   1824a:	2001      	movls	r0, #1
   1824c:	2000      	movhi	r0, #0
   1824e:	f85d fb08 	ldr.w	pc, [sp], #8
   18252:	bf00      	nop

00018254 <__aeabi_dcmpgt>:
   18254:	f84d ed08 	str.w	lr, [sp, #-8]!
   18258:	f7ff ffc4 	bl	181e4 <__aeabi_cdrcmple>
   1825c:	bf34      	ite	cc
   1825e:	2001      	movcc	r0, #1
   18260:	2000      	movcs	r0, #0
   18262:	f85d fb08 	ldr.w	pc, [sp], #8
   18266:	bf00      	nop

00018268 <__aeabi_d2iz>:
   18268:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1826c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   18270:	d215      	bcs.n	1829e <__aeabi_d2iz+0x36>
   18272:	d511      	bpl.n	18298 <__aeabi_d2iz+0x30>
   18274:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   18278:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1827c:	d912      	bls.n	182a4 <__aeabi_d2iz+0x3c>
   1827e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18282:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18286:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1828a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1828e:	fa23 f002 	lsr.w	r0, r3, r2
   18292:	bf18      	it	ne
   18294:	4240      	negne	r0, r0
   18296:	4770      	bx	lr
   18298:	f04f 0000 	mov.w	r0, #0
   1829c:	4770      	bx	lr
   1829e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   182a2:	d105      	bne.n	182b0 <__aeabi_d2iz+0x48>
   182a4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   182a8:	bf08      	it	eq
   182aa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   182ae:	4770      	bx	lr
   182b0:	f04f 0000 	mov.w	r0, #0
   182b4:	4770      	bx	lr
   182b6:	bf00      	nop

000182b8 <__aeabi_d2uiz>:
   182b8:	004a      	lsls	r2, r1, #1
   182ba:	d211      	bcs.n	182e0 <__aeabi_d2uiz+0x28>
   182bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   182c0:	d211      	bcs.n	182e6 <__aeabi_d2uiz+0x2e>
   182c2:	d50d      	bpl.n	182e0 <__aeabi_d2uiz+0x28>
   182c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   182c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   182cc:	d40e      	bmi.n	182ec <__aeabi_d2uiz+0x34>
   182ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   182d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   182d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   182da:	fa23 f002 	lsr.w	r0, r3, r2
   182de:	4770      	bx	lr
   182e0:	f04f 0000 	mov.w	r0, #0
   182e4:	4770      	bx	lr
   182e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   182ea:	d102      	bne.n	182f2 <__aeabi_d2uiz+0x3a>
   182ec:	f04f 30ff 	mov.w	r0, #4294967295
   182f0:	4770      	bx	lr
   182f2:	f04f 0000 	mov.w	r0, #0
   182f6:	4770      	bx	lr

000182f8 <__aeabi_d2f>:
   182f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   182fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   18300:	bf24      	itt	cs
   18302:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   18306:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1830a:	d90d      	bls.n	18328 <__aeabi_d2f+0x30>
   1830c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18310:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   18314:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   18318:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1831c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   18320:	bf08      	it	eq
   18322:	f020 0001 	biceq.w	r0, r0, #1
   18326:	4770      	bx	lr
   18328:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1832c:	d121      	bne.n	18372 <__aeabi_d2f+0x7a>
   1832e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   18332:	bfbc      	itt	lt
   18334:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   18338:	4770      	bxlt	lr
   1833a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1833e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   18342:	f1c2 0218 	rsb	r2, r2, #24
   18346:	f1c2 0c20 	rsb	ip, r2, #32
   1834a:	fa10 f30c 	lsls.w	r3, r0, ip
   1834e:	fa20 f002 	lsr.w	r0, r0, r2
   18352:	bf18      	it	ne
   18354:	f040 0001 	orrne.w	r0, r0, #1
   18358:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1835c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   18360:	fa03 fc0c 	lsl.w	ip, r3, ip
   18364:	ea40 000c 	orr.w	r0, r0, ip
   18368:	fa23 f302 	lsr.w	r3, r3, r2
   1836c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   18370:	e7cc      	b.n	1830c <__aeabi_d2f+0x14>
   18372:	ea7f 5362 	mvns.w	r3, r2, asr #21
   18376:	d107      	bne.n	18388 <__aeabi_d2f+0x90>
   18378:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1837c:	bf1e      	ittt	ne
   1837e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   18382:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   18386:	4770      	bxne	lr
   18388:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1838c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18390:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18394:	4770      	bx	lr
   18396:	bf00      	nop

00018398 <__aeabi_frsub>:
   18398:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1839c:	e002      	b.n	183a4 <__addsf3>
   1839e:	bf00      	nop

000183a0 <__aeabi_fsub>:
   183a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000183a4 <__addsf3>:
   183a4:	0042      	lsls	r2, r0, #1
   183a6:	bf1f      	itttt	ne
   183a8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   183ac:	ea92 0f03 	teqne	r2, r3
   183b0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   183b4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   183b8:	d06a      	beq.n	18490 <__addsf3+0xec>
   183ba:	ea4f 6212 	mov.w	r2, r2, lsr #24
   183be:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   183c2:	bfc1      	itttt	gt
   183c4:	18d2      	addgt	r2, r2, r3
   183c6:	4041      	eorgt	r1, r0
   183c8:	4048      	eorgt	r0, r1
   183ca:	4041      	eorgt	r1, r0
   183cc:	bfb8      	it	lt
   183ce:	425b      	neglt	r3, r3
   183d0:	2b19      	cmp	r3, #25
   183d2:	bf88      	it	hi
   183d4:	4770      	bxhi	lr
   183d6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   183da:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   183de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   183e2:	bf18      	it	ne
   183e4:	4240      	negne	r0, r0
   183e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   183ea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   183ee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   183f2:	bf18      	it	ne
   183f4:	4249      	negne	r1, r1
   183f6:	ea92 0f03 	teq	r2, r3
   183fa:	d03f      	beq.n	1847c <__addsf3+0xd8>
   183fc:	f1a2 0201 	sub.w	r2, r2, #1
   18400:	fa41 fc03 	asr.w	ip, r1, r3
   18404:	eb10 000c 	adds.w	r0, r0, ip
   18408:	f1c3 0320 	rsb	r3, r3, #32
   1840c:	fa01 f103 	lsl.w	r1, r1, r3
   18410:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18414:	d502      	bpl.n	1841c <__addsf3+0x78>
   18416:	4249      	negs	r1, r1
   18418:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1841c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18420:	d313      	bcc.n	1844a <__addsf3+0xa6>
   18422:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   18426:	d306      	bcc.n	18436 <__addsf3+0x92>
   18428:	0840      	lsrs	r0, r0, #1
   1842a:	ea4f 0131 	mov.w	r1, r1, rrx
   1842e:	f102 0201 	add.w	r2, r2, #1
   18432:	2afe      	cmp	r2, #254	; 0xfe
   18434:	d251      	bcs.n	184da <__addsf3+0x136>
   18436:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1843a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1843e:	bf08      	it	eq
   18440:	f020 0001 	biceq.w	r0, r0, #1
   18444:	ea40 0003 	orr.w	r0, r0, r3
   18448:	4770      	bx	lr
   1844a:	0049      	lsls	r1, r1, #1
   1844c:	eb40 0000 	adc.w	r0, r0, r0
   18450:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   18454:	f1a2 0201 	sub.w	r2, r2, #1
   18458:	d1ed      	bne.n	18436 <__addsf3+0x92>
   1845a:	fab0 fc80 	clz	ip, r0
   1845e:	f1ac 0c08 	sub.w	ip, ip, #8
   18462:	ebb2 020c 	subs.w	r2, r2, ip
   18466:	fa00 f00c 	lsl.w	r0, r0, ip
   1846a:	bfaa      	itet	ge
   1846c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   18470:	4252      	neglt	r2, r2
   18472:	4318      	orrge	r0, r3
   18474:	bfbc      	itt	lt
   18476:	40d0      	lsrlt	r0, r2
   18478:	4318      	orrlt	r0, r3
   1847a:	4770      	bx	lr
   1847c:	f092 0f00 	teq	r2, #0
   18480:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   18484:	bf06      	itte	eq
   18486:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1848a:	3201      	addeq	r2, #1
   1848c:	3b01      	subne	r3, #1
   1848e:	e7b5      	b.n	183fc <__addsf3+0x58>
   18490:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18494:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18498:	bf18      	it	ne
   1849a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1849e:	d021      	beq.n	184e4 <__addsf3+0x140>
   184a0:	ea92 0f03 	teq	r2, r3
   184a4:	d004      	beq.n	184b0 <__addsf3+0x10c>
   184a6:	f092 0f00 	teq	r2, #0
   184aa:	bf08      	it	eq
   184ac:	4608      	moveq	r0, r1
   184ae:	4770      	bx	lr
   184b0:	ea90 0f01 	teq	r0, r1
   184b4:	bf1c      	itt	ne
   184b6:	2000      	movne	r0, #0
   184b8:	4770      	bxne	lr
   184ba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   184be:	d104      	bne.n	184ca <__addsf3+0x126>
   184c0:	0040      	lsls	r0, r0, #1
   184c2:	bf28      	it	cs
   184c4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   184c8:	4770      	bx	lr
   184ca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   184ce:	bf3c      	itt	cc
   184d0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   184d4:	4770      	bxcc	lr
   184d6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   184da:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   184de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   184e2:	4770      	bx	lr
   184e4:	ea7f 6222 	mvns.w	r2, r2, asr #24
   184e8:	bf16      	itet	ne
   184ea:	4608      	movne	r0, r1
   184ec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   184f0:	4601      	movne	r1, r0
   184f2:	0242      	lsls	r2, r0, #9
   184f4:	bf06      	itte	eq
   184f6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   184fa:	ea90 0f01 	teqeq	r0, r1
   184fe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   18502:	4770      	bx	lr

00018504 <__aeabi_ui2f>:
   18504:	f04f 0300 	mov.w	r3, #0
   18508:	e004      	b.n	18514 <__aeabi_i2f+0x8>
   1850a:	bf00      	nop

0001850c <__aeabi_i2f>:
   1850c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   18510:	bf48      	it	mi
   18512:	4240      	negmi	r0, r0
   18514:	ea5f 0c00 	movs.w	ip, r0
   18518:	bf08      	it	eq
   1851a:	4770      	bxeq	lr
   1851c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   18520:	4601      	mov	r1, r0
   18522:	f04f 0000 	mov.w	r0, #0
   18526:	e01c      	b.n	18562 <__aeabi_l2f+0x2a>

00018528 <__aeabi_ul2f>:
   18528:	ea50 0201 	orrs.w	r2, r0, r1
   1852c:	bf08      	it	eq
   1852e:	4770      	bxeq	lr
   18530:	f04f 0300 	mov.w	r3, #0
   18534:	e00a      	b.n	1854c <__aeabi_l2f+0x14>
   18536:	bf00      	nop

00018538 <__aeabi_l2f>:
   18538:	ea50 0201 	orrs.w	r2, r0, r1
   1853c:	bf08      	it	eq
   1853e:	4770      	bxeq	lr
   18540:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   18544:	d502      	bpl.n	1854c <__aeabi_l2f+0x14>
   18546:	4240      	negs	r0, r0
   18548:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1854c:	ea5f 0c01 	movs.w	ip, r1
   18550:	bf02      	ittt	eq
   18552:	4684      	moveq	ip, r0
   18554:	4601      	moveq	r1, r0
   18556:	2000      	moveq	r0, #0
   18558:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   1855c:	bf08      	it	eq
   1855e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   18562:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   18566:	fabc f28c 	clz	r2, ip
   1856a:	3a08      	subs	r2, #8
   1856c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   18570:	db10      	blt.n	18594 <__aeabi_l2f+0x5c>
   18572:	fa01 fc02 	lsl.w	ip, r1, r2
   18576:	4463      	add	r3, ip
   18578:	fa00 fc02 	lsl.w	ip, r0, r2
   1857c:	f1c2 0220 	rsb	r2, r2, #32
   18580:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   18584:	fa20 f202 	lsr.w	r2, r0, r2
   18588:	eb43 0002 	adc.w	r0, r3, r2
   1858c:	bf08      	it	eq
   1858e:	f020 0001 	biceq.w	r0, r0, #1
   18592:	4770      	bx	lr
   18594:	f102 0220 	add.w	r2, r2, #32
   18598:	fa01 fc02 	lsl.w	ip, r1, r2
   1859c:	f1c2 0220 	rsb	r2, r2, #32
   185a0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   185a4:	fa21 f202 	lsr.w	r2, r1, r2
   185a8:	eb43 0002 	adc.w	r0, r3, r2
   185ac:	bf08      	it	eq
   185ae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   185b2:	4770      	bx	lr

000185b4 <__aeabi_fmul>:
   185b4:	f04f 0cff 	mov.w	ip, #255	; 0xff
   185b8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   185bc:	bf1e      	ittt	ne
   185be:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   185c2:	ea92 0f0c 	teqne	r2, ip
   185c6:	ea93 0f0c 	teqne	r3, ip
   185ca:	d06f      	beq.n	186ac <__aeabi_fmul+0xf8>
   185cc:	441a      	add	r2, r3
   185ce:	ea80 0c01 	eor.w	ip, r0, r1
   185d2:	0240      	lsls	r0, r0, #9
   185d4:	bf18      	it	ne
   185d6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   185da:	d01e      	beq.n	1861a <__aeabi_fmul+0x66>
   185dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   185e0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   185e4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   185e8:	fba0 3101 	umull	r3, r1, r0, r1
   185ec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   185f0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   185f4:	bf3e      	ittt	cc
   185f6:	0049      	lslcc	r1, r1, #1
   185f8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   185fc:	005b      	lslcc	r3, r3, #1
   185fe:	ea40 0001 	orr.w	r0, r0, r1
   18602:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   18606:	2afd      	cmp	r2, #253	; 0xfd
   18608:	d81d      	bhi.n	18646 <__aeabi_fmul+0x92>
   1860a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1860e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18612:	bf08      	it	eq
   18614:	f020 0001 	biceq.w	r0, r0, #1
   18618:	4770      	bx	lr
   1861a:	f090 0f00 	teq	r0, #0
   1861e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   18622:	bf08      	it	eq
   18624:	0249      	lsleq	r1, r1, #9
   18626:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1862a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   1862e:	3a7f      	subs	r2, #127	; 0x7f
   18630:	bfc2      	ittt	gt
   18632:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   18636:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1863a:	4770      	bxgt	lr
   1863c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18640:	f04f 0300 	mov.w	r3, #0
   18644:	3a01      	subs	r2, #1
   18646:	dc5d      	bgt.n	18704 <__aeabi_fmul+0x150>
   18648:	f112 0f19 	cmn.w	r2, #25
   1864c:	bfdc      	itt	le
   1864e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   18652:	4770      	bxle	lr
   18654:	f1c2 0200 	rsb	r2, r2, #0
   18658:	0041      	lsls	r1, r0, #1
   1865a:	fa21 f102 	lsr.w	r1, r1, r2
   1865e:	f1c2 0220 	rsb	r2, r2, #32
   18662:	fa00 fc02 	lsl.w	ip, r0, r2
   18666:	ea5f 0031 	movs.w	r0, r1, rrx
   1866a:	f140 0000 	adc.w	r0, r0, #0
   1866e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   18672:	bf08      	it	eq
   18674:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   18678:	4770      	bx	lr
   1867a:	f092 0f00 	teq	r2, #0
   1867e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   18682:	bf02      	ittt	eq
   18684:	0040      	lsleq	r0, r0, #1
   18686:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1868a:	3a01      	subeq	r2, #1
   1868c:	d0f9      	beq.n	18682 <__aeabi_fmul+0xce>
   1868e:	ea40 000c 	orr.w	r0, r0, ip
   18692:	f093 0f00 	teq	r3, #0
   18696:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1869a:	bf02      	ittt	eq
   1869c:	0049      	lsleq	r1, r1, #1
   1869e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   186a2:	3b01      	subeq	r3, #1
   186a4:	d0f9      	beq.n	1869a <__aeabi_fmul+0xe6>
   186a6:	ea41 010c 	orr.w	r1, r1, ip
   186aa:	e78f      	b.n	185cc <__aeabi_fmul+0x18>
   186ac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   186b0:	ea92 0f0c 	teq	r2, ip
   186b4:	bf18      	it	ne
   186b6:	ea93 0f0c 	teqne	r3, ip
   186ba:	d00a      	beq.n	186d2 <__aeabi_fmul+0x11e>
   186bc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   186c0:	bf18      	it	ne
   186c2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   186c6:	d1d8      	bne.n	1867a <__aeabi_fmul+0xc6>
   186c8:	ea80 0001 	eor.w	r0, r0, r1
   186cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   186d0:	4770      	bx	lr
   186d2:	f090 0f00 	teq	r0, #0
   186d6:	bf17      	itett	ne
   186d8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   186dc:	4608      	moveq	r0, r1
   186de:	f091 0f00 	teqne	r1, #0
   186e2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   186e6:	d014      	beq.n	18712 <__aeabi_fmul+0x15e>
   186e8:	ea92 0f0c 	teq	r2, ip
   186ec:	d101      	bne.n	186f2 <__aeabi_fmul+0x13e>
   186ee:	0242      	lsls	r2, r0, #9
   186f0:	d10f      	bne.n	18712 <__aeabi_fmul+0x15e>
   186f2:	ea93 0f0c 	teq	r3, ip
   186f6:	d103      	bne.n	18700 <__aeabi_fmul+0x14c>
   186f8:	024b      	lsls	r3, r1, #9
   186fa:	bf18      	it	ne
   186fc:	4608      	movne	r0, r1
   186fe:	d108      	bne.n	18712 <__aeabi_fmul+0x15e>
   18700:	ea80 0001 	eor.w	r0, r0, r1
   18704:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   18708:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1870c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18710:	4770      	bx	lr
   18712:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18716:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   1871a:	4770      	bx	lr

0001871c <__aeabi_fdiv>:
   1871c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18720:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18724:	bf1e      	ittt	ne
   18726:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1872a:	ea92 0f0c 	teqne	r2, ip
   1872e:	ea93 0f0c 	teqne	r3, ip
   18732:	d069      	beq.n	18808 <__aeabi_fdiv+0xec>
   18734:	eba2 0203 	sub.w	r2, r2, r3
   18738:	ea80 0c01 	eor.w	ip, r0, r1
   1873c:	0249      	lsls	r1, r1, #9
   1873e:	ea4f 2040 	mov.w	r0, r0, lsl #9
   18742:	d037      	beq.n	187b4 <__aeabi_fdiv+0x98>
   18744:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18748:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   1874c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   18750:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18754:	428b      	cmp	r3, r1
   18756:	bf38      	it	cc
   18758:	005b      	lslcc	r3, r3, #1
   1875a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   1875e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   18762:	428b      	cmp	r3, r1
   18764:	bf24      	itt	cs
   18766:	1a5b      	subcs	r3, r3, r1
   18768:	ea40 000c 	orrcs.w	r0, r0, ip
   1876c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   18770:	bf24      	itt	cs
   18772:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   18776:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1877a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   1877e:	bf24      	itt	cs
   18780:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   18784:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   18788:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1878c:	bf24      	itt	cs
   1878e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   18792:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   18796:	011b      	lsls	r3, r3, #4
   18798:	bf18      	it	ne
   1879a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   1879e:	d1e0      	bne.n	18762 <__aeabi_fdiv+0x46>
   187a0:	2afd      	cmp	r2, #253	; 0xfd
   187a2:	f63f af50 	bhi.w	18646 <__aeabi_fmul+0x92>
   187a6:	428b      	cmp	r3, r1
   187a8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   187ac:	bf08      	it	eq
   187ae:	f020 0001 	biceq.w	r0, r0, #1
   187b2:	4770      	bx	lr
   187b4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   187b8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   187bc:	327f      	adds	r2, #127	; 0x7f
   187be:	bfc2      	ittt	gt
   187c0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   187c4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   187c8:	4770      	bxgt	lr
   187ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   187ce:	f04f 0300 	mov.w	r3, #0
   187d2:	3a01      	subs	r2, #1
   187d4:	e737      	b.n	18646 <__aeabi_fmul+0x92>
   187d6:	f092 0f00 	teq	r2, #0
   187da:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   187de:	bf02      	ittt	eq
   187e0:	0040      	lsleq	r0, r0, #1
   187e2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   187e6:	3a01      	subeq	r2, #1
   187e8:	d0f9      	beq.n	187de <__aeabi_fdiv+0xc2>
   187ea:	ea40 000c 	orr.w	r0, r0, ip
   187ee:	f093 0f00 	teq	r3, #0
   187f2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   187f6:	bf02      	ittt	eq
   187f8:	0049      	lsleq	r1, r1, #1
   187fa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   187fe:	3b01      	subeq	r3, #1
   18800:	d0f9      	beq.n	187f6 <__aeabi_fdiv+0xda>
   18802:	ea41 010c 	orr.w	r1, r1, ip
   18806:	e795      	b.n	18734 <__aeabi_fdiv+0x18>
   18808:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1880c:	ea92 0f0c 	teq	r2, ip
   18810:	d108      	bne.n	18824 <__aeabi_fdiv+0x108>
   18812:	0242      	lsls	r2, r0, #9
   18814:	f47f af7d 	bne.w	18712 <__aeabi_fmul+0x15e>
   18818:	ea93 0f0c 	teq	r3, ip
   1881c:	f47f af70 	bne.w	18700 <__aeabi_fmul+0x14c>
   18820:	4608      	mov	r0, r1
   18822:	e776      	b.n	18712 <__aeabi_fmul+0x15e>
   18824:	ea93 0f0c 	teq	r3, ip
   18828:	d104      	bne.n	18834 <__aeabi_fdiv+0x118>
   1882a:	024b      	lsls	r3, r1, #9
   1882c:	f43f af4c 	beq.w	186c8 <__aeabi_fmul+0x114>
   18830:	4608      	mov	r0, r1
   18832:	e76e      	b.n	18712 <__aeabi_fmul+0x15e>
   18834:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   18838:	bf18      	it	ne
   1883a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1883e:	d1ca      	bne.n	187d6 <__aeabi_fdiv+0xba>
   18840:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   18844:	f47f af5c 	bne.w	18700 <__aeabi_fmul+0x14c>
   18848:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   1884c:	f47f af3c 	bne.w	186c8 <__aeabi_fmul+0x114>
   18850:	e75f      	b.n	18712 <__aeabi_fmul+0x15e>
   18852:	bf00      	nop

00018854 <__gesf2>:
   18854:	f04f 3cff 	mov.w	ip, #4294967295
   18858:	e006      	b.n	18868 <__cmpsf2+0x4>
   1885a:	bf00      	nop

0001885c <__lesf2>:
   1885c:	f04f 0c01 	mov.w	ip, #1
   18860:	e002      	b.n	18868 <__cmpsf2+0x4>
   18862:	bf00      	nop

00018864 <__cmpsf2>:
   18864:	f04f 0c01 	mov.w	ip, #1
   18868:	f84d cd04 	str.w	ip, [sp, #-4]!
   1886c:	ea4f 0240 	mov.w	r2, r0, lsl #1
   18870:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18874:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18878:	bf18      	it	ne
   1887a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1887e:	d011      	beq.n	188a4 <__cmpsf2+0x40>
   18880:	b001      	add	sp, #4
   18882:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   18886:	bf18      	it	ne
   18888:	ea90 0f01 	teqne	r0, r1
   1888c:	bf58      	it	pl
   1888e:	ebb2 0003 	subspl.w	r0, r2, r3
   18892:	bf88      	it	hi
   18894:	17c8      	asrhi	r0, r1, #31
   18896:	bf38      	it	cc
   18898:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   1889c:	bf18      	it	ne
   1889e:	f040 0001 	orrne.w	r0, r0, #1
   188a2:	4770      	bx	lr
   188a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   188a8:	d102      	bne.n	188b0 <__cmpsf2+0x4c>
   188aa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   188ae:	d105      	bne.n	188bc <__cmpsf2+0x58>
   188b0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   188b4:	d1e4      	bne.n	18880 <__cmpsf2+0x1c>
   188b6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   188ba:	d0e1      	beq.n	18880 <__cmpsf2+0x1c>
   188bc:	f85d 0b04 	ldr.w	r0, [sp], #4
   188c0:	4770      	bx	lr
   188c2:	bf00      	nop

000188c4 <__aeabi_cfrcmple>:
   188c4:	4684      	mov	ip, r0
   188c6:	4608      	mov	r0, r1
   188c8:	4661      	mov	r1, ip
   188ca:	e7ff      	b.n	188cc <__aeabi_cfcmpeq>

000188cc <__aeabi_cfcmpeq>:
   188cc:	b50f      	push	{r0, r1, r2, r3, lr}
   188ce:	f7ff ffc9 	bl	18864 <__cmpsf2>
   188d2:	2800      	cmp	r0, #0
   188d4:	bf48      	it	mi
   188d6:	f110 0f00 	cmnmi.w	r0, #0
   188da:	bd0f      	pop	{r0, r1, r2, r3, pc}

000188dc <__aeabi_fcmpeq>:
   188dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   188e0:	f7ff fff4 	bl	188cc <__aeabi_cfcmpeq>
   188e4:	bf0c      	ite	eq
   188e6:	2001      	moveq	r0, #1
   188e8:	2000      	movne	r0, #0
   188ea:	f85d fb08 	ldr.w	pc, [sp], #8
   188ee:	bf00      	nop

000188f0 <__aeabi_fcmplt>:
   188f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   188f4:	f7ff ffea 	bl	188cc <__aeabi_cfcmpeq>
   188f8:	bf34      	ite	cc
   188fa:	2001      	movcc	r0, #1
   188fc:	2000      	movcs	r0, #0
   188fe:	f85d fb08 	ldr.w	pc, [sp], #8
   18902:	bf00      	nop

00018904 <__aeabi_fcmple>:
   18904:	f84d ed08 	str.w	lr, [sp, #-8]!
   18908:	f7ff ffe0 	bl	188cc <__aeabi_cfcmpeq>
   1890c:	bf94      	ite	ls
   1890e:	2001      	movls	r0, #1
   18910:	2000      	movhi	r0, #0
   18912:	f85d fb08 	ldr.w	pc, [sp], #8
   18916:	bf00      	nop

00018918 <__aeabi_fcmpge>:
   18918:	f84d ed08 	str.w	lr, [sp, #-8]!
   1891c:	f7ff ffd2 	bl	188c4 <__aeabi_cfrcmple>
   18920:	bf94      	ite	ls
   18922:	2001      	movls	r0, #1
   18924:	2000      	movhi	r0, #0
   18926:	f85d fb08 	ldr.w	pc, [sp], #8
   1892a:	bf00      	nop

0001892c <__aeabi_fcmpgt>:
   1892c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18930:	f7ff ffc8 	bl	188c4 <__aeabi_cfrcmple>
   18934:	bf34      	ite	cc
   18936:	2001      	movcc	r0, #1
   18938:	2000      	movcs	r0, #0
   1893a:	f85d fb08 	ldr.w	pc, [sp], #8
   1893e:	bf00      	nop

00018940 <__aeabi_f2iz>:
   18940:	ea4f 0240 	mov.w	r2, r0, lsl #1
   18944:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   18948:	d30f      	bcc.n	1896a <__aeabi_f2iz+0x2a>
   1894a:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1894e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   18952:	d90d      	bls.n	18970 <__aeabi_f2iz+0x30>
   18954:	ea4f 2300 	mov.w	r3, r0, lsl #8
   18958:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1895c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   18960:	fa23 f002 	lsr.w	r0, r3, r2
   18964:	bf18      	it	ne
   18966:	4240      	negne	r0, r0
   18968:	4770      	bx	lr
   1896a:	f04f 0000 	mov.w	r0, #0
   1896e:	4770      	bx	lr
   18970:	f112 0f61 	cmn.w	r2, #97	; 0x61
   18974:	d101      	bne.n	1897a <__aeabi_f2iz+0x3a>
   18976:	0242      	lsls	r2, r0, #9
   18978:	d105      	bne.n	18986 <__aeabi_f2iz+0x46>
   1897a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   1897e:	bf08      	it	eq
   18980:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   18984:	4770      	bx	lr
   18986:	f04f 0000 	mov.w	r0, #0
   1898a:	4770      	bx	lr

0001898c <memcpy>:
   1898c:	2a0f      	cmp	r2, #15
   1898e:	b4f0      	push	{r4, r5, r6, r7}
   18990:	d945      	bls.n	18a1e <memcpy+0x92>
   18992:	ea40 0301 	orr.w	r3, r0, r1
   18996:	079b      	lsls	r3, r3, #30
   18998:	d145      	bne.n	18a26 <memcpy+0x9a>
   1899a:	f1a2 0710 	sub.w	r7, r2, #16
   1899e:	460c      	mov	r4, r1
   189a0:	4603      	mov	r3, r0
   189a2:	093f      	lsrs	r7, r7, #4
   189a4:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   189a8:	3610      	adds	r6, #16
   189aa:	6825      	ldr	r5, [r4, #0]
   189ac:	3310      	adds	r3, #16
   189ae:	3410      	adds	r4, #16
   189b0:	f843 5c10 	str.w	r5, [r3, #-16]
   189b4:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   189b8:	f843 5c0c 	str.w	r5, [r3, #-12]
   189bc:	f854 5c08 	ldr.w	r5, [r4, #-8]
   189c0:	f843 5c08 	str.w	r5, [r3, #-8]
   189c4:	f854 5c04 	ldr.w	r5, [r4, #-4]
   189c8:	f843 5c04 	str.w	r5, [r3, #-4]
   189cc:	42b3      	cmp	r3, r6
   189ce:	d1ec      	bne.n	189aa <memcpy+0x1e>
   189d0:	1c7b      	adds	r3, r7, #1
   189d2:	f002 0c0f 	and.w	ip, r2, #15
   189d6:	f1bc 0f03 	cmp.w	ip, #3
   189da:	ea4f 1303 	mov.w	r3, r3, lsl #4
   189de:	4419      	add	r1, r3
   189e0:	4403      	add	r3, r0
   189e2:	d922      	bls.n	18a2a <memcpy+0x9e>
   189e4:	460e      	mov	r6, r1
   189e6:	461d      	mov	r5, r3
   189e8:	4664      	mov	r4, ip
   189ea:	f856 7b04 	ldr.w	r7, [r6], #4
   189ee:	3c04      	subs	r4, #4
   189f0:	2c03      	cmp	r4, #3
   189f2:	f845 7b04 	str.w	r7, [r5], #4
   189f6:	d8f8      	bhi.n	189ea <memcpy+0x5e>
   189f8:	f1ac 0404 	sub.w	r4, ip, #4
   189fc:	f002 0203 	and.w	r2, r2, #3
   18a00:	f024 0403 	bic.w	r4, r4, #3
   18a04:	3404      	adds	r4, #4
   18a06:	4423      	add	r3, r4
   18a08:	4421      	add	r1, r4
   18a0a:	b132      	cbz	r2, 18a1a <memcpy+0x8e>
   18a0c:	440a      	add	r2, r1
   18a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
   18a12:	4291      	cmp	r1, r2
   18a14:	f803 4b01 	strb.w	r4, [r3], #1
   18a18:	d1f9      	bne.n	18a0e <memcpy+0x82>
   18a1a:	bcf0      	pop	{r4, r5, r6, r7}
   18a1c:	4770      	bx	lr
   18a1e:	4603      	mov	r3, r0
   18a20:	2a00      	cmp	r2, #0
   18a22:	d1f3      	bne.n	18a0c <memcpy+0x80>
   18a24:	e7f9      	b.n	18a1a <memcpy+0x8e>
   18a26:	4603      	mov	r3, r0
   18a28:	e7f0      	b.n	18a0c <memcpy+0x80>
   18a2a:	4662      	mov	r2, ip
   18a2c:	2a00      	cmp	r2, #0
   18a2e:	d1ed      	bne.n	18a0c <memcpy+0x80>
   18a30:	e7f3      	b.n	18a1a <memcpy+0x8e>
   18a32:	bf00      	nop

00018a34 <memset>:
   18a34:	0783      	lsls	r3, r0, #30
   18a36:	b4f0      	push	{r4, r5, r6, r7}
   18a38:	d048      	beq.n	18acc <memset+0x98>
   18a3a:	1e54      	subs	r4, r2, #1
   18a3c:	2a00      	cmp	r2, #0
   18a3e:	d043      	beq.n	18ac8 <memset+0x94>
   18a40:	b2cd      	uxtb	r5, r1
   18a42:	4603      	mov	r3, r0
   18a44:	e002      	b.n	18a4c <memset+0x18>
   18a46:	2c00      	cmp	r4, #0
   18a48:	d03e      	beq.n	18ac8 <memset+0x94>
   18a4a:	4614      	mov	r4, r2
   18a4c:	f803 5b01 	strb.w	r5, [r3], #1
   18a50:	f013 0f03 	tst.w	r3, #3
   18a54:	f104 32ff 	add.w	r2, r4, #4294967295
   18a58:	d1f5      	bne.n	18a46 <memset+0x12>
   18a5a:	2c03      	cmp	r4, #3
   18a5c:	d92d      	bls.n	18aba <memset+0x86>
   18a5e:	b2cd      	uxtb	r5, r1
   18a60:	2c0f      	cmp	r4, #15
   18a62:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   18a66:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   18a6a:	d918      	bls.n	18a9e <memset+0x6a>
   18a6c:	f1a4 0710 	sub.w	r7, r4, #16
   18a70:	f103 0610 	add.w	r6, r3, #16
   18a74:	461a      	mov	r2, r3
   18a76:	093f      	lsrs	r7, r7, #4
   18a78:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   18a7c:	6015      	str	r5, [r2, #0]
   18a7e:	3210      	adds	r2, #16
   18a80:	f842 5c0c 	str.w	r5, [r2, #-12]
   18a84:	f842 5c08 	str.w	r5, [r2, #-8]
   18a88:	f842 5c04 	str.w	r5, [r2, #-4]
   18a8c:	42b2      	cmp	r2, r6
   18a8e:	d1f5      	bne.n	18a7c <memset+0x48>
   18a90:	f004 040f 	and.w	r4, r4, #15
   18a94:	3701      	adds	r7, #1
   18a96:	2c03      	cmp	r4, #3
   18a98:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   18a9c:	d90d      	bls.n	18aba <memset+0x86>
   18a9e:	461e      	mov	r6, r3
   18aa0:	4622      	mov	r2, r4
   18aa2:	3a04      	subs	r2, #4
   18aa4:	f846 5b04 	str.w	r5, [r6], #4
   18aa8:	2a03      	cmp	r2, #3
   18aaa:	d8fa      	bhi.n	18aa2 <memset+0x6e>
   18aac:	1f22      	subs	r2, r4, #4
   18aae:	f004 0403 	and.w	r4, r4, #3
   18ab2:	f022 0203 	bic.w	r2, r2, #3
   18ab6:	3204      	adds	r2, #4
   18ab8:	4413      	add	r3, r2
   18aba:	b12c      	cbz	r4, 18ac8 <memset+0x94>
   18abc:	b2c9      	uxtb	r1, r1
   18abe:	441c      	add	r4, r3
   18ac0:	f803 1b01 	strb.w	r1, [r3], #1
   18ac4:	42a3      	cmp	r3, r4
   18ac6:	d1fb      	bne.n	18ac0 <memset+0x8c>
   18ac8:	bcf0      	pop	{r4, r5, r6, r7}
   18aca:	4770      	bx	lr
   18acc:	4614      	mov	r4, r2
   18ace:	4603      	mov	r3, r0
   18ad0:	e7c3      	b.n	18a5a <memset+0x26>
   18ad2:	bf00      	nop

00018ad4 <strncpy>:
   18ad4:	ea40 0301 	orr.w	r3, r0, r1
   18ad8:	079b      	lsls	r3, r3, #30
   18ada:	b470      	push	{r4, r5, r6}
   18adc:	d12b      	bne.n	18b36 <strncpy+0x62>
   18ade:	2a03      	cmp	r2, #3
   18ae0:	bf84      	itt	hi
   18ae2:	460b      	movhi	r3, r1
   18ae4:	4605      	movhi	r5, r0
   18ae6:	d926      	bls.n	18b36 <strncpy+0x62>
   18ae8:	4619      	mov	r1, r3
   18aea:	f853 4b04 	ldr.w	r4, [r3], #4
   18aee:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   18af2:	ea26 0604 	bic.w	r6, r6, r4
   18af6:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   18afa:	d105      	bne.n	18b08 <strncpy+0x34>
   18afc:	3a04      	subs	r2, #4
   18afe:	f845 4b04 	str.w	r4, [r5], #4
   18b02:	2a03      	cmp	r2, #3
   18b04:	4619      	mov	r1, r3
   18b06:	d8ef      	bhi.n	18ae8 <strncpy+0x14>
   18b08:	b19a      	cbz	r2, 18b32 <strncpy+0x5e>
   18b0a:	780c      	ldrb	r4, [r1, #0]
   18b0c:	3a01      	subs	r2, #1
   18b0e:	1c6b      	adds	r3, r5, #1
   18b10:	702c      	strb	r4, [r5, #0]
   18b12:	b13c      	cbz	r4, 18b24 <strncpy+0x50>
   18b14:	b16a      	cbz	r2, 18b32 <strncpy+0x5e>
   18b16:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   18b1a:	3a01      	subs	r2, #1
   18b1c:	f803 4b01 	strb.w	r4, [r3], #1
   18b20:	2c00      	cmp	r4, #0
   18b22:	d1f7      	bne.n	18b14 <strncpy+0x40>
   18b24:	b12a      	cbz	r2, 18b32 <strncpy+0x5e>
   18b26:	441a      	add	r2, r3
   18b28:	2100      	movs	r1, #0
   18b2a:	f803 1b01 	strb.w	r1, [r3], #1
   18b2e:	4293      	cmp	r3, r2
   18b30:	d1fb      	bne.n	18b2a <strncpy+0x56>
   18b32:	bc70      	pop	{r4, r5, r6}
   18b34:	4770      	bx	lr
   18b36:	4605      	mov	r5, r0
   18b38:	e7e6      	b.n	18b08 <strncpy+0x34>
   18b3a:	bf00      	nop

00018b3c <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   18b3c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   18b3e:	e003      	b.n	18b48 <LoopCopyDataInit>

00018b40 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   18b40:	4b0a      	ldr	r3, [pc, #40]	; (18b6c <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   18b42:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   18b44:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   18b46:	3104      	adds	r1, #4

00018b48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   18b48:	4809      	ldr	r0, [pc, #36]	; (18b70 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   18b4a:	4b0a      	ldr	r3, [pc, #40]	; (18b74 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   18b4c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   18b4e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   18b50:	d3f6      	bcc.n	18b40 <CopyDataInit>
	ldr	r2, =_sbss
   18b52:	4a09      	ldr	r2, [pc, #36]	; (18b78 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   18b54:	e002      	b.n	18b5c <LoopFillZerobss>

00018b56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   18b56:	2300      	movs	r3, #0
	str	r3, [r2], #4
   18b58:	f842 3b04 	str.w	r3, [r2], #4

00018b5c <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   18b5c:	4b07      	ldr	r3, [pc, #28]	; (18b7c <LoopFillZerobss+0x20>)
	cmp	r2, r3
   18b5e:	429a      	cmp	r2, r3
	bcc	FillZerobss
   18b60:	d3f9      	bcc.n	18b56 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   18b62:	f7e7 fbeb 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   18b66:	f7fe fe85 	bl	17874 <main>
	bx	lr    
   18b6a:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   18b6c:	00018c74 	.word	0x00018c74
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   18b70:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   18b74:	200005d8 	.word	0x200005d8
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   18b78:	200005d8 	.word	0x200005d8
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   18b7c:	2004cba4 	.word	0x2004cba4

00018b80 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   18b80:	e7fe      	b.n	18b80 <ADC1_2_IRQHandler>
   18b82:	0000      	movs	r0, r0
   18b84:	6c726f77 	.word	0x6c726f77
   18b88:	000d0a64 	.word	0x000d0a64
   18b8c:	75746341 	.word	0x75746341
   18b90:	726f7461 	.word	0x726f7461
   18b94:	00000d0a 	.word	0x00000d0a
   18b98:	454c4449 	.word	0x454c4449
   18b9c:	00000000 	.word	0x00000000

00018ba0 <ulKernelPriority>:
   18ba0:	0000007f                                ....

00018ba4 <heapSTRUCT_SIZE>:
   18ba4:	00010010                                         ..

00018ba6 <version>:
   18ba6:	3d5a0001                                         ..

00018ba8 <utm_east0>:
   18ba8:	00093d5a                                Z=..

00018bac <utm_north0>:
   18bac:	005875e6                                .uX.

00018bb0 <climb_pgain>:
   18bb0:	bcf5c28f                                ....

00018bb4 <climb_igain>:
   18bb4:	3dcccccd                                ...=

00018bb8 <level_gaz>:
   18bb8:	3e9eb852                                R..>

00018bbc <nav_east0>:
   18bbc:	00093d5a                                Z=..

00018bc0 <nav_north0>:
   18bc0:	005875e6                                .uX.

00018bc4 <nb_waypoint>:
   18bc4:	00000007 33323130 37363534 42413938     ....0123456789AB
   18bd4:	46454443                                CDEF

00018bd8 <failsafe>:
	...
   18bec:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   18bfc:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   18c0c:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   18c1c:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   18c2c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   18c3c:	000d0a30 00000d0a 65532d52 6e617672     0.......R-Servan
   18c4c:	00000074 65532d49 6e617672 00000074     t...I-Servant...
   18c5c:	65532d43 6e617672 00000074 65532d4f     C-Servant...O-Se
   18c6c:	6e617672 00000074                       rvant...
