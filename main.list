
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 05 20 ed 89 01 00 31 8a 01 00 31 8a 01 00     .P. ....1...1...
      10:	31 8a 01 00 31 8a 01 00 31 8a 01 00 00 00 00 00     1...1...1.......
	...
      2c:	bd 5b 00 00 31 8a 01 00 00 00 00 00 c9 5c 00 00     .[..1........\..
      3c:	05 5d 00 00 31 8a 01 00 31 8a 01 00 31 8a 01 00     .]..1...1...1...
      4c:	31 8a 01 00 31 8a 01 00 31 8a 01 00 31 8a 01 00     1...1...1...1...
      5c:	31 8a 01 00 31 8a 01 00 31 8a 01 00 31 8a 01 00     1...1...1...1...
      6c:	31 8a 01 00 31 8a 01 00 31 8a 01 00 31 8a 01 00     1...1...1...1...
      7c:	31 8a 01 00 31 8a 01 00 31 8a 01 00 31 8a 01 00     1...1...1...1...
      8c:	31 8a 01 00 31 8a 01 00 31 8a 01 00 31 8a 01 00     1...1...1...1...
      9c:	31 8a 01 00 31 8a 01 00 31 8a 01 00 31 8a 01 00     1...1...1...1...
      ac:	31 8a 01 00 31 8a 01 00 31 8a 01 00 31 8a 01 00     1...1...1...1...
      bc:	31 8a 01 00 31 8a 01 00 31 8a 01 00 31 8a 01 00     1...1...1...1...
      cc:	31 8a 01 00 31 8a 01 00 31 8a 01 00 31 8a 01 00     1...1...1...1...
      dc:	31 8a 01 00 31 8a 01 00 31 8a 01 00 31 8a 01 00     1...1...1...1...
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     10e:	f3ef 8309 	mrs	r3, PSP
     112:	4618      	mov	r0, r3
     114:	4770      	bx	lr
     116:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	2400      	movs	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     126:	f3ef 8308 	mrs	r3, MSP
     12a:	4618      	mov	r0, r3
     12c:	4770      	bx	lr
     12e:	461c      	mov	r4, r3
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b480      	push	{r7}
     13e:	b083      	sub	sp, #12
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	2300      	movs	r3, #0
     144:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     146:	f3ef 8312 	mrs	r3, BASEPRI_MAX
     14a:	607b      	str	r3, [r7, #4]
  return(result);
     14c:	687b      	ldr	r3, [r7, #4]
}
     14e:	4618      	mov	r0, r3
     150:	370c      	adds	r7, #12
     152:	46bd      	mov	sp, r7
     154:	f85d 7b04 	ldr.w	r7, [sp], #4
     158:	4770      	bx	lr
     15a:	bf00      	nop

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	370c      	adds	r7, #12
     16c:	46bd      	mov	sp, r7
     16e:	f85d 7b04 	ldr.w	r7, [sp], #4
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b480      	push	{r7}
     176:	b083      	sub	sp, #12
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	2300      	movs	r3, #0
     17c:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     17e:	f3ef 8310 	mrs	r3, PRIMASK
     182:	607b      	str	r3, [r7, #4]
  return(result);
     184:	687b      	ldr	r3, [r7, #4]
}
     186:	4618      	mov	r0, r3
     188:	370c      	adds	r7, #12
     18a:	46bd      	mov	sp, r7
     18c:	f85d 7b04 	ldr.w	r7, [sp], #4
     190:	4770      	bx	lr
     192:	bf00      	nop

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	370c      	adds	r7, #12
     1a4:	46bd      	mov	sp, r7
     1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b480      	push	{r7}
     1ae:	b083      	sub	sp, #12
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	2300      	movs	r3, #0
     1b4:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b6:	f3ef 8313 	mrs	r3, FAULTMASK
     1ba:	607b      	str	r3, [r7, #4]
  return(result);
     1bc:	687b      	ldr	r3, [r7, #4]
}
     1be:	4618      	mov	r0, r3
     1c0:	370c      	adds	r7, #12
     1c2:	46bd      	mov	sp, r7
     1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	370c      	adds	r7, #12
     1dc:	46bd      	mov	sp, r7
     1de:	f85d 7b04 	ldr.w	r7, [sp], #4
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b480      	push	{r7}
     1e6:	b083      	sub	sp, #12
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	2300      	movs	r3, #0
     1ec:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1ee:	f3ef 8314 	mrs	r3, CONTROL
     1f2:	607b      	str	r3, [r7, #4]
  return(result);
     1f4:	687b      	ldr	r3, [r7, #4]
}
     1f6:	4618      	mov	r0, r3
     1f8:	370c      	adds	r7, #12
     1fa:	46bd      	mov	sp, r7
     1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     200:	4770      	bx	lr
     202:	bf00      	nop

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	370c      	adds	r7, #12
     214:	46bd      	mov	sp, r7
     216:	f85d 7b04 	ldr.w	r7, [sp], #4
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b480      	push	{r7}
     21e:	b085      	sub	sp, #20
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	2300      	movs	r3, #0
     226:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     228:	687b      	ldr	r3, [r7, #4]
     22a:	ba1b      	rev	r3, r3
     22c:	60fb      	str	r3, [r7, #12]
  return(result);
     22e:	68fb      	ldr	r3, [r7, #12]
}
     230:	4618      	mov	r0, r3
     232:	3714      	adds	r7, #20
     234:	46bd      	mov	sp, r7
     236:	f85d 7b04 	ldr.w	r7, [sp], #4
     23a:	4770      	bx	lr

0000023c <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     23c:	b480      	push	{r7}
     23e:	b085      	sub	sp, #20
     240:	af00      	add	r7, sp, #0
     242:	4603      	mov	r3, r0
     244:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     246:	2300      	movs	r3, #0
     248:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     24a:	88fb      	ldrh	r3, [r7, #6]
     24c:	ba5b      	rev16	r3, r3
     24e:	60fb      	str	r3, [r7, #12]
  return(result);
     250:	68fb      	ldr	r3, [r7, #12]
}
     252:	4618      	mov	r0, r3
     254:	3714      	adds	r7, #20
     256:	46bd      	mov	sp, r7
     258:	f85d 7b04 	ldr.w	r7, [sp], #4
     25c:	4770      	bx	lr
     25e:	bf00      	nop

00000260 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     260:	b480      	push	{r7}
     262:	b085      	sub	sp, #20
     264:	af00      	add	r7, sp, #0
     266:	4603      	mov	r3, r0
     268:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26a:	2300      	movs	r3, #0
     26c:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     26e:	88fb      	ldrh	r3, [r7, #6]
     270:	badb      	revsh	r3, r3
     272:	60fb      	str	r3, [r7, #12]
  return(result);
     274:	68fb      	ldr	r3, [r7, #12]
}
     276:	4618      	mov	r0, r3
     278:	3714      	adds	r7, #20
     27a:	46bd      	mov	sp, r7
     27c:	f85d 7b04 	ldr.w	r7, [sp], #4
     280:	4770      	bx	lr
     282:	bf00      	nop

00000284 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     284:	b480      	push	{r7}
     286:	b085      	sub	sp, #20
     288:	af00      	add	r7, sp, #0
     28a:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     28c:	2300      	movs	r3, #0
     28e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     290:	687b      	ldr	r3, [r7, #4]
     292:	fa93 f3a3 	rbit	r3, r3
     296:	60fb      	str	r3, [r7, #12]
   return(result);
     298:	68fb      	ldr	r3, [r7, #12]
}
     29a:	4618      	mov	r0, r3
     29c:	3714      	adds	r7, #20
     29e:	46bd      	mov	sp, r7
     2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     2a4:	4770      	bx	lr
     2a6:	bf00      	nop

000002a8 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2a8:	b480      	push	{r7}
     2aa:	b085      	sub	sp, #20
     2ac:	af00      	add	r7, sp, #0
     2ae:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b0:	2300      	movs	r3, #0
     2b2:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	e8d3 3f4f 	ldrexb	r3, [r3]
     2ba:	73fb      	strb	r3, [r7, #15]
   return(result);
     2bc:	7bfb      	ldrb	r3, [r7, #15]
}
     2be:	4618      	mov	r0, r3
     2c0:	3714      	adds	r7, #20
     2c2:	46bd      	mov	sp, r7
     2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     2c8:	4770      	bx	lr
     2ca:	bf00      	nop

000002cc <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2cc:	b480      	push	{r7}
     2ce:	b085      	sub	sp, #20
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d4:	2300      	movs	r3, #0
     2d6:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	e8d3 3f5f 	ldrexh	r3, [r3]
     2de:	81fb      	strh	r3, [r7, #14]
   return(result);
     2e0:	89fb      	ldrh	r3, [r7, #14]
}
     2e2:	4618      	mov	r0, r3
     2e4:	3714      	adds	r7, #20
     2e6:	46bd      	mov	sp, r7
     2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop

000002f0 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f0:	b480      	push	{r7}
     2f2:	b085      	sub	sp, #20
     2f4:	af00      	add	r7, sp, #0
     2f6:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2f8:	2300      	movs	r3, #0
     2fa:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	e853 3f00 	ldrex	r3, [r3]
     302:	60fb      	str	r3, [r7, #12]
   return(result);
     304:	68fb      	ldr	r3, [r7, #12]
}
     306:	4618      	mov	r0, r3
     308:	3714      	adds	r7, #20
     30a:	46bd      	mov	sp, r7
     30c:	f85d 7b04 	ldr.w	r7, [sp], #4
     310:	4770      	bx	lr
     312:	bf00      	nop

00000314 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     314:	b480      	push	{r7}
     316:	b085      	sub	sp, #20
     318:	af00      	add	r7, sp, #0
     31a:	6078      	str	r0, [r7, #4]
     31c:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     31e:	2300      	movs	r3, #0
     320:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     322:	683b      	ldr	r3, [r7, #0]
     324:	687a      	ldr	r2, [r7, #4]
     326:	e843 2300 	strex	r3, r2, [r3]
     32a:	60fb      	str	r3, [r7, #12]
   return(result);
     32c:	68fb      	ldr	r3, [r7, #12]
}
     32e:	4618      	mov	r0, r3
     330:	3714      	adds	r7, #20
     332:	46bd      	mov	sp, r7
     334:	f85d 7b04 	ldr.w	r7, [sp], #4
     338:	4770      	bx	lr
     33a:	bf00      	nop

0000033c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     33c:	b580      	push	{r7, lr}
     33e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     344:	f2c4 0302 	movt	r3, #16386	; 0x4002
     348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     34c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     350:	6812      	ldr	r2, [r2, #0]
     352:	f042 0201 	orr.w	r2, r2, #1
     356:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     35c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     364:	f2c4 0302 	movt	r3, #16386	; 0x4002
     368:	6859      	ldr	r1, [r3, #4]
     36a:	2300      	movs	r3, #0
     36c:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     370:	400b      	ands	r3, r1
     372:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     378:	f2c4 0302 	movt	r3, #16386	; 0x4002
     37c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     380:	f2c4 0202 	movt	r2, #16386	; 0x4002
     384:	6812      	ldr	r2, [r2, #0]
     386:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     38a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     38e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     394:	f2c4 0302 	movt	r3, #16386	; 0x4002
     398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     39c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3a0:	6812      	ldr	r2, [r2, #0]
     3a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     3a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3b8:	6852      	ldr	r2, [r2, #4]
     3ba:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     3be:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c8:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     3cc:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     3ce:	f000 f8a7 	bl	520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     3d2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     3d6:	f2ce 0300 	movt	r3, #57344	; 0xe000
     3da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     3de:	609a      	str	r2, [r3, #8]
#endif
}
     3e0:	bd80      	pop	{r7, pc}
     3e2:	bf00      	nop

000003e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     3e4:	b480      	push	{r7}
     3e6:	b085      	sub	sp, #20
     3e8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     3ea:	2300      	movs	r3, #0
     3ec:	60fb      	str	r3, [r7, #12]
     3ee:	2300      	movs	r3, #0
     3f0:	60bb      	str	r3, [r7, #8]
     3f2:	2300      	movs	r3, #0
     3f4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     3f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3fe:	685b      	ldr	r3, [r3, #4]
     400:	f003 030c 	and.w	r3, r3, #12
     404:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     406:	68fb      	ldr	r3, [r7, #12]
     408:	2b04      	cmp	r3, #4
     40a:	d00d      	beq.n	428 <SystemCoreClockUpdate+0x44>
     40c:	2b08      	cmp	r3, #8
     40e:	d015      	beq.n	43c <SystemCoreClockUpdate+0x58>
     410:	2b00      	cmp	r3, #0
     412:	d15b      	bne.n	4cc <SystemCoreClockUpdate+0xe8>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     414:	f240 0300 	movw	r3, #0
     418:	f2c2 0300 	movt	r3, #8192	; 0x2000
     41c:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     420:	f2c0 027a 	movt	r2, #122	; 0x7a
     424:	601a      	str	r2, [r3, #0]
      break;
     426:	e05b      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     428:	f240 0300 	movw	r3, #0
     42c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     430:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     434:	f2c0 027a 	movt	r2, #122	; 0x7a
     438:	601a      	str	r2, [r3, #0]
      break;
     43a:	e051      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     440:	f2c4 0302 	movt	r3, #16386	; 0x4002
     444:	685b      	ldr	r3, [r3, #4]
     446:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     44a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     44c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     450:	f2c4 0302 	movt	r3, #16386	; 0x4002
     454:	685b      	ldr	r3, [r3, #4]
     456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     45a:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     45c:	68bb      	ldr	r3, [r7, #8]
     45e:	0c9b      	lsrs	r3, r3, #18
     460:	3302      	adds	r3, #2
     462:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     464:	687b      	ldr	r3, [r7, #4]
     466:	2b00      	cmp	r3, #0
     468:	d10c      	bne.n	484 <SystemCoreClockUpdate+0xa0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     470:	f2c0 033d 	movt	r3, #61	; 0x3d
     474:	fb03 f202 	mul.w	r2, r3, r2
     478:	f240 0300 	movw	r3, #0
     47c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     480:	601a      	str	r2, [r3, #0]
     482:	e022      	b.n	4ca <SystemCoreClockUpdate+0xe6>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     488:	f2c4 0302 	movt	r3, #16386	; 0x4002
     48c:	685b      	ldr	r3, [r3, #4]
     48e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     492:	2b00      	cmp	r3, #0
     494:	d00c      	beq.n	4b0 <SystemCoreClockUpdate+0xcc>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     496:	68ba      	ldr	r2, [r7, #8]
     498:	f44f 6310 	mov.w	r3, #2304	; 0x900
     49c:	f2c0 033d 	movt	r3, #61	; 0x3d
     4a0:	fb03 f202 	mul.w	r2, r3, r2
     4a4:	f240 0300 	movw	r3, #0
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	601a      	str	r2, [r3, #0]
     4ae:	e00c      	b.n	4ca <SystemCoreClockUpdate+0xe6>
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     4b0:	68ba      	ldr	r2, [r7, #8]
     4b2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     4b6:	f2c0 037a 	movt	r3, #122	; 0x7a
     4ba:	fb03 f202 	mul.w	r2, r3, r2
     4be:	f240 0300 	movw	r3, #0
     4c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4c6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4c8:	e00a      	b.n	4e0 <SystemCoreClockUpdate+0xfc>
     4ca:	e009      	b.n	4e0 <SystemCoreClockUpdate+0xfc>

    default:
      SystemCoreClock = HSI_VALUE;
     4cc:	f240 0300 	movw	r3, #0
     4d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d4:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     4d8:	f2c0 027a 	movt	r2, #122	; 0x7a
     4dc:	601a      	str	r2, [r3, #0]
      break;
     4de:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     4e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4e8:	685b      	ldr	r3, [r3, #4]
     4ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     4ee:	091a      	lsrs	r2, r3, #4
     4f0:	f240 0304 	movw	r3, #4
     4f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4f8:	5c9b      	ldrb	r3, [r3, r2]
     4fa:	b2db      	uxtb	r3, r3
     4fc:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     4fe:	f240 0300 	movw	r3, #0
     502:	f2c2 0300 	movt	r3, #8192	; 0x2000
     506:	681a      	ldr	r2, [r3, #0]
     508:	68fb      	ldr	r3, [r7, #12]
     50a:	40da      	lsrs	r2, r3
     50c:	f240 0300 	movw	r3, #0
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	601a      	str	r2, [r3, #0]
}
     516:	3714      	adds	r7, #20
     518:	46bd      	mov	sp, r7
     51a:	f85d 7b04 	ldr.w	r7, [sp], #4
     51e:	4770      	bx	lr

00000520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     520:	b580      	push	{r7, lr}
     522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     524:	f000 f802 	bl	52c <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     528:	bd80      	pop	{r7, pc}
     52a:	bf00      	nop

0000052c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     532:	2300      	movs	r3, #0
     534:	607b      	str	r3, [r7, #4]
     536:	2300      	movs	r3, #0
     538:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     53e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     546:	f2c4 0202 	movt	r2, #16386	; 0x4002
     54a:	6812      	ldr	r2, [r2, #0]
     54c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     550:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     556:	f2c4 0302 	movt	r3, #16386	; 0x4002
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     560:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     562:	687b      	ldr	r3, [r7, #4]
     564:	3301      	adds	r3, #1
     566:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     568:	683b      	ldr	r3, [r7, #0]
     56a:	2b00      	cmp	r3, #0
     56c:	d103      	bne.n	576 <SetSysClockTo72+0x4a>
     56e:	687b      	ldr	r3, [r7, #4]
     570:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     574:	d1ed      	bne.n	552 <SetSysClockTo72+0x26>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     57e:	681b      	ldr	r3, [r3, #0]
     580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     584:	2b00      	cmp	r3, #0
     586:	d002      	beq.n	58e <SetSysClockTo72+0x62>
  {
    HSEStatus = (uint32_t)0x01;
     588:	2301      	movs	r3, #1
     58a:	603b      	str	r3, [r7, #0]
     58c:	e001      	b.n	592 <SetSysClockTo72+0x66>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     58e:	2300      	movs	r3, #0
     590:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     592:	683b      	ldr	r3, [r7, #0]
     594:	2b01      	cmp	r3, #1
     596:	f040 8094 	bne.w	6c2 <SetSysClockTo72+0x196>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     59a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     59e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5aa:	6812      	ldr	r2, [r2, #0]
     5ac:	f042 0210 	orr.w	r2, r2, #16
     5b0:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     5b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5be:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5c2:	6812      	ldr	r2, [r2, #0]
     5c4:	f022 0203 	bic.w	r2, r2, #3
     5c8:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     5ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     5d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5da:	6812      	ldr	r2, [r2, #0]
     5dc:	f042 0202 	orr.w	r2, r2, #2
     5e0:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5f2:	6852      	ldr	r2, [r2, #4]
     5f4:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     5f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     602:	f2c4 0202 	movt	r2, #16386	; 0x4002
     606:	6852      	ldr	r2, [r2, #4]
     608:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     60e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     616:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61a:	6852      	ldr	r2, [r2, #4]
     61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     620:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     626:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     632:	6852      	ldr	r2, [r2, #4]
     634:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     638:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     63a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     63e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     646:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64a:	6852      	ldr	r2, [r2, #4]
     64c:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     650:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     656:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     65e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     662:	6812      	ldr	r2, [r2, #0]
     664:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     668:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     66a:	bf00      	nop
     66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     670:	f2c4 0302 	movt	r3, #16386	; 0x4002
     674:	681b      	ldr	r3, [r3, #0]
     676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     67a:	2b00      	cmp	r3, #0
     67c:	d0f6      	beq.n	66c <SetSysClockTo72+0x140>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     682:	f2c4 0302 	movt	r3, #16386	; 0x4002
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68e:	6852      	ldr	r2, [r2, #4]
     690:	f022 0203 	bic.w	r2, r2, #3
     694:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     69a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a6:	6852      	ldr	r2, [r2, #4]
     6a8:	f042 0202 	orr.w	r2, r2, #2
     6ac:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     6ae:	bf00      	nop
     6b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b8:	685b      	ldr	r3, [r3, #4]
     6ba:	f003 030c 	and.w	r3, r3, #12
     6be:	2b08      	cmp	r3, #8
     6c0:	d1f6      	bne.n	6b0 <SetSysClockTo72+0x184>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     6c2:	370c      	adds	r7, #12
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr
     6cc:	00018b24 	.word	0x00018b24
     6d0:	20000000 	.word	0x20000000
     6d4:	200005d8 	.word	0x200005d8
     6d8:	200005d8 	.word	0x200005d8
     6dc:	2004cdd8 	.word	0x2004cdd8

000006e0 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     6e0:	b480      	push	{r7}
     6e2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6f4:	6812      	ldr	r2, [r2, #0]
     6f6:	f042 0201 	orr.w	r2, r2, #1
     6fa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     6fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     700:	f2c4 0202 	movt	r2, #16386	; 0x4002
     704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     708:	f2c4 0302 	movt	r3, #16386	; 0x4002
     70c:	6859      	ldr	r1, [r3, #4]
     70e:	2300      	movs	r3, #0
     710:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     714:	400b      	ands	r3, r1
     716:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     71c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     724:	f2c4 0202 	movt	r2, #16386	; 0x4002
     728:	6812      	ldr	r2, [r2, #0]
     72a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     72e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     732:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     738:	f2c4 0302 	movt	r3, #16386	; 0x4002
     73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     740:	f2c4 0202 	movt	r2, #16386	; 0x4002
     744:	6812      	ldr	r2, [r2, #0]
     746:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     74a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     74c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     750:	f2c4 0302 	movt	r3, #16386	; 0x4002
     754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     758:	f2c4 0202 	movt	r2, #16386	; 0x4002
     75c:	6852      	ldr	r2, [r2, #4]
     75e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     762:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     768:	f2c4 0302 	movt	r3, #16386	; 0x4002
     76c:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     770:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     772:	46bd      	mov	sp, r7
     774:	f85d 7b04 	ldr.w	r7, [sp], #4
     778:	4770      	bx	lr
     77a:	bf00      	nop

0000077c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     77c:	b480      	push	{r7}
     77e:	b083      	sub	sp, #12
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     788:	f2c4 0302 	movt	r3, #16386	; 0x4002
     78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     790:	f2c4 0202 	movt	r2, #16386	; 0x4002
     794:	6812      	ldr	r2, [r2, #0]
     796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     79a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     79c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ac:	6812      	ldr	r2, [r2, #0]
     7ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7b2:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     7ba:	d003      	beq.n	7c4 <RCC_HSEConfig+0x48>
     7bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     7c0:	d00d      	beq.n	7de <RCC_HSEConfig+0x62>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;

    default:
      break;
     7c2:	e019      	b.n	7f8 <RCC_HSEConfig+0x7c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     7c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d4:	6812      	ldr	r2, [r2, #0]
     7d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     7da:	601a      	str	r2, [r3, #0]
      break;
     7dc:	e00c      	b.n	7f8 <RCC_HSEConfig+0x7c>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     7de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ee:	6812      	ldr	r2, [r2, #0]
     7f0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     7f4:	601a      	str	r2, [r3, #0]
      break;
     7f6:	bf00      	nop

    default:
      break;
  }
}
     7f8:	370c      	adds	r7, #12
     7fa:	46bd      	mov	sp, r7
     7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
     800:	4770      	bx	lr
     802:	bf00      	nop

00000804 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     80a:	2300      	movs	r3, #0
     80c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     80e:	2300      	movs	r3, #0
     810:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     812:	2300      	movs	r3, #0
     814:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     816:	2031      	movs	r0, #49	; 0x31
     818:	f000 fba2 	bl	f60 <RCC_GetFlagStatus>
     81c:	4603      	mov	r3, r0
     81e:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     820:	683b      	ldr	r3, [r7, #0]
     822:	3301      	adds	r3, #1
     824:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     826:	683b      	ldr	r3, [r7, #0]
     828:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     82c:	d002      	beq.n	834 <RCC_WaitForHSEStartUp+0x30>
     82e:	79bb      	ldrb	r3, [r7, #6]
     830:	2b00      	cmp	r3, #0
     832:	d0f0      	beq.n	816 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     834:	2031      	movs	r0, #49	; 0x31
     836:	f000 fb93 	bl	f60 <RCC_GetFlagStatus>
     83a:	4603      	mov	r3, r0
     83c:	2b00      	cmp	r3, #0
     83e:	d002      	beq.n	846 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
     840:	2301      	movs	r3, #1
     842:	71fb      	strb	r3, [r7, #7]
     844:	e001      	b.n	84a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
     846:	2300      	movs	r3, #0
     848:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     84a:	79fb      	ldrb	r3, [r7, #7]
}
     84c:	4618      	mov	r0, r3
     84e:	3708      	adds	r7, #8
     850:	46bd      	mov	sp, r7
     852:	bd80      	pop	{r7, pc}

00000854 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     854:	b480      	push	{r7}
     856:	b085      	sub	sp, #20
     858:	af00      	add	r7, sp, #0
     85a:	4603      	mov	r3, r0
     85c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     85e:	2300      	movs	r3, #0
     860:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     866:	f2c4 0302 	movt	r3, #16386	; 0x4002
     86a:	681b      	ldr	r3, [r3, #0]
     86c:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     874:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     876:	79fb      	ldrb	r3, [r7, #7]
     878:	00db      	lsls	r3, r3, #3
     87a:	68fa      	ldr	r2, [r7, #12]
     87c:	4313      	orrs	r3, r2
     87e:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     884:	f2c4 0302 	movt	r3, #16386	; 0x4002
     888:	68fa      	ldr	r2, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
}
     88c:	3714      	adds	r7, #20
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr
     896:	bf00      	nop

00000898 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     898:	b480      	push	{r7}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	4603      	mov	r3, r0
     8a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     8a2:	2300      	movs	r3, #0
     8a4:	f2c4 2342 	movt	r3, #16962	; 0x4242
     8a8:	79fa      	ldrb	r2, [r7, #7]
     8aa:	601a      	str	r2, [r3, #0]
}
     8ac:	370c      	adds	r7, #12
     8ae:	46bd      	mov	sp, r7
     8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     8b4:	4770      	bx	lr
     8b6:	bf00      	nop

000008b8 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     8b8:	b480      	push	{r7}
     8ba:	b085      	sub	sp, #20
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     8c2:	2300      	movs	r3, #0
     8c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     8c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ce:	685b      	ldr	r3, [r3, #4]
     8d0:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     8d8:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     8da:	687a      	ldr	r2, [r7, #4]
     8dc:	683b      	ldr	r3, [r7, #0]
     8de:	4313      	orrs	r3, r2
     8e0:	68fa      	ldr	r2, [r7, #12]
     8e2:	4313      	orrs	r3, r2
     8e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     8e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8ee:	68fa      	ldr	r2, [r7, #12]
     8f0:	605a      	str	r2, [r3, #4]
}
     8f2:	3714      	adds	r7, #20
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     906:	2360      	movs	r3, #96	; 0x60
     908:	f2c4 2342 	movt	r3, #16962	; 0x4242
     90c:	79fa      	ldrb	r2, [r7, #7]
     90e:	601a      	str	r2, [r3, #0]
}
     910:	370c      	adds	r7, #12
     912:	46bd      	mov	sp, r7
     914:	f85d 7b04 	ldr.w	r7, [sp], #4
     918:	4770      	bx	lr
     91a:	bf00      	nop

0000091c <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     91c:	b480      	push	{r7}
     91e:	b085      	sub	sp, #20
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     924:	2300      	movs	r3, #0
     926:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     92c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     930:	685b      	ldr	r3, [r3, #4]
     932:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     934:	68fb      	ldr	r3, [r7, #12]
     936:	f023 0303 	bic.w	r3, r3, #3
     93a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     93c:	68fa      	ldr	r2, [r7, #12]
     93e:	687b      	ldr	r3, [r7, #4]
     940:	4313      	orrs	r3, r2
     942:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     948:	f2c4 0302 	movt	r3, #16386	; 0x4002
     94c:	68fa      	ldr	r2, [r7, #12]
     94e:	605a      	str	r2, [r3, #4]
}
     950:	3714      	adds	r7, #20
     952:	46bd      	mov	sp, r7
     954:	f85d 7b04 	ldr.w	r7, [sp], #4
     958:	4770      	bx	lr
     95a:	bf00      	nop

0000095c <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     95c:	b480      	push	{r7}
     95e:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     964:	f2c4 0302 	movt	r3, #16386	; 0x4002
     968:	685b      	ldr	r3, [r3, #4]
     96a:	b2db      	uxtb	r3, r3
     96c:	f003 030c 	and.w	r3, r3, #12
     970:	b2db      	uxtb	r3, r3
}
     972:	4618      	mov	r0, r3
     974:	46bd      	mov	sp, r7
     976:	f85d 7b04 	ldr.w	r7, [sp], #4
     97a:	4770      	bx	lr

0000097c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     97c:	b480      	push	{r7}
     97e:	b085      	sub	sp, #20
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     984:	2300      	movs	r3, #0
     986:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     990:	685b      	ldr	r3, [r3, #4]
     992:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     994:	68fb      	ldr	r3, [r7, #12]
     996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     99a:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     99c:	68fa      	ldr	r2, [r7, #12]
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	4313      	orrs	r3, r2
     9a2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ac:	68fa      	ldr	r2, [r7, #12]
     9ae:	605a      	str	r2, [r3, #4]
}
     9b0:	3714      	adds	r7, #20
     9b2:	46bd      	mov	sp, r7
     9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9b8:	4770      	bx	lr
     9ba:	bf00      	nop

000009bc <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     9bc:	b480      	push	{r7}
     9be:	b085      	sub	sp, #20
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9c4:	2300      	movs	r3, #0
     9c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     9c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9d0:	685b      	ldr	r3, [r3, #4]
     9d2:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     9da:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     9dc:	68fa      	ldr	r2, [r7, #12]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	4313      	orrs	r3, r2
     9e2:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ec:	68fa      	ldr	r2, [r7, #12]
     9ee:	605a      	str	r2, [r3, #4]
}
     9f0:	3714      	adds	r7, #20
     9f2:	46bd      	mov	sp, r7
     9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     9fc:	b480      	push	{r7}
     9fe:	b085      	sub	sp, #20
     a00:	af00      	add	r7, sp, #0
     a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a04:	2300      	movs	r3, #0
     a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a10:	685b      	ldr	r3, [r3, #4]
     a12:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     a14:	68fb      	ldr	r3, [r7, #12]
     a16:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     a1a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	00db      	lsls	r3, r3, #3
     a20:	68fa      	ldr	r2, [r7, #12]
     a22:	4313      	orrs	r3, r2
     a24:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	605a      	str	r2, [r3, #4]
}
     a32:	3714      	adds	r7, #20
     a34:	46bd      	mov	sp, r7
     a36:	f85d 7b04 	ldr.w	r7, [sp], #4
     a3a:	4770      	bx	lr

00000a3c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     a3c:	b480      	push	{r7}
     a3e:	b083      	sub	sp, #12
     a40:	af00      	add	r7, sp, #0
     a42:	4602      	mov	r2, r0
     a44:	460b      	mov	r3, r1
     a46:	71fa      	strb	r2, [r7, #7]
     a48:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a4a:	79bb      	ldrb	r3, [r7, #6]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d00e      	beq.n	a6e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     a50:	f241 0309 	movw	r3, #4105	; 0x1009
     a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a58:	f241 0209 	movw	r2, #4105	; 0x1009
     a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	b2d1      	uxtb	r1, r2
     a64:	79fa      	ldrb	r2, [r7, #7]
     a66:	430a      	orrs	r2, r1
     a68:	b2d2      	uxtb	r2, r2
     a6a:	701a      	strb	r2, [r3, #0]
     a6c:	e00f      	b.n	a8e <RCC_ITConfig+0x52>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     a6e:	f241 0309 	movw	r3, #4105	; 0x1009
     a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a76:	f241 0209 	movw	r2, #4105	; 0x1009
     a7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	b2d1      	uxtb	r1, r2
     a82:	79fa      	ldrb	r2, [r7, #7]
     a84:	43d2      	mvns	r2, r2
     a86:	b2d2      	uxtb	r2, r2
     a88:	400a      	ands	r2, r1
     a8a:	b2d2      	uxtb	r2, r2
     a8c:	701a      	strb	r2, [r3, #0]
  }
}
     a8e:	370c      	adds	r7, #12
     a90:	46bd      	mov	sp, r7
     a92:	f85d 7b04 	ldr.w	r7, [sp], #4
     a96:	4770      	bx	lr

00000a98 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     a98:	b480      	push	{r7}
     a9a:	b083      	sub	sp, #12
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     aa0:	23d8      	movs	r3, #216	; 0xd8
     aa2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	601a      	str	r2, [r3, #0]
}
     aaa:	370c      	adds	r7, #12
     aac:	46bd      	mov	sp, r7
     aae:	f85d 7b04 	ldr.w	r7, [sp], #4
     ab2:	4770      	bx	lr

00000ab4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     ab4:	b480      	push	{r7}
     ab6:	b085      	sub	sp, #20
     ab8:	af00      	add	r7, sp, #0
     aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     abc:	2300      	movs	r3, #0
     abe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac8:	685b      	ldr	r3, [r3, #4]
     aca:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     acc:	68fb      	ldr	r3, [r7, #12]
     ace:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     ad2:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     ad4:	68fa      	ldr	r2, [r7, #12]
     ad6:	687b      	ldr	r3, [r7, #4]
     ad8:	4313      	orrs	r3, r2
     ada:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ae0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	605a      	str	r2, [r3, #4]
}
     ae8:	3714      	adds	r7, #20
     aea:	46bd      	mov	sp, r7
     aec:	f85d 7b04 	ldr.w	r7, [sp], #4
     af0:	4770      	bx	lr
     af2:	bf00      	nop

00000af4 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     af4:	b480      	push	{r7}
     af6:	b083      	sub	sp, #12
     af8:	af00      	add	r7, sp, #0
     afa:	4603      	mov	r3, r0
     afc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     afe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b0a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b12:	2200      	movs	r2, #0
     b14:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     b16:	79fb      	ldrb	r3, [r7, #7]
     b18:	2b01      	cmp	r3, #1
     b1a:	d002      	beq.n	b22 <RCC_LSEConfig+0x2e>
     b1c:	2b04      	cmp	r3, #4
     b1e:	d007      	beq.n	b30 <RCC_LSEConfig+0x3c>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;

    default:
      break;
     b20:	e00d      	b.n	b3e <RCC_LSEConfig+0x4a>
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     b22:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
      break;
     b2e:	e006      	b.n	b3e <RCC_LSEConfig+0x4a>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     b30:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b38:	2205      	movs	r2, #5
     b3a:	701a      	strb	r2, [r3, #0]
      break;
     b3c:	bf00      	nop

    default:
      break;
  }
}
     b3e:	370c      	adds	r7, #12
     b40:	46bd      	mov	sp, r7
     b42:	f85d 7b04 	ldr.w	r7, [sp], #4
     b46:	4770      	bx	lr

00000b48 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     b48:	b480      	push	{r7}
     b4a:	b083      	sub	sp, #12
     b4c:	af00      	add	r7, sp, #0
     b4e:	4603      	mov	r3, r0
     b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     b52:	f44f 6390 	mov.w	r3, #1152	; 0x480
     b56:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b5a:	79fa      	ldrb	r2, [r7, #7]
     b5c:	601a      	str	r2, [r3, #0]
}
     b5e:	370c      	adds	r7, #12
     b60:	46bd      	mov	sp, r7
     b62:	f85d 7b04 	ldr.w	r7, [sp], #4
     b66:	4770      	bx	lr

00000b68 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     b68:	b480      	push	{r7}
     b6a:	b083      	sub	sp, #12
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b80:	6a11      	ldr	r1, [r2, #32]
     b82:	687a      	ldr	r2, [r7, #4]
     b84:	430a      	orrs	r2, r1
     b86:	621a      	str	r2, [r3, #32]
}
     b88:	370c      	adds	r7, #12
     b8a:	46bd      	mov	sp, r7
     b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
     b90:	4770      	bx	lr
     b92:	bf00      	nop

00000b94 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     b94:	b480      	push	{r7}
     b96:	b083      	sub	sp, #12
     b98:	af00      	add	r7, sp, #0
     b9a:	4603      	mov	r3, r0
     b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     b9e:	f240 433c 	movw	r3, #1084	; 0x43c
     ba2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     ba6:	79fa      	ldrb	r2, [r7, #7]
     ba8:	601a      	str	r2, [r3, #0]
}
     baa:	370c      	adds	r7, #12
     bac:	46bd      	mov	sp, r7
     bae:	f85d 7b04 	ldr.w	r7, [sp], #4
     bb2:	4770      	bx	lr

00000bb4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     bb4:	b480      	push	{r7}
     bb6:	b087      	sub	sp, #28
     bb8:	af00      	add	r7, sp, #0
     bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	617b      	str	r3, [r7, #20]
     bc0:	2300      	movs	r3, #0
     bc2:	613b      	str	r3, [r7, #16]
     bc4:	2300      	movs	r3, #0
     bc6:	60fb      	str	r3, [r7, #12]
     bc8:	2300      	movs	r3, #0
     bca:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     bd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bd4:	685b      	ldr	r3, [r3, #4]
     bd6:	f003 030c 	and.w	r3, r3, #12
     bda:	617b      	str	r3, [r7, #20]

  switch (tmp)
     bdc:	697b      	ldr	r3, [r7, #20]
     bde:	2b04      	cmp	r3, #4
     be0:	d00a      	beq.n	bf8 <RCC_GetClocksFreq+0x44>
     be2:	2b08      	cmp	r3, #8
     be4:	d00f      	beq.n	c06 <RCC_GetClocksFreq+0x52>
     be6:	2b00      	cmp	r3, #0
     be8:	d14c      	bne.n	c84 <RCC_GetClocksFreq+0xd0>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     bea:	687a      	ldr	r2, [r7, #4]
     bec:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bf0:	f2c0 037a 	movt	r3, #122	; 0x7a
     bf4:	6013      	str	r3, [r2, #0]
      break;
     bf6:	e04c      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     bf8:	687a      	ldr	r2, [r7, #4]
     bfa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     bfe:	f2c0 037a 	movt	r3, #122	; 0x7a
     c02:	6013      	str	r3, [r2, #0]
      break;
     c04:	e045      	b.n	c92 <RCC_GetClocksFreq+0xde>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c0e:	685b      	ldr	r3, [r3, #4]
     c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     c14:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c1e:	685b      	ldr	r3, [r3, #4]
     c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     c24:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     c26:	693b      	ldr	r3, [r7, #16]
     c28:	0c9b      	lsrs	r3, r3, #18
     c2a:	3302      	adds	r3, #2
     c2c:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     c2e:	68fb      	ldr	r3, [r7, #12]
     c30:	2b00      	cmp	r3, #0
     c32:	d109      	bne.n	c48 <RCC_GetClocksFreq+0x94>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     c34:	693a      	ldr	r2, [r7, #16]
     c36:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c3a:	f2c0 033d 	movt	r3, #61	; 0x3d
     c3e:	fb03 f202 	mul.w	r2, r3, r2
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	601a      	str	r2, [r3, #0]
     c46:	e01c      	b.n	c82 <RCC_GetClocksFreq+0xce>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c50:	685b      	ldr	r3, [r3, #4]
     c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <RCC_GetClocksFreq+0xba>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     c5a:	693a      	ldr	r2, [r7, #16]
     c5c:	f44f 6310 	mov.w	r3, #2304	; 0x900
     c60:	f2c0 033d 	movt	r3, #61	; 0x3d
     c64:	fb03 f202 	mul.w	r2, r3, r2
     c68:	687b      	ldr	r3, [r7, #4]
     c6a:	601a      	str	r2, [r3, #0]
     c6c:	e009      	b.n	c82 <RCC_GetClocksFreq+0xce>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     c6e:	693a      	ldr	r2, [r7, #16]
     c70:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c74:	f2c0 037a 	movt	r3, #122	; 0x7a
     c78:	fb03 f202 	mul.w	r2, r3, r2
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     c80:	e007      	b.n	c92 <RCC_GetClocksFreq+0xde>
     c82:	e006      	b.n	c92 <RCC_GetClocksFreq+0xde>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c84:	687a      	ldr	r2, [r7, #4]
     c86:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     c8a:	f2c0 037a 	movt	r3, #122	; 0x7a
     c8e:	6013      	str	r3, [r2, #0]
      break;
     c90:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9a:	685b      	ldr	r3, [r3, #4]
     c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     ca0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     ca2:	697b      	ldr	r3, [r7, #20]
     ca4:	091b      	lsrs	r3, r3, #4
     ca6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     ca8:	f240 0314 	movw	r3, #20
     cac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb0:	697a      	ldr	r2, [r7, #20]
     cb2:	4413      	add	r3, r2
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	b2db      	uxtb	r3, r3
     cb8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	681a      	ldr	r2, [r3, #0]
     cbe:	68bb      	ldr	r3, [r7, #8]
     cc0:	40da      	lsrs	r2, r3
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     cd4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     cd6:	697b      	ldr	r3, [r7, #20]
     cd8:	0a1b      	lsrs	r3, r3, #8
     cda:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     cdc:	f240 0314 	movw	r3, #20
     ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ce4:	697a      	ldr	r2, [r7, #20]
     ce6:	4413      	add	r3, r2
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	685a      	ldr	r2, [r3, #4]
     cf2:	68bb      	ldr	r3, [r7, #8]
     cf4:	40da      	lsrs	r2, r3
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     d08:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     d0a:	697b      	ldr	r3, [r7, #20]
     d0c:	0adb      	lsrs	r3, r3, #11
     d0e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d10:	f240 0314 	movw	r3, #20
     d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d18:	697a      	ldr	r2, [r7, #20]
     d1a:	4413      	add	r3, r2
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	b2db      	uxtb	r3, r3
     d20:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     d22:	687b      	ldr	r3, [r7, #4]
     d24:	685a      	ldr	r2, [r3, #4]
     d26:	68bb      	ldr	r3, [r7, #8]
     d28:	40da      	lsrs	r2, r3
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d32:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d36:	685b      	ldr	r3, [r3, #4]
     d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     d3c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     d3e:	697b      	ldr	r3, [r7, #20]
     d40:	0b9b      	lsrs	r3, r3, #14
     d42:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     d44:	f240 0324 	movw	r3, #36	; 0x24
     d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4c:	697a      	ldr	r2, [r7, #20]
     d4e:	4413      	add	r3, r2
     d50:	781b      	ldrb	r3, [r3, #0]
     d52:	b2db      	uxtb	r3, r3
     d54:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	68da      	ldr	r2, [r3, #12]
     d5a:	68bb      	ldr	r3, [r7, #8]
     d5c:	fbb2 f2f3 	udiv	r2, r2, r3
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	611a      	str	r2, [r3, #16]
}
     d64:	371c      	adds	r7, #28
     d66:	46bd      	mov	sp, r7
     d68:	f85d 7b04 	ldr.w	r7, [sp], #4
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     d70:	b480      	push	{r7}
     d72:	b083      	sub	sp, #12
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	460b      	mov	r3, r1
     d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     d7c:	78fb      	ldrb	r3, [r7, #3]
     d7e:	2b00      	cmp	r3, #0
     d80:	d00c      	beq.n	d9c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     d8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     d92:	6951      	ldr	r1, [r2, #20]
     d94:	687a      	ldr	r2, [r7, #4]
     d96:	430a      	orrs	r2, r1
     d98:	615a      	str	r2, [r3, #20]
     d9a:	e00c      	b.n	db6 <RCC_AHBPeriphClockCmd+0x46>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     da8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dac:	6951      	ldr	r1, [r2, #20]
     dae:	687a      	ldr	r2, [r7, #4]
     db0:	43d2      	mvns	r2, r2
     db2:	400a      	ands	r2, r1
     db4:	615a      	str	r2, [r3, #20]
  }
}
     db6:	370c      	adds	r7, #12
     db8:	46bd      	mov	sp, r7
     dba:	f85d 7b04 	ldr.w	r7, [sp], #4
     dbe:	4770      	bx	lr

00000dc0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
     dc8:	460b      	mov	r3, r1
     dca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dcc:	78fb      	ldrb	r3, [r7, #3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d00c      	beq.n	dec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     dd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     dde:	f2c4 0202 	movt	r2, #16386	; 0x4002
     de2:	6991      	ldr	r1, [r2, #24]
     de4:	687a      	ldr	r2, [r7, #4]
     de6:	430a      	orrs	r2, r1
     de8:	619a      	str	r2, [r3, #24]
     dea:	e00c      	b.n	e06 <RCC_APB2PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     df8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     dfc:	6991      	ldr	r1, [r2, #24]
     dfe:	687a      	ldr	r2, [r7, #4]
     e00:	43d2      	mvns	r2, r2
     e02:	400a      	ands	r2, r1
     e04:	619a      	str	r2, [r3, #24]
  }
}
     e06:	370c      	adds	r7, #12
     e08:	46bd      	mov	sp, r7
     e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e0e:	4770      	bx	lr

00000e10 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     e10:	b480      	push	{r7}
     e12:	b083      	sub	sp, #12
     e14:	af00      	add	r7, sp, #0
     e16:	6078      	str	r0, [r7, #4]
     e18:	460b      	mov	r3, r1
     e1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e1c:	78fb      	ldrb	r3, [r7, #3]
     e1e:	2b00      	cmp	r3, #0
     e20:	d00c      	beq.n	e3c <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e2e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e32:	69d1      	ldr	r1, [r2, #28]
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	430a      	orrs	r2, r1
     e38:	61da      	str	r2, [r3, #28]
     e3a:	e00c      	b.n	e56 <RCC_APB1PeriphClockCmd+0x46>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e48:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e4c:	69d1      	ldr	r1, [r2, #28]
     e4e:	687a      	ldr	r2, [r7, #4]
     e50:	43d2      	mvns	r2, r2
     e52:	400a      	ands	r2, r1
     e54:	61da      	str	r2, [r3, #28]
  }
}
     e56:	370c      	adds	r7, #12
     e58:	46bd      	mov	sp, r7
     e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     e5e:	4770      	bx	lr

00000e60 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e60:	b480      	push	{r7}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	460b      	mov	r3, r1
     e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e6c:	78fb      	ldrb	r3, [r7, #3]
     e6e:	2b00      	cmp	r3, #0
     e70:	d00c      	beq.n	e8c <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e76:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e82:	68d1      	ldr	r1, [r2, #12]
     e84:	687a      	ldr	r2, [r7, #4]
     e86:	430a      	orrs	r2, r1
     e88:	60da      	str	r2, [r3, #12]
     e8a:	e00c      	b.n	ea6 <RCC_APB2PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e98:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e9c:	68d1      	ldr	r1, [r2, #12]
     e9e:	687a      	ldr	r2, [r7, #4]
     ea0:	43d2      	mvns	r2, r2
     ea2:	400a      	ands	r2, r1
     ea4:	60da      	str	r2, [r3, #12]
  }
}
     ea6:	370c      	adds	r7, #12
     ea8:	46bd      	mov	sp, r7
     eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
     eae:	4770      	bx	lr

00000eb0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     eb0:	b480      	push	{r7}
     eb2:	b083      	sub	sp, #12
     eb4:	af00      	add	r7, sp, #0
     eb6:	6078      	str	r0, [r7, #4]
     eb8:	460b      	mov	r3, r1
     eba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ebc:	78fb      	ldrb	r3, [r7, #3]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d00c      	beq.n	edc <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ec6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ece:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ed2:	6911      	ldr	r1, [r2, #16]
     ed4:	687a      	ldr	r2, [r7, #4]
     ed6:	430a      	orrs	r2, r1
     ed8:	611a      	str	r2, [r3, #16]
     eda:	e00c      	b.n	ef6 <RCC_APB1PeriphResetCmd+0x46>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ee8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     eec:	6911      	ldr	r1, [r2, #16]
     eee:	687a      	ldr	r2, [r7, #4]
     ef0:	43d2      	mvns	r2, r2
     ef2:	400a      	ands	r2, r1
     ef4:	611a      	str	r2, [r3, #16]
  }
}
     ef6:	370c      	adds	r7, #12
     ef8:	46bd      	mov	sp, r7
     efa:	f85d 7b04 	ldr.w	r7, [sp], #4
     efe:	4770      	bx	lr

00000f00 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     f00:	b480      	push	{r7}
     f02:	b083      	sub	sp, #12
     f04:	af00      	add	r7, sp, #0
     f06:	4603      	mov	r3, r0
     f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     f0a:	f44f 6388 	mov.w	r3, #1088	; 0x440
     f0e:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f12:	79fa      	ldrb	r2, [r7, #7]
     f14:	601a      	str	r2, [r3, #0]
}
     f16:	370c      	adds	r7, #12
     f18:	46bd      	mov	sp, r7
     f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f1e:	4770      	bx	lr

00000f20 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     f20:	b480      	push	{r7}
     f22:	b083      	sub	sp, #12
     f24:	af00      	add	r7, sp, #0
     f26:	4603      	mov	r3, r0
     f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     f2a:	234c      	movs	r3, #76	; 0x4c
     f2c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     f30:	79fa      	ldrb	r2, [r7, #7]
     f32:	601a      	str	r2, [r3, #0]
}
     f34:	370c      	adds	r7, #12
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
     f40:	b480      	push	{r7}
     f42:	b083      	sub	sp, #12
     f44:	af00      	add	r7, sp, #0
     f46:	4603      	mov	r3, r0
     f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
     f4a:	f241 0307 	movw	r3, #4103	; 0x1007
     f4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f52:	79fa      	ldrb	r2, [r7, #7]
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	370c      	adds	r7, #12
     f58:	46bd      	mov	sp, r7
     f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
     f5e:	4770      	bx	lr

00000f60 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
     f60:	b480      	push	{r7}
     f62:	b087      	sub	sp, #28
     f64:	af00      	add	r7, sp, #0
     f66:	4603      	mov	r3, r0
     f68:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
     f6a:	2300      	movs	r3, #0
     f6c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
     f6e:	2300      	movs	r3, #0
     f70:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
     f72:	2300      	movs	r3, #0
     f74:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
     f76:	79fb      	ldrb	r3, [r7, #7]
     f78:	095b      	lsrs	r3, r3, #5
     f7a:	b2db      	uxtb	r3, r3
     f7c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
     f7e:	68fb      	ldr	r3, [r7, #12]
     f80:	2b01      	cmp	r3, #1
     f82:	d106      	bne.n	f92 <RCC_GetFlagStatus+0x32>
  {
    statusreg = RCC->CR;
     f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	617b      	str	r3, [r7, #20]
     f90:	e00f      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
     f92:	68fb      	ldr	r3, [r7, #12]
     f94:	2b02      	cmp	r3, #2
     f96:	d106      	bne.n	fa6 <RCC_GetFlagStatus+0x46>
  {
    statusreg = RCC->BDCR;
     f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fa0:	6a1b      	ldr	r3, [r3, #32]
     fa2:	617b      	str	r3, [r7, #20]
     fa4:	e005      	b.n	fb2 <RCC_GetFlagStatus+0x52>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
     fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     faa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     fb0:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
     fb2:	79fb      	ldrb	r3, [r7, #7]
     fb4:	f003 031f 	and.w	r3, r3, #31
     fb8:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
     fba:	68fb      	ldr	r3, [r7, #12]
     fbc:	697a      	ldr	r2, [r7, #20]
     fbe:	fa22 f303 	lsr.w	r3, r2, r3
     fc2:	f003 0301 	and.w	r3, r3, #1
     fc6:	2b00      	cmp	r3, #0
     fc8:	d002      	beq.n	fd0 <RCC_GetFlagStatus+0x70>
  {
    bitstatus = SET;
     fca:	2301      	movs	r3, #1
     fcc:	74fb      	strb	r3, [r7, #19]
     fce:	e001      	b.n	fd4 <RCC_GetFlagStatus+0x74>
  }
  else
  {
    bitstatus = RESET;
     fd0:	2300      	movs	r3, #0
     fd2:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
     fd4:	7cfb      	ldrb	r3, [r7, #19]
}
     fd6:	4618      	mov	r0, r3
     fd8:	371c      	adds	r7, #28
     fda:	46bd      	mov	sp, r7
     fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop

00000fe4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
     fe4:	b480      	push	{r7}
     fe6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
     fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fec:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ff4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ffa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     ffe:	625a      	str	r2, [r3, #36]	; 0x24
}
    1000:	46bd      	mov	sp, r7
    1002:	f85d 7b04 	ldr.w	r7, [sp], #4
    1006:	4770      	bx	lr

00001008 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1008:	b480      	push	{r7}
    100a:	b085      	sub	sp, #20
    100c:	af00      	add	r7, sp, #0
    100e:	4603      	mov	r3, r0
    1010:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1012:	2300      	movs	r3, #0
    1014:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    101a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    101e:	689a      	ldr	r2, [r3, #8]
    1020:	79fb      	ldrb	r3, [r7, #7]
    1022:	4013      	ands	r3, r2
    1024:	2b00      	cmp	r3, #0
    1026:	d002      	beq.n	102e <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    1028:	2301      	movs	r3, #1
    102a:	73fb      	strb	r3, [r7, #15]
    102c:	e001      	b.n	1032 <RCC_GetITStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    102e:	2300      	movs	r3, #0
    1030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1032:	7bfb      	ldrb	r3, [r7, #15]
}
    1034:	4618      	mov	r0, r3
    1036:	3714      	adds	r7, #20
    1038:	46bd      	mov	sp, r7
    103a:	f85d 7b04 	ldr.w	r7, [sp], #4
    103e:	4770      	bx	lr

00001040 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1040:	b480      	push	{r7}
    1042:	b083      	sub	sp, #12
    1044:	af00      	add	r7, sp, #0
    1046:	4603      	mov	r3, r0
    1048:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    104a:	f241 030a 	movw	r3, #4106	; 0x100a
    104e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1052:	79fa      	ldrb	r2, [r7, #7]
    1054:	701a      	strb	r2, [r3, #0]
}
    1056:	370c      	adds	r7, #12
    1058:	46bd      	mov	sp, r7
    105a:	f85d 7b04 	ldr.w	r7, [sp], #4
    105e:	4770      	bx	lr

00001060 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1060:	b580      	push	{r7, lr}
    1062:	b082      	sub	sp, #8
    1064:	af00      	add	r7, sp, #0
    1066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1068:	687a      	ldr	r2, [r7, #4]
    106a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    106e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1072:	429a      	cmp	r2, r3
    1074:	d108      	bne.n	1088 <GPIO_DeInit+0x28>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1076:	2004      	movs	r0, #4
    1078:	2101      	movs	r1, #1
    107a:	f7ff fef1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    107e:	2004      	movs	r0, #4
    1080:	2100      	movs	r1, #0
    1082:	f7ff feed 	bl	e60 <RCC_APB2PeriphResetCmd>
    1086:	e060      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOB)
    1088:	687a      	ldr	r2, [r7, #4]
    108a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    108e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1092:	429a      	cmp	r2, r3
    1094:	d108      	bne.n	10a8 <GPIO_DeInit+0x48>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1096:	2008      	movs	r0, #8
    1098:	2101      	movs	r1, #1
    109a:	f7ff fee1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    109e:	2008      	movs	r0, #8
    10a0:	2100      	movs	r1, #0
    10a2:	f7ff fedd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10a6:	e050      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOC)
    10a8:	687a      	ldr	r2, [r7, #4]
    10aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10b2:	429a      	cmp	r2, r3
    10b4:	d108      	bne.n	10c8 <GPIO_DeInit+0x68>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    10b6:	2010      	movs	r0, #16
    10b8:	2101      	movs	r1, #1
    10ba:	f7ff fed1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    10be:	2010      	movs	r0, #16
    10c0:	2100      	movs	r1, #0
    10c2:	f7ff fecd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10c6:	e040      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOD)
    10c8:	687a      	ldr	r2, [r7, #4]
    10ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    10ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10d2:	429a      	cmp	r2, r3
    10d4:	d108      	bne.n	10e8 <GPIO_DeInit+0x88>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    10d6:	2020      	movs	r0, #32
    10d8:	2101      	movs	r1, #1
    10da:	f7ff fec1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    10de:	2020      	movs	r0, #32
    10e0:	2100      	movs	r1, #0
    10e2:	f7ff febd 	bl	e60 <RCC_APB2PeriphResetCmd>
    10e6:	e030      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOE)
    10e8:	687a      	ldr	r2, [r7, #4]
    10ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    10ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
    10f2:	429a      	cmp	r2, r3
    10f4:	d108      	bne.n	1108 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    10f6:	2040      	movs	r0, #64	; 0x40
    10f8:	2101      	movs	r1, #1
    10fa:	f7ff feb1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    10fe:	2040      	movs	r0, #64	; 0x40
    1100:	2100      	movs	r1, #0
    1102:	f7ff fead 	bl	e60 <RCC_APB2PeriphResetCmd>
    1106:	e020      	b.n	114a <GPIO_DeInit+0xea>
  }
  else if (GPIOx == GPIOF)
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    110e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1112:	429a      	cmp	r2, r3
    1114:	d108      	bne.n	1128 <GPIO_DeInit+0xc8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1116:	2080      	movs	r0, #128	; 0x80
    1118:	2101      	movs	r1, #1
    111a:	f7ff fea1 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    111e:	2080      	movs	r0, #128	; 0x80
    1120:	2100      	movs	r1, #0
    1122:	f7ff fe9d 	bl	e60 <RCC_APB2PeriphResetCmd>
    1126:	e010      	b.n	114a <GPIO_DeInit+0xea>
  }
  else
  {
    if (GPIOx == GPIOG)
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    112e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1132:	429a      	cmp	r2, r3
    1134:	d109      	bne.n	114a <GPIO_DeInit+0xea>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1136:	f44f 7080 	mov.w	r0, #256	; 0x100
    113a:	2101      	movs	r1, #1
    113c:	f7ff fe90 	bl	e60 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1140:	f44f 7080 	mov.w	r0, #256	; 0x100
    1144:	2100      	movs	r1, #0
    1146:	f7ff fe8b 	bl	e60 <RCC_APB2PeriphResetCmd>
    }
  }
}
    114a:	3708      	adds	r7, #8
    114c:	46bd      	mov	sp, r7
    114e:	bd80      	pop	{r7, pc}

00001150 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1150:	b580      	push	{r7, lr}
    1152:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1154:	2001      	movs	r0, #1
    1156:	2101      	movs	r1, #1
    1158:	f7ff fe82 	bl	e60 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    115c:	2001      	movs	r0, #1
    115e:	2100      	movs	r1, #0
    1160:	f7ff fe7e 	bl	e60 <RCC_APB2PeriphResetCmd>
}
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop

00001168 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1168:	b480      	push	{r7}
    116a:	b089      	sub	sp, #36	; 0x24
    116c:	af00      	add	r7, sp, #0
    116e:	6078      	str	r0, [r7, #4]
    1170:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1172:	2300      	movs	r3, #0
    1174:	61fb      	str	r3, [r7, #28]
    1176:	2300      	movs	r3, #0
    1178:	613b      	str	r3, [r7, #16]
    117a:	2300      	movs	r3, #0
    117c:	61bb      	str	r3, [r7, #24]
    117e:	2300      	movs	r3, #0
    1180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1182:	2300      	movs	r3, #0
    1184:	617b      	str	r3, [r7, #20]
    1186:	2300      	movs	r3, #0
    1188:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    118a:	683b      	ldr	r3, [r7, #0]
    118c:	78db      	ldrb	r3, [r3, #3]
    118e:	f003 030f 	and.w	r3, r3, #15
    1192:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	78db      	ldrb	r3, [r3, #3]
    1198:	f003 0310 	and.w	r3, r3, #16
    119c:	2b00      	cmp	r3, #0
    119e:	d004      	beq.n	11aa <GPIO_Init+0x42>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    11a0:	683b      	ldr	r3, [r7, #0]
    11a2:	789b      	ldrb	r3, [r3, #2]
    11a4:	69fa      	ldr	r2, [r7, #28]
    11a6:	4313      	orrs	r3, r2
    11a8:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    11aa:	683b      	ldr	r3, [r7, #0]
    11ac:	881b      	ldrh	r3, [r3, #0]
    11ae:	b2db      	uxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	d044      	beq.n	123e <GPIO_Init+0xd6>
  {
    tmpreg = GPIOx->CRL;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    11ba:	2300      	movs	r3, #0
    11bc:	61bb      	str	r3, [r7, #24]
    11be:	e038      	b.n	1232 <GPIO_Init+0xca>
    {
      pos = ((uint32_t)0x01) << pinpos;
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	2201      	movs	r2, #1
    11c4:	fa02 f303 	lsl.w	r3, r2, r3
    11c8:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    11ca:	683b      	ldr	r3, [r7, #0]
    11cc:	881b      	ldrh	r3, [r3, #0]
    11ce:	461a      	mov	r2, r3
    11d0:	68fb      	ldr	r3, [r7, #12]
    11d2:	4013      	ands	r3, r2
    11d4:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    11d6:	693a      	ldr	r2, [r7, #16]
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	429a      	cmp	r2, r3
    11dc:	d126      	bne.n	122c <GPIO_Init+0xc4>
      {
        pos = pinpos << 2;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    11e4:	68fb      	ldr	r3, [r7, #12]
    11e6:	220f      	movs	r2, #15
    11e8:	fa02 f303 	lsl.w	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    11ee:	68bb      	ldr	r3, [r7, #8]
    11f0:	43db      	mvns	r3, r3
    11f2:	697a      	ldr	r2, [r7, #20]
    11f4:	4013      	ands	r3, r2
    11f6:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    11f8:	68fb      	ldr	r3, [r7, #12]
    11fa:	69fa      	ldr	r2, [r7, #28]
    11fc:	fa02 f303 	lsl.w	r3, r2, r3
    1200:	697a      	ldr	r2, [r7, #20]
    1202:	4313      	orrs	r3, r2
    1204:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1206:	683b      	ldr	r3, [r7, #0]
    1208:	78db      	ldrb	r3, [r3, #3]
    120a:	2b28      	cmp	r3, #40	; 0x28
    120c:	d105      	bne.n	121a <GPIO_Init+0xb2>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    120e:	69bb      	ldr	r3, [r7, #24]
    1210:	2201      	movs	r2, #1
    1212:	409a      	lsls	r2, r3
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	615a      	str	r2, [r3, #20]
    1218:	e008      	b.n	122c <GPIO_Init+0xc4>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    121a:	683b      	ldr	r3, [r7, #0]
    121c:	78db      	ldrb	r3, [r3, #3]
    121e:	2b48      	cmp	r3, #72	; 0x48
    1220:	d104      	bne.n	122c <GPIO_Init+0xc4>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	2201      	movs	r2, #1
    1226:	409a      	lsls	r2, r3
    1228:	687b      	ldr	r3, [r7, #4]
    122a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	3301      	adds	r3, #1
    1230:	61bb      	str	r3, [r7, #24]
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2b07      	cmp	r3, #7
    1236:	d9c3      	bls.n	11c0 <GPIO_Init+0x58>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	697a      	ldr	r2, [r7, #20]
    123c:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	2bff      	cmp	r3, #255	; 0xff
    1244:	d946      	bls.n	12d4 <GPIO_Init+0x16c>
  {
    tmpreg = GPIOx->CRH;
    1246:	687b      	ldr	r3, [r7, #4]
    1248:	685b      	ldr	r3, [r3, #4]
    124a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    124c:	2300      	movs	r3, #0
    124e:	61bb      	str	r3, [r7, #24]
    1250:	e03a      	b.n	12c8 <GPIO_Init+0x160>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	3308      	adds	r3, #8
    1256:	2201      	movs	r2, #1
    1258:	fa02 f303 	lsl.w	r3, r2, r3
    125c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	4013      	ands	r3, r2
    1268:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    126a:	693a      	ldr	r2, [r7, #16]
    126c:	68fb      	ldr	r3, [r7, #12]
    126e:	429a      	cmp	r2, r3
    1270:	d127      	bne.n	12c2 <GPIO_Init+0x15a>
      {
        pos = pinpos << 2;
    1272:	69bb      	ldr	r3, [r7, #24]
    1274:	009b      	lsls	r3, r3, #2
    1276:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1278:	68fb      	ldr	r3, [r7, #12]
    127a:	220f      	movs	r2, #15
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1282:	68bb      	ldr	r3, [r7, #8]
    1284:	43db      	mvns	r3, r3
    1286:	697a      	ldr	r2, [r7, #20]
    1288:	4013      	ands	r3, r2
    128a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	69fa      	ldr	r2, [r7, #28]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	697a      	ldr	r2, [r7, #20]
    1296:	4313      	orrs	r3, r2
    1298:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    129a:	683b      	ldr	r3, [r7, #0]
    129c:	78db      	ldrb	r3, [r3, #3]
    129e:	2b28      	cmp	r3, #40	; 0x28
    12a0:	d105      	bne.n	12ae <GPIO_Init+0x146>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12a2:	69bb      	ldr	r3, [r7, #24]
    12a4:	3308      	adds	r3, #8
    12a6:	2201      	movs	r2, #1
    12a8:	409a      	lsls	r2, r3
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    12ae:	683b      	ldr	r3, [r7, #0]
    12b0:	78db      	ldrb	r3, [r3, #3]
    12b2:	2b48      	cmp	r3, #72	; 0x48
    12b4:	d105      	bne.n	12c2 <GPIO_Init+0x15a>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    12b6:	69bb      	ldr	r3, [r7, #24]
    12b8:	3308      	adds	r3, #8
    12ba:	2201      	movs	r2, #1
    12bc:	409a      	lsls	r2, r3
    12be:	687b      	ldr	r3, [r7, #4]
    12c0:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12c2:	69bb      	ldr	r3, [r7, #24]
    12c4:	3301      	adds	r3, #1
    12c6:	61bb      	str	r3, [r7, #24]
    12c8:	69bb      	ldr	r3, [r7, #24]
    12ca:	2b07      	cmp	r3, #7
    12cc:	d9c1      	bls.n	1252 <GPIO_Init+0xea>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	697a      	ldr	r2, [r7, #20]
    12d2:	605a      	str	r2, [r3, #4]
  }
}
    12d4:	3724      	adds	r7, #36	; 0x24
    12d6:	46bd      	mov	sp, r7
    12d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    12dc:	4770      	bx	lr
    12de:	bf00      	nop

000012e0 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    12e0:	b480      	push	{r7}
    12e2:	b083      	sub	sp, #12
    12e4:	af00      	add	r7, sp, #0
    12e6:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12ee:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	2202      	movs	r2, #2
    12f4:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	2204      	movs	r2, #4
    12fa:	70da      	strb	r2, [r3, #3]
}
    12fc:	370c      	adds	r7, #12
    12fe:	46bd      	mov	sp, r7
    1300:	f85d 7b04 	ldr.w	r7, [sp], #4
    1304:	4770      	bx	lr
    1306:	bf00      	nop

00001308 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1308:	b480      	push	{r7}
    130a:	b085      	sub	sp, #20
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	460b      	mov	r3, r1
    1312:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1314:	2300      	movs	r3, #0
    1316:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1318:	687b      	ldr	r3, [r7, #4]
    131a:	689a      	ldr	r2, [r3, #8]
    131c:	887b      	ldrh	r3, [r7, #2]
    131e:	4013      	ands	r3, r2
    1320:	2b00      	cmp	r3, #0
    1322:	d002      	beq.n	132a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1324:	2301      	movs	r3, #1
    1326:	73fb      	strb	r3, [r7, #15]
    1328:	e001      	b.n	132e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    132a:	2300      	movs	r3, #0
    132c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    132e:	7bfb      	ldrb	r3, [r7, #15]
}
    1330:	4618      	mov	r0, r3
    1332:	3714      	adds	r7, #20
    1334:	46bd      	mov	sp, r7
    1336:	f85d 7b04 	ldr.w	r7, [sp], #4
    133a:	4770      	bx	lr

0000133c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    133c:	b480      	push	{r7}
    133e:	b083      	sub	sp, #12
    1340:	af00      	add	r7, sp, #0
    1342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    1344:	687b      	ldr	r3, [r7, #4]
    1346:	689b      	ldr	r3, [r3, #8]
    1348:	b29b      	uxth	r3, r3
}
    134a:	4618      	mov	r0, r3
    134c:	370c      	adds	r7, #12
    134e:	46bd      	mov	sp, r7
    1350:	f85d 7b04 	ldr.w	r7, [sp], #4
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
    1360:	460b      	mov	r3, r1
    1362:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1364:	2300      	movs	r3, #0
    1366:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	68da      	ldr	r2, [r3, #12]
    136c:	887b      	ldrh	r3, [r7, #2]
    136e:	4013      	ands	r3, r2
    1370:	2b00      	cmp	r3, #0
    1372:	d002      	beq.n	137a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
    1374:	2301      	movs	r3, #1
    1376:	73fb      	strb	r3, [r7, #15]
    1378:	e001      	b.n	137e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    137a:	2300      	movs	r3, #0
    137c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    137e:	7bfb      	ldrb	r3, [r7, #15]
}
    1380:	4618      	mov	r0, r3
    1382:	3714      	adds	r7, #20
    1384:	46bd      	mov	sp, r7
    1386:	f85d 7b04 	ldr.w	r7, [sp], #4
    138a:	4770      	bx	lr

0000138c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    138c:	b480      	push	{r7}
    138e:	b083      	sub	sp, #12
    1390:	af00      	add	r7, sp, #0
    1392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1394:	687b      	ldr	r3, [r7, #4]
    1396:	68db      	ldr	r3, [r3, #12]
    1398:	b29b      	uxth	r3, r3
}
    139a:	4618      	mov	r0, r3
    139c:	370c      	adds	r7, #12
    139e:	46bd      	mov	sp, r7
    13a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13a8:	b480      	push	{r7}
    13aa:	b083      	sub	sp, #12
    13ac:	af00      	add	r7, sp, #0
    13ae:	6078      	str	r0, [r7, #4]
    13b0:	460b      	mov	r3, r1
    13b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    13b4:	887a      	ldrh	r2, [r7, #2]
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	611a      	str	r2, [r3, #16]
}
    13ba:	370c      	adds	r7, #12
    13bc:	46bd      	mov	sp, r7
    13be:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c2:	4770      	bx	lr

000013c4 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    13c4:	b480      	push	{r7}
    13c6:	b083      	sub	sp, #12
    13c8:	af00      	add	r7, sp, #0
    13ca:	6078      	str	r0, [r7, #4]
    13cc:	460b      	mov	r3, r1
    13ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    13d0:	887a      	ldrh	r2, [r7, #2]
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	615a      	str	r2, [r3, #20]
}
    13d6:	370c      	adds	r7, #12
    13d8:	46bd      	mov	sp, r7
    13da:	f85d 7b04 	ldr.w	r7, [sp], #4
    13de:	4770      	bx	lr

000013e0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    13e0:	b480      	push	{r7}
    13e2:	b083      	sub	sp, #12
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    13e8:	4613      	mov	r3, r2
    13ea:	460a      	mov	r2, r1
    13ec:	807a      	strh	r2, [r7, #2]
    13ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    13f0:	787b      	ldrb	r3, [r7, #1]
    13f2:	2b00      	cmp	r3, #0
    13f4:	d003      	beq.n	13fe <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    13f6:	887a      	ldrh	r2, [r7, #2]
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	611a      	str	r2, [r3, #16]
    13fc:	e002      	b.n	1404 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    13fe:	887a      	ldrh	r2, [r7, #2]
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	615a      	str	r2, [r3, #20]
  }
}
    1404:	370c      	adds	r7, #12
    1406:	46bd      	mov	sp, r7
    1408:	f85d 7b04 	ldr.w	r7, [sp], #4
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1410:	b480      	push	{r7}
    1412:	b083      	sub	sp, #12
    1414:	af00      	add	r7, sp, #0
    1416:	6078      	str	r0, [r7, #4]
    1418:	460b      	mov	r3, r1
    141a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    141c:	887a      	ldrh	r2, [r7, #2]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	60da      	str	r2, [r3, #12]
}
    1422:	370c      	adds	r7, #12
    1424:	46bd      	mov	sp, r7
    1426:	f85d 7b04 	ldr.w	r7, [sp], #4
    142a:	4770      	bx	lr

0000142c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    142c:	b480      	push	{r7}
    142e:	b085      	sub	sp, #20
    1430:	af00      	add	r7, sp, #0
    1432:	6078      	str	r0, [r7, #4]
    1434:	460b      	mov	r3, r1
    1436:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1438:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    143c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    143e:	887b      	ldrh	r3, [r7, #2]
    1440:	68fa      	ldr	r2, [r7, #12]
    1442:	4313      	orrs	r3, r2
    1444:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1446:	687b      	ldr	r3, [r7, #4]
    1448:	68fa      	ldr	r2, [r7, #12]
    144a:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    144c:	887a      	ldrh	r2, [r7, #2]
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1452:	687b      	ldr	r3, [r7, #4]
    1454:	68fa      	ldr	r2, [r7, #12]
    1456:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	699b      	ldr	r3, [r3, #24]
    145c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	699b      	ldr	r3, [r3, #24]
    1462:	60fb      	str	r3, [r7, #12]
}
    1464:	3714      	adds	r7, #20
    1466:	46bd      	mov	sp, r7
    1468:	f85d 7b04 	ldr.w	r7, [sp], #4
    146c:	4770      	bx	lr
    146e:	bf00      	nop

00001470 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1470:	b480      	push	{r7}
    1472:	b085      	sub	sp, #20
    1474:	af00      	add	r7, sp, #0
    1476:	4602      	mov	r2, r0
    1478:	460b      	mov	r3, r1
    147a:	71fa      	strb	r2, [r7, #7]
    147c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    147e:	2300      	movs	r3, #0
    1480:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1482:	2300      	movs	r3, #0
    1484:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    148c:	68fa      	ldr	r2, [r7, #12]
    148e:	f64f 7380 	movw	r3, #65408	; 0xff80
    1492:	4013      	ands	r3, r2
    1494:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1496:	79fb      	ldrb	r3, [r7, #7]
    1498:	011b      	lsls	r3, r3, #4
    149a:	68fa      	ldr	r2, [r7, #12]
    149c:	4313      	orrs	r3, r2
    149e:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    14a0:	79bb      	ldrb	r3, [r7, #6]
    14a2:	68fa      	ldr	r2, [r7, #12]
    14a4:	4313      	orrs	r3, r2
    14a6:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    14a8:	2300      	movs	r3, #0
    14aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	601a      	str	r2, [r3, #0]
}
    14b2:	3714      	adds	r7, #20
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr

000014bc <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    14bc:	b480      	push	{r7}
    14be:	b083      	sub	sp, #12
    14c0:	af00      	add	r7, sp, #0
    14c2:	4603      	mov	r3, r0
    14c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    14c6:	231c      	movs	r3, #28
    14c8:	f2c4 2320 	movt	r3, #16928	; 0x4220
    14cc:	79fa      	ldrb	r2, [r7, #7]
    14ce:	601a      	str	r2, [r3, #0]
}
    14d0:	370c      	adds	r7, #12
    14d2:	46bd      	mov	sp, r7
    14d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    14d8:	4770      	bx	lr
    14da:	bf00      	nop

000014dc <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    14dc:	b480      	push	{r7}
    14de:	b087      	sub	sp, #28
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
    14e4:	460b      	mov	r3, r1
    14e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    14e8:	2300      	movs	r3, #0
    14ea:	613b      	str	r3, [r7, #16]
    14ec:	2300      	movs	r3, #0
    14ee:	60fb      	str	r3, [r7, #12]
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    14f8:	687b      	ldr	r3, [r7, #4]
    14fa:	2b00      	cmp	r3, #0
    14fc:	da05      	bge.n	150a <GPIO_PinRemapConfig+0x2e>
  {
    tmpreg = AFIO->MAPR2;
    14fe:	2300      	movs	r3, #0
    1500:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1504:	69db      	ldr	r3, [r3, #28]
    1506:	617b      	str	r3, [r7, #20]
    1508:	e004      	b.n	1514 <GPIO_PinRemapConfig+0x38>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    150a:	2300      	movs	r3, #0
    150c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1510:	685b      	ldr	r3, [r3, #4]
    1512:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    151a:	0c1b      	lsrs	r3, r3, #16
    151c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	b29b      	uxth	r3, r3
    1522:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    152a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    152e:	d10e      	bne.n	154e <GPIO_PinRemapConfig+0x72>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1530:	697b      	ldr	r3, [r7, #20]
    1532:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1536:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1538:	2300      	movs	r3, #0
    153a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    153e:	2200      	movs	r2, #0
    1540:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1544:	6852      	ldr	r2, [r2, #4]
    1546:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    154a:	605a      	str	r2, [r3, #4]
    154c:	e021      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1554:	2b00      	cmp	r3, #0
    1556:	d00e      	beq.n	1576 <GPIO_PinRemapConfig+0x9a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1558:	68bb      	ldr	r3, [r7, #8]
    155a:	2203      	movs	r2, #3
    155c:	fa02 f303 	lsl.w	r3, r2, r3
    1560:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1562:	68fb      	ldr	r3, [r7, #12]
    1564:	43db      	mvns	r3, r3
    1566:	697a      	ldr	r2, [r7, #20]
    1568:	4013      	ands	r3, r2
    156a:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    156c:	697b      	ldr	r3, [r7, #20]
    156e:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1572:	617b      	str	r3, [r7, #20]
    1574:	e00d      	b.n	1592 <GPIO_PinRemapConfig+0xb6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	0d5b      	lsrs	r3, r3, #21
    157a:	011b      	lsls	r3, r3, #4
    157c:	693a      	ldr	r2, [r7, #16]
    157e:	fa02 f303 	lsl.w	r3, r2, r3
    1582:	43db      	mvns	r3, r3
    1584:	697a      	ldr	r2, [r7, #20]
    1586:	4013      	ands	r3, r2
    1588:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    158a:	697b      	ldr	r3, [r7, #20]
    158c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1590:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1592:	78fb      	ldrb	r3, [r7, #3]
    1594:	2b00      	cmp	r3, #0
    1596:	d008      	beq.n	15aa <GPIO_PinRemapConfig+0xce>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1598:	687b      	ldr	r3, [r7, #4]
    159a:	0d5b      	lsrs	r3, r3, #21
    159c:	011b      	lsls	r3, r3, #4
    159e:	693a      	ldr	r2, [r7, #16]
    15a0:	fa02 f303 	lsl.w	r3, r2, r3
    15a4:	697a      	ldr	r2, [r7, #20]
    15a6:	4313      	orrs	r3, r2
    15a8:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    15aa:	687b      	ldr	r3, [r7, #4]
    15ac:	2b00      	cmp	r3, #0
    15ae:	da05      	bge.n	15bc <GPIO_PinRemapConfig+0xe0>
  {
    AFIO->MAPR2 = tmpreg;
    15b0:	2300      	movs	r3, #0
    15b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15b6:	697a      	ldr	r2, [r7, #20]
    15b8:	61da      	str	r2, [r3, #28]
    15ba:	e004      	b.n	15c6 <GPIO_PinRemapConfig+0xea>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    15bc:	2300      	movs	r3, #0
    15be:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	605a      	str	r2, [r3, #4]
  }
}
    15c6:	371c      	adds	r7, #28
    15c8:	46bd      	mov	sp, r7
    15ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    15ce:	4770      	bx	lr

000015d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15d0:	b490      	push	{r4, r7}
    15d2:	b084      	sub	sp, #16
    15d4:	af00      	add	r7, sp, #0
    15d6:	4602      	mov	r2, r0
    15d8:	460b      	mov	r3, r1
    15da:	71fa      	strb	r2, [r7, #7]
    15dc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    15de:	2300      	movs	r3, #0
    15e0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    15e2:	79bb      	ldrb	r3, [r7, #6]
    15e4:	f003 0303 	and.w	r3, r3, #3
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	220f      	movs	r2, #15
    15ec:	fa02 f303 	lsl.w	r3, r2, r3
    15f0:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    15f2:	2300      	movs	r3, #0
    15f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    15f8:	79ba      	ldrb	r2, [r7, #6]
    15fa:	0892      	lsrs	r2, r2, #2
    15fc:	b2d2      	uxtb	r2, r2
    15fe:	4610      	mov	r0, r2
    1600:	2200      	movs	r2, #0
    1602:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1606:	79b9      	ldrb	r1, [r7, #6]
    1608:	0889      	lsrs	r1, r1, #2
    160a:	b2c9      	uxtb	r1, r1
    160c:	3102      	adds	r1, #2
    160e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1612:	68fa      	ldr	r2, [r7, #12]
    1614:	43d2      	mvns	r2, r2
    1616:	4011      	ands	r1, r2
    1618:	1c82      	adds	r2, r0, #2
    161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    161e:	2300      	movs	r3, #0
    1620:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1624:	79ba      	ldrb	r2, [r7, #6]
    1626:	0892      	lsrs	r2, r2, #2
    1628:	b2d2      	uxtb	r2, r2
    162a:	4610      	mov	r0, r2
    162c:	2200      	movs	r2, #0
    162e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    1632:	79b9      	ldrb	r1, [r7, #6]
    1634:	0889      	lsrs	r1, r1, #2
    1636:	b2c9      	uxtb	r1, r1
    1638:	3102      	adds	r1, #2
    163a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    163e:	79fc      	ldrb	r4, [r7, #7]
    1640:	79ba      	ldrb	r2, [r7, #6]
    1642:	f002 0203 	and.w	r2, r2, #3
    1646:	0092      	lsls	r2, r2, #2
    1648:	fa04 f202 	lsl.w	r2, r4, r2
    164c:	4311      	orrs	r1, r2
    164e:	1c82      	adds	r2, r0, #2
    1650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    1654:	3710      	adds	r7, #16
    1656:	46bd      	mov	sp, r7
    1658:	bc90      	pop	{r4, r7}
    165a:	4770      	bx	lr

0000165c <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    165c:	b480      	push	{r7}
    165e:	b083      	sub	sp, #12
    1660:	af00      	add	r7, sp, #0
    1662:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1664:	23dc      	movs	r3, #220	; 0xdc
    1666:	f2c4 2320 	movt	r3, #16928	; 0x4220
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	601a      	str	r2, [r3, #0]
}
    166e:	370c      	adds	r7, #12
    1670:	46bd      	mov	sp, r7
    1672:	f85d 7b04 	ldr.w	r7, [sp], #4
    1676:	4770      	bx	lr

00001678 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1678:	b580      	push	{r7, lr}
    167a:	b082      	sub	sp, #8
    167c:	af00      	add	r7, sp, #0
    167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1680:	687a      	ldr	r2, [r7, #4]
    1682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	429a      	cmp	r2, r3
    168c:	d10a      	bne.n	16a4 <USART_DeInit+0x2c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    168e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1692:	2101      	movs	r1, #1
    1694:	f7ff fbe4 	bl	e60 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    1698:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    169c:	2100      	movs	r1, #0
    169e:	f7ff fbdf 	bl	e60 <RCC_APB2PeriphResetCmd>
    16a2:	e046      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART2)
    16a4:	687a      	ldr	r2, [r7, #4]
    16a6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    16aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16ae:	429a      	cmp	r2, r3
    16b0:	d10a      	bne.n	16c8 <USART_DeInit+0x50>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    16b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16b6:	2101      	movs	r1, #1
    16b8:	f7ff fbfa 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    16bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    16c0:	2100      	movs	r1, #0
    16c2:	f7ff fbf5 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16c6:	e034      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == USART3)
    16c8:	687a      	ldr	r2, [r7, #4]
    16ca:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    16ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16d2:	429a      	cmp	r2, r3
    16d4:	d10a      	bne.n	16ec <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    16d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16da:	2101      	movs	r1, #1
    16dc:	f7ff fbe8 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    16e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    16e4:	2100      	movs	r1, #0
    16e6:	f7ff fbe3 	bl	eb0 <RCC_APB1PeriphResetCmd>
    16ea:	e022      	b.n	1732 <USART_DeInit+0xba>
  }
  else if (USARTx == UART4)
    16ec:	687a      	ldr	r2, [r7, #4]
    16ee:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    16f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    16f6:	429a      	cmp	r2, r3
    16f8:	d10a      	bne.n	1710 <USART_DeInit+0x98>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    16fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16fe:	2101      	movs	r1, #1
    1700:	f7ff fbd6 	bl	eb0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    1704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1708:	2100      	movs	r1, #0
    170a:	f7ff fbd1 	bl	eb0 <RCC_APB1PeriphResetCmd>
    170e:	e010      	b.n	1732 <USART_DeInit+0xba>
  }
  else
  {
    if (USARTx == UART5)
    1710:	687a      	ldr	r2, [r7, #4]
    1712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1716:	f2c4 0300 	movt	r3, #16384	; 0x4000
    171a:	429a      	cmp	r2, r3
    171c:	d109      	bne.n	1732 <USART_DeInit+0xba>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    171e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1722:	2101      	movs	r1, #1
    1724:	f7ff fbc4 	bl	eb0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    1728:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    172c:	2100      	movs	r1, #0
    172e:	f7ff fbbf 	bl	eb0 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1732:	3708      	adds	r7, #8
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}

00001738 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1738:	b580      	push	{r7, lr}
    173a:	b08c      	sub	sp, #48	; 0x30
    173c:	af00      	add	r7, sp, #0
    173e:	6078      	str	r0, [r7, #4]
    1740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    1742:	2300      	movs	r3, #0
    1744:	62fb      	str	r3, [r7, #44]	; 0x2c
    1746:	2300      	movs	r3, #0
    1748:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    174a:	2300      	movs	r3, #0
    174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    174e:	2300      	movs	r3, #0
    1750:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1752:	2300      	movs	r3, #0
    1754:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	8a1b      	ldrh	r3, [r3, #16]
    175e:	b29b      	uxth	r3, r3
    1760:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1764:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    1768:	4013      	ands	r3, r2
    176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    176c:	683b      	ldr	r3, [r7, #0]
    176e:	88db      	ldrh	r3, [r3, #6]
    1770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1772:	4313      	orrs	r3, r2
    1774:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1778:	b29a      	uxth	r2, r3
    177a:	687b      	ldr	r3, [r7, #4]
    177c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    177e:	687b      	ldr	r3, [r7, #4]
    1780:	899b      	ldrh	r3, [r3, #12]
    1782:	b29b      	uxth	r3, r3
    1784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1788:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    178c:	4013      	ands	r3, r2
    178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1790:	683b      	ldr	r3, [r7, #0]
    1792:	889a      	ldrh	r2, [r3, #4]
    1794:	683b      	ldr	r3, [r7, #0]
    1796:	891b      	ldrh	r3, [r3, #8]
    1798:	4313      	orrs	r3, r2
    179a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    179c:	683b      	ldr	r3, [r7, #0]
    179e:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    17a0:	4313      	orrs	r3, r2
    17a2:	b29b      	uxth	r3, r3
    17a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17a6:	4313      	orrs	r3, r2
    17a8:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    17aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17ac:	b29a      	uxth	r2, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	8a9b      	ldrh	r3, [r3, #20]
    17b6:	b29b      	uxth	r3, r3
    17b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    17ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17bc:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    17c0:	4013      	ands	r3, r2
    17c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    17c4:	683b      	ldr	r3, [r7, #0]
    17c6:	899b      	ldrh	r3, [r3, #12]
    17c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    17ca:	4313      	orrs	r3, r2
    17cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    17ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    17d0:	b29a      	uxth	r2, r3
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    17d6:	f107 0308 	add.w	r3, r7, #8
    17da:	4618      	mov	r0, r3
    17dc:	f7ff f9ea 	bl	bb4 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    17e0:	69fa      	ldr	r2, [r7, #28]
    17e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    17e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17ea:	429a      	cmp	r2, r3
    17ec:	d102      	bne.n	17f4 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    17ee:	697b      	ldr	r3, [r7, #20]
    17f0:	62bb      	str	r3, [r7, #40]	; 0x28
    17f2:	e001      	b.n	17f8 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    17f4:	693b      	ldr	r3, [r7, #16]
    17f6:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    17f8:	687b      	ldr	r3, [r7, #4]
    17fa:	899b      	ldrh	r3, [r3, #12]
    17fc:	b29b      	uxth	r3, r3
    17fe:	b29b      	uxth	r3, r3
    1800:	b21b      	sxth	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	da0c      	bge.n	1820 <USART_Init+0xe8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    1806:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1808:	4613      	mov	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	4413      	add	r3, r2
    180e:	009a      	lsls	r2, r3, #2
    1810:	441a      	add	r2, r3
    1812:	683b      	ldr	r3, [r7, #0]
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	005b      	lsls	r3, r3, #1
    1818:	fbb2 f3f3 	udiv	r3, r2, r3
    181c:	627b      	str	r3, [r7, #36]	; 0x24
    181e:	e00b      	b.n	1838 <USART_Init+0x100>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1820:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1822:	4613      	mov	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	4413      	add	r3, r2
    1828:	009a      	lsls	r2, r3, #2
    182a:	441a      	add	r2, r3
    182c:	683b      	ldr	r3, [r7, #0]
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	009b      	lsls	r3, r3, #2
    1832:	fbb2 f3f3 	udiv	r3, r2, r3
    1836:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    183a:	f248 531f 	movw	r3, #34079	; 0x851f
    183e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1842:	fba3 1302 	umull	r1, r3, r3, r2
    1846:	095b      	lsrs	r3, r3, #5
    1848:	011b      	lsls	r3, r3, #4
    184a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    184e:	091b      	lsrs	r3, r3, #4
    1850:	2264      	movs	r2, #100	; 0x64
    1852:	fb02 f303 	mul.w	r3, r2, r3
    1856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1858:	1ad3      	subs	r3, r2, r3
    185a:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    185c:	687b      	ldr	r3, [r7, #4]
    185e:	899b      	ldrh	r3, [r3, #12]
    1860:	b29b      	uxth	r3, r3
    1862:	b29b      	uxth	r3, r3
    1864:	b21b      	sxth	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	da10      	bge.n	188c <USART_Init+0x154>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    186a:	6a3b      	ldr	r3, [r7, #32]
    186c:	00db      	lsls	r3, r3, #3
    186e:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1872:	f248 531f 	movw	r3, #34079	; 0x851f
    1876:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    187a:	fba3 1302 	umull	r1, r3, r3, r2
    187e:	095b      	lsrs	r3, r3, #5
    1880:	f003 0307 	and.w	r3, r3, #7
    1884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1886:	4313      	orrs	r3, r2
    1888:	62fb      	str	r3, [r7, #44]	; 0x2c
    188a:	e00f      	b.n	18ac <USART_Init+0x174>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    188c:	6a3b      	ldr	r3, [r7, #32]
    188e:	011b      	lsls	r3, r3, #4
    1890:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1894:	f248 531f 	movw	r3, #34079	; 0x851f
    1898:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    189c:	fba3 1302 	umull	r1, r3, r3, r2
    18a0:	095b      	lsrs	r3, r3, #5
    18a2:	f003 030f 	and.w	r3, r3, #15
    18a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18a8:	4313      	orrs	r3, r2
    18aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    18ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    18ae:	b29a      	uxth	r2, r3
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	811a      	strh	r2, [r3, #8]
}
    18b4:	3730      	adds	r7, #48	; 0x30
    18b6:	46bd      	mov	sp, r7
    18b8:	bd80      	pop	{r7, pc}
    18ba:	bf00      	nop

000018bc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    18ca:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    18cc:	687b      	ldr	r3, [r7, #4]
    18ce:	2200      	movs	r2, #0
    18d0:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    18d2:	687b      	ldr	r3, [r7, #4]
    18d4:	2200      	movs	r2, #0
    18d6:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    18d8:	687b      	ldr	r3, [r7, #4]
    18da:	2200      	movs	r2, #0
    18dc:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	220c      	movs	r2, #12
    18e2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	2200      	movs	r2, #0
    18e8:	819a      	strh	r2, [r3, #12]
}
    18ea:	370c      	adds	r7, #12
    18ec:	46bd      	mov	sp, r7
    18ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f2:	4770      	bx	lr

000018f4 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    18f4:	b480      	push	{r7}
    18f6:	b085      	sub	sp, #20
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    18fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    18fe:	2300      	movs	r3, #0
    1900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	8a1b      	ldrh	r3, [r3, #16]
    1906:	b29b      	uxth	r3, r3
    1908:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    190a:	68fa      	ldr	r2, [r7, #12]
    190c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1910:	4013      	ands	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	881a      	ldrh	r2, [r3, #0]
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    191c:	4313      	orrs	r3, r2
    191e:	b29a      	uxth	r2, r3
    1920:	683b      	ldr	r3, [r7, #0]
    1922:	889b      	ldrh	r3, [r3, #4]
    1924:	4313      	orrs	r3, r2
    1926:	b29a      	uxth	r2, r3
    1928:	683b      	ldr	r3, [r7, #0]
    192a:	88db      	ldrh	r3, [r3, #6]
    192c:	4313      	orrs	r3, r2
    192e:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1930:	68fa      	ldr	r2, [r7, #12]
    1932:	4313      	orrs	r3, r2
    1934:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	b29a      	uxth	r2, r3
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	821a      	strh	r2, [r3, #16]
}
    193e:	3714      	adds	r7, #20
    1940:	46bd      	mov	sp, r7
    1942:	f85d 7b04 	ldr.w	r7, [sp], #4
    1946:	4770      	bx	lr

00001948 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1948:	b480      	push	{r7}
    194a:	b083      	sub	sp, #12
    194c:	af00      	add	r7, sp, #0
    194e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1950:	687b      	ldr	r3, [r7, #4]
    1952:	2200      	movs	r2, #0
    1954:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1956:	687b      	ldr	r3, [r7, #4]
    1958:	2200      	movs	r2, #0
    195a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	2200      	movs	r2, #0
    1960:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	2200      	movs	r2, #0
    1966:	80da      	strh	r2, [r3, #6]
}
    1968:	370c      	adds	r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1970:	4770      	bx	lr
    1972:	bf00      	nop

00001974 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1974:	b480      	push	{r7}
    1976:	b083      	sub	sp, #12
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1980:	78fb      	ldrb	r3, [r7, #3]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	899b      	ldrh	r3, [r3, #12]
    198a:	b29b      	uxth	r3, r3
    198c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1990:	b29a      	uxth	r2, r3
    1992:	687b      	ldr	r3, [r7, #4]
    1994:	819a      	strh	r2, [r3, #12]
    1996:	e007      	b.n	19a8 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1998:	687b      	ldr	r3, [r7, #4]
    199a:	899b      	ldrh	r3, [r3, #12]
    199c:	b29b      	uxth	r3, r3
    199e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    19a2:	b29a      	uxth	r2, r3
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	819a      	strh	r2, [r3, #12]
  }
}
    19a8:	370c      	adds	r7, #12
    19aa:	46bd      	mov	sp, r7
    19ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    19b4:	b480      	push	{r7}
    19b6:	b087      	sub	sp, #28
    19b8:	af00      	add	r7, sp, #0
    19ba:	6078      	str	r0, [r7, #4]
    19bc:	4613      	mov	r3, r2
    19be:	460a      	mov	r2, r1
    19c0:	807a      	strh	r2, [r7, #2]
    19c2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    19c4:	2300      	movs	r3, #0
    19c6:	613b      	str	r3, [r7, #16]
    19c8:	2300      	movs	r3, #0
    19ca:	60fb      	str	r3, [r7, #12]
    19cc:	2300      	movs	r3, #0
    19ce:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    19d0:	2300      	movs	r3, #0
    19d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    19d8:	887b      	ldrh	r3, [r7, #2]
    19da:	b2db      	uxtb	r3, r3
    19dc:	095b      	lsrs	r3, r3, #5
    19de:	b2db      	uxtb	r3, r3
    19e0:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    19e2:	887b      	ldrh	r3, [r7, #2]
    19e4:	f003 031f 	and.w	r3, r3, #31
    19e8:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    19ea:	68fb      	ldr	r3, [r7, #12]
    19ec:	2201      	movs	r2, #1
    19ee:	fa02 f303 	lsl.w	r3, r2, r3
    19f2:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d103      	bne.n	1a02 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
    19fa:	697b      	ldr	r3, [r7, #20]
    19fc:	330c      	adds	r3, #12
    19fe:	617b      	str	r3, [r7, #20]
    1a00:	e009      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1a02:	693b      	ldr	r3, [r7, #16]
    1a04:	2b02      	cmp	r3, #2
    1a06:	d103      	bne.n	1a10 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
    1a08:	697b      	ldr	r3, [r7, #20]
    1a0a:	3310      	adds	r3, #16
    1a0c:	617b      	str	r3, [r7, #20]
    1a0e:	e002      	b.n	1a16 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1a10:	697b      	ldr	r3, [r7, #20]
    1a12:	3314      	adds	r3, #20
    1a14:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1a16:	787b      	ldrb	r3, [r7, #1]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d006      	beq.n	1a2a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1a1c:	697b      	ldr	r3, [r7, #20]
    1a1e:	697a      	ldr	r2, [r7, #20]
    1a20:	6811      	ldr	r1, [r2, #0]
    1a22:	68ba      	ldr	r2, [r7, #8]
    1a24:	430a      	orrs	r2, r1
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	e006      	b.n	1a38 <USART_ITConfig+0x84>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1a2a:	697b      	ldr	r3, [r7, #20]
    1a2c:	697a      	ldr	r2, [r7, #20]
    1a2e:	6811      	ldr	r1, [r2, #0]
    1a30:	68ba      	ldr	r2, [r7, #8]
    1a32:	43d2      	mvns	r2, r2
    1a34:	400a      	ands	r2, r1
    1a36:	601a      	str	r2, [r3, #0]
  }
}
    1a38:	371c      	adds	r7, #28
    1a3a:	46bd      	mov	sp, r7
    1a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1a44:	b480      	push	{r7}
    1a46:	b083      	sub	sp, #12
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	4613      	mov	r3, r2
    1a4e:	460a      	mov	r2, r1
    1a50:	807a      	strh	r2, [r7, #2]
    1a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1a54:	787b      	ldrb	r3, [r7, #1]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d008      	beq.n	1a6c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1a5a:	687b      	ldr	r3, [r7, #4]
    1a5c:	8a9b      	ldrh	r3, [r3, #20]
    1a5e:	b29a      	uxth	r2, r3
    1a60:	887b      	ldrh	r3, [r7, #2]
    1a62:	4313      	orrs	r3, r2
    1a64:	b29a      	uxth	r2, r3
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	829a      	strh	r2, [r3, #20]
    1a6a:	e009      	b.n	1a80 <USART_DMACmd+0x3c>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	8a9b      	ldrh	r3, [r3, #20]
    1a70:	b29a      	uxth	r2, r3
    1a72:	887b      	ldrh	r3, [r7, #2]
    1a74:	43db      	mvns	r3, r3
    1a76:	b29b      	uxth	r3, r3
    1a78:	4013      	ands	r3, r2
    1a7a:	b29a      	uxth	r2, r3
    1a7c:	687b      	ldr	r3, [r7, #4]
    1a7e:	829a      	strh	r2, [r3, #20]
  }
}
    1a80:	370c      	adds	r7, #12
    1a82:	46bd      	mov	sp, r7
    1a84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a88:	4770      	bx	lr
    1a8a:	bf00      	nop

00001a8c <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1a8c:	b480      	push	{r7}
    1a8e:	b083      	sub	sp, #12
    1a90:	af00      	add	r7, sp, #0
    1a92:	6078      	str	r0, [r7, #4]
    1a94:	460b      	mov	r3, r1
    1a96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1a98:	687b      	ldr	r3, [r7, #4]
    1a9a:	8a1b      	ldrh	r3, [r3, #16]
    1a9c:	b29b      	uxth	r3, r3
    1a9e:	f023 030f 	bic.w	r3, r3, #15
    1aa2:	b29a      	uxth	r2, r3
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	8a1b      	ldrh	r3, [r3, #16]
    1aac:	b29a      	uxth	r2, r3
    1aae:	78fb      	ldrb	r3, [r7, #3]
    1ab0:	b29b      	uxth	r3, r3
    1ab2:	4313      	orrs	r3, r2
    1ab4:	b29a      	uxth	r2, r3
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	821a      	strh	r2, [r3, #16]
}
    1aba:	370c      	adds	r7, #12
    1abc:	46bd      	mov	sp, r7
    1abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ac2:	4770      	bx	lr

00001ac4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1ac4:	b480      	push	{r7}
    1ac6:	b083      	sub	sp, #12
    1ac8:	af00      	add	r7, sp, #0
    1aca:	6078      	str	r0, [r7, #4]
    1acc:	460b      	mov	r3, r1
    1ace:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	899b      	ldrh	r3, [r3, #12]
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1ada:	b29a      	uxth	r2, r3
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	899b      	ldrh	r3, [r3, #12]
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	887b      	ldrh	r3, [r7, #2]
    1ae8:	4313      	orrs	r3, r2
    1aea:	b29a      	uxth	r2, r3
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	819a      	strh	r2, [r3, #12]
}
    1af0:	370c      	adds	r7, #12
    1af2:	46bd      	mov	sp, r7
    1af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1af8:	4770      	bx	lr
    1afa:	bf00      	nop

00001afc <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1afc:	b480      	push	{r7}
    1afe:	b083      	sub	sp, #12
    1b00:	af00      	add	r7, sp, #0
    1b02:	6078      	str	r0, [r7, #4]
    1b04:	460b      	mov	r3, r1
    1b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b08:	78fb      	ldrb	r3, [r7, #3]
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d008      	beq.n	1b20 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1b0e:	687b      	ldr	r3, [r7, #4]
    1b10:	899b      	ldrh	r3, [r3, #12]
    1b12:	b29b      	uxth	r3, r3
    1b14:	f043 0302 	orr.w	r3, r3, #2
    1b18:	b29a      	uxth	r2, r3
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	819a      	strh	r2, [r3, #12]
    1b1e:	e007      	b.n	1b30 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	899b      	ldrh	r3, [r3, #12]
    1b24:	b29b      	uxth	r3, r3
    1b26:	f023 0302 	bic.w	r3, r3, #2
    1b2a:	b29a      	uxth	r2, r3
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	819a      	strh	r2, [r3, #12]
  }
}
    1b30:	370c      	adds	r7, #12
    1b32:	46bd      	mov	sp, r7
    1b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop

00001b3c <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1b3c:	b480      	push	{r7}
    1b3e:	b083      	sub	sp, #12
    1b40:	af00      	add	r7, sp, #0
    1b42:	6078      	str	r0, [r7, #4]
    1b44:	460b      	mov	r3, r1
    1b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8a1b      	ldrh	r3, [r3, #16]
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	f023 0320 	bic.w	r3, r3, #32
    1b52:	b29a      	uxth	r2, r3
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	8a1b      	ldrh	r3, [r3, #16]
    1b5c:	b29a      	uxth	r2, r3
    1b5e:	887b      	ldrh	r3, [r7, #2]
    1b60:	4313      	orrs	r3, r2
    1b62:	b29a      	uxth	r2, r3
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	821a      	strh	r2, [r3, #16]
}
    1b68:	370c      	adds	r7, #12
    1b6a:	46bd      	mov	sp, r7
    1b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b74:	b480      	push	{r7}
    1b76:	b083      	sub	sp, #12
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	460b      	mov	r3, r1
    1b7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1b80:	78fb      	ldrb	r3, [r7, #3]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	8a1b      	ldrh	r3, [r3, #16]
    1b8a:	b29b      	uxth	r3, r3
    1b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1b90:	b29a      	uxth	r2, r3
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	821a      	strh	r2, [r3, #16]
    1b96:	e007      	b.n	1ba8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1b98:	687b      	ldr	r3, [r7, #4]
    1b9a:	8a1b      	ldrh	r3, [r3, #16]
    1b9c:	b29b      	uxth	r3, r3
    1b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ba2:	b29a      	uxth	r2, r3
    1ba4:	687b      	ldr	r3, [r7, #4]
    1ba6:	821a      	strh	r2, [r3, #16]
  }
}
    1ba8:	370c      	adds	r7, #12
    1baa:	46bd      	mov	sp, r7
    1bac:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b083      	sub	sp, #12
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
    1bbc:	460b      	mov	r3, r1
    1bbe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1bc0:	887b      	ldrh	r3, [r7, #2]
    1bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bc6:	b29a      	uxth	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	809a      	strh	r2, [r3, #4]
}
    1bcc:	370c      	adds	r7, #12
    1bce:	46bd      	mov	sp, r7
    1bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop

00001bd8 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1bd8:	b480      	push	{r7}
    1bda:	b083      	sub	sp, #12
    1bdc:	af00      	add	r7, sp, #0
    1bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	889b      	ldrh	r3, [r3, #4]
    1be4:	b29b      	uxth	r3, r3
    1be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1bea:	b29b      	uxth	r3, r3
}
    1bec:	4618      	mov	r0, r3
    1bee:	370c      	adds	r7, #12
    1bf0:	46bd      	mov	sp, r7
    1bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bf6:	4770      	bx	lr

00001bf8 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b083      	sub	sp, #12
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1c00:	687b      	ldr	r3, [r7, #4]
    1c02:	899b      	ldrh	r3, [r3, #12]
    1c04:	b29b      	uxth	r3, r3
    1c06:	f043 0301 	orr.w	r3, r3, #1
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	687b      	ldr	r3, [r7, #4]
    1c0e:	819a      	strh	r2, [r3, #12]
}
    1c10:	370c      	adds	r7, #12
    1c12:	46bd      	mov	sp, r7
    1c14:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop

00001c1c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1c1c:	b480      	push	{r7}
    1c1e:	b083      	sub	sp, #12
    1c20:	af00      	add	r7, sp, #0
    1c22:	6078      	str	r0, [r7, #4]
    1c24:	460b      	mov	r3, r1
    1c26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1c28:	687b      	ldr	r3, [r7, #4]
    1c2a:	8b1b      	ldrh	r3, [r3, #24]
    1c2c:	b29b      	uxth	r3, r3
    1c2e:	b2db      	uxtb	r3, r3
    1c30:	b29a      	uxth	r2, r3
    1c32:	687b      	ldr	r3, [r7, #4]
    1c34:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1c36:	687b      	ldr	r3, [r7, #4]
    1c38:	8b1b      	ldrh	r3, [r3, #24]
    1c3a:	b29a      	uxth	r2, r3
    1c3c:	78fb      	ldrb	r3, [r7, #3]
    1c3e:	b29b      	uxth	r3, r3
    1c40:	021b      	lsls	r3, r3, #8
    1c42:	b29b      	uxth	r3, r3
    1c44:	4313      	orrs	r3, r2
    1c46:	b29a      	uxth	r2, r3
    1c48:	687b      	ldr	r3, [r7, #4]
    1c4a:	831a      	strh	r2, [r3, #24]
}
    1c4c:	370c      	adds	r7, #12
    1c4e:	46bd      	mov	sp, r7
    1c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1c58:	b480      	push	{r7}
    1c5a:	b083      	sub	sp, #12
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	6078      	str	r0, [r7, #4]
    1c60:	460b      	mov	r3, r1
    1c62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1c64:	687b      	ldr	r3, [r7, #4]
    1c66:	8b1b      	ldrh	r3, [r3, #24]
    1c68:	b29b      	uxth	r3, r3
    1c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1c6e:	b29a      	uxth	r2, r3
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1c74:	687b      	ldr	r3, [r7, #4]
    1c76:	8b1b      	ldrh	r3, [r3, #24]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	78fb      	ldrb	r3, [r7, #3]
    1c7c:	b29b      	uxth	r3, r3
    1c7e:	4313      	orrs	r3, r2
    1c80:	b29a      	uxth	r2, r3
    1c82:	687b      	ldr	r3, [r7, #4]
    1c84:	831a      	strh	r2, [r3, #24]
}
    1c86:	370c      	adds	r7, #12
    1c88:	46bd      	mov	sp, r7
    1c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c8e:	4770      	bx	lr

00001c90 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1c90:	b480      	push	{r7}
    1c92:	b083      	sub	sp, #12
    1c94:	af00      	add	r7, sp, #0
    1c96:	6078      	str	r0, [r7, #4]
    1c98:	460b      	mov	r3, r1
    1c9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c9c:	78fb      	ldrb	r3, [r7, #3]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d008      	beq.n	1cb4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	8a9b      	ldrh	r3, [r3, #20]
    1ca6:	b29b      	uxth	r3, r3
    1ca8:	f043 0320 	orr.w	r3, r3, #32
    1cac:	b29a      	uxth	r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	829a      	strh	r2, [r3, #20]
    1cb2:	e007      	b.n	1cc4 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	8a9b      	ldrh	r3, [r3, #20]
    1cb8:	b29b      	uxth	r3, r3
    1cba:	f023 0320 	bic.w	r3, r3, #32
    1cbe:	b29a      	uxth	r2, r3
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	829a      	strh	r2, [r3, #20]
  }
}
    1cc4:	370c      	adds	r7, #12
    1cc6:	46bd      	mov	sp, r7
    1cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1cd0:	b480      	push	{r7}
    1cd2:	b083      	sub	sp, #12
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	6078      	str	r0, [r7, #4]
    1cd8:	460b      	mov	r3, r1
    1cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1cdc:	78fb      	ldrb	r3, [r7, #3]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d008      	beq.n	1cf4 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1ce2:	687b      	ldr	r3, [r7, #4]
    1ce4:	8a9b      	ldrh	r3, [r3, #20]
    1ce6:	b29b      	uxth	r3, r3
    1ce8:	f043 0310 	orr.w	r3, r3, #16
    1cec:	b29a      	uxth	r2, r3
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	829a      	strh	r2, [r3, #20]
    1cf2:	e007      	b.n	1d04 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1cf4:	687b      	ldr	r3, [r7, #4]
    1cf6:	8a9b      	ldrh	r3, [r3, #20]
    1cf8:	b29b      	uxth	r3, r3
    1cfa:	f023 0310 	bic.w	r3, r3, #16
    1cfe:	b29a      	uxth	r2, r3
    1d00:	687b      	ldr	r3, [r7, #4]
    1d02:	829a      	strh	r2, [r3, #20]
  }
}
    1d04:	370c      	adds	r7, #12
    1d06:	46bd      	mov	sp, r7
    1d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d10:	b480      	push	{r7}
    1d12:	b083      	sub	sp, #12
    1d14:	af00      	add	r7, sp, #0
    1d16:	6078      	str	r0, [r7, #4]
    1d18:	460b      	mov	r3, r1
    1d1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d1c:	78fb      	ldrb	r3, [r7, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d008      	beq.n	1d34 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1d22:	687b      	ldr	r3, [r7, #4]
    1d24:	8a9b      	ldrh	r3, [r3, #20]
    1d26:	b29b      	uxth	r3, r3
    1d28:	f043 0308 	orr.w	r3, r3, #8
    1d2c:	b29a      	uxth	r2, r3
    1d2e:	687b      	ldr	r3, [r7, #4]
    1d30:	829a      	strh	r2, [r3, #20]
    1d32:	e007      	b.n	1d44 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1d34:	687b      	ldr	r3, [r7, #4]
    1d36:	8a9b      	ldrh	r3, [r3, #20]
    1d38:	b29b      	uxth	r3, r3
    1d3a:	f023 0308 	bic.w	r3, r3, #8
    1d3e:	b29a      	uxth	r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	829a      	strh	r2, [r3, #20]
  }
}
    1d44:	370c      	adds	r7, #12
    1d46:	46bd      	mov	sp, r7
    1d48:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d4c:	4770      	bx	lr
    1d4e:	bf00      	nop

00001d50 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d50:	b480      	push	{r7}
    1d52:	b083      	sub	sp, #12
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	460b      	mov	r3, r1
    1d5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d5c:	78fb      	ldrb	r3, [r7, #3]
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d00a      	beq.n	1d78 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	899b      	ldrh	r3, [r3, #12]
    1d66:	b29b      	uxth	r3, r3
    1d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1d70:	b29a      	uxth	r2, r3
    1d72:	687b      	ldr	r3, [r7, #4]
    1d74:	819a      	strh	r2, [r3, #12]
    1d76:	e007      	b.n	1d88 <USART_OverSampling8Cmd+0x38>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1d78:	687b      	ldr	r3, [r7, #4]
    1d7a:	899b      	ldrh	r3, [r3, #12]
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	f3c3 030e 	ubfx	r3, r3, #0, #15
    1d82:	b29a      	uxth	r2, r3
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	819a      	strh	r2, [r3, #12]
  }
}
    1d88:	370c      	adds	r7, #12
    1d8a:	46bd      	mov	sp, r7
    1d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop

00001d94 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d94:	b480      	push	{r7}
    1d96:	b083      	sub	sp, #12
    1d98:	af00      	add	r7, sp, #0
    1d9a:	6078      	str	r0, [r7, #4]
    1d9c:	460b      	mov	r3, r1
    1d9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1da0:	78fb      	ldrb	r3, [r7, #3]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d008      	beq.n	1db8 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	8a9b      	ldrh	r3, [r3, #20]
    1daa:	b29b      	uxth	r3, r3
    1dac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1db0:	b29a      	uxth	r2, r3
    1db2:	687b      	ldr	r3, [r7, #4]
    1db4:	829a      	strh	r2, [r3, #20]
    1db6:	e007      	b.n	1dc8 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    1db8:	687b      	ldr	r3, [r7, #4]
    1dba:	8a9b      	ldrh	r3, [r3, #20]
    1dbc:	b29b      	uxth	r3, r3
    1dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1dc2:	b29a      	uxth	r2, r3
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	829a      	strh	r2, [r3, #20]
  }
}
    1dc8:	370c      	adds	r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    1dd4:	b480      	push	{r7}
    1dd6:	b083      	sub	sp, #12
    1dd8:	af00      	add	r7, sp, #0
    1dda:	6078      	str	r0, [r7, #4]
    1ddc:	460b      	mov	r3, r1
    1dde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	8a9b      	ldrh	r3, [r3, #20]
    1de4:	b29b      	uxth	r3, r3
    1de6:	f023 0304 	bic.w	r3, r3, #4
    1dea:	b29a      	uxth	r2, r3
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	8a9b      	ldrh	r3, [r3, #20]
    1df4:	b29a      	uxth	r2, r3
    1df6:	887b      	ldrh	r3, [r7, #2]
    1df8:	4313      	orrs	r3, r2
    1dfa:	b29a      	uxth	r2, r3
    1dfc:	687b      	ldr	r3, [r7, #4]
    1dfe:	829a      	strh	r2, [r3, #20]
}
    1e00:	370c      	adds	r7, #12
    1e02:	46bd      	mov	sp, r7
    1e04:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop

00001e0c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1e0c:	b480      	push	{r7}
    1e0e:	b083      	sub	sp, #12
    1e10:	af00      	add	r7, sp, #0
    1e12:	6078      	str	r0, [r7, #4]
    1e14:	460b      	mov	r3, r1
    1e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1e18:	78fb      	ldrb	r3, [r7, #3]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d008      	beq.n	1e30 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    1e1e:	687b      	ldr	r3, [r7, #4]
    1e20:	8a9b      	ldrh	r3, [r3, #20]
    1e22:	b29b      	uxth	r3, r3
    1e24:	f043 0302 	orr.w	r3, r3, #2
    1e28:	b29a      	uxth	r2, r3
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	829a      	strh	r2, [r3, #20]
    1e2e:	e007      	b.n	1e40 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	8a9b      	ldrh	r3, [r3, #20]
    1e34:	b29b      	uxth	r3, r3
    1e36:	f023 0302 	bic.w	r3, r3, #2
    1e3a:	b29a      	uxth	r2, r3
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	829a      	strh	r2, [r3, #20]
  }
}
    1e40:	370c      	adds	r7, #12
    1e42:	46bd      	mov	sp, r7
    1e44:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e48:	4770      	bx	lr
    1e4a:	bf00      	nop

00001e4c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e4c:	b480      	push	{r7}
    1e4e:	b085      	sub	sp, #20
    1e50:	af00      	add	r7, sp, #0
    1e52:	6078      	str	r0, [r7, #4]
    1e54:	460b      	mov	r3, r1
    1e56:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    1e58:	2300      	movs	r3, #0
    1e5a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	b29a      	uxth	r2, r3
    1e62:	887b      	ldrh	r3, [r7, #2]
    1e64:	4013      	ands	r3, r2
    1e66:	b29b      	uxth	r3, r3
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d002      	beq.n	1e72 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
    1e6c:	2301      	movs	r3, #1
    1e6e:	73fb      	strb	r3, [r7, #15]
    1e70:	e001      	b.n	1e76 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    1e72:	2300      	movs	r3, #0
    1e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e76:	7bfb      	ldrb	r3, [r7, #15]
}
    1e78:	4618      	mov	r0, r3
    1e7a:	3714      	adds	r7, #20
    1e7c:	46bd      	mov	sp, r7
    1e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e82:	4770      	bx	lr

00001e84 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    1e84:	b480      	push	{r7}
    1e86:	b083      	sub	sp, #12
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	460b      	mov	r3, r1
    1e8e:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    1e90:	887b      	ldrh	r3, [r7, #2]
    1e92:	43db      	mvns	r3, r3
    1e94:	b29a      	uxth	r2, r3
    1e96:	687b      	ldr	r3, [r7, #4]
    1e98:	801a      	strh	r2, [r3, #0]
}
    1e9a:	370c      	adds	r7, #12
    1e9c:	46bd      	mov	sp, r7
    1e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea2:	4770      	bx	lr

00001ea4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1ea4:	b480      	push	{r7}
    1ea6:	b087      	sub	sp, #28
    1ea8:	af00      	add	r7, sp, #0
    1eaa:	6078      	str	r0, [r7, #4]
    1eac:	460b      	mov	r3, r1
    1eae:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    1eb0:	2300      	movs	r3, #0
    1eb2:	60fb      	str	r3, [r7, #12]
    1eb4:	2300      	movs	r3, #0
    1eb6:	617b      	str	r3, [r7, #20]
    1eb8:	2300      	movs	r3, #0
    1eba:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    1ebc:	2300      	movs	r3, #0
    1ebe:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1ec0:	887b      	ldrh	r3, [r7, #2]
    1ec2:	b2db      	uxtb	r3, r3
    1ec4:	095b      	lsrs	r3, r3, #5
    1ec6:	b2db      	uxtb	r3, r3
    1ec8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    1eca:	887b      	ldrh	r3, [r7, #2]
    1ecc:	f003 031f 	and.w	r3, r3, #31
    1ed0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    1ed2:	697b      	ldr	r3, [r7, #20]
    1ed4:	2201      	movs	r2, #1
    1ed6:	fa02 f303 	lsl.w	r3, r2, r3
    1eda:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    1edc:	68bb      	ldr	r3, [r7, #8]
    1ede:	2b01      	cmp	r3, #1
    1ee0:	d106      	bne.n	1ef0 <USART_GetITStatus+0x4c>
  {
    itmask &= USARTx->CR1;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	899b      	ldrh	r3, [r3, #12]
    1ee6:	b29b      	uxth	r3, r3
    1ee8:	697a      	ldr	r2, [r7, #20]
    1eea:	4013      	ands	r3, r2
    1eec:	617b      	str	r3, [r7, #20]
    1eee:	e00f      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    1ef0:	68bb      	ldr	r3, [r7, #8]
    1ef2:	2b02      	cmp	r3, #2
    1ef4:	d106      	bne.n	1f04 <USART_GetITStatus+0x60>
  {
    itmask &= USARTx->CR2;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	8a1b      	ldrh	r3, [r3, #16]
    1efa:	b29b      	uxth	r3, r3
    1efc:	697a      	ldr	r2, [r7, #20]
    1efe:	4013      	ands	r3, r2
    1f00:	617b      	str	r3, [r7, #20]
    1f02:	e005      	b.n	1f10 <USART_GetITStatus+0x6c>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	8a9b      	ldrh	r3, [r3, #20]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	697a      	ldr	r2, [r7, #20]
    1f0c:	4013      	ands	r3, r2
    1f0e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    1f10:	887b      	ldrh	r3, [r7, #2]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b29b      	uxth	r3, r3
    1f16:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2201      	movs	r2, #1
    1f1c:	fa02 f303 	lsl.w	r3, r2, r3
    1f20:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    1f22:	687b      	ldr	r3, [r7, #4]
    1f24:	881b      	ldrh	r3, [r3, #0]
    1f26:	b29b      	uxth	r3, r3
    1f28:	68fa      	ldr	r2, [r7, #12]
    1f2a:	4013      	ands	r3, r2
    1f2c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    1f2e:	697b      	ldr	r3, [r7, #20]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d005      	beq.n	1f40 <USART_GetITStatus+0x9c>
    1f34:	68fb      	ldr	r3, [r7, #12]
    1f36:	2b00      	cmp	r3, #0
    1f38:	d002      	beq.n	1f40 <USART_GetITStatus+0x9c>
  {
    bitstatus = SET;
    1f3a:	2301      	movs	r3, #1
    1f3c:	74fb      	strb	r3, [r7, #19]
    1f3e:	e001      	b.n	1f44 <USART_GetITStatus+0xa0>
  }
  else
  {
    bitstatus = RESET;
    1f40:	2300      	movs	r3, #0
    1f42:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    1f44:	7cfb      	ldrb	r3, [r7, #19]
}
    1f46:	4618      	mov	r0, r3
    1f48:	371c      	adds	r7, #28
    1f4a:	46bd      	mov	sp, r7
    1f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    1f54:	b480      	push	{r7}
    1f56:	b085      	sub	sp, #20
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    1f60:	2300      	movs	r3, #0
    1f62:	81fb      	strh	r3, [r7, #14]
    1f64:	2300      	movs	r3, #0
    1f66:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    1f68:	887b      	ldrh	r3, [r7, #2]
    1f6a:	0a1b      	lsrs	r3, r3, #8
    1f6c:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    1f6e:	89fb      	ldrh	r3, [r7, #14]
    1f70:	2201      	movs	r2, #1
    1f72:	fa02 f303 	lsl.w	r3, r2, r3
    1f76:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    1f78:	89bb      	ldrh	r3, [r7, #12]
    1f7a:	43db      	mvns	r3, r3
    1f7c:	b29a      	uxth	r2, r3
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	801a      	strh	r2, [r3, #0]
}
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1f8c:	b480      	push	{r7}
    1f8e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f94:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f98:	2200      	movs	r2, #0
    1f9a:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    1f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fa4:	2200      	movs	r2, #0
    1fa6:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    1fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fb0:	2200      	movs	r2, #0
    1fb2:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    1fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fb8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fbc:	2200      	movs	r2, #0
    1fbe:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    1fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1fcc:	f2c0 020f 	movt	r2, #15
    1fd0:	615a      	str	r2, [r3, #20]
}
    1fd2:	46bd      	mov	sp, r7
    1fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1fdc:	b480      	push	{r7}
    1fde:	b085      	sub	sp, #20
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1fe4:	2300      	movs	r3, #0
    1fe6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ff0:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	799b      	ldrb	r3, [r3, #6]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d074      	beq.n	20e4 <EXTI_Init+0x108>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1ffe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2006:	f2c4 0201 	movt	r2, #16385	; 0x4001
    200a:	6811      	ldr	r1, [r2, #0]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	6812      	ldr	r2, [r2, #0]
    2010:	43d2      	mvns	r2, r2
    2012:	400a      	ands	r2, r1
    2014:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2016:	f44f 6380 	mov.w	r3, #1024	; 0x400
    201a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    201e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2022:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2026:	6851      	ldr	r1, [r2, #4]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	6812      	ldr	r2, [r2, #0]
    202c:	43d2      	mvns	r2, r2
    202e:	400a      	ands	r2, r1
    2030:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    2032:	687b      	ldr	r3, [r7, #4]
    2034:	791b      	ldrb	r3, [r3, #4]
    2036:	68fa      	ldr	r2, [r7, #12]
    2038:	4413      	add	r3, r2
    203a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	68fa      	ldr	r2, [r7, #12]
    2040:	6811      	ldr	r1, [r2, #0]
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	6812      	ldr	r2, [r2, #0]
    2046:	430a      	orrs	r2, r1
    2048:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    204e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2056:	f2c4 0201 	movt	r2, #16385	; 0x4001
    205a:	6891      	ldr	r1, [r2, #8]
    205c:	687a      	ldr	r2, [r7, #4]
    205e:	6812      	ldr	r2, [r2, #0]
    2060:	43d2      	mvns	r2, r2
    2062:	400a      	ands	r2, r1
    2064:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    206a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    206e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2072:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2076:	68d1      	ldr	r1, [r2, #12]
    2078:	687a      	ldr	r2, [r7, #4]
    207a:	6812      	ldr	r2, [r2, #0]
    207c:	43d2      	mvns	r2, r2
    207e:	400a      	ands	r2, r1
    2080:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2082:	687b      	ldr	r3, [r7, #4]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b10      	cmp	r3, #16
    2088:	d11a      	bne.n	20c0 <EXTI_Init+0xe4>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    208a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    208e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2092:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2096:	f2c4 0201 	movt	r2, #16385	; 0x4001
    209a:	6891      	ldr	r1, [r2, #8]
    209c:	687a      	ldr	r2, [r7, #4]
    209e:	6812      	ldr	r2, [r2, #0]
    20a0:	430a      	orrs	r2, r1
    20a2:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    20a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    20b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20b4:	68d1      	ldr	r1, [r2, #12]
    20b6:	687a      	ldr	r2, [r7, #4]
    20b8:	6812      	ldr	r2, [r2, #0]
    20ba:	430a      	orrs	r2, r1
    20bc:	60da      	str	r2, [r3, #12]
    20be:	e01e      	b.n	20fe <EXTI_Init+0x122>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    20c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    20c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20c8:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    20ca:	687b      	ldr	r3, [r7, #4]
    20cc:	795b      	ldrb	r3, [r3, #5]
    20ce:	68fa      	ldr	r2, [r7, #12]
    20d0:	4413      	add	r3, r2
    20d2:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    20d4:	68fb      	ldr	r3, [r7, #12]
    20d6:	68fa      	ldr	r2, [r7, #12]
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	687a      	ldr	r2, [r7, #4]
    20dc:	6812      	ldr	r2, [r2, #0]
    20de:	430a      	orrs	r2, r1
    20e0:	601a      	str	r2, [r3, #0]
    20e2:	e00c      	b.n	20fe <EXTI_Init+0x122>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	791b      	ldrb	r3, [r3, #4]
    20e8:	68fa      	ldr	r2, [r7, #12]
    20ea:	4413      	add	r3, r2
    20ec:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    20ee:	68fb      	ldr	r3, [r7, #12]
    20f0:	68fa      	ldr	r2, [r7, #12]
    20f2:	6811      	ldr	r1, [r2, #0]
    20f4:	687a      	ldr	r2, [r7, #4]
    20f6:	6812      	ldr	r2, [r2, #0]
    20f8:	43d2      	mvns	r2, r2
    20fa:	400a      	ands	r2, r1
    20fc:	601a      	str	r2, [r3, #0]
  }
}
    20fe:	3714      	adds	r7, #20
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2116:	687b      	ldr	r3, [r7, #4]
    2118:	2200      	movs	r2, #0
    211a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    211c:	687b      	ldr	r3, [r7, #4]
    211e:	220c      	movs	r2, #12
    2120:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2122:	687b      	ldr	r3, [r7, #4]
    2124:	2200      	movs	r2, #0
    2126:	719a      	strb	r2, [r3, #6]
}
    2128:	370c      	adds	r7, #12
    212a:	46bd      	mov	sp, r7
    212c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2134:	b480      	push	{r7}
    2136:	b083      	sub	sp, #12
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    213c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2140:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2144:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2148:	f2c4 0201 	movt	r2, #16385	; 0x4001
    214c:	6911      	ldr	r1, [r2, #16]
    214e:	687a      	ldr	r2, [r7, #4]
    2150:	430a      	orrs	r2, r1
    2152:	611a      	str	r2, [r3, #16]
}
    2154:	370c      	adds	r7, #12
    2156:	46bd      	mov	sp, r7
    2158:	f85d 7b04 	ldr.w	r7, [sp], #4
    215c:	4770      	bx	lr
    215e:	bf00      	nop

00002160 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2160:	b480      	push	{r7}
    2162:	b085      	sub	sp, #20
    2164:	af00      	add	r7, sp, #0
    2166:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2168:	2300      	movs	r3, #0
    216a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    216c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2170:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2174:	695a      	ldr	r2, [r3, #20]
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	4013      	ands	r3, r2
    217a:	2b00      	cmp	r3, #0
    217c:	d002      	beq.n	2184 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    217e:	2301      	movs	r3, #1
    2180:	73fb      	strb	r3, [r7, #15]
    2182:	e001      	b.n	2188 <EXTI_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
    2184:	2300      	movs	r3, #0
    2186:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2188:	7bfb      	ldrb	r3, [r7, #15]
}
    218a:	4618      	mov	r0, r3
    218c:	3714      	adds	r7, #20
    218e:	46bd      	mov	sp, r7
    2190:	f85d 7b04 	ldr.w	r7, [sp], #4
    2194:	4770      	bx	lr
    2196:	bf00      	nop

00002198 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2198:	b480      	push	{r7}
    219a:	b083      	sub	sp, #12
    219c:	af00      	add	r7, sp, #0
    219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    21a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21a8:	687a      	ldr	r2, [r7, #4]
    21aa:	615a      	str	r2, [r3, #20]
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    21b4:	4770      	bx	lr
    21b6:	bf00      	nop

000021b8 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    21b8:	b480      	push	{r7}
    21ba:	b085      	sub	sp, #20
    21bc:	af00      	add	r7, sp, #0
    21be:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    21c0:	2300      	movs	r3, #0
    21c2:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    21c4:	2300      	movs	r3, #0
    21c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    21c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	4013      	ands	r3, r2
    21d6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    21d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    21dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    21e0:	695a      	ldr	r2, [r3, #20]
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	4013      	ands	r3, r2
    21e6:	2b00      	cmp	r3, #0
    21e8:	d005      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d002      	beq.n	21f6 <EXTI_GetITStatus+0x3e>
  {
    bitstatus = SET;
    21f0:	2301      	movs	r3, #1
    21f2:	73fb      	strb	r3, [r7, #15]
    21f4:	e001      	b.n	21fa <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    21f6:	2300      	movs	r3, #0
    21f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    21fa:	7bfb      	ldrb	r3, [r7, #15]
}
    21fc:	4618      	mov	r0, r3
    21fe:	3714      	adds	r7, #20
    2200:	46bd      	mov	sp, r7
    2202:	f85d 7b04 	ldr.w	r7, [sp], #4
    2206:	4770      	bx	lr

00002208 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2208:	b480      	push	{r7}
    220a:	b083      	sub	sp, #12
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2210:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2214:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2218:	687a      	ldr	r2, [r7, #4]
    221a:	615a      	str	r2, [r3, #20]
}
    221c:	370c      	adds	r7, #12
    221e:	46bd      	mov	sp, r7
    2220:	f85d 7b04 	ldr.w	r7, [sp], #4
    2224:	4770      	bx	lr
    2226:	bf00      	nop

00002228 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    2228:	b480      	push	{r7}
    222a:	b083      	sub	sp, #12
    222c:	af00      	add	r7, sp, #0
    222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    2230:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2234:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
    223e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    2242:	60da      	str	r2, [r3, #12]
}
    2244:	370c      	adds	r7, #12
    2246:	46bd      	mov	sp, r7
    2248:	f85d 7b04 	ldr.w	r7, [sp], #4
    224c:	4770      	bx	lr
    224e:	bf00      	nop

00002250 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    2250:	b480      	push	{r7}
    2252:	b087      	sub	sp, #28
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    2258:	2300      	movs	r3, #0
    225a:	617b      	str	r3, [r7, #20]
    225c:	2300      	movs	r3, #0
    225e:	613b      	str	r3, [r7, #16]
    2260:	230f      	movs	r3, #15
    2262:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	78db      	ldrb	r3, [r3, #3]
    2268:	2b00      	cmp	r3, #0
    226a:	d042      	beq.n	22f2 <NVIC_Init+0xa2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    226c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2270:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2274:	68db      	ldr	r3, [r3, #12]
    2276:	43db      	mvns	r3, r3
    2278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    227c:	0a1b      	lsrs	r3, r3, #8
    227e:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2280:	697b      	ldr	r3, [r7, #20]
    2282:	f1c3 0304 	rsb	r3, r3, #4
    2286:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	68fa      	ldr	r2, [r7, #12]
    228c:	fa22 f303 	lsr.w	r3, r2, r3
    2290:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	785b      	ldrb	r3, [r3, #1]
    2296:	461a      	mov	r2, r3
    2298:	693b      	ldr	r3, [r7, #16]
    229a:	fa02 f303 	lsl.w	r3, r2, r3
    229e:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	789b      	ldrb	r3, [r3, #2]
    22a4:	461a      	mov	r2, r3
    22a6:	68fb      	ldr	r3, [r7, #12]
    22a8:	4013      	ands	r3, r2
    22aa:	697a      	ldr	r2, [r7, #20]
    22ac:	4313      	orrs	r3, r2
    22ae:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    22b0:	697b      	ldr	r3, [r7, #20]
    22b2:	011b      	lsls	r3, r3, #4
    22b4:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    22b6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22ba:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22be:	687a      	ldr	r2, [r7, #4]
    22c0:	7812      	ldrb	r2, [r2, #0]
    22c2:	4611      	mov	r1, r2
    22c4:	697a      	ldr	r2, [r7, #20]
    22c6:	b2d2      	uxtb	r2, r2
    22c8:	440b      	add	r3, r1
    22ca:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ce:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	7812      	ldrb	r2, [r2, #0]
    22da:	0952      	lsrs	r2, r2, #5
    22dc:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    22de:	6879      	ldr	r1, [r7, #4]
    22e0:	7809      	ldrb	r1, [r1, #0]
    22e2:	f001 011f 	and.w	r1, r1, #31
    22e6:	2001      	movs	r0, #1
    22e8:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    22f0:	e011      	b.n	2316 <NVIC_Init+0xc6>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    22f2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    22f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    22fa:	687a      	ldr	r2, [r7, #4]
    22fc:	7812      	ldrb	r2, [r2, #0]
    22fe:	0952      	lsrs	r2, r2, #5
    2300:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2302:	6879      	ldr	r1, [r7, #4]
    2304:	7809      	ldrb	r1, [r1, #0]
    2306:	f001 011f 	and.w	r1, r1, #31
    230a:	2001      	movs	r0, #1
    230c:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2310:	3220      	adds	r2, #32
    2312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    2316:	371c      	adds	r7, #28
    2318:	46bd      	mov	sp, r7
    231a:	f85d 7b04 	ldr.w	r7, [sp], #4
    231e:	4770      	bx	lr

00002320 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    2320:	b480      	push	{r7}
    2322:	b083      	sub	sp, #12
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    232a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    232e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2332:	683a      	ldr	r2, [r7, #0]
    2334:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    2338:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    233c:	6879      	ldr	r1, [r7, #4]
    233e:	430a      	orrs	r2, r1
    2340:	609a      	str	r2, [r3, #8]
}
    2342:	370c      	adds	r7, #12
    2344:	46bd      	mov	sp, r7
    2346:	f85d 7b04 	ldr.w	r7, [sp], #4
    234a:	4770      	bx	lr

0000234c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    234c:	b480      	push	{r7}
    234e:	b083      	sub	sp, #12
    2350:	af00      	add	r7, sp, #0
    2352:	4602      	mov	r2, r0
    2354:	460b      	mov	r3, r1
    2356:	71fa      	strb	r2, [r7, #7]
    2358:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    235a:	79bb      	ldrb	r3, [r7, #6]
    235c:	2b00      	cmp	r3, #0
    235e:	d00c      	beq.n	237a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2360:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2364:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2368:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    236c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2370:	6911      	ldr	r1, [r2, #16]
    2372:	79fa      	ldrb	r2, [r7, #7]
    2374:	430a      	orrs	r2, r1
    2376:	611a      	str	r2, [r3, #16]
    2378:	e00c      	b.n	2394 <NVIC_SystemLPConfig+0x48>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    237a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    237e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2382:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2386:	f2ce 0200 	movt	r2, #57344	; 0xe000
    238a:	6911      	ldr	r1, [r2, #16]
    238c:	79fa      	ldrb	r2, [r7, #7]
    238e:	43d2      	mvns	r2, r2
    2390:	400a      	ands	r2, r1
    2392:	611a      	str	r2, [r3, #16]
  }
}
    2394:	370c      	adds	r7, #12
    2396:	46bd      	mov	sp, r7
    2398:	f85d 7b04 	ldr.w	r7, [sp], #4
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    23a0:	b480      	push	{r7}
    23a2:	b083      	sub	sp, #12
    23a4:	af00      	add	r7, sp, #0
    23a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    23a8:	687b      	ldr	r3, [r7, #4]
    23aa:	2b04      	cmp	r3, #4
    23ac:	d10c      	bne.n	23c8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    23ae:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b6:	f24e 0210 	movw	r2, #57360	; 0xe010
    23ba:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23be:	6812      	ldr	r2, [r2, #0]
    23c0:	f042 0204 	orr.w	r2, r2, #4
    23c4:	601a      	str	r2, [r3, #0]
    23c6:	e00b      	b.n	23e0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23c8:	f24e 0310 	movw	r3, #57360	; 0xe010
    23cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23d0:	f24e 0210 	movw	r2, #57360	; 0xe010
    23d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23d8:	6812      	ldr	r2, [r2, #0]
    23da:	f022 0204 	bic.w	r2, r2, #4
    23de:	601a      	str	r2, [r3, #0]
  }
}
    23e0:	370c      	adds	r7, #12
    23e2:	46bd      	mov	sp, r7
    23e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    23ec:	b580      	push	{r7, lr}
    23ee:	b086      	sub	sp, #24
    23f0:	af00      	add	r7, sp, #0
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	60b9      	str	r1, [r7, #8]
    23f6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    23f8:	2038      	movs	r0, #56	; 0x38
    23fa:	f003 fcad 	bl	5d58 <pvPortMalloc>
    23fe:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    2400:	693b      	ldr	r3, [r7, #16]
    2402:	2b00      	cmp	r3, #0
    2404:	d058      	beq.n	24b8 <xCoRoutineCreate+0xcc>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2406:	f240 6344 	movw	r3, #1604	; 0x644
    240a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    240e:	681b      	ldr	r3, [r3, #0]
    2410:	2b00      	cmp	r3, #0
    2412:	d107      	bne.n	2424 <xCoRoutineCreate+0x38>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2414:	f240 6344 	movw	r3, #1604	; 0x644
    2418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    241c:	693a      	ldr	r2, [r7, #16]
    241e:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    2420:	f000 fa08 	bl	2834 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    2424:	68bb      	ldr	r3, [r7, #8]
    2426:	2b01      	cmp	r3, #1
    2428:	d901      	bls.n	242e <xCoRoutineCreate+0x42>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    242a:	2301      	movs	r3, #1
    242c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    242e:	693b      	ldr	r3, [r7, #16]
    2430:	2200      	movs	r2, #0
    2432:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    2434:	693b      	ldr	r3, [r7, #16]
    2436:	68ba      	ldr	r2, [r7, #8]
    2438:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    243a:	693b      	ldr	r3, [r7, #16]
    243c:	687a      	ldr	r2, [r7, #4]
    243e:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    2440:	693b      	ldr	r3, [r7, #16]
    2442:	68fa      	ldr	r2, [r7, #12]
    2444:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2446:	693b      	ldr	r3, [r7, #16]
    2448:	3304      	adds	r3, #4
    244a:	4618      	mov	r0, r3
    244c:	f001 fe52 	bl	40f4 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2450:	693b      	ldr	r3, [r7, #16]
    2452:	3318      	adds	r3, #24
    2454:	4618      	mov	r0, r3
    2456:	f001 fe4d 	bl	40f4 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    245a:	693b      	ldr	r3, [r7, #16]
    245c:	693a      	ldr	r2, [r7, #16]
    245e:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2460:	693b      	ldr	r3, [r7, #16]
    2462:	693a      	ldr	r2, [r7, #16]
    2464:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2466:	68bb      	ldr	r3, [r7, #8]
    2468:	f1c3 0205 	rsb	r2, r3, #5
    246c:	693b      	ldr	r3, [r7, #16]
    246e:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2470:	693b      	ldr	r3, [r7, #16]
    2472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2474:	f240 6348 	movw	r3, #1608	; 0x648
    2478:	f2c2 0300 	movt	r3, #8192	; 0x2000
    247c:	681b      	ldr	r3, [r3, #0]
    247e:	429a      	cmp	r2, r3
    2480:	d906      	bls.n	2490 <xCoRoutineCreate+0xa4>
    2482:	693b      	ldr	r3, [r7, #16]
    2484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2486:	f240 6348 	movw	r3, #1608	; 0x648
    248a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    248e:	601a      	str	r2, [r3, #0]
    2490:	693b      	ldr	r3, [r7, #16]
    2492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2494:	4613      	mov	r3, r2
    2496:	009b      	lsls	r3, r3, #2
    2498:	4413      	add	r3, r2
    249a:	009b      	lsls	r3, r3, #2
    249c:	f240 52d8 	movw	r2, #1496	; 0x5d8
    24a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    24a4:	441a      	add	r2, r3
    24a6:	693b      	ldr	r3, [r7, #16]
    24a8:	3304      	adds	r3, #4
    24aa:	4610      	mov	r0, r2
    24ac:	4619      	mov	r1, r3
    24ae:	f001 fe2d 	bl	410c <vListInsertEnd>

		xReturn = pdPASS;
    24b2:	2301      	movs	r3, #1
    24b4:	617b      	str	r3, [r7, #20]
    24b6:	e002      	b.n	24be <xCoRoutineCreate+0xd2>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    24b8:	f04f 33ff 	mov.w	r3, #4294967295
    24bc:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    24be:	697b      	ldr	r3, [r7, #20]
}
    24c0:	4618      	mov	r0, r3
    24c2:	3718      	adds	r7, #24
    24c4:	46bd      	mov	sp, r7
    24c6:	bd80      	pop	{r7, pc}

000024c8 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b084      	sub	sp, #16
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
    24d0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    24d2:	f240 634c 	movw	r3, #1612	; 0x64c
    24d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24da:	681a      	ldr	r2, [r3, #0]
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	4413      	add	r3, r2
    24e0:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    24e2:	f240 6344 	movw	r3, #1604	; 0x644
    24e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24ea:	681b      	ldr	r3, [r3, #0]
    24ec:	3304      	adds	r3, #4
    24ee:	4618      	mov	r0, r3
    24f0:	f001 fe6c 	bl	41cc <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    24f4:	f240 6344 	movw	r3, #1604	; 0x644
    24f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24fc:	681b      	ldr	r3, [r3, #0]
    24fe:	68fa      	ldr	r2, [r7, #12]
    2500:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    2502:	f240 634c 	movw	r3, #1612	; 0x64c
    2506:	f2c2 0300 	movt	r3, #8192	; 0x2000
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	68fa      	ldr	r2, [r7, #12]
    250e:	429a      	cmp	r2, r3
    2510:	d20f      	bcs.n	2532 <vCoRoutineAddToDelayedList+0x6a>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2512:	f240 632c 	movw	r3, #1580	; 0x62c
    2516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    251a:	681a      	ldr	r2, [r3, #0]
    251c:	f240 6344 	movw	r3, #1604	; 0x644
    2520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2524:	681b      	ldr	r3, [r3, #0]
    2526:	3304      	adds	r3, #4
    2528:	4610      	mov	r0, r2
    252a:	4619      	mov	r1, r3
    252c:	f001 fe16 	bl	415c <vListInsert>
    2530:	e00e      	b.n	2550 <vCoRoutineAddToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2532:	f240 6328 	movw	r3, #1576	; 0x628
    2536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    253a:	681a      	ldr	r2, [r3, #0]
    253c:	f240 6344 	movw	r3, #1604	; 0x644
    2540:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	3304      	adds	r3, #4
    2548:	4610      	mov	r0, r2
    254a:	4619      	mov	r1, r3
    254c:	f001 fe06 	bl	415c <vListInsert>
	}

	if( pxEventList )
    2550:	683b      	ldr	r3, [r7, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d009      	beq.n	256a <vCoRoutineAddToDelayedList+0xa2>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2556:	f240 6344 	movw	r3, #1604	; 0x644
    255a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	3318      	adds	r3, #24
    2562:	6838      	ldr	r0, [r7, #0]
    2564:	4619      	mov	r1, r3
    2566:	f001 fdf9 	bl	415c <vListInsert>
	}
}
    256a:	3710      	adds	r7, #16
    256c:	46bd      	mov	sp, r7
    256e:	bd80      	pop	{r7, pc}

00002570 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2570:	b580      	push	{r7, lr}
    2572:	b082      	sub	sp, #8
    2574:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2576:	e039      	b.n	25ec <prvCheckPendingReadyList+0x7c>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2578:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    257c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2580:	f240 6330 	movw	r3, #1584	; 0x630
    2584:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2588:	68db      	ldr	r3, [r3, #12]
    258a:	68db      	ldr	r3, [r3, #12]
    258c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    258e:	687b      	ldr	r3, [r7, #4]
    2590:	3318      	adds	r3, #24
    2592:	4618      	mov	r0, r3
    2594:	f001 fe1a 	bl	41cc <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2598:	f04f 0000 	mov.w	r0, #0
    259c:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	3304      	adds	r3, #4
    25a4:	4618      	mov	r0, r3
    25a6:	f001 fe11 	bl	41cc <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ae:	f240 6348 	movw	r3, #1608	; 0x648
    25b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25b6:	681b      	ldr	r3, [r3, #0]
    25b8:	429a      	cmp	r2, r3
    25ba:	d906      	bls.n	25ca <prvCheckPendingReadyList+0x5a>
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25c0:	f240 6348 	movw	r3, #1608	; 0x648
    25c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25c8:	601a      	str	r2, [r3, #0]
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    25ce:	4613      	mov	r3, r2
    25d0:	009b      	lsls	r3, r3, #2
    25d2:	4413      	add	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	f240 52d8 	movw	r2, #1496	; 0x5d8
    25da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    25de:	441a      	add	r2, r3
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	3304      	adds	r3, #4
    25e4:	4610      	mov	r0, r2
    25e6:	4619      	mov	r1, r3
    25e8:	f001 fd90 	bl	410c <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    25ec:	f240 6330 	movw	r3, #1584	; 0x630
    25f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2b00      	cmp	r3, #0
    25f8:	d1be      	bne.n	2578 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    25fa:	3708      	adds	r7, #8
    25fc:	46bd      	mov	sp, r7
    25fe:	bd80      	pop	{r7, pc}

00002600 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2600:	b580      	push	{r7, lr}
    2602:	b082      	sub	sp, #8
    2604:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2606:	f002 fe5f 	bl	52c8 <xTaskGetTickCount>
    260a:	4602      	mov	r2, r0
    260c:	f240 6350 	movw	r3, #1616	; 0x650
    2610:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	1ad2      	subs	r2, r2, r3
    2618:	f240 6354 	movw	r3, #1620	; 0x654
    261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2620:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2622:	e085      	b.n	2730 <prvCheckDelayedList+0x130>
	{
		xCoRoutineTickCount++;
    2624:	f240 634c 	movw	r3, #1612	; 0x64c
    2628:	f2c2 0300 	movt	r3, #8192	; 0x2000
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	1c5a      	adds	r2, r3, #1
    2630:	f240 634c 	movw	r3, #1612	; 0x64c
    2634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2638:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    263a:	f240 6354 	movw	r3, #1620	; 0x654
    263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	1e5a      	subs	r2, r3, #1
    2646:	f240 6354 	movw	r3, #1620	; 0x654
    264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    264e:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2650:	f240 634c 	movw	r3, #1612	; 0x64c
    2654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2658:	681b      	ldr	r3, [r3, #0]
    265a:	2b00      	cmp	r3, #0
    265c:	d116      	bne.n	268c <prvCheckDelayedList+0x8c>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    265e:	f240 6328 	movw	r3, #1576	; 0x628
    2662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    266a:	f240 632c 	movw	r3, #1580	; 0x62c
    266e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	f240 6328 	movw	r3, #1576	; 0x628
    2678:	f2c2 0300 	movt	r3, #8192	; 0x2000
    267c:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    267e:	f240 632c 	movw	r3, #1580	; 0x62c
    2682:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2686:	687a      	ldr	r2, [r7, #4]
    2688:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    268a:	e049      	b.n	2720 <prvCheckDelayedList+0x120>
    268c:	e048      	b.n	2720 <prvCheckDelayedList+0x120>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    268e:	f240 6328 	movw	r3, #1576	; 0x628
    2692:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2696:	681b      	ldr	r3, [r3, #0]
    2698:	68db      	ldr	r3, [r3, #12]
    269a:	68db      	ldr	r3, [r3, #12]
    269c:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    269e:	683b      	ldr	r3, [r7, #0]
    26a0:	685a      	ldr	r2, [r3, #4]
    26a2:	f240 634c 	movw	r3, #1612	; 0x64c
    26a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	429a      	cmp	r2, r3
    26ae:	d900      	bls.n	26b2 <prvCheckDelayedList+0xb2>
			{			
				/* Timeout not yet expired. */																			
				break;																				
    26b0:	e03e      	b.n	2730 <prvCheckDelayedList+0x130>
			}																						

			portDISABLE_INTERRUPTS();
    26b2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    26b6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	3304      	adds	r3, #4
    26be:	4618      	mov	r0, r3
    26c0:	f001 fd84 	bl	41cc <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26c8:	2b00      	cmp	r3, #0
    26ca:	d004      	beq.n	26d6 <prvCheckDelayedList+0xd6>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    26cc:	683b      	ldr	r3, [r7, #0]
    26ce:	3318      	adds	r3, #24
    26d0:	4618      	mov	r0, r3
    26d2:	f001 fd7b 	bl	41cc <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    26d6:	f04f 0000 	mov.w	r0, #0
    26da:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    26de:	683b      	ldr	r3, [r7, #0]
    26e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26e2:	f240 6348 	movw	r3, #1608	; 0x648
    26e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	429a      	cmp	r2, r3
    26ee:	d906      	bls.n	26fe <prvCheckDelayedList+0xfe>
    26f0:	683b      	ldr	r3, [r7, #0]
    26f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    26f4:	f240 6348 	movw	r3, #1608	; 0x648
    26f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26fc:	601a      	str	r2, [r3, #0]
    26fe:	683b      	ldr	r3, [r7, #0]
    2700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2702:	4613      	mov	r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	4413      	add	r3, r2
    2708:	009b      	lsls	r3, r3, #2
    270a:	f240 52d8 	movw	r2, #1496	; 0x5d8
    270e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2712:	441a      	add	r2, r3
    2714:	683b      	ldr	r3, [r7, #0]
    2716:	3304      	adds	r3, #4
    2718:	4610      	mov	r0, r2
    271a:	4619      	mov	r1, r3
    271c:	f001 fcf6 	bl	410c <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2720:	f240 6328 	movw	r3, #1576	; 0x628
    2724:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	681b      	ldr	r3, [r3, #0]
    272c:	2b00      	cmp	r3, #0
    272e:	d1ae      	bne.n	268e <prvCheckDelayedList+0x8e>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2730:	f240 6354 	movw	r3, #1620	; 0x654
    2734:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2738:	681b      	ldr	r3, [r3, #0]
    273a:	2b00      	cmp	r3, #0
    273c:	f47f af72 	bne.w	2624 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2740:	f240 634c 	movw	r3, #1612	; 0x64c
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	681a      	ldr	r2, [r3, #0]
    274a:	f240 6350 	movw	r3, #1616	; 0x650
    274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2752:	601a      	str	r2, [r3, #0]
}
    2754:	3708      	adds	r7, #8
    2756:	46bd      	mov	sp, r7
    2758:	bd80      	pop	{r7, pc}
    275a:	bf00      	nop

0000275c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    275c:	b580      	push	{r7, lr}
    275e:	b082      	sub	sp, #8
    2760:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2762:	f7ff ff05 	bl	2570 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2766:	f7ff ff4b 	bl	2600 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    276a:	e012      	b.n	2792 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    276c:	f240 6348 	movw	r3, #1608	; 0x648
    2770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <vCoRoutineSchedule+0x20>
		{
			/* No more co-routines to check. */
			return;
    277a:	e057      	b.n	282c <vCoRoutineSchedule+0xd0>
		}
		--uxTopCoRoutineReadyPriority;
    277c:	f240 6348 	movw	r3, #1608	; 0x648
    2780:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	1e5a      	subs	r2, r3, #1
    2788:	f240 6348 	movw	r3, #1608	; 0x648
    278c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2790:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2792:	f240 6348 	movw	r3, #1608	; 0x648
    2796:	f2c2 0300 	movt	r3, #8192	; 0x2000
    279a:	6819      	ldr	r1, [r3, #0]
    279c:	f240 52d8 	movw	r2, #1496	; 0x5d8
    27a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a4:	460b      	mov	r3, r1
    27a6:	009b      	lsls	r3, r3, #2
    27a8:	440b      	add	r3, r1
    27aa:	009b      	lsls	r3, r3, #2
    27ac:	4413      	add	r3, r2
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	2b00      	cmp	r3, #0
    27b2:	d0db      	beq.n	276c <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    27b4:	f240 6348 	movw	r3, #1608	; 0x648
    27b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27bc:	681a      	ldr	r2, [r3, #0]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	f240 52d8 	movw	r2, #1496	; 0x5d8
    27ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27ce:	4413      	add	r3, r2
    27d0:	607b      	str	r3, [r7, #4]
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	685b      	ldr	r3, [r3, #4]
    27d6:	685a      	ldr	r2, [r3, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	605a      	str	r2, [r3, #4]
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	685a      	ldr	r2, [r3, #4]
    27e0:	687b      	ldr	r3, [r7, #4]
    27e2:	3308      	adds	r3, #8
    27e4:	429a      	cmp	r2, r3
    27e6:	d104      	bne.n	27f2 <vCoRoutineSchedule+0x96>
    27e8:	687b      	ldr	r3, [r7, #4]
    27ea:	685b      	ldr	r3, [r3, #4]
    27ec:	685a      	ldr	r2, [r3, #4]
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	605a      	str	r2, [r3, #4]
    27f2:	687b      	ldr	r3, [r7, #4]
    27f4:	685b      	ldr	r3, [r3, #4]
    27f6:	68da      	ldr	r2, [r3, #12]
    27f8:	f240 6344 	movw	r3, #1604	; 0x644
    27fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2800:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2802:	f240 6344 	movw	r3, #1604	; 0x644
    2806:	f2c2 0300 	movt	r3, #8192	; 0x2000
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	681a      	ldr	r2, [r3, #0]
    280e:	f240 6344 	movw	r3, #1604	; 0x644
    2812:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2816:	6819      	ldr	r1, [r3, #0]
    2818:	f240 6344 	movw	r3, #1604	; 0x644
    281c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2820:	681b      	ldr	r3, [r3, #0]
    2822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2824:	4608      	mov	r0, r1
    2826:	4619      	mov	r1, r3
    2828:	4790      	blx	r2

	return;
    282a:	bf00      	nop
}
    282c:	3708      	adds	r7, #8
    282e:	46bd      	mov	sp, r7
    2830:	bd80      	pop	{r7, pc}
    2832:	bf00      	nop

00002834 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2834:	b580      	push	{r7, lr}
    2836:	b082      	sub	sp, #8
    2838:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    283a:	2300      	movs	r3, #0
    283c:	607b      	str	r3, [r7, #4]
    283e:	e00f      	b.n	2860 <prvInitialiseCoRoutineLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2840:	687a      	ldr	r2, [r7, #4]
    2842:	4613      	mov	r3, r2
    2844:	009b      	lsls	r3, r3, #2
    2846:	4413      	add	r3, r2
    2848:	009b      	lsls	r3, r3, #2
    284a:	f240 52d8 	movw	r2, #1496	; 0x5d8
    284e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2852:	4413      	add	r3, r2
    2854:	4618      	mov	r0, r3
    2856:	f001 fc2d 	bl	40b4 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    285a:	687b      	ldr	r3, [r7, #4]
    285c:	3301      	adds	r3, #1
    285e:	607b      	str	r3, [r7, #4]
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	2b01      	cmp	r3, #1
    2864:	d9ec      	bls.n	2840 <prvInitialiseCoRoutineLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2866:	f240 6000 	movw	r0, #1536	; 0x600
    286a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    286e:	f001 fc21 	bl	40b4 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2872:	f240 6014 	movw	r0, #1556	; 0x614
    2876:	f2c2 0000 	movt	r0, #8192	; 0x2000
    287a:	f001 fc1b 	bl	40b4 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    287e:	f240 6030 	movw	r0, #1584	; 0x630
    2882:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2886:	f001 fc15 	bl	40b4 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    288a:	f240 6328 	movw	r3, #1576	; 0x628
    288e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2892:	f240 6200 	movw	r2, #1536	; 0x600
    2896:	f2c2 0200 	movt	r2, #8192	; 0x2000
    289a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    289c:	f240 632c 	movw	r3, #1580	; 0x62c
    28a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a4:	f240 6214 	movw	r2, #1556	; 0x614
    28a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    28ac:	601a      	str	r2, [r3, #0]
}
    28ae:	3708      	adds	r7, #8
    28b0:	46bd      	mov	sp, r7
    28b2:	bd80      	pop	{r7, pc}

000028b4 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    28b4:	b580      	push	{r7, lr}
    28b6:	b084      	sub	sp, #16
    28b8:	af00      	add	r7, sp, #0
    28ba:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	68db      	ldr	r3, [r3, #12]
    28c0:	68db      	ldr	r3, [r3, #12]
    28c2:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    28c4:	68bb      	ldr	r3, [r7, #8]
    28c6:	3318      	adds	r3, #24
    28c8:	4618      	mov	r0, r3
    28ca:	f001 fc7f 	bl	41cc <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    28ce:	68bb      	ldr	r3, [r7, #8]
    28d0:	3318      	adds	r3, #24
    28d2:	f240 6030 	movw	r0, #1584	; 0x630
    28d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    28da:	4619      	mov	r1, r3
    28dc:	f001 fc16 	bl	410c <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    28e0:	68bb      	ldr	r3, [r7, #8]
    28e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28e4:	f240 6344 	movw	r3, #1604	; 0x644
    28e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28ec:	681b      	ldr	r3, [r3, #0]
    28ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    28f0:	429a      	cmp	r2, r3
    28f2:	d302      	bcc.n	28fa <xCoRoutineRemoveFromEventList+0x46>
	{
		xReturn = pdTRUE;
    28f4:	2301      	movs	r3, #1
    28f6:	60fb      	str	r3, [r7, #12]
    28f8:	e001      	b.n	28fe <xCoRoutineRemoveFromEventList+0x4a>
	}
	else
	{
		xReturn = pdFALSE;
    28fa:	2300      	movs	r3, #0
    28fc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    28fe:	68fb      	ldr	r3, [r7, #12]
}
    2900:	4618      	mov	r0, r3
    2902:	3710      	adds	r7, #16
    2904:	46bd      	mov	sp, r7
    2906:	bd80      	pop	{r7, pc}

00002908 <xIsERLNull>:
static void vEventSetxTag(portTickType xDeadline, portTickType xTimestamp, xEventHandle pxNewEvent );

// if xEventReadyList is not null,
// then return the type of destination servant of the first event
portBASE_TYPE xIsERLNull()
{
    2908:	b580      	push	{r7, lr}
    290a:	b082      	sub	sp, #8
    290c:	af00      	add	r7, sp, #0
    portBASE_TYPE pxDestination;
    struct tag * xTag;
    if(listCURRENT_LIST_LENGTH(&xEventReadyList) > 0)
    290e:	f640 03f8 	movw	r3, #2296	; 0x8f8
    2912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2916:	681b      	ldr	r3, [r3, #0]
    2918:	2b00      	cmp	r3, #0
    291a:	d029      	beq.n	2970 <xIsERLNull+0x68>
    {
        pxDestination = xEventGetpxDestination((xEventReadyList.xListEnd.pxNext)->pvOwner); 
    291c:	f640 03f8 	movw	r3, #2296	; 0x8f8
    2920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2924:	68db      	ldr	r3, [r3, #12]
    2926:	68db      	ldr	r3, [r3, #12]
    2928:	4618      	mov	r0, r3
    292a:	f000 f83f 	bl	29ac <xEventGetpxDestination>
    292e:	6078      	str	r0, [r7, #4]
        xTag = xEventGetxTag(xEventReadyList.xListEnd.pxNext->pvOwner);
    2930:	f640 03f8 	movw	r3, #2296	; 0x8f8
    2934:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2938:	68db      	ldr	r3, [r3, #12]
    293a:	68db      	ldr	r3, [r3, #12]
    293c:	4618      	mov	r0, r3
    293e:	f000 f841 	bl	29c4 <xEventGetxTag>
    2942:	6038      	str	r0, [r7, #0]
        if( xTaskGetTickCount() >= xTag->xTimestamp )
    2944:	f002 fcc0 	bl	52c8 <xTaskGetTickCount>
    2948:	4602      	mov	r2, r0
    294a:	683b      	ldr	r3, [r7, #0]
    294c:	685b      	ldr	r3, [r3, #4]
    294e:	429a      	cmp	r2, r3
    2950:	d30c      	bcc.n	296c <xIsERLNull+0x64>
            return xContexts[pxDestination].xType; 
    2952:	f640 120c 	movw	r2, #2316	; 0x90c
    2956:	f2c2 0200 	movt	r2, #8192	; 0x2000
    295a:	6879      	ldr	r1, [r7, #4]
    295c:	460b      	mov	r3, r1
    295e:	00db      	lsls	r3, r3, #3
    2960:	1a5b      	subs	r3, r3, r1
    2962:	00db      	lsls	r3, r3, #3
    2964:	4413      	add	r3, r2
    2966:	3304      	adds	r3, #4
    2968:	681b      	ldr	r3, [r3, #0]
    296a:	e003      	b.n	2974 <xIsERLNull+0x6c>
        else
            return 0;
    296c:	2300      	movs	r3, #0
    296e:	e001      	b.n	2974 <xIsERLNull+0x6c>
    }
    return -1;
    2970:	f04f 33ff 	mov.w	r3, #4294967295
}
    2974:	4618      	mov	r0, r3
    2976:	3708      	adds	r7, #8
    2978:	46bd      	mov	sp, r7
    297a:	bd80      	pop	{r7, pc}

0000297c <xEventGetxDeadline>:

portTickType xEventGetxDeadline( xEventHandle pxEvent )
{
    297c:	b480      	push	{r7}
    297e:	b083      	sub	sp, #12
    2980:	af00      	add	r7, sp, #0
    2982:	6078      	str	r0, [r7, #4]
    return ((eveECB *)pxEvent)->xTag.xDeadline;
    2984:	687b      	ldr	r3, [r7, #4]
    2986:	689b      	ldr	r3, [r3, #8]
}
    2988:	4618      	mov	r0, r3
    298a:	370c      	adds	r7, #12
    298c:	46bd      	mov	sp, r7
    298e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2992:	4770      	bx	lr

00002994 <xEventGetpxSource>:

portBASE_TYPE xEventGetpxSource( xEventHandle pxEvent )
{
    2994:	b480      	push	{r7}
    2996:	b083      	sub	sp, #12
    2998:	af00      	add	r7, sp, #0
    299a:	6078      	str	r0, [r7, #4]
    return ((eveECB *)pxEvent)->pxSource;
    299c:	687b      	ldr	r3, [r7, #4]
    299e:	681b      	ldr	r3, [r3, #0]
}
    29a0:	4618      	mov	r0, r3
    29a2:	370c      	adds	r7, #12
    29a4:	46bd      	mov	sp, r7
    29a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    29aa:	4770      	bx	lr

000029ac <xEventGetpxDestination>:

portBASE_TYPE xEventGetpxDestination( xEventHandle pxEvent)
{
    29ac:	b480      	push	{r7}
    29ae:	b083      	sub	sp, #12
    29b0:	af00      	add	r7, sp, #0
    29b2:	6078      	str	r0, [r7, #4]
    return ((eveECB *) pxEvent)->pxDestination;
    29b4:	687b      	ldr	r3, [r7, #4]
    29b6:	685b      	ldr	r3, [r3, #4]
}
    29b8:	4618      	mov	r0, r3
    29ba:	370c      	adds	r7, #12
    29bc:	46bd      	mov	sp, r7
    29be:	f85d 7b04 	ldr.w	r7, [sp], #4
    29c2:	4770      	bx	lr

000029c4 <xEventGetxTag>:

struct tag * xEventGetxTag( xEventHandle pxEvent)
{
    29c4:	b480      	push	{r7}
    29c6:	b083      	sub	sp, #12
    29c8:	af00      	add	r7, sp, #0
    29ca:	6078      	str	r0, [r7, #4]
    return (struct tag *)&((eveECB *) pxEvent)->xTag;
    29cc:	687b      	ldr	r3, [r7, #4]
    29ce:	3308      	adds	r3, #8
}
    29d0:	4618      	mov	r0, r3
    29d2:	370c      	adds	r7, #12
    29d4:	46bd      	mov	sp, r7
    29d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    29da:	4770      	bx	lr

000029dc <xEventGetxData>:

struct eventData * xEventGetxData( xEventHandle pxEvent)
{
    29dc:	b480      	push	{r7}
    29de:	b083      	sub	sp, #12
    29e0:	af00      	add	r7, sp, #0
    29e2:	6078      	str	r0, [r7, #4]
    return (struct eventData *)&((eveECB *) pxEvent)->xData;
    29e4:	687b      	ldr	r3, [r7, #4]
    29e6:	3318      	adds	r3, #24
}
    29e8:	4618      	mov	r0, r3
    29ea:	370c      	adds	r7, #12
    29ec:	46bd      	mov	sp, r7
    29ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    29f2:	4770      	bx	lr

000029f4 <getGCD>:

static portBASE_TYPE getGCD(portTickType t1, portTickType t2)
{
    29f4:	b580      	push	{r7, lr}
    29f6:	b082      	sub	sp, #8
    29f8:	af00      	add	r7, sp, #0
    29fa:	6078      	str	r0, [r7, #4]
    29fc:	6039      	str	r1, [r7, #0]
    return t1%t2==0 ? t2 : getGCD(t2, t1 % t2);
    29fe:	687b      	ldr	r3, [r7, #4]
    2a00:	683a      	ldr	r2, [r7, #0]
    2a02:	fbb3 f2f2 	udiv	r2, r3, r2
    2a06:	6839      	ldr	r1, [r7, #0]
    2a08:	fb01 f202 	mul.w	r2, r1, r2
    2a0c:	1a9b      	subs	r3, r3, r2
    2a0e:	2b00      	cmp	r3, #0
    2a10:	d00d      	beq.n	2a2e <getGCD+0x3a>
    2a12:	687b      	ldr	r3, [r7, #4]
    2a14:	683a      	ldr	r2, [r7, #0]
    2a16:	fbb3 f2f2 	udiv	r2, r3, r2
    2a1a:	6839      	ldr	r1, [r7, #0]
    2a1c:	fb01 f202 	mul.w	r2, r1, r2
    2a20:	1a9b      	subs	r3, r3, r2
    2a22:	6838      	ldr	r0, [r7, #0]
    2a24:	4619      	mov	r1, r3
    2a26:	f7ff ffe5 	bl	29f4 <getGCD>
    2a2a:	4603      	mov	r3, r0
    2a2c:	e000      	b.n	2a30 <getGCD+0x3c>
    2a2e:	683b      	ldr	r3, [r7, #0]
}
    2a30:	4618      	mov	r0, r3
    2a32:	3708      	adds	r7, #8
    2a34:	46bd      	mov	sp, r7
    2a36:	bd80      	pop	{r7, pc}

00002a38 <GCDOfTaskPeriod>:

static portTickType GCDOfTaskPeriod()
{
    2a38:	b580      	push	{r7, lr}
    2a3a:	b082      	sub	sp, #8
    2a3c:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    portTickType result = xPeriodOfTask[0];
    2a3e:	f240 0328 	movw	r3, #40	; 0x28
    2a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a46:	681b      	ldr	r3, [r3, #0]
    2a48:	603b      	str	r3, [r7, #0]

    for( i = 1; i < NUMBEROFTASK; ++ i )
    2a4a:	2301      	movs	r3, #1
    2a4c:	607b      	str	r3, [r7, #4]
    2a4e:	e019      	b.n	2a84 <GCDOfTaskPeriod+0x4c>
    {
        if( i==0 || i==1 || i==5 )
    2a50:	687b      	ldr	r3, [r7, #4]
    2a52:	2b00      	cmp	r3, #0
    2a54:	d005      	beq.n	2a62 <GCDOfTaskPeriod+0x2a>
    2a56:	687b      	ldr	r3, [r7, #4]
    2a58:	2b01      	cmp	r3, #1
    2a5a:	d002      	beq.n	2a62 <GCDOfTaskPeriod+0x2a>
    2a5c:	687b      	ldr	r3, [r7, #4]
    2a5e:	2b05      	cmp	r3, #5
    2a60:	d100      	bne.n	2a64 <GCDOfTaskPeriod+0x2c>
            continue;
    2a62:	e00c      	b.n	2a7e <GCDOfTaskPeriod+0x46>
        result = getGCD(result , xPeriodOfTask[i]); 
    2a64:	f240 0328 	movw	r3, #40	; 0x28
    2a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a6c:	687a      	ldr	r2, [r7, #4]
    2a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2a72:	6838      	ldr	r0, [r7, #0]
    2a74:	4619      	mov	r1, r3
    2a76:	f7ff ffbd 	bl	29f4 <getGCD>
    2a7a:	4603      	mov	r3, r0
    2a7c:	603b      	str	r3, [r7, #0]
static portTickType GCDOfTaskPeriod()
{
    portBASE_TYPE i;
    portTickType result = xPeriodOfTask[0];

    for( i = 1; i < NUMBEROFTASK; ++ i )
    2a7e:	687b      	ldr	r3, [r7, #4]
    2a80:	3301      	adds	r3, #1
    2a82:	607b      	str	r3, [r7, #4]
    2a84:	687b      	ldr	r3, [r7, #4]
    2a86:	2b0c      	cmp	r3, #12
    2a88:	dde2      	ble.n	2a50 <GCDOfTaskPeriod+0x18>
    {
        if( i==0 || i==1 || i==5 )
            continue;
        result = getGCD(result , xPeriodOfTask[i]); 
    }
    return result;
    2a8a:	683b      	ldr	r3, [r7, #0]
}
    2a8c:	4618      	mov	r0, r3
    2a8e:	3708      	adds	r7, #8
    2a90:	46bd      	mov	sp, r7
    2a92:	bd80      	pop	{r7, pc}

00002a94 <vInitialiseEventLists>:

void vInitialiseEventLists() 
{
    2a94:	b590      	push	{r4, r7, lr}
    2a96:	b091      	sub	sp, #68	; 0x44
    2a98:	af00      	add	r7, sp, #0
    volatile portBASE_TYPE xCPU, i;
    eveECB * pxIdleEvents[NUMBEROFEVENTS];
    eveECB * pxEndFlagEvent;

    // init the GCD of Task period;
    GCDPeriod = GCDOfTaskPeriod();
    2a9a:	f7ff ffcd 	bl	2a38 <GCDOfTaskPeriod>
    2a9e:	4602      	mov	r2, r0
    2aa0:	f240 6358 	movw	r3, #1624	; 0x658
    2aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2aa8:	601a      	str	r2, [r3, #0]

    vListInitialise( ( xList * ) &xEventIdleList);
    2aaa:	f640 0094 	movw	r0, #2196	; 0x894
    2aae:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ab2:	f001 faff 	bl	40b4 <vListInitialise>
    vListInitialise( ( xList * ) &xEventNonExecutablePool );
    2ab6:	f640 00a8 	movw	r0, #2216	; 0x8a8
    2aba:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2abe:	f001 faf9 	bl	40b4 <vListInitialise>
    vListInitialise( ( xList * ) &xEventNonExecutableList);
    2ac2:	f640 00bc 	movw	r0, #2236	; 0x8bc
    2ac6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2aca:	f001 faf3 	bl	40b4 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutablePool );
    2ace:	f640 00d0 	movw	r0, #2256	; 0x8d0
    2ad2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ad6:	f001 faed 	bl	40b4 <vListInitialise>
    vListInitialise( ( xList * ) &xEventExecutableList );
    2ada:	f640 00e4 	movw	r0, #2276	; 0x8e4
    2ade:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ae2:	f001 fae7 	bl	40b4 <vListInitialise>
    vListInitialise( (xList * ) & xEventReadyList);
    2ae6:	f640 00f8 	movw	r0, #2296	; 0x8f8
    2aea:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2aee:	f001 fae1 	bl	40b4 <vListInitialise>

    for( i = 0; i < NUMBEROFEVENTS; ++i )
    2af2:	2300      	movs	r3, #0
    2af4:	63bb      	str	r3, [r7, #56]	; 0x38
    2af6:	e02b      	b.n	2b50 <vInitialiseEventLists+0xbc>
    {
        pxIdleEvents[i] = (eveECB *) pvPortMalloc(sizeof(eveECB)); 
    2af8:	6bbc      	ldr	r4, [r7, #56]	; 0x38
    2afa:	2034      	movs	r0, #52	; 0x34
    2afc:	f003 f92c 	bl	5d58 <pvPortMalloc>
    2b00:	4602      	mov	r2, r0
    2b02:	00a3      	lsls	r3, r4, #2
    2b04:	f107 0140 	add.w	r1, r7, #64	; 0x40
    2b08:	440b      	add	r3, r1
    2b0a:	f843 2c3c 	str.w	r2, [r3, #-60]
        listSET_LIST_ITEM_OWNER( (xListItem *) & (pxIdleEvents[i]->xEventListItem), pxIdleEvents[i]);
    2b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b10:	009b      	lsls	r3, r3, #2
    2b12:	f107 0240 	add.w	r2, r7, #64	; 0x40
    2b16:	4413      	add	r3, r2
    2b18:	f853 2c3c 	ldr.w	r2, [r3, #-60]
    2b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b1e:	009b      	lsls	r3, r3, #2
    2b20:	f107 0140 	add.w	r1, r7, #64	; 0x40
    2b24:	440b      	add	r3, r1
    2b26:	f853 3c3c 	ldr.w	r3, [r3, #-60]
    2b2a:	62d3      	str	r3, [r2, #44]	; 0x2c
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    2b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b2e:	009b      	lsls	r3, r3, #2
    2b30:	f107 0240 	add.w	r2, r7, #64	; 0x40
    2b34:	4413      	add	r3, r2
    2b36:	f853 3c3c 	ldr.w	r3, [r3, #-60]
    2b3a:	3320      	adds	r3, #32
    2b3c:	f640 0094 	movw	r0, #2196	; 0x894
    2b40:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2b44:	4619      	mov	r1, r3
    2b46:	f001 fae1 	bl	410c <vListInsertEnd>
    vListInitialise( ( xList * ) &xEventNonExecutableList);
    vListInitialise( ( xList * ) &xEventExecutablePool );
    vListInitialise( ( xList * ) &xEventExecutableList );
    vListInitialise( (xList * ) & xEventReadyList);

    for( i = 0; i < NUMBEROFEVENTS; ++i )
    2b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b4c:	3301      	adds	r3, #1
    2b4e:	63bb      	str	r3, [r7, #56]	; 0x38
    2b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2b52:	2b0c      	cmp	r3, #12
    2b54:	ddd0      	ble.n	2af8 <vInitialiseEventLists+0x64>
        listSET_LIST_ITEM_OWNER( (xListItem *) & (pxIdleEvents[i]->xEventListItem), pxIdleEvents[i]);
        vListInsertEnd(&xEventIdleList, &pxIdleEvents[i]->xEventListItem); 
    }

    // Creating an End FLag Event and insert into the end of xEventList, which needs sorted events
}
    2b56:	3744      	adds	r7, #68	; 0x44
    2b58:	46bd      	mov	sp, r7
    2b5a:	bd90      	pop	{r4, r7, pc}

00002b5c <xIsExecutableEventArrive>:

portBASE_TYPE xIsExecutableEventArrive()
{
    2b5c:	b580      	push	{r7, lr}
    2b5e:	b086      	sub	sp, #24
    2b60:	af00      	add	r7, sp, #0
    volatile xListItem * pxIterator;
    portTickType xCurrentTime;
    portBASE_TYPE xLen, i;
    struct tag * xTag;
    
    if((xLen = listCURRENT_LIST_LENGTH(&xEventNonExecutablePool)) > 0)
    2b62:	f640 03a8 	movw	r3, #2216	; 0x8a8
    2b66:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b6a:	681b      	ldr	r3, [r3, #0]
    2b6c:	60fb      	str	r3, [r7, #12]
    2b6e:	68fb      	ldr	r3, [r7, #12]
    2b70:	2b00      	cmp	r3, #0
    2b72:	dd22      	ble.n	2bba <xIsExecutableEventArrive+0x5e>
    {

        pxIterator = (xListItem *)(xEventNonExecutablePool.xListEnd.pxNext);
    2b74:	f640 03a8 	movw	r3, #2216	; 0x8a8
    2b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b7c:	68db      	ldr	r3, [r3, #12]
    2b7e:	617b      	str	r3, [r7, #20]
        xCurrentTime = xTaskGetTickCount();
    2b80:	f002 fba2 	bl	52c8 <xTaskGetTickCount>
    2b84:	60b8      	str	r0, [r7, #8]
        for( i = 0; i < xLen ; i++ ) 
    2b86:	2300      	movs	r3, #0
    2b88:	613b      	str	r3, [r7, #16]
    2b8a:	e012      	b.n	2bb2 <xIsExecutableEventArrive+0x56>
        {
            xTag = xEventGetxTag( pxIterator->pvOwner );
    2b8c:	697b      	ldr	r3, [r7, #20]
    2b8e:	68db      	ldr	r3, [r3, #12]
    2b90:	4618      	mov	r0, r3
    2b92:	f7ff ff17 	bl	29c4 <xEventGetxTag>
    2b96:	6078      	str	r0, [r7, #4]
            if(xTag->xTimestamp <= xCurrentTime) return pdTRUE;
    2b98:	687b      	ldr	r3, [r7, #4]
    2b9a:	685a      	ldr	r2, [r3, #4]
    2b9c:	68bb      	ldr	r3, [r7, #8]
    2b9e:	429a      	cmp	r2, r3
    2ba0:	d801      	bhi.n	2ba6 <xIsExecutableEventArrive+0x4a>
    2ba2:	2301      	movs	r3, #1
    2ba4:	e00a      	b.n	2bbc <xIsExecutableEventArrive+0x60>
            pxIterator = pxIterator->pxNext;
    2ba6:	697b      	ldr	r3, [r7, #20]
    2ba8:	685b      	ldr	r3, [r3, #4]
    2baa:	617b      	str	r3, [r7, #20]
    if((xLen = listCURRENT_LIST_LENGTH(&xEventNonExecutablePool)) > 0)
    {

        pxIterator = (xListItem *)(xEventNonExecutablePool.xListEnd.pxNext);
        xCurrentTime = xTaskGetTickCount();
        for( i = 0; i < xLen ; i++ ) 
    2bac:	693b      	ldr	r3, [r7, #16]
    2bae:	3301      	adds	r3, #1
    2bb0:	613b      	str	r3, [r7, #16]
    2bb2:	693a      	ldr	r2, [r7, #16]
    2bb4:	68fb      	ldr	r3, [r7, #12]
    2bb6:	429a      	cmp	r2, r3
    2bb8:	dbe8      	blt.n	2b8c <xIsExecutableEventArrive+0x30>
            xTag = xEventGetxTag( pxIterator->pvOwner );
            if(xTag->xTimestamp <= xCurrentTime) return pdTRUE;
            pxIterator = pxIterator->pxNext;
        }
    }
    return pdFALSE;
    2bba:	2300      	movs	r3, #0
}
    2bbc:	4618      	mov	r0, r3
    2bbe:	3718      	adds	r7, #24
    2bc0:	46bd      	mov	sp, r7
    2bc2:	bd80      	pop	{r7, pc}

00002bc4 <xCompareFunction>:

/* executable event comparison function is used in xEventExecutableList. 
 * The event with earlist deadline will be scheduled to execute first */
static portBASE_TYPE xCompareFunction( const struct tag * t1, const struct tag * t2 )
{
    2bc4:	b480      	push	{r7}
    2bc6:	b083      	sub	sp, #12
    2bc8:	af00      	add	r7, sp, #0
    2bca:	6078      	str	r0, [r7, #4]
    2bcc:	6039      	str	r1, [r7, #0]
    if( t1->xDeadline < t2->xDeadline)
    2bce:	687b      	ldr	r3, [r7, #4]
    2bd0:	681a      	ldr	r2, [r3, #0]
    2bd2:	683b      	ldr	r3, [r7, #0]
    2bd4:	681b      	ldr	r3, [r3, #0]
    2bd6:	429a      	cmp	r2, r3
    2bd8:	d201      	bcs.n	2bde <xCompareFunction+0x1a>
    {
        return pdTRUE;
    2bda:	2301      	movs	r3, #1
    2bdc:	e02a      	b.n	2c34 <xCompareFunction+0x70>
    }
    else if( t1->xDeadline == t2->xDeadline)
    2bde:	687b      	ldr	r3, [r7, #4]
    2be0:	681a      	ldr	r2, [r3, #0]
    2be2:	683b      	ldr	r3, [r7, #0]
    2be4:	681b      	ldr	r3, [r3, #0]
    2be6:	429a      	cmp	r2, r3
    2be8:	d123      	bne.n	2c32 <xCompareFunction+0x6e>
    {
        if( t1->xTimestamp < t2->xTimestamp)
    2bea:	687b      	ldr	r3, [r7, #4]
    2bec:	685a      	ldr	r2, [r3, #4]
    2bee:	683b      	ldr	r3, [r7, #0]
    2bf0:	685b      	ldr	r3, [r3, #4]
    2bf2:	429a      	cmp	r2, r3
    2bf4:	d201      	bcs.n	2bfa <xCompareFunction+0x36>
        {
            return pdTRUE;
    2bf6:	2301      	movs	r3, #1
    2bf8:	e01c      	b.n	2c34 <xCompareFunction+0x70>
        }
        else if( t1->xTimestamp == t2->xTimestamp )
    2bfa:	687b      	ldr	r3, [r7, #4]
    2bfc:	685a      	ldr	r2, [r3, #4]
    2bfe:	683b      	ldr	r3, [r7, #0]
    2c00:	685b      	ldr	r3, [r3, #4]
    2c02:	429a      	cmp	r2, r3
    2c04:	d115      	bne.n	2c32 <xCompareFunction+0x6e>
        {
            if( t1->xMicroStep < t2->xMicroStep)
    2c06:	687b      	ldr	r3, [r7, #4]
    2c08:	68da      	ldr	r2, [r3, #12]
    2c0a:	683b      	ldr	r3, [r7, #0]
    2c0c:	68db      	ldr	r3, [r3, #12]
    2c0e:	429a      	cmp	r2, r3
    2c10:	da01      	bge.n	2c16 <xCompareFunction+0x52>
            {
                return pdTRUE;
    2c12:	2301      	movs	r3, #1
    2c14:	e00e      	b.n	2c34 <xCompareFunction+0x70>
            }
            else if(t1->xMicroStep == t2->xMicroStep && t1->xLevel < t2->xLevel )
    2c16:	687b      	ldr	r3, [r7, #4]
    2c18:	68da      	ldr	r2, [r3, #12]
    2c1a:	683b      	ldr	r3, [r7, #0]
    2c1c:	68db      	ldr	r3, [r3, #12]
    2c1e:	429a      	cmp	r2, r3
    2c20:	d107      	bne.n	2c32 <xCompareFunction+0x6e>
    2c22:	687b      	ldr	r3, [r7, #4]
    2c24:	689a      	ldr	r2, [r3, #8]
    2c26:	683b      	ldr	r3, [r7, #0]
    2c28:	689b      	ldr	r3, [r3, #8]
    2c2a:	429a      	cmp	r2, r3
    2c2c:	da01      	bge.n	2c32 <xCompareFunction+0x6e>
            {
                return pdTRUE;
    2c2e:	2301      	movs	r3, #1
    2c30:	e000      	b.n	2c34 <xCompareFunction+0x70>
            }
        }
    }

    return pdFALSE;
    2c32:	2300      	movs	r3, #0
}
    2c34:	4618      	mov	r0, r3
    2c36:	370c      	adds	r7, #12
    2c38:	46bd      	mov	sp, r7
    2c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c3e:	4770      	bx	lr

00002c40 <vEventSetxTag>:

static void vEventSetxTag( portTickType xDeadline, portTickType xTimestamp, xEventHandle pxNewEvent )
{
    2c40:	b480      	push	{r7}
    2c42:	b087      	sub	sp, #28
    2c44:	af00      	add	r7, sp, #0
    2c46:	60f8      	str	r0, [r7, #12]
    2c48:	60b9      	str	r1, [r7, #8]
    2c4a:	607a      	str	r2, [r7, #4]
    eveECB * pxEvent =(eveECB *) pxNewEvent;
    2c4c:	687b      	ldr	r3, [r7, #4]
    2c4e:	617b      	str	r3, [r7, #20]

    /* EDF scheduling algorithm */
    pxEvent->xTag.xDeadline = xDeadline ;
    2c50:	697b      	ldr	r3, [r7, #20]
    2c52:	68fa      	ldr	r2, [r7, #12]
    2c54:	609a      	str	r2, [r3, #8]
    pxEvent->xTag.xTimestamp = xTimestamp;
    2c56:	697b      	ldr	r3, [r7, #20]
    2c58:	68ba      	ldr	r2, [r7, #8]
    2c5a:	60da      	str	r2, [r3, #12]

    /*the microstep is not used now*/
    pxEvent->xTag.xMicroStep = 0;
    2c5c:	697b      	ldr	r3, [r7, #20]
    2c5e:	2200      	movs	r2, #0
    2c60:	615a      	str	r2, [r3, #20]
}
    2c62:	371c      	adds	r7, #28
    2c64:	46bd      	mov	sp, r7
    2c66:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c6a:	4770      	bx	lr

00002c6c <prvEventListGenericInsert>:

/* insert event to xEventNonExecutableList in terms of comparison function 1 */
static void prvEventListGenericInsert( xListItem *pxNewListItem )
{
    2c6c:	b580      	push	{r7, lr}
    2c6e:	b088      	sub	sp, #32
    2c70:	af00      	add	r7, sp, #0
    2c72:	6078      	str	r0, [r7, #4]
    struct tag * xTagOfInsertion;
    xList * pxList = &xEventExecutableList; 
    2c74:	f640 03e4 	movw	r3, #2276	; 0x8e4
    2c78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c7c:	617b      	str	r3, [r7, #20]
    volatile xListItem *pxIterator;
    portBASE_TYPE xLen, i;

    xTagOfInsertion = xEventGetxTag(pxNewListItem->pvOwner);
    2c7e:	687b      	ldr	r3, [r7, #4]
    2c80:	68db      	ldr	r3, [r3, #12]
    2c82:	4618      	mov	r0, r3
    2c84:	f7ff fe9e 	bl	29c4 <xEventGetxTag>
    2c88:	6138      	str	r0, [r7, #16]

    taskENTER_CRITICAL();
    2c8a:	f002 ffeb 	bl	5c64 <vPortEnterCritical>
    // inserting start from the ending of list
    xLen = listCURRENT_LIST_LENGTH(&xEventExecutableList);
    2c8e:	f640 03e4 	movw	r3, #2276	; 0x8e4
    2c92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c96:	681b      	ldr	r3, [r3, #0]
    2c98:	60fb      	str	r3, [r7, #12]
    pxIterator = (xListItem *)&(pxList->xListEnd);
    2c9a:	697b      	ldr	r3, [r7, #20]
    2c9c:	3308      	adds	r3, #8
    2c9e:	61fb      	str	r3, [r7, #28]
    for( i = 0; i < xLen && xCompareFunction( xTagOfInsertion, xEventGetxTag( pxIterator->pxPrevious->pvOwner )); i ++)
    2ca0:	2300      	movs	r3, #0
    2ca2:	61bb      	str	r3, [r7, #24]
    2ca4:	e005      	b.n	2cb2 <prvEventListGenericInsert+0x46>
    { 
        pxIterator = pxIterator->pxPrevious;
    2ca6:	69fb      	ldr	r3, [r7, #28]
    2ca8:	689b      	ldr	r3, [r3, #8]
    2caa:	61fb      	str	r3, [r7, #28]

    taskENTER_CRITICAL();
    // inserting start from the ending of list
    xLen = listCURRENT_LIST_LENGTH(&xEventExecutableList);
    pxIterator = (xListItem *)&(pxList->xListEnd);
    for( i = 0; i < xLen && xCompareFunction( xTagOfInsertion, xEventGetxTag( pxIterator->pxPrevious->pvOwner )); i ++)
    2cac:	69bb      	ldr	r3, [r7, #24]
    2cae:	3301      	adds	r3, #1
    2cb0:	61bb      	str	r3, [r7, #24]
    2cb2:	69ba      	ldr	r2, [r7, #24]
    2cb4:	68fb      	ldr	r3, [r7, #12]
    2cb6:	429a      	cmp	r2, r3
    2cb8:	da0d      	bge.n	2cd6 <prvEventListGenericInsert+0x6a>
    2cba:	69fb      	ldr	r3, [r7, #28]
    2cbc:	689b      	ldr	r3, [r3, #8]
    2cbe:	68db      	ldr	r3, [r3, #12]
    2cc0:	4618      	mov	r0, r3
    2cc2:	f7ff fe7f 	bl	29c4 <xEventGetxTag>
    2cc6:	4603      	mov	r3, r0
    2cc8:	6938      	ldr	r0, [r7, #16]
    2cca:	4619      	mov	r1, r3
    2ccc:	f7ff ff7a 	bl	2bc4 <xCompareFunction>
    2cd0:	4603      	mov	r3, r0
    2cd2:	2b00      	cmp	r3, #0
    2cd4:	d1e7      	bne.n	2ca6 <prvEventListGenericInsert+0x3a>
    { 
        pxIterator = pxIterator->pxPrevious;
    } 
    //vPrintString("hello,world\n\r");

    taskEXIT_CRITICAL();
    2cd6:	f002 ffdb 	bl	5c90 <vPortExitCritical>

    pxIterator = pxIterator->pxPrevious;
    2cda:	69fb      	ldr	r3, [r7, #28]
    2cdc:	689b      	ldr	r3, [r3, #8]
    2cde:	61fb      	str	r3, [r7, #28]
    
    // insert the new event after a smaller one from the back of list
    pxNewListItem->pxNext = pxIterator->pxNext;
    2ce0:	69fb      	ldr	r3, [r7, #28]
    2ce2:	685a      	ldr	r2, [r3, #4]
    2ce4:	687b      	ldr	r3, [r7, #4]
    2ce6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2ce8:	687b      	ldr	r3, [r7, #4]
    2cea:	685b      	ldr	r3, [r3, #4]
    2cec:	687a      	ldr	r2, [r7, #4]
    2cee:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
    2cf0:	687b      	ldr	r3, [r7, #4]
    2cf2:	69fa      	ldr	r2, [r7, #28]
    2cf4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2cf6:	69fb      	ldr	r3, [r7, #28]
    2cf8:	687a      	ldr	r2, [r7, #4]
    2cfa:	605a      	str	r2, [r3, #4]

    pxNewListItem->pvContainer = ( void * ) pxList;
    2cfc:	687b      	ldr	r3, [r7, #4]
    2cfe:	697a      	ldr	r2, [r7, #20]
    2d00:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
    2d02:	697b      	ldr	r3, [r7, #20]
    2d04:	681b      	ldr	r3, [r3, #0]
    2d06:	1c5a      	adds	r2, r3, #1
    2d08:	697b      	ldr	r3, [r7, #20]
    2d0a:	601a      	str	r2, [r3, #0]
}
    2d0c:	3720      	adds	r7, #32
    2d0e:	46bd      	mov	sp, r7
    2d10:	bd80      	pop	{r7, pc}
    2d12:	bf00      	nop

00002d14 <pxEventGenericCreate>:


xEventHandle pxEventGenericCreate( portBASE_TYPE pxSource, portTickType xDeadline, portTickType xTimestamp, struct eventData * pdData)
{
    2d14:	b580      	push	{r7, lr}
    2d16:	b086      	sub	sp, #24
    2d18:	af00      	add	r7, sp, #0
    2d1a:	60f8      	str	r0, [r7, #12]
    2d1c:	60b9      	str	r1, [r7, #8]
    2d1e:	607a      	str	r2, [r7, #4]
    2d20:	603b      	str	r3, [r7, #0]
    eveECB * pxNewEvent = NULL;
    2d22:	2300      	movs	r3, #0
    2d24:	617b      	str	r3, [r7, #20]

    /* using the pxCurrentTCB, current task should not be changed */
    taskENTER_CRITICAL();
    2d26:	f002 ff9d 	bl	5c64 <vPortEnterCritical>

    pxNewEvent = (eveECB *)xEventIdleList.xListEnd.pxNext->pvOwner;
    2d2a:	f640 0394 	movw	r3, #2196	; 0x894
    2d2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d32:	68db      	ldr	r3, [r3, #12]
    2d34:	68db      	ldr	r3, [r3, #12]
    2d36:	617b      	str	r3, [r7, #20]
    vListRemove( (xListItem *)&pxNewEvent->xEventListItem );
    2d38:	697b      	ldr	r3, [r7, #20]
    2d3a:	3320      	adds	r3, #32
    2d3c:	4618      	mov	r0, r3
    2d3e:	f001 fa45 	bl	41cc <vListRemove>

    pxNewEvent->pxSource = pxSource;
    2d42:	697b      	ldr	r3, [r7, #20]
    2d44:	68fa      	ldr	r2, [r7, #12]
    2d46:	601a      	str	r2, [r3, #0]
    vEventSetxTag( xDeadline, xTimestamp, pxNewEvent );
    2d48:	68b8      	ldr	r0, [r7, #8]
    2d4a:	6879      	ldr	r1, [r7, #4]
    2d4c:	697a      	ldr	r2, [r7, #20]
    2d4e:	f7ff ff77 	bl	2c40 <vEventSetxTag>
    ((eveECB *) pxNewEvent)->xData = *pdData;
    2d52:	697b      	ldr	r3, [r7, #20]
    2d54:	683a      	ldr	r2, [r7, #0]
    2d56:	3318      	adds	r3, #24
    2d58:	e892 0003 	ldmia.w	r2, {r0, r1}
    2d5c:	e883 0003 	stmia.w	r3, {r0, r1}
    listSET_LIST_ITEM_OWNER( (xListItem *) &pxNewEvent->xEventListItem, pxNewEvent);
    2d60:	697b      	ldr	r3, [r7, #20]
    2d62:	697a      	ldr	r2, [r7, #20]
    2d64:	62da      	str	r2, [r3, #44]	; 0x2c

    taskEXIT_CRITICAL();
    2d66:	f002 ff93 	bl	5c90 <vPortExitCritical>

    return pxNewEvent;
    2d6a:	697b      	ldr	r3, [r7, #20]
}
    2d6c:	4618      	mov	r0, r3
    2d6e:	3718      	adds	r7, #24
    2d70:	46bd      	mov	sp, r7
    2d72:	bd80      	pop	{r7, pc}

00002d74 <vEventGenericScatter>:


// find the executable events from xEventNonExecutablePool.
// scatter the events and transit them into xEventExecutablePool
void vEventGenericScatter()
{
    2d74:	b580      	push	{r7, lr}
    2d76:	b08c      	sub	sp, #48	; 0x30
    2d78:	af00      	add	r7, sp, #0
    portBASE_TYPE pxSource, pxDestination, outs;
    struct tag * xTag;
    eveECB * pxEvent , * pxCopyEvent; 
    xListItem * temp_pxEventListItem;
    portTickType xCurrentTime;
    volatile xListItem * pxIterator = xEventNonExecutablePool.xListEnd.pxNext;
    2d7a:	f640 03a8 	movw	r3, #2216	; 0x8a8
    2d7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d82:	68db      	ldr	r3, [r3, #12]
    2d84:	627b      	str	r3, [r7, #36]	; 0x24

    // event scatter
    if( (xLen = listCURRENT_LIST_LENGTH( &xEventNonExecutablePool )) > 0)
    2d86:	f640 03a8 	movw	r3, #2216	; 0x8a8
    2d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d8e:	681b      	ldr	r3, [r3, #0]
    2d90:	623b      	str	r3, [r7, #32]
    2d92:	6a3b      	ldr	r3, [r7, #32]
    2d94:	2b00      	cmp	r3, #0
    2d96:	f340 80d4 	ble.w	2f42 <vEventGenericScatter+0x1ce>
    {
        xCurrentTime = xTaskGetTickCount();
    2d9a:	f002 fa95 	bl	52c8 <xTaskGetTickCount>
    2d9e:	61f8      	str	r0, [r7, #28]
        // search executable event from nonexecutable pool
        for(j = 0; j < xLen; j ++ )
    2da0:	2300      	movs	r3, #0
    2da2:	62bb      	str	r3, [r7, #40]	; 0x28
    2da4:	e0c8      	b.n	2f38 <vEventGenericScatter+0x1c4>
        {
            xTag = xEventGetxTag( pxIterator->pvOwner ); 
    2da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2da8:	68db      	ldr	r3, [r3, #12]
    2daa:	4618      	mov	r0, r3
    2dac:	f7ff fe0a 	bl	29c4 <xEventGetxTag>
    2db0:	61b8      	str	r0, [r7, #24]
            // find one
            if( xTag->xTimestamp <= xCurrentTime )
    2db2:	69bb      	ldr	r3, [r7, #24]
    2db4:	685a      	ldr	r2, [r3, #4]
    2db6:	69fb      	ldr	r3, [r7, #28]
    2db8:	429a      	cmp	r2, r3
    2dba:	f200 80b7 	bhi.w	2f2c <vEventGenericScatter+0x1b8>
            {
                pxEvent = (eveECB *) pxIterator->pvOwner;
    2dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2dc0:	68db      	ldr	r3, [r3, #12]
    2dc2:	617b      	str	r3, [r7, #20]
                outs = xContexts[ pxEvent->pxSource ].xNumOfOut; // used for cloning
    2dc4:	697b      	ldr	r3, [r7, #20]
    2dc6:	6819      	ldr	r1, [r3, #0]
    2dc8:	f640 120c 	movw	r2, #2316	; 0x90c
    2dcc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2dd0:	460b      	mov	r3, r1
    2dd2:	00db      	lsls	r3, r3, #3
    2dd4:	1a5b      	subs	r3, r3, r1
    2dd6:	00db      	lsls	r3, r3, #3
    2dd8:	4413      	add	r3, r2
    2dda:	3310      	adds	r3, #16
    2ddc:	681b      	ldr	r3, [r3, #0]
    2dde:	613b      	str	r3, [r7, #16]

                taskENTER_CRITICAL();
    2de0:	f002 ff40 	bl	5c64 <vPortEnterCritical>
                temp_pxEventListItem = (xListItem *) pxIterator;
    2de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2de6:	60fb      	str	r3, [r7, #12]
                pxIterator = pxIterator->pxNext;
    2de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2dea:	685b      	ldr	r3, [r3, #4]
    2dec:	627b      	str	r3, [r7, #36]	; 0x24
                vListRemove(temp_pxEventListItem);
    2dee:	68f8      	ldr	r0, [r7, #12]
    2df0:	f001 f9ec 	bl	41cc <vListRemove>
                // complete the information of the origin event.
                pxEvent->pxDestination = xContexts[pxEvent->pxSource].xOutFlag[0];
    2df4:	697b      	ldr	r3, [r7, #20]
    2df6:	6819      	ldr	r1, [r3, #0]
    2df8:	f640 120c 	movw	r2, #2316	; 0x90c
    2dfc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2e00:	460b      	mov	r3, r1
    2e02:	00db      	lsls	r3, r3, #3
    2e04:	1a5b      	subs	r3, r3, r1
    2e06:	00db      	lsls	r3, r3, #3
    2e08:	4413      	add	r3, r2
    2e0a:	331c      	adds	r3, #28
    2e0c:	681a      	ldr	r2, [r3, #0]
    2e0e:	697b      	ldr	r3, [r7, #20]
    2e10:	605a      	str	r2, [r3, #4]
                xContexts[pxEvent->pxDestination].xInBoolCount++;
    2e12:	697b      	ldr	r3, [r7, #20]
    2e14:	685a      	ldr	r2, [r3, #4]
    2e16:	f640 110c 	movw	r1, #2316	; 0x90c
    2e1a:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2e1e:	4613      	mov	r3, r2
    2e20:	00db      	lsls	r3, r3, #3
    2e22:	1a9b      	subs	r3, r3, r2
    2e24:	00db      	lsls	r3, r3, #3
    2e26:	440b      	add	r3, r1
    2e28:	3334      	adds	r3, #52	; 0x34
    2e2a:	681b      	ldr	r3, [r3, #0]
    2e2c:	1c58      	adds	r0, r3, #1
    2e2e:	f640 110c 	movw	r1, #2316	; 0x90c
    2e32:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2e36:	4613      	mov	r3, r2
    2e38:	00db      	lsls	r3, r3, #3
    2e3a:	1a9b      	subs	r3, r3, r2
    2e3c:	00db      	lsls	r3, r3, #3
    2e3e:	440b      	add	r3, r1
    2e40:	3334      	adds	r3, #52	; 0x34
    2e42:	6018      	str	r0, [r3, #0]
                pxEvent->xTag.xMicroStep = 0;
    2e44:	697b      	ldr	r3, [r7, #20]
    2e46:	2200      	movs	r2, #0
    2e48:	615a      	str	r2, [r3, #20]
                pxEvent->xTag.xLevel = xContexts[pxEvent->pxDestination].xMyFlag;
    2e4a:	697b      	ldr	r3, [r7, #20]
    2e4c:	6859      	ldr	r1, [r3, #4]
    2e4e:	f640 120c 	movw	r2, #2316	; 0x90c
    2e52:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2e56:	460b      	mov	r3, r1
    2e58:	00db      	lsls	r3, r3, #3
    2e5a:	1a5b      	subs	r3, r3, r1
    2e5c:	00db      	lsls	r3, r3, #3
    2e5e:	4413      	add	r3, r2
    2e60:	681a      	ldr	r2, [r3, #0]
    2e62:	697b      	ldr	r3, [r7, #20]
    2e64:	611a      	str	r2, [r3, #16]
                vListInsertEnd(&xEventExecutablePool, temp_pxEventListItem);
    2e66:	f640 00d0 	movw	r0, #2256	; 0x8d0
    2e6a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2e6e:	68f9      	ldr	r1, [r7, #12]
    2e70:	f001 f94c 	bl	410c <vListInsertEnd>

                // copy one event to multiples
                for(i = 1; i < outs; ++ i)
    2e74:	2301      	movs	r3, #1
    2e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    2e78:	e051      	b.n	2f1e <vEventGenericScatter+0x1aa>
                {
                    pxCopyEvent = (eveECB *)pxEventGenericCreate(pxSource, pxEvent->xTag.xDeadline, pxEvent->xTag.xTimestamp, &pxEvent->xData);
    2e7a:	697b      	ldr	r3, [r7, #20]
    2e7c:	6899      	ldr	r1, [r3, #8]
    2e7e:	697b      	ldr	r3, [r7, #20]
    2e80:	68da      	ldr	r2, [r3, #12]
    2e82:	697b      	ldr	r3, [r7, #20]
    2e84:	3318      	adds	r3, #24
    2e86:	68b8      	ldr	r0, [r7, #8]
    2e88:	f7ff ff44 	bl	2d14 <pxEventGenericCreate>
    2e8c:	6078      	str	r0, [r7, #4]
                    // complete the information of the copied event.
                    pxCopyEvent->xTag.xMicroStep = i;
    2e8e:	687b      	ldr	r3, [r7, #4]
    2e90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2e92:	615a      	str	r2, [r3, #20]

                    pxCopyEvent->pxDestination = xContexts[pxEvent->pxSource].xOutFlag[i];
    2e94:	697b      	ldr	r3, [r7, #20]
    2e96:	6819      	ldr	r1, [r3, #0]
    2e98:	f640 120c 	movw	r2, #2316	; 0x90c
    2e9c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2ea0:	460b      	mov	r3, r1
    2ea2:	00db      	lsls	r3, r3, #3
    2ea4:	1a5b      	subs	r3, r3, r1
    2ea6:	005b      	lsls	r3, r3, #1
    2ea8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    2eaa:	440b      	add	r3, r1
    2eac:	3306      	adds	r3, #6
    2eae:	009b      	lsls	r3, r3, #2
    2eb0:	4413      	add	r3, r2
    2eb2:	685a      	ldr	r2, [r3, #4]
    2eb4:	687b      	ldr	r3, [r7, #4]
    2eb6:	605a      	str	r2, [r3, #4]
                    xContexts[pxCopyEvent->pxDestination].xInBoolCount++;
    2eb8:	687b      	ldr	r3, [r7, #4]
    2eba:	685a      	ldr	r2, [r3, #4]
    2ebc:	f640 110c 	movw	r1, #2316	; 0x90c
    2ec0:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2ec4:	4613      	mov	r3, r2
    2ec6:	00db      	lsls	r3, r3, #3
    2ec8:	1a9b      	subs	r3, r3, r2
    2eca:	00db      	lsls	r3, r3, #3
    2ecc:	440b      	add	r3, r1
    2ece:	3334      	adds	r3, #52	; 0x34
    2ed0:	681b      	ldr	r3, [r3, #0]
    2ed2:	1c58      	adds	r0, r3, #1
    2ed4:	f640 110c 	movw	r1, #2316	; 0x90c
    2ed8:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2edc:	4613      	mov	r3, r2
    2ede:	00db      	lsls	r3, r3, #3
    2ee0:	1a9b      	subs	r3, r3, r2
    2ee2:	00db      	lsls	r3, r3, #3
    2ee4:	440b      	add	r3, r1
    2ee6:	3334      	adds	r3, #52	; 0x34
    2ee8:	6018      	str	r0, [r3, #0]
                    pxCopyEvent->xTag.xLevel = xContexts[pxEvent->pxDestination].xMyFlag; 
    2eea:	697b      	ldr	r3, [r7, #20]
    2eec:	6859      	ldr	r1, [r3, #4]
    2eee:	f640 120c 	movw	r2, #2316	; 0x90c
    2ef2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2ef6:	460b      	mov	r3, r1
    2ef8:	00db      	lsls	r3, r3, #3
    2efa:	1a5b      	subs	r3, r3, r1
    2efc:	00db      	lsls	r3, r3, #3
    2efe:	4413      	add	r3, r2
    2f00:	681a      	ldr	r2, [r3, #0]
    2f02:	687b      	ldr	r3, [r7, #4]
    2f04:	611a      	str	r2, [r3, #16]
                    vListInsertEnd(&xEventExecutablePool, &pxCopyEvent->xEventListItem);
    2f06:	687b      	ldr	r3, [r7, #4]
    2f08:	3320      	adds	r3, #32
    2f0a:	f640 00d0 	movw	r0, #2256	; 0x8d0
    2f0e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2f12:	4619      	mov	r1, r3
    2f14:	f001 f8fa 	bl	410c <vListInsertEnd>
                pxEvent->xTag.xMicroStep = 0;
                pxEvent->xTag.xLevel = xContexts[pxEvent->pxDestination].xMyFlag;
                vListInsertEnd(&xEventExecutablePool, temp_pxEventListItem);

                // copy one event to multiples
                for(i = 1; i < outs; ++ i)
    2f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2f1a:	3301      	adds	r3, #1
    2f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    2f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2f20:	693b      	ldr	r3, [r7, #16]
    2f22:	429a      	cmp	r2, r3
    2f24:	dba9      	blt.n	2e7a <vEventGenericScatter+0x106>
                    pxCopyEvent->pxDestination = xContexts[pxEvent->pxSource].xOutFlag[i];
                    xContexts[pxCopyEvent->pxDestination].xInBoolCount++;
                    pxCopyEvent->xTag.xLevel = xContexts[pxEvent->pxDestination].xMyFlag; 
                    vListInsertEnd(&xEventExecutablePool, &pxCopyEvent->xEventListItem);
                }
                taskEXIT_CRITICAL();
    2f26:	f002 feb3 	bl	5c90 <vPortExitCritical>
    2f2a:	e002      	b.n	2f32 <vEventGenericScatter+0x1be>
            }
            else
            {
                pxIterator = pxIterator->pxNext;
    2f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2f2e:	685b      	ldr	r3, [r3, #4]
    2f30:	627b      	str	r3, [r7, #36]	; 0x24
    // event scatter
    if( (xLen = listCURRENT_LIST_LENGTH( &xEventNonExecutablePool )) > 0)
    {
        xCurrentTime = xTaskGetTickCount();
        // search executable event from nonexecutable pool
        for(j = 0; j < xLen; j ++ )
    2f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2f34:	3301      	adds	r3, #1
    2f36:	62bb      	str	r3, [r7, #40]	; 0x28
    2f38:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2f3a:	6a3b      	ldr	r3, [r7, #32]
    2f3c:	429a      	cmp	r2, r3
    2f3e:	f6ff af32 	blt.w	2da6 <vEventGenericScatter+0x32>
            {
                pxIterator = pxIterator->pxNext;
            }
        }
    }
}
    2f42:	3730      	adds	r7, #48	; 0x30
    2f44:	46bd      	mov	sp, r7
    2f46:	bd80      	pop	{r7, pc}

00002f48 <clearEventReduceTrack>:


static void clearEventReduceTrack()
{
    2f48:	b480      	push	{r7}
    2f4a:	b083      	sub	sp, #12
    2f4c:	af00      	add	r7, sp, #0
    portBASE_TYPE i = NUMBEROFSERVANT;
    2f4e:	232f      	movs	r3, #47	; 0x2f
    2f50:	607b      	str	r3, [r7, #4]
    while(i--)
    2f52:	e030      	b.n	2fb6 <clearEventReduceTrack+0x6e>
    {
        xEventReduceTrack[i].pxEvent = NULL; 
    2f54:	f240 6260 	movw	r2, #1632	; 0x660
    2f58:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f5c:	6879      	ldr	r1, [r7, #4]
    2f5e:	460b      	mov	r3, r1
    2f60:	005b      	lsls	r3, r3, #1
    2f62:	440b      	add	r3, r1
    2f64:	009b      	lsls	r3, r3, #2
    2f66:	4413      	add	r3, r2
    2f68:	2200      	movs	r2, #0
    2f6a:	601a      	str	r2, [r3, #0]
        xEventReduceTrack[i].xNumOfEvent = xEventReduceTrack[i].AllArrive = 0;
    2f6c:	f240 6260 	movw	r2, #1632	; 0x660
    2f70:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f74:	6879      	ldr	r1, [r7, #4]
    2f76:	460b      	mov	r3, r1
    2f78:	005b      	lsls	r3, r3, #1
    2f7a:	440b      	add	r3, r1
    2f7c:	009b      	lsls	r3, r3, #2
    2f7e:	4413      	add	r3, r2
    2f80:	3308      	adds	r3, #8
    2f82:	2200      	movs	r2, #0
    2f84:	601a      	str	r2, [r3, #0]
    2f86:	f240 6260 	movw	r2, #1632	; 0x660
    2f8a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2f8e:	6879      	ldr	r1, [r7, #4]
    2f90:	460b      	mov	r3, r1
    2f92:	005b      	lsls	r3, r3, #1
    2f94:	440b      	add	r3, r1
    2f96:	009b      	lsls	r3, r3, #2
    2f98:	4413      	add	r3, r2
    2f9a:	3308      	adds	r3, #8
    2f9c:	6818      	ldr	r0, [r3, #0]
    2f9e:	f240 6260 	movw	r2, #1632	; 0x660
    2fa2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2fa6:	6879      	ldr	r1, [r7, #4]
    2fa8:	460b      	mov	r3, r1
    2faa:	005b      	lsls	r3, r3, #1
    2fac:	440b      	add	r3, r1
    2fae:	009b      	lsls	r3, r3, #2
    2fb0:	4413      	add	r3, r2
    2fb2:	3304      	adds	r3, #4
    2fb4:	6018      	str	r0, [r3, #0]


static void clearEventReduceTrack()
{
    portBASE_TYPE i = NUMBEROFSERVANT;
    while(i--)
    2fb6:	687b      	ldr	r3, [r7, #4]
    2fb8:	1e5a      	subs	r2, r3, #1
    2fba:	607a      	str	r2, [r7, #4]
    2fbc:	2b00      	cmp	r3, #0
    2fbe:	d1c9      	bne.n	2f54 <clearEventReduceTrack+0xc>
    {
        xEventReduceTrack[i].pxEvent = NULL; 
        xEventReduceTrack[i].xNumOfEvent = xEventReduceTrack[i].AllArrive = 0;
    }
}
    2fc0:	370c      	adds	r7, #12
    2fc2:	46bd      	mov	sp, r7
    2fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2fc8:	4770      	bx	lr
    2fca:	bf00      	nop

00002fcc <vEventGenericReduce>:

void vEventGenericReduce()
{
    2fcc:	b580      	push	{r7, lr}
    2fce:	b08a      	sub	sp, #40	; 0x28
    2fd0:	af00      	add	r7, sp, #0
    struct tag * temp_tag;
    struct eventData * temp_data;
    volatile xListItem * pxIterator;
    eveRT * temp_RT;

    if( (xLen = listCURRENT_LIST_LENGTH( &xEventExecutablePool )) > 0 )
    2fd2:	f640 03d0 	movw	r3, #2256	; 0x8d0
    2fd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fda:	681b      	ldr	r3, [r3, #0]
    2fdc:	61fb      	str	r3, [r7, #28]
    2fde:	69fb      	ldr	r3, [r7, #28]
    2fe0:	2b00      	cmp	r3, #0
    2fe2:	f340 80ea 	ble.w	31ba <vEventGenericReduce+0x1ee>
    {
        clearEventReduceTrack();
    2fe6:	f7ff ffaf 	bl	2f48 <clearEventReduceTrack>
        pxIterator = (xListItem *) xEventExecutablePool.xListEnd.pxNext;
    2fea:	f640 03d0 	movw	r3, #2256	; 0x8d0
    2fee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ff2:	68db      	ldr	r3, [r3, #12]
    2ff4:	623b      	str	r3, [r7, #32]
        for( i = 0; i < xLen; i++)
    2ff6:	2300      	movs	r3, #0
    2ff8:	627b      	str	r3, [r7, #36]	; 0x24
    2ffa:	e0a6      	b.n	314a <vEventGenericReduce+0x17e>
        {
            pxDestination = xEventGetpxDestination( pxIterator->pvOwner );
    2ffc:	6a3b      	ldr	r3, [r7, #32]
    2ffe:	68db      	ldr	r3, [r3, #12]
    3000:	4618      	mov	r0, r3
    3002:	f7ff fcd3 	bl	29ac <xEventGetpxDestination>
    3006:	61b8      	str	r0, [r7, #24]
            if(xContexts[pxDestination].xInBoolCount == xContexts[pxDestination].xNumOfIn )
    3008:	f640 120c 	movw	r2, #2316	; 0x90c
    300c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3010:	69b9      	ldr	r1, [r7, #24]
    3012:	460b      	mov	r3, r1
    3014:	00db      	lsls	r3, r3, #3
    3016:	1a5b      	subs	r3, r3, r1
    3018:	00db      	lsls	r3, r3, #3
    301a:	4413      	add	r3, r2
    301c:	3334      	adds	r3, #52	; 0x34
    301e:	6818      	ldr	r0, [r3, #0]
    3020:	f640 120c 	movw	r2, #2316	; 0x90c
    3024:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3028:	69b9      	ldr	r1, [r7, #24]
    302a:	460b      	mov	r3, r1
    302c:	00db      	lsls	r3, r3, #3
    302e:	1a5b      	subs	r3, r3, r1
    3030:	00db      	lsls	r3, r3, #3
    3032:	4413      	add	r3, r2
    3034:	330c      	adds	r3, #12
    3036:	681b      	ldr	r3, [r3, #0]
    3038:	4298      	cmp	r0, r3
    303a:	f040 8083 	bne.w	3144 <vEventGenericReduce+0x178>
            {
                temp_RT = &xEventReduceTrack[pxDestination];
    303e:	69ba      	ldr	r2, [r7, #24]
    3040:	4613      	mov	r3, r2
    3042:	005b      	lsls	r3, r3, #1
    3044:	4413      	add	r3, r2
    3046:	009b      	lsls	r3, r3, #2
    3048:	f240 6260 	movw	r2, #1632	; 0x660
    304c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3050:	4413      	add	r3, r2
    3052:	617b      	str	r3, [r7, #20]
                if(xContexts[pxDestination].xInBoolCount > 1)
    3054:	f640 120c 	movw	r2, #2316	; 0x90c
    3058:	f2c2 0200 	movt	r2, #8192	; 0x2000
    305c:	69b9      	ldr	r1, [r7, #24]
    305e:	460b      	mov	r3, r1
    3060:	00db      	lsls	r3, r3, #3
    3062:	1a5b      	subs	r3, r3, r1
    3064:	00db      	lsls	r3, r3, #3
    3066:	4413      	add	r3, r2
    3068:	3334      	adds	r3, #52	; 0x34
    306a:	681b      	ldr	r3, [r3, #0]
    306c:	2b01      	cmp	r3, #1
    306e:	dd57      	ble.n	3120 <vEventGenericReduce+0x154>
                {
                    if( (temp_count = temp_RT->xNumOfEvent) > 0 )
    3070:	697b      	ldr	r3, [r7, #20]
    3072:	685b      	ldr	r3, [r3, #4]
    3074:	613b      	str	r3, [r7, #16]
    3076:	693b      	ldr	r3, [r7, #16]
    3078:	2b00      	cmp	r3, #0
    307a:	dd41      	ble.n	3100 <vEventGenericReduce+0x134>
                    {
                        temp_data = xEventGetxData( pxIterator->pvOwner );  
    307c:	6a3b      	ldr	r3, [r7, #32]
    307e:	68db      	ldr	r3, [r3, #12]
    3080:	4618      	mov	r0, r3
    3082:	f7ff fcab 	bl	29dc <xEventGetxData>
    3086:	60f8      	str	r0, [r7, #12]
                        temp_tag = xEventGetxTag( pxIterator->pvOwner );
    3088:	6a3b      	ldr	r3, [r7, #32]
    308a:	68db      	ldr	r3, [r3, #12]
    308c:	4618      	mov	r0, r3
    308e:	f7ff fc99 	bl	29c4 <xEventGetxTag>
    3092:	60b8      	str	r0, [r7, #8]
                        ((eveECB *)temp_RT->pxEvent)->xData.xDataArray[temp_count] = temp_data->xDataArray[0];
    3094:	697b      	ldr	r3, [r7, #20]
    3096:	681b      	ldr	r3, [r3, #0]
    3098:	68fa      	ldr	r2, [r7, #12]
    309a:	6811      	ldr	r1, [r2, #0]
    309c:	693a      	ldr	r2, [r7, #16]
    309e:	3206      	adds	r2, #6
    30a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                        if( temp_RT->xNumOfEvent++ == xContexts[pxDestination].xInBoolCount - 1)
    30a4:	697b      	ldr	r3, [r7, #20]
    30a6:	6859      	ldr	r1, [r3, #4]
    30a8:	1c4a      	adds	r2, r1, #1
    30aa:	697b      	ldr	r3, [r7, #20]
    30ac:	605a      	str	r2, [r3, #4]
    30ae:	f640 120c 	movw	r2, #2316	; 0x90c
    30b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    30b6:	69b8      	ldr	r0, [r7, #24]
    30b8:	4603      	mov	r3, r0
    30ba:	00db      	lsls	r3, r3, #3
    30bc:	1a1b      	subs	r3, r3, r0
    30be:	00db      	lsls	r3, r3, #3
    30c0:	4413      	add	r3, r2
    30c2:	3334      	adds	r3, #52	; 0x34
    30c4:	681b      	ldr	r3, [r3, #0]
    30c6:	3b01      	subs	r3, #1
    30c8:	4299      	cmp	r1, r3
    30ca:	d102      	bne.n	30d2 <vEventGenericReduce+0x106>
                        {
                            temp_RT->AllArrive = 1;  // all events are found
    30cc:	697b      	ldr	r3, [r7, #20]
    30ce:	2201      	movs	r2, #1
    30d0:	609a      	str	r2, [r3, #8]
                        }
                        if(((eveECB *)temp_RT->pxEvent)->xTag.xTimestamp < temp_tag->xTimestamp)
    30d2:	697b      	ldr	r3, [r7, #20]
    30d4:	681b      	ldr	r3, [r3, #0]
    30d6:	68da      	ldr	r2, [r3, #12]
    30d8:	68bb      	ldr	r3, [r7, #8]
    30da:	685b      	ldr	r3, [r3, #4]
    30dc:	429a      	cmp	r2, r3
    30de:	d204      	bcs.n	30ea <vEventGenericReduce+0x11e>
                        {
                            ((eveECB *)temp_RT->pxEvent)->xTag.xTimestamp = temp_tag->xTimestamp;
    30e0:	697b      	ldr	r3, [r7, #20]
    30e2:	681b      	ldr	r3, [r3, #0]
    30e4:	68ba      	ldr	r2, [r7, #8]
    30e6:	6852      	ldr	r2, [r2, #4]
    30e8:	60da      	str	r2, [r3, #12]
                        }

                        temp_pxEventListItem = (xListItem *) pxIterator;
    30ea:	6a3b      	ldr	r3, [r7, #32]
    30ec:	607b      	str	r3, [r7, #4]
                        pxIterator = pxIterator->pxNext;
    30ee:	6a3b      	ldr	r3, [r7, #32]
    30f0:	685b      	ldr	r3, [r3, #4]
    30f2:	623b      	str	r3, [r7, #32]
                        vEventGenericDelete(temp_pxEventListItem->pvOwner);  // delete the redundant events
    30f4:	687b      	ldr	r3, [r7, #4]
    30f6:	68db      	ldr	r3, [r3, #12]
    30f8:	4618      	mov	r0, r3
    30fa:	f000 f9f3 	bl	34e4 <vEventGenericDelete>
    30fe:	e021      	b.n	3144 <vEventGenericReduce+0x178>
                    }
                    else  // the fist one of reduce event
                    {
                        temp_RT->pxEvent = pxIterator->pvOwner; 
    3100:	6a3b      	ldr	r3, [r7, #32]
    3102:	68da      	ldr	r2, [r3, #12]
    3104:	697b      	ldr	r3, [r7, #20]
    3106:	601a      	str	r2, [r3, #0]
                        temp_RT->xNumOfEvent = 1;
    3108:	697b      	ldr	r3, [r7, #20]
    310a:	2201      	movs	r2, #1
    310c:	605a      	str	r2, [r3, #4]
                        
                        temp_pxEventListItem = (xListItem *) pxIterator;
    310e:	6a3b      	ldr	r3, [r7, #32]
    3110:	607b      	str	r3, [r7, #4]
                        pxIterator = pxIterator->pxNext;
    3112:	6a3b      	ldr	r3, [r7, #32]
    3114:	685b      	ldr	r3, [r3, #4]
    3116:	623b      	str	r3, [r7, #32]
                        vListRemove(temp_pxEventListItem);
    3118:	6878      	ldr	r0, [r7, #4]
    311a:	f001 f857 	bl	41cc <vListRemove>
    311e:	e011      	b.n	3144 <vEventGenericReduce+0x178>
                    }
                }
                else // only one event for the target servant
                {
                    temp_RT->pxEvent = pxIterator->pvOwner; 
    3120:	6a3b      	ldr	r3, [r7, #32]
    3122:	68da      	ldr	r2, [r3, #12]
    3124:	697b      	ldr	r3, [r7, #20]
    3126:	601a      	str	r2, [r3, #0]
                    temp_RT->xNumOfEvent = 1;
    3128:	697b      	ldr	r3, [r7, #20]
    312a:	2201      	movs	r2, #1
    312c:	605a      	str	r2, [r3, #4]
                    temp_RT->AllArrive = 1;
    312e:	697b      	ldr	r3, [r7, #20]
    3130:	2201      	movs	r2, #1
    3132:	609a      	str	r2, [r3, #8]
                 
                    temp_pxEventListItem = (xListItem *) pxIterator;
    3134:	6a3b      	ldr	r3, [r7, #32]
    3136:	607b      	str	r3, [r7, #4]
                    pxIterator = pxIterator->pxNext;
    3138:	6a3b      	ldr	r3, [r7, #32]
    313a:	685b      	ldr	r3, [r3, #4]
    313c:	623b      	str	r3, [r7, #32]
                    vListRemove(temp_pxEventListItem);
    313e:	6878      	ldr	r0, [r7, #4]
    3140:	f001 f844 	bl	41cc <vListRemove>

    if( (xLen = listCURRENT_LIST_LENGTH( &xEventExecutablePool )) > 0 )
    {
        clearEventReduceTrack();
        pxIterator = (xListItem *) xEventExecutablePool.xListEnd.pxNext;
        for( i = 0; i < xLen; i++)
    3144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3146:	3301      	adds	r3, #1
    3148:	627b      	str	r3, [r7, #36]	; 0x24
    314a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    314c:	69fb      	ldr	r3, [r7, #28]
    314e:	429a      	cmp	r2, r3
    3150:	f6ff af54 	blt.w	2ffc <vEventGenericReduce+0x30>
                    vListRemove(temp_pxEventListItem);
                }

            }
        } // end for
        for(i=0; i<NUMBEROFSERVANT; ++i)
    3154:	2300      	movs	r3, #0
    3156:	627b      	str	r3, [r7, #36]	; 0x24
    3158:	e02c      	b.n	31b4 <vEventGenericReduce+0x1e8>
        {
            if(xEventReduceTrack[i].AllArrive)
    315a:	f240 6260 	movw	r2, #1632	; 0x660
    315e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3162:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3164:	460b      	mov	r3, r1
    3166:	005b      	lsls	r3, r3, #1
    3168:	440b      	add	r3, r1
    316a:	009b      	lsls	r3, r3, #2
    316c:	4413      	add	r3, r2
    316e:	3308      	adds	r3, #8
    3170:	681b      	ldr	r3, [r3, #0]
    3172:	2b00      	cmp	r3, #0
    3174:	d01b      	beq.n	31ae <vEventGenericReduce+0x1e2>
            {
                prvEventListGenericInsert(&((eveECB *)xEventReduceTrack[i].pxEvent)->xEventListItem);
    3176:	f240 6260 	movw	r2, #1632	; 0x660
    317a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    317e:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3180:	460b      	mov	r3, r1
    3182:	005b      	lsls	r3, r3, #1
    3184:	440b      	add	r3, r1
    3186:	009b      	lsls	r3, r3, #2
    3188:	4413      	add	r3, r2
    318a:	681b      	ldr	r3, [r3, #0]
    318c:	3320      	adds	r3, #32
    318e:	4618      	mov	r0, r3
    3190:	f7ff fd6c 	bl	2c6c <prvEventListGenericInsert>
                xContexts[i].xInBoolCount = 0;  // important recovery !!!!!
    3194:	f640 120c 	movw	r2, #2316	; 0x90c
    3198:	f2c2 0200 	movt	r2, #8192	; 0x2000
    319c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    319e:	460b      	mov	r3, r1
    31a0:	00db      	lsls	r3, r3, #3
    31a2:	1a5b      	subs	r3, r3, r1
    31a4:	00db      	lsls	r3, r3, #3
    31a6:	4413      	add	r3, r2
    31a8:	3334      	adds	r3, #52	; 0x34
    31aa:	2200      	movs	r2, #0
    31ac:	601a      	str	r2, [r3, #0]
                    vListRemove(temp_pxEventListItem);
                }

            }
        } // end for
        for(i=0; i<NUMBEROFSERVANT; ++i)
    31ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    31b0:	3301      	adds	r3, #1
    31b2:	627b      	str	r3, [r7, #36]	; 0x24
    31b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    31b6:	2b2e      	cmp	r3, #46	; 0x2e
    31b8:	ddcf      	ble.n	315a <vEventGenericReduce+0x18e>
                prvEventListGenericInsert(&((eveECB *)xEventReduceTrack[i].pxEvent)->xEventListItem);
                xContexts[i].xInBoolCount = 0;  // important recovery !!!!!
            }
        } // end for
    } // end if
}
    31ba:	3728      	adds	r7, #40	; 0x28
    31bc:	46bd      	mov	sp, r7
    31be:	bd80      	pop	{r7, pc}

000031c0 <pOverLap>:


static portBASE_TYPE pOverLap( xListItem * pxEventListItem)
{
    31c0:	b580      	push	{r7, lr}
    31c2:	b088      	sub	sp, #32
    31c4:	af00      	add	r7, sp, #0
    31c6:	6078      	str	r0, [r7, #4]
    eveECB * pxEvent = (eveECB *)pxEventListItem->pvOwner;
    31c8:	687b      	ldr	r3, [r7, #4]
    31ca:	68db      	ldr	r3, [r3, #12]
    31cc:	61fb      	str	r3, [r7, #28]
    portBASE_TYPE pxDestination = pxEvent->pxDestination; 
    31ce:	69fb      	ldr	r3, [r7, #28]
    31d0:	685b      	ldr	r3, [r3, #4]
    31d2:	61bb      	str	r3, [r7, #24]
    portTickType start = pxEvent->xTag.xTimestamp;
    31d4:	69fb      	ldr	r3, [r7, #28]
    31d6:	68db      	ldr	r3, [r3, #12]
    31d8:	617b      	str	r3, [r7, #20]
    portTickType end   = start + xContexts[pxDestination].xLet;
    31da:	f640 120c 	movw	r2, #2316	; 0x90c
    31de:	f2c2 0200 	movt	r2, #8192	; 0x2000
    31e2:	69b9      	ldr	r1, [r7, #24]
    31e4:	460b      	mov	r3, r1
    31e6:	00db      	lsls	r3, r3, #3
    31e8:	1a5b      	subs	r3, r3, r1
    31ea:	00db      	lsls	r3, r3, #3
    31ec:	4413      	add	r3, r2
    31ee:	3324      	adds	r3, #36	; 0x24
    31f0:	681a      	ldr	r2, [r3, #0]
    31f2:	697b      	ldr	r3, [r7, #20]
    31f4:	4413      	add	r3, r2
    31f6:	613b      	str	r3, [r7, #16]
    portTickType deadline = (xTaskGetTickCount()/GCDPeriod + 1)*GCDPeriod;
    31f8:	f002 f866 	bl	52c8 <xTaskGetTickCount>
    31fc:	4602      	mov	r2, r0
    31fe:	f240 6358 	movw	r3, #1624	; 0x658
    3202:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3206:	681b      	ldr	r3, [r3, #0]
    3208:	fbb2 f3f3 	udiv	r3, r2, r3
    320c:	1c5a      	adds	r2, r3, #1
    320e:	f240 6358 	movw	r3, #1624	; 0x658
    3212:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3216:	681b      	ldr	r3, [r3, #0]
    3218:	fb03 f302 	mul.w	r3, r3, r2
    321c:	60fb      	str	r3, [r7, #12]

    // different execution time overlaped
    if( end < deadline - OUTPUT )
    321e:	68fb      	ldr	r3, [r7, #12]
    3220:	1eda      	subs	r2, r3, #3
    3222:	693b      	ldr	r3, [r7, #16]
    3224:	429a      	cmp	r2, r3
    3226:	d901      	bls.n	322c <pOverLap+0x6c>
    {
        return 0;
    3228:	2300      	movs	r3, #0
    322a:	e000      	b.n	322e <pOverLap+0x6e>
    }
    else
    {
        return 1;
    322c:	2301      	movs	r3, #1
    }
}
    322e:	4618      	mov	r0, r3
    3230:	3720      	adds	r7, #32
    3232:	46bd      	mov	sp, r7
    3234:	bd80      	pop	{r7, pc}
    3236:	bf00      	nop

00003238 <vSetTimestamp>:

static void vSetTimestamp( xListItem * pxEventListItem)
{
    3238:	b580      	push	{r7, lr}
    323a:	b086      	sub	sp, #24
    323c:	af00      	add	r7, sp, #0
    323e:	6078      	str	r0, [r7, #4]
    portBASE_TYPE i, flag;
    portTickType nextComputingStart;
    eveECB *pxEvent;  
    
    pxEvent = (eveECB *) pxEventListItem->pvOwner;
    3240:	687b      	ldr	r3, [r7, #4]
    3242:	68db      	ldr	r3, [r3, #12]
    3244:	617b      	str	r3, [r7, #20]
    pxEvent->xTag.xTimestamp = xFutureModelTime;// update model time
    3246:	f240 635c 	movw	r3, #1628	; 0x65c
    324a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    324e:	681a      	ldr	r2, [r3, #0]
    3250:	697b      	ldr	r3, [r7, #20]
    3252:	60da      	str	r2, [r3, #12]
    nextComputingStart = (xFutureModelTime/GCDPeriod) * GCDPeriod + GCDPeriod + INPUT;
    3254:	f240 635c 	movw	r3, #1628	; 0x65c
    3258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    325c:	681a      	ldr	r2, [r3, #0]
    325e:	f240 6358 	movw	r3, #1624	; 0x658
    3262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3266:	681b      	ldr	r3, [r3, #0]
    3268:	fbb2 f3f3 	udiv	r3, r2, r3
    326c:	1c5a      	adds	r2, r3, #1
    326e:	f240 6358 	movw	r3, #1624	; 0x658
    3272:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3276:	681b      	ldr	r3, [r3, #0]
    3278:	fb03 f302 	mul.w	r3, r3, r2
    327c:	3303      	adds	r3, #3
    327e:	613b      	str	r3, [r7, #16]
    flag = pOverLap(pxEventListItem);
    3280:	6878      	ldr	r0, [r7, #4]
    3282:	f7ff ff9d 	bl	31c0 <pOverLap>
    3286:	60f8      	str	r0, [r7, #12]

    if( !flag  && xFutureModelTime < nextComputingStart) // not overlaped
    3288:	68fb      	ldr	r3, [r7, #12]
    328a:	2b00      	cmp	r3, #0
    328c:	d112      	bne.n	32b4 <vSetTimestamp+0x7c>
    328e:	f240 635c 	movw	r3, #1628	; 0x65c
    3292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3296:	681a      	ldr	r2, [r3, #0]
    3298:	693b      	ldr	r3, [r7, #16]
    329a:	429a      	cmp	r2, r3
    329c:	d20a      	bcs.n	32b4 <vSetTimestamp+0x7c>
    {
        vListRemove( pxEventListItem); 
    329e:	6878      	ldr	r0, [r7, #4]
    32a0:	f000 ff94 	bl	41cc <vListRemove>
        vListInsertEnd(&xEventReadyList, pxEventListItem);
    32a4:	f640 00f8 	movw	r0, #2296	; 0x8f8
    32a8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    32ac:	6879      	ldr	r1, [r7, #4]
    32ae:	f000 ff2d 	bl	410c <vListInsertEnd>
    32b2:	e02c      	b.n	330e <vSetTimestamp+0xd6>
    }
    else if ( flag && xFutureModelTime < nextComputingStart ) 
    32b4:	68fb      	ldr	r3, [r7, #12]
    32b6:	2b00      	cmp	r3, #0
    32b8:	d01f      	beq.n	32fa <vSetTimestamp+0xc2>
    32ba:	f240 635c 	movw	r3, #1628	; 0x65c
    32be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32c2:	681a      	ldr	r2, [r3, #0]
    32c4:	693b      	ldr	r3, [r7, #16]
    32c6:	429a      	cmp	r2, r3
    32c8:	d217      	bcs.n	32fa <vSetTimestamp+0xc2>
    {
        // set the future model time to start time of next LET
        xFutureModelTime = nextComputingStart; 
    32ca:	f240 635c 	movw	r3, #1628	; 0x65c
    32ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32d2:	693a      	ldr	r2, [r7, #16]
    32d4:	601a      	str	r2, [r3, #0]
        pxEvent->xTag.xTimestamp = xFutureModelTime;
    32d6:	f240 635c 	movw	r3, #1628	; 0x65c
    32da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    32de:	681a      	ldr	r2, [r3, #0]
    32e0:	697b      	ldr	r3, [r7, #20]
    32e2:	60da      	str	r2, [r3, #12]

        vListRemove( pxEventListItem); 
    32e4:	6878      	ldr	r0, [r7, #4]
    32e6:	f000 ff71 	bl	41cc <vListRemove>
        vListInsertEnd(&xEventNonExecutablePool, pxEventListItem);
    32ea:	f640 00a8 	movw	r0, #2216	; 0x8a8
    32ee:	f2c2 0000 	movt	r0, #8192	; 0x2000
    32f2:	6879      	ldr	r1, [r7, #4]
    32f4:	f000 ff0a 	bl	410c <vListInsertEnd>
    32f8:	e009      	b.n	330e <vSetTimestamp+0xd6>
    }
    else
    {
        vListRemove( pxEventListItem); 
    32fa:	6878      	ldr	r0, [r7, #4]
    32fc:	f000 ff66 	bl	41cc <vListRemove>
        vListInsertEnd(&xEventNonExecutablePool, pxEventListItem);
    3300:	f640 00a8 	movw	r0, #2216	; 0x8a8
    3304:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3308:	6879      	ldr	r1, [r7, #4]
    330a:	f000 feff 	bl	410c <vListInsertEnd>
    }
    xFutureModelTime += xContexts[pxEvent->pxDestination].xLet;  
    330e:	697b      	ldr	r3, [r7, #20]
    3310:	6859      	ldr	r1, [r3, #4]
    3312:	f640 120c 	movw	r2, #2316	; 0x90c
    3316:	f2c2 0200 	movt	r2, #8192	; 0x2000
    331a:	460b      	mov	r3, r1
    331c:	00db      	lsls	r3, r3, #3
    331e:	1a5b      	subs	r3, r3, r1
    3320:	00db      	lsls	r3, r3, #3
    3322:	4413      	add	r3, r2
    3324:	3324      	adds	r3, #36	; 0x24
    3326:	681a      	ldr	r2, [r3, #0]
    3328:	f240 635c 	movw	r3, #1628	; 0x65c
    332c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3330:	681b      	ldr	r3, [r3, #0]
    3332:	441a      	add	r2, r3
    3334:	f240 635c 	movw	r3, #1628	; 0x65c
    3338:	f2c2 0300 	movt	r3, #8192	; 0x2000
    333c:	601a      	str	r2, [r3, #0]
}
    333e:	3718      	adds	r7, #24
    3340:	46bd      	mov	sp, r7
    3342:	bd80      	pop	{r7, pc}

00003344 <pEqualxDeadline>:

static portBASE_TYPE pEqualxDeadline(struct tag * xTag1, struct tag * xTag2)
{
    3344:	b480      	push	{r7}
    3346:	b083      	sub	sp, #12
    3348:	af00      	add	r7, sp, #0
    334a:	6078      	str	r0, [r7, #4]
    334c:	6039      	str	r1, [r7, #0]
    return (xTag1->xDeadline == xTag2->xDeadline);
    334e:	687b      	ldr	r3, [r7, #4]
    3350:	681a      	ldr	r2, [r3, #0]
    3352:	683b      	ldr	r3, [r7, #0]
    3354:	681b      	ldr	r3, [r3, #0]
    3356:	429a      	cmp	r2, r3
    3358:	bf14      	ite	ne
    335a:	2300      	movne	r3, #0
    335c:	2301      	moveq	r3, #1
    335e:	b2db      	uxtb	r3, r3
}
    3360:	4618      	mov	r0, r3
    3362:	370c      	adds	r7, #12
    3364:	46bd      	mov	sp, r7
    3366:	f85d 7b04 	ldr.w	r7, [sp], #4
    336a:	4770      	bx	lr

0000336c <xEventGenericSerialize>:

// update the timestamp of event in xEventExecutableList in terms of xFutureModelTime
portBASE_TYPE xEventGenericSerialize()
{
    336c:	b580      	push	{r7, lr}
    336e:	b084      	sub	sp, #16
    3370:	af00      	add	r7, sp, #0
    xListItem * flag_pxEventListItem;
    struct tag * origin_tag;
    portBASE_TYPE count = 1;
    3372:	2301      	movs	r3, #1
    3374:	60bb      	str	r3, [r7, #8]

    if( listCURRENT_LIST_LENGTH( &xEventExecutableList ) > 0 )
    3376:	f640 03e4 	movw	r3, #2276	; 0x8e4
    337a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    337e:	681b      	ldr	r3, [r3, #0]
    3380:	2b00      	cmp	r3, #0
    3382:	d00a      	beq.n	339a <xEventGenericSerialize+0x2e>
    {
        origin_tag = xEventGetxTag( (xEventExecutableList.xListEnd.pxNext)->pvOwner );
    3384:	f640 03e4 	movw	r3, #2276	; 0x8e4
    3388:	f2c2 0300 	movt	r3, #8192	; 0x2000
    338c:	68db      	ldr	r3, [r3, #12]
    338e:	68db      	ldr	r3, [r3, #12]
    3390:	4618      	mov	r0, r3
    3392:	f7ff fb17 	bl	29c4 <xEventGetxTag>
    3396:	60f8      	str	r0, [r7, #12]
    }
    
    while( listCURRENT_LIST_LENGTH(&xEventExecutableList) > 0 )
    3398:	e035      	b.n	3406 <xEventGenericSerialize+0x9a>
    339a:	e034      	b.n	3406 <xEventGenericSerialize+0x9a>
    {
        flag_pxEventListItem = (xListItem *) xEventExecutableList.xListEnd.pxNext;
    339c:	f640 03e4 	movw	r3, #2276	; 0x8e4
    33a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    33a4:	68db      	ldr	r3, [r3, #12]
    33a6:	607b      	str	r3, [r7, #4]
        // only the timestamp of c_servant need updating
        // only remove events that have same xDeadline with the first event in xEventExecutableList to xEventReadyList

        if( xContexts[xEventGetpxDestination(flag_pxEventListItem->pvOwner)].xType == 2 )
    33a8:	687b      	ldr	r3, [r7, #4]
    33aa:	68db      	ldr	r3, [r3, #12]
    33ac:	4618      	mov	r0, r3
    33ae:	f7ff fafd 	bl	29ac <xEventGetpxDestination>
    33b2:	4601      	mov	r1, r0
    33b4:	f640 120c 	movw	r2, #2316	; 0x90c
    33b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    33bc:	460b      	mov	r3, r1
    33be:	00db      	lsls	r3, r3, #3
    33c0:	1a5b      	subs	r3, r3, r1
    33c2:	00db      	lsls	r3, r3, #3
    33c4:	4413      	add	r3, r2
    33c6:	3304      	adds	r3, #4
    33c8:	681b      	ldr	r3, [r3, #0]
    33ca:	2b02      	cmp	r3, #2
    33cc:	d111      	bne.n	33f2 <xEventGenericSerialize+0x86>
        {
            if( pEqualxDeadline( xEventGetxTag( flag_pxEventListItem->pvOwner ), origin_tag ))
    33ce:	687b      	ldr	r3, [r7, #4]
    33d0:	68db      	ldr	r3, [r3, #12]
    33d2:	4618      	mov	r0, r3
    33d4:	f7ff faf6 	bl	29c4 <xEventGetxTag>
    33d8:	4603      	mov	r3, r0
    33da:	4618      	mov	r0, r3
    33dc:	68f9      	ldr	r1, [r7, #12]
    33de:	f7ff ffb1 	bl	3344 <pEqualxDeadline>
    33e2:	4603      	mov	r3, r0
    33e4:	2b00      	cmp	r3, #0
    33e6:	d003      	beq.n	33f0 <xEventGenericSerialize+0x84>
            {
                // update the timestamp of event
                // if overlaped, then remove the event to xEventNonExecutablePool
                // else, remove the event to xEvenReadyList
                vSetTimestamp( flag_pxEventListItem);
    33e8:	6878      	ldr	r0, [r7, #4]
    33ea:	f7ff ff25 	bl	3238 <vSetTimestamp>
    33ee:	e00a      	b.n	3406 <xEventGenericSerialize+0x9a>
            }
            else
            {
                break;
    33f0:	e010      	b.n	3414 <xEventGenericSerialize+0xa8>
            }
        }
        else
        {
            vListRemove( flag_pxEventListItem );
    33f2:	6878      	ldr	r0, [r7, #4]
    33f4:	f000 feea 	bl	41cc <vListRemove>
            vListInsertEnd( &xEventReadyList, flag_pxEventListItem );
    33f8:	f640 00f8 	movw	r0, #2296	; 0x8f8
    33fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3400:	6879      	ldr	r1, [r7, #4]
    3402:	f000 fe83 	bl	410c <vListInsertEnd>
    if( listCURRENT_LIST_LENGTH( &xEventExecutableList ) > 0 )
    {
        origin_tag = xEventGetxTag( (xEventExecutableList.xListEnd.pxNext)->pvOwner );
    }
    
    while( listCURRENT_LIST_LENGTH(&xEventExecutableList) > 0 )
    3406:	f640 03e4 	movw	r3, #2276	; 0x8e4
    340a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    340e:	681b      	ldr	r3, [r3, #0]
    3410:	2b00      	cmp	r3, #0
    3412:	d1c3      	bne.n	339c <xEventGenericSerialize+0x30>
            vListRemove( flag_pxEventListItem );
            vListInsertEnd( &xEventReadyList, flag_pxEventListItem );
        }
    }

    if( listCURRENT_LIST_LENGTH( &xEventReadyList ) > 0 )
    3414:	f640 03f8 	movw	r3, #2296	; 0x8f8
    3418:	f2c2 0300 	movt	r3, #8192	; 0x2000
    341c:	681b      	ldr	r3, [r3, #0]
    341e:	2b00      	cmp	r3, #0
    3420:	d00a      	beq.n	3438 <xEventGenericSerialize+0xcc>
    {
        return xEventGetpxDestination((xEventReadyList.xListEnd.pxNext)->pvOwner); //  the first one repsenting the type of events
    3422:	f640 03f8 	movw	r3, #2296	; 0x8f8
    3426:	f2c2 0300 	movt	r3, #8192	; 0x2000
    342a:	68db      	ldr	r3, [r3, #12]
    342c:	68db      	ldr	r3, [r3, #12]
    342e:	4618      	mov	r0, r3
    3430:	f7ff fabc 	bl	29ac <xEventGetpxDestination>
    3434:	4603      	mov	r3, r0
    3436:	e001      	b.n	343c <xEventGenericSerialize+0xd0>
    }
    return -1; // no event avaliable
    3438:	f04f 33ff 	mov.w	r3, #4294967295
}
    343c:	4618      	mov	r0, r3
    343e:	3710      	adds	r7, #16
    3440:	46bd      	mov	sp, r7
    3442:	bd80      	pop	{r7, pc}

00003444 <vEventGenericSend>:

void vEventGenericSend( xEventHandle pxEvent )
{
    3444:	b580      	push	{r7, lr}
    3446:	b082      	sub	sp, #8
    3448:	af00      	add	r7, sp, #0
    344a:	6078      	str	r0, [r7, #4]
    vListInsertEnd(&xEventNonExecutablePool, (xListItem *)&((eveECB *)pxEvent)->xEventListItem);
    344c:	687b      	ldr	r3, [r7, #4]
    344e:	3320      	adds	r3, #32
    3450:	f640 00a8 	movw	r0, #2216	; 0x8a8
    3454:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3458:	4619      	mov	r1, r3
    345a:	f000 fe57 	bl	410c <vListInsertEnd>
}
    345e:	3708      	adds	r7, #8
    3460:	46bd      	mov	sp, r7
    3462:	bd80      	pop	{r7, pc}

00003464 <pxEventGenericReceive>:

xEventHandle pxEventGenericReceive()
{
    3464:	b580      	push	{r7, lr}
    3466:	b082      	sub	sp, #8
    3468:	af00      	add	r7, sp, #0
    // xEventReadyList must not be null, which is ensured by servant
    xListItem * pxEventList;

    taskENTER_CRITICAL();
    346a:	f002 fbfb 	bl	5c64 <vPortEnterCritical>
    pxEventList= (xListItem *)xEventReadyList.xListEnd.pxNext;
    346e:	f640 03f8 	movw	r3, #2296	; 0x8f8
    3472:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3476:	68db      	ldr	r3, [r3, #12]
    3478:	607b      	str	r3, [r7, #4]
    vListRemove(pxEventList);
    347a:	6878      	ldr	r0, [r7, #4]
    347c:	f000 fea6 	bl	41cc <vListRemove>
    vListInsertEnd(&xEventNonExecutablePool, pxEventList);  // reuse event, which will be update by servant 
    3480:	f640 00a8 	movw	r0, #2216	; 0x8a8
    3484:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3488:	6879      	ldr	r1, [r7, #4]
    348a:	f000 fe3f 	bl	410c <vListInsertEnd>
    taskEXIT_CRITICAL();
    348e:	f002 fbff 	bl	5c90 <vPortExitCritical>

    return (xEventHandle) pxEventList->pvOwner;
    3492:	687b      	ldr	r3, [r7, #4]
    3494:	68db      	ldr	r3, [r3, #12]
}
    3496:	4618      	mov	r0, r3
    3498:	3708      	adds	r7, #8
    349a:	46bd      	mov	sp, r7
    349c:	bd80      	pop	{r7, pc}
    349e:	bf00      	nop

000034a0 <vEventGenericUpdate>:

void vEventGenericUpdate( xEventHandle xEvent, portBASE_TYPE pxSource, portTickType xDeadline, portTickType xTimestamp, struct eventData * xData)
{
    34a0:	b480      	push	{r7}
    34a2:	b087      	sub	sp, #28
    34a4:	af00      	add	r7, sp, #0
    34a6:	60f8      	str	r0, [r7, #12]
    34a8:	60b9      	str	r1, [r7, #8]
    34aa:	607a      	str	r2, [r7, #4]
    34ac:	603b      	str	r3, [r7, #0]
    eveECB * pxEvent = (eveECB *)xEvent;
    34ae:	68fb      	ldr	r3, [r7, #12]
    34b0:	617b      	str	r3, [r7, #20]
    pxEvent->pxSource = pxSource;
    34b2:	697b      	ldr	r3, [r7, #20]
    34b4:	68ba      	ldr	r2, [r7, #8]
    34b6:	601a      	str	r2, [r3, #0]
    pxEvent->xTag.xDeadline = xDeadline;
    34b8:	697b      	ldr	r3, [r7, #20]
    34ba:	687a      	ldr	r2, [r7, #4]
    34bc:	609a      	str	r2, [r3, #8]
    pxEvent->xTag.xTimestamp = xTimestamp; 
    34be:	697b      	ldr	r3, [r7, #20]
    34c0:	683a      	ldr	r2, [r7, #0]
    34c2:	60da      	str	r2, [r3, #12]
    pxEvent->xTag.xMicroStep = 0;
    34c4:	697b      	ldr	r3, [r7, #20]
    34c6:	2200      	movs	r2, #0
    34c8:	615a      	str	r2, [r3, #20]
    pxEvent->xData = *xData;
    34ca:	697b      	ldr	r3, [r7, #20]
    34cc:	6a3a      	ldr	r2, [r7, #32]
    34ce:	3318      	adds	r3, #24
    34d0:	e892 0003 	ldmia.w	r2, {r0, r1}
    34d4:	e883 0003 	stmia.w	r3, {r0, r1}
}
    34d8:	371c      	adds	r7, #28
    34da:	46bd      	mov	sp, r7
    34dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    34e0:	4770      	bx	lr
    34e2:	bf00      	nop

000034e4 <vEventGenericDelete>:

void vEventGenericDelete( xEventHandle xEvent)
{
    34e4:	b580      	push	{r7, lr}
    34e6:	b084      	sub	sp, #16
    34e8:	af00      	add	r7, sp, #0
    34ea:	6078      	str	r0, [r7, #4]
    xListItem * pxEventItem;
    taskENTER_CRITICAL();
    34ec:	f002 fbba 	bl	5c64 <vPortEnterCritical>

    pxEventItem = &((eveECB *)xEvent)->xEventListItem;
    34f0:	687b      	ldr	r3, [r7, #4]
    34f2:	3320      	adds	r3, #32
    34f4:	60fb      	str	r3, [r7, #12]
    vListRemove (pxEventItem);
    34f6:	68f8      	ldr	r0, [r7, #12]
    34f8:	f000 fe68 	bl	41cc <vListRemove>
    vListInsertEnd( &xEventIdleList, pxEventItem );
    34fc:	f640 0094 	movw	r0, #2196	; 0x894
    3500:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3504:	68f9      	ldr	r1, [r7, #12]
    3506:	f000 fe01 	bl	410c <vListInsertEnd>

    taskEXIT_CRITICAL();
    350a:	f002 fbc1 	bl	5c90 <vPortExitCritical>
}
    350e:	3710      	adds	r7, #16
    3510:	46bd      	mov	sp, r7
    3512:	bd80      	pop	{r7, pc}

00003514 <vSemaphoreInitialise>:

extern portBASE_TYPE xActuatorOfTask[NUMBEROFTASK];

/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    3514:	b580      	push	{r7, lr}
    3516:	b082      	sub	sp, #8
    3518:	af00      	add	r7, sp, #0
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTHREAD; ++ i )
    351a:	2300      	movs	r3, #0
    351c:	607b      	str	r3, [r7, #4]
    351e:	e033      	b.n	3588 <vSemaphoreInitialise+0x74>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
    3520:	2001      	movs	r0, #1
    3522:	2100      	movs	r1, #0
    3524:	2203      	movs	r2, #3
    3526:	f000 fec7 	bl	42b8 <xQueueGenericCreate>
    352a:	4601      	mov	r1, r0
    352c:	f241 3354 	movw	r3, #4948	; 0x1354
    3530:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3534:	687a      	ldr	r2, [r7, #4]
    3536:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    353a:	f241 3354 	movw	r3, #4948	; 0x1354
    353e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3542:	687a      	ldr	r2, [r7, #4]
    3544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3548:	2b00      	cmp	r3, #0
    354a:	d00c      	beq.n	3566 <vSemaphoreInitialise+0x52>
    354c:	f241 3354 	movw	r3, #4948	; 0x1354
    3550:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3554:	687a      	ldr	r2, [r7, #4]
    3556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    355a:	4618      	mov	r0, r3
    355c:	2100      	movs	r1, #0
    355e:	2200      	movs	r2, #0
    3560:	2300      	movs	r3, #0
    3562:	f000 ff37 	bl	43d4 <xQueueGenericSend>
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    3566:	f241 3354 	movw	r3, #4948	; 0x1354
    356a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    356e:	687a      	ldr	r2, [r7, #4]
    3570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    3574:	4618      	mov	r0, r3
    3576:	2100      	movs	r1, #0
    3578:	f04f 32ff 	mov.w	r2, #4294967295
    357c:	2300      	movs	r3, #0
    357e:	f000 ffef 	bl	4560 <xQueueGenericReceive>
/* create all semaphores which are used to triggered s-servant */
void vSemaphoreInitialise()
{
    portBASE_TYPE i;

    for( i = 0; i < NUMBEROFTHREAD; ++ i )
    3582:	687b      	ldr	r3, [r7, #4]
    3584:	3301      	adds	r3, #1
    3586:	607b      	str	r3, [r7, #4]
    3588:	687b      	ldr	r3, [r7, #4]
    358a:	2b03      	cmp	r3, #3
    358c:	ddc8      	ble.n	3520 <vSemaphoreInitialise+0xc>
    {
        vSemaphoreCreateBinary(xBinarySemaphore[i]);
        /* when created, it is initialised to 1. So, we take it away.*/
        xSemaphoreTake(xBinarySemaphore[i], portMAX_DELAY);
    }
}
    358e:	3708      	adds	r7, #8
    3590:	46bd      	mov	sp, r7
    3592:	bd80      	pop	{r7, pc}

00003594 <vContextInit>:
/*
 * Set all the parameters of S-Servants.
 *
 * */
void vContextInit()
{
    3594:	b480      	push	{r7}
    3596:	b085      	sub	sp, #20
    3598:	af00      	add	r7, sp, #0
    portBASE_TYPE i, j;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    359a:	2300      	movs	r3, #0
    359c:	60fb      	str	r3, [r7, #12]
    359e:	e0a1      	b.n	36e4 <vContextInit+0x150>
    {
        xContexts[i].xMyFlag = i;
    35a0:	f640 120c 	movw	r2, #2316	; 0x90c
    35a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    35a8:	68f9      	ldr	r1, [r7, #12]
    35aa:	460b      	mov	r3, r1
    35ac:	00db      	lsls	r3, r3, #3
    35ae:	1a5b      	subs	r3, r3, r1
    35b0:	00db      	lsls	r3, r3, #3
    35b2:	4413      	add	r3, r2
    35b4:	68fa      	ldr	r2, [r7, #12]
    35b6:	601a      	str	r2, [r3, #0]
        xContexts[i].xType = 2;
    35b8:	f640 120c 	movw	r2, #2316	; 0x90c
    35bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    35c0:	68f9      	ldr	r1, [r7, #12]
    35c2:	460b      	mov	r3, r1
    35c4:	00db      	lsls	r3, r3, #3
    35c6:	1a5b      	subs	r3, r3, r1
    35c8:	00db      	lsls	r3, r3, #3
    35ca:	4413      	add	r3, r2
    35cc:	3304      	adds	r3, #4
    35ce:	2202      	movs	r2, #2
    35d0:	601a      	str	r2, [r3, #0]
        xContexts[i].xCount = 1; // the first period of task is used to init system
    35d2:	f640 120c 	movw	r2, #2316	; 0x90c
    35d6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    35da:	68f9      	ldr	r1, [r7, #12]
    35dc:	460b      	mov	r3, r1
    35de:	00db      	lsls	r3, r3, #3
    35e0:	1a5b      	subs	r3, r3, r1
    35e2:	00db      	lsls	r3, r3, #3
    35e4:	4413      	add	r3, r2
    35e6:	3308      	adds	r3, #8
    35e8:	2201      	movs	r2, #1
    35ea:	601a      	str	r2, [r3, #0]
        xContexts[i].xNumOfIn = 0;
    35ec:	f640 120c 	movw	r2, #2316	; 0x90c
    35f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    35f4:	68f9      	ldr	r1, [r7, #12]
    35f6:	460b      	mov	r3, r1
    35f8:	00db      	lsls	r3, r3, #3
    35fa:	1a5b      	subs	r3, r3, r1
    35fc:	00db      	lsls	r3, r3, #3
    35fe:	4413      	add	r3, r2
    3600:	330c      	adds	r3, #12
    3602:	2200      	movs	r2, #0
    3604:	601a      	str	r2, [r3, #0]
        xContexts[i].xNumOfOut = 0;
    3606:	f640 120c 	movw	r2, #2316	; 0x90c
    360a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    360e:	68f9      	ldr	r1, [r7, #12]
    3610:	460b      	mov	r3, r1
    3612:	00db      	lsls	r3, r3, #3
    3614:	1a5b      	subs	r3, r3, r1
    3616:	00db      	lsls	r3, r3, #3
    3618:	4413      	add	r3, r2
    361a:	3310      	adds	r3, #16
    361c:	2200      	movs	r2, #0
    361e:	601a      	str	r2, [r3, #0]
        xContexts[i].xLet = xLetOfServant[i];
    3620:	f240 03c4 	movw	r3, #196	; 0xc4
    3624:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3628:	68fa      	ldr	r2, [r7, #12]
    362a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    362e:	f640 120c 	movw	r2, #2316	; 0x90c
    3632:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3636:	68f9      	ldr	r1, [r7, #12]
    3638:	460b      	mov	r3, r1
    363a:	00db      	lsls	r3, r3, #3
    363c:	1a5b      	subs	r3, r3, r1
    363e:	00db      	lsls	r3, r3, #3
    3640:	4413      	add	r3, r2
    3642:	3324      	adds	r3, #36	; 0x24
    3644:	6018      	str	r0, [r3, #0]
        xContexts[i].xFp = xServantTable[i];
    3646:	f240 4374 	movw	r3, #1140	; 0x474
    364a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    364e:	68fa      	ldr	r2, [r7, #12]
    3650:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    3654:	f640 120c 	movw	r2, #2316	; 0x90c
    3658:	f2c2 0200 	movt	r2, #8192	; 0x2000
    365c:	68f9      	ldr	r1, [r7, #12]
    365e:	460b      	mov	r3, r1
    3660:	00db      	lsls	r3, r3, #3
    3662:	1a5b      	subs	r3, r3, r1
    3664:	00db      	lsls	r3, r3, #3
    3666:	4413      	add	r3, r2
    3668:	3328      	adds	r3, #40	; 0x28
    366a:	6018      	str	r0, [r3, #0]
        xContexts[i].xTaskId = xTaskOfServant[i];
    366c:	f240 1380 	movw	r3, #384	; 0x180
    3670:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3674:	68fa      	ldr	r2, [r7, #12]
    3676:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    367a:	f640 120c 	movw	r2, #2316	; 0x90c
    367e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3682:	68f9      	ldr	r1, [r7, #12]
    3684:	460b      	mov	r3, r1
    3686:	00db      	lsls	r3, r3, #3
    3688:	1a5b      	subs	r3, r3, r1
    368a:	00db      	lsls	r3, r3, #3
    368c:	4413      	add	r3, r2
    368e:	3330      	adds	r3, #48	; 0x30
    3690:	6018      	str	r0, [r3, #0]
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
    3692:	f240 1380 	movw	r3, #384	; 0x180
    3696:	f2c2 0300 	movt	r3, #8192	; 0x2000
    369a:	68fa      	ldr	r2, [r7, #12]
    369c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    36a0:	f240 0328 	movw	r3, #40	; 0x28
    36a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36a8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    36ac:	f640 120c 	movw	r2, #2316	; 0x90c
    36b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36b4:	68f9      	ldr	r1, [r7, #12]
    36b6:	460b      	mov	r3, r1
    36b8:	00db      	lsls	r3, r3, #3
    36ba:	1a5b      	subs	r3, r3, r1
    36bc:	00db      	lsls	r3, r3, #3
    36be:	4413      	add	r3, r2
    36c0:	332c      	adds	r3, #44	; 0x2c
    36c2:	6018      	str	r0, [r3, #0]
        xContexts[i].xInBoolCount = 0;
    36c4:	f640 120c 	movw	r2, #2316	; 0x90c
    36c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    36cc:	68f9      	ldr	r1, [r7, #12]
    36ce:	460b      	mov	r3, r1
    36d0:	00db      	lsls	r3, r3, #3
    36d2:	1a5b      	subs	r3, r3, r1
    36d4:	00db      	lsls	r3, r3, #3
    36d6:	4413      	add	r3, r2
    36d8:	3334      	adds	r3, #52	; 0x34
    36da:	2200      	movs	r2, #0
    36dc:	601a      	str	r2, [r3, #0]
{
    portBASE_TYPE i, j;
    portBASE_TYPE xSource, xDest;
       
    // initialise the member of pvParameters
    for( i = 0; i < NUMBEROFSERVANT; ++ i )
    36de:	68fb      	ldr	r3, [r7, #12]
    36e0:	3301      	adds	r3, #1
    36e2:	60fb      	str	r3, [r7, #12]
    36e4:	68fb      	ldr	r3, [r7, #12]
    36e6:	2b2e      	cmp	r3, #46	; 0x2e
    36e8:	f77f af5a 	ble.w	35a0 <vContextInit+0xc>
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
        xContexts[i].xInBoolCount = 0;
    }

    // setup the type of servants who are initialised to 2
    for( i = 0; i < NUMBEROFTASK; ++ i )
    36ec:	2300      	movs	r3, #0
    36ee:	60fb      	str	r3, [r7, #12]
    36f0:	e028      	b.n	3744 <vContextInit+0x1b0>
    {
        xContexts[xSensorOfTask[i]].xType = 1;
    36f2:	f240 035c 	movw	r3, #92	; 0x5c
    36f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36fa:	68fa      	ldr	r2, [r7, #12]
    36fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    3700:	f640 120c 	movw	r2, #2316	; 0x90c
    3704:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3708:	460b      	mov	r3, r1
    370a:	00db      	lsls	r3, r3, #3
    370c:	1a5b      	subs	r3, r3, r1
    370e:	00db      	lsls	r3, r3, #3
    3710:	4413      	add	r3, r2
    3712:	3304      	adds	r3, #4
    3714:	2201      	movs	r2, #1
    3716:	601a      	str	r2, [r3, #0]
        xContexts[xActuatorOfTask[i]].xType = 3;
    3718:	f240 0390 	movw	r3, #144	; 0x90
    371c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3720:	68fa      	ldr	r2, [r7, #12]
    3722:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    3726:	f640 120c 	movw	r2, #2316	; 0x90c
    372a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    372e:	460b      	mov	r3, r1
    3730:	00db      	lsls	r3, r3, #3
    3732:	1a5b      	subs	r3, r3, r1
    3734:	00db      	lsls	r3, r3, #3
    3736:	4413      	add	r3, r2
    3738:	3304      	adds	r3, #4
    373a:	2203      	movs	r2, #3
    373c:	601a      	str	r2, [r3, #0]
        xContexts[i].xPeriod = xPeriodOfTask[xTaskOfServant[i]];
        xContexts[i].xInBoolCount = 0;
    }

    // setup the type of servants who are initialised to 2
    for( i = 0; i < NUMBEROFTASK; ++ i )
    373e:	68fb      	ldr	r3, [r7, #12]
    3740:	3301      	adds	r3, #1
    3742:	60fb      	str	r3, [r7, #12]
    3744:	68fb      	ldr	r3, [r7, #12]
    3746:	2b0c      	cmp	r3, #12
    3748:	ddd3      	ble.n	36f2 <vContextInit+0x15e>
        xContexts[xSensorOfTask[i]].xType = 1;
        xContexts[xActuatorOfTask[i]].xType = 3;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    374a:	2300      	movs	r3, #0
    374c:	60fb      	str	r3, [r7, #12]
    374e:	e084      	b.n	385a <vContextInit+0x2c6>
    {
        xSource = xRelations.xRelation[i].xInFlag;
    3750:	f240 223c 	movw	r2, #572	; 0x23c
    3754:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3758:	68f9      	ldr	r1, [r7, #12]
    375a:	460b      	mov	r3, r1
    375c:	005b      	lsls	r3, r3, #1
    375e:	440b      	add	r3, r1
    3760:	009b      	lsls	r3, r3, #2
    3762:	4413      	add	r3, r2
    3764:	3304      	adds	r3, #4
    3766:	681b      	ldr	r3, [r3, #0]
    3768:	60bb      	str	r3, [r7, #8]
        xDest   = xRelations.xRelation[i].xOutFlag;
    376a:	f240 223c 	movw	r2, #572	; 0x23c
    376e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3772:	68f9      	ldr	r1, [r7, #12]
    3774:	460b      	mov	r3, r1
    3776:	005b      	lsls	r3, r3, #1
    3778:	440b      	add	r3, r1
    377a:	009b      	lsls	r3, r3, #2
    377c:	4413      	add	r3, r2
    377e:	3308      	adds	r3, #8
    3780:	681b      	ldr	r3, [r3, #0]
    3782:	607b      	str	r3, [r7, #4]

        xContexts[xSource].xOutFlag[xContexts[xSource].xNumOfOut] = xDest;
    3784:	f640 120c 	movw	r2, #2316	; 0x90c
    3788:	f2c2 0200 	movt	r2, #8192	; 0x2000
    378c:	68b9      	ldr	r1, [r7, #8]
    378e:	460b      	mov	r3, r1
    3790:	00db      	lsls	r3, r3, #3
    3792:	1a5b      	subs	r3, r3, r1
    3794:	00db      	lsls	r3, r3, #3
    3796:	4413      	add	r3, r2
    3798:	3310      	adds	r3, #16
    379a:	6818      	ldr	r0, [r3, #0]
    379c:	f640 120c 	movw	r2, #2316	; 0x90c
    37a0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37a4:	68b9      	ldr	r1, [r7, #8]
    37a6:	460b      	mov	r3, r1
    37a8:	00db      	lsls	r3, r3, #3
    37aa:	1a5b      	subs	r3, r3, r1
    37ac:	005b      	lsls	r3, r3, #1
    37ae:	4403      	add	r3, r0
    37b0:	3306      	adds	r3, #6
    37b2:	009b      	lsls	r3, r3, #2
    37b4:	4413      	add	r3, r2
    37b6:	687a      	ldr	r2, [r7, #4]
    37b8:	605a      	str	r2, [r3, #4]
        xContexts[xSource].xNumOfOut ++;
    37ba:	f640 120c 	movw	r2, #2316	; 0x90c
    37be:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37c2:	68b9      	ldr	r1, [r7, #8]
    37c4:	460b      	mov	r3, r1
    37c6:	00db      	lsls	r3, r3, #3
    37c8:	1a5b      	subs	r3, r3, r1
    37ca:	00db      	lsls	r3, r3, #3
    37cc:	4413      	add	r3, r2
    37ce:	3310      	adds	r3, #16
    37d0:	681b      	ldr	r3, [r3, #0]
    37d2:	1c58      	adds	r0, r3, #1
    37d4:	f640 120c 	movw	r2, #2316	; 0x90c
    37d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37dc:	68b9      	ldr	r1, [r7, #8]
    37de:	460b      	mov	r3, r1
    37e0:	00db      	lsls	r3, r3, #3
    37e2:	1a5b      	subs	r3, r3, r1
    37e4:	00db      	lsls	r3, r3, #3
    37e6:	4413      	add	r3, r2
    37e8:	3310      	adds	r3, #16
    37ea:	6018      	str	r0, [r3, #0]

        xContexts[xDest].xInFlag[xContexts[xDest].xNumOfIn] = xSource;
    37ec:	f640 120c 	movw	r2, #2316	; 0x90c
    37f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    37f4:	6879      	ldr	r1, [r7, #4]
    37f6:	460b      	mov	r3, r1
    37f8:	00db      	lsls	r3, r3, #3
    37fa:	1a5b      	subs	r3, r3, r1
    37fc:	00db      	lsls	r3, r3, #3
    37fe:	4413      	add	r3, r2
    3800:	330c      	adds	r3, #12
    3802:	6818      	ldr	r0, [r3, #0]
    3804:	f640 120c 	movw	r2, #2316	; 0x90c
    3808:	f2c2 0200 	movt	r2, #8192	; 0x2000
    380c:	6879      	ldr	r1, [r7, #4]
    380e:	460b      	mov	r3, r1
    3810:	00db      	lsls	r3, r3, #3
    3812:	1a5b      	subs	r3, r3, r1
    3814:	005b      	lsls	r3, r3, #1
    3816:	4403      	add	r3, r0
    3818:	3304      	adds	r3, #4
    381a:	009b      	lsls	r3, r3, #2
    381c:	4413      	add	r3, r2
    381e:	68ba      	ldr	r2, [r7, #8]
    3820:	605a      	str	r2, [r3, #4]
        xContexts[xDest].xNumOfIn ++;
    3822:	f640 120c 	movw	r2, #2316	; 0x90c
    3826:	f2c2 0200 	movt	r2, #8192	; 0x2000
    382a:	6879      	ldr	r1, [r7, #4]
    382c:	460b      	mov	r3, r1
    382e:	00db      	lsls	r3, r3, #3
    3830:	1a5b      	subs	r3, r3, r1
    3832:	00db      	lsls	r3, r3, #3
    3834:	4413      	add	r3, r2
    3836:	330c      	adds	r3, #12
    3838:	681b      	ldr	r3, [r3, #0]
    383a:	1c58      	adds	r0, r3, #1
    383c:	f640 120c 	movw	r2, #2316	; 0x90c
    3840:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3844:	6879      	ldr	r1, [r7, #4]
    3846:	460b      	mov	r3, r1
    3848:	00db      	lsls	r3, r3, #3
    384a:	1a5b      	subs	r3, r3, r1
    384c:	00db      	lsls	r3, r3, #3
    384e:	4413      	add	r3, r2
    3850:	330c      	adds	r3, #12
    3852:	6018      	str	r0, [r3, #0]
        xContexts[xSensorOfTask[i]].xType = 1;
        xContexts[xActuatorOfTask[i]].xType = 3;
    }

    // new edition with sparse matrix relation table
    for( i = 0; i < xRelations.xNumOfRelation; ++ i )
    3854:	68fb      	ldr	r3, [r7, #12]
    3856:	3301      	adds	r3, #1
    3858:	60fb      	str	r3, [r7, #12]
    385a:	f240 233c 	movw	r3, #572	; 0x23c
    385e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3862:	681a      	ldr	r2, [r3, #0]
    3864:	68fb      	ldr	r3, [r7, #12]
    3866:	429a      	cmp	r2, r3
    3868:	f73f af72 	bgt.w	3750 <vContextInit+0x1bc>
        xContexts[xSource].xNumOfOut ++;

        xContexts[xDest].xInFlag[xContexts[xDest].xNumOfIn] = xSource;
        xContexts[xDest].xNumOfIn ++;
    }
}
    386c:	3714      	adds	r7, #20
    386e:	46bd      	mov	sp, r7
    3870:	f85d 7b04 	ldr.w	r7, [sp], #4
    3874:	4770      	bx	lr
    3876:	bf00      	nop

00003878 <vSensor>:

void vSensor( void * pvParameter )
{
    3878:	b580      	push	{r7, lr}
    387a:	b08c      	sub	sp, #48	; 0x30
    387c:	af02      	add	r7, sp, #8
    387e:	6078      	str	r0, [r7, #4]
    struct tag * xMyTag;
    portBASE_TYPE boolFlag;

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[1], portMAX_DELAY );
    3880:	f241 3354 	movw	r3, #4948	; 0x1354
    3884:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3888:	685b      	ldr	r3, [r3, #4]
    388a:	4618      	mov	r0, r3
    388c:	2100      	movs	r1, #0
    388e:	f04f 32ff 	mov.w	r2, #4294967295
    3892:	2300      	movs	r3, #0
    3894:	f000 fe64 	bl	4560 <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    3898:	e058      	b.n	394c <vSensor+0xd4>
        {
            if(boolFlag == 0)
    389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    389c:	2b00      	cmp	r3, #0
    389e:	d100      	bne.n	38a2 <vSensor+0x2a>
                continue;
    38a0:	e054      	b.n	394c <vSensor+0xd4>
            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    38a2:	f7ff fddf 	bl	3464 <pxEventGenericReceive>
    38a6:	6238      	str	r0, [r7, #32]
            xMyFlag = xEventGetpxDestination( pxEvent );
    38a8:	6a38      	ldr	r0, [r7, #32]
    38aa:	f7ff f87f 	bl	29ac <xEventGetpxDestination>
    38ae:	61f8      	str	r0, [r7, #28]
            xMyData = xEventGetxData( pxEvent );
    38b0:	6a38      	ldr	r0, [r7, #32]
    38b2:	f7ff f893 	bl	29dc <xEventGetxData>
    38b6:	61b8      	str	r0, [r7, #24]
            xMyTag = xEventGetxTag( pxEvent );
    38b8:	6a38      	ldr	r0, [r7, #32]
    38ba:	f7ff f883 	bl	29c4 <xEventGetxTag>
    38be:	6178      	str	r0, [r7, #20]
            xContexts[xMyFlag].xCount ++;
    38c0:	f640 120c 	movw	r2, #2316	; 0x90c
    38c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    38c8:	69f9      	ldr	r1, [r7, #28]
    38ca:	460b      	mov	r3, r1
    38cc:	00db      	lsls	r3, r3, #3
    38ce:	1a5b      	subs	r3, r3, r1
    38d0:	00db      	lsls	r3, r3, #3
    38d2:	4413      	add	r3, r2
    38d4:	3308      	adds	r3, #8
    38d6:	681b      	ldr	r3, [r3, #0]
    38d8:	1c58      	adds	r0, r3, #1
    38da:	f640 120c 	movw	r2, #2316	; 0x90c
    38de:	f2c2 0200 	movt	r2, #8192	; 0x2000
    38e2:	69f9      	ldr	r1, [r7, #28]
    38e4:	460b      	mov	r3, r1
    38e6:	00db      	lsls	r3, r3, #3
    38e8:	1a5b      	subs	r3, r3, r1
    38ea:	00db      	lsls	r3, r3, #3
    38ec:	4413      	add	r3, r2
    38ee:	3308      	adds	r3, #8
    38f0:	6018      	str	r0, [r3, #0]
            xDeadline= xEventGetxDeadline( pxEvent ); 
    38f2:	6a38      	ldr	r0, [r7, #32]
    38f4:	f7ff f842 	bl	297c <xEventGetxDeadline>
    38f8:	6138      	str	r0, [r7, #16]
            xTimestamp = xMyTag->xTimestamp + INPUT;   
    38fa:	697b      	ldr	r3, [r7, #20]
    38fc:	685b      	ldr	r3, [r3, #4]
    38fe:	3303      	adds	r3, #3
    3900:	60fb      	str	r3, [r7, #12]
            xFutureModelTime = xTimestamp;  // init the future model time to the start of LET execution duration.
    3902:	f240 635c 	movw	r3, #1628	; 0x65c
    3906:	f2c2 0300 	movt	r3, #8192	; 0x2000
    390a:	68fa      	ldr	r2, [r7, #12]
    390c:	601a      	str	r2, [r3, #0]
            vPrintNumber(xMyFlag);
    390e:	69f8      	ldr	r0, [r7, #28]
    3910:	f013 fe1e 	bl	17550 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3914:	f001 fcd8 	bl	52c8 <xTaskGetTickCount>
    3918:	4603      	mov	r3, r0
    391a:	4618      	mov	r0, r3
    391c:	f013 fe18 	bl	17550 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
    3920:	f640 120c 	movw	r2, #2316	; 0x90c
    3924:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3928:	69f9      	ldr	r1, [r7, #28]
    392a:	460b      	mov	r3, r1
    392c:	00db      	lsls	r3, r3, #3
    392e:	1a5b      	subs	r3, r3, r1
    3930:	00db      	lsls	r3, r3, #3
    3932:	4413      	add	r3, r2
    3934:	3328      	adds	r3, #40	; 0x28
    3936:	681b      	ldr	r3, [r3, #0]
    3938:	69b8      	ldr	r0, [r7, #24]
    393a:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData );  // reuse event
    393c:	69bb      	ldr	r3, [r7, #24]
    393e:	9300      	str	r3, [sp, #0]
    3940:	6a38      	ldr	r0, [r7, #32]
    3942:	69f9      	ldr	r1, [r7, #28]
    3944:	693a      	ldr	r2, [r7, #16]
    3946:	68fb      	ldr	r3, [r7, #12]
    3948:	f7ff fdaa 	bl	34a0 <vEventGenericUpdate>

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[1], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    394c:	f7fe ffdc 	bl	2908 <xIsERLNull>
    3950:	6278      	str	r0, [r7, #36]	; 0x24
    3952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3954:	f1b3 3fff 	cmp.w	r3, #4294967295
    3958:	d19f      	bne.n	389a <vSensor+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData );  // reuse event
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    395a:	f241 3354 	movw	r3, #4948	; 0x1354
    395e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3962:	681b      	ldr	r3, [r3, #0]
    3964:	4618      	mov	r0, r3
    3966:	2100      	movs	r1, #0
    3968:	2200      	movs	r2, #0
    396a:	2300      	movs	r3, #0
    396c:	f000 fd32 	bl	43d4 <xQueueGenericSend>
    }
    3970:	e786      	b.n	3880 <vSensor+0x8>
    3972:	bf00      	nop

00003974 <vServant>:
}

void vServant( void * pvParameter )
{
    3974:	b580      	push	{r7, lr}
    3976:	b08c      	sub	sp, #48	; 0x30
    3978:	af02      	add	r7, sp, #8
    397a:	6078      	str	r0, [r7, #4]
    struct eventData * xMyData;
    struct tag * xMyTag;
    portBASE_TYPE boolFlag;
    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[2], portMAX_DELAY );
    397c:	f241 3354 	movw	r3, #4948	; 0x1354
    3980:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3984:	689b      	ldr	r3, [r3, #8]
    3986:	4618      	mov	r0, r3
    3988:	2100      	movs	r1, #0
    398a:	f04f 32ff 	mov.w	r2, #4294967295
    398e:	2300      	movs	r3, #0
    3990:	f000 fde6 	bl	4560 <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    3994:	e081      	b.n	3a9a <vServant+0x126>
        {
            if(boolFlag == 0)
    3996:	6a3b      	ldr	r3, [r7, #32]
    3998:	2b00      	cmp	r3, #0
    399a:	d100      	bne.n	399e <vServant+0x2a>
                continue;
    399c:	e07d      	b.n	3a9a <vServant+0x126>
            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    399e:	f7ff fd61 	bl	3464 <pxEventGenericReceive>
    39a2:	61f8      	str	r0, [r7, #28]
            xMyFlag = xEventGetpxDestination( pxEvent );
    39a4:	69f8      	ldr	r0, [r7, #28]
    39a6:	f7ff f801 	bl	29ac <xEventGetpxDestination>
    39aa:	61b8      	str	r0, [r7, #24]
            xMyData = xEventGetxData( pxEvent );
    39ac:	69f8      	ldr	r0, [r7, #28]
    39ae:	f7ff f815 	bl	29dc <xEventGetxData>
    39b2:	6178      	str	r0, [r7, #20]
            xMyTag = xEventGetxTag( pxEvent );
    39b4:	69f8      	ldr	r0, [r7, #28]
    39b6:	f7ff f805 	bl	29c4 <xEventGetxTag>
    39ba:	6138      	str	r0, [r7, #16]
            xContexts[xMyFlag].xCount ++;
    39bc:	f640 120c 	movw	r2, #2316	; 0x90c
    39c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    39c4:	69b9      	ldr	r1, [r7, #24]
    39c6:	460b      	mov	r3, r1
    39c8:	00db      	lsls	r3, r3, #3
    39ca:	1a5b      	subs	r3, r3, r1
    39cc:	00db      	lsls	r3, r3, #3
    39ce:	4413      	add	r3, r2
    39d0:	3308      	adds	r3, #8
    39d2:	681b      	ldr	r3, [r3, #0]
    39d4:	1c58      	adds	r0, r3, #1
    39d6:	f640 120c 	movw	r2, #2316	; 0x90c
    39da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    39de:	69b9      	ldr	r1, [r7, #24]
    39e0:	460b      	mov	r3, r1
    39e2:	00db      	lsls	r3, r3, #3
    39e4:	1a5b      	subs	r3, r3, r1
    39e6:	00db      	lsls	r3, r3, #3
    39e8:	4413      	add	r3, r2
    39ea:	3308      	adds	r3, #8
    39ec:	6018      	str	r0, [r3, #0]
            xDeadline = xEventGetxDeadline( pxEvent ); 
    39ee:	69f8      	ldr	r0, [r7, #28]
    39f0:	f7fe ffc4 	bl	297c <xEventGetxDeadline>
    39f4:	60f8      	str	r0, [r7, #12]
            // set the timestamp of event in terms of destination servant
            // if destination is actuator, then set as the EndOfLET
            // else set as the sum of input event's timestamp and let
            pxDestination = xContexts[xMyFlag].xOutFlag[0];
    39f6:	f640 120c 	movw	r2, #2316	; 0x90c
    39fa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    39fe:	69b9      	ldr	r1, [r7, #24]
    3a00:	460b      	mov	r3, r1
    3a02:	00db      	lsls	r3, r3, #3
    3a04:	1a5b      	subs	r3, r3, r1
    3a06:	00db      	lsls	r3, r3, #3
    3a08:	4413      	add	r3, r2
    3a0a:	331c      	adds	r3, #28
    3a0c:	681b      	ldr	r3, [r3, #0]
    3a0e:	60bb      	str	r3, [r7, #8]
            switch(xContexts[pxDestination].xType)
    3a10:	f640 120c 	movw	r2, #2316	; 0x90c
    3a14:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a18:	68b9      	ldr	r1, [r7, #8]
    3a1a:	460b      	mov	r3, r1
    3a1c:	00db      	lsls	r3, r3, #3
    3a1e:	1a5b      	subs	r3, r3, r1
    3a20:	00db      	lsls	r3, r3, #3
    3a22:	4413      	add	r3, r2
    3a24:	3304      	adds	r3, #4
    3a26:	681b      	ldr	r3, [r3, #0]
    3a28:	2b02      	cmp	r3, #2
    3a2a:	d002      	beq.n	3a32 <vServant+0xbe>
    3a2c:	2b03      	cmp	r3, #3
    3a2e:	d011      	beq.n	3a54 <vServant+0xe0>
                case 3:
                    // the output execution time start from 3ms before end of the task period
                    xTimestamp = xDeadline - OUTPUT; 
                    break;
                default:
                    break;
    3a30:	e014      	b.n	3a5c <vServant+0xe8>
            // else set as the sum of input event's timestamp and let
            pxDestination = xContexts[xMyFlag].xOutFlag[0];
            switch(xContexts[pxDestination].xType)
            {
                case 2:
                    xTimestamp = xMyTag->xTimestamp + xContexts[xMyFlag].xLet;
    3a32:	693b      	ldr	r3, [r7, #16]
    3a34:	6858      	ldr	r0, [r3, #4]
    3a36:	f640 120c 	movw	r2, #2316	; 0x90c
    3a3a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a3e:	69b9      	ldr	r1, [r7, #24]
    3a40:	460b      	mov	r3, r1
    3a42:	00db      	lsls	r3, r3, #3
    3a44:	1a5b      	subs	r3, r3, r1
    3a46:	00db      	lsls	r3, r3, #3
    3a48:	4413      	add	r3, r2
    3a4a:	3324      	adds	r3, #36	; 0x24
    3a4c:	681b      	ldr	r3, [r3, #0]
    3a4e:	4403      	add	r3, r0
    3a50:	627b      	str	r3, [r7, #36]	; 0x24
                    break;
    3a52:	e003      	b.n	3a5c <vServant+0xe8>
                case 3:
                    // the output execution time start from 3ms before end of the task period
                    xTimestamp = xDeadline - OUTPUT; 
    3a54:	68fb      	ldr	r3, [r7, #12]
    3a56:	3b03      	subs	r3, #3
    3a58:	627b      	str	r3, [r7, #36]	; 0x24
                    break;
    3a5a:	bf00      	nop
                default:
                    break;
                    // wrong events type
            }
            vPrintNumber(xMyFlag);
    3a5c:	69b8      	ldr	r0, [r7, #24]
    3a5e:	f013 fd77 	bl	17550 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3a62:	f001 fc31 	bl	52c8 <xTaskGetTickCount>
    3a66:	4603      	mov	r3, r0
    3a68:	4618      	mov	r0, r3
    3a6a:	f013 fd71 	bl	17550 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
    3a6e:	f640 120c 	movw	r2, #2316	; 0x90c
    3a72:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3a76:	69b9      	ldr	r1, [r7, #24]
    3a78:	460b      	mov	r3, r1
    3a7a:	00db      	lsls	r3, r3, #3
    3a7c:	1a5b      	subs	r3, r3, r1
    3a7e:	00db      	lsls	r3, r3, #3
    3a80:	4413      	add	r3, r2
    3a82:	3328      	adds	r3, #40	; 0x28
    3a84:	681b      	ldr	r3, [r3, #0]
    3a86:	6978      	ldr	r0, [r7, #20]
    3a88:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData );
    3a8a:	697b      	ldr	r3, [r7, #20]
    3a8c:	9300      	str	r3, [sp, #0]
    3a8e:	69f8      	ldr	r0, [r7, #28]
    3a90:	69b9      	ldr	r1, [r7, #24]
    3a92:	68fa      	ldr	r2, [r7, #12]
    3a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3a96:	f7ff fd03 	bl	34a0 <vEventGenericUpdate>
    portBASE_TYPE boolFlag;
    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[2], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    3a9a:	f7fe ff35 	bl	2908 <xIsERLNull>
    3a9e:	6238      	str	r0, [r7, #32]
    3aa0:	6a3b      	ldr	r3, [r7, #32]
    3aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
    3aa6:	f47f af76 	bne.w	3996 <vServant+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData );
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    3aaa:	f241 3354 	movw	r3, #4948	; 0x1354
    3aae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ab2:	681b      	ldr	r3, [r3, #0]
    3ab4:	4618      	mov	r0, r3
    3ab6:	2100      	movs	r1, #0
    3ab8:	2200      	movs	r2, #0
    3aba:	2300      	movs	r3, #0
    3abc:	f000 fc8a 	bl	43d4 <xQueueGenericSend>
    }
    3ac0:	e75c      	b.n	397c <vServant+0x8>
    3ac2:	bf00      	nop

00003ac4 <vActuator>:

}

void vActuator( void * pvParameter )
{
    3ac4:	b580      	push	{r7, lr}
    3ac6:	b08c      	sub	sp, #48	; 0x30
    3ac8:	af02      	add	r7, sp, #8
    3aca:	6078      	str	r0, [r7, #4]
    struct tag * xMyTag;
    portBASE_TYPE boolFlag;

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[3], portMAX_DELAY );
    3acc:	f241 3354 	movw	r3, #4948	; 0x1354
    3ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ad4:	68db      	ldr	r3, [r3, #12]
    3ad6:	4618      	mov	r0, r3
    3ad8:	2100      	movs	r1, #0
    3ada:	f04f 32ff 	mov.w	r2, #4294967295
    3ade:	2300      	movs	r3, #0
    3ae0:	f000 fd3e 	bl	4560 <xQueueGenericReceive>

        while((boolFlag = xIsERLNull()) != -1)
    3ae4:	e05f      	b.n	3ba6 <vActuator+0xe2>
        {
            if(boolFlag == 0)
    3ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3ae8:	2b00      	cmp	r3, #0
    3aea:	d100      	bne.n	3aee <vActuator+0x2a>
                continue;
    3aec:	e05b      	b.n	3ba6 <vActuator+0xe2>

            pxEvent = pxEventReceive();   // receive event from ready list and send to event pool straightly
    3aee:	f7ff fcb9 	bl	3464 <pxEventGenericReceive>
    3af2:	6238      	str	r0, [r7, #32]
            xMyFlag = xEventGetpxDestination( pxEvent );
    3af4:	6a38      	ldr	r0, [r7, #32]
    3af6:	f7fe ff59 	bl	29ac <xEventGetpxDestination>
    3afa:	61f8      	str	r0, [r7, #28]
            xMyData = xEventGetxData( pxEvent );
    3afc:	6a38      	ldr	r0, [r7, #32]
    3afe:	f7fe ff6d 	bl	29dc <xEventGetxData>
    3b02:	61b8      	str	r0, [r7, #24]
            xMyTag = xEventGetxTag( pxEvent );
    3b04:	6a38      	ldr	r0, [r7, #32]
    3b06:	f7fe ff5d 	bl	29c4 <xEventGetxTag>
    3b0a:	6178      	str	r0, [r7, #20]
            xContexts[xMyFlag].xCount ++;
    3b0c:	f640 120c 	movw	r2, #2316	; 0x90c
    3b10:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b14:	69f9      	ldr	r1, [r7, #28]
    3b16:	460b      	mov	r3, r1
    3b18:	00db      	lsls	r3, r3, #3
    3b1a:	1a5b      	subs	r3, r3, r1
    3b1c:	00db      	lsls	r3, r3, #3
    3b1e:	4413      	add	r3, r2
    3b20:	3308      	adds	r3, #8
    3b22:	681b      	ldr	r3, [r3, #0]
    3b24:	1c58      	adds	r0, r3, #1
    3b26:	f640 120c 	movw	r2, #2316	; 0x90c
    3b2a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b2e:	69f9      	ldr	r1, [r7, #28]
    3b30:	460b      	mov	r3, r1
    3b32:	00db      	lsls	r3, r3, #3
    3b34:	1a5b      	subs	r3, r3, r1
    3b36:	00db      	lsls	r3, r3, #3
    3b38:	4413      	add	r3, r2
    3b3a:	3308      	adds	r3, #8
    3b3c:	6018      	str	r0, [r3, #0]
            xDeadline = xEventGetxDeadline( pxEvent ) + xContexts[xMyFlag].xPeriod; 
    3b3e:	6a38      	ldr	r0, [r7, #32]
    3b40:	f7fe ff1c 	bl	297c <xEventGetxDeadline>
    3b44:	f640 120c 	movw	r2, #2316	; 0x90c
    3b48:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b4c:	69f9      	ldr	r1, [r7, #28]
    3b4e:	460b      	mov	r3, r1
    3b50:	00db      	lsls	r3, r3, #3
    3b52:	1a5b      	subs	r3, r3, r1
    3b54:	00db      	lsls	r3, r3, #3
    3b56:	4413      	add	r3, r2
    3b58:	332c      	adds	r3, #44	; 0x2c
    3b5a:	681b      	ldr	r3, [r3, #0]
    3b5c:	4403      	add	r3, r0
    3b5e:	613b      	str	r3, [r7, #16]
            xTimestamp = xMyTag->xTimestamp + OUTPUT;  // all sensor are scheduled to execute start from 0 to 4 ms of every period
    3b60:	697b      	ldr	r3, [r7, #20]
    3b62:	685b      	ldr	r3, [r3, #4]
    3b64:	3303      	adds	r3, #3
    3b66:	60fb      	str	r3, [r7, #12]
            vPrintNumber(xMyFlag);
    3b68:	69f8      	ldr	r0, [r7, #28]
    3b6a:	f013 fcf1 	bl	17550 <vPrintNumber>
            vPrintNumber(xTaskGetTickCount());
    3b6e:	f001 fbab 	bl	52c8 <xTaskGetTickCount>
    3b72:	4603      	mov	r3, r0
    3b74:	4618      	mov	r0, r3
    3b76:	f013 fceb 	bl	17550 <vPrintNumber>
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
    3b7a:	f640 120c 	movw	r2, #2316	; 0x90c
    3b7e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3b82:	69f9      	ldr	r1, [r7, #28]
    3b84:	460b      	mov	r3, r1
    3b86:	00db      	lsls	r3, r3, #3
    3b88:	1a5b      	subs	r3, r3, r1
    3b8a:	00db      	lsls	r3, r3, #3
    3b8c:	4413      	add	r3, r2
    3b8e:	3328      	adds	r3, #40	; 0x28
    3b90:	681b      	ldr	r3, [r3, #0]
    3b92:	69b8      	ldr	r0, [r7, #24]
    3b94:	4798      	blx	r3
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData ); // update the information of output event 
    3b96:	69bb      	ldr	r3, [r7, #24]
    3b98:	9300      	str	r3, [sp, #0]
    3b9a:	6a38      	ldr	r0, [r7, #32]
    3b9c:	69f9      	ldr	r1, [r7, #28]
    3b9e:	693a      	ldr	r2, [r7, #16]
    3ba0:	68fb      	ldr	r3, [r7, #12]
    3ba2:	f7ff fc7d 	bl	34a0 <vEventGenericUpdate>

    while(1)
    {
        xSemaphoreTake( xBinarySemaphore[3], portMAX_DELAY );

        while((boolFlag = xIsERLNull()) != -1)
    3ba6:	f7fe feaf 	bl	2908 <xIsERLNull>
    3baa:	6278      	str	r0, [r7, #36]	; 0x24
    3bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3bae:	f1b3 3fff 	cmp.w	r3, #4294967295
    3bb2:	d198      	bne.n	3ae6 <vActuator+0x22>
            vPrintNumber(xTaskGetTickCount());
        
            xContexts[xMyFlag].xFp( xMyData );  // get the loop data and sensor data
            vEventUpdate( pxEvent, xMyFlag, xDeadline, xTimestamp, xMyData ); // update the information of output event 
        }
        xSemaphoreGive( xBinarySemaphore[0] );
    3bb4:	f241 3354 	movw	r3, #4948	; 0x1354
    3bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bbc:	681b      	ldr	r3, [r3, #0]
    3bbe:	4618      	mov	r0, r3
    3bc0:	2100      	movs	r1, #0
    3bc2:	2200      	movs	r2, #0
    3bc4:	2300      	movs	r3, #0
    3bc6:	f000 fc05 	bl	43d4 <xQueueGenericSend>
    }
    3bca:	e77f      	b.n	3acc <vActuator+0x8>

00003bcc <vR_Servant>:
}


void vR_Servant( void * pvParameter)
{
    3bcc:	b580      	push	{r7, lr}
    3bce:	b084      	sub	sp, #16
    3bd0:	af00      	add	r7, sp, #0
    3bd2:	6078      	str	r0, [r7, #4]
    portBASE_TYPE pxDestination;
    while(1)
    {
        // waiting for events created by tick hook or S-Servant
        xSemaphoreTake( xBinarySemaphore[0], portMAX_DELAY );
    3bd4:	f241 3354 	movw	r3, #4948	; 0x1354
    3bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bdc:	681b      	ldr	r3, [r3, #0]
    3bde:	4618      	mov	r0, r3
    3be0:	2100      	movs	r1, #0
    3be2:	f04f 32ff 	mov.w	r2, #4294967295
    3be6:	2300      	movs	r3, #0
    3be8:	f000 fcba 	bl	4560 <xQueueGenericReceive>
        vPrintString("R-Servant\n\r");
    3bec:	f648 2034 	movw	r0, #35380	; 0x8a34
    3bf0:	f2c0 0001 	movt	r0, #1
    3bf4:	f013 fc92 	bl	1751c <vPrintString>

        // transit the events from events pool to nonexecutable event list
        // Copy one event to multiple when communication mode is 1 to N
        vEventScatter();
    3bf8:	f7ff f8bc 	bl	2d74 <vEventGenericScatter>

        // reduce multiple event for destination to one when communication mode is N to 1,
        // and transit the event from executable event pool to executable event list
        vEventReduce(); 
    3bfc:	f7ff f9e6 	bl	2fcc <vEventGenericReduce>

        // serialize the timestamp of simulataneous events,
        // and transit the ready events to ready list
        // return the pxDestination of the first ready event in ready list
        pxDestination = xEventSerialize(); 
    3c00:	f7ff fbb4 	bl	336c <xEventGenericSerialize>
    3c04:	60f8      	str	r0, [r7, #12]
        if(pxDestination != -1)
    3c06:	68fb      	ldr	r3, [r7, #12]
    3c08:	f1b3 3fff 	cmp.w	r3, #4294967295
    3c0c:	d036      	beq.n	3c7c <vR_Servant+0xb0>
        {
            switch(xContexts[pxDestination].xType)
    3c0e:	f640 120c 	movw	r2, #2316	; 0x90c
    3c12:	f2c2 0200 	movt	r2, #8192	; 0x2000
    3c16:	68f9      	ldr	r1, [r7, #12]
    3c18:	460b      	mov	r3, r1
    3c1a:	00db      	lsls	r3, r3, #3
    3c1c:	1a5b      	subs	r3, r3, r1
    3c1e:	00db      	lsls	r3, r3, #3
    3c20:	4413      	add	r3, r2
    3c22:	3304      	adds	r3, #4
    3c24:	681b      	ldr	r3, [r3, #0]
    3c26:	2b02      	cmp	r3, #2
    3c28:	d010      	beq.n	3c4c <vR_Servant+0x80>
    3c2a:	2b03      	cmp	r3, #3
    3c2c:	d01a      	beq.n	3c64 <vR_Servant+0x98>
    3c2e:	2b01      	cmp	r3, #1
    3c30:	d000      	beq.n	3c34 <vR_Servant+0x68>
                    break;
                case 3:
                    xSemaphoreGive( xBinarySemaphore[3] );
                    break;
                default:
                    break;
    3c32:	e023      	b.n	3c7c <vR_Servant+0xb0>
        if(pxDestination != -1)
        {
            switch(xContexts[pxDestination].xType)
            {
                case 1:
                    xSemaphoreGive( xBinarySemaphore[1] );
    3c34:	f241 3354 	movw	r3, #4948	; 0x1354
    3c38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c3c:	685b      	ldr	r3, [r3, #4]
    3c3e:	4618      	mov	r0, r3
    3c40:	2100      	movs	r1, #0
    3c42:	2200      	movs	r2, #0
    3c44:	2300      	movs	r3, #0
    3c46:	f000 fbc5 	bl	43d4 <xQueueGenericSend>
                    break;
    3c4a:	e017      	b.n	3c7c <vR_Servant+0xb0>
                case 2:
                    xSemaphoreGive( xBinarySemaphore[2] );
    3c4c:	f241 3354 	movw	r3, #4948	; 0x1354
    3c50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c54:	689b      	ldr	r3, [r3, #8]
    3c56:	4618      	mov	r0, r3
    3c58:	2100      	movs	r1, #0
    3c5a:	2200      	movs	r2, #0
    3c5c:	2300      	movs	r3, #0
    3c5e:	f000 fbb9 	bl	43d4 <xQueueGenericSend>
                    break;
    3c62:	e00b      	b.n	3c7c <vR_Servant+0xb0>
                case 3:
                    xSemaphoreGive( xBinarySemaphore[3] );
    3c64:	f241 3354 	movw	r3, #4948	; 0x1354
    3c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c6c:	68db      	ldr	r3, [r3, #12]
    3c6e:	4618      	mov	r0, r3
    3c70:	2100      	movs	r1, #0
    3c72:	2200      	movs	r2, #0
    3c74:	2300      	movs	r3, #0
    3c76:	f000 fbad 	bl	43d4 <xQueueGenericSend>
                    break;
    3c7a:	bf00      	nop
                default:
                    break;
                    // no event available 
            }
        }
    }
    3c7c:	e7aa      	b.n	3bd4 <vR_Servant+0x8>
    3c7e:	bf00      	nop

00003c80 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
    3c80:	b480      	push	{r7}
    3c82:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
    3c84:	f242 032f 	movw	r3, #8239	; 0x202f
    3c88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c8c:	2200      	movs	r2, #0
    3c8e:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
    3c90:	f242 032e 	movw	r3, #8238	; 0x202e
    3c94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c98:	2201      	movs	r2, #1
    3c9a:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
    3c9c:	f242 0325 	movw	r3, #8229	; 0x2025
    3ca0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ca4:	2207      	movs	r2, #7
    3ca6:	701a      	strb	r2, [r3, #0]
}
    3ca8:	46bd      	mov	sp, r7
    3caa:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cae:	4770      	bx	lr

00003cb0 <PapabenchInit>:
extern void ir_init();
extern void estimator_init();
extern void fbw_init();

void PapabenchInit()
{
    3cb0:	b580      	push	{r7, lr}
    3cb2:	af00      	add	r7, sp, #0
    timer_init();
    3cb4:	f7ff ffe4 	bl	3c80 <timer_init>
    modem_init();
    3cb8:	f00d f93e 	bl	10f38 <modem_init>
    adc_init();
    3cbc:	f00d fc88 	bl	115d0 <adc_init>
#ifdef CTL_BRD_V1_1
    adc_buf_channel(ADC_CHANNEL_BAT, &buf_bat);
#endif
    spi_init();
    3cc0:	f00d fbfa 	bl	114b8 <spi_init>
    link_fbw_init();
    3cc4:	f00d fa56 	bl	11174 <link_fbw_init>
    gps_init();
    3cc8:	f00d fd32 	bl	11730 <gps_init>
    nav_init();
    3ccc:	f011 f82a 	bl	14d24 <nav_init>
    ir_init();
    3cd0:	f00d ffd6 	bl	11c80 <ir_init>
    estimator_init();
    3cd4:	f011 fa0c 	bl	150f0 <estimator_init>
#ifdef PAPABENCH_SINGLE
    fbw_init();
#endif
}
    3cd8:	bd80      	pop	{r7, pc}
    3cda:	bf00      	nop

00003cdc <s_0>:
#define SUNNYBEIKE 1
#ifdef SUNNYBEIKE

/*task0*/
void s_0(struct eventData * pxDataArray) 
{
    3cdc:	b480      	push	{r7}
    3cde:	b083      	sub	sp, #12
    3ce0:	af00      	add	r7, sp, #0
    3ce2:	6078      	str	r0, [r7, #4]
    // do actuator
    // do sensor
}
    3ce4:	370c      	adds	r7, #12
    3ce6:	46bd      	mov	sp, r7
    3ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3cec:	4770      	bx	lr
    3cee:	bf00      	nop

00003cf0 <s_1>:
void s_1(struct eventData * pxDataArray) 
{
    3cf0:	b580      	push	{r7, lr}
    3cf2:	b082      	sub	sp, #8
    3cf4:	af00      	add	r7, sp, #0
    3cf6:	6078      	str	r0, [r7, #4]
    last_radio_from_ppm(); // ppm.h
    3cf8:	f012 f9d6 	bl	160a8 <last_radio_from_ppm>
}
    3cfc:	3708      	adds	r7, #8
    3cfe:	46bd      	mov	sp, r7
    3d00:	bd80      	pop	{r7, pc}
    3d02:	bf00      	nop

00003d04 <s_2>:
void s_2(struct eventData * pxDataArray) 
{
    3d04:	b480      	push	{r7}
    3d06:	b083      	sub	sp, #12
    3d08:	af00      	add	r7, sp, #0
    3d0a:	6078      	str	r0, [r7, #4]
    //servo_set();  // servo.h, this function is used by multitask which in terms of multiuse of Servant. And this
                    // is not implemented now. So cancel.
}
    3d0c:	370c      	adds	r7, #12
    3d0e:	46bd      	mov	sp, r7
    3d10:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d14:	4770      	bx	lr
    3d16:	bf00      	nop

00003d18 <s_3>:
void s_3(struct eventData * pxDataArray) 
{
    3d18:	b480      	push	{r7}
    3d1a:	b083      	sub	sp, #12
    3d1c:	af00      	add	r7, sp, #0
    3d1e:	6078      	str	r0, [r7, #4]
}
    3d20:	370c      	adds	r7, #12
    3d22:	46bd      	mov	sp, r7
    3d24:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d28:	4770      	bx	lr
    3d2a:	bf00      	nop

00003d2c <s_4>:

/*task1*/
void s_4(struct eventData * pxDataArray) 
{
    3d2c:	b480      	push	{r7}
    3d2e:	b083      	sub	sp, #12
    3d30:	af00      	add	r7, sp, #0
    3d32:	6078      	str	r0, [r7, #4]
}
    3d34:	370c      	adds	r7, #12
    3d36:	46bd      	mov	sp, r7
    3d38:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d3c:	4770      	bx	lr
    3d3e:	bf00      	nop

00003d40 <s_5>:
void s_5(struct eventData * pxDataArray) 
{
    3d40:	b580      	push	{r7, lr}
    3d42:	b082      	sub	sp, #8
    3d44:	af00      	add	r7, sp, #0
    3d46:	6078      	str	r0, [r7, #4]
    to_autopilot_from_last_radio(); // main.c
    3d48:	f012 fd68 	bl	1681c <to_autopilot_from_last_radio>
}
    3d4c:	3708      	adds	r7, #8
    3d4e:	46bd      	mov	sp, r7
    3d50:	bd80      	pop	{r7, pc}
    3d52:	bf00      	nop

00003d54 <s_6>:
void s_6(struct eventData * pxDataArray) 
{
    3d54:	b580      	push	{r7, lr}
    3d56:	b082      	sub	sp, #8
    3d58:	af00      	add	r7, sp, #0
    3d5a:	6078      	str	r0, [r7, #4]
    spi_reset(); // spi_fbw.h
    3d5c:	f012 fc9c 	bl	16698 <spi_reset>
}
    3d60:	3708      	adds	r7, #8
    3d62:	46bd      	mov	sp, r7
    3d64:	bd80      	pop	{r7, pc}
    3d66:	bf00      	nop

00003d68 <s_7>:
void s_7(struct eventData * pxDataArray) 
{
    3d68:	b480      	push	{r7}
    3d6a:	b083      	sub	sp, #12
    3d6c:	af00      	add	r7, sp, #0
    3d6e:	6078      	str	r0, [r7, #4]
}
    3d70:	370c      	adds	r7, #12
    3d72:	46bd      	mov	sp, r7
    3d74:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d78:	4770      	bx	lr
    3d7a:	bf00      	nop

00003d7c <s_8>:

/*task 2*/ 
void s_8(struct eventData * pxDataArray) 
{
    3d7c:	b480      	push	{r7}
    3d7e:	b083      	sub	sp, #12
    3d80:	af00      	add	r7, sp, #0
    3d82:	6078      	str	r0, [r7, #4]
}
    3d84:	370c      	adds	r7, #12
    3d86:	46bd      	mov	sp, r7
    3d88:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d8c:	4770      	bx	lr
    3d8e:	bf00      	nop

00003d90 <s_9>:
void s_9(struct eventData * pxDataArray) 
{
    3d90:	b580      	push	{r7, lr}
    3d92:	b082      	sub	sp, #8
    3d94:	af00      	add	r7, sp, #0
    3d96:	6078      	str	r0, [r7, #4]
    check_mega128_values_task(); // main.c
    3d98:	f012 fee4 	bl	16b64 <check_mega128_values_task>
}
    3d9c:	3708      	adds	r7, #8
    3d9e:	46bd      	mov	sp, r7
    3da0:	bd80      	pop	{r7, pc}
    3da2:	bf00      	nop

00003da4 <s_10>:
void s_10(struct eventData * pxDataArray) 
{
    3da4:	b480      	push	{r7}
    3da6:	b083      	sub	sp, #12
    3da8:	af00      	add	r7, sp, #0
    3daa:	6078      	str	r0, [r7, #4]
}
    3dac:	370c      	adds	r7, #12
    3dae:	46bd      	mov	sp, r7
    3db0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3db4:	4770      	bx	lr
    3db6:	bf00      	nop

00003db8 <s_11>:

/*task 3, servant 8, 9*/ 
void s_11(struct eventData * pxDataArray) 
{
    3db8:	b480      	push	{r7}
    3dba:	b083      	sub	sp, #12
    3dbc:	af00      	add	r7, sp, #0
    3dbe:	6078      	str	r0, [r7, #4]
}
    3dc0:	370c      	adds	r7, #12
    3dc2:	46bd      	mov	sp, r7
    3dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dc8:	4770      	bx	lr
    3dca:	bf00      	nop

00003dcc <s_12>:
void s_12(struct eventData * pxDataArray) 
{
    3dcc:	b580      	push	{r7, lr}
    3dce:	b082      	sub	sp, #8
    3dd0:	af00      	add	r7, sp, #0
    3dd2:	6078      	str	r0, [r7, #4]
    servo_transmit(); //servo.h
    3dd4:	f012 ffba 	bl	16d4c <servo_transmit>
}
    3dd8:	3708      	adds	r7, #8
    3dda:	46bd      	mov	sp, r7
    3ddc:	bd80      	pop	{r7, pc}
    3dde:	bf00      	nop

00003de0 <s_13>:
void s_13(struct eventData * pxDataArray) 
{
    3de0:	b480      	push	{r7}
    3de2:	b083      	sub	sp, #12
    3de4:	af00      	add	r7, sp, #0
    3de6:	6078      	str	r0, [r7, #4]
}
    3de8:	370c      	adds	r7, #12
    3dea:	46bd      	mov	sp, r7
    3dec:	f85d 7b04 	ldr.w	r7, [sp], #4
    3df0:	4770      	bx	lr
    3df2:	bf00      	nop

00003df4 <s_14>:

/*task 4, servant 10, 11*/
void s_14(struct eventData * pxDataArray) 
{
    3df4:	b480      	push	{r7}
    3df6:	b083      	sub	sp, #12
    3df8:	af00      	add	r7, sp, #0
    3dfa:	6078      	str	r0, [r7, #4]
}
    3dfc:	370c      	adds	r7, #12
    3dfe:	46bd      	mov	sp, r7
    3e00:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e04:	4770      	bx	lr
    3e06:	bf00      	nop

00003e08 <s_15>:
void s_15(struct eventData * pxDataArray) 
{
    3e08:	b580      	push	{r7, lr}
    3e0a:	b082      	sub	sp, #8
    3e0c:	af00      	add	r7, sp, #0
    3e0e:	6078      	str	r0, [r7, #4]
    check_failsafe_task(); // main.c
    3e10:	f012 fe82 	bl	16b18 <check_failsafe_task>
}
    3e14:	3708      	adds	r7, #8
    3e16:	46bd      	mov	sp, r7
    3e18:	bd80      	pop	{r7, pc}
    3e1a:	bf00      	nop

00003e1c <s_16>:
void s_16(struct eventData * pxDataArray) 
{
    3e1c:	b480      	push	{r7}
    3e1e:	b083      	sub	sp, #12
    3e20:	af00      	add	r7, sp, #0
    3e22:	6078      	str	r0, [r7, #4]
}
    3e24:	370c      	adds	r7, #12
    3e26:	46bd      	mov	sp, r7
    3e28:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e2c:	4770      	bx	lr
    3e2e:	bf00      	nop

00003e30 <s_17>:

/*task 5, servant 12, 13, 14*/
void s_17(struct eventData * pxDataArray) 
{
    3e30:	b480      	push	{r7}
    3e32:	b083      	sub	sp, #12
    3e34:	af00      	add	r7, sp, #0
    3e36:	6078      	str	r0, [r7, #4]
}
    3e38:	370c      	adds	r7, #12
    3e3a:	46bd      	mov	sp, r7
    3e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e40:	4770      	bx	lr
    3e42:	bf00      	nop

00003e44 <s_18>:
void s_18(struct eventData * pxDataArray) 
{
    3e44:	b580      	push	{r7, lr}
    3e46:	b082      	sub	sp, #8
    3e48:	af00      	add	r7, sp, #0
    3e4a:	6078      	str	r0, [r7, #4]
     //inflight_calib(pdTRUE); // inflight_calib.h
     //inflight_calib(pdTRUE); // main_auto.c , we transfer this function into main.c because of bugs if not 
     radio_control_task();
    3e4c:	f009 f8b6 	bl	cfbc <radio_control_task>
}
    3e50:	3708      	adds	r7, #8
    3e52:	46bd      	mov	sp, r7
    3e54:	bd80      	pop	{r7, pc}
    3e56:	bf00      	nop

00003e58 <s_19>:
void s_19(struct eventData * pxDataArray) 
{
    3e58:	b580      	push	{r7, lr}
    3e5a:	b082      	sub	sp, #8
    3e5c:	af00      	add	r7, sp, #0
    3e5e:	6078      	str	r0, [r7, #4]
    ir_gain_calib(); //infrared.h
    3e60:	f00d ff66 	bl	11d30 <ir_gain_calib>
}
    3e64:	3708      	adds	r7, #8
    3e66:	46bd      	mov	sp, r7
    3e68:	bd80      	pop	{r7, pc}
    3e6a:	bf00      	nop

00003e6c <s_20>:
void s_20(struct eventData * pxDataArray) 
{
    3e6c:	b480      	push	{r7}
    3e6e:	b083      	sub	sp, #12
    3e70:	af00      	add	r7, sp, #0
    3e72:	6078      	str	r0, [r7, #4]
}
    3e74:	370c      	adds	r7, #12
    3e76:	46bd      	mov	sp, r7
    3e78:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e7c:	4770      	bx	lr
    3e7e:	bf00      	nop

00003e80 <s_21>:

/*task 6, servant 15,16,17,18*/ 
void s_21(struct eventData * pxDataArray) 
{
    3e80:	b480      	push	{r7}
    3e82:	b083      	sub	sp, #12
    3e84:	af00      	add	r7, sp, #0
    3e86:	6078      	str	r0, [r7, #4]
}
    3e88:	370c      	adds	r7, #12
    3e8a:	46bd      	mov	sp, r7
    3e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e90:	4770      	bx	lr
    3e92:	bf00      	nop

00003e94 <s_22>:
void s_22(struct eventData * pxDataArray) 
{
    3e94:	b580      	push	{r7, lr}
    3e96:	b082      	sub	sp, #8
    3e98:	af00      	add	r7, sp, #0
    3e9a:	6078      	str	r0, [r7, #4]
    ir_update(); // infrared.h
    3e9c:	f00d ff0a 	bl	11cb4 <ir_update>
}
    3ea0:	3708      	adds	r7, #8
    3ea2:	46bd      	mov	sp, r7
    3ea4:	bd80      	pop	{r7, pc}
    3ea6:	bf00      	nop

00003ea8 <s_23>:
void s_23(struct eventData * pxDataArray) 
{
    3ea8:	b580      	push	{r7, lr}
    3eaa:	b082      	sub	sp, #8
    3eac:	af00      	add	r7, sp, #0
    3eae:	6078      	str	r0, [r7, #4]
    //servo_transmit();  // servo.h
    estimator_update_state_infrared(); //estimator.h
    3eb0:	f011 f988 	bl	151c4 <estimator_update_state_infrared>
}
    3eb4:	3708      	adds	r7, #8
    3eb6:	46bd      	mov	sp, r7
    3eb8:	bd80      	pop	{r7, pc}
    3eba:	bf00      	nop

00003ebc <s_24>:
void s_24(struct eventData * pxDataArray) 
{
    3ebc:	b580      	push	{r7, lr}
    3ebe:	b082      	sub	sp, #8
    3ec0:	af00      	add	r7, sp, #0
    3ec2:	6078      	str	r0, [r7, #4]
    roll_pitch_pid_run(); // pid.h
    3ec4:	f00d ff64 	bl	11d90 <roll_pitch_pid_run>
}
    3ec8:	3708      	adds	r7, #8
    3eca:	46bd      	mov	sp, r7
    3ecc:	bd80      	pop	{r7, pc}
    3ece:	bf00      	nop

00003ed0 <s_25>:
void s_25(struct eventData * pxDataArray) 
{
    3ed0:	b480      	push	{r7}
    3ed2:	b083      	sub	sp, #12
    3ed4:	af00      	add	r7, sp, #0
    3ed6:	6078      	str	r0, [r7, #4]
}
    3ed8:	370c      	adds	r7, #12
    3eda:	46bd      	mov	sp, r7
    3edc:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ee0:	4770      	bx	lr
    3ee2:	bf00      	nop

00003ee4 <s_26>:

/*task 7, servant 19, 20*/
void s_26(struct eventData * pxDataArray) 
{
    3ee4:	b480      	push	{r7}
    3ee6:	b083      	sub	sp, #12
    3ee8:	af00      	add	r7, sp, #0
    3eea:	6078      	str	r0, [r7, #4]
}
    3eec:	370c      	adds	r7, #12
    3eee:	46bd      	mov	sp, r7
    3ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ef4:	4770      	bx	lr
    3ef6:	bf00      	nop

00003ef8 <s_27>:
void s_27(struct eventData * pxDataArray) 
{
    3ef8:	b580      	push	{r7, lr}
    3efa:	b082      	sub	sp, #8
    3efc:	af00      	add	r7, sp, #0
    3efe:	6078      	str	r0, [r7, #4]
    link_fbw_send(); //link_fbw.h
    3f00:	f00d f94a 	bl	11198 <link_fbw_send>
}
    3f04:	3708      	adds	r7, #8
    3f06:	46bd      	mov	sp, r7
    3f08:	bd80      	pop	{r7, pc}
    3f0a:	bf00      	nop

00003f0c <s_28>:
void s_28(struct eventData * pxDataArray) 
{}
    3f0c:	b480      	push	{r7}
    3f0e:	b083      	sub	sp, #12
    3f10:	af00      	add	r7, sp, #0
    3f12:	6078      	str	r0, [r7, #4]
    3f14:	370c      	adds	r7, #12
    3f16:	46bd      	mov	sp, r7
    3f18:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f1c:	4770      	bx	lr
    3f1e:	bf00      	nop

00003f20 <s_29>:

/*task 8, sevrvant 21,22,23*/
void s_29(struct eventData * pxDataArray) 
{
    3f20:	b480      	push	{r7}
    3f22:	b083      	sub	sp, #12
    3f24:	af00      	add	r7, sp, #0
    3f26:	6078      	str	r0, [r7, #4]
}
    3f28:	370c      	adds	r7, #12
    3f2a:	46bd      	mov	sp, r7
    3f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f30:	4770      	bx	lr
    3f32:	bf00      	nop

00003f34 <s_30>:
void s_30(struct eventData * pxDataArray) 
{
    3f34:	b580      	push	{r7, lr}
    3f36:	b082      	sub	sp, #8
    3f38:	af00      	add	r7, sp, #0
    3f3a:	6078      	str	r0, [r7, #4]
    parse_gps_msg(); //gps.h
    3f3c:	f00d fc04 	bl	11748 <parse_gps_msg>
}
    3f40:	3708      	adds	r7, #8
    3f42:	46bd      	mov	sp, r7
    3f44:	bd80      	pop	{r7, pc}
    3f46:	bf00      	nop

00003f48 <s_31>:
void s_31(struct eventData * pxDataArray) 
{
    3f48:	b580      	push	{r7, lr}
    3f4a:	b082      	sub	sp, #8
    3f4c:	af00      	add	r7, sp, #0
    3f4e:	6078      	str	r0, [r7, #4]
    //use_gps_pos(); // autopilot.h  is not implemeted.
    send_gps_pos();
    3f50:	f00a fe22 	bl	eb98 <send_gps_pos>
    send_radIR();
    3f54:	f00b ffe6 	bl	ff24 <send_radIR>
    send_takeOff();
    3f58:	f00c fdde 	bl	10b18 <send_takeOff>
}
    3f5c:	3708      	adds	r7, #8
    3f5e:	46bd      	mov	sp, r7
    3f60:	bd80      	pop	{r7, pc}
    3f62:	bf00      	nop

00003f64 <s_32>:
void s_32(struct eventData * pxDataArray) 
{}
    3f64:	b480      	push	{r7}
    3f66:	b083      	sub	sp, #12
    3f68:	af00      	add	r7, sp, #0
    3f6a:	6078      	str	r0, [r7, #4]
    3f6c:	370c      	adds	r7, #12
    3f6e:	46bd      	mov	sp, r7
    3f70:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f74:	4770      	bx	lr
    3f76:	bf00      	nop

00003f78 <s_33>:

/*task 9, servant 24, 25, 26, 27*/
void s_33(struct eventData * pxDataArray) 
{
    3f78:	b480      	push	{r7}
    3f7a:	b083      	sub	sp, #12
    3f7c:	af00      	add	r7, sp, #0
    3f7e:	6078      	str	r0, [r7, #4]
}
    3f80:	370c      	adds	r7, #12
    3f82:	46bd      	mov	sp, r7
    3f84:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f88:	4770      	bx	lr
    3f8a:	bf00      	nop

00003f8c <s_34>:
void s_34(struct eventData * pxDataArray) 
{
    3f8c:	b580      	push	{r7, lr}
    3f8e:	b082      	sub	sp, #8
    3f90:	af00      	add	r7, sp, #0
    3f92:	6078      	str	r0, [r7, #4]
    nav_home(); // nav.h
    3f94:	f010 fe98 	bl	14cc8 <nav_home>
}
    3f98:	3708      	adds	r7, #8
    3f9a:	46bd      	mov	sp, r7
    3f9c:	bd80      	pop	{r7, pc}
    3f9e:	bf00      	nop

00003fa0 <s_35>:
void s_35(struct eventData * pxDataArray) 
{
    3fa0:	b580      	push	{r7, lr}
    3fa2:	b082      	sub	sp, #8
    3fa4:	af00      	add	r7, sp, #0
    3fa6:	6078      	str	r0, [r7, #4]
    nav_update(); // nav.h
    3fa8:	f010 feb4 	bl	14d14 <nav_update>
}
    3fac:	3708      	adds	r7, #8
    3fae:	46bd      	mov	sp, r7
    3fb0:	bd80      	pop	{r7, pc}
    3fb2:	bf00      	nop

00003fb4 <s_36>:
void s_36(struct eventData * pxDataArray) 
{
    3fb4:	b580      	push	{r7, lr}
    3fb6:	b082      	sub	sp, #8
    3fb8:	af00      	add	r7, sp, #0
    3fba:	6078      	str	r0, [r7, #4]
    course_pid_run(); // pid.h
    3fbc:	f00d ffd4 	bl	11f68 <course_pid_run>
}
    3fc0:	3708      	adds	r7, #8
    3fc2:	46bd      	mov	sp, r7
    3fc4:	bd80      	pop	{r7, pc}
    3fc6:	bf00      	nop

00003fc8 <s_37>:
void s_37(struct eventData * pxDataArray) 
{}
    3fc8:	b480      	push	{r7}
    3fca:	b083      	sub	sp, #12
    3fcc:	af00      	add	r7, sp, #0
    3fce:	6078      	str	r0, [r7, #4]
    3fd0:	370c      	adds	r7, #12
    3fd2:	46bd      	mov	sp, r7
    3fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fd8:	4770      	bx	lr
    3fda:	bf00      	nop

00003fdc <s_38>:

/*task 10, servant 28, 29*/
void s_38(struct eventData * pxDataArray) 
{
    3fdc:	b480      	push	{r7}
    3fde:	b083      	sub	sp, #12
    3fe0:	af00      	add	r7, sp, #0
    3fe2:	6078      	str	r0, [r7, #4]
}
    3fe4:	370c      	adds	r7, #12
    3fe6:	46bd      	mov	sp, r7
    3fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fec:	4770      	bx	lr
    3fee:	bf00      	nop

00003ff0 <s_39>:
void s_39(struct eventData * pxDataArray) 
{
    3ff0:	b580      	push	{r7, lr}
    3ff2:	b082      	sub	sp, #8
    3ff4:	af00      	add	r7, sp, #0
    3ff6:	6078      	str	r0, [r7, #4]
    altitude_pid_run(); // pid.h
    3ff8:	f00e fa3e 	bl	12478 <altitude_pid_run>
}
    3ffc:	3708      	adds	r7, #8
    3ffe:	46bd      	mov	sp, r7
    4000:	bd80      	pop	{r7, pc}
    4002:	bf00      	nop

00004004 <s_40>:
void s_40(struct eventData * pxDataArray) 
{}
    4004:	b480      	push	{r7}
    4006:	b083      	sub	sp, #12
    4008:	af00      	add	r7, sp, #0
    400a:	6078      	str	r0, [r7, #4]
    400c:	370c      	adds	r7, #12
    400e:	46bd      	mov	sp, r7
    4010:	f85d 7b04 	ldr.w	r7, [sp], #4
    4014:	4770      	bx	lr
    4016:	bf00      	nop

00004018 <s_41>:

/*task 11, servant 30, 31*/
void s_41(struct eventData * pxDataArray) 
{
    4018:	b480      	push	{r7}
    401a:	b083      	sub	sp, #12
    401c:	af00      	add	r7, sp, #0
    401e:	6078      	str	r0, [r7, #4]
}
    4020:	370c      	adds	r7, #12
    4022:	46bd      	mov	sp, r7
    4024:	f85d 7b04 	ldr.w	r7, [sp], #4
    4028:	4770      	bx	lr
    402a:	bf00      	nop

0000402c <s_42>:
void s_42(struct eventData * pxDataArray) 
{
    402c:	b580      	push	{r7, lr}
    402e:	b082      	sub	sp, #8
    4030:	af00      	add	r7, sp, #0
    4032:	6078      	str	r0, [r7, #4]
    climb_pid_run(); // pid.h
    4034:	f00e f850 	bl	120d8 <climb_pid_run>
}
    4038:	3708      	adds	r7, #8
    403a:	46bd      	mov	sp, r7
    403c:	bd80      	pop	{r7, pc}
    403e:	bf00      	nop

00004040 <s_43>:
void s_43(struct eventData * pxDataArray) 
{}
    4040:	b480      	push	{r7}
    4042:	b083      	sub	sp, #12
    4044:	af00      	add	r7, sp, #0
    4046:	6078      	str	r0, [r7, #4]
    4048:	370c      	adds	r7, #12
    404a:	46bd      	mov	sp, r7
    404c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4050:	4770      	bx	lr
    4052:	bf00      	nop

00004054 <s_44>:

/*task 12, servant 32, 33*/
void s_44(struct eventData * pxDataArray) 
{
    4054:	b480      	push	{r7}
    4056:	b083      	sub	sp, #12
    4058:	af00      	add	r7, sp, #0
    405a:	6078      	str	r0, [r7, #4]
}
    405c:	370c      	adds	r7, #12
    405e:	46bd      	mov	sp, r7
    4060:	f85d 7b04 	ldr.w	r7, [sp], #4
    4064:	4770      	bx	lr
    4066:	bf00      	nop

00004068 <s_45>:
void s_45(struct eventData * pxDataArray) 
{
    4068:	b580      	push	{r7, lr}
    406a:	b082      	sub	sp, #8
    406c:	af00      	add	r7, sp, #0
    406e:	6078      	str	r0, [r7, #4]
    // main.c
    send_boot();
    4070:	f003 fa1c 	bl	74ac <send_boot>
    send_attitude();
    4074:	f004 f9f2 	bl	845c <send_attitude>
    send_adc();
    4078:	f004 feec 	bl	8e54 <send_adc>
    send_settings();
    407c:	f005 f97a 	bl	9374 <send_settings>
    send_desired();
    4080:	f005 fd84 	bl	9b8c <send_desired>
    send_bat();
    4084:	f006 fcba 	bl	a9fc <send_bat>
    send_climb();
    4088:	f007 f876 	bl	b178 <send_climb>
    send_mode();
    408c:	f007 fdee 	bl	bc6c <send_mode>
    send_debug();
    4090:	f008 f8c8 	bl	c224 <send_debug>
    send_nav_ref();
    4094:	f008 fba4 	bl	c7e0 <send_nav_ref>
}
    4098:	3708      	adds	r7, #8
    409a:	46bd      	mov	sp, r7
    409c:	bd80      	pop	{r7, pc}
    409e:	bf00      	nop

000040a0 <s_46>:
void s_46(struct eventData * pxDataArray) 
{}
    40a0:	b480      	push	{r7}
    40a2:	b083      	sub	sp, #12
    40a4:	af00      	add	r7, sp, #0
    40a6:	6078      	str	r0, [r7, #4]
    40a8:	370c      	adds	r7, #12
    40aa:	46bd      	mov	sp, r7
    40ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    40b0:	4770      	bx	lr
    40b2:	bf00      	nop

000040b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    40b4:	b480      	push	{r7}
    40b6:	b083      	sub	sp, #12
    40b8:	af00      	add	r7, sp, #0
    40ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    40bc:	687b      	ldr	r3, [r7, #4]
    40be:	f103 0208 	add.w	r2, r3, #8
    40c2:	687b      	ldr	r3, [r7, #4]
    40c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    40c6:	687b      	ldr	r3, [r7, #4]
    40c8:	f04f 32ff 	mov.w	r2, #4294967295
    40cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    40ce:	687b      	ldr	r3, [r7, #4]
    40d0:	f103 0208 	add.w	r2, r3, #8
    40d4:	687b      	ldr	r3, [r7, #4]
    40d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    40d8:	687b      	ldr	r3, [r7, #4]
    40da:	f103 0208 	add.w	r2, r3, #8
    40de:	687b      	ldr	r3, [r7, #4]
    40e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    40e2:	687b      	ldr	r3, [r7, #4]
    40e4:	2200      	movs	r2, #0
    40e6:	601a      	str	r2, [r3, #0]
}
    40e8:	370c      	adds	r7, #12
    40ea:	46bd      	mov	sp, r7
    40ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    40f0:	4770      	bx	lr
    40f2:	bf00      	nop

000040f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    40f4:	b480      	push	{r7}
    40f6:	b083      	sub	sp, #12
    40f8:	af00      	add	r7, sp, #0
    40fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    40fc:	687b      	ldr	r3, [r7, #4]
    40fe:	2200      	movs	r2, #0
    4100:	611a      	str	r2, [r3, #16]
}
    4102:	370c      	adds	r7, #12
    4104:	46bd      	mov	sp, r7
    4106:	f85d 7b04 	ldr.w	r7, [sp], #4
    410a:	4770      	bx	lr

0000410c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    410c:	b480      	push	{r7}
    410e:	b085      	sub	sp, #20
    4110:	af00      	add	r7, sp, #0
    4112:	6078      	str	r0, [r7, #4]
    4114:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    4116:	687b      	ldr	r3, [r7, #4]
    4118:	685b      	ldr	r3, [r3, #4]
    411a:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    411c:	68fb      	ldr	r3, [r7, #12]
    411e:	685a      	ldr	r2, [r3, #4]
    4120:	683b      	ldr	r3, [r7, #0]
    4122:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    4124:	687b      	ldr	r3, [r7, #4]
    4126:	685a      	ldr	r2, [r3, #4]
    4128:	683b      	ldr	r3, [r7, #0]
    412a:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    412c:	68fb      	ldr	r3, [r7, #12]
    412e:	685b      	ldr	r3, [r3, #4]
    4130:	683a      	ldr	r2, [r7, #0]
    4132:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    4134:	68fb      	ldr	r3, [r7, #12]
    4136:	683a      	ldr	r2, [r7, #0]
    4138:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    413a:	687b      	ldr	r3, [r7, #4]
    413c:	683a      	ldr	r2, [r7, #0]
    413e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    4140:	683b      	ldr	r3, [r7, #0]
    4142:	687a      	ldr	r2, [r7, #4]
    4144:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    4146:	687b      	ldr	r3, [r7, #4]
    4148:	681b      	ldr	r3, [r3, #0]
    414a:	1c5a      	adds	r2, r3, #1
    414c:	687b      	ldr	r3, [r7, #4]
    414e:	601a      	str	r2, [r3, #0]
}
    4150:	3714      	adds	r7, #20
    4152:	46bd      	mov	sp, r7
    4154:	f85d 7b04 	ldr.w	r7, [sp], #4
    4158:	4770      	bx	lr
    415a:	bf00      	nop

0000415c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    415c:	b480      	push	{r7}
    415e:	b085      	sub	sp, #20
    4160:	af00      	add	r7, sp, #0
    4162:	6078      	str	r0, [r7, #4]
    4164:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    4166:	683b      	ldr	r3, [r7, #0]
    4168:	681b      	ldr	r3, [r3, #0]
    416a:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    416c:	68bb      	ldr	r3, [r7, #8]
    416e:	f1b3 3fff 	cmp.w	r3, #4294967295
    4172:	d103      	bne.n	417c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    4174:	687b      	ldr	r3, [r7, #4]
    4176:	691b      	ldr	r3, [r3, #16]
    4178:	60fb      	str	r3, [r7, #12]
    417a:	e00c      	b.n	4196 <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    417c:	687b      	ldr	r3, [r7, #4]
    417e:	3308      	adds	r3, #8
    4180:	60fb      	str	r3, [r7, #12]
    4182:	e002      	b.n	418a <vListInsert+0x2e>
    4184:	68fb      	ldr	r3, [r7, #12]
    4186:	685b      	ldr	r3, [r3, #4]
    4188:	60fb      	str	r3, [r7, #12]
    418a:	68fb      	ldr	r3, [r7, #12]
    418c:	685b      	ldr	r3, [r3, #4]
    418e:	681a      	ldr	r2, [r3, #0]
    4190:	68bb      	ldr	r3, [r7, #8]
    4192:	429a      	cmp	r2, r3
    4194:	d9f6      	bls.n	4184 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    4196:	68fb      	ldr	r3, [r7, #12]
    4198:	685a      	ldr	r2, [r3, #4]
    419a:	683b      	ldr	r3, [r7, #0]
    419c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    419e:	683b      	ldr	r3, [r7, #0]
    41a0:	685b      	ldr	r3, [r3, #4]
    41a2:	683a      	ldr	r2, [r7, #0]
    41a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    41a6:	683b      	ldr	r3, [r7, #0]
    41a8:	68fa      	ldr	r2, [r7, #12]
    41aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    41ac:	68fb      	ldr	r3, [r7, #12]
    41ae:	683a      	ldr	r2, [r7, #0]
    41b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    41b2:	683b      	ldr	r3, [r7, #0]
    41b4:	687a      	ldr	r2, [r7, #4]
    41b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    41b8:	687b      	ldr	r3, [r7, #4]
    41ba:	681b      	ldr	r3, [r3, #0]
    41bc:	1c5a      	adds	r2, r3, #1
    41be:	687b      	ldr	r3, [r7, #4]
    41c0:	601a      	str	r2, [r3, #0]
}
    41c2:	3714      	adds	r7, #20
    41c4:	46bd      	mov	sp, r7
    41c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    41ca:	4770      	bx	lr

000041cc <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    41cc:	b480      	push	{r7}
    41ce:	b085      	sub	sp, #20
    41d0:	af00      	add	r7, sp, #0
    41d2:	6078      	str	r0, [r7, #4]
    xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    41d4:	687b      	ldr	r3, [r7, #4]
    41d6:	685b      	ldr	r3, [r3, #4]
    41d8:	687a      	ldr	r2, [r7, #4]
    41da:	6892      	ldr	r2, [r2, #8]
    41dc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    41de:	687b      	ldr	r3, [r7, #4]
    41e0:	689b      	ldr	r3, [r3, #8]
    41e2:	687a      	ldr	r2, [r7, #4]
    41e4:	6852      	ldr	r2, [r2, #4]
    41e6:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    41e8:	687b      	ldr	r3, [r7, #4]
    41ea:	691b      	ldr	r3, [r3, #16]
    41ec:	60fb      	str	r3, [r7, #12]
	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    41ee:	68fb      	ldr	r3, [r7, #12]
    41f0:	685a      	ldr	r2, [r3, #4]
    41f2:	687b      	ldr	r3, [r7, #4]
    41f4:	429a      	cmp	r2, r3
    41f6:	d103      	bne.n	4200 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    41f8:	687b      	ldr	r3, [r7, #4]
    41fa:	689a      	ldr	r2, [r3, #8]
    41fc:	68fb      	ldr	r3, [r7, #12]
    41fe:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    4200:	687b      	ldr	r3, [r7, #4]
    4202:	2200      	movs	r2, #0
    4204:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
    4206:	68fb      	ldr	r3, [r7, #12]
    4208:	681b      	ldr	r3, [r3, #0]
    420a:	1e5a      	subs	r2, r3, #1
    420c:	68fb      	ldr	r3, [r7, #12]
    420e:	601a      	str	r2, [r3, #0]
}
    4210:	3714      	adds	r7, #20
    4212:	46bd      	mov	sp, r7
    4214:	f85d 7b04 	ldr.w	r7, [sp], #4
    4218:	4770      	bx	lr
    421a:	bf00      	nop

0000421c <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    421c:	b580      	push	{r7, lr}
    421e:	b084      	sub	sp, #16
    4220:	af00      	add	r7, sp, #0
    4222:	6078      	str	r0, [r7, #4]
    4224:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    4226:	2301      	movs	r3, #1
    4228:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    422a:	683b      	ldr	r3, [r7, #0]
    422c:	2b01      	cmp	r3, #1
    422e:	d00b      	beq.n	4248 <xQueueGenericReset+0x2c>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4230:	687b      	ldr	r3, [r7, #4]
    4232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4234:	2b00      	cmp	r3, #0
    4236:	d001      	beq.n	423c <xQueueGenericReset+0x20>
		{
			xReturn = pdFAIL;
    4238:	2300      	movs	r3, #0
    423a:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    423c:	687b      	ldr	r3, [r7, #4]
    423e:	691b      	ldr	r3, [r3, #16]
    4240:	2b00      	cmp	r3, #0
    4242:	d001      	beq.n	4248 <xQueueGenericReset+0x2c>
		{
			xReturn = pdFAIL;
    4244:	2300      	movs	r3, #0
    4246:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    4248:	68fb      	ldr	r3, [r7, #12]
    424a:	2b01      	cmp	r3, #1
    424c:	d12f      	bne.n	42ae <xQueueGenericReset+0x92>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    424e:	687b      	ldr	r3, [r7, #4]
    4250:	681a      	ldr	r2, [r3, #0]
    4252:	687b      	ldr	r3, [r7, #4]
    4254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4256:	6879      	ldr	r1, [r7, #4]
    4258:	6c09      	ldr	r1, [r1, #64]	; 0x40
    425a:	fb01 f303 	mul.w	r3, r1, r3
    425e:	441a      	add	r2, r3
    4260:	687b      	ldr	r3, [r7, #4]
    4262:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    4264:	687b      	ldr	r3, [r7, #4]
    4266:	2200      	movs	r2, #0
    4268:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    426a:	687b      	ldr	r3, [r7, #4]
    426c:	681a      	ldr	r2, [r3, #0]
    426e:	687b      	ldr	r3, [r7, #4]
    4270:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    4272:	687b      	ldr	r3, [r7, #4]
    4274:	681a      	ldr	r2, [r3, #0]
    4276:	687b      	ldr	r3, [r7, #4]
    4278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    427a:	3b01      	subs	r3, #1
    427c:	6879      	ldr	r1, [r7, #4]
    427e:	6c09      	ldr	r1, [r1, #64]	; 0x40
    4280:	fb01 f303 	mul.w	r3, r1, r3
    4284:	441a      	add	r2, r3
    4286:	687b      	ldr	r3, [r7, #4]
    4288:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    428a:	687b      	ldr	r3, [r7, #4]
    428c:	f04f 32ff 	mov.w	r2, #4294967295
    4290:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    4292:	687b      	ldr	r3, [r7, #4]
    4294:	f04f 32ff 	mov.w	r2, #4294967295
    4298:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    429a:	687b      	ldr	r3, [r7, #4]
    429c:	3310      	adds	r3, #16
    429e:	4618      	mov	r0, r3
    42a0:	f7ff ff08 	bl	40b4 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    42a4:	687b      	ldr	r3, [r7, #4]
    42a6:	3324      	adds	r3, #36	; 0x24
    42a8:	4618      	mov	r0, r3
    42aa:	f7ff ff03 	bl	40b4 <vListInitialise>
	}

	return xReturn;
    42ae:	68fb      	ldr	r3, [r7, #12]
}
    42b0:	4618      	mov	r0, r3
    42b2:	3710      	adds	r7, #16
    42b4:	46bd      	mov	sp, r7
    42b6:	bd80      	pop	{r7, pc}

000042b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    42b8:	b580      	push	{r7, lr}
    42ba:	b088      	sub	sp, #32
    42bc:	af00      	add	r7, sp, #0
    42be:	60f8      	str	r0, [r7, #12]
    42c0:	60b9      	str	r1, [r7, #8]
    42c2:	4613      	mov	r3, r2
    42c4:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    42c6:	2300      	movs	r3, #0
    42c8:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    42ca:	68fb      	ldr	r3, [r7, #12]
    42cc:	2b00      	cmp	r3, #0
    42ce:	d026      	beq.n	431e <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    42d0:	204c      	movs	r0, #76	; 0x4c
    42d2:	f001 fd41 	bl	5d58 <pvPortMalloc>
    42d6:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    42d8:	69bb      	ldr	r3, [r7, #24]
    42da:	2b00      	cmp	r3, #0
    42dc:	d01f      	beq.n	431e <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    42de:	68fb      	ldr	r3, [r7, #12]
    42e0:	68ba      	ldr	r2, [r7, #8]
    42e2:	fb02 f303 	mul.w	r3, r2, r3
    42e6:	3301      	adds	r3, #1
    42e8:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    42ea:	6978      	ldr	r0, [r7, #20]
    42ec:	f001 fd34 	bl	5d58 <pvPortMalloc>
    42f0:	4602      	mov	r2, r0
    42f2:	69bb      	ldr	r3, [r7, #24]
    42f4:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    42f6:	69bb      	ldr	r3, [r7, #24]
    42f8:	681b      	ldr	r3, [r3, #0]
    42fa:	2b00      	cmp	r3, #0
    42fc:	d00c      	beq.n	4318 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    42fe:	69bb      	ldr	r3, [r7, #24]
    4300:	68fa      	ldr	r2, [r7, #12]
    4302:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    4304:	69bb      	ldr	r3, [r7, #24]
    4306:	68ba      	ldr	r2, [r7, #8]
    4308:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    430a:	69b8      	ldr	r0, [r7, #24]
    430c:	2101      	movs	r1, #1
    430e:	f7ff ff85 	bl	421c <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    4312:	69bb      	ldr	r3, [r7, #24]
    4314:	61fb      	str	r3, [r7, #28]
    4316:	e002      	b.n	431e <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    4318:	69b8      	ldr	r0, [r7, #24]
    431a:	f001 fde1 	bl	5ee0 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    431e:	69fb      	ldr	r3, [r7, #28]
}
    4320:	4618      	mov	r0, r3
    4322:	3720      	adds	r7, #32
    4324:	46bd      	mov	sp, r7
    4326:	bd80      	pop	{r7, pc}

00004328 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    4328:	b580      	push	{r7, lr}
    432a:	b084      	sub	sp, #16
    432c:	af00      	add	r7, sp, #0
    432e:	4603      	mov	r3, r0
    4330:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    4332:	204c      	movs	r0, #76	; 0x4c
    4334:	f001 fd10 	bl	5d58 <pvPortMalloc>
    4338:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    433a:	68fb      	ldr	r3, [r7, #12]
    433c:	2b00      	cmp	r3, #0
    433e:	d02c      	beq.n	439a <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    4340:	68fb      	ldr	r3, [r7, #12]
    4342:	2200      	movs	r2, #0
    4344:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    4346:	68fb      	ldr	r3, [r7, #12]
    4348:	2200      	movs	r2, #0
    434a:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    434c:	68fb      	ldr	r3, [r7, #12]
    434e:	2200      	movs	r2, #0
    4350:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    4352:	68fb      	ldr	r3, [r7, #12]
    4354:	2200      	movs	r2, #0
    4356:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    4358:	68fb      	ldr	r3, [r7, #12]
    435a:	2200      	movs	r2, #0
    435c:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    435e:	68fb      	ldr	r3, [r7, #12]
    4360:	2201      	movs	r2, #1
    4362:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    4364:	68fb      	ldr	r3, [r7, #12]
    4366:	2200      	movs	r2, #0
    4368:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    436a:	68fb      	ldr	r3, [r7, #12]
    436c:	f04f 32ff 	mov.w	r2, #4294967295
    4370:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    4372:	68fb      	ldr	r3, [r7, #12]
    4374:	f04f 32ff 	mov.w	r2, #4294967295
    4378:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    437a:	68fb      	ldr	r3, [r7, #12]
    437c:	3310      	adds	r3, #16
    437e:	4618      	mov	r0, r3
    4380:	f7ff fe98 	bl	40b4 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    4384:	68fb      	ldr	r3, [r7, #12]
    4386:	3324      	adds	r3, #36	; 0x24
    4388:	4618      	mov	r0, r3
    438a:	f7ff fe93 	bl	40b4 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    438e:	68f8      	ldr	r0, [r7, #12]
    4390:	2100      	movs	r1, #0
    4392:	2200      	movs	r2, #0
    4394:	2300      	movs	r3, #0
    4396:	f000 f81d 	bl	43d4 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    439a:	68fb      	ldr	r3, [r7, #12]
	}
    439c:	4618      	mov	r0, r3
    439e:	3710      	adds	r7, #16
    43a0:	46bd      	mov	sp, r7
    43a2:	bd80      	pop	{r7, pc}

000043a4 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    43a4:	b580      	push	{r7, lr}
    43a6:	b084      	sub	sp, #16
    43a8:	af00      	add	r7, sp, #0
    43aa:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    43ac:	f001 fc5a 	bl	5c64 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    43b0:	687b      	ldr	r3, [r7, #4]
    43b2:	681b      	ldr	r3, [r3, #0]
    43b4:	2b00      	cmp	r3, #0
    43b6:	d103      	bne.n	43c0 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    43b8:	687b      	ldr	r3, [r7, #4]
    43ba:	685b      	ldr	r3, [r3, #4]
    43bc:	60fb      	str	r3, [r7, #12]
    43be:	e001      	b.n	43c4 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    43c0:	2300      	movs	r3, #0
    43c2:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    43c4:	f001 fc64 	bl	5c90 <vPortExitCritical>
		
		return pxReturn;
    43c8:	68fb      	ldr	r3, [r7, #12]
	}
    43ca:	4618      	mov	r0, r3
    43cc:	3710      	adds	r7, #16
    43ce:	46bd      	mov	sp, r7
    43d0:	bd80      	pop	{r7, pc}
    43d2:	bf00      	nop

000043d4 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    43d4:	b580      	push	{r7, lr}
    43d6:	b088      	sub	sp, #32
    43d8:	af00      	add	r7, sp, #0
    43da:	60f8      	str	r0, [r7, #12]
    43dc:	60b9      	str	r1, [r7, #8]
    43de:	607a      	str	r2, [r7, #4]
    43e0:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    43e2:	2300      	movs	r3, #0
    43e4:	61fb      	str	r3, [r7, #28]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    43e6:	f001 fc3d 	bl	5c64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    43ea:	68fb      	ldr	r3, [r7, #12]
    43ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    43ee:	68fb      	ldr	r3, [r7, #12]
    43f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    43f2:	429a      	cmp	r2, r3
    43f4:	d216      	bcs.n	4424 <xQueueGenericSend+0x50>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    43f6:	68f8      	ldr	r0, [r7, #12]
    43f8:	68b9      	ldr	r1, [r7, #8]
    43fa:	683a      	ldr	r2, [r7, #0]
    43fc:	f000 f9d6 	bl	47ac <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    4400:	68fb      	ldr	r3, [r7, #12]
    4402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4404:	2b00      	cmp	r3, #0
    4406:	d009      	beq.n	441c <xQueueGenericSend+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    4408:	68fb      	ldr	r3, [r7, #12]
    440a:	3324      	adds	r3, #36	; 0x24
    440c:	4618      	mov	r0, r3
    440e:	f001 f89f 	bl	5550 <xTaskRemoveFromEventList>
    4412:	4603      	mov	r3, r0
    4414:	2b01      	cmp	r3, #1
    4416:	d101      	bne.n	441c <xQueueGenericSend+0x48>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    4418:	f001 fc16 	bl	5c48 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    441c:	f001 fc38 	bl	5c90 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    4420:	2301      	movs	r3, #1
    4422:	e059      	b.n	44d8 <xQueueGenericSend+0x104>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    4424:	687b      	ldr	r3, [r7, #4]
    4426:	2b00      	cmp	r3, #0
    4428:	d103      	bne.n	4432 <xQueueGenericSend+0x5e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    442a:	f001 fc31 	bl	5c90 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    442e:	2300      	movs	r3, #0
    4430:	e052      	b.n	44d8 <xQueueGenericSend+0x104>
				}
				else if( xEntryTimeSet == pdFALSE )
    4432:	69fb      	ldr	r3, [r7, #28]
    4434:	2b00      	cmp	r3, #0
    4436:	d106      	bne.n	4446 <xQueueGenericSend+0x72>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    4438:	f107 0314 	add.w	r3, r7, #20
    443c:	4618      	mov	r0, r3
    443e:	f001 f8df 	bl	5600 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4442:	2301      	movs	r3, #1
    4444:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    4446:	f001 fc23 	bl	5c90 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    444a:	f000 fe93 	bl	5174 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    444e:	f001 fc09 	bl	5c64 <vPortEnterCritical>
    4452:	68fb      	ldr	r3, [r7, #12]
    4454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4456:	f1b3 3fff 	cmp.w	r3, #4294967295
    445a:	d102      	bne.n	4462 <xQueueGenericSend+0x8e>
    445c:	68fb      	ldr	r3, [r7, #12]
    445e:	2200      	movs	r2, #0
    4460:	645a      	str	r2, [r3, #68]	; 0x44
    4462:	68fb      	ldr	r3, [r7, #12]
    4464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4466:	f1b3 3fff 	cmp.w	r3, #4294967295
    446a:	d102      	bne.n	4472 <xQueueGenericSend+0x9e>
    446c:	68fb      	ldr	r3, [r7, #12]
    446e:	2200      	movs	r2, #0
    4470:	649a      	str	r2, [r3, #72]	; 0x48
    4472:	f001 fc0d 	bl	5c90 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4476:	f107 0214 	add.w	r2, r7, #20
    447a:	1d3b      	adds	r3, r7, #4
    447c:	4610      	mov	r0, r2
    447e:	4619      	mov	r1, r3
    4480:	f001 f8d6 	bl	5630 <xTaskCheckForTimeOut>
    4484:	4603      	mov	r3, r0
    4486:	2b00      	cmp	r3, #0
    4488:	d11e      	bne.n	44c8 <xQueueGenericSend+0xf4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    448a:	68f8      	ldr	r0, [r7, #12]
    448c:	f000 fa86 	bl	499c <prvIsQueueFull>
    4490:	4603      	mov	r3, r0
    4492:	2b00      	cmp	r3, #0
    4494:	d012      	beq.n	44bc <xQueueGenericSend+0xe8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    4496:	68fb      	ldr	r3, [r7, #12]
    4498:	f103 0210 	add.w	r2, r3, #16
    449c:	687b      	ldr	r3, [r7, #4]
    449e:	4610      	mov	r0, r2
    44a0:	4619      	mov	r1, r3
    44a2:	f001 f81d 	bl	54e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    44a6:	68f8      	ldr	r0, [r7, #12]
    44a8:	f000 fa02 	bl	48b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    44ac:	f000 fe74 	bl	5198 <xTaskResumeAll>
    44b0:	4603      	mov	r3, r0
    44b2:	2b00      	cmp	r3, #0
    44b4:	d10f      	bne.n	44d6 <xQueueGenericSend+0x102>
				{
					portYIELD_WITHIN_API();
    44b6:	f001 fbc7 	bl	5c48 <vPortYieldFromISR>
    44ba:	e00c      	b.n	44d6 <xQueueGenericSend+0x102>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    44bc:	68f8      	ldr	r0, [r7, #12]
    44be:	f000 f9f7 	bl	48b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    44c2:	f000 fe69 	bl	5198 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    44c6:	e78e      	b.n	43e6 <xQueueGenericSend+0x12>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    44c8:	68f8      	ldr	r0, [r7, #12]
    44ca:	f000 f9f1 	bl	48b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    44ce:	f000 fe63 	bl	5198 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    44d2:	2300      	movs	r3, #0
    44d4:	e000      	b.n	44d8 <xQueueGenericSend+0x104>
		}
	}
    44d6:	e786      	b.n	43e6 <xQueueGenericSend+0x12>
}
    44d8:	4618      	mov	r0, r3
    44da:	3720      	adds	r7, #32
    44dc:	46bd      	mov	sp, r7
    44de:	bd80      	pop	{r7, pc}

000044e0 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    44e0:	b580      	push	{r7, lr}
    44e2:	b086      	sub	sp, #24
    44e4:	af00      	add	r7, sp, #0
    44e6:	60f8      	str	r0, [r7, #12]
    44e8:	60b9      	str	r1, [r7, #8]
    44ea:	607a      	str	r2, [r7, #4]
    44ec:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    44ee:	2300      	movs	r3, #0
    44f0:	613b      	str	r3, [r7, #16]
    44f2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    44f6:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    44fa:	68fb      	ldr	r3, [r7, #12]
    44fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    44fe:	68fb      	ldr	r3, [r7, #12]
    4500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4502:	429a      	cmp	r2, r3
    4504:	d221      	bcs.n	454a <xQueueGenericSendFromISR+0x6a>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    4506:	68f8      	ldr	r0, [r7, #12]
    4508:	68b9      	ldr	r1, [r7, #8]
    450a:	683a      	ldr	r2, [r7, #0]
    450c:	f000 f94e 	bl	47ac <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    4510:	68fb      	ldr	r3, [r7, #12]
    4512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4514:	f1b3 3fff 	cmp.w	r3, #4294967295
    4518:	d10f      	bne.n	453a <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    451a:	68fb      	ldr	r3, [r7, #12]
    451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    451e:	2b00      	cmp	r3, #0
    4520:	d010      	beq.n	4544 <xQueueGenericSendFromISR+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    4522:	68fb      	ldr	r3, [r7, #12]
    4524:	3324      	adds	r3, #36	; 0x24
    4526:	4618      	mov	r0, r3
    4528:	f001 f812 	bl	5550 <xTaskRemoveFromEventList>
    452c:	4603      	mov	r3, r0
    452e:	2b00      	cmp	r3, #0
    4530:	d008      	beq.n	4544 <xQueueGenericSendFromISR+0x64>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    4532:	687b      	ldr	r3, [r7, #4]
    4534:	2201      	movs	r2, #1
    4536:	601a      	str	r2, [r3, #0]
    4538:	e004      	b.n	4544 <xQueueGenericSendFromISR+0x64>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    453a:	68fb      	ldr	r3, [r7, #12]
    453c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    453e:	1c5a      	adds	r2, r3, #1
    4540:	68fb      	ldr	r3, [r7, #12]
    4542:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    4544:	2301      	movs	r3, #1
    4546:	617b      	str	r3, [r7, #20]
    4548:	e001      	b.n	454e <xQueueGenericSendFromISR+0x6e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    454a:	2300      	movs	r3, #0
    454c:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    454e:	f04f 0000 	mov.w	r0, #0
    4552:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4556:	697b      	ldr	r3, [r7, #20]
}
    4558:	4618      	mov	r0, r3
    455a:	3718      	adds	r7, #24
    455c:	46bd      	mov	sp, r7
    455e:	bd80      	pop	{r7, pc}

00004560 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    4560:	b580      	push	{r7, lr}
    4562:	b088      	sub	sp, #32
    4564:	af00      	add	r7, sp, #0
    4566:	60f8      	str	r0, [r7, #12]
    4568:	60b9      	str	r1, [r7, #8]
    456a:	607a      	str	r2, [r7, #4]
    456c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    456e:	2300      	movs	r3, #0
    4570:	61fb      	str	r3, [r7, #28]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    4572:	f001 fb77 	bl	5c64 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    4576:	68fb      	ldr	r3, [r7, #12]
    4578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    457a:	2b00      	cmp	r3, #0
    457c:	d03b      	beq.n	45f6 <xQueueGenericReceive+0x96>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    457e:	68fb      	ldr	r3, [r7, #12]
    4580:	68db      	ldr	r3, [r3, #12]
    4582:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    4584:	68f8      	ldr	r0, [r7, #12]
    4586:	68b9      	ldr	r1, [r7, #8]
    4588:	f000 f96c 	bl	4864 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    458c:	683b      	ldr	r3, [r7, #0]
    458e:	2b00      	cmp	r3, #0
    4590:	d11c      	bne.n	45cc <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    4592:	68fb      	ldr	r3, [r7, #12]
    4594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4596:	1e5a      	subs	r2, r3, #1
    4598:	68fb      	ldr	r3, [r7, #12]
    459a:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    459c:	68fb      	ldr	r3, [r7, #12]
    459e:	681b      	ldr	r3, [r3, #0]
    45a0:	2b00      	cmp	r3, #0
    45a2:	d104      	bne.n	45ae <xQueueGenericReceive+0x4e>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    45a4:	f001 f9f6 	bl	5994 <xTaskGetCurrentTaskHandle>
    45a8:	4602      	mov	r2, r0
    45aa:	68fb      	ldr	r3, [r7, #12]
    45ac:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    45ae:	68fb      	ldr	r3, [r7, #12]
    45b0:	691b      	ldr	r3, [r3, #16]
    45b2:	2b00      	cmp	r3, #0
    45b4:	d01b      	beq.n	45ee <xQueueGenericReceive+0x8e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    45b6:	68fb      	ldr	r3, [r7, #12]
    45b8:	3310      	adds	r3, #16
    45ba:	4618      	mov	r0, r3
    45bc:	f000 ffc8 	bl	5550 <xTaskRemoveFromEventList>
    45c0:	4603      	mov	r3, r0
    45c2:	2b01      	cmp	r3, #1
    45c4:	d113      	bne.n	45ee <xQueueGenericReceive+0x8e>
						{
							portYIELD_WITHIN_API();
    45c6:	f001 fb3f 	bl	5c48 <vPortYieldFromISR>
    45ca:	e010      	b.n	45ee <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    45cc:	68fb      	ldr	r3, [r7, #12]
    45ce:	69ba      	ldr	r2, [r7, #24]
    45d0:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    45d2:	68fb      	ldr	r3, [r7, #12]
    45d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    45d6:	2b00      	cmp	r3, #0
    45d8:	d009      	beq.n	45ee <xQueueGenericReceive+0x8e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    45da:	68fb      	ldr	r3, [r7, #12]
    45dc:	3324      	adds	r3, #36	; 0x24
    45de:	4618      	mov	r0, r3
    45e0:	f000 ffb6 	bl	5550 <xTaskRemoveFromEventList>
    45e4:	4603      	mov	r3, r0
    45e6:	2b00      	cmp	r3, #0
    45e8:	d001      	beq.n	45ee <xQueueGenericReceive+0x8e>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    45ea:	f001 fb2d 	bl	5c48 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    45ee:	f001 fb4f 	bl	5c90 <vPortExitCritical>
				return pdPASS;
    45f2:	2301      	movs	r3, #1
    45f4:	e066      	b.n	46c4 <xQueueGenericReceive+0x164>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    45f6:	687b      	ldr	r3, [r7, #4]
    45f8:	2b00      	cmp	r3, #0
    45fa:	d103      	bne.n	4604 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    45fc:	f001 fb48 	bl	5c90 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    4600:	2300      	movs	r3, #0
    4602:	e05f      	b.n	46c4 <xQueueGenericReceive+0x164>
				}
				else if( xEntryTimeSet == pdFALSE )
    4604:	69fb      	ldr	r3, [r7, #28]
    4606:	2b00      	cmp	r3, #0
    4608:	d106      	bne.n	4618 <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    460a:	f107 0310 	add.w	r3, r7, #16
    460e:	4618      	mov	r0, r3
    4610:	f000 fff6 	bl	5600 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    4614:	2301      	movs	r3, #1
    4616:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    4618:	f001 fb3a 	bl	5c90 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    461c:	f000 fdaa 	bl	5174 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    4620:	f001 fb20 	bl	5c64 <vPortEnterCritical>
    4624:	68fb      	ldr	r3, [r7, #12]
    4626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4628:	f1b3 3fff 	cmp.w	r3, #4294967295
    462c:	d102      	bne.n	4634 <xQueueGenericReceive+0xd4>
    462e:	68fb      	ldr	r3, [r7, #12]
    4630:	2200      	movs	r2, #0
    4632:	645a      	str	r2, [r3, #68]	; 0x44
    4634:	68fb      	ldr	r3, [r7, #12]
    4636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4638:	f1b3 3fff 	cmp.w	r3, #4294967295
    463c:	d102      	bne.n	4644 <xQueueGenericReceive+0xe4>
    463e:	68fb      	ldr	r3, [r7, #12]
    4640:	2200      	movs	r2, #0
    4642:	649a      	str	r2, [r3, #72]	; 0x48
    4644:	f001 fb24 	bl	5c90 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    4648:	f107 0210 	add.w	r2, r7, #16
    464c:	1d3b      	adds	r3, r7, #4
    464e:	4610      	mov	r0, r2
    4650:	4619      	mov	r1, r3
    4652:	f000 ffed 	bl	5630 <xTaskCheckForTimeOut>
    4656:	4603      	mov	r3, r0
    4658:	2b00      	cmp	r3, #0
    465a:	d12b      	bne.n	46b4 <xQueueGenericReceive+0x154>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    465c:	68f8      	ldr	r0, [r7, #12]
    465e:	f000 f973 	bl	4948 <prvIsQueueEmpty>
    4662:	4603      	mov	r3, r0
    4664:	2b00      	cmp	r3, #0
    4666:	d01f      	beq.n	46a8 <xQueueGenericReceive+0x148>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    4668:	68fb      	ldr	r3, [r7, #12]
    466a:	681b      	ldr	r3, [r3, #0]
    466c:	2b00      	cmp	r3, #0
    466e:	d108      	bne.n	4682 <xQueueGenericReceive+0x122>
					{
						portENTER_CRITICAL();
    4670:	f001 faf8 	bl	5c64 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    4674:	68fb      	ldr	r3, [r7, #12]
    4676:	685b      	ldr	r3, [r3, #4]
    4678:	4618      	mov	r0, r3
    467a:	f001 f99b 	bl	59b4 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    467e:	f001 fb07 	bl	5c90 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    4682:	68fb      	ldr	r3, [r7, #12]
    4684:	f103 0224 	add.w	r2, r3, #36	; 0x24
    4688:	687b      	ldr	r3, [r7, #4]
    468a:	4610      	mov	r0, r2
    468c:	4619      	mov	r1, r3
    468e:	f000 ff27 	bl	54e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    4692:	68f8      	ldr	r0, [r7, #12]
    4694:	f000 f90c 	bl	48b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    4698:	f000 fd7e 	bl	5198 <xTaskResumeAll>
    469c:	4603      	mov	r3, r0
    469e:	2b00      	cmp	r3, #0
    46a0:	d10f      	bne.n	46c2 <xQueueGenericReceive+0x162>
				{
					portYIELD_WITHIN_API();
    46a2:	f001 fad1 	bl	5c48 <vPortYieldFromISR>
    46a6:	e00c      	b.n	46c2 <xQueueGenericReceive+0x162>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    46a8:	68f8      	ldr	r0, [r7, #12]
    46aa:	f000 f901 	bl	48b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    46ae:	f000 fd73 	bl	5198 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    46b2:	e75e      	b.n	4572 <xQueueGenericReceive+0x12>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    46b4:	68f8      	ldr	r0, [r7, #12]
    46b6:	f000 f8fb 	bl	48b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    46ba:	f000 fd6d 	bl	5198 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    46be:	2300      	movs	r3, #0
    46c0:	e000      	b.n	46c4 <xQueueGenericReceive+0x164>
		}
	}
    46c2:	e756      	b.n	4572 <xQueueGenericReceive+0x12>
}
    46c4:	4618      	mov	r0, r3
    46c6:	3720      	adds	r7, #32
    46c8:	46bd      	mov	sp, r7
    46ca:	bd80      	pop	{r7, pc}

000046cc <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    46cc:	b580      	push	{r7, lr}
    46ce:	b086      	sub	sp, #24
    46d0:	af00      	add	r7, sp, #0
    46d2:	60f8      	str	r0, [r7, #12]
    46d4:	60b9      	str	r1, [r7, #8]
    46d6:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    46d8:	2300      	movs	r3, #0
    46da:	613b      	str	r3, [r7, #16]
    46dc:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    46e0:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    46e4:	68fb      	ldr	r3, [r7, #12]
    46e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    46e8:	2b00      	cmp	r3, #0
    46ea:	d025      	beq.n	4738 <xQueueReceiveFromISR+0x6c>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    46ec:	68f8      	ldr	r0, [r7, #12]
    46ee:	68b9      	ldr	r1, [r7, #8]
    46f0:	f000 f8b8 	bl	4864 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    46f4:	68fb      	ldr	r3, [r7, #12]
    46f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    46f8:	1e5a      	subs	r2, r3, #1
    46fa:	68fb      	ldr	r3, [r7, #12]
    46fc:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    46fe:	68fb      	ldr	r3, [r7, #12]
    4700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4702:	f1b3 3fff 	cmp.w	r3, #4294967295
    4706:	d10f      	bne.n	4728 <xQueueReceiveFromISR+0x5c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4708:	68fb      	ldr	r3, [r7, #12]
    470a:	691b      	ldr	r3, [r3, #16]
    470c:	2b00      	cmp	r3, #0
    470e:	d010      	beq.n	4732 <xQueueReceiveFromISR+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    4710:	68fb      	ldr	r3, [r7, #12]
    4712:	3310      	adds	r3, #16
    4714:	4618      	mov	r0, r3
    4716:	f000 ff1b 	bl	5550 <xTaskRemoveFromEventList>
    471a:	4603      	mov	r3, r0
    471c:	2b00      	cmp	r3, #0
    471e:	d008      	beq.n	4732 <xQueueReceiveFromISR+0x66>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    4720:	687b      	ldr	r3, [r7, #4]
    4722:	2201      	movs	r2, #1
    4724:	601a      	str	r2, [r3, #0]
    4726:	e004      	b.n	4732 <xQueueReceiveFromISR+0x66>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    4728:	68fb      	ldr	r3, [r7, #12]
    472a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    472c:	1c5a      	adds	r2, r3, #1
    472e:	68fb      	ldr	r3, [r7, #12]
    4730:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    4732:	2301      	movs	r3, #1
    4734:	617b      	str	r3, [r7, #20]
    4736:	e001      	b.n	473c <xQueueReceiveFromISR+0x70>
		}
		else
		{
			xReturn = pdFAIL;
    4738:	2300      	movs	r3, #0
    473a:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    473c:	f04f 0000 	mov.w	r0, #0
    4740:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    4744:	697b      	ldr	r3, [r7, #20]
}
    4746:	4618      	mov	r0, r3
    4748:	3718      	adds	r7, #24
    474a:	46bd      	mov	sp, r7
    474c:	bd80      	pop	{r7, pc}
    474e:	bf00      	nop

00004750 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    4750:	b580      	push	{r7, lr}
    4752:	b084      	sub	sp, #16
    4754:	af00      	add	r7, sp, #0
    4756:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    4758:	f001 fa84 	bl	5c64 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    475c:	687b      	ldr	r3, [r7, #4]
    475e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4760:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4762:	f001 fa95 	bl	5c90 <vPortExitCritical>

	return uxReturn;
    4766:	68fb      	ldr	r3, [r7, #12]
}
    4768:	4618      	mov	r0, r3
    476a:	3710      	adds	r7, #16
    476c:	46bd      	mov	sp, r7
    476e:	bd80      	pop	{r7, pc}

00004770 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    4770:	b480      	push	{r7}
    4772:	b085      	sub	sp, #20
    4774:	af00      	add	r7, sp, #0
    4776:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    4778:	687b      	ldr	r3, [r7, #4]
    477a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    477c:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    477e:	68fb      	ldr	r3, [r7, #12]
}
    4780:	4618      	mov	r0, r3
    4782:	3714      	adds	r7, #20
    4784:	46bd      	mov	sp, r7
    4786:	f85d 7b04 	ldr.w	r7, [sp], #4
    478a:	4770      	bx	lr

0000478c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    478c:	b580      	push	{r7, lr}
    478e:	b082      	sub	sp, #8
    4790:	af00      	add	r7, sp, #0
    4792:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    4794:	687b      	ldr	r3, [r7, #4]
    4796:	681b      	ldr	r3, [r3, #0]
    4798:	4618      	mov	r0, r3
    479a:	f001 fba1 	bl	5ee0 <vPortFree>
	vPortFree( pxQueue );
    479e:	6878      	ldr	r0, [r7, #4]
    47a0:	f001 fb9e 	bl	5ee0 <vPortFree>
}
    47a4:	3708      	adds	r7, #8
    47a6:	46bd      	mov	sp, r7
    47a8:	bd80      	pop	{r7, pc}
    47aa:	bf00      	nop

000047ac <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    47ac:	b580      	push	{r7, lr}
    47ae:	b084      	sub	sp, #16
    47b0:	af00      	add	r7, sp, #0
    47b2:	60f8      	str	r0, [r7, #12]
    47b4:	60b9      	str	r1, [r7, #8]
    47b6:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    47b8:	68fb      	ldr	r3, [r7, #12]
    47ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    47bc:	2b00      	cmp	r3, #0
    47be:	d10c      	bne.n	47da <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    47c0:	68fb      	ldr	r3, [r7, #12]
    47c2:	681b      	ldr	r3, [r3, #0]
    47c4:	2b00      	cmp	r3, #0
    47c6:	d145      	bne.n	4854 <prvCopyDataToQueue+0xa8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    47c8:	68fb      	ldr	r3, [r7, #12]
    47ca:	685b      	ldr	r3, [r3, #4]
    47cc:	4618      	mov	r0, r3
    47ce:	f001 f955 	bl	5a7c <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    47d2:	68fb      	ldr	r3, [r7, #12]
    47d4:	2200      	movs	r2, #0
    47d6:	605a      	str	r2, [r3, #4]
    47d8:	e03c      	b.n	4854 <prvCopyDataToQueue+0xa8>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    47da:	687b      	ldr	r3, [r7, #4]
    47dc:	2b00      	cmp	r3, #0
    47de:	d11a      	bne.n	4816 <prvCopyDataToQueue+0x6a>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    47e0:	68fb      	ldr	r3, [r7, #12]
    47e2:	689a      	ldr	r2, [r3, #8]
    47e4:	68fb      	ldr	r3, [r7, #12]
    47e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    47e8:	4610      	mov	r0, r2
    47ea:	68b9      	ldr	r1, [r7, #8]
    47ec:	461a      	mov	r2, r3
    47ee:	f014 f825 	bl	1883c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    47f2:	68fb      	ldr	r3, [r7, #12]
    47f4:	689a      	ldr	r2, [r3, #8]
    47f6:	68fb      	ldr	r3, [r7, #12]
    47f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    47fa:	441a      	add	r2, r3
    47fc:	68fb      	ldr	r3, [r7, #12]
    47fe:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    4800:	68fb      	ldr	r3, [r7, #12]
    4802:	689a      	ldr	r2, [r3, #8]
    4804:	68fb      	ldr	r3, [r7, #12]
    4806:	685b      	ldr	r3, [r3, #4]
    4808:	429a      	cmp	r2, r3
    480a:	d323      	bcc.n	4854 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    480c:	68fb      	ldr	r3, [r7, #12]
    480e:	681a      	ldr	r2, [r3, #0]
    4810:	68fb      	ldr	r3, [r7, #12]
    4812:	609a      	str	r2, [r3, #8]
    4814:	e01e      	b.n	4854 <prvCopyDataToQueue+0xa8>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    4816:	68fb      	ldr	r3, [r7, #12]
    4818:	68da      	ldr	r2, [r3, #12]
    481a:	68fb      	ldr	r3, [r7, #12]
    481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    481e:	4610      	mov	r0, r2
    4820:	68b9      	ldr	r1, [r7, #8]
    4822:	461a      	mov	r2, r3
    4824:	f014 f80a 	bl	1883c <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    4828:	68fb      	ldr	r3, [r7, #12]
    482a:	68da      	ldr	r2, [r3, #12]
    482c:	68fb      	ldr	r3, [r7, #12]
    482e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4830:	425b      	negs	r3, r3
    4832:	441a      	add	r2, r3
    4834:	68fb      	ldr	r3, [r7, #12]
    4836:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    4838:	68fb      	ldr	r3, [r7, #12]
    483a:	68da      	ldr	r2, [r3, #12]
    483c:	68fb      	ldr	r3, [r7, #12]
    483e:	681b      	ldr	r3, [r3, #0]
    4840:	429a      	cmp	r2, r3
    4842:	d207      	bcs.n	4854 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    4844:	68fb      	ldr	r3, [r7, #12]
    4846:	685a      	ldr	r2, [r3, #4]
    4848:	68fb      	ldr	r3, [r7, #12]
    484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    484c:	425b      	negs	r3, r3
    484e:	441a      	add	r2, r3
    4850:	68fb      	ldr	r3, [r7, #12]
    4852:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    4854:	68fb      	ldr	r3, [r7, #12]
    4856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4858:	1c5a      	adds	r2, r3, #1
    485a:	68fb      	ldr	r3, [r7, #12]
    485c:	639a      	str	r2, [r3, #56]	; 0x38
}
    485e:	3710      	adds	r7, #16
    4860:	46bd      	mov	sp, r7
    4862:	bd80      	pop	{r7, pc}

00004864 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    4864:	b580      	push	{r7, lr}
    4866:	b082      	sub	sp, #8
    4868:	af00      	add	r7, sp, #0
    486a:	6078      	str	r0, [r7, #4]
    486c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    486e:	687b      	ldr	r3, [r7, #4]
    4870:	681b      	ldr	r3, [r3, #0]
    4872:	2b00      	cmp	r3, #0
    4874:	d019      	beq.n	48aa <prvCopyDataFromQueue+0x46>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    4876:	687b      	ldr	r3, [r7, #4]
    4878:	68da      	ldr	r2, [r3, #12]
    487a:	687b      	ldr	r3, [r7, #4]
    487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    487e:	441a      	add	r2, r3
    4880:	687b      	ldr	r3, [r7, #4]
    4882:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    4884:	687b      	ldr	r3, [r7, #4]
    4886:	68da      	ldr	r2, [r3, #12]
    4888:	687b      	ldr	r3, [r7, #4]
    488a:	685b      	ldr	r3, [r3, #4]
    488c:	429a      	cmp	r2, r3
    488e:	d303      	bcc.n	4898 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    4890:	687b      	ldr	r3, [r7, #4]
    4892:	681a      	ldr	r2, [r3, #0]
    4894:	687b      	ldr	r3, [r7, #4]
    4896:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    4898:	687b      	ldr	r3, [r7, #4]
    489a:	68da      	ldr	r2, [r3, #12]
    489c:	687b      	ldr	r3, [r7, #4]
    489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    48a0:	6838      	ldr	r0, [r7, #0]
    48a2:	4611      	mov	r1, r2
    48a4:	461a      	mov	r2, r3
    48a6:	f013 ffc9 	bl	1883c <memcpy>
	}
}
    48aa:	3708      	adds	r7, #8
    48ac:	46bd      	mov	sp, r7
    48ae:	bd80      	pop	{r7, pc}

000048b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    48b0:	b580      	push	{r7, lr}
    48b2:	b082      	sub	sp, #8
    48b4:	af00      	add	r7, sp, #0
    48b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    48b8:	f001 f9d4 	bl	5c64 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    48bc:	e014      	b.n	48e8 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    48be:	687b      	ldr	r3, [r7, #4]
    48c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    48c2:	2b00      	cmp	r3, #0
    48c4:	d00f      	beq.n	48e6 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    48c6:	687b      	ldr	r3, [r7, #4]
    48c8:	3324      	adds	r3, #36	; 0x24
    48ca:	4618      	mov	r0, r3
    48cc:	f000 fe40 	bl	5550 <xTaskRemoveFromEventList>
    48d0:	4603      	mov	r3, r0
    48d2:	2b00      	cmp	r3, #0
    48d4:	d001      	beq.n	48da <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    48d6:	f000 fef7 	bl	56c8 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    48da:	687b      	ldr	r3, [r7, #4]
    48dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    48de:	1e5a      	subs	r2, r3, #1
    48e0:	687b      	ldr	r3, [r7, #4]
    48e2:	649a      	str	r2, [r3, #72]	; 0x48
    48e4:	e000      	b.n	48e8 <prvUnlockQueue+0x38>
			}
			else
			{
				break;
    48e6:	e003      	b.n	48f0 <prvUnlockQueue+0x40>
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    48e8:	687b      	ldr	r3, [r7, #4]
    48ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    48ec:	2b00      	cmp	r3, #0
    48ee:	dce6      	bgt.n	48be <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    48f0:	687b      	ldr	r3, [r7, #4]
    48f2:	f04f 32ff 	mov.w	r2, #4294967295
    48f6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    48f8:	f001 f9ca 	bl	5c90 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    48fc:	f001 f9b2 	bl	5c64 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    4900:	e014      	b.n	492c <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    4902:	687b      	ldr	r3, [r7, #4]
    4904:	691b      	ldr	r3, [r3, #16]
    4906:	2b00      	cmp	r3, #0
    4908:	d00f      	beq.n	492a <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    490a:	687b      	ldr	r3, [r7, #4]
    490c:	3310      	adds	r3, #16
    490e:	4618      	mov	r0, r3
    4910:	f000 fe1e 	bl	5550 <xTaskRemoveFromEventList>
    4914:	4603      	mov	r3, r0
    4916:	2b00      	cmp	r3, #0
    4918:	d001      	beq.n	491e <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
    491a:	f000 fed5 	bl	56c8 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    491e:	687b      	ldr	r3, [r7, #4]
    4920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4922:	1e5a      	subs	r2, r3, #1
    4924:	687b      	ldr	r3, [r7, #4]
    4926:	645a      	str	r2, [r3, #68]	; 0x44
    4928:	e000      	b.n	492c <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
    492a:	e003      	b.n	4934 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    492c:	687b      	ldr	r3, [r7, #4]
    492e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4930:	2b00      	cmp	r3, #0
    4932:	dce6      	bgt.n	4902 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    4934:	687b      	ldr	r3, [r7, #4]
    4936:	f04f 32ff 	mov.w	r2, #4294967295
    493a:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    493c:	f001 f9a8 	bl	5c90 <vPortExitCritical>
}
    4940:	3708      	adds	r7, #8
    4942:	46bd      	mov	sp, r7
    4944:	bd80      	pop	{r7, pc}
    4946:	bf00      	nop

00004948 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    4948:	b580      	push	{r7, lr}
    494a:	b084      	sub	sp, #16
    494c:	af00      	add	r7, sp, #0
    494e:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    4950:	f001 f988 	bl	5c64 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    4954:	687b      	ldr	r3, [r7, #4]
    4956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4958:	2b00      	cmp	r3, #0
    495a:	bf14      	ite	ne
    495c:	2300      	movne	r3, #0
    495e:	2301      	moveq	r3, #1
    4960:	b2db      	uxtb	r3, r3
    4962:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    4964:	f001 f994 	bl	5c90 <vPortExitCritical>

	return xReturn;
    4968:	68fb      	ldr	r3, [r7, #12]
}
    496a:	4618      	mov	r0, r3
    496c:	3710      	adds	r7, #16
    496e:	46bd      	mov	sp, r7
    4970:	bd80      	pop	{r7, pc}
    4972:	bf00      	nop

00004974 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    4974:	b480      	push	{r7}
    4976:	b085      	sub	sp, #20
    4978:	af00      	add	r7, sp, #0
    497a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    497c:	687b      	ldr	r3, [r7, #4]
    497e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4980:	2b00      	cmp	r3, #0
    4982:	bf14      	ite	ne
    4984:	2300      	movne	r3, #0
    4986:	2301      	moveq	r3, #1
    4988:	b2db      	uxtb	r3, r3
    498a:	60fb      	str	r3, [r7, #12]

	return xReturn;
    498c:	68fb      	ldr	r3, [r7, #12]
}
    498e:	4618      	mov	r0, r3
    4990:	3714      	adds	r7, #20
    4992:	46bd      	mov	sp, r7
    4994:	f85d 7b04 	ldr.w	r7, [sp], #4
    4998:	4770      	bx	lr
    499a:	bf00      	nop

0000499c <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    499c:	b580      	push	{r7, lr}
    499e:	b084      	sub	sp, #16
    49a0:	af00      	add	r7, sp, #0
    49a2:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    49a4:	f001 f95e 	bl	5c64 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    49a8:	687b      	ldr	r3, [r7, #4]
    49aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    49ac:	687b      	ldr	r3, [r7, #4]
    49ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    49b0:	429a      	cmp	r2, r3
    49b2:	bf14      	ite	ne
    49b4:	2300      	movne	r3, #0
    49b6:	2301      	moveq	r3, #1
    49b8:	b2db      	uxtb	r3, r3
    49ba:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    49bc:	f001 f968 	bl	5c90 <vPortExitCritical>

	return xReturn;
    49c0:	68fb      	ldr	r3, [r7, #12]
}
    49c2:	4618      	mov	r0, r3
    49c4:	3710      	adds	r7, #16
    49c6:	46bd      	mov	sp, r7
    49c8:	bd80      	pop	{r7, pc}
    49ca:	bf00      	nop

000049cc <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    49cc:	b480      	push	{r7}
    49ce:	b085      	sub	sp, #20
    49d0:	af00      	add	r7, sp, #0
    49d2:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    49d4:	687b      	ldr	r3, [r7, #4]
    49d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    49d8:	687b      	ldr	r3, [r7, #4]
    49da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    49dc:	429a      	cmp	r2, r3
    49de:	bf14      	ite	ne
    49e0:	2300      	movne	r3, #0
    49e2:	2301      	moveq	r3, #1
    49e4:	b2db      	uxtb	r3, r3
    49e6:	60fb      	str	r3, [r7, #12]

	return xReturn;
    49e8:	68fb      	ldr	r3, [r7, #12]
}
    49ea:	4618      	mov	r0, r3
    49ec:	3714      	adds	r7, #20
    49ee:	46bd      	mov	sp, r7
    49f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    49f4:	4770      	bx	lr
    49f6:	bf00      	nop

000049f8 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    49f8:	b580      	push	{r7, lr}
    49fa:	b08a      	sub	sp, #40	; 0x28
    49fc:	af02      	add	r7, sp, #8
    49fe:	60f8      	str	r0, [r7, #12]
    4a00:	60b9      	str	r1, [r7, #8]
    4a02:	603b      	str	r3, [r7, #0]
    4a04:	4613      	mov	r3, r2
    4a06:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    4a08:	88fb      	ldrh	r3, [r7, #6]
    4a0a:	4618      	mov	r0, r3
    4a0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
    4a0e:	f000 ff7f 	bl	5910 <prvAllocateTCBAndStack>
    4a12:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    4a14:	69bb      	ldr	r3, [r7, #24]
    4a16:	2b00      	cmp	r3, #0
    4a18:	f000 80a1 	beq.w	4b5e <xTaskGenericCreate+0x166>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    4a1c:	69bb      	ldr	r3, [r7, #24]
    4a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4a20:	88fb      	ldrh	r3, [r7, #6]
    4a22:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4a26:	3b01      	subs	r3, #1
    4a28:	009b      	lsls	r3, r3, #2
    4a2a:	4413      	add	r3, r2
    4a2c:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    4a2e:	697b      	ldr	r3, [r7, #20]
    4a30:	f023 0307 	bic.w	r3, r3, #7
    4a34:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    4a36:	88fb      	ldrh	r3, [r7, #6]
    4a38:	9300      	str	r3, [sp, #0]
    4a3a:	69b8      	ldr	r0, [r7, #24]
    4a3c:	68b9      	ldr	r1, [r7, #8]
    4a3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4a42:	f000 fe57 	bl	56f4 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    4a46:	6978      	ldr	r0, [r7, #20]
    4a48:	68f9      	ldr	r1, [r7, #12]
    4a4a:	683a      	ldr	r2, [r7, #0]
    4a4c:	f001 f88c 	bl	5b68 <pxPortInitialiseStack>
    4a50:	4602      	mov	r2, r0
    4a52:	69bb      	ldr	r3, [r7, #24]
    4a54:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    4a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4a58:	2b00      	cmp	r3, #0
    4a5a:	d002      	beq.n	4a62 <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    4a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4a5e:	69ba      	ldr	r2, [r7, #24]
    4a60:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    4a62:	f001 f8ff 	bl	5c64 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    4a66:	f241 43e8 	movw	r3, #5352	; 0x14e8
    4a6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a6e:	681b      	ldr	r3, [r3, #0]
    4a70:	1c5a      	adds	r2, r3, #1
    4a72:	f241 43e8 	movw	r3, #5352	; 0x14e8
    4a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a7a:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    4a7c:	f241 4310 	movw	r3, #5136	; 0x1410
    4a80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a84:	681b      	ldr	r3, [r3, #0]
    4a86:	2b00      	cmp	r3, #0
    4a88:	d10f      	bne.n	4aaa <xTaskGenericCreate+0xb2>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    4a8a:	f241 4310 	movw	r3, #5136	; 0x1410
    4a8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a92:	69ba      	ldr	r2, [r7, #24]
    4a94:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    4a96:	f241 43e8 	movw	r3, #5352	; 0x14e8
    4a9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4a9e:	681b      	ldr	r3, [r3, #0]
    4aa0:	2b01      	cmp	r3, #1
    4aa2:	d118      	bne.n	4ad6 <xTaskGenericCreate+0xde>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    4aa4:	f000 fe5c 	bl	5760 <prvInitialiseTaskLists>
    4aa8:	e015      	b.n	4ad6 <xTaskGenericCreate+0xde>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    4aaa:	f241 43f8 	movw	r3, #5368	; 0x14f8
    4aae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ab2:	681b      	ldr	r3, [r3, #0]
    4ab4:	2b00      	cmp	r3, #0
    4ab6:	d10e      	bne.n	4ad6 <xTaskGenericCreate+0xde>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    4ab8:	f241 4310 	movw	r3, #5136	; 0x1410
    4abc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ac0:	681b      	ldr	r3, [r3, #0]
    4ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4ac6:	429a      	cmp	r2, r3
    4ac8:	d805      	bhi.n	4ad6 <xTaskGenericCreate+0xde>
					{
						pxCurrentTCB = pxNewTCB;
    4aca:	f241 4310 	movw	r3, #5136	; 0x1410
    4ace:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ad2:	69ba      	ldr	r2, [r7, #24]
    4ad4:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    4ad6:	69bb      	ldr	r3, [r7, #24]
    4ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ada:	f241 43f0 	movw	r3, #5360	; 0x14f0
    4ade:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ae2:	681b      	ldr	r3, [r3, #0]
    4ae4:	429a      	cmp	r2, r3
    4ae6:	d906      	bls.n	4af6 <xTaskGenericCreate+0xfe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    4ae8:	69bb      	ldr	r3, [r7, #24]
    4aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4aec:	f241 43f0 	movw	r3, #5360	; 0x14f0
    4af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4af4:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    4af6:	f241 530c 	movw	r3, #5388	; 0x150c
    4afa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4afe:	681b      	ldr	r3, [r3, #0]
    4b00:	1c5a      	adds	r2, r3, #1
    4b02:	f241 530c 	movw	r3, #5388	; 0x150c
    4b06:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b0a:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    4b0c:	69bb      	ldr	r3, [r7, #24]
    4b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b10:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4b14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b18:	681b      	ldr	r3, [r3, #0]
    4b1a:	429a      	cmp	r2, r3
    4b1c:	d906      	bls.n	4b2c <xTaskGenericCreate+0x134>
    4b1e:	69bb      	ldr	r3, [r7, #24]
    4b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b22:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b2a:	601a      	str	r2, [r3, #0]
    4b2c:	69bb      	ldr	r3, [r7, #24]
    4b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b30:	4613      	mov	r3, r2
    4b32:	009b      	lsls	r3, r3, #2
    4b34:	4413      	add	r3, r2
    4b36:	009b      	lsls	r3, r3, #2
    4b38:	f241 4214 	movw	r2, #5140	; 0x1414
    4b3c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4b40:	441a      	add	r2, r3
    4b42:	69bb      	ldr	r3, [r7, #24]
    4b44:	3304      	adds	r3, #4
    4b46:	4610      	mov	r0, r2
    4b48:	4619      	mov	r1, r3
    4b4a:	f7ff fadf 	bl	410c <vListInsertEnd>

			xReturn = pdPASS;
    4b4e:	2301      	movs	r3, #1
    4b50:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
    4b52:	69b8      	ldr	r0, [r7, #24]
    4b54:	f012 fe76 	bl	17844 <myTraceCreate>
		}
		taskEXIT_CRITICAL();
    4b58:	f001 f89a 	bl	5c90 <vPortExitCritical>
    4b5c:	e002      	b.n	4b64 <xTaskGenericCreate+0x16c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4b5e:	f04f 33ff 	mov.w	r3, #4294967295
    4b62:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    4b64:	69fb      	ldr	r3, [r7, #28]
    4b66:	2b01      	cmp	r3, #1
    4b68:	d111      	bne.n	4b8e <xTaskGenericCreate+0x196>
	{
		if( xSchedulerRunning != pdFALSE )
    4b6a:	f241 43f8 	movw	r3, #5368	; 0x14f8
    4b6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b72:	681b      	ldr	r3, [r3, #0]
    4b74:	2b00      	cmp	r3, #0
    4b76:	d00a      	beq.n	4b8e <xTaskGenericCreate+0x196>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    4b78:	f241 4310 	movw	r3, #5136	; 0x1410
    4b7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b80:	681b      	ldr	r3, [r3, #0]
    4b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4b86:	429a      	cmp	r2, r3
    4b88:	d201      	bcs.n	4b8e <xTaskGenericCreate+0x196>
			{
				portYIELD_WITHIN_API();
    4b8a:	f001 f85d 	bl	5c48 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    4b8e:	69fb      	ldr	r3, [r7, #28]
}
    4b90:	4618      	mov	r0, r3
    4b92:	3720      	adds	r7, #32
    4b94:	46bd      	mov	sp, r7
    4b96:	bd80      	pop	{r7, pc}

00004b98 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    4b98:	b580      	push	{r7, lr}
    4b9a:	b084      	sub	sp, #16
    4b9c:	af00      	add	r7, sp, #0
    4b9e:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4ba0:	f001 f860 	bl	5c64 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    4ba4:	f241 4310 	movw	r3, #5136	; 0x1410
    4ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bac:	681b      	ldr	r3, [r3, #0]
    4bae:	687a      	ldr	r2, [r7, #4]
    4bb0:	429a      	cmp	r2, r3
    4bb2:	d101      	bne.n	4bb8 <vTaskDelete+0x20>
			{
				pxTaskToDelete = NULL;
    4bb4:	2300      	movs	r3, #0
    4bb6:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    4bb8:	687b      	ldr	r3, [r7, #4]
    4bba:	2b00      	cmp	r3, #0
    4bbc:	d105      	bne.n	4bca <vTaskDelete+0x32>
    4bbe:	f241 4310 	movw	r3, #5136	; 0x1410
    4bc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bc6:	681b      	ldr	r3, [r3, #0]
    4bc8:	e000      	b.n	4bcc <vTaskDelete+0x34>
    4bca:	687b      	ldr	r3, [r7, #4]
    4bcc:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4bce:	68fb      	ldr	r3, [r7, #12]
    4bd0:	3304      	adds	r3, #4
    4bd2:	4618      	mov	r0, r3
    4bd4:	f7ff fafa 	bl	41cc <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4bd8:	68fb      	ldr	r3, [r7, #12]
    4bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4bdc:	2b00      	cmp	r3, #0
    4bde:	d004      	beq.n	4bea <vTaskDelete+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4be0:	68fb      	ldr	r3, [r7, #12]
    4be2:	3318      	adds	r3, #24
    4be4:	4618      	mov	r0, r3
    4be6:	f7ff faf1 	bl	41cc <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    4bea:	68fb      	ldr	r3, [r7, #12]
    4bec:	3304      	adds	r3, #4
    4bee:	f241 40bc 	movw	r0, #5308	; 0x14bc
    4bf2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4bf6:	4619      	mov	r1, r3
    4bf8:	f7ff fa88 	bl	410c <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    4bfc:	f241 43d0 	movw	r3, #5328	; 0x14d0
    4c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c04:	681b      	ldr	r3, [r3, #0]
    4c06:	1c5a      	adds	r2, r3, #1
    4c08:	f241 43d0 	movw	r3, #5328	; 0x14d0
    4c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c10:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    4c12:	f241 530c 	movw	r3, #5388	; 0x150c
    4c16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c1a:	681b      	ldr	r3, [r3, #0]
    4c1c:	1c5a      	adds	r2, r3, #1
    4c1e:	f241 530c 	movw	r3, #5388	; 0x150c
    4c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c26:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    4c28:	f001 f832 	bl	5c90 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    4c2c:	f241 43f8 	movw	r3, #5368	; 0x14f8
    4c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c34:	681b      	ldr	r3, [r3, #0]
    4c36:	2b00      	cmp	r3, #0
    4c38:	d004      	beq.n	4c44 <vTaskDelete+0xac>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    4c3a:	687b      	ldr	r3, [r7, #4]
    4c3c:	2b00      	cmp	r3, #0
    4c3e:	d101      	bne.n	4c44 <vTaskDelete+0xac>
			{
				portYIELD_WITHIN_API();
    4c40:	f001 f802 	bl	5c48 <vPortYieldFromISR>
			}
		}
	}
    4c44:	3710      	adds	r7, #16
    4c46:	46bd      	mov	sp, r7
    4c48:	bd80      	pop	{r7, pc}
    4c4a:	bf00      	nop

00004c4c <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    4c4c:	b580      	push	{r7, lr}
    4c4e:	b086      	sub	sp, #24
    4c50:	af00      	add	r7, sp, #0
    4c52:	6078      	str	r0, [r7, #4]
    4c54:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    4c56:	2300      	movs	r3, #0
    4c58:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    4c5a:	f000 fa8b 	bl	5174 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4c5e:	687b      	ldr	r3, [r7, #4]
    4c60:	681a      	ldr	r2, [r3, #0]
    4c62:	683b      	ldr	r3, [r7, #0]
    4c64:	4413      	add	r3, r2
    4c66:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    4c68:	687b      	ldr	r3, [r7, #4]
    4c6a:	681a      	ldr	r2, [r3, #0]
    4c6c:	f241 43ec 	movw	r3, #5356	; 0x14ec
    4c70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c74:	681b      	ldr	r3, [r3, #0]
    4c76:	429a      	cmp	r2, r3
    4c78:	d90f      	bls.n	4c9a <vTaskDelayUntil+0x4e>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    4c7a:	687b      	ldr	r3, [r7, #4]
    4c7c:	681a      	ldr	r2, [r3, #0]
    4c7e:	693b      	ldr	r3, [r7, #16]
    4c80:	429a      	cmp	r2, r3
    4c82:	d919      	bls.n	4cb8 <vTaskDelayUntil+0x6c>
    4c84:	f241 43ec 	movw	r3, #5356	; 0x14ec
    4c88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c8c:	681b      	ldr	r3, [r3, #0]
    4c8e:	693a      	ldr	r2, [r7, #16]
    4c90:	429a      	cmp	r2, r3
    4c92:	d911      	bls.n	4cb8 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4c94:	2301      	movs	r3, #1
    4c96:	617b      	str	r3, [r7, #20]
    4c98:	e00e      	b.n	4cb8 <vTaskDelayUntil+0x6c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    4c9a:	687b      	ldr	r3, [r7, #4]
    4c9c:	681a      	ldr	r2, [r3, #0]
    4c9e:	693b      	ldr	r3, [r7, #16]
    4ca0:	429a      	cmp	r2, r3
    4ca2:	d807      	bhi.n	4cb4 <vTaskDelayUntil+0x68>
    4ca4:	f241 43ec 	movw	r3, #5356	; 0x14ec
    4ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4cac:	681b      	ldr	r3, [r3, #0]
    4cae:	693a      	ldr	r2, [r7, #16]
    4cb0:	429a      	cmp	r2, r3
    4cb2:	d901      	bls.n	4cb8 <vTaskDelayUntil+0x6c>
				{
					xShouldDelay = pdTRUE;
    4cb4:	2301      	movs	r3, #1
    4cb6:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    4cb8:	687b      	ldr	r3, [r7, #4]
    4cba:	693a      	ldr	r2, [r7, #16]
    4cbc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    4cbe:	697b      	ldr	r3, [r7, #20]
    4cc0:	2b00      	cmp	r3, #0
    4cc2:	d00b      	beq.n	4cdc <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4cc4:	f241 4310 	movw	r3, #5136	; 0x1410
    4cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ccc:	681b      	ldr	r3, [r3, #0]
    4cce:	3304      	adds	r3, #4
    4cd0:	4618      	mov	r0, r3
    4cd2:	f7ff fa7b 	bl	41cc <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4cd6:	6938      	ldr	r0, [r7, #16]
    4cd8:	f000 fdd6 	bl	5888 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    4cdc:	f000 fa5c 	bl	5198 <xTaskResumeAll>
    4ce0:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4ce2:	68fb      	ldr	r3, [r7, #12]
    4ce4:	2b00      	cmp	r3, #0
    4ce6:	d101      	bne.n	4cec <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
    4ce8:	f000 ffae 	bl	5c48 <vPortYieldFromISR>
		}
	}
    4cec:	3718      	adds	r7, #24
    4cee:	46bd      	mov	sp, r7
    4cf0:	bd80      	pop	{r7, pc}
    4cf2:	bf00      	nop

00004cf4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    4cf4:	b580      	push	{r7, lr}
    4cf6:	b084      	sub	sp, #16
    4cf8:	af00      	add	r7, sp, #0
    4cfa:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    4cfc:	2300      	movs	r3, #0
    4cfe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    4d00:	687b      	ldr	r3, [r7, #4]
    4d02:	2b00      	cmp	r3, #0
    4d04:	d018      	beq.n	4d38 <vTaskDelay+0x44>
		{
			vTaskSuspendAll();
    4d06:	f000 fa35 	bl	5174 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    4d0a:	f241 43ec 	movw	r3, #5356	; 0x14ec
    4d0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d12:	681a      	ldr	r2, [r3, #0]
    4d14:	687b      	ldr	r3, [r7, #4]
    4d16:	4413      	add	r3, r2
    4d18:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4d1a:	f241 4310 	movw	r3, #5136	; 0x1410
    4d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d22:	681b      	ldr	r3, [r3, #0]
    4d24:	3304      	adds	r3, #4
    4d26:	4618      	mov	r0, r3
    4d28:	f7ff fa50 	bl	41cc <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    4d2c:	68b8      	ldr	r0, [r7, #8]
    4d2e:	f000 fdab 	bl	5888 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    4d32:	f000 fa31 	bl	5198 <xTaskResumeAll>
    4d36:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    4d38:	68fb      	ldr	r3, [r7, #12]
    4d3a:	2b00      	cmp	r3, #0
    4d3c:	d101      	bne.n	4d42 <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
    4d3e:	f000 ff83 	bl	5c48 <vPortYieldFromISR>
		}
	}
    4d42:	3710      	adds	r7, #16
    4d44:	46bd      	mov	sp, r7
    4d46:	bd80      	pop	{r7, pc}

00004d48 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    4d48:	b580      	push	{r7, lr}
    4d4a:	b084      	sub	sp, #16
    4d4c:	af00      	add	r7, sp, #0
    4d4e:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    4d50:	f000 ff88 	bl	5c64 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4d54:	687b      	ldr	r3, [r7, #4]
    4d56:	2b00      	cmp	r3, #0
    4d58:	d105      	bne.n	4d66 <uxTaskPriorityGet+0x1e>
    4d5a:	f241 4310 	movw	r3, #5136	; 0x1410
    4d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d62:	681b      	ldr	r3, [r3, #0]
    4d64:	e000      	b.n	4d68 <uxTaskPriorityGet+0x20>
    4d66:	687b      	ldr	r3, [r7, #4]
    4d68:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    4d6a:	68fb      	ldr	r3, [r7, #12]
    4d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4d6e:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    4d70:	f000 ff8e 	bl	5c90 <vPortExitCritical>

		return uxReturn;
    4d74:	68bb      	ldr	r3, [r7, #8]
	}
    4d76:	4618      	mov	r0, r3
    4d78:	3710      	adds	r7, #16
    4d7a:	46bd      	mov	sp, r7
    4d7c:	bd80      	pop	{r7, pc}
    4d7e:	bf00      	nop

00004d80 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    4d80:	b580      	push	{r7, lr}
    4d82:	b086      	sub	sp, #24
    4d84:	af00      	add	r7, sp, #0
    4d86:	6078      	str	r0, [r7, #4]
    4d88:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    4d8a:	2300      	movs	r3, #0
    4d8c:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    4d8e:	683b      	ldr	r3, [r7, #0]
    4d90:	2b04      	cmp	r3, #4
    4d92:	d901      	bls.n	4d98 <vTaskPrioritySet+0x18>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4d94:	2304      	movs	r3, #4
    4d96:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    4d98:	f000 ff64 	bl	5c64 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    4d9c:	f241 4310 	movw	r3, #5136	; 0x1410
    4da0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4da4:	681b      	ldr	r3, [r3, #0]
    4da6:	687a      	ldr	r2, [r7, #4]
    4da8:	429a      	cmp	r2, r3
    4daa:	d101      	bne.n	4db0 <vTaskPrioritySet+0x30>
			{
				pxTask = NULL;
    4dac:	2300      	movs	r3, #0
    4dae:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    4db0:	687b      	ldr	r3, [r7, #4]
    4db2:	2b00      	cmp	r3, #0
    4db4:	d105      	bne.n	4dc2 <vTaskPrioritySet+0x42>
    4db6:	f241 4310 	movw	r3, #5136	; 0x1410
    4dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4dbe:	681b      	ldr	r3, [r3, #0]
    4dc0:	e000      	b.n	4dc4 <vTaskPrioritySet+0x44>
    4dc2:	687b      	ldr	r3, [r7, #4]
    4dc4:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    4dc6:	693b      	ldr	r3, [r7, #16]
    4dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4dca:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    4dcc:	68fa      	ldr	r2, [r7, #12]
    4dce:	683b      	ldr	r3, [r7, #0]
    4dd0:	429a      	cmp	r2, r3
    4dd2:	d058      	beq.n	4e86 <vTaskPrioritySet+0x106>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    4dd4:	683a      	ldr	r2, [r7, #0]
    4dd6:	68fb      	ldr	r3, [r7, #12]
    4dd8:	429a      	cmp	r2, r3
    4dda:	d905      	bls.n	4de8 <vTaskPrioritySet+0x68>
				{
					if( pxTask != NULL )
    4ddc:	687b      	ldr	r3, [r7, #4]
    4dde:	2b00      	cmp	r3, #0
    4de0:	d007      	beq.n	4df2 <vTaskPrioritySet+0x72>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    4de2:	2301      	movs	r3, #1
    4de4:	617b      	str	r3, [r7, #20]
    4de6:	e004      	b.n	4df2 <vTaskPrioritySet+0x72>
					}
				}
				else if( pxTask == NULL )
    4de8:	687b      	ldr	r3, [r7, #4]
    4dea:	2b00      	cmp	r3, #0
    4dec:	d101      	bne.n	4df2 <vTaskPrioritySet+0x72>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    4dee:	2301      	movs	r3, #1
    4df0:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    4df2:	693b      	ldr	r3, [r7, #16]
    4df4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4df6:	693b      	ldr	r3, [r7, #16]
    4df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4dfa:	429a      	cmp	r2, r3
    4dfc:	d102      	bne.n	4e04 <vTaskPrioritySet+0x84>
					{
						pxTCB->uxPriority = uxNewPriority;
    4dfe:	693b      	ldr	r3, [r7, #16]
    4e00:	683a      	ldr	r2, [r7, #0]
    4e02:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    4e04:	693b      	ldr	r3, [r7, #16]
    4e06:	683a      	ldr	r2, [r7, #0]
    4e08:	64da      	str	r2, [r3, #76]	; 0x4c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    4e0a:	683b      	ldr	r3, [r7, #0]
    4e0c:	f1c3 0205 	rsb	r2, r3, #5
    4e10:	693b      	ldr	r3, [r7, #16]
    4e12:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    4e14:	693b      	ldr	r3, [r7, #16]
    4e16:	6959      	ldr	r1, [r3, #20]
    4e18:	68fa      	ldr	r2, [r7, #12]
    4e1a:	4613      	mov	r3, r2
    4e1c:	009b      	lsls	r3, r3, #2
    4e1e:	4413      	add	r3, r2
    4e20:	009b      	lsls	r3, r3, #2
    4e22:	f241 4214 	movw	r2, #5140	; 0x1414
    4e26:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4e2a:	4413      	add	r3, r2
    4e2c:	4299      	cmp	r1, r3
    4e2e:	d125      	bne.n	4e7c <vTaskPrioritySet+0xfc>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    4e30:	693b      	ldr	r3, [r7, #16]
    4e32:	3304      	adds	r3, #4
    4e34:	4618      	mov	r0, r3
    4e36:	f7ff f9c9 	bl	41cc <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4e3a:	693b      	ldr	r3, [r7, #16]
    4e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e3e:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e46:	681b      	ldr	r3, [r3, #0]
    4e48:	429a      	cmp	r2, r3
    4e4a:	d906      	bls.n	4e5a <vTaskPrioritySet+0xda>
    4e4c:	693b      	ldr	r3, [r7, #16]
    4e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e50:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e58:	601a      	str	r2, [r3, #0]
    4e5a:	693b      	ldr	r3, [r7, #16]
    4e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4e5e:	4613      	mov	r3, r2
    4e60:	009b      	lsls	r3, r3, #2
    4e62:	4413      	add	r3, r2
    4e64:	009b      	lsls	r3, r3, #2
    4e66:	f241 4214 	movw	r2, #5140	; 0x1414
    4e6a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    4e6e:	441a      	add	r2, r3
    4e70:	693b      	ldr	r3, [r7, #16]
    4e72:	3304      	adds	r3, #4
    4e74:	4610      	mov	r0, r2
    4e76:	4619      	mov	r1, r3
    4e78:	f7ff f948 	bl	410c <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    4e7c:	697b      	ldr	r3, [r7, #20]
    4e7e:	2b01      	cmp	r3, #1
    4e80:	d101      	bne.n	4e86 <vTaskPrioritySet+0x106>
				{
					portYIELD_WITHIN_API();
    4e82:	f000 fee1 	bl	5c48 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    4e86:	f000 ff03 	bl	5c90 <vPortExitCritical>
	}
    4e8a:	3718      	adds	r7, #24
    4e8c:	46bd      	mov	sp, r7
    4e8e:	bd80      	pop	{r7, pc}

00004e90 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    4e90:	b580      	push	{r7, lr}
    4e92:	b084      	sub	sp, #16
    4e94:	af00      	add	r7, sp, #0
    4e96:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    4e98:	f000 fee4 	bl	5c64 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    4e9c:	f241 4310 	movw	r3, #5136	; 0x1410
    4ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ea4:	681b      	ldr	r3, [r3, #0]
    4ea6:	687a      	ldr	r2, [r7, #4]
    4ea8:	429a      	cmp	r2, r3
    4eaa:	d101      	bne.n	4eb0 <vTaskSuspend+0x20>
			{
				pxTaskToSuspend = NULL;
    4eac:	2300      	movs	r3, #0
    4eae:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    4eb0:	687b      	ldr	r3, [r7, #4]
    4eb2:	2b00      	cmp	r3, #0
    4eb4:	d105      	bne.n	4ec2 <vTaskSuspend+0x32>
    4eb6:	f241 4310 	movw	r3, #5136	; 0x1410
    4eba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ebe:	681b      	ldr	r3, [r3, #0]
    4ec0:	e000      	b.n	4ec4 <vTaskSuspend+0x34>
    4ec2:	687b      	ldr	r3, [r7, #4]
    4ec4:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4ec6:	68fb      	ldr	r3, [r7, #12]
    4ec8:	3304      	adds	r3, #4
    4eca:	4618      	mov	r0, r3
    4ecc:	f7ff f97e 	bl	41cc <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4ed0:	68fb      	ldr	r3, [r7, #12]
    4ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ed4:	2b00      	cmp	r3, #0
    4ed6:	d004      	beq.n	4ee2 <vTaskSuspend+0x52>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4ed8:	68fb      	ldr	r3, [r7, #12]
    4eda:	3318      	adds	r3, #24
    4edc:	4618      	mov	r0, r3
    4ede:	f7ff f975 	bl	41cc <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    4ee2:	68fb      	ldr	r3, [r7, #12]
    4ee4:	3304      	adds	r3, #4
    4ee6:	f241 40d4 	movw	r0, #5332	; 0x14d4
    4eea:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4eee:	4619      	mov	r1, r3
    4ef0:	f7ff f90c 	bl	410c <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    4ef4:	f000 fecc 	bl	5c90 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    4ef8:	687b      	ldr	r3, [r7, #4]
    4efa:	2b00      	cmp	r3, #0
    4efc:	d11e      	bne.n	4f3c <vTaskSuspend+0xac>
		{
			if( xSchedulerRunning != pdFALSE )
    4efe:	f241 43f8 	movw	r3, #5368	; 0x14f8
    4f02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f06:	681b      	ldr	r3, [r3, #0]
    4f08:	2b00      	cmp	r3, #0
    4f0a:	d002      	beq.n	4f12 <vTaskSuspend+0x82>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    4f0c:	f000 fe9c 	bl	5c48 <vPortYieldFromISR>
    4f10:	e014      	b.n	4f3c <vTaskSuspend+0xac>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    4f12:	f241 43d4 	movw	r3, #5332	; 0x14d4
    4f16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f1a:	681a      	ldr	r2, [r3, #0]
    4f1c:	f241 43e8 	movw	r3, #5352	; 0x14e8
    4f20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f24:	681b      	ldr	r3, [r3, #0]
    4f26:	429a      	cmp	r2, r3
    4f28:	d106      	bne.n	4f38 <vTaskSuspend+0xa8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    4f2a:	f241 4310 	movw	r3, #5136	; 0x1410
    4f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f32:	2200      	movs	r2, #0
    4f34:	601a      	str	r2, [r3, #0]
    4f36:	e001      	b.n	4f3c <vTaskSuspend+0xac>
				}
				else
				{
					vTaskSwitchContext();
    4f38:	f000 fa76 	bl	5428 <vTaskSwitchContext>
				}
			}
		}
	}
    4f3c:	3710      	adds	r7, #16
    4f3e:	46bd      	mov	sp, r7
    4f40:	bd80      	pop	{r7, pc}
    4f42:	bf00      	nop

00004f44 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    4f44:	b480      	push	{r7}
    4f46:	b085      	sub	sp, #20
    4f48:	af00      	add	r7, sp, #0
    4f4a:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    4f4c:	2300      	movs	r3, #0
    4f4e:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    4f50:	687b      	ldr	r3, [r7, #4]
    4f52:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4f54:	68bb      	ldr	r3, [r7, #8]
    4f56:	695a      	ldr	r2, [r3, #20]
    4f58:	f241 43d4 	movw	r3, #5332	; 0x14d4
    4f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f60:	429a      	cmp	r2, r3
    4f62:	d10d      	bne.n	4f80 <xTaskIsTaskSuspended+0x3c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    4f64:	68bb      	ldr	r3, [r7, #8]
    4f66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4f68:	f241 43a8 	movw	r3, #5288	; 0x14a8
    4f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f70:	429a      	cmp	r2, r3
    4f72:	d005      	beq.n	4f80 <xTaskIsTaskSuspended+0x3c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    4f74:	68bb      	ldr	r3, [r7, #8]
    4f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4f78:	2b00      	cmp	r3, #0
    4f7a:	d101      	bne.n	4f80 <xTaskIsTaskSuspended+0x3c>
				{
					xReturn = pdTRUE;
    4f7c:	2301      	movs	r3, #1
    4f7e:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    4f80:	68fb      	ldr	r3, [r7, #12]
	}
    4f82:	4618      	mov	r0, r3
    4f84:	3714      	adds	r7, #20
    4f86:	46bd      	mov	sp, r7
    4f88:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f8c:	4770      	bx	lr
    4f8e:	bf00      	nop

00004f90 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    4f90:	b580      	push	{r7, lr}
    4f92:	b084      	sub	sp, #16
    4f94:	af00      	add	r7, sp, #0
    4f96:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    4f98:	687b      	ldr	r3, [r7, #4]
    4f9a:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    4f9c:	68fb      	ldr	r3, [r7, #12]
    4f9e:	2b00      	cmp	r3, #0
    4fa0:	d043      	beq.n	502a <vTaskResume+0x9a>
    4fa2:	f241 4310 	movw	r3, #5136	; 0x1410
    4fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4faa:	681b      	ldr	r3, [r3, #0]
    4fac:	68fa      	ldr	r2, [r7, #12]
    4fae:	429a      	cmp	r2, r3
    4fb0:	d03b      	beq.n	502a <vTaskResume+0x9a>
		{
			taskENTER_CRITICAL();
    4fb2:	f000 fe57 	bl	5c64 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    4fb6:	68f8      	ldr	r0, [r7, #12]
    4fb8:	f7ff ffc4 	bl	4f44 <xTaskIsTaskSuspended>
    4fbc:	4603      	mov	r3, r0
    4fbe:	2b01      	cmp	r3, #1
    4fc0:	d131      	bne.n	5026 <vTaskResume+0x96>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4fc2:	68fb      	ldr	r3, [r7, #12]
    4fc4:	3304      	adds	r3, #4
    4fc6:	4618      	mov	r0, r3
    4fc8:	f7ff f900 	bl	41cc <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4fcc:	68fb      	ldr	r3, [r7, #12]
    4fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4fd0:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fd8:	681b      	ldr	r3, [r3, #0]
    4fda:	429a      	cmp	r2, r3
    4fdc:	d906      	bls.n	4fec <vTaskResume+0x5c>
    4fde:	68fb      	ldr	r3, [r7, #12]
    4fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4fe2:	f241 43f4 	movw	r3, #5364	; 0x14f4
    4fe6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4fea:	601a      	str	r2, [r3, #0]
    4fec:	68fb      	ldr	r3, [r7, #12]
    4fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ff0:	4613      	mov	r3, r2
    4ff2:	009b      	lsls	r3, r3, #2
    4ff4:	4413      	add	r3, r2
    4ff6:	009b      	lsls	r3, r3, #2
    4ff8:	f241 4214 	movw	r2, #5140	; 0x1414
    4ffc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5000:	441a      	add	r2, r3
    5002:	68fb      	ldr	r3, [r7, #12]
    5004:	3304      	adds	r3, #4
    5006:	4610      	mov	r0, r2
    5008:	4619      	mov	r1, r3
    500a:	f7ff f87f 	bl	410c <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    500e:	68fb      	ldr	r3, [r7, #12]
    5010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5012:	f241 4310 	movw	r3, #5136	; 0x1410
    5016:	f2c2 0300 	movt	r3, #8192	; 0x2000
    501a:	681b      	ldr	r3, [r3, #0]
    501c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    501e:	429a      	cmp	r2, r3
    5020:	d301      	bcc.n	5026 <vTaskResume+0x96>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    5022:	f000 fe11 	bl	5c48 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    5026:	f000 fe33 	bl	5c90 <vPortExitCritical>
		}
	}
    502a:	3710      	adds	r7, #16
    502c:	46bd      	mov	sp, r7
    502e:	bd80      	pop	{r7, pc}

00005030 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    5030:	b580      	push	{r7, lr}
    5032:	b086      	sub	sp, #24
    5034:	af00      	add	r7, sp, #0
    5036:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    5038:	2300      	movs	r3, #0
    503a:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    503c:	687b      	ldr	r3, [r7, #4]
    503e:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    5040:	2300      	movs	r3, #0
    5042:	60fb      	str	r3, [r7, #12]
    5044:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5048:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    504c:	6938      	ldr	r0, [r7, #16]
    504e:	f7ff ff79 	bl	4f44 <xTaskIsTaskSuspended>
    5052:	4603      	mov	r3, r0
    5054:	2b01      	cmp	r3, #1
    5056:	d144      	bne.n	50e2 <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5058:	f241 43fc 	movw	r3, #5372	; 0x14fc
    505c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5060:	681b      	ldr	r3, [r3, #0]
    5062:	2b00      	cmp	r3, #0
    5064:	d134      	bne.n	50d0 <xTaskResumeFromISR+0xa0>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    5066:	693b      	ldr	r3, [r7, #16]
    5068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    506a:	f241 4310 	movw	r3, #5136	; 0x1410
    506e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5072:	681b      	ldr	r3, [r3, #0]
    5074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5076:	429a      	cmp	r2, r3
    5078:	bf34      	ite	cc
    507a:	2300      	movcc	r3, #0
    507c:	2301      	movcs	r3, #1
    507e:	b2db      	uxtb	r3, r3
    5080:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    5082:	693b      	ldr	r3, [r7, #16]
    5084:	3304      	adds	r3, #4
    5086:	4618      	mov	r0, r3
    5088:	f7ff f8a0 	bl	41cc <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    508c:	693b      	ldr	r3, [r7, #16]
    508e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5090:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5094:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5098:	681b      	ldr	r3, [r3, #0]
    509a:	429a      	cmp	r2, r3
    509c:	d906      	bls.n	50ac <xTaskResumeFromISR+0x7c>
    509e:	693b      	ldr	r3, [r7, #16]
    50a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50a2:	f241 43f4 	movw	r3, #5364	; 0x14f4
    50a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    50aa:	601a      	str	r2, [r3, #0]
    50ac:	693b      	ldr	r3, [r7, #16]
    50ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    50b0:	4613      	mov	r3, r2
    50b2:	009b      	lsls	r3, r3, #2
    50b4:	4413      	add	r3, r2
    50b6:	009b      	lsls	r3, r3, #2
    50b8:	f241 4214 	movw	r2, #5140	; 0x1414
    50bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    50c0:	441a      	add	r2, r3
    50c2:	693b      	ldr	r3, [r7, #16]
    50c4:	3304      	adds	r3, #4
    50c6:	4610      	mov	r0, r2
    50c8:	4619      	mov	r1, r3
    50ca:	f7ff f81f 	bl	410c <vListInsertEnd>
    50ce:	e008      	b.n	50e2 <xTaskResumeFromISR+0xb2>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    50d0:	693b      	ldr	r3, [r7, #16]
    50d2:	3318      	adds	r3, #24
    50d4:	f241 40a8 	movw	r0, #5288	; 0x14a8
    50d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    50dc:	4619      	mov	r1, r3
    50de:	f7ff f815 	bl	410c <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    50e2:	f04f 0000 	mov.w	r0, #0
    50e6:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    50ea:	697b      	ldr	r3, [r7, #20]
	}
    50ec:	4618      	mov	r0, r3
    50ee:	3718      	adds	r7, #24
    50f0:	46bd      	mov	sp, r7
    50f2:	bd80      	pop	{r7, pc}

000050f4 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    50f4:	b580      	push	{r7, lr}
    50f6:	b086      	sub	sp, #24
    50f8:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    50fa:	2300      	movs	r3, #0
    50fc:	9300      	str	r3, [sp, #0]
    50fe:	2300      	movs	r3, #0
    5100:	9301      	str	r3, [sp, #4]
    5102:	2300      	movs	r3, #0
    5104:	9302      	str	r3, [sp, #8]
    5106:	2300      	movs	r3, #0
    5108:	9303      	str	r3, [sp, #12]
    510a:	f245 60e1 	movw	r0, #22241	; 0x56e1
    510e:	f2c0 0000 	movt	r0, #0
    5112:	f648 2140 	movw	r1, #35392	; 0x8a40
    5116:	f2c0 0101 	movt	r1, #1
    511a:	2280      	movs	r2, #128	; 0x80
    511c:	2300      	movs	r3, #0
    511e:	f7ff fc6b 	bl	49f8 <xTaskGenericCreate>
    5122:	6078      	str	r0, [r7, #4]
            
		}
	}
	#endif

	if( xReturn == pdPASS )
    5124:	687b      	ldr	r3, [r7, #4]
    5126:	2b01      	cmp	r3, #1
    5128:	d111      	bne.n	514e <vTaskStartScheduler+0x5a>
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */

		portDISABLE_INTERRUPTS();
    512a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    512e:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    5132:	f241 43f8 	movw	r3, #5368	; 0x14f8
    5136:	f2c2 0300 	movt	r3, #8192	; 0x2000
    513a:	2201      	movs	r2, #1
    513c:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    513e:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5142:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5146:	2200      	movs	r2, #0
    5148:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    514a:	f000 fd4f 	bl	5bec <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    514e:	3708      	adds	r7, #8
    5150:	46bd      	mov	sp, r7
    5152:	bd80      	pop	{r7, pc}

00005154 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    5154:	b580      	push	{r7, lr}
    5156:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    5158:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    515c:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    5160:	f241 43f8 	movw	r3, #5368	; 0x14f8
    5164:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5168:	2200      	movs	r2, #0
    516a:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    516c:	f000 fd66 	bl	5c3c <vPortEndScheduler>
}
    5170:	bd80      	pop	{r7, pc}
    5172:	bf00      	nop

00005174 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    5174:	b480      	push	{r7}
    5176:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    5178:	f241 43fc 	movw	r3, #5372	; 0x14fc
    517c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5180:	681b      	ldr	r3, [r3, #0]
    5182:	1c5a      	adds	r2, r3, #1
    5184:	f241 43fc 	movw	r3, #5372	; 0x14fc
    5188:	f2c2 0300 	movt	r3, #8192	; 0x2000
    518c:	601a      	str	r2, [r3, #0]
}
    518e:	46bd      	mov	sp, r7
    5190:	f85d 7b04 	ldr.w	r7, [sp], #4
    5194:	4770      	bx	lr
    5196:	bf00      	nop

00005198 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    5198:	b590      	push	{r4, r7, lr}
    519a:	b083      	sub	sp, #12
    519c:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    519e:	2300      	movs	r3, #0
    51a0:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    51a2:	f000 fd5f 	bl	5c64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    51a6:	f241 43fc 	movw	r3, #5372	; 0x14fc
    51aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51ae:	681b      	ldr	r3, [r3, #0]
    51b0:	1e5a      	subs	r2, r3, #1
    51b2:	f241 43fc 	movw	r3, #5372	; 0x14fc
    51b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51ba:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    51bc:	f241 43fc 	movw	r3, #5372	; 0x14fc
    51c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51c4:	681b      	ldr	r3, [r3, #0]
    51c6:	2b00      	cmp	r3, #0
    51c8:	d177      	bne.n	52ba <xTaskResumeAll+0x122>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    51ca:	f241 43e8 	movw	r3, #5352	; 0x14e8
    51ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51d2:	681b      	ldr	r3, [r3, #0]
    51d4:	2b00      	cmp	r3, #0
    51d6:	d070      	beq.n	52ba <xTaskResumeAll+0x122>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    51d8:	2300      	movs	r3, #0
    51da:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    51dc:	e036      	b.n	524c <xTaskResumeAll+0xb4>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    51de:	f241 43a8 	movw	r3, #5288	; 0x14a8
    51e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    51e6:	68db      	ldr	r3, [r3, #12]
    51e8:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    51ea:	f104 0318 	add.w	r3, r4, #24
    51ee:	4618      	mov	r0, r3
    51f0:	f7fe ffec 	bl	41cc <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    51f4:	1d23      	adds	r3, r4, #4
    51f6:	4618      	mov	r0, r3
    51f8:	f7fe ffe8 	bl	41cc <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    51fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    51fe:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5202:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5206:	681b      	ldr	r3, [r3, #0]
    5208:	429a      	cmp	r2, r3
    520a:	d905      	bls.n	5218 <xTaskResumeAll+0x80>
    520c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    520e:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5212:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5216:	601a      	str	r2, [r3, #0]
    5218:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    521a:	4613      	mov	r3, r2
    521c:	009b      	lsls	r3, r3, #2
    521e:	4413      	add	r3, r2
    5220:	009b      	lsls	r3, r3, #2
    5222:	f241 4214 	movw	r2, #5140	; 0x1414
    5226:	f2c2 0200 	movt	r2, #8192	; 0x2000
    522a:	441a      	add	r2, r3
    522c:	1d23      	adds	r3, r4, #4
    522e:	4610      	mov	r0, r2
    5230:	4619      	mov	r1, r3
    5232:	f7fe ff6b 	bl	410c <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5236:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5238:	f241 4310 	movw	r3, #5136	; 0x1410
    523c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5240:	681b      	ldr	r3, [r3, #0]
    5242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5244:	429a      	cmp	r2, r3
    5246:	d301      	bcc.n	524c <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    5248:	2301      	movs	r3, #1
    524a:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    524c:	f241 43a8 	movw	r3, #5288	; 0x14a8
    5250:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5254:	681b      	ldr	r3, [r3, #0]
    5256:	2b00      	cmp	r3, #0
    5258:	d1c1      	bne.n	51de <xTaskResumeAll+0x46>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    525a:	f241 5300 	movw	r3, #5376	; 0x1500
    525e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5262:	681b      	ldr	r3, [r3, #0]
    5264:	2b00      	cmp	r3, #0
    5266:	d014      	beq.n	5292 <xTaskResumeAll+0xfa>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    5268:	e00c      	b.n	5284 <xTaskResumeAll+0xec>
					{
						vTaskIncrementTick();
    526a:	f000 f865 	bl	5338 <vTaskIncrementTick>
						--uxMissedTicks;
    526e:	f241 5300 	movw	r3, #5376	; 0x1500
    5272:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5276:	681b      	ldr	r3, [r3, #0]
    5278:	1e5a      	subs	r2, r3, #1
    527a:	f241 5300 	movw	r3, #5376	; 0x1500
    527e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5282:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    5284:	f241 5300 	movw	r3, #5376	; 0x1500
    5288:	f2c2 0300 	movt	r3, #8192	; 0x2000
    528c:	681b      	ldr	r3, [r3, #0]
    528e:	2b00      	cmp	r3, #0
    5290:	d1eb      	bne.n	526a <xTaskResumeAll+0xd2>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    5292:	683b      	ldr	r3, [r7, #0]
    5294:	2b01      	cmp	r3, #1
    5296:	d006      	beq.n	52a6 <xTaskResumeAll+0x10e>
    5298:	f241 5304 	movw	r3, #5380	; 0x1504
    529c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52a0:	681b      	ldr	r3, [r3, #0]
    52a2:	2b01      	cmp	r3, #1
    52a4:	d109      	bne.n	52ba <xTaskResumeAll+0x122>
				{
					xAlreadyYielded = pdTRUE;
    52a6:	2301      	movs	r3, #1
    52a8:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    52aa:	f241 5304 	movw	r3, #5380	; 0x1504
    52ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52b2:	2200      	movs	r2, #0
    52b4:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    52b6:	f000 fcc7 	bl	5c48 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    52ba:	f000 fce9 	bl	5c90 <vPortExitCritical>

	return xAlreadyYielded;
    52be:	687b      	ldr	r3, [r7, #4]
}
    52c0:	4618      	mov	r0, r3
    52c2:	370c      	adds	r7, #12
    52c4:	46bd      	mov	sp, r7
    52c6:	bd90      	pop	{r4, r7, pc}

000052c8 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    52c8:	b580      	push	{r7, lr}
    52ca:	b082      	sub	sp, #8
    52cc:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    52ce:	f000 fcc9 	bl	5c64 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    52d2:	f241 43ec 	movw	r3, #5356	; 0x14ec
    52d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    52da:	681b      	ldr	r3, [r3, #0]
    52dc:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    52de:	f000 fcd7 	bl	5c90 <vPortExitCritical>

	return xTicks;
    52e2:	687b      	ldr	r3, [r7, #4]
}
    52e4:	4618      	mov	r0, r3
    52e6:	3708      	adds	r7, #8
    52e8:	46bd      	mov	sp, r7
    52ea:	bd80      	pop	{r7, pc}

000052ec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    52ec:	b480      	push	{r7}
    52ee:	b083      	sub	sp, #12
    52f0:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    52f2:	2300      	movs	r3, #0
    52f4:	607b      	str	r3, [r7, #4]
    52f6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    52fa:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    52fe:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5302:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5306:	681b      	ldr	r3, [r3, #0]
    5308:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    530a:	f04f 0000 	mov.w	r0, #0
    530e:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    5312:	683b      	ldr	r3, [r7, #0]
}
    5314:	4618      	mov	r0, r3
    5316:	370c      	adds	r7, #12
    5318:	46bd      	mov	sp, r7
    531a:	f85d 7b04 	ldr.w	r7, [sp], #4
    531e:	4770      	bx	lr

00005320 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    5320:	b480      	push	{r7}
    5322:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    5324:	f241 43e8 	movw	r3, #5352	; 0x14e8
    5328:	f2c2 0300 	movt	r3, #8192	; 0x2000
    532c:	681b      	ldr	r3, [r3, #0]
}
    532e:	4618      	mov	r0, r3
    5330:	46bd      	mov	sp, r7
    5332:	f85d 7b04 	ldr.w	r7, [sp], #4
    5336:	4770      	bx	lr

00005338 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    5338:	b580      	push	{r7, lr}
    533a:	b082      	sub	sp, #8
    533c:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    533e:	f241 43fc 	movw	r3, #5372	; 0x14fc
    5342:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5346:	681b      	ldr	r3, [r3, #0]
    5348:	2b00      	cmp	r3, #0
    534a:	d153      	bne.n	53f4 <vTaskIncrementTick+0xbc>
	{
		++xTickCount;
    534c:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5350:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5354:	681b      	ldr	r3, [r3, #0]
    5356:	1c5a      	adds	r2, r3, #1
    5358:	f241 43ec 	movw	r3, #5356	; 0x14ec
    535c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5360:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    5362:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5366:	f2c2 0300 	movt	r3, #8192	; 0x2000
    536a:	681b      	ldr	r3, [r3, #0]
    536c:	2b00      	cmp	r3, #0
    536e:	d140      	bne.n	53f2 <vTaskIncrementTick+0xba>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    5370:	f241 43a0 	movw	r3, #5280	; 0x14a0
    5374:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5378:	681b      	ldr	r3, [r3, #0]
    537a:	607b      	str	r3, [r7, #4]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    537c:	f241 43a4 	movw	r3, #5284	; 0x14a4
    5380:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5384:	681a      	ldr	r2, [r3, #0]
    5386:	f241 43a0 	movw	r3, #5280	; 0x14a0
    538a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    538e:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    5390:	f241 43a4 	movw	r3, #5284	; 0x14a4
    5394:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5398:	687a      	ldr	r2, [r7, #4]
    539a:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    539c:	f241 5308 	movw	r3, #5384	; 0x1508
    53a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53a4:	681b      	ldr	r3, [r3, #0]
    53a6:	1c5a      	adds	r2, r3, #1
    53a8:	f241 5308 	movw	r3, #5384	; 0x1508
    53ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53b0:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    53b2:	f241 43a0 	movw	r3, #5280	; 0x14a0
    53b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ba:	681b      	ldr	r3, [r3, #0]
    53bc:	681b      	ldr	r3, [r3, #0]
    53be:	2b00      	cmp	r3, #0
    53c0:	d107      	bne.n	53d2 <vTaskIncrementTick+0x9a>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    53c2:	f240 5330 	movw	r3, #1328	; 0x530
    53c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ca:	f04f 32ff 	mov.w	r2, #4294967295
    53ce:	601a      	str	r2, [r3, #0]
    53d0:	e00f      	b.n	53f2 <vTaskIncrementTick+0xba>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    53d2:	f241 43a0 	movw	r3, #5280	; 0x14a0
    53d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53da:	681b      	ldr	r3, [r3, #0]
    53dc:	68db      	ldr	r3, [r3, #12]
    53de:	68db      	ldr	r3, [r3, #12]
    53e0:	603b      	str	r3, [r7, #0]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    53e2:	683b      	ldr	r3, [r7, #0]
    53e4:	685a      	ldr	r2, [r3, #4]
    53e6:	f240 5330 	movw	r3, #1328	; 0x530
    53ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53ee:	601a      	str	r2, [r3, #0]
    53f0:	e00d      	b.n	540e <vTaskIncrementTick+0xd6>
    53f2:	e00c      	b.n	540e <vTaskIncrementTick+0xd6>
		/* See if this tick has made a timeout expire. */
		//prvCheckDelayedTasks();
	}
	else
	{
		++uxMissedTicks;
    53f4:	f241 5300 	movw	r3, #5376	; 0x1500
    53f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    53fc:	681b      	ldr	r3, [r3, #0]
    53fe:	1c5a      	adds	r2, r3, #1
    5400:	f241 5300 	movw	r3, #5376	; 0x1500
    5404:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5408:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    540a:	f012 fa2d 	bl	17868 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    540e:	f241 5300 	movw	r3, #5376	; 0x1500
    5412:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5416:	681b      	ldr	r3, [r3, #0]
    5418:	2b00      	cmp	r3, #0
    541a:	d101      	bne.n	5420 <vTaskIncrementTick+0xe8>
		{
			vApplicationTickHook();
    541c:	f012 fa24 	bl	17868 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    5420:	3708      	adds	r7, #8
    5422:	46bd      	mov	sp, r7
    5424:	bd80      	pop	{r7, pc}
    5426:	bf00      	nop

00005428 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    5428:	b580      	push	{r7, lr}
    542a:	b082      	sub	sp, #8
    542c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    542e:	f241 43fc 	movw	r3, #5372	; 0x14fc
    5432:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5436:	681b      	ldr	r3, [r3, #0]
    5438:	2b00      	cmp	r3, #0
    543a:	d006      	beq.n	544a <vTaskSwitchContext+0x22>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    543c:	f241 5304 	movw	r3, #5380	; 0x1504
    5440:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5444:	2201      	movs	r2, #1
    5446:	601a      	str	r2, [r3, #0]
    5448:	e047      	b.n	54da <vTaskSwitchContext+0xb2>
	}
	else
	{
		traceTASK_SWITCHED_OUT();
    544a:	f012 fa07 	bl	1785c <myTraceSwitchedOut>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    544e:	e00a      	b.n	5466 <vTaskSwitchContext+0x3e>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    5450:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5454:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5458:	681b      	ldr	r3, [r3, #0]
    545a:	1e5a      	subs	r2, r3, #1
    545c:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5460:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5464:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    5466:	f241 43f4 	movw	r3, #5364	; 0x14f4
    546a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    546e:	6819      	ldr	r1, [r3, #0]
    5470:	f241 4214 	movw	r2, #5140	; 0x1414
    5474:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5478:	460b      	mov	r3, r1
    547a:	009b      	lsls	r3, r3, #2
    547c:	440b      	add	r3, r1
    547e:	009b      	lsls	r3, r3, #2
    5480:	4413      	add	r3, r2
    5482:	681b      	ldr	r3, [r3, #0]
    5484:	2b00      	cmp	r3, #0
    5486:	d0e3      	beq.n	5450 <vTaskSwitchContext+0x28>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    5488:	f241 43f4 	movw	r3, #5364	; 0x14f4
    548c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5490:	681a      	ldr	r2, [r3, #0]
    5492:	4613      	mov	r3, r2
    5494:	009b      	lsls	r3, r3, #2
    5496:	4413      	add	r3, r2
    5498:	009b      	lsls	r3, r3, #2
    549a:	f241 4214 	movw	r2, #5140	; 0x1414
    549e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    54a2:	4413      	add	r3, r2
    54a4:	607b      	str	r3, [r7, #4]
    54a6:	687b      	ldr	r3, [r7, #4]
    54a8:	685b      	ldr	r3, [r3, #4]
    54aa:	685a      	ldr	r2, [r3, #4]
    54ac:	687b      	ldr	r3, [r7, #4]
    54ae:	605a      	str	r2, [r3, #4]
    54b0:	687b      	ldr	r3, [r7, #4]
    54b2:	685a      	ldr	r2, [r3, #4]
    54b4:	687b      	ldr	r3, [r7, #4]
    54b6:	3308      	adds	r3, #8
    54b8:	429a      	cmp	r2, r3
    54ba:	d104      	bne.n	54c6 <vTaskSwitchContext+0x9e>
    54bc:	687b      	ldr	r3, [r7, #4]
    54be:	685b      	ldr	r3, [r3, #4]
    54c0:	685a      	ldr	r2, [r3, #4]
    54c2:	687b      	ldr	r3, [r7, #4]
    54c4:	605a      	str	r2, [r3, #4]
    54c6:	687b      	ldr	r3, [r7, #4]
    54c8:	685b      	ldr	r3, [r3, #4]
    54ca:	68da      	ldr	r2, [r3, #12]
    54cc:	f241 4310 	movw	r3, #5136	; 0x1410
    54d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54d4:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
    54d6:	f012 f9bb 	bl	17850 <myTraceSwitchedIn>
	}
}
    54da:	3708      	adds	r7, #8
    54dc:	46bd      	mov	sp, r7
    54de:	bd80      	pop	{r7, pc}

000054e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    54e0:	b580      	push	{r7, lr}
    54e2:	b084      	sub	sp, #16
    54e4:	af00      	add	r7, sp, #0
    54e6:	6078      	str	r0, [r7, #4]
    54e8:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    54ea:	f241 4310 	movw	r3, #5136	; 0x1410
    54ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    54f2:	681b      	ldr	r3, [r3, #0]
    54f4:	3318      	adds	r3, #24
    54f6:	6878      	ldr	r0, [r7, #4]
    54f8:	4619      	mov	r1, r3
    54fa:	f7fe fe2f 	bl	415c <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    54fe:	f241 4310 	movw	r3, #5136	; 0x1410
    5502:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5506:	681b      	ldr	r3, [r3, #0]
    5508:	3304      	adds	r3, #4
    550a:	4618      	mov	r0, r3
    550c:	f7fe fe5e 	bl	41cc <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    5510:	683b      	ldr	r3, [r7, #0]
    5512:	f1b3 3fff 	cmp.w	r3, #4294967295
    5516:	d10d      	bne.n	5534 <vTaskPlaceOnEventList+0x54>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5518:	f241 4310 	movw	r3, #5136	; 0x1410
    551c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5520:	681b      	ldr	r3, [r3, #0]
    5522:	3304      	adds	r3, #4
    5524:	f241 40d4 	movw	r0, #5332	; 0x14d4
    5528:	f2c2 0000 	movt	r0, #8192	; 0x2000
    552c:	4619      	mov	r1, r3
    552e:	f7fe fded 	bl	410c <vListInsertEnd>
    5532:	e00a      	b.n	554a <vTaskPlaceOnEventList+0x6a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    5534:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5538:	f2c2 0300 	movt	r3, #8192	; 0x2000
    553c:	681a      	ldr	r2, [r3, #0]
    553e:	683b      	ldr	r3, [r7, #0]
    5540:	4413      	add	r3, r2
    5542:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    5544:	68f8      	ldr	r0, [r7, #12]
    5546:	f000 f99f 	bl	5888 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    554a:	3710      	adds	r7, #16
    554c:	46bd      	mov	sp, r7
    554e:	bd80      	pop	{r7, pc}

00005550 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    5550:	b580      	push	{r7, lr}
    5552:	b084      	sub	sp, #16
    5554:	af00      	add	r7, sp, #0
    5556:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    5558:	687b      	ldr	r3, [r7, #4]
    555a:	68db      	ldr	r3, [r3, #12]
    555c:	68db      	ldr	r3, [r3, #12]
    555e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    5560:	68bb      	ldr	r3, [r7, #8]
    5562:	3318      	adds	r3, #24
    5564:	4618      	mov	r0, r3
    5566:	f7fe fe31 	bl	41cc <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    556a:	f241 43fc 	movw	r3, #5372	; 0x14fc
    556e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5572:	681b      	ldr	r3, [r3, #0]
    5574:	2b00      	cmp	r3, #0
    5576:	d126      	bne.n	55c6 <xTaskRemoveFromEventList+0x76>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    5578:	68bb      	ldr	r3, [r7, #8]
    557a:	3304      	adds	r3, #4
    557c:	4618      	mov	r0, r3
    557e:	f7fe fe25 	bl	41cc <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    5582:	68bb      	ldr	r3, [r7, #8]
    5584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5586:	f241 43f4 	movw	r3, #5364	; 0x14f4
    558a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    558e:	681b      	ldr	r3, [r3, #0]
    5590:	429a      	cmp	r2, r3
    5592:	d906      	bls.n	55a2 <xTaskRemoveFromEventList+0x52>
    5594:	68bb      	ldr	r3, [r7, #8]
    5596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5598:	f241 43f4 	movw	r3, #5364	; 0x14f4
    559c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55a0:	601a      	str	r2, [r3, #0]
    55a2:	68bb      	ldr	r3, [r7, #8]
    55a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    55a6:	4613      	mov	r3, r2
    55a8:	009b      	lsls	r3, r3, #2
    55aa:	4413      	add	r3, r2
    55ac:	009b      	lsls	r3, r3, #2
    55ae:	f241 4214 	movw	r2, #5140	; 0x1414
    55b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    55b6:	441a      	add	r2, r3
    55b8:	68bb      	ldr	r3, [r7, #8]
    55ba:	3304      	adds	r3, #4
    55bc:	4610      	mov	r0, r2
    55be:	4619      	mov	r1, r3
    55c0:	f7fe fda4 	bl	410c <vListInsertEnd>
    55c4:	e008      	b.n	55d8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    55c6:	68bb      	ldr	r3, [r7, #8]
    55c8:	3318      	adds	r3, #24
    55ca:	f241 40a8 	movw	r0, #5288	; 0x14a8
    55ce:	f2c2 0000 	movt	r0, #8192	; 0x2000
    55d2:	4619      	mov	r1, r3
    55d4:	f7fe fd9a 	bl	410c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    55d8:	68bb      	ldr	r3, [r7, #8]
    55da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    55dc:	f241 4310 	movw	r3, #5136	; 0x1410
    55e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    55e4:	681b      	ldr	r3, [r3, #0]
    55e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    55e8:	429a      	cmp	r2, r3
    55ea:	d302      	bcc.n	55f2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    55ec:	2301      	movs	r3, #1
    55ee:	60fb      	str	r3, [r7, #12]
    55f0:	e001      	b.n	55f6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
    55f2:	2300      	movs	r3, #0
    55f4:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    55f6:	68fb      	ldr	r3, [r7, #12]
}
    55f8:	4618      	mov	r0, r3
    55fa:	3710      	adds	r7, #16
    55fc:	46bd      	mov	sp, r7
    55fe:	bd80      	pop	{r7, pc}

00005600 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    5600:	b480      	push	{r7}
    5602:	b083      	sub	sp, #12
    5604:	af00      	add	r7, sp, #0
    5606:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    5608:	f241 5308 	movw	r3, #5384	; 0x1508
    560c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5610:	681a      	ldr	r2, [r3, #0]
    5612:	687b      	ldr	r3, [r7, #4]
    5614:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    5616:	f241 43ec 	movw	r3, #5356	; 0x14ec
    561a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    561e:	681a      	ldr	r2, [r3, #0]
    5620:	687b      	ldr	r3, [r7, #4]
    5622:	605a      	str	r2, [r3, #4]
}
    5624:	370c      	adds	r7, #12
    5626:	46bd      	mov	sp, r7
    5628:	f85d 7b04 	ldr.w	r7, [sp], #4
    562c:	4770      	bx	lr
    562e:	bf00      	nop

00005630 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    5630:	b580      	push	{r7, lr}
    5632:	b084      	sub	sp, #16
    5634:	af00      	add	r7, sp, #0
    5636:	6078      	str	r0, [r7, #4]
    5638:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    563a:	f000 fb13 	bl	5c64 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    563e:	683b      	ldr	r3, [r7, #0]
    5640:	681b      	ldr	r3, [r3, #0]
    5642:	f1b3 3fff 	cmp.w	r3, #4294967295
    5646:	d102      	bne.n	564e <xTaskCheckForTimeOut+0x1e>
			{
				xReturn = pdFALSE;
    5648:	2300      	movs	r3, #0
    564a:	60fb      	str	r3, [r7, #12]
    564c:	e035      	b.n	56ba <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    564e:	687b      	ldr	r3, [r7, #4]
    5650:	681a      	ldr	r2, [r3, #0]
    5652:	f241 5308 	movw	r3, #5384	; 0x1508
    5656:	f2c2 0300 	movt	r3, #8192	; 0x2000
    565a:	681b      	ldr	r3, [r3, #0]
    565c:	429a      	cmp	r2, r3
    565e:	d00b      	beq.n	5678 <xTaskCheckForTimeOut+0x48>
    5660:	687b      	ldr	r3, [r7, #4]
    5662:	685a      	ldr	r2, [r3, #4]
    5664:	f241 43ec 	movw	r3, #5356	; 0x14ec
    5668:	f2c2 0300 	movt	r3, #8192	; 0x2000
    566c:	681b      	ldr	r3, [r3, #0]
    566e:	429a      	cmp	r2, r3
    5670:	d802      	bhi.n	5678 <xTaskCheckForTimeOut+0x48>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    5672:	2301      	movs	r3, #1
    5674:	60fb      	str	r3, [r7, #12]
    5676:	e020      	b.n	56ba <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    5678:	f241 43ec 	movw	r3, #5356	; 0x14ec
    567c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5680:	681a      	ldr	r2, [r3, #0]
    5682:	687b      	ldr	r3, [r7, #4]
    5684:	685b      	ldr	r3, [r3, #4]
    5686:	1ad2      	subs	r2, r2, r3
    5688:	683b      	ldr	r3, [r7, #0]
    568a:	681b      	ldr	r3, [r3, #0]
    568c:	429a      	cmp	r2, r3
    568e:	d212      	bcs.n	56b6 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    5690:	683b      	ldr	r3, [r7, #0]
    5692:	681a      	ldr	r2, [r3, #0]
    5694:	687b      	ldr	r3, [r7, #4]
    5696:	6859      	ldr	r1, [r3, #4]
    5698:	f241 43ec 	movw	r3, #5356	; 0x14ec
    569c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56a0:	681b      	ldr	r3, [r3, #0]
    56a2:	1acb      	subs	r3, r1, r3
    56a4:	441a      	add	r2, r3
    56a6:	683b      	ldr	r3, [r7, #0]
    56a8:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    56aa:	6878      	ldr	r0, [r7, #4]
    56ac:	f7ff ffa8 	bl	5600 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    56b0:	2300      	movs	r3, #0
    56b2:	60fb      	str	r3, [r7, #12]
    56b4:	e001      	b.n	56ba <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
    56b6:	2301      	movs	r3, #1
    56b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    56ba:	f000 fae9 	bl	5c90 <vPortExitCritical>

	return xReturn;
    56be:	68fb      	ldr	r3, [r7, #12]
}
    56c0:	4618      	mov	r0, r3
    56c2:	3710      	adds	r7, #16
    56c4:	46bd      	mov	sp, r7
    56c6:	bd80      	pop	{r7, pc}

000056c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    56c8:	b480      	push	{r7}
    56ca:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    56cc:	f241 5304 	movw	r3, #5380	; 0x1504
    56d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56d4:	2201      	movs	r2, #1
    56d6:	601a      	str	r2, [r3, #0]
}
    56d8:	46bd      	mov	sp, r7
    56da:	f85d 7b04 	ldr.w	r7, [sp], #4
    56de:	4770      	bx	lr

000056e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    56e0:	b580      	push	{r7, lr}
    56e2:	b082      	sub	sp, #8
    56e4:	af00      	add	r7, sp, #0
    56e6:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    56e8:	f000 f886 	bl	57f8 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    56ec:	f000 faac 	bl	5c48 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    56f0:	e7fa      	b.n	56e8 <prvIdleTask+0x8>
    56f2:	bf00      	nop

000056f4 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    56f4:	b580      	push	{r7, lr}
    56f6:	b084      	sub	sp, #16
    56f8:	af00      	add	r7, sp, #0
    56fa:	60f8      	str	r0, [r7, #12]
    56fc:	60b9      	str	r1, [r7, #8]
    56fe:	607a      	str	r2, [r7, #4]
    5700:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    5702:	68fb      	ldr	r3, [r7, #12]
    5704:	3334      	adds	r3, #52	; 0x34
    5706:	4618      	mov	r0, r3
    5708:	68b9      	ldr	r1, [r7, #8]
    570a:	2210      	movs	r2, #16
    570c:	f013 f93a 	bl	18984 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    5710:	68fb      	ldr	r3, [r7, #12]
    5712:	2200      	movs	r2, #0
    5714:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    5718:	687b      	ldr	r3, [r7, #4]
    571a:	2b04      	cmp	r3, #4
    571c:	d901      	bls.n	5722 <prvInitialiseTCBVariables+0x2e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    571e:	2304      	movs	r3, #4
    5720:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    5722:	68fb      	ldr	r3, [r7, #12]
    5724:	687a      	ldr	r2, [r7, #4]
    5726:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    5728:	68fb      	ldr	r3, [r7, #12]
    572a:	687a      	ldr	r2, [r7, #4]
    572c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    572e:	68fb      	ldr	r3, [r7, #12]
    5730:	3304      	adds	r3, #4
    5732:	4618      	mov	r0, r3
    5734:	f7fe fcde 	bl	40f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    5738:	68fb      	ldr	r3, [r7, #12]
    573a:	3318      	adds	r3, #24
    573c:	4618      	mov	r0, r3
    573e:	f7fe fcd9 	bl	40f4 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    5742:	68fb      	ldr	r3, [r7, #12]
    5744:	68fa      	ldr	r2, [r7, #12]
    5746:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    5748:	687b      	ldr	r3, [r7, #4]
    574a:	f1c3 0205 	rsb	r2, r3, #5
    574e:	68fb      	ldr	r3, [r7, #12]
    5750:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    5752:	68fb      	ldr	r3, [r7, #12]
    5754:	68fa      	ldr	r2, [r7, #12]
    5756:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    5758:	3710      	adds	r7, #16
    575a:	46bd      	mov	sp, r7
    575c:	bd80      	pop	{r7, pc}
    575e:	bf00      	nop

00005760 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    5760:	b580      	push	{r7, lr}
    5762:	b082      	sub	sp, #8
    5764:	af00      	add	r7, sp, #0
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    5766:	2300      	movs	r3, #0
    5768:	607b      	str	r3, [r7, #4]
    576a:	e00f      	b.n	578c <prvInitialiseTaskLists+0x2c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    576c:	687a      	ldr	r2, [r7, #4]
    576e:	4613      	mov	r3, r2
    5770:	009b      	lsls	r3, r3, #2
    5772:	4413      	add	r3, r2
    5774:	009b      	lsls	r3, r3, #2
    5776:	f241 4214 	movw	r2, #5140	; 0x1414
    577a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    577e:	4413      	add	r3, r2
    5780:	4618      	mov	r0, r3
    5782:	f7fe fc97 	bl	40b4 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
    unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    5786:	687b      	ldr	r3, [r7, #4]
    5788:	3301      	adds	r3, #1
    578a:	607b      	str	r3, [r7, #4]
    578c:	687b      	ldr	r3, [r7, #4]
    578e:	2b04      	cmp	r3, #4
    5790:	d9ec      	bls.n	576c <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    5792:	f241 4078 	movw	r0, #5240	; 0x1478
    5796:	f2c2 0000 	movt	r0, #8192	; 0x2000
    579a:	f7fe fc8b 	bl	40b4 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    579e:	f241 408c 	movw	r0, #5260	; 0x148c
    57a2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    57a6:	f7fe fc85 	bl	40b4 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    57aa:	f241 40a8 	movw	r0, #5288	; 0x14a8
    57ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
    57b2:	f7fe fc7f 	bl	40b4 <vListInitialise>


	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    57b6:	f241 40bc 	movw	r0, #5308	; 0x14bc
    57ba:	f2c2 0000 	movt	r0, #8192	; 0x2000
    57be:	f7fe fc79 	bl	40b4 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    57c2:	f241 40d4 	movw	r0, #5332	; 0x14d4
    57c6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    57ca:	f7fe fc73 	bl	40b4 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    57ce:	f241 43a0 	movw	r3, #5280	; 0x14a0
    57d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57d6:	f241 4278 	movw	r2, #5240	; 0x1478
    57da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    57de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    57e0:	f241 43a4 	movw	r3, #5284	; 0x14a4
    57e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    57e8:	f241 428c 	movw	r2, #5260	; 0x148c
    57ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
    57f0:	601a      	str	r2, [r3, #0]
}
    57f2:	3708      	adds	r7, #8
    57f4:	46bd      	mov	sp, r7
    57f6:	bd80      	pop	{r7, pc}

000057f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    57f8:	b580      	push	{r7, lr}
    57fa:	b082      	sub	sp, #8
    57fc:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    57fe:	f241 43d0 	movw	r3, #5328	; 0x14d0
    5802:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5806:	681b      	ldr	r3, [r3, #0]
    5808:	2b00      	cmp	r3, #0
    580a:	d03a      	beq.n	5882 <prvCheckTasksWaitingTermination+0x8a>
		{
			vTaskSuspendAll();
    580c:	f7ff fcb2 	bl	5174 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    5810:	f241 43bc 	movw	r3, #5308	; 0x14bc
    5814:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5818:	681b      	ldr	r3, [r3, #0]
    581a:	2b00      	cmp	r3, #0
    581c:	bf14      	ite	ne
    581e:	2300      	movne	r3, #0
    5820:	2301      	moveq	r3, #1
    5822:	b2db      	uxtb	r3, r3
    5824:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    5826:	f7ff fcb7 	bl	5198 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    582a:	687b      	ldr	r3, [r7, #4]
    582c:	2b00      	cmp	r3, #0
    582e:	d128      	bne.n	5882 <prvCheckTasksWaitingTermination+0x8a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    5830:	f000 fa18 	bl	5c64 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    5834:	f241 43bc 	movw	r3, #5308	; 0x14bc
    5838:	f2c2 0300 	movt	r3, #8192	; 0x2000
    583c:	68db      	ldr	r3, [r3, #12]
    583e:	68db      	ldr	r3, [r3, #12]
    5840:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    5842:	683b      	ldr	r3, [r7, #0]
    5844:	3304      	adds	r3, #4
    5846:	4618      	mov	r0, r3
    5848:	f7fe fcc0 	bl	41cc <vListRemove>
					--uxCurrentNumberOfTasks;
    584c:	f241 43e8 	movw	r3, #5352	; 0x14e8
    5850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5854:	681b      	ldr	r3, [r3, #0]
    5856:	1e5a      	subs	r2, r3, #1
    5858:	f241 43e8 	movw	r3, #5352	; 0x14e8
    585c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5860:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    5862:	f241 43d0 	movw	r3, #5328	; 0x14d0
    5866:	f2c2 0300 	movt	r3, #8192	; 0x2000
    586a:	681b      	ldr	r3, [r3, #0]
    586c:	1e5a      	subs	r2, r3, #1
    586e:	f241 43d0 	movw	r3, #5328	; 0x14d0
    5872:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5876:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    5878:	f000 fa0a 	bl	5c90 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    587c:	6838      	ldr	r0, [r7, #0]
    587e:	f000 f879 	bl	5974 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    5882:	3708      	adds	r7, #8
    5884:	46bd      	mov	sp, r7
    5886:	bd80      	pop	{r7, pc}

00005888 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    5888:	b580      	push	{r7, lr}
    588a:	b082      	sub	sp, #8
    588c:	af00      	add	r7, sp, #0
    588e:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    5890:	f241 4310 	movw	r3, #5136	; 0x1410
    5894:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5898:	681b      	ldr	r3, [r3, #0]
    589a:	687a      	ldr	r2, [r7, #4]
    589c:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    589e:	f241 43ec 	movw	r3, #5356	; 0x14ec
    58a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58a6:	681b      	ldr	r3, [r3, #0]
    58a8:	687a      	ldr	r2, [r7, #4]
    58aa:	429a      	cmp	r2, r3
    58ac:	d20f      	bcs.n	58ce <prvAddCurrentTaskToDelayedList+0x46>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    58ae:	f241 43a4 	movw	r3, #5284	; 0x14a4
    58b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58b6:	681a      	ldr	r2, [r3, #0]
    58b8:	f241 4310 	movw	r3, #5136	; 0x1410
    58bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58c0:	681b      	ldr	r3, [r3, #0]
    58c2:	3304      	adds	r3, #4
    58c4:	4610      	mov	r0, r2
    58c6:	4619      	mov	r1, r3
    58c8:	f7fe fc48 	bl	415c <vListInsert>
    58cc:	e01c      	b.n	5908 <prvAddCurrentTaskToDelayedList+0x80>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    58ce:	f241 43a0 	movw	r3, #5280	; 0x14a0
    58d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58d6:	681a      	ldr	r2, [r3, #0]
    58d8:	f241 4310 	movw	r3, #5136	; 0x1410
    58dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58e0:	681b      	ldr	r3, [r3, #0]
    58e2:	3304      	adds	r3, #4
    58e4:	4610      	mov	r0, r2
    58e6:	4619      	mov	r1, r3
    58e8:	f7fe fc38 	bl	415c <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    58ec:	f240 5330 	movw	r3, #1328	; 0x530
    58f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    58f4:	681b      	ldr	r3, [r3, #0]
    58f6:	687a      	ldr	r2, [r7, #4]
    58f8:	429a      	cmp	r2, r3
    58fa:	d205      	bcs.n	5908 <prvAddCurrentTaskToDelayedList+0x80>
		{
			xNextTaskUnblockTime = xTimeToWake;
    58fc:	f240 5330 	movw	r3, #1328	; 0x530
    5900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5904:	687a      	ldr	r2, [r7, #4]
    5906:	601a      	str	r2, [r3, #0]
		}
	}
}
    5908:	3708      	adds	r7, #8
    590a:	46bd      	mov	sp, r7
    590c:	bd80      	pop	{r7, pc}
    590e:	bf00      	nop

00005910 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    5910:	b580      	push	{r7, lr}
    5912:	b084      	sub	sp, #16
    5914:	af00      	add	r7, sp, #0
    5916:	4603      	mov	r3, r0
    5918:	6039      	str	r1, [r7, #0]
    591a:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    591c:	2050      	movs	r0, #80	; 0x50
    591e:	f000 fa1b 	bl	5d58 <pvPortMalloc>
    5922:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    5924:	68fb      	ldr	r3, [r7, #12]
    5926:	2b00      	cmp	r3, #0
    5928:	d01f      	beq.n	596a <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    592a:	683b      	ldr	r3, [r7, #0]
    592c:	2b00      	cmp	r3, #0
    592e:	d106      	bne.n	593e <prvAllocateTCBAndStack+0x2e>
    5930:	88fb      	ldrh	r3, [r7, #6]
    5932:	009b      	lsls	r3, r3, #2
    5934:	4618      	mov	r0, r3
    5936:	f000 fa0f 	bl	5d58 <pvPortMalloc>
    593a:	4603      	mov	r3, r0
    593c:	e000      	b.n	5940 <prvAllocateTCBAndStack+0x30>
    593e:	683b      	ldr	r3, [r7, #0]
    5940:	68fa      	ldr	r2, [r7, #12]
    5942:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    5944:	68fb      	ldr	r3, [r7, #12]
    5946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5948:	2b00      	cmp	r3, #0
    594a:	d105      	bne.n	5958 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    594c:	68f8      	ldr	r0, [r7, #12]
    594e:	f000 fac7 	bl	5ee0 <vPortFree>
			pxNewTCB = NULL;
    5952:	2300      	movs	r3, #0
    5954:	60fb      	str	r3, [r7, #12]
    5956:	e008      	b.n	596a <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    5958:	68fb      	ldr	r3, [r7, #12]
    595a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    595c:	88fb      	ldrh	r3, [r7, #6]
    595e:	009b      	lsls	r3, r3, #2
    5960:	4610      	mov	r0, r2
    5962:	21a5      	movs	r1, #165	; 0xa5
    5964:	461a      	mov	r2, r3
    5966:	f012 ffbd 	bl	188e4 <memset>
		}
	}

	return pxNewTCB;
    596a:	68fb      	ldr	r3, [r7, #12]
}
    596c:	4618      	mov	r0, r3
    596e:	3710      	adds	r7, #16
    5970:	46bd      	mov	sp, r7
    5972:	bd80      	pop	{r7, pc}

00005974 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    5974:	b580      	push	{r7, lr}
    5976:	b082      	sub	sp, #8
    5978:	af00      	add	r7, sp, #0
    597a:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    597c:	687b      	ldr	r3, [r7, #4]
    597e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5980:	4618      	mov	r0, r3
    5982:	f000 faad 	bl	5ee0 <vPortFree>
		vPortFree( pxTCB );
    5986:	6878      	ldr	r0, [r7, #4]
    5988:	f000 faaa 	bl	5ee0 <vPortFree>
	}
    598c:	3708      	adds	r7, #8
    598e:	46bd      	mov	sp, r7
    5990:	bd80      	pop	{r7, pc}
    5992:	bf00      	nop

00005994 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    5994:	b480      	push	{r7}
    5996:	b083      	sub	sp, #12
    5998:	af00      	add	r7, sp, #0
        xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    599a:	f241 4310 	movw	r3, #5136	; 0x1410
    599e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59a2:	681b      	ldr	r3, [r3, #0]
    59a4:	607b      	str	r3, [r7, #4]

		return xReturn;
    59a6:	687b      	ldr	r3, [r7, #4]
	}
    59a8:	4618      	mov	r0, r3
    59aa:	370c      	adds	r7, #12
    59ac:	46bd      	mov	sp, r7
    59ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    59b2:	4770      	bx	lr

000059b4 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    59b4:	b580      	push	{r7, lr}
    59b6:	b084      	sub	sp, #16
    59b8:	af00      	add	r7, sp, #0
    59ba:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    59bc:	687b      	ldr	r3, [r7, #4]
    59be:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    59c0:	68fb      	ldr	r3, [r7, #12]
    59c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    59c4:	f241 4310 	movw	r3, #5136	; 0x1410
    59c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59cc:	681b      	ldr	r3, [r3, #0]
    59ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    59d0:	429a      	cmp	r2, r3
    59d2:	d24f      	bcs.n	5a74 <vTaskPriorityInherit+0xc0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    59d4:	f241 4310 	movw	r3, #5136	; 0x1410
    59d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    59dc:	681b      	ldr	r3, [r3, #0]
    59de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    59e0:	f1c3 0205 	rsb	r2, r3, #5
    59e4:	68fb      	ldr	r3, [r7, #12]
    59e6:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    59e8:	68fb      	ldr	r3, [r7, #12]
    59ea:	6959      	ldr	r1, [r3, #20]
    59ec:	68fb      	ldr	r3, [r7, #12]
    59ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    59f0:	4613      	mov	r3, r2
    59f2:	009b      	lsls	r3, r3, #2
    59f4:	4413      	add	r3, r2
    59f6:	009b      	lsls	r3, r3, #2
    59f8:	f241 4214 	movw	r2, #5140	; 0x1414
    59fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5a00:	4413      	add	r3, r2
    5a02:	4299      	cmp	r1, r3
    5a04:	d12e      	bne.n	5a64 <vTaskPriorityInherit+0xb0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    5a06:	68fb      	ldr	r3, [r7, #12]
    5a08:	3304      	adds	r3, #4
    5a0a:	4618      	mov	r0, r3
    5a0c:	f7fe fbde 	bl	41cc <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5a10:	f241 4310 	movw	r3, #5136	; 0x1410
    5a14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a18:	681b      	ldr	r3, [r3, #0]
    5a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a1c:	68fb      	ldr	r3, [r7, #12]
    5a1e:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    5a20:	68fb      	ldr	r3, [r7, #12]
    5a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a24:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a2c:	681b      	ldr	r3, [r3, #0]
    5a2e:	429a      	cmp	r2, r3
    5a30:	d906      	bls.n	5a40 <vTaskPriorityInherit+0x8c>
    5a32:	68fb      	ldr	r3, [r7, #12]
    5a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a36:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5a3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a3e:	601a      	str	r2, [r3, #0]
    5a40:	68fb      	ldr	r3, [r7, #12]
    5a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a44:	4613      	mov	r3, r2
    5a46:	009b      	lsls	r3, r3, #2
    5a48:	4413      	add	r3, r2
    5a4a:	009b      	lsls	r3, r3, #2
    5a4c:	f241 4214 	movw	r2, #5140	; 0x1414
    5a50:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5a54:	441a      	add	r2, r3
    5a56:	68fb      	ldr	r3, [r7, #12]
    5a58:	3304      	adds	r3, #4
    5a5a:	4610      	mov	r0, r2
    5a5c:	4619      	mov	r1, r3
    5a5e:	f7fe fb55 	bl	410c <vListInsertEnd>
    5a62:	e007      	b.n	5a74 <vTaskPriorityInherit+0xc0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    5a64:	f241 4310 	movw	r3, #5136	; 0x1410
    5a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5a6c:	681b      	ldr	r3, [r3, #0]
    5a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a70:	68fb      	ldr	r3, [r7, #12]
    5a72:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    5a74:	3710      	adds	r7, #16
    5a76:	46bd      	mov	sp, r7
    5a78:	bd80      	pop	{r7, pc}
    5a7a:	bf00      	nop

00005a7c <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    5a7c:	b580      	push	{r7, lr}
    5a7e:	b084      	sub	sp, #16
    5a80:	af00      	add	r7, sp, #0
    5a82:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    5a84:	687b      	ldr	r3, [r7, #4]
    5a86:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    5a88:	687b      	ldr	r3, [r7, #4]
    5a8a:	2b00      	cmp	r3, #0
    5a8c:	d035      	beq.n	5afa <vTaskPriorityDisinherit+0x7e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    5a8e:	68fb      	ldr	r3, [r7, #12]
    5a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a92:	68fb      	ldr	r3, [r7, #12]
    5a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5a96:	429a      	cmp	r2, r3
    5a98:	d02f      	beq.n	5afa <vTaskPriorityDisinherit+0x7e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    5a9a:	68fb      	ldr	r3, [r7, #12]
    5a9c:	3304      	adds	r3, #4
    5a9e:	4618      	mov	r0, r3
    5aa0:	f7fe fb94 	bl	41cc <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    5aa4:	68fb      	ldr	r3, [r7, #12]
    5aa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    5aa8:	68fb      	ldr	r3, [r7, #12]
    5aaa:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    5aac:	68fb      	ldr	r3, [r7, #12]
    5aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5ab0:	f1c3 0205 	rsb	r2, r3, #5
    5ab4:	68fb      	ldr	r3, [r7, #12]
    5ab6:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    5ab8:	68fb      	ldr	r3, [r7, #12]
    5aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5abc:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5ac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ac4:	681b      	ldr	r3, [r3, #0]
    5ac6:	429a      	cmp	r2, r3
    5ac8:	d906      	bls.n	5ad8 <vTaskPriorityDisinherit+0x5c>
    5aca:	68fb      	ldr	r3, [r7, #12]
    5acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5ace:	f241 43f4 	movw	r3, #5364	; 0x14f4
    5ad2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ad6:	601a      	str	r2, [r3, #0]
    5ad8:	68fb      	ldr	r3, [r7, #12]
    5ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5adc:	4613      	mov	r3, r2
    5ade:	009b      	lsls	r3, r3, #2
    5ae0:	4413      	add	r3, r2
    5ae2:	009b      	lsls	r3, r3, #2
    5ae4:	f241 4214 	movw	r2, #5140	; 0x1414
    5ae8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5aec:	441a      	add	r2, r3
    5aee:	68fb      	ldr	r3, [r7, #12]
    5af0:	3304      	adds	r3, #4
    5af2:	4610      	mov	r0, r2
    5af4:	4619      	mov	r1, r3
    5af6:	f7fe fb09 	bl	410c <vListInsertEnd>
			}
		}
	}
    5afa:	3710      	adds	r7, #16
    5afc:	46bd      	mov	sp, r7
    5afe:	bd80      	pop	{r7, pc}

00005b00 <xTaskGetxStartTime>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_SEFM == 1)

    portTickType xTaskGetxStartTime( xTaskHandle pxTCB )
    {
    5b00:	b480      	push	{r7}
    5b02:	b083      	sub	sp, #12
    5b04:	af00      	add	r7, sp, #0
    5b06:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xStartTime;
    5b08:	687b      	ldr	r3, [r7, #4]
    5b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    }
    5b0c:	4618      	mov	r0, r3
    5b0e:	370c      	adds	r7, #12
    5b10:	46bd      	mov	sp, r7
    5b12:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b16:	4770      	bx	lr

00005b18 <xTaskGetxLet>:

    portTickType xTaskGetxLet( xTaskHandle pxTCB )
    {
    5b18:	b480      	push	{r7}
    5b1a:	b083      	sub	sp, #12
    5b1c:	af00      	add	r7, sp, #0
    5b1e:	6078      	str	r0, [r7, #4]
        return ((tskTCB *)pxTCB)->xLet;
    5b20:	687b      	ldr	r3, [r7, #4]
    5b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
    5b24:	4618      	mov	r0, r3
    5b26:	370c      	adds	r7, #12
    5b28:	46bd      	mov	sp, r7
    5b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b2e:	4770      	bx	lr

00005b30 <vTaskSetxStartTime>:

    void vTaskSetxStartTime ( xTaskHandle pxTCB, portTickType xStartTime )
    {
    5b30:	b480      	push	{r7}
    5b32:	b083      	sub	sp, #12
    5b34:	af00      	add	r7, sp, #0
    5b36:	6078      	str	r0, [r7, #4]
    5b38:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xStartTime = xStartTime; 
    5b3a:	687b      	ldr	r3, [r7, #4]
    5b3c:	683a      	ldr	r2, [r7, #0]
    5b3e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    5b40:	370c      	adds	r7, #12
    5b42:	46bd      	mov	sp, r7
    5b44:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b48:	4770      	bx	lr
    5b4a:	bf00      	nop

00005b4c <vTaskSetxLet>:

    void vTaskSetxLet( xTaskHandle pxTCB, portTickType xLet )
    {
    5b4c:	b480      	push	{r7}
    5b4e:	b083      	sub	sp, #12
    5b50:	af00      	add	r7, sp, #0
    5b52:	6078      	str	r0, [r7, #4]
    5b54:	6039      	str	r1, [r7, #0]
        ((tskTCB *) pxTCB)->xLet = xLet;
    5b56:	687b      	ldr	r3, [r7, #4]
    5b58:	683a      	ldr	r2, [r7, #0]
    5b5a:	649a      	str	r2, [r3, #72]	; 0x48
    }
    5b5c:	370c      	adds	r7, #12
    5b5e:	46bd      	mov	sp, r7
    5b60:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b64:	4770      	bx	lr
    5b66:	bf00      	nop

00005b68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    5b68:	b480      	push	{r7}
    5b6a:	b085      	sub	sp, #20
    5b6c:	af00      	add	r7, sp, #0
    5b6e:	60f8      	str	r0, [r7, #12]
    5b70:	60b9      	str	r1, [r7, #8]
    5b72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    5b74:	68fb      	ldr	r3, [r7, #12]
    5b76:	3b04      	subs	r3, #4
    5b78:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    5b7a:	68fb      	ldr	r3, [r7, #12]
    5b7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5b80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5b82:	68fb      	ldr	r3, [r7, #12]
    5b84:	3b04      	subs	r3, #4
    5b86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    5b88:	68ba      	ldr	r2, [r7, #8]
    5b8a:	68fb      	ldr	r3, [r7, #12]
    5b8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    5b8e:	68fb      	ldr	r3, [r7, #12]
    5b90:	3b04      	subs	r3, #4
    5b92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    5b94:	68fb      	ldr	r3, [r7, #12]
    5b96:	2200      	movs	r2, #0
    5b98:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    5b9a:	68fb      	ldr	r3, [r7, #12]
    5b9c:	3b14      	subs	r3, #20
    5b9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    5ba0:	687a      	ldr	r2, [r7, #4]
    5ba2:	68fb      	ldr	r3, [r7, #12]
    5ba4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    5ba6:	68fb      	ldr	r3, [r7, #12]
    5ba8:	3b20      	subs	r3, #32
    5baa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    5bac:	68fb      	ldr	r3, [r7, #12]
}
    5bae:	4618      	mov	r0, r3
    5bb0:	3714      	adds	r7, #20
    5bb2:	46bd      	mov	sp, r7
    5bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bb8:	4770      	bx	lr
    5bba:	bf00      	nop

00005bbc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    5bbc:	4b06      	ldr	r3, [pc, #24]	; (5bd8 <pxCurrentTCBConst2>)
    5bbe:	6819      	ldr	r1, [r3, #0]
    5bc0:	6808      	ldr	r0, [r1, #0]
    5bc2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5bc6:	f380 8809 	msr	PSP, r0
    5bca:	f04f 0000 	mov.w	r0, #0
    5bce:	f380 8811 	msr	BASEPRI, r0
    5bd2:	f04e 0e0d 	orr.w	lr, lr, #13
    5bd6:	4770      	bx	lr

00005bd8 <pxCurrentTCBConst2>:
    5bd8:	20001410 	.word	0x20001410

00005bdc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    5bdc:	485d      	ldr	r0, [pc, #372]	; (5d54 <prvSetupTimerInterrupt+0x2c>)
    5bde:	6800      	ldr	r0, [r0, #0]
    5be0:	6800      	ldr	r0, [r0, #0]
    5be2:	f380 8808 	msr	MSP, r0
    5be6:	b662      	cpsie	i
    5be8:	df00      	svc	0
    5bea:	bf00      	nop

00005bec <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    5bec:	b580      	push	{r7, lr}
    5bee:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    5bf0:	f64e 5320 	movw	r3, #60704	; 0xed20
    5bf4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5bf8:	f64e 5220 	movw	r2, #60704	; 0xed20
    5bfc:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5c00:	6812      	ldr	r2, [r2, #0]
    5c02:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    5c06:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    5c08:	f64e 5320 	movw	r3, #60704	; 0xed20
    5c0c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5c10:	f64e 5220 	movw	r2, #60704	; 0xed20
    5c14:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5c18:	6812      	ldr	r2, [r2, #0]
    5c1a:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    5c1e:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    5c20:	f000 f882 	bl	5d28 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    5c24:	f240 5334 	movw	r3, #1332	; 0x534
    5c28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c2c:	2200      	movs	r2, #0
    5c2e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    5c30:	f7ff ffd4 	bl	5bdc <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    5c34:	2300      	movs	r3, #0
}
    5c36:	4618      	mov	r0, r3
    5c38:	bd80      	pop	{r7, pc}
    5c3a:	bf00      	nop

00005c3c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    5c3c:	b480      	push	{r7}
    5c3e:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    5c40:	46bd      	mov	sp, r7
    5c42:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c46:	4770      	bx	lr

00005c48 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    5c48:	b480      	push	{r7}
    5c4a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    5c4c:	f64e 5304 	movw	r3, #60676	; 0xed04
    5c50:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5c58:	601a      	str	r2, [r3, #0]
}
    5c5a:	46bd      	mov	sp, r7
    5c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c60:	4770      	bx	lr
    5c62:	bf00      	nop

00005c64 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    5c64:	b480      	push	{r7}
    5c66:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    5c68:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5c6c:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    5c70:	f240 5334 	movw	r3, #1332	; 0x534
    5c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c78:	681b      	ldr	r3, [r3, #0]
    5c7a:	1c5a      	adds	r2, r3, #1
    5c7c:	f240 5334 	movw	r3, #1332	; 0x534
    5c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c84:	601a      	str	r2, [r3, #0]
}
    5c86:	46bd      	mov	sp, r7
    5c88:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c8c:	4770      	bx	lr
    5c8e:	bf00      	nop

00005c90 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    5c90:	b480      	push	{r7}
    5c92:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    5c94:	f240 5334 	movw	r3, #1332	; 0x534
    5c98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c9c:	681b      	ldr	r3, [r3, #0]
    5c9e:	1e5a      	subs	r2, r3, #1
    5ca0:	f240 5334 	movw	r3, #1332	; 0x534
    5ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ca8:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    5caa:	f240 5334 	movw	r3, #1332	; 0x534
    5cae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cb2:	681b      	ldr	r3, [r3, #0]
    5cb4:	2b00      	cmp	r3, #0
    5cb6:	d103      	bne.n	5cc0 <vPortExitCritical+0x30>
	{
		portENABLE_INTERRUPTS();
    5cb8:	f04f 0000 	mov.w	r0, #0
    5cbc:	f380 8811 	msr	BASEPRI, r0
	}
}
    5cc0:	46bd      	mov	sp, r7
    5cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cc6:	4770      	bx	lr

00005cc8 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    5cc8:	f3ef 8009 	mrs	r0, PSP
    5ccc:	4b0c      	ldr	r3, [pc, #48]	; (5d00 <pxCurrentTCBConst>)
    5cce:	681a      	ldr	r2, [r3, #0]
    5cd0:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5cd4:	6010      	str	r0, [r2, #0]
    5cd6:	e92d 4008 	stmdb	sp!, {r3, lr}
    5cda:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5cde:	f380 8811 	msr	BASEPRI, r0
    5ce2:	f7ff fba1 	bl	5428 <vTaskSwitchContext>
    5ce6:	f04f 0000 	mov.w	r0, #0
    5cea:	f380 8811 	msr	BASEPRI, r0
    5cee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5cf2:	6819      	ldr	r1, [r3, #0]
    5cf4:	6808      	ldr	r0, [r1, #0]
    5cf6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    5cfa:	f380 8809 	msr	PSP, r0
    5cfe:	4770      	bx	lr

00005d00 <pxCurrentTCBConst>:
    5d00:	20001410 	.word	0x20001410

00005d04 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    5d04:	b580      	push	{r7, lr}
    5d06:	b082      	sub	sp, #8
    5d08:	af00      	add	r7, sp, #0
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    5d0a:	2300      	movs	r3, #0
    5d0c:	607b      	str	r3, [r7, #4]
    5d0e:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5d12:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    5d16:	f7ff fb0f 	bl	5338 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    5d1a:	f04f 0000 	mov.w	r0, #0
    5d1e:	f380 8811 	msr	BASEPRI, r0
}
    5d22:	3708      	adds	r7, #8
    5d24:	46bd      	mov	sp, r7
    5d26:	bd80      	pop	{r7, pc}

00005d28 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    5d28:	b480      	push	{r7}
    5d2a:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    5d2c:	f24e 0314 	movw	r3, #57364	; 0xe014
    5d30:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5d34:	f644 32bf 	movw	r2, #19391	; 0x4bbf
    5d38:	f2c0 0203 	movt	r2, #3
    5d3c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    5d3e:	f24e 0310 	movw	r3, #57360	; 0xe010
    5d42:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5d46:	2207      	movs	r2, #7
    5d48:	601a      	str	r2, [r3, #0]
}
    5d4a:	46bd      	mov	sp, r7
    5d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d50:	4770      	bx	lr
    5d52:	0000      	.short	0x0000
    5d54:	e000ed08 	.word	0xe000ed08

00005d58 <pvPortMalloc>:
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5d58:	b580      	push	{r7, lr}
    5d5a:	b08a      	sub	sp, #40	; 0x28
    5d5c:	af00      	add	r7, sp, #0
    5d5e:	6078      	str	r0, [r7, #4]
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    5d60:	2300      	movs	r3, #0
    5d62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    5d64:	f7ff fa06 	bl	5174 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    5d68:	f24c 5320 	movw	r3, #50464	; 0xc520
    5d6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d70:	681b      	ldr	r3, [r3, #0]
    5d72:	2b00      	cmp	r3, #0
    5d74:	d130      	bne.n	5dd8 <pvPortMalloc+0x80>
		{
			prvHeapInit();
    5d76:	f24c 5310 	movw	r3, #50448	; 0xc510
    5d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d7e:	f241 5210 	movw	r2, #5392	; 0x1510
    5d82:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5d86:	601a      	str	r2, [r3, #0]
    5d88:	f24c 5310 	movw	r3, #50448	; 0xc510
    5d8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d90:	2200      	movs	r2, #0
    5d92:	605a      	str	r2, [r3, #4]
    5d94:	f24c 5318 	movw	r3, #50456	; 0xc518
    5d98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5d9c:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5da0:	605a      	str	r2, [r3, #4]
    5da2:	f24c 5318 	movw	r3, #50456	; 0xc518
    5da6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5daa:	2200      	movs	r2, #0
    5dac:	601a      	str	r2, [r3, #0]
    5dae:	f241 5310 	movw	r3, #5392	; 0x1510
    5db2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5db6:	617b      	str	r3, [r7, #20]
    5db8:	697b      	ldr	r3, [r7, #20]
    5dba:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
    5dbe:	605a      	str	r2, [r3, #4]
    5dc0:	697a      	ldr	r2, [r7, #20]
    5dc2:	f24c 5318 	movw	r3, #50456	; 0xc518
    5dc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5dca:	6013      	str	r3, [r2, #0]
			xHeapHasBeenInitialised = pdTRUE;
    5dcc:	f24c 5320 	movw	r3, #50464	; 0xc520
    5dd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5dd4:	2201      	movs	r2, #1
    5dd6:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    5dd8:	687b      	ldr	r3, [r7, #4]
    5dda:	2b00      	cmp	r3, #0
    5ddc:	d00d      	beq.n	5dfa <pvPortMalloc+0xa2>
		{
			xWantedSize += heapSTRUCT_SIZE;
    5dde:	2310      	movs	r3, #16
    5de0:	687a      	ldr	r2, [r7, #4]
    5de2:	4413      	add	r3, r2
    5de4:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    5de6:	687b      	ldr	r3, [r7, #4]
    5de8:	f003 0307 	and.w	r3, r3, #7
    5dec:	2b00      	cmp	r3, #0
    5dee:	d004      	beq.n	5dfa <pvPortMalloc+0xa2>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    5df0:	687b      	ldr	r3, [r7, #4]
    5df2:	f023 0307 	bic.w	r3, r3, #7
    5df6:	3308      	adds	r3, #8
    5df8:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
    5dfa:	687b      	ldr	r3, [r7, #4]
    5dfc:	2b00      	cmp	r3, #0
    5dfe:	d068      	beq.n	5ed2 <pvPortMalloc+0x17a>
    5e00:	687b      	ldr	r3, [r7, #4]
    5e02:	f5b3 2f96 	cmp.w	r3, #307200	; 0x4b000
    5e06:	d264      	bcs.n	5ed2 <pvPortMalloc+0x17a>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    5e08:	f24c 5310 	movw	r3, #50448	; 0xc510
    5e0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e10:	623b      	str	r3, [r7, #32]
			pxBlock = xStart.pxNextFreeBlock;
    5e12:	f24c 5310 	movw	r3, #50448	; 0xc510
    5e16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e1a:	681b      	ldr	r3, [r3, #0]
    5e1c:	627b      	str	r3, [r7, #36]	; 0x24
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5e1e:	e004      	b.n	5e2a <pvPortMalloc+0xd2>
			{
				pxPreviousBlock = pxBlock;
    5e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e22:	623b      	str	r3, [r7, #32]
				pxBlock = pxBlock->pxNextFreeBlock;
    5e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e26:	681b      	ldr	r3, [r3, #0]
    5e28:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    5e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e2c:	685a      	ldr	r2, [r3, #4]
    5e2e:	687b      	ldr	r3, [r7, #4]
    5e30:	429a      	cmp	r2, r3
    5e32:	d203      	bcs.n	5e3c <pvPortMalloc+0xe4>
    5e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e36:	681b      	ldr	r3, [r3, #0]
    5e38:	2b00      	cmp	r3, #0
    5e3a:	d1f1      	bne.n	5e20 <pvPortMalloc+0xc8>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    5e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5e3e:	f24c 5318 	movw	r3, #50456	; 0xc518
    5e42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e46:	429a      	cmp	r2, r3
    5e48:	d043      	beq.n	5ed2 <pvPortMalloc+0x17a>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    5e4a:	6a3b      	ldr	r3, [r7, #32]
    5e4c:	681a      	ldr	r2, [r3, #0]
    5e4e:	2310      	movs	r3, #16
    5e50:	4413      	add	r3, r2
    5e52:	61fb      	str	r3, [r7, #28]

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    5e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e56:	681a      	ldr	r2, [r3, #0]
    5e58:	6a3b      	ldr	r3, [r7, #32]
    5e5a:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    5e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e5e:	685a      	ldr	r2, [r3, #4]
    5e60:	687b      	ldr	r3, [r7, #4]
    5e62:	1ad2      	subs	r2, r2, r3
    5e64:	2310      	movs	r3, #16
    5e66:	005b      	lsls	r3, r3, #1
    5e68:	429a      	cmp	r2, r3
    5e6a:	d925      	bls.n	5eb8 <pvPortMalloc+0x160>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
    5e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5e6e:	687b      	ldr	r3, [r7, #4]
    5e70:	4413      	add	r3, r2
    5e72:	613b      	str	r3, [r7, #16]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    5e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e76:	685a      	ldr	r2, [r3, #4]
    5e78:	687b      	ldr	r3, [r7, #4]
    5e7a:	1ad2      	subs	r2, r2, r3
    5e7c:	693b      	ldr	r3, [r7, #16]
    5e7e:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
    5e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5e82:	687a      	ldr	r2, [r7, #4]
    5e84:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    5e86:	693b      	ldr	r3, [r7, #16]
    5e88:	685b      	ldr	r3, [r3, #4]
    5e8a:	60fb      	str	r3, [r7, #12]
    5e8c:	f24c 5310 	movw	r3, #50448	; 0xc510
    5e90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5e94:	61bb      	str	r3, [r7, #24]
    5e96:	e002      	b.n	5e9e <pvPortMalloc+0x146>
    5e98:	69bb      	ldr	r3, [r7, #24]
    5e9a:	681b      	ldr	r3, [r3, #0]
    5e9c:	61bb      	str	r3, [r7, #24]
    5e9e:	69bb      	ldr	r3, [r7, #24]
    5ea0:	681b      	ldr	r3, [r3, #0]
    5ea2:	685a      	ldr	r2, [r3, #4]
    5ea4:	68fb      	ldr	r3, [r7, #12]
    5ea6:	429a      	cmp	r2, r3
    5ea8:	d3f6      	bcc.n	5e98 <pvPortMalloc+0x140>
    5eaa:	69bb      	ldr	r3, [r7, #24]
    5eac:	681a      	ldr	r2, [r3, #0]
    5eae:	693b      	ldr	r3, [r7, #16]
    5eb0:	601a      	str	r2, [r3, #0]
    5eb2:	69bb      	ldr	r3, [r7, #24]
    5eb4:	693a      	ldr	r2, [r7, #16]
    5eb6:	601a      	str	r2, [r3, #0]
				}
				
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    5eb8:	f240 5338 	movw	r3, #1336	; 0x538
    5ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ec0:	681a      	ldr	r2, [r3, #0]
    5ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5ec4:	685b      	ldr	r3, [r3, #4]
    5ec6:	1ad2      	subs	r2, r2, r3
    5ec8:	f240 5338 	movw	r3, #1336	; 0x538
    5ecc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ed0:	601a      	str	r2, [r3, #0]
			}
		}
	}
	xTaskResumeAll();
    5ed2:	f7ff f961 	bl	5198 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    5ed6:	69fb      	ldr	r3, [r7, #28]
}
    5ed8:	4618      	mov	r0, r3
    5eda:	3728      	adds	r7, #40	; 0x28
    5edc:	46bd      	mov	sp, r7
    5ede:	bd80      	pop	{r7, pc}

00005ee0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    5ee0:	b580      	push	{r7, lr}
    5ee2:	b086      	sub	sp, #24
    5ee4:	af00      	add	r7, sp, #0
    5ee6:	6078      	str	r0, [r7, #4]
unsigned char *puc = ( unsigned char * ) pv;
    5ee8:	687b      	ldr	r3, [r7, #4]
    5eea:	613b      	str	r3, [r7, #16]
xBlockLink *pxLink;

	if( pv )
    5eec:	687b      	ldr	r3, [r7, #4]
    5eee:	2b00      	cmp	r3, #0
    5ef0:	d030      	beq.n	5f54 <vPortFree+0x74>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    5ef2:	2310      	movs	r3, #16
    5ef4:	425b      	negs	r3, r3
    5ef6:	693a      	ldr	r2, [r7, #16]
    5ef8:	4413      	add	r3, r2
    5efa:	613b      	str	r3, [r7, #16]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    5efc:	693b      	ldr	r3, [r7, #16]
    5efe:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
    5f00:	f7ff f938 	bl	5174 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
    5f04:	68fb      	ldr	r3, [r7, #12]
    5f06:	685b      	ldr	r3, [r3, #4]
    5f08:	60bb      	str	r3, [r7, #8]
    5f0a:	f24c 5310 	movw	r3, #50448	; 0xc510
    5f0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f12:	617b      	str	r3, [r7, #20]
    5f14:	e002      	b.n	5f1c <vPortFree+0x3c>
    5f16:	697b      	ldr	r3, [r7, #20]
    5f18:	681b      	ldr	r3, [r3, #0]
    5f1a:	617b      	str	r3, [r7, #20]
    5f1c:	697b      	ldr	r3, [r7, #20]
    5f1e:	681b      	ldr	r3, [r3, #0]
    5f20:	685a      	ldr	r2, [r3, #4]
    5f22:	68bb      	ldr	r3, [r7, #8]
    5f24:	429a      	cmp	r2, r3
    5f26:	d3f6      	bcc.n	5f16 <vPortFree+0x36>
    5f28:	697b      	ldr	r3, [r7, #20]
    5f2a:	681a      	ldr	r2, [r3, #0]
    5f2c:	68fb      	ldr	r3, [r7, #12]
    5f2e:	601a      	str	r2, [r3, #0]
    5f30:	697b      	ldr	r3, [r7, #20]
    5f32:	68fa      	ldr	r2, [r7, #12]
    5f34:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    5f36:	68fb      	ldr	r3, [r7, #12]
    5f38:	685a      	ldr	r2, [r3, #4]
    5f3a:	f240 5338 	movw	r3, #1336	; 0x538
    5f3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f42:	681b      	ldr	r3, [r3, #0]
    5f44:	441a      	add	r2, r3
    5f46:	f240 5338 	movw	r3, #1336	; 0x538
    5f4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f4e:	601a      	str	r2, [r3, #0]
		}
		xTaskResumeAll();
    5f50:	f7ff f922 	bl	5198 <xTaskResumeAll>
	}
}
    5f54:	3718      	adds	r7, #24
    5f56:	46bd      	mov	sp, r7
    5f58:	bd80      	pop	{r7, pc}
    5f5a:	bf00      	nop

00005f5c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    5f5c:	b480      	push	{r7}
    5f5e:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    5f60:	f240 5338 	movw	r3, #1336	; 0x538
    5f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f68:	681b      	ldr	r3, [r3, #0]
}
    5f6a:	4618      	mov	r0, r3
    5f6c:	46bd      	mov	sp, r7
    5f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f72:	4770      	bx	lr

00005f74 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    5f74:	b480      	push	{r7}
    5f76:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    5f78:	46bd      	mov	sp, r7
    5f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f7e:	4770      	bx	lr

00005f80 <ground_calibrate>:
 * set to auto1 before MAX_DELAY_FOR_CALIBRATION secondes */
/**User must put verticaly the uav (nose bottom) and push
 * radio roll stick to get new calibration
 * If not, the default calibration is used.
 */
inline void ground_calibrate( void ) {
    5f80:	b580      	push	{r7, lr}
    5f82:	af00      	add	r7, sp, #0
    break;
  case CALIB_DONE:
    break;
  }
#else*/
if(calib_status == NO_CALIB)
    5f84:	f24c 5342 	movw	r3, #50498	; 0xc542
    5f88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f8c:	781b      	ldrb	r3, [r3, #0]
    5f8e:	2b00      	cmp	r3, #0
    5f90:	f040 815d 	bne.w	624e <ground_calibrate+0x2ce>
{
    if (cputime < MAX_DELAY_FOR_CALIBRATION && pprz_mode == PPRZ_MODE_AUTO1 ) {
    5f94:	f24c 532a 	movw	r3, #50474	; 0xc52a
    5f98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5f9c:	881b      	ldrh	r3, [r3, #0]
    5f9e:	2b09      	cmp	r3, #9
    5fa0:	f201 8145 	bhi.w	722e <ground_calibrate+0x12ae>
    5fa4:	f24c 532c 	movw	r3, #50476	; 0xc52c
    5fa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fac:	781b      	ldrb	r3, [r3, #0]
    5fae:	2b01      	cmp	r3, #1
    5fb0:	f041 813d 	bne.w	722e <ground_calibrate+0x12ae>
      calib_status = WAITING_CALIB_CONTRAST;
    5fb4:	f24c 5342 	movw	r3, #50498	; 0xc542
    5fb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fbc:	2201      	movs	r2, #1
    5fbe:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_START();
    5fc0:	f24c 5349 	movw	r3, #50505	; 0xc549
    5fc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fc8:	781a      	ldrb	r2, [r3, #0]
    5fca:	f24c 534a 	movw	r3, #50506	; 0xc54a
    5fce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fd2:	781b      	ldrb	r3, [r3, #0]
    5fd4:	b2db      	uxtb	r3, r3
    5fd6:	429a      	cmp	r2, r3
    5fd8:	d313      	bcc.n	6002 <ground_calibrate+0x82>
    5fda:	f24c 534a 	movw	r3, #50506	; 0xc54a
    5fde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5fe2:	781b      	ldrb	r3, [r3, #0]
    5fe4:	b2db      	uxtb	r3, r3
    5fe6:	461a      	mov	r2, r3
    5fe8:	f24c 5349 	movw	r3, #50505	; 0xc549
    5fec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    5ff0:	781b      	ldrb	r3, [r3, #0]
    5ff2:	1ad3      	subs	r3, r2, r3
    5ff4:	33ff      	adds	r3, #255	; 0xff
    5ff6:	2b04      	cmp	r3, #4
    5ff8:	bfd4      	ite	le
    5ffa:	2300      	movle	r3, #0
    5ffc:	2301      	movgt	r3, #1
    5ffe:	b2db      	uxtb	r3, r3
    6000:	e011      	b.n	6026 <ground_calibrate+0xa6>
    6002:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    600a:	781b      	ldrb	r3, [r3, #0]
    600c:	b2db      	uxtb	r3, r3
    600e:	461a      	mov	r2, r3
    6010:	f24c 5349 	movw	r3, #50505	; 0xc549
    6014:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6018:	781b      	ldrb	r3, [r3, #0]
    601a:	1ad3      	subs	r3, r2, r3
    601c:	2b04      	cmp	r3, #4
    601e:	bfd4      	ite	le
    6020:	2300      	movle	r3, #0
    6022:	2301      	movgt	r3, #1
    6024:	b2db      	uxtb	r3, r3
    6026:	2b00      	cmp	r3, #0
    6028:	f000 8103 	beq.w	6232 <ground_calibrate+0x2b2>
    602c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6030:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6034:	781b      	ldrb	r3, [r3, #0]
    6036:	461a      	mov	r2, r3
    6038:	f24c 534c 	movw	r3, #50508	; 0xc54c
    603c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6040:	2105      	movs	r1, #5
    6042:	5499      	strb	r1, [r3, r2]
    6044:	f24c 5349 	movw	r3, #50505	; 0xc549
    6048:	f2c2 0304 	movt	r3, #8196	; 0x2004
    604c:	781b      	ldrb	r3, [r3, #0]
    604e:	3301      	adds	r3, #1
    6050:	b2da      	uxtb	r2, r3
    6052:	f24c 5349 	movw	r3, #50505	; 0xc549
    6056:	f2c2 0304 	movt	r3, #8196	; 0x2004
    605a:	701a      	strb	r2, [r3, #0]
    605c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6060:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6064:	781b      	ldrb	r3, [r3, #0]
    6066:	2bff      	cmp	r3, #255	; 0xff
    6068:	d105      	bne.n	6076 <ground_calibrate+0xf6>
    606a:	f24c 5349 	movw	r3, #50505	; 0xc549
    606e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6072:	2200      	movs	r2, #0
    6074:	701a      	strb	r2, [r3, #0]
    6076:	f24c 5349 	movw	r3, #50505	; 0xc549
    607a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    607e:	781b      	ldrb	r3, [r3, #0]
    6080:	461a      	mov	r2, r3
    6082:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6086:	f2c2 0304 	movt	r3, #8196	; 0x2004
    608a:	2102      	movs	r1, #2
    608c:	5499      	strb	r1, [r3, r2]
    608e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6096:	781b      	ldrb	r3, [r3, #0]
    6098:	3301      	adds	r3, #1
    609a:	b2da      	uxtb	r2, r3
    609c:	f24c 5349 	movw	r3, #50505	; 0xc549
    60a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60a4:	701a      	strb	r2, [r3, #0]
    60a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    60aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60ae:	781b      	ldrb	r3, [r3, #0]
    60b0:	2bff      	cmp	r3, #255	; 0xff
    60b2:	d105      	bne.n	60c0 <ground_calibrate+0x140>
    60b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    60b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60bc:	2200      	movs	r2, #0
    60be:	701a      	strb	r2, [r3, #0]
    60c0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    60c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60c8:	2202      	movs	r2, #2
    60ca:	701a      	strb	r2, [r3, #0]
    60cc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    60d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60d4:	2202      	movs	r2, #2
    60d6:	701a      	strb	r2, [r3, #0]
    60d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    60dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60e0:	781b      	ldrb	r3, [r3, #0]
    60e2:	461a      	mov	r2, r3
    60e4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    60e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60ec:	7819      	ldrb	r1, [r3, #0]
    60ee:	f24c 534c 	movw	r3, #50508	; 0xc54c
    60f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    60f6:	5499      	strb	r1, [r3, r2]
    60f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    60fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6100:	781b      	ldrb	r3, [r3, #0]
    6102:	3301      	adds	r3, #1
    6104:	b2da      	uxtb	r2, r3
    6106:	f24c 5349 	movw	r3, #50505	; 0xc549
    610a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    610e:	701a      	strb	r2, [r3, #0]
    6110:	f24c 5349 	movw	r3, #50505	; 0xc549
    6114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6118:	781b      	ldrb	r3, [r3, #0]
    611a:	2bff      	cmp	r3, #255	; 0xff
    611c:	d105      	bne.n	612a <ground_calibrate+0x1aa>
    611e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6126:	2200      	movs	r2, #0
    6128:	701a      	strb	r2, [r3, #0]
    612a:	f24c 5349 	movw	r3, #50505	; 0xc549
    612e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6132:	781b      	ldrb	r3, [r3, #0]
    6134:	461a      	mov	r2, r3
    6136:	f24c 634e 	movw	r3, #50766	; 0xc64e
    613a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    613e:	7819      	ldrb	r1, [r3, #0]
    6140:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6148:	5499      	strb	r1, [r3, r2]
    614a:	f24c 5349 	movw	r3, #50505	; 0xc549
    614e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6152:	781b      	ldrb	r3, [r3, #0]
    6154:	3301      	adds	r3, #1
    6156:	b2da      	uxtb	r2, r3
    6158:	f24c 5349 	movw	r3, #50505	; 0xc549
    615c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6160:	701a      	strb	r2, [r3, #0]
    6162:	f24c 5349 	movw	r3, #50505	; 0xc549
    6166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    616a:	781b      	ldrb	r3, [r3, #0]
    616c:	2bff      	cmp	r3, #255	; 0xff
    616e:	d105      	bne.n	617c <ground_calibrate+0x1fc>
    6170:	f24c 5349 	movw	r3, #50505	; 0xc549
    6174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6178:	2200      	movs	r2, #0
    617a:	701a      	strb	r2, [r3, #0]
    617c:	f242 0339 	movw	r3, #8249	; 0x2039
    6180:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6184:	781b      	ldrb	r3, [r3, #0]
    6186:	b2db      	uxtb	r3, r3
    6188:	f003 0310 	and.w	r3, r3, #16
    618c:	2b00      	cmp	r3, #0
    618e:	f041 804e 	bne.w	722e <ground_calibrate+0x12ae>
    6192:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    619a:	781b      	ldrb	r3, [r3, #0]
    619c:	b2db      	uxtb	r3, r3
    619e:	461a      	mov	r2, r3
    61a0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    61a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61a8:	5c9a      	ldrb	r2, [r3, r2]
    61aa:	f24c 634b 	movw	r3, #50763	; 0xc64b
    61ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61b2:	701a      	strb	r2, [r3, #0]
    61b4:	f24c 634c 	movw	r3, #50764	; 0xc64c
    61b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61bc:	2200      	movs	r2, #0
    61be:	701a      	strb	r2, [r3, #0]
    61c0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    61c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61c8:	781b      	ldrb	r3, [r3, #0]
    61ca:	b2db      	uxtb	r3, r3
    61cc:	3301      	adds	r3, #1
    61ce:	b2da      	uxtb	r2, r3
    61d0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    61d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61d8:	701a      	strb	r2, [r3, #0]
    61da:	f24c 534a 	movw	r3, #50506	; 0xc54a
    61de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61e2:	781b      	ldrb	r3, [r3, #0]
    61e4:	b2db      	uxtb	r3, r3
    61e6:	2bff      	cmp	r3, #255	; 0xff
    61e8:	d105      	bne.n	61f6 <ground_calibrate+0x276>
    61ea:	f24c 534a 	movw	r3, #50506	; 0xc54a
    61ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    61f2:	2200      	movs	r2, #0
    61f4:	701a      	strb	r2, [r3, #0]
    61f6:	f242 0338 	movw	r3, #8248	; 0x2038
    61fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    61fe:	f242 0238 	movw	r2, #8248	; 0x2038
    6202:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6206:	7812      	ldrb	r2, [r2, #0]
    6208:	b2d2      	uxtb	r2, r2
    620a:	f042 0201 	orr.w	r2, r2, #1
    620e:	b2d2      	uxtb	r2, r2
    6210:	701a      	strb	r2, [r3, #0]
    6212:	f242 0339 	movw	r3, #8249	; 0x2039
    6216:	f2c2 0300 	movt	r3, #8192	; 0x2000
    621a:	f242 0239 	movw	r2, #8249	; 0x2039
    621e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6222:	7812      	ldrb	r2, [r2, #0]
    6224:	b2d2      	uxtb	r2, r2
    6226:	f042 0210 	orr.w	r2, r2, #16
    622a:	b2d2      	uxtb	r2, r2
    622c:	701a      	strb	r2, [r3, #0]
    622e:	f000 bffe 	b.w	722e <ground_calibrate+0x12ae>
    6232:	f24c 5348 	movw	r3, #50504	; 0xc548
    6236:	f2c2 0304 	movt	r3, #8196	; 0x2004
    623a:	781b      	ldrb	r3, [r3, #0]
    623c:	3301      	adds	r3, #1
    623e:	b2da      	uxtb	r2, r3
    6240:	f24c 5348 	movw	r3, #50504	; 0xc548
    6244:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6248:	701a      	strb	r2, [r3, #0]
    624a:	f000 bff0 	b.w	722e <ground_calibrate+0x12ae>
    }
}
else if (calib_status == WAITING_CALIB_CONTRAST)
    624e:	f24c 5342 	movw	r3, #50498	; 0xc542
    6252:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6256:	781b      	ldrb	r3, [r3, #0]
    6258:	2b01      	cmp	r3, #1
    625a:	f040 87e8 	bne.w	722e <ground_calibrate+0x12ae>
{
    if (STICK_PUSHED(from_fbw.channels[RADIO_ROLL])) {
    625e:	f24c 6350 	movw	r3, #50768	; 0xc650
    6262:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6266:	885b      	ldrh	r3, [r3, #2]
    6268:	b21b      	sxth	r3, r3
    626a:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    626e:	db09      	blt.n	6284 <ground_calibrate+0x304>
    6270:	f24c 6350 	movw	r3, #50768	; 0xc650
    6274:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6278:	885b      	ldrh	r3, [r3, #2]
    627a:	b21b      	sxth	r3, r3
    627c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    6280:	f340 87d5 	ble.w	722e <ground_calibrate+0x12ae>
      ir_gain_calib();
    6284:	f00b fd54 	bl	11d30 <ir_gain_calib>
      estimator_rad_of_ir = ir_rad_of_ir;
    6288:	f240 5348 	movw	r3, #1352	; 0x548
    628c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6290:	681a      	ldr	r2, [r3, #0]
    6292:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    6296:	f2c2 0304 	movt	r3, #8196	; 0x2004
    629a:	601a      	str	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    629c:	f24c 5349 	movw	r3, #50505	; 0xc549
    62a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62a4:	781a      	ldrb	r2, [r3, #0]
    62a6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    62aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62ae:	781b      	ldrb	r3, [r3, #0]
    62b0:	b2db      	uxtb	r3, r3
    62b2:	429a      	cmp	r2, r3
    62b4:	d313      	bcc.n	62de <ground_calibrate+0x35e>
    62b6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    62ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62be:	781b      	ldrb	r3, [r3, #0]
    62c0:	b2db      	uxtb	r3, r3
    62c2:	461a      	mov	r2, r3
    62c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    62c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62cc:	781b      	ldrb	r3, [r3, #0]
    62ce:	1ad3      	subs	r3, r2, r3
    62d0:	33ff      	adds	r3, #255	; 0xff
    62d2:	2b14      	cmp	r3, #20
    62d4:	bfd4      	ite	le
    62d6:	2300      	movle	r3, #0
    62d8:	2301      	movgt	r3, #1
    62da:	b2db      	uxtb	r3, r3
    62dc:	e011      	b.n	6302 <ground_calibrate+0x382>
    62de:	f24c 534a 	movw	r3, #50506	; 0xc54a
    62e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62e6:	781b      	ldrb	r3, [r3, #0]
    62e8:	b2db      	uxtb	r3, r3
    62ea:	461a      	mov	r2, r3
    62ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    62f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    62f4:	781b      	ldrb	r3, [r3, #0]
    62f6:	1ad3      	subs	r3, r2, r3
    62f8:	2b14      	cmp	r3, #20
    62fa:	bfd4      	ite	le
    62fc:	2300      	movle	r3, #0
    62fe:	2301      	movgt	r3, #1
    6300:	b2db      	uxtb	r3, r3
    6302:	2b00      	cmp	r3, #0
    6304:	f000 85a6 	beq.w	6e54 <ground_calibrate+0xed4>
    6308:	f24c 5349 	movw	r3, #50505	; 0xc549
    630c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6310:	781b      	ldrb	r3, [r3, #0]
    6312:	461a      	mov	r2, r3
    6314:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6318:	f2c2 0304 	movt	r3, #8196	; 0x2004
    631c:	2105      	movs	r1, #5
    631e:	5499      	strb	r1, [r3, r2]
    6320:	f24c 5349 	movw	r3, #50505	; 0xc549
    6324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6328:	781b      	ldrb	r3, [r3, #0]
    632a:	3301      	adds	r3, #1
    632c:	b2da      	uxtb	r2, r3
    632e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6336:	701a      	strb	r2, [r3, #0]
    6338:	f24c 5349 	movw	r3, #50505	; 0xc549
    633c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6340:	781b      	ldrb	r3, [r3, #0]
    6342:	2bff      	cmp	r3, #255	; 0xff
    6344:	d105      	bne.n	6352 <ground_calibrate+0x3d2>
    6346:	f24c 5349 	movw	r3, #50505	; 0xc549
    634a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    634e:	2200      	movs	r2, #0
    6350:	701a      	strb	r2, [r3, #0]
    6352:	f24c 5349 	movw	r3, #50505	; 0xc549
    6356:	f2c2 0304 	movt	r3, #8196	; 0x2004
    635a:	781b      	ldrb	r3, [r3, #0]
    635c:	461a      	mov	r2, r3
    635e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6362:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6366:	2105      	movs	r1, #5
    6368:	5499      	strb	r1, [r3, r2]
    636a:	f24c 5349 	movw	r3, #50505	; 0xc549
    636e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6372:	781b      	ldrb	r3, [r3, #0]
    6374:	3301      	adds	r3, #1
    6376:	b2da      	uxtb	r2, r3
    6378:	f24c 5349 	movw	r3, #50505	; 0xc549
    637c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6380:	701a      	strb	r2, [r3, #0]
    6382:	f24c 5349 	movw	r3, #50505	; 0xc549
    6386:	f2c2 0304 	movt	r3, #8196	; 0x2004
    638a:	781b      	ldrb	r3, [r3, #0]
    638c:	2bff      	cmp	r3, #255	; 0xff
    638e:	d105      	bne.n	639c <ground_calibrate+0x41c>
    6390:	f24c 5349 	movw	r3, #50505	; 0xc549
    6394:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6398:	2200      	movs	r2, #0
    639a:	701a      	strb	r2, [r3, #0]
    639c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    63a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63a4:	2205      	movs	r2, #5
    63a6:	701a      	strb	r2, [r3, #0]
    63a8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    63ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63b0:	2205      	movs	r2, #5
    63b2:	701a      	strb	r2, [r3, #0]
    63b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    63b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63bc:	781b      	ldrb	r3, [r3, #0]
    63be:	461a      	mov	r2, r3
    63c0:	f64c 3340 	movw	r3, #52032	; 0xcb40
    63c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63c8:	7819      	ldrb	r1, [r3, #0]
    63ca:	f24c 534c 	movw	r3, #50508	; 0xc54c
    63ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63d2:	5499      	strb	r1, [r3, r2]
    63d4:	f64c 3340 	movw	r3, #52032	; 0xcb40
    63d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63dc:	781a      	ldrb	r2, [r3, #0]
    63de:	f24c 634d 	movw	r3, #50765	; 0xc64d
    63e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63e6:	781b      	ldrb	r3, [r3, #0]
    63e8:	4413      	add	r3, r2
    63ea:	b2da      	uxtb	r2, r3
    63ec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    63f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63f4:	701a      	strb	r2, [r3, #0]
    63f6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    63fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    63fe:	781a      	ldrb	r2, [r3, #0]
    6400:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6408:	781b      	ldrb	r3, [r3, #0]
    640a:	4413      	add	r3, r2
    640c:	b2da      	uxtb	r2, r3
    640e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6412:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6416:	701a      	strb	r2, [r3, #0]
    6418:	f24c 5349 	movw	r3, #50505	; 0xc549
    641c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6420:	781b      	ldrb	r3, [r3, #0]
    6422:	3301      	adds	r3, #1
    6424:	b2da      	uxtb	r2, r3
    6426:	f24c 5349 	movw	r3, #50505	; 0xc549
    642a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    642e:	701a      	strb	r2, [r3, #0]
    6430:	f24c 5349 	movw	r3, #50505	; 0xc549
    6434:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6438:	781b      	ldrb	r3, [r3, #0]
    643a:	2bff      	cmp	r3, #255	; 0xff
    643c:	d105      	bne.n	644a <ground_calibrate+0x4ca>
    643e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6442:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6446:	2200      	movs	r2, #0
    6448:	701a      	strb	r2, [r3, #0]
    644a:	f24c 5349 	movw	r3, #50505	; 0xc549
    644e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6452:	781b      	ldrb	r3, [r3, #0]
    6454:	461a      	mov	r2, r3
    6456:	f64c 3340 	movw	r3, #52032	; 0xcb40
    645a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    645e:	7859      	ldrb	r1, [r3, #1]
    6460:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6464:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6468:	5499      	strb	r1, [r3, r2]
    646a:	4bd2      	ldr	r3, [pc, #840]	; (67b4 <ground_calibrate+0x834>)
    646c:	781a      	ldrb	r2, [r3, #0]
    646e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6476:	781b      	ldrb	r3, [r3, #0]
    6478:	4413      	add	r3, r2
    647a:	b2da      	uxtb	r2, r3
    647c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6480:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6484:	701a      	strb	r2, [r3, #0]
    6486:	f24c 634e 	movw	r3, #50766	; 0xc64e
    648a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    648e:	781a      	ldrb	r2, [r3, #0]
    6490:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6498:	781b      	ldrb	r3, [r3, #0]
    649a:	4413      	add	r3, r2
    649c:	b2da      	uxtb	r2, r3
    649e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    64a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64a6:	701a      	strb	r2, [r3, #0]
    64a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    64ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64b0:	781b      	ldrb	r3, [r3, #0]
    64b2:	3301      	adds	r3, #1
    64b4:	b2da      	uxtb	r2, r3
    64b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    64ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64be:	701a      	strb	r2, [r3, #0]
    64c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    64c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64c8:	781b      	ldrb	r3, [r3, #0]
    64ca:	2bff      	cmp	r3, #255	; 0xff
    64cc:	d105      	bne.n	64da <ground_calibrate+0x55a>
    64ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    64d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64d6:	2200      	movs	r2, #0
    64d8:	701a      	strb	r2, [r3, #0]
    64da:	f24c 5349 	movw	r3, #50505	; 0xc549
    64de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64e2:	781b      	ldrb	r3, [r3, #0]
    64e4:	461a      	mov	r2, r3
    64e6:	f64c 3340 	movw	r3, #52032	; 0xcb40
    64ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64ee:	7899      	ldrb	r1, [r3, #2]
    64f0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    64f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    64f8:	5499      	strb	r1, [r3, r2]
    64fa:	4baf      	ldr	r3, [pc, #700]	; (67b8 <ground_calibrate+0x838>)
    64fc:	781a      	ldrb	r2, [r3, #0]
    64fe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6502:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6506:	781b      	ldrb	r3, [r3, #0]
    6508:	4413      	add	r3, r2
    650a:	b2da      	uxtb	r2, r3
    650c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6510:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6514:	701a      	strb	r2, [r3, #0]
    6516:	f24c 634e 	movw	r3, #50766	; 0xc64e
    651a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    651e:	781a      	ldrb	r2, [r3, #0]
    6520:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6524:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6528:	781b      	ldrb	r3, [r3, #0]
    652a:	4413      	add	r3, r2
    652c:	b2da      	uxtb	r2, r3
    652e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6532:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6536:	701a      	strb	r2, [r3, #0]
    6538:	f24c 5349 	movw	r3, #50505	; 0xc549
    653c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6540:	781b      	ldrb	r3, [r3, #0]
    6542:	3301      	adds	r3, #1
    6544:	b2da      	uxtb	r2, r3
    6546:	f24c 5349 	movw	r3, #50505	; 0xc549
    654a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    654e:	701a      	strb	r2, [r3, #0]
    6550:	f24c 5349 	movw	r3, #50505	; 0xc549
    6554:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6558:	781b      	ldrb	r3, [r3, #0]
    655a:	2bff      	cmp	r3, #255	; 0xff
    655c:	d105      	bne.n	656a <ground_calibrate+0x5ea>
    655e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6562:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6566:	2200      	movs	r2, #0
    6568:	701a      	strb	r2, [r3, #0]
    656a:	f24c 5349 	movw	r3, #50505	; 0xc549
    656e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6572:	781b      	ldrb	r3, [r3, #0]
    6574:	461a      	mov	r2, r3
    6576:	f64c 3340 	movw	r3, #52032	; 0xcb40
    657a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    657e:	78d9      	ldrb	r1, [r3, #3]
    6580:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6588:	5499      	strb	r1, [r3, r2]
    658a:	4b8c      	ldr	r3, [pc, #560]	; (67bc <ground_calibrate+0x83c>)
    658c:	781a      	ldrb	r2, [r3, #0]
    658e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6596:	781b      	ldrb	r3, [r3, #0]
    6598:	4413      	add	r3, r2
    659a:	b2da      	uxtb	r2, r3
    659c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    65a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65a4:	701a      	strb	r2, [r3, #0]
    65a6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    65aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65ae:	781a      	ldrb	r2, [r3, #0]
    65b0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    65b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65b8:	781b      	ldrb	r3, [r3, #0]
    65ba:	4413      	add	r3, r2
    65bc:	b2da      	uxtb	r2, r3
    65be:	f24c 634e 	movw	r3, #50766	; 0xc64e
    65c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65c6:	701a      	strb	r2, [r3, #0]
    65c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    65cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65d0:	781b      	ldrb	r3, [r3, #0]
    65d2:	3301      	adds	r3, #1
    65d4:	b2da      	uxtb	r2, r3
    65d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    65da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65de:	701a      	strb	r2, [r3, #0]
    65e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    65e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65e8:	781b      	ldrb	r3, [r3, #0]
    65ea:	2bff      	cmp	r3, #255	; 0xff
    65ec:	d105      	bne.n	65fa <ground_calibrate+0x67a>
    65ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    65f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    65f6:	2200      	movs	r2, #0
    65f8:	701a      	strb	r2, [r3, #0]
    65fa:	f24c 5349 	movw	r3, #50505	; 0xc549
    65fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6602:	781b      	ldrb	r3, [r3, #0]
    6604:	461a      	mov	r2, r3
    6606:	f64c 3344 	movw	r3, #52036	; 0xcb44
    660a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    660e:	7819      	ldrb	r1, [r3, #0]
    6610:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6618:	5499      	strb	r1, [r3, r2]
    661a:	f64c 3344 	movw	r3, #52036	; 0xcb44
    661e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6622:	781a      	ldrb	r2, [r3, #0]
    6624:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    662c:	781b      	ldrb	r3, [r3, #0]
    662e:	4413      	add	r3, r2
    6630:	b2da      	uxtb	r2, r3
    6632:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6636:	f2c2 0304 	movt	r3, #8196	; 0x2004
    663a:	701a      	strb	r2, [r3, #0]
    663c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6640:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6644:	781a      	ldrb	r2, [r3, #0]
    6646:	f24c 634d 	movw	r3, #50765	; 0xc64d
    664a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    664e:	781b      	ldrb	r3, [r3, #0]
    6650:	4413      	add	r3, r2
    6652:	b2da      	uxtb	r2, r3
    6654:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6658:	f2c2 0304 	movt	r3, #8196	; 0x2004
    665c:	701a      	strb	r2, [r3, #0]
    665e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6666:	781b      	ldrb	r3, [r3, #0]
    6668:	3301      	adds	r3, #1
    666a:	b2da      	uxtb	r2, r3
    666c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6674:	701a      	strb	r2, [r3, #0]
    6676:	f24c 5349 	movw	r3, #50505	; 0xc549
    667a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    667e:	781b      	ldrb	r3, [r3, #0]
    6680:	2bff      	cmp	r3, #255	; 0xff
    6682:	d105      	bne.n	6690 <ground_calibrate+0x710>
    6684:	f24c 5349 	movw	r3, #50505	; 0xc549
    6688:	f2c2 0304 	movt	r3, #8196	; 0x2004
    668c:	2200      	movs	r2, #0
    668e:	701a      	strb	r2, [r3, #0]
    6690:	f24c 5349 	movw	r3, #50505	; 0xc549
    6694:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6698:	781b      	ldrb	r3, [r3, #0]
    669a:	461a      	mov	r2, r3
    669c:	f64c 3344 	movw	r3, #52036	; 0xcb44
    66a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66a4:	7859      	ldrb	r1, [r3, #1]
    66a6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    66aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66ae:	5499      	strb	r1, [r3, r2]
    66b0:	4b43      	ldr	r3, [pc, #268]	; (67c0 <ground_calibrate+0x840>)
    66b2:	781a      	ldrb	r2, [r3, #0]
    66b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    66b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66bc:	781b      	ldrb	r3, [r3, #0]
    66be:	4413      	add	r3, r2
    66c0:	b2da      	uxtb	r2, r3
    66c2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    66c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66ca:	701a      	strb	r2, [r3, #0]
    66cc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    66d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66d4:	781a      	ldrb	r2, [r3, #0]
    66d6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    66da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66de:	781b      	ldrb	r3, [r3, #0]
    66e0:	4413      	add	r3, r2
    66e2:	b2da      	uxtb	r2, r3
    66e4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    66e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66ec:	701a      	strb	r2, [r3, #0]
    66ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    66f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    66f6:	781b      	ldrb	r3, [r3, #0]
    66f8:	3301      	adds	r3, #1
    66fa:	b2da      	uxtb	r2, r3
    66fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    6700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6704:	701a      	strb	r2, [r3, #0]
    6706:	f24c 5349 	movw	r3, #50505	; 0xc549
    670a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    670e:	781b      	ldrb	r3, [r3, #0]
    6710:	2bff      	cmp	r3, #255	; 0xff
    6712:	d105      	bne.n	6720 <ground_calibrate+0x7a0>
    6714:	f24c 5349 	movw	r3, #50505	; 0xc549
    6718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    671c:	2200      	movs	r2, #0
    671e:	701a      	strb	r2, [r3, #0]
    6720:	f24c 5349 	movw	r3, #50505	; 0xc549
    6724:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6728:	781b      	ldrb	r3, [r3, #0]
    672a:	461a      	mov	r2, r3
    672c:	f64c 3344 	movw	r3, #52036	; 0xcb44
    6730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6734:	7899      	ldrb	r1, [r3, #2]
    6736:	f24c 534c 	movw	r3, #50508	; 0xc54c
    673a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    673e:	5499      	strb	r1, [r3, r2]
    6740:	4b20      	ldr	r3, [pc, #128]	; (67c4 <ground_calibrate+0x844>)
    6742:	781a      	ldrb	r2, [r3, #0]
    6744:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    674c:	781b      	ldrb	r3, [r3, #0]
    674e:	4413      	add	r3, r2
    6750:	b2da      	uxtb	r2, r3
    6752:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6756:	f2c2 0304 	movt	r3, #8196	; 0x2004
    675a:	701a      	strb	r2, [r3, #0]
    675c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6764:	781a      	ldrb	r2, [r3, #0]
    6766:	f24c 634d 	movw	r3, #50765	; 0xc64d
    676a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    676e:	781b      	ldrb	r3, [r3, #0]
    6770:	4413      	add	r3, r2
    6772:	b2da      	uxtb	r2, r3
    6774:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    677c:	701a      	strb	r2, [r3, #0]
    677e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6786:	781b      	ldrb	r3, [r3, #0]
    6788:	3301      	adds	r3, #1
    678a:	b2da      	uxtb	r2, r3
    678c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6794:	701a      	strb	r2, [r3, #0]
    6796:	f24c 5349 	movw	r3, #50505	; 0xc549
    679a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    679e:	781b      	ldrb	r3, [r3, #0]
    67a0:	2bff      	cmp	r3, #255	; 0xff
    67a2:	d111      	bne.n	67c8 <ground_calibrate+0x848>
    67a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    67a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67ac:	2200      	movs	r2, #0
    67ae:	701a      	strb	r2, [r3, #0]
    67b0:	e00a      	b.n	67c8 <ground_calibrate+0x848>
    67b2:	bf00      	nop
    67b4:	2004cb41 	.word	0x2004cb41
    67b8:	2004cb42 	.word	0x2004cb42
    67bc:	2004cb43 	.word	0x2004cb43
    67c0:	2004cb45 	.word	0x2004cb45
    67c4:	2004cb46 	.word	0x2004cb46
    67c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    67cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67d0:	781b      	ldrb	r3, [r3, #0]
    67d2:	461a      	mov	r2, r3
    67d4:	f64c 3344 	movw	r3, #52036	; 0xcb44
    67d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67dc:	78d9      	ldrb	r1, [r3, #3]
    67de:	f24c 534c 	movw	r3, #50508	; 0xc54c
    67e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67e6:	5499      	strb	r1, [r3, r2]
    67e8:	4bd3      	ldr	r3, [pc, #844]	; (6b38 <ground_calibrate+0xbb8>)
    67ea:	781a      	ldrb	r2, [r3, #0]
    67ec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    67f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    67f4:	781b      	ldrb	r3, [r3, #0]
    67f6:	4413      	add	r3, r2
    67f8:	b2da      	uxtb	r2, r3
    67fa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    67fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6802:	701a      	strb	r2, [r3, #0]
    6804:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    680c:	781a      	ldrb	r2, [r3, #0]
    680e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6816:	781b      	ldrb	r3, [r3, #0]
    6818:	4413      	add	r3, r2
    681a:	b2da      	uxtb	r2, r3
    681c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6820:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6824:	701a      	strb	r2, [r3, #0]
    6826:	f24c 5349 	movw	r3, #50505	; 0xc549
    682a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    682e:	781b      	ldrb	r3, [r3, #0]
    6830:	3301      	adds	r3, #1
    6832:	b2da      	uxtb	r2, r3
    6834:	f24c 5349 	movw	r3, #50505	; 0xc549
    6838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    683c:	701a      	strb	r2, [r3, #0]
    683e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6846:	781b      	ldrb	r3, [r3, #0]
    6848:	2bff      	cmp	r3, #255	; 0xff
    684a:	d105      	bne.n	6858 <ground_calibrate+0x8d8>
    684c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6850:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6854:	2200      	movs	r2, #0
    6856:	701a      	strb	r2, [r3, #0]
    6858:	f24c 5349 	movw	r3, #50505	; 0xc549
    685c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6860:	781b      	ldrb	r3, [r3, #0]
    6862:	461a      	mov	r2, r3
    6864:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    6868:	f2c2 0304 	movt	r3, #8196	; 0x2004
    686c:	7819      	ldrb	r1, [r3, #0]
    686e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6876:	5499      	strb	r1, [r3, r2]
    6878:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    687c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6880:	781a      	ldrb	r2, [r3, #0]
    6882:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6886:	f2c2 0304 	movt	r3, #8196	; 0x2004
    688a:	781b      	ldrb	r3, [r3, #0]
    688c:	4413      	add	r3, r2
    688e:	b2da      	uxtb	r2, r3
    6890:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6894:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6898:	701a      	strb	r2, [r3, #0]
    689a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    689e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68a2:	781a      	ldrb	r2, [r3, #0]
    68a4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    68a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ac:	781b      	ldrb	r3, [r3, #0]
    68ae:	4413      	add	r3, r2
    68b0:	b2da      	uxtb	r2, r3
    68b2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    68b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ba:	701a      	strb	r2, [r3, #0]
    68bc:	f24c 5349 	movw	r3, #50505	; 0xc549
    68c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68c4:	781b      	ldrb	r3, [r3, #0]
    68c6:	3301      	adds	r3, #1
    68c8:	b2da      	uxtb	r2, r3
    68ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    68ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68d2:	701a      	strb	r2, [r3, #0]
    68d4:	f24c 5349 	movw	r3, #50505	; 0xc549
    68d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68dc:	781b      	ldrb	r3, [r3, #0]
    68de:	2bff      	cmp	r3, #255	; 0xff
    68e0:	d105      	bne.n	68ee <ground_calibrate+0x96e>
    68e2:	f24c 5349 	movw	r3, #50505	; 0xc549
    68e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68ea:	2200      	movs	r2, #0
    68ec:	701a      	strb	r2, [r3, #0]
    68ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    68f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    68f6:	781b      	ldrb	r3, [r3, #0]
    68f8:	461a      	mov	r2, r3
    68fa:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    68fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6902:	7859      	ldrb	r1, [r3, #1]
    6904:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    690c:	5499      	strb	r1, [r3, r2]
    690e:	4b8b      	ldr	r3, [pc, #556]	; (6b3c <ground_calibrate+0xbbc>)
    6910:	781a      	ldrb	r2, [r3, #0]
    6912:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6916:	f2c2 0304 	movt	r3, #8196	; 0x2004
    691a:	781b      	ldrb	r3, [r3, #0]
    691c:	4413      	add	r3, r2
    691e:	b2da      	uxtb	r2, r3
    6920:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6924:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6928:	701a      	strb	r2, [r3, #0]
    692a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    692e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6932:	781a      	ldrb	r2, [r3, #0]
    6934:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    693c:	781b      	ldrb	r3, [r3, #0]
    693e:	4413      	add	r3, r2
    6940:	b2da      	uxtb	r2, r3
    6942:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6946:	f2c2 0304 	movt	r3, #8196	; 0x2004
    694a:	701a      	strb	r2, [r3, #0]
    694c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6950:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6954:	781b      	ldrb	r3, [r3, #0]
    6956:	3301      	adds	r3, #1
    6958:	b2da      	uxtb	r2, r3
    695a:	f24c 5349 	movw	r3, #50505	; 0xc549
    695e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6962:	701a      	strb	r2, [r3, #0]
    6964:	f24c 5349 	movw	r3, #50505	; 0xc549
    6968:	f2c2 0304 	movt	r3, #8196	; 0x2004
    696c:	781b      	ldrb	r3, [r3, #0]
    696e:	2bff      	cmp	r3, #255	; 0xff
    6970:	d105      	bne.n	697e <ground_calibrate+0x9fe>
    6972:	f24c 5349 	movw	r3, #50505	; 0xc549
    6976:	f2c2 0304 	movt	r3, #8196	; 0x2004
    697a:	2200      	movs	r2, #0
    697c:	701a      	strb	r2, [r3, #0]
    697e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6982:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6986:	781b      	ldrb	r3, [r3, #0]
    6988:	461a      	mov	r2, r3
    698a:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    698e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6992:	7899      	ldrb	r1, [r3, #2]
    6994:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    699c:	5499      	strb	r1, [r3, r2]
    699e:	4b68      	ldr	r3, [pc, #416]	; (6b40 <ground_calibrate+0xbc0>)
    69a0:	781a      	ldrb	r2, [r3, #0]
    69a2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    69a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69aa:	781b      	ldrb	r3, [r3, #0]
    69ac:	4413      	add	r3, r2
    69ae:	b2da      	uxtb	r2, r3
    69b0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    69b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69b8:	701a      	strb	r2, [r3, #0]
    69ba:	f24c 634e 	movw	r3, #50766	; 0xc64e
    69be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69c2:	781a      	ldrb	r2, [r3, #0]
    69c4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    69c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69cc:	781b      	ldrb	r3, [r3, #0]
    69ce:	4413      	add	r3, r2
    69d0:	b2da      	uxtb	r2, r3
    69d2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    69d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69da:	701a      	strb	r2, [r3, #0]
    69dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    69e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69e4:	781b      	ldrb	r3, [r3, #0]
    69e6:	3301      	adds	r3, #1
    69e8:	b2da      	uxtb	r2, r3
    69ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    69ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69f2:	701a      	strb	r2, [r3, #0]
    69f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    69f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    69fc:	781b      	ldrb	r3, [r3, #0]
    69fe:	2bff      	cmp	r3, #255	; 0xff
    6a00:	d105      	bne.n	6a0e <ground_calibrate+0xa8e>
    6a02:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a0a:	2200      	movs	r2, #0
    6a0c:	701a      	strb	r2, [r3, #0]
    6a0e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a16:	781b      	ldrb	r3, [r3, #0]
    6a18:	461a      	mov	r2, r3
    6a1a:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    6a1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a22:	78d9      	ldrb	r1, [r3, #3]
    6a24:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a2c:	5499      	strb	r1, [r3, r2]
    6a2e:	4b45      	ldr	r3, [pc, #276]	; (6b44 <ground_calibrate+0xbc4>)
    6a30:	781a      	ldrb	r2, [r3, #0]
    6a32:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6a36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a3a:	781b      	ldrb	r3, [r3, #0]
    6a3c:	4413      	add	r3, r2
    6a3e:	b2da      	uxtb	r2, r3
    6a40:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a48:	701a      	strb	r2, [r3, #0]
    6a4a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a52:	781a      	ldrb	r2, [r3, #0]
    6a54:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a5c:	781b      	ldrb	r3, [r3, #0]
    6a5e:	4413      	add	r3, r2
    6a60:	b2da      	uxtb	r2, r3
    6a62:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6a66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a6a:	701a      	strb	r2, [r3, #0]
    6a6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a74:	781b      	ldrb	r3, [r3, #0]
    6a76:	3301      	adds	r3, #1
    6a78:	b2da      	uxtb	r2, r3
    6a7a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a82:	701a      	strb	r2, [r3, #0]
    6a84:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a8c:	781b      	ldrb	r3, [r3, #0]
    6a8e:	2bff      	cmp	r3, #255	; 0xff
    6a90:	d105      	bne.n	6a9e <ground_calibrate+0xb1e>
    6a92:	f24c 5349 	movw	r3, #50505	; 0xc549
    6a96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6a9a:	2200      	movs	r2, #0
    6a9c:	701a      	strb	r2, [r3, #0]
    6a9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6aa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6aa6:	781b      	ldrb	r3, [r3, #0]
    6aa8:	461a      	mov	r2, r3
    6aaa:	f240 5342 	movw	r3, #1346	; 0x542
    6aae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ab2:	7819      	ldrb	r1, [r3, #0]
    6ab4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6ab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6abc:	5499      	strb	r1, [r3, r2]
    6abe:	f240 5342 	movw	r3, #1346	; 0x542
    6ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ac6:	781a      	ldrb	r2, [r3, #0]
    6ac8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ad0:	781b      	ldrb	r3, [r3, #0]
    6ad2:	4413      	add	r3, r2
    6ad4:	b2da      	uxtb	r2, r3
    6ad6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6ada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ade:	701a      	strb	r2, [r3, #0]
    6ae0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6ae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ae8:	781a      	ldrb	r2, [r3, #0]
    6aea:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6aee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6af2:	781b      	ldrb	r3, [r3, #0]
    6af4:	4413      	add	r3, r2
    6af6:	b2da      	uxtb	r2, r3
    6af8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6afc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b00:	701a      	strb	r2, [r3, #0]
    6b02:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b0a:	781b      	ldrb	r3, [r3, #0]
    6b0c:	3301      	adds	r3, #1
    6b0e:	b2da      	uxtb	r2, r3
    6b10:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b18:	701a      	strb	r2, [r3, #0]
    6b1a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b22:	781b      	ldrb	r3, [r3, #0]
    6b24:	2bff      	cmp	r3, #255	; 0xff
    6b26:	d10f      	bne.n	6b48 <ground_calibrate+0xbc8>
    6b28:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b30:	2200      	movs	r2, #0
    6b32:	701a      	strb	r2, [r3, #0]
    6b34:	e008      	b.n	6b48 <ground_calibrate+0xbc8>
    6b36:	bf00      	nop
    6b38:	2004cb47 	.word	0x2004cb47
    6b3c:	2004cb3d 	.word	0x2004cb3d
    6b40:	2004cb3e 	.word	0x2004cb3e
    6b44:	2004cb3f 	.word	0x2004cb3f
    6b48:	f24c 5349 	movw	r3, #50505	; 0xc549
    6b4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b50:	781b      	ldrb	r3, [r3, #0]
    6b52:	461a      	mov	r2, r3
    6b54:	f240 5342 	movw	r3, #1346	; 0x542
    6b58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b5c:	7859      	ldrb	r1, [r3, #1]
    6b5e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6b62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b66:	5499      	strb	r1, [r3, r2]
    6b68:	4bd4      	ldr	r3, [pc, #848]	; (6ebc <ground_calibrate+0xf3c>)
    6b6a:	781a      	ldrb	r2, [r3, #0]
    6b6c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b74:	781b      	ldrb	r3, [r3, #0]
    6b76:	4413      	add	r3, r2
    6b78:	b2da      	uxtb	r2, r3
    6b7a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6b7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b82:	701a      	strb	r2, [r3, #0]
    6b84:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6b88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b8c:	781a      	ldrb	r2, [r3, #0]
    6b8e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6b92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6b96:	781b      	ldrb	r3, [r3, #0]
    6b98:	4413      	add	r3, r2
    6b9a:	b2da      	uxtb	r2, r3
    6b9c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6ba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ba4:	701a      	strb	r2, [r3, #0]
    6ba6:	f24c 5349 	movw	r3, #50505	; 0xc549
    6baa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bae:	781b      	ldrb	r3, [r3, #0]
    6bb0:	3301      	adds	r3, #1
    6bb2:	b2da      	uxtb	r2, r3
    6bb4:	f24c 5349 	movw	r3, #50505	; 0xc549
    6bb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bbc:	701a      	strb	r2, [r3, #0]
    6bbe:	f24c 5349 	movw	r3, #50505	; 0xc549
    6bc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bc6:	781b      	ldrb	r3, [r3, #0]
    6bc8:	2bff      	cmp	r3, #255	; 0xff
    6bca:	d105      	bne.n	6bd8 <ground_calibrate+0xc58>
    6bcc:	f24c 5349 	movw	r3, #50505	; 0xc549
    6bd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bd4:	2200      	movs	r2, #0
    6bd6:	701a      	strb	r2, [r3, #0]
    6bd8:	f24c 5349 	movw	r3, #50505	; 0xc549
    6bdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6be0:	781b      	ldrb	r3, [r3, #0]
    6be2:	461a      	mov	r2, r3
    6be4:	f240 5344 	movw	r3, #1348	; 0x544
    6be8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bec:	7819      	ldrb	r1, [r3, #0]
    6bee:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6bf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6bf6:	5499      	strb	r1, [r3, r2]
    6bf8:	f240 5344 	movw	r3, #1348	; 0x544
    6bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c00:	781a      	ldrb	r2, [r3, #0]
    6c02:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6c06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c0a:	781b      	ldrb	r3, [r3, #0]
    6c0c:	4413      	add	r3, r2
    6c0e:	b2da      	uxtb	r2, r3
    6c10:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6c14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c18:	701a      	strb	r2, [r3, #0]
    6c1a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6c1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c22:	781a      	ldrb	r2, [r3, #0]
    6c24:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6c28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c2c:	781b      	ldrb	r3, [r3, #0]
    6c2e:	4413      	add	r3, r2
    6c30:	b2da      	uxtb	r2, r3
    6c32:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6c36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c3a:	701a      	strb	r2, [r3, #0]
    6c3c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c44:	781b      	ldrb	r3, [r3, #0]
    6c46:	3301      	adds	r3, #1
    6c48:	b2da      	uxtb	r2, r3
    6c4a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c52:	701a      	strb	r2, [r3, #0]
    6c54:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c5c:	781b      	ldrb	r3, [r3, #0]
    6c5e:	2bff      	cmp	r3, #255	; 0xff
    6c60:	d105      	bne.n	6c6e <ground_calibrate+0xcee>
    6c62:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c6a:	2200      	movs	r2, #0
    6c6c:	701a      	strb	r2, [r3, #0]
    6c6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6c72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c76:	781b      	ldrb	r3, [r3, #0]
    6c78:	461a      	mov	r2, r3
    6c7a:	f240 5344 	movw	r3, #1348	; 0x544
    6c7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c82:	7859      	ldrb	r1, [r3, #1]
    6c84:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6c88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c8c:	5499      	strb	r1, [r3, r2]
    6c8e:	4b8c      	ldr	r3, [pc, #560]	; (6ec0 <ground_calibrate+0xf40>)
    6c90:	781a      	ldrb	r2, [r3, #0]
    6c92:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6c96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6c9a:	781b      	ldrb	r3, [r3, #0]
    6c9c:	4413      	add	r3, r2
    6c9e:	b2da      	uxtb	r2, r3
    6ca0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6ca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ca8:	701a      	strb	r2, [r3, #0]
    6caa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6cae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cb2:	781a      	ldrb	r2, [r3, #0]
    6cb4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6cb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cbc:	781b      	ldrb	r3, [r3, #0]
    6cbe:	4413      	add	r3, r2
    6cc0:	b2da      	uxtb	r2, r3
    6cc2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6cc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cca:	701a      	strb	r2, [r3, #0]
    6ccc:	f24c 5349 	movw	r3, #50505	; 0xc549
    6cd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cd4:	781b      	ldrb	r3, [r3, #0]
    6cd6:	3301      	adds	r3, #1
    6cd8:	b2da      	uxtb	r2, r3
    6cda:	f24c 5349 	movw	r3, #50505	; 0xc549
    6cde:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ce2:	701a      	strb	r2, [r3, #0]
    6ce4:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cec:	781b      	ldrb	r3, [r3, #0]
    6cee:	2bff      	cmp	r3, #255	; 0xff
    6cf0:	d105      	bne.n	6cfe <ground_calibrate+0xd7e>
    6cf2:	f24c 5349 	movw	r3, #50505	; 0xc549
    6cf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6cfa:	2200      	movs	r2, #0
    6cfc:	701a      	strb	r2, [r3, #0]
    6cfe:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d06:	781b      	ldrb	r3, [r3, #0]
    6d08:	461a      	mov	r2, r3
    6d0a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6d0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d12:	7819      	ldrb	r1, [r3, #0]
    6d14:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6d18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d1c:	5499      	strb	r1, [r3, r2]
    6d1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d26:	781b      	ldrb	r3, [r3, #0]
    6d28:	3301      	adds	r3, #1
    6d2a:	b2da      	uxtb	r2, r3
    6d2c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d34:	701a      	strb	r2, [r3, #0]
    6d36:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d3e:	781b      	ldrb	r3, [r3, #0]
    6d40:	2bff      	cmp	r3, #255	; 0xff
    6d42:	d105      	bne.n	6d50 <ground_calibrate+0xdd0>
    6d44:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d4c:	2200      	movs	r2, #0
    6d4e:	701a      	strb	r2, [r3, #0]
    6d50:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d58:	781b      	ldrb	r3, [r3, #0]
    6d5a:	461a      	mov	r2, r3
    6d5c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6d60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d64:	7819      	ldrb	r1, [r3, #0]
    6d66:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6d6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d6e:	5499      	strb	r1, [r3, r2]
    6d70:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d78:	781b      	ldrb	r3, [r3, #0]
    6d7a:	3301      	adds	r3, #1
    6d7c:	b2da      	uxtb	r2, r3
    6d7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d86:	701a      	strb	r2, [r3, #0]
    6d88:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d90:	781b      	ldrb	r3, [r3, #0]
    6d92:	2bff      	cmp	r3, #255	; 0xff
    6d94:	d105      	bne.n	6da2 <ground_calibrate+0xe22>
    6d96:	f24c 5349 	movw	r3, #50505	; 0xc549
    6d9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6d9e:	2200      	movs	r2, #0
    6da0:	701a      	strb	r2, [r3, #0]
    6da2:	f242 0339 	movw	r3, #8249	; 0x2039
    6da6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6daa:	781b      	ldrb	r3, [r3, #0]
    6dac:	b2db      	uxtb	r3, r3
    6dae:	f003 0310 	and.w	r3, r3, #16
    6db2:	2b00      	cmp	r3, #0
    6db4:	d15a      	bne.n	6e6c <ground_calibrate+0xeec>
    6db6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6dba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dbe:	781b      	ldrb	r3, [r3, #0]
    6dc0:	b2db      	uxtb	r3, r3
    6dc2:	461a      	mov	r2, r3
    6dc4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6dc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dcc:	5c9a      	ldrb	r2, [r3, r2]
    6dce:	f24c 634b 	movw	r3, #50763	; 0xc64b
    6dd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dd6:	701a      	strb	r2, [r3, #0]
    6dd8:	f24c 634c 	movw	r3, #50764	; 0xc64c
    6ddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6de0:	2200      	movs	r2, #0
    6de2:	701a      	strb	r2, [r3, #0]
    6de4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6de8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dec:	781b      	ldrb	r3, [r3, #0]
    6dee:	b2db      	uxtb	r3, r3
    6df0:	3301      	adds	r3, #1
    6df2:	b2da      	uxtb	r2, r3
    6df4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6df8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6dfc:	701a      	strb	r2, [r3, #0]
    6dfe:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6e02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e06:	781b      	ldrb	r3, [r3, #0]
    6e08:	b2db      	uxtb	r3, r3
    6e0a:	2bff      	cmp	r3, #255	; 0xff
    6e0c:	d105      	bne.n	6e1a <ground_calibrate+0xe9a>
    6e0e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6e12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e16:	2200      	movs	r2, #0
    6e18:	701a      	strb	r2, [r3, #0]
    6e1a:	f242 0338 	movw	r3, #8248	; 0x2038
    6e1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e22:	f242 0238 	movw	r2, #8248	; 0x2038
    6e26:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6e2a:	7812      	ldrb	r2, [r2, #0]
    6e2c:	b2d2      	uxtb	r2, r2
    6e2e:	f042 0201 	orr.w	r2, r2, #1
    6e32:	b2d2      	uxtb	r2, r2
    6e34:	701a      	strb	r2, [r3, #0]
    6e36:	f242 0339 	movw	r3, #8249	; 0x2039
    6e3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e3e:	f242 0239 	movw	r2, #8249	; 0x2039
    6e42:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6e46:	7812      	ldrb	r2, [r2, #0]
    6e48:	b2d2      	uxtb	r2, r2
    6e4a:	f042 0210 	orr.w	r2, r2, #16
    6e4e:	b2d2      	uxtb	r2, r2
    6e50:	701a      	strb	r2, [r3, #0]
    6e52:	e00b      	b.n	6e6c <ground_calibrate+0xeec>
    6e54:	f24c 5348 	movw	r3, #50504	; 0xc548
    6e58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e5c:	781b      	ldrb	r3, [r3, #0]
    6e5e:	3301      	adds	r3, #1
    6e60:	b2da      	uxtb	r2, r3
    6e62:	f24c 5348 	movw	r3, #50504	; 0xc548
    6e66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e6a:	701a      	strb	r2, [r3, #0]
      calib_status = CALIB_DONE;
    6e6c:	f24c 5342 	movw	r3, #50498	; 0xc542
    6e70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e74:	2202      	movs	r2, #2
    6e76:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_CALIB_CONTRAST(&ir_contrast);
    6e78:	f24c 5349 	movw	r3, #50505	; 0xc549
    6e7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e80:	781a      	ldrb	r2, [r3, #0]
    6e82:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6e86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e8a:	781b      	ldrb	r3, [r3, #0]
    6e8c:	b2db      	uxtb	r3, r3
    6e8e:	429a      	cmp	r2, r3
    6e90:	d318      	bcc.n	6ec4 <ground_calibrate+0xf44>
    6e92:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6e96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6e9a:	781b      	ldrb	r3, [r3, #0]
    6e9c:	b2db      	uxtb	r3, r3
    6e9e:	461a      	mov	r2, r3
    6ea0:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ea4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ea8:	781b      	ldrb	r3, [r3, #0]
    6eaa:	1ad3      	subs	r3, r2, r3
    6eac:	33ff      	adds	r3, #255	; 0xff
    6eae:	2b06      	cmp	r3, #6
    6eb0:	bfd4      	ite	le
    6eb2:	2300      	movle	r3, #0
    6eb4:	2301      	movgt	r3, #1
    6eb6:	b2db      	uxtb	r3, r3
    6eb8:	e016      	b.n	6ee8 <ground_calibrate+0xf68>
    6eba:	bf00      	nop
    6ebc:	20000543 	.word	0x20000543
    6ec0:	20000545 	.word	0x20000545
    6ec4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    6ec8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ecc:	781b      	ldrb	r3, [r3, #0]
    6ece:	b2db      	uxtb	r3, r3
    6ed0:	461a      	mov	r2, r3
    6ed2:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6eda:	781b      	ldrb	r3, [r3, #0]
    6edc:	1ad3      	subs	r3, r2, r3
    6ede:	2b06      	cmp	r3, #6
    6ee0:	bfd4      	ite	le
    6ee2:	2300      	movle	r3, #0
    6ee4:	2301      	movgt	r3, #1
    6ee6:	b2db      	uxtb	r3, r3
    6ee8:	2b00      	cmp	r3, #0
    6eea:	f000 8194 	beq.w	7216 <ground_calibrate+0x1296>
    6eee:	f24c 5349 	movw	r3, #50505	; 0xc549
    6ef2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ef6:	781b      	ldrb	r3, [r3, #0]
    6ef8:	461a      	mov	r2, r3
    6efa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6efe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f02:	2105      	movs	r1, #5
    6f04:	5499      	strb	r1, [r3, r2]
    6f06:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f0e:	781b      	ldrb	r3, [r3, #0]
    6f10:	3301      	adds	r3, #1
    6f12:	b2da      	uxtb	r2, r3
    6f14:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f1c:	701a      	strb	r2, [r3, #0]
    6f1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f26:	781b      	ldrb	r3, [r3, #0]
    6f28:	2bff      	cmp	r3, #255	; 0xff
    6f2a:	d105      	bne.n	6f38 <ground_calibrate+0xfb8>
    6f2c:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f34:	2200      	movs	r2, #0
    6f36:	701a      	strb	r2, [r3, #0]
    6f38:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f40:	781b      	ldrb	r3, [r3, #0]
    6f42:	461a      	mov	r2, r3
    6f44:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6f48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f4c:	2103      	movs	r1, #3
    6f4e:	5499      	strb	r1, [r3, r2]
    6f50:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f58:	781b      	ldrb	r3, [r3, #0]
    6f5a:	3301      	adds	r3, #1
    6f5c:	b2da      	uxtb	r2, r3
    6f5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f66:	701a      	strb	r2, [r3, #0]
    6f68:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f70:	781b      	ldrb	r3, [r3, #0]
    6f72:	2bff      	cmp	r3, #255	; 0xff
    6f74:	d105      	bne.n	6f82 <ground_calibrate+0x1002>
    6f76:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f7e:	2200      	movs	r2, #0
    6f80:	701a      	strb	r2, [r3, #0]
    6f82:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6f86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f8a:	2203      	movs	r2, #3
    6f8c:	701a      	strb	r2, [r3, #0]
    6f8e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6f92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6f96:	2203      	movs	r2, #3
    6f98:	701a      	strb	r2, [r3, #0]
    6f9a:	f24c 5349 	movw	r3, #50505	; 0xc549
    6f9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fa2:	781b      	ldrb	r3, [r3, #0]
    6fa4:	461a      	mov	r2, r3
    6fa6:	f240 5340 	movw	r3, #1344	; 0x540
    6faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fae:	7819      	ldrb	r1, [r3, #0]
    6fb0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    6fb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fb8:	5499      	strb	r1, [r3, r2]
    6fba:	f240 5340 	movw	r3, #1344	; 0x540
    6fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fc2:	781a      	ldrb	r2, [r3, #0]
    6fc4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6fc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fcc:	781b      	ldrb	r3, [r3, #0]
    6fce:	4413      	add	r3, r2
    6fd0:	b2da      	uxtb	r2, r3
    6fd2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6fd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fda:	701a      	strb	r2, [r3, #0]
    6fdc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6fe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fe4:	781a      	ldrb	r2, [r3, #0]
    6fe6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    6fea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6fee:	781b      	ldrb	r3, [r3, #0]
    6ff0:	4413      	add	r3, r2
    6ff2:	b2da      	uxtb	r2, r3
    6ff4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    6ff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    6ffc:	701a      	strb	r2, [r3, #0]
    6ffe:	f24c 5349 	movw	r3, #50505	; 0xc549
    7002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7006:	781b      	ldrb	r3, [r3, #0]
    7008:	3301      	adds	r3, #1
    700a:	b2da      	uxtb	r2, r3
    700c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7014:	701a      	strb	r2, [r3, #0]
    7016:	f24c 5349 	movw	r3, #50505	; 0xc549
    701a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    701e:	781b      	ldrb	r3, [r3, #0]
    7020:	2bff      	cmp	r3, #255	; 0xff
    7022:	d105      	bne.n	7030 <ground_calibrate+0x10b0>
    7024:	f24c 5349 	movw	r3, #50505	; 0xc549
    7028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    702c:	2200      	movs	r2, #0
    702e:	701a      	strb	r2, [r3, #0]
    7030:	f24c 5349 	movw	r3, #50505	; 0xc549
    7034:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7038:	781b      	ldrb	r3, [r3, #0]
    703a:	461a      	mov	r2, r3
    703c:	f240 5340 	movw	r3, #1344	; 0x540
    7040:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7044:	7859      	ldrb	r1, [r3, #1]
    7046:	f24c 534c 	movw	r3, #50508	; 0xc54c
    704a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    704e:	5499      	strb	r1, [r3, r2]
    7050:	4b77      	ldr	r3, [pc, #476]	; (7230 <ground_calibrate+0x12b0>)
    7052:	781a      	ldrb	r2, [r3, #0]
    7054:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    705c:	781b      	ldrb	r3, [r3, #0]
    705e:	4413      	add	r3, r2
    7060:	b2da      	uxtb	r2, r3
    7062:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7066:	f2c2 0304 	movt	r3, #8196	; 0x2004
    706a:	701a      	strb	r2, [r3, #0]
    706c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7070:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7074:	781a      	ldrb	r2, [r3, #0]
    7076:	f24c 634d 	movw	r3, #50765	; 0xc64d
    707a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    707e:	781b      	ldrb	r3, [r3, #0]
    7080:	4413      	add	r3, r2
    7082:	b2da      	uxtb	r2, r3
    7084:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    708c:	701a      	strb	r2, [r3, #0]
    708e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7092:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7096:	781b      	ldrb	r3, [r3, #0]
    7098:	3301      	adds	r3, #1
    709a:	b2da      	uxtb	r2, r3
    709c:	f24c 5349 	movw	r3, #50505	; 0xc549
    70a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70a4:	701a      	strb	r2, [r3, #0]
    70a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    70aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70ae:	781b      	ldrb	r3, [r3, #0]
    70b0:	2bff      	cmp	r3, #255	; 0xff
    70b2:	d105      	bne.n	70c0 <ground_calibrate+0x1140>
    70b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    70b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70bc:	2200      	movs	r2, #0
    70be:	701a      	strb	r2, [r3, #0]
    70c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    70c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70c8:	781b      	ldrb	r3, [r3, #0]
    70ca:	461a      	mov	r2, r3
    70cc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    70d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70d4:	7819      	ldrb	r1, [r3, #0]
    70d6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    70da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70de:	5499      	strb	r1, [r3, r2]
    70e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    70e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70e8:	781b      	ldrb	r3, [r3, #0]
    70ea:	3301      	adds	r3, #1
    70ec:	b2da      	uxtb	r2, r3
    70ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    70f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    70f6:	701a      	strb	r2, [r3, #0]
    70f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    70fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7100:	781b      	ldrb	r3, [r3, #0]
    7102:	2bff      	cmp	r3, #255	; 0xff
    7104:	d105      	bne.n	7112 <ground_calibrate+0x1192>
    7106:	f24c 5349 	movw	r3, #50505	; 0xc549
    710a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    710e:	2200      	movs	r2, #0
    7110:	701a      	strb	r2, [r3, #0]
    7112:	f24c 5349 	movw	r3, #50505	; 0xc549
    7116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    711a:	781b      	ldrb	r3, [r3, #0]
    711c:	461a      	mov	r2, r3
    711e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7126:	7819      	ldrb	r1, [r3, #0]
    7128:	f24c 534c 	movw	r3, #50508	; 0xc54c
    712c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7130:	5499      	strb	r1, [r3, r2]
    7132:	f24c 5349 	movw	r3, #50505	; 0xc549
    7136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    713a:	781b      	ldrb	r3, [r3, #0]
    713c:	3301      	adds	r3, #1
    713e:	b2da      	uxtb	r2, r3
    7140:	f24c 5349 	movw	r3, #50505	; 0xc549
    7144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7148:	701a      	strb	r2, [r3, #0]
    714a:	f24c 5349 	movw	r3, #50505	; 0xc549
    714e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7152:	781b      	ldrb	r3, [r3, #0]
    7154:	2bff      	cmp	r3, #255	; 0xff
    7156:	d105      	bne.n	7164 <ground_calibrate+0x11e4>
    7158:	f24c 5349 	movw	r3, #50505	; 0xc549
    715c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7160:	2200      	movs	r2, #0
    7162:	701a      	strb	r2, [r3, #0]
    7164:	f242 0339 	movw	r3, #8249	; 0x2039
    7168:	f2c2 0300 	movt	r3, #8192	; 0x2000
    716c:	781b      	ldrb	r3, [r3, #0]
    716e:	b2db      	uxtb	r3, r3
    7170:	f003 0310 	and.w	r3, r3, #16
    7174:	2b00      	cmp	r3, #0
    7176:	d15a      	bne.n	722e <ground_calibrate+0x12ae>
    7178:	f24c 534a 	movw	r3, #50506	; 0xc54a
    717c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7180:	781b      	ldrb	r3, [r3, #0]
    7182:	b2db      	uxtb	r3, r3
    7184:	461a      	mov	r2, r3
    7186:	f24c 534c 	movw	r3, #50508	; 0xc54c
    718a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    718e:	5c9a      	ldrb	r2, [r3, r2]
    7190:	f24c 634b 	movw	r3, #50763	; 0xc64b
    7194:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7198:	701a      	strb	r2, [r3, #0]
    719a:	f24c 634c 	movw	r3, #50764	; 0xc64c
    719e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71a2:	2200      	movs	r2, #0
    71a4:	701a      	strb	r2, [r3, #0]
    71a6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    71aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71ae:	781b      	ldrb	r3, [r3, #0]
    71b0:	b2db      	uxtb	r3, r3
    71b2:	3301      	adds	r3, #1
    71b4:	b2da      	uxtb	r2, r3
    71b6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    71ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71be:	701a      	strb	r2, [r3, #0]
    71c0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    71c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71c8:	781b      	ldrb	r3, [r3, #0]
    71ca:	b2db      	uxtb	r3, r3
    71cc:	2bff      	cmp	r3, #255	; 0xff
    71ce:	d105      	bne.n	71dc <ground_calibrate+0x125c>
    71d0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    71d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    71d8:	2200      	movs	r2, #0
    71da:	701a      	strb	r2, [r3, #0]
    71dc:	f242 0338 	movw	r3, #8248	; 0x2038
    71e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    71e4:	f242 0238 	movw	r2, #8248	; 0x2038
    71e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    71ec:	7812      	ldrb	r2, [r2, #0]
    71ee:	b2d2      	uxtb	r2, r2
    71f0:	f042 0201 	orr.w	r2, r2, #1
    71f4:	b2d2      	uxtb	r2, r2
    71f6:	701a      	strb	r2, [r3, #0]
    71f8:	f242 0339 	movw	r3, #8249	; 0x2039
    71fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7200:	f242 0239 	movw	r2, #8249	; 0x2039
    7204:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7208:	7812      	ldrb	r2, [r2, #0]
    720a:	b2d2      	uxtb	r2, r2
    720c:	f042 0210 	orr.w	r2, r2, #16
    7210:	b2d2      	uxtb	r2, r2
    7212:	701a      	strb	r2, [r3, #0]
    7214:	e00b      	b.n	722e <ground_calibrate+0x12ae>
    7216:	f24c 5348 	movw	r3, #50504	; 0xc548
    721a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    721e:	781b      	ldrb	r3, [r3, #0]
    7220:	3301      	adds	r3, #1
    7222:	b2da      	uxtb	r2, r3
    7224:	f24c 5348 	movw	r3, #50504	; 0xc548
    7228:	f2c2 0304 	movt	r3, #8196	; 0x2004
    722c:	701a      	strb	r2, [r3, #0]
    }
}
else {}

//#endif
}
    722e:	bd80      	pop	{r7, pc}
    7230:	20000541 	.word	0x20000541

00007234 <pprz_mode_update>:

/** \fn inline uint8_t pprz_mode_update( void )
 *  \brief Update paparazzi mode
 */
inline uint8_t pprz_mode_update( void ) {
    7234:	b480      	push	{r7}
    7236:	b083      	sub	sp, #12
    7238:	af00      	add	r7, sp, #0
  /** We remain in home mode until explicit reset from the RC */
  if (pprz_mode != PPRZ_MODE_HOME || CheckEvent(rc_event_1)) {
    723a:	f24c 532c 	movw	r3, #50476	; 0xc52c
    723e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7242:	781b      	ldrb	r3, [r3, #0]
    7244:	2b03      	cmp	r3, #3
    7246:	d10c      	bne.n	7262 <pprz_mode_update+0x2e>
    7248:	f24c 5330 	movw	r3, #50480	; 0xc530
    724c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7250:	781b      	ldrb	r3, [r3, #0]
    7252:	2b00      	cmp	r3, #0
    7254:	d032      	beq.n	72bc <pprz_mode_update+0x88>
    7256:	f24c 5330 	movw	r3, #50480	; 0xc530
    725a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    725e:	2200      	movs	r2, #0
    7260:	701a      	strb	r2, [r3, #0]
    ModeUpdate(pprz_mode, PPRZ_MODE_OF_PULSE(from_fbw.channels[RADIO_MODE], from_fbw.status));
    7262:	f24c 6350 	movw	r3, #50768	; 0xc650
    7266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    726a:	891b      	ldrh	r3, [r3, #8]
    726c:	b21b      	sxth	r3, r3
    726e:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    7272:	dc0f      	bgt.n	7294 <pprz_mode_update+0x60>
    7274:	f24c 6350 	movw	r3, #50768	; 0xc650
    7278:	f2c2 0304 	movt	r3, #8196	; 0x2004
    727c:	891b      	ldrh	r3, [r3, #8]
    727e:	b21a      	sxth	r2, r3
    7280:	f64e 5341 	movw	r3, #60737	; 0xed41
    7284:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    7288:	429a      	cmp	r2, r3
    728a:	bfb4      	ite	lt
    728c:	2300      	movlt	r3, #0
    728e:	2301      	movge	r3, #1
    7290:	b2db      	uxtb	r3, r3
    7292:	e000      	b.n	7296 <pprz_mode_update+0x62>
    7294:	2302      	movs	r3, #2
    7296:	71fb      	strb	r3, [r7, #7]
    7298:	f24c 532c 	movw	r3, #50476	; 0xc52c
    729c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72a0:	781b      	ldrb	r3, [r3, #0]
    72a2:	79fa      	ldrb	r2, [r7, #7]
    72a4:	429a      	cmp	r2, r3
    72a6:	d007      	beq.n	72b8 <pprz_mode_update+0x84>
    72a8:	f24c 532c 	movw	r3, #50476	; 0xc52c
    72ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72b0:	79fa      	ldrb	r2, [r7, #7]
    72b2:	701a      	strb	r2, [r3, #0]
    72b4:	2301      	movs	r3, #1
    72b6:	e002      	b.n	72be <pprz_mode_update+0x8a>
    72b8:	2300      	movs	r3, #0
    72ba:	e000      	b.n	72be <pprz_mode_update+0x8a>
  } else
    return FALSE;
    72bc:	2300      	movs	r3, #0
}
    72be:	4618      	mov	r0, r3
    72c0:	370c      	adds	r7, #12
    72c2:	46bd      	mov	sp, r7
    72c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    72c8:	4770      	bx	lr
    72ca:	bf00      	nop

000072cc <ir_estim_mode_update>:

#ifdef RADIO_LLS
/** \fn inline uint8_t ir_estim_mode_update( void )
 *  \brief update ir estimation if RADIO_LLS is true \n
 */
inline uint8_t ir_estim_mode_update( void ) {
    72cc:	b480      	push	{r7}
    72ce:	b083      	sub	sp, #12
    72d0:	af00      	add	r7, sp, #0
  ModeUpdate(ir_estim_mode, IR_ESTIM_MODE_OF_PULSE(from_fbw.channels[RADIO_LLS]));
    72d2:	f24c 6350 	movw	r3, #50768	; 0xc650
    72d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    72da:	89db      	ldrh	r3, [r3, #14]
    72dc:	b21a      	sxth	r2, r3
    72de:	f640 437f 	movw	r3, #3199	; 0xc7f
    72e2:	429a      	cmp	r2, r3
    72e4:	bfd4      	ite	le
    72e6:	2300      	movle	r3, #0
    72e8:	2301      	movgt	r3, #1
    72ea:	b2db      	uxtb	r3, r3
    72ec:	71fb      	strb	r3, [r7, #7]
    72ee:	f240 533c 	movw	r3, #1340	; 0x53c
    72f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72f6:	781b      	ldrb	r3, [r3, #0]
    72f8:	79fa      	ldrb	r2, [r7, #7]
    72fa:	429a      	cmp	r2, r3
    72fc:	d007      	beq.n	730e <ir_estim_mode_update+0x42>
    72fe:	f240 533c 	movw	r3, #1340	; 0x53c
    7302:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7306:	79fa      	ldrb	r2, [r7, #7]
    7308:	701a      	strb	r2, [r3, #0]
    730a:	2301      	movs	r3, #1
    730c:	e000      	b.n	7310 <ir_estim_mode_update+0x44>
    730e:	2300      	movs	r3, #0
}
    7310:	4618      	mov	r0, r3
    7312:	370c      	adds	r7, #12
    7314:	46bd      	mov	sp, r7
    7316:	f85d 7b04 	ldr.w	r7, [sp], #4
    731a:	4770      	bx	lr

0000731c <mcu1_status_update>:


/** \fn inline uint8_t mcu1_status_update( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t mcu1_status_update( void ) {
    731c:	b480      	push	{r7}
    731e:	b083      	sub	sp, #12
    7320:	af00      	add	r7, sp, #0
  uint8_t new_mode = from_fbw.status;
    7322:	f24c 6350 	movw	r3, #50768	; 0xc650
    7326:	f2c2 0304 	movt	r3, #8196	; 0x2004
    732a:	7cdb      	ldrb	r3, [r3, #19]
    732c:	71fb      	strb	r3, [r7, #7]
  if (mcu1_status != new_mode) {
    732e:	f24c 5333 	movw	r3, #50483	; 0xc533
    7332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7336:	781b      	ldrb	r3, [r3, #0]
    7338:	79fa      	ldrb	r2, [r7, #7]
    733a:	429a      	cmp	r2, r3
    733c:	d017      	beq.n	736e <mcu1_status_update+0x52>
    bool_t changed = ((mcu1_status&MASK_FBW_CHANGED) != (new_mode&MASK_FBW_CHANGED));
    733e:	f24c 5333 	movw	r3, #50483	; 0xc533
    7342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7346:	781b      	ldrb	r3, [r3, #0]
    7348:	461a      	mov	r2, r3
    734a:	79fb      	ldrb	r3, [r7, #7]
    734c:	4053      	eors	r3, r2
    734e:	f003 0303 	and.w	r3, r3, #3
    7352:	2b00      	cmp	r3, #0
    7354:	bf0c      	ite	eq
    7356:	2300      	moveq	r3, #0
    7358:	2301      	movne	r3, #1
    735a:	b2db      	uxtb	r3, r3
    735c:	71bb      	strb	r3, [r7, #6]
    mcu1_status = new_mode;
    735e:	f24c 5333 	movw	r3, #50483	; 0xc533
    7362:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7366:	79fa      	ldrb	r2, [r7, #7]
    7368:	701a      	strb	r2, [r3, #0]
    return changed;
    736a:	79bb      	ldrb	r3, [r7, #6]
    736c:	e000      	b.n	7370 <mcu1_status_update+0x54>
  }
  return FALSE;
    736e:	2300      	movs	r3, #0
}
    7370:	4618      	mov	r0, r3
    7372:	370c      	adds	r7, #12
    7374:	46bd      	mov	sp, r7
    7376:	f85d 7b04 	ldr.w	r7, [sp], #4
    737a:	4770      	bx	lr

0000737c <events_update>:
 EventUpdate(_cpt, (inflight_calib_mode==IF_CALIB_MODE_NONE && from_fbw.channels[_channel]<(int)(-0.75*MAX_PPRZ)), _event)

/** \fn static inline void events_update( void )
 *  @@@@@ A FIXER @@@@@
 */
static inline void events_update( void ) {
    737c:	b480      	push	{r7}
    737e:	af00      	add	r7, sp, #0
  static uint16_t event1_cpt = 0;
  static uint16_t event2_cpt = 0;
  EventPos(event1_cpt, RADIO_GAIN1, rc_event_1);
    7380:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    7384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7388:	781b      	ldrb	r3, [r3, #0]
    738a:	2b00      	cmp	r3, #0
    738c:	d12a      	bne.n	73e4 <events_update+0x68>
    738e:	f24c 6350 	movw	r3, #50768	; 0xc650
    7392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7396:	895b      	ldrh	r3, [r3, #10]
    7398:	b21b      	sxth	r3, r3
    739a:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
    739e:	dd21      	ble.n	73e4 <events_update+0x68>
    73a0:	f24c 5344 	movw	r3, #50500	; 0xc544
    73a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73a8:	881b      	ldrh	r3, [r3, #0]
    73aa:	2b13      	cmp	r3, #19
    73ac:	d819      	bhi.n	73e2 <events_update+0x66>
    73ae:	f24c 5344 	movw	r3, #50500	; 0xc544
    73b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73b6:	881b      	ldrh	r3, [r3, #0]
    73b8:	3301      	adds	r3, #1
    73ba:	b29a      	uxth	r2, r3
    73bc:	f24c 5344 	movw	r3, #50500	; 0xc544
    73c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73c4:	801a      	strh	r2, [r3, #0]
    73c6:	f24c 5344 	movw	r3, #50500	; 0xc544
    73ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73ce:	881b      	ldrh	r3, [r3, #0]
    73d0:	2b14      	cmp	r3, #20
    73d2:	d106      	bne.n	73e2 <events_update+0x66>
    73d4:	f24c 5330 	movw	r3, #50480	; 0xc530
    73d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73dc:	2201      	movs	r2, #1
    73de:	701a      	strb	r2, [r3, #0]
    73e0:	e00c      	b.n	73fc <events_update+0x80>
    73e2:	e00b      	b.n	73fc <events_update+0x80>
    73e4:	f24c 5344 	movw	r3, #50500	; 0xc544
    73e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73ec:	2200      	movs	r2, #0
    73ee:	801a      	strh	r2, [r3, #0]
    73f0:	f24c 5330 	movw	r3, #50480	; 0xc530
    73f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    73f8:	2200      	movs	r2, #0
    73fa:	701a      	strb	r2, [r3, #0]
  EventNeg(event2_cpt, RADIO_GAIN1, rc_event_2);
    73fc:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    7400:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7404:	781b      	ldrb	r3, [r3, #0]
    7406:	2b00      	cmp	r3, #0
    7408:	d12a      	bne.n	7460 <events_update+0xe4>
    740a:	f24c 6350 	movw	r3, #50768	; 0xc650
    740e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7412:	895b      	ldrh	r3, [r3, #10]
    7414:	b21b      	sxth	r3, r3
    7416:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
    741a:	da21      	bge.n	7460 <events_update+0xe4>
    741c:	f24c 5346 	movw	r3, #50502	; 0xc546
    7420:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7424:	881b      	ldrh	r3, [r3, #0]
    7426:	2b13      	cmp	r3, #19
    7428:	d819      	bhi.n	745e <events_update+0xe2>
    742a:	f24c 5346 	movw	r3, #50502	; 0xc546
    742e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7432:	881b      	ldrh	r3, [r3, #0]
    7434:	3301      	adds	r3, #1
    7436:	b29a      	uxth	r2, r3
    7438:	f24c 5346 	movw	r3, #50502	; 0xc546
    743c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7440:	801a      	strh	r2, [r3, #0]
    7442:	f24c 5346 	movw	r3, #50502	; 0xc546
    7446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    744a:	881b      	ldrh	r3, [r3, #0]
    744c:	2b14      	cmp	r3, #20
    744e:	d106      	bne.n	745e <events_update+0xe2>
    7450:	f24c 5331 	movw	r3, #50481	; 0xc531
    7454:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7458:	2201      	movs	r2, #1
    745a:	701a      	strb	r2, [r3, #0]
    745c:	e00c      	b.n	7478 <events_update+0xfc>
    745e:	e00b      	b.n	7478 <events_update+0xfc>
    7460:	f24c 5346 	movw	r3, #50502	; 0xc546
    7464:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7468:	2200      	movs	r2, #0
    746a:	801a      	strh	r2, [r3, #0]
    746c:	f24c 5331 	movw	r3, #50481	; 0xc531
    7470:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7474:	2200      	movs	r2, #0
    7476:	701a      	strb	r2, [r3, #0]
}  
    7478:	46bd      	mov	sp, r7
    747a:	f85d 7b04 	ldr.w	r7, [sp], #4
    747e:	4770      	bx	lr

00007480 <copy_from_to_fbw>:


/** \fn inline void copy_from_to_fbw ( void )
 *  \brief Send back uncontrolled channels (only rudder)
 */
inline void copy_from_to_fbw ( void ) {
    7480:	b480      	push	{r7}
    7482:	af00      	add	r7, sp, #0
  to_fbw.channels[RADIO_YAW] = from_fbw.channels[RADIO_YAW];
    7484:	f24c 6350 	movw	r3, #50768	; 0xc650
    7488:	f2c2 0304 	movt	r3, #8196	; 0x2004
    748c:	88da      	ldrh	r2, [r3, #6]
    748e:	f24c 6368 	movw	r3, #50792	; 0xc668
    7492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7496:	80da      	strh	r2, [r3, #6]
#ifdef ANTON_T7
  to_fbw.channels[RADIO_PITCH] = from_fbw.channels[RADIO_PITCH];
#endif
  to_fbw.status = 0;
    7498:	f24c 6368 	movw	r3, #50792	; 0xc668
    749c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74a0:	2200      	movs	r2, #0
    74a2:	74da      	strb	r2, [r3, #19]
}
    74a4:	46bd      	mov	sp, r7
    74a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    74aa:	4770      	bx	lr

000074ac <send_boot>:
/** \fn inline void reporting_task( void )
 *  \brief Send a serie of initialisation messages followed by a stream of periodic ones\n
 * Called at 20Hz.
 */

void send_boot(void){
    74ac:	b480      	push	{r7}
    74ae:	af00      	add	r7, sp, #0
  /** initialisation phase during boot */
  //vPrintString("S_13 reporting_task start!\n\r");
  //add by wanbo
  if (boot) 
    74b0:	f240 533d 	movw	r3, #1341	; 0x53d
    74b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74b8:	781b      	ldrb	r3, [r3, #0]
    74ba:	2b00      	cmp	r3, #0
    74bc:	f000 87c6 	beq.w	844c <send_boot+0xfa0>
  {
      DOWNLINK_SEND_BOOT(&version);
    74c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    74c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74c8:	781a      	ldrb	r2, [r3, #0]
    74ca:	f24c 534a 	movw	r3, #50506	; 0xc54a
    74ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74d2:	781b      	ldrb	r3, [r3, #0]
    74d4:	b2db      	uxtb	r3, r3
    74d6:	429a      	cmp	r2, r3
    74d8:	d313      	bcc.n	7502 <send_boot+0x56>
    74da:	f24c 534a 	movw	r3, #50506	; 0xc54a
    74de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74e2:	781b      	ldrb	r3, [r3, #0]
    74e4:	b2db      	uxtb	r3, r3
    74e6:	461a      	mov	r2, r3
    74e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    74ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    74f0:	781b      	ldrb	r3, [r3, #0]
    74f2:	1ad3      	subs	r3, r2, r3
    74f4:	33ff      	adds	r3, #255	; 0xff
    74f6:	2b06      	cmp	r3, #6
    74f8:	bfd4      	ite	le
    74fa:	2300      	movle	r3, #0
    74fc:	2301      	movgt	r3, #1
    74fe:	b2db      	uxtb	r3, r3
    7500:	e011      	b.n	7526 <send_boot+0x7a>
    7502:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    750a:	781b      	ldrb	r3, [r3, #0]
    750c:	b2db      	uxtb	r3, r3
    750e:	461a      	mov	r2, r3
    7510:	f24c 5349 	movw	r3, #50505	; 0xc549
    7514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7518:	781b      	ldrb	r3, [r3, #0]
    751a:	1ad3      	subs	r3, r2, r3
    751c:	2b06      	cmp	r3, #6
    751e:	bfd4      	ite	le
    7520:	2300      	movle	r3, #0
    7522:	2301      	movgt	r3, #1
    7524:	b2db      	uxtb	r3, r3
    7526:	2b00      	cmp	r3, #0
    7528:	f000 8194 	beq.w	7854 <send_boot+0x3a8>
    752c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7530:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7534:	781b      	ldrb	r3, [r3, #0]
    7536:	461a      	mov	r2, r3
    7538:	f24c 534c 	movw	r3, #50508	; 0xc54c
    753c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7540:	2105      	movs	r1, #5
    7542:	5499      	strb	r1, [r3, r2]
    7544:	f24c 5349 	movw	r3, #50505	; 0xc549
    7548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    754c:	781b      	ldrb	r3, [r3, #0]
    754e:	3301      	adds	r3, #1
    7550:	b2da      	uxtb	r2, r3
    7552:	f24c 5349 	movw	r3, #50505	; 0xc549
    7556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    755a:	701a      	strb	r2, [r3, #0]
    755c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7564:	781b      	ldrb	r3, [r3, #0]
    7566:	2bff      	cmp	r3, #255	; 0xff
    7568:	d105      	bne.n	7576 <send_boot+0xca>
    756a:	f24c 5349 	movw	r3, #50505	; 0xc549
    756e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7572:	2200      	movs	r2, #0
    7574:	701a      	strb	r2, [r3, #0]
    7576:	f24c 5349 	movw	r3, #50505	; 0xc549
    757a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    757e:	781b      	ldrb	r3, [r3, #0]
    7580:	461a      	mov	r2, r3
    7582:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7586:	f2c2 0304 	movt	r3, #8196	; 0x2004
    758a:	2101      	movs	r1, #1
    758c:	5499      	strb	r1, [r3, r2]
    758e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7596:	781b      	ldrb	r3, [r3, #0]
    7598:	3301      	adds	r3, #1
    759a:	b2da      	uxtb	r2, r3
    759c:	f24c 5349 	movw	r3, #50505	; 0xc549
    75a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75a4:	701a      	strb	r2, [r3, #0]
    75a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    75aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75ae:	781b      	ldrb	r3, [r3, #0]
    75b0:	2bff      	cmp	r3, #255	; 0xff
    75b2:	d105      	bne.n	75c0 <send_boot+0x114>
    75b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    75b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75bc:	2200      	movs	r2, #0
    75be:	701a      	strb	r2, [r3, #0]
    75c0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    75c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75c8:	2201      	movs	r2, #1
    75ca:	701a      	strb	r2, [r3, #0]
    75cc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    75d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75d4:	2201      	movs	r2, #1
    75d6:	701a      	strb	r2, [r3, #0]
    75d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    75dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75e0:	781b      	ldrb	r3, [r3, #0]
    75e2:	461a      	mov	r2, r3
    75e4:	f648 234e 	movw	r3, #35406	; 0x8a4e
    75e8:	f2c0 0301 	movt	r3, #1
    75ec:	7819      	ldrb	r1, [r3, #0]
    75ee:	f24c 534c 	movw	r3, #50508	; 0xc54c
    75f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    75f6:	5499      	strb	r1, [r3, r2]
    75f8:	f648 234e 	movw	r3, #35406	; 0x8a4e
    75fc:	f2c0 0301 	movt	r3, #1
    7600:	781a      	ldrb	r2, [r3, #0]
    7602:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    760a:	781b      	ldrb	r3, [r3, #0]
    760c:	4413      	add	r3, r2
    760e:	b2da      	uxtb	r2, r3
    7610:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7618:	701a      	strb	r2, [r3, #0]
    761a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    761e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7622:	781a      	ldrb	r2, [r3, #0]
    7624:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    762c:	781b      	ldrb	r3, [r3, #0]
    762e:	4413      	add	r3, r2
    7630:	b2da      	uxtb	r2, r3
    7632:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7636:	f2c2 0304 	movt	r3, #8196	; 0x2004
    763a:	701a      	strb	r2, [r3, #0]
    763c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7640:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7644:	781b      	ldrb	r3, [r3, #0]
    7646:	3301      	adds	r3, #1
    7648:	b2da      	uxtb	r2, r3
    764a:	f24c 5349 	movw	r3, #50505	; 0xc549
    764e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7652:	701a      	strb	r2, [r3, #0]
    7654:	f24c 5349 	movw	r3, #50505	; 0xc549
    7658:	f2c2 0304 	movt	r3, #8196	; 0x2004
    765c:	781b      	ldrb	r3, [r3, #0]
    765e:	2bff      	cmp	r3, #255	; 0xff
    7660:	d105      	bne.n	766e <send_boot+0x1c2>
    7662:	f24c 5349 	movw	r3, #50505	; 0xc549
    7666:	f2c2 0304 	movt	r3, #8196	; 0x2004
    766a:	2200      	movs	r2, #0
    766c:	701a      	strb	r2, [r3, #0]
    766e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7672:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7676:	781b      	ldrb	r3, [r3, #0]
    7678:	461a      	mov	r2, r3
    767a:	f648 234e 	movw	r3, #35406	; 0x8a4e
    767e:	f2c0 0301 	movt	r3, #1
    7682:	7859      	ldrb	r1, [r3, #1]
    7684:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7688:	f2c2 0304 	movt	r3, #8196	; 0x2004
    768c:	5499      	strb	r1, [r3, r2]
    768e:	4b88      	ldr	r3, [pc, #544]	; (78b0 <send_boot+0x404>)
    7690:	781a      	ldrb	r2, [r3, #0]
    7692:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7696:	f2c2 0304 	movt	r3, #8196	; 0x2004
    769a:	781b      	ldrb	r3, [r3, #0]
    769c:	4413      	add	r3, r2
    769e:	b2da      	uxtb	r2, r3
    76a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    76a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76a8:	701a      	strb	r2, [r3, #0]
    76aa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    76ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76b2:	781a      	ldrb	r2, [r3, #0]
    76b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    76b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76bc:	781b      	ldrb	r3, [r3, #0]
    76be:	4413      	add	r3, r2
    76c0:	b2da      	uxtb	r2, r3
    76c2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    76c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76ca:	701a      	strb	r2, [r3, #0]
    76cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    76d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76d4:	781b      	ldrb	r3, [r3, #0]
    76d6:	3301      	adds	r3, #1
    76d8:	b2da      	uxtb	r2, r3
    76da:	f24c 5349 	movw	r3, #50505	; 0xc549
    76de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76e2:	701a      	strb	r2, [r3, #0]
    76e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    76e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76ec:	781b      	ldrb	r3, [r3, #0]
    76ee:	2bff      	cmp	r3, #255	; 0xff
    76f0:	d105      	bne.n	76fe <send_boot+0x252>
    76f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    76f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    76fa:	2200      	movs	r2, #0
    76fc:	701a      	strb	r2, [r3, #0]
    76fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    7702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7706:	781b      	ldrb	r3, [r3, #0]
    7708:	461a      	mov	r2, r3
    770a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    770e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7712:	7819      	ldrb	r1, [r3, #0]
    7714:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    771c:	5499      	strb	r1, [r3, r2]
    771e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7726:	781b      	ldrb	r3, [r3, #0]
    7728:	3301      	adds	r3, #1
    772a:	b2da      	uxtb	r2, r3
    772c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7734:	701a      	strb	r2, [r3, #0]
    7736:	f24c 5349 	movw	r3, #50505	; 0xc549
    773a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    773e:	781b      	ldrb	r3, [r3, #0]
    7740:	2bff      	cmp	r3, #255	; 0xff
    7742:	d105      	bne.n	7750 <send_boot+0x2a4>
    7744:	f24c 5349 	movw	r3, #50505	; 0xc549
    7748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    774c:	2200      	movs	r2, #0
    774e:	701a      	strb	r2, [r3, #0]
    7750:	f24c 5349 	movw	r3, #50505	; 0xc549
    7754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7758:	781b      	ldrb	r3, [r3, #0]
    775a:	461a      	mov	r2, r3
    775c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7764:	7819      	ldrb	r1, [r3, #0]
    7766:	f24c 534c 	movw	r3, #50508	; 0xc54c
    776a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    776e:	5499      	strb	r1, [r3, r2]
    7770:	f24c 5349 	movw	r3, #50505	; 0xc549
    7774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7778:	781b      	ldrb	r3, [r3, #0]
    777a:	3301      	adds	r3, #1
    777c:	b2da      	uxtb	r2, r3
    777e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7786:	701a      	strb	r2, [r3, #0]
    7788:	f24c 5349 	movw	r3, #50505	; 0xc549
    778c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7790:	781b      	ldrb	r3, [r3, #0]
    7792:	2bff      	cmp	r3, #255	; 0xff
    7794:	d105      	bne.n	77a2 <send_boot+0x2f6>
    7796:	f24c 5349 	movw	r3, #50505	; 0xc549
    779a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    779e:	2200      	movs	r2, #0
    77a0:	701a      	strb	r2, [r3, #0]
    77a2:	f242 0339 	movw	r3, #8249	; 0x2039
    77a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77aa:	781b      	ldrb	r3, [r3, #0]
    77ac:	b2db      	uxtb	r3, r3
    77ae:	f003 0310 	and.w	r3, r3, #16
    77b2:	2b00      	cmp	r3, #0
    77b4:	d15a      	bne.n	786c <send_boot+0x3c0>
    77b6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    77ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77be:	781b      	ldrb	r3, [r3, #0]
    77c0:	b2db      	uxtb	r3, r3
    77c2:	461a      	mov	r2, r3
    77c4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    77c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77cc:	5c9a      	ldrb	r2, [r3, r2]
    77ce:	f24c 634b 	movw	r3, #50763	; 0xc64b
    77d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77d6:	701a      	strb	r2, [r3, #0]
    77d8:	f24c 634c 	movw	r3, #50764	; 0xc64c
    77dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77e0:	2200      	movs	r2, #0
    77e2:	701a      	strb	r2, [r3, #0]
    77e4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    77e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77ec:	781b      	ldrb	r3, [r3, #0]
    77ee:	b2db      	uxtb	r3, r3
    77f0:	3301      	adds	r3, #1
    77f2:	b2da      	uxtb	r2, r3
    77f4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    77f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    77fc:	701a      	strb	r2, [r3, #0]
    77fe:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7802:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7806:	781b      	ldrb	r3, [r3, #0]
    7808:	b2db      	uxtb	r3, r3
    780a:	2bff      	cmp	r3, #255	; 0xff
    780c:	d105      	bne.n	781a <send_boot+0x36e>
    780e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    7812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7816:	2200      	movs	r2, #0
    7818:	701a      	strb	r2, [r3, #0]
    781a:	f242 0338 	movw	r3, #8248	; 0x2038
    781e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7822:	f242 0238 	movw	r2, #8248	; 0x2038
    7826:	f2c2 0200 	movt	r2, #8192	; 0x2000
    782a:	7812      	ldrb	r2, [r2, #0]
    782c:	b2d2      	uxtb	r2, r2
    782e:	f042 0201 	orr.w	r2, r2, #1
    7832:	b2d2      	uxtb	r2, r2
    7834:	701a      	strb	r2, [r3, #0]
    7836:	f242 0339 	movw	r3, #8249	; 0x2039
    783a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    783e:	f242 0239 	movw	r2, #8249	; 0x2039
    7842:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7846:	7812      	ldrb	r2, [r2, #0]
    7848:	b2d2      	uxtb	r2, r2
    784a:	f042 0210 	orr.w	r2, r2, #16
    784e:	b2d2      	uxtb	r2, r2
    7850:	701a      	strb	r2, [r3, #0]
    7852:	e00b      	b.n	786c <send_boot+0x3c0>
    7854:	f24c 5348 	movw	r3, #50504	; 0xc548
    7858:	f2c2 0304 	movt	r3, #8196	; 0x2004
    785c:	781b      	ldrb	r3, [r3, #0]
    785e:	3301      	adds	r3, #1
    7860:	b2da      	uxtb	r2, r3
    7862:	f24c 5348 	movw	r3, #50504	; 0xc548
    7866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    786a:	701a      	strb	r2, [r3, #0]
      DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    786c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7870:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7874:	781a      	ldrb	r2, [r3, #0]
    7876:	f24c 534a 	movw	r3, #50506	; 0xc54a
    787a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    787e:	781b      	ldrb	r3, [r3, #0]
    7880:	b2db      	uxtb	r3, r3
    7882:	429a      	cmp	r2, r3
    7884:	d316      	bcc.n	78b4 <send_boot+0x408>
    7886:	f24c 534a 	movw	r3, #50506	; 0xc54a
    788a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    788e:	781b      	ldrb	r3, [r3, #0]
    7890:	b2db      	uxtb	r3, r3
    7892:	461a      	mov	r2, r3
    7894:	f24c 5349 	movw	r3, #50505	; 0xc549
    7898:	f2c2 0304 	movt	r3, #8196	; 0x2004
    789c:	781b      	ldrb	r3, [r3, #0]
    789e:	1ad3      	subs	r3, r2, r3
    78a0:	33ff      	adds	r3, #255	; 0xff
    78a2:	2b14      	cmp	r3, #20
    78a4:	bfd4      	ite	le
    78a6:	2300      	movle	r3, #0
    78a8:	2301      	movgt	r3, #1
    78aa:	b2db      	uxtb	r3, r3
    78ac:	e014      	b.n	78d8 <send_boot+0x42c>
    78ae:	bf00      	nop
    78b0:	00018a4f 	.word	0x00018a4f
    78b4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    78b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78bc:	781b      	ldrb	r3, [r3, #0]
    78be:	b2db      	uxtb	r3, r3
    78c0:	461a      	mov	r2, r3
    78c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    78c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78ca:	781b      	ldrb	r3, [r3, #0]
    78cc:	1ad3      	subs	r3, r2, r3
    78ce:	2b14      	cmp	r3, #20
    78d0:	bfd4      	ite	le
    78d2:	2300      	movle	r3, #0
    78d4:	2301      	movgt	r3, #1
    78d6:	b2db      	uxtb	r3, r3
    78d8:	2b00      	cmp	r3, #0
    78da:	f000 85a5 	beq.w	8428 <send_boot+0xf7c>
    78de:	f24c 5349 	movw	r3, #50505	; 0xc549
    78e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78e6:	781b      	ldrb	r3, [r3, #0]
    78e8:	461a      	mov	r2, r3
    78ea:	f24c 534c 	movw	r3, #50508	; 0xc54c
    78ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78f2:	2105      	movs	r1, #5
    78f4:	5499      	strb	r1, [r3, r2]
    78f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    78fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    78fe:	781b      	ldrb	r3, [r3, #0]
    7900:	3301      	adds	r3, #1
    7902:	b2da      	uxtb	r2, r3
    7904:	f24c 5349 	movw	r3, #50505	; 0xc549
    7908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    790c:	701a      	strb	r2, [r3, #0]
    790e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7912:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7916:	781b      	ldrb	r3, [r3, #0]
    7918:	2bff      	cmp	r3, #255	; 0xff
    791a:	d105      	bne.n	7928 <send_boot+0x47c>
    791c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7924:	2200      	movs	r2, #0
    7926:	701a      	strb	r2, [r3, #0]
    7928:	f24c 5349 	movw	r3, #50505	; 0xc549
    792c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7930:	781b      	ldrb	r3, [r3, #0]
    7932:	461a      	mov	r2, r3
    7934:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    793c:	2105      	movs	r1, #5
    793e:	5499      	strb	r1, [r3, r2]
    7940:	f24c 5349 	movw	r3, #50505	; 0xc549
    7944:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7948:	781b      	ldrb	r3, [r3, #0]
    794a:	3301      	adds	r3, #1
    794c:	b2da      	uxtb	r2, r3
    794e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7956:	701a      	strb	r2, [r3, #0]
    7958:	f24c 5349 	movw	r3, #50505	; 0xc549
    795c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7960:	781b      	ldrb	r3, [r3, #0]
    7962:	2bff      	cmp	r3, #255	; 0xff
    7964:	d105      	bne.n	7972 <send_boot+0x4c6>
    7966:	f24c 5349 	movw	r3, #50505	; 0xc549
    796a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    796e:	2200      	movs	r2, #0
    7970:	701a      	strb	r2, [r3, #0]
    7972:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7976:	f2c2 0304 	movt	r3, #8196	; 0x2004
    797a:	2205      	movs	r2, #5
    797c:	701a      	strb	r2, [r3, #0]
    797e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7982:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7986:	2205      	movs	r2, #5
    7988:	701a      	strb	r2, [r3, #0]
    798a:	f24c 5349 	movw	r3, #50505	; 0xc549
    798e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7992:	781b      	ldrb	r3, [r3, #0]
    7994:	461a      	mov	r2, r3
    7996:	f64c 3340 	movw	r3, #52032	; 0xcb40
    799a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    799e:	7819      	ldrb	r1, [r3, #0]
    79a0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    79a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79a8:	5499      	strb	r1, [r3, r2]
    79aa:	f64c 3340 	movw	r3, #52032	; 0xcb40
    79ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79b2:	781a      	ldrb	r2, [r3, #0]
    79b4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    79b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79bc:	781b      	ldrb	r3, [r3, #0]
    79be:	4413      	add	r3, r2
    79c0:	b2da      	uxtb	r2, r3
    79c2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    79c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ca:	701a      	strb	r2, [r3, #0]
    79cc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    79d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79d4:	781a      	ldrb	r2, [r3, #0]
    79d6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    79da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79de:	781b      	ldrb	r3, [r3, #0]
    79e0:	4413      	add	r3, r2
    79e2:	b2da      	uxtb	r2, r3
    79e4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    79e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79ec:	701a      	strb	r2, [r3, #0]
    79ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    79f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    79f6:	781b      	ldrb	r3, [r3, #0]
    79f8:	3301      	adds	r3, #1
    79fa:	b2da      	uxtb	r2, r3
    79fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a04:	701a      	strb	r2, [r3, #0]
    7a06:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a0e:	781b      	ldrb	r3, [r3, #0]
    7a10:	2bff      	cmp	r3, #255	; 0xff
    7a12:	d105      	bne.n	7a20 <send_boot+0x574>
    7a14:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a1c:	2200      	movs	r2, #0
    7a1e:	701a      	strb	r2, [r3, #0]
    7a20:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a28:	781b      	ldrb	r3, [r3, #0]
    7a2a:	461a      	mov	r2, r3
    7a2c:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7a30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a34:	7859      	ldrb	r1, [r3, #1]
    7a36:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7a3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a3e:	5499      	strb	r1, [r3, r2]
    7a40:	4bd1      	ldr	r3, [pc, #836]	; (7d88 <send_boot+0x8dc>)
    7a42:	781a      	ldrb	r2, [r3, #0]
    7a44:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7a48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a4c:	781b      	ldrb	r3, [r3, #0]
    7a4e:	4413      	add	r3, r2
    7a50:	b2da      	uxtb	r2, r3
    7a52:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7a56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a5a:	701a      	strb	r2, [r3, #0]
    7a5c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7a60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a64:	781a      	ldrb	r2, [r3, #0]
    7a66:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7a6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a6e:	781b      	ldrb	r3, [r3, #0]
    7a70:	4413      	add	r3, r2
    7a72:	b2da      	uxtb	r2, r3
    7a74:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7a78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a7c:	701a      	strb	r2, [r3, #0]
    7a7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a86:	781b      	ldrb	r3, [r3, #0]
    7a88:	3301      	adds	r3, #1
    7a8a:	b2da      	uxtb	r2, r3
    7a8c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a94:	701a      	strb	r2, [r3, #0]
    7a96:	f24c 5349 	movw	r3, #50505	; 0xc549
    7a9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7a9e:	781b      	ldrb	r3, [r3, #0]
    7aa0:	2bff      	cmp	r3, #255	; 0xff
    7aa2:	d105      	bne.n	7ab0 <send_boot+0x604>
    7aa4:	f24c 5349 	movw	r3, #50505	; 0xc549
    7aa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aac:	2200      	movs	r2, #0
    7aae:	701a      	strb	r2, [r3, #0]
    7ab0:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ab8:	781b      	ldrb	r3, [r3, #0]
    7aba:	461a      	mov	r2, r3
    7abc:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7ac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ac4:	7899      	ldrb	r1, [r3, #2]
    7ac6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7aca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ace:	5499      	strb	r1, [r3, r2]
    7ad0:	4bae      	ldr	r3, [pc, #696]	; (7d8c <send_boot+0x8e0>)
    7ad2:	781a      	ldrb	r2, [r3, #0]
    7ad4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7adc:	781b      	ldrb	r3, [r3, #0]
    7ade:	4413      	add	r3, r2
    7ae0:	b2da      	uxtb	r2, r3
    7ae2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ae6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7aea:	701a      	strb	r2, [r3, #0]
    7aec:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7af0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7af4:	781a      	ldrb	r2, [r3, #0]
    7af6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7afa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7afe:	781b      	ldrb	r3, [r3, #0]
    7b00:	4413      	add	r3, r2
    7b02:	b2da      	uxtb	r2, r3
    7b04:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7b08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b0c:	701a      	strb	r2, [r3, #0]
    7b0e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b16:	781b      	ldrb	r3, [r3, #0]
    7b18:	3301      	adds	r3, #1
    7b1a:	b2da      	uxtb	r2, r3
    7b1c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b24:	701a      	strb	r2, [r3, #0]
    7b26:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b2e:	781b      	ldrb	r3, [r3, #0]
    7b30:	2bff      	cmp	r3, #255	; 0xff
    7b32:	d105      	bne.n	7b40 <send_boot+0x694>
    7b34:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b3c:	2200      	movs	r2, #0
    7b3e:	701a      	strb	r2, [r3, #0]
    7b40:	f24c 5349 	movw	r3, #50505	; 0xc549
    7b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b48:	781b      	ldrb	r3, [r3, #0]
    7b4a:	461a      	mov	r2, r3
    7b4c:	f64c 3340 	movw	r3, #52032	; 0xcb40
    7b50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b54:	78d9      	ldrb	r1, [r3, #3]
    7b56:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7b5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b5e:	5499      	strb	r1, [r3, r2]
    7b60:	4b8b      	ldr	r3, [pc, #556]	; (7d90 <send_boot+0x8e4>)
    7b62:	781a      	ldrb	r2, [r3, #0]
    7b64:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7b68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b6c:	781b      	ldrb	r3, [r3, #0]
    7b6e:	4413      	add	r3, r2
    7b70:	b2da      	uxtb	r2, r3
    7b72:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7b76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b7a:	701a      	strb	r2, [r3, #0]
    7b7c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7b80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b84:	781a      	ldrb	r2, [r3, #0]
    7b86:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7b8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b8e:	781b      	ldrb	r3, [r3, #0]
    7b90:	4413      	add	r3, r2
    7b92:	b2da      	uxtb	r2, r3
    7b94:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7b98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7b9c:	701a      	strb	r2, [r3, #0]
    7b9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ba6:	781b      	ldrb	r3, [r3, #0]
    7ba8:	3301      	adds	r3, #1
    7baa:	b2da      	uxtb	r2, r3
    7bac:	f24c 5349 	movw	r3, #50505	; 0xc549
    7bb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bb4:	701a      	strb	r2, [r3, #0]
    7bb6:	f24c 5349 	movw	r3, #50505	; 0xc549
    7bba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bbe:	781b      	ldrb	r3, [r3, #0]
    7bc0:	2bff      	cmp	r3, #255	; 0xff
    7bc2:	d105      	bne.n	7bd0 <send_boot+0x724>
    7bc4:	f24c 5349 	movw	r3, #50505	; 0xc549
    7bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bcc:	2200      	movs	r2, #0
    7bce:	701a      	strb	r2, [r3, #0]
    7bd0:	f24c 5349 	movw	r3, #50505	; 0xc549
    7bd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bd8:	781b      	ldrb	r3, [r3, #0]
    7bda:	461a      	mov	r2, r3
    7bdc:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7be0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7be4:	7819      	ldrb	r1, [r3, #0]
    7be6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7bea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bee:	5499      	strb	r1, [r3, r2]
    7bf0:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7bf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7bf8:	781a      	ldrb	r2, [r3, #0]
    7bfa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7bfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c02:	781b      	ldrb	r3, [r3, #0]
    7c04:	4413      	add	r3, r2
    7c06:	b2da      	uxtb	r2, r3
    7c08:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7c0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c10:	701a      	strb	r2, [r3, #0]
    7c12:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7c16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c1a:	781a      	ldrb	r2, [r3, #0]
    7c1c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7c20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c24:	781b      	ldrb	r3, [r3, #0]
    7c26:	4413      	add	r3, r2
    7c28:	b2da      	uxtb	r2, r3
    7c2a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7c2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c32:	701a      	strb	r2, [r3, #0]
    7c34:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c3c:	781b      	ldrb	r3, [r3, #0]
    7c3e:	3301      	adds	r3, #1
    7c40:	b2da      	uxtb	r2, r3
    7c42:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c4a:	701a      	strb	r2, [r3, #0]
    7c4c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c54:	781b      	ldrb	r3, [r3, #0]
    7c56:	2bff      	cmp	r3, #255	; 0xff
    7c58:	d105      	bne.n	7c66 <send_boot+0x7ba>
    7c5a:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c62:	2200      	movs	r2, #0
    7c64:	701a      	strb	r2, [r3, #0]
    7c66:	f24c 5349 	movw	r3, #50505	; 0xc549
    7c6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c6e:	781b      	ldrb	r3, [r3, #0]
    7c70:	461a      	mov	r2, r3
    7c72:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7c76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c7a:	7859      	ldrb	r1, [r3, #1]
    7c7c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7c80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c84:	5499      	strb	r1, [r3, r2]
    7c86:	4b43      	ldr	r3, [pc, #268]	; (7d94 <send_boot+0x8e8>)
    7c88:	781a      	ldrb	r2, [r3, #0]
    7c8a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7c8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7c92:	781b      	ldrb	r3, [r3, #0]
    7c94:	4413      	add	r3, r2
    7c96:	b2da      	uxtb	r2, r3
    7c98:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7c9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ca0:	701a      	strb	r2, [r3, #0]
    7ca2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7ca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7caa:	781a      	ldrb	r2, [r3, #0]
    7cac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7cb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cb4:	781b      	ldrb	r3, [r3, #0]
    7cb6:	4413      	add	r3, r2
    7cb8:	b2da      	uxtb	r2, r3
    7cba:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7cbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cc2:	701a      	strb	r2, [r3, #0]
    7cc4:	f24c 5349 	movw	r3, #50505	; 0xc549
    7cc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ccc:	781b      	ldrb	r3, [r3, #0]
    7cce:	3301      	adds	r3, #1
    7cd0:	b2da      	uxtb	r2, r3
    7cd2:	f24c 5349 	movw	r3, #50505	; 0xc549
    7cd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cda:	701a      	strb	r2, [r3, #0]
    7cdc:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ce4:	781b      	ldrb	r3, [r3, #0]
    7ce6:	2bff      	cmp	r3, #255	; 0xff
    7ce8:	d105      	bne.n	7cf6 <send_boot+0x84a>
    7cea:	f24c 5349 	movw	r3, #50505	; 0xc549
    7cee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cf2:	2200      	movs	r2, #0
    7cf4:	701a      	strb	r2, [r3, #0]
    7cf6:	f24c 5349 	movw	r3, #50505	; 0xc549
    7cfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7cfe:	781b      	ldrb	r3, [r3, #0]
    7d00:	461a      	mov	r2, r3
    7d02:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7d06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d0a:	7899      	ldrb	r1, [r3, #2]
    7d0c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7d10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d14:	5499      	strb	r1, [r3, r2]
    7d16:	4b20      	ldr	r3, [pc, #128]	; (7d98 <send_boot+0x8ec>)
    7d18:	781a      	ldrb	r2, [r3, #0]
    7d1a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7d1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d22:	781b      	ldrb	r3, [r3, #0]
    7d24:	4413      	add	r3, r2
    7d26:	b2da      	uxtb	r2, r3
    7d28:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7d2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d30:	701a      	strb	r2, [r3, #0]
    7d32:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7d36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d3a:	781a      	ldrb	r2, [r3, #0]
    7d3c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7d40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d44:	781b      	ldrb	r3, [r3, #0]
    7d46:	4413      	add	r3, r2
    7d48:	b2da      	uxtb	r2, r3
    7d4a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7d4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d52:	701a      	strb	r2, [r3, #0]
    7d54:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d5c:	781b      	ldrb	r3, [r3, #0]
    7d5e:	3301      	adds	r3, #1
    7d60:	b2da      	uxtb	r2, r3
    7d62:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d6a:	701a      	strb	r2, [r3, #0]
    7d6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d74:	781b      	ldrb	r3, [r3, #0]
    7d76:	2bff      	cmp	r3, #255	; 0xff
    7d78:	d110      	bne.n	7d9c <send_boot+0x8f0>
    7d7a:	f24c 5349 	movw	r3, #50505	; 0xc549
    7d7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7d82:	2200      	movs	r2, #0
    7d84:	701a      	strb	r2, [r3, #0]
    7d86:	e009      	b.n	7d9c <send_boot+0x8f0>
    7d88:	2004cb41 	.word	0x2004cb41
    7d8c:	2004cb42 	.word	0x2004cb42
    7d90:	2004cb43 	.word	0x2004cb43
    7d94:	2004cb45 	.word	0x2004cb45
    7d98:	2004cb46 	.word	0x2004cb46
    7d9c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7da0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7da4:	781b      	ldrb	r3, [r3, #0]
    7da6:	461a      	mov	r2, r3
    7da8:	f64c 3344 	movw	r3, #52036	; 0xcb44
    7dac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7db0:	78d9      	ldrb	r1, [r3, #3]
    7db2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7db6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dba:	5499      	strb	r1, [r3, r2]
    7dbc:	4bd3      	ldr	r3, [pc, #844]	; (810c <send_boot+0xc60>)
    7dbe:	781a      	ldrb	r2, [r3, #0]
    7dc0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7dc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dc8:	781b      	ldrb	r3, [r3, #0]
    7dca:	4413      	add	r3, r2
    7dcc:	b2da      	uxtb	r2, r3
    7dce:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7dd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dd6:	701a      	strb	r2, [r3, #0]
    7dd8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7ddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7de0:	781a      	ldrb	r2, [r3, #0]
    7de2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7de6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7dea:	781b      	ldrb	r3, [r3, #0]
    7dec:	4413      	add	r3, r2
    7dee:	b2da      	uxtb	r2, r3
    7df0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7df4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7df8:	701a      	strb	r2, [r3, #0]
    7dfa:	f24c 5349 	movw	r3, #50505	; 0xc549
    7dfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e02:	781b      	ldrb	r3, [r3, #0]
    7e04:	3301      	adds	r3, #1
    7e06:	b2da      	uxtb	r2, r3
    7e08:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e10:	701a      	strb	r2, [r3, #0]
    7e12:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e1a:	781b      	ldrb	r3, [r3, #0]
    7e1c:	2bff      	cmp	r3, #255	; 0xff
    7e1e:	d105      	bne.n	7e2c <send_boot+0x980>
    7e20:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e28:	2200      	movs	r2, #0
    7e2a:	701a      	strb	r2, [r3, #0]
    7e2c:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e34:	781b      	ldrb	r3, [r3, #0]
    7e36:	461a      	mov	r2, r3
    7e38:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    7e3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e40:	7819      	ldrb	r1, [r3, #0]
    7e42:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7e46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e4a:	5499      	strb	r1, [r3, r2]
    7e4c:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    7e50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e54:	781a      	ldrb	r2, [r3, #0]
    7e56:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7e5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e5e:	781b      	ldrb	r3, [r3, #0]
    7e60:	4413      	add	r3, r2
    7e62:	b2da      	uxtb	r2, r3
    7e64:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7e68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e6c:	701a      	strb	r2, [r3, #0]
    7e6e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7e72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e76:	781a      	ldrb	r2, [r3, #0]
    7e78:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7e7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e80:	781b      	ldrb	r3, [r3, #0]
    7e82:	4413      	add	r3, r2
    7e84:	b2da      	uxtb	r2, r3
    7e86:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7e8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e8e:	701a      	strb	r2, [r3, #0]
    7e90:	f24c 5349 	movw	r3, #50505	; 0xc549
    7e94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7e98:	781b      	ldrb	r3, [r3, #0]
    7e9a:	3301      	adds	r3, #1
    7e9c:	b2da      	uxtb	r2, r3
    7e9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ea6:	701a      	strb	r2, [r3, #0]
    7ea8:	f24c 5349 	movw	r3, #50505	; 0xc549
    7eac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eb0:	781b      	ldrb	r3, [r3, #0]
    7eb2:	2bff      	cmp	r3, #255	; 0xff
    7eb4:	d105      	bne.n	7ec2 <send_boot+0xa16>
    7eb6:	f24c 5349 	movw	r3, #50505	; 0xc549
    7eba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ebe:	2200      	movs	r2, #0
    7ec0:	701a      	strb	r2, [r3, #0]
    7ec2:	f24c 5349 	movw	r3, #50505	; 0xc549
    7ec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eca:	781b      	ldrb	r3, [r3, #0]
    7ecc:	461a      	mov	r2, r3
    7ece:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    7ed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ed6:	7859      	ldrb	r1, [r3, #1]
    7ed8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7edc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ee0:	5499      	strb	r1, [r3, r2]
    7ee2:	4b8b      	ldr	r3, [pc, #556]	; (8110 <send_boot+0xc64>)
    7ee4:	781a      	ldrb	r2, [r3, #0]
    7ee6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7eea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7eee:	781b      	ldrb	r3, [r3, #0]
    7ef0:	4413      	add	r3, r2
    7ef2:	b2da      	uxtb	r2, r3
    7ef4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7ef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7efc:	701a      	strb	r2, [r3, #0]
    7efe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7f02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f06:	781a      	ldrb	r2, [r3, #0]
    7f08:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7f0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f10:	781b      	ldrb	r3, [r3, #0]
    7f12:	4413      	add	r3, r2
    7f14:	b2da      	uxtb	r2, r3
    7f16:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7f1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f1e:	701a      	strb	r2, [r3, #0]
    7f20:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f28:	781b      	ldrb	r3, [r3, #0]
    7f2a:	3301      	adds	r3, #1
    7f2c:	b2da      	uxtb	r2, r3
    7f2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f36:	701a      	strb	r2, [r3, #0]
    7f38:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f40:	781b      	ldrb	r3, [r3, #0]
    7f42:	2bff      	cmp	r3, #255	; 0xff
    7f44:	d105      	bne.n	7f52 <send_boot+0xaa6>
    7f46:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f4e:	2200      	movs	r2, #0
    7f50:	701a      	strb	r2, [r3, #0]
    7f52:	f24c 5349 	movw	r3, #50505	; 0xc549
    7f56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f5a:	781b      	ldrb	r3, [r3, #0]
    7f5c:	461a      	mov	r2, r3
    7f5e:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    7f62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f66:	7899      	ldrb	r1, [r3, #2]
    7f68:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7f6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f70:	5499      	strb	r1, [r3, r2]
    7f72:	4b68      	ldr	r3, [pc, #416]	; (8114 <send_boot+0xc68>)
    7f74:	781a      	ldrb	r2, [r3, #0]
    7f76:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7f7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f7e:	781b      	ldrb	r3, [r3, #0]
    7f80:	4413      	add	r3, r2
    7f82:	b2da      	uxtb	r2, r3
    7f84:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7f88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f8c:	701a      	strb	r2, [r3, #0]
    7f8e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7f92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7f96:	781a      	ldrb	r2, [r3, #0]
    7f98:	f24c 634d 	movw	r3, #50765	; 0xc64d
    7f9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fa0:	781b      	ldrb	r3, [r3, #0]
    7fa2:	4413      	add	r3, r2
    7fa4:	b2da      	uxtb	r2, r3
    7fa6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    7faa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fae:	701a      	strb	r2, [r3, #0]
    7fb0:	f24c 5349 	movw	r3, #50505	; 0xc549
    7fb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fb8:	781b      	ldrb	r3, [r3, #0]
    7fba:	3301      	adds	r3, #1
    7fbc:	b2da      	uxtb	r2, r3
    7fbe:	f24c 5349 	movw	r3, #50505	; 0xc549
    7fc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fc6:	701a      	strb	r2, [r3, #0]
    7fc8:	f24c 5349 	movw	r3, #50505	; 0xc549
    7fcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fd0:	781b      	ldrb	r3, [r3, #0]
    7fd2:	2bff      	cmp	r3, #255	; 0xff
    7fd4:	d105      	bne.n	7fe2 <send_boot+0xb36>
    7fd6:	f24c 5349 	movw	r3, #50505	; 0xc549
    7fda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fde:	2200      	movs	r2, #0
    7fe0:	701a      	strb	r2, [r3, #0]
    7fe2:	f24c 5349 	movw	r3, #50505	; 0xc549
    7fe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7fea:	781b      	ldrb	r3, [r3, #0]
    7fec:	461a      	mov	r2, r3
    7fee:	f64c 333c 	movw	r3, #52028	; 0xcb3c
    7ff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    7ff6:	78d9      	ldrb	r1, [r3, #3]
    7ff8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    7ffc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8000:	5499      	strb	r1, [r3, r2]
    8002:	4b45      	ldr	r3, [pc, #276]	; (8118 <send_boot+0xc6c>)
    8004:	781a      	ldrb	r2, [r3, #0]
    8006:	f24c 634d 	movw	r3, #50765	; 0xc64d
    800a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    800e:	781b      	ldrb	r3, [r3, #0]
    8010:	4413      	add	r3, r2
    8012:	b2da      	uxtb	r2, r3
    8014:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8018:	f2c2 0304 	movt	r3, #8196	; 0x2004
    801c:	701a      	strb	r2, [r3, #0]
    801e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8022:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8026:	781a      	ldrb	r2, [r3, #0]
    8028:	f24c 634d 	movw	r3, #50765	; 0xc64d
    802c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8030:	781b      	ldrb	r3, [r3, #0]
    8032:	4413      	add	r3, r2
    8034:	b2da      	uxtb	r2, r3
    8036:	f24c 634e 	movw	r3, #50766	; 0xc64e
    803a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    803e:	701a      	strb	r2, [r3, #0]
    8040:	f24c 5349 	movw	r3, #50505	; 0xc549
    8044:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8048:	781b      	ldrb	r3, [r3, #0]
    804a:	3301      	adds	r3, #1
    804c:	b2da      	uxtb	r2, r3
    804e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8056:	701a      	strb	r2, [r3, #0]
    8058:	f24c 5349 	movw	r3, #50505	; 0xc549
    805c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8060:	781b      	ldrb	r3, [r3, #0]
    8062:	2bff      	cmp	r3, #255	; 0xff
    8064:	d105      	bne.n	8072 <send_boot+0xbc6>
    8066:	f24c 5349 	movw	r3, #50505	; 0xc549
    806a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    806e:	2200      	movs	r2, #0
    8070:	701a      	strb	r2, [r3, #0]
    8072:	f24c 5349 	movw	r3, #50505	; 0xc549
    8076:	f2c2 0304 	movt	r3, #8196	; 0x2004
    807a:	781b      	ldrb	r3, [r3, #0]
    807c:	461a      	mov	r2, r3
    807e:	f240 5342 	movw	r3, #1346	; 0x542
    8082:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8086:	7819      	ldrb	r1, [r3, #0]
    8088:	f24c 534c 	movw	r3, #50508	; 0xc54c
    808c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8090:	5499      	strb	r1, [r3, r2]
    8092:	f240 5342 	movw	r3, #1346	; 0x542
    8096:	f2c2 0300 	movt	r3, #8192	; 0x2000
    809a:	781a      	ldrb	r2, [r3, #0]
    809c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    80a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80a4:	781b      	ldrb	r3, [r3, #0]
    80a6:	4413      	add	r3, r2
    80a8:	b2da      	uxtb	r2, r3
    80aa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    80ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80b2:	701a      	strb	r2, [r3, #0]
    80b4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    80b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80bc:	781a      	ldrb	r2, [r3, #0]
    80be:	f24c 634d 	movw	r3, #50765	; 0xc64d
    80c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80c6:	781b      	ldrb	r3, [r3, #0]
    80c8:	4413      	add	r3, r2
    80ca:	b2da      	uxtb	r2, r3
    80cc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    80d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80d4:	701a      	strb	r2, [r3, #0]
    80d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    80da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80de:	781b      	ldrb	r3, [r3, #0]
    80e0:	3301      	adds	r3, #1
    80e2:	b2da      	uxtb	r2, r3
    80e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    80e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80ec:	701a      	strb	r2, [r3, #0]
    80ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    80f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    80f6:	781b      	ldrb	r3, [r3, #0]
    80f8:	2bff      	cmp	r3, #255	; 0xff
    80fa:	d10f      	bne.n	811c <send_boot+0xc70>
    80fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    8100:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8104:	2200      	movs	r2, #0
    8106:	701a      	strb	r2, [r3, #0]
    8108:	e008      	b.n	811c <send_boot+0xc70>
    810a:	bf00      	nop
    810c:	2004cb47 	.word	0x2004cb47
    8110:	2004cb3d 	.word	0x2004cb3d
    8114:	2004cb3e 	.word	0x2004cb3e
    8118:	2004cb3f 	.word	0x2004cb3f
    811c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8120:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8124:	781b      	ldrb	r3, [r3, #0]
    8126:	461a      	mov	r2, r3
    8128:	f240 5342 	movw	r3, #1346	; 0x542
    812c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8130:	7859      	ldrb	r1, [r3, #1]
    8132:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    813a:	5499      	strb	r1, [r3, r2]
    813c:	4bc5      	ldr	r3, [pc, #788]	; (8454 <send_boot+0xfa8>)
    813e:	781a      	ldrb	r2, [r3, #0]
    8140:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8148:	781b      	ldrb	r3, [r3, #0]
    814a:	4413      	add	r3, r2
    814c:	b2da      	uxtb	r2, r3
    814e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8152:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8156:	701a      	strb	r2, [r3, #0]
    8158:	f24c 634e 	movw	r3, #50766	; 0xc64e
    815c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8160:	781a      	ldrb	r2, [r3, #0]
    8162:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8166:	f2c2 0304 	movt	r3, #8196	; 0x2004
    816a:	781b      	ldrb	r3, [r3, #0]
    816c:	4413      	add	r3, r2
    816e:	b2da      	uxtb	r2, r3
    8170:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8178:	701a      	strb	r2, [r3, #0]
    817a:	f24c 5349 	movw	r3, #50505	; 0xc549
    817e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8182:	781b      	ldrb	r3, [r3, #0]
    8184:	3301      	adds	r3, #1
    8186:	b2da      	uxtb	r2, r3
    8188:	f24c 5349 	movw	r3, #50505	; 0xc549
    818c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8190:	701a      	strb	r2, [r3, #0]
    8192:	f24c 5349 	movw	r3, #50505	; 0xc549
    8196:	f2c2 0304 	movt	r3, #8196	; 0x2004
    819a:	781b      	ldrb	r3, [r3, #0]
    819c:	2bff      	cmp	r3, #255	; 0xff
    819e:	d105      	bne.n	81ac <send_boot+0xd00>
    81a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    81a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81a8:	2200      	movs	r2, #0
    81aa:	701a      	strb	r2, [r3, #0]
    81ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    81b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81b4:	781b      	ldrb	r3, [r3, #0]
    81b6:	461a      	mov	r2, r3
    81b8:	f240 5344 	movw	r3, #1348	; 0x544
    81bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81c0:	7819      	ldrb	r1, [r3, #0]
    81c2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    81c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81ca:	5499      	strb	r1, [r3, r2]
    81cc:	f240 5344 	movw	r3, #1348	; 0x544
    81d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81d4:	781a      	ldrb	r2, [r3, #0]
    81d6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    81da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81de:	781b      	ldrb	r3, [r3, #0]
    81e0:	4413      	add	r3, r2
    81e2:	b2da      	uxtb	r2, r3
    81e4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    81e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81ec:	701a      	strb	r2, [r3, #0]
    81ee:	f24c 634e 	movw	r3, #50766	; 0xc64e
    81f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    81f6:	781a      	ldrb	r2, [r3, #0]
    81f8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    81fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8200:	781b      	ldrb	r3, [r3, #0]
    8202:	4413      	add	r3, r2
    8204:	b2da      	uxtb	r2, r3
    8206:	f24c 634e 	movw	r3, #50766	; 0xc64e
    820a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    820e:	701a      	strb	r2, [r3, #0]
    8210:	f24c 5349 	movw	r3, #50505	; 0xc549
    8214:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8218:	781b      	ldrb	r3, [r3, #0]
    821a:	3301      	adds	r3, #1
    821c:	b2da      	uxtb	r2, r3
    821e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8226:	701a      	strb	r2, [r3, #0]
    8228:	f24c 5349 	movw	r3, #50505	; 0xc549
    822c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8230:	781b      	ldrb	r3, [r3, #0]
    8232:	2bff      	cmp	r3, #255	; 0xff
    8234:	d105      	bne.n	8242 <send_boot+0xd96>
    8236:	f24c 5349 	movw	r3, #50505	; 0xc549
    823a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    823e:	2200      	movs	r2, #0
    8240:	701a      	strb	r2, [r3, #0]
    8242:	f24c 5349 	movw	r3, #50505	; 0xc549
    8246:	f2c2 0304 	movt	r3, #8196	; 0x2004
    824a:	781b      	ldrb	r3, [r3, #0]
    824c:	461a      	mov	r2, r3
    824e:	f240 5344 	movw	r3, #1348	; 0x544
    8252:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8256:	7859      	ldrb	r1, [r3, #1]
    8258:	f24c 534c 	movw	r3, #50508	; 0xc54c
    825c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8260:	5499      	strb	r1, [r3, r2]
    8262:	4b7d      	ldr	r3, [pc, #500]	; (8458 <send_boot+0xfac>)
    8264:	781a      	ldrb	r2, [r3, #0]
    8266:	f24c 634d 	movw	r3, #50765	; 0xc64d
    826a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    826e:	781b      	ldrb	r3, [r3, #0]
    8270:	4413      	add	r3, r2
    8272:	b2da      	uxtb	r2, r3
    8274:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8278:	f2c2 0304 	movt	r3, #8196	; 0x2004
    827c:	701a      	strb	r2, [r3, #0]
    827e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8286:	781a      	ldrb	r2, [r3, #0]
    8288:	f24c 634d 	movw	r3, #50765	; 0xc64d
    828c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8290:	781b      	ldrb	r3, [r3, #0]
    8292:	4413      	add	r3, r2
    8294:	b2da      	uxtb	r2, r3
    8296:	f24c 634e 	movw	r3, #50766	; 0xc64e
    829a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    829e:	701a      	strb	r2, [r3, #0]
    82a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    82a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82a8:	781b      	ldrb	r3, [r3, #0]
    82aa:	3301      	adds	r3, #1
    82ac:	b2da      	uxtb	r2, r3
    82ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    82b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82b6:	701a      	strb	r2, [r3, #0]
    82b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    82bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82c0:	781b      	ldrb	r3, [r3, #0]
    82c2:	2bff      	cmp	r3, #255	; 0xff
    82c4:	d105      	bne.n	82d2 <send_boot+0xe26>
    82c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    82ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82ce:	2200      	movs	r2, #0
    82d0:	701a      	strb	r2, [r3, #0]
    82d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    82d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82da:	781b      	ldrb	r3, [r3, #0]
    82dc:	461a      	mov	r2, r3
    82de:	f24c 634d 	movw	r3, #50765	; 0xc64d
    82e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82e6:	7819      	ldrb	r1, [r3, #0]
    82e8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    82ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82f0:	5499      	strb	r1, [r3, r2]
    82f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    82f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    82fa:	781b      	ldrb	r3, [r3, #0]
    82fc:	3301      	adds	r3, #1
    82fe:	b2da      	uxtb	r2, r3
    8300:	f24c 5349 	movw	r3, #50505	; 0xc549
    8304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8308:	701a      	strb	r2, [r3, #0]
    830a:	f24c 5349 	movw	r3, #50505	; 0xc549
    830e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8312:	781b      	ldrb	r3, [r3, #0]
    8314:	2bff      	cmp	r3, #255	; 0xff
    8316:	d105      	bne.n	8324 <send_boot+0xe78>
    8318:	f24c 5349 	movw	r3, #50505	; 0xc549
    831c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8320:	2200      	movs	r2, #0
    8322:	701a      	strb	r2, [r3, #0]
    8324:	f24c 5349 	movw	r3, #50505	; 0xc549
    8328:	f2c2 0304 	movt	r3, #8196	; 0x2004
    832c:	781b      	ldrb	r3, [r3, #0]
    832e:	461a      	mov	r2, r3
    8330:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8334:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8338:	7819      	ldrb	r1, [r3, #0]
    833a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    833e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8342:	5499      	strb	r1, [r3, r2]
    8344:	f24c 5349 	movw	r3, #50505	; 0xc549
    8348:	f2c2 0304 	movt	r3, #8196	; 0x2004
    834c:	781b      	ldrb	r3, [r3, #0]
    834e:	3301      	adds	r3, #1
    8350:	b2da      	uxtb	r2, r3
    8352:	f24c 5349 	movw	r3, #50505	; 0xc549
    8356:	f2c2 0304 	movt	r3, #8196	; 0x2004
    835a:	701a      	strb	r2, [r3, #0]
    835c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8360:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8364:	781b      	ldrb	r3, [r3, #0]
    8366:	2bff      	cmp	r3, #255	; 0xff
    8368:	d105      	bne.n	8376 <send_boot+0xeca>
    836a:	f24c 5349 	movw	r3, #50505	; 0xc549
    836e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8372:	2200      	movs	r2, #0
    8374:	701a      	strb	r2, [r3, #0]
    8376:	f242 0339 	movw	r3, #8249	; 0x2039
    837a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    837e:	781b      	ldrb	r3, [r3, #0]
    8380:	b2db      	uxtb	r3, r3
    8382:	f003 0310 	and.w	r3, r3, #16
    8386:	2b00      	cmp	r3, #0
    8388:	d15a      	bne.n	8440 <send_boot+0xf94>
    838a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    838e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8392:	781b      	ldrb	r3, [r3, #0]
    8394:	b2db      	uxtb	r3, r3
    8396:	461a      	mov	r2, r3
    8398:	f24c 534c 	movw	r3, #50508	; 0xc54c
    839c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83a0:	5c9a      	ldrb	r2, [r3, r2]
    83a2:	f24c 634b 	movw	r3, #50763	; 0xc64b
    83a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83aa:	701a      	strb	r2, [r3, #0]
    83ac:	f24c 634c 	movw	r3, #50764	; 0xc64c
    83b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83b4:	2200      	movs	r2, #0
    83b6:	701a      	strb	r2, [r3, #0]
    83b8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    83bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83c0:	781b      	ldrb	r3, [r3, #0]
    83c2:	b2db      	uxtb	r3, r3
    83c4:	3301      	adds	r3, #1
    83c6:	b2da      	uxtb	r2, r3
    83c8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    83cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83d0:	701a      	strb	r2, [r3, #0]
    83d2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    83d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83da:	781b      	ldrb	r3, [r3, #0]
    83dc:	b2db      	uxtb	r3, r3
    83de:	2bff      	cmp	r3, #255	; 0xff
    83e0:	d105      	bne.n	83ee <send_boot+0xf42>
    83e2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    83e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    83ea:	2200      	movs	r2, #0
    83ec:	701a      	strb	r2, [r3, #0]
    83ee:	f242 0338 	movw	r3, #8248	; 0x2038
    83f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83f6:	f242 0238 	movw	r2, #8248	; 0x2038
    83fa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    83fe:	7812      	ldrb	r2, [r2, #0]
    8400:	b2d2      	uxtb	r2, r2
    8402:	f042 0201 	orr.w	r2, r2, #1
    8406:	b2d2      	uxtb	r2, r2
    8408:	701a      	strb	r2, [r3, #0]
    840a:	f242 0339 	movw	r3, #8249	; 0x2039
    840e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8412:	f242 0239 	movw	r2, #8249	; 0x2039
    8416:	f2c2 0200 	movt	r2, #8192	; 0x2000
    841a:	7812      	ldrb	r2, [r2, #0]
    841c:	b2d2      	uxtb	r2, r2
    841e:	f042 0210 	orr.w	r2, r2, #16
    8422:	b2d2      	uxtb	r2, r2
    8424:	701a      	strb	r2, [r3, #0]
    8426:	e00b      	b.n	8440 <send_boot+0xf94>
    8428:	f24c 5348 	movw	r3, #50504	; 0xc548
    842c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8430:	781b      	ldrb	r3, [r3, #0]
    8432:	3301      	adds	r3, #1
    8434:	b2da      	uxtb	r2, r3
    8436:	f24c 5348 	movw	r3, #50504	; 0xc548
    843a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    843e:	701a      	strb	r2, [r3, #0]
      boot = FALSE;
    8440:	f240 533d 	movw	r3, #1341	; 0x53d
    8444:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8448:	2200      	movs	r2, #0
    844a:	701a      	strb	r2, [r3, #0]
  }
}
    844c:	46bd      	mov	sp, r7
    844e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8452:	4770      	bx	lr
    8454:	20000543 	.word	0x20000543
    8458:	20000545 	.word	0x20000545

0000845c <send_attitude>:
void send_attitude(void){ //499ms
    845c:	b480      	push	{r7}
    845e:	af00      	add	r7, sp, #0
    // add by wanbo
  if(!boot)
    8460:	f240 533d 	movw	r3, #1341	; 0x53d
    8464:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8468:	781b      	ldrb	r3, [r3, #0]
    846a:	2b00      	cmp	r3, #0
    846c:	f040 84ee 	bne.w	8e4c <send_attitude+0x9f0>
  {
    count++;
    8470:	f24c 5341 	movw	r3, #50497	; 0xc541
    8474:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8478:	781b      	ldrb	r3, [r3, #0]
    847a:	3301      	adds	r3, #1
    847c:	b2da      	uxtb	r2, r3
    847e:	f24c 5341 	movw	r3, #50497	; 0xc541
    8482:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8486:	701a      	strb	r2, [r3, #0]
    if (count == 250) count = 0;
    8488:	f24c 5341 	movw	r3, #50497	; 0xc541
    848c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8490:	781b      	ldrb	r3, [r3, #0]
    8492:	2bfa      	cmp	r3, #250	; 0xfa
    8494:	d105      	bne.n	84a2 <send_attitude+0x46>
    8496:	f24c 5341 	movw	r3, #50497	; 0xc541
    849a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    849e:	2200      	movs	r2, #0
    84a0:	701a      	strb	r2, [r3, #0]
    if (count % 5 == 0) 
    84a2:	f24c 5341 	movw	r3, #50497	; 0xc541
    84a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84aa:	781a      	ldrb	r2, [r3, #0]
    84ac:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    84b0:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    84b4:	fba3 1302 	umull	r1, r3, r3, r2
    84b8:	0899      	lsrs	r1, r3, #2
    84ba:	460b      	mov	r3, r1
    84bc:	009b      	lsls	r3, r3, #2
    84be:	440b      	add	r3, r1
    84c0:	1ad3      	subs	r3, r2, r3
    84c2:	b2db      	uxtb	r3, r3
    84c4:	2b00      	cmp	r3, #0
    84c6:	f040 84c1 	bne.w	8e4c <send_attitude+0x9f0>
       PERIODIC_SEND_ATTITUDE(); 
    84ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    84ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84d2:	781a      	ldrb	r2, [r3, #0]
    84d4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    84d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84dc:	781b      	ldrb	r3, [r3, #0]
    84de:	b2db      	uxtb	r3, r3
    84e0:	429a      	cmp	r2, r3
    84e2:	d313      	bcc.n	850c <send_attitude+0xb0>
    84e4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    84e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84ec:	781b      	ldrb	r3, [r3, #0]
    84ee:	b2db      	uxtb	r3, r3
    84f0:	461a      	mov	r2, r3
    84f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    84f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    84fa:	781b      	ldrb	r3, [r3, #0]
    84fc:	1ad3      	subs	r3, r2, r3
    84fe:	33ff      	adds	r3, #255	; 0xff
    8500:	2b10      	cmp	r3, #16
    8502:	bfd4      	ite	le
    8504:	2300      	movle	r3, #0
    8506:	2301      	movgt	r3, #1
    8508:	b2db      	uxtb	r3, r3
    850a:	e011      	b.n	8530 <send_attitude+0xd4>
    850c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8510:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8514:	781b      	ldrb	r3, [r3, #0]
    8516:	b2db      	uxtb	r3, r3
    8518:	461a      	mov	r2, r3
    851a:	f24c 5349 	movw	r3, #50505	; 0xc549
    851e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8522:	781b      	ldrb	r3, [r3, #0]
    8524:	1ad3      	subs	r3, r2, r3
    8526:	2b10      	cmp	r3, #16
    8528:	bfd4      	ite	le
    852a:	2300      	movle	r3, #0
    852c:	2301      	movgt	r3, #1
    852e:	b2db      	uxtb	r3, r3
    8530:	2b00      	cmp	r3, #0
    8532:	f000 847f 	beq.w	8e34 <send_attitude+0x9d8>
    8536:	f24c 5349 	movw	r3, #50505	; 0xc549
    853a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    853e:	781b      	ldrb	r3, [r3, #0]
    8540:	461a      	mov	r2, r3
    8542:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8546:	f2c2 0304 	movt	r3, #8196	; 0x2004
    854a:	2105      	movs	r1, #5
    854c:	5499      	strb	r1, [r3, r2]
    854e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8552:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8556:	781b      	ldrb	r3, [r3, #0]
    8558:	3301      	adds	r3, #1
    855a:	b2da      	uxtb	r2, r3
    855c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8564:	701a      	strb	r2, [r3, #0]
    8566:	f24c 5349 	movw	r3, #50505	; 0xc549
    856a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    856e:	781b      	ldrb	r3, [r3, #0]
    8570:	2bff      	cmp	r3, #255	; 0xff
    8572:	d105      	bne.n	8580 <send_attitude+0x124>
    8574:	f24c 5349 	movw	r3, #50505	; 0xc549
    8578:	f2c2 0304 	movt	r3, #8196	; 0x2004
    857c:	2200      	movs	r2, #0
    857e:	701a      	strb	r2, [r3, #0]
    8580:	f24c 5349 	movw	r3, #50505	; 0xc549
    8584:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8588:	781b      	ldrb	r3, [r3, #0]
    858a:	461a      	mov	r2, r3
    858c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8590:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8594:	2106      	movs	r1, #6
    8596:	5499      	strb	r1, [r3, r2]
    8598:	f24c 5349 	movw	r3, #50505	; 0xc549
    859c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85a0:	781b      	ldrb	r3, [r3, #0]
    85a2:	3301      	adds	r3, #1
    85a4:	b2da      	uxtb	r2, r3
    85a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    85aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85ae:	701a      	strb	r2, [r3, #0]
    85b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    85b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85b8:	781b      	ldrb	r3, [r3, #0]
    85ba:	2bff      	cmp	r3, #255	; 0xff
    85bc:	d105      	bne.n	85ca <send_attitude+0x16e>
    85be:	f24c 5349 	movw	r3, #50505	; 0xc549
    85c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85c6:	2200      	movs	r2, #0
    85c8:	701a      	strb	r2, [r3, #0]
    85ca:	f24c 634d 	movw	r3, #50765	; 0xc64d
    85ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85d2:	2206      	movs	r2, #6
    85d4:	701a      	strb	r2, [r3, #0]
    85d6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    85da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85de:	2206      	movs	r2, #6
    85e0:	701a      	strb	r2, [r3, #0]
    85e2:	f24c 5349 	movw	r3, #50505	; 0xc549
    85e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85ea:	781b      	ldrb	r3, [r3, #0]
    85ec:	461a      	mov	r2, r3
    85ee:	f64c 3308 	movw	r3, #51976	; 0xcb08
    85f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    85f6:	7819      	ldrb	r1, [r3, #0]
    85f8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    85fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8600:	5499      	strb	r1, [r3, r2]
    8602:	f64c 3308 	movw	r3, #51976	; 0xcb08
    8606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    860a:	781a      	ldrb	r2, [r3, #0]
    860c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8614:	781b      	ldrb	r3, [r3, #0]
    8616:	4413      	add	r3, r2
    8618:	b2da      	uxtb	r2, r3
    861a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    861e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8622:	701a      	strb	r2, [r3, #0]
    8624:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    862c:	781a      	ldrb	r2, [r3, #0]
    862e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8636:	781b      	ldrb	r3, [r3, #0]
    8638:	4413      	add	r3, r2
    863a:	b2da      	uxtb	r2, r3
    863c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8640:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8644:	701a      	strb	r2, [r3, #0]
    8646:	f24c 5349 	movw	r3, #50505	; 0xc549
    864a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    864e:	781b      	ldrb	r3, [r3, #0]
    8650:	3301      	adds	r3, #1
    8652:	b2da      	uxtb	r2, r3
    8654:	f24c 5349 	movw	r3, #50505	; 0xc549
    8658:	f2c2 0304 	movt	r3, #8196	; 0x2004
    865c:	701a      	strb	r2, [r3, #0]
    865e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8666:	781b      	ldrb	r3, [r3, #0]
    8668:	2bff      	cmp	r3, #255	; 0xff
    866a:	d105      	bne.n	8678 <send_attitude+0x21c>
    866c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8674:	2200      	movs	r2, #0
    8676:	701a      	strb	r2, [r3, #0]
    8678:	f24c 5349 	movw	r3, #50505	; 0xc549
    867c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8680:	781b      	ldrb	r3, [r3, #0]
    8682:	461a      	mov	r2, r3
    8684:	f64c 3308 	movw	r3, #51976	; 0xcb08
    8688:	f2c2 0304 	movt	r3, #8196	; 0x2004
    868c:	7859      	ldrb	r1, [r3, #1]
    868e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8696:	5499      	strb	r1, [r3, r2]
    8698:	4bd1      	ldr	r3, [pc, #836]	; (89e0 <send_attitude+0x584>)
    869a:	781a      	ldrb	r2, [r3, #0]
    869c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    86a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86a4:	781b      	ldrb	r3, [r3, #0]
    86a6:	4413      	add	r3, r2
    86a8:	b2da      	uxtb	r2, r3
    86aa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    86ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86b2:	701a      	strb	r2, [r3, #0]
    86b4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    86b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86bc:	781a      	ldrb	r2, [r3, #0]
    86be:	f24c 634d 	movw	r3, #50765	; 0xc64d
    86c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86c6:	781b      	ldrb	r3, [r3, #0]
    86c8:	4413      	add	r3, r2
    86ca:	b2da      	uxtb	r2, r3
    86cc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    86d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86d4:	701a      	strb	r2, [r3, #0]
    86d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    86da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86de:	781b      	ldrb	r3, [r3, #0]
    86e0:	3301      	adds	r3, #1
    86e2:	b2da      	uxtb	r2, r3
    86e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    86e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86ec:	701a      	strb	r2, [r3, #0]
    86ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    86f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    86f6:	781b      	ldrb	r3, [r3, #0]
    86f8:	2bff      	cmp	r3, #255	; 0xff
    86fa:	d105      	bne.n	8708 <send_attitude+0x2ac>
    86fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    8700:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8704:	2200      	movs	r2, #0
    8706:	701a      	strb	r2, [r3, #0]
    8708:	f24c 5349 	movw	r3, #50505	; 0xc549
    870c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8710:	781b      	ldrb	r3, [r3, #0]
    8712:	461a      	mov	r2, r3
    8714:	f64c 3308 	movw	r3, #51976	; 0xcb08
    8718:	f2c2 0304 	movt	r3, #8196	; 0x2004
    871c:	7899      	ldrb	r1, [r3, #2]
    871e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8722:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8726:	5499      	strb	r1, [r3, r2]
    8728:	4bae      	ldr	r3, [pc, #696]	; (89e4 <send_attitude+0x588>)
    872a:	781a      	ldrb	r2, [r3, #0]
    872c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8730:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8734:	781b      	ldrb	r3, [r3, #0]
    8736:	4413      	add	r3, r2
    8738:	b2da      	uxtb	r2, r3
    873a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    873e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8742:	701a      	strb	r2, [r3, #0]
    8744:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8748:	f2c2 0304 	movt	r3, #8196	; 0x2004
    874c:	781a      	ldrb	r2, [r3, #0]
    874e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8756:	781b      	ldrb	r3, [r3, #0]
    8758:	4413      	add	r3, r2
    875a:	b2da      	uxtb	r2, r3
    875c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8760:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8764:	701a      	strb	r2, [r3, #0]
    8766:	f24c 5349 	movw	r3, #50505	; 0xc549
    876a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    876e:	781b      	ldrb	r3, [r3, #0]
    8770:	3301      	adds	r3, #1
    8772:	b2da      	uxtb	r2, r3
    8774:	f24c 5349 	movw	r3, #50505	; 0xc549
    8778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    877c:	701a      	strb	r2, [r3, #0]
    877e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8782:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8786:	781b      	ldrb	r3, [r3, #0]
    8788:	2bff      	cmp	r3, #255	; 0xff
    878a:	d105      	bne.n	8798 <send_attitude+0x33c>
    878c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8790:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8794:	2200      	movs	r2, #0
    8796:	701a      	strb	r2, [r3, #0]
    8798:	f24c 5349 	movw	r3, #50505	; 0xc549
    879c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87a0:	781b      	ldrb	r3, [r3, #0]
    87a2:	461a      	mov	r2, r3
    87a4:	f64c 3308 	movw	r3, #51976	; 0xcb08
    87a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87ac:	78d9      	ldrb	r1, [r3, #3]
    87ae:	f24c 534c 	movw	r3, #50508	; 0xc54c
    87b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87b6:	5499      	strb	r1, [r3, r2]
    87b8:	4b8b      	ldr	r3, [pc, #556]	; (89e8 <send_attitude+0x58c>)
    87ba:	781a      	ldrb	r2, [r3, #0]
    87bc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    87c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87c4:	781b      	ldrb	r3, [r3, #0]
    87c6:	4413      	add	r3, r2
    87c8:	b2da      	uxtb	r2, r3
    87ca:	f24c 634d 	movw	r3, #50765	; 0xc64d
    87ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87d2:	701a      	strb	r2, [r3, #0]
    87d4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    87d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87dc:	781a      	ldrb	r2, [r3, #0]
    87de:	f24c 634d 	movw	r3, #50765	; 0xc64d
    87e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87e6:	781b      	ldrb	r3, [r3, #0]
    87e8:	4413      	add	r3, r2
    87ea:	b2da      	uxtb	r2, r3
    87ec:	f24c 634e 	movw	r3, #50766	; 0xc64e
    87f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87f4:	701a      	strb	r2, [r3, #0]
    87f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    87fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    87fe:	781b      	ldrb	r3, [r3, #0]
    8800:	3301      	adds	r3, #1
    8802:	b2da      	uxtb	r2, r3
    8804:	f24c 5349 	movw	r3, #50505	; 0xc549
    8808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    880c:	701a      	strb	r2, [r3, #0]
    880e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8816:	781b      	ldrb	r3, [r3, #0]
    8818:	2bff      	cmp	r3, #255	; 0xff
    881a:	d105      	bne.n	8828 <send_attitude+0x3cc>
    881c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8820:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8824:	2200      	movs	r2, #0
    8826:	701a      	strb	r2, [r3, #0]
    8828:	f24c 5349 	movw	r3, #50505	; 0xc549
    882c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8830:	781b      	ldrb	r3, [r3, #0]
    8832:	461a      	mov	r2, r3
    8834:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    8838:	f2c2 0304 	movt	r3, #8196	; 0x2004
    883c:	7819      	ldrb	r1, [r3, #0]
    883e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8846:	5499      	strb	r1, [r3, r2]
    8848:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    884c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8850:	781a      	ldrb	r2, [r3, #0]
    8852:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8856:	f2c2 0304 	movt	r3, #8196	; 0x2004
    885a:	781b      	ldrb	r3, [r3, #0]
    885c:	4413      	add	r3, r2
    885e:	b2da      	uxtb	r2, r3
    8860:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8864:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8868:	701a      	strb	r2, [r3, #0]
    886a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    886e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8872:	781a      	ldrb	r2, [r3, #0]
    8874:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    887c:	781b      	ldrb	r3, [r3, #0]
    887e:	4413      	add	r3, r2
    8880:	b2da      	uxtb	r2, r3
    8882:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8886:	f2c2 0304 	movt	r3, #8196	; 0x2004
    888a:	701a      	strb	r2, [r3, #0]
    888c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8894:	781b      	ldrb	r3, [r3, #0]
    8896:	3301      	adds	r3, #1
    8898:	b2da      	uxtb	r2, r3
    889a:	f24c 5349 	movw	r3, #50505	; 0xc549
    889e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88a2:	701a      	strb	r2, [r3, #0]
    88a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    88a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88ac:	781b      	ldrb	r3, [r3, #0]
    88ae:	2bff      	cmp	r3, #255	; 0xff
    88b0:	d105      	bne.n	88be <send_attitude+0x462>
    88b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    88b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88ba:	2200      	movs	r2, #0
    88bc:	701a      	strb	r2, [r3, #0]
    88be:	f24c 5349 	movw	r3, #50505	; 0xc549
    88c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88c6:	781b      	ldrb	r3, [r3, #0]
    88c8:	461a      	mov	r2, r3
    88ca:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    88ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88d2:	7859      	ldrb	r1, [r3, #1]
    88d4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    88d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88dc:	5499      	strb	r1, [r3, r2]
    88de:	4b43      	ldr	r3, [pc, #268]	; (89ec <send_attitude+0x590>)
    88e0:	781a      	ldrb	r2, [r3, #0]
    88e2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    88e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88ea:	781b      	ldrb	r3, [r3, #0]
    88ec:	4413      	add	r3, r2
    88ee:	b2da      	uxtb	r2, r3
    88f0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    88f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    88f8:	701a      	strb	r2, [r3, #0]
    88fa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    88fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8902:	781a      	ldrb	r2, [r3, #0]
    8904:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    890c:	781b      	ldrb	r3, [r3, #0]
    890e:	4413      	add	r3, r2
    8910:	b2da      	uxtb	r2, r3
    8912:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8916:	f2c2 0304 	movt	r3, #8196	; 0x2004
    891a:	701a      	strb	r2, [r3, #0]
    891c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8924:	781b      	ldrb	r3, [r3, #0]
    8926:	3301      	adds	r3, #1
    8928:	b2da      	uxtb	r2, r3
    892a:	f24c 5349 	movw	r3, #50505	; 0xc549
    892e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8932:	701a      	strb	r2, [r3, #0]
    8934:	f24c 5349 	movw	r3, #50505	; 0xc549
    8938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    893c:	781b      	ldrb	r3, [r3, #0]
    893e:	2bff      	cmp	r3, #255	; 0xff
    8940:	d105      	bne.n	894e <send_attitude+0x4f2>
    8942:	f24c 5349 	movw	r3, #50505	; 0xc549
    8946:	f2c2 0304 	movt	r3, #8196	; 0x2004
    894a:	2200      	movs	r2, #0
    894c:	701a      	strb	r2, [r3, #0]
    894e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8956:	781b      	ldrb	r3, [r3, #0]
    8958:	461a      	mov	r2, r3
    895a:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    895e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8962:	7899      	ldrb	r1, [r3, #2]
    8964:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8968:	f2c2 0304 	movt	r3, #8196	; 0x2004
    896c:	5499      	strb	r1, [r3, r2]
    896e:	4b20      	ldr	r3, [pc, #128]	; (89f0 <send_attitude+0x594>)
    8970:	781a      	ldrb	r2, [r3, #0]
    8972:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8976:	f2c2 0304 	movt	r3, #8196	; 0x2004
    897a:	781b      	ldrb	r3, [r3, #0]
    897c:	4413      	add	r3, r2
    897e:	b2da      	uxtb	r2, r3
    8980:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8988:	701a      	strb	r2, [r3, #0]
    898a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    898e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8992:	781a      	ldrb	r2, [r3, #0]
    8994:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8998:	f2c2 0304 	movt	r3, #8196	; 0x2004
    899c:	781b      	ldrb	r3, [r3, #0]
    899e:	4413      	add	r3, r2
    89a0:	b2da      	uxtb	r2, r3
    89a2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    89a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89aa:	701a      	strb	r2, [r3, #0]
    89ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    89b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89b4:	781b      	ldrb	r3, [r3, #0]
    89b6:	3301      	adds	r3, #1
    89b8:	b2da      	uxtb	r2, r3
    89ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    89be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89c2:	701a      	strb	r2, [r3, #0]
    89c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    89c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89cc:	781b      	ldrb	r3, [r3, #0]
    89ce:	2bff      	cmp	r3, #255	; 0xff
    89d0:	d110      	bne.n	89f4 <send_attitude+0x598>
    89d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    89d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89da:	2200      	movs	r2, #0
    89dc:	701a      	strb	r2, [r3, #0]
    89de:	e009      	b.n	89f4 <send_attitude+0x598>
    89e0:	2004cb09 	.word	0x2004cb09
    89e4:	2004cb0a 	.word	0x2004cb0a
    89e8:	2004cb0b 	.word	0x2004cb0b
    89ec:	2004cb0d 	.word	0x2004cb0d
    89f0:	2004cb0e 	.word	0x2004cb0e
    89f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    89f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    89fc:	781b      	ldrb	r3, [r3, #0]
    89fe:	461a      	mov	r2, r3
    8a00:	f64c 330c 	movw	r3, #51980	; 0xcb0c
    8a04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a08:	78d9      	ldrb	r1, [r3, #3]
    8a0a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8a0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a12:	5499      	strb	r1, [r3, r2]
    8a14:	4bc2      	ldr	r3, [pc, #776]	; (8d20 <send_attitude+0x8c4>)
    8a16:	781a      	ldrb	r2, [r3, #0]
    8a18:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8a1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a20:	781b      	ldrb	r3, [r3, #0]
    8a22:	4413      	add	r3, r2
    8a24:	b2da      	uxtb	r2, r3
    8a26:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8a2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a2e:	701a      	strb	r2, [r3, #0]
    8a30:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8a34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a38:	781a      	ldrb	r2, [r3, #0]
    8a3a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8a3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a42:	781b      	ldrb	r3, [r3, #0]
    8a44:	4413      	add	r3, r2
    8a46:	b2da      	uxtb	r2, r3
    8a48:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8a4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a50:	701a      	strb	r2, [r3, #0]
    8a52:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a5a:	781b      	ldrb	r3, [r3, #0]
    8a5c:	3301      	adds	r3, #1
    8a5e:	b2da      	uxtb	r2, r3
    8a60:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a68:	701a      	strb	r2, [r3, #0]
    8a6a:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a72:	781b      	ldrb	r3, [r3, #0]
    8a74:	2bff      	cmp	r3, #255	; 0xff
    8a76:	d105      	bne.n	8a84 <send_attitude+0x628>
    8a78:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a80:	2200      	movs	r2, #0
    8a82:	701a      	strb	r2, [r3, #0]
    8a84:	f24c 5349 	movw	r3, #50505	; 0xc549
    8a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a8c:	781b      	ldrb	r3, [r3, #0]
    8a8e:	461a      	mov	r2, r3
    8a90:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8a94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8a98:	7819      	ldrb	r1, [r3, #0]
    8a9a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8a9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aa2:	5499      	strb	r1, [r3, r2]
    8aa4:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8aa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8aac:	781a      	ldrb	r2, [r3, #0]
    8aae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8ab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ab6:	781b      	ldrb	r3, [r3, #0]
    8ab8:	4413      	add	r3, r2
    8aba:	b2da      	uxtb	r2, r3
    8abc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8ac0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ac4:	701a      	strb	r2, [r3, #0]
    8ac6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8aca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ace:	781a      	ldrb	r2, [r3, #0]
    8ad0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8ad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ad8:	781b      	ldrb	r3, [r3, #0]
    8ada:	4413      	add	r3, r2
    8adc:	b2da      	uxtb	r2, r3
    8ade:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ae6:	701a      	strb	r2, [r3, #0]
    8ae8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8aec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8af0:	781b      	ldrb	r3, [r3, #0]
    8af2:	3301      	adds	r3, #1
    8af4:	b2da      	uxtb	r2, r3
    8af6:	f24c 5349 	movw	r3, #50505	; 0xc549
    8afa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8afe:	701a      	strb	r2, [r3, #0]
    8b00:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b08:	781b      	ldrb	r3, [r3, #0]
    8b0a:	2bff      	cmp	r3, #255	; 0xff
    8b0c:	d105      	bne.n	8b1a <send_attitude+0x6be>
    8b0e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b16:	2200      	movs	r2, #0
    8b18:	701a      	strb	r2, [r3, #0]
    8b1a:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b22:	781b      	ldrb	r3, [r3, #0]
    8b24:	461a      	mov	r2, r3
    8b26:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b2e:	7859      	ldrb	r1, [r3, #1]
    8b30:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8b34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b38:	5499      	strb	r1, [r3, r2]
    8b3a:	4b7a      	ldr	r3, [pc, #488]	; (8d24 <send_attitude+0x8c8>)
    8b3c:	781a      	ldrb	r2, [r3, #0]
    8b3e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8b42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b46:	781b      	ldrb	r3, [r3, #0]
    8b48:	4413      	add	r3, r2
    8b4a:	b2da      	uxtb	r2, r3
    8b4c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8b50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b54:	701a      	strb	r2, [r3, #0]
    8b56:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8b5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b5e:	781a      	ldrb	r2, [r3, #0]
    8b60:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8b64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b68:	781b      	ldrb	r3, [r3, #0]
    8b6a:	4413      	add	r3, r2
    8b6c:	b2da      	uxtb	r2, r3
    8b6e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8b72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b76:	701a      	strb	r2, [r3, #0]
    8b78:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b80:	781b      	ldrb	r3, [r3, #0]
    8b82:	3301      	adds	r3, #1
    8b84:	b2da      	uxtb	r2, r3
    8b86:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b8e:	701a      	strb	r2, [r3, #0]
    8b90:	f24c 5349 	movw	r3, #50505	; 0xc549
    8b94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8b98:	781b      	ldrb	r3, [r3, #0]
    8b9a:	2bff      	cmp	r3, #255	; 0xff
    8b9c:	d105      	bne.n	8baa <send_attitude+0x74e>
    8b9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ba6:	2200      	movs	r2, #0
    8ba8:	701a      	strb	r2, [r3, #0]
    8baa:	f24c 5349 	movw	r3, #50505	; 0xc549
    8bae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bb2:	781b      	ldrb	r3, [r3, #0]
    8bb4:	461a      	mov	r2, r3
    8bb6:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8bba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bbe:	7899      	ldrb	r1, [r3, #2]
    8bc0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8bc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bc8:	5499      	strb	r1, [r3, r2]
    8bca:	4b57      	ldr	r3, [pc, #348]	; (8d28 <send_attitude+0x8cc>)
    8bcc:	781a      	ldrb	r2, [r3, #0]
    8bce:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8bd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bd6:	781b      	ldrb	r3, [r3, #0]
    8bd8:	4413      	add	r3, r2
    8bda:	b2da      	uxtb	r2, r3
    8bdc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8be0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8be4:	701a      	strb	r2, [r3, #0]
    8be6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8bea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bee:	781a      	ldrb	r2, [r3, #0]
    8bf0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8bf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8bf8:	781b      	ldrb	r3, [r3, #0]
    8bfa:	4413      	add	r3, r2
    8bfc:	b2da      	uxtb	r2, r3
    8bfe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8c02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c06:	701a      	strb	r2, [r3, #0]
    8c08:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c10:	781b      	ldrb	r3, [r3, #0]
    8c12:	3301      	adds	r3, #1
    8c14:	b2da      	uxtb	r2, r3
    8c16:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c1e:	701a      	strb	r2, [r3, #0]
    8c20:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c28:	781b      	ldrb	r3, [r3, #0]
    8c2a:	2bff      	cmp	r3, #255	; 0xff
    8c2c:	d105      	bne.n	8c3a <send_attitude+0x7de>
    8c2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c36:	2200      	movs	r2, #0
    8c38:	701a      	strb	r2, [r3, #0]
    8c3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c42:	781b      	ldrb	r3, [r3, #0]
    8c44:	461a      	mov	r2, r3
    8c46:	f64c 3310 	movw	r3, #51984	; 0xcb10
    8c4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c4e:	78d9      	ldrb	r1, [r3, #3]
    8c50:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8c54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c58:	5499      	strb	r1, [r3, r2]
    8c5a:	4b34      	ldr	r3, [pc, #208]	; (8d2c <send_attitude+0x8d0>)
    8c5c:	781a      	ldrb	r2, [r3, #0]
    8c5e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8c62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c66:	781b      	ldrb	r3, [r3, #0]
    8c68:	4413      	add	r3, r2
    8c6a:	b2da      	uxtb	r2, r3
    8c6c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8c70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c74:	701a      	strb	r2, [r3, #0]
    8c76:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8c7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c7e:	781a      	ldrb	r2, [r3, #0]
    8c80:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c88:	781b      	ldrb	r3, [r3, #0]
    8c8a:	4413      	add	r3, r2
    8c8c:	b2da      	uxtb	r2, r3
    8c8e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8c92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8c96:	701a      	strb	r2, [r3, #0]
    8c98:	f24c 5349 	movw	r3, #50505	; 0xc549
    8c9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ca0:	781b      	ldrb	r3, [r3, #0]
    8ca2:	3301      	adds	r3, #1
    8ca4:	b2da      	uxtb	r2, r3
    8ca6:	f24c 5349 	movw	r3, #50505	; 0xc549
    8caa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cae:	701a      	strb	r2, [r3, #0]
    8cb0:	f24c 5349 	movw	r3, #50505	; 0xc549
    8cb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cb8:	781b      	ldrb	r3, [r3, #0]
    8cba:	2bff      	cmp	r3, #255	; 0xff
    8cbc:	d105      	bne.n	8cca <send_attitude+0x86e>
    8cbe:	f24c 5349 	movw	r3, #50505	; 0xc549
    8cc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cc6:	2200      	movs	r2, #0
    8cc8:	701a      	strb	r2, [r3, #0]
    8cca:	f24c 5349 	movw	r3, #50505	; 0xc549
    8cce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cd2:	781b      	ldrb	r3, [r3, #0]
    8cd4:	461a      	mov	r2, r3
    8cd6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8cda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cde:	7819      	ldrb	r1, [r3, #0]
    8ce0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8ce4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ce8:	5499      	strb	r1, [r3, r2]
    8cea:	f24c 5349 	movw	r3, #50505	; 0xc549
    8cee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8cf2:	781b      	ldrb	r3, [r3, #0]
    8cf4:	3301      	adds	r3, #1
    8cf6:	b2da      	uxtb	r2, r3
    8cf8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d00:	701a      	strb	r2, [r3, #0]
    8d02:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d0a:	781b      	ldrb	r3, [r3, #0]
    8d0c:	2bff      	cmp	r3, #255	; 0xff
    8d0e:	d10f      	bne.n	8d30 <send_attitude+0x8d4>
    8d10:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d18:	2200      	movs	r2, #0
    8d1a:	701a      	strb	r2, [r3, #0]
    8d1c:	e008      	b.n	8d30 <send_attitude+0x8d4>
    8d1e:	bf00      	nop
    8d20:	2004cb0f 	.word	0x2004cb0f
    8d24:	2004cb11 	.word	0x2004cb11
    8d28:	2004cb12 	.word	0x2004cb12
    8d2c:	2004cb13 	.word	0x2004cb13
    8d30:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d38:	781b      	ldrb	r3, [r3, #0]
    8d3a:	461a      	mov	r2, r3
    8d3c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8d40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d44:	7819      	ldrb	r1, [r3, #0]
    8d46:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d4e:	5499      	strb	r1, [r3, r2]
    8d50:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d58:	781b      	ldrb	r3, [r3, #0]
    8d5a:	3301      	adds	r3, #1
    8d5c:	b2da      	uxtb	r2, r3
    8d5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d66:	701a      	strb	r2, [r3, #0]
    8d68:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d70:	781b      	ldrb	r3, [r3, #0]
    8d72:	2bff      	cmp	r3, #255	; 0xff
    8d74:	d105      	bne.n	8d82 <send_attitude+0x926>
    8d76:	f24c 5349 	movw	r3, #50505	; 0xc549
    8d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d7e:	2200      	movs	r2, #0
    8d80:	701a      	strb	r2, [r3, #0]
    8d82:	f242 0339 	movw	r3, #8249	; 0x2039
    8d86:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8d8a:	781b      	ldrb	r3, [r3, #0]
    8d8c:	b2db      	uxtb	r3, r3
    8d8e:	f003 0310 	and.w	r3, r3, #16
    8d92:	2b00      	cmp	r3, #0
    8d94:	d15a      	bne.n	8e4c <send_attitude+0x9f0>
    8d96:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8d9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8d9e:	781b      	ldrb	r3, [r3, #0]
    8da0:	b2db      	uxtb	r3, r3
    8da2:	461a      	mov	r2, r3
    8da4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8da8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dac:	5c9a      	ldrb	r2, [r3, r2]
    8dae:	f24c 634b 	movw	r3, #50763	; 0xc64b
    8db2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8db6:	701a      	strb	r2, [r3, #0]
    8db8:	f24c 634c 	movw	r3, #50764	; 0xc64c
    8dbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dc0:	2200      	movs	r2, #0
    8dc2:	701a      	strb	r2, [r3, #0]
    8dc4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8dc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8dcc:	781b      	ldrb	r3, [r3, #0]
    8dce:	b2db      	uxtb	r3, r3
    8dd0:	3301      	adds	r3, #1
    8dd2:	b2da      	uxtb	r2, r3
    8dd4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8dd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ddc:	701a      	strb	r2, [r3, #0]
    8dde:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8de2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8de6:	781b      	ldrb	r3, [r3, #0]
    8de8:	b2db      	uxtb	r3, r3
    8dea:	2bff      	cmp	r3, #255	; 0xff
    8dec:	d105      	bne.n	8dfa <send_attitude+0x99e>
    8dee:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8df2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8df6:	2200      	movs	r2, #0
    8df8:	701a      	strb	r2, [r3, #0]
    8dfa:	f242 0338 	movw	r3, #8248	; 0x2038
    8dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e02:	f242 0238 	movw	r2, #8248	; 0x2038
    8e06:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8e0a:	7812      	ldrb	r2, [r2, #0]
    8e0c:	b2d2      	uxtb	r2, r2
    8e0e:	f042 0201 	orr.w	r2, r2, #1
    8e12:	b2d2      	uxtb	r2, r2
    8e14:	701a      	strb	r2, [r3, #0]
    8e16:	f242 0339 	movw	r3, #8249	; 0x2039
    8e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e1e:	f242 0239 	movw	r2, #8249	; 0x2039
    8e22:	f2c2 0200 	movt	r2, #8192	; 0x2000
    8e26:	7812      	ldrb	r2, [r2, #0]
    8e28:	b2d2      	uxtb	r2, r2
    8e2a:	f042 0210 	orr.w	r2, r2, #16
    8e2e:	b2d2      	uxtb	r2, r2
    8e30:	701a      	strb	r2, [r3, #0]
    8e32:	e00b      	b.n	8e4c <send_attitude+0x9f0>
    8e34:	f24c 5348 	movw	r3, #50504	; 0xc548
    8e38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e3c:	781b      	ldrb	r3, [r3, #0]
    8e3e:	3301      	adds	r3, #1
    8e40:	b2da      	uxtb	r2, r3
    8e42:	f24c 5348 	movw	r3, #50504	; 0xc548
    8e46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e4a:	701a      	strb	r2, [r3, #0]
  }
}
    8e4c:	46bd      	mov	sp, r7
    8e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e52:	4770      	bx	lr

00008e54 <send_adc>:
  
void send_adc(void){  //500ms
    8e54:	b480      	push	{r7}
    8e56:	af00      	add	r7, sp, #0
  if(!boot)
    8e58:	f240 533d 	movw	r3, #1341	; 0x53d
    8e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8e60:	781b      	ldrb	r3, [r3, #0]
    8e62:	2b00      	cmp	r3, #0
    8e64:	f040 827d 	bne.w	9362 <send_adc+0x50e>
  { if (count % 5 == 1) PERIODIC_SEND_ADC();}
    8e68:	f24c 5341 	movw	r3, #50497	; 0xc541
    8e6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e70:	781a      	ldrb	r2, [r3, #0]
    8e72:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    8e76:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    8e7a:	fba3 1302 	umull	r1, r3, r3, r2
    8e7e:	0899      	lsrs	r1, r3, #2
    8e80:	460b      	mov	r3, r1
    8e82:	009b      	lsls	r3, r3, #2
    8e84:	440b      	add	r3, r1
    8e86:	1ad3      	subs	r3, r2, r3
    8e88:	b2db      	uxtb	r3, r3
    8e8a:	2b01      	cmp	r3, #1
    8e8c:	f040 8269 	bne.w	9362 <send_adc+0x50e>
    8e90:	f24c 5349 	movw	r3, #50505	; 0xc549
    8e94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8e98:	781a      	ldrb	r2, [r3, #0]
    8e9a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8e9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ea2:	781b      	ldrb	r3, [r3, #0]
    8ea4:	b2db      	uxtb	r3, r3
    8ea6:	429a      	cmp	r2, r3
    8ea8:	d313      	bcc.n	8ed2 <send_adc+0x7e>
    8eaa:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8eae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eb2:	781b      	ldrb	r3, [r3, #0]
    8eb4:	b2db      	uxtb	r3, r3
    8eb6:	461a      	mov	r2, r3
    8eb8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ec0:	781b      	ldrb	r3, [r3, #0]
    8ec2:	1ad3      	subs	r3, r2, r3
    8ec4:	33ff      	adds	r3, #255	; 0xff
    8ec6:	2b08      	cmp	r3, #8
    8ec8:	bfd4      	ite	le
    8eca:	2300      	movle	r3, #0
    8ecc:	2301      	movgt	r3, #1
    8ece:	b2db      	uxtb	r3, r3
    8ed0:	e011      	b.n	8ef6 <send_adc+0xa2>
    8ed2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    8ed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8eda:	781b      	ldrb	r3, [r3, #0]
    8edc:	b2db      	uxtb	r3, r3
    8ede:	461a      	mov	r2, r3
    8ee0:	f24c 5349 	movw	r3, #50505	; 0xc549
    8ee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ee8:	781b      	ldrb	r3, [r3, #0]
    8eea:	1ad3      	subs	r3, r2, r3
    8eec:	2b08      	cmp	r3, #8
    8eee:	bfd4      	ite	le
    8ef0:	2300      	movle	r3, #0
    8ef2:	2301      	movgt	r3, #1
    8ef4:	b2db      	uxtb	r3, r3
    8ef6:	2b00      	cmp	r3, #0
    8ef8:	f000 8227 	beq.w	934a <send_adc+0x4f6>
    8efc:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f04:	781b      	ldrb	r3, [r3, #0]
    8f06:	461a      	mov	r2, r3
    8f08:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8f0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f10:	2105      	movs	r1, #5
    8f12:	5499      	strb	r1, [r3, r2]
    8f14:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f1c:	781b      	ldrb	r3, [r3, #0]
    8f1e:	3301      	adds	r3, #1
    8f20:	b2da      	uxtb	r2, r3
    8f22:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f26:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f2a:	701a      	strb	r2, [r3, #0]
    8f2c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f34:	781b      	ldrb	r3, [r3, #0]
    8f36:	2bff      	cmp	r3, #255	; 0xff
    8f38:	d105      	bne.n	8f46 <send_adc+0xf2>
    8f3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f42:	2200      	movs	r2, #0
    8f44:	701a      	strb	r2, [r3, #0]
    8f46:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f4e:	781b      	ldrb	r3, [r3, #0]
    8f50:	461a      	mov	r2, r3
    8f52:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8f56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f5a:	2107      	movs	r1, #7
    8f5c:	5499      	strb	r1, [r3, r2]
    8f5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f66:	781b      	ldrb	r3, [r3, #0]
    8f68:	3301      	adds	r3, #1
    8f6a:	b2da      	uxtb	r2, r3
    8f6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f74:	701a      	strb	r2, [r3, #0]
    8f76:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f7e:	781b      	ldrb	r3, [r3, #0]
    8f80:	2bff      	cmp	r3, #255	; 0xff
    8f82:	d105      	bne.n	8f90 <send_adc+0x13c>
    8f84:	f24c 5349 	movw	r3, #50505	; 0xc549
    8f88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f8c:	2200      	movs	r2, #0
    8f8e:	701a      	strb	r2, [r3, #0]
    8f90:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8f94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8f98:	2207      	movs	r2, #7
    8f9a:	701a      	strb	r2, [r3, #0]
    8f9c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8fa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fa4:	2207      	movs	r2, #7
    8fa6:	701a      	strb	r2, [r3, #0]
    8fa8:	f24c 5349 	movw	r3, #50505	; 0xc549
    8fac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fb0:	781b      	ldrb	r3, [r3, #0]
    8fb2:	461a      	mov	r2, r3
    8fb4:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
    8fb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fbc:	7819      	ldrb	r1, [r3, #0]
    8fbe:	f24c 534c 	movw	r3, #50508	; 0xc54c
    8fc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fc6:	5499      	strb	r1, [r3, r2]
    8fc8:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
    8fcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fd0:	781a      	ldrb	r2, [r3, #0]
    8fd2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8fd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fda:	781b      	ldrb	r3, [r3, #0]
    8fdc:	4413      	add	r3, r2
    8fde:	b2da      	uxtb	r2, r3
    8fe0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8fe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8fe8:	701a      	strb	r2, [r3, #0]
    8fea:	f24c 634e 	movw	r3, #50766	; 0xc64e
    8fee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ff2:	781a      	ldrb	r2, [r3, #0]
    8ff4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    8ff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    8ffc:	781b      	ldrb	r3, [r3, #0]
    8ffe:	4413      	add	r3, r2
    9000:	b2da      	uxtb	r2, r3
    9002:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    900a:	701a      	strb	r2, [r3, #0]
    900c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9014:	781b      	ldrb	r3, [r3, #0]
    9016:	3301      	adds	r3, #1
    9018:	b2da      	uxtb	r2, r3
    901a:	f24c 5349 	movw	r3, #50505	; 0xc549
    901e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9022:	701a      	strb	r2, [r3, #0]
    9024:	f24c 5349 	movw	r3, #50505	; 0xc549
    9028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    902c:	781b      	ldrb	r3, [r3, #0]
    902e:	2bff      	cmp	r3, #255	; 0xff
    9030:	d105      	bne.n	903e <send_adc+0x1ea>
    9032:	f24c 5349 	movw	r3, #50505	; 0xc549
    9036:	f2c2 0304 	movt	r3, #8196	; 0x2004
    903a:	2200      	movs	r2, #0
    903c:	701a      	strb	r2, [r3, #0]
    903e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9042:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9046:	781b      	ldrb	r3, [r3, #0]
    9048:	461a      	mov	r2, r3
    904a:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
    904e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9052:	7859      	ldrb	r1, [r3, #1]
    9054:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    905c:	5499      	strb	r1, [r3, r2]
    905e:	4bc3      	ldr	r3, [pc, #780]	; (936c <send_adc+0x518>)
    9060:	781a      	ldrb	r2, [r3, #0]
    9062:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9066:	f2c2 0304 	movt	r3, #8196	; 0x2004
    906a:	781b      	ldrb	r3, [r3, #0]
    906c:	4413      	add	r3, r2
    906e:	b2da      	uxtb	r2, r3
    9070:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9078:	701a      	strb	r2, [r3, #0]
    907a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    907e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9082:	781a      	ldrb	r2, [r3, #0]
    9084:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    908c:	781b      	ldrb	r3, [r3, #0]
    908e:	4413      	add	r3, r2
    9090:	b2da      	uxtb	r2, r3
    9092:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    909a:	701a      	strb	r2, [r3, #0]
    909c:	f24c 5349 	movw	r3, #50505	; 0xc549
    90a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90a4:	781b      	ldrb	r3, [r3, #0]
    90a6:	3301      	adds	r3, #1
    90a8:	b2da      	uxtb	r2, r3
    90aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    90ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90b2:	701a      	strb	r2, [r3, #0]
    90b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    90b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90bc:	781b      	ldrb	r3, [r3, #0]
    90be:	2bff      	cmp	r3, #255	; 0xff
    90c0:	d105      	bne.n	90ce <send_adc+0x27a>
    90c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    90c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90ca:	2200      	movs	r2, #0
    90cc:	701a      	strb	r2, [r3, #0]
    90ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    90d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90d6:	781b      	ldrb	r3, [r3, #0]
    90d8:	461a      	mov	r2, r3
    90da:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
    90de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90e2:	7819      	ldrb	r1, [r3, #0]
    90e4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    90e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90ec:	5499      	strb	r1, [r3, r2]
    90ee:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
    90f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    90f6:	781a      	ldrb	r2, [r3, #0]
    90f8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    90fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9100:	781b      	ldrb	r3, [r3, #0]
    9102:	4413      	add	r3, r2
    9104:	b2da      	uxtb	r2, r3
    9106:	f24c 634d 	movw	r3, #50765	; 0xc64d
    910a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    910e:	701a      	strb	r2, [r3, #0]
    9110:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9118:	781a      	ldrb	r2, [r3, #0]
    911a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    911e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9122:	781b      	ldrb	r3, [r3, #0]
    9124:	4413      	add	r3, r2
    9126:	b2da      	uxtb	r2, r3
    9128:	f24c 634e 	movw	r3, #50766	; 0xc64e
    912c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9130:	701a      	strb	r2, [r3, #0]
    9132:	f24c 5349 	movw	r3, #50505	; 0xc549
    9136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    913a:	781b      	ldrb	r3, [r3, #0]
    913c:	3301      	adds	r3, #1
    913e:	b2da      	uxtb	r2, r3
    9140:	f24c 5349 	movw	r3, #50505	; 0xc549
    9144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9148:	701a      	strb	r2, [r3, #0]
    914a:	f24c 5349 	movw	r3, #50505	; 0xc549
    914e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9152:	781b      	ldrb	r3, [r3, #0]
    9154:	2bff      	cmp	r3, #255	; 0xff
    9156:	d105      	bne.n	9164 <send_adc+0x310>
    9158:	f24c 5349 	movw	r3, #50505	; 0xc549
    915c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9160:	2200      	movs	r2, #0
    9162:	701a      	strb	r2, [r3, #0]
    9164:	f24c 5349 	movw	r3, #50505	; 0xc549
    9168:	f2c2 0304 	movt	r3, #8196	; 0x2004
    916c:	781b      	ldrb	r3, [r3, #0]
    916e:	461a      	mov	r2, r3
    9170:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
    9174:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9178:	7859      	ldrb	r1, [r3, #1]
    917a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    917e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9182:	5499      	strb	r1, [r3, r2]
    9184:	4b7a      	ldr	r3, [pc, #488]	; (9370 <send_adc+0x51c>)
    9186:	781a      	ldrb	r2, [r3, #0]
    9188:	f24c 634d 	movw	r3, #50765	; 0xc64d
    918c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9190:	781b      	ldrb	r3, [r3, #0]
    9192:	4413      	add	r3, r2
    9194:	b2da      	uxtb	r2, r3
    9196:	f24c 634d 	movw	r3, #50765	; 0xc64d
    919a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    919e:	701a      	strb	r2, [r3, #0]
    91a0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    91a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91a8:	781a      	ldrb	r2, [r3, #0]
    91aa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    91ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91b2:	781b      	ldrb	r3, [r3, #0]
    91b4:	4413      	add	r3, r2
    91b6:	b2da      	uxtb	r2, r3
    91b8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    91bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91c0:	701a      	strb	r2, [r3, #0]
    91c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    91c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91ca:	781b      	ldrb	r3, [r3, #0]
    91cc:	3301      	adds	r3, #1
    91ce:	b2da      	uxtb	r2, r3
    91d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    91d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91d8:	701a      	strb	r2, [r3, #0]
    91da:	f24c 5349 	movw	r3, #50505	; 0xc549
    91de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91e2:	781b      	ldrb	r3, [r3, #0]
    91e4:	2bff      	cmp	r3, #255	; 0xff
    91e6:	d105      	bne.n	91f4 <send_adc+0x3a0>
    91e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    91ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91f0:	2200      	movs	r2, #0
    91f2:	701a      	strb	r2, [r3, #0]
    91f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    91f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    91fc:	781b      	ldrb	r3, [r3, #0]
    91fe:	461a      	mov	r2, r3
    9200:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9208:	7819      	ldrb	r1, [r3, #0]
    920a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    920e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9212:	5499      	strb	r1, [r3, r2]
    9214:	f24c 5349 	movw	r3, #50505	; 0xc549
    9218:	f2c2 0304 	movt	r3, #8196	; 0x2004
    921c:	781b      	ldrb	r3, [r3, #0]
    921e:	3301      	adds	r3, #1
    9220:	b2da      	uxtb	r2, r3
    9222:	f24c 5349 	movw	r3, #50505	; 0xc549
    9226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    922a:	701a      	strb	r2, [r3, #0]
    922c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9230:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9234:	781b      	ldrb	r3, [r3, #0]
    9236:	2bff      	cmp	r3, #255	; 0xff
    9238:	d105      	bne.n	9246 <send_adc+0x3f2>
    923a:	f24c 5349 	movw	r3, #50505	; 0xc549
    923e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9242:	2200      	movs	r2, #0
    9244:	701a      	strb	r2, [r3, #0]
    9246:	f24c 5349 	movw	r3, #50505	; 0xc549
    924a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    924e:	781b      	ldrb	r3, [r3, #0]
    9250:	461a      	mov	r2, r3
    9252:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9256:	f2c2 0304 	movt	r3, #8196	; 0x2004
    925a:	7819      	ldrb	r1, [r3, #0]
    925c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9260:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9264:	5499      	strb	r1, [r3, r2]
    9266:	f24c 5349 	movw	r3, #50505	; 0xc549
    926a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    926e:	781b      	ldrb	r3, [r3, #0]
    9270:	3301      	adds	r3, #1
    9272:	b2da      	uxtb	r2, r3
    9274:	f24c 5349 	movw	r3, #50505	; 0xc549
    9278:	f2c2 0304 	movt	r3, #8196	; 0x2004
    927c:	701a      	strb	r2, [r3, #0]
    927e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9286:	781b      	ldrb	r3, [r3, #0]
    9288:	2bff      	cmp	r3, #255	; 0xff
    928a:	d105      	bne.n	9298 <send_adc+0x444>
    928c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9290:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9294:	2200      	movs	r2, #0
    9296:	701a      	strb	r2, [r3, #0]
    9298:	f242 0339 	movw	r3, #8249	; 0x2039
    929c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    92a0:	781b      	ldrb	r3, [r3, #0]
    92a2:	b2db      	uxtb	r3, r3
    92a4:	f003 0310 	and.w	r3, r3, #16
    92a8:	2b00      	cmp	r3, #0
    92aa:	d15a      	bne.n	9362 <send_adc+0x50e>
    92ac:	f24c 534a 	movw	r3, #50506	; 0xc54a
    92b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92b4:	781b      	ldrb	r3, [r3, #0]
    92b6:	b2db      	uxtb	r3, r3
    92b8:	461a      	mov	r2, r3
    92ba:	f24c 534c 	movw	r3, #50508	; 0xc54c
    92be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92c2:	5c9a      	ldrb	r2, [r3, r2]
    92c4:	f24c 634b 	movw	r3, #50763	; 0xc64b
    92c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92cc:	701a      	strb	r2, [r3, #0]
    92ce:	f24c 634c 	movw	r3, #50764	; 0xc64c
    92d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92d6:	2200      	movs	r2, #0
    92d8:	701a      	strb	r2, [r3, #0]
    92da:	f24c 534a 	movw	r3, #50506	; 0xc54a
    92de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92e2:	781b      	ldrb	r3, [r3, #0]
    92e4:	b2db      	uxtb	r3, r3
    92e6:	3301      	adds	r3, #1
    92e8:	b2da      	uxtb	r2, r3
    92ea:	f24c 534a 	movw	r3, #50506	; 0xc54a
    92ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92f2:	701a      	strb	r2, [r3, #0]
    92f4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    92f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    92fc:	781b      	ldrb	r3, [r3, #0]
    92fe:	b2db      	uxtb	r3, r3
    9300:	2bff      	cmp	r3, #255	; 0xff
    9302:	d105      	bne.n	9310 <send_adc+0x4bc>
    9304:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9308:	f2c2 0304 	movt	r3, #8196	; 0x2004
    930c:	2200      	movs	r2, #0
    930e:	701a      	strb	r2, [r3, #0]
    9310:	f242 0338 	movw	r3, #8248	; 0x2038
    9314:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9318:	f242 0238 	movw	r2, #8248	; 0x2038
    931c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9320:	7812      	ldrb	r2, [r2, #0]
    9322:	b2d2      	uxtb	r2, r2
    9324:	f042 0201 	orr.w	r2, r2, #1
    9328:	b2d2      	uxtb	r2, r2
    932a:	701a      	strb	r2, [r3, #0]
    932c:	f242 0339 	movw	r3, #8249	; 0x2039
    9330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9334:	f242 0239 	movw	r2, #8249	; 0x2039
    9338:	f2c2 0200 	movt	r2, #8192	; 0x2000
    933c:	7812      	ldrb	r2, [r2, #0]
    933e:	b2d2      	uxtb	r2, r2
    9340:	f042 0210 	orr.w	r2, r2, #16
    9344:	b2d2      	uxtb	r2, r2
    9346:	701a      	strb	r2, [r3, #0]
    9348:	e00b      	b.n	9362 <send_adc+0x50e>
    934a:	f24c 5348 	movw	r3, #50504	; 0xc548
    934e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9352:	781b      	ldrb	r3, [r3, #0]
    9354:	3301      	adds	r3, #1
    9356:	b2da      	uxtb	r2, r3
    9358:	f24c 5348 	movw	r3, #50504	; 0xc548
    935c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9360:	701a      	strb	r2, [r3, #0]
}
    9362:	46bd      	mov	sp, r7
    9364:	f85d 7b04 	ldr.w	r7, [sp], #4
    9368:	4770      	bx	lr
    936a:	bf00      	nop
    936c:	2004c7e9 	.word	0x2004c7e9
    9370:	2004c7eb 	.word	0x2004c7eb

00009374 <send_settings>:
void send_settings(void){ //500ms
    9374:	b480      	push	{r7}
    9376:	af00      	add	r7, sp, #0
  if(!boot)
    9378:	f240 533d 	movw	r3, #1341	; 0x53d
    937c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9380:	781b      	ldrb	r3, [r3, #0]
    9382:	2b00      	cmp	r3, #0
    9384:	f040 83fb 	bne.w	9b7e <send_settings+0x80a>
  {if (count % 5 == 2) PERIODIC_SEND_SETTINGS();}
    9388:	f24c 5341 	movw	r3, #50497	; 0xc541
    938c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9390:	781a      	ldrb	r2, [r3, #0]
    9392:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9396:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    939a:	fba3 1302 	umull	r1, r3, r3, r2
    939e:	0899      	lsrs	r1, r3, #2
    93a0:	460b      	mov	r3, r1
    93a2:	009b      	lsls	r3, r3, #2
    93a4:	440b      	add	r3, r1
    93a6:	1ad3      	subs	r3, r2, r3
    93a8:	b2db      	uxtb	r3, r3
    93aa:	2b02      	cmp	r3, #2
    93ac:	f040 83e7 	bne.w	9b7e <send_settings+0x80a>
    93b0:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    93b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93b8:	781b      	ldrb	r3, [r3, #0]
    93ba:	2b00      	cmp	r3, #0
    93bc:	f000 83df 	beq.w	9b7e <send_settings+0x80a>
    93c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    93c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93c8:	781a      	ldrb	r2, [r3, #0]
    93ca:	f24c 534a 	movw	r3, #50506	; 0xc54a
    93ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93d2:	781b      	ldrb	r3, [r3, #0]
    93d4:	b2db      	uxtb	r3, r3
    93d6:	429a      	cmp	r2, r3
    93d8:	d313      	bcc.n	9402 <send_settings+0x8e>
    93da:	f24c 534a 	movw	r3, #50506	; 0xc54a
    93de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93e2:	781b      	ldrb	r3, [r3, #0]
    93e4:	b2db      	uxtb	r3, r3
    93e6:	461a      	mov	r2, r3
    93e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    93ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    93f0:	781b      	ldrb	r3, [r3, #0]
    93f2:	1ad3      	subs	r3, r2, r3
    93f4:	33ff      	adds	r3, #255	; 0xff
    93f6:	2b0d      	cmp	r3, #13
    93f8:	bfd4      	ite	le
    93fa:	2300      	movle	r3, #0
    93fc:	2301      	movgt	r3, #1
    93fe:	b2db      	uxtb	r3, r3
    9400:	e011      	b.n	9426 <send_settings+0xb2>
    9402:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9406:	f2c2 0304 	movt	r3, #8196	; 0x2004
    940a:	781b      	ldrb	r3, [r3, #0]
    940c:	b2db      	uxtb	r3, r3
    940e:	461a      	mov	r2, r3
    9410:	f24c 5349 	movw	r3, #50505	; 0xc549
    9414:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9418:	781b      	ldrb	r3, [r3, #0]
    941a:	1ad3      	subs	r3, r2, r3
    941c:	2b0d      	cmp	r3, #13
    941e:	bfd4      	ite	le
    9420:	2300      	movle	r3, #0
    9422:	2301      	movgt	r3, #1
    9424:	b2db      	uxtb	r3, r3
    9426:	2b00      	cmp	r3, #0
    9428:	f000 839d 	beq.w	9b66 <send_settings+0x7f2>
    942c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9434:	781b      	ldrb	r3, [r3, #0]
    9436:	461a      	mov	r2, r3
    9438:	f24c 534c 	movw	r3, #50508	; 0xc54c
    943c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9440:	2105      	movs	r1, #5
    9442:	5499      	strb	r1, [r3, r2]
    9444:	f24c 5349 	movw	r3, #50505	; 0xc549
    9448:	f2c2 0304 	movt	r3, #8196	; 0x2004
    944c:	781b      	ldrb	r3, [r3, #0]
    944e:	3301      	adds	r3, #1
    9450:	b2da      	uxtb	r2, r3
    9452:	f24c 5349 	movw	r3, #50505	; 0xc549
    9456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    945a:	701a      	strb	r2, [r3, #0]
    945c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9464:	781b      	ldrb	r3, [r3, #0]
    9466:	2bff      	cmp	r3, #255	; 0xff
    9468:	d105      	bne.n	9476 <send_settings+0x102>
    946a:	f24c 5349 	movw	r3, #50505	; 0xc549
    946e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9472:	2200      	movs	r2, #0
    9474:	701a      	strb	r2, [r3, #0]
    9476:	f24c 5349 	movw	r3, #50505	; 0xc549
    947a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    947e:	781b      	ldrb	r3, [r3, #0]
    9480:	461a      	mov	r2, r3
    9482:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    948a:	2111      	movs	r1, #17
    948c:	5499      	strb	r1, [r3, r2]
    948e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9492:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9496:	781b      	ldrb	r3, [r3, #0]
    9498:	3301      	adds	r3, #1
    949a:	b2da      	uxtb	r2, r3
    949c:	f24c 5349 	movw	r3, #50505	; 0xc549
    94a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94a4:	701a      	strb	r2, [r3, #0]
    94a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    94aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94ae:	781b      	ldrb	r3, [r3, #0]
    94b0:	2bff      	cmp	r3, #255	; 0xff
    94b2:	d105      	bne.n	94c0 <send_settings+0x14c>
    94b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    94b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94bc:	2200      	movs	r2, #0
    94be:	701a      	strb	r2, [r3, #0]
    94c0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    94c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94c8:	2211      	movs	r2, #17
    94ca:	701a      	strb	r2, [r3, #0]
    94cc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    94d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94d4:	2211      	movs	r2, #17
    94d6:	701a      	strb	r2, [r3, #0]
    94d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    94dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94e0:	781b      	ldrb	r3, [r3, #0]
    94e2:	461a      	mov	r2, r3
    94e4:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    94e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94ec:	7819      	ldrb	r1, [r3, #0]
    94ee:	f24c 534c 	movw	r3, #50508	; 0xc54c
    94f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    94f6:	5499      	strb	r1, [r3, r2]
    94f8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    94fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9500:	781a      	ldrb	r2, [r3, #0]
    9502:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    9506:	f2c2 0304 	movt	r3, #8196	; 0x2004
    950a:	781b      	ldrb	r3, [r3, #0]
    950c:	4413      	add	r3, r2
    950e:	b2da      	uxtb	r2, r3
    9510:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9518:	701a      	strb	r2, [r3, #0]
    951a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    951e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9522:	781a      	ldrb	r2, [r3, #0]
    9524:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9528:	f2c2 0304 	movt	r3, #8196	; 0x2004
    952c:	781b      	ldrb	r3, [r3, #0]
    952e:	4413      	add	r3, r2
    9530:	b2da      	uxtb	r2, r3
    9532:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9536:	f2c2 0304 	movt	r3, #8196	; 0x2004
    953a:	701a      	strb	r2, [r3, #0]
    953c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9540:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9544:	781b      	ldrb	r3, [r3, #0]
    9546:	3301      	adds	r3, #1
    9548:	b2da      	uxtb	r2, r3
    954a:	f24c 5349 	movw	r3, #50505	; 0xc549
    954e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9552:	701a      	strb	r2, [r3, #0]
    9554:	f24c 5349 	movw	r3, #50505	; 0xc549
    9558:	f2c2 0304 	movt	r3, #8196	; 0x2004
    955c:	781b      	ldrb	r3, [r3, #0]
    955e:	2bff      	cmp	r3, #255	; 0xff
    9560:	d105      	bne.n	956e <send_settings+0x1fa>
    9562:	f24c 5349 	movw	r3, #50505	; 0xc549
    9566:	f2c2 0304 	movt	r3, #8196	; 0x2004
    956a:	2200      	movs	r2, #0
    956c:	701a      	strb	r2, [r3, #0]
    956e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9576:	781b      	ldrb	r3, [r3, #0]
    9578:	461a      	mov	r2, r3
    957a:	f24c 5338 	movw	r3, #50488	; 0xc538
    957e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9582:	7819      	ldrb	r1, [r3, #0]
    9584:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    958c:	5499      	strb	r1, [r3, r2]
    958e:	f24c 5338 	movw	r3, #50488	; 0xc538
    9592:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9596:	781a      	ldrb	r2, [r3, #0]
    9598:	f24c 634d 	movw	r3, #50765	; 0xc64d
    959c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95a0:	781b      	ldrb	r3, [r3, #0]
    95a2:	4413      	add	r3, r2
    95a4:	b2da      	uxtb	r2, r3
    95a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    95aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95ae:	701a      	strb	r2, [r3, #0]
    95b0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    95b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95b8:	781a      	ldrb	r2, [r3, #0]
    95ba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    95be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95c2:	781b      	ldrb	r3, [r3, #0]
    95c4:	4413      	add	r3, r2
    95c6:	b2da      	uxtb	r2, r3
    95c8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    95cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95d0:	701a      	strb	r2, [r3, #0]
    95d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    95d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95da:	781b      	ldrb	r3, [r3, #0]
    95dc:	3301      	adds	r3, #1
    95de:	b2da      	uxtb	r2, r3
    95e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    95e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95e8:	701a      	strb	r2, [r3, #0]
    95ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    95ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    95f2:	781b      	ldrb	r3, [r3, #0]
    95f4:	2bff      	cmp	r3, #255	; 0xff
    95f6:	d105      	bne.n	9604 <send_settings+0x290>
    95f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    95fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9600:	2200      	movs	r2, #0
    9602:	701a      	strb	r2, [r3, #0]
    9604:	f24c 5349 	movw	r3, #50505	; 0xc549
    9608:	f2c2 0304 	movt	r3, #8196	; 0x2004
    960c:	781b      	ldrb	r3, [r3, #0]
    960e:	461a      	mov	r2, r3
    9610:	f24c 5338 	movw	r3, #50488	; 0xc538
    9614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9618:	7859      	ldrb	r1, [r3, #1]
    961a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    961e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9622:	5499      	strb	r1, [r3, r2]
    9624:	4bd1      	ldr	r3, [pc, #836]	; (996c <send_settings+0x5f8>)
    9626:	781a      	ldrb	r2, [r3, #0]
    9628:	f24c 634d 	movw	r3, #50765	; 0xc64d
    962c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9630:	781b      	ldrb	r3, [r3, #0]
    9632:	4413      	add	r3, r2
    9634:	b2da      	uxtb	r2, r3
    9636:	f24c 634d 	movw	r3, #50765	; 0xc64d
    963a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    963e:	701a      	strb	r2, [r3, #0]
    9640:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9644:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9648:	781a      	ldrb	r2, [r3, #0]
    964a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    964e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9652:	781b      	ldrb	r3, [r3, #0]
    9654:	4413      	add	r3, r2
    9656:	b2da      	uxtb	r2, r3
    9658:	f24c 634e 	movw	r3, #50766	; 0xc64e
    965c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9660:	701a      	strb	r2, [r3, #0]
    9662:	f24c 5349 	movw	r3, #50505	; 0xc549
    9666:	f2c2 0304 	movt	r3, #8196	; 0x2004
    966a:	781b      	ldrb	r3, [r3, #0]
    966c:	3301      	adds	r3, #1
    966e:	b2da      	uxtb	r2, r3
    9670:	f24c 5349 	movw	r3, #50505	; 0xc549
    9674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9678:	701a      	strb	r2, [r3, #0]
    967a:	f24c 5349 	movw	r3, #50505	; 0xc549
    967e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9682:	781b      	ldrb	r3, [r3, #0]
    9684:	2bff      	cmp	r3, #255	; 0xff
    9686:	d105      	bne.n	9694 <send_settings+0x320>
    9688:	f24c 5349 	movw	r3, #50505	; 0xc549
    968c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9690:	2200      	movs	r2, #0
    9692:	701a      	strb	r2, [r3, #0]
    9694:	f24c 5349 	movw	r3, #50505	; 0xc549
    9698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    969c:	781b      	ldrb	r3, [r3, #0]
    969e:	461a      	mov	r2, r3
    96a0:	f24c 5338 	movw	r3, #50488	; 0xc538
    96a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96a8:	7899      	ldrb	r1, [r3, #2]
    96aa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    96ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96b2:	5499      	strb	r1, [r3, r2]
    96b4:	4bae      	ldr	r3, [pc, #696]	; (9970 <send_settings+0x5fc>)
    96b6:	781a      	ldrb	r2, [r3, #0]
    96b8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    96bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96c0:	781b      	ldrb	r3, [r3, #0]
    96c2:	4413      	add	r3, r2
    96c4:	b2da      	uxtb	r2, r3
    96c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    96ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96ce:	701a      	strb	r2, [r3, #0]
    96d0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    96d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96d8:	781a      	ldrb	r2, [r3, #0]
    96da:	f24c 634d 	movw	r3, #50765	; 0xc64d
    96de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96e2:	781b      	ldrb	r3, [r3, #0]
    96e4:	4413      	add	r3, r2
    96e6:	b2da      	uxtb	r2, r3
    96e8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    96ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96f0:	701a      	strb	r2, [r3, #0]
    96f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    96f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    96fa:	781b      	ldrb	r3, [r3, #0]
    96fc:	3301      	adds	r3, #1
    96fe:	b2da      	uxtb	r2, r3
    9700:	f24c 5349 	movw	r3, #50505	; 0xc549
    9704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9708:	701a      	strb	r2, [r3, #0]
    970a:	f24c 5349 	movw	r3, #50505	; 0xc549
    970e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9712:	781b      	ldrb	r3, [r3, #0]
    9714:	2bff      	cmp	r3, #255	; 0xff
    9716:	d105      	bne.n	9724 <send_settings+0x3b0>
    9718:	f24c 5349 	movw	r3, #50505	; 0xc549
    971c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9720:	2200      	movs	r2, #0
    9722:	701a      	strb	r2, [r3, #0]
    9724:	f24c 5349 	movw	r3, #50505	; 0xc549
    9728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    972c:	781b      	ldrb	r3, [r3, #0]
    972e:	461a      	mov	r2, r3
    9730:	f24c 5338 	movw	r3, #50488	; 0xc538
    9734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9738:	78d9      	ldrb	r1, [r3, #3]
    973a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    973e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9742:	5499      	strb	r1, [r3, r2]
    9744:	4b8b      	ldr	r3, [pc, #556]	; (9974 <send_settings+0x600>)
    9746:	781a      	ldrb	r2, [r3, #0]
    9748:	f24c 634d 	movw	r3, #50765	; 0xc64d
    974c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9750:	781b      	ldrb	r3, [r3, #0]
    9752:	4413      	add	r3, r2
    9754:	b2da      	uxtb	r2, r3
    9756:	f24c 634d 	movw	r3, #50765	; 0xc64d
    975a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    975e:	701a      	strb	r2, [r3, #0]
    9760:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9768:	781a      	ldrb	r2, [r3, #0]
    976a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    976e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9772:	781b      	ldrb	r3, [r3, #0]
    9774:	4413      	add	r3, r2
    9776:	b2da      	uxtb	r2, r3
    9778:	f24c 634e 	movw	r3, #50766	; 0xc64e
    977c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9780:	701a      	strb	r2, [r3, #0]
    9782:	f24c 5349 	movw	r3, #50505	; 0xc549
    9786:	f2c2 0304 	movt	r3, #8196	; 0x2004
    978a:	781b      	ldrb	r3, [r3, #0]
    978c:	3301      	adds	r3, #1
    978e:	b2da      	uxtb	r2, r3
    9790:	f24c 5349 	movw	r3, #50505	; 0xc549
    9794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9798:	701a      	strb	r2, [r3, #0]
    979a:	f24c 5349 	movw	r3, #50505	; 0xc549
    979e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97a2:	781b      	ldrb	r3, [r3, #0]
    97a4:	2bff      	cmp	r3, #255	; 0xff
    97a6:	d105      	bne.n	97b4 <send_settings+0x440>
    97a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    97ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97b0:	2200      	movs	r2, #0
    97b2:	701a      	strb	r2, [r3, #0]
    97b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    97b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97bc:	781b      	ldrb	r3, [r3, #0]
    97be:	461a      	mov	r2, r3
    97c0:	f24c 533c 	movw	r3, #50492	; 0xc53c
    97c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97c8:	7819      	ldrb	r1, [r3, #0]
    97ca:	f24c 534c 	movw	r3, #50508	; 0xc54c
    97ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97d2:	5499      	strb	r1, [r3, r2]
    97d4:	f24c 533c 	movw	r3, #50492	; 0xc53c
    97d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97dc:	781a      	ldrb	r2, [r3, #0]
    97de:	f24c 634d 	movw	r3, #50765	; 0xc64d
    97e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97e6:	781b      	ldrb	r3, [r3, #0]
    97e8:	4413      	add	r3, r2
    97ea:	b2da      	uxtb	r2, r3
    97ec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    97f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97f4:	701a      	strb	r2, [r3, #0]
    97f6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    97fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    97fe:	781a      	ldrb	r2, [r3, #0]
    9800:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9808:	781b      	ldrb	r3, [r3, #0]
    980a:	4413      	add	r3, r2
    980c:	b2da      	uxtb	r2, r3
    980e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9812:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9816:	701a      	strb	r2, [r3, #0]
    9818:	f24c 5349 	movw	r3, #50505	; 0xc549
    981c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9820:	781b      	ldrb	r3, [r3, #0]
    9822:	3301      	adds	r3, #1
    9824:	b2da      	uxtb	r2, r3
    9826:	f24c 5349 	movw	r3, #50505	; 0xc549
    982a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    982e:	701a      	strb	r2, [r3, #0]
    9830:	f24c 5349 	movw	r3, #50505	; 0xc549
    9834:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9838:	781b      	ldrb	r3, [r3, #0]
    983a:	2bff      	cmp	r3, #255	; 0xff
    983c:	d105      	bne.n	984a <send_settings+0x4d6>
    983e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9842:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9846:	2200      	movs	r2, #0
    9848:	701a      	strb	r2, [r3, #0]
    984a:	f24c 5349 	movw	r3, #50505	; 0xc549
    984e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9852:	781b      	ldrb	r3, [r3, #0]
    9854:	461a      	mov	r2, r3
    9856:	f24c 533c 	movw	r3, #50492	; 0xc53c
    985a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    985e:	7859      	ldrb	r1, [r3, #1]
    9860:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9864:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9868:	5499      	strb	r1, [r3, r2]
    986a:	4b43      	ldr	r3, [pc, #268]	; (9978 <send_settings+0x604>)
    986c:	781a      	ldrb	r2, [r3, #0]
    986e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9876:	781b      	ldrb	r3, [r3, #0]
    9878:	4413      	add	r3, r2
    987a:	b2da      	uxtb	r2, r3
    987c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9884:	701a      	strb	r2, [r3, #0]
    9886:	f24c 634e 	movw	r3, #50766	; 0xc64e
    988a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    988e:	781a      	ldrb	r2, [r3, #0]
    9890:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9894:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9898:	781b      	ldrb	r3, [r3, #0]
    989a:	4413      	add	r3, r2
    989c:	b2da      	uxtb	r2, r3
    989e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    98a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98a6:	701a      	strb	r2, [r3, #0]
    98a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    98ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98b0:	781b      	ldrb	r3, [r3, #0]
    98b2:	3301      	adds	r3, #1
    98b4:	b2da      	uxtb	r2, r3
    98b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    98ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98be:	701a      	strb	r2, [r3, #0]
    98c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    98c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98c8:	781b      	ldrb	r3, [r3, #0]
    98ca:	2bff      	cmp	r3, #255	; 0xff
    98cc:	d105      	bne.n	98da <send_settings+0x566>
    98ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    98d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98d6:	2200      	movs	r2, #0
    98d8:	701a      	strb	r2, [r3, #0]
    98da:	f24c 5349 	movw	r3, #50505	; 0xc549
    98de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98e2:	781b      	ldrb	r3, [r3, #0]
    98e4:	461a      	mov	r2, r3
    98e6:	f24c 533c 	movw	r3, #50492	; 0xc53c
    98ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98ee:	7899      	ldrb	r1, [r3, #2]
    98f0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    98f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    98f8:	5499      	strb	r1, [r3, r2]
    98fa:	4b20      	ldr	r3, [pc, #128]	; (997c <send_settings+0x608>)
    98fc:	781a      	ldrb	r2, [r3, #0]
    98fe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9902:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9906:	781b      	ldrb	r3, [r3, #0]
    9908:	4413      	add	r3, r2
    990a:	b2da      	uxtb	r2, r3
    990c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9910:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9914:	701a      	strb	r2, [r3, #0]
    9916:	f24c 634e 	movw	r3, #50766	; 0xc64e
    991a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    991e:	781a      	ldrb	r2, [r3, #0]
    9920:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9924:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9928:	781b      	ldrb	r3, [r3, #0]
    992a:	4413      	add	r3, r2
    992c:	b2da      	uxtb	r2, r3
    992e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9936:	701a      	strb	r2, [r3, #0]
    9938:	f24c 5349 	movw	r3, #50505	; 0xc549
    993c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9940:	781b      	ldrb	r3, [r3, #0]
    9942:	3301      	adds	r3, #1
    9944:	b2da      	uxtb	r2, r3
    9946:	f24c 5349 	movw	r3, #50505	; 0xc549
    994a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    994e:	701a      	strb	r2, [r3, #0]
    9950:	f24c 5349 	movw	r3, #50505	; 0xc549
    9954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9958:	781b      	ldrb	r3, [r3, #0]
    995a:	2bff      	cmp	r3, #255	; 0xff
    995c:	d110      	bne.n	9980 <send_settings+0x60c>
    995e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9966:	2200      	movs	r2, #0
    9968:	701a      	strb	r2, [r3, #0]
    996a:	e009      	b.n	9980 <send_settings+0x60c>
    996c:	2004c539 	.word	0x2004c539
    9970:	2004c53a 	.word	0x2004c53a
    9974:	2004c53b 	.word	0x2004c53b
    9978:	2004c53d 	.word	0x2004c53d
    997c:	2004c53e 	.word	0x2004c53e
    9980:	f24c 5349 	movw	r3, #50505	; 0xc549
    9984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9988:	781b      	ldrb	r3, [r3, #0]
    998a:	461a      	mov	r2, r3
    998c:	f24c 533c 	movw	r3, #50492	; 0xc53c
    9990:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9994:	78d9      	ldrb	r1, [r3, #3]
    9996:	f24c 534c 	movw	r3, #50508	; 0xc54c
    999a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    999e:	5499      	strb	r1, [r3, r2]
    99a0:	4b79      	ldr	r3, [pc, #484]	; (9b88 <send_settings+0x814>)
    99a2:	781a      	ldrb	r2, [r3, #0]
    99a4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    99a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99ac:	781b      	ldrb	r3, [r3, #0]
    99ae:	4413      	add	r3, r2
    99b0:	b2da      	uxtb	r2, r3
    99b2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    99b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99ba:	701a      	strb	r2, [r3, #0]
    99bc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    99c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99c4:	781a      	ldrb	r2, [r3, #0]
    99c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    99ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99ce:	781b      	ldrb	r3, [r3, #0]
    99d0:	4413      	add	r3, r2
    99d2:	b2da      	uxtb	r2, r3
    99d4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    99d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99dc:	701a      	strb	r2, [r3, #0]
    99de:	f24c 5349 	movw	r3, #50505	; 0xc549
    99e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99e6:	781b      	ldrb	r3, [r3, #0]
    99e8:	3301      	adds	r3, #1
    99ea:	b2da      	uxtb	r2, r3
    99ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    99f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99f4:	701a      	strb	r2, [r3, #0]
    99f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    99fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    99fe:	781b      	ldrb	r3, [r3, #0]
    9a00:	2bff      	cmp	r3, #255	; 0xff
    9a02:	d105      	bne.n	9a10 <send_settings+0x69c>
    9a04:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a0c:	2200      	movs	r2, #0
    9a0e:	701a      	strb	r2, [r3, #0]
    9a10:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a18:	781b      	ldrb	r3, [r3, #0]
    9a1a:	461a      	mov	r2, r3
    9a1c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9a20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a24:	7819      	ldrb	r1, [r3, #0]
    9a26:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9a2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a2e:	5499      	strb	r1, [r3, r2]
    9a30:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a38:	781b      	ldrb	r3, [r3, #0]
    9a3a:	3301      	adds	r3, #1
    9a3c:	b2da      	uxtb	r2, r3
    9a3e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a46:	701a      	strb	r2, [r3, #0]
    9a48:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a50:	781b      	ldrb	r3, [r3, #0]
    9a52:	2bff      	cmp	r3, #255	; 0xff
    9a54:	d105      	bne.n	9a62 <send_settings+0x6ee>
    9a56:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a5e:	2200      	movs	r2, #0
    9a60:	701a      	strb	r2, [r3, #0]
    9a62:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a6a:	781b      	ldrb	r3, [r3, #0]
    9a6c:	461a      	mov	r2, r3
    9a6e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9a72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a76:	7819      	ldrb	r1, [r3, #0]
    9a78:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9a7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a80:	5499      	strb	r1, [r3, r2]
    9a82:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a8a:	781b      	ldrb	r3, [r3, #0]
    9a8c:	3301      	adds	r3, #1
    9a8e:	b2da      	uxtb	r2, r3
    9a90:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9a98:	701a      	strb	r2, [r3, #0]
    9a9a:	f24c 5349 	movw	r3, #50505	; 0xc549
    9a9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9aa2:	781b      	ldrb	r3, [r3, #0]
    9aa4:	2bff      	cmp	r3, #255	; 0xff
    9aa6:	d105      	bne.n	9ab4 <send_settings+0x740>
    9aa8:	f24c 5349 	movw	r3, #50505	; 0xc549
    9aac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ab0:	2200      	movs	r2, #0
    9ab2:	701a      	strb	r2, [r3, #0]
    9ab4:	f242 0339 	movw	r3, #8249	; 0x2039
    9ab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9abc:	781b      	ldrb	r3, [r3, #0]
    9abe:	b2db      	uxtb	r3, r3
    9ac0:	f003 0310 	and.w	r3, r3, #16
    9ac4:	2b00      	cmp	r3, #0
    9ac6:	d15a      	bne.n	9b7e <send_settings+0x80a>
    9ac8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ad0:	781b      	ldrb	r3, [r3, #0]
    9ad2:	b2db      	uxtb	r3, r3
    9ad4:	461a      	mov	r2, r3
    9ad6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9ada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ade:	5c9a      	ldrb	r2, [r3, r2]
    9ae0:	f24c 634b 	movw	r3, #50763	; 0xc64b
    9ae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ae8:	701a      	strb	r2, [r3, #0]
    9aea:	f24c 634c 	movw	r3, #50764	; 0xc64c
    9aee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9af2:	2200      	movs	r2, #0
    9af4:	701a      	strb	r2, [r3, #0]
    9af6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9afa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9afe:	781b      	ldrb	r3, [r3, #0]
    9b00:	b2db      	uxtb	r3, r3
    9b02:	3301      	adds	r3, #1
    9b04:	b2da      	uxtb	r2, r3
    9b06:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9b0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b0e:	701a      	strb	r2, [r3, #0]
    9b10:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9b14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b18:	781b      	ldrb	r3, [r3, #0]
    9b1a:	b2db      	uxtb	r3, r3
    9b1c:	2bff      	cmp	r3, #255	; 0xff
    9b1e:	d105      	bne.n	9b2c <send_settings+0x7b8>
    9b20:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9b24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b28:	2200      	movs	r2, #0
    9b2a:	701a      	strb	r2, [r3, #0]
    9b2c:	f242 0338 	movw	r3, #8248	; 0x2038
    9b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b34:	f242 0238 	movw	r2, #8248	; 0x2038
    9b38:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9b3c:	7812      	ldrb	r2, [r2, #0]
    9b3e:	b2d2      	uxtb	r2, r2
    9b40:	f042 0201 	orr.w	r2, r2, #1
    9b44:	b2d2      	uxtb	r2, r2
    9b46:	701a      	strb	r2, [r3, #0]
    9b48:	f242 0339 	movw	r3, #8249	; 0x2039
    9b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b50:	f242 0239 	movw	r2, #8249	; 0x2039
    9b54:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9b58:	7812      	ldrb	r2, [r2, #0]
    9b5a:	b2d2      	uxtb	r2, r2
    9b5c:	f042 0210 	orr.w	r2, r2, #16
    9b60:	b2d2      	uxtb	r2, r2
    9b62:	701a      	strb	r2, [r3, #0]
    9b64:	e00b      	b.n	9b7e <send_settings+0x80a>
    9b66:	f24c 5348 	movw	r3, #50504	; 0xc548
    9b6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b6e:	781b      	ldrb	r3, [r3, #0]
    9b70:	3301      	adds	r3, #1
    9b72:	b2da      	uxtb	r2, r3
    9b74:	f24c 5348 	movw	r3, #50504	; 0xc548
    9b78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9b7c:	701a      	strb	r2, [r3, #0]
}
    9b7e:	46bd      	mov	sp, r7
    9b80:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b84:	4770      	bx	lr
    9b86:	bf00      	nop
    9b88:	2004c53f 	.word	0x2004c53f

00009b8c <send_desired>:
void send_desired(void){  //1000ms
    9b8c:	b480      	push	{r7}
    9b8e:	af00      	add	r7, sp, #0
  if(!boot)
    9b90:	f240 533d 	movw	r3, #1341	; 0x53d
    9b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b98:	781b      	ldrb	r3, [r3, #0]
    9b9a:	2b00      	cmp	r3, #0
    9b9c:	f040 8727 	bne.w	a9ee <send_desired+0xe62>
  { if (count % 10 == 3) PERIODIC_SEND_DESIRED();}
    9ba0:	f24c 5341 	movw	r3, #50497	; 0xc541
    9ba4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ba8:	781a      	ldrb	r2, [r3, #0]
    9baa:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    9bae:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    9bb2:	fba3 1302 	umull	r1, r3, r3, r2
    9bb6:	08d9      	lsrs	r1, r3, #3
    9bb8:	460b      	mov	r3, r1
    9bba:	009b      	lsls	r3, r3, #2
    9bbc:	440b      	add	r3, r1
    9bbe:	005b      	lsls	r3, r3, #1
    9bc0:	1ad3      	subs	r3, r2, r3
    9bc2:	b2db      	uxtb	r3, r3
    9bc4:	2b03      	cmp	r3, #3
    9bc6:	f040 8712 	bne.w	a9ee <send_desired+0xe62>
    9bca:	f24c 5349 	movw	r3, #50505	; 0xc549
    9bce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bd2:	781a      	ldrb	r2, [r3, #0]
    9bd4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9bd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bdc:	781b      	ldrb	r3, [r3, #0]
    9bde:	b2db      	uxtb	r3, r3
    9be0:	429a      	cmp	r2, r3
    9be2:	d313      	bcc.n	9c0c <send_desired+0x80>
    9be4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9be8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bec:	781b      	ldrb	r3, [r3, #0]
    9bee:	b2db      	uxtb	r3, r3
    9bf0:	461a      	mov	r2, r3
    9bf2:	f24c 5349 	movw	r3, #50505	; 0xc549
    9bf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9bfa:	781b      	ldrb	r3, [r3, #0]
    9bfc:	1ad3      	subs	r3, r2, r3
    9bfe:	33ff      	adds	r3, #255	; 0xff
    9c00:	2b18      	cmp	r3, #24
    9c02:	bfd4      	ite	le
    9c04:	2300      	movle	r3, #0
    9c06:	2301      	movgt	r3, #1
    9c08:	b2db      	uxtb	r3, r3
    9c0a:	e011      	b.n	9c30 <send_desired+0xa4>
    9c0c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    9c10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c14:	781b      	ldrb	r3, [r3, #0]
    9c16:	b2db      	uxtb	r3, r3
    9c18:	461a      	mov	r2, r3
    9c1a:	f24c 5349 	movw	r3, #50505	; 0xc549
    9c1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c22:	781b      	ldrb	r3, [r3, #0]
    9c24:	1ad3      	subs	r3, r2, r3
    9c26:	2b18      	cmp	r3, #24
    9c28:	bfd4      	ite	le
    9c2a:	2300      	movle	r3, #0
    9c2c:	2301      	movgt	r3, #1
    9c2e:	b2db      	uxtb	r3, r3
    9c30:	2b00      	cmp	r3, #0
    9c32:	f000 86d0 	beq.w	a9d6 <send_desired+0xe4a>
    9c36:	f24c 5349 	movw	r3, #50505	; 0xc549
    9c3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c3e:	781b      	ldrb	r3, [r3, #0]
    9c40:	461a      	mov	r2, r3
    9c42:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9c46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c4a:	2105      	movs	r1, #5
    9c4c:	5499      	strb	r1, [r3, r2]
    9c4e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9c52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c56:	781b      	ldrb	r3, [r3, #0]
    9c58:	3301      	adds	r3, #1
    9c5a:	b2da      	uxtb	r2, r3
    9c5c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9c60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c64:	701a      	strb	r2, [r3, #0]
    9c66:	f24c 5349 	movw	r3, #50505	; 0xc549
    9c6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c6e:	781b      	ldrb	r3, [r3, #0]
    9c70:	2bff      	cmp	r3, #255	; 0xff
    9c72:	d105      	bne.n	9c80 <send_desired+0xf4>
    9c74:	f24c 5349 	movw	r3, #50505	; 0xc549
    9c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c7c:	2200      	movs	r2, #0
    9c7e:	701a      	strb	r2, [r3, #0]
    9c80:	f24c 5349 	movw	r3, #50505	; 0xc549
    9c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c88:	781b      	ldrb	r3, [r3, #0]
    9c8a:	461a      	mov	r2, r3
    9c8c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9c90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9c94:	2112      	movs	r1, #18
    9c96:	5499      	strb	r1, [r3, r2]
    9c98:	f24c 5349 	movw	r3, #50505	; 0xc549
    9c9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ca0:	781b      	ldrb	r3, [r3, #0]
    9ca2:	3301      	adds	r3, #1
    9ca4:	b2da      	uxtb	r2, r3
    9ca6:	f24c 5349 	movw	r3, #50505	; 0xc549
    9caa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cae:	701a      	strb	r2, [r3, #0]
    9cb0:	f24c 5349 	movw	r3, #50505	; 0xc549
    9cb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cb8:	781b      	ldrb	r3, [r3, #0]
    9cba:	2bff      	cmp	r3, #255	; 0xff
    9cbc:	d105      	bne.n	9cca <send_desired+0x13e>
    9cbe:	f24c 5349 	movw	r3, #50505	; 0xc549
    9cc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cc6:	2200      	movs	r2, #0
    9cc8:	701a      	strb	r2, [r3, #0]
    9cca:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9cce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cd2:	2212      	movs	r2, #18
    9cd4:	701a      	strb	r2, [r3, #0]
    9cd6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9cda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cde:	2212      	movs	r2, #18
    9ce0:	701a      	strb	r2, [r3, #0]
    9ce2:	f24c 5349 	movw	r3, #50505	; 0xc549
    9ce6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cea:	781b      	ldrb	r3, [r3, #0]
    9cec:	461a      	mov	r2, r3
    9cee:	f64c 0374 	movw	r3, #51316	; 0xc874
    9cf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9cf6:	7819      	ldrb	r1, [r3, #0]
    9cf8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d00:	5499      	strb	r1, [r3, r2]
    9d02:	f64c 0374 	movw	r3, #51316	; 0xc874
    9d06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d0a:	781a      	ldrb	r2, [r3, #0]
    9d0c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9d10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d14:	781b      	ldrb	r3, [r3, #0]
    9d16:	4413      	add	r3, r2
    9d18:	b2da      	uxtb	r2, r3
    9d1a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9d1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d22:	701a      	strb	r2, [r3, #0]
    9d24:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9d28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d2c:	781a      	ldrb	r2, [r3, #0]
    9d2e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9d32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d36:	781b      	ldrb	r3, [r3, #0]
    9d38:	4413      	add	r3, r2
    9d3a:	b2da      	uxtb	r2, r3
    9d3c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9d40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d44:	701a      	strb	r2, [r3, #0]
    9d46:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d4e:	781b      	ldrb	r3, [r3, #0]
    9d50:	3301      	adds	r3, #1
    9d52:	b2da      	uxtb	r2, r3
    9d54:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d5c:	701a      	strb	r2, [r3, #0]
    9d5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d66:	781b      	ldrb	r3, [r3, #0]
    9d68:	2bff      	cmp	r3, #255	; 0xff
    9d6a:	d105      	bne.n	9d78 <send_desired+0x1ec>
    9d6c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d74:	2200      	movs	r2, #0
    9d76:	701a      	strb	r2, [r3, #0]
    9d78:	f24c 5349 	movw	r3, #50505	; 0xc549
    9d7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d80:	781b      	ldrb	r3, [r3, #0]
    9d82:	461a      	mov	r2, r3
    9d84:	f64c 0374 	movw	r3, #51316	; 0xc874
    9d88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d8c:	7859      	ldrb	r1, [r3, #1]
    9d8e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9d96:	5499      	strb	r1, [r3, r2]
    9d98:	4bd1      	ldr	r3, [pc, #836]	; (a0e0 <send_desired+0x554>)
    9d9a:	781a      	ldrb	r2, [r3, #0]
    9d9c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9da0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9da4:	781b      	ldrb	r3, [r3, #0]
    9da6:	4413      	add	r3, r2
    9da8:	b2da      	uxtb	r2, r3
    9daa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9dae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9db2:	701a      	strb	r2, [r3, #0]
    9db4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9db8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dbc:	781a      	ldrb	r2, [r3, #0]
    9dbe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9dc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dc6:	781b      	ldrb	r3, [r3, #0]
    9dc8:	4413      	add	r3, r2
    9dca:	b2da      	uxtb	r2, r3
    9dcc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9dd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dd4:	701a      	strb	r2, [r3, #0]
    9dd6:	f24c 5349 	movw	r3, #50505	; 0xc549
    9dda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dde:	781b      	ldrb	r3, [r3, #0]
    9de0:	3301      	adds	r3, #1
    9de2:	b2da      	uxtb	r2, r3
    9de4:	f24c 5349 	movw	r3, #50505	; 0xc549
    9de8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9dec:	701a      	strb	r2, [r3, #0]
    9dee:	f24c 5349 	movw	r3, #50505	; 0xc549
    9df2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9df6:	781b      	ldrb	r3, [r3, #0]
    9df8:	2bff      	cmp	r3, #255	; 0xff
    9dfa:	d105      	bne.n	9e08 <send_desired+0x27c>
    9dfc:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e04:	2200      	movs	r2, #0
    9e06:	701a      	strb	r2, [r3, #0]
    9e08:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e10:	781b      	ldrb	r3, [r3, #0]
    9e12:	461a      	mov	r2, r3
    9e14:	f64c 0374 	movw	r3, #51316	; 0xc874
    9e18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e1c:	7899      	ldrb	r1, [r3, #2]
    9e1e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9e22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e26:	5499      	strb	r1, [r3, r2]
    9e28:	4bae      	ldr	r3, [pc, #696]	; (a0e4 <send_desired+0x558>)
    9e2a:	781a      	ldrb	r2, [r3, #0]
    9e2c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9e30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e34:	781b      	ldrb	r3, [r3, #0]
    9e36:	4413      	add	r3, r2
    9e38:	b2da      	uxtb	r2, r3
    9e3a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9e3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e42:	701a      	strb	r2, [r3, #0]
    9e44:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9e48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e4c:	781a      	ldrb	r2, [r3, #0]
    9e4e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9e52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e56:	781b      	ldrb	r3, [r3, #0]
    9e58:	4413      	add	r3, r2
    9e5a:	b2da      	uxtb	r2, r3
    9e5c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9e60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e64:	701a      	strb	r2, [r3, #0]
    9e66:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e6e:	781b      	ldrb	r3, [r3, #0]
    9e70:	3301      	adds	r3, #1
    9e72:	b2da      	uxtb	r2, r3
    9e74:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e7c:	701a      	strb	r2, [r3, #0]
    9e7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e86:	781b      	ldrb	r3, [r3, #0]
    9e88:	2bff      	cmp	r3, #255	; 0xff
    9e8a:	d105      	bne.n	9e98 <send_desired+0x30c>
    9e8c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9e94:	2200      	movs	r2, #0
    9e96:	701a      	strb	r2, [r3, #0]
    9e98:	f24c 5349 	movw	r3, #50505	; 0xc549
    9e9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ea0:	781b      	ldrb	r3, [r3, #0]
    9ea2:	461a      	mov	r2, r3
    9ea4:	f64c 0374 	movw	r3, #51316	; 0xc874
    9ea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eac:	78d9      	ldrb	r1, [r3, #3]
    9eae:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9eb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9eb6:	5499      	strb	r1, [r3, r2]
    9eb8:	4b8b      	ldr	r3, [pc, #556]	; (a0e8 <send_desired+0x55c>)
    9eba:	781a      	ldrb	r2, [r3, #0]
    9ebc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9ec0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ec4:	781b      	ldrb	r3, [r3, #0]
    9ec6:	4413      	add	r3, r2
    9ec8:	b2da      	uxtb	r2, r3
    9eca:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9ece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ed2:	701a      	strb	r2, [r3, #0]
    9ed4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9ed8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9edc:	781a      	ldrb	r2, [r3, #0]
    9ede:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9ee2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ee6:	781b      	ldrb	r3, [r3, #0]
    9ee8:	4413      	add	r3, r2
    9eea:	b2da      	uxtb	r2, r3
    9eec:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9ef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ef4:	701a      	strb	r2, [r3, #0]
    9ef6:	f24c 5349 	movw	r3, #50505	; 0xc549
    9efa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9efe:	781b      	ldrb	r3, [r3, #0]
    9f00:	3301      	adds	r3, #1
    9f02:	b2da      	uxtb	r2, r3
    9f04:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f0c:	701a      	strb	r2, [r3, #0]
    9f0e:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f16:	781b      	ldrb	r3, [r3, #0]
    9f18:	2bff      	cmp	r3, #255	; 0xff
    9f1a:	d105      	bne.n	9f28 <send_desired+0x39c>
    9f1c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f24:	2200      	movs	r2, #0
    9f26:	701a      	strb	r2, [r3, #0]
    9f28:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f30:	781b      	ldrb	r3, [r3, #0]
    9f32:	461a      	mov	r2, r3
    9f34:	f64c 0378 	movw	r3, #51320	; 0xc878
    9f38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f3c:	7819      	ldrb	r1, [r3, #0]
    9f3e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9f42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f46:	5499      	strb	r1, [r3, r2]
    9f48:	f64c 0378 	movw	r3, #51320	; 0xc878
    9f4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f50:	781a      	ldrb	r2, [r3, #0]
    9f52:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9f56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f5a:	781b      	ldrb	r3, [r3, #0]
    9f5c:	4413      	add	r3, r2
    9f5e:	b2da      	uxtb	r2, r3
    9f60:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9f64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f68:	701a      	strb	r2, [r3, #0]
    9f6a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9f6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f72:	781a      	ldrb	r2, [r3, #0]
    9f74:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9f78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f7c:	781b      	ldrb	r3, [r3, #0]
    9f7e:	4413      	add	r3, r2
    9f80:	b2da      	uxtb	r2, r3
    9f82:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9f86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f8a:	701a      	strb	r2, [r3, #0]
    9f8c:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9f94:	781b      	ldrb	r3, [r3, #0]
    9f96:	3301      	adds	r3, #1
    9f98:	b2da      	uxtb	r2, r3
    9f9a:	f24c 5349 	movw	r3, #50505	; 0xc549
    9f9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fa2:	701a      	strb	r2, [r3, #0]
    9fa4:	f24c 5349 	movw	r3, #50505	; 0xc549
    9fa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fac:	781b      	ldrb	r3, [r3, #0]
    9fae:	2bff      	cmp	r3, #255	; 0xff
    9fb0:	d105      	bne.n	9fbe <send_desired+0x432>
    9fb2:	f24c 5349 	movw	r3, #50505	; 0xc549
    9fb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fba:	2200      	movs	r2, #0
    9fbc:	701a      	strb	r2, [r3, #0]
    9fbe:	f24c 5349 	movw	r3, #50505	; 0xc549
    9fc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fc6:	781b      	ldrb	r3, [r3, #0]
    9fc8:	461a      	mov	r2, r3
    9fca:	f64c 0378 	movw	r3, #51320	; 0xc878
    9fce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fd2:	7859      	ldrb	r1, [r3, #1]
    9fd4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    9fd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fdc:	5499      	strb	r1, [r3, r2]
    9fde:	4b43      	ldr	r3, [pc, #268]	; (a0ec <send_desired+0x560>)
    9fe0:	781a      	ldrb	r2, [r3, #0]
    9fe2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9fe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9fea:	781b      	ldrb	r3, [r3, #0]
    9fec:	4413      	add	r3, r2
    9fee:	b2da      	uxtb	r2, r3
    9ff0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    9ff4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    9ff8:	701a      	strb	r2, [r3, #0]
    9ffa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    9ffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a002:	781a      	ldrb	r2, [r3, #0]
    a004:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a00c:	781b      	ldrb	r3, [r3, #0]
    a00e:	4413      	add	r3, r2
    a010:	b2da      	uxtb	r2, r3
    a012:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a016:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a01a:	701a      	strb	r2, [r3, #0]
    a01c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a020:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a024:	781b      	ldrb	r3, [r3, #0]
    a026:	3301      	adds	r3, #1
    a028:	b2da      	uxtb	r2, r3
    a02a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a02e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a032:	701a      	strb	r2, [r3, #0]
    a034:	f24c 5349 	movw	r3, #50505	; 0xc549
    a038:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a03c:	781b      	ldrb	r3, [r3, #0]
    a03e:	2bff      	cmp	r3, #255	; 0xff
    a040:	d105      	bne.n	a04e <send_desired+0x4c2>
    a042:	f24c 5349 	movw	r3, #50505	; 0xc549
    a046:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a04a:	2200      	movs	r2, #0
    a04c:	701a      	strb	r2, [r3, #0]
    a04e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a056:	781b      	ldrb	r3, [r3, #0]
    a058:	461a      	mov	r2, r3
    a05a:	f64c 0378 	movw	r3, #51320	; 0xc878
    a05e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a062:	7899      	ldrb	r1, [r3, #2]
    a064:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a068:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a06c:	5499      	strb	r1, [r3, r2]
    a06e:	4b20      	ldr	r3, [pc, #128]	; (a0f0 <send_desired+0x564>)
    a070:	781a      	ldrb	r2, [r3, #0]
    a072:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a076:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a07a:	781b      	ldrb	r3, [r3, #0]
    a07c:	4413      	add	r3, r2
    a07e:	b2da      	uxtb	r2, r3
    a080:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a084:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a088:	701a      	strb	r2, [r3, #0]
    a08a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a08e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a092:	781a      	ldrb	r2, [r3, #0]
    a094:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a098:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a09c:	781b      	ldrb	r3, [r3, #0]
    a09e:	4413      	add	r3, r2
    a0a0:	b2da      	uxtb	r2, r3
    a0a2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a0a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0aa:	701a      	strb	r2, [r3, #0]
    a0ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    a0b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0b4:	781b      	ldrb	r3, [r3, #0]
    a0b6:	3301      	adds	r3, #1
    a0b8:	b2da      	uxtb	r2, r3
    a0ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    a0be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0c2:	701a      	strb	r2, [r3, #0]
    a0c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    a0c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0cc:	781b      	ldrb	r3, [r3, #0]
    a0ce:	2bff      	cmp	r3, #255	; 0xff
    a0d0:	d110      	bne.n	a0f4 <send_desired+0x568>
    a0d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    a0d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0da:	2200      	movs	r2, #0
    a0dc:	701a      	strb	r2, [r3, #0]
    a0de:	e009      	b.n	a0f4 <send_desired+0x568>
    a0e0:	2004c875 	.word	0x2004c875
    a0e4:	2004c876 	.word	0x2004c876
    a0e8:	2004c877 	.word	0x2004c877
    a0ec:	2004c879 	.word	0x2004c879
    a0f0:	2004c87a 	.word	0x2004c87a
    a0f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    a0f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a0fc:	781b      	ldrb	r3, [r3, #0]
    a0fe:	461a      	mov	r2, r3
    a100:	f64c 0378 	movw	r3, #51320	; 0xc878
    a104:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a108:	78d9      	ldrb	r1, [r3, #3]
    a10a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a10e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a112:	5499      	strb	r1, [r3, r2]
    a114:	4bd3      	ldr	r3, [pc, #844]	; (a464 <send_desired+0x8d8>)
    a116:	781a      	ldrb	r2, [r3, #0]
    a118:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a11c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a120:	781b      	ldrb	r3, [r3, #0]
    a122:	4413      	add	r3, r2
    a124:	b2da      	uxtb	r2, r3
    a126:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a12a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a12e:	701a      	strb	r2, [r3, #0]
    a130:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a138:	781a      	ldrb	r2, [r3, #0]
    a13a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a13e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a142:	781b      	ldrb	r3, [r3, #0]
    a144:	4413      	add	r3, r2
    a146:	b2da      	uxtb	r2, r3
    a148:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a14c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a150:	701a      	strb	r2, [r3, #0]
    a152:	f24c 5349 	movw	r3, #50505	; 0xc549
    a156:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a15a:	781b      	ldrb	r3, [r3, #0]
    a15c:	3301      	adds	r3, #1
    a15e:	b2da      	uxtb	r2, r3
    a160:	f24c 5349 	movw	r3, #50505	; 0xc549
    a164:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a168:	701a      	strb	r2, [r3, #0]
    a16a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a16e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a172:	781b      	ldrb	r3, [r3, #0]
    a174:	2bff      	cmp	r3, #255	; 0xff
    a176:	d105      	bne.n	a184 <send_desired+0x5f8>
    a178:	f24c 5349 	movw	r3, #50505	; 0xc549
    a17c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a180:	2200      	movs	r2, #0
    a182:	701a      	strb	r2, [r3, #0]
    a184:	f24c 5349 	movw	r3, #50505	; 0xc549
    a188:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a18c:	781b      	ldrb	r3, [r3, #0]
    a18e:	461a      	mov	r2, r3
    a190:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a194:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a198:	7819      	ldrb	r1, [r3, #0]
    a19a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a19e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1a2:	5499      	strb	r1, [r3, r2]
    a1a4:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a1a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1ac:	781a      	ldrb	r2, [r3, #0]
    a1ae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a1b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1b6:	781b      	ldrb	r3, [r3, #0]
    a1b8:	4413      	add	r3, r2
    a1ba:	b2da      	uxtb	r2, r3
    a1bc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a1c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1c4:	701a      	strb	r2, [r3, #0]
    a1c6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a1ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1ce:	781a      	ldrb	r2, [r3, #0]
    a1d0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a1d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1d8:	781b      	ldrb	r3, [r3, #0]
    a1da:	4413      	add	r3, r2
    a1dc:	b2da      	uxtb	r2, r3
    a1de:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a1e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1e6:	701a      	strb	r2, [r3, #0]
    a1e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a1ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1f0:	781b      	ldrb	r3, [r3, #0]
    a1f2:	3301      	adds	r3, #1
    a1f4:	b2da      	uxtb	r2, r3
    a1f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    a1fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a1fe:	701a      	strb	r2, [r3, #0]
    a200:	f24c 5349 	movw	r3, #50505	; 0xc549
    a204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a208:	781b      	ldrb	r3, [r3, #0]
    a20a:	2bff      	cmp	r3, #255	; 0xff
    a20c:	d105      	bne.n	a21a <send_desired+0x68e>
    a20e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a212:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a216:	2200      	movs	r2, #0
    a218:	701a      	strb	r2, [r3, #0]
    a21a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a21e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a222:	781b      	ldrb	r3, [r3, #0]
    a224:	461a      	mov	r2, r3
    a226:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a22a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a22e:	7859      	ldrb	r1, [r3, #1]
    a230:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a238:	5499      	strb	r1, [r3, r2]
    a23a:	4b8b      	ldr	r3, [pc, #556]	; (a468 <send_desired+0x8dc>)
    a23c:	781a      	ldrb	r2, [r3, #0]
    a23e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a242:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a246:	781b      	ldrb	r3, [r3, #0]
    a248:	4413      	add	r3, r2
    a24a:	b2da      	uxtb	r2, r3
    a24c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a250:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a254:	701a      	strb	r2, [r3, #0]
    a256:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a25a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a25e:	781a      	ldrb	r2, [r3, #0]
    a260:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a268:	781b      	ldrb	r3, [r3, #0]
    a26a:	4413      	add	r3, r2
    a26c:	b2da      	uxtb	r2, r3
    a26e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a272:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a276:	701a      	strb	r2, [r3, #0]
    a278:	f24c 5349 	movw	r3, #50505	; 0xc549
    a27c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a280:	781b      	ldrb	r3, [r3, #0]
    a282:	3301      	adds	r3, #1
    a284:	b2da      	uxtb	r2, r3
    a286:	f24c 5349 	movw	r3, #50505	; 0xc549
    a28a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a28e:	701a      	strb	r2, [r3, #0]
    a290:	f24c 5349 	movw	r3, #50505	; 0xc549
    a294:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a298:	781b      	ldrb	r3, [r3, #0]
    a29a:	2bff      	cmp	r3, #255	; 0xff
    a29c:	d105      	bne.n	a2aa <send_desired+0x71e>
    a29e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a2a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2a6:	2200      	movs	r2, #0
    a2a8:	701a      	strb	r2, [r3, #0]
    a2aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    a2ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2b2:	781b      	ldrb	r3, [r3, #0]
    a2b4:	461a      	mov	r2, r3
    a2b6:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a2ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2be:	7899      	ldrb	r1, [r3, #2]
    a2c0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a2c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2c8:	5499      	strb	r1, [r3, r2]
    a2ca:	4b68      	ldr	r3, [pc, #416]	; (a46c <send_desired+0x8e0>)
    a2cc:	781a      	ldrb	r2, [r3, #0]
    a2ce:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a2d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2d6:	781b      	ldrb	r3, [r3, #0]
    a2d8:	4413      	add	r3, r2
    a2da:	b2da      	uxtb	r2, r3
    a2dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a2e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2e4:	701a      	strb	r2, [r3, #0]
    a2e6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a2ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2ee:	781a      	ldrb	r2, [r3, #0]
    a2f0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a2f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a2f8:	781b      	ldrb	r3, [r3, #0]
    a2fa:	4413      	add	r3, r2
    a2fc:	b2da      	uxtb	r2, r3
    a2fe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a302:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a306:	701a      	strb	r2, [r3, #0]
    a308:	f24c 5349 	movw	r3, #50505	; 0xc549
    a30c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a310:	781b      	ldrb	r3, [r3, #0]
    a312:	3301      	adds	r3, #1
    a314:	b2da      	uxtb	r2, r3
    a316:	f24c 5349 	movw	r3, #50505	; 0xc549
    a31a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a31e:	701a      	strb	r2, [r3, #0]
    a320:	f24c 5349 	movw	r3, #50505	; 0xc549
    a324:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a328:	781b      	ldrb	r3, [r3, #0]
    a32a:	2bff      	cmp	r3, #255	; 0xff
    a32c:	d105      	bne.n	a33a <send_desired+0x7ae>
    a32e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a336:	2200      	movs	r2, #0
    a338:	701a      	strb	r2, [r3, #0]
    a33a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a33e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a342:	781b      	ldrb	r3, [r3, #0]
    a344:	461a      	mov	r2, r3
    a346:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
    a34a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a34e:	78d9      	ldrb	r1, [r3, #3]
    a350:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a354:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a358:	5499      	strb	r1, [r3, r2]
    a35a:	4b45      	ldr	r3, [pc, #276]	; (a470 <send_desired+0x8e4>)
    a35c:	781a      	ldrb	r2, [r3, #0]
    a35e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a362:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a366:	781b      	ldrb	r3, [r3, #0]
    a368:	4413      	add	r3, r2
    a36a:	b2da      	uxtb	r2, r3
    a36c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a374:	701a      	strb	r2, [r3, #0]
    a376:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a37a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a37e:	781a      	ldrb	r2, [r3, #0]
    a380:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a388:	781b      	ldrb	r3, [r3, #0]
    a38a:	4413      	add	r3, r2
    a38c:	b2da      	uxtb	r2, r3
    a38e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a392:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a396:	701a      	strb	r2, [r3, #0]
    a398:	f24c 5349 	movw	r3, #50505	; 0xc549
    a39c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3a0:	781b      	ldrb	r3, [r3, #0]
    a3a2:	3301      	adds	r3, #1
    a3a4:	b2da      	uxtb	r2, r3
    a3a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    a3aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3ae:	701a      	strb	r2, [r3, #0]
    a3b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a3b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3b8:	781b      	ldrb	r3, [r3, #0]
    a3ba:	2bff      	cmp	r3, #255	; 0xff
    a3bc:	d105      	bne.n	a3ca <send_desired+0x83e>
    a3be:	f24c 5349 	movw	r3, #50505	; 0xc549
    a3c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3c6:	2200      	movs	r2, #0
    a3c8:	701a      	strb	r2, [r3, #0]
    a3ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    a3ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3d2:	781b      	ldrb	r3, [r3, #0]
    a3d4:	461a      	mov	r2, r3
    a3d6:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a3da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3de:	7819      	ldrb	r1, [r3, #0]
    a3e0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a3e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3e8:	5499      	strb	r1, [r3, r2]
    a3ea:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a3ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3f2:	781a      	ldrb	r2, [r3, #0]
    a3f4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a3f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a3fc:	781b      	ldrb	r3, [r3, #0]
    a3fe:	4413      	add	r3, r2
    a400:	b2da      	uxtb	r2, r3
    a402:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a406:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a40a:	701a      	strb	r2, [r3, #0]
    a40c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a410:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a414:	781a      	ldrb	r2, [r3, #0]
    a416:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a41a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a41e:	781b      	ldrb	r3, [r3, #0]
    a420:	4413      	add	r3, r2
    a422:	b2da      	uxtb	r2, r3
    a424:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a428:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a42c:	701a      	strb	r2, [r3, #0]
    a42e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a432:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a436:	781b      	ldrb	r3, [r3, #0]
    a438:	3301      	adds	r3, #1
    a43a:	b2da      	uxtb	r2, r3
    a43c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a440:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a444:	701a      	strb	r2, [r3, #0]
    a446:	f24c 5349 	movw	r3, #50505	; 0xc549
    a44a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a44e:	781b      	ldrb	r3, [r3, #0]
    a450:	2bff      	cmp	r3, #255	; 0xff
    a452:	d10f      	bne.n	a474 <send_desired+0x8e8>
    a454:	f24c 5349 	movw	r3, #50505	; 0xc549
    a458:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a45c:	2200      	movs	r2, #0
    a45e:	701a      	strb	r2, [r3, #0]
    a460:	e008      	b.n	a474 <send_desired+0x8e8>
    a462:	bf00      	nop
    a464:	2004c87b 	.word	0x2004c87b
    a468:	2004c8c1 	.word	0x2004c8c1
    a46c:	2004c8c2 	.word	0x2004c8c2
    a470:	2004c8c3 	.word	0x2004c8c3
    a474:	f24c 5349 	movw	r3, #50505	; 0xc549
    a478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a47c:	781b      	ldrb	r3, [r3, #0]
    a47e:	461a      	mov	r2, r3
    a480:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a488:	7859      	ldrb	r1, [r3, #1]
    a48a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a48e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a492:	5499      	strb	r1, [r3, r2]
    a494:	4bd1      	ldr	r3, [pc, #836]	; (a7dc <send_desired+0xc50>)
    a496:	781a      	ldrb	r2, [r3, #0]
    a498:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a49c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4a0:	781b      	ldrb	r3, [r3, #0]
    a4a2:	4413      	add	r3, r2
    a4a4:	b2da      	uxtb	r2, r3
    a4a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a4aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4ae:	701a      	strb	r2, [r3, #0]
    a4b0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a4b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4b8:	781a      	ldrb	r2, [r3, #0]
    a4ba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a4be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4c2:	781b      	ldrb	r3, [r3, #0]
    a4c4:	4413      	add	r3, r2
    a4c6:	b2da      	uxtb	r2, r3
    a4c8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a4cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4d0:	701a      	strb	r2, [r3, #0]
    a4d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    a4d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4da:	781b      	ldrb	r3, [r3, #0]
    a4dc:	3301      	adds	r3, #1
    a4de:	b2da      	uxtb	r2, r3
    a4e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a4e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4e8:	701a      	strb	r2, [r3, #0]
    a4ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    a4ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a4f2:	781b      	ldrb	r3, [r3, #0]
    a4f4:	2bff      	cmp	r3, #255	; 0xff
    a4f6:	d105      	bne.n	a504 <send_desired+0x978>
    a4f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a4fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a500:	2200      	movs	r2, #0
    a502:	701a      	strb	r2, [r3, #0]
    a504:	f24c 5349 	movw	r3, #50505	; 0xc549
    a508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a50c:	781b      	ldrb	r3, [r3, #0]
    a50e:	461a      	mov	r2, r3
    a510:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a514:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a518:	7899      	ldrb	r1, [r3, #2]
    a51a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a51e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a522:	5499      	strb	r1, [r3, r2]
    a524:	4bae      	ldr	r3, [pc, #696]	; (a7e0 <send_desired+0xc54>)
    a526:	781a      	ldrb	r2, [r3, #0]
    a528:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a52c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a530:	781b      	ldrb	r3, [r3, #0]
    a532:	4413      	add	r3, r2
    a534:	b2da      	uxtb	r2, r3
    a536:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a53a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a53e:	701a      	strb	r2, [r3, #0]
    a540:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a544:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a548:	781a      	ldrb	r2, [r3, #0]
    a54a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a54e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a552:	781b      	ldrb	r3, [r3, #0]
    a554:	4413      	add	r3, r2
    a556:	b2da      	uxtb	r2, r3
    a558:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a55c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a560:	701a      	strb	r2, [r3, #0]
    a562:	f24c 5349 	movw	r3, #50505	; 0xc549
    a566:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a56a:	781b      	ldrb	r3, [r3, #0]
    a56c:	3301      	adds	r3, #1
    a56e:	b2da      	uxtb	r2, r3
    a570:	f24c 5349 	movw	r3, #50505	; 0xc549
    a574:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a578:	701a      	strb	r2, [r3, #0]
    a57a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a57e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a582:	781b      	ldrb	r3, [r3, #0]
    a584:	2bff      	cmp	r3, #255	; 0xff
    a586:	d105      	bne.n	a594 <send_desired+0xa08>
    a588:	f24c 5349 	movw	r3, #50505	; 0xc549
    a58c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a590:	2200      	movs	r2, #0
    a592:	701a      	strb	r2, [r3, #0]
    a594:	f24c 5349 	movw	r3, #50505	; 0xc549
    a598:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a59c:	781b      	ldrb	r3, [r3, #0]
    a59e:	461a      	mov	r2, r3
    a5a0:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
    a5a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5a8:	78d9      	ldrb	r1, [r3, #3]
    a5aa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a5ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5b2:	5499      	strb	r1, [r3, r2]
    a5b4:	4b8b      	ldr	r3, [pc, #556]	; (a7e4 <send_desired+0xc58>)
    a5b6:	781a      	ldrb	r2, [r3, #0]
    a5b8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a5bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5c0:	781b      	ldrb	r3, [r3, #0]
    a5c2:	4413      	add	r3, r2
    a5c4:	b2da      	uxtb	r2, r3
    a5c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a5ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5ce:	701a      	strb	r2, [r3, #0]
    a5d0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a5d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5d8:	781a      	ldrb	r2, [r3, #0]
    a5da:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a5de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5e2:	781b      	ldrb	r3, [r3, #0]
    a5e4:	4413      	add	r3, r2
    a5e6:	b2da      	uxtb	r2, r3
    a5e8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a5ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5f0:	701a      	strb	r2, [r3, #0]
    a5f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    a5f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a5fa:	781b      	ldrb	r3, [r3, #0]
    a5fc:	3301      	adds	r3, #1
    a5fe:	b2da      	uxtb	r2, r3
    a600:	f24c 5349 	movw	r3, #50505	; 0xc549
    a604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a608:	701a      	strb	r2, [r3, #0]
    a60a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a60e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a612:	781b      	ldrb	r3, [r3, #0]
    a614:	2bff      	cmp	r3, #255	; 0xff
    a616:	d105      	bne.n	a624 <send_desired+0xa98>
    a618:	f24c 5349 	movw	r3, #50505	; 0xc549
    a61c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a620:	2200      	movs	r2, #0
    a622:	701a      	strb	r2, [r3, #0]
    a624:	f24c 5349 	movw	r3, #50505	; 0xc549
    a628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a62c:	781b      	ldrb	r3, [r3, #0]
    a62e:	461a      	mov	r2, r3
    a630:	f240 5374 	movw	r3, #1396	; 0x574
    a634:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a638:	7819      	ldrb	r1, [r3, #0]
    a63a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a63e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a642:	5499      	strb	r1, [r3, r2]
    a644:	f240 5374 	movw	r3, #1396	; 0x574
    a648:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a64c:	781a      	ldrb	r2, [r3, #0]
    a64e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a656:	781b      	ldrb	r3, [r3, #0]
    a658:	4413      	add	r3, r2
    a65a:	b2da      	uxtb	r2, r3
    a65c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a660:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a664:	701a      	strb	r2, [r3, #0]
    a666:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a66a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a66e:	781a      	ldrb	r2, [r3, #0]
    a670:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a674:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a678:	781b      	ldrb	r3, [r3, #0]
    a67a:	4413      	add	r3, r2
    a67c:	b2da      	uxtb	r2, r3
    a67e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a686:	701a      	strb	r2, [r3, #0]
    a688:	f24c 5349 	movw	r3, #50505	; 0xc549
    a68c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a690:	781b      	ldrb	r3, [r3, #0]
    a692:	3301      	adds	r3, #1
    a694:	b2da      	uxtb	r2, r3
    a696:	f24c 5349 	movw	r3, #50505	; 0xc549
    a69a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a69e:	701a      	strb	r2, [r3, #0]
    a6a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a6a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6a8:	781b      	ldrb	r3, [r3, #0]
    a6aa:	2bff      	cmp	r3, #255	; 0xff
    a6ac:	d105      	bne.n	a6ba <send_desired+0xb2e>
    a6ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    a6b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6b6:	2200      	movs	r2, #0
    a6b8:	701a      	strb	r2, [r3, #0]
    a6ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    a6be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6c2:	781b      	ldrb	r3, [r3, #0]
    a6c4:	461a      	mov	r2, r3
    a6c6:	f240 5374 	movw	r3, #1396	; 0x574
    a6ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a6ce:	7859      	ldrb	r1, [r3, #1]
    a6d0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a6d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6d8:	5499      	strb	r1, [r3, r2]
    a6da:	4b43      	ldr	r3, [pc, #268]	; (a7e8 <send_desired+0xc5c>)
    a6dc:	781a      	ldrb	r2, [r3, #0]
    a6de:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a6e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6e6:	781b      	ldrb	r3, [r3, #0]
    a6e8:	4413      	add	r3, r2
    a6ea:	b2da      	uxtb	r2, r3
    a6ec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a6f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6f4:	701a      	strb	r2, [r3, #0]
    a6f6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a6fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a6fe:	781a      	ldrb	r2, [r3, #0]
    a700:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a708:	781b      	ldrb	r3, [r3, #0]
    a70a:	4413      	add	r3, r2
    a70c:	b2da      	uxtb	r2, r3
    a70e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a716:	701a      	strb	r2, [r3, #0]
    a718:	f24c 5349 	movw	r3, #50505	; 0xc549
    a71c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a720:	781b      	ldrb	r3, [r3, #0]
    a722:	3301      	adds	r3, #1
    a724:	b2da      	uxtb	r2, r3
    a726:	f24c 5349 	movw	r3, #50505	; 0xc549
    a72a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a72e:	701a      	strb	r2, [r3, #0]
    a730:	f24c 5349 	movw	r3, #50505	; 0xc549
    a734:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a738:	781b      	ldrb	r3, [r3, #0]
    a73a:	2bff      	cmp	r3, #255	; 0xff
    a73c:	d105      	bne.n	a74a <send_desired+0xbbe>
    a73e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a746:	2200      	movs	r2, #0
    a748:	701a      	strb	r2, [r3, #0]
    a74a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a74e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a752:	781b      	ldrb	r3, [r3, #0]
    a754:	461a      	mov	r2, r3
    a756:	f240 5374 	movw	r3, #1396	; 0x574
    a75a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a75e:	7899      	ldrb	r1, [r3, #2]
    a760:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a764:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a768:	5499      	strb	r1, [r3, r2]
    a76a:	4b20      	ldr	r3, [pc, #128]	; (a7ec <send_desired+0xc60>)
    a76c:	781a      	ldrb	r2, [r3, #0]
    a76e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a772:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a776:	781b      	ldrb	r3, [r3, #0]
    a778:	4413      	add	r3, r2
    a77a:	b2da      	uxtb	r2, r3
    a77c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a780:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a784:	701a      	strb	r2, [r3, #0]
    a786:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a78a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a78e:	781a      	ldrb	r2, [r3, #0]
    a790:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a794:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a798:	781b      	ldrb	r3, [r3, #0]
    a79a:	4413      	add	r3, r2
    a79c:	b2da      	uxtb	r2, r3
    a79e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a7a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7a6:	701a      	strb	r2, [r3, #0]
    a7a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a7ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7b0:	781b      	ldrb	r3, [r3, #0]
    a7b2:	3301      	adds	r3, #1
    a7b4:	b2da      	uxtb	r2, r3
    a7b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    a7ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7be:	701a      	strb	r2, [r3, #0]
    a7c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a7c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7c8:	781b      	ldrb	r3, [r3, #0]
    a7ca:	2bff      	cmp	r3, #255	; 0xff
    a7cc:	d110      	bne.n	a7f0 <send_desired+0xc64>
    a7ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    a7d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7d6:	2200      	movs	r2, #0
    a7d8:	701a      	strb	r2, [r3, #0]
    a7da:	e009      	b.n	a7f0 <send_desired+0xc64>
    a7dc:	2004c8c5 	.word	0x2004c8c5
    a7e0:	2004c8c6 	.word	0x2004c8c6
    a7e4:	2004c8c7 	.word	0x2004c8c7
    a7e8:	20000575 	.word	0x20000575
    a7ec:	20000576 	.word	0x20000576
    a7f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a7f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a7f8:	781b      	ldrb	r3, [r3, #0]
    a7fa:	461a      	mov	r2, r3
    a7fc:	f240 5374 	movw	r3, #1396	; 0x574
    a800:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a804:	78d9      	ldrb	r1, [r3, #3]
    a806:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a80a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a80e:	5499      	strb	r1, [r3, r2]
    a810:	4b79      	ldr	r3, [pc, #484]	; (a9f8 <send_desired+0xe6c>)
    a812:	781a      	ldrb	r2, [r3, #0]
    a814:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a818:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a81c:	781b      	ldrb	r3, [r3, #0]
    a81e:	4413      	add	r3, r2
    a820:	b2da      	uxtb	r2, r3
    a822:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a826:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a82a:	701a      	strb	r2, [r3, #0]
    a82c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a834:	781a      	ldrb	r2, [r3, #0]
    a836:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a83a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a83e:	781b      	ldrb	r3, [r3, #0]
    a840:	4413      	add	r3, r2
    a842:	b2da      	uxtb	r2, r3
    a844:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a848:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a84c:	701a      	strb	r2, [r3, #0]
    a84e:	f24c 5349 	movw	r3, #50505	; 0xc549
    a852:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a856:	781b      	ldrb	r3, [r3, #0]
    a858:	3301      	adds	r3, #1
    a85a:	b2da      	uxtb	r2, r3
    a85c:	f24c 5349 	movw	r3, #50505	; 0xc549
    a860:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a864:	701a      	strb	r2, [r3, #0]
    a866:	f24c 5349 	movw	r3, #50505	; 0xc549
    a86a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a86e:	781b      	ldrb	r3, [r3, #0]
    a870:	2bff      	cmp	r3, #255	; 0xff
    a872:	d105      	bne.n	a880 <send_desired+0xcf4>
    a874:	f24c 5349 	movw	r3, #50505	; 0xc549
    a878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a87c:	2200      	movs	r2, #0
    a87e:	701a      	strb	r2, [r3, #0]
    a880:	f24c 5349 	movw	r3, #50505	; 0xc549
    a884:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a888:	781b      	ldrb	r3, [r3, #0]
    a88a:	461a      	mov	r2, r3
    a88c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    a890:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a894:	7819      	ldrb	r1, [r3, #0]
    a896:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a89a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a89e:	5499      	strb	r1, [r3, r2]
    a8a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    a8a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8a8:	781b      	ldrb	r3, [r3, #0]
    a8aa:	3301      	adds	r3, #1
    a8ac:	b2da      	uxtb	r2, r3
    a8ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    a8b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8b6:	701a      	strb	r2, [r3, #0]
    a8b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    a8bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8c0:	781b      	ldrb	r3, [r3, #0]
    a8c2:	2bff      	cmp	r3, #255	; 0xff
    a8c4:	d105      	bne.n	a8d2 <send_desired+0xd46>
    a8c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    a8ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8ce:	2200      	movs	r2, #0
    a8d0:	701a      	strb	r2, [r3, #0]
    a8d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    a8d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8da:	781b      	ldrb	r3, [r3, #0]
    a8dc:	461a      	mov	r2, r3
    a8de:	f24c 634e 	movw	r3, #50766	; 0xc64e
    a8e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8e6:	7819      	ldrb	r1, [r3, #0]
    a8e8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a8ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8f0:	5499      	strb	r1, [r3, r2]
    a8f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    a8f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a8fa:	781b      	ldrb	r3, [r3, #0]
    a8fc:	3301      	adds	r3, #1
    a8fe:	b2da      	uxtb	r2, r3
    a900:	f24c 5349 	movw	r3, #50505	; 0xc549
    a904:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a908:	701a      	strb	r2, [r3, #0]
    a90a:	f24c 5349 	movw	r3, #50505	; 0xc549
    a90e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a912:	781b      	ldrb	r3, [r3, #0]
    a914:	2bff      	cmp	r3, #255	; 0xff
    a916:	d105      	bne.n	a924 <send_desired+0xd98>
    a918:	f24c 5349 	movw	r3, #50505	; 0xc549
    a91c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a920:	2200      	movs	r2, #0
    a922:	701a      	strb	r2, [r3, #0]
    a924:	f242 0339 	movw	r3, #8249	; 0x2039
    a928:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a92c:	781b      	ldrb	r3, [r3, #0]
    a92e:	b2db      	uxtb	r3, r3
    a930:	f003 0310 	and.w	r3, r3, #16
    a934:	2b00      	cmp	r3, #0
    a936:	d15a      	bne.n	a9ee <send_desired+0xe62>
    a938:	f24c 534a 	movw	r3, #50506	; 0xc54a
    a93c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a940:	781b      	ldrb	r3, [r3, #0]
    a942:	b2db      	uxtb	r3, r3
    a944:	461a      	mov	r2, r3
    a946:	f24c 534c 	movw	r3, #50508	; 0xc54c
    a94a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a94e:	5c9a      	ldrb	r2, [r3, r2]
    a950:	f24c 634b 	movw	r3, #50763	; 0xc64b
    a954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a958:	701a      	strb	r2, [r3, #0]
    a95a:	f24c 634c 	movw	r3, #50764	; 0xc64c
    a95e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a962:	2200      	movs	r2, #0
    a964:	701a      	strb	r2, [r3, #0]
    a966:	f24c 534a 	movw	r3, #50506	; 0xc54a
    a96a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a96e:	781b      	ldrb	r3, [r3, #0]
    a970:	b2db      	uxtb	r3, r3
    a972:	3301      	adds	r3, #1
    a974:	b2da      	uxtb	r2, r3
    a976:	f24c 534a 	movw	r3, #50506	; 0xc54a
    a97a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a97e:	701a      	strb	r2, [r3, #0]
    a980:	f24c 534a 	movw	r3, #50506	; 0xc54a
    a984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a988:	781b      	ldrb	r3, [r3, #0]
    a98a:	b2db      	uxtb	r3, r3
    a98c:	2bff      	cmp	r3, #255	; 0xff
    a98e:	d105      	bne.n	a99c <send_desired+0xe10>
    a990:	f24c 534a 	movw	r3, #50506	; 0xc54a
    a994:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a998:	2200      	movs	r2, #0
    a99a:	701a      	strb	r2, [r3, #0]
    a99c:	f242 0338 	movw	r3, #8248	; 0x2038
    a9a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9a4:	f242 0238 	movw	r2, #8248	; 0x2038
    a9a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a9ac:	7812      	ldrb	r2, [r2, #0]
    a9ae:	b2d2      	uxtb	r2, r2
    a9b0:	f042 0201 	orr.w	r2, r2, #1
    a9b4:	b2d2      	uxtb	r2, r2
    a9b6:	701a      	strb	r2, [r3, #0]
    a9b8:	f242 0339 	movw	r3, #8249	; 0x2039
    a9bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    a9c0:	f242 0239 	movw	r2, #8249	; 0x2039
    a9c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    a9c8:	7812      	ldrb	r2, [r2, #0]
    a9ca:	b2d2      	uxtb	r2, r2
    a9cc:	f042 0210 	orr.w	r2, r2, #16
    a9d0:	b2d2      	uxtb	r2, r2
    a9d2:	701a      	strb	r2, [r3, #0]
    a9d4:	e00b      	b.n	a9ee <send_desired+0xe62>
    a9d6:	f24c 5348 	movw	r3, #50504	; 0xc548
    a9da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9de:	781b      	ldrb	r3, [r3, #0]
    a9e0:	3301      	adds	r3, #1
    a9e2:	b2da      	uxtb	r2, r3
    a9e4:	f24c 5348 	movw	r3, #50504	; 0xc548
    a9e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    a9ec:	701a      	strb	r2, [r3, #0]
}
    a9ee:	46bd      	mov	sp, r7
    a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9f4:	4770      	bx	lr
    a9f6:	bf00      	nop
    a9f8:	20000577 	.word	0x20000577

0000a9fc <send_bat>:
void send_bat(void){  //2000ms
    a9fc:	b480      	push	{r7}
    a9fe:	af00      	add	r7, sp, #0
  if(!boot)
    aa00:	f240 533d 	movw	r3, #1341	; 0x53d
    aa04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    aa08:	781b      	ldrb	r3, [r3, #0]
    aa0a:	2b00      	cmp	r3, #0
    aa0c:	f040 83af 	bne.w	b16e <send_bat+0x772>
  { if (count % 20 == 8) PERIODIC_SEND_BAT();}
    aa10:	f24c 5341 	movw	r3, #50497	; 0xc541
    aa14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa18:	781a      	ldrb	r2, [r3, #0]
    aa1a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    aa1e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    aa22:	fba3 1302 	umull	r1, r3, r3, r2
    aa26:	0919      	lsrs	r1, r3, #4
    aa28:	460b      	mov	r3, r1
    aa2a:	009b      	lsls	r3, r3, #2
    aa2c:	440b      	add	r3, r1
    aa2e:	009b      	lsls	r3, r3, #2
    aa30:	1ad3      	subs	r3, r2, r3
    aa32:	b2db      	uxtb	r3, r3
    aa34:	2b08      	cmp	r3, #8
    aa36:	f040 839a 	bne.w	b16e <send_bat+0x772>
    aa3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    aa3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa42:	781a      	ldrb	r2, [r3, #0]
    aa44:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aa48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa4c:	781b      	ldrb	r3, [r3, #0]
    aa4e:	b2db      	uxtb	r3, r3
    aa50:	429a      	cmp	r2, r3
    aa52:	d313      	bcc.n	aa7c <send_bat+0x80>
    aa54:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aa58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa5c:	781b      	ldrb	r3, [r3, #0]
    aa5e:	b2db      	uxtb	r3, r3
    aa60:	461a      	mov	r2, r3
    aa62:	f24c 5349 	movw	r3, #50505	; 0xc549
    aa66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa6a:	781b      	ldrb	r3, [r3, #0]
    aa6c:	1ad3      	subs	r3, r2, r3
    aa6e:	33ff      	adds	r3, #255	; 0xff
    aa70:	2b0c      	cmp	r3, #12
    aa72:	bfd4      	ite	le
    aa74:	2300      	movle	r3, #0
    aa76:	2301      	movgt	r3, #1
    aa78:	b2db      	uxtb	r3, r3
    aa7a:	e011      	b.n	aaa0 <send_bat+0xa4>
    aa7c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    aa80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa84:	781b      	ldrb	r3, [r3, #0]
    aa86:	b2db      	uxtb	r3, r3
    aa88:	461a      	mov	r2, r3
    aa8a:	f24c 5349 	movw	r3, #50505	; 0xc549
    aa8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aa92:	781b      	ldrb	r3, [r3, #0]
    aa94:	1ad3      	subs	r3, r2, r3
    aa96:	2b0c      	cmp	r3, #12
    aa98:	bfd4      	ite	le
    aa9a:	2300      	movle	r3, #0
    aa9c:	2301      	movgt	r3, #1
    aa9e:	b2db      	uxtb	r3, r3
    aaa0:	2b00      	cmp	r3, #0
    aaa2:	f000 8358 	beq.w	b156 <send_bat+0x75a>
    aaa6:	f24c 5349 	movw	r3, #50505	; 0xc549
    aaaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaae:	781b      	ldrb	r3, [r3, #0]
    aab0:	461a      	mov	r2, r3
    aab2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    aab6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaba:	2105      	movs	r1, #5
    aabc:	5499      	strb	r1, [r3, r2]
    aabe:	f24c 5349 	movw	r3, #50505	; 0xc549
    aac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aac6:	781b      	ldrb	r3, [r3, #0]
    aac8:	3301      	adds	r3, #1
    aaca:	b2da      	uxtb	r2, r3
    aacc:	f24c 5349 	movw	r3, #50505	; 0xc549
    aad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aad4:	701a      	strb	r2, [r3, #0]
    aad6:	f24c 5349 	movw	r3, #50505	; 0xc549
    aada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aade:	781b      	ldrb	r3, [r3, #0]
    aae0:	2bff      	cmp	r3, #255	; 0xff
    aae2:	d105      	bne.n	aaf0 <send_bat+0xf4>
    aae4:	f24c 5349 	movw	r3, #50505	; 0xc549
    aae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaec:	2200      	movs	r2, #0
    aaee:	701a      	strb	r2, [r3, #0]
    aaf0:	f24c 5349 	movw	r3, #50505	; 0xc549
    aaf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aaf8:	781b      	ldrb	r3, [r3, #0]
    aafa:	461a      	mov	r2, r3
    aafc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ab00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab04:	210c      	movs	r1, #12
    ab06:	5499      	strb	r1, [r3, r2]
    ab08:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab10:	781b      	ldrb	r3, [r3, #0]
    ab12:	3301      	adds	r3, #1
    ab14:	b2da      	uxtb	r2, r3
    ab16:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab1e:	701a      	strb	r2, [r3, #0]
    ab20:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab28:	781b      	ldrb	r3, [r3, #0]
    ab2a:	2bff      	cmp	r3, #255	; 0xff
    ab2c:	d105      	bne.n	ab3a <send_bat+0x13e>
    ab2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab36:	2200      	movs	r2, #0
    ab38:	701a      	strb	r2, [r3, #0]
    ab3a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ab3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab42:	220c      	movs	r2, #12
    ab44:	701a      	strb	r2, [r3, #0]
    ab46:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ab4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab4e:	220c      	movs	r2, #12
    ab50:	701a      	strb	r2, [r3, #0]
    ab52:	f24c 5349 	movw	r3, #50505	; 0xc549
    ab56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab5a:	781b      	ldrb	r3, [r3, #0]
    ab5c:	461a      	mov	r2, r3
    ab5e:	f24c 5332 	movw	r3, #50482	; 0xc532
    ab62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab66:	7819      	ldrb	r1, [r3, #0]
    ab68:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ab6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab70:	5499      	strb	r1, [r3, r2]
    ab72:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ab76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab7a:	781a      	ldrb	r2, [r3, #0]
    ab7c:	f24c 5332 	movw	r3, #50482	; 0xc532
    ab80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab84:	781b      	ldrb	r3, [r3, #0]
    ab86:	4413      	add	r3, r2
    ab88:	b2da      	uxtb	r2, r3
    ab8a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ab8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab92:	701a      	strb	r2, [r3, #0]
    ab94:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ab98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ab9c:	781a      	ldrb	r2, [r3, #0]
    ab9e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    aba2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aba6:	781b      	ldrb	r3, [r3, #0]
    aba8:	4413      	add	r3, r2
    abaa:	b2da      	uxtb	r2, r3
    abac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    abb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abb4:	701a      	strb	r2, [r3, #0]
    abb6:	f24c 5349 	movw	r3, #50505	; 0xc549
    abba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abbe:	781b      	ldrb	r3, [r3, #0]
    abc0:	3301      	adds	r3, #1
    abc2:	b2da      	uxtb	r2, r3
    abc4:	f24c 5349 	movw	r3, #50505	; 0xc549
    abc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abcc:	701a      	strb	r2, [r3, #0]
    abce:	f24c 5349 	movw	r3, #50505	; 0xc549
    abd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abd6:	781b      	ldrb	r3, [r3, #0]
    abd8:	2bff      	cmp	r3, #255	; 0xff
    abda:	d105      	bne.n	abe8 <send_bat+0x1ec>
    abdc:	f24c 5349 	movw	r3, #50505	; 0xc549
    abe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abe4:	2200      	movs	r2, #0
    abe6:	701a      	strb	r2, [r3, #0]
    abe8:	f24c 5349 	movw	r3, #50505	; 0xc549
    abec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abf0:	781b      	ldrb	r3, [r3, #0]
    abf2:	461a      	mov	r2, r3
    abf4:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    abf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    abfc:	7819      	ldrb	r1, [r3, #0]
    abfe:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ac02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac06:	5499      	strb	r1, [r3, r2]
    ac08:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    ac0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac10:	781a      	ldrb	r2, [r3, #0]
    ac12:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ac16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac1a:	781b      	ldrb	r3, [r3, #0]
    ac1c:	4413      	add	r3, r2
    ac1e:	b2da      	uxtb	r2, r3
    ac20:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ac24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac28:	701a      	strb	r2, [r3, #0]
    ac2a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ac2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac32:	781a      	ldrb	r2, [r3, #0]
    ac34:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ac38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac3c:	781b      	ldrb	r3, [r3, #0]
    ac3e:	4413      	add	r3, r2
    ac40:	b2da      	uxtb	r2, r3
    ac42:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ac46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac4a:	701a      	strb	r2, [r3, #0]
    ac4c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac54:	781b      	ldrb	r3, [r3, #0]
    ac56:	3301      	adds	r3, #1
    ac58:	b2da      	uxtb	r2, r3
    ac5a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac62:	701a      	strb	r2, [r3, #0]
    ac64:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac6c:	781b      	ldrb	r3, [r3, #0]
    ac6e:	2bff      	cmp	r3, #255	; 0xff
    ac70:	d105      	bne.n	ac7e <send_bat+0x282>
    ac72:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac7a:	2200      	movs	r2, #0
    ac7c:	701a      	strb	r2, [r3, #0]
    ac7e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ac82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac86:	781b      	ldrb	r3, [r3, #0]
    ac88:	461a      	mov	r2, r3
    ac8a:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    ac8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac92:	7859      	ldrb	r1, [r3, #1]
    ac94:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ac98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ac9c:	5499      	strb	r1, [r3, r2]
    ac9e:	4bd5      	ldr	r3, [pc, #852]	; (aff4 <send_bat+0x5f8>)
    aca0:	781a      	ldrb	r2, [r3, #0]
    aca2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    aca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acaa:	781b      	ldrb	r3, [r3, #0]
    acac:	4413      	add	r3, r2
    acae:	b2da      	uxtb	r2, r3
    acb0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    acb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acb8:	701a      	strb	r2, [r3, #0]
    acba:	f24c 634e 	movw	r3, #50766	; 0xc64e
    acbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acc2:	781a      	ldrb	r2, [r3, #0]
    acc4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    acc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    accc:	781b      	ldrb	r3, [r3, #0]
    acce:	4413      	add	r3, r2
    acd0:	b2da      	uxtb	r2, r3
    acd2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    acd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acda:	701a      	strb	r2, [r3, #0]
    acdc:	f24c 5349 	movw	r3, #50505	; 0xc549
    ace0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ace4:	781b      	ldrb	r3, [r3, #0]
    ace6:	3301      	adds	r3, #1
    ace8:	b2da      	uxtb	r2, r3
    acea:	f24c 5349 	movw	r3, #50505	; 0xc549
    acee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acf2:	701a      	strb	r2, [r3, #0]
    acf4:	f24c 5349 	movw	r3, #50505	; 0xc549
    acf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    acfc:	781b      	ldrb	r3, [r3, #0]
    acfe:	2bff      	cmp	r3, #255	; 0xff
    ad00:	d105      	bne.n	ad0e <send_bat+0x312>
    ad02:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad0a:	2200      	movs	r2, #0
    ad0c:	701a      	strb	r2, [r3, #0]
    ad0e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad16:	781b      	ldrb	r3, [r3, #0]
    ad18:	461a      	mov	r2, r3
    ad1a:	f24c 5335 	movw	r3, #50485	; 0xc535
    ad1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad22:	7819      	ldrb	r1, [r3, #0]
    ad24:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ad28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad2c:	5499      	strb	r1, [r3, r2]
    ad2e:	f24c 5335 	movw	r3, #50485	; 0xc535
    ad32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad36:	781a      	ldrb	r2, [r3, #0]
    ad38:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ad3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad40:	781b      	ldrb	r3, [r3, #0]
    ad42:	4413      	add	r3, r2
    ad44:	b2da      	uxtb	r2, r3
    ad46:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ad4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad4e:	701a      	strb	r2, [r3, #0]
    ad50:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ad54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad58:	781a      	ldrb	r2, [r3, #0]
    ad5a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ad5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad62:	781b      	ldrb	r3, [r3, #0]
    ad64:	4413      	add	r3, r2
    ad66:	b2da      	uxtb	r2, r3
    ad68:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ad6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad70:	701a      	strb	r2, [r3, #0]
    ad72:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad7a:	781b      	ldrb	r3, [r3, #0]
    ad7c:	3301      	adds	r3, #1
    ad7e:	b2da      	uxtb	r2, r3
    ad80:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad88:	701a      	strb	r2, [r3, #0]
    ad8a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ad92:	781b      	ldrb	r3, [r3, #0]
    ad94:	2bff      	cmp	r3, #255	; 0xff
    ad96:	d105      	bne.n	ada4 <send_bat+0x3a8>
    ad98:	f24c 5349 	movw	r3, #50505	; 0xc549
    ad9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ada0:	2200      	movs	r2, #0
    ada2:	701a      	strb	r2, [r3, #0]
    ada4:	f24c 5349 	movw	r3, #50505	; 0xc549
    ada8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adac:	781b      	ldrb	r3, [r3, #0]
    adae:	461a      	mov	r2, r3
    adb0:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
    adb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adb8:	7819      	ldrb	r1, [r3, #0]
    adba:	f24c 534c 	movw	r3, #50508	; 0xc54c
    adbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adc2:	5499      	strb	r1, [r3, r2]
    adc4:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
    adc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adcc:	781a      	ldrb	r2, [r3, #0]
    adce:	f24c 634d 	movw	r3, #50765	; 0xc64d
    add2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    add6:	781b      	ldrb	r3, [r3, #0]
    add8:	4413      	add	r3, r2
    adda:	b2da      	uxtb	r2, r3
    addc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ade0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ade4:	701a      	strb	r2, [r3, #0]
    ade6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    adea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adee:	781a      	ldrb	r2, [r3, #0]
    adf0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    adf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    adf8:	781b      	ldrb	r3, [r3, #0]
    adfa:	4413      	add	r3, r2
    adfc:	b2da      	uxtb	r2, r3
    adfe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ae02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae06:	701a      	strb	r2, [r3, #0]
    ae08:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae10:	781b      	ldrb	r3, [r3, #0]
    ae12:	3301      	adds	r3, #1
    ae14:	b2da      	uxtb	r2, r3
    ae16:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae1e:	701a      	strb	r2, [r3, #0]
    ae20:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae28:	781b      	ldrb	r3, [r3, #0]
    ae2a:	2bff      	cmp	r3, #255	; 0xff
    ae2c:	d105      	bne.n	ae3a <send_bat+0x43e>
    ae2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae36:	2200      	movs	r2, #0
    ae38:	701a      	strb	r2, [r3, #0]
    ae3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae42:	781b      	ldrb	r3, [r3, #0]
    ae44:	461a      	mov	r2, r3
    ae46:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
    ae4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae4e:	7859      	ldrb	r1, [r3, #1]
    ae50:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ae54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae58:	5499      	strb	r1, [r3, r2]
    ae5a:	4b67      	ldr	r3, [pc, #412]	; (aff8 <send_bat+0x5fc>)
    ae5c:	781a      	ldrb	r2, [r3, #0]
    ae5e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ae62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae66:	781b      	ldrb	r3, [r3, #0]
    ae68:	4413      	add	r3, r2
    ae6a:	b2da      	uxtb	r2, r3
    ae6c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ae70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae74:	701a      	strb	r2, [r3, #0]
    ae76:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ae7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae7e:	781a      	ldrb	r2, [r3, #0]
    ae80:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ae84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae88:	781b      	ldrb	r3, [r3, #0]
    ae8a:	4413      	add	r3, r2
    ae8c:	b2da      	uxtb	r2, r3
    ae8e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ae92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ae96:	701a      	strb	r2, [r3, #0]
    ae98:	f24c 5349 	movw	r3, #50505	; 0xc549
    ae9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aea0:	781b      	ldrb	r3, [r3, #0]
    aea2:	3301      	adds	r3, #1
    aea4:	b2da      	uxtb	r2, r3
    aea6:	f24c 5349 	movw	r3, #50505	; 0xc549
    aeaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeae:	701a      	strb	r2, [r3, #0]
    aeb0:	f24c 5349 	movw	r3, #50505	; 0xc549
    aeb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aeb8:	781b      	ldrb	r3, [r3, #0]
    aeba:	2bff      	cmp	r3, #255	; 0xff
    aebc:	d105      	bne.n	aeca <send_bat+0x4ce>
    aebe:	f24c 5349 	movw	r3, #50505	; 0xc549
    aec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aec6:	2200      	movs	r2, #0
    aec8:	701a      	strb	r2, [r3, #0]
    aeca:	f24c 5349 	movw	r3, #50505	; 0xc549
    aece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aed2:	781b      	ldrb	r3, [r3, #0]
    aed4:	461a      	mov	r2, r3
    aed6:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
    aeda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aede:	7819      	ldrb	r1, [r3, #0]
    aee0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    aee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aee8:	5499      	strb	r1, [r3, r2]
    aeea:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
    aeee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aef2:	781a      	ldrb	r2, [r3, #0]
    aef4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    aef8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    aefc:	781b      	ldrb	r3, [r3, #0]
    aefe:	4413      	add	r3, r2
    af00:	b2da      	uxtb	r2, r3
    af02:	f24c 634d 	movw	r3, #50765	; 0xc64d
    af06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af0a:	701a      	strb	r2, [r3, #0]
    af0c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    af10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af14:	781a      	ldrb	r2, [r3, #0]
    af16:	f24c 634d 	movw	r3, #50765	; 0xc64d
    af1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af1e:	781b      	ldrb	r3, [r3, #0]
    af20:	4413      	add	r3, r2
    af22:	b2da      	uxtb	r2, r3
    af24:	f24c 634e 	movw	r3, #50766	; 0xc64e
    af28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af2c:	701a      	strb	r2, [r3, #0]
    af2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    af32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af36:	781b      	ldrb	r3, [r3, #0]
    af38:	3301      	adds	r3, #1
    af3a:	b2da      	uxtb	r2, r3
    af3c:	f24c 5349 	movw	r3, #50505	; 0xc549
    af40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af44:	701a      	strb	r2, [r3, #0]
    af46:	f24c 5349 	movw	r3, #50505	; 0xc549
    af4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af4e:	781b      	ldrb	r3, [r3, #0]
    af50:	2bff      	cmp	r3, #255	; 0xff
    af52:	d105      	bne.n	af60 <send_bat+0x564>
    af54:	f24c 5349 	movw	r3, #50505	; 0xc549
    af58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af5c:	2200      	movs	r2, #0
    af5e:	701a      	strb	r2, [r3, #0]
    af60:	f24c 5349 	movw	r3, #50505	; 0xc549
    af64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af68:	781b      	ldrb	r3, [r3, #0]
    af6a:	461a      	mov	r2, r3
    af6c:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
    af70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af74:	7859      	ldrb	r1, [r3, #1]
    af76:	f24c 534c 	movw	r3, #50508	; 0xc54c
    af7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af7e:	5499      	strb	r1, [r3, r2]
    af80:	4b1e      	ldr	r3, [pc, #120]	; (affc <send_bat+0x600>)
    af82:	781a      	ldrb	r2, [r3, #0]
    af84:	f24c 634d 	movw	r3, #50765	; 0xc64d
    af88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af8c:	781b      	ldrb	r3, [r3, #0]
    af8e:	4413      	add	r3, r2
    af90:	b2da      	uxtb	r2, r3
    af92:	f24c 634d 	movw	r3, #50765	; 0xc64d
    af96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    af9a:	701a      	strb	r2, [r3, #0]
    af9c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    afa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afa4:	781a      	ldrb	r2, [r3, #0]
    afa6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    afaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afae:	781b      	ldrb	r3, [r3, #0]
    afb0:	4413      	add	r3, r2
    afb2:	b2da      	uxtb	r2, r3
    afb4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    afb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afbc:	701a      	strb	r2, [r3, #0]
    afbe:	f24c 5349 	movw	r3, #50505	; 0xc549
    afc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afc6:	781b      	ldrb	r3, [r3, #0]
    afc8:	3301      	adds	r3, #1
    afca:	b2da      	uxtb	r2, r3
    afcc:	f24c 5349 	movw	r3, #50505	; 0xc549
    afd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afd4:	701a      	strb	r2, [r3, #0]
    afd6:	f24c 5349 	movw	r3, #50505	; 0xc549
    afda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afde:	781b      	ldrb	r3, [r3, #0]
    afe0:	2bff      	cmp	r3, #255	; 0xff
    afe2:	d10d      	bne.n	b000 <send_bat+0x604>
    afe4:	f24c 5349 	movw	r3, #50505	; 0xc549
    afe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    afec:	2200      	movs	r2, #0
    afee:	701a      	strb	r2, [r3, #0]
    aff0:	e006      	b.n	b000 <send_bat+0x604>
    aff2:	bf00      	nop
    aff4:	2004cb2d 	.word	0x2004cb2d
    aff8:	2004c8b7 	.word	0x2004c8b7
    affc:	2004c8b5 	.word	0x2004c8b5
    b000:	f24c 5349 	movw	r3, #50505	; 0xc549
    b004:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b008:	781b      	ldrb	r3, [r3, #0]
    b00a:	461a      	mov	r2, r3
    b00c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b014:	7819      	ldrb	r1, [r3, #0]
    b016:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b01a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b01e:	5499      	strb	r1, [r3, r2]
    b020:	f24c 5349 	movw	r3, #50505	; 0xc549
    b024:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b028:	781b      	ldrb	r3, [r3, #0]
    b02a:	3301      	adds	r3, #1
    b02c:	b2da      	uxtb	r2, r3
    b02e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b036:	701a      	strb	r2, [r3, #0]
    b038:	f24c 5349 	movw	r3, #50505	; 0xc549
    b03c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b040:	781b      	ldrb	r3, [r3, #0]
    b042:	2bff      	cmp	r3, #255	; 0xff
    b044:	d105      	bne.n	b052 <send_bat+0x656>
    b046:	f24c 5349 	movw	r3, #50505	; 0xc549
    b04a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b04e:	2200      	movs	r2, #0
    b050:	701a      	strb	r2, [r3, #0]
    b052:	f24c 5349 	movw	r3, #50505	; 0xc549
    b056:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b05a:	781b      	ldrb	r3, [r3, #0]
    b05c:	461a      	mov	r2, r3
    b05e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b062:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b066:	7819      	ldrb	r1, [r3, #0]
    b068:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b06c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b070:	5499      	strb	r1, [r3, r2]
    b072:	f24c 5349 	movw	r3, #50505	; 0xc549
    b076:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b07a:	781b      	ldrb	r3, [r3, #0]
    b07c:	3301      	adds	r3, #1
    b07e:	b2da      	uxtb	r2, r3
    b080:	f24c 5349 	movw	r3, #50505	; 0xc549
    b084:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b088:	701a      	strb	r2, [r3, #0]
    b08a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b08e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b092:	781b      	ldrb	r3, [r3, #0]
    b094:	2bff      	cmp	r3, #255	; 0xff
    b096:	d105      	bne.n	b0a4 <send_bat+0x6a8>
    b098:	f24c 5349 	movw	r3, #50505	; 0xc549
    b09c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0a0:	2200      	movs	r2, #0
    b0a2:	701a      	strb	r2, [r3, #0]
    b0a4:	f242 0339 	movw	r3, #8249	; 0x2039
    b0a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b0ac:	781b      	ldrb	r3, [r3, #0]
    b0ae:	b2db      	uxtb	r3, r3
    b0b0:	f003 0310 	and.w	r3, r3, #16
    b0b4:	2b00      	cmp	r3, #0
    b0b6:	d15a      	bne.n	b16e <send_bat+0x772>
    b0b8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b0bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0c0:	781b      	ldrb	r3, [r3, #0]
    b0c2:	b2db      	uxtb	r3, r3
    b0c4:	461a      	mov	r2, r3
    b0c6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b0ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ce:	5c9a      	ldrb	r2, [r3, r2]
    b0d0:	f24c 634b 	movw	r3, #50763	; 0xc64b
    b0d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0d8:	701a      	strb	r2, [r3, #0]
    b0da:	f24c 634c 	movw	r3, #50764	; 0xc64c
    b0de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0e2:	2200      	movs	r2, #0
    b0e4:	701a      	strb	r2, [r3, #0]
    b0e6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b0ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0ee:	781b      	ldrb	r3, [r3, #0]
    b0f0:	b2db      	uxtb	r3, r3
    b0f2:	3301      	adds	r3, #1
    b0f4:	b2da      	uxtb	r2, r3
    b0f6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b0fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b0fe:	701a      	strb	r2, [r3, #0]
    b100:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b104:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b108:	781b      	ldrb	r3, [r3, #0]
    b10a:	b2db      	uxtb	r3, r3
    b10c:	2bff      	cmp	r3, #255	; 0xff
    b10e:	d105      	bne.n	b11c <send_bat+0x720>
    b110:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b118:	2200      	movs	r2, #0
    b11a:	701a      	strb	r2, [r3, #0]
    b11c:	f242 0338 	movw	r3, #8248	; 0x2038
    b120:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b124:	f242 0238 	movw	r2, #8248	; 0x2038
    b128:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b12c:	7812      	ldrb	r2, [r2, #0]
    b12e:	b2d2      	uxtb	r2, r2
    b130:	f042 0201 	orr.w	r2, r2, #1
    b134:	b2d2      	uxtb	r2, r2
    b136:	701a      	strb	r2, [r3, #0]
    b138:	f242 0339 	movw	r3, #8249	; 0x2039
    b13c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b140:	f242 0239 	movw	r2, #8249	; 0x2039
    b144:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b148:	7812      	ldrb	r2, [r2, #0]
    b14a:	b2d2      	uxtb	r2, r2
    b14c:	f042 0210 	orr.w	r2, r2, #16
    b150:	b2d2      	uxtb	r2, r2
    b152:	701a      	strb	r2, [r3, #0]
    b154:	e00b      	b.n	b16e <send_bat+0x772>
    b156:	f24c 5348 	movw	r3, #50504	; 0xc548
    b15a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b15e:	781b      	ldrb	r3, [r3, #0]
    b160:	3301      	adds	r3, #1
    b162:	b2da      	uxtb	r2, r3
    b164:	f24c 5348 	movw	r3, #50504	; 0xc548
    b168:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b16c:	701a      	strb	r2, [r3, #0]
}
    b16e:	46bd      	mov	sp, r7
    b170:	f85d 7b04 	ldr.w	r7, [sp], #4
    b174:	4770      	bx	lr
    b176:	bf00      	nop

0000b178 <send_climb>:
void send_climb(void){  //2000ms
    b178:	b480      	push	{r7}
    b17a:	af00      	add	r7, sp, #0
  if(!boot)
    b17c:	f240 533d 	movw	r3, #1341	; 0x53d
    b180:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b184:	781b      	ldrb	r3, [r3, #0]
    b186:	2b00      	cmp	r3, #0
    b188:	f040 8569 	bne.w	bc5e <send_climb+0xae6>
  { if (count % 20 == 18) PERIODIC_SEND_CLIMB_PID();}
    b18c:	f24c 5341 	movw	r3, #50497	; 0xc541
    b190:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b194:	781a      	ldrb	r2, [r3, #0]
    b196:	f64c 43cd 	movw	r3, #52429	; 0xcccd
    b19a:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
    b19e:	fba3 1302 	umull	r1, r3, r3, r2
    b1a2:	0919      	lsrs	r1, r3, #4
    b1a4:	460b      	mov	r3, r1
    b1a6:	009b      	lsls	r3, r3, #2
    b1a8:	440b      	add	r3, r1
    b1aa:	009b      	lsls	r3, r3, #2
    b1ac:	1ad3      	subs	r3, r2, r3
    b1ae:	b2db      	uxtb	r3, r3
    b1b0:	2b12      	cmp	r3, #18
    b1b2:	f040 8554 	bne.w	bc5e <send_climb+0xae6>
    b1b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    b1ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1be:	781a      	ldrb	r2, [r3, #0]
    b1c0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b1c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1c8:	781b      	ldrb	r3, [r3, #0]
    b1ca:	b2db      	uxtb	r3, r3
    b1cc:	429a      	cmp	r2, r3
    b1ce:	d313      	bcc.n	b1f8 <send_climb+0x80>
    b1d0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b1d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1d8:	781b      	ldrb	r3, [r3, #0]
    b1da:	b2db      	uxtb	r3, r3
    b1dc:	461a      	mov	r2, r3
    b1de:	f24c 5349 	movw	r3, #50505	; 0xc549
    b1e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b1e6:	781b      	ldrb	r3, [r3, #0]
    b1e8:	1ad3      	subs	r3, r2, r3
    b1ea:	33ff      	adds	r3, #255	; 0xff
    b1ec:	2b12      	cmp	r3, #18
    b1ee:	bfd4      	ite	le
    b1f0:	2300      	movle	r3, #0
    b1f2:	2301      	movgt	r3, #1
    b1f4:	b2db      	uxtb	r3, r3
    b1f6:	e011      	b.n	b21c <send_climb+0xa4>
    b1f8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    b1fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b200:	781b      	ldrb	r3, [r3, #0]
    b202:	b2db      	uxtb	r3, r3
    b204:	461a      	mov	r2, r3
    b206:	f24c 5349 	movw	r3, #50505	; 0xc549
    b20a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b20e:	781b      	ldrb	r3, [r3, #0]
    b210:	1ad3      	subs	r3, r2, r3
    b212:	2b12      	cmp	r3, #18
    b214:	bfd4      	ite	le
    b216:	2300      	movle	r3, #0
    b218:	2301      	movgt	r3, #1
    b21a:	b2db      	uxtb	r3, r3
    b21c:	2b00      	cmp	r3, #0
    b21e:	f000 8512 	beq.w	bc46 <send_climb+0xace>
    b222:	f24c 5349 	movw	r3, #50505	; 0xc549
    b226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b22a:	781b      	ldrb	r3, [r3, #0]
    b22c:	461a      	mov	r2, r3
    b22e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b232:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b236:	2105      	movs	r1, #5
    b238:	5499      	strb	r1, [r3, r2]
    b23a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b23e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b242:	781b      	ldrb	r3, [r3, #0]
    b244:	3301      	adds	r3, #1
    b246:	b2da      	uxtb	r2, r3
    b248:	f24c 5349 	movw	r3, #50505	; 0xc549
    b24c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b250:	701a      	strb	r2, [r3, #0]
    b252:	f24c 5349 	movw	r3, #50505	; 0xc549
    b256:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b25a:	781b      	ldrb	r3, [r3, #0]
    b25c:	2bff      	cmp	r3, #255	; 0xff
    b25e:	d105      	bne.n	b26c <send_climb+0xf4>
    b260:	f24c 5349 	movw	r3, #50505	; 0xc549
    b264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b268:	2200      	movs	r2, #0
    b26a:	701a      	strb	r2, [r3, #0]
    b26c:	f24c 5349 	movw	r3, #50505	; 0xc549
    b270:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b274:	781b      	ldrb	r3, [r3, #0]
    b276:	461a      	mov	r2, r3
    b278:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b27c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b280:	210e      	movs	r1, #14
    b282:	5499      	strb	r1, [r3, r2]
    b284:	f24c 5349 	movw	r3, #50505	; 0xc549
    b288:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b28c:	781b      	ldrb	r3, [r3, #0]
    b28e:	3301      	adds	r3, #1
    b290:	b2da      	uxtb	r2, r3
    b292:	f24c 5349 	movw	r3, #50505	; 0xc549
    b296:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b29a:	701a      	strb	r2, [r3, #0]
    b29c:	f24c 5349 	movw	r3, #50505	; 0xc549
    b2a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2a4:	781b      	ldrb	r3, [r3, #0]
    b2a6:	2bff      	cmp	r3, #255	; 0xff
    b2a8:	d105      	bne.n	b2b6 <send_climb+0x13e>
    b2aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    b2ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2b2:	2200      	movs	r2, #0
    b2b4:	701a      	strb	r2, [r3, #0]
    b2b6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b2ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2be:	220e      	movs	r2, #14
    b2c0:	701a      	strb	r2, [r3, #0]
    b2c2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b2c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2ca:	220e      	movs	r2, #14
    b2cc:	701a      	strb	r2, [r3, #0]
    b2ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    b2d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2d6:	781b      	ldrb	r3, [r3, #0]
    b2d8:	461a      	mov	r2, r3
    b2da:	f64c 037c 	movw	r3, #51324	; 0xc87c
    b2de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2e2:	7819      	ldrb	r1, [r3, #0]
    b2e4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b2e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2ec:	5499      	strb	r1, [r3, r2]
    b2ee:	f64c 037c 	movw	r3, #51324	; 0xc87c
    b2f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b2f6:	781a      	ldrb	r2, [r3, #0]
    b2f8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b2fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b300:	781b      	ldrb	r3, [r3, #0]
    b302:	4413      	add	r3, r2
    b304:	b2da      	uxtb	r2, r3
    b306:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b30a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b30e:	701a      	strb	r2, [r3, #0]
    b310:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b314:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b318:	781a      	ldrb	r2, [r3, #0]
    b31a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b31e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b322:	781b      	ldrb	r3, [r3, #0]
    b324:	4413      	add	r3, r2
    b326:	b2da      	uxtb	r2, r3
    b328:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b32c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b330:	701a      	strb	r2, [r3, #0]
    b332:	f24c 5349 	movw	r3, #50505	; 0xc549
    b336:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b33a:	781b      	ldrb	r3, [r3, #0]
    b33c:	3301      	adds	r3, #1
    b33e:	b2da      	uxtb	r2, r3
    b340:	f24c 5349 	movw	r3, #50505	; 0xc549
    b344:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b348:	701a      	strb	r2, [r3, #0]
    b34a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b34e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b352:	781b      	ldrb	r3, [r3, #0]
    b354:	2bff      	cmp	r3, #255	; 0xff
    b356:	d105      	bne.n	b364 <send_climb+0x1ec>
    b358:	f24c 5349 	movw	r3, #50505	; 0xc549
    b35c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b360:	2200      	movs	r2, #0
    b362:	701a      	strb	r2, [r3, #0]
    b364:	f24c 5349 	movw	r3, #50505	; 0xc549
    b368:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b36c:	781b      	ldrb	r3, [r3, #0]
    b36e:	461a      	mov	r2, r3
    b370:	f64c 037c 	movw	r3, #51324	; 0xc87c
    b374:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b378:	7859      	ldrb	r1, [r3, #1]
    b37a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b37e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b382:	5499      	strb	r1, [r3, r2]
    b384:	4bd3      	ldr	r3, [pc, #844]	; (b6d4 <send_climb+0x55c>)
    b386:	781a      	ldrb	r2, [r3, #0]
    b388:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b38c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b390:	781b      	ldrb	r3, [r3, #0]
    b392:	4413      	add	r3, r2
    b394:	b2da      	uxtb	r2, r3
    b396:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b39a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b39e:	701a      	strb	r2, [r3, #0]
    b3a0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b3a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3a8:	781a      	ldrb	r2, [r3, #0]
    b3aa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b3ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3b2:	781b      	ldrb	r3, [r3, #0]
    b3b4:	4413      	add	r3, r2
    b3b6:	b2da      	uxtb	r2, r3
    b3b8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b3bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3c0:	701a      	strb	r2, [r3, #0]
    b3c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3ca:	781b      	ldrb	r3, [r3, #0]
    b3cc:	3301      	adds	r3, #1
    b3ce:	b2da      	uxtb	r2, r3
    b3d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3d8:	701a      	strb	r2, [r3, #0]
    b3da:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3e2:	781b      	ldrb	r3, [r3, #0]
    b3e4:	2bff      	cmp	r3, #255	; 0xff
    b3e6:	d105      	bne.n	b3f4 <send_climb+0x27c>
    b3e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3f0:	2200      	movs	r2, #0
    b3f2:	701a      	strb	r2, [r3, #0]
    b3f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    b3f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b3fc:	781b      	ldrb	r3, [r3, #0]
    b3fe:	461a      	mov	r2, r3
    b400:	f64c 0390 	movw	r3, #51344	; 0xc890
    b404:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b408:	7819      	ldrb	r1, [r3, #0]
    b40a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b40e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b412:	5499      	strb	r1, [r3, r2]
    b414:	f64c 0390 	movw	r3, #51344	; 0xc890
    b418:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b41c:	781a      	ldrb	r2, [r3, #0]
    b41e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b422:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b426:	781b      	ldrb	r3, [r3, #0]
    b428:	4413      	add	r3, r2
    b42a:	b2da      	uxtb	r2, r3
    b42c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b434:	701a      	strb	r2, [r3, #0]
    b436:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b43a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b43e:	781a      	ldrb	r2, [r3, #0]
    b440:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b444:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b448:	781b      	ldrb	r3, [r3, #0]
    b44a:	4413      	add	r3, r2
    b44c:	b2da      	uxtb	r2, r3
    b44e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b452:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b456:	701a      	strb	r2, [r3, #0]
    b458:	f24c 5349 	movw	r3, #50505	; 0xc549
    b45c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b460:	781b      	ldrb	r3, [r3, #0]
    b462:	3301      	adds	r3, #1
    b464:	b2da      	uxtb	r2, r3
    b466:	f24c 5349 	movw	r3, #50505	; 0xc549
    b46a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b46e:	701a      	strb	r2, [r3, #0]
    b470:	f24c 5349 	movw	r3, #50505	; 0xc549
    b474:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b478:	781b      	ldrb	r3, [r3, #0]
    b47a:	2bff      	cmp	r3, #255	; 0xff
    b47c:	d105      	bne.n	b48a <send_climb+0x312>
    b47e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b482:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b486:	2200      	movs	r2, #0
    b488:	701a      	strb	r2, [r3, #0]
    b48a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b48e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b492:	781b      	ldrb	r3, [r3, #0]
    b494:	461a      	mov	r2, r3
    b496:	f64c 0390 	movw	r3, #51344	; 0xc890
    b49a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b49e:	7859      	ldrb	r1, [r3, #1]
    b4a0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b4a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4a8:	5499      	strb	r1, [r3, r2]
    b4aa:	4b8b      	ldr	r3, [pc, #556]	; (b6d8 <send_climb+0x560>)
    b4ac:	781a      	ldrb	r2, [r3, #0]
    b4ae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b4b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4b6:	781b      	ldrb	r3, [r3, #0]
    b4b8:	4413      	add	r3, r2
    b4ba:	b2da      	uxtb	r2, r3
    b4bc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b4c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4c4:	701a      	strb	r2, [r3, #0]
    b4c6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b4ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4ce:	781a      	ldrb	r2, [r3, #0]
    b4d0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b4d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4d8:	781b      	ldrb	r3, [r3, #0]
    b4da:	4413      	add	r3, r2
    b4dc:	b2da      	uxtb	r2, r3
    b4de:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b4e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4e6:	701a      	strb	r2, [r3, #0]
    b4e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b4ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4f0:	781b      	ldrb	r3, [r3, #0]
    b4f2:	3301      	adds	r3, #1
    b4f4:	b2da      	uxtb	r2, r3
    b4f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    b4fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b4fe:	701a      	strb	r2, [r3, #0]
    b500:	f24c 5349 	movw	r3, #50505	; 0xc549
    b504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b508:	781b      	ldrb	r3, [r3, #0]
    b50a:	2bff      	cmp	r3, #255	; 0xff
    b50c:	d105      	bne.n	b51a <send_climb+0x3a2>
    b50e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b516:	2200      	movs	r2, #0
    b518:	701a      	strb	r2, [r3, #0]
    b51a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b51e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b522:	781b      	ldrb	r3, [r3, #0]
    b524:	461a      	mov	r2, r3
    b526:	f64c 0390 	movw	r3, #51344	; 0xc890
    b52a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b52e:	7899      	ldrb	r1, [r3, #2]
    b530:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b538:	5499      	strb	r1, [r3, r2]
    b53a:	4b68      	ldr	r3, [pc, #416]	; (b6dc <send_climb+0x564>)
    b53c:	781a      	ldrb	r2, [r3, #0]
    b53e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b542:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b546:	781b      	ldrb	r3, [r3, #0]
    b548:	4413      	add	r3, r2
    b54a:	b2da      	uxtb	r2, r3
    b54c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b550:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b554:	701a      	strb	r2, [r3, #0]
    b556:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b55a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b55e:	781a      	ldrb	r2, [r3, #0]
    b560:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b568:	781b      	ldrb	r3, [r3, #0]
    b56a:	4413      	add	r3, r2
    b56c:	b2da      	uxtb	r2, r3
    b56e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b576:	701a      	strb	r2, [r3, #0]
    b578:	f24c 5349 	movw	r3, #50505	; 0xc549
    b57c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b580:	781b      	ldrb	r3, [r3, #0]
    b582:	3301      	adds	r3, #1
    b584:	b2da      	uxtb	r2, r3
    b586:	f24c 5349 	movw	r3, #50505	; 0xc549
    b58a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b58e:	701a      	strb	r2, [r3, #0]
    b590:	f24c 5349 	movw	r3, #50505	; 0xc549
    b594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b598:	781b      	ldrb	r3, [r3, #0]
    b59a:	2bff      	cmp	r3, #255	; 0xff
    b59c:	d105      	bne.n	b5aa <send_climb+0x432>
    b59e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b5a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5a6:	2200      	movs	r2, #0
    b5a8:	701a      	strb	r2, [r3, #0]
    b5aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    b5ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5b2:	781b      	ldrb	r3, [r3, #0]
    b5b4:	461a      	mov	r2, r3
    b5b6:	f64c 0390 	movw	r3, #51344	; 0xc890
    b5ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5be:	78d9      	ldrb	r1, [r3, #3]
    b5c0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b5c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5c8:	5499      	strb	r1, [r3, r2]
    b5ca:	4b45      	ldr	r3, [pc, #276]	; (b6e0 <send_climb+0x568>)
    b5cc:	781a      	ldrb	r2, [r3, #0]
    b5ce:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b5d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5d6:	781b      	ldrb	r3, [r3, #0]
    b5d8:	4413      	add	r3, r2
    b5da:	b2da      	uxtb	r2, r3
    b5dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b5e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5e4:	701a      	strb	r2, [r3, #0]
    b5e6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b5ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5ee:	781a      	ldrb	r2, [r3, #0]
    b5f0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b5f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b5f8:	781b      	ldrb	r3, [r3, #0]
    b5fa:	4413      	add	r3, r2
    b5fc:	b2da      	uxtb	r2, r3
    b5fe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b606:	701a      	strb	r2, [r3, #0]
    b608:	f24c 5349 	movw	r3, #50505	; 0xc549
    b60c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b610:	781b      	ldrb	r3, [r3, #0]
    b612:	3301      	adds	r3, #1
    b614:	b2da      	uxtb	r2, r3
    b616:	f24c 5349 	movw	r3, #50505	; 0xc549
    b61a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b61e:	701a      	strb	r2, [r3, #0]
    b620:	f24c 5349 	movw	r3, #50505	; 0xc549
    b624:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b628:	781b      	ldrb	r3, [r3, #0]
    b62a:	2bff      	cmp	r3, #255	; 0xff
    b62c:	d105      	bne.n	b63a <send_climb+0x4c2>
    b62e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b636:	2200      	movs	r2, #0
    b638:	701a      	strb	r2, [r3, #0]
    b63a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b63e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b642:	781b      	ldrb	r3, [r3, #0]
    b644:	461a      	mov	r2, r3
    b646:	f64c 0398 	movw	r3, #51352	; 0xc898
    b64a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b64e:	7819      	ldrb	r1, [r3, #0]
    b650:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b654:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b658:	5499      	strb	r1, [r3, r2]
    b65a:	f64c 0398 	movw	r3, #51352	; 0xc898
    b65e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b662:	781a      	ldrb	r2, [r3, #0]
    b664:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b668:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b66c:	781b      	ldrb	r3, [r3, #0]
    b66e:	4413      	add	r3, r2
    b670:	b2da      	uxtb	r2, r3
    b672:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b676:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b67a:	701a      	strb	r2, [r3, #0]
    b67c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b680:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b684:	781a      	ldrb	r2, [r3, #0]
    b686:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b68a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b68e:	781b      	ldrb	r3, [r3, #0]
    b690:	4413      	add	r3, r2
    b692:	b2da      	uxtb	r2, r3
    b694:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b698:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b69c:	701a      	strb	r2, [r3, #0]
    b69e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b6a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6a6:	781b      	ldrb	r3, [r3, #0]
    b6a8:	3301      	adds	r3, #1
    b6aa:	b2da      	uxtb	r2, r3
    b6ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    b6b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6b4:	701a      	strb	r2, [r3, #0]
    b6b6:	f24c 5349 	movw	r3, #50505	; 0xc549
    b6ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6be:	781b      	ldrb	r3, [r3, #0]
    b6c0:	2bff      	cmp	r3, #255	; 0xff
    b6c2:	d10f      	bne.n	b6e4 <send_climb+0x56c>
    b6c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    b6c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6cc:	2200      	movs	r2, #0
    b6ce:	701a      	strb	r2, [r3, #0]
    b6d0:	e008      	b.n	b6e4 <send_climb+0x56c>
    b6d2:	bf00      	nop
    b6d4:	2004c87d 	.word	0x2004c87d
    b6d8:	2004c891 	.word	0x2004c891
    b6dc:	2004c892 	.word	0x2004c892
    b6e0:	2004c893 	.word	0x2004c893
    b6e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    b6e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6ec:	781b      	ldrb	r3, [r3, #0]
    b6ee:	461a      	mov	r2, r3
    b6f0:	f64c 0398 	movw	r3, #51352	; 0xc898
    b6f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b6f8:	7859      	ldrb	r1, [r3, #1]
    b6fa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b6fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b702:	5499      	strb	r1, [r3, r2]
    b704:	4bd1      	ldr	r3, [pc, #836]	; (ba4c <send_climb+0x8d4>)
    b706:	781a      	ldrb	r2, [r3, #0]
    b708:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b70c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b710:	781b      	ldrb	r3, [r3, #0]
    b712:	4413      	add	r3, r2
    b714:	b2da      	uxtb	r2, r3
    b716:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b71a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b71e:	701a      	strb	r2, [r3, #0]
    b720:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b724:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b728:	781a      	ldrb	r2, [r3, #0]
    b72a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b72e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b732:	781b      	ldrb	r3, [r3, #0]
    b734:	4413      	add	r3, r2
    b736:	b2da      	uxtb	r2, r3
    b738:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b73c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b740:	701a      	strb	r2, [r3, #0]
    b742:	f24c 5349 	movw	r3, #50505	; 0xc549
    b746:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b74a:	781b      	ldrb	r3, [r3, #0]
    b74c:	3301      	adds	r3, #1
    b74e:	b2da      	uxtb	r2, r3
    b750:	f24c 5349 	movw	r3, #50505	; 0xc549
    b754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b758:	701a      	strb	r2, [r3, #0]
    b75a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b75e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b762:	781b      	ldrb	r3, [r3, #0]
    b764:	2bff      	cmp	r3, #255	; 0xff
    b766:	d105      	bne.n	b774 <send_climb+0x5fc>
    b768:	f24c 5349 	movw	r3, #50505	; 0xc549
    b76c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b770:	2200      	movs	r2, #0
    b772:	701a      	strb	r2, [r3, #0]
    b774:	f24c 5349 	movw	r3, #50505	; 0xc549
    b778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b77c:	781b      	ldrb	r3, [r3, #0]
    b77e:	461a      	mov	r2, r3
    b780:	f64c 0398 	movw	r3, #51352	; 0xc898
    b784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b788:	7899      	ldrb	r1, [r3, #2]
    b78a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b78e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b792:	5499      	strb	r1, [r3, r2]
    b794:	4bae      	ldr	r3, [pc, #696]	; (ba50 <send_climb+0x8d8>)
    b796:	781a      	ldrb	r2, [r3, #0]
    b798:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b79c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7a0:	781b      	ldrb	r3, [r3, #0]
    b7a2:	4413      	add	r3, r2
    b7a4:	b2da      	uxtb	r2, r3
    b7a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b7aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7ae:	701a      	strb	r2, [r3, #0]
    b7b0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b7b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7b8:	781a      	ldrb	r2, [r3, #0]
    b7ba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b7be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7c2:	781b      	ldrb	r3, [r3, #0]
    b7c4:	4413      	add	r3, r2
    b7c6:	b2da      	uxtb	r2, r3
    b7c8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b7cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7d0:	701a      	strb	r2, [r3, #0]
    b7d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    b7d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7da:	781b      	ldrb	r3, [r3, #0]
    b7dc:	3301      	adds	r3, #1
    b7de:	b2da      	uxtb	r2, r3
    b7e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b7e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7e8:	701a      	strb	r2, [r3, #0]
    b7ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    b7ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b7f2:	781b      	ldrb	r3, [r3, #0]
    b7f4:	2bff      	cmp	r3, #255	; 0xff
    b7f6:	d105      	bne.n	b804 <send_climb+0x68c>
    b7f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b7fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b800:	2200      	movs	r2, #0
    b802:	701a      	strb	r2, [r3, #0]
    b804:	f24c 5349 	movw	r3, #50505	; 0xc549
    b808:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b80c:	781b      	ldrb	r3, [r3, #0]
    b80e:	461a      	mov	r2, r3
    b810:	f64c 0398 	movw	r3, #51352	; 0xc898
    b814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b818:	78d9      	ldrb	r1, [r3, #3]
    b81a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b81e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b822:	5499      	strb	r1, [r3, r2]
    b824:	4b8b      	ldr	r3, [pc, #556]	; (ba54 <send_climb+0x8dc>)
    b826:	781a      	ldrb	r2, [r3, #0]
    b828:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b82c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b830:	781b      	ldrb	r3, [r3, #0]
    b832:	4413      	add	r3, r2
    b834:	b2da      	uxtb	r2, r3
    b836:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b83a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b83e:	701a      	strb	r2, [r3, #0]
    b840:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b844:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b848:	781a      	ldrb	r2, [r3, #0]
    b84a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b84e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b852:	781b      	ldrb	r3, [r3, #0]
    b854:	4413      	add	r3, r2
    b856:	b2da      	uxtb	r2, r3
    b858:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b85c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b860:	701a      	strb	r2, [r3, #0]
    b862:	f24c 5349 	movw	r3, #50505	; 0xc549
    b866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b86a:	781b      	ldrb	r3, [r3, #0]
    b86c:	3301      	adds	r3, #1
    b86e:	b2da      	uxtb	r2, r3
    b870:	f24c 5349 	movw	r3, #50505	; 0xc549
    b874:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b878:	701a      	strb	r2, [r3, #0]
    b87a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b87e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b882:	781b      	ldrb	r3, [r3, #0]
    b884:	2bff      	cmp	r3, #255	; 0xff
    b886:	d105      	bne.n	b894 <send_climb+0x71c>
    b888:	f24c 5349 	movw	r3, #50505	; 0xc549
    b88c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b890:	2200      	movs	r2, #0
    b892:	701a      	strb	r2, [r3, #0]
    b894:	f24c 5349 	movw	r3, #50505	; 0xc549
    b898:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b89c:	781b      	ldrb	r3, [r3, #0]
    b89e:	461a      	mov	r2, r3
    b8a0:	f648 2358 	movw	r3, #35416	; 0x8a58
    b8a4:	f2c0 0301 	movt	r3, #1
    b8a8:	7819      	ldrb	r1, [r3, #0]
    b8aa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b8ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8b2:	5499      	strb	r1, [r3, r2]
    b8b4:	f648 2358 	movw	r3, #35416	; 0x8a58
    b8b8:	f2c0 0301 	movt	r3, #1
    b8bc:	781a      	ldrb	r2, [r3, #0]
    b8be:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b8c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8c6:	781b      	ldrb	r3, [r3, #0]
    b8c8:	4413      	add	r3, r2
    b8ca:	b2da      	uxtb	r2, r3
    b8cc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b8d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8d4:	701a      	strb	r2, [r3, #0]
    b8d6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b8da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8de:	781a      	ldrb	r2, [r3, #0]
    b8e0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b8e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8e8:	781b      	ldrb	r3, [r3, #0]
    b8ea:	4413      	add	r3, r2
    b8ec:	b2da      	uxtb	r2, r3
    b8ee:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b8f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b8f6:	701a      	strb	r2, [r3, #0]
    b8f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    b8fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b900:	781b      	ldrb	r3, [r3, #0]
    b902:	3301      	adds	r3, #1
    b904:	b2da      	uxtb	r2, r3
    b906:	f24c 5349 	movw	r3, #50505	; 0xc549
    b90a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b90e:	701a      	strb	r2, [r3, #0]
    b910:	f24c 5349 	movw	r3, #50505	; 0xc549
    b914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b918:	781b      	ldrb	r3, [r3, #0]
    b91a:	2bff      	cmp	r3, #255	; 0xff
    b91c:	d105      	bne.n	b92a <send_climb+0x7b2>
    b91e:	f24c 5349 	movw	r3, #50505	; 0xc549
    b922:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b926:	2200      	movs	r2, #0
    b928:	701a      	strb	r2, [r3, #0]
    b92a:	f24c 5349 	movw	r3, #50505	; 0xc549
    b92e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b932:	781b      	ldrb	r3, [r3, #0]
    b934:	461a      	mov	r2, r3
    b936:	f648 2358 	movw	r3, #35416	; 0x8a58
    b93a:	f2c0 0301 	movt	r3, #1
    b93e:	7859      	ldrb	r1, [r3, #1]
    b940:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b944:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b948:	5499      	strb	r1, [r3, r2]
    b94a:	4b43      	ldr	r3, [pc, #268]	; (ba58 <send_climb+0x8e0>)
    b94c:	781a      	ldrb	r2, [r3, #0]
    b94e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b956:	781b      	ldrb	r3, [r3, #0]
    b958:	4413      	add	r3, r2
    b95a:	b2da      	uxtb	r2, r3
    b95c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b960:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b964:	701a      	strb	r2, [r3, #0]
    b966:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b96a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b96e:	781a      	ldrb	r2, [r3, #0]
    b970:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b974:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b978:	781b      	ldrb	r3, [r3, #0]
    b97a:	4413      	add	r3, r2
    b97c:	b2da      	uxtb	r2, r3
    b97e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b982:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b986:	701a      	strb	r2, [r3, #0]
    b988:	f24c 5349 	movw	r3, #50505	; 0xc549
    b98c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b990:	781b      	ldrb	r3, [r3, #0]
    b992:	3301      	adds	r3, #1
    b994:	b2da      	uxtb	r2, r3
    b996:	f24c 5349 	movw	r3, #50505	; 0xc549
    b99a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b99e:	701a      	strb	r2, [r3, #0]
    b9a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    b9a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9a8:	781b      	ldrb	r3, [r3, #0]
    b9aa:	2bff      	cmp	r3, #255	; 0xff
    b9ac:	d105      	bne.n	b9ba <send_climb+0x842>
    b9ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    b9b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9b6:	2200      	movs	r2, #0
    b9b8:	701a      	strb	r2, [r3, #0]
    b9ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    b9be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9c2:	781b      	ldrb	r3, [r3, #0]
    b9c4:	461a      	mov	r2, r3
    b9c6:	f648 2358 	movw	r3, #35416	; 0x8a58
    b9ca:	f2c0 0301 	movt	r3, #1
    b9ce:	7899      	ldrb	r1, [r3, #2]
    b9d0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    b9d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9d8:	5499      	strb	r1, [r3, r2]
    b9da:	4b20      	ldr	r3, [pc, #128]	; (ba5c <send_climb+0x8e4>)
    b9dc:	781a      	ldrb	r2, [r3, #0]
    b9de:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b9e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9e6:	781b      	ldrb	r3, [r3, #0]
    b9e8:	4413      	add	r3, r2
    b9ea:	b2da      	uxtb	r2, r3
    b9ec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    b9f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9f4:	701a      	strb	r2, [r3, #0]
    b9f6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    b9fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    b9fe:	781a      	ldrb	r2, [r3, #0]
    ba00:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ba04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba08:	781b      	ldrb	r3, [r3, #0]
    ba0a:	4413      	add	r3, r2
    ba0c:	b2da      	uxtb	r2, r3
    ba0e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ba12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba16:	701a      	strb	r2, [r3, #0]
    ba18:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba20:	781b      	ldrb	r3, [r3, #0]
    ba22:	3301      	adds	r3, #1
    ba24:	b2da      	uxtb	r2, r3
    ba26:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba2e:	701a      	strb	r2, [r3, #0]
    ba30:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba38:	781b      	ldrb	r3, [r3, #0]
    ba3a:	2bff      	cmp	r3, #255	; 0xff
    ba3c:	d110      	bne.n	ba60 <send_climb+0x8e8>
    ba3e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba46:	2200      	movs	r2, #0
    ba48:	701a      	strb	r2, [r3, #0]
    ba4a:	e009      	b.n	ba60 <send_climb+0x8e8>
    ba4c:	2004c899 	.word	0x2004c899
    ba50:	2004c89a 	.word	0x2004c89a
    ba54:	2004c89b 	.word	0x2004c89b
    ba58:	00018a59 	.word	0x00018a59
    ba5c:	00018a5a 	.word	0x00018a5a
    ba60:	f24c 5349 	movw	r3, #50505	; 0xc549
    ba64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba68:	781b      	ldrb	r3, [r3, #0]
    ba6a:	461a      	mov	r2, r3
    ba6c:	f648 2358 	movw	r3, #35416	; 0x8a58
    ba70:	f2c0 0301 	movt	r3, #1
    ba74:	78d9      	ldrb	r1, [r3, #3]
    ba76:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ba7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba7e:	5499      	strb	r1, [r3, r2]
    ba80:	4b79      	ldr	r3, [pc, #484]	; (bc68 <send_climb+0xaf0>)
    ba82:	781a      	ldrb	r2, [r3, #0]
    ba84:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ba88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba8c:	781b      	ldrb	r3, [r3, #0]
    ba8e:	4413      	add	r3, r2
    ba90:	b2da      	uxtb	r2, r3
    ba92:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ba96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ba9a:	701a      	strb	r2, [r3, #0]
    ba9c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    baa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baa4:	781a      	ldrb	r2, [r3, #0]
    baa6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    baaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baae:	781b      	ldrb	r3, [r3, #0]
    bab0:	4413      	add	r3, r2
    bab2:	b2da      	uxtb	r2, r3
    bab4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bab8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    babc:	701a      	strb	r2, [r3, #0]
    babe:	f24c 5349 	movw	r3, #50505	; 0xc549
    bac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bac6:	781b      	ldrb	r3, [r3, #0]
    bac8:	3301      	adds	r3, #1
    baca:	b2da      	uxtb	r2, r3
    bacc:	f24c 5349 	movw	r3, #50505	; 0xc549
    bad0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bad4:	701a      	strb	r2, [r3, #0]
    bad6:	f24c 5349 	movw	r3, #50505	; 0xc549
    bada:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bade:	781b      	ldrb	r3, [r3, #0]
    bae0:	2bff      	cmp	r3, #255	; 0xff
    bae2:	d105      	bne.n	baf0 <send_climb+0x978>
    bae4:	f24c 5349 	movw	r3, #50505	; 0xc549
    bae8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baec:	2200      	movs	r2, #0
    baee:	701a      	strb	r2, [r3, #0]
    baf0:	f24c 5349 	movw	r3, #50505	; 0xc549
    baf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    baf8:	781b      	ldrb	r3, [r3, #0]
    bafa:	461a      	mov	r2, r3
    bafc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bb00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb04:	7819      	ldrb	r1, [r3, #0]
    bb06:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bb0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb0e:	5499      	strb	r1, [r3, r2]
    bb10:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb18:	781b      	ldrb	r3, [r3, #0]
    bb1a:	3301      	adds	r3, #1
    bb1c:	b2da      	uxtb	r2, r3
    bb1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb26:	701a      	strb	r2, [r3, #0]
    bb28:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb30:	781b      	ldrb	r3, [r3, #0]
    bb32:	2bff      	cmp	r3, #255	; 0xff
    bb34:	d105      	bne.n	bb42 <send_climb+0x9ca>
    bb36:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb3e:	2200      	movs	r2, #0
    bb40:	701a      	strb	r2, [r3, #0]
    bb42:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb4a:	781b      	ldrb	r3, [r3, #0]
    bb4c:	461a      	mov	r2, r3
    bb4e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bb52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb56:	7819      	ldrb	r1, [r3, #0]
    bb58:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bb5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb60:	5499      	strb	r1, [r3, r2]
    bb62:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb6a:	781b      	ldrb	r3, [r3, #0]
    bb6c:	3301      	adds	r3, #1
    bb6e:	b2da      	uxtb	r2, r3
    bb70:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb78:	701a      	strb	r2, [r3, #0]
    bb7a:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb82:	781b      	ldrb	r3, [r3, #0]
    bb84:	2bff      	cmp	r3, #255	; 0xff
    bb86:	d105      	bne.n	bb94 <send_climb+0xa1c>
    bb88:	f24c 5349 	movw	r3, #50505	; 0xc549
    bb8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bb90:	2200      	movs	r2, #0
    bb92:	701a      	strb	r2, [r3, #0]
    bb94:	f242 0339 	movw	r3, #8249	; 0x2039
    bb98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bb9c:	781b      	ldrb	r3, [r3, #0]
    bb9e:	b2db      	uxtb	r3, r3
    bba0:	f003 0310 	and.w	r3, r3, #16
    bba4:	2b00      	cmp	r3, #0
    bba6:	d15a      	bne.n	bc5e <send_climb+0xae6>
    bba8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bbac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbb0:	781b      	ldrb	r3, [r3, #0]
    bbb2:	b2db      	uxtb	r3, r3
    bbb4:	461a      	mov	r2, r3
    bbb6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bbba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbbe:	5c9a      	ldrb	r2, [r3, r2]
    bbc0:	f24c 634b 	movw	r3, #50763	; 0xc64b
    bbc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbc8:	701a      	strb	r2, [r3, #0]
    bbca:	f24c 634c 	movw	r3, #50764	; 0xc64c
    bbce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbd2:	2200      	movs	r2, #0
    bbd4:	701a      	strb	r2, [r3, #0]
    bbd6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bbda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbde:	781b      	ldrb	r3, [r3, #0]
    bbe0:	b2db      	uxtb	r3, r3
    bbe2:	3301      	adds	r3, #1
    bbe4:	b2da      	uxtb	r2, r3
    bbe6:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bbea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbee:	701a      	strb	r2, [r3, #0]
    bbf0:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bbf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bbf8:	781b      	ldrb	r3, [r3, #0]
    bbfa:	b2db      	uxtb	r3, r3
    bbfc:	2bff      	cmp	r3, #255	; 0xff
    bbfe:	d105      	bne.n	bc0c <send_climb+0xa94>
    bc00:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bc04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc08:	2200      	movs	r2, #0
    bc0a:	701a      	strb	r2, [r3, #0]
    bc0c:	f242 0338 	movw	r3, #8248	; 0x2038
    bc10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc14:	f242 0238 	movw	r2, #8248	; 0x2038
    bc18:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bc1c:	7812      	ldrb	r2, [r2, #0]
    bc1e:	b2d2      	uxtb	r2, r2
    bc20:	f042 0201 	orr.w	r2, r2, #1
    bc24:	b2d2      	uxtb	r2, r2
    bc26:	701a      	strb	r2, [r3, #0]
    bc28:	f242 0339 	movw	r3, #8249	; 0x2039
    bc2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc30:	f242 0239 	movw	r2, #8249	; 0x2039
    bc34:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bc38:	7812      	ldrb	r2, [r2, #0]
    bc3a:	b2d2      	uxtb	r2, r2
    bc3c:	f042 0210 	orr.w	r2, r2, #16
    bc40:	b2d2      	uxtb	r2, r2
    bc42:	701a      	strb	r2, [r3, #0]
    bc44:	e00b      	b.n	bc5e <send_climb+0xae6>
    bc46:	f24c 5348 	movw	r3, #50504	; 0xc548
    bc4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc4e:	781b      	ldrb	r3, [r3, #0]
    bc50:	3301      	adds	r3, #1
    bc52:	b2da      	uxtb	r2, r3
    bc54:	f24c 5348 	movw	r3, #50504	; 0xc548
    bc58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc5c:	701a      	strb	r2, [r3, #0]
}
    bc5e:	46bd      	mov	sp, r7
    bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc64:	4770      	bx	lr
    bc66:	bf00      	nop
    bc68:	00018a5b 	.word	0x00018a5b

0000bc6c <send_mode>:
void send_mode(void){  //5000ms
    bc6c:	b480      	push	{r7}
    bc6e:	af00      	add	r7, sp, #0
  if(!boot)
    bc70:	f240 533d 	movw	r3, #1341	; 0x53d
    bc74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bc78:	781b      	ldrb	r3, [r3, #0]
    bc7a:	2b00      	cmp	r3, #0
    bc7c:	f040 82ce 	bne.w	c21c <send_mode+0x5b0>
  { if (count % 50 == 9) PERIODIC_SEND_PPRZ_MODE();}
    bc80:	f24c 5341 	movw	r3, #50497	; 0xc541
    bc84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bc88:	781a      	ldrb	r2, [r3, #0]
    bc8a:	f248 531f 	movw	r3, #34079	; 0x851f
    bc8e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    bc92:	fba3 1302 	umull	r1, r3, r3, r2
    bc96:	091b      	lsrs	r3, r3, #4
    bc98:	2132      	movs	r1, #50	; 0x32
    bc9a:	fb01 f303 	mul.w	r3, r1, r3
    bc9e:	1ad3      	subs	r3, r2, r3
    bca0:	b2db      	uxtb	r3, r3
    bca2:	2b09      	cmp	r3, #9
    bca4:	f040 82ba 	bne.w	c21c <send_mode+0x5b0>
    bca8:	f24c 5349 	movw	r3, #50505	; 0xc549
    bcac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcb0:	781a      	ldrb	r2, [r3, #0]
    bcb2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bcb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcba:	781b      	ldrb	r3, [r3, #0]
    bcbc:	b2db      	uxtb	r3, r3
    bcbe:	429a      	cmp	r2, r3
    bcc0:	d313      	bcc.n	bcea <send_mode+0x7e>
    bcc2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bcc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcca:	781b      	ldrb	r3, [r3, #0]
    bccc:	b2db      	uxtb	r3, r3
    bcce:	461a      	mov	r2, r3
    bcd0:	f24c 5349 	movw	r3, #50505	; 0xc549
    bcd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcd8:	781b      	ldrb	r3, [r3, #0]
    bcda:	1ad3      	subs	r3, r2, r3
    bcdc:	33ff      	adds	r3, #255	; 0xff
    bcde:	2b09      	cmp	r3, #9
    bce0:	bfd4      	ite	le
    bce2:	2300      	movle	r3, #0
    bce4:	2301      	movgt	r3, #1
    bce6:	b2db      	uxtb	r3, r3
    bce8:	e011      	b.n	bd0e <send_mode+0xa2>
    bcea:	f24c 534a 	movw	r3, #50506	; 0xc54a
    bcee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bcf2:	781b      	ldrb	r3, [r3, #0]
    bcf4:	b2db      	uxtb	r3, r3
    bcf6:	461a      	mov	r2, r3
    bcf8:	f24c 5349 	movw	r3, #50505	; 0xc549
    bcfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd00:	781b      	ldrb	r3, [r3, #0]
    bd02:	1ad3      	subs	r3, r2, r3
    bd04:	2b09      	cmp	r3, #9
    bd06:	bfd4      	ite	le
    bd08:	2300      	movle	r3, #0
    bd0a:	2301      	movgt	r3, #1
    bd0c:	b2db      	uxtb	r3, r3
    bd0e:	2b00      	cmp	r3, #0
    bd10:	f000 8278 	beq.w	c204 <send_mode+0x598>
    bd14:	f24c 5349 	movw	r3, #50505	; 0xc549
    bd18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd1c:	781b      	ldrb	r3, [r3, #0]
    bd1e:	461a      	mov	r2, r3
    bd20:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bd24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd28:	2105      	movs	r1, #5
    bd2a:	5499      	strb	r1, [r3, r2]
    bd2c:	f24c 5349 	movw	r3, #50505	; 0xc549
    bd30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd34:	781b      	ldrb	r3, [r3, #0]
    bd36:	3301      	adds	r3, #1
    bd38:	b2da      	uxtb	r2, r3
    bd3a:	f24c 5349 	movw	r3, #50505	; 0xc549
    bd3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd42:	701a      	strb	r2, [r3, #0]
    bd44:	f24c 5349 	movw	r3, #50505	; 0xc549
    bd48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd4c:	781b      	ldrb	r3, [r3, #0]
    bd4e:	2bff      	cmp	r3, #255	; 0xff
    bd50:	d105      	bne.n	bd5e <send_mode+0xf2>
    bd52:	f24c 5349 	movw	r3, #50505	; 0xc549
    bd56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd5a:	2200      	movs	r2, #0
    bd5c:	701a      	strb	r2, [r3, #0]
    bd5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    bd62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd66:	781b      	ldrb	r3, [r3, #0]
    bd68:	461a      	mov	r2, r3
    bd6a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bd6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd72:	210b      	movs	r1, #11
    bd74:	5499      	strb	r1, [r3, r2]
    bd76:	f24c 5349 	movw	r3, #50505	; 0xc549
    bd7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd7e:	781b      	ldrb	r3, [r3, #0]
    bd80:	3301      	adds	r3, #1
    bd82:	b2da      	uxtb	r2, r3
    bd84:	f24c 5349 	movw	r3, #50505	; 0xc549
    bd88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd8c:	701a      	strb	r2, [r3, #0]
    bd8e:	f24c 5349 	movw	r3, #50505	; 0xc549
    bd92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bd96:	781b      	ldrb	r3, [r3, #0]
    bd98:	2bff      	cmp	r3, #255	; 0xff
    bd9a:	d105      	bne.n	bda8 <send_mode+0x13c>
    bd9c:	f24c 5349 	movw	r3, #50505	; 0xc549
    bda0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bda4:	2200      	movs	r2, #0
    bda6:	701a      	strb	r2, [r3, #0]
    bda8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bdac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdb0:	220b      	movs	r2, #11
    bdb2:	701a      	strb	r2, [r3, #0]
    bdb4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bdb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdbc:	220b      	movs	r2, #11
    bdbe:	701a      	strb	r2, [r3, #0]
    bdc0:	f24c 5349 	movw	r3, #50505	; 0xc549
    bdc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdc8:	781b      	ldrb	r3, [r3, #0]
    bdca:	461a      	mov	r2, r3
    bdcc:	f24c 532c 	movw	r3, #50476	; 0xc52c
    bdd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdd4:	7819      	ldrb	r1, [r3, #0]
    bdd6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bdda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdde:	5499      	strb	r1, [r3, r2]
    bde0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bde4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bde8:	781a      	ldrb	r2, [r3, #0]
    bdea:	f24c 532c 	movw	r3, #50476	; 0xc52c
    bdee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bdf2:	781b      	ldrb	r3, [r3, #0]
    bdf4:	4413      	add	r3, r2
    bdf6:	b2da      	uxtb	r2, r3
    bdf8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bdfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be00:	701a      	strb	r2, [r3, #0]
    be02:	f24c 634e 	movw	r3, #50766	; 0xc64e
    be06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be0a:	781a      	ldrb	r2, [r3, #0]
    be0c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    be10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be14:	781b      	ldrb	r3, [r3, #0]
    be16:	4413      	add	r3, r2
    be18:	b2da      	uxtb	r2, r3
    be1a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    be1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be22:	701a      	strb	r2, [r3, #0]
    be24:	f24c 5349 	movw	r3, #50505	; 0xc549
    be28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be2c:	781b      	ldrb	r3, [r3, #0]
    be2e:	3301      	adds	r3, #1
    be30:	b2da      	uxtb	r2, r3
    be32:	f24c 5349 	movw	r3, #50505	; 0xc549
    be36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be3a:	701a      	strb	r2, [r3, #0]
    be3c:	f24c 5349 	movw	r3, #50505	; 0xc549
    be40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be44:	781b      	ldrb	r3, [r3, #0]
    be46:	2bff      	cmp	r3, #255	; 0xff
    be48:	d105      	bne.n	be56 <send_mode+0x1ea>
    be4a:	f24c 5349 	movw	r3, #50505	; 0xc549
    be4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be52:	2200      	movs	r2, #0
    be54:	701a      	strb	r2, [r3, #0]
    be56:	f24c 5349 	movw	r3, #50505	; 0xc549
    be5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be5e:	781b      	ldrb	r3, [r3, #0]
    be60:	461a      	mov	r2, r3
    be62:	f24c 532d 	movw	r3, #50477	; 0xc52d
    be66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be6a:	7819      	ldrb	r1, [r3, #0]
    be6c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    be70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be74:	5499      	strb	r1, [r3, r2]
    be76:	f24c 634d 	movw	r3, #50765	; 0xc64d
    be7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be7e:	781a      	ldrb	r2, [r3, #0]
    be80:	f24c 532d 	movw	r3, #50477	; 0xc52d
    be84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be88:	781b      	ldrb	r3, [r3, #0]
    be8a:	4413      	add	r3, r2
    be8c:	b2da      	uxtb	r2, r3
    be8e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    be92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    be96:	701a      	strb	r2, [r3, #0]
    be98:	f24c 634e 	movw	r3, #50766	; 0xc64e
    be9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bea0:	781a      	ldrb	r2, [r3, #0]
    bea2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beaa:	781b      	ldrb	r3, [r3, #0]
    beac:	4413      	add	r3, r2
    beae:	b2da      	uxtb	r2, r3
    beb0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    beb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beb8:	701a      	strb	r2, [r3, #0]
    beba:	f24c 5349 	movw	r3, #50505	; 0xc549
    bebe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bec2:	781b      	ldrb	r3, [r3, #0]
    bec4:	3301      	adds	r3, #1
    bec6:	b2da      	uxtb	r2, r3
    bec8:	f24c 5349 	movw	r3, #50505	; 0xc549
    becc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bed0:	701a      	strb	r2, [r3, #0]
    bed2:	f24c 5349 	movw	r3, #50505	; 0xc549
    bed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    beda:	781b      	ldrb	r3, [r3, #0]
    bedc:	2bff      	cmp	r3, #255	; 0xff
    bede:	d105      	bne.n	beec <send_mode+0x280>
    bee0:	f24c 5349 	movw	r3, #50505	; 0xc549
    bee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bee8:	2200      	movs	r2, #0
    beea:	701a      	strb	r2, [r3, #0]
    beec:	f24c 5349 	movw	r3, #50505	; 0xc549
    bef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bef4:	781b      	ldrb	r3, [r3, #0]
    bef6:	461a      	mov	r2, r3
    bef8:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    befc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf00:	7819      	ldrb	r1, [r3, #0]
    bf02:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bf06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf0a:	5499      	strb	r1, [r3, r2]
    bf0c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bf10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf14:	781a      	ldrb	r2, [r3, #0]
    bf16:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    bf1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf1e:	781b      	ldrb	r3, [r3, #0]
    bf20:	4413      	add	r3, r2
    bf22:	b2da      	uxtb	r2, r3
    bf24:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bf28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf2c:	701a      	strb	r2, [r3, #0]
    bf2e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bf32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf36:	781a      	ldrb	r2, [r3, #0]
    bf38:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bf3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf40:	781b      	ldrb	r3, [r3, #0]
    bf42:	4413      	add	r3, r2
    bf44:	b2da      	uxtb	r2, r3
    bf46:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bf4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf4e:	701a      	strb	r2, [r3, #0]
    bf50:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf58:	781b      	ldrb	r3, [r3, #0]
    bf5a:	3301      	adds	r3, #1
    bf5c:	b2da      	uxtb	r2, r3
    bf5e:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf66:	701a      	strb	r2, [r3, #0]
    bf68:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf70:	781b      	ldrb	r3, [r3, #0]
    bf72:	2bff      	cmp	r3, #255	; 0xff
    bf74:	d105      	bne.n	bf82 <send_mode+0x316>
    bf76:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf7e:	2200      	movs	r2, #0
    bf80:	701a      	strb	r2, [r3, #0]
    bf82:	f24c 5349 	movw	r3, #50505	; 0xc549
    bf86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf8a:	781b      	ldrb	r3, [r3, #0]
    bf8c:	461a      	mov	r2, r3
    bf8e:	f24c 5333 	movw	r3, #50483	; 0xc533
    bf92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bf96:	7819      	ldrb	r1, [r3, #0]
    bf98:	f24c 534c 	movw	r3, #50508	; 0xc54c
    bf9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfa0:	5499      	strb	r1, [r3, r2]
    bfa2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bfa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfaa:	781a      	ldrb	r2, [r3, #0]
    bfac:	f24c 5333 	movw	r3, #50483	; 0xc533
    bfb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfb4:	781b      	ldrb	r3, [r3, #0]
    bfb6:	4413      	add	r3, r2
    bfb8:	b2da      	uxtb	r2, r3
    bfba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bfbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfc2:	701a      	strb	r2, [r3, #0]
    bfc4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bfc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfcc:	781a      	ldrb	r2, [r3, #0]
    bfce:	f24c 634d 	movw	r3, #50765	; 0xc64d
    bfd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfd6:	781b      	ldrb	r3, [r3, #0]
    bfd8:	4413      	add	r3, r2
    bfda:	b2da      	uxtb	r2, r3
    bfdc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    bfe0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfe4:	701a      	strb	r2, [r3, #0]
    bfe6:	f24c 5349 	movw	r3, #50505	; 0xc549
    bfea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bfee:	781b      	ldrb	r3, [r3, #0]
    bff0:	3301      	adds	r3, #1
    bff2:	b2da      	uxtb	r2, r3
    bff4:	f24c 5349 	movw	r3, #50505	; 0xc549
    bff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    bffc:	701a      	strb	r2, [r3, #0]
    bffe:	f24c 5349 	movw	r3, #50505	; 0xc549
    c002:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c006:	781b      	ldrb	r3, [r3, #0]
    c008:	2bff      	cmp	r3, #255	; 0xff
    c00a:	d105      	bne.n	c018 <send_mode+0x3ac>
    c00c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c014:	2200      	movs	r2, #0
    c016:	701a      	strb	r2, [r3, #0]
    c018:	f24c 5349 	movw	r3, #50505	; 0xc549
    c01c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c020:	781b      	ldrb	r3, [r3, #0]
    c022:	461a      	mov	r2, r3
    c024:	f240 533c 	movw	r3, #1340	; 0x53c
    c028:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c02c:	7819      	ldrb	r1, [r3, #0]
    c02e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c032:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c036:	5499      	strb	r1, [r3, r2]
    c038:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c03c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c040:	781a      	ldrb	r2, [r3, #0]
    c042:	f240 533c 	movw	r3, #1340	; 0x53c
    c046:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c04a:	781b      	ldrb	r3, [r3, #0]
    c04c:	4413      	add	r3, r2
    c04e:	b2da      	uxtb	r2, r3
    c050:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c054:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c058:	701a      	strb	r2, [r3, #0]
    c05a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c05e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c062:	781a      	ldrb	r2, [r3, #0]
    c064:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c068:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c06c:	781b      	ldrb	r3, [r3, #0]
    c06e:	4413      	add	r3, r2
    c070:	b2da      	uxtb	r2, r3
    c072:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c076:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c07a:	701a      	strb	r2, [r3, #0]
    c07c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c080:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c084:	781b      	ldrb	r3, [r3, #0]
    c086:	3301      	adds	r3, #1
    c088:	b2da      	uxtb	r2, r3
    c08a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c08e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c092:	701a      	strb	r2, [r3, #0]
    c094:	f24c 5349 	movw	r3, #50505	; 0xc549
    c098:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c09c:	781b      	ldrb	r3, [r3, #0]
    c09e:	2bff      	cmp	r3, #255	; 0xff
    c0a0:	d105      	bne.n	c0ae <send_mode+0x442>
    c0a2:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0aa:	2200      	movs	r2, #0
    c0ac:	701a      	strb	r2, [r3, #0]
    c0ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0b6:	781b      	ldrb	r3, [r3, #0]
    c0b8:	461a      	mov	r2, r3
    c0ba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c0be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0c2:	7819      	ldrb	r1, [r3, #0]
    c0c4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c0c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0cc:	5499      	strb	r1, [r3, r2]
    c0ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0d6:	781b      	ldrb	r3, [r3, #0]
    c0d8:	3301      	adds	r3, #1
    c0da:	b2da      	uxtb	r2, r3
    c0dc:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0e4:	701a      	strb	r2, [r3, #0]
    c0e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0ee:	781b      	ldrb	r3, [r3, #0]
    c0f0:	2bff      	cmp	r3, #255	; 0xff
    c0f2:	d105      	bne.n	c100 <send_mode+0x494>
    c0f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    c0f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c0fc:	2200      	movs	r2, #0
    c0fe:	701a      	strb	r2, [r3, #0]
    c100:	f24c 5349 	movw	r3, #50505	; 0xc549
    c104:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c108:	781b      	ldrb	r3, [r3, #0]
    c10a:	461a      	mov	r2, r3
    c10c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c110:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c114:	7819      	ldrb	r1, [r3, #0]
    c116:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c11a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c11e:	5499      	strb	r1, [r3, r2]
    c120:	f24c 5349 	movw	r3, #50505	; 0xc549
    c124:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c128:	781b      	ldrb	r3, [r3, #0]
    c12a:	3301      	adds	r3, #1
    c12c:	b2da      	uxtb	r2, r3
    c12e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c132:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c136:	701a      	strb	r2, [r3, #0]
    c138:	f24c 5349 	movw	r3, #50505	; 0xc549
    c13c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c140:	781b      	ldrb	r3, [r3, #0]
    c142:	2bff      	cmp	r3, #255	; 0xff
    c144:	d105      	bne.n	c152 <send_mode+0x4e6>
    c146:	f24c 5349 	movw	r3, #50505	; 0xc549
    c14a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c14e:	2200      	movs	r2, #0
    c150:	701a      	strb	r2, [r3, #0]
    c152:	f242 0339 	movw	r3, #8249	; 0x2039
    c156:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c15a:	781b      	ldrb	r3, [r3, #0]
    c15c:	b2db      	uxtb	r3, r3
    c15e:	f003 0310 	and.w	r3, r3, #16
    c162:	2b00      	cmp	r3, #0
    c164:	d15a      	bne.n	c21c <send_mode+0x5b0>
    c166:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c16a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c16e:	781b      	ldrb	r3, [r3, #0]
    c170:	b2db      	uxtb	r3, r3
    c172:	461a      	mov	r2, r3
    c174:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c17c:	5c9a      	ldrb	r2, [r3, r2]
    c17e:	f24c 634b 	movw	r3, #50763	; 0xc64b
    c182:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c186:	701a      	strb	r2, [r3, #0]
    c188:	f24c 634c 	movw	r3, #50764	; 0xc64c
    c18c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c190:	2200      	movs	r2, #0
    c192:	701a      	strb	r2, [r3, #0]
    c194:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c198:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c19c:	781b      	ldrb	r3, [r3, #0]
    c19e:	b2db      	uxtb	r3, r3
    c1a0:	3301      	adds	r3, #1
    c1a2:	b2da      	uxtb	r2, r3
    c1a4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c1a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1ac:	701a      	strb	r2, [r3, #0]
    c1ae:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c1b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1b6:	781b      	ldrb	r3, [r3, #0]
    c1b8:	b2db      	uxtb	r3, r3
    c1ba:	2bff      	cmp	r3, #255	; 0xff
    c1bc:	d105      	bne.n	c1ca <send_mode+0x55e>
    c1be:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c1c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c1c6:	2200      	movs	r2, #0
    c1c8:	701a      	strb	r2, [r3, #0]
    c1ca:	f242 0338 	movw	r3, #8248	; 0x2038
    c1ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1d2:	f242 0238 	movw	r2, #8248	; 0x2038
    c1d6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c1da:	7812      	ldrb	r2, [r2, #0]
    c1dc:	b2d2      	uxtb	r2, r2
    c1de:	f042 0201 	orr.w	r2, r2, #1
    c1e2:	b2d2      	uxtb	r2, r2
    c1e4:	701a      	strb	r2, [r3, #0]
    c1e6:	f242 0339 	movw	r3, #8249	; 0x2039
    c1ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c1ee:	f242 0239 	movw	r2, #8249	; 0x2039
    c1f2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c1f6:	7812      	ldrb	r2, [r2, #0]
    c1f8:	b2d2      	uxtb	r2, r2
    c1fa:	f042 0210 	orr.w	r2, r2, #16
    c1fe:	b2d2      	uxtb	r2, r2
    c200:	701a      	strb	r2, [r3, #0]
    c202:	e00b      	b.n	c21c <send_mode+0x5b0>
    c204:	f24c 5348 	movw	r3, #50504	; 0xc548
    c208:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c20c:	781b      	ldrb	r3, [r3, #0]
    c20e:	3301      	adds	r3, #1
    c210:	b2da      	uxtb	r2, r3
    c212:	f24c 5348 	movw	r3, #50504	; 0xc548
    c216:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c21a:	701a      	strb	r2, [r3, #0]
}
    c21c:	46bd      	mov	sp, r7
    c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c222:	4770      	bx	lr

0000c224 <send_debug>:
void send_debug(void){  //5000ms
    c224:	b480      	push	{r7}
    c226:	af00      	add	r7, sp, #0
  if(!boot)
    c228:	f240 533d 	movw	r3, #1341	; 0x53d
    c22c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c230:	781b      	ldrb	r3, [r3, #0]
    c232:	2b00      	cmp	r3, #0
    c234:	f040 82cf 	bne.w	c7d6 <send_debug+0x5b2>
  { if (count % 50 == 29) PERIODIC_SEND_DEBUG();}
    c238:	f24c 5341 	movw	r3, #50497	; 0xc541
    c23c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c240:	781a      	ldrb	r2, [r3, #0]
    c242:	f248 531f 	movw	r3, #34079	; 0x851f
    c246:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c24a:	fba3 1302 	umull	r1, r3, r3, r2
    c24e:	091b      	lsrs	r3, r3, #4
    c250:	2132      	movs	r1, #50	; 0x32
    c252:	fb01 f303 	mul.w	r3, r1, r3
    c256:	1ad3      	subs	r3, r2, r3
    c258:	b2db      	uxtb	r3, r3
    c25a:	2b1d      	cmp	r3, #29
    c25c:	f040 82bb 	bne.w	c7d6 <send_debug+0x5b2>
    c260:	f24c 5349 	movw	r3, #50505	; 0xc549
    c264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c268:	781a      	ldrb	r2, [r3, #0]
    c26a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c26e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c272:	781b      	ldrb	r3, [r3, #0]
    c274:	b2db      	uxtb	r3, r3
    c276:	429a      	cmp	r2, r3
    c278:	d313      	bcc.n	c2a2 <send_debug+0x7e>
    c27a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c27e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c282:	781b      	ldrb	r3, [r3, #0]
    c284:	b2db      	uxtb	r3, r3
    c286:	461a      	mov	r2, r3
    c288:	f24c 5349 	movw	r3, #50505	; 0xc549
    c28c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c290:	781b      	ldrb	r3, [r3, #0]
    c292:	1ad3      	subs	r3, r2, r3
    c294:	33ff      	adds	r3, #255	; 0xff
    c296:	2b09      	cmp	r3, #9
    c298:	bfd4      	ite	le
    c29a:	2300      	movle	r3, #0
    c29c:	2301      	movgt	r3, #1
    c29e:	b2db      	uxtb	r3, r3
    c2a0:	e011      	b.n	c2c6 <send_debug+0xa2>
    c2a2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c2a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2aa:	781b      	ldrb	r3, [r3, #0]
    c2ac:	b2db      	uxtb	r3, r3
    c2ae:	461a      	mov	r2, r3
    c2b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c2b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2b8:	781b      	ldrb	r3, [r3, #0]
    c2ba:	1ad3      	subs	r3, r2, r3
    c2bc:	2b09      	cmp	r3, #9
    c2be:	bfd4      	ite	le
    c2c0:	2300      	movle	r3, #0
    c2c2:	2301      	movgt	r3, #1
    c2c4:	b2db      	uxtb	r3, r3
    c2c6:	2b00      	cmp	r3, #0
    c2c8:	f000 8279 	beq.w	c7be <send_debug+0x59a>
    c2cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    c2d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2d4:	781b      	ldrb	r3, [r3, #0]
    c2d6:	461a      	mov	r2, r3
    c2d8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c2dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2e0:	2105      	movs	r1, #5
    c2e2:	5499      	strb	r1, [r3, r2]
    c2e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    c2e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2ec:	781b      	ldrb	r3, [r3, #0]
    c2ee:	3301      	adds	r3, #1
    c2f0:	b2da      	uxtb	r2, r3
    c2f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    c2f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c2fa:	701a      	strb	r2, [r3, #0]
    c2fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    c300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c304:	781b      	ldrb	r3, [r3, #0]
    c306:	2bff      	cmp	r3, #255	; 0xff
    c308:	d105      	bne.n	c316 <send_debug+0xf2>
    c30a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c30e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c312:	2200      	movs	r2, #0
    c314:	701a      	strb	r2, [r3, #0]
    c316:	f24c 5349 	movw	r3, #50505	; 0xc549
    c31a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c31e:	781b      	ldrb	r3, [r3, #0]
    c320:	461a      	mov	r2, r3
    c322:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c326:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c32a:	210d      	movs	r1, #13
    c32c:	5499      	strb	r1, [r3, r2]
    c32e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c336:	781b      	ldrb	r3, [r3, #0]
    c338:	3301      	adds	r3, #1
    c33a:	b2da      	uxtb	r2, r3
    c33c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c340:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c344:	701a      	strb	r2, [r3, #0]
    c346:	f24c 5349 	movw	r3, #50505	; 0xc549
    c34a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c34e:	781b      	ldrb	r3, [r3, #0]
    c350:	2bff      	cmp	r3, #255	; 0xff
    c352:	d105      	bne.n	c360 <send_debug+0x13c>
    c354:	f24c 5349 	movw	r3, #50505	; 0xc549
    c358:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c35c:	2200      	movs	r2, #0
    c35e:	701a      	strb	r2, [r3, #0]
    c360:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c368:	220d      	movs	r2, #13
    c36a:	701a      	strb	r2, [r3, #0]
    c36c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c370:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c374:	220d      	movs	r2, #13
    c376:	701a      	strb	r2, [r3, #0]
    c378:	f24c 5349 	movw	r3, #50505	; 0xc549
    c37c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c380:	781b      	ldrb	r3, [r3, #0]
    c382:	461a      	mov	r2, r3
    c384:	f24c 637f 	movw	r3, #50815	; 0xc67f
    c388:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c38c:	781b      	ldrb	r3, [r3, #0]
    c38e:	b2d9      	uxtb	r1, r3
    c390:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c394:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c398:	5499      	strb	r1, [r3, r2]
    c39a:	f24c 637f 	movw	r3, #50815	; 0xc67f
    c39e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3a2:	781a      	ldrb	r2, [r3, #0]
    c3a4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c3a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3ac:	781b      	ldrb	r3, [r3, #0]
    c3ae:	4413      	add	r3, r2
    c3b0:	b2da      	uxtb	r2, r3
    c3b2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c3b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3ba:	701a      	strb	r2, [r3, #0]
    c3bc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c3c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3c4:	781a      	ldrb	r2, [r3, #0]
    c3c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c3ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3ce:	781b      	ldrb	r3, [r3, #0]
    c3d0:	4413      	add	r3, r2
    c3d2:	b2da      	uxtb	r2, r3
    c3d4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c3d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3dc:	701a      	strb	r2, [r3, #0]
    c3de:	f24c 5349 	movw	r3, #50505	; 0xc549
    c3e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3e6:	781b      	ldrb	r3, [r3, #0]
    c3e8:	3301      	adds	r3, #1
    c3ea:	b2da      	uxtb	r2, r3
    c3ec:	f24c 5349 	movw	r3, #50505	; 0xc549
    c3f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3f4:	701a      	strb	r2, [r3, #0]
    c3f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    c3fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c3fe:	781b      	ldrb	r3, [r3, #0]
    c400:	2bff      	cmp	r3, #255	; 0xff
    c402:	d105      	bne.n	c410 <send_debug+0x1ec>
    c404:	f24c 5349 	movw	r3, #50505	; 0xc549
    c408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c40c:	2200      	movs	r2, #0
    c40e:	701a      	strb	r2, [r3, #0]
    c410:	f24c 5349 	movw	r3, #50505	; 0xc549
    c414:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c418:	781b      	ldrb	r3, [r3, #0]
    c41a:	461a      	mov	r2, r3
    c41c:	f24c 6380 	movw	r3, #50816	; 0xc680
    c420:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c424:	7819      	ldrb	r1, [r3, #0]
    c426:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c42a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c42e:	5499      	strb	r1, [r3, r2]
    c430:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c434:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c438:	781a      	ldrb	r2, [r3, #0]
    c43a:	f24c 6380 	movw	r3, #50816	; 0xc680
    c43e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c442:	781b      	ldrb	r3, [r3, #0]
    c444:	4413      	add	r3, r2
    c446:	b2da      	uxtb	r2, r3
    c448:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c44c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c450:	701a      	strb	r2, [r3, #0]
    c452:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c456:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c45a:	781a      	ldrb	r2, [r3, #0]
    c45c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c460:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c464:	781b      	ldrb	r3, [r3, #0]
    c466:	4413      	add	r3, r2
    c468:	b2da      	uxtb	r2, r3
    c46a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c46e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c472:	701a      	strb	r2, [r3, #0]
    c474:	f24c 5349 	movw	r3, #50505	; 0xc549
    c478:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c47c:	781b      	ldrb	r3, [r3, #0]
    c47e:	3301      	adds	r3, #1
    c480:	b2da      	uxtb	r2, r3
    c482:	f24c 5349 	movw	r3, #50505	; 0xc549
    c486:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c48a:	701a      	strb	r2, [r3, #0]
    c48c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c490:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c494:	781b      	ldrb	r3, [r3, #0]
    c496:	2bff      	cmp	r3, #255	; 0xff
    c498:	d105      	bne.n	c4a6 <send_debug+0x282>
    c49a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c49e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4a2:	2200      	movs	r2, #0
    c4a4:	701a      	strb	r2, [r3, #0]
    c4a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    c4aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ae:	781b      	ldrb	r3, [r3, #0]
    c4b0:	461a      	mov	r2, r3
    c4b2:	f24c 5348 	movw	r3, #50504	; 0xc548
    c4b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ba:	7819      	ldrb	r1, [r3, #0]
    c4bc:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c4c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4c4:	5499      	strb	r1, [r3, r2]
    c4c6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c4ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4ce:	781a      	ldrb	r2, [r3, #0]
    c4d0:	f24c 5348 	movw	r3, #50504	; 0xc548
    c4d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4d8:	781b      	ldrb	r3, [r3, #0]
    c4da:	4413      	add	r3, r2
    c4dc:	b2da      	uxtb	r2, r3
    c4de:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c4e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4e6:	701a      	strb	r2, [r3, #0]
    c4e8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c4ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4f0:	781a      	ldrb	r2, [r3, #0]
    c4f2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c4f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c4fa:	781b      	ldrb	r3, [r3, #0]
    c4fc:	4413      	add	r3, r2
    c4fe:	b2da      	uxtb	r2, r3
    c500:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c504:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c508:	701a      	strb	r2, [r3, #0]
    c50a:	f24c 5349 	movw	r3, #50505	; 0xc549
    c50e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c512:	781b      	ldrb	r3, [r3, #0]
    c514:	3301      	adds	r3, #1
    c516:	b2da      	uxtb	r2, r3
    c518:	f24c 5349 	movw	r3, #50505	; 0xc549
    c51c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c520:	701a      	strb	r2, [r3, #0]
    c522:	f24c 5349 	movw	r3, #50505	; 0xc549
    c526:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c52a:	781b      	ldrb	r3, [r3, #0]
    c52c:	2bff      	cmp	r3, #255	; 0xff
    c52e:	d105      	bne.n	c53c <send_debug+0x318>
    c530:	f24c 5349 	movw	r3, #50505	; 0xc549
    c534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c538:	2200      	movs	r2, #0
    c53a:	701a      	strb	r2, [r3, #0]
    c53c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c540:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c544:	781b      	ldrb	r3, [r3, #0]
    c546:	461a      	mov	r2, r3
    c548:	f24c 73e7 	movw	r3, #51175	; 0xc7e7
    c54c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c550:	7819      	ldrb	r1, [r3, #0]
    c552:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c55a:	5499      	strb	r1, [r3, r2]
    c55c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c560:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c564:	781a      	ldrb	r2, [r3, #0]
    c566:	f24c 73e7 	movw	r3, #51175	; 0xc7e7
    c56a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c56e:	781b      	ldrb	r3, [r3, #0]
    c570:	4413      	add	r3, r2
    c572:	b2da      	uxtb	r2, r3
    c574:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c578:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c57c:	701a      	strb	r2, [r3, #0]
    c57e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c582:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c586:	781a      	ldrb	r2, [r3, #0]
    c588:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c58c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c590:	781b      	ldrb	r3, [r3, #0]
    c592:	4413      	add	r3, r2
    c594:	b2da      	uxtb	r2, r3
    c596:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c59a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c59e:	701a      	strb	r2, [r3, #0]
    c5a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c5a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5a8:	781b      	ldrb	r3, [r3, #0]
    c5aa:	3301      	adds	r3, #1
    c5ac:	b2da      	uxtb	r2, r3
    c5ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    c5b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5b6:	701a      	strb	r2, [r3, #0]
    c5b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c5bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5c0:	781b      	ldrb	r3, [r3, #0]
    c5c2:	2bff      	cmp	r3, #255	; 0xff
    c5c4:	d105      	bne.n	c5d2 <send_debug+0x3ae>
    c5c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    c5ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5ce:	2200      	movs	r2, #0
    c5d0:	701a      	strb	r2, [r3, #0]
    c5d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    c5d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5da:	781b      	ldrb	r3, [r3, #0]
    c5dc:	461a      	mov	r2, r3
    c5de:	f24c 5334 	movw	r3, #50484	; 0xc534
    c5e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5e6:	7819      	ldrb	r1, [r3, #0]
    c5e8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c5ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5f0:	5499      	strb	r1, [r3, r2]
    c5f2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c5f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c5fa:	781a      	ldrb	r2, [r3, #0]
    c5fc:	f24c 5334 	movw	r3, #50484	; 0xc534
    c600:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c604:	781b      	ldrb	r3, [r3, #0]
    c606:	4413      	add	r3, r2
    c608:	b2da      	uxtb	r2, r3
    c60a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c60e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c612:	701a      	strb	r2, [r3, #0]
    c614:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c618:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c61c:	781a      	ldrb	r2, [r3, #0]
    c61e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c622:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c626:	781b      	ldrb	r3, [r3, #0]
    c628:	4413      	add	r3, r2
    c62a:	b2da      	uxtb	r2, r3
    c62c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c630:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c634:	701a      	strb	r2, [r3, #0]
    c636:	f24c 5349 	movw	r3, #50505	; 0xc549
    c63a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c63e:	781b      	ldrb	r3, [r3, #0]
    c640:	3301      	adds	r3, #1
    c642:	b2da      	uxtb	r2, r3
    c644:	f24c 5349 	movw	r3, #50505	; 0xc549
    c648:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c64c:	701a      	strb	r2, [r3, #0]
    c64e:	f24c 5349 	movw	r3, #50505	; 0xc549
    c652:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c656:	781b      	ldrb	r3, [r3, #0]
    c658:	2bff      	cmp	r3, #255	; 0xff
    c65a:	d105      	bne.n	c668 <send_debug+0x444>
    c65c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c660:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c664:	2200      	movs	r2, #0
    c666:	701a      	strb	r2, [r3, #0]
    c668:	f24c 5349 	movw	r3, #50505	; 0xc549
    c66c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c670:	781b      	ldrb	r3, [r3, #0]
    c672:	461a      	mov	r2, r3
    c674:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c678:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c67c:	7819      	ldrb	r1, [r3, #0]
    c67e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c682:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c686:	5499      	strb	r1, [r3, r2]
    c688:	f24c 5349 	movw	r3, #50505	; 0xc549
    c68c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c690:	781b      	ldrb	r3, [r3, #0]
    c692:	3301      	adds	r3, #1
    c694:	b2da      	uxtb	r2, r3
    c696:	f24c 5349 	movw	r3, #50505	; 0xc549
    c69a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c69e:	701a      	strb	r2, [r3, #0]
    c6a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6a8:	781b      	ldrb	r3, [r3, #0]
    c6aa:	2bff      	cmp	r3, #255	; 0xff
    c6ac:	d105      	bne.n	c6ba <send_debug+0x496>
    c6ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6b6:	2200      	movs	r2, #0
    c6b8:	701a      	strb	r2, [r3, #0]
    c6ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6c2:	781b      	ldrb	r3, [r3, #0]
    c6c4:	461a      	mov	r2, r3
    c6c6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c6ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6ce:	7819      	ldrb	r1, [r3, #0]
    c6d0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c6d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6d8:	5499      	strb	r1, [r3, r2]
    c6da:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6e2:	781b      	ldrb	r3, [r3, #0]
    c6e4:	3301      	adds	r3, #1
    c6e6:	b2da      	uxtb	r2, r3
    c6e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6f0:	701a      	strb	r2, [r3, #0]
    c6f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    c6f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c6fa:	781b      	ldrb	r3, [r3, #0]
    c6fc:	2bff      	cmp	r3, #255	; 0xff
    c6fe:	d105      	bne.n	c70c <send_debug+0x4e8>
    c700:	f24c 5349 	movw	r3, #50505	; 0xc549
    c704:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c708:	2200      	movs	r2, #0
    c70a:	701a      	strb	r2, [r3, #0]
    c70c:	f242 0339 	movw	r3, #8249	; 0x2039
    c710:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c714:	781b      	ldrb	r3, [r3, #0]
    c716:	b2db      	uxtb	r3, r3
    c718:	f003 0310 	and.w	r3, r3, #16
    c71c:	2b00      	cmp	r3, #0
    c71e:	d15a      	bne.n	c7d6 <send_debug+0x5b2>
    c720:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c724:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c728:	781b      	ldrb	r3, [r3, #0]
    c72a:	b2db      	uxtb	r3, r3
    c72c:	461a      	mov	r2, r3
    c72e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c736:	5c9a      	ldrb	r2, [r3, r2]
    c738:	f24c 634b 	movw	r3, #50763	; 0xc64b
    c73c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c740:	701a      	strb	r2, [r3, #0]
    c742:	f24c 634c 	movw	r3, #50764	; 0xc64c
    c746:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c74a:	2200      	movs	r2, #0
    c74c:	701a      	strb	r2, [r3, #0]
    c74e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c752:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c756:	781b      	ldrb	r3, [r3, #0]
    c758:	b2db      	uxtb	r3, r3
    c75a:	3301      	adds	r3, #1
    c75c:	b2da      	uxtb	r2, r3
    c75e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c766:	701a      	strb	r2, [r3, #0]
    c768:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c76c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c770:	781b      	ldrb	r3, [r3, #0]
    c772:	b2db      	uxtb	r3, r3
    c774:	2bff      	cmp	r3, #255	; 0xff
    c776:	d105      	bne.n	c784 <send_debug+0x560>
    c778:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c77c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c780:	2200      	movs	r2, #0
    c782:	701a      	strb	r2, [r3, #0]
    c784:	f242 0338 	movw	r3, #8248	; 0x2038
    c788:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c78c:	f242 0238 	movw	r2, #8248	; 0x2038
    c790:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c794:	7812      	ldrb	r2, [r2, #0]
    c796:	b2d2      	uxtb	r2, r2
    c798:	f042 0201 	orr.w	r2, r2, #1
    c79c:	b2d2      	uxtb	r2, r2
    c79e:	701a      	strb	r2, [r3, #0]
    c7a0:	f242 0339 	movw	r3, #8249	; 0x2039
    c7a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7a8:	f242 0239 	movw	r2, #8249	; 0x2039
    c7ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c7b0:	7812      	ldrb	r2, [r2, #0]
    c7b2:	b2d2      	uxtb	r2, r2
    c7b4:	f042 0210 	orr.w	r2, r2, #16
    c7b8:	b2d2      	uxtb	r2, r2
    c7ba:	701a      	strb	r2, [r3, #0]
    c7bc:	e00b      	b.n	c7d6 <send_debug+0x5b2>
    c7be:	f24c 5348 	movw	r3, #50504	; 0xc548
    c7c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7c6:	781b      	ldrb	r3, [r3, #0]
    c7c8:	3301      	adds	r3, #1
    c7ca:	b2da      	uxtb	r2, r3
    c7cc:	f24c 5348 	movw	r3, #50504	; 0xc548
    c7d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7d4:	701a      	strb	r2, [r3, #0]
}
    c7d6:	46bd      	mov	sp, r7
    c7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c7dc:	4770      	bx	lr
    c7de:	bf00      	nop

0000c7e0 <send_nav_ref>:
void send_nav_ref(void){  //10000ms
    c7e0:	b480      	push	{r7}
    c7e2:	af00      	add	r7, sp, #0
  if(!boot)
    c7e4:	f240 533d 	movw	r3, #1341	; 0x53d
    c7e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c7ec:	781b      	ldrb	r3, [r3, #0]
    c7ee:	2b00      	cmp	r3, #0
    c7f0:	f040 83a9 	bne.w	cf46 <send_nav_ref+0x766>
  { if (count % 100 == 49) PERIODIC_SEND_NAVIGATION_REF();}
    c7f4:	f24c 5341 	movw	r3, #50497	; 0xc541
    c7f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c7fc:	781a      	ldrb	r2, [r3, #0]
    c7fe:	f248 531f 	movw	r3, #34079	; 0x851f
    c802:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    c806:	fba3 1302 	umull	r1, r3, r3, r2
    c80a:	095b      	lsrs	r3, r3, #5
    c80c:	2164      	movs	r1, #100	; 0x64
    c80e:	fb01 f303 	mul.w	r3, r1, r3
    c812:	1ad3      	subs	r3, r2, r3
    c814:	b2db      	uxtb	r3, r3
    c816:	2b31      	cmp	r3, #49	; 0x31
    c818:	f040 8395 	bne.w	cf46 <send_nav_ref+0x766>
    c81c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c820:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c824:	781a      	ldrb	r2, [r3, #0]
    c826:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c82a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c82e:	781b      	ldrb	r3, [r3, #0]
    c830:	b2db      	uxtb	r3, r3
    c832:	429a      	cmp	r2, r3
    c834:	d313      	bcc.n	c85e <send_nav_ref+0x7e>
    c836:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c83a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c83e:	781b      	ldrb	r3, [r3, #0]
    c840:	b2db      	uxtb	r3, r3
    c842:	461a      	mov	r2, r3
    c844:	f24c 5349 	movw	r3, #50505	; 0xc549
    c848:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c84c:	781b      	ldrb	r3, [r3, #0]
    c84e:	1ad3      	subs	r3, r2, r3
    c850:	33ff      	adds	r3, #255	; 0xff
    c852:	2b0c      	cmp	r3, #12
    c854:	bfd4      	ite	le
    c856:	2300      	movle	r3, #0
    c858:	2301      	movgt	r3, #1
    c85a:	b2db      	uxtb	r3, r3
    c85c:	e011      	b.n	c882 <send_nav_ref+0xa2>
    c85e:	f24c 534a 	movw	r3, #50506	; 0xc54a
    c862:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c866:	781b      	ldrb	r3, [r3, #0]
    c868:	b2db      	uxtb	r3, r3
    c86a:	461a      	mov	r2, r3
    c86c:	f24c 5349 	movw	r3, #50505	; 0xc549
    c870:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c874:	781b      	ldrb	r3, [r3, #0]
    c876:	1ad3      	subs	r3, r2, r3
    c878:	2b0c      	cmp	r3, #12
    c87a:	bfd4      	ite	le
    c87c:	2300      	movle	r3, #0
    c87e:	2301      	movgt	r3, #1
    c880:	b2db      	uxtb	r3, r3
    c882:	2b00      	cmp	r3, #0
    c884:	f000 8353 	beq.w	cf2e <send_nav_ref+0x74e>
    c888:	f24c 5349 	movw	r3, #50505	; 0xc549
    c88c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c890:	781b      	ldrb	r3, [r3, #0]
    c892:	461a      	mov	r2, r3
    c894:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c898:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c89c:	2105      	movs	r1, #5
    c89e:	5499      	strb	r1, [r3, r2]
    c8a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c8a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8a8:	781b      	ldrb	r3, [r3, #0]
    c8aa:	3301      	adds	r3, #1
    c8ac:	b2da      	uxtb	r2, r3
    c8ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    c8b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8b6:	701a      	strb	r2, [r3, #0]
    c8b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c8bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8c0:	781b      	ldrb	r3, [r3, #0]
    c8c2:	2bff      	cmp	r3, #255	; 0xff
    c8c4:	d105      	bne.n	c8d2 <send_nav_ref+0xf2>
    c8c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    c8ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8ce:	2200      	movs	r2, #0
    c8d0:	701a      	strb	r2, [r3, #0]
    c8d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    c8d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8da:	781b      	ldrb	r3, [r3, #0]
    c8dc:	461a      	mov	r2, r3
    c8de:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c8e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8e6:	2109      	movs	r1, #9
    c8e8:	5499      	strb	r1, [r3, r2]
    c8ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    c8ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c8f2:	781b      	ldrb	r3, [r3, #0]
    c8f4:	3301      	adds	r3, #1
    c8f6:	b2da      	uxtb	r2, r3
    c8f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    c8fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c900:	701a      	strb	r2, [r3, #0]
    c902:	f24c 5349 	movw	r3, #50505	; 0xc549
    c906:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c90a:	781b      	ldrb	r3, [r3, #0]
    c90c:	2bff      	cmp	r3, #255	; 0xff
    c90e:	d105      	bne.n	c91c <send_nav_ref+0x13c>
    c910:	f24c 5349 	movw	r3, #50505	; 0xc549
    c914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c918:	2200      	movs	r2, #0
    c91a:	701a      	strb	r2, [r3, #0]
    c91c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c924:	2209      	movs	r2, #9
    c926:	701a      	strb	r2, [r3, #0]
    c928:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c92c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c930:	2209      	movs	r2, #9
    c932:	701a      	strb	r2, [r3, #0]
    c934:	f24c 5349 	movw	r3, #50505	; 0xc549
    c938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c93c:	781b      	ldrb	r3, [r3, #0]
    c93e:	461a      	mov	r2, r3
    c940:	f648 2350 	movw	r3, #35408	; 0x8a50
    c944:	f2c0 0301 	movt	r3, #1
    c948:	7819      	ldrb	r1, [r3, #0]
    c94a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c94e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c952:	5499      	strb	r1, [r3, r2]
    c954:	f648 2350 	movw	r3, #35408	; 0x8a50
    c958:	f2c0 0301 	movt	r3, #1
    c95c:	781a      	ldrb	r2, [r3, #0]
    c95e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c966:	781b      	ldrb	r3, [r3, #0]
    c968:	4413      	add	r3, r2
    c96a:	b2da      	uxtb	r2, r3
    c96c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c970:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c974:	701a      	strb	r2, [r3, #0]
    c976:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c97a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c97e:	781a      	ldrb	r2, [r3, #0]
    c980:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c988:	781b      	ldrb	r3, [r3, #0]
    c98a:	4413      	add	r3, r2
    c98c:	b2da      	uxtb	r2, r3
    c98e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    c992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c996:	701a      	strb	r2, [r3, #0]
    c998:	f24c 5349 	movw	r3, #50505	; 0xc549
    c99c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9a0:	781b      	ldrb	r3, [r3, #0]
    c9a2:	3301      	adds	r3, #1
    c9a4:	b2da      	uxtb	r2, r3
    c9a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    c9aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9ae:	701a      	strb	r2, [r3, #0]
    c9b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    c9b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9b8:	781b      	ldrb	r3, [r3, #0]
    c9ba:	2bff      	cmp	r3, #255	; 0xff
    c9bc:	d105      	bne.n	c9ca <send_nav_ref+0x1ea>
    c9be:	f24c 5349 	movw	r3, #50505	; 0xc549
    c9c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9c6:	2200      	movs	r2, #0
    c9c8:	701a      	strb	r2, [r3, #0]
    c9ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    c9ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9d2:	781b      	ldrb	r3, [r3, #0]
    c9d4:	461a      	mov	r2, r3
    c9d6:	f648 2350 	movw	r3, #35408	; 0x8a50
    c9da:	f2c0 0301 	movt	r3, #1
    c9de:	7859      	ldrb	r1, [r3, #1]
    c9e0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    c9e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9e8:	5499      	strb	r1, [r3, r2]
    c9ea:	4bd2      	ldr	r3, [pc, #840]	; (cd34 <send_nav_ref+0x554>)
    c9ec:	781a      	ldrb	r2, [r3, #0]
    c9ee:	f24c 634d 	movw	r3, #50765	; 0xc64d
    c9f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    c9f6:	781b      	ldrb	r3, [r3, #0]
    c9f8:	4413      	add	r3, r2
    c9fa:	b2da      	uxtb	r2, r3
    c9fc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ca00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca04:	701a      	strb	r2, [r3, #0]
    ca06:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ca0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca0e:	781a      	ldrb	r2, [r3, #0]
    ca10:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ca14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca18:	781b      	ldrb	r3, [r3, #0]
    ca1a:	4413      	add	r3, r2
    ca1c:	b2da      	uxtb	r2, r3
    ca1e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ca22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca26:	701a      	strb	r2, [r3, #0]
    ca28:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca30:	781b      	ldrb	r3, [r3, #0]
    ca32:	3301      	adds	r3, #1
    ca34:	b2da      	uxtb	r2, r3
    ca36:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca3e:	701a      	strb	r2, [r3, #0]
    ca40:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca48:	781b      	ldrb	r3, [r3, #0]
    ca4a:	2bff      	cmp	r3, #255	; 0xff
    ca4c:	d105      	bne.n	ca5a <send_nav_ref+0x27a>
    ca4e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca56:	2200      	movs	r2, #0
    ca58:	701a      	strb	r2, [r3, #0]
    ca5a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ca5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca62:	781b      	ldrb	r3, [r3, #0]
    ca64:	461a      	mov	r2, r3
    ca66:	f648 2350 	movw	r3, #35408	; 0x8a50
    ca6a:	f2c0 0301 	movt	r3, #1
    ca6e:	7899      	ldrb	r1, [r3, #2]
    ca70:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ca74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca78:	5499      	strb	r1, [r3, r2]
    ca7a:	4baf      	ldr	r3, [pc, #700]	; (cd38 <send_nav_ref+0x558>)
    ca7c:	781a      	ldrb	r2, [r3, #0]
    ca7e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ca82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca86:	781b      	ldrb	r3, [r3, #0]
    ca88:	4413      	add	r3, r2
    ca8a:	b2da      	uxtb	r2, r3
    ca8c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ca90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca94:	701a      	strb	r2, [r3, #0]
    ca96:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ca9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ca9e:	781a      	ldrb	r2, [r3, #0]
    caa0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    caa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caa8:	781b      	ldrb	r3, [r3, #0]
    caaa:	4413      	add	r3, r2
    caac:	b2da      	uxtb	r2, r3
    caae:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cab6:	701a      	strb	r2, [r3, #0]
    cab8:	f24c 5349 	movw	r3, #50505	; 0xc549
    cabc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cac0:	781b      	ldrb	r3, [r3, #0]
    cac2:	3301      	adds	r3, #1
    cac4:	b2da      	uxtb	r2, r3
    cac6:	f24c 5349 	movw	r3, #50505	; 0xc549
    caca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cace:	701a      	strb	r2, [r3, #0]
    cad0:	f24c 5349 	movw	r3, #50505	; 0xc549
    cad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cad8:	781b      	ldrb	r3, [r3, #0]
    cada:	2bff      	cmp	r3, #255	; 0xff
    cadc:	d105      	bne.n	caea <send_nav_ref+0x30a>
    cade:	f24c 5349 	movw	r3, #50505	; 0xc549
    cae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cae6:	2200      	movs	r2, #0
    cae8:	701a      	strb	r2, [r3, #0]
    caea:	f24c 5349 	movw	r3, #50505	; 0xc549
    caee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    caf2:	781b      	ldrb	r3, [r3, #0]
    caf4:	461a      	mov	r2, r3
    caf6:	f648 2350 	movw	r3, #35408	; 0x8a50
    cafa:	f2c0 0301 	movt	r3, #1
    cafe:	78d9      	ldrb	r1, [r3, #3]
    cb00:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cb04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb08:	5499      	strb	r1, [r3, r2]
    cb0a:	4b8c      	ldr	r3, [pc, #560]	; (cd3c <send_nav_ref+0x55c>)
    cb0c:	781a      	ldrb	r2, [r3, #0]
    cb0e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cb12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb16:	781b      	ldrb	r3, [r3, #0]
    cb18:	4413      	add	r3, r2
    cb1a:	b2da      	uxtb	r2, r3
    cb1c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cb20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb24:	701a      	strb	r2, [r3, #0]
    cb26:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cb2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb2e:	781a      	ldrb	r2, [r3, #0]
    cb30:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cb34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb38:	781b      	ldrb	r3, [r3, #0]
    cb3a:	4413      	add	r3, r2
    cb3c:	b2da      	uxtb	r2, r3
    cb3e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cb42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb46:	701a      	strb	r2, [r3, #0]
    cb48:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb50:	781b      	ldrb	r3, [r3, #0]
    cb52:	3301      	adds	r3, #1
    cb54:	b2da      	uxtb	r2, r3
    cb56:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb5e:	701a      	strb	r2, [r3, #0]
    cb60:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb68:	781b      	ldrb	r3, [r3, #0]
    cb6a:	2bff      	cmp	r3, #255	; 0xff
    cb6c:	d105      	bne.n	cb7a <send_nav_ref+0x39a>
    cb6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb76:	2200      	movs	r2, #0
    cb78:	701a      	strb	r2, [r3, #0]
    cb7a:	f24c 5349 	movw	r3, #50505	; 0xc549
    cb7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb82:	781b      	ldrb	r3, [r3, #0]
    cb84:	461a      	mov	r2, r3
    cb86:	f648 2354 	movw	r3, #35412	; 0x8a54
    cb8a:	f2c0 0301 	movt	r3, #1
    cb8e:	7819      	ldrb	r1, [r3, #0]
    cb90:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cb94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cb98:	5499      	strb	r1, [r3, r2]
    cb9a:	f648 2354 	movw	r3, #35412	; 0x8a54
    cb9e:	f2c0 0301 	movt	r3, #1
    cba2:	781a      	ldrb	r2, [r3, #0]
    cba4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbac:	781b      	ldrb	r3, [r3, #0]
    cbae:	4413      	add	r3, r2
    cbb0:	b2da      	uxtb	r2, r3
    cbb2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cbb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbba:	701a      	strb	r2, [r3, #0]
    cbbc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cbc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbc4:	781a      	ldrb	r2, [r3, #0]
    cbc6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cbca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbce:	781b      	ldrb	r3, [r3, #0]
    cbd0:	4413      	add	r3, r2
    cbd2:	b2da      	uxtb	r2, r3
    cbd4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cbd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbdc:	701a      	strb	r2, [r3, #0]
    cbde:	f24c 5349 	movw	r3, #50505	; 0xc549
    cbe2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbe6:	781b      	ldrb	r3, [r3, #0]
    cbe8:	3301      	adds	r3, #1
    cbea:	b2da      	uxtb	r2, r3
    cbec:	f24c 5349 	movw	r3, #50505	; 0xc549
    cbf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbf4:	701a      	strb	r2, [r3, #0]
    cbf6:	f24c 5349 	movw	r3, #50505	; 0xc549
    cbfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cbfe:	781b      	ldrb	r3, [r3, #0]
    cc00:	2bff      	cmp	r3, #255	; 0xff
    cc02:	d105      	bne.n	cc10 <send_nav_ref+0x430>
    cc04:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc0c:	2200      	movs	r2, #0
    cc0e:	701a      	strb	r2, [r3, #0]
    cc10:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc18:	781b      	ldrb	r3, [r3, #0]
    cc1a:	461a      	mov	r2, r3
    cc1c:	f648 2354 	movw	r3, #35412	; 0x8a54
    cc20:	f2c0 0301 	movt	r3, #1
    cc24:	7859      	ldrb	r1, [r3, #1]
    cc26:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cc2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc2e:	5499      	strb	r1, [r3, r2]
    cc30:	4b43      	ldr	r3, [pc, #268]	; (cd40 <send_nav_ref+0x560>)
    cc32:	781a      	ldrb	r2, [r3, #0]
    cc34:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cc38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc3c:	781b      	ldrb	r3, [r3, #0]
    cc3e:	4413      	add	r3, r2
    cc40:	b2da      	uxtb	r2, r3
    cc42:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cc46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc4a:	701a      	strb	r2, [r3, #0]
    cc4c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cc50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc54:	781a      	ldrb	r2, [r3, #0]
    cc56:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cc5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc5e:	781b      	ldrb	r3, [r3, #0]
    cc60:	4413      	add	r3, r2
    cc62:	b2da      	uxtb	r2, r3
    cc64:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cc68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc6c:	701a      	strb	r2, [r3, #0]
    cc6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc76:	781b      	ldrb	r3, [r3, #0]
    cc78:	3301      	adds	r3, #1
    cc7a:	b2da      	uxtb	r2, r3
    cc7c:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc84:	701a      	strb	r2, [r3, #0]
    cc86:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc8e:	781b      	ldrb	r3, [r3, #0]
    cc90:	2bff      	cmp	r3, #255	; 0xff
    cc92:	d105      	bne.n	cca0 <send_nav_ref+0x4c0>
    cc94:	f24c 5349 	movw	r3, #50505	; 0xc549
    cc98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cc9c:	2200      	movs	r2, #0
    cc9e:	701a      	strb	r2, [r3, #0]
    cca0:	f24c 5349 	movw	r3, #50505	; 0xc549
    cca4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cca8:	781b      	ldrb	r3, [r3, #0]
    ccaa:	461a      	mov	r2, r3
    ccac:	f648 2354 	movw	r3, #35412	; 0x8a54
    ccb0:	f2c0 0301 	movt	r3, #1
    ccb4:	7899      	ldrb	r1, [r3, #2]
    ccb6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ccba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccbe:	5499      	strb	r1, [r3, r2]
    ccc0:	4b20      	ldr	r3, [pc, #128]	; (cd44 <send_nav_ref+0x564>)
    ccc2:	781a      	ldrb	r2, [r3, #0]
    ccc4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ccc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cccc:	781b      	ldrb	r3, [r3, #0]
    ccce:	4413      	add	r3, r2
    ccd0:	b2da      	uxtb	r2, r3
    ccd2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ccd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccda:	701a      	strb	r2, [r3, #0]
    ccdc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cce0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cce4:	781a      	ldrb	r2, [r3, #0]
    cce6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ccea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccee:	781b      	ldrb	r3, [r3, #0]
    ccf0:	4413      	add	r3, r2
    ccf2:	b2da      	uxtb	r2, r3
    ccf4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ccf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ccfc:	701a      	strb	r2, [r3, #0]
    ccfe:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd06:	781b      	ldrb	r3, [r3, #0]
    cd08:	3301      	adds	r3, #1
    cd0a:	b2da      	uxtb	r2, r3
    cd0c:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd14:	701a      	strb	r2, [r3, #0]
    cd16:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd1e:	781b      	ldrb	r3, [r3, #0]
    cd20:	2bff      	cmp	r3, #255	; 0xff
    cd22:	d111      	bne.n	cd48 <send_nav_ref+0x568>
    cd24:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd2c:	2200      	movs	r2, #0
    cd2e:	701a      	strb	r2, [r3, #0]
    cd30:	e00a      	b.n	cd48 <send_nav_ref+0x568>
    cd32:	bf00      	nop
    cd34:	00018a51 	.word	0x00018a51
    cd38:	00018a52 	.word	0x00018a52
    cd3c:	00018a53 	.word	0x00018a53
    cd40:	00018a55 	.word	0x00018a55
    cd44:	00018a56 	.word	0x00018a56
    cd48:	f24c 5349 	movw	r3, #50505	; 0xc549
    cd4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd50:	781b      	ldrb	r3, [r3, #0]
    cd52:	461a      	mov	r2, r3
    cd54:	f648 2354 	movw	r3, #35412	; 0x8a54
    cd58:	f2c0 0301 	movt	r3, #1
    cd5c:	78d9      	ldrb	r1, [r3, #3]
    cd5e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cd62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd66:	5499      	strb	r1, [r3, r2]
    cd68:	4b79      	ldr	r3, [pc, #484]	; (cf50 <send_nav_ref+0x770>)
    cd6a:	781a      	ldrb	r2, [r3, #0]
    cd6c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cd70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd74:	781b      	ldrb	r3, [r3, #0]
    cd76:	4413      	add	r3, r2
    cd78:	b2da      	uxtb	r2, r3
    cd7a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cd7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd82:	701a      	strb	r2, [r3, #0]
    cd84:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cd88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd8c:	781a      	ldrb	r2, [r3, #0]
    cd8e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cd92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cd96:	781b      	ldrb	r3, [r3, #0]
    cd98:	4413      	add	r3, r2
    cd9a:	b2da      	uxtb	r2, r3
    cd9c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    cda0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cda4:	701a      	strb	r2, [r3, #0]
    cda6:	f24c 5349 	movw	r3, #50505	; 0xc549
    cdaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdae:	781b      	ldrb	r3, [r3, #0]
    cdb0:	3301      	adds	r3, #1
    cdb2:	b2da      	uxtb	r2, r3
    cdb4:	f24c 5349 	movw	r3, #50505	; 0xc549
    cdb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdbc:	701a      	strb	r2, [r3, #0]
    cdbe:	f24c 5349 	movw	r3, #50505	; 0xc549
    cdc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdc6:	781b      	ldrb	r3, [r3, #0]
    cdc8:	2bff      	cmp	r3, #255	; 0xff
    cdca:	d105      	bne.n	cdd8 <send_nav_ref+0x5f8>
    cdcc:	f24c 5349 	movw	r3, #50505	; 0xc549
    cdd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdd4:	2200      	movs	r2, #0
    cdd6:	701a      	strb	r2, [r3, #0]
    cdd8:	f24c 5349 	movw	r3, #50505	; 0xc549
    cddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cde0:	781b      	ldrb	r3, [r3, #0]
    cde2:	461a      	mov	r2, r3
    cde4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    cde8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdec:	7819      	ldrb	r1, [r3, #0]
    cdee:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cdf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cdf6:	5499      	strb	r1, [r3, r2]
    cdf8:	f24c 5349 	movw	r3, #50505	; 0xc549
    cdfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce00:	781b      	ldrb	r3, [r3, #0]
    ce02:	3301      	adds	r3, #1
    ce04:	b2da      	uxtb	r2, r3
    ce06:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce0e:	701a      	strb	r2, [r3, #0]
    ce10:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce18:	781b      	ldrb	r3, [r3, #0]
    ce1a:	2bff      	cmp	r3, #255	; 0xff
    ce1c:	d105      	bne.n	ce2a <send_nav_ref+0x64a>
    ce1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce26:	2200      	movs	r2, #0
    ce28:	701a      	strb	r2, [r3, #0]
    ce2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce32:	781b      	ldrb	r3, [r3, #0]
    ce34:	461a      	mov	r2, r3
    ce36:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ce3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce3e:	7819      	ldrb	r1, [r3, #0]
    ce40:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ce44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce48:	5499      	strb	r1, [r3, r2]
    ce4a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce52:	781b      	ldrb	r3, [r3, #0]
    ce54:	3301      	adds	r3, #1
    ce56:	b2da      	uxtb	r2, r3
    ce58:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce60:	701a      	strb	r2, [r3, #0]
    ce62:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce6a:	781b      	ldrb	r3, [r3, #0]
    ce6c:	2bff      	cmp	r3, #255	; 0xff
    ce6e:	d105      	bne.n	ce7c <send_nav_ref+0x69c>
    ce70:	f24c 5349 	movw	r3, #50505	; 0xc549
    ce74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce78:	2200      	movs	r2, #0
    ce7a:	701a      	strb	r2, [r3, #0]
    ce7c:	f242 0339 	movw	r3, #8249	; 0x2039
    ce80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce84:	781b      	ldrb	r3, [r3, #0]
    ce86:	b2db      	uxtb	r3, r3
    ce88:	f003 0310 	and.w	r3, r3, #16
    ce8c:	2b00      	cmp	r3, #0
    ce8e:	d15a      	bne.n	cf46 <send_nav_ref+0x766>
    ce90:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ce94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ce98:	781b      	ldrb	r3, [r3, #0]
    ce9a:	b2db      	uxtb	r3, r3
    ce9c:	461a      	mov	r2, r3
    ce9e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    cea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cea6:	5c9a      	ldrb	r2, [r3, r2]
    cea8:	f24c 634b 	movw	r3, #50763	; 0xc64b
    ceac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ceb0:	701a      	strb	r2, [r3, #0]
    ceb2:	f24c 634c 	movw	r3, #50764	; 0xc64c
    ceb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ceba:	2200      	movs	r2, #0
    cebc:	701a      	strb	r2, [r3, #0]
    cebe:	f24c 534a 	movw	r3, #50506	; 0xc54a
    cec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cec6:	781b      	ldrb	r3, [r3, #0]
    cec8:	b2db      	uxtb	r3, r3
    ceca:	3301      	adds	r3, #1
    cecc:	b2da      	uxtb	r2, r3
    cece:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ced2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ced6:	701a      	strb	r2, [r3, #0]
    ced8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    cedc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cee0:	781b      	ldrb	r3, [r3, #0]
    cee2:	b2db      	uxtb	r3, r3
    cee4:	2bff      	cmp	r3, #255	; 0xff
    cee6:	d105      	bne.n	cef4 <send_nav_ref+0x714>
    cee8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ceec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cef0:	2200      	movs	r2, #0
    cef2:	701a      	strb	r2, [r3, #0]
    cef4:	f242 0338 	movw	r3, #8248	; 0x2038
    cef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cefc:	f242 0238 	movw	r2, #8248	; 0x2038
    cf00:	f2c2 0200 	movt	r2, #8192	; 0x2000
    cf04:	7812      	ldrb	r2, [r2, #0]
    cf06:	b2d2      	uxtb	r2, r2
    cf08:	f042 0201 	orr.w	r2, r2, #1
    cf0c:	b2d2      	uxtb	r2, r2
    cf0e:	701a      	strb	r2, [r3, #0]
    cf10:	f242 0339 	movw	r3, #8249	; 0x2039
    cf14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    cf18:	f242 0239 	movw	r2, #8249	; 0x2039
    cf1c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    cf20:	7812      	ldrb	r2, [r2, #0]
    cf22:	b2d2      	uxtb	r2, r2
    cf24:	f042 0210 	orr.w	r2, r2, #16
    cf28:	b2d2      	uxtb	r2, r2
    cf2a:	701a      	strb	r2, [r3, #0]
    cf2c:	e00b      	b.n	cf46 <send_nav_ref+0x766>
    cf2e:	f24c 5348 	movw	r3, #50504	; 0xc548
    cf32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf36:	781b      	ldrb	r3, [r3, #0]
    cf38:	3301      	adds	r3, #1
    cf3a:	b2da      	uxtb	r2, r3
    cf3c:	f24c 5348 	movw	r3, #50504	; 0xc548
    cf40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf44:	701a      	strb	r2, [r3, #0]
  //vPrintString("S_13 reporting_task end!\n\r");
}
    cf46:	46bd      	mov	sp, r7
    cf48:	f85d 7b04 	ldr.w	r7, [sp], #4
    cf4c:	4770      	bx	lr
    cf4e:	bf00      	nop
    cf50:	00018a57 	.word	0x00018a57

0000cf54 <inflight_calib_mode_update>:

/** \fn inline uint8_t inflight_calib_mode_update ( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
inline uint8_t inflight_calib_mode_update ( void ) {
    cf54:	b480      	push	{r7}
    cf56:	b083      	sub	sp, #12
    cf58:	af00      	add	r7, sp, #0
  ModeUpdate(inflight_calib_mode, IF_CALIB_MODE_OF_PULSE(from_fbw.channels[RADIO_CALIB]));
    cf5a:	f24c 6350 	movw	r3, #50768	; 0xc650
    cf5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf62:	8a1b      	ldrh	r3, [r3, #16]
    cf64:	b21b      	sxth	r3, r3
    cf66:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
    cf6a:	db0d      	blt.n	cf88 <inflight_calib_mode_update+0x34>
    cf6c:	f24c 6350 	movw	r3, #50768	; 0xc650
    cf70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf74:	8a1b      	ldrh	r3, [r3, #16]
    cf76:	b21a      	sxth	r2, r3
    cf78:	f640 437f 	movw	r3, #3199	; 0xc7f
    cf7c:	429a      	cmp	r2, r3
    cf7e:	bfd4      	ite	le
    cf80:	2300      	movle	r3, #0
    cf82:	2301      	movgt	r3, #1
    cf84:	b2db      	uxtb	r3, r3
    cf86:	e000      	b.n	cf8a <inflight_calib_mode_update+0x36>
    cf88:	2302      	movs	r3, #2
    cf8a:	71fb      	strb	r3, [r7, #7]
    cf8c:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    cf90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cf94:	781b      	ldrb	r3, [r3, #0]
    cf96:	79fa      	ldrb	r2, [r7, #7]
    cf98:	429a      	cmp	r2, r3
    cf9a:	d007      	beq.n	cfac <inflight_calib_mode_update+0x58>
    cf9c:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    cfa0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfa4:	79fa      	ldrb	r2, [r7, #7]
    cfa6:	701a      	strb	r2, [r3, #0]
    cfa8:	2301      	movs	r3, #1
    cfaa:	e000      	b.n	cfae <inflight_calib_mode_update+0x5a>
    cfac:	2300      	movs	r3, #0
}
    cfae:	4618      	mov	r0, r3
    cfb0:	370c      	adds	r7, #12
    cfb2:	46bd      	mov	sp, r7
    cfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    cfb8:	4770      	bx	lr
    cfba:	bf00      	nop

0000cfbc <radio_control_task>:


/** \fn inline void radio_control_task( void )
 *  \brief @@@@@ A FIXER @@@@@
 */
void radio_control_task( void ) {
    cfbc:	b580      	push	{r7, lr}
    cfbe:	b082      	sub	sp, #8
    cfc0:	af00      	add	r7, sp, #0
  bool_t calib_mode_changed;
	//vPrintString("S_3 radio_control_task start! \n\r"); //SunnyBeike
    //add by wanbo
    link_fbw_receive_valid = 1;
    cfc2:	f24c 637e 	movw	r3, #50814	; 0xc67e
    cfc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfca:	2201      	movs	r2, #1
    cfcc:	701a      	strb	r2, [r3, #0]
  if (link_fbw_receive_valid) {
    cfce:	f24c 637e 	movw	r3, #50814	; 0xc67e
    cfd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cfd6:	781b      	ldrb	r3, [r3, #0]
    cfd8:	b2db      	uxtb	r3, r3
    cfda:	2b00      	cmp	r3, #0
    cfdc:	f000 83c0 	beq.w	d760 <radio_control_task+0x7a4>
    uint8_t mode_changed = FALSE;
    cfe0:	2300      	movs	r3, #0
    cfe2:	71fb      	strb	r3, [r7, #7]
    copy_from_to_fbw();
    cfe4:	f7fa fa4c 	bl	7480 <copy_from_to_fbw>
    if ((bit_is_set(from_fbw.status, RADIO_REALLY_LOST) && (pprz_mode == PPRZ_MODE_AUTO1 || pprz_mode == PPRZ_MODE_MANUAL)) || too_far_from_home) {
    cfe8:	4b3e      	ldr	r3, [pc, #248]	; (d0e4 <radio_control_task+0x128>)
    cfea:	781b      	ldrb	r3, [r3, #0]
    cfec:	b2db      	uxtb	r3, r3
    cfee:	f003 0302 	and.w	r3, r3, #2
    cff2:	2b00      	cmp	r3, #0
    cff4:	d00d      	beq.n	d012 <radio_control_task+0x56>
    cff6:	f24c 532c 	movw	r3, #50476	; 0xc52c
    cffa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    cffe:	781b      	ldrb	r3, [r3, #0]
    d000:	2b01      	cmp	r3, #1
    d002:	d00d      	beq.n	d020 <radio_control_task+0x64>
    d004:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d008:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d00c:	781b      	ldrb	r3, [r3, #0]
    d00e:	2b00      	cmp	r3, #0
    d010:	d006      	beq.n	d020 <radio_control_task+0x64>
    d012:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
    d016:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d01a:	781b      	ldrb	r3, [r3, #0]
    d01c:	2b00      	cmp	r3, #0
    d01e:	d007      	beq.n	d030 <radio_control_task+0x74>
      pprz_mode = PPRZ_MODE_HOME;
    d020:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d024:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d028:	2203      	movs	r2, #3
    d02a:	701a      	strb	r2, [r3, #0]
      mode_changed = TRUE;
    d02c:	2301      	movs	r3, #1
    d02e:	71fb      	strb	r3, [r7, #7]
    }
    // modified by wanbo
    if (bit_is_set(from_fbw.status, AVERAGED_CHANNELS_SENT)) 
    d030:	4b2c      	ldr	r3, [pc, #176]	; (d0e4 <radio_control_task+0x128>)
    d032:	781b      	ldrb	r3, [r3, #0]
    d034:	b2db      	uxtb	r3, r3
    d036:	f003 0304 	and.w	r3, r3, #4
    d03a:	2b00      	cmp	r3, #0
    d03c:	d023      	beq.n	d086 <radio_control_task+0xca>
    {
      bool_t pprz_mode_changed = pprz_mode_update();
    d03e:	f7fa f8f9 	bl	7234 <pprz_mode_update>
    d042:	4603      	mov	r3, r0
    d044:	71bb      	strb	r3, [r7, #6]
      mode_changed |= pprz_mode_changed;
    d046:	79fa      	ldrb	r2, [r7, #7]
    d048:	79bb      	ldrb	r3, [r7, #6]
    d04a:	4313      	orrs	r3, r2
    d04c:	71fb      	strb	r3, [r7, #7]
#ifdef RADIO_LLS
      mode_changed |= ir_estim_mode_update();
    d04e:	f7fa f93d 	bl	72cc <ir_estim_mode_update>
    d052:	4603      	mov	r3, r0
    d054:	461a      	mov	r2, r3
    d056:	79fb      	ldrb	r3, [r7, #7]
    d058:	4313      	orrs	r3, r2
    d05a:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef RADIO_CALIB
      calib_mode_changed = inflight_calib_mode_update();
    d05c:	f7ff ff7a 	bl	cf54 <inflight_calib_mode_update>
    d060:	4603      	mov	r3, r0
    d062:	717b      	strb	r3, [r7, #5]
      inflight_calib(calib_mode_changed || pprz_mode_changed);
    d064:	797b      	ldrb	r3, [r7, #5]
    d066:	2b00      	cmp	r3, #0
    d068:	d102      	bne.n	d070 <radio_control_task+0xb4>
    d06a:	79bb      	ldrb	r3, [r7, #6]
    d06c:	2b00      	cmp	r3, #0
    d06e:	d001      	beq.n	d074 <radio_control_task+0xb8>
    d070:	2301      	movs	r3, #1
    d072:	e000      	b.n	d076 <radio_control_task+0xba>
    d074:	2300      	movs	r3, #0
    d076:	b2db      	uxtb	r3, r3
    d078:	4618      	mov	r0, r3
    d07a:	f008 fba1 	bl	157c0 <inflight_calib>
      mode_changed |= calib_mode_changed;
    d07e:	79fa      	ldrb	r2, [r7, #7]
    d080:	797b      	ldrb	r3, [r7, #5]
    d082:	4313      	orrs	r3, r2
    d084:	71fb      	strb	r3, [r7, #7]
#endif
    }
    mode_changed |= mcu1_status_update();
    d086:	f7fa f949 	bl	731c <mcu1_status_update>
    d08a:	4603      	mov	r3, r0
    d08c:	461a      	mov	r2, r3
    d08e:	79fb      	ldrb	r3, [r7, #7]
    d090:	4313      	orrs	r3, r2
    d092:	71fb      	strb	r3, [r7, #7]
    // add by wanbo
    mode_changed = 1;
    d094:	2301      	movs	r3, #1
    d096:	71fb      	strb	r3, [r7, #7]
    if ( mode_changed )
    d098:	79fb      	ldrb	r3, [r7, #7]
    d09a:	2b00      	cmp	r3, #0
    d09c:	f000 82bd 	beq.w	d61a <radio_control_task+0x65e>
      DOWNLINK_SEND_PPRZ_MODE(&pprz_mode, &vertical_mode, &inflight_calib_mode, &mcu1_status, &ir_estim_mode);
    d0a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d0a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0a8:	781a      	ldrb	r2, [r3, #0]
    d0aa:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d0ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0b2:	781b      	ldrb	r3, [r3, #0]
    d0b4:	b2db      	uxtb	r3, r3
    d0b6:	429a      	cmp	r2, r3
    d0b8:	d316      	bcc.n	d0e8 <radio_control_task+0x12c>
    d0ba:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d0be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0c2:	781b      	ldrb	r3, [r3, #0]
    d0c4:	b2db      	uxtb	r3, r3
    d0c6:	461a      	mov	r2, r3
    d0c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    d0cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0d0:	781b      	ldrb	r3, [r3, #0]
    d0d2:	1ad3      	subs	r3, r2, r3
    d0d4:	33ff      	adds	r3, #255	; 0xff
    d0d6:	2b09      	cmp	r3, #9
    d0d8:	bfd4      	ite	le
    d0da:	2300      	movle	r3, #0
    d0dc:	2301      	movgt	r3, #1
    d0de:	b2db      	uxtb	r3, r3
    d0e0:	e014      	b.n	d10c <radio_control_task+0x150>
    d0e2:	bf00      	nop
    d0e4:	2004c663 	.word	0x2004c663
    d0e8:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d0ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0f0:	781b      	ldrb	r3, [r3, #0]
    d0f2:	b2db      	uxtb	r3, r3
    d0f4:	461a      	mov	r2, r3
    d0f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    d0fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d0fe:	781b      	ldrb	r3, [r3, #0]
    d100:	1ad3      	subs	r3, r2, r3
    d102:	2b09      	cmp	r3, #9
    d104:	bfd4      	ite	le
    d106:	2300      	movle	r3, #0
    d108:	2301      	movgt	r3, #1
    d10a:	b2db      	uxtb	r3, r3
    d10c:	2b00      	cmp	r3, #0
    d10e:	f000 8278 	beq.w	d602 <radio_control_task+0x646>
    d112:	f24c 5349 	movw	r3, #50505	; 0xc549
    d116:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d11a:	781b      	ldrb	r3, [r3, #0]
    d11c:	461a      	mov	r2, r3
    d11e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d122:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d126:	2105      	movs	r1, #5
    d128:	5499      	strb	r1, [r3, r2]
    d12a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d12e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d132:	781b      	ldrb	r3, [r3, #0]
    d134:	3301      	adds	r3, #1
    d136:	b2da      	uxtb	r2, r3
    d138:	f24c 5349 	movw	r3, #50505	; 0xc549
    d13c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d140:	701a      	strb	r2, [r3, #0]
    d142:	f24c 5349 	movw	r3, #50505	; 0xc549
    d146:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d14a:	781b      	ldrb	r3, [r3, #0]
    d14c:	2bff      	cmp	r3, #255	; 0xff
    d14e:	d105      	bne.n	d15c <radio_control_task+0x1a0>
    d150:	f24c 5349 	movw	r3, #50505	; 0xc549
    d154:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d158:	2200      	movs	r2, #0
    d15a:	701a      	strb	r2, [r3, #0]
    d15c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d160:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d164:	781b      	ldrb	r3, [r3, #0]
    d166:	461a      	mov	r2, r3
    d168:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d16c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d170:	210b      	movs	r1, #11
    d172:	5499      	strb	r1, [r3, r2]
    d174:	f24c 5349 	movw	r3, #50505	; 0xc549
    d178:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d17c:	781b      	ldrb	r3, [r3, #0]
    d17e:	3301      	adds	r3, #1
    d180:	b2da      	uxtb	r2, r3
    d182:	f24c 5349 	movw	r3, #50505	; 0xc549
    d186:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d18a:	701a      	strb	r2, [r3, #0]
    d18c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d190:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d194:	781b      	ldrb	r3, [r3, #0]
    d196:	2bff      	cmp	r3, #255	; 0xff
    d198:	d105      	bne.n	d1a6 <radio_control_task+0x1ea>
    d19a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d19e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1a2:	2200      	movs	r2, #0
    d1a4:	701a      	strb	r2, [r3, #0]
    d1a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d1aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1ae:	220b      	movs	r2, #11
    d1b0:	701a      	strb	r2, [r3, #0]
    d1b2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d1b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1ba:	220b      	movs	r2, #11
    d1bc:	701a      	strb	r2, [r3, #0]
    d1be:	f24c 5349 	movw	r3, #50505	; 0xc549
    d1c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1c6:	781b      	ldrb	r3, [r3, #0]
    d1c8:	461a      	mov	r2, r3
    d1ca:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d1ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1d2:	7819      	ldrb	r1, [r3, #0]
    d1d4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d1d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1dc:	5499      	strb	r1, [r3, r2]
    d1de:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d1e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1e6:	781a      	ldrb	r2, [r3, #0]
    d1e8:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d1ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1f0:	781b      	ldrb	r3, [r3, #0]
    d1f2:	4413      	add	r3, r2
    d1f4:	b2da      	uxtb	r2, r3
    d1f6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d1fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d1fe:	701a      	strb	r2, [r3, #0]
    d200:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d204:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d208:	781a      	ldrb	r2, [r3, #0]
    d20a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d20e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d212:	781b      	ldrb	r3, [r3, #0]
    d214:	4413      	add	r3, r2
    d216:	b2da      	uxtb	r2, r3
    d218:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d21c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d220:	701a      	strb	r2, [r3, #0]
    d222:	f24c 5349 	movw	r3, #50505	; 0xc549
    d226:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d22a:	781b      	ldrb	r3, [r3, #0]
    d22c:	3301      	adds	r3, #1
    d22e:	b2da      	uxtb	r2, r3
    d230:	f24c 5349 	movw	r3, #50505	; 0xc549
    d234:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d238:	701a      	strb	r2, [r3, #0]
    d23a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d23e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d242:	781b      	ldrb	r3, [r3, #0]
    d244:	2bff      	cmp	r3, #255	; 0xff
    d246:	d105      	bne.n	d254 <radio_control_task+0x298>
    d248:	f24c 5349 	movw	r3, #50505	; 0xc549
    d24c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d250:	2200      	movs	r2, #0
    d252:	701a      	strb	r2, [r3, #0]
    d254:	f24c 5349 	movw	r3, #50505	; 0xc549
    d258:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d25c:	781b      	ldrb	r3, [r3, #0]
    d25e:	461a      	mov	r2, r3
    d260:	f24c 532d 	movw	r3, #50477	; 0xc52d
    d264:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d268:	7819      	ldrb	r1, [r3, #0]
    d26a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d26e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d272:	5499      	strb	r1, [r3, r2]
    d274:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d278:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d27c:	781a      	ldrb	r2, [r3, #0]
    d27e:	f24c 532d 	movw	r3, #50477	; 0xc52d
    d282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d286:	781b      	ldrb	r3, [r3, #0]
    d288:	4413      	add	r3, r2
    d28a:	b2da      	uxtb	r2, r3
    d28c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d290:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d294:	701a      	strb	r2, [r3, #0]
    d296:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d29a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d29e:	781a      	ldrb	r2, [r3, #0]
    d2a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d2a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2a8:	781b      	ldrb	r3, [r3, #0]
    d2aa:	4413      	add	r3, r2
    d2ac:	b2da      	uxtb	r2, r3
    d2ae:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d2b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2b6:	701a      	strb	r2, [r3, #0]
    d2b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    d2bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2c0:	781b      	ldrb	r3, [r3, #0]
    d2c2:	3301      	adds	r3, #1
    d2c4:	b2da      	uxtb	r2, r3
    d2c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    d2ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2ce:	701a      	strb	r2, [r3, #0]
    d2d0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d2d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2d8:	781b      	ldrb	r3, [r3, #0]
    d2da:	2bff      	cmp	r3, #255	; 0xff
    d2dc:	d105      	bne.n	d2ea <radio_control_task+0x32e>
    d2de:	f24c 5349 	movw	r3, #50505	; 0xc549
    d2e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2e6:	2200      	movs	r2, #0
    d2e8:	701a      	strb	r2, [r3, #0]
    d2ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    d2ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2f2:	781b      	ldrb	r3, [r3, #0]
    d2f4:	461a      	mov	r2, r3
    d2f6:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    d2fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d2fe:	7819      	ldrb	r1, [r3, #0]
    d300:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d304:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d308:	5499      	strb	r1, [r3, r2]
    d30a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d30e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d312:	781a      	ldrb	r2, [r3, #0]
    d314:	f64c 335c 	movw	r3, #52060	; 0xcb5c
    d318:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d31c:	781b      	ldrb	r3, [r3, #0]
    d31e:	4413      	add	r3, r2
    d320:	b2da      	uxtb	r2, r3
    d322:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d326:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d32a:	701a      	strb	r2, [r3, #0]
    d32c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d330:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d334:	781a      	ldrb	r2, [r3, #0]
    d336:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d33a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d33e:	781b      	ldrb	r3, [r3, #0]
    d340:	4413      	add	r3, r2
    d342:	b2da      	uxtb	r2, r3
    d344:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d348:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d34c:	701a      	strb	r2, [r3, #0]
    d34e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d352:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d356:	781b      	ldrb	r3, [r3, #0]
    d358:	3301      	adds	r3, #1
    d35a:	b2da      	uxtb	r2, r3
    d35c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d360:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d364:	701a      	strb	r2, [r3, #0]
    d366:	f24c 5349 	movw	r3, #50505	; 0xc549
    d36a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d36e:	781b      	ldrb	r3, [r3, #0]
    d370:	2bff      	cmp	r3, #255	; 0xff
    d372:	d105      	bne.n	d380 <radio_control_task+0x3c4>
    d374:	f24c 5349 	movw	r3, #50505	; 0xc549
    d378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d37c:	2200      	movs	r2, #0
    d37e:	701a      	strb	r2, [r3, #0]
    d380:	f24c 5349 	movw	r3, #50505	; 0xc549
    d384:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d388:	781b      	ldrb	r3, [r3, #0]
    d38a:	461a      	mov	r2, r3
    d38c:	f24c 5333 	movw	r3, #50483	; 0xc533
    d390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d394:	7819      	ldrb	r1, [r3, #0]
    d396:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d39a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d39e:	5499      	strb	r1, [r3, r2]
    d3a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d3a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3a8:	781a      	ldrb	r2, [r3, #0]
    d3aa:	f24c 5333 	movw	r3, #50483	; 0xc533
    d3ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3b2:	781b      	ldrb	r3, [r3, #0]
    d3b4:	4413      	add	r3, r2
    d3b6:	b2da      	uxtb	r2, r3
    d3b8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d3bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3c0:	701a      	strb	r2, [r3, #0]
    d3c2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d3c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3ca:	781a      	ldrb	r2, [r3, #0]
    d3cc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d3d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3d4:	781b      	ldrb	r3, [r3, #0]
    d3d6:	4413      	add	r3, r2
    d3d8:	b2da      	uxtb	r2, r3
    d3da:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d3de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3e2:	701a      	strb	r2, [r3, #0]
    d3e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    d3e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3ec:	781b      	ldrb	r3, [r3, #0]
    d3ee:	3301      	adds	r3, #1
    d3f0:	b2da      	uxtb	r2, r3
    d3f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    d3f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d3fa:	701a      	strb	r2, [r3, #0]
    d3fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    d400:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d404:	781b      	ldrb	r3, [r3, #0]
    d406:	2bff      	cmp	r3, #255	; 0xff
    d408:	d105      	bne.n	d416 <radio_control_task+0x45a>
    d40a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d40e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d412:	2200      	movs	r2, #0
    d414:	701a      	strb	r2, [r3, #0]
    d416:	f24c 5349 	movw	r3, #50505	; 0xc549
    d41a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d41e:	781b      	ldrb	r3, [r3, #0]
    d420:	461a      	mov	r2, r3
    d422:	f240 533c 	movw	r3, #1340	; 0x53c
    d426:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d42a:	7819      	ldrb	r1, [r3, #0]
    d42c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d430:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d434:	5499      	strb	r1, [r3, r2]
    d436:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d43a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d43e:	781a      	ldrb	r2, [r3, #0]
    d440:	f240 533c 	movw	r3, #1340	; 0x53c
    d444:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d448:	781b      	ldrb	r3, [r3, #0]
    d44a:	4413      	add	r3, r2
    d44c:	b2da      	uxtb	r2, r3
    d44e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d452:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d456:	701a      	strb	r2, [r3, #0]
    d458:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d45c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d460:	781a      	ldrb	r2, [r3, #0]
    d462:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d466:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d46a:	781b      	ldrb	r3, [r3, #0]
    d46c:	4413      	add	r3, r2
    d46e:	b2da      	uxtb	r2, r3
    d470:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d474:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d478:	701a      	strb	r2, [r3, #0]
    d47a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d47e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d482:	781b      	ldrb	r3, [r3, #0]
    d484:	3301      	adds	r3, #1
    d486:	b2da      	uxtb	r2, r3
    d488:	f24c 5349 	movw	r3, #50505	; 0xc549
    d48c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d490:	701a      	strb	r2, [r3, #0]
    d492:	f24c 5349 	movw	r3, #50505	; 0xc549
    d496:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d49a:	781b      	ldrb	r3, [r3, #0]
    d49c:	2bff      	cmp	r3, #255	; 0xff
    d49e:	d105      	bne.n	d4ac <radio_control_task+0x4f0>
    d4a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4a8:	2200      	movs	r2, #0
    d4aa:	701a      	strb	r2, [r3, #0]
    d4ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4b4:	781b      	ldrb	r3, [r3, #0]
    d4b6:	461a      	mov	r2, r3
    d4b8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d4bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4c0:	7819      	ldrb	r1, [r3, #0]
    d4c2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d4c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4ca:	5499      	strb	r1, [r3, r2]
    d4cc:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4d4:	781b      	ldrb	r3, [r3, #0]
    d4d6:	3301      	adds	r3, #1
    d4d8:	b2da      	uxtb	r2, r3
    d4da:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4e2:	701a      	strb	r2, [r3, #0]
    d4e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4ec:	781b      	ldrb	r3, [r3, #0]
    d4ee:	2bff      	cmp	r3, #255	; 0xff
    d4f0:	d105      	bne.n	d4fe <radio_control_task+0x542>
    d4f2:	f24c 5349 	movw	r3, #50505	; 0xc549
    d4f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d4fa:	2200      	movs	r2, #0
    d4fc:	701a      	strb	r2, [r3, #0]
    d4fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    d502:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d506:	781b      	ldrb	r3, [r3, #0]
    d508:	461a      	mov	r2, r3
    d50a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d50e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d512:	7819      	ldrb	r1, [r3, #0]
    d514:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d518:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d51c:	5499      	strb	r1, [r3, r2]
    d51e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d522:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d526:	781b      	ldrb	r3, [r3, #0]
    d528:	3301      	adds	r3, #1
    d52a:	b2da      	uxtb	r2, r3
    d52c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d530:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d534:	701a      	strb	r2, [r3, #0]
    d536:	f24c 5349 	movw	r3, #50505	; 0xc549
    d53a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d53e:	781b      	ldrb	r3, [r3, #0]
    d540:	2bff      	cmp	r3, #255	; 0xff
    d542:	d105      	bne.n	d550 <radio_control_task+0x594>
    d544:	f24c 5349 	movw	r3, #50505	; 0xc549
    d548:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d54c:	2200      	movs	r2, #0
    d54e:	701a      	strb	r2, [r3, #0]
    d550:	f242 0339 	movw	r3, #8249	; 0x2039
    d554:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d558:	781b      	ldrb	r3, [r3, #0]
    d55a:	b2db      	uxtb	r3, r3
    d55c:	f003 0310 	and.w	r3, r3, #16
    d560:	2b00      	cmp	r3, #0
    d562:	d15a      	bne.n	d61a <radio_control_task+0x65e>
    d564:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d568:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d56c:	781b      	ldrb	r3, [r3, #0]
    d56e:	b2db      	uxtb	r3, r3
    d570:	461a      	mov	r2, r3
    d572:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d576:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d57a:	5c9a      	ldrb	r2, [r3, r2]
    d57c:	f24c 634b 	movw	r3, #50763	; 0xc64b
    d580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d584:	701a      	strb	r2, [r3, #0]
    d586:	f24c 634c 	movw	r3, #50764	; 0xc64c
    d58a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d58e:	2200      	movs	r2, #0
    d590:	701a      	strb	r2, [r3, #0]
    d592:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d596:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d59a:	781b      	ldrb	r3, [r3, #0]
    d59c:	b2db      	uxtb	r3, r3
    d59e:	3301      	adds	r3, #1
    d5a0:	b2da      	uxtb	r2, r3
    d5a2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d5a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5aa:	701a      	strb	r2, [r3, #0]
    d5ac:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d5b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5b4:	781b      	ldrb	r3, [r3, #0]
    d5b6:	b2db      	uxtb	r3, r3
    d5b8:	2bff      	cmp	r3, #255	; 0xff
    d5ba:	d105      	bne.n	d5c8 <radio_control_task+0x60c>
    d5bc:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d5c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d5c4:	2200      	movs	r2, #0
    d5c6:	701a      	strb	r2, [r3, #0]
    d5c8:	f242 0338 	movw	r3, #8248	; 0x2038
    d5cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5d0:	f242 0238 	movw	r2, #8248	; 0x2038
    d5d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d5d8:	7812      	ldrb	r2, [r2, #0]
    d5da:	b2d2      	uxtb	r2, r2
    d5dc:	f042 0201 	orr.w	r2, r2, #1
    d5e0:	b2d2      	uxtb	r2, r2
    d5e2:	701a      	strb	r2, [r3, #0]
    d5e4:	f242 0339 	movw	r3, #8249	; 0x2039
    d5e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d5ec:	f242 0239 	movw	r2, #8249	; 0x2039
    d5f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d5f4:	7812      	ldrb	r2, [r2, #0]
    d5f6:	b2d2      	uxtb	r2, r2
    d5f8:	f042 0210 	orr.w	r2, r2, #16
    d5fc:	b2d2      	uxtb	r2, r2
    d5fe:	701a      	strb	r2, [r3, #0]
    d600:	e00b      	b.n	d61a <radio_control_task+0x65e>
    d602:	f24c 5348 	movw	r3, #50504	; 0xc548
    d606:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d60a:	781b      	ldrb	r3, [r3, #0]
    d60c:	3301      	adds	r3, #1
    d60e:	b2da      	uxtb	r2, r3
    d610:	f24c 5348 	movw	r3, #50504	; 0xc548
    d614:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d618:	701a      	strb	r2, [r3, #0]
      
    // add by wanbo
    //if (pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_roll = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_ROLL], 0., -0.6);
    d61a:	f24c 6350 	movw	r3, #50768	; 0xc650
    d61e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d622:	885b      	ldrh	r3, [r3, #2]
    d624:	b21b      	sxth	r3, r3
    d626:	4618      	mov	r0, r3
    d628:	f00a fec8 	bl	183bc <__aeabi_i2f>
    d62c:	4603      	mov	r3, r0
    d62e:	4618      	mov	r0, r3
    d630:	f04f 0100 	mov.w	r1, #0
    d634:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d638:	f00a ffc8 	bl	185cc <__aeabi_fdiv>
    d63c:	4603      	mov	r3, r0
    d63e:	4618      	mov	r0, r3
    d640:	f00a fa7c 	bl	17b3c <__aeabi_f2d>
    d644:	4602      	mov	r2, r0
    d646:	460b      	mov	r3, r1
    d648:	4610      	mov	r0, r2
    d64a:	4619      	mov	r1, r3
    d64c:	a346      	add	r3, pc, #280	; (adr r3, d768 <radio_control_task+0x7ac>)
    d64e:	e9d3 2300 	ldrd	r2, r3, [r3]
    d652:	f00a fac7 	bl	17be4 <__aeabi_dmul>
    d656:	4602      	mov	r2, r0
    d658:	460b      	mov	r3, r1
    d65a:	4610      	mov	r0, r2
    d65c:	4619      	mov	r1, r3
    d65e:	f04f 0200 	mov.w	r2, #0
    d662:	f04f 0300 	mov.w	r3, #0
    d666:	f00a f90b 	bl	17880 <__adddf3>
    d66a:	4602      	mov	r2, r0
    d66c:	460b      	mov	r3, r1
    d66e:	4610      	mov	r0, r2
    d670:	4619      	mov	r1, r3
    d672:	f00a fd99 	bl	181a8 <__aeabi_d2f>
    d676:	4602      	mov	r2, r0
    d678:	f64c 0374 	movw	r3, #51316	; 0xc874
    d67c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d680:	601a      	str	r2, [r3, #0]
      desired_pitch = FLOAT_OF_PPRZ(from_fbw.channels[RADIO_PITCH], 0., 0.5);
    d682:	f24c 6350 	movw	r3, #50768	; 0xc650
    d686:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d68a:	889b      	ldrh	r3, [r3, #4]
    d68c:	b21b      	sxth	r3, r3
    d68e:	4618      	mov	r0, r3
    d690:	f00a fe94 	bl	183bc <__aeabi_i2f>
    d694:	4603      	mov	r3, r0
    d696:	4618      	mov	r0, r3
    d698:	f04f 0100 	mov.w	r1, #0
    d69c:	f2c4 6116 	movt	r1, #17942	; 0x4616
    d6a0:	f00a ff94 	bl	185cc <__aeabi_fdiv>
    d6a4:	4603      	mov	r3, r0
    d6a6:	4618      	mov	r0, r3
    d6a8:	f00a fa48 	bl	17b3c <__aeabi_f2d>
    d6ac:	4602      	mov	r2, r0
    d6ae:	460b      	mov	r3, r1
    d6b0:	4610      	mov	r0, r2
    d6b2:	4619      	mov	r1, r3
    d6b4:	f04f 0200 	mov.w	r2, #0
    d6b8:	f04f 0300 	mov.w	r3, #0
    d6bc:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
    d6c0:	f00a fa90 	bl	17be4 <__aeabi_dmul>
    d6c4:	4602      	mov	r2, r0
    d6c6:	460b      	mov	r3, r1
    d6c8:	4610      	mov	r0, r2
    d6ca:	4619      	mov	r1, r3
    d6cc:	f04f 0200 	mov.w	r2, #0
    d6d0:	f04f 0300 	mov.w	r3, #0
    d6d4:	f00a f8d4 	bl	17880 <__adddf3>
    d6d8:	4602      	mov	r2, r0
    d6da:	460b      	mov	r3, r1
    d6dc:	4610      	mov	r0, r2
    d6de:	4619      	mov	r1, r3
    d6e0:	f00a fd62 	bl	181a8 <__aeabi_d2f>
    d6e4:	4602      	mov	r2, r0
    d6e6:	f64c 0378 	movw	r3, #51320	; 0xc878
    d6ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6ee:	601a      	str	r2, [r3, #0]
    } // else asynchronously set by course_pid_run()

    // add by wanbo
   // if (pprz_mode == PPRZ_MODE_MANUAL || pprz_mode == PPRZ_MODE_AUTO1) 
    {
      desired_gaz = from_fbw.channels[RADIO_THROTTLE];
    d6f0:	f24c 6350 	movw	r3, #50768	; 0xc650
    d6f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d6f8:	881a      	ldrh	r2, [r3, #0]
    d6fa:	f64c 037c 	movw	r3, #51324	; 0xc87c
    d6fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d702:	801a      	strh	r2, [r3, #0]
      pitch_pgain = PITCH_PGAIN * ( 1 - 1. / 3. * from_fbw.channels[RADIO_THROTTLE] / MAX_PPRZ);
#endif /* ANTON_MAGICAL_MISTERY_GAINS */
    }
    // else asynchronously set by climb_pid_run();

    mcu1_ppm_cpt = from_fbw.ppm_cpt;
    d704:	f24c 6350 	movw	r3, #50768	; 0xc650
    d708:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d70c:	7c9a      	ldrb	r2, [r3, #18]
    d70e:	f24c 5334 	movw	r3, #50484	; 0xc534
    d712:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d716:	701a      	strb	r2, [r3, #0]
    vsupply = from_fbw.vsupply;
    d718:	f24c 6350 	movw	r3, #50768	; 0xc650
    d71c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d720:	7d5a      	ldrb	r2, [r3, #21]
    d722:	f24c 5332 	movw	r3, #50482	; 0xc532
    d726:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d72a:	701a      	strb	r2, [r3, #0]

    events_update();
    d72c:	f7f9 fe26 	bl	737c <events_update>

    // add by wanbo
    //if (!estimator_flight_time) 
    {
      ground_calibrate();
    d730:	f7f8 fc26 	bl	5f80 <ground_calibrate>
      if (pprz_mode == PPRZ_MODE_AUTO2 && from_fbw.channels[RADIO_THROTTLE] > GAZ_THRESHOLD_TAKEOFF) {
    d734:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d738:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d73c:	781b      	ldrb	r3, [r3, #0]
    d73e:	2b02      	cmp	r3, #2
    d740:	d10e      	bne.n	d760 <radio_control_task+0x7a4>
    d742:	f24c 6350 	movw	r3, #50768	; 0xc650
    d746:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d74a:	881b      	ldrh	r3, [r3, #0]
    d74c:	b21b      	sxth	r3, r3
    d74e:	f5b3 5f07 	cmp.w	r3, #8640	; 0x21c0
    d752:	dd05      	ble.n	d760 <radio_control_task+0x7a4>
	launch = TRUE;
    d754:	f24c 5340 	movw	r3, #50496	; 0xc540
    d758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d75c:	2201      	movs	r2, #1
    d75e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

	//vPrintString("S_3 radio_control_task end! \n\r"); //SunnyBeike
}
    d760:	3708      	adds	r7, #8
    d762:	46bd      	mov	sp, r7
    d764:	bd80      	pop	{r7, pc}
    d766:	bf00      	nop
    d768:	33333333 	.word	0x33333333
    d76c:	bfe33333 	.word	0xbfe33333

0000d770 <navigation_update>:

/** \fn void navigation_task( void )
 *  \brief Compute desired_course
 */
void navigation_update( void ) {
    d770:	b580      	push	{r7, lr}
    d772:	af00      	add	r7, sp, #0

  /* Default to keep compatibility with previous behaviour */
  //vPrintString("S_17 Navigation task start!\n\r");
  lateral_mode = LATERAL_MODE_COURSE;
    d774:	f24c 532e 	movw	r3, #50478	; 0xc52e
    d778:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d77c:	2203      	movs	r2, #3
    d77e:	701a      	strb	r2, [r3, #0]
  if (pprz_mode == PPRZ_MODE_HOME)
    d780:	f24c 532c 	movw	r3, #50476	; 0xc52c
    d784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d788:	781b      	ldrb	r3, [r3, #0]
    d78a:	2b03      	cmp	r3, #3
    d78c:	d102      	bne.n	d794 <navigation_update+0x24>
    nav_home();
    d78e:	f007 fa9b 	bl	14cc8 <nav_home>
    d792:	e001      	b.n	d798 <navigation_update+0x28>
  else
    nav_update();
    d794:	f007 fabe 	bl	14d14 <nav_update>
}
    d798:	bd80      	pop	{r7, pc}
    d79a:	bf00      	nop

0000d79c <send_nav_values>:

void send_nav_values(void){
    d79c:	b480      	push	{r7}
    d79e:	af00      	add	r7, sp, #0
  
  DOWNLINK_SEND_NAVIGATION(&nav_block, &nav_stage, &estimator_x, &estimator_y, &desired_course, &dist2_to_wp, &course_pgain, &dist2_to_home);
    d7a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d7a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7a8:	781a      	ldrb	r2, [r3, #0]
    d7aa:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d7ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7b2:	781b      	ldrb	r3, [r3, #0]
    d7b4:	b2db      	uxtb	r3, r3
    d7b6:	429a      	cmp	r2, r3
    d7b8:	d313      	bcc.n	d7e2 <send_nav_values+0x46>
    d7ba:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d7be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7c2:	781b      	ldrb	r3, [r3, #0]
    d7c4:	b2db      	uxtb	r3, r3
    d7c6:	461a      	mov	r2, r3
    d7c8:	f24c 5349 	movw	r3, #50505	; 0xc549
    d7cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7d0:	781b      	ldrb	r3, [r3, #0]
    d7d2:	1ad3      	subs	r3, r2, r3
    d7d4:	33ff      	adds	r3, #255	; 0xff
    d7d6:	2b1e      	cmp	r3, #30
    d7d8:	bfd4      	ite	le
    d7da:	2300      	movle	r3, #0
    d7dc:	2301      	movgt	r3, #1
    d7de:	b2db      	uxtb	r3, r3
    d7e0:	e011      	b.n	d806 <send_nav_values+0x6a>
    d7e2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    d7e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7ea:	781b      	ldrb	r3, [r3, #0]
    d7ec:	b2db      	uxtb	r3, r3
    d7ee:	461a      	mov	r2, r3
    d7f0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d7f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d7f8:	781b      	ldrb	r3, [r3, #0]
    d7fa:	1ad3      	subs	r3, r2, r3
    d7fc:	2b1e      	cmp	r3, #30
    d7fe:	bfd4      	ite	le
    d800:	2300      	movle	r3, #0
    d802:	2301      	movgt	r3, #1
    d804:	b2db      	uxtb	r3, r3
    d806:	2b00      	cmp	r3, #0
    d808:	f001 8094 	beq.w	e934 <send_nav_values+0x1198>
    d80c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d810:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d814:	781b      	ldrb	r3, [r3, #0]
    d816:	461a      	mov	r2, r3
    d818:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d81c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d820:	2105      	movs	r1, #5
    d822:	5499      	strb	r1, [r3, r2]
    d824:	f24c 5349 	movw	r3, #50505	; 0xc549
    d828:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d82c:	781b      	ldrb	r3, [r3, #0]
    d82e:	3301      	adds	r3, #1
    d830:	b2da      	uxtb	r2, r3
    d832:	f24c 5349 	movw	r3, #50505	; 0xc549
    d836:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d83a:	701a      	strb	r2, [r3, #0]
    d83c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d840:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d844:	781b      	ldrb	r3, [r3, #0]
    d846:	2bff      	cmp	r3, #255	; 0xff
    d848:	d105      	bne.n	d856 <send_nav_values+0xba>
    d84a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d84e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d852:	2200      	movs	r2, #0
    d854:	701a      	strb	r2, [r3, #0]
    d856:	f24c 5349 	movw	r3, #50505	; 0xc549
    d85a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d85e:	781b      	ldrb	r3, [r3, #0]
    d860:	461a      	mov	r2, r3
    d862:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d866:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d86a:	210a      	movs	r1, #10
    d86c:	5499      	strb	r1, [r3, r2]
    d86e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d872:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d876:	781b      	ldrb	r3, [r3, #0]
    d878:	3301      	adds	r3, #1
    d87a:	b2da      	uxtb	r2, r3
    d87c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d880:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d884:	701a      	strb	r2, [r3, #0]
    d886:	f24c 5349 	movw	r3, #50505	; 0xc549
    d88a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d88e:	781b      	ldrb	r3, [r3, #0]
    d890:	2bff      	cmp	r3, #255	; 0xff
    d892:	d105      	bne.n	d8a0 <send_nav_values+0x104>
    d894:	f24c 5349 	movw	r3, #50505	; 0xc549
    d898:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d89c:	2200      	movs	r2, #0
    d89e:	701a      	strb	r2, [r3, #0]
    d8a0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d8a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8a8:	220a      	movs	r2, #10
    d8aa:	701a      	strb	r2, [r3, #0]
    d8ac:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d8b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8b4:	220a      	movs	r2, #10
    d8b6:	701a      	strb	r2, [r3, #0]
    d8b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    d8bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8c0:	781b      	ldrb	r3, [r3, #0]
    d8c2:	461a      	mov	r2, r3
    d8c4:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
    d8c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8cc:	7819      	ldrb	r1, [r3, #0]
    d8ce:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d8d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8d6:	5499      	strb	r1, [r3, r2]
    d8d8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d8dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8e0:	781a      	ldrb	r2, [r3, #0]
    d8e2:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
    d8e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8ea:	781b      	ldrb	r3, [r3, #0]
    d8ec:	4413      	add	r3, r2
    d8ee:	b2da      	uxtb	r2, r3
    d8f0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d8f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d8f8:	701a      	strb	r2, [r3, #0]
    d8fa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d8fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d902:	781a      	ldrb	r2, [r3, #0]
    d904:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d90c:	781b      	ldrb	r3, [r3, #0]
    d90e:	4413      	add	r3, r2
    d910:	b2da      	uxtb	r2, r3
    d912:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d916:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d91a:	701a      	strb	r2, [r3, #0]
    d91c:	f24c 5349 	movw	r3, #50505	; 0xc549
    d920:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d924:	781b      	ldrb	r3, [r3, #0]
    d926:	3301      	adds	r3, #1
    d928:	b2da      	uxtb	r2, r3
    d92a:	f24c 5349 	movw	r3, #50505	; 0xc549
    d92e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d932:	701a      	strb	r2, [r3, #0]
    d934:	f24c 5349 	movw	r3, #50505	; 0xc549
    d938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d93c:	781b      	ldrb	r3, [r3, #0]
    d93e:	2bff      	cmp	r3, #255	; 0xff
    d940:	d105      	bne.n	d94e <send_nav_values+0x1b2>
    d942:	f24c 5349 	movw	r3, #50505	; 0xc549
    d946:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d94a:	2200      	movs	r2, #0
    d94c:	701a      	strb	r2, [r3, #0]
    d94e:	f24c 5349 	movw	r3, #50505	; 0xc549
    d952:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d956:	781b      	ldrb	r3, [r3, #0]
    d958:	461a      	mov	r2, r3
    d95a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
    d95e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d962:	7819      	ldrb	r1, [r3, #0]
    d964:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d968:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d96c:	5499      	strb	r1, [r3, r2]
    d96e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d972:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d976:	781a      	ldrb	r2, [r3, #0]
    d978:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
    d97c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d980:	781b      	ldrb	r3, [r3, #0]
    d982:	4413      	add	r3, r2
    d984:	b2da      	uxtb	r2, r3
    d986:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d98a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d98e:	701a      	strb	r2, [r3, #0]
    d990:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d994:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d998:	781a      	ldrb	r2, [r3, #0]
    d99a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    d99e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9a2:	781b      	ldrb	r3, [r3, #0]
    d9a4:	4413      	add	r3, r2
    d9a6:	b2da      	uxtb	r2, r3
    d9a8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    d9ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9b0:	701a      	strb	r2, [r3, #0]
    d9b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    d9b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9ba:	781b      	ldrb	r3, [r3, #0]
    d9bc:	3301      	adds	r3, #1
    d9be:	b2da      	uxtb	r2, r3
    d9c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    d9c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9c8:	701a      	strb	r2, [r3, #0]
    d9ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    d9ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9d2:	781b      	ldrb	r3, [r3, #0]
    d9d4:	2bff      	cmp	r3, #255	; 0xff
    d9d6:	d105      	bne.n	d9e4 <send_nav_values+0x248>
    d9d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    d9dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9e0:	2200      	movs	r2, #0
    d9e2:	701a      	strb	r2, [r3, #0]
    d9e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    d9e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9ec:	781b      	ldrb	r3, [r3, #0]
    d9ee:	461a      	mov	r2, r3
    d9f0:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    d9f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    d9f8:	7819      	ldrb	r1, [r3, #0]
    d9fa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    d9fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da02:	5499      	strb	r1, [r3, r2]
    da04:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    da08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da0c:	781a      	ldrb	r2, [r3, #0]
    da0e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    da12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da16:	781b      	ldrb	r3, [r3, #0]
    da18:	4413      	add	r3, r2
    da1a:	b2da      	uxtb	r2, r3
    da1c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    da20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da24:	701a      	strb	r2, [r3, #0]
    da26:	f24c 634e 	movw	r3, #50766	; 0xc64e
    da2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da2e:	781a      	ldrb	r2, [r3, #0]
    da30:	f24c 634d 	movw	r3, #50765	; 0xc64d
    da34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da38:	781b      	ldrb	r3, [r3, #0]
    da3a:	4413      	add	r3, r2
    da3c:	b2da      	uxtb	r2, r3
    da3e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    da42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da46:	701a      	strb	r2, [r3, #0]
    da48:	f24c 5349 	movw	r3, #50505	; 0xc549
    da4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da50:	781b      	ldrb	r3, [r3, #0]
    da52:	3301      	adds	r3, #1
    da54:	b2da      	uxtb	r2, r3
    da56:	f24c 5349 	movw	r3, #50505	; 0xc549
    da5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da5e:	701a      	strb	r2, [r3, #0]
    da60:	f24c 5349 	movw	r3, #50505	; 0xc549
    da64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da68:	781b      	ldrb	r3, [r3, #0]
    da6a:	2bff      	cmp	r3, #255	; 0xff
    da6c:	d105      	bne.n	da7a <send_nav_values+0x2de>
    da6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    da72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da76:	2200      	movs	r2, #0
    da78:	701a      	strb	r2, [r3, #0]
    da7a:	f24c 5349 	movw	r3, #50505	; 0xc549
    da7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da82:	781b      	ldrb	r3, [r3, #0]
    da84:	461a      	mov	r2, r3
    da86:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    da8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da8e:	7859      	ldrb	r1, [r3, #1]
    da90:	f24c 534c 	movw	r3, #50508	; 0xc54c
    da94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    da98:	5499      	strb	r1, [r3, r2]
    da9a:	4bd2      	ldr	r3, [pc, #840]	; (dde4 <send_nav_values+0x648>)
    da9c:	781a      	ldrb	r2, [r3, #0]
    da9e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    daa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daa6:	781b      	ldrb	r3, [r3, #0]
    daa8:	4413      	add	r3, r2
    daaa:	b2da      	uxtb	r2, r3
    daac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dab4:	701a      	strb	r2, [r3, #0]
    dab6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    daba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dabe:	781a      	ldrb	r2, [r3, #0]
    dac0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dac8:	781b      	ldrb	r3, [r3, #0]
    daca:	4413      	add	r3, r2
    dacc:	b2da      	uxtb	r2, r3
    dace:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dad2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dad6:	701a      	strb	r2, [r3, #0]
    dad8:	f24c 5349 	movw	r3, #50505	; 0xc549
    dadc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dae0:	781b      	ldrb	r3, [r3, #0]
    dae2:	3301      	adds	r3, #1
    dae4:	b2da      	uxtb	r2, r3
    dae6:	f24c 5349 	movw	r3, #50505	; 0xc549
    daea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daee:	701a      	strb	r2, [r3, #0]
    daf0:	f24c 5349 	movw	r3, #50505	; 0xc549
    daf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    daf8:	781b      	ldrb	r3, [r3, #0]
    dafa:	2bff      	cmp	r3, #255	; 0xff
    dafc:	d105      	bne.n	db0a <send_nav_values+0x36e>
    dafe:	f24c 5349 	movw	r3, #50505	; 0xc549
    db02:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db06:	2200      	movs	r2, #0
    db08:	701a      	strb	r2, [r3, #0]
    db0a:	f24c 5349 	movw	r3, #50505	; 0xc549
    db0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db12:	781b      	ldrb	r3, [r3, #0]
    db14:	461a      	mov	r2, r3
    db16:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    db1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db1e:	7899      	ldrb	r1, [r3, #2]
    db20:	f24c 534c 	movw	r3, #50508	; 0xc54c
    db24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db28:	5499      	strb	r1, [r3, r2]
    db2a:	4baf      	ldr	r3, [pc, #700]	; (dde8 <send_nav_values+0x64c>)
    db2c:	781a      	ldrb	r2, [r3, #0]
    db2e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    db32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db36:	781b      	ldrb	r3, [r3, #0]
    db38:	4413      	add	r3, r2
    db3a:	b2da      	uxtb	r2, r3
    db3c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    db40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db44:	701a      	strb	r2, [r3, #0]
    db46:	f24c 634e 	movw	r3, #50766	; 0xc64e
    db4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db4e:	781a      	ldrb	r2, [r3, #0]
    db50:	f24c 634d 	movw	r3, #50765	; 0xc64d
    db54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db58:	781b      	ldrb	r3, [r3, #0]
    db5a:	4413      	add	r3, r2
    db5c:	b2da      	uxtb	r2, r3
    db5e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    db62:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db66:	701a      	strb	r2, [r3, #0]
    db68:	f24c 5349 	movw	r3, #50505	; 0xc549
    db6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db70:	781b      	ldrb	r3, [r3, #0]
    db72:	3301      	adds	r3, #1
    db74:	b2da      	uxtb	r2, r3
    db76:	f24c 5349 	movw	r3, #50505	; 0xc549
    db7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db7e:	701a      	strb	r2, [r3, #0]
    db80:	f24c 5349 	movw	r3, #50505	; 0xc549
    db84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db88:	781b      	ldrb	r3, [r3, #0]
    db8a:	2bff      	cmp	r3, #255	; 0xff
    db8c:	d105      	bne.n	db9a <send_nav_values+0x3fe>
    db8e:	f24c 5349 	movw	r3, #50505	; 0xc549
    db92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    db96:	2200      	movs	r2, #0
    db98:	701a      	strb	r2, [r3, #0]
    db9a:	f24c 5349 	movw	r3, #50505	; 0xc549
    db9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dba2:	781b      	ldrb	r3, [r3, #0]
    dba4:	461a      	mov	r2, r3
    dba6:	f64c 23fc 	movw	r3, #51964	; 0xcafc
    dbaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbae:	78d9      	ldrb	r1, [r3, #3]
    dbb0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dbb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbb8:	5499      	strb	r1, [r3, r2]
    dbba:	4b8c      	ldr	r3, [pc, #560]	; (ddec <send_nav_values+0x650>)
    dbbc:	781a      	ldrb	r2, [r3, #0]
    dbbe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dbc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbc6:	781b      	ldrb	r3, [r3, #0]
    dbc8:	4413      	add	r3, r2
    dbca:	b2da      	uxtb	r2, r3
    dbcc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dbd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbd4:	701a      	strb	r2, [r3, #0]
    dbd6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dbda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbde:	781a      	ldrb	r2, [r3, #0]
    dbe0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dbe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbe8:	781b      	ldrb	r3, [r3, #0]
    dbea:	4413      	add	r3, r2
    dbec:	b2da      	uxtb	r2, r3
    dbee:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dbf2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dbf6:	701a      	strb	r2, [r3, #0]
    dbf8:	f24c 5349 	movw	r3, #50505	; 0xc549
    dbfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc00:	781b      	ldrb	r3, [r3, #0]
    dc02:	3301      	adds	r3, #1
    dc04:	b2da      	uxtb	r2, r3
    dc06:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc0e:	701a      	strb	r2, [r3, #0]
    dc10:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc18:	781b      	ldrb	r3, [r3, #0]
    dc1a:	2bff      	cmp	r3, #255	; 0xff
    dc1c:	d105      	bne.n	dc2a <send_nav_values+0x48e>
    dc1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc26:	2200      	movs	r2, #0
    dc28:	701a      	strb	r2, [r3, #0]
    dc2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc32:	781b      	ldrb	r3, [r3, #0]
    dc34:	461a      	mov	r2, r3
    dc36:	f64c 3300 	movw	r3, #51968	; 0xcb00
    dc3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc3e:	7819      	ldrb	r1, [r3, #0]
    dc40:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dc44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc48:	5499      	strb	r1, [r3, r2]
    dc4a:	f64c 3300 	movw	r3, #51968	; 0xcb00
    dc4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc52:	781a      	ldrb	r2, [r3, #0]
    dc54:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dc58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc5c:	781b      	ldrb	r3, [r3, #0]
    dc5e:	4413      	add	r3, r2
    dc60:	b2da      	uxtb	r2, r3
    dc62:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dc66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc6a:	701a      	strb	r2, [r3, #0]
    dc6c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dc70:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc74:	781a      	ldrb	r2, [r3, #0]
    dc76:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dc7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc7e:	781b      	ldrb	r3, [r3, #0]
    dc80:	4413      	add	r3, r2
    dc82:	b2da      	uxtb	r2, r3
    dc84:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dc88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc8c:	701a      	strb	r2, [r3, #0]
    dc8e:	f24c 5349 	movw	r3, #50505	; 0xc549
    dc92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dc96:	781b      	ldrb	r3, [r3, #0]
    dc98:	3301      	adds	r3, #1
    dc9a:	b2da      	uxtb	r2, r3
    dc9c:	f24c 5349 	movw	r3, #50505	; 0xc549
    dca0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dca4:	701a      	strb	r2, [r3, #0]
    dca6:	f24c 5349 	movw	r3, #50505	; 0xc549
    dcaa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcae:	781b      	ldrb	r3, [r3, #0]
    dcb0:	2bff      	cmp	r3, #255	; 0xff
    dcb2:	d105      	bne.n	dcc0 <send_nav_values+0x524>
    dcb4:	f24c 5349 	movw	r3, #50505	; 0xc549
    dcb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcbc:	2200      	movs	r2, #0
    dcbe:	701a      	strb	r2, [r3, #0]
    dcc0:	f24c 5349 	movw	r3, #50505	; 0xc549
    dcc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcc8:	781b      	ldrb	r3, [r3, #0]
    dcca:	461a      	mov	r2, r3
    dccc:	f64c 3300 	movw	r3, #51968	; 0xcb00
    dcd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcd4:	7859      	ldrb	r1, [r3, #1]
    dcd6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dcda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcde:	5499      	strb	r1, [r3, r2]
    dce0:	4b43      	ldr	r3, [pc, #268]	; (ddf0 <send_nav_values+0x654>)
    dce2:	781a      	ldrb	r2, [r3, #0]
    dce4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dce8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcec:	781b      	ldrb	r3, [r3, #0]
    dcee:	4413      	add	r3, r2
    dcf0:	b2da      	uxtb	r2, r3
    dcf2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dcf6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dcfa:	701a      	strb	r2, [r3, #0]
    dcfc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dd00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd04:	781a      	ldrb	r2, [r3, #0]
    dd06:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dd0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd0e:	781b      	ldrb	r3, [r3, #0]
    dd10:	4413      	add	r3, r2
    dd12:	b2da      	uxtb	r2, r3
    dd14:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dd18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd1c:	701a      	strb	r2, [r3, #0]
    dd1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd26:	781b      	ldrb	r3, [r3, #0]
    dd28:	3301      	adds	r3, #1
    dd2a:	b2da      	uxtb	r2, r3
    dd2c:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd30:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd34:	701a      	strb	r2, [r3, #0]
    dd36:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd3e:	781b      	ldrb	r3, [r3, #0]
    dd40:	2bff      	cmp	r3, #255	; 0xff
    dd42:	d105      	bne.n	dd50 <send_nav_values+0x5b4>
    dd44:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd48:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd4c:	2200      	movs	r2, #0
    dd4e:	701a      	strb	r2, [r3, #0]
    dd50:	f24c 5349 	movw	r3, #50505	; 0xc549
    dd54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd58:	781b      	ldrb	r3, [r3, #0]
    dd5a:	461a      	mov	r2, r3
    dd5c:	f64c 3300 	movw	r3, #51968	; 0xcb00
    dd60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd64:	7899      	ldrb	r1, [r3, #2]
    dd66:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dd6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd6e:	5499      	strb	r1, [r3, r2]
    dd70:	4b20      	ldr	r3, [pc, #128]	; (ddf4 <send_nav_values+0x658>)
    dd72:	781a      	ldrb	r2, [r3, #0]
    dd74:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dd78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd7c:	781b      	ldrb	r3, [r3, #0]
    dd7e:	4413      	add	r3, r2
    dd80:	b2da      	uxtb	r2, r3
    dd82:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dd86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd8a:	701a      	strb	r2, [r3, #0]
    dd8c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dd90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd94:	781a      	ldrb	r2, [r3, #0]
    dd96:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dd9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dd9e:	781b      	ldrb	r3, [r3, #0]
    dda0:	4413      	add	r3, r2
    dda2:	b2da      	uxtb	r2, r3
    dda4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dda8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddac:	701a      	strb	r2, [r3, #0]
    ddae:	f24c 5349 	movw	r3, #50505	; 0xc549
    ddb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddb6:	781b      	ldrb	r3, [r3, #0]
    ddb8:	3301      	adds	r3, #1
    ddba:	b2da      	uxtb	r2, r3
    ddbc:	f24c 5349 	movw	r3, #50505	; 0xc549
    ddc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddc4:	701a      	strb	r2, [r3, #0]
    ddc6:	f24c 5349 	movw	r3, #50505	; 0xc549
    ddca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ddce:	781b      	ldrb	r3, [r3, #0]
    ddd0:	2bff      	cmp	r3, #255	; 0xff
    ddd2:	d111      	bne.n	ddf8 <send_nav_values+0x65c>
    ddd4:	f24c 5349 	movw	r3, #50505	; 0xc549
    ddd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dddc:	2200      	movs	r2, #0
    ddde:	701a      	strb	r2, [r3, #0]
    dde0:	e00a      	b.n	ddf8 <send_nav_values+0x65c>
    dde2:	bf00      	nop
    dde4:	2004cafd 	.word	0x2004cafd
    dde8:	2004cafe 	.word	0x2004cafe
    ddec:	2004caff 	.word	0x2004caff
    ddf0:	2004cb01 	.word	0x2004cb01
    ddf4:	2004cb02 	.word	0x2004cb02
    ddf8:	f24c 5349 	movw	r3, #50505	; 0xc549
    ddfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de00:	781b      	ldrb	r3, [r3, #0]
    de02:	461a      	mov	r2, r3
    de04:	f64c 3300 	movw	r3, #51968	; 0xcb00
    de08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de0c:	78d9      	ldrb	r1, [r3, #3]
    de0e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    de12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de16:	5499      	strb	r1, [r3, r2]
    de18:	4bd3      	ldr	r3, [pc, #844]	; (e168 <send_nav_values+0x9cc>)
    de1a:	781a      	ldrb	r2, [r3, #0]
    de1c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    de20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de24:	781b      	ldrb	r3, [r3, #0]
    de26:	4413      	add	r3, r2
    de28:	b2da      	uxtb	r2, r3
    de2a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    de2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de32:	701a      	strb	r2, [r3, #0]
    de34:	f24c 634e 	movw	r3, #50766	; 0xc64e
    de38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de3c:	781a      	ldrb	r2, [r3, #0]
    de3e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    de42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de46:	781b      	ldrb	r3, [r3, #0]
    de48:	4413      	add	r3, r2
    de4a:	b2da      	uxtb	r2, r3
    de4c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    de50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de54:	701a      	strb	r2, [r3, #0]
    de56:	f24c 5349 	movw	r3, #50505	; 0xc549
    de5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de5e:	781b      	ldrb	r3, [r3, #0]
    de60:	3301      	adds	r3, #1
    de62:	b2da      	uxtb	r2, r3
    de64:	f24c 5349 	movw	r3, #50505	; 0xc549
    de68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de6c:	701a      	strb	r2, [r3, #0]
    de6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    de72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de76:	781b      	ldrb	r3, [r3, #0]
    de78:	2bff      	cmp	r3, #255	; 0xff
    de7a:	d105      	bne.n	de88 <send_nav_values+0x6ec>
    de7c:	f24c 5349 	movw	r3, #50505	; 0xc549
    de80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de84:	2200      	movs	r2, #0
    de86:	701a      	strb	r2, [r3, #0]
    de88:	f24c 5349 	movw	r3, #50505	; 0xc549
    de8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de90:	781b      	ldrb	r3, [r3, #0]
    de92:	461a      	mov	r2, r3
    de94:	f64c 038c 	movw	r3, #51340	; 0xc88c
    de98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    de9c:	7819      	ldrb	r1, [r3, #0]
    de9e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dea6:	5499      	strb	r1, [r3, r2]
    dea8:	f64c 038c 	movw	r3, #51340	; 0xc88c
    deac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deb0:	781a      	ldrb	r2, [r3, #0]
    deb2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    deb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deba:	781b      	ldrb	r3, [r3, #0]
    debc:	4413      	add	r3, r2
    debe:	b2da      	uxtb	r2, r3
    dec0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dec8:	701a      	strb	r2, [r3, #0]
    deca:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dece:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ded2:	781a      	ldrb	r2, [r3, #0]
    ded4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ded8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dedc:	781b      	ldrb	r3, [r3, #0]
    dede:	4413      	add	r3, r2
    dee0:	b2da      	uxtb	r2, r3
    dee2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    deea:	701a      	strb	r2, [r3, #0]
    deec:	f24c 5349 	movw	r3, #50505	; 0xc549
    def0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    def4:	781b      	ldrb	r3, [r3, #0]
    def6:	3301      	adds	r3, #1
    def8:	b2da      	uxtb	r2, r3
    defa:	f24c 5349 	movw	r3, #50505	; 0xc549
    defe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df02:	701a      	strb	r2, [r3, #0]
    df04:	f24c 5349 	movw	r3, #50505	; 0xc549
    df08:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df0c:	781b      	ldrb	r3, [r3, #0]
    df0e:	2bff      	cmp	r3, #255	; 0xff
    df10:	d105      	bne.n	df1e <send_nav_values+0x782>
    df12:	f24c 5349 	movw	r3, #50505	; 0xc549
    df16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df1a:	2200      	movs	r2, #0
    df1c:	701a      	strb	r2, [r3, #0]
    df1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    df22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df26:	781b      	ldrb	r3, [r3, #0]
    df28:	461a      	mov	r2, r3
    df2a:	f64c 038c 	movw	r3, #51340	; 0xc88c
    df2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df32:	7859      	ldrb	r1, [r3, #1]
    df34:	f24c 534c 	movw	r3, #50508	; 0xc54c
    df38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df3c:	5499      	strb	r1, [r3, r2]
    df3e:	4b8b      	ldr	r3, [pc, #556]	; (e16c <send_nav_values+0x9d0>)
    df40:	781a      	ldrb	r2, [r3, #0]
    df42:	f24c 634d 	movw	r3, #50765	; 0xc64d
    df46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df4a:	781b      	ldrb	r3, [r3, #0]
    df4c:	4413      	add	r3, r2
    df4e:	b2da      	uxtb	r2, r3
    df50:	f24c 634d 	movw	r3, #50765	; 0xc64d
    df54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df58:	701a      	strb	r2, [r3, #0]
    df5a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    df5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df62:	781a      	ldrb	r2, [r3, #0]
    df64:	f24c 634d 	movw	r3, #50765	; 0xc64d
    df68:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df6c:	781b      	ldrb	r3, [r3, #0]
    df6e:	4413      	add	r3, r2
    df70:	b2da      	uxtb	r2, r3
    df72:	f24c 634e 	movw	r3, #50766	; 0xc64e
    df76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df7a:	701a      	strb	r2, [r3, #0]
    df7c:	f24c 5349 	movw	r3, #50505	; 0xc549
    df80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df84:	781b      	ldrb	r3, [r3, #0]
    df86:	3301      	adds	r3, #1
    df88:	b2da      	uxtb	r2, r3
    df8a:	f24c 5349 	movw	r3, #50505	; 0xc549
    df8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df92:	701a      	strb	r2, [r3, #0]
    df94:	f24c 5349 	movw	r3, #50505	; 0xc549
    df98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    df9c:	781b      	ldrb	r3, [r3, #0]
    df9e:	2bff      	cmp	r3, #255	; 0xff
    dfa0:	d105      	bne.n	dfae <send_nav_values+0x812>
    dfa2:	f24c 5349 	movw	r3, #50505	; 0xc549
    dfa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfaa:	2200      	movs	r2, #0
    dfac:	701a      	strb	r2, [r3, #0]
    dfae:	f24c 5349 	movw	r3, #50505	; 0xc549
    dfb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfb6:	781b      	ldrb	r3, [r3, #0]
    dfb8:	461a      	mov	r2, r3
    dfba:	f64c 038c 	movw	r3, #51340	; 0xc88c
    dfbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfc2:	7899      	ldrb	r1, [r3, #2]
    dfc4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    dfc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfcc:	5499      	strb	r1, [r3, r2]
    dfce:	4b68      	ldr	r3, [pc, #416]	; (e170 <send_nav_values+0x9d4>)
    dfd0:	781a      	ldrb	r2, [r3, #0]
    dfd2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dfd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfda:	781b      	ldrb	r3, [r3, #0]
    dfdc:	4413      	add	r3, r2
    dfde:	b2da      	uxtb	r2, r3
    dfe0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dfe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dfe8:	701a      	strb	r2, [r3, #0]
    dfea:	f24c 634e 	movw	r3, #50766	; 0xc64e
    dfee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dff2:	781a      	ldrb	r2, [r3, #0]
    dff4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    dff8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    dffc:	781b      	ldrb	r3, [r3, #0]
    dffe:	4413      	add	r3, r2
    e000:	b2da      	uxtb	r2, r3
    e002:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e006:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e00a:	701a      	strb	r2, [r3, #0]
    e00c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e010:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e014:	781b      	ldrb	r3, [r3, #0]
    e016:	3301      	adds	r3, #1
    e018:	b2da      	uxtb	r2, r3
    e01a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e01e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e022:	701a      	strb	r2, [r3, #0]
    e024:	f24c 5349 	movw	r3, #50505	; 0xc549
    e028:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e02c:	781b      	ldrb	r3, [r3, #0]
    e02e:	2bff      	cmp	r3, #255	; 0xff
    e030:	d105      	bne.n	e03e <send_nav_values+0x8a2>
    e032:	f24c 5349 	movw	r3, #50505	; 0xc549
    e036:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e03a:	2200      	movs	r2, #0
    e03c:	701a      	strb	r2, [r3, #0]
    e03e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e042:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e046:	781b      	ldrb	r3, [r3, #0]
    e048:	461a      	mov	r2, r3
    e04a:	f64c 038c 	movw	r3, #51340	; 0xc88c
    e04e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e052:	78d9      	ldrb	r1, [r3, #3]
    e054:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e058:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e05c:	5499      	strb	r1, [r3, r2]
    e05e:	4b45      	ldr	r3, [pc, #276]	; (e174 <send_nav_values+0x9d8>)
    e060:	781a      	ldrb	r2, [r3, #0]
    e062:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e066:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e06a:	781b      	ldrb	r3, [r3, #0]
    e06c:	4413      	add	r3, r2
    e06e:	b2da      	uxtb	r2, r3
    e070:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e074:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e078:	701a      	strb	r2, [r3, #0]
    e07a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e07e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e082:	781a      	ldrb	r2, [r3, #0]
    e084:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e088:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e08c:	781b      	ldrb	r3, [r3, #0]
    e08e:	4413      	add	r3, r2
    e090:	b2da      	uxtb	r2, r3
    e092:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e096:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e09a:	701a      	strb	r2, [r3, #0]
    e09c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e0a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0a4:	781b      	ldrb	r3, [r3, #0]
    e0a6:	3301      	adds	r3, #1
    e0a8:	b2da      	uxtb	r2, r3
    e0aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    e0ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0b2:	701a      	strb	r2, [r3, #0]
    e0b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    e0b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0bc:	781b      	ldrb	r3, [r3, #0]
    e0be:	2bff      	cmp	r3, #255	; 0xff
    e0c0:	d105      	bne.n	e0ce <send_nav_values+0x932>
    e0c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    e0c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0ca:	2200      	movs	r2, #0
    e0cc:	701a      	strb	r2, [r3, #0]
    e0ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    e0d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0d6:	781b      	ldrb	r3, [r3, #0]
    e0d8:	461a      	mov	r2, r3
    e0da:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e0de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0e2:	7819      	ldrb	r1, [r3, #0]
    e0e4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e0e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0ec:	5499      	strb	r1, [r3, r2]
    e0ee:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e0f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e0f6:	781a      	ldrb	r2, [r3, #0]
    e0f8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e0fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e100:	781b      	ldrb	r3, [r3, #0]
    e102:	4413      	add	r3, r2
    e104:	b2da      	uxtb	r2, r3
    e106:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e10a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e10e:	701a      	strb	r2, [r3, #0]
    e110:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e114:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e118:	781a      	ldrb	r2, [r3, #0]
    e11a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e11e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e122:	781b      	ldrb	r3, [r3, #0]
    e124:	4413      	add	r3, r2
    e126:	b2da      	uxtb	r2, r3
    e128:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e12c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e130:	701a      	strb	r2, [r3, #0]
    e132:	f24c 5349 	movw	r3, #50505	; 0xc549
    e136:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e13a:	781b      	ldrb	r3, [r3, #0]
    e13c:	3301      	adds	r3, #1
    e13e:	b2da      	uxtb	r2, r3
    e140:	f24c 5349 	movw	r3, #50505	; 0xc549
    e144:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e148:	701a      	strb	r2, [r3, #0]
    e14a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e14e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e152:	781b      	ldrb	r3, [r3, #0]
    e154:	2bff      	cmp	r3, #255	; 0xff
    e156:	d10f      	bne.n	e178 <send_nav_values+0x9dc>
    e158:	f24c 5349 	movw	r3, #50505	; 0xc549
    e15c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e160:	2200      	movs	r2, #0
    e162:	701a      	strb	r2, [r3, #0]
    e164:	e008      	b.n	e178 <send_nav_values+0x9dc>
    e166:	bf00      	nop
    e168:	2004cb03 	.word	0x2004cb03
    e16c:	2004c88d 	.word	0x2004c88d
    e170:	2004c88e 	.word	0x2004c88e
    e174:	2004c88f 	.word	0x2004c88f
    e178:	f24c 5349 	movw	r3, #50505	; 0xc549
    e17c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e180:	781b      	ldrb	r3, [r3, #0]
    e182:	461a      	mov	r2, r3
    e184:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e188:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e18c:	7859      	ldrb	r1, [r3, #1]
    e18e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e192:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e196:	5499      	strb	r1, [r3, r2]
    e198:	4bd1      	ldr	r3, [pc, #836]	; (e4e0 <send_nav_values+0xd44>)
    e19a:	781a      	ldrb	r2, [r3, #0]
    e19c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e1a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1a4:	781b      	ldrb	r3, [r3, #0]
    e1a6:	4413      	add	r3, r2
    e1a8:	b2da      	uxtb	r2, r3
    e1aa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e1ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1b2:	701a      	strb	r2, [r3, #0]
    e1b4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e1b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1bc:	781a      	ldrb	r2, [r3, #0]
    e1be:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e1c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1c6:	781b      	ldrb	r3, [r3, #0]
    e1c8:	4413      	add	r3, r2
    e1ca:	b2da      	uxtb	r2, r3
    e1cc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e1d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1d4:	701a      	strb	r2, [r3, #0]
    e1d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e1da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1de:	781b      	ldrb	r3, [r3, #0]
    e1e0:	3301      	adds	r3, #1
    e1e2:	b2da      	uxtb	r2, r3
    e1e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    e1e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1ec:	701a      	strb	r2, [r3, #0]
    e1ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    e1f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e1f6:	781b      	ldrb	r3, [r3, #0]
    e1f8:	2bff      	cmp	r3, #255	; 0xff
    e1fa:	d105      	bne.n	e208 <send_nav_values+0xa6c>
    e1fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    e200:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e204:	2200      	movs	r2, #0
    e206:	701a      	strb	r2, [r3, #0]
    e208:	f24c 5349 	movw	r3, #50505	; 0xc549
    e20c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e210:	781b      	ldrb	r3, [r3, #0]
    e212:	461a      	mov	r2, r3
    e214:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e218:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e21c:	7899      	ldrb	r1, [r3, #2]
    e21e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e226:	5499      	strb	r1, [r3, r2]
    e228:	4bae      	ldr	r3, [pc, #696]	; (e4e4 <send_nav_values+0xd48>)
    e22a:	781a      	ldrb	r2, [r3, #0]
    e22c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e230:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e234:	781b      	ldrb	r3, [r3, #0]
    e236:	4413      	add	r3, r2
    e238:	b2da      	uxtb	r2, r3
    e23a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e23e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e242:	701a      	strb	r2, [r3, #0]
    e244:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e248:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e24c:	781a      	ldrb	r2, [r3, #0]
    e24e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e252:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e256:	781b      	ldrb	r3, [r3, #0]
    e258:	4413      	add	r3, r2
    e25a:	b2da      	uxtb	r2, r3
    e25c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e260:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e264:	701a      	strb	r2, [r3, #0]
    e266:	f24c 5349 	movw	r3, #50505	; 0xc549
    e26a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e26e:	781b      	ldrb	r3, [r3, #0]
    e270:	3301      	adds	r3, #1
    e272:	b2da      	uxtb	r2, r3
    e274:	f24c 5349 	movw	r3, #50505	; 0xc549
    e278:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e27c:	701a      	strb	r2, [r3, #0]
    e27e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e282:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e286:	781b      	ldrb	r3, [r3, #0]
    e288:	2bff      	cmp	r3, #255	; 0xff
    e28a:	d105      	bne.n	e298 <send_nav_values+0xafc>
    e28c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e290:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e294:	2200      	movs	r2, #0
    e296:	701a      	strb	r2, [r3, #0]
    e298:	f24c 5349 	movw	r3, #50505	; 0xc549
    e29c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2a0:	781b      	ldrb	r3, [r3, #0]
    e2a2:	461a      	mov	r2, r3
    e2a4:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
    e2a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2ac:	78d9      	ldrb	r1, [r3, #3]
    e2ae:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e2b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2b6:	5499      	strb	r1, [r3, r2]
    e2b8:	4b8b      	ldr	r3, [pc, #556]	; (e4e8 <send_nav_values+0xd4c>)
    e2ba:	781a      	ldrb	r2, [r3, #0]
    e2bc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e2c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2c4:	781b      	ldrb	r3, [r3, #0]
    e2c6:	4413      	add	r3, r2
    e2c8:	b2da      	uxtb	r2, r3
    e2ca:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e2ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2d2:	701a      	strb	r2, [r3, #0]
    e2d4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e2d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2dc:	781a      	ldrb	r2, [r3, #0]
    e2de:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e2e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2e6:	781b      	ldrb	r3, [r3, #0]
    e2e8:	4413      	add	r3, r2
    e2ea:	b2da      	uxtb	r2, r3
    e2ec:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e2f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2f4:	701a      	strb	r2, [r3, #0]
    e2f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e2fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e2fe:	781b      	ldrb	r3, [r3, #0]
    e300:	3301      	adds	r3, #1
    e302:	b2da      	uxtb	r2, r3
    e304:	f24c 5349 	movw	r3, #50505	; 0xc549
    e308:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e30c:	701a      	strb	r2, [r3, #0]
    e30e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e312:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e316:	781b      	ldrb	r3, [r3, #0]
    e318:	2bff      	cmp	r3, #255	; 0xff
    e31a:	d105      	bne.n	e328 <send_nav_values+0xb8c>
    e31c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e320:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e324:	2200      	movs	r2, #0
    e326:	701a      	strb	r2, [r3, #0]
    e328:	f24c 5349 	movw	r3, #50505	; 0xc549
    e32c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e330:	781b      	ldrb	r3, [r3, #0]
    e332:	461a      	mov	r2, r3
    e334:	f240 5358 	movw	r3, #1368	; 0x558
    e338:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e33c:	7819      	ldrb	r1, [r3, #0]
    e33e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e342:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e346:	5499      	strb	r1, [r3, r2]
    e348:	f240 5358 	movw	r3, #1368	; 0x558
    e34c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e350:	781a      	ldrb	r2, [r3, #0]
    e352:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e356:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e35a:	781b      	ldrb	r3, [r3, #0]
    e35c:	4413      	add	r3, r2
    e35e:	b2da      	uxtb	r2, r3
    e360:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e368:	701a      	strb	r2, [r3, #0]
    e36a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e36e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e372:	781a      	ldrb	r2, [r3, #0]
    e374:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e37c:	781b      	ldrb	r3, [r3, #0]
    e37e:	4413      	add	r3, r2
    e380:	b2da      	uxtb	r2, r3
    e382:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e386:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e38a:	701a      	strb	r2, [r3, #0]
    e38c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e394:	781b      	ldrb	r3, [r3, #0]
    e396:	3301      	adds	r3, #1
    e398:	b2da      	uxtb	r2, r3
    e39a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e39e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3a2:	701a      	strb	r2, [r3, #0]
    e3a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    e3a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3ac:	781b      	ldrb	r3, [r3, #0]
    e3ae:	2bff      	cmp	r3, #255	; 0xff
    e3b0:	d105      	bne.n	e3be <send_nav_values+0xc22>
    e3b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    e3b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3ba:	2200      	movs	r2, #0
    e3bc:	701a      	strb	r2, [r3, #0]
    e3be:	f24c 5349 	movw	r3, #50505	; 0xc549
    e3c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3c6:	781b      	ldrb	r3, [r3, #0]
    e3c8:	461a      	mov	r2, r3
    e3ca:	f240 5358 	movw	r3, #1368	; 0x558
    e3ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e3d2:	7859      	ldrb	r1, [r3, #1]
    e3d4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e3d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3dc:	5499      	strb	r1, [r3, r2]
    e3de:	4b43      	ldr	r3, [pc, #268]	; (e4ec <send_nav_values+0xd50>)
    e3e0:	781a      	ldrb	r2, [r3, #0]
    e3e2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e3e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3ea:	781b      	ldrb	r3, [r3, #0]
    e3ec:	4413      	add	r3, r2
    e3ee:	b2da      	uxtb	r2, r3
    e3f0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e3f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e3f8:	701a      	strb	r2, [r3, #0]
    e3fa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e3fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e402:	781a      	ldrb	r2, [r3, #0]
    e404:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e40c:	781b      	ldrb	r3, [r3, #0]
    e40e:	4413      	add	r3, r2
    e410:	b2da      	uxtb	r2, r3
    e412:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e41a:	701a      	strb	r2, [r3, #0]
    e41c:	f24c 5349 	movw	r3, #50505	; 0xc549
    e420:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e424:	781b      	ldrb	r3, [r3, #0]
    e426:	3301      	adds	r3, #1
    e428:	b2da      	uxtb	r2, r3
    e42a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e42e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e432:	701a      	strb	r2, [r3, #0]
    e434:	f24c 5349 	movw	r3, #50505	; 0xc549
    e438:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e43c:	781b      	ldrb	r3, [r3, #0]
    e43e:	2bff      	cmp	r3, #255	; 0xff
    e440:	d105      	bne.n	e44e <send_nav_values+0xcb2>
    e442:	f24c 5349 	movw	r3, #50505	; 0xc549
    e446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e44a:	2200      	movs	r2, #0
    e44c:	701a      	strb	r2, [r3, #0]
    e44e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e452:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e456:	781b      	ldrb	r3, [r3, #0]
    e458:	461a      	mov	r2, r3
    e45a:	f240 5358 	movw	r3, #1368	; 0x558
    e45e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e462:	7899      	ldrb	r1, [r3, #2]
    e464:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e468:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e46c:	5499      	strb	r1, [r3, r2]
    e46e:	4b20      	ldr	r3, [pc, #128]	; (e4f0 <send_nav_values+0xd54>)
    e470:	781a      	ldrb	r2, [r3, #0]
    e472:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e476:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e47a:	781b      	ldrb	r3, [r3, #0]
    e47c:	4413      	add	r3, r2
    e47e:	b2da      	uxtb	r2, r3
    e480:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e484:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e488:	701a      	strb	r2, [r3, #0]
    e48a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e48e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e492:	781a      	ldrb	r2, [r3, #0]
    e494:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e498:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e49c:	781b      	ldrb	r3, [r3, #0]
    e49e:	4413      	add	r3, r2
    e4a0:	b2da      	uxtb	r2, r3
    e4a2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e4a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4aa:	701a      	strb	r2, [r3, #0]
    e4ac:	f24c 5349 	movw	r3, #50505	; 0xc549
    e4b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4b4:	781b      	ldrb	r3, [r3, #0]
    e4b6:	3301      	adds	r3, #1
    e4b8:	b2da      	uxtb	r2, r3
    e4ba:	f24c 5349 	movw	r3, #50505	; 0xc549
    e4be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4c2:	701a      	strb	r2, [r3, #0]
    e4c4:	f24c 5349 	movw	r3, #50505	; 0xc549
    e4c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4cc:	781b      	ldrb	r3, [r3, #0]
    e4ce:	2bff      	cmp	r3, #255	; 0xff
    e4d0:	d110      	bne.n	e4f4 <send_nav_values+0xd58>
    e4d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    e4d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4da:	2200      	movs	r2, #0
    e4dc:	701a      	strb	r2, [r3, #0]
    e4de:	e009      	b.n	e4f4 <send_nav_values+0xd58>
    e4e0:	2004c8d5 	.word	0x2004c8d5
    e4e4:	2004c8d6 	.word	0x2004c8d6
    e4e8:	2004c8d7 	.word	0x2004c8d7
    e4ec:	20000559 	.word	0x20000559
    e4f0:	2000055a 	.word	0x2000055a
    e4f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    e4f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e4fc:	781b      	ldrb	r3, [r3, #0]
    e4fe:	461a      	mov	r2, r3
    e500:	f240 5358 	movw	r3, #1368	; 0x558
    e504:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e508:	78d9      	ldrb	r1, [r3, #3]
    e50a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e50e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e512:	5499      	strb	r1, [r3, r2]
    e514:	4bc2      	ldr	r3, [pc, #776]	; (e820 <send_nav_values+0x1084>)
    e516:	781a      	ldrb	r2, [r3, #0]
    e518:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e51c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e520:	781b      	ldrb	r3, [r3, #0]
    e522:	4413      	add	r3, r2
    e524:	b2da      	uxtb	r2, r3
    e526:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e52a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e52e:	701a      	strb	r2, [r3, #0]
    e530:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e534:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e538:	781a      	ldrb	r2, [r3, #0]
    e53a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e53e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e542:	781b      	ldrb	r3, [r3, #0]
    e544:	4413      	add	r3, r2
    e546:	b2da      	uxtb	r2, r3
    e548:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e54c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e550:	701a      	strb	r2, [r3, #0]
    e552:	f24c 5349 	movw	r3, #50505	; 0xc549
    e556:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e55a:	781b      	ldrb	r3, [r3, #0]
    e55c:	3301      	adds	r3, #1
    e55e:	b2da      	uxtb	r2, r3
    e560:	f24c 5349 	movw	r3, #50505	; 0xc549
    e564:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e568:	701a      	strb	r2, [r3, #0]
    e56a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e56e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e572:	781b      	ldrb	r3, [r3, #0]
    e574:	2bff      	cmp	r3, #255	; 0xff
    e576:	d105      	bne.n	e584 <send_nav_values+0xde8>
    e578:	f24c 5349 	movw	r3, #50505	; 0xc549
    e57c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e580:	2200      	movs	r2, #0
    e582:	701a      	strb	r2, [r3, #0]
    e584:	f24c 5349 	movw	r3, #50505	; 0xc549
    e588:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e58c:	781b      	ldrb	r3, [r3, #0]
    e58e:	461a      	mov	r2, r3
    e590:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e594:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e598:	7819      	ldrb	r1, [r3, #0]
    e59a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e59e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5a2:	5499      	strb	r1, [r3, r2]
    e5a4:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e5a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5ac:	781a      	ldrb	r2, [r3, #0]
    e5ae:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e5b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5b6:	781b      	ldrb	r3, [r3, #0]
    e5b8:	4413      	add	r3, r2
    e5ba:	b2da      	uxtb	r2, r3
    e5bc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e5c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5c4:	701a      	strb	r2, [r3, #0]
    e5c6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e5ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5ce:	781a      	ldrb	r2, [r3, #0]
    e5d0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e5d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5d8:	781b      	ldrb	r3, [r3, #0]
    e5da:	4413      	add	r3, r2
    e5dc:	b2da      	uxtb	r2, r3
    e5de:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e5e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5e6:	701a      	strb	r2, [r3, #0]
    e5e8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e5ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5f0:	781b      	ldrb	r3, [r3, #0]
    e5f2:	3301      	adds	r3, #1
    e5f4:	b2da      	uxtb	r2, r3
    e5f6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e5fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e5fe:	701a      	strb	r2, [r3, #0]
    e600:	f24c 5349 	movw	r3, #50505	; 0xc549
    e604:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e608:	781b      	ldrb	r3, [r3, #0]
    e60a:	2bff      	cmp	r3, #255	; 0xff
    e60c:	d105      	bne.n	e61a <send_nav_values+0xe7e>
    e60e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e612:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e616:	2200      	movs	r2, #0
    e618:	701a      	strb	r2, [r3, #0]
    e61a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e61e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e622:	781b      	ldrb	r3, [r3, #0]
    e624:	461a      	mov	r2, r3
    e626:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e62a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e62e:	7859      	ldrb	r1, [r3, #1]
    e630:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e634:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e638:	5499      	strb	r1, [r3, r2]
    e63a:	4b7a      	ldr	r3, [pc, #488]	; (e824 <send_nav_values+0x1088>)
    e63c:	781a      	ldrb	r2, [r3, #0]
    e63e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e642:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e646:	781b      	ldrb	r3, [r3, #0]
    e648:	4413      	add	r3, r2
    e64a:	b2da      	uxtb	r2, r3
    e64c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e650:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e654:	701a      	strb	r2, [r3, #0]
    e656:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e65a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e65e:	781a      	ldrb	r2, [r3, #0]
    e660:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e664:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e668:	781b      	ldrb	r3, [r3, #0]
    e66a:	4413      	add	r3, r2
    e66c:	b2da      	uxtb	r2, r3
    e66e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e672:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e676:	701a      	strb	r2, [r3, #0]
    e678:	f24c 5349 	movw	r3, #50505	; 0xc549
    e67c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e680:	781b      	ldrb	r3, [r3, #0]
    e682:	3301      	adds	r3, #1
    e684:	b2da      	uxtb	r2, r3
    e686:	f24c 5349 	movw	r3, #50505	; 0xc549
    e68a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e68e:	701a      	strb	r2, [r3, #0]
    e690:	f24c 5349 	movw	r3, #50505	; 0xc549
    e694:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e698:	781b      	ldrb	r3, [r3, #0]
    e69a:	2bff      	cmp	r3, #255	; 0xff
    e69c:	d105      	bne.n	e6aa <send_nav_values+0xf0e>
    e69e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e6a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6a6:	2200      	movs	r2, #0
    e6a8:	701a      	strb	r2, [r3, #0]
    e6aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    e6ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6b2:	781b      	ldrb	r3, [r3, #0]
    e6b4:	461a      	mov	r2, r3
    e6b6:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e6ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6be:	7899      	ldrb	r1, [r3, #2]
    e6c0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e6c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6c8:	5499      	strb	r1, [r3, r2]
    e6ca:	4b57      	ldr	r3, [pc, #348]	; (e828 <send_nav_values+0x108c>)
    e6cc:	781a      	ldrb	r2, [r3, #0]
    e6ce:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e6d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6d6:	781b      	ldrb	r3, [r3, #0]
    e6d8:	4413      	add	r3, r2
    e6da:	b2da      	uxtb	r2, r3
    e6dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e6e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6e4:	701a      	strb	r2, [r3, #0]
    e6e6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e6ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6ee:	781a      	ldrb	r2, [r3, #0]
    e6f0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e6f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e6f8:	781b      	ldrb	r3, [r3, #0]
    e6fa:	4413      	add	r3, r2
    e6fc:	b2da      	uxtb	r2, r3
    e6fe:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e702:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e706:	701a      	strb	r2, [r3, #0]
    e708:	f24c 5349 	movw	r3, #50505	; 0xc549
    e70c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e710:	781b      	ldrb	r3, [r3, #0]
    e712:	3301      	adds	r3, #1
    e714:	b2da      	uxtb	r2, r3
    e716:	f24c 5349 	movw	r3, #50505	; 0xc549
    e71a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e71e:	701a      	strb	r2, [r3, #0]
    e720:	f24c 5349 	movw	r3, #50505	; 0xc549
    e724:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e728:	781b      	ldrb	r3, [r3, #0]
    e72a:	2bff      	cmp	r3, #255	; 0xff
    e72c:	d105      	bne.n	e73a <send_nav_values+0xf9e>
    e72e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e732:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e736:	2200      	movs	r2, #0
    e738:	701a      	strb	r2, [r3, #0]
    e73a:	f24c 5349 	movw	r3, #50505	; 0xc549
    e73e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e742:	781b      	ldrb	r3, [r3, #0]
    e744:	461a      	mov	r2, r3
    e746:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
    e74a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e74e:	78d9      	ldrb	r1, [r3, #3]
    e750:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e754:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e758:	5499      	strb	r1, [r3, r2]
    e75a:	4b34      	ldr	r3, [pc, #208]	; (e82c <send_nav_values+0x1090>)
    e75c:	781a      	ldrb	r2, [r3, #0]
    e75e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e762:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e766:	781b      	ldrb	r3, [r3, #0]
    e768:	4413      	add	r3, r2
    e76a:	b2da      	uxtb	r2, r3
    e76c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e770:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e774:	701a      	strb	r2, [r3, #0]
    e776:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e77a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e77e:	781a      	ldrb	r2, [r3, #0]
    e780:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e784:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e788:	781b      	ldrb	r3, [r3, #0]
    e78a:	4413      	add	r3, r2
    e78c:	b2da      	uxtb	r2, r3
    e78e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e792:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e796:	701a      	strb	r2, [r3, #0]
    e798:	f24c 5349 	movw	r3, #50505	; 0xc549
    e79c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7a0:	781b      	ldrb	r3, [r3, #0]
    e7a2:	3301      	adds	r3, #1
    e7a4:	b2da      	uxtb	r2, r3
    e7a6:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7ae:	701a      	strb	r2, [r3, #0]
    e7b0:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7b8:	781b      	ldrb	r3, [r3, #0]
    e7ba:	2bff      	cmp	r3, #255	; 0xff
    e7bc:	d105      	bne.n	e7ca <send_nav_values+0x102e>
    e7be:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7c6:	2200      	movs	r2, #0
    e7c8:	701a      	strb	r2, [r3, #0]
    e7ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7d2:	781b      	ldrb	r3, [r3, #0]
    e7d4:	461a      	mov	r2, r3
    e7d6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    e7da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7de:	7819      	ldrb	r1, [r3, #0]
    e7e0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e7e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7e8:	5499      	strb	r1, [r3, r2]
    e7ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e7f2:	781b      	ldrb	r3, [r3, #0]
    e7f4:	3301      	adds	r3, #1
    e7f6:	b2da      	uxtb	r2, r3
    e7f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    e7fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e800:	701a      	strb	r2, [r3, #0]
    e802:	f24c 5349 	movw	r3, #50505	; 0xc549
    e806:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e80a:	781b      	ldrb	r3, [r3, #0]
    e80c:	2bff      	cmp	r3, #255	; 0xff
    e80e:	d10f      	bne.n	e830 <send_nav_values+0x1094>
    e810:	f24c 5349 	movw	r3, #50505	; 0xc549
    e814:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e818:	2200      	movs	r2, #0
    e81a:	701a      	strb	r2, [r3, #0]
    e81c:	e008      	b.n	e830 <send_nav_values+0x1094>
    e81e:	bf00      	nop
    e820:	2000055b 	.word	0x2000055b
    e824:	2004c8d9 	.word	0x2004c8d9
    e828:	2004c8da 	.word	0x2004c8da
    e82c:	2004c8db 	.word	0x2004c8db
    e830:	f24c 5349 	movw	r3, #50505	; 0xc549
    e834:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e838:	781b      	ldrb	r3, [r3, #0]
    e83a:	461a      	mov	r2, r3
    e83c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    e840:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e844:	7819      	ldrb	r1, [r3, #0]
    e846:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e84a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e84e:	5499      	strb	r1, [r3, r2]
    e850:	f24c 5349 	movw	r3, #50505	; 0xc549
    e854:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e858:	781b      	ldrb	r3, [r3, #0]
    e85a:	3301      	adds	r3, #1
    e85c:	b2da      	uxtb	r2, r3
    e85e:	f24c 5349 	movw	r3, #50505	; 0xc549
    e862:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e866:	701a      	strb	r2, [r3, #0]
    e868:	f24c 5349 	movw	r3, #50505	; 0xc549
    e86c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e870:	781b      	ldrb	r3, [r3, #0]
    e872:	2bff      	cmp	r3, #255	; 0xff
    e874:	d105      	bne.n	e882 <send_nav_values+0x10e6>
    e876:	f24c 5349 	movw	r3, #50505	; 0xc549
    e87a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e87e:	2200      	movs	r2, #0
    e880:	701a      	strb	r2, [r3, #0]
    e882:	f242 0339 	movw	r3, #8249	; 0x2039
    e886:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e88a:	781b      	ldrb	r3, [r3, #0]
    e88c:	b2db      	uxtb	r3, r3
    e88e:	f003 0310 	and.w	r3, r3, #16
    e892:	2b00      	cmp	r3, #0
    e894:	d15a      	bne.n	e94c <send_nav_values+0x11b0>
    e896:	f24c 534a 	movw	r3, #50506	; 0xc54a
    e89a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e89e:	781b      	ldrb	r3, [r3, #0]
    e8a0:	b2db      	uxtb	r3, r3
    e8a2:	461a      	mov	r2, r3
    e8a4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    e8a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8ac:	5c9a      	ldrb	r2, [r3, r2]
    e8ae:	f24c 634b 	movw	r3, #50763	; 0xc64b
    e8b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8b6:	701a      	strb	r2, [r3, #0]
    e8b8:	f24c 634c 	movw	r3, #50764	; 0xc64c
    e8bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8c0:	2200      	movs	r2, #0
    e8c2:	701a      	strb	r2, [r3, #0]
    e8c4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    e8c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8cc:	781b      	ldrb	r3, [r3, #0]
    e8ce:	b2db      	uxtb	r3, r3
    e8d0:	3301      	adds	r3, #1
    e8d2:	b2da      	uxtb	r2, r3
    e8d4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    e8d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8dc:	701a      	strb	r2, [r3, #0]
    e8de:	f24c 534a 	movw	r3, #50506	; 0xc54a
    e8e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8e6:	781b      	ldrb	r3, [r3, #0]
    e8e8:	b2db      	uxtb	r3, r3
    e8ea:	2bff      	cmp	r3, #255	; 0xff
    e8ec:	d105      	bne.n	e8fa <send_nav_values+0x115e>
    e8ee:	f24c 534a 	movw	r3, #50506	; 0xc54a
    e8f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e8f6:	2200      	movs	r2, #0
    e8f8:	701a      	strb	r2, [r3, #0]
    e8fa:	f242 0338 	movw	r3, #8248	; 0x2038
    e8fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e902:	f242 0238 	movw	r2, #8248	; 0x2038
    e906:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e90a:	7812      	ldrb	r2, [r2, #0]
    e90c:	b2d2      	uxtb	r2, r2
    e90e:	f042 0201 	orr.w	r2, r2, #1
    e912:	b2d2      	uxtb	r2, r2
    e914:	701a      	strb	r2, [r3, #0]
    e916:	f242 0339 	movw	r3, #8249	; 0x2039
    e91a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    e91e:	f242 0239 	movw	r2, #8249	; 0x2039
    e922:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e926:	7812      	ldrb	r2, [r2, #0]
    e928:	b2d2      	uxtb	r2, r2
    e92a:	f042 0210 	orr.w	r2, r2, #16
    e92e:	b2d2      	uxtb	r2, r2
    e930:	701a      	strb	r2, [r3, #0]
    e932:	e00b      	b.n	e94c <send_nav_values+0x11b0>
    e934:	f24c 5348 	movw	r3, #50504	; 0xc548
    e938:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e93c:	781b      	ldrb	r3, [r3, #0]
    e93e:	3301      	adds	r3, #1
    e940:	b2da      	uxtb	r2, r3
    e942:	f24c 5348 	movw	r3, #50504	; 0xc548
    e946:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e94a:	701a      	strb	r2, [r3, #0]
}
    e94c:	46bd      	mov	sp, r7
    e94e:	f85d 7b04 	ldr.w	r7, [sp], #4
    e952:	4770      	bx	lr

0000e954 <course_run>:

void course_run(void){
    e954:	b580      	push	{r7, lr}
    e956:	af00      	add	r7, sp, #0
  
  if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e958:	f24c 532c 	movw	r3, #50476	; 0xc52c
    e95c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e960:	781b      	ldrb	r3, [r3, #0]
    e962:	2b02      	cmp	r3, #2
    e964:	d006      	beq.n	e974 <course_run+0x20>
    e966:	f24c 532c 	movw	r3, #50476	; 0xc52c
    e96a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e96e:	781b      	ldrb	r3, [r3, #0]
    e970:	2b03      	cmp	r3, #3
    e972:	d112      	bne.n	e99a <course_run+0x46>
  {
    if (lateral_mode >= LATERAL_MODE_COURSE)
    e974:	f24c 532e 	movw	r3, #50478	; 0xc52e
    e978:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e97c:	781b      	ldrb	r3, [r3, #0]
    e97e:	2b02      	cmp	r3, #2
    e980:	d901      	bls.n	e986 <course_run+0x32>
      course_pid_run(); /* aka compute nav_desired_roll */
    e982:	f003 faf1 	bl	11f68 <course_pid_run>
    desired_roll = nav_desired_roll;
    e986:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
    e98a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e98e:	681a      	ldr	r2, [r3, #0]
    e990:	f64c 0374 	movw	r3, #51316	; 0xc874
    e994:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e998:	601a      	str	r2, [r3, #0]
  }  
  //vPrintString("S_17 Navigation task end!\n\r");
}
    e99a:	bd80      	pop	{r7, pc}

0000e99c <altitude_control_task>:

void altitude_control_task(void)
{
    e99c:	b580      	push	{r7, lr}
    e99e:	af00      	add	r7, sp, #0
	//vPrintString("S_18 navigation_task start! \n\r"); //SunnyBeike
	if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) {
    e9a0:	f24c 532c 	movw	r3, #50476	; 0xc52c
    e9a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9a8:	781b      	ldrb	r3, [r3, #0]
    e9aa:	2b02      	cmp	r3, #2
    e9ac:	d006      	beq.n	e9bc <altitude_control_task+0x20>
    e9ae:	f24c 532c 	movw	r3, #50476	; 0xc52c
    e9b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9b6:	781b      	ldrb	r3, [r3, #0]
    e9b8:	2b03      	cmp	r3, #3
    e9ba:	d108      	bne.n	e9ce <altitude_control_task+0x32>
		if (vertical_mode == VERTICAL_MODE_AUTO_ALT)
    e9bc:	f24c 532d 	movw	r3, #50477	; 0xc52d
    e9c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9c4:	781b      	ldrb	r3, [r3, #0]
    e9c6:	2b03      	cmp	r3, #3
    e9c8:	d101      	bne.n	e9ce <altitude_control_task+0x32>
      			altitude_pid_run();
    e9ca:	f003 fd55 	bl	12478 <altitude_pid_run>
	}
	//vPrintString("S_18 navigation_task end! \n\r"); //SunnyBeike
}
    e9ce:	bd80      	pop	{r7, pc}

0000e9d0 <climb_control_task>:
void climb_control_task(void)
{
    e9d0:	b580      	push	{r7, lr}
    e9d2:	af00      	add	r7, sp, #0
	//vPrintString("S_19 navigation_task start! \n\r"); //SunnyBeike
   if (pprz_mode == PPRZ_MODE_AUTO2 || pprz_mode == PPRZ_MODE_HOME) 
    e9d4:	f24c 532c 	movw	r3, #50476	; 0xc52c
    e9d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9dc:	781b      	ldrb	r3, [r3, #0]
    e9de:	2b02      	cmp	r3, #2
    e9e0:	d006      	beq.n	e9f0 <climb_control_task+0x20>
    e9e2:	f24c 532c 	movw	r3, #50476	; 0xc52c
    e9e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9ea:	781b      	ldrb	r3, [r3, #0]
    e9ec:	2b03      	cmp	r3, #3
    e9ee:	d135      	bne.n	ea5c <climb_control_task+0x8c>
   {
	if (vertical_mode >= VERTICAL_MODE_AUTO_CLIMB)
    e9f0:	f24c 532d 	movw	r3, #50477	; 0xc52d
    e9f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    e9f8:	781b      	ldrb	r3, [r3, #0]
    e9fa:	2b01      	cmp	r3, #1
    e9fc:	d901      	bls.n	ea02 <climb_control_task+0x32>
        	climb_pid_run();
    e9fe:	f003 fb6b 	bl	120d8 <climb_pid_run>
   	if (vertical_mode == VERTICAL_MODE_AUTO_GAZ)
    ea02:	f24c 532d 	movw	r3, #50477	; 0xc52d
    ea06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea0a:	781b      	ldrb	r3, [r3, #0]
    ea0c:	2b01      	cmp	r3, #1
    ea0e:	d10a      	bne.n	ea26 <climb_control_task+0x56>
   		 desired_gaz = nav_desired_gaz;
    ea10:	f64c 03c8 	movw	r3, #51400	; 0xc8c8
    ea14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea18:	881b      	ldrh	r3, [r3, #0]
    ea1a:	b29a      	uxth	r2, r3
    ea1c:	f64c 037c 	movw	r3, #51324	; 0xc87c
    ea20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea24:	801a      	strh	r2, [r3, #0]
   	if (low_battery || (!estimator_flight_time && !launch))
    ea26:	f24c 5335 	movw	r3, #50485	; 0xc535
    ea2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea2e:	781b      	ldrb	r3, [r3, #0]
    ea30:	2b00      	cmp	r3, #0
    ea32:	d10d      	bne.n	ea50 <climb_control_task+0x80>
    ea34:	f64c 332c 	movw	r3, #52012	; 0xcb2c
    ea38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea3c:	881b      	ldrh	r3, [r3, #0]
    ea3e:	2b00      	cmp	r3, #0
    ea40:	d10c      	bne.n	ea5c <climb_control_task+0x8c>
    ea42:	f24c 5340 	movw	r3, #50496	; 0xc540
    ea46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea4a:	781b      	ldrb	r3, [r3, #0]
    ea4c:	2b00      	cmp	r3, #0
    ea4e:	d105      	bne.n	ea5c <climb_control_task+0x8c>
   		 desired_gaz = 0.;
    ea50:	f64c 037c 	movw	r3, #51324	; 0xc87c
    ea54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea58:	2200      	movs	r2, #0
    ea5a:	801a      	strh	r2, [r3, #0]
  }  
	//vPrintString("S_19 navigation_task end! \n\r"); //SunnyBeike
}
    ea5c:	bd80      	pop	{r7, pc}
    ea5e:	bf00      	nop

0000ea60 <stabilisation_task>:
//#endif
}
*/

void stabilisation_task(void)
{
    ea60:	b580      	push	{r7, lr}
    ea62:	af00      	add	r7, sp, #0
	//vPrintString("S_6 stabilisation_task start! \n\r"); //SunnyBeike
    ir_update();
    ea64:	f003 f926 	bl	11cb4 <ir_update>
    estimator_update_state_infrared();
    ea68:	f006 fbac 	bl	151c4 <estimator_update_state_infrared>
    roll_pitch_pid_run(); // Set  desired_aileron & desired_elevator
    ea6c:	f003 f990 	bl	11d90 <roll_pitch_pid_run>
    to_fbw.channels[RADIO_THROTTLE] = desired_gaz; // desired_gaz is set upon GPS message reception
    ea70:	f64c 037c 	movw	r3, #51324	; 0xc87c
    ea74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea78:	881a      	ldrh	r2, [r3, #0]
    ea7a:	f24c 6368 	movw	r3, #50792	; 0xc668
    ea7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea82:	801a      	strh	r2, [r3, #0]
    to_fbw.channels[RADIO_ROLL] = desired_aileron;
    ea84:	f64c 037e 	movw	r3, #51326	; 0xc87e
    ea88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea8c:	881a      	ldrh	r2, [r3, #0]
    ea8e:	f24c 6368 	movw	r3, #50792	; 0xc668
    ea92:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ea96:	805a      	strh	r2, [r3, #2]
#ifndef ANTON_T7
    to_fbw.channels[RADIO_PITCH] = desired_elevator;
    ea98:	f64c 0380 	movw	r3, #51328	; 0xc880
    ea9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaa0:	881a      	ldrh	r2, [r3, #0]
    eaa2:	f24c 6368 	movw	r3, #50792	; 0xc668
    eaa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eaaa:	809a      	strh	r2, [r3, #4]
#endif
    
    // Code for camera stabilization, FIXME put that elsewhere
    to_fbw.channels[RADIO_GAIN1] = TRIM_PPRZ(MAX_PPRZ/0.75*(-estimator_phi));
    eaac:	f64c 3308 	movw	r3, #51976	; 0xcb08
    eab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eab4:	681b      	ldr	r3, [r3, #0]
    eab6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    eaba:	4618      	mov	r0, r3
    eabc:	f009 f83e 	bl	17b3c <__aeabi_f2d>
    eac0:	4602      	mov	r2, r0
    eac2:	460b      	mov	r3, r1
    eac4:	4610      	mov	r0, r2
    eac6:	4619      	mov	r1, r3
    eac8:	f04f 0200 	mov.w	r2, #0
    eacc:	f04f 0300 	mov.w	r3, #0
    ead0:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    ead4:	f009 f886 	bl	17be4 <__aeabi_dmul>
    ead8:	4602      	mov	r2, r0
    eada:	460b      	mov	r3, r1
    eadc:	4610      	mov	r0, r2
    eade:	4619      	mov	r1, r3
    eae0:	f04f 0200 	mov.w	r2, #0
    eae4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    eae8:	f2cc 03c2 	movt	r3, #49346	; 0xc0c2
    eaec:	f009 faec 	bl	180c8 <__aeabi_dcmplt>
    eaf0:	4603      	mov	r3, r0
    eaf2:	2b00      	cmp	r3, #0
    eaf4:	d002      	beq.n	eafc <stabilisation_task+0x9c>
    eaf6:	f64d 2280 	movw	r2, #55936	; 0xda80
    eafa:	e046      	b.n	eb8a <stabilisation_task+0x12a>
    eafc:	f64c 3308 	movw	r3, #51976	; 0xcb08
    eb00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb04:	681b      	ldr	r3, [r3, #0]
    eb06:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    eb0a:	4618      	mov	r0, r3
    eb0c:	f009 f816 	bl	17b3c <__aeabi_f2d>
    eb10:	4602      	mov	r2, r0
    eb12:	460b      	mov	r3, r1
    eb14:	4610      	mov	r0, r2
    eb16:	4619      	mov	r1, r3
    eb18:	f04f 0200 	mov.w	r2, #0
    eb1c:	f04f 0300 	mov.w	r3, #0
    eb20:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    eb24:	f009 f85e 	bl	17be4 <__aeabi_dmul>
    eb28:	4602      	mov	r2, r0
    eb2a:	460b      	mov	r3, r1
    eb2c:	4610      	mov	r0, r2
    eb2e:	4619      	mov	r1, r3
    eb30:	f04f 0200 	mov.w	r2, #0
    eb34:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    eb38:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
    eb3c:	f009 fae2 	bl	18104 <__aeabi_dcmpgt>
    eb40:	4603      	mov	r3, r0
    eb42:	2b00      	cmp	r3, #0
    eb44:	d002      	beq.n	eb4c <stabilisation_task+0xec>
    eb46:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    eb4a:	e01d      	b.n	eb88 <stabilisation_task+0x128>
    eb4c:	f64c 3308 	movw	r3, #51976	; 0xcb08
    eb50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb54:	681b      	ldr	r3, [r3, #0]
    eb56:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    eb5a:	4618      	mov	r0, r3
    eb5c:	f008 ffee 	bl	17b3c <__aeabi_f2d>
    eb60:	4602      	mov	r2, r0
    eb62:	460b      	mov	r3, r1
    eb64:	4610      	mov	r0, r2
    eb66:	4619      	mov	r1, r3
    eb68:	f04f 0200 	mov.w	r2, #0
    eb6c:	f04f 0300 	mov.w	r3, #0
    eb70:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
    eb74:	f009 f836 	bl	17be4 <__aeabi_dmul>
    eb78:	4602      	mov	r2, r0
    eb7a:	460b      	mov	r3, r1
    eb7c:	4610      	mov	r0, r2
    eb7e:	4619      	mov	r1, r3
    eb80:	f009 faca 	bl	18118 <__aeabi_d2iz>
    eb84:	4603      	mov	r3, r0
    eb86:	b29b      	uxth	r3, r3
    eb88:	b29a      	uxth	r2, r3
    eb8a:	f24c 6368 	movw	r3, #50792	; 0xc668
    eb8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eb92:	815a      	strh	r2, [r3, #10]
	//vPrintString("S_6 stabilisation_task end! \n\r"); //SunnyBeike
}
    eb94:	bd80      	pop	{r7, pc}
    eb96:	bf00      	nop

0000eb98 <send_gps_pos>:
 * If \a estimator_flight_time is null and \a estimator_hspeed_mod is greater
 * than \a MIN_SPEED_FOR_TAKEOFF, set the \a estimator_flight_time to 1 and \a
 * launch to true (which is not set in non auto launch. Then call
 * \a DOWNLINK_SEND_TAKEOFF
 */
void send_gps_pos( void ) {
    eb98:	b580      	push	{r7, lr}
    eb9a:	af00      	add	r7, sp, #0
  gps_msg_received = FALSE;
    eb9c:	f24c 63dd 	movw	r3, #50909	; 0xc6dd
    eba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eba4:	2200      	movs	r2, #0
    eba6:	701a      	strb	r2, [r3, #0]
  if (gps_pos_available){
    eba8:	f24c 63de 	movw	r3, #50910	; 0xc6de
    ebac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebb0:	781b      	ldrb	r3, [r3, #0]
    ebb2:	2b00      	cmp	r3, #0
    ebb4:	f001 81af 	beq.w	ff16 <send_gps_pos+0x137e>
     DOWNLINK_SEND_GPS(&gps_mode, &gps_utm_east, &gps_utm_north, &gps_fcourse, &gps_falt, &gps_fspeed,&gps_fclimb, &gps_ftow);
    ebb8:	f24c 5349 	movw	r3, #50505	; 0xc549
    ebbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebc0:	781a      	ldrb	r2, [r3, #0]
    ebc2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ebc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebca:	781b      	ldrb	r3, [r3, #0]
    ebcc:	b2db      	uxtb	r3, r3
    ebce:	429a      	cmp	r2, r3
    ebd0:	d313      	bcc.n	ebfa <send_gps_pos+0x62>
    ebd2:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ebd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebda:	781b      	ldrb	r3, [r3, #0]
    ebdc:	b2db      	uxtb	r3, r3
    ebde:	461a      	mov	r2, r3
    ebe0:	f24c 5349 	movw	r3, #50505	; 0xc549
    ebe4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ebe8:	781b      	ldrb	r3, [r3, #0]
    ebea:	1ad3      	subs	r3, r2, r3
    ebec:	33ff      	adds	r3, #255	; 0xff
    ebee:	2b21      	cmp	r3, #33	; 0x21
    ebf0:	bfd4      	ite	le
    ebf2:	2300      	movle	r3, #0
    ebf4:	2301      	movgt	r3, #1
    ebf6:	b2db      	uxtb	r3, r3
    ebf8:	e011      	b.n	ec1e <send_gps_pos+0x86>
    ebfa:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ebfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec02:	781b      	ldrb	r3, [r3, #0]
    ec04:	b2db      	uxtb	r3, r3
    ec06:	461a      	mov	r2, r3
    ec08:	f24c 5349 	movw	r3, #50505	; 0xc549
    ec0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec10:	781b      	ldrb	r3, [r3, #0]
    ec12:	1ad3      	subs	r3, r2, r3
    ec14:	2b21      	cmp	r3, #33	; 0x21
    ec16:	bfd4      	ite	le
    ec18:	2300      	movle	r3, #0
    ec1a:	2301      	movgt	r3, #1
    ec1c:	b2db      	uxtb	r3, r3
    ec1e:	2b00      	cmp	r3, #0
    ec20:	f001 816b 	beq.w	fefa <send_gps_pos+0x1362>
    ec24:	f24c 5349 	movw	r3, #50505	; 0xc549
    ec28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec2c:	781b      	ldrb	r3, [r3, #0]
    ec2e:	461a      	mov	r2, r3
    ec30:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ec34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec38:	2105      	movs	r1, #5
    ec3a:	5499      	strb	r1, [r3, r2]
    ec3c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ec40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec44:	781b      	ldrb	r3, [r3, #0]
    ec46:	3301      	adds	r3, #1
    ec48:	b2da      	uxtb	r2, r3
    ec4a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ec4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec52:	701a      	strb	r2, [r3, #0]
    ec54:	f24c 5349 	movw	r3, #50505	; 0xc549
    ec58:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec5c:	781b      	ldrb	r3, [r3, #0]
    ec5e:	2bff      	cmp	r3, #255	; 0xff
    ec60:	d105      	bne.n	ec6e <send_gps_pos+0xd6>
    ec62:	f24c 5349 	movw	r3, #50505	; 0xc549
    ec66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec6a:	2200      	movs	r2, #0
    ec6c:	701a      	strb	r2, [r3, #0]
    ec6e:	f24c 5349 	movw	r3, #50505	; 0xc549
    ec72:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec76:	781b      	ldrb	r3, [r3, #0]
    ec78:	461a      	mov	r2, r3
    ec7a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ec7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec82:	2108      	movs	r1, #8
    ec84:	5499      	strb	r1, [r3, r2]
    ec86:	f24c 5349 	movw	r3, #50505	; 0xc549
    ec8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec8e:	781b      	ldrb	r3, [r3, #0]
    ec90:	3301      	adds	r3, #1
    ec92:	b2da      	uxtb	r2, r3
    ec94:	f24c 5349 	movw	r3, #50505	; 0xc549
    ec98:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ec9c:	701a      	strb	r2, [r3, #0]
    ec9e:	f24c 5349 	movw	r3, #50505	; 0xc549
    eca2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eca6:	781b      	ldrb	r3, [r3, #0]
    eca8:	2bff      	cmp	r3, #255	; 0xff
    ecaa:	d105      	bne.n	ecb8 <send_gps_pos+0x120>
    ecac:	f24c 5349 	movw	r3, #50505	; 0xc549
    ecb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecb4:	2200      	movs	r2, #0
    ecb6:	701a      	strb	r2, [r3, #0]
    ecb8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ecbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecc0:	2208      	movs	r2, #8
    ecc2:	701a      	strb	r2, [r3, #0]
    ecc4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ecc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eccc:	2208      	movs	r2, #8
    ecce:	701a      	strb	r2, [r3, #0]
    ecd0:	f24c 5349 	movw	r3, #50505	; 0xc549
    ecd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecd8:	781b      	ldrb	r3, [r3, #0]
    ecda:	461a      	mov	r2, r3
    ecdc:	f24c 63dc 	movw	r3, #50908	; 0xc6dc
    ece0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ece4:	7819      	ldrb	r1, [r3, #0]
    ece6:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ecea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecee:	5499      	strb	r1, [r3, r2]
    ecf0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ecf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ecf8:	781a      	ldrb	r2, [r3, #0]
    ecfa:	f24c 63dc 	movw	r3, #50908	; 0xc6dc
    ecfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed02:	781b      	ldrb	r3, [r3, #0]
    ed04:	4413      	add	r3, r2
    ed06:	b2da      	uxtb	r2, r3
    ed08:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ed0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed10:	701a      	strb	r2, [r3, #0]
    ed12:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ed16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed1a:	781a      	ldrb	r2, [r3, #0]
    ed1c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ed20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed24:	781b      	ldrb	r3, [r3, #0]
    ed26:	4413      	add	r3, r2
    ed28:	b2da      	uxtb	r2, r3
    ed2a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ed2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed32:	701a      	strb	r2, [r3, #0]
    ed34:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed38:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed3c:	781b      	ldrb	r3, [r3, #0]
    ed3e:	3301      	adds	r3, #1
    ed40:	b2da      	uxtb	r2, r3
    ed42:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed4a:	701a      	strb	r2, [r3, #0]
    ed4c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed50:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed54:	781b      	ldrb	r3, [r3, #0]
    ed56:	2bff      	cmp	r3, #255	; 0xff
    ed58:	d105      	bne.n	ed66 <send_gps_pos+0x1ce>
    ed5a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed62:	2200      	movs	r2, #0
    ed64:	701a      	strb	r2, [r3, #0]
    ed66:	f24c 5349 	movw	r3, #50505	; 0xc549
    ed6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed6e:	781b      	ldrb	r3, [r3, #0]
    ed70:	461a      	mov	r2, r3
    ed72:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    ed76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed7a:	7819      	ldrb	r1, [r3, #0]
    ed7c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ed80:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed84:	5499      	strb	r1, [r3, r2]
    ed86:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    ed8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed8e:	781a      	ldrb	r2, [r3, #0]
    ed90:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ed94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ed98:	781b      	ldrb	r3, [r3, #0]
    ed9a:	4413      	add	r3, r2
    ed9c:	b2da      	uxtb	r2, r3
    ed9e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    eda2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eda6:	701a      	strb	r2, [r3, #0]
    eda8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    edac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edb0:	781a      	ldrb	r2, [r3, #0]
    edb2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    edb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edba:	781b      	ldrb	r3, [r3, #0]
    edbc:	4413      	add	r3, r2
    edbe:	b2da      	uxtb	r2, r3
    edc0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    edc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edc8:	701a      	strb	r2, [r3, #0]
    edca:	f24c 5349 	movw	r3, #50505	; 0xc549
    edce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edd2:	781b      	ldrb	r3, [r3, #0]
    edd4:	3301      	adds	r3, #1
    edd6:	b2da      	uxtb	r2, r3
    edd8:	f24c 5349 	movw	r3, #50505	; 0xc549
    eddc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ede0:	701a      	strb	r2, [r3, #0]
    ede2:	f24c 5349 	movw	r3, #50505	; 0xc549
    ede6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edea:	781b      	ldrb	r3, [r3, #0]
    edec:	2bff      	cmp	r3, #255	; 0xff
    edee:	d105      	bne.n	edfc <send_gps_pos+0x264>
    edf0:	f24c 5349 	movw	r3, #50505	; 0xc549
    edf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    edf8:	2200      	movs	r2, #0
    edfa:	701a      	strb	r2, [r3, #0]
    edfc:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee00:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee04:	781b      	ldrb	r3, [r3, #0]
    ee06:	461a      	mov	r2, r3
    ee08:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    ee0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee10:	7859      	ldrb	r1, [r3, #1]
    ee12:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ee16:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee1a:	5499      	strb	r1, [r3, r2]
    ee1c:	4bd1      	ldr	r3, [pc, #836]	; (f164 <send_gps_pos+0x5cc>)
    ee1e:	781a      	ldrb	r2, [r3, #0]
    ee20:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ee24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee28:	781b      	ldrb	r3, [r3, #0]
    ee2a:	4413      	add	r3, r2
    ee2c:	b2da      	uxtb	r2, r3
    ee2e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ee32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee36:	701a      	strb	r2, [r3, #0]
    ee38:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ee3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee40:	781a      	ldrb	r2, [r3, #0]
    ee42:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ee46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee4a:	781b      	ldrb	r3, [r3, #0]
    ee4c:	4413      	add	r3, r2
    ee4e:	b2da      	uxtb	r2, r3
    ee50:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ee54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee58:	701a      	strb	r2, [r3, #0]
    ee5a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee62:	781b      	ldrb	r3, [r3, #0]
    ee64:	3301      	adds	r3, #1
    ee66:	b2da      	uxtb	r2, r3
    ee68:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee70:	701a      	strb	r2, [r3, #0]
    ee72:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee7a:	781b      	ldrb	r3, [r3, #0]
    ee7c:	2bff      	cmp	r3, #255	; 0xff
    ee7e:	d105      	bne.n	ee8c <send_gps_pos+0x2f4>
    ee80:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee88:	2200      	movs	r2, #0
    ee8a:	701a      	strb	r2, [r3, #0]
    ee8c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ee90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ee94:	781b      	ldrb	r3, [r3, #0]
    ee96:	461a      	mov	r2, r3
    ee98:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    ee9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eea0:	7899      	ldrb	r1, [r3, #2]
    eea2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    eea6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeaa:	5499      	strb	r1, [r3, r2]
    eeac:	4bae      	ldr	r3, [pc, #696]	; (f168 <send_gps_pos+0x5d0>)
    eeae:	781a      	ldrb	r2, [r3, #0]
    eeb0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    eeb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeb8:	781b      	ldrb	r3, [r3, #0]
    eeba:	4413      	add	r3, r2
    eebc:	b2da      	uxtb	r2, r3
    eebe:	f24c 634d 	movw	r3, #50765	; 0xc64d
    eec2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eec6:	701a      	strb	r2, [r3, #0]
    eec8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    eecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eed0:	781a      	ldrb	r2, [r3, #0]
    eed2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    eed6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eeda:	781b      	ldrb	r3, [r3, #0]
    eedc:	4413      	add	r3, r2
    eede:	b2da      	uxtb	r2, r3
    eee0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    eee4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eee8:	701a      	strb	r2, [r3, #0]
    eeea:	f24c 5349 	movw	r3, #50505	; 0xc549
    eeee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eef2:	781b      	ldrb	r3, [r3, #0]
    eef4:	3301      	adds	r3, #1
    eef6:	b2da      	uxtb	r2, r3
    eef8:	f24c 5349 	movw	r3, #50505	; 0xc549
    eefc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef00:	701a      	strb	r2, [r3, #0]
    ef02:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef0a:	781b      	ldrb	r3, [r3, #0]
    ef0c:	2bff      	cmp	r3, #255	; 0xff
    ef0e:	d105      	bne.n	ef1c <send_gps_pos+0x384>
    ef10:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef18:	2200      	movs	r2, #0
    ef1a:	701a      	strb	r2, [r3, #0]
    ef1c:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef20:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef24:	781b      	ldrb	r3, [r3, #0]
    ef26:	461a      	mov	r2, r3
    ef28:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
    ef2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef30:	78d9      	ldrb	r1, [r3, #3]
    ef32:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ef36:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef3a:	5499      	strb	r1, [r3, r2]
    ef3c:	4b8b      	ldr	r3, [pc, #556]	; (f16c <send_gps_pos+0x5d4>)
    ef3e:	781a      	ldrb	r2, [r3, #0]
    ef40:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ef44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef48:	781b      	ldrb	r3, [r3, #0]
    ef4a:	4413      	add	r3, r2
    ef4c:	b2da      	uxtb	r2, r3
    ef4e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ef52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef56:	701a      	strb	r2, [r3, #0]
    ef58:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ef5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef60:	781a      	ldrb	r2, [r3, #0]
    ef62:	f24c 634d 	movw	r3, #50765	; 0xc64d
    ef66:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef6a:	781b      	ldrb	r3, [r3, #0]
    ef6c:	4413      	add	r3, r2
    ef6e:	b2da      	uxtb	r2, r3
    ef70:	f24c 634e 	movw	r3, #50766	; 0xc64e
    ef74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef78:	701a      	strb	r2, [r3, #0]
    ef7a:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef82:	781b      	ldrb	r3, [r3, #0]
    ef84:	3301      	adds	r3, #1
    ef86:	b2da      	uxtb	r2, r3
    ef88:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef90:	701a      	strb	r2, [r3, #0]
    ef92:	f24c 5349 	movw	r3, #50505	; 0xc549
    ef96:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ef9a:	781b      	ldrb	r3, [r3, #0]
    ef9c:	2bff      	cmp	r3, #255	; 0xff
    ef9e:	d105      	bne.n	efac <send_gps_pos+0x414>
    efa0:	f24c 5349 	movw	r3, #50505	; 0xc549
    efa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efa8:	2200      	movs	r2, #0
    efaa:	701a      	strb	r2, [r3, #0]
    efac:	f24c 5349 	movw	r3, #50505	; 0xc549
    efb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efb4:	781b      	ldrb	r3, [r3, #0]
    efb6:	461a      	mov	r2, r3
    efb8:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    efbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efc0:	7819      	ldrb	r1, [r3, #0]
    efc2:	f24c 534c 	movw	r3, #50508	; 0xc54c
    efc6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efca:	5499      	strb	r1, [r3, r2]
    efcc:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    efd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efd4:	781a      	ldrb	r2, [r3, #0]
    efd6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    efda:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efde:	781b      	ldrb	r3, [r3, #0]
    efe0:	4413      	add	r3, r2
    efe2:	b2da      	uxtb	r2, r3
    efe4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    efe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    efec:	701a      	strb	r2, [r3, #0]
    efee:	f24c 634e 	movw	r3, #50766	; 0xc64e
    eff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    eff6:	781a      	ldrb	r2, [r3, #0]
    eff8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    effc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f000:	781b      	ldrb	r3, [r3, #0]
    f002:	4413      	add	r3, r2
    f004:	b2da      	uxtb	r2, r3
    f006:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f00a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f00e:	701a      	strb	r2, [r3, #0]
    f010:	f24c 5349 	movw	r3, #50505	; 0xc549
    f014:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f018:	781b      	ldrb	r3, [r3, #0]
    f01a:	3301      	adds	r3, #1
    f01c:	b2da      	uxtb	r2, r3
    f01e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f022:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f026:	701a      	strb	r2, [r3, #0]
    f028:	f24c 5349 	movw	r3, #50505	; 0xc549
    f02c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f030:	781b      	ldrb	r3, [r3, #0]
    f032:	2bff      	cmp	r3, #255	; 0xff
    f034:	d105      	bne.n	f042 <send_gps_pos+0x4aa>
    f036:	f24c 5349 	movw	r3, #50505	; 0xc549
    f03a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f03e:	2200      	movs	r2, #0
    f040:	701a      	strb	r2, [r3, #0]
    f042:	f24c 5349 	movw	r3, #50505	; 0xc549
    f046:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f04a:	781b      	ldrb	r3, [r3, #0]
    f04c:	461a      	mov	r2, r3
    f04e:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f052:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f056:	7859      	ldrb	r1, [r3, #1]
    f058:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f05c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f060:	5499      	strb	r1, [r3, r2]
    f062:	4b43      	ldr	r3, [pc, #268]	; (f170 <send_gps_pos+0x5d8>)
    f064:	781a      	ldrb	r2, [r3, #0]
    f066:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f06a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f06e:	781b      	ldrb	r3, [r3, #0]
    f070:	4413      	add	r3, r2
    f072:	b2da      	uxtb	r2, r3
    f074:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f078:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f07c:	701a      	strb	r2, [r3, #0]
    f07e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f082:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f086:	781a      	ldrb	r2, [r3, #0]
    f088:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f08c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f090:	781b      	ldrb	r3, [r3, #0]
    f092:	4413      	add	r3, r2
    f094:	b2da      	uxtb	r2, r3
    f096:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f09a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f09e:	701a      	strb	r2, [r3, #0]
    f0a0:	f24c 5349 	movw	r3, #50505	; 0xc549
    f0a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0a8:	781b      	ldrb	r3, [r3, #0]
    f0aa:	3301      	adds	r3, #1
    f0ac:	b2da      	uxtb	r2, r3
    f0ae:	f24c 5349 	movw	r3, #50505	; 0xc549
    f0b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0b6:	701a      	strb	r2, [r3, #0]
    f0b8:	f24c 5349 	movw	r3, #50505	; 0xc549
    f0bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0c0:	781b      	ldrb	r3, [r3, #0]
    f0c2:	2bff      	cmp	r3, #255	; 0xff
    f0c4:	d105      	bne.n	f0d2 <send_gps_pos+0x53a>
    f0c6:	f24c 5349 	movw	r3, #50505	; 0xc549
    f0ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0ce:	2200      	movs	r2, #0
    f0d0:	701a      	strb	r2, [r3, #0]
    f0d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    f0d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0da:	781b      	ldrb	r3, [r3, #0]
    f0dc:	461a      	mov	r2, r3
    f0de:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f0e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0e6:	7899      	ldrb	r1, [r3, #2]
    f0e8:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f0ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0f0:	5499      	strb	r1, [r3, r2]
    f0f2:	4b20      	ldr	r3, [pc, #128]	; (f174 <send_gps_pos+0x5dc>)
    f0f4:	781a      	ldrb	r2, [r3, #0]
    f0f6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f0fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f0fe:	781b      	ldrb	r3, [r3, #0]
    f100:	4413      	add	r3, r2
    f102:	b2da      	uxtb	r2, r3
    f104:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f108:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f10c:	701a      	strb	r2, [r3, #0]
    f10e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f112:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f116:	781a      	ldrb	r2, [r3, #0]
    f118:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f11c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f120:	781b      	ldrb	r3, [r3, #0]
    f122:	4413      	add	r3, r2
    f124:	b2da      	uxtb	r2, r3
    f126:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f12a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f12e:	701a      	strb	r2, [r3, #0]
    f130:	f24c 5349 	movw	r3, #50505	; 0xc549
    f134:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f138:	781b      	ldrb	r3, [r3, #0]
    f13a:	3301      	adds	r3, #1
    f13c:	b2da      	uxtb	r2, r3
    f13e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f142:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f146:	701a      	strb	r2, [r3, #0]
    f148:	f24c 5349 	movw	r3, #50505	; 0xc549
    f14c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f150:	781b      	ldrb	r3, [r3, #0]
    f152:	2bff      	cmp	r3, #255	; 0xff
    f154:	d110      	bne.n	f178 <send_gps_pos+0x5e0>
    f156:	f24c 5349 	movw	r3, #50505	; 0xc549
    f15a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f15e:	2200      	movs	r2, #0
    f160:	701a      	strb	r2, [r3, #0]
    f162:	e009      	b.n	f178 <send_gps_pos+0x5e0>
    f164:	2004c6cd 	.word	0x2004c6cd
    f168:	2004c6ce 	.word	0x2004c6ce
    f16c:	2004c6cf 	.word	0x2004c6cf
    f170:	2004c6d1 	.word	0x2004c6d1
    f174:	2004c6d2 	.word	0x2004c6d2
    f178:	f24c 5349 	movw	r3, #50505	; 0xc549
    f17c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f180:	781b      	ldrb	r3, [r3, #0]
    f182:	461a      	mov	r2, r3
    f184:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
    f188:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f18c:	78d9      	ldrb	r1, [r3, #3]
    f18e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f192:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f196:	5499      	strb	r1, [r3, r2]
    f198:	4bd3      	ldr	r3, [pc, #844]	; (f4e8 <send_gps_pos+0x950>)
    f19a:	781a      	ldrb	r2, [r3, #0]
    f19c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f1a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1a4:	781b      	ldrb	r3, [r3, #0]
    f1a6:	4413      	add	r3, r2
    f1a8:	b2da      	uxtb	r2, r3
    f1aa:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f1ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1b2:	701a      	strb	r2, [r3, #0]
    f1b4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f1b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1bc:	781a      	ldrb	r2, [r3, #0]
    f1be:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f1c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1c6:	781b      	ldrb	r3, [r3, #0]
    f1c8:	4413      	add	r3, r2
    f1ca:	b2da      	uxtb	r2, r3
    f1cc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f1d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1d4:	701a      	strb	r2, [r3, #0]
    f1d6:	f24c 5349 	movw	r3, #50505	; 0xc549
    f1da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1de:	781b      	ldrb	r3, [r3, #0]
    f1e0:	3301      	adds	r3, #1
    f1e2:	b2da      	uxtb	r2, r3
    f1e4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f1e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1ec:	701a      	strb	r2, [r3, #0]
    f1ee:	f24c 5349 	movw	r3, #50505	; 0xc549
    f1f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f1f6:	781b      	ldrb	r3, [r3, #0]
    f1f8:	2bff      	cmp	r3, #255	; 0xff
    f1fa:	d105      	bne.n	f208 <send_gps_pos+0x670>
    f1fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    f200:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f204:	2200      	movs	r2, #0
    f206:	701a      	strb	r2, [r3, #0]
    f208:	f24c 5349 	movw	r3, #50505	; 0xc549
    f20c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f210:	781b      	ldrb	r3, [r3, #0]
    f212:	461a      	mov	r2, r3
    f214:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f218:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f21c:	7819      	ldrb	r1, [r3, #0]
    f21e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f222:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f226:	5499      	strb	r1, [r3, r2]
    f228:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f22c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f230:	781a      	ldrb	r2, [r3, #0]
    f232:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f236:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f23a:	781b      	ldrb	r3, [r3, #0]
    f23c:	4413      	add	r3, r2
    f23e:	b2da      	uxtb	r2, r3
    f240:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f244:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f248:	701a      	strb	r2, [r3, #0]
    f24a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f24e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f252:	781a      	ldrb	r2, [r3, #0]
    f254:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f258:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f25c:	781b      	ldrb	r3, [r3, #0]
    f25e:	4413      	add	r3, r2
    f260:	b2da      	uxtb	r2, r3
    f262:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f266:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f26a:	701a      	strb	r2, [r3, #0]
    f26c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f270:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f274:	781b      	ldrb	r3, [r3, #0]
    f276:	3301      	adds	r3, #1
    f278:	b2da      	uxtb	r2, r3
    f27a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f27e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f282:	701a      	strb	r2, [r3, #0]
    f284:	f24c 5349 	movw	r3, #50505	; 0xc549
    f288:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f28c:	781b      	ldrb	r3, [r3, #0]
    f28e:	2bff      	cmp	r3, #255	; 0xff
    f290:	d105      	bne.n	f29e <send_gps_pos+0x706>
    f292:	f24c 5349 	movw	r3, #50505	; 0xc549
    f296:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f29a:	2200      	movs	r2, #0
    f29c:	701a      	strb	r2, [r3, #0]
    f29e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f2a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2a6:	781b      	ldrb	r3, [r3, #0]
    f2a8:	461a      	mov	r2, r3
    f2aa:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f2ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2b2:	7859      	ldrb	r1, [r3, #1]
    f2b4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f2b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2bc:	5499      	strb	r1, [r3, r2]
    f2be:	4b8b      	ldr	r3, [pc, #556]	; (f4ec <send_gps_pos+0x954>)
    f2c0:	781a      	ldrb	r2, [r3, #0]
    f2c2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f2c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2ca:	781b      	ldrb	r3, [r3, #0]
    f2cc:	4413      	add	r3, r2
    f2ce:	b2da      	uxtb	r2, r3
    f2d0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f2d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2d8:	701a      	strb	r2, [r3, #0]
    f2da:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f2de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2e2:	781a      	ldrb	r2, [r3, #0]
    f2e4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f2e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2ec:	781b      	ldrb	r3, [r3, #0]
    f2ee:	4413      	add	r3, r2
    f2f0:	b2da      	uxtb	r2, r3
    f2f2:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f2f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f2fa:	701a      	strb	r2, [r3, #0]
    f2fc:	f24c 5349 	movw	r3, #50505	; 0xc549
    f300:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f304:	781b      	ldrb	r3, [r3, #0]
    f306:	3301      	adds	r3, #1
    f308:	b2da      	uxtb	r2, r3
    f30a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f30e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f312:	701a      	strb	r2, [r3, #0]
    f314:	f24c 5349 	movw	r3, #50505	; 0xc549
    f318:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f31c:	781b      	ldrb	r3, [r3, #0]
    f31e:	2bff      	cmp	r3, #255	; 0xff
    f320:	d105      	bne.n	f32e <send_gps_pos+0x796>
    f322:	f24c 5349 	movw	r3, #50505	; 0xc549
    f326:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f32a:	2200      	movs	r2, #0
    f32c:	701a      	strb	r2, [r3, #0]
    f32e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f332:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f336:	781b      	ldrb	r3, [r3, #0]
    f338:	461a      	mov	r2, r3
    f33a:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f33e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f342:	7899      	ldrb	r1, [r3, #2]
    f344:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f348:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f34c:	5499      	strb	r1, [r3, r2]
    f34e:	4b68      	ldr	r3, [pc, #416]	; (f4f0 <send_gps_pos+0x958>)
    f350:	781a      	ldrb	r2, [r3, #0]
    f352:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f356:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f35a:	781b      	ldrb	r3, [r3, #0]
    f35c:	4413      	add	r3, r2
    f35e:	b2da      	uxtb	r2, r3
    f360:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f364:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f368:	701a      	strb	r2, [r3, #0]
    f36a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f36e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f372:	781a      	ldrb	r2, [r3, #0]
    f374:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f378:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f37c:	781b      	ldrb	r3, [r3, #0]
    f37e:	4413      	add	r3, r2
    f380:	b2da      	uxtb	r2, r3
    f382:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f386:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f38a:	701a      	strb	r2, [r3, #0]
    f38c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f390:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f394:	781b      	ldrb	r3, [r3, #0]
    f396:	3301      	adds	r3, #1
    f398:	b2da      	uxtb	r2, r3
    f39a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f39e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3a2:	701a      	strb	r2, [r3, #0]
    f3a4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f3a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3ac:	781b      	ldrb	r3, [r3, #0]
    f3ae:	2bff      	cmp	r3, #255	; 0xff
    f3b0:	d105      	bne.n	f3be <send_gps_pos+0x826>
    f3b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    f3b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3ba:	2200      	movs	r2, #0
    f3bc:	701a      	strb	r2, [r3, #0]
    f3be:	f24c 5349 	movw	r3, #50505	; 0xc549
    f3c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3c6:	781b      	ldrb	r3, [r3, #0]
    f3c8:	461a      	mov	r2, r3
    f3ca:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
    f3ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3d2:	78d9      	ldrb	r1, [r3, #3]
    f3d4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f3d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3dc:	5499      	strb	r1, [r3, r2]
    f3de:	4b45      	ldr	r3, [pc, #276]	; (f4f4 <send_gps_pos+0x95c>)
    f3e0:	781a      	ldrb	r2, [r3, #0]
    f3e2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f3e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3ea:	781b      	ldrb	r3, [r3, #0]
    f3ec:	4413      	add	r3, r2
    f3ee:	b2da      	uxtb	r2, r3
    f3f0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f3f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f3f8:	701a      	strb	r2, [r3, #0]
    f3fa:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f3fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f402:	781a      	ldrb	r2, [r3, #0]
    f404:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f408:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f40c:	781b      	ldrb	r3, [r3, #0]
    f40e:	4413      	add	r3, r2
    f410:	b2da      	uxtb	r2, r3
    f412:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f416:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f41a:	701a      	strb	r2, [r3, #0]
    f41c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f420:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f424:	781b      	ldrb	r3, [r3, #0]
    f426:	3301      	adds	r3, #1
    f428:	b2da      	uxtb	r2, r3
    f42a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f42e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f432:	701a      	strb	r2, [r3, #0]
    f434:	f24c 5349 	movw	r3, #50505	; 0xc549
    f438:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f43c:	781b      	ldrb	r3, [r3, #0]
    f43e:	2bff      	cmp	r3, #255	; 0xff
    f440:	d105      	bne.n	f44e <send_gps_pos+0x8b6>
    f442:	f24c 5349 	movw	r3, #50505	; 0xc549
    f446:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f44a:	2200      	movs	r2, #0
    f44c:	701a      	strb	r2, [r3, #0]
    f44e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f452:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f456:	781b      	ldrb	r3, [r3, #0]
    f458:	461a      	mov	r2, r3
    f45a:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f45e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f462:	7819      	ldrb	r1, [r3, #0]
    f464:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f468:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f46c:	5499      	strb	r1, [r3, r2]
    f46e:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f472:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f476:	781a      	ldrb	r2, [r3, #0]
    f478:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f47c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f480:	781b      	ldrb	r3, [r3, #0]
    f482:	4413      	add	r3, r2
    f484:	b2da      	uxtb	r2, r3
    f486:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f48a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f48e:	701a      	strb	r2, [r3, #0]
    f490:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f494:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f498:	781a      	ldrb	r2, [r3, #0]
    f49a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f49e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4a2:	781b      	ldrb	r3, [r3, #0]
    f4a4:	4413      	add	r3, r2
    f4a6:	b2da      	uxtb	r2, r3
    f4a8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f4ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4b0:	701a      	strb	r2, [r3, #0]
    f4b2:	f24c 5349 	movw	r3, #50505	; 0xc549
    f4b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4ba:	781b      	ldrb	r3, [r3, #0]
    f4bc:	3301      	adds	r3, #1
    f4be:	b2da      	uxtb	r2, r3
    f4c0:	f24c 5349 	movw	r3, #50505	; 0xc549
    f4c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4c8:	701a      	strb	r2, [r3, #0]
    f4ca:	f24c 5349 	movw	r3, #50505	; 0xc549
    f4ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4d2:	781b      	ldrb	r3, [r3, #0]
    f4d4:	2bff      	cmp	r3, #255	; 0xff
    f4d6:	d10f      	bne.n	f4f8 <send_gps_pos+0x960>
    f4d8:	f24c 5349 	movw	r3, #50505	; 0xc549
    f4dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f4e0:	2200      	movs	r2, #0
    f4e2:	701a      	strb	r2, [r3, #0]
    f4e4:	e008      	b.n	f4f8 <send_gps_pos+0x960>
    f4e6:	bf00      	nop
    f4e8:	2004c6d3 	.word	0x2004c6d3
    f4ec:	2004c6c9 	.word	0x2004c6c9
    f4f0:	2004c6ca 	.word	0x2004c6ca
    f4f4:	2004c6cb 	.word	0x2004c6cb
    f4f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    f4fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f500:	781b      	ldrb	r3, [r3, #0]
    f502:	461a      	mov	r2, r3
    f504:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f508:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f50c:	7859      	ldrb	r1, [r3, #1]
    f50e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f512:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f516:	5499      	strb	r1, [r3, r2]
    f518:	4bd1      	ldr	r3, [pc, #836]	; (f860 <send_gps_pos+0xcc8>)
    f51a:	781a      	ldrb	r2, [r3, #0]
    f51c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f520:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f524:	781b      	ldrb	r3, [r3, #0]
    f526:	4413      	add	r3, r2
    f528:	b2da      	uxtb	r2, r3
    f52a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f52e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f532:	701a      	strb	r2, [r3, #0]
    f534:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f538:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f53c:	781a      	ldrb	r2, [r3, #0]
    f53e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f542:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f546:	781b      	ldrb	r3, [r3, #0]
    f548:	4413      	add	r3, r2
    f54a:	b2da      	uxtb	r2, r3
    f54c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f550:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f554:	701a      	strb	r2, [r3, #0]
    f556:	f24c 5349 	movw	r3, #50505	; 0xc549
    f55a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f55e:	781b      	ldrb	r3, [r3, #0]
    f560:	3301      	adds	r3, #1
    f562:	b2da      	uxtb	r2, r3
    f564:	f24c 5349 	movw	r3, #50505	; 0xc549
    f568:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f56c:	701a      	strb	r2, [r3, #0]
    f56e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f572:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f576:	781b      	ldrb	r3, [r3, #0]
    f578:	2bff      	cmp	r3, #255	; 0xff
    f57a:	d105      	bne.n	f588 <send_gps_pos+0x9f0>
    f57c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f580:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f584:	2200      	movs	r2, #0
    f586:	701a      	strb	r2, [r3, #0]
    f588:	f24c 5349 	movw	r3, #50505	; 0xc549
    f58c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f590:	781b      	ldrb	r3, [r3, #0]
    f592:	461a      	mov	r2, r3
    f594:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f598:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f59c:	7899      	ldrb	r1, [r3, #2]
    f59e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f5a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5a6:	5499      	strb	r1, [r3, r2]
    f5a8:	4bae      	ldr	r3, [pc, #696]	; (f864 <send_gps_pos+0xccc>)
    f5aa:	781a      	ldrb	r2, [r3, #0]
    f5ac:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f5b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5b4:	781b      	ldrb	r3, [r3, #0]
    f5b6:	4413      	add	r3, r2
    f5b8:	b2da      	uxtb	r2, r3
    f5ba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f5be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5c2:	701a      	strb	r2, [r3, #0]
    f5c4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f5c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5cc:	781a      	ldrb	r2, [r3, #0]
    f5ce:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f5d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5d6:	781b      	ldrb	r3, [r3, #0]
    f5d8:	4413      	add	r3, r2
    f5da:	b2da      	uxtb	r2, r3
    f5dc:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f5e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5e4:	701a      	strb	r2, [r3, #0]
    f5e6:	f24c 5349 	movw	r3, #50505	; 0xc549
    f5ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5ee:	781b      	ldrb	r3, [r3, #0]
    f5f0:	3301      	adds	r3, #1
    f5f2:	b2da      	uxtb	r2, r3
    f5f4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f5f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f5fc:	701a      	strb	r2, [r3, #0]
    f5fe:	f24c 5349 	movw	r3, #50505	; 0xc549
    f602:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f606:	781b      	ldrb	r3, [r3, #0]
    f608:	2bff      	cmp	r3, #255	; 0xff
    f60a:	d105      	bne.n	f618 <send_gps_pos+0xa80>
    f60c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f610:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f614:	2200      	movs	r2, #0
    f616:	701a      	strb	r2, [r3, #0]
    f618:	f24c 5349 	movw	r3, #50505	; 0xc549
    f61c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f620:	781b      	ldrb	r3, [r3, #0]
    f622:	461a      	mov	r2, r3
    f624:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
    f628:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f62c:	78d9      	ldrb	r1, [r3, #3]
    f62e:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f632:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f636:	5499      	strb	r1, [r3, r2]
    f638:	4b8b      	ldr	r3, [pc, #556]	; (f868 <send_gps_pos+0xcd0>)
    f63a:	781a      	ldrb	r2, [r3, #0]
    f63c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f640:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f644:	781b      	ldrb	r3, [r3, #0]
    f646:	4413      	add	r3, r2
    f648:	b2da      	uxtb	r2, r3
    f64a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f64e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f652:	701a      	strb	r2, [r3, #0]
    f654:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f658:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f65c:	781a      	ldrb	r2, [r3, #0]
    f65e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f662:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f666:	781b      	ldrb	r3, [r3, #0]
    f668:	4413      	add	r3, r2
    f66a:	b2da      	uxtb	r2, r3
    f66c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f670:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f674:	701a      	strb	r2, [r3, #0]
    f676:	f24c 5349 	movw	r3, #50505	; 0xc549
    f67a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f67e:	781b      	ldrb	r3, [r3, #0]
    f680:	3301      	adds	r3, #1
    f682:	b2da      	uxtb	r2, r3
    f684:	f24c 5349 	movw	r3, #50505	; 0xc549
    f688:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f68c:	701a      	strb	r2, [r3, #0]
    f68e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f692:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f696:	781b      	ldrb	r3, [r3, #0]
    f698:	2bff      	cmp	r3, #255	; 0xff
    f69a:	d105      	bne.n	f6a8 <send_gps_pos+0xb10>
    f69c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f6a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6a4:	2200      	movs	r2, #0
    f6a6:	701a      	strb	r2, [r3, #0]
    f6a8:	f24c 5349 	movw	r3, #50505	; 0xc549
    f6ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6b0:	781b      	ldrb	r3, [r3, #0]
    f6b2:	461a      	mov	r2, r3
    f6b4:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f6b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6bc:	7819      	ldrb	r1, [r3, #0]
    f6be:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f6c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6c6:	5499      	strb	r1, [r3, r2]
    f6c8:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f6cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6d0:	781a      	ldrb	r2, [r3, #0]
    f6d2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f6d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6da:	781b      	ldrb	r3, [r3, #0]
    f6dc:	4413      	add	r3, r2
    f6de:	b2da      	uxtb	r2, r3
    f6e0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f6e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6e8:	701a      	strb	r2, [r3, #0]
    f6ea:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f6ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6f2:	781a      	ldrb	r2, [r3, #0]
    f6f4:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f6f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f6fc:	781b      	ldrb	r3, [r3, #0]
    f6fe:	4413      	add	r3, r2
    f700:	b2da      	uxtb	r2, r3
    f702:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f706:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f70a:	701a      	strb	r2, [r3, #0]
    f70c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f710:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f714:	781b      	ldrb	r3, [r3, #0]
    f716:	3301      	adds	r3, #1
    f718:	b2da      	uxtb	r2, r3
    f71a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f71e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f722:	701a      	strb	r2, [r3, #0]
    f724:	f24c 5349 	movw	r3, #50505	; 0xc549
    f728:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f72c:	781b      	ldrb	r3, [r3, #0]
    f72e:	2bff      	cmp	r3, #255	; 0xff
    f730:	d105      	bne.n	f73e <send_gps_pos+0xba6>
    f732:	f24c 5349 	movw	r3, #50505	; 0xc549
    f736:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f73a:	2200      	movs	r2, #0
    f73c:	701a      	strb	r2, [r3, #0]
    f73e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f742:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f746:	781b      	ldrb	r3, [r3, #0]
    f748:	461a      	mov	r2, r3
    f74a:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f74e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f752:	7859      	ldrb	r1, [r3, #1]
    f754:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f758:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f75c:	5499      	strb	r1, [r3, r2]
    f75e:	4b43      	ldr	r3, [pc, #268]	; (f86c <send_gps_pos+0xcd4>)
    f760:	781a      	ldrb	r2, [r3, #0]
    f762:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f766:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f76a:	781b      	ldrb	r3, [r3, #0]
    f76c:	4413      	add	r3, r2
    f76e:	b2da      	uxtb	r2, r3
    f770:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f774:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f778:	701a      	strb	r2, [r3, #0]
    f77a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f77e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f782:	781a      	ldrb	r2, [r3, #0]
    f784:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f788:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f78c:	781b      	ldrb	r3, [r3, #0]
    f78e:	4413      	add	r3, r2
    f790:	b2da      	uxtb	r2, r3
    f792:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f796:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f79a:	701a      	strb	r2, [r3, #0]
    f79c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f7a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7a4:	781b      	ldrb	r3, [r3, #0]
    f7a6:	3301      	adds	r3, #1
    f7a8:	b2da      	uxtb	r2, r3
    f7aa:	f24c 5349 	movw	r3, #50505	; 0xc549
    f7ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7b2:	701a      	strb	r2, [r3, #0]
    f7b4:	f24c 5349 	movw	r3, #50505	; 0xc549
    f7b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7bc:	781b      	ldrb	r3, [r3, #0]
    f7be:	2bff      	cmp	r3, #255	; 0xff
    f7c0:	d105      	bne.n	f7ce <send_gps_pos+0xc36>
    f7c2:	f24c 5349 	movw	r3, #50505	; 0xc549
    f7c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7ca:	2200      	movs	r2, #0
    f7cc:	701a      	strb	r2, [r3, #0]
    f7ce:	f24c 5349 	movw	r3, #50505	; 0xc549
    f7d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7d6:	781b      	ldrb	r3, [r3, #0]
    f7d8:	461a      	mov	r2, r3
    f7da:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f7de:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7e2:	7899      	ldrb	r1, [r3, #2]
    f7e4:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f7e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7ec:	5499      	strb	r1, [r3, r2]
    f7ee:	4b20      	ldr	r3, [pc, #128]	; (f870 <send_gps_pos+0xcd8>)
    f7f0:	781a      	ldrb	r2, [r3, #0]
    f7f2:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f7f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f7fa:	781b      	ldrb	r3, [r3, #0]
    f7fc:	4413      	add	r3, r2
    f7fe:	b2da      	uxtb	r2, r3
    f800:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f804:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f808:	701a      	strb	r2, [r3, #0]
    f80a:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f80e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f812:	781a      	ldrb	r2, [r3, #0]
    f814:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f818:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f81c:	781b      	ldrb	r3, [r3, #0]
    f81e:	4413      	add	r3, r2
    f820:	b2da      	uxtb	r2, r3
    f822:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f826:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f82a:	701a      	strb	r2, [r3, #0]
    f82c:	f24c 5349 	movw	r3, #50505	; 0xc549
    f830:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f834:	781b      	ldrb	r3, [r3, #0]
    f836:	3301      	adds	r3, #1
    f838:	b2da      	uxtb	r2, r3
    f83a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f83e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f842:	701a      	strb	r2, [r3, #0]
    f844:	f24c 5349 	movw	r3, #50505	; 0xc549
    f848:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f84c:	781b      	ldrb	r3, [r3, #0]
    f84e:	2bff      	cmp	r3, #255	; 0xff
    f850:	d110      	bne.n	f874 <send_gps_pos+0xcdc>
    f852:	f24c 5349 	movw	r3, #50505	; 0xc549
    f856:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f85a:	2200      	movs	r2, #0
    f85c:	701a      	strb	r2, [r3, #0]
    f85e:	e009      	b.n	f874 <send_gps_pos+0xcdc>
    f860:	2004c6bd 	.word	0x2004c6bd
    f864:	2004c6be 	.word	0x2004c6be
    f868:	2004c6bf 	.word	0x2004c6bf
    f86c:	2004c6c1 	.word	0x2004c6c1
    f870:	2004c6c2 	.word	0x2004c6c2
    f874:	f24c 5349 	movw	r3, #50505	; 0xc549
    f878:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f87c:	781b      	ldrb	r3, [r3, #0]
    f87e:	461a      	mov	r2, r3
    f880:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
    f884:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f888:	78d9      	ldrb	r1, [r3, #3]
    f88a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f88e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f892:	5499      	strb	r1, [r3, r2]
    f894:	4bd3      	ldr	r3, [pc, #844]	; (fbe4 <send_gps_pos+0x104c>)
    f896:	781a      	ldrb	r2, [r3, #0]
    f898:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f89c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8a0:	781b      	ldrb	r3, [r3, #0]
    f8a2:	4413      	add	r3, r2
    f8a4:	b2da      	uxtb	r2, r3
    f8a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f8aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8ae:	701a      	strb	r2, [r3, #0]
    f8b0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f8b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8b8:	781a      	ldrb	r2, [r3, #0]
    f8ba:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f8be:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8c2:	781b      	ldrb	r3, [r3, #0]
    f8c4:	4413      	add	r3, r2
    f8c6:	b2da      	uxtb	r2, r3
    f8c8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f8cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8d0:	701a      	strb	r2, [r3, #0]
    f8d2:	f24c 5349 	movw	r3, #50505	; 0xc549
    f8d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8da:	781b      	ldrb	r3, [r3, #0]
    f8dc:	3301      	adds	r3, #1
    f8de:	b2da      	uxtb	r2, r3
    f8e0:	f24c 5349 	movw	r3, #50505	; 0xc549
    f8e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8e8:	701a      	strb	r2, [r3, #0]
    f8ea:	f24c 5349 	movw	r3, #50505	; 0xc549
    f8ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f8f2:	781b      	ldrb	r3, [r3, #0]
    f8f4:	2bff      	cmp	r3, #255	; 0xff
    f8f6:	d105      	bne.n	f904 <send_gps_pos+0xd6c>
    f8f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    f8fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f900:	2200      	movs	r2, #0
    f902:	701a      	strb	r2, [r3, #0]
    f904:	f24c 5349 	movw	r3, #50505	; 0xc549
    f908:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f90c:	781b      	ldrb	r3, [r3, #0]
    f90e:	461a      	mov	r2, r3
    f910:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    f914:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f918:	7819      	ldrb	r1, [r3, #0]
    f91a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f91e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f922:	5499      	strb	r1, [r3, r2]
    f924:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    f928:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f92c:	781a      	ldrb	r2, [r3, #0]
    f92e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f932:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f936:	781b      	ldrb	r3, [r3, #0]
    f938:	4413      	add	r3, r2
    f93a:	b2da      	uxtb	r2, r3
    f93c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f940:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f944:	701a      	strb	r2, [r3, #0]
    f946:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f94a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f94e:	781a      	ldrb	r2, [r3, #0]
    f950:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f954:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f958:	781b      	ldrb	r3, [r3, #0]
    f95a:	4413      	add	r3, r2
    f95c:	b2da      	uxtb	r2, r3
    f95e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f962:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f966:	701a      	strb	r2, [r3, #0]
    f968:	f24c 5349 	movw	r3, #50505	; 0xc549
    f96c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f970:	781b      	ldrb	r3, [r3, #0]
    f972:	3301      	adds	r3, #1
    f974:	b2da      	uxtb	r2, r3
    f976:	f24c 5349 	movw	r3, #50505	; 0xc549
    f97a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f97e:	701a      	strb	r2, [r3, #0]
    f980:	f24c 5349 	movw	r3, #50505	; 0xc549
    f984:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f988:	781b      	ldrb	r3, [r3, #0]
    f98a:	2bff      	cmp	r3, #255	; 0xff
    f98c:	d105      	bne.n	f99a <send_gps_pos+0xe02>
    f98e:	f24c 5349 	movw	r3, #50505	; 0xc549
    f992:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f996:	2200      	movs	r2, #0
    f998:	701a      	strb	r2, [r3, #0]
    f99a:	f24c 5349 	movw	r3, #50505	; 0xc549
    f99e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9a2:	781b      	ldrb	r3, [r3, #0]
    f9a4:	461a      	mov	r2, r3
    f9a6:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    f9aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9ae:	7859      	ldrb	r1, [r3, #1]
    f9b0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    f9b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9b8:	5499      	strb	r1, [r3, r2]
    f9ba:	4b8b      	ldr	r3, [pc, #556]	; (fbe8 <send_gps_pos+0x1050>)
    f9bc:	781a      	ldrb	r2, [r3, #0]
    f9be:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f9c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9c6:	781b      	ldrb	r3, [r3, #0]
    f9c8:	4413      	add	r3, r2
    f9ca:	b2da      	uxtb	r2, r3
    f9cc:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f9d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9d4:	701a      	strb	r2, [r3, #0]
    f9d6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f9da:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9de:	781a      	ldrb	r2, [r3, #0]
    f9e0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    f9e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9e8:	781b      	ldrb	r3, [r3, #0]
    f9ea:	4413      	add	r3, r2
    f9ec:	b2da      	uxtb	r2, r3
    f9ee:	f24c 634e 	movw	r3, #50766	; 0xc64e
    f9f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    f9f6:	701a      	strb	r2, [r3, #0]
    f9f8:	f24c 5349 	movw	r3, #50505	; 0xc549
    f9fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa00:	781b      	ldrb	r3, [r3, #0]
    fa02:	3301      	adds	r3, #1
    fa04:	b2da      	uxtb	r2, r3
    fa06:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa0e:	701a      	strb	r2, [r3, #0]
    fa10:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa14:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa18:	781b      	ldrb	r3, [r3, #0]
    fa1a:	2bff      	cmp	r3, #255	; 0xff
    fa1c:	d105      	bne.n	fa2a <send_gps_pos+0xe92>
    fa1e:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa22:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa26:	2200      	movs	r2, #0
    fa28:	701a      	strb	r2, [r3, #0]
    fa2a:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa32:	781b      	ldrb	r3, [r3, #0]
    fa34:	461a      	mov	r2, r3
    fa36:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    fa3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa3e:	7899      	ldrb	r1, [r3, #2]
    fa40:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fa44:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa48:	5499      	strb	r1, [r3, r2]
    fa4a:	4b68      	ldr	r3, [pc, #416]	; (fbec <send_gps_pos+0x1054>)
    fa4c:	781a      	ldrb	r2, [r3, #0]
    fa4e:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fa52:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa56:	781b      	ldrb	r3, [r3, #0]
    fa58:	4413      	add	r3, r2
    fa5a:	b2da      	uxtb	r2, r3
    fa5c:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fa60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa64:	701a      	strb	r2, [r3, #0]
    fa66:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fa6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa6e:	781a      	ldrb	r2, [r3, #0]
    fa70:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fa74:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa78:	781b      	ldrb	r3, [r3, #0]
    fa7a:	4413      	add	r3, r2
    fa7c:	b2da      	uxtb	r2, r3
    fa7e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fa82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa86:	701a      	strb	r2, [r3, #0]
    fa88:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa90:	781b      	ldrb	r3, [r3, #0]
    fa92:	3301      	adds	r3, #1
    fa94:	b2da      	uxtb	r2, r3
    fa96:	f24c 5349 	movw	r3, #50505	; 0xc549
    fa9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fa9e:	701a      	strb	r2, [r3, #0]
    faa0:	f24c 5349 	movw	r3, #50505	; 0xc549
    faa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faa8:	781b      	ldrb	r3, [r3, #0]
    faaa:	2bff      	cmp	r3, #255	; 0xff
    faac:	d105      	bne.n	faba <send_gps_pos+0xf22>
    faae:	f24c 5349 	movw	r3, #50505	; 0xc549
    fab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fab6:	2200      	movs	r2, #0
    fab8:	701a      	strb	r2, [r3, #0]
    faba:	f24c 5349 	movw	r3, #50505	; 0xc549
    fabe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fac2:	781b      	ldrb	r3, [r3, #0]
    fac4:	461a      	mov	r2, r3
    fac6:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
    faca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    face:	78d9      	ldrb	r1, [r3, #3]
    fad0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fad4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fad8:	5499      	strb	r1, [r3, r2]
    fada:	4b45      	ldr	r3, [pc, #276]	; (fbf0 <send_gps_pos+0x1058>)
    fadc:	781a      	ldrb	r2, [r3, #0]
    fade:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fae6:	781b      	ldrb	r3, [r3, #0]
    fae8:	4413      	add	r3, r2
    faea:	b2da      	uxtb	r2, r3
    faec:	f24c 634d 	movw	r3, #50765	; 0xc64d
    faf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    faf4:	701a      	strb	r2, [r3, #0]
    faf6:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fafa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fafe:	781a      	ldrb	r2, [r3, #0]
    fb00:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fb04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb08:	781b      	ldrb	r3, [r3, #0]
    fb0a:	4413      	add	r3, r2
    fb0c:	b2da      	uxtb	r2, r3
    fb0e:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fb12:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb16:	701a      	strb	r2, [r3, #0]
    fb18:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb20:	781b      	ldrb	r3, [r3, #0]
    fb22:	3301      	adds	r3, #1
    fb24:	b2da      	uxtb	r2, r3
    fb26:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb2e:	701a      	strb	r2, [r3, #0]
    fb30:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb38:	781b      	ldrb	r3, [r3, #0]
    fb3a:	2bff      	cmp	r3, #255	; 0xff
    fb3c:	d105      	bne.n	fb4a <send_gps_pos+0xfb2>
    fb3e:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb42:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb46:	2200      	movs	r2, #0
    fb48:	701a      	strb	r2, [r3, #0]
    fb4a:	f24c 5349 	movw	r3, #50505	; 0xc549
    fb4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb52:	781b      	ldrb	r3, [r3, #0]
    fb54:	461a      	mov	r2, r3
    fb56:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fb5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb5e:	7819      	ldrb	r1, [r3, #0]
    fb60:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fb64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb68:	5499      	strb	r1, [r3, r2]
    fb6a:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fb6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb72:	781a      	ldrb	r2, [r3, #0]
    fb74:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fb78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb7c:	781b      	ldrb	r3, [r3, #0]
    fb7e:	4413      	add	r3, r2
    fb80:	b2da      	uxtb	r2, r3
    fb82:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fb86:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb8a:	701a      	strb	r2, [r3, #0]
    fb8c:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fb90:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb94:	781a      	ldrb	r2, [r3, #0]
    fb96:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fb9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fb9e:	781b      	ldrb	r3, [r3, #0]
    fba0:	4413      	add	r3, r2
    fba2:	b2da      	uxtb	r2, r3
    fba4:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbac:	701a      	strb	r2, [r3, #0]
    fbae:	f24c 5349 	movw	r3, #50505	; 0xc549
    fbb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbb6:	781b      	ldrb	r3, [r3, #0]
    fbb8:	3301      	adds	r3, #1
    fbba:	b2da      	uxtb	r2, r3
    fbbc:	f24c 5349 	movw	r3, #50505	; 0xc549
    fbc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbc4:	701a      	strb	r2, [r3, #0]
    fbc6:	f24c 5349 	movw	r3, #50505	; 0xc549
    fbca:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbce:	781b      	ldrb	r3, [r3, #0]
    fbd0:	2bff      	cmp	r3, #255	; 0xff
    fbd2:	d10f      	bne.n	fbf4 <send_gps_pos+0x105c>
    fbd4:	f24c 5349 	movw	r3, #50505	; 0xc549
    fbd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbdc:	2200      	movs	r2, #0
    fbde:	701a      	strb	r2, [r3, #0]
    fbe0:	e008      	b.n	fbf4 <send_gps_pos+0x105c>
    fbe2:	bf00      	nop
    fbe4:	2004c6c3 	.word	0x2004c6c3
    fbe8:	2004c6c5 	.word	0x2004c6c5
    fbec:	2004c6c6 	.word	0x2004c6c6
    fbf0:	2004c6c7 	.word	0x2004c6c7
    fbf4:	f24c 5349 	movw	r3, #50505	; 0xc549
    fbf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fbfc:	781b      	ldrb	r3, [r3, #0]
    fbfe:	461a      	mov	r2, r3
    fc00:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fc04:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc08:	7859      	ldrb	r1, [r3, #1]
    fc0a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fc0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc12:	5499      	strb	r1, [r3, r2]
    fc14:	4bc0      	ldr	r3, [pc, #768]	; (ff18 <send_gps_pos+0x1380>)
    fc16:	781a      	ldrb	r2, [r3, #0]
    fc18:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fc1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc20:	781b      	ldrb	r3, [r3, #0]
    fc22:	4413      	add	r3, r2
    fc24:	b2da      	uxtb	r2, r3
    fc26:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fc2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc2e:	701a      	strb	r2, [r3, #0]
    fc30:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fc34:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc38:	781a      	ldrb	r2, [r3, #0]
    fc3a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fc3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc42:	781b      	ldrb	r3, [r3, #0]
    fc44:	4413      	add	r3, r2
    fc46:	b2da      	uxtb	r2, r3
    fc48:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fc4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc50:	701a      	strb	r2, [r3, #0]
    fc52:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc5a:	781b      	ldrb	r3, [r3, #0]
    fc5c:	3301      	adds	r3, #1
    fc5e:	b2da      	uxtb	r2, r3
    fc60:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc68:	701a      	strb	r2, [r3, #0]
    fc6a:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc72:	781b      	ldrb	r3, [r3, #0]
    fc74:	2bff      	cmp	r3, #255	; 0xff
    fc76:	d105      	bne.n	fc84 <send_gps_pos+0x10ec>
    fc78:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc80:	2200      	movs	r2, #0
    fc82:	701a      	strb	r2, [r3, #0]
    fc84:	f24c 5349 	movw	r3, #50505	; 0xc549
    fc88:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc8c:	781b      	ldrb	r3, [r3, #0]
    fc8e:	461a      	mov	r2, r3
    fc90:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fc94:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fc98:	7899      	ldrb	r1, [r3, #2]
    fc9a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fc9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fca2:	5499      	strb	r1, [r3, r2]
    fca4:	4b9d      	ldr	r3, [pc, #628]	; (ff1c <send_gps_pos+0x1384>)
    fca6:	781a      	ldrb	r2, [r3, #0]
    fca8:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fcac:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcb0:	781b      	ldrb	r3, [r3, #0]
    fcb2:	4413      	add	r3, r2
    fcb4:	b2da      	uxtb	r2, r3
    fcb6:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fcba:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcbe:	701a      	strb	r2, [r3, #0]
    fcc0:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fcc4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcc8:	781a      	ldrb	r2, [r3, #0]
    fcca:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fcce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcd2:	781b      	ldrb	r3, [r3, #0]
    fcd4:	4413      	add	r3, r2
    fcd6:	b2da      	uxtb	r2, r3
    fcd8:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fcdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fce0:	701a      	strb	r2, [r3, #0]
    fce2:	f24c 5349 	movw	r3, #50505	; 0xc549
    fce6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcea:	781b      	ldrb	r3, [r3, #0]
    fcec:	3301      	adds	r3, #1
    fcee:	b2da      	uxtb	r2, r3
    fcf0:	f24c 5349 	movw	r3, #50505	; 0xc549
    fcf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fcf8:	701a      	strb	r2, [r3, #0]
    fcfa:	f24c 5349 	movw	r3, #50505	; 0xc549
    fcfe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd02:	781b      	ldrb	r3, [r3, #0]
    fd04:	2bff      	cmp	r3, #255	; 0xff
    fd06:	d105      	bne.n	fd14 <send_gps_pos+0x117c>
    fd08:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd10:	2200      	movs	r2, #0
    fd12:	701a      	strb	r2, [r3, #0]
    fd14:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd18:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd1c:	781b      	ldrb	r3, [r3, #0]
    fd1e:	461a      	mov	r2, r3
    fd20:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
    fd24:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd28:	78d9      	ldrb	r1, [r3, #3]
    fd2a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fd2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd32:	5499      	strb	r1, [r3, r2]
    fd34:	4b7a      	ldr	r3, [pc, #488]	; (ff20 <send_gps_pos+0x1388>)
    fd36:	781a      	ldrb	r2, [r3, #0]
    fd38:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fd3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd40:	781b      	ldrb	r3, [r3, #0]
    fd42:	4413      	add	r3, r2
    fd44:	b2da      	uxtb	r2, r3
    fd46:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fd4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd4e:	701a      	strb	r2, [r3, #0]
    fd50:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fd54:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd58:	781a      	ldrb	r2, [r3, #0]
    fd5a:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fd5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd62:	781b      	ldrb	r3, [r3, #0]
    fd64:	4413      	add	r3, r2
    fd66:	b2da      	uxtb	r2, r3
    fd68:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fd6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd70:	701a      	strb	r2, [r3, #0]
    fd72:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd76:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd7a:	781b      	ldrb	r3, [r3, #0]
    fd7c:	3301      	adds	r3, #1
    fd7e:	b2da      	uxtb	r2, r3
    fd80:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd84:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd88:	701a      	strb	r2, [r3, #0]
    fd8a:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fd92:	781b      	ldrb	r3, [r3, #0]
    fd94:	2bff      	cmp	r3, #255	; 0xff
    fd96:	d105      	bne.n	fda4 <send_gps_pos+0x120c>
    fd98:	f24c 5349 	movw	r3, #50505	; 0xc549
    fd9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fda0:	2200      	movs	r2, #0
    fda2:	701a      	strb	r2, [r3, #0]
    fda4:	f24c 5349 	movw	r3, #50505	; 0xc549
    fda8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdac:	781b      	ldrb	r3, [r3, #0]
    fdae:	461a      	mov	r2, r3
    fdb0:	f24c 634d 	movw	r3, #50765	; 0xc64d
    fdb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdb8:	7819      	ldrb	r1, [r3, #0]
    fdba:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fdbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdc2:	5499      	strb	r1, [r3, r2]
    fdc4:	f24c 5349 	movw	r3, #50505	; 0xc549
    fdc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdcc:	781b      	ldrb	r3, [r3, #0]
    fdce:	3301      	adds	r3, #1
    fdd0:	b2da      	uxtb	r2, r3
    fdd2:	f24c 5349 	movw	r3, #50505	; 0xc549
    fdd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdda:	701a      	strb	r2, [r3, #0]
    fddc:	f24c 5349 	movw	r3, #50505	; 0xc549
    fde0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fde4:	781b      	ldrb	r3, [r3, #0]
    fde6:	2bff      	cmp	r3, #255	; 0xff
    fde8:	d105      	bne.n	fdf6 <send_gps_pos+0x125e>
    fdea:	f24c 5349 	movw	r3, #50505	; 0xc549
    fdee:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdf2:	2200      	movs	r2, #0
    fdf4:	701a      	strb	r2, [r3, #0]
    fdf6:	f24c 5349 	movw	r3, #50505	; 0xc549
    fdfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fdfe:	781b      	ldrb	r3, [r3, #0]
    fe00:	461a      	mov	r2, r3
    fe02:	f24c 634e 	movw	r3, #50766	; 0xc64e
    fe06:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe0a:	7819      	ldrb	r1, [r3, #0]
    fe0c:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fe10:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe14:	5499      	strb	r1, [r3, r2]
    fe16:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe1e:	781b      	ldrb	r3, [r3, #0]
    fe20:	3301      	adds	r3, #1
    fe22:	b2da      	uxtb	r2, r3
    fe24:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe28:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe2c:	701a      	strb	r2, [r3, #0]
    fe2e:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe32:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe36:	781b      	ldrb	r3, [r3, #0]
    fe38:	2bff      	cmp	r3, #255	; 0xff
    fe3a:	d105      	bne.n	fe48 <send_gps_pos+0x12b0>
    fe3c:	f24c 5349 	movw	r3, #50505	; 0xc549
    fe40:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe44:	2200      	movs	r2, #0
    fe46:	701a      	strb	r2, [r3, #0]
    fe48:	f242 0339 	movw	r3, #8249	; 0x2039
    fe4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fe50:	781b      	ldrb	r3, [r3, #0]
    fe52:	b2db      	uxtb	r3, r3
    fe54:	f003 0310 	and.w	r3, r3, #16
    fe58:	2b00      	cmp	r3, #0
    fe5a:	d15a      	bne.n	ff12 <send_gps_pos+0x137a>
    fe5c:	f24c 534a 	movw	r3, #50506	; 0xc54a
    fe60:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe64:	781b      	ldrb	r3, [r3, #0]
    fe66:	b2db      	uxtb	r3, r3
    fe68:	461a      	mov	r2, r3
    fe6a:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fe6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe72:	5c9a      	ldrb	r2, [r3, r2]
    fe74:	f24c 634b 	movw	r3, #50763	; 0xc64b
    fe78:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe7c:	701a      	strb	r2, [r3, #0]
    fe7e:	f24c 634c 	movw	r3, #50764	; 0xc64c
    fe82:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe86:	2200      	movs	r2, #0
    fe88:	701a      	strb	r2, [r3, #0]
    fe8a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    fe8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fe92:	781b      	ldrb	r3, [r3, #0]
    fe94:	b2db      	uxtb	r3, r3
    fe96:	3301      	adds	r3, #1
    fe98:	b2da      	uxtb	r2, r3
    fe9a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    fe9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fea2:	701a      	strb	r2, [r3, #0]
    fea4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    fea8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    feac:	781b      	ldrb	r3, [r3, #0]
    feae:	b2db      	uxtb	r3, r3
    feb0:	2bff      	cmp	r3, #255	; 0xff
    feb2:	d105      	bne.n	fec0 <send_gps_pos+0x1328>
    feb4:	f24c 534a 	movw	r3, #50506	; 0xc54a
    feb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    febc:	2200      	movs	r2, #0
    febe:	701a      	strb	r2, [r3, #0]
    fec0:	f242 0338 	movw	r3, #8248	; 0x2038
    fec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fec8:	f242 0238 	movw	r2, #8248	; 0x2038
    fecc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    fed0:	7812      	ldrb	r2, [r2, #0]
    fed2:	b2d2      	uxtb	r2, r2
    fed4:	f042 0201 	orr.w	r2, r2, #1
    fed8:	b2d2      	uxtb	r2, r2
    feda:	701a      	strb	r2, [r3, #0]
    fedc:	f242 0339 	movw	r3, #8249	; 0x2039
    fee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    fee4:	f242 0239 	movw	r2, #8249	; 0x2039
    fee8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    feec:	7812      	ldrb	r2, [r2, #0]
    feee:	b2d2      	uxtb	r2, r2
    fef0:	f042 0210 	orr.w	r2, r2, #16
    fef4:	b2d2      	uxtb	r2, r2
    fef6:	701a      	strb	r2, [r3, #0]
    fef8:	e00b      	b.n	ff12 <send_gps_pos+0x137a>
    fefa:	f24c 5348 	movw	r3, #50504	; 0xc548
    fefe:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff02:	781b      	ldrb	r3, [r3, #0]
    ff04:	3301      	adds	r3, #1
    ff06:	b2da      	uxtb	r2, r3
    ff08:	f24c 5348 	movw	r3, #50504	; 0xc548
    ff0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff10:	701a      	strb	r2, [r3, #0]
     estimator_update_state_gps();
    ff12:	f005 fbfd 	bl	15710 <estimator_update_state_gps>
  }
}
    ff16:	bd80      	pop	{r7, pc}
    ff18:	2004c6b9 	.word	0x2004c6b9
    ff1c:	2004c6ba 	.word	0x2004c6ba
    ff20:	2004c6bb 	.word	0x2004c6bb

0000ff24 <send_radIR>:

void send_radIR(void){
    ff24:	b480      	push	{r7}
    ff26:	af00      	add	r7, sp, #0
  if (gps_pos_available)
    ff28:	f24c 63de 	movw	r3, #50910	; 0xc6de
    ff2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff30:	781b      	ldrb	r3, [r3, #0]
    ff32:	2b00      	cmp	r3, #0
    ff34:	f000 85e8 	beq.w	10b08 <send_radIR+0xbe4>
     DOWNLINK_SEND_RAD_OF_IR(&estimator_ir, &estimator_rad, &estimator_rad_of_ir, &ir_roll_neutral, &ir_pitch_neutral);
    ff38:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff40:	781a      	ldrb	r2, [r3, #0]
    ff42:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ff46:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff4a:	781b      	ldrb	r3, [r3, #0]
    ff4c:	b2db      	uxtb	r3, r3
    ff4e:	429a      	cmp	r2, r3
    ff50:	d313      	bcc.n	ff7a <send_radIR+0x56>
    ff52:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ff56:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff5a:	781b      	ldrb	r3, [r3, #0]
    ff5c:	b2db      	uxtb	r3, r3
    ff5e:	461a      	mov	r2, r3
    ff60:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff64:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff68:	781b      	ldrb	r3, [r3, #0]
    ff6a:	1ad3      	subs	r3, r2, r3
    ff6c:	33ff      	adds	r3, #255	; 0xff
    ff6e:	2b14      	cmp	r3, #20
    ff70:	bfd4      	ite	le
    ff72:	2300      	movle	r3, #0
    ff74:	2301      	movgt	r3, #1
    ff76:	b2db      	uxtb	r3, r3
    ff78:	e011      	b.n	ff9e <send_radIR+0x7a>
    ff7a:	f24c 534a 	movw	r3, #50506	; 0xc54a
    ff7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff82:	781b      	ldrb	r3, [r3, #0]
    ff84:	b2db      	uxtb	r3, r3
    ff86:	461a      	mov	r2, r3
    ff88:	f24c 5349 	movw	r3, #50505	; 0xc549
    ff8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ff90:	781b      	ldrb	r3, [r3, #0]
    ff92:	1ad3      	subs	r3, r2, r3
    ff94:	2b14      	cmp	r3, #20
    ff96:	bfd4      	ite	le
    ff98:	2300      	movle	r3, #0
    ff9a:	2301      	movgt	r3, #1
    ff9c:	b2db      	uxtb	r3, r3
    ff9e:	2b00      	cmp	r3, #0
    ffa0:	f000 85a6 	beq.w	10af0 <send_radIR+0xbcc>
    ffa4:	f24c 5349 	movw	r3, #50505	; 0xc549
    ffa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffac:	781b      	ldrb	r3, [r3, #0]
    ffae:	461a      	mov	r2, r3
    ffb0:	f24c 534c 	movw	r3, #50508	; 0xc54c
    ffb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffb8:	2105      	movs	r1, #5
    ffba:	5499      	strb	r1, [r3, r2]
    ffbc:	f24c 5349 	movw	r3, #50505	; 0xc549
    ffc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffc4:	781b      	ldrb	r3, [r3, #0]
    ffc6:	3301      	adds	r3, #1
    ffc8:	b2da      	uxtb	r2, r3
    ffca:	f24c 5349 	movw	r3, #50505	; 0xc549
    ffce:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffd2:	701a      	strb	r2, [r3, #0]
    ffd4:	f24c 5349 	movw	r3, #50505	; 0xc549
    ffd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffdc:	781b      	ldrb	r3, [r3, #0]
    ffde:	2bff      	cmp	r3, #255	; 0xff
    ffe0:	d105      	bne.n	ffee <send_radIR+0xca>
    ffe2:	f24c 5349 	movw	r3, #50505	; 0xc549
    ffe6:	f2c2 0304 	movt	r3, #8196	; 0x2004
    ffea:	2200      	movs	r2, #0
    ffec:	701a      	strb	r2, [r3, #0]
    ffee:	f24c 5349 	movw	r3, #50505	; 0xc549
    fff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
    fff6:	781b      	ldrb	r3, [r3, #0]
    fff8:	461a      	mov	r2, r3
    fffa:	f24c 534c 	movw	r3, #50508	; 0xc54c
    fffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10002:	2105      	movs	r1, #5
   10004:	5499      	strb	r1, [r3, r2]
   10006:	f24c 5349 	movw	r3, #50505	; 0xc549
   1000a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1000e:	781b      	ldrb	r3, [r3, #0]
   10010:	3301      	adds	r3, #1
   10012:	b2da      	uxtb	r2, r3
   10014:	f24c 5349 	movw	r3, #50505	; 0xc549
   10018:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1001c:	701a      	strb	r2, [r3, #0]
   1001e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10022:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10026:	781b      	ldrb	r3, [r3, #0]
   10028:	2bff      	cmp	r3, #255	; 0xff
   1002a:	d105      	bne.n	10038 <send_radIR+0x114>
   1002c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10030:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10034:	2200      	movs	r2, #0
   10036:	701a      	strb	r2, [r3, #0]
   10038:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1003c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10040:	2205      	movs	r2, #5
   10042:	701a      	strb	r2, [r3, #0]
   10044:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10048:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1004c:	2205      	movs	r2, #5
   1004e:	701a      	strb	r2, [r3, #0]
   10050:	f24c 5349 	movw	r3, #50505	; 0xc549
   10054:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10058:	781b      	ldrb	r3, [r3, #0]
   1005a:	461a      	mov	r2, r3
   1005c:	f64c 3340 	movw	r3, #52032	; 0xcb40
   10060:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10064:	7819      	ldrb	r1, [r3, #0]
   10066:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1006a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1006e:	5499      	strb	r1, [r3, r2]
   10070:	f64c 3340 	movw	r3, #52032	; 0xcb40
   10074:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10078:	781a      	ldrb	r2, [r3, #0]
   1007a:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1007e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10082:	781b      	ldrb	r3, [r3, #0]
   10084:	4413      	add	r3, r2
   10086:	b2da      	uxtb	r2, r3
   10088:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1008c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10090:	701a      	strb	r2, [r3, #0]
   10092:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10096:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1009a:	781a      	ldrb	r2, [r3, #0]
   1009c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   100a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100a4:	781b      	ldrb	r3, [r3, #0]
   100a6:	4413      	add	r3, r2
   100a8:	b2da      	uxtb	r2, r3
   100aa:	f24c 634e 	movw	r3, #50766	; 0xc64e
   100ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100b2:	701a      	strb	r2, [r3, #0]
   100b4:	f24c 5349 	movw	r3, #50505	; 0xc549
   100b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100bc:	781b      	ldrb	r3, [r3, #0]
   100be:	3301      	adds	r3, #1
   100c0:	b2da      	uxtb	r2, r3
   100c2:	f24c 5349 	movw	r3, #50505	; 0xc549
   100c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100ca:	701a      	strb	r2, [r3, #0]
   100cc:	f24c 5349 	movw	r3, #50505	; 0xc549
   100d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100d4:	781b      	ldrb	r3, [r3, #0]
   100d6:	2bff      	cmp	r3, #255	; 0xff
   100d8:	d105      	bne.n	100e6 <send_radIR+0x1c2>
   100da:	f24c 5349 	movw	r3, #50505	; 0xc549
   100de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100e2:	2200      	movs	r2, #0
   100e4:	701a      	strb	r2, [r3, #0]
   100e6:	f24c 5349 	movw	r3, #50505	; 0xc549
   100ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100ee:	781b      	ldrb	r3, [r3, #0]
   100f0:	461a      	mov	r2, r3
   100f2:	f64c 3340 	movw	r3, #52032	; 0xcb40
   100f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   100fa:	7859      	ldrb	r1, [r3, #1]
   100fc:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10100:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10104:	5499      	strb	r1, [r3, r2]
   10106:	4bd2      	ldr	r3, [pc, #840]	; (10450 <send_radIR+0x52c>)
   10108:	781a      	ldrb	r2, [r3, #0]
   1010a:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1010e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10112:	781b      	ldrb	r3, [r3, #0]
   10114:	4413      	add	r3, r2
   10116:	b2da      	uxtb	r2, r3
   10118:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1011c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10120:	701a      	strb	r2, [r3, #0]
   10122:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10126:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1012a:	781a      	ldrb	r2, [r3, #0]
   1012c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10130:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10134:	781b      	ldrb	r3, [r3, #0]
   10136:	4413      	add	r3, r2
   10138:	b2da      	uxtb	r2, r3
   1013a:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1013e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10142:	701a      	strb	r2, [r3, #0]
   10144:	f24c 5349 	movw	r3, #50505	; 0xc549
   10148:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1014c:	781b      	ldrb	r3, [r3, #0]
   1014e:	3301      	adds	r3, #1
   10150:	b2da      	uxtb	r2, r3
   10152:	f24c 5349 	movw	r3, #50505	; 0xc549
   10156:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1015a:	701a      	strb	r2, [r3, #0]
   1015c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10160:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10164:	781b      	ldrb	r3, [r3, #0]
   10166:	2bff      	cmp	r3, #255	; 0xff
   10168:	d105      	bne.n	10176 <send_radIR+0x252>
   1016a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1016e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10172:	2200      	movs	r2, #0
   10174:	701a      	strb	r2, [r3, #0]
   10176:	f24c 5349 	movw	r3, #50505	; 0xc549
   1017a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1017e:	781b      	ldrb	r3, [r3, #0]
   10180:	461a      	mov	r2, r3
   10182:	f64c 3340 	movw	r3, #52032	; 0xcb40
   10186:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1018a:	7899      	ldrb	r1, [r3, #2]
   1018c:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10190:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10194:	5499      	strb	r1, [r3, r2]
   10196:	4baf      	ldr	r3, [pc, #700]	; (10454 <send_radIR+0x530>)
   10198:	781a      	ldrb	r2, [r3, #0]
   1019a:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1019e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101a2:	781b      	ldrb	r3, [r3, #0]
   101a4:	4413      	add	r3, r2
   101a6:	b2da      	uxtb	r2, r3
   101a8:	f24c 634d 	movw	r3, #50765	; 0xc64d
   101ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101b0:	701a      	strb	r2, [r3, #0]
   101b2:	f24c 634e 	movw	r3, #50766	; 0xc64e
   101b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101ba:	781a      	ldrb	r2, [r3, #0]
   101bc:	f24c 634d 	movw	r3, #50765	; 0xc64d
   101c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101c4:	781b      	ldrb	r3, [r3, #0]
   101c6:	4413      	add	r3, r2
   101c8:	b2da      	uxtb	r2, r3
   101ca:	f24c 634e 	movw	r3, #50766	; 0xc64e
   101ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101d2:	701a      	strb	r2, [r3, #0]
   101d4:	f24c 5349 	movw	r3, #50505	; 0xc549
   101d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101dc:	781b      	ldrb	r3, [r3, #0]
   101de:	3301      	adds	r3, #1
   101e0:	b2da      	uxtb	r2, r3
   101e2:	f24c 5349 	movw	r3, #50505	; 0xc549
   101e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101ea:	701a      	strb	r2, [r3, #0]
   101ec:	f24c 5349 	movw	r3, #50505	; 0xc549
   101f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   101f4:	781b      	ldrb	r3, [r3, #0]
   101f6:	2bff      	cmp	r3, #255	; 0xff
   101f8:	d105      	bne.n	10206 <send_radIR+0x2e2>
   101fa:	f24c 5349 	movw	r3, #50505	; 0xc549
   101fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10202:	2200      	movs	r2, #0
   10204:	701a      	strb	r2, [r3, #0]
   10206:	f24c 5349 	movw	r3, #50505	; 0xc549
   1020a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1020e:	781b      	ldrb	r3, [r3, #0]
   10210:	461a      	mov	r2, r3
   10212:	f64c 3340 	movw	r3, #52032	; 0xcb40
   10216:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1021a:	78d9      	ldrb	r1, [r3, #3]
   1021c:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10220:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10224:	5499      	strb	r1, [r3, r2]
   10226:	4b8c      	ldr	r3, [pc, #560]	; (10458 <send_radIR+0x534>)
   10228:	781a      	ldrb	r2, [r3, #0]
   1022a:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1022e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10232:	781b      	ldrb	r3, [r3, #0]
   10234:	4413      	add	r3, r2
   10236:	b2da      	uxtb	r2, r3
   10238:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1023c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10240:	701a      	strb	r2, [r3, #0]
   10242:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10246:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1024a:	781a      	ldrb	r2, [r3, #0]
   1024c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10250:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10254:	781b      	ldrb	r3, [r3, #0]
   10256:	4413      	add	r3, r2
   10258:	b2da      	uxtb	r2, r3
   1025a:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1025e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10262:	701a      	strb	r2, [r3, #0]
   10264:	f24c 5349 	movw	r3, #50505	; 0xc549
   10268:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1026c:	781b      	ldrb	r3, [r3, #0]
   1026e:	3301      	adds	r3, #1
   10270:	b2da      	uxtb	r2, r3
   10272:	f24c 5349 	movw	r3, #50505	; 0xc549
   10276:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1027a:	701a      	strb	r2, [r3, #0]
   1027c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10280:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10284:	781b      	ldrb	r3, [r3, #0]
   10286:	2bff      	cmp	r3, #255	; 0xff
   10288:	d105      	bne.n	10296 <send_radIR+0x372>
   1028a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1028e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10292:	2200      	movs	r2, #0
   10294:	701a      	strb	r2, [r3, #0]
   10296:	f24c 5349 	movw	r3, #50505	; 0xc549
   1029a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1029e:	781b      	ldrb	r3, [r3, #0]
   102a0:	461a      	mov	r2, r3
   102a2:	f64c 3344 	movw	r3, #52036	; 0xcb44
   102a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102aa:	7819      	ldrb	r1, [r3, #0]
   102ac:	f24c 534c 	movw	r3, #50508	; 0xc54c
   102b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102b4:	5499      	strb	r1, [r3, r2]
   102b6:	f64c 3344 	movw	r3, #52036	; 0xcb44
   102ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102be:	781a      	ldrb	r2, [r3, #0]
   102c0:	f24c 634d 	movw	r3, #50765	; 0xc64d
   102c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102c8:	781b      	ldrb	r3, [r3, #0]
   102ca:	4413      	add	r3, r2
   102cc:	b2da      	uxtb	r2, r3
   102ce:	f24c 634d 	movw	r3, #50765	; 0xc64d
   102d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102d6:	701a      	strb	r2, [r3, #0]
   102d8:	f24c 634e 	movw	r3, #50766	; 0xc64e
   102dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102e0:	781a      	ldrb	r2, [r3, #0]
   102e2:	f24c 634d 	movw	r3, #50765	; 0xc64d
   102e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102ea:	781b      	ldrb	r3, [r3, #0]
   102ec:	4413      	add	r3, r2
   102ee:	b2da      	uxtb	r2, r3
   102f0:	f24c 634e 	movw	r3, #50766	; 0xc64e
   102f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   102f8:	701a      	strb	r2, [r3, #0]
   102fa:	f24c 5349 	movw	r3, #50505	; 0xc549
   102fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10302:	781b      	ldrb	r3, [r3, #0]
   10304:	3301      	adds	r3, #1
   10306:	b2da      	uxtb	r2, r3
   10308:	f24c 5349 	movw	r3, #50505	; 0xc549
   1030c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10310:	701a      	strb	r2, [r3, #0]
   10312:	f24c 5349 	movw	r3, #50505	; 0xc549
   10316:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1031a:	781b      	ldrb	r3, [r3, #0]
   1031c:	2bff      	cmp	r3, #255	; 0xff
   1031e:	d105      	bne.n	1032c <send_radIR+0x408>
   10320:	f24c 5349 	movw	r3, #50505	; 0xc549
   10324:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10328:	2200      	movs	r2, #0
   1032a:	701a      	strb	r2, [r3, #0]
   1032c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10330:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10334:	781b      	ldrb	r3, [r3, #0]
   10336:	461a      	mov	r2, r3
   10338:	f64c 3344 	movw	r3, #52036	; 0xcb44
   1033c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10340:	7859      	ldrb	r1, [r3, #1]
   10342:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10346:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1034a:	5499      	strb	r1, [r3, r2]
   1034c:	4b43      	ldr	r3, [pc, #268]	; (1045c <send_radIR+0x538>)
   1034e:	781a      	ldrb	r2, [r3, #0]
   10350:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10354:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10358:	781b      	ldrb	r3, [r3, #0]
   1035a:	4413      	add	r3, r2
   1035c:	b2da      	uxtb	r2, r3
   1035e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10362:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10366:	701a      	strb	r2, [r3, #0]
   10368:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1036c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10370:	781a      	ldrb	r2, [r3, #0]
   10372:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10376:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1037a:	781b      	ldrb	r3, [r3, #0]
   1037c:	4413      	add	r3, r2
   1037e:	b2da      	uxtb	r2, r3
   10380:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10384:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10388:	701a      	strb	r2, [r3, #0]
   1038a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1038e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10392:	781b      	ldrb	r3, [r3, #0]
   10394:	3301      	adds	r3, #1
   10396:	b2da      	uxtb	r2, r3
   10398:	f24c 5349 	movw	r3, #50505	; 0xc549
   1039c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103a0:	701a      	strb	r2, [r3, #0]
   103a2:	f24c 5349 	movw	r3, #50505	; 0xc549
   103a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103aa:	781b      	ldrb	r3, [r3, #0]
   103ac:	2bff      	cmp	r3, #255	; 0xff
   103ae:	d105      	bne.n	103bc <send_radIR+0x498>
   103b0:	f24c 5349 	movw	r3, #50505	; 0xc549
   103b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103b8:	2200      	movs	r2, #0
   103ba:	701a      	strb	r2, [r3, #0]
   103bc:	f24c 5349 	movw	r3, #50505	; 0xc549
   103c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103c4:	781b      	ldrb	r3, [r3, #0]
   103c6:	461a      	mov	r2, r3
   103c8:	f64c 3344 	movw	r3, #52036	; 0xcb44
   103cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103d0:	7899      	ldrb	r1, [r3, #2]
   103d2:	f24c 534c 	movw	r3, #50508	; 0xc54c
   103d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103da:	5499      	strb	r1, [r3, r2]
   103dc:	4b20      	ldr	r3, [pc, #128]	; (10460 <send_radIR+0x53c>)
   103de:	781a      	ldrb	r2, [r3, #0]
   103e0:	f24c 634d 	movw	r3, #50765	; 0xc64d
   103e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103e8:	781b      	ldrb	r3, [r3, #0]
   103ea:	4413      	add	r3, r2
   103ec:	b2da      	uxtb	r2, r3
   103ee:	f24c 634d 	movw	r3, #50765	; 0xc64d
   103f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   103f6:	701a      	strb	r2, [r3, #0]
   103f8:	f24c 634e 	movw	r3, #50766	; 0xc64e
   103fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10400:	781a      	ldrb	r2, [r3, #0]
   10402:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10406:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1040a:	781b      	ldrb	r3, [r3, #0]
   1040c:	4413      	add	r3, r2
   1040e:	b2da      	uxtb	r2, r3
   10410:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10414:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10418:	701a      	strb	r2, [r3, #0]
   1041a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1041e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10422:	781b      	ldrb	r3, [r3, #0]
   10424:	3301      	adds	r3, #1
   10426:	b2da      	uxtb	r2, r3
   10428:	f24c 5349 	movw	r3, #50505	; 0xc549
   1042c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10430:	701a      	strb	r2, [r3, #0]
   10432:	f24c 5349 	movw	r3, #50505	; 0xc549
   10436:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1043a:	781b      	ldrb	r3, [r3, #0]
   1043c:	2bff      	cmp	r3, #255	; 0xff
   1043e:	d111      	bne.n	10464 <send_radIR+0x540>
   10440:	f24c 5349 	movw	r3, #50505	; 0xc549
   10444:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10448:	2200      	movs	r2, #0
   1044a:	701a      	strb	r2, [r3, #0]
   1044c:	e00a      	b.n	10464 <send_radIR+0x540>
   1044e:	bf00      	nop
   10450:	2004cb41 	.word	0x2004cb41
   10454:	2004cb42 	.word	0x2004cb42
   10458:	2004cb43 	.word	0x2004cb43
   1045c:	2004cb45 	.word	0x2004cb45
   10460:	2004cb46 	.word	0x2004cb46
   10464:	f24c 5349 	movw	r3, #50505	; 0xc549
   10468:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1046c:	781b      	ldrb	r3, [r3, #0]
   1046e:	461a      	mov	r2, r3
   10470:	f64c 3344 	movw	r3, #52036	; 0xcb44
   10474:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10478:	78d9      	ldrb	r1, [r3, #3]
   1047a:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1047e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10482:	5499      	strb	r1, [r3, r2]
   10484:	4bd3      	ldr	r3, [pc, #844]	; (107d4 <send_radIR+0x8b0>)
   10486:	781a      	ldrb	r2, [r3, #0]
   10488:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1048c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10490:	781b      	ldrb	r3, [r3, #0]
   10492:	4413      	add	r3, r2
   10494:	b2da      	uxtb	r2, r3
   10496:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1049a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1049e:	701a      	strb	r2, [r3, #0]
   104a0:	f24c 634e 	movw	r3, #50766	; 0xc64e
   104a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104a8:	781a      	ldrb	r2, [r3, #0]
   104aa:	f24c 634d 	movw	r3, #50765	; 0xc64d
   104ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104b2:	781b      	ldrb	r3, [r3, #0]
   104b4:	4413      	add	r3, r2
   104b6:	b2da      	uxtb	r2, r3
   104b8:	f24c 634e 	movw	r3, #50766	; 0xc64e
   104bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104c0:	701a      	strb	r2, [r3, #0]
   104c2:	f24c 5349 	movw	r3, #50505	; 0xc549
   104c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104ca:	781b      	ldrb	r3, [r3, #0]
   104cc:	3301      	adds	r3, #1
   104ce:	b2da      	uxtb	r2, r3
   104d0:	f24c 5349 	movw	r3, #50505	; 0xc549
   104d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104d8:	701a      	strb	r2, [r3, #0]
   104da:	f24c 5349 	movw	r3, #50505	; 0xc549
   104de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104e2:	781b      	ldrb	r3, [r3, #0]
   104e4:	2bff      	cmp	r3, #255	; 0xff
   104e6:	d105      	bne.n	104f4 <send_radIR+0x5d0>
   104e8:	f24c 5349 	movw	r3, #50505	; 0xc549
   104ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104f0:	2200      	movs	r2, #0
   104f2:	701a      	strb	r2, [r3, #0]
   104f4:	f24c 5349 	movw	r3, #50505	; 0xc549
   104f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   104fc:	781b      	ldrb	r3, [r3, #0]
   104fe:	461a      	mov	r2, r3
   10500:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   10504:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10508:	7819      	ldrb	r1, [r3, #0]
   1050a:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1050e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10512:	5499      	strb	r1, [r3, r2]
   10514:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   10518:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1051c:	781a      	ldrb	r2, [r3, #0]
   1051e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10522:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10526:	781b      	ldrb	r3, [r3, #0]
   10528:	4413      	add	r3, r2
   1052a:	b2da      	uxtb	r2, r3
   1052c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10530:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10534:	701a      	strb	r2, [r3, #0]
   10536:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1053a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1053e:	781a      	ldrb	r2, [r3, #0]
   10540:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10544:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10548:	781b      	ldrb	r3, [r3, #0]
   1054a:	4413      	add	r3, r2
   1054c:	b2da      	uxtb	r2, r3
   1054e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10552:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10556:	701a      	strb	r2, [r3, #0]
   10558:	f24c 5349 	movw	r3, #50505	; 0xc549
   1055c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10560:	781b      	ldrb	r3, [r3, #0]
   10562:	3301      	adds	r3, #1
   10564:	b2da      	uxtb	r2, r3
   10566:	f24c 5349 	movw	r3, #50505	; 0xc549
   1056a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1056e:	701a      	strb	r2, [r3, #0]
   10570:	f24c 5349 	movw	r3, #50505	; 0xc549
   10574:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10578:	781b      	ldrb	r3, [r3, #0]
   1057a:	2bff      	cmp	r3, #255	; 0xff
   1057c:	d105      	bne.n	1058a <send_radIR+0x666>
   1057e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10582:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10586:	2200      	movs	r2, #0
   10588:	701a      	strb	r2, [r3, #0]
   1058a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1058e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10592:	781b      	ldrb	r3, [r3, #0]
   10594:	461a      	mov	r2, r3
   10596:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   1059a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1059e:	7859      	ldrb	r1, [r3, #1]
   105a0:	f24c 534c 	movw	r3, #50508	; 0xc54c
   105a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105a8:	5499      	strb	r1, [r3, r2]
   105aa:	4b8b      	ldr	r3, [pc, #556]	; (107d8 <send_radIR+0x8b4>)
   105ac:	781a      	ldrb	r2, [r3, #0]
   105ae:	f24c 634d 	movw	r3, #50765	; 0xc64d
   105b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105b6:	781b      	ldrb	r3, [r3, #0]
   105b8:	4413      	add	r3, r2
   105ba:	b2da      	uxtb	r2, r3
   105bc:	f24c 634d 	movw	r3, #50765	; 0xc64d
   105c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105c4:	701a      	strb	r2, [r3, #0]
   105c6:	f24c 634e 	movw	r3, #50766	; 0xc64e
   105ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105ce:	781a      	ldrb	r2, [r3, #0]
   105d0:	f24c 634d 	movw	r3, #50765	; 0xc64d
   105d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105d8:	781b      	ldrb	r3, [r3, #0]
   105da:	4413      	add	r3, r2
   105dc:	b2da      	uxtb	r2, r3
   105de:	f24c 634e 	movw	r3, #50766	; 0xc64e
   105e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105e6:	701a      	strb	r2, [r3, #0]
   105e8:	f24c 5349 	movw	r3, #50505	; 0xc549
   105ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105f0:	781b      	ldrb	r3, [r3, #0]
   105f2:	3301      	adds	r3, #1
   105f4:	b2da      	uxtb	r2, r3
   105f6:	f24c 5349 	movw	r3, #50505	; 0xc549
   105fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   105fe:	701a      	strb	r2, [r3, #0]
   10600:	f24c 5349 	movw	r3, #50505	; 0xc549
   10604:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10608:	781b      	ldrb	r3, [r3, #0]
   1060a:	2bff      	cmp	r3, #255	; 0xff
   1060c:	d105      	bne.n	1061a <send_radIR+0x6f6>
   1060e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10612:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10616:	2200      	movs	r2, #0
   10618:	701a      	strb	r2, [r3, #0]
   1061a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1061e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10622:	781b      	ldrb	r3, [r3, #0]
   10624:	461a      	mov	r2, r3
   10626:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   1062a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1062e:	7899      	ldrb	r1, [r3, #2]
   10630:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10634:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10638:	5499      	strb	r1, [r3, r2]
   1063a:	4b68      	ldr	r3, [pc, #416]	; (107dc <send_radIR+0x8b8>)
   1063c:	781a      	ldrb	r2, [r3, #0]
   1063e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10642:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10646:	781b      	ldrb	r3, [r3, #0]
   10648:	4413      	add	r3, r2
   1064a:	b2da      	uxtb	r2, r3
   1064c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10650:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10654:	701a      	strb	r2, [r3, #0]
   10656:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1065a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1065e:	781a      	ldrb	r2, [r3, #0]
   10660:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10664:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10668:	781b      	ldrb	r3, [r3, #0]
   1066a:	4413      	add	r3, r2
   1066c:	b2da      	uxtb	r2, r3
   1066e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10672:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10676:	701a      	strb	r2, [r3, #0]
   10678:	f24c 5349 	movw	r3, #50505	; 0xc549
   1067c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10680:	781b      	ldrb	r3, [r3, #0]
   10682:	3301      	adds	r3, #1
   10684:	b2da      	uxtb	r2, r3
   10686:	f24c 5349 	movw	r3, #50505	; 0xc549
   1068a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1068e:	701a      	strb	r2, [r3, #0]
   10690:	f24c 5349 	movw	r3, #50505	; 0xc549
   10694:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10698:	781b      	ldrb	r3, [r3, #0]
   1069a:	2bff      	cmp	r3, #255	; 0xff
   1069c:	d105      	bne.n	106aa <send_radIR+0x786>
   1069e:	f24c 5349 	movw	r3, #50505	; 0xc549
   106a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106a6:	2200      	movs	r2, #0
   106a8:	701a      	strb	r2, [r3, #0]
   106aa:	f24c 5349 	movw	r3, #50505	; 0xc549
   106ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106b2:	781b      	ldrb	r3, [r3, #0]
   106b4:	461a      	mov	r2, r3
   106b6:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   106ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106be:	78d9      	ldrb	r1, [r3, #3]
   106c0:	f24c 534c 	movw	r3, #50508	; 0xc54c
   106c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106c8:	5499      	strb	r1, [r3, r2]
   106ca:	4b45      	ldr	r3, [pc, #276]	; (107e0 <send_radIR+0x8bc>)
   106cc:	781a      	ldrb	r2, [r3, #0]
   106ce:	f24c 634d 	movw	r3, #50765	; 0xc64d
   106d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106d6:	781b      	ldrb	r3, [r3, #0]
   106d8:	4413      	add	r3, r2
   106da:	b2da      	uxtb	r2, r3
   106dc:	f24c 634d 	movw	r3, #50765	; 0xc64d
   106e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106e4:	701a      	strb	r2, [r3, #0]
   106e6:	f24c 634e 	movw	r3, #50766	; 0xc64e
   106ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106ee:	781a      	ldrb	r2, [r3, #0]
   106f0:	f24c 634d 	movw	r3, #50765	; 0xc64d
   106f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   106f8:	781b      	ldrb	r3, [r3, #0]
   106fa:	4413      	add	r3, r2
   106fc:	b2da      	uxtb	r2, r3
   106fe:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10702:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10706:	701a      	strb	r2, [r3, #0]
   10708:	f24c 5349 	movw	r3, #50505	; 0xc549
   1070c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10710:	781b      	ldrb	r3, [r3, #0]
   10712:	3301      	adds	r3, #1
   10714:	b2da      	uxtb	r2, r3
   10716:	f24c 5349 	movw	r3, #50505	; 0xc549
   1071a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1071e:	701a      	strb	r2, [r3, #0]
   10720:	f24c 5349 	movw	r3, #50505	; 0xc549
   10724:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10728:	781b      	ldrb	r3, [r3, #0]
   1072a:	2bff      	cmp	r3, #255	; 0xff
   1072c:	d105      	bne.n	1073a <send_radIR+0x816>
   1072e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10732:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10736:	2200      	movs	r2, #0
   10738:	701a      	strb	r2, [r3, #0]
   1073a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1073e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10742:	781b      	ldrb	r3, [r3, #0]
   10744:	461a      	mov	r2, r3
   10746:	f240 5342 	movw	r3, #1346	; 0x542
   1074a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1074e:	7819      	ldrb	r1, [r3, #0]
   10750:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10754:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10758:	5499      	strb	r1, [r3, r2]
   1075a:	f240 5342 	movw	r3, #1346	; 0x542
   1075e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10762:	781a      	ldrb	r2, [r3, #0]
   10764:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10768:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1076c:	781b      	ldrb	r3, [r3, #0]
   1076e:	4413      	add	r3, r2
   10770:	b2da      	uxtb	r2, r3
   10772:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10776:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1077a:	701a      	strb	r2, [r3, #0]
   1077c:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10780:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10784:	781a      	ldrb	r2, [r3, #0]
   10786:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1078a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1078e:	781b      	ldrb	r3, [r3, #0]
   10790:	4413      	add	r3, r2
   10792:	b2da      	uxtb	r2, r3
   10794:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10798:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1079c:	701a      	strb	r2, [r3, #0]
   1079e:	f24c 5349 	movw	r3, #50505	; 0xc549
   107a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107a6:	781b      	ldrb	r3, [r3, #0]
   107a8:	3301      	adds	r3, #1
   107aa:	b2da      	uxtb	r2, r3
   107ac:	f24c 5349 	movw	r3, #50505	; 0xc549
   107b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107b4:	701a      	strb	r2, [r3, #0]
   107b6:	f24c 5349 	movw	r3, #50505	; 0xc549
   107ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107be:	781b      	ldrb	r3, [r3, #0]
   107c0:	2bff      	cmp	r3, #255	; 0xff
   107c2:	d10f      	bne.n	107e4 <send_radIR+0x8c0>
   107c4:	f24c 5349 	movw	r3, #50505	; 0xc549
   107c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107cc:	2200      	movs	r2, #0
   107ce:	701a      	strb	r2, [r3, #0]
   107d0:	e008      	b.n	107e4 <send_radIR+0x8c0>
   107d2:	bf00      	nop
   107d4:	2004cb47 	.word	0x2004cb47
   107d8:	2004cb3d 	.word	0x2004cb3d
   107dc:	2004cb3e 	.word	0x2004cb3e
   107e0:	2004cb3f 	.word	0x2004cb3f
   107e4:	f24c 5349 	movw	r3, #50505	; 0xc549
   107e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   107ec:	781b      	ldrb	r3, [r3, #0]
   107ee:	461a      	mov	r2, r3
   107f0:	f240 5342 	movw	r3, #1346	; 0x542
   107f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   107f8:	7859      	ldrb	r1, [r3, #1]
   107fa:	f24c 534c 	movw	r3, #50508	; 0xc54c
   107fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10802:	5499      	strb	r1, [r3, r2]
   10804:	4bc2      	ldr	r3, [pc, #776]	; (10b10 <send_radIR+0xbec>)
   10806:	781a      	ldrb	r2, [r3, #0]
   10808:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1080c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10810:	781b      	ldrb	r3, [r3, #0]
   10812:	4413      	add	r3, r2
   10814:	b2da      	uxtb	r2, r3
   10816:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1081a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1081e:	701a      	strb	r2, [r3, #0]
   10820:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10824:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10828:	781a      	ldrb	r2, [r3, #0]
   1082a:	f24c 634d 	movw	r3, #50765	; 0xc64d
   1082e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10832:	781b      	ldrb	r3, [r3, #0]
   10834:	4413      	add	r3, r2
   10836:	b2da      	uxtb	r2, r3
   10838:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1083c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10840:	701a      	strb	r2, [r3, #0]
   10842:	f24c 5349 	movw	r3, #50505	; 0xc549
   10846:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1084a:	781b      	ldrb	r3, [r3, #0]
   1084c:	3301      	adds	r3, #1
   1084e:	b2da      	uxtb	r2, r3
   10850:	f24c 5349 	movw	r3, #50505	; 0xc549
   10854:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10858:	701a      	strb	r2, [r3, #0]
   1085a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1085e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10862:	781b      	ldrb	r3, [r3, #0]
   10864:	2bff      	cmp	r3, #255	; 0xff
   10866:	d105      	bne.n	10874 <send_radIR+0x950>
   10868:	f24c 5349 	movw	r3, #50505	; 0xc549
   1086c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10870:	2200      	movs	r2, #0
   10872:	701a      	strb	r2, [r3, #0]
   10874:	f24c 5349 	movw	r3, #50505	; 0xc549
   10878:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1087c:	781b      	ldrb	r3, [r3, #0]
   1087e:	461a      	mov	r2, r3
   10880:	f240 5344 	movw	r3, #1348	; 0x544
   10884:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10888:	7819      	ldrb	r1, [r3, #0]
   1088a:	f24c 534c 	movw	r3, #50508	; 0xc54c
   1088e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10892:	5499      	strb	r1, [r3, r2]
   10894:	f240 5344 	movw	r3, #1348	; 0x544
   10898:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1089c:	781a      	ldrb	r2, [r3, #0]
   1089e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   108a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108a6:	781b      	ldrb	r3, [r3, #0]
   108a8:	4413      	add	r3, r2
   108aa:	b2da      	uxtb	r2, r3
   108ac:	f24c 634d 	movw	r3, #50765	; 0xc64d
   108b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108b4:	701a      	strb	r2, [r3, #0]
   108b6:	f24c 634e 	movw	r3, #50766	; 0xc64e
   108ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108be:	781a      	ldrb	r2, [r3, #0]
   108c0:	f24c 634d 	movw	r3, #50765	; 0xc64d
   108c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108c8:	781b      	ldrb	r3, [r3, #0]
   108ca:	4413      	add	r3, r2
   108cc:	b2da      	uxtb	r2, r3
   108ce:	f24c 634e 	movw	r3, #50766	; 0xc64e
   108d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108d6:	701a      	strb	r2, [r3, #0]
   108d8:	f24c 5349 	movw	r3, #50505	; 0xc549
   108dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108e0:	781b      	ldrb	r3, [r3, #0]
   108e2:	3301      	adds	r3, #1
   108e4:	b2da      	uxtb	r2, r3
   108e6:	f24c 5349 	movw	r3, #50505	; 0xc549
   108ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108ee:	701a      	strb	r2, [r3, #0]
   108f0:	f24c 5349 	movw	r3, #50505	; 0xc549
   108f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   108f8:	781b      	ldrb	r3, [r3, #0]
   108fa:	2bff      	cmp	r3, #255	; 0xff
   108fc:	d105      	bne.n	1090a <send_radIR+0x9e6>
   108fe:	f24c 5349 	movw	r3, #50505	; 0xc549
   10902:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10906:	2200      	movs	r2, #0
   10908:	701a      	strb	r2, [r3, #0]
   1090a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1090e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10912:	781b      	ldrb	r3, [r3, #0]
   10914:	461a      	mov	r2, r3
   10916:	f240 5344 	movw	r3, #1348	; 0x544
   1091a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1091e:	7859      	ldrb	r1, [r3, #1]
   10920:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10924:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10928:	5499      	strb	r1, [r3, r2]
   1092a:	4b7a      	ldr	r3, [pc, #488]	; (10b14 <send_radIR+0xbf0>)
   1092c:	781a      	ldrb	r2, [r3, #0]
   1092e:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10932:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10936:	781b      	ldrb	r3, [r3, #0]
   10938:	4413      	add	r3, r2
   1093a:	b2da      	uxtb	r2, r3
   1093c:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10940:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10944:	701a      	strb	r2, [r3, #0]
   10946:	f24c 634e 	movw	r3, #50766	; 0xc64e
   1094a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1094e:	781a      	ldrb	r2, [r3, #0]
   10950:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10954:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10958:	781b      	ldrb	r3, [r3, #0]
   1095a:	4413      	add	r3, r2
   1095c:	b2da      	uxtb	r2, r3
   1095e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10962:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10966:	701a      	strb	r2, [r3, #0]
   10968:	f24c 5349 	movw	r3, #50505	; 0xc549
   1096c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10970:	781b      	ldrb	r3, [r3, #0]
   10972:	3301      	adds	r3, #1
   10974:	b2da      	uxtb	r2, r3
   10976:	f24c 5349 	movw	r3, #50505	; 0xc549
   1097a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1097e:	701a      	strb	r2, [r3, #0]
   10980:	f24c 5349 	movw	r3, #50505	; 0xc549
   10984:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10988:	781b      	ldrb	r3, [r3, #0]
   1098a:	2bff      	cmp	r3, #255	; 0xff
   1098c:	d105      	bne.n	1099a <send_radIR+0xa76>
   1098e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10992:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10996:	2200      	movs	r2, #0
   10998:	701a      	strb	r2, [r3, #0]
   1099a:	f24c 5349 	movw	r3, #50505	; 0xc549
   1099e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109a2:	781b      	ldrb	r3, [r3, #0]
   109a4:	461a      	mov	r2, r3
   109a6:	f24c 634d 	movw	r3, #50765	; 0xc64d
   109aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109ae:	7819      	ldrb	r1, [r3, #0]
   109b0:	f24c 534c 	movw	r3, #50508	; 0xc54c
   109b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109b8:	5499      	strb	r1, [r3, r2]
   109ba:	f24c 5349 	movw	r3, #50505	; 0xc549
   109be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109c2:	781b      	ldrb	r3, [r3, #0]
   109c4:	3301      	adds	r3, #1
   109c6:	b2da      	uxtb	r2, r3
   109c8:	f24c 5349 	movw	r3, #50505	; 0xc549
   109cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109d0:	701a      	strb	r2, [r3, #0]
   109d2:	f24c 5349 	movw	r3, #50505	; 0xc549
   109d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109da:	781b      	ldrb	r3, [r3, #0]
   109dc:	2bff      	cmp	r3, #255	; 0xff
   109de:	d105      	bne.n	109ec <send_radIR+0xac8>
   109e0:	f24c 5349 	movw	r3, #50505	; 0xc549
   109e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109e8:	2200      	movs	r2, #0
   109ea:	701a      	strb	r2, [r3, #0]
   109ec:	f24c 5349 	movw	r3, #50505	; 0xc549
   109f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   109f4:	781b      	ldrb	r3, [r3, #0]
   109f6:	461a      	mov	r2, r3
   109f8:	f24c 634e 	movw	r3, #50766	; 0xc64e
   109fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a00:	7819      	ldrb	r1, [r3, #0]
   10a02:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10a06:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a0a:	5499      	strb	r1, [r3, r2]
   10a0c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a14:	781b      	ldrb	r3, [r3, #0]
   10a16:	3301      	adds	r3, #1
   10a18:	b2da      	uxtb	r2, r3
   10a1a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a22:	701a      	strb	r2, [r3, #0]
   10a24:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a2c:	781b      	ldrb	r3, [r3, #0]
   10a2e:	2bff      	cmp	r3, #255	; 0xff
   10a30:	d105      	bne.n	10a3e <send_radIR+0xb1a>
   10a32:	f24c 5349 	movw	r3, #50505	; 0xc549
   10a36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a3a:	2200      	movs	r2, #0
   10a3c:	701a      	strb	r2, [r3, #0]
   10a3e:	f242 0339 	movw	r3, #8249	; 0x2039
   10a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10a46:	781b      	ldrb	r3, [r3, #0]
   10a48:	b2db      	uxtb	r3, r3
   10a4a:	f003 0310 	and.w	r3, r3, #16
   10a4e:	2b00      	cmp	r3, #0
   10a50:	d15a      	bne.n	10b08 <send_radIR+0xbe4>
   10a52:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10a56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a5a:	781b      	ldrb	r3, [r3, #0]
   10a5c:	b2db      	uxtb	r3, r3
   10a5e:	461a      	mov	r2, r3
   10a60:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10a64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a68:	5c9a      	ldrb	r2, [r3, r2]
   10a6a:	f24c 634b 	movw	r3, #50763	; 0xc64b
   10a6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a72:	701a      	strb	r2, [r3, #0]
   10a74:	f24c 634c 	movw	r3, #50764	; 0xc64c
   10a78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a7c:	2200      	movs	r2, #0
   10a7e:	701a      	strb	r2, [r3, #0]
   10a80:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10a84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a88:	781b      	ldrb	r3, [r3, #0]
   10a8a:	b2db      	uxtb	r3, r3
   10a8c:	3301      	adds	r3, #1
   10a8e:	b2da      	uxtb	r2, r3
   10a90:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10a94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10a98:	701a      	strb	r2, [r3, #0]
   10a9a:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10a9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10aa2:	781b      	ldrb	r3, [r3, #0]
   10aa4:	b2db      	uxtb	r3, r3
   10aa6:	2bff      	cmp	r3, #255	; 0xff
   10aa8:	d105      	bne.n	10ab6 <send_radIR+0xb92>
   10aaa:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10aae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ab2:	2200      	movs	r2, #0
   10ab4:	701a      	strb	r2, [r3, #0]
   10ab6:	f242 0338 	movw	r3, #8248	; 0x2038
   10aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10abe:	f242 0238 	movw	r2, #8248	; 0x2038
   10ac2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ac6:	7812      	ldrb	r2, [r2, #0]
   10ac8:	b2d2      	uxtb	r2, r2
   10aca:	f042 0201 	orr.w	r2, r2, #1
   10ace:	b2d2      	uxtb	r2, r2
   10ad0:	701a      	strb	r2, [r3, #0]
   10ad2:	f242 0339 	movw	r3, #8249	; 0x2039
   10ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ada:	f242 0239 	movw	r2, #8249	; 0x2039
   10ade:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ae2:	7812      	ldrb	r2, [r2, #0]
   10ae4:	b2d2      	uxtb	r2, r2
   10ae6:	f042 0210 	orr.w	r2, r2, #16
   10aea:	b2d2      	uxtb	r2, r2
   10aec:	701a      	strb	r2, [r3, #0]
   10aee:	e00b      	b.n	10b08 <send_radIR+0xbe4>
   10af0:	f24c 5348 	movw	r3, #50504	; 0xc548
   10af4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10af8:	781b      	ldrb	r3, [r3, #0]
   10afa:	3301      	adds	r3, #1
   10afc:	b2da      	uxtb	r2, r3
   10afe:	f24c 5348 	movw	r3, #50504	; 0xc548
   10b02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b06:	701a      	strb	r2, [r3, #0]
}
   10b08:	46bd      	mov	sp, r7
   10b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
   10b0e:	4770      	bx	lr
   10b10:	20000543 	.word	0x20000543
   10b14:	20000545 	.word	0x20000545

00010b18 <send_takeOff>:

void send_takeOff(void){
   10b18:	b580      	push	{r7, lr}
   10b1a:	af00      	add	r7, sp, #0
  if (gps_pos_available){
   10b1c:	f24c 63de 	movw	r3, #50910	; 0xc6de
   10b20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b24:	781b      	ldrb	r3, [r3, #0]
   10b26:	2b00      	cmp	r3, #0
   10b28:	f000 8200 	beq.w	10f2c <send_takeOff+0x414>
     if (!estimator_flight_time && (estimator_hspeed_mod > MIN_SPEED_FOR_TAKEOFF)) {
   10b2c:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   10b30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b34:	881b      	ldrh	r3, [r3, #0]
   10b36:	2b00      	cmp	r3, #0
   10b38:	f040 81f2 	bne.w	10f20 <send_takeOff+0x408>
   10b3c:	f64c 3334 	movw	r3, #52020	; 0xcb34
   10b40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b44:	681b      	ldr	r3, [r3, #0]
   10b46:	4618      	mov	r0, r3
   10b48:	f04f 0100 	mov.w	r1, #0
   10b4c:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   10b50:	f007 fe44 	bl	187dc <__aeabi_fcmpgt>
   10b54:	4603      	mov	r3, r0
   10b56:	2b00      	cmp	r3, #0
   10b58:	f000 81e2 	beq.w	10f20 <send_takeOff+0x408>
        estimator_flight_time = 1;
   10b5c:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   10b60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b64:	2201      	movs	r2, #1
   10b66:	801a      	strh	r2, [r3, #0]
        launch = TRUE; /* Not set in non auto launch */
   10b68:	f24c 5340 	movw	r3, #50496	; 0xc540
   10b6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b70:	2201      	movs	r2, #1
   10b72:	701a      	strb	r2, [r3, #0]
        DOWNLINK_SEND_TAKEOFF(&cputime);
   10b74:	f24c 5349 	movw	r3, #50505	; 0xc549
   10b78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b7c:	781a      	ldrb	r2, [r3, #0]
   10b7e:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10b82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b86:	781b      	ldrb	r3, [r3, #0]
   10b88:	b2db      	uxtb	r3, r3
   10b8a:	429a      	cmp	r2, r3
   10b8c:	d313      	bcc.n	10bb6 <send_takeOff+0x9e>
   10b8e:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10b92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10b96:	781b      	ldrb	r3, [r3, #0]
   10b98:	b2db      	uxtb	r3, r3
   10b9a:	461a      	mov	r2, r3
   10b9c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10ba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ba4:	781b      	ldrb	r3, [r3, #0]
   10ba6:	1ad3      	subs	r3, r2, r3
   10ba8:	33ff      	adds	r3, #255	; 0xff
   10baa:	2b06      	cmp	r3, #6
   10bac:	bfd4      	ite	le
   10bae:	2300      	movle	r3, #0
   10bb0:	2301      	movgt	r3, #1
   10bb2:	b2db      	uxtb	r3, r3
   10bb4:	e011      	b.n	10bda <send_takeOff+0xc2>
   10bb6:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10bba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bbe:	781b      	ldrb	r3, [r3, #0]
   10bc0:	b2db      	uxtb	r3, r3
   10bc2:	461a      	mov	r2, r3
   10bc4:	f24c 5349 	movw	r3, #50505	; 0xc549
   10bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bcc:	781b      	ldrb	r3, [r3, #0]
   10bce:	1ad3      	subs	r3, r2, r3
   10bd0:	2b06      	cmp	r3, #6
   10bd2:	bfd4      	ite	le
   10bd4:	2300      	movle	r3, #0
   10bd6:	2301      	movgt	r3, #1
   10bd8:	b2db      	uxtb	r3, r3
   10bda:	2b00      	cmp	r3, #0
   10bdc:	f000 8194 	beq.w	10f08 <send_takeOff+0x3f0>
   10be0:	f24c 5349 	movw	r3, #50505	; 0xc549
   10be4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10be8:	781b      	ldrb	r3, [r3, #0]
   10bea:	461a      	mov	r2, r3
   10bec:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10bf0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10bf4:	2105      	movs	r1, #5
   10bf6:	5499      	strb	r1, [r3, r2]
   10bf8:	f24c 5349 	movw	r3, #50505	; 0xc549
   10bfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c00:	781b      	ldrb	r3, [r3, #0]
   10c02:	3301      	adds	r3, #1
   10c04:	b2da      	uxtb	r2, r3
   10c06:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c0e:	701a      	strb	r2, [r3, #0]
   10c10:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c18:	781b      	ldrb	r3, [r3, #0]
   10c1a:	2bff      	cmp	r3, #255	; 0xff
   10c1c:	d105      	bne.n	10c2a <send_takeOff+0x112>
   10c1e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c26:	2200      	movs	r2, #0
   10c28:	701a      	strb	r2, [r3, #0]
   10c2a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c32:	781b      	ldrb	r3, [r3, #0]
   10c34:	461a      	mov	r2, r3
   10c36:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10c3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c3e:	2104      	movs	r1, #4
   10c40:	5499      	strb	r1, [r3, r2]
   10c42:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c4a:	781b      	ldrb	r3, [r3, #0]
   10c4c:	3301      	adds	r3, #1
   10c4e:	b2da      	uxtb	r2, r3
   10c50:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c58:	701a      	strb	r2, [r3, #0]
   10c5a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c62:	781b      	ldrb	r3, [r3, #0]
   10c64:	2bff      	cmp	r3, #255	; 0xff
   10c66:	d105      	bne.n	10c74 <send_takeOff+0x15c>
   10c68:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c70:	2200      	movs	r2, #0
   10c72:	701a      	strb	r2, [r3, #0]
   10c74:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10c78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c7c:	2204      	movs	r2, #4
   10c7e:	701a      	strb	r2, [r3, #0]
   10c80:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10c84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c88:	2204      	movs	r2, #4
   10c8a:	701a      	strb	r2, [r3, #0]
   10c8c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10c90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10c94:	781b      	ldrb	r3, [r3, #0]
   10c96:	461a      	mov	r2, r3
   10c98:	f24c 532a 	movw	r3, #50474	; 0xc52a
   10c9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ca0:	7819      	ldrb	r1, [r3, #0]
   10ca2:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10ca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10caa:	5499      	strb	r1, [r3, r2]
   10cac:	f24c 532a 	movw	r3, #50474	; 0xc52a
   10cb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cb4:	781a      	ldrb	r2, [r3, #0]
   10cb6:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10cba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cbe:	781b      	ldrb	r3, [r3, #0]
   10cc0:	4413      	add	r3, r2
   10cc2:	b2da      	uxtb	r2, r3
   10cc4:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10cc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ccc:	701a      	strb	r2, [r3, #0]
   10cce:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10cd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cd6:	781a      	ldrb	r2, [r3, #0]
   10cd8:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10cdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ce0:	781b      	ldrb	r3, [r3, #0]
   10ce2:	4413      	add	r3, r2
   10ce4:	b2da      	uxtb	r2, r3
   10ce6:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10cea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cee:	701a      	strb	r2, [r3, #0]
   10cf0:	f24c 5349 	movw	r3, #50505	; 0xc549
   10cf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10cf8:	781b      	ldrb	r3, [r3, #0]
   10cfa:	3301      	adds	r3, #1
   10cfc:	b2da      	uxtb	r2, r3
   10cfe:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d06:	701a      	strb	r2, [r3, #0]
   10d08:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d10:	781b      	ldrb	r3, [r3, #0]
   10d12:	2bff      	cmp	r3, #255	; 0xff
   10d14:	d105      	bne.n	10d22 <send_takeOff+0x20a>
   10d16:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d1e:	2200      	movs	r2, #0
   10d20:	701a      	strb	r2, [r3, #0]
   10d22:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d26:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d2a:	781b      	ldrb	r3, [r3, #0]
   10d2c:	461a      	mov	r2, r3
   10d2e:	f24c 532a 	movw	r3, #50474	; 0xc52a
   10d32:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d36:	7859      	ldrb	r1, [r3, #1]
   10d38:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10d3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d40:	5499      	strb	r1, [r3, r2]
   10d42:	4b7b      	ldr	r3, [pc, #492]	; (10f30 <send_takeOff+0x418>)
   10d44:	781a      	ldrb	r2, [r3, #0]
   10d46:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10d4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d4e:	781b      	ldrb	r3, [r3, #0]
   10d50:	4413      	add	r3, r2
   10d52:	b2da      	uxtb	r2, r3
   10d54:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10d58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d5c:	701a      	strb	r2, [r3, #0]
   10d5e:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10d62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d66:	781a      	ldrb	r2, [r3, #0]
   10d68:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10d6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d70:	781b      	ldrb	r3, [r3, #0]
   10d72:	4413      	add	r3, r2
   10d74:	b2da      	uxtb	r2, r3
   10d76:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10d7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d7e:	701a      	strb	r2, [r3, #0]
   10d80:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d88:	781b      	ldrb	r3, [r3, #0]
   10d8a:	3301      	adds	r3, #1
   10d8c:	b2da      	uxtb	r2, r3
   10d8e:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10d96:	701a      	strb	r2, [r3, #0]
   10d98:	f24c 5349 	movw	r3, #50505	; 0xc549
   10d9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10da0:	781b      	ldrb	r3, [r3, #0]
   10da2:	2bff      	cmp	r3, #255	; 0xff
   10da4:	d105      	bne.n	10db2 <send_takeOff+0x29a>
   10da6:	f24c 5349 	movw	r3, #50505	; 0xc549
   10daa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dae:	2200      	movs	r2, #0
   10db0:	701a      	strb	r2, [r3, #0]
   10db2:	f24c 5349 	movw	r3, #50505	; 0xc549
   10db6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dba:	781b      	ldrb	r3, [r3, #0]
   10dbc:	461a      	mov	r2, r3
   10dbe:	f24c 634d 	movw	r3, #50765	; 0xc64d
   10dc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dc6:	7819      	ldrb	r1, [r3, #0]
   10dc8:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10dcc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dd0:	5499      	strb	r1, [r3, r2]
   10dd2:	f24c 5349 	movw	r3, #50505	; 0xc549
   10dd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10dda:	781b      	ldrb	r3, [r3, #0]
   10ddc:	3301      	adds	r3, #1
   10dde:	b2da      	uxtb	r2, r3
   10de0:	f24c 5349 	movw	r3, #50505	; 0xc549
   10de4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10de8:	701a      	strb	r2, [r3, #0]
   10dea:	f24c 5349 	movw	r3, #50505	; 0xc549
   10dee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10df2:	781b      	ldrb	r3, [r3, #0]
   10df4:	2bff      	cmp	r3, #255	; 0xff
   10df6:	d105      	bne.n	10e04 <send_takeOff+0x2ec>
   10df8:	f24c 5349 	movw	r3, #50505	; 0xc549
   10dfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e00:	2200      	movs	r2, #0
   10e02:	701a      	strb	r2, [r3, #0]
   10e04:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e08:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e0c:	781b      	ldrb	r3, [r3, #0]
   10e0e:	461a      	mov	r2, r3
   10e10:	f24c 634e 	movw	r3, #50766	; 0xc64e
   10e14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e18:	7819      	ldrb	r1, [r3, #0]
   10e1a:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10e1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e22:	5499      	strb	r1, [r3, r2]
   10e24:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e28:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e2c:	781b      	ldrb	r3, [r3, #0]
   10e2e:	3301      	adds	r3, #1
   10e30:	b2da      	uxtb	r2, r3
   10e32:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e3a:	701a      	strb	r2, [r3, #0]
   10e3c:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e44:	781b      	ldrb	r3, [r3, #0]
   10e46:	2bff      	cmp	r3, #255	; 0xff
   10e48:	d105      	bne.n	10e56 <send_takeOff+0x33e>
   10e4a:	f24c 5349 	movw	r3, #50505	; 0xc549
   10e4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e52:	2200      	movs	r2, #0
   10e54:	701a      	strb	r2, [r3, #0]
   10e56:	f242 0339 	movw	r3, #8249	; 0x2039
   10e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10e5e:	781b      	ldrb	r3, [r3, #0]
   10e60:	b2db      	uxtb	r3, r3
   10e62:	f003 0310 	and.w	r3, r3, #16
   10e66:	2b00      	cmp	r3, #0
   10e68:	d15a      	bne.n	10f20 <send_takeOff+0x408>
   10e6a:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10e6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e72:	781b      	ldrb	r3, [r3, #0]
   10e74:	b2db      	uxtb	r3, r3
   10e76:	461a      	mov	r2, r3
   10e78:	f24c 534c 	movw	r3, #50508	; 0xc54c
   10e7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e80:	5c9a      	ldrb	r2, [r3, r2]
   10e82:	f24c 634b 	movw	r3, #50763	; 0xc64b
   10e86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e8a:	701a      	strb	r2, [r3, #0]
   10e8c:	f24c 634c 	movw	r3, #50764	; 0xc64c
   10e90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10e94:	2200      	movs	r2, #0
   10e96:	701a      	strb	r2, [r3, #0]
   10e98:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10e9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ea0:	781b      	ldrb	r3, [r3, #0]
   10ea2:	b2db      	uxtb	r3, r3
   10ea4:	3301      	adds	r3, #1
   10ea6:	b2da      	uxtb	r2, r3
   10ea8:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10eac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eb0:	701a      	strb	r2, [r3, #0]
   10eb2:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10eb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eba:	781b      	ldrb	r3, [r3, #0]
   10ebc:	b2db      	uxtb	r3, r3
   10ebe:	2bff      	cmp	r3, #255	; 0xff
   10ec0:	d105      	bne.n	10ece <send_takeOff+0x3b6>
   10ec2:	f24c 534a 	movw	r3, #50506	; 0xc54a
   10ec6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10eca:	2200      	movs	r2, #0
   10ecc:	701a      	strb	r2, [r3, #0]
   10ece:	f242 0338 	movw	r3, #8248	; 0x2038
   10ed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ed6:	f242 0238 	movw	r2, #8248	; 0x2038
   10eda:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10ede:	7812      	ldrb	r2, [r2, #0]
   10ee0:	b2d2      	uxtb	r2, r2
   10ee2:	f042 0201 	orr.w	r2, r2, #1
   10ee6:	b2d2      	uxtb	r2, r2
   10ee8:	701a      	strb	r2, [r3, #0]
   10eea:	f242 0339 	movw	r3, #8249	; 0x2039
   10eee:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10ef2:	f242 0239 	movw	r2, #8249	; 0x2039
   10ef6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10efa:	7812      	ldrb	r2, [r2, #0]
   10efc:	b2d2      	uxtb	r2, r2
   10efe:	f042 0210 	orr.w	r2, r2, #16
   10f02:	b2d2      	uxtb	r2, r2
   10f04:	701a      	strb	r2, [r3, #0]
   10f06:	e00b      	b.n	10f20 <send_takeOff+0x408>
   10f08:	f24c 5348 	movw	r3, #50504	; 0xc548
   10f0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f10:	781b      	ldrb	r3, [r3, #0]
   10f12:	3301      	adds	r3, #1
   10f14:	b2da      	uxtb	r2, r3
   10f16:	f24c 5348 	movw	r3, #50504	; 0xc548
   10f1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f1e:	701a      	strb	r2, [r3, #0]
     }
     gps_pos_available = FALSE; 
   10f20:	f24c 63de 	movw	r3, #50910	; 0xc6de
   10f24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10f28:	2200      	movs	r2, #0
   10f2a:	701a      	strb	r2, [r3, #0]
  }
  //vPrintString("S_16 receive_gps_data_task end!\n\r");
}
   10f2c:	bd80      	pop	{r7, pc}
   10f2e:	bf00      	nop
   10f30:	2004c52b 	.word	0x2004c52b
   10f34:	f3af 8000 	nop.w

00010f38 <modem_init>:
uint8_t    tx_byte;
uint8_t    tx_byte_idx;

uint8_t ck_a, ck_b;

void modem_init( void ) {
   10f38:	b480      	push	{r7}
   10f3a:	af00      	add	r7, sp, #0
  /* 
     on >= V1.2 boards, 4MHz modem clock is generated
     by one PWM module.
  */
#if defined CTL_BRD_V1_2 || defined CTL_BRD_V1_2_1
  MODEM_OSC_DDR |= _BV(MODEM_OSC);
   10f3c:	f242 0317 	movw	r3, #8215	; 0x2017
   10f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f44:	f242 0217 	movw	r2, #8215	; 0x2017
   10f48:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f4c:	7812      	ldrb	r2, [r2, #0]
   10f4e:	b2d2      	uxtb	r2, r2
   10f50:	f042 0210 	orr.w	r2, r2, #16
   10f54:	b2d2      	uxtb	r2, r2
   10f56:	701a      	strb	r2, [r3, #0]
  OCR0 = 1; /* 4MhZ */
   10f58:	f242 0331 	movw	r3, #8241	; 0x2031
   10f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f60:	2201      	movs	r2, #1
   10f62:	701a      	strb	r2, [r3, #0]
  TCCR0 = _BV(WGM01) | _BV(COM00) | _BV(CS00);
   10f64:	f242 0333 	movw	r3, #8243	; 0x2033
   10f68:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f6c:	2219      	movs	r2, #25
   10f6e:	701a      	strb	r2, [r3, #0]
#endif

  /* setup TX_EN and TX_DATA pin as output */
  MODEM_TX_DDR |= _BV(MODEM_TX_EN) | _BV(MODEM_TX_DATA);
   10f70:	f242 0311 	movw	r3, #8209	; 0x2011
   10f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f78:	f242 0211 	movw	r2, #8209	; 0x2011
   10f7c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f80:	7812      	ldrb	r2, [r2, #0]
   10f82:	b2d2      	uxtb	r2, r2
   10f84:	f062 023f 	orn	r2, r2, #63	; 0x3f
   10f88:	b2d2      	uxtb	r2, r2
   10f8a:	701a      	strb	r2, [r3, #0]
  /* data idles hight */
  sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10f8c:	f242 0312 	movw	r3, #8210	; 0x2012
   10f90:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10f94:	f242 0212 	movw	r2, #8210	; 0x2012
   10f98:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10f9c:	7812      	ldrb	r2, [r2, #0]
   10f9e:	b2d2      	uxtb	r2, r2
   10fa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10fa4:	b2d2      	uxtb	r2, r2
   10fa6:	701a      	strb	r2, [r3, #0]
  /* enable transmitter */
  cbi(MODEM_TX_PORT, MODEM_TX_EN);
   10fa8:	f242 0312 	movw	r3, #8210	; 0x2012
   10fac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fb0:	f242 0212 	movw	r2, #8210	; 0x2012
   10fb4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10fb8:	7812      	ldrb	r2, [r2, #0]
   10fba:	b2d2      	uxtb	r2, r2
   10fbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   10fc0:	b2d2      	uxtb	r2, r2
   10fc2:	701a      	strb	r2, [r3, #0]
  /* set interrupt on failing edge of clock */
  MODEM_CLK_INT_REG |=  MODEM_CLK_INT_CFG;
   10fc4:	f242 033a 	movw	r3, #8250	; 0x203a
   10fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10fcc:	f242 023a 	movw	r2, #8250	; 0x203a
   10fd0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   10fd4:	7812      	ldrb	r2, [r2, #0]
   10fd6:	b2d2      	uxtb	r2, r2
   10fd8:	f042 0202 	orr.w	r2, r2, #2
   10fdc:	b2d2      	uxtb	r2, r2
   10fde:	701a      	strb	r2, [r3, #0]
}
   10fe0:	46bd      	mov	sp, r7
   10fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
   10fe6:	4770      	bx	lr

00010fe8 <__vector_5>:

SIGNAL( MODEM_CLK_INT_SIG ) {
   10fe8:	b480      	push	{r7}
   10fea:	af00      	add	r7, sp, #0
  /*  start bit         */
  if (tx_byte_idx == 0)
   10fec:	f24c 634c 	movw	r3, #50764	; 0xc64c
   10ff0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   10ff4:	781b      	ldrb	r3, [r3, #0]
   10ff6:	2b00      	cmp	r3, #0
   10ff8:	d10e      	bne.n	11018 <__vector_5+0x30>
    cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   10ffa:	f242 0312 	movw	r3, #8210	; 0x2012
   10ffe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11002:	f242 0212 	movw	r2, #8210	; 0x2012
   11006:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1100a:	7812      	ldrb	r2, [r2, #0]
   1100c:	b2d2      	uxtb	r2, r2
   1100e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   11012:	b2d2      	uxtb	r2, r2
   11014:	701a      	strb	r2, [r3, #0]
   11016:	e047      	b.n	110a8 <__vector_5+0xc0>
  /* 8 data bits        */ 
  else if (tx_byte_idx < 9) {
   11018:	f24c 634c 	movw	r3, #50764	; 0xc64c
   1101c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11020:	781b      	ldrb	r3, [r3, #0]
   11022:	2b08      	cmp	r3, #8
   11024:	d832      	bhi.n	1108c <__vector_5+0xa4>
    if (tx_byte & 0x01)
   11026:	f24c 634b 	movw	r3, #50763	; 0xc64b
   1102a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1102e:	781b      	ldrb	r3, [r3, #0]
   11030:	f003 0301 	and.w	r3, r3, #1
   11034:	2b00      	cmp	r3, #0
   11036:	d00e      	beq.n	11056 <__vector_5+0x6e>
      sbi(MODEM_TX_PORT, MODEM_TX_DATA);
   11038:	f242 0312 	movw	r3, #8210	; 0x2012
   1103c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11040:	f242 0212 	movw	r2, #8210	; 0x2012
   11044:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11048:	7812      	ldrb	r2, [r2, #0]
   1104a:	b2d2      	uxtb	r2, r2
   1104c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11050:	b2d2      	uxtb	r2, r2
   11052:	701a      	strb	r2, [r3, #0]
   11054:	e00d      	b.n	11072 <__vector_5+0x8a>
    else
      cbi(MODEM_TX_PORT, MODEM_TX_DATA);
   11056:	f242 0312 	movw	r3, #8210	; 0x2012
   1105a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1105e:	f242 0212 	movw	r2, #8210	; 0x2012
   11062:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11066:	7812      	ldrb	r2, [r2, #0]
   11068:	b2d2      	uxtb	r2, r2
   1106a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1106e:	b2d2      	uxtb	r2, r2
   11070:	701a      	strb	r2, [r3, #0]
    tx_byte >>= 1;
   11072:	f24c 634b 	movw	r3, #50763	; 0xc64b
   11076:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1107a:	781b      	ldrb	r3, [r3, #0]
   1107c:	085b      	lsrs	r3, r3, #1
   1107e:	b2da      	uxtb	r2, r3
   11080:	f24c 634b 	movw	r3, #50763	; 0xc64b
   11084:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11088:	701a      	strb	r2, [r3, #0]
   1108a:	e00d      	b.n	110a8 <__vector_5+0xc0>
  }
  /* stop_bit           */
  else {
    sbi(MODEM_TX_PORT, MODEM_TX_DATA); 
   1108c:	f242 0312 	movw	r3, #8210	; 0x2012
   11090:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11094:	f242 0212 	movw	r2, #8210	; 0x2012
   11098:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1109c:	7812      	ldrb	r2, [r2, #0]
   1109e:	b2d2      	uxtb	r2, r2
   110a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   110a4:	b2d2      	uxtb	r2, r2
   110a6:	701a      	strb	r2, [r3, #0]
  }
  tx_byte_idx++;
   110a8:	f24c 634c 	movw	r3, #50764	; 0xc64c
   110ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110b0:	781b      	ldrb	r3, [r3, #0]
   110b2:	3301      	adds	r3, #1
   110b4:	b2da      	uxtb	r2, r3
   110b6:	f24c 634c 	movw	r3, #50764	; 0xc64c
   110ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110be:	701a      	strb	r2, [r3, #0]
  /* next byte          */
  if (tx_byte_idx >= 10) {
   110c0:	f24c 634c 	movw	r3, #50764	; 0xc64c
   110c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110c8:	781b      	ldrb	r3, [r3, #0]
   110ca:	2b09      	cmp	r3, #9
   110cc:	d94d      	bls.n	1116a <__vector_5+0x182>
    /*  if we have nothing left to transmit */
    if( tx_head == tx_tail ) {
   110ce:	f24c 5349 	movw	r3, #50505	; 0xc549
   110d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110d6:	781a      	ldrb	r2, [r3, #0]
   110d8:	f24c 534a 	movw	r3, #50506	; 0xc54a
   110dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   110e0:	781b      	ldrb	r3, [r3, #0]
   110e2:	b2db      	uxtb	r3, r3
   110e4:	429a      	cmp	r2, r3
   110e6:	d10e      	bne.n	11106 <__vector_5+0x11e>
      /* disable clock interrupt            */
      cbi( EIMSK, MODEM_CLK_INT );
   110e8:	f242 0339 	movw	r3, #8249	; 0x2039
   110ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   110f0:	f242 0239 	movw	r2, #8249	; 0x2039
   110f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   110f8:	7812      	ldrb	r2, [r2, #0]
   110fa:	b2d2      	uxtb	r2, r2
   110fc:	f022 0210 	bic.w	r2, r2, #16
   11100:	b2d2      	uxtb	r2, r2
   11102:	701a      	strb	r2, [r3, #0]
   11104:	e031      	b.n	1116a <__vector_5+0x182>
    } else {
      /* else load next byte                  */
      MODEM_LOAD_NEXT_BYTE();  
   11106:	f24c 534a 	movw	r3, #50506	; 0xc54a
   1110a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1110e:	781b      	ldrb	r3, [r3, #0]
   11110:	b2db      	uxtb	r3, r3
   11112:	461a      	mov	r2, r3
   11114:	f24c 534c 	movw	r3, #50508	; 0xc54c
   11118:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1111c:	5c9a      	ldrb	r2, [r3, r2]
   1111e:	f24c 634b 	movw	r3, #50763	; 0xc64b
   11122:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11126:	701a      	strb	r2, [r3, #0]
   11128:	f24c 634c 	movw	r3, #50764	; 0xc64c
   1112c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11130:	2200      	movs	r2, #0
   11132:	701a      	strb	r2, [r3, #0]
   11134:	f24c 534a 	movw	r3, #50506	; 0xc54a
   11138:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1113c:	781b      	ldrb	r3, [r3, #0]
   1113e:	b2db      	uxtb	r3, r3
   11140:	3301      	adds	r3, #1
   11142:	b2da      	uxtb	r2, r3
   11144:	f24c 534a 	movw	r3, #50506	; 0xc54a
   11148:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1114c:	701a      	strb	r2, [r3, #0]
   1114e:	f24c 534a 	movw	r3, #50506	; 0xc54a
   11152:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11156:	781b      	ldrb	r3, [r3, #0]
   11158:	b2db      	uxtb	r3, r3
   1115a:	2bff      	cmp	r3, #255	; 0xff
   1115c:	d105      	bne.n	1116a <__vector_5+0x182>
   1115e:	f24c 534a 	movw	r3, #50506	; 0xc54a
   11162:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11166:	2200      	movs	r2, #0
   11168:	701a      	strb	r2, [r3, #0]
    }
  }
}
   1116a:	46bd      	mov	sp, r7
   1116c:	f85d 7b04 	ldr.w	r7, [sp], #4
   11170:	4770      	bx	lr
   11172:	bf00      	nop

00011174 <link_fbw_init>:
uint8_t link_fbw_fbw_nb_err;

static uint8_t idx_buf;
static uint8_t xor_in, xor_out;

void link_fbw_init(void) {
   11174:	b480      	push	{r7}
   11176:	af00      	add	r7, sp, #0
  link_fbw_nb_err;
   11178:	f24c 637f 	movw	r3, #50815	; 0xc67f
   1117c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11180:	781b      	ldrb	r3, [r3, #0]
  link_fbw_receive_complete = FALSE;  
   11182:	f240 533e 	movw	r3, #1342	; 0x53e
   11186:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1118a:	2200      	movs	r2, #0
   1118c:	701a      	strb	r2, [r3, #0]
}
   1118e:	46bd      	mov	sp, r7
   11190:	f85d 7b04 	ldr.w	r7, [sp], #4
   11194:	4770      	bx	lr
   11196:	bf00      	nop

00011198 <link_fbw_send>:

void link_fbw_send(void) {
   11198:	b480      	push	{r7}
   1119a:	b083      	sub	sp, #12
   1119c:	af00      	add	r7, sp, #0
    //vPrintString("S_7 link_fbw_send start! \n\r"); //SunnyBeike

    if (spi_cur_slave != SPI_NONE) 
   1119e:	f24c 6384 	movw	r3, #50820	; 0xc684
   111a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111a6:	781b      	ldrb	r3, [r3, #0]
   111a8:	b2db      	uxtb	r3, r3
   111aa:	2b00      	cmp	r3, #0
   111ac:	d00c      	beq.n	111c8 <link_fbw_send+0x30>
    {
        spi_nb_ovrn++;
   111ae:	f24c 6385 	movw	r3, #50821	; 0xc685
   111b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111b6:	781b      	ldrb	r3, [r3, #0]
   111b8:	3301      	adds	r3, #1
   111ba:	b2da      	uxtb	r2, r3
   111bc:	f24c 6385 	movw	r3, #50821	; 0xc685
   111c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   111c4:	701a      	strb	r2, [r3, #0]
        //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
        return;
   111c6:	e064      	b.n	11292 <link_fbw_send+0xfa>
    }

    /* Enable SPI, Master, set clock rate fck/16 */ 
    SPI_START(_BV(SPE) | _BV(MSTR) | _BV(SPR0)); // | _BV(SPR1);
   111c8:	f242 030d 	movw	r3, #8205	; 0x200d
   111cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111d0:	2251      	movs	r2, #81	; 0x51
   111d2:	701a      	strb	r2, [r3, #0]
   111d4:	f242 030e 	movw	r3, #8206	; 0x200e
   111d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111dc:	781b      	ldrb	r3, [r3, #0]
   111de:	b2db      	uxtb	r3, r3
   111e0:	b2db      	uxtb	r3, r3
   111e2:	b25b      	sxtb	r3, r3
   111e4:	2b00      	cmp	r3, #0
   111e6:	da05      	bge.n	111f4 <link_fbw_send+0x5c>
   111e8:	f242 030f 	movw	r3, #8207	; 0x200f
   111ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111f0:	781b      	ldrb	r3, [r3, #0]
   111f2:	71fb      	strb	r3, [r7, #7]
   111f4:	f242 030d 	movw	r3, #8205	; 0x200d
   111f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   111fc:	f242 020d 	movw	r2, #8205	; 0x200d
   11200:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11204:	7812      	ldrb	r2, [r2, #0]
   11206:	b2d2      	uxtb	r2, r2
   11208:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1120c:	b2d2      	uxtb	r2, r2
   1120e:	701a      	strb	r2, [r3, #0]
    SPI_SELECT_SLAVE0();
   11210:	f24c 6384 	movw	r3, #50820	; 0xc684
   11214:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11218:	2201      	movs	r2, #1
   1121a:	701a      	strb	r2, [r3, #0]
   1121c:	f242 0318 	movw	r3, #8216	; 0x2018
   11220:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11224:	f242 0218 	movw	r2, #8216	; 0x2018
   11228:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1122c:	7812      	ldrb	r2, [r2, #0]
   1122e:	b2d2      	uxtb	r2, r2
   11230:	f022 0201 	bic.w	r2, r2, #1
   11234:	b2d2      	uxtb	r2, r2
   11236:	701a      	strb	r2, [r3, #0]

    idx_buf = 0;
   11238:	f24c 6381 	movw	r3, #50817	; 0xc681
   1123c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11240:	2200      	movs	r2, #0
   11242:	701a      	strb	r2, [r3, #0]
    xor_in = 0;
   11244:	f24c 6382 	movw	r3, #50818	; 0xc682
   11248:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1124c:	2200      	movs	r2, #0
   1124e:	701a      	strb	r2, [r3, #0]
    xor_out = ((uint8_t*)&to_fbw)[idx_buf];
   11250:	f24c 6381 	movw	r3, #50817	; 0xc681
   11254:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11258:	781b      	ldrb	r3, [r3, #0]
   1125a:	461a      	mov	r2, r3
   1125c:	f24c 6368 	movw	r3, #50792	; 0xc668
   11260:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11264:	4413      	add	r3, r2
   11266:	781a      	ldrb	r2, [r3, #0]
   11268:	f24c 6383 	movw	r3, #50819	; 0xc683
   1126c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11270:	701a      	strb	r2, [r3, #0]
    SPDR = xor_out;
   11272:	f242 030f 	movw	r3, #8207	; 0x200f
   11276:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1127a:	f24c 6283 	movw	r2, #50819	; 0xc683
   1127e:	f2c2 0204 	movt	r2, #8196	; 0x2004
   11282:	7812      	ldrb	r2, [r2, #0]
   11284:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_valid = FALSE;
   11286:	f24c 637e 	movw	r3, #50814	; 0xc67e
   1128a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1128e:	2200      	movs	r2, #0
   11290:	701a      	strb	r2, [r3, #0]
    // Other bytes will follow SIG_SPI interrupts
    //vPrintString("S_7 link_fbw_send end! \n\r"); //SunnyBeike
}
   11292:	370c      	adds	r7, #12
   11294:	46bd      	mov	sp, r7
   11296:	f85d 7b04 	ldr.w	r7, [sp], #4
   1129a:	4770      	bx	lr

0001129c <link_fbw_on_spi_it>:

void link_fbw_on_spi_it( void ) {
   1129c:	b480      	push	{r7}
   1129e:	af00      	add	r7, sp, #0
  /* setup OCR1A to pop in 200 clock cycles */
  /* this leaves time for the slave (fbw)   */
  /* to process the byte we've sent and to  */
  /* prepare a new one to be sent           */
  OCR1A = TCNT1 + 200;
   112a0:	f242 032a 	movw	r3, #8234	; 0x202a
   112a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112a8:	f242 022c 	movw	r2, #8236	; 0x202c
   112ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
   112b0:	8812      	ldrh	r2, [r2, #0]
   112b2:	b292      	uxth	r2, r2
   112b4:	32c8      	adds	r2, #200	; 0xc8
   112b6:	b292      	uxth	r2, r2
   112b8:	801a      	strh	r2, [r3, #0]
  /* clear interrupt flag  */
  sbi(TIFR, OCF1A);
   112ba:	f242 0336 	movw	r3, #8246	; 0x2036
   112be:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112c2:	f242 0236 	movw	r2, #8246	; 0x2036
   112c6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   112ca:	7812      	ldrb	r2, [r2, #0]
   112cc:	b2d2      	uxtb	r2, r2
   112ce:	f042 0210 	orr.w	r2, r2, #16
   112d2:	b2d2      	uxtb	r2, r2
   112d4:	701a      	strb	r2, [r3, #0]
  /* enable OC1A interrupt */
  sbi(TIMSK, OCIE1A);
   112d6:	f242 0337 	movw	r3, #8247	; 0x2037
   112da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   112de:	f242 0237 	movw	r2, #8247	; 0x2037
   112e2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   112e6:	7812      	ldrb	r2, [r2, #0]
   112e8:	b2d2      	uxtb	r2, r2
   112ea:	f042 0210 	orr.w	r2, r2, #16
   112ee:	b2d2      	uxtb	r2, r2
   112f0:	701a      	strb	r2, [r3, #0]
}
   112f2:	46bd      	mov	sp, r7
   112f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   112f8:	4770      	bx	lr
   112fa:	bf00      	nop

000112fc <__vector_12>:


/* send the next byte */
SIGNAL(SIG_OUTPUT_COMPARE1A) {
   112fc:	b480      	push	{r7}
   112fe:	b083      	sub	sp, #12
   11300:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* disable OC1A interrupt */
  cbi(TIMSK, OCIE1A); 
   11302:	f242 0337 	movw	r3, #8247	; 0x2037
   11306:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1130a:	f242 0237 	movw	r2, #8247	; 0x2037
   1130e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11312:	7812      	ldrb	r2, [r2, #0]
   11314:	b2d2      	uxtb	r2, r2
   11316:	f022 0210 	bic.w	r2, r2, #16
   1131a:	b2d2      	uxtb	r2, r2
   1131c:	701a      	strb	r2, [r3, #0]

  idx_buf++;
   1131e:	f24c 6381 	movw	r3, #50817	; 0xc681
   11322:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11326:	781b      	ldrb	r3, [r3, #0]
   11328:	3301      	adds	r3, #1
   1132a:	b2da      	uxtb	r2, r3
   1132c:	f24c 6381 	movw	r3, #50817	; 0xc681
   11330:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11334:	701a      	strb	r2, [r3, #0]

  /* we have sent/received a complete frame */
  if (idx_buf == FRAME_LENGTH) {
   11336:	f24c 6381 	movw	r3, #50817	; 0xc681
   1133a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1133e:	781b      	ldrb	r3, [r3, #0]
   11340:	2b17      	cmp	r3, #23
   11342:	d162      	bne.n	1140a <__vector_12+0x10e>
    /* read checksum from receive register  */
    tmp = SPDR;
   11344:	f242 030f 	movw	r3, #8207	; 0x200f
   11348:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1134c:	781b      	ldrb	r3, [r3, #0]
   1134e:	71fb      	strb	r3, [r7, #7]
    /* notify valid frame                   */
    if (tmp == xor_in) {
   11350:	f24c 6382 	movw	r3, #50818	; 0xc682
   11354:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11358:	781b      	ldrb	r3, [r3, #0]
   1135a:	79fa      	ldrb	r2, [r7, #7]
   1135c:	429a      	cmp	r2, r3
   1135e:	d110      	bne.n	11382 <__vector_12+0x86>
      link_fbw_receive_valid = TRUE;
   11360:	f24c 637e 	movw	r3, #50814	; 0xc67e
   11364:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11368:	2201      	movs	r2, #1
   1136a:	701a      	strb	r2, [r3, #0]
      link_fbw_fbw_nb_err = from_fbw.nb_err;
   1136c:	f24c 6350 	movw	r3, #50768	; 0xc650
   11370:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11374:	7d1a      	ldrb	r2, [r3, #20]
   11376:	f24c 6380 	movw	r3, #50816	; 0xc680
   1137a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1137e:	701a      	strb	r2, [r3, #0]
   11380:	e00c      	b.n	1139c <__vector_12+0xa0>
    }
    else
      link_fbw_nb_err++;
   11382:	f24c 637f 	movw	r3, #50815	; 0xc67f
   11386:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1138a:	781b      	ldrb	r3, [r3, #0]
   1138c:	b2db      	uxtb	r3, r3
   1138e:	3301      	adds	r3, #1
   11390:	b2da      	uxtb	r2, r3
   11392:	f24c 637f 	movw	r3, #50815	; 0xc67f
   11396:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1139a:	701a      	strb	r2, [r3, #0]
    link_fbw_receive_complete = TRUE;
   1139c:	f240 533e 	movw	r3, #1342	; 0x53e
   113a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113a4:	2201      	movs	r2, #1
   113a6:	701a      	strb	r2, [r3, #0]
    /* unselect slave0                      */
    SPI_UNSELECT_SLAVE0();
   113a8:	f24c 6384 	movw	r3, #50820	; 0xc684
   113ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   113b0:	2200      	movs	r2, #0
   113b2:	701a      	strb	r2, [r3, #0]
   113b4:	f242 0318 	movw	r3, #8216	; 0x2018
   113b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113bc:	f242 0218 	movw	r2, #8216	; 0x2018
   113c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   113c4:	7812      	ldrb	r2, [r2, #0]
   113c6:	b2d2      	uxtb	r2, r2
   113c8:	f042 0201 	orr.w	r2, r2, #1
   113cc:	b2d2      	uxtb	r2, r2
   113ce:	701a      	strb	r2, [r3, #0]
    SPI_STOP();
   113d0:	f242 030d 	movw	r3, #8205	; 0x200d
   113d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113d8:	f242 020d 	movw	r2, #8205	; 0x200d
   113dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   113e0:	7812      	ldrb	r2, [r2, #0]
   113e2:	b2d2      	uxtb	r2, r2
   113e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   113e8:	b2d2      	uxtb	r2, r2
   113ea:	701a      	strb	r2, [r3, #0]
   113ec:	f242 030d 	movw	r3, #8205	; 0x200d
   113f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   113f4:	f242 020d 	movw	r2, #8205	; 0x200d
   113f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   113fc:	7812      	ldrb	r2, [r2, #0]
   113fe:	b2d2      	uxtb	r2, r2
   11400:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   11404:	b2d2      	uxtb	r2, r2
   11406:	701a      	strb	r2, [r3, #0]
    return;
   11408:	e051      	b.n	114ae <__vector_12+0x1b2>
  }

  /* we are sending/receiving payload       */
  if (idx_buf < FRAME_LENGTH - 1) {
   1140a:	f24c 6381 	movw	r3, #50817	; 0xc681
   1140e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11412:	781b      	ldrb	r3, [r3, #0]
   11414:	2b15      	cmp	r3, #21
   11416:	d820      	bhi.n	1145a <__vector_12+0x15e>
    /* place new payload byte in send register */
    tmp = ((uint8_t*)&to_fbw)[idx_buf];
   11418:	f24c 6381 	movw	r3, #50817	; 0xc681
   1141c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11420:	781b      	ldrb	r3, [r3, #0]
   11422:	461a      	mov	r2, r3
   11424:	f24c 6368 	movw	r3, #50792	; 0xc668
   11428:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1142c:	4413      	add	r3, r2
   1142e:	781b      	ldrb	r3, [r3, #0]
   11430:	71fb      	strb	r3, [r7, #7]
    SPI_SEND(tmp);
   11432:	f242 030f 	movw	r3, #8207	; 0x200f
   11436:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1143a:	79fa      	ldrb	r2, [r7, #7]
   1143c:	701a      	strb	r2, [r3, #0]
    xor_out ^= tmp;
   1143e:	f24c 6383 	movw	r3, #50819	; 0xc683
   11442:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11446:	781a      	ldrb	r2, [r3, #0]
   11448:	79fb      	ldrb	r3, [r7, #7]
   1144a:	4053      	eors	r3, r2
   1144c:	b2da      	uxtb	r2, r3
   1144e:	f24c 6383 	movw	r3, #50819	; 0xc683
   11452:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11456:	701a      	strb	r2, [r3, #0]
   11458:	e009      	b.n	1146e <__vector_12+0x172>
  } 
  /* we are done sending the payload */
  else { // idx_buf == FRAME_LENGTH - 1
    /* place checksum in send register */
    SPI_SEND(xor_out);
   1145a:	f242 030f 	movw	r3, #8207	; 0x200f
   1145e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11462:	f24c 6283 	movw	r2, #50819	; 0xc683
   11466:	f2c2 0204 	movt	r2, #8196	; 0x2004
   1146a:	7812      	ldrb	r2, [r2, #0]
   1146c:	701a      	strb	r2, [r3, #0]
  }
  
  /* read the byte from receive register */
  tmp = SPDR;
   1146e:	f242 030f 	movw	r3, #8207	; 0x200f
   11472:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11476:	781b      	ldrb	r3, [r3, #0]
   11478:	71fb      	strb	r3, [r7, #7]
  ((uint8_t*)&from_fbw)[idx_buf-1] = tmp;
   1147a:	f24c 6381 	movw	r3, #50817	; 0xc681
   1147e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11482:	781b      	ldrb	r3, [r3, #0]
   11484:	1e5a      	subs	r2, r3, #1
   11486:	f24c 6350 	movw	r3, #50768	; 0xc650
   1148a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1148e:	4413      	add	r3, r2
   11490:	79fa      	ldrb	r2, [r7, #7]
   11492:	701a      	strb	r2, [r3, #0]
  xor_in ^= tmp;
   11494:	f24c 6382 	movw	r3, #50818	; 0xc682
   11498:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1149c:	781a      	ldrb	r2, [r3, #0]
   1149e:	79fb      	ldrb	r3, [r7, #7]
   114a0:	4053      	eors	r3, r2
   114a2:	b2da      	uxtb	r2, r3
   114a4:	f24c 6382 	movw	r3, #50818	; 0xc682
   114a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114ac:	701a      	strb	r2, [r3, #0]
}
   114ae:	370c      	adds	r7, #12
   114b0:	46bd      	mov	sp, r7
   114b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   114b6:	4770      	bx	lr

000114b8 <spi_init>:
#include "ad7714.h"

volatile uint8_t spi_cur_slave;
uint8_t spi_nb_ovrn;

void spi_init( void) {
   114b8:	b480      	push	{r7}
   114ba:	af00      	add	r7, sp, #0
  /* Set MOSI and SCK output, all others input */ 
  SPI_DDR |= _BV(SPI_MOSI_PIN)| _BV(SPI_SCK_PIN); 
   114bc:	f242 0317 	movw	r3, #8215	; 0x2017
   114c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114c4:	f242 0217 	movw	r2, #8215	; 0x2017
   114c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   114cc:	7812      	ldrb	r2, [r2, #0]
   114ce:	b2d2      	uxtb	r2, r2
   114d0:	f042 0206 	orr.w	r2, r2, #6
   114d4:	b2d2      	uxtb	r2, r2
   114d6:	701a      	strb	r2, [r3, #0]

  /* enable pull up for miso */
  //  SPI_PORT |= _BV(SPI_MISO_PIN);

  /* Set SS0 output */
  sbi( SPI_SS0_DDR, SPI_SS0_PIN);
   114d8:	f242 0317 	movw	r3, #8215	; 0x2017
   114dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   114e0:	f242 0217 	movw	r2, #8215	; 0x2017
   114e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   114e8:	7812      	ldrb	r2, [r2, #0]
   114ea:	b2d2      	uxtb	r2, r2
   114ec:	f042 0201 	orr.w	r2, r2, #1
   114f0:	b2d2      	uxtb	r2, r2
   114f2:	701a      	strb	r2, [r3, #0]
  /* SS0 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE0();
   114f4:	f24c 6384 	movw	r3, #50820	; 0xc684
   114f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   114fc:	2200      	movs	r2, #0
   114fe:	701a      	strb	r2, [r3, #0]
   11500:	f242 0318 	movw	r3, #8216	; 0x2018
   11504:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11508:	f242 0218 	movw	r2, #8216	; 0x2018
   1150c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11510:	7812      	ldrb	r2, [r2, #0]
   11512:	b2d2      	uxtb	r2, r2
   11514:	f042 0201 	orr.w	r2, r2, #1
   11518:	b2d2      	uxtb	r2, r2
   1151a:	701a      	strb	r2, [r3, #0]

  /* Set SS1 output */
  sbi( SPI_SS1_DDR, SPI_SS1_PIN);
   1151c:	f242 0302 	movw	r3, #8194	; 0x2002
   11520:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11524:	f242 0202 	movw	r2, #8194	; 0x2002
   11528:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1152c:	7812      	ldrb	r2, [r2, #0]
   1152e:	b2d2      	uxtb	r2, r2
   11530:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11534:	b2d2      	uxtb	r2, r2
   11536:	701a      	strb	r2, [r3, #0]
  /* SS1 idles high (don't select slave yet)*/
  SPI_UNSELECT_SLAVE1();
   11538:	f24c 6384 	movw	r3, #50820	; 0xc684
   1153c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11540:	2200      	movs	r2, #0
   11542:	701a      	strb	r2, [r3, #0]
   11544:	f242 0303 	movw	r3, #8195	; 0x2003
   11548:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1154c:	f242 0203 	movw	r2, #8195	; 0x2003
   11550:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11554:	7812      	ldrb	r2, [r2, #0]
   11556:	b2d2      	uxtb	r2, r2
   11558:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1155c:	b2d2      	uxtb	r2, r2
   1155e:	701a      	strb	r2, [r3, #0]
  
  spi_cur_slave = SPI_NONE;
   11560:	f24c 6384 	movw	r3, #50820	; 0xc684
   11564:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11568:	2200      	movs	r2, #0
   1156a:	701a      	strb	r2, [r3, #0]
}
   1156c:	46bd      	mov	sp, r7
   1156e:	f85d 7b04 	ldr.w	r7, [sp], #4
   11572:	4770      	bx	lr

00011574 <__vector_17>:


SIGNAL(SIG_SPI) {
   11574:	b580      	push	{r7, lr}
   11576:	af00      	add	r7, sp, #0
  if (spi_cur_slave == SPI_SLAVE0)
   11578:	f24c 6384 	movw	r3, #50820	; 0xc684
   1157c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11580:	781b      	ldrb	r3, [r3, #0]
   11582:	b2db      	uxtb	r3, r3
   11584:	2b01      	cmp	r3, #1
   11586:	d102      	bne.n	1158e <__vector_17+0x1a>
    link_fbw_on_spi_it();
   11588:	f7ff fe88 	bl	1129c <link_fbw_on_spi_it>
   1158c:	e00b      	b.n	115a6 <__vector_17+0x32>
  else
    fatal_error_nb++;
   1158e:	f24c 5328 	movw	r3, #50472	; 0xc528
   11592:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11596:	781b      	ldrb	r3, [r3, #0]
   11598:	3301      	adds	r3, #1
   1159a:	b2da      	uxtb	r2, r3
   1159c:	f24c 5328 	movw	r3, #50472	; 0xc528
   115a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115a4:	701a      	strb	r2, [r3, #0]
}
   115a6:	bd80      	pop	{r7, pc}

000115a8 <adc_buf_channel>:

uint16_t		adc_samples[ NB_ADC ];

static struct adc_buf* buffers[NB_ADC];

void adc_buf_channel(uint8_t adc_channel, struct adc_buf* s) {
   115a8:	b480      	push	{r7}
   115aa:	b083      	sub	sp, #12
   115ac:	af00      	add	r7, sp, #0
   115ae:	4603      	mov	r3, r0
   115b0:	6039      	str	r1, [r7, #0]
   115b2:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   115b4:	79fa      	ldrb	r2, [r7, #7]
   115b6:	f24c 6398 	movw	r3, #50840	; 0xc698
   115ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   115be:	6839      	ldr	r1, [r7, #0]
   115c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   115c4:	370c      	adds	r7, #12
   115c6:	46bd      	mov	sp, r7
   115c8:	f85d 7b04 	ldr.w	r7, [sp], #4
   115cc:	4770      	bx	lr
   115ce:	bf00      	nop

000115d0 <adc_init>:

void 
adc_init( void )
{
   115d0:	b480      	push	{r7}
   115d2:	b083      	sub	sp, #12
   115d4:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   115d6:	f242 0362 	movw	r3, #8290	; 0x2062
   115da:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115de:	2200      	movs	r2, #0
   115e0:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   115e2:	f242 0361 	movw	r3, #8289	; 0x2061
   115e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115ea:	2200      	movs	r2, #0
   115ec:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref, which is tied to Vcc */
  ADMUX		= ANALOG_VREF;
   115ee:	f242 0307 	movw	r3, #8199	; 0x2007
   115f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   115f6:	2240      	movs	r2, #64	; 0x40
   115f8:	701a      	strb	r2, [r3, #0]

  /* Turn off the analog comparator */
  sbi( ACSR, ACD );
   115fa:	f242 0308 	movw	r3, #8200	; 0x2008
   115fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11602:	f242 0208 	movw	r2, #8200	; 0x2008
   11606:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1160a:	7812      	ldrb	r2, [r2, #0]
   1160c:	b2d2      	uxtb	r2, r2
   1160e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11612:	b2d2      	uxtb	r2, r2
   11614:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSR		= 0
   11616:	f242 0306 	movw	r3, #8198	; 0x2006
   1161a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1161e:	22cf      	movs	r2, #207	; 0xcf
   11620:	701a      	strb	r2, [r3, #0]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   11622:	2300      	movs	r3, #0
   11624:	71fb      	strb	r3, [r7, #7]
   11626:	e00a      	b.n	1163e <adc_init+0x6e>
    buffers[i] = (struct adc_buf*)0;
   11628:	79fa      	ldrb	r2, [r7, #7]
   1162a:	f24c 6398 	movw	r3, #50840	; 0xc698
   1162e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11632:	2100      	movs	r1, #0
   11634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | ( 1 << ADEN )
    | ( 1 << ADIE )
    | ( 1 << ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < NB_ADC; i++)
   11638:	79fb      	ldrb	r3, [r7, #7]
   1163a:	3301      	adds	r3, #1
   1163c:	71fb      	strb	r3, [r7, #7]
   1163e:	79fb      	ldrb	r3, [r7, #7]
   11640:	2b07      	cmp	r3, #7
   11642:	d9f1      	bls.n	11628 <adc_init+0x58>
    buffers[i] = (struct adc_buf*)0;
}
   11644:	370c      	adds	r7, #12
   11646:	46bd      	mov	sp, r7
   11648:	f85d 7b04 	ldr.w	r7, [sp], #4
   1164c:	4770      	bx	lr
   1164e:	bf00      	nop

00011650 <__vector_21>:
 *  8.913kHz on mega128@16MHz 1kHz/channel ??
*/


SIGNAL( SIG_ADC )
{
   11650:	b480      	push	{r7}
   11652:	b085      	sub	sp, #20
   11654:	af00      	add	r7, sp, #0
  uint8_t adc_input	= ADMUX & 0x7;
   11656:	f242 0307 	movw	r3, #8199	; 0x2007
   1165a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1165e:	781b      	ldrb	r3, [r3, #0]
   11660:	b2db      	uxtb	r3, r3
   11662:	f003 0307 	and.w	r3, r3, #7
   11666:	73fb      	strb	r3, [r7, #15]
  struct adc_buf* buf = buffers[adc_input];
   11668:	7bfa      	ldrb	r2, [r7, #15]
   1166a:	f24c 6398 	movw	r3, #50840	; 0xc698
   1166e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   11676:	60bb      	str	r3, [r7, #8]
  uint16_t adc_value = ADCW;
   11678:	f242 0304 	movw	r3, #8196	; 0x2004
   1167c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11680:	881b      	ldrh	r3, [r3, #0]
   11682:	80fb      	strh	r3, [r7, #6]
  /* Store result */
  adc_samples[ adc_input ] = adc_value;
   11684:	7bfa      	ldrb	r2, [r7, #15]
   11686:	f24c 6388 	movw	r3, #50824	; 0xc688
   1168a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1168e:	88f9      	ldrh	r1, [r7, #6]
   11690:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  if (buf) {
   11694:	68bb      	ldr	r3, [r7, #8]
   11696:	2b00      	cmp	r3, #0
   11698:	d025      	beq.n	116e6 <__vector_21+0x96>
    uint8_t new_head = buf->head + 1;
   1169a:	68bb      	ldr	r3, [r7, #8]
   1169c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   116a0:	3301      	adds	r3, #1
   116a2:	73bb      	strb	r3, [r7, #14]
    if (new_head >= AV_NB_SAMPLE) new_head = 0;
   116a4:	7bbb      	ldrb	r3, [r7, #14]
   116a6:	2b1f      	cmp	r3, #31
   116a8:	d901      	bls.n	116ae <__vector_21+0x5e>
   116aa:	2300      	movs	r3, #0
   116ac:	73bb      	strb	r3, [r7, #14]
    buf->sum -= buf->values[new_head];
   116ae:	68bb      	ldr	r3, [r7, #8]
   116b0:	881a      	ldrh	r2, [r3, #0]
   116b2:	7bbb      	ldrb	r3, [r7, #14]
   116b4:	68b9      	ldr	r1, [r7, #8]
   116b6:	005b      	lsls	r3, r3, #1
   116b8:	440b      	add	r3, r1
   116ba:	885b      	ldrh	r3, [r3, #2]
   116bc:	1ad3      	subs	r3, r2, r3
   116be:	b29a      	uxth	r2, r3
   116c0:	68bb      	ldr	r3, [r7, #8]
   116c2:	801a      	strh	r2, [r3, #0]
    buf->values[new_head] = adc_value;
   116c4:	7bbb      	ldrb	r3, [r7, #14]
   116c6:	68ba      	ldr	r2, [r7, #8]
   116c8:	005b      	lsls	r3, r3, #1
   116ca:	4413      	add	r3, r2
   116cc:	88fa      	ldrh	r2, [r7, #6]
   116ce:	805a      	strh	r2, [r3, #2]
    buf->sum += adc_value;
   116d0:	68bb      	ldr	r3, [r7, #8]
   116d2:	881a      	ldrh	r2, [r3, #0]
   116d4:	88fb      	ldrh	r3, [r7, #6]
   116d6:	4413      	add	r3, r2
   116d8:	b29a      	uxth	r2, r3
   116da:	68bb      	ldr	r3, [r7, #8]
   116dc:	801a      	strh	r2, [r3, #0]
    buf->head = new_head;   
   116de:	68bb      	ldr	r3, [r7, #8]
   116e0:	7bba      	ldrb	r2, [r7, #14]
   116e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Find the next input */
  adc_input++;
   116e6:	7bfb      	ldrb	r3, [r7, #15]
   116e8:	3301      	adds	r3, #1
   116ea:	73fb      	strb	r3, [r7, #15]
  if( adc_input >= 8 )
   116ec:	7bfb      	ldrb	r3, [r7, #15]
   116ee:	2b07      	cmp	r3, #7
   116f0:	d901      	bls.n	116f6 <__vector_21+0xa6>
    adc_input = 0;
   116f2:	2300      	movs	r3, #0
   116f4:	73fb      	strb	r3, [r7, #15]
  /* Select it */
  ADMUX = adc_input | ANALOG_VREF;
   116f6:	f242 0307 	movw	r3, #8199	; 0x2007
   116fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   116fe:	7bfa      	ldrb	r2, [r7, #15]
   11700:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11704:	b2d2      	uxtb	r2, r2
   11706:	701a      	strb	r2, [r3, #0]
  /* Restart the conversion */
  sbi( ADCSR, ADSC );
   11708:	f242 0306 	movw	r3, #8198	; 0x2006
   1170c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11710:	f242 0206 	movw	r2, #8198	; 0x2006
   11714:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11718:	7812      	ldrb	r2, [r2, #0]
   1171a:	b2d2      	uxtb	r2, r2
   1171c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11720:	b2d2      	uxtb	r2, r2
   11722:	701a      	strb	r2, [r3, #0]
  
}
   11724:	3714      	adds	r7, #20
   11726:	46bd      	mov	sp, r7
   11728:	f85d 7b04 	ldr.w	r7, [sp], #4
   1172c:	4770      	bx	lr
   1172e:	bf00      	nop

00011730 <gps_init>:
static uint8_t  ubx_status;
static uint16_t ubx_len;
static uint8_t  ubx_msg_idx;
static uint8_t ck_a, ck_b, ubx_id, ubx_class;

void gps_init( void ) {
   11730:	b580      	push	{r7, lr}
   11732:	af00      	add	r7, sp, #0
#ifdef SIMUL
  uart0_init();
  simul_ir_roll = ir_roll_neutral;
  simul_ir_pitch = ir_pitch_neutral;
#else
  uart1_init();
   11734:	f003 fca8 	bl	15088 <uart1_init>
#endif
  ubx_status = UNINIT;
   11738:	f24c 73df 	movw	r3, #51167	; 0xc7df
   1173c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11740:	2200      	movs	r2, #0
   11742:	701a      	strb	r2, [r3, #0]
}
   11744:	bd80      	pop	{r7, pc}
   11746:	bf00      	nop

00011748 <parse_gps_msg>:

void parse_gps_msg( void ) {
   11748:	b580      	push	{r7, lr}
   1174a:	af00      	add	r7, sp, #0
    ubx_class = 1;
    ubx_id = (ubx_id + 1)%0x40;
    */
    //end

  if (ubx_class == UBX_NAV_ID) {
   1174c:	f24c 73e6 	movw	r3, #51174	; 0xc7e6
   11750:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11754:	781b      	ldrb	r3, [r3, #0]
   11756:	2b01      	cmp	r3, #1
   11758:	f040 80f9 	bne.w	1194e <parse_gps_msg+0x206>
    if (ubx_id == UBX_NAV_POSUTM_ID) {
   1175c:	f24c 73e5 	movw	r3, #51173	; 0xc7e5
   11760:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11764:	781b      	ldrb	r3, [r3, #0]
   11766:	2b08      	cmp	r3, #8
   11768:	d128      	bne.n	117bc <parse_gps_msg+0x74>
      gps_utm_east = UBX_NAV_POSUTM_EAST(ubx_msg_buf);
   1176a:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   1176e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11772:	685a      	ldr	r2, [r3, #4]
   11774:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
   11778:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1177c:	601a      	str	r2, [r3, #0]
      gps_utm_north = UBX_NAV_POSUTM_NORTH(ubx_msg_buf);
   1177e:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   11782:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11786:	689a      	ldr	r2, [r3, #8]
   11788:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
   1178c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11790:	601a      	str	r2, [r3, #0]
      gps_falt = (float)UBX_NAV_POSUTM_ALT(ubx_msg_buf) / 100.;
   11792:	4b73      	ldr	r3, [pc, #460]	; (11960 <parse_gps_msg+0x218>)
   11794:	681b      	ldr	r3, [r3, #0]
   11796:	4618      	mov	r0, r3
   11798:	f006 fe10 	bl	183bc <__aeabi_i2f>
   1179c:	4603      	mov	r3, r0
   1179e:	4618      	mov	r0, r3
   117a0:	f04f 0100 	mov.w	r1, #0
   117a4:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   117a8:	f006 ff10 	bl	185cc <__aeabi_fdiv>
   117ac:	4603      	mov	r3, r0
   117ae:	461a      	mov	r2, r3
   117b0:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   117b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117b8:	601a      	str	r2, [r3, #0]
   117ba:	e0c8      	b.n	1194e <parse_gps_msg+0x206>
        gps_utm_east = gps_utm_east + 0.5;
        gps_utm_north = gps_utm_north + 0.4;
        gps_falt = gps_falt + 0.6;
        */
        // end
    } else if (ubx_id == UBX_NAV_STATUS_ID) {
   117bc:	f24c 73e5 	movw	r3, #51173	; 0xc7e5
   117c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117c4:	781b      	ldrb	r3, [r3, #0]
   117c6:	2b03      	cmp	r3, #3
   117c8:	d10a      	bne.n	117e0 <parse_gps_msg+0x98>
      gps_mode = UBX_NAV_STATUS_GPSfix(ubx_msg_buf);
   117ca:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   117ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117d2:	791a      	ldrb	r2, [r3, #4]
   117d4:	f24c 63dc 	movw	r3, #50908	; 0xc6dc
   117d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117dc:	701a      	strb	r2, [r3, #0]
   117de:	e0b6      	b.n	1194e <parse_gps_msg+0x206>
    } else if (ubx_id == UBX_NAV_VELNED_ID) {
   117e0:	f24c 73e5 	movw	r3, #51173	; 0xc7e5
   117e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   117e8:	781b      	ldrb	r3, [r3, #0]
   117ea:	2b12      	cmp	r3, #18
   117ec:	f040 80af 	bne.w	1194e <parse_gps_msg+0x206>
      gps_fspeed = ((float)UBX_NAV_VELNED_GSpeed(ubx_msg_buf)) / 1e2; 
   117f0:	4b5c      	ldr	r3, [pc, #368]	; (11964 <parse_gps_msg+0x21c>)
   117f2:	681b      	ldr	r3, [r3, #0]
   117f4:	4618      	mov	r0, r3
   117f6:	f006 fddd 	bl	183b4 <__aeabi_ui2f>
   117fa:	4603      	mov	r3, r0
   117fc:	4618      	mov	r0, r3
   117fe:	f04f 0100 	mov.w	r1, #0
   11802:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   11806:	f006 fee1 	bl	185cc <__aeabi_fdiv>
   1180a:	4603      	mov	r3, r0
   1180c:	461a      	mov	r2, r3
   1180e:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   11812:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11816:	601a      	str	r2, [r3, #0]
      gps_fclimb = ((float)UBX_NAV_VELNED_VEL_D(ubx_msg_buf)) / -1e2;
   11818:	4b51      	ldr	r3, [pc, #324]	; (11960 <parse_gps_msg+0x218>)
   1181a:	681b      	ldr	r3, [r3, #0]
   1181c:	4618      	mov	r0, r3
   1181e:	f006 fdcd 	bl	183bc <__aeabi_i2f>
   11822:	4603      	mov	r3, r0
   11824:	4618      	mov	r0, r3
   11826:	f04f 0100 	mov.w	r1, #0
   1182a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1182e:	f006 fecd 	bl	185cc <__aeabi_fdiv>
   11832:	4603      	mov	r3, r0
   11834:	461a      	mov	r2, r3
   11836:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   1183a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1183e:	601a      	str	r2, [r3, #0]
      gps_fcourse = RadianOfDeg(((float)UBX_NAV_VELNED_Heading(ubx_msg_buf)) / 1e5);
   11840:	4b49      	ldr	r3, [pc, #292]	; (11968 <parse_gps_msg+0x220>)
   11842:	681b      	ldr	r3, [r3, #0]
   11844:	4618      	mov	r0, r3
   11846:	f006 fdb9 	bl	183bc <__aeabi_i2f>
   1184a:	4603      	mov	r3, r0
   1184c:	4618      	mov	r0, r3
   1184e:	f006 f975 	bl	17b3c <__aeabi_f2d>
   11852:	4602      	mov	r2, r0
   11854:	460b      	mov	r3, r1
   11856:	4610      	mov	r0, r2
   11858:	4619      	mov	r1, r3
   1185a:	a33d      	add	r3, pc, #244	; (adr r3, 11950 <parse_gps_msg+0x208>)
   1185c:	e9d3 2300 	ldrd	r2, r3, [r3]
   11860:	f006 faea 	bl	17e38 <__aeabi_ddiv>
   11864:	4602      	mov	r2, r0
   11866:	460b      	mov	r3, r1
   11868:	4610      	mov	r0, r2
   1186a:	4619      	mov	r1, r3
   1186c:	f04f 0200 	mov.w	r2, #0
   11870:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   11874:	f2c4 0366 	movt	r3, #16486	; 0x4066
   11878:	f006 fade 	bl	17e38 <__aeabi_ddiv>
   1187c:	4602      	mov	r2, r0
   1187e:	460b      	mov	r3, r1
   11880:	4610      	mov	r0, r2
   11882:	4619      	mov	r1, r3
   11884:	a334      	add	r3, pc, #208	; (adr r3, 11958 <parse_gps_msg+0x210>)
   11886:	e9d3 2300 	ldrd	r2, r3, [r3]
   1188a:	f006 f9ab 	bl	17be4 <__aeabi_dmul>
   1188e:	4602      	mov	r2, r0
   11890:	460b      	mov	r3, r1
   11892:	4610      	mov	r0, r2
   11894:	4619      	mov	r1, r3
   11896:	f006 fc87 	bl	181a8 <__aeabi_d2f>
   1189a:	4602      	mov	r2, r0
   1189c:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
   118a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118a4:	601a      	str	r2, [r3, #0]
      gps_ftow = ((float)UBX_NAV_VELNED_ITOW(ubx_msg_buf)) / 1e3;
   118a6:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   118aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118ae:	681b      	ldr	r3, [r3, #0]
   118b0:	4618      	mov	r0, r3
   118b2:	f006 fd7f 	bl	183b4 <__aeabi_ui2f>
   118b6:	4603      	mov	r3, r0
   118b8:	4618      	mov	r0, r3
   118ba:	f04f 0100 	mov.w	r1, #0
   118be:	f2c4 417a 	movt	r1, #17530	; 0x447a
   118c2:	f006 fe83 	bl	185cc <__aeabi_fdiv>
   118c6:	4603      	mov	r3, r0
   118c8:	461a      	mov	r2, r3
   118ca:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   118ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118d2:	601a      	str	r2, [r3, #0]
        gps_fcourse = gps_fcourse + 0.2;
        gps_ftow = gps_ftow + 0.1;
        */
        // end
      
      gps_east = gps_utm_east / 100 - NAV_UTM_EAST0;
   118d4:	f24c 63cc 	movw	r3, #50892	; 0xc6cc
   118d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   118dc:	681a      	ldr	r2, [r3, #0]
   118de:	f248 531f 	movw	r3, #34079	; 0x851f
   118e2:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   118e6:	fb83 1302 	smull	r1, r3, r3, r2
   118ea:	1159      	asrs	r1, r3, #5
   118ec:	17d3      	asrs	r3, r2, #31
   118ee:	1acb      	subs	r3, r1, r3
   118f0:	f5a3 2313 	sub.w	r3, r3, #602112	; 0x93000
   118f4:	f6a3 535a 	subw	r3, r3, #3418	; 0xd5a
   118f8:	4618      	mov	r0, r3
   118fa:	f006 fd5f 	bl	183bc <__aeabi_i2f>
   118fe:	4602      	mov	r2, r0
   11900:	f24c 63d4 	movw	r3, #50900	; 0xc6d4
   11904:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11908:	601a      	str	r2, [r3, #0]
      gps_north = gps_utm_north / 100 - NAV_UTM_NORTH0;
   1190a:	f24c 63d0 	movw	r3, #50896	; 0xc6d0
   1190e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11912:	681a      	ldr	r2, [r3, #0]
   11914:	f248 531f 	movw	r3, #34079	; 0x851f
   11918:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
   1191c:	fb83 1302 	smull	r1, r3, r3, r2
   11920:	1159      	asrs	r1, r3, #5
   11922:	17d3      	asrs	r3, r2, #31
   11924:	1aca      	subs	r2, r1, r3
   11926:	f648 231a 	movw	r3, #35354	; 0x8a1a
   1192a:	f6cf 73a7 	movt	r3, #65447	; 0xffa7
   1192e:	4413      	add	r3, r2
   11930:	4618      	mov	r0, r3
   11932:	f006 fd43 	bl	183bc <__aeabi_i2f>
   11936:	4602      	mov	r2, r0
   11938:	f24c 63d8 	movw	r3, #50904	; 0xc6d8
   1193c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11940:	601a      	str	r2, [r3, #0]
      
      
      gps_pos_available = TRUE; /* The 3 UBX messages are sent in one rafale */
   11942:	f24c 63de 	movw	r3, #50910	; 0xc6de
   11946:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1194a:	2201      	movs	r2, #1
   1194c:	701a      	strb	r2, [r3, #0]
      simul_ir_roll = UBX_USR_IRSIM_ROLL(ubx_msg_buf);
      simul_ir_pitch = UBX_USR_IRSIM_PITCH(ubx_msg_buf);
    }
  }
#endif
}
   1194e:	bd80      	pop	{r7, pc}
   11950:	00000000 	.word	0x00000000
   11954:	40f86a00 	.word	0x40f86a00
   11958:	5a7ed197 	.word	0x5a7ed197
   1195c:	400921fb 	.word	0x400921fb
   11960:	2004c6ec 	.word	0x2004c6ec
   11964:	2004c6f4 	.word	0x2004c6f4
   11968:	2004c6f8 	.word	0x2004c6f8

0001196c <parse_ubx>:


uint8_t gps_nb_ovrn;


static void parse_ubx( uint8_t c ) {
   1196c:	b480      	push	{r7}
   1196e:	b083      	sub	sp, #12
   11970:	af00      	add	r7, sp, #0
   11972:	4603      	mov	r3, r0
   11974:	71fb      	strb	r3, [r7, #7]
   if (ubx_status < GOT_PAYLOAD) {
   11976:	f24c 73df 	movw	r3, #51167	; 0xc7df
   1197a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1197e:	781b      	ldrb	r3, [r3, #0]
   11980:	2b06      	cmp	r3, #6
   11982:	d81d      	bhi.n	119c0 <parse_ubx+0x54>
    ck_a += c;
   11984:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11988:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1198c:	781a      	ldrb	r2, [r3, #0]
   1198e:	79fb      	ldrb	r3, [r7, #7]
   11990:	4413      	add	r3, r2
   11992:	b2da      	uxtb	r2, r3
   11994:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11998:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1199c:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
   1199e:	f24c 73e4 	movw	r3, #51172	; 0xc7e4
   119a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119a6:	781a      	ldrb	r2, [r3, #0]
   119a8:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   119ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119b0:	781b      	ldrb	r3, [r3, #0]
   119b2:	4413      	add	r3, r2
   119b4:	b2da      	uxtb	r2, r3
   119b6:	f24c 73e4 	movw	r3, #51172	; 0xc7e4
   119ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119be:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
    break;
  }
#else */
  if (ubx_status == UNINIT)
   119c0:	f24c 73df 	movw	r3, #51167	; 0xc7df
   119c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119c8:	781b      	ldrb	r3, [r3, #0]
   119ca:	2b00      	cmp	r3, #0
   119cc:	d110      	bne.n	119f0 <parse_ubx+0x84>
  {
    if (c == UBX_SYNC1)
   119ce:	79fb      	ldrb	r3, [r7, #7]
   119d0:	2bb5      	cmp	r3, #181	; 0xb5
   119d2:	f040 8135 	bne.w	11c40 <parse_ubx+0x2d4>
      ubx_status++;
   119d6:	f24c 73df 	movw	r3, #51167	; 0xc7df
   119da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119de:	781b      	ldrb	r3, [r3, #0]
   119e0:	3301      	adds	r3, #1
   119e2:	b2da      	uxtb	r2, r3
   119e4:	f24c 73df 	movw	r3, #51167	; 0xc7df
   119e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119ec:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   119ee:	e12f      	b.n	11c50 <parse_ubx+0x2e4>
  if (ubx_status == UNINIT)
  {
    if (c == UBX_SYNC1)
      ubx_status++;
  }
  else if (ubx_status == GOT_SYNC1)
   119f0:	f24c 73df 	movw	r3, #51167	; 0xc7df
   119f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   119f8:	781b      	ldrb	r3, [r3, #0]
   119fa:	2b01      	cmp	r3, #1
   119fc:	d11c      	bne.n	11a38 <parse_ubx+0xcc>
  {
    if (c != UBX_SYNC2)
   119fe:	79fb      	ldrb	r3, [r7, #7]
   11a00:	2b62      	cmp	r3, #98	; 0x62
   11a02:	d000      	beq.n	11a06 <parse_ubx+0x9a>
      goto error;
   11a04:	e11d      	b.n	11c42 <parse_ubx+0x2d6>
    ck_a = 0;
   11a06:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11a0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a0e:	2200      	movs	r2, #0
   11a10:	701a      	strb	r2, [r3, #0]
    ck_b = 0;
   11a12:	f24c 73e4 	movw	r3, #51172	; 0xc7e4
   11a16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a1a:	2200      	movs	r2, #0
   11a1c:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11a1e:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11a22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a26:	781b      	ldrb	r3, [r3, #0]
   11a28:	3301      	adds	r3, #1
   11a2a:	b2da      	uxtb	r2, r3
   11a2c:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11a30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a34:	701a      	strb	r2, [r3, #0]
   11a36:	e103      	b.n	11c40 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_SYNC2)
   11a38:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11a3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a40:	781b      	ldrb	r3, [r3, #0]
   11a42:	2b02      	cmp	r3, #2
   11a44:	d127      	bne.n	11a96 <parse_ubx+0x12a>
  {
    if (gps_msg_received) {
   11a46:	f24c 63dd 	movw	r3, #50909	; 0xc6dd
   11a4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a4e:	781b      	ldrb	r3, [r3, #0]
   11a50:	b2db      	uxtb	r3, r3
   11a52:	2b00      	cmp	r3, #0
   11a54:	d00c      	beq.n	11a70 <parse_ubx+0x104>
      /* Previous message has not yet been parsed: discard this one */
      gps_nb_ovrn++;
   11a56:	f24c 73e7 	movw	r3, #51175	; 0xc7e7
   11a5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a5e:	781b      	ldrb	r3, [r3, #0]
   11a60:	3301      	adds	r3, #1
   11a62:	b2da      	uxtb	r2, r3
   11a64:	f24c 73e7 	movw	r3, #51175	; 0xc7e7
   11a68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a6c:	701a      	strb	r2, [r3, #0]
      goto error;
   11a6e:	e0e8      	b.n	11c42 <parse_ubx+0x2d6>
    }
    ubx_class = c;
   11a70:	f24c 73e6 	movw	r3, #51174	; 0xc7e6
   11a74:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a78:	79fa      	ldrb	r2, [r7, #7]
   11a7a:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11a7c:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11a80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a84:	781b      	ldrb	r3, [r3, #0]
   11a86:	3301      	adds	r3, #1
   11a88:	b2da      	uxtb	r2, r3
   11a8a:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11a8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a92:	701a      	strb	r2, [r3, #0]
   11a94:	e0d4      	b.n	11c40 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CLASS)
   11a96:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11a9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11a9e:	781b      	ldrb	r3, [r3, #0]
   11aa0:	2b03      	cmp	r3, #3
   11aa2:	d112      	bne.n	11aca <parse_ubx+0x15e>
  {
    ubx_id = c;
   11aa4:	f24c 73e5 	movw	r3, #51173	; 0xc7e5
   11aa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11aac:	79fa      	ldrb	r2, [r7, #7]
   11aae:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11ab0:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11ab4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ab8:	781b      	ldrb	r3, [r3, #0]
   11aba:	3301      	adds	r3, #1
   11abc:	b2da      	uxtb	r2, r3
   11abe:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11ac2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ac6:	701a      	strb	r2, [r3, #0]
   11ac8:	e0ba      	b.n	11c40 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_ID)
   11aca:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11ace:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ad2:	781b      	ldrb	r3, [r3, #0]
   11ad4:	2b04      	cmp	r3, #4
   11ad6:	d113      	bne.n	11b00 <parse_ubx+0x194>
  {
    ubx_len = c;
   11ad8:	79fb      	ldrb	r3, [r7, #7]
   11ada:	b29a      	uxth	r2, r3
   11adc:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11ae0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ae4:	801a      	strh	r2, [r3, #0]
    ubx_status++;
   11ae6:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11aea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11aee:	781b      	ldrb	r3, [r3, #0]
   11af0:	3301      	adds	r3, #1
   11af2:	b2da      	uxtb	r2, r3
   11af4:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11af8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11afc:	701a      	strb	r2, [r3, #0]
   11afe:	e09f      	b.n	11c40 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN1)
   11b00:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b08:	781b      	ldrb	r3, [r3, #0]
   11b0a:	2b05      	cmp	r3, #5
   11b0c:	d12b      	bne.n	11b66 <parse_ubx+0x1fa>
  {
    ubx_len |= (c<<8);
   11b0e:	79fb      	ldrb	r3, [r7, #7]
   11b10:	021b      	lsls	r3, r3, #8
   11b12:	b29a      	uxth	r2, r3
   11b14:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11b18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b1c:	881b      	ldrh	r3, [r3, #0]
   11b1e:	b29b      	uxth	r3, r3
   11b20:	4313      	orrs	r3, r2
   11b22:	b29b      	uxth	r3, r3
   11b24:	b29a      	uxth	r2, r3
   11b26:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b2e:	801a      	strh	r2, [r3, #0]
    if (ubx_len > UBX_MAX_PAYLOAD)
   11b30:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11b34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b38:	881b      	ldrh	r3, [r3, #0]
   11b3a:	2bff      	cmp	r3, #255	; 0xff
   11b3c:	d900      	bls.n	11b40 <parse_ubx+0x1d4>
      goto error;
   11b3e:	e080      	b.n	11c42 <parse_ubx+0x2d6>
    ubx_msg_idx = 0;
   11b40:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b48:	2200      	movs	r2, #0
   11b4a:	701a      	strb	r2, [r3, #0]
    ubx_status++;
   11b4c:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b54:	781b      	ldrb	r3, [r3, #0]
   11b56:	3301      	adds	r3, #1
   11b58:	b2da      	uxtb	r2, r3
   11b5a:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b5e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b62:	701a      	strb	r2, [r3, #0]
   11b64:	e06c      	b.n	11c40 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_LEN2)
   11b66:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11b6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b6e:	781b      	ldrb	r3, [r3, #0]
   11b70:	2b06      	cmp	r3, #6
   11b72:	d131      	bne.n	11bd8 <parse_ubx+0x26c>
  {
    ubx_msg_buf[ubx_msg_idx] = c;
   11b74:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11b78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b7c:	781b      	ldrb	r3, [r3, #0]
   11b7e:	461a      	mov	r2, r3
   11b80:	f24c 63e0 	movw	r3, #50912	; 0xc6e0
   11b84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b88:	79f9      	ldrb	r1, [r7, #7]
   11b8a:	5499      	strb	r1, [r3, r2]
    ubx_msg_idx++;
   11b8c:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11b94:	781b      	ldrb	r3, [r3, #0]
   11b96:	3301      	adds	r3, #1
   11b98:	b2da      	uxtb	r2, r3
   11b9a:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11b9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ba2:	701a      	strb	r2, [r3, #0]
    if (ubx_msg_idx >= ubx_len) {
   11ba4:	f24c 73e2 	movw	r3, #51170	; 0xc7e2
   11ba8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bac:	781b      	ldrb	r3, [r3, #0]
   11bae:	461a      	mov	r2, r3
   11bb0:	f24c 73e0 	movw	r3, #51168	; 0xc7e0
   11bb4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bb8:	881b      	ldrh	r3, [r3, #0]
   11bba:	429a      	cmp	r2, r3
   11bbc:	d340      	bcc.n	11c40 <parse_ubx+0x2d4>
      ubx_status++;
   11bbe:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11bc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bc6:	781b      	ldrb	r3, [r3, #0]
   11bc8:	3301      	adds	r3, #1
   11bca:	b2da      	uxtb	r2, r3
   11bcc:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11bd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bd4:	701a      	strb	r2, [r3, #0]
    gps_msg_received = TRUE;
    goto restart;
  }
  else {}
//#endif
  return;
   11bd6:	e03b      	b.n	11c50 <parse_ubx+0x2e4>
    ubx_msg_idx++;
    if (ubx_msg_idx >= ubx_len) {
      ubx_status++;
    }
  }
  else if (ubx_status == GOT_PAYLOAD)
   11bd8:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11bdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11be0:	781b      	ldrb	r3, [r3, #0]
   11be2:	2b07      	cmp	r3, #7
   11be4:	d115      	bne.n	11c12 <parse_ubx+0x2a6>
  {
    if (c != ck_a)
   11be6:	f24c 73e3 	movw	r3, #51171	; 0xc7e3
   11bea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11bee:	781b      	ldrb	r3, [r3, #0]
   11bf0:	79fa      	ldrb	r2, [r7, #7]
   11bf2:	429a      	cmp	r2, r3
   11bf4:	d000      	beq.n	11bf8 <parse_ubx+0x28c>
      goto error;
   11bf6:	e024      	b.n	11c42 <parse_ubx+0x2d6>
    ubx_status++;
   11bf8:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11bfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c00:	781b      	ldrb	r3, [r3, #0]
   11c02:	3301      	adds	r3, #1
   11c04:	b2da      	uxtb	r2, r3
   11c06:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c0e:	701a      	strb	r2, [r3, #0]
   11c10:	e016      	b.n	11c40 <parse_ubx+0x2d4>
  }
  else if (ubx_status == GOT_CHECKSUM1)
   11c12:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c16:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c1a:	781b      	ldrb	r3, [r3, #0]
   11c1c:	2b08      	cmp	r3, #8
   11c1e:	d10f      	bne.n	11c40 <parse_ubx+0x2d4>
  {
    if (c != ck_b)
   11c20:	f24c 73e4 	movw	r3, #51172	; 0xc7e4
   11c24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c28:	781b      	ldrb	r3, [r3, #0]
   11c2a:	79fa      	ldrb	r2, [r7, #7]
   11c2c:	429a      	cmp	r2, r3
   11c2e:	d000      	beq.n	11c32 <parse_ubx+0x2c6>
      goto error;
   11c30:	e007      	b.n	11c42 <parse_ubx+0x2d6>
    gps_msg_received = TRUE;
   11c32:	f24c 63dd 	movw	r3, #50909	; 0xc6dd
   11c36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c3a:	2201      	movs	r2, #1
   11c3c:	701a      	strb	r2, [r3, #0]
    goto restart;
   11c3e:	e000      	b.n	11c42 <parse_ubx+0x2d6>
  }
  else {}
//#endif
  return;
   11c40:	e006      	b.n	11c50 <parse_ubx+0x2e4>
 error:  
 restart:
  ubx_status = UNINIT;
   11c42:	f24c 73df 	movw	r3, #51167	; 0xc7df
   11c46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11c4a:	2200      	movs	r2, #0
   11c4c:	701a      	strb	r2, [r3, #0]
  return;
   11c4e:	bf00      	nop
}
   11c50:	370c      	adds	r7, #12
   11c52:	46bd      	mov	sp, r7
   11c54:	f85d 7b04 	ldr.w	r7, [sp], #4
   11c58:	4770      	bx	lr
   11c5a:	bf00      	nop

00011c5c <__vector_30>:

#ifdef SIMUL
ReceiveUart0(parse_ubx);
#else
ReceiveUart1(parse_ubx);
   11c5c:	b580      	push	{r7, lr}
   11c5e:	b082      	sub	sp, #8
   11c60:	af00      	add	r7, sp, #0
   11c62:	f242 039c 	movw	r3, #8348	; 0x209c
   11c66:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c6a:	781b      	ldrb	r3, [r3, #0]
   11c6c:	71fb      	strb	r3, [r7, #7]
   11c6e:	79fb      	ldrb	r3, [r7, #7]
   11c70:	4618      	mov	r0, r3
   11c72:	f7ff fe7b 	bl	1196c <parse_ubx>
   11c76:	3708      	adds	r7, #8
   11c78:	46bd      	mov	sp, r7
   11c7a:	bd80      	pop	{r7, pc}
   11c7c:	f3af 8000 	nop.w

00011c80 <ir_init>:
float ir_rad_of_ir = IR_RAD_OF_IR_CONTRAST / IR_DEFAULT_CONTRAST;

static struct adc_buf buf_ir1;
static struct adc_buf buf_ir2;

void ir_init(void) {
   11c80:	b580      	push	{r7, lr}
   11c82:	af00      	add	r7, sp, #0
  RadOfIrFromConstrast(IR_DEFAULT_CONTRAST);
   11c84:	f240 5348 	movw	r3, #1352	; 0x548
   11c88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11c8c:	f24c 228f 	movw	r2, #49807	; 0xc28f
   11c90:	f6c3 3275 	movt	r2, #15221	; 0x3b75
   11c94:	601a      	str	r2, [r3, #0]
  adc_buf_channel(ADC_CHANNEL_IR1, &buf_ir1);
   11c96:	2001      	movs	r0, #1
   11c98:	f24c 71ec 	movw	r1, #51180	; 0xc7ec
   11c9c:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11ca0:	f7ff fc82 	bl	115a8 <adc_buf_channel>
  adc_buf_channel(ADC_CHANNEL_IR2, &buf_ir2);
   11ca4:	2002      	movs	r0, #2
   11ca6:	f64c 0130 	movw	r1, #51248	; 0xc830
   11caa:	f2c2 0104 	movt	r1, #8196	; 0x2004
   11cae:	f7ff fc7b 	bl	115a8 <adc_buf_channel>
}
   11cb2:	bd80      	pop	{r7, pc}

00011cb4 <ir_update>:
int16_t x1 = 1;
int16_t x2 = 2;
*/
// end

void ir_update(void) {
   11cb4:	b480      	push	{r7}
   11cb6:	b083      	sub	sp, #12
   11cb8:	af00      	add	r7, sp, #0
#ifndef SIMUL
  int16_t x1_mean = buf_ir1.sum/AV_NB_SAMPLE;
   11cba:	f24c 73ec 	movw	r3, #51180	; 0xc7ec
   11cbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cc2:	881b      	ldrh	r3, [r3, #0]
   11cc4:	095b      	lsrs	r3, r3, #5
   11cc6:	b29b      	uxth	r3, r3
   11cc8:	80fb      	strh	r3, [r7, #6]
  int16_t x2_mean = buf_ir2.sum/AV_NB_SAMPLE;
   11cca:	f64c 0330 	movw	r3, #51248	; 0xc830
   11cce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11cd2:	881b      	ldrh	r3, [r3, #0]
   11cd4:	095b      	lsrs	r3, r3, #5
   11cd6:	b29b      	uxth	r3, r3
   11cd8:	80bb      	strh	r3, [r7, #4]
    if( x1 < -900 ) x1 = x2 % x1;
    x2_mean = x2 ++;
    if( x2 > 110 ) x2 = x1 % x2;
    */
    // end
  ir_roll = IR_RollOfIrs(x1_mean, x2_mean) - ir_roll_neutral;
   11cda:	88fb      	ldrh	r3, [r7, #6]
   11cdc:	425b      	negs	r3, r3
   11cde:	b29a      	uxth	r2, r3
   11ce0:	88bb      	ldrh	r3, [r7, #4]
   11ce2:	1ad3      	subs	r3, r2, r3
   11ce4:	b29a      	uxth	r2, r3
   11ce6:	f240 5342 	movw	r3, #1346	; 0x542
   11cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11cee:	881b      	ldrh	r3, [r3, #0]
   11cf0:	b29b      	uxth	r3, r3
   11cf2:	1ad3      	subs	r3, r2, r3
   11cf4:	b29b      	uxth	r3, r3
   11cf6:	b29a      	uxth	r2, r3
   11cf8:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   11cfc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d00:	801a      	strh	r2, [r3, #0]
  ir_pitch = IR_PitchOfIrs(x1_mean, x2_mean) - ir_pitch_neutral;
   11d02:	88ba      	ldrh	r2, [r7, #4]
   11d04:	88fb      	ldrh	r3, [r7, #6]
   11d06:	1ad3      	subs	r3, r2, r3
   11d08:	b29a      	uxth	r2, r3
   11d0a:	f240 5344 	movw	r3, #1348	; 0x544
   11d0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d12:	881b      	ldrh	r3, [r3, #0]
   11d14:	b29b      	uxth	r3, r3
   11d16:	1ad3      	subs	r3, r2, r3
   11d18:	b29b      	uxth	r3, r3
   11d1a:	b29a      	uxth	r2, r3
   11d1c:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
   11d20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d24:	801a      	strh	r2, [r3, #0]
#else
  extern volatile int16_t simul_ir_roll, simul_ir_pitch;
  ir_roll = simul_ir_roll -  ir_roll_neutral; 
  ir_pitch = simul_ir_pitch - ir_pitch_neutral;  
#endif
}
   11d26:	370c      	adds	r7, #12
   11d28:	46bd      	mov	sp, r7
   11d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
   11d2e:	4770      	bx	lr

00011d30 <ir_gain_calib>:

/* 
   Contrast measurement
*/

void ir_gain_calib(void) {      // Plane nose down
   11d30:	b580      	push	{r7, lr}
   11d32:	af00      	add	r7, sp, #0
  /* plane nose down -> negativ value */
  ir_contrast = - ir_pitch;
   11d34:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
   11d38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d3c:	881b      	ldrh	r3, [r3, #0]
   11d3e:	b29b      	uxth	r3, r3
   11d40:	425b      	negs	r3, r3
   11d42:	b29b      	uxth	r3, r3
   11d44:	b29a      	uxth	r2, r3
   11d46:	f240 5340 	movw	r3, #1344	; 0x540
   11d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d4e:	801a      	strh	r2, [r3, #0]
  RadOfIrFromConstrast(ir_contrast);
   11d50:	f240 5340 	movw	r3, #1344	; 0x540
   11d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d58:	881b      	ldrh	r3, [r3, #0]
   11d5a:	b21b      	sxth	r3, r3
   11d5c:	4618      	mov	r0, r3
   11d5e:	f005 fedb 	bl	17b18 <__aeabi_i2d>
   11d62:	4602      	mov	r2, r0
   11d64:	460b      	mov	r3, r1
   11d66:	f04f 0000 	mov.w	r0, #0
   11d6a:	f04f 0100 	mov.w	r1, #0
   11d6e:	f6c3 71e8 	movt	r1, #16360	; 0x3fe8
   11d72:	f006 f861 	bl	17e38 <__aeabi_ddiv>
   11d76:	4602      	mov	r2, r0
   11d78:	460b      	mov	r3, r1
   11d7a:	4610      	mov	r0, r2
   11d7c:	4619      	mov	r1, r3
   11d7e:	f006 fa13 	bl	181a8 <__aeabi_d2f>
   11d82:	4602      	mov	r2, r0
   11d84:	f240 5348 	movw	r3, #1352	; 0x548
   11d88:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11d8c:	601a      	str	r2, [r3, #0]
}
   11d8e:	bd80      	pop	{r7, pc}

00011d90 <roll_pitch_pid_run>:
float pitch_of_vz_pgain = CLIMB_PITCH_OF_VZ_PGAIN;
float pitch_of_vz = 0.;


/** \brief Computes ::desired_aileron and ::desired_elevator from attitude estimation and expected attitude. */
void roll_pitch_pid_run( void ) {
   11d90:	b590      	push	{r4, r7, lr}
   11d92:	b083      	sub	sp, #12
   11d94:	af00      	add	r7, sp, #0
  float err =  estimator_phi - desired_roll;
   11d96:	f64c 3308 	movw	r3, #51976	; 0xcb08
   11d9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11d9e:	681a      	ldr	r2, [r3, #0]
   11da0:	f64c 0374 	movw	r3, #51316	; 0xc874
   11da4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11da8:	681b      	ldr	r3, [r3, #0]
   11daa:	4610      	mov	r0, r2
   11dac:	4619      	mov	r1, r3
   11dae:	f006 fa4f 	bl	18250 <__aeabi_fsub>
   11db2:	4603      	mov	r3, r0
   11db4:	607b      	str	r3, [r7, #4]
  desired_aileron = TRIM_PPRZ(roll_pgain * err);
   11db6:	f240 534c 	movw	r3, #1356	; 0x54c
   11dba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dbe:	681b      	ldr	r3, [r3, #0]
   11dc0:	4618      	mov	r0, r3
   11dc2:	6879      	ldr	r1, [r7, #4]
   11dc4:	f006 fb4e 	bl	18464 <__aeabi_fmul>
   11dc8:	4603      	mov	r3, r0
   11dca:	4618      	mov	r0, r3
   11dcc:	f04f 0100 	mov.w	r1, #0
   11dd0:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11dd4:	f006 fce4 	bl	187a0 <__aeabi_fcmplt>
   11dd8:	4603      	mov	r3, r0
   11dda:	2b00      	cmp	r3, #0
   11ddc:	d002      	beq.n	11de4 <roll_pitch_pid_run+0x54>
   11dde:	f64d 2280 	movw	r2, #55936	; 0xda80
   11de2:	e026      	b.n	11e32 <roll_pitch_pid_run+0xa2>
   11de4:	f240 534c 	movw	r3, #1356	; 0x54c
   11de8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11dec:	681b      	ldr	r3, [r3, #0]
   11dee:	4618      	mov	r0, r3
   11df0:	6879      	ldr	r1, [r7, #4]
   11df2:	f006 fb37 	bl	18464 <__aeabi_fmul>
   11df6:	4603      	mov	r3, r0
   11df8:	4618      	mov	r0, r3
   11dfa:	f04f 0100 	mov.w	r1, #0
   11dfe:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11e02:	f006 fceb 	bl	187dc <__aeabi_fcmpgt>
   11e06:	4603      	mov	r3, r0
   11e08:	2b00      	cmp	r3, #0
   11e0a:	d002      	beq.n	11e12 <roll_pitch_pid_run+0x82>
   11e0c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11e10:	e00e      	b.n	11e30 <roll_pitch_pid_run+0xa0>
   11e12:	f240 534c 	movw	r3, #1356	; 0x54c
   11e16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e1a:	681b      	ldr	r3, [r3, #0]
   11e1c:	4618      	mov	r0, r3
   11e1e:	6879      	ldr	r1, [r7, #4]
   11e20:	f006 fb20 	bl	18464 <__aeabi_fmul>
   11e24:	4603      	mov	r3, r0
   11e26:	4618      	mov	r0, r3
   11e28:	f006 fce2 	bl	187f0 <__aeabi_f2iz>
   11e2c:	4603      	mov	r3, r0
   11e2e:	b29b      	uxth	r3, r3
   11e30:	b29a      	uxth	r2, r3
   11e32:	f64c 037e 	movw	r3, #51326	; 0xc87e
   11e36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e3a:	801a      	strh	r2, [r3, #0]
  if (pitch_of_roll <0.)
   11e3c:	f64c 0384 	movw	r3, #51332	; 0xc884
   11e40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e44:	681b      	ldr	r3, [r3, #0]
   11e46:	4618      	mov	r0, r3
   11e48:	f04f 0100 	mov.w	r1, #0
   11e4c:	f006 fca8 	bl	187a0 <__aeabi_fcmplt>
   11e50:	4603      	mov	r3, r0
   11e52:	2b00      	cmp	r3, #0
   11e54:	d006      	beq.n	11e64 <roll_pitch_pid_run+0xd4>
    pitch_of_roll = 0.;
   11e56:	f64c 0384 	movw	r3, #51332	; 0xc884
   11e5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e5e:	f04f 0200 	mov.w	r2, #0
   11e62:	601a      	str	r2, [r3, #0]
  err = -(estimator_theta - desired_pitch - pitch_of_roll * fabs(estimator_phi));
   11e64:	f64c 3310 	movw	r3, #51984	; 0xcb10
   11e68:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e6c:	681a      	ldr	r2, [r3, #0]
   11e6e:	f64c 0378 	movw	r3, #51320	; 0xc878
   11e72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e76:	681b      	ldr	r3, [r3, #0]
   11e78:	4610      	mov	r0, r2
   11e7a:	4619      	mov	r1, r3
   11e7c:	f006 f9e8 	bl	18250 <__aeabi_fsub>
   11e80:	4603      	mov	r3, r0
   11e82:	461c      	mov	r4, r3
   11e84:	f64c 3308 	movw	r3, #51976	; 0xcb08
   11e88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11e8c:	681b      	ldr	r3, [r3, #0]
   11e8e:	4618      	mov	r0, r3
   11e90:	f04f 0100 	mov.w	r1, #0
   11e94:	f006 fc84 	bl	187a0 <__aeabi_fcmplt>
   11e98:	4603      	mov	r3, r0
   11e9a:	2b00      	cmp	r3, #0
   11e9c:	d007      	beq.n	11eae <roll_pitch_pid_run+0x11e>
   11e9e:	f64c 3308 	movw	r3, #51976	; 0xcb08
   11ea2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ea6:	681b      	ldr	r3, [r3, #0]
   11ea8:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   11eac:	e004      	b.n	11eb8 <roll_pitch_pid_run+0x128>
   11eae:	f64c 3308 	movw	r3, #51976	; 0xcb08
   11eb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11eb6:	681a      	ldr	r2, [r3, #0]
   11eb8:	f64c 0384 	movw	r3, #51332	; 0xc884
   11ebc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11ec0:	681b      	ldr	r3, [r3, #0]
   11ec2:	4610      	mov	r0, r2
   11ec4:	4619      	mov	r1, r3
   11ec6:	f006 facd 	bl	18464 <__aeabi_fmul>
   11eca:	4603      	mov	r3, r0
   11ecc:	4620      	mov	r0, r4
   11ece:	4619      	mov	r1, r3
   11ed0:	f006 f9be 	bl	18250 <__aeabi_fsub>
   11ed4:	4603      	mov	r3, r0
   11ed6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   11eda:	607b      	str	r3, [r7, #4]
  desired_elevator = TRIM_PPRZ(pitch_pgain * err);
   11edc:	f240 5350 	movw	r3, #1360	; 0x550
   11ee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11ee4:	681b      	ldr	r3, [r3, #0]
   11ee6:	4618      	mov	r0, r3
   11ee8:	6879      	ldr	r1, [r7, #4]
   11eea:	f006 fabb 	bl	18464 <__aeabi_fmul>
   11eee:	4603      	mov	r3, r0
   11ef0:	4618      	mov	r0, r3
   11ef2:	f04f 0100 	mov.w	r1, #0
   11ef6:	f2cc 6116 	movt	r1, #50710	; 0xc616
   11efa:	f006 fc51 	bl	187a0 <__aeabi_fcmplt>
   11efe:	4603      	mov	r3, r0
   11f00:	2b00      	cmp	r3, #0
   11f02:	d002      	beq.n	11f0a <roll_pitch_pid_run+0x17a>
   11f04:	f64d 2280 	movw	r2, #55936	; 0xda80
   11f08:	e026      	b.n	11f58 <roll_pitch_pid_run+0x1c8>
   11f0a:	f240 5350 	movw	r3, #1360	; 0x550
   11f0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f12:	681b      	ldr	r3, [r3, #0]
   11f14:	4618      	mov	r0, r3
   11f16:	6879      	ldr	r1, [r7, #4]
   11f18:	f006 faa4 	bl	18464 <__aeabi_fmul>
   11f1c:	4603      	mov	r3, r0
   11f1e:	4618      	mov	r0, r3
   11f20:	f04f 0100 	mov.w	r1, #0
   11f24:	f2c4 6116 	movt	r1, #17942	; 0x4616
   11f28:	f006 fc58 	bl	187dc <__aeabi_fcmpgt>
   11f2c:	4603      	mov	r3, r0
   11f2e:	2b00      	cmp	r3, #0
   11f30:	d002      	beq.n	11f38 <roll_pitch_pid_run+0x1a8>
   11f32:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   11f36:	e00e      	b.n	11f56 <roll_pitch_pid_run+0x1c6>
   11f38:	f240 5350 	movw	r3, #1360	; 0x550
   11f3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11f40:	681b      	ldr	r3, [r3, #0]
   11f42:	4618      	mov	r0, r3
   11f44:	6879      	ldr	r1, [r7, #4]
   11f46:	f006 fa8d 	bl	18464 <__aeabi_fmul>
   11f4a:	4603      	mov	r3, r0
   11f4c:	4618      	mov	r0, r3
   11f4e:	f006 fc4f 	bl	187f0 <__aeabi_f2iz>
   11f52:	4603      	mov	r3, r0
   11f54:	b29b      	uxth	r3, r3
   11f56:	b29a      	uxth	r2, r3
   11f58:	f64c 0380 	movw	r3, #51328	; 0xc880
   11f5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f60:	801a      	strh	r2, [r3, #0]
}
   11f62:	370c      	adds	r7, #12
   11f64:	46bd      	mov	sp, r7
   11f66:	bd90      	pop	{r4, r7, pc}

00011f68 <course_pid_run>:

float course_pgain = COURSE_PGAIN;
float desired_course = 0.;
float max_roll = MAX_ROLL;

void course_pid_run( void ) {
   11f68:	b580      	push	{r7, lr}
   11f6a:	b082      	sub	sp, #8
   11f6c:	af00      	add	r7, sp, #0
  float err = estimator_hspeed_dir - desired_course;
   11f6e:	f64c 3338 	movw	r3, #52024	; 0xcb38
   11f72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f76:	681a      	ldr	r2, [r3, #0]
   11f78:	f64c 038c 	movw	r3, #51340	; 0xc88c
   11f7c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   11f80:	681b      	ldr	r3, [r3, #0]
   11f82:	4610      	mov	r0, r2
   11f84:	4619      	mov	r1, r3
   11f86:	f006 f963 	bl	18250 <__aeabi_fsub>
   11f8a:	4603      	mov	r3, r0
   11f8c:	607b      	str	r3, [r7, #4]
  NORM_RAD_ANGLE(err);
   11f8e:	e013      	b.n	11fb8 <course_pid_run+0x50>
   11f90:	6878      	ldr	r0, [r7, #4]
   11f92:	f005 fdd3 	bl	17b3c <__aeabi_f2d>
   11f96:	4602      	mov	r2, r0
   11f98:	460b      	mov	r3, r1
   11f9a:	4610      	mov	r0, r2
   11f9c:	4619      	mov	r1, r3
   11f9e:	a348      	add	r3, pc, #288	; (adr r3, 120c0 <course_pid_run+0x158>)
   11fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
   11fa4:	f005 fc6a 	bl	1787c <__aeabi_dsub>
   11fa8:	4602      	mov	r2, r0
   11faa:	460b      	mov	r3, r1
   11fac:	4610      	mov	r0, r2
   11fae:	4619      	mov	r1, r3
   11fb0:	f006 f8fa 	bl	181a8 <__aeabi_d2f>
   11fb4:	4603      	mov	r3, r0
   11fb6:	607b      	str	r3, [r7, #4]
   11fb8:	6878      	ldr	r0, [r7, #4]
   11fba:	f005 fdbf 	bl	17b3c <__aeabi_f2d>
   11fbe:	4602      	mov	r2, r0
   11fc0:	460b      	mov	r3, r1
   11fc2:	4610      	mov	r0, r2
   11fc4:	4619      	mov	r1, r3
   11fc6:	a340      	add	r3, pc, #256	; (adr r3, 120c8 <course_pid_run+0x160>)
   11fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
   11fcc:	f006 f89a 	bl	18104 <__aeabi_dcmpgt>
   11fd0:	4603      	mov	r3, r0
   11fd2:	2b00      	cmp	r3, #0
   11fd4:	d1dc      	bne.n	11f90 <course_pid_run+0x28>
   11fd6:	e013      	b.n	12000 <course_pid_run+0x98>
   11fd8:	6878      	ldr	r0, [r7, #4]
   11fda:	f005 fdaf 	bl	17b3c <__aeabi_f2d>
   11fde:	4602      	mov	r2, r0
   11fe0:	460b      	mov	r3, r1
   11fe2:	4610      	mov	r0, r2
   11fe4:	4619      	mov	r1, r3
   11fe6:	a336      	add	r3, pc, #216	; (adr r3, 120c0 <course_pid_run+0x158>)
   11fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
   11fec:	f005 fc48 	bl	17880 <__adddf3>
   11ff0:	4602      	mov	r2, r0
   11ff2:	460b      	mov	r3, r1
   11ff4:	4610      	mov	r0, r2
   11ff6:	4619      	mov	r1, r3
   11ff8:	f006 f8d6 	bl	181a8 <__aeabi_d2f>
   11ffc:	4603      	mov	r3, r0
   11ffe:	607b      	str	r3, [r7, #4]
   12000:	6878      	ldr	r0, [r7, #4]
   12002:	f005 fd9b 	bl	17b3c <__aeabi_f2d>
   12006:	4602      	mov	r2, r0
   12008:	460b      	mov	r3, r1
   1200a:	4610      	mov	r0, r2
   1200c:	4619      	mov	r1, r3
   1200e:	a330      	add	r3, pc, #192	; (adr r3, 120d0 <course_pid_run+0x168>)
   12010:	e9d3 2300 	ldrd	r2, r3, [r3]
   12014:	f006 f858 	bl	180c8 <__aeabi_dcmplt>
   12018:	4603      	mov	r3, r0
   1201a:	2b00      	cmp	r3, #0
   1201c:	d1dc      	bne.n	11fd8 <course_pid_run+0x70>
  nav_desired_roll = course_pgain * err; //  * fspeed / AIR_SPEED;
   1201e:	f240 5358 	movw	r3, #1368	; 0x558
   12022:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12026:	681b      	ldr	r3, [r3, #0]
   12028:	4618      	mov	r0, r3
   1202a:	6879      	ldr	r1, [r7, #4]
   1202c:	f006 fa1a 	bl	18464 <__aeabi_fmul>
   12030:	4603      	mov	r3, r0
   12032:	461a      	mov	r2, r3
   12034:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12038:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1203c:	601a      	str	r2, [r3, #0]
  if (nav_desired_roll > max_roll)
   1203e:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12042:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12046:	681a      	ldr	r2, [r3, #0]
   12048:	f240 535c 	movw	r3, #1372	; 0x55c
   1204c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12050:	681b      	ldr	r3, [r3, #0]
   12052:	4610      	mov	r0, r2
   12054:	4619      	mov	r1, r3
   12056:	f006 fbc1 	bl	187dc <__aeabi_fcmpgt>
   1205a:	4603      	mov	r3, r0
   1205c:	2b00      	cmp	r3, #0
   1205e:	d00a      	beq.n	12076 <course_pid_run+0x10e>
    nav_desired_roll = max_roll;
   12060:	f240 535c 	movw	r3, #1372	; 0x55c
   12064:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12068:	681a      	ldr	r2, [r3, #0]
   1206a:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   1206e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12072:	601a      	str	r2, [r3, #0]
   12074:	e01e      	b.n	120b4 <course_pid_run+0x14c>
  else if (nav_desired_roll < -max_roll)
   12076:	f240 535c 	movw	r3, #1372	; 0x55c
   1207a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1207e:	681b      	ldr	r3, [r3, #0]
   12080:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   12084:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   12088:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1208c:	681b      	ldr	r3, [r3, #0]
   1208e:	4610      	mov	r0, r2
   12090:	4619      	mov	r1, r3
   12092:	f006 fba3 	bl	187dc <__aeabi_fcmpgt>
   12096:	4603      	mov	r3, r0
   12098:	2b00      	cmp	r3, #0
   1209a:	d00b      	beq.n	120b4 <course_pid_run+0x14c>
    nav_desired_roll = -max_roll;
   1209c:	f240 535c 	movw	r3, #1372	; 0x55c
   120a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   120a4:	681b      	ldr	r3, [r3, #0]
   120a6:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   120aa:	f64c 03d0 	movw	r3, #51408	; 0xc8d0
   120ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120b2:	601a      	str	r2, [r3, #0]
}
   120b4:	3708      	adds	r7, #8
   120b6:	46bd      	mov	sp, r7
   120b8:	bd80      	pop	{r7, pc}
   120ba:	bf00      	nop
   120bc:	f3af 8000 	nop.w
   120c0:	54442d18 	.word	0x54442d18
   120c4:	401921fb 	.word	0x401921fb
   120c8:	54442d18 	.word	0x54442d18
   120cc:	400921fb 	.word	0x400921fb
   120d0:	54442d18 	.word	0x54442d18
   120d4:	c00921fb 	.word	0xc00921fb

000120d8 <climb_pid_run>:

#define MAX_CLIMB_SUM_ERR 100
#define MAX_PITCH_CLIMB_SUM_ERR 100

/** \brief Computes desired_gaz and desired_pitch from desired_climb */
void climb_pid_run ( void ) {
   120d8:	b5b0      	push	{r4, r5, r7, lr}
   120da:	b082      	sub	sp, #8
   120dc:	af00      	add	r7, sp, #0
  float err  = estimator_z_dot - desired_climb;
   120de:	f64c 331c 	movw	r3, #51996	; 0xcb1c
   120e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120e6:	681a      	ldr	r2, [r3, #0]
   120e8:	f64c 0390 	movw	r3, #51344	; 0xc890
   120ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   120f0:	681b      	ldr	r3, [r3, #0]
   120f2:	4610      	mov	r0, r2
   120f4:	4619      	mov	r1, r3
   120f6:	f006 f8ab 	bl	18250 <__aeabi_fsub>
   120fa:	4603      	mov	r3, r0
   120fc:	607b      	str	r3, [r7, #4]
  float fgaz;
  if (auto_pitch) { /* gaz constant */
   120fe:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12102:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12106:	781b      	ldrb	r3, [r3, #0]
   12108:	2b00      	cmp	r3, #0
   1210a:	f000 80a8 	beq.w	1225e <climb_pid_run+0x186>
    desired_gaz = nav_desired_gaz;
   1210e:	f64c 03c8 	movw	r3, #51400	; 0xc8c8
   12112:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12116:	881b      	ldrh	r3, [r3, #0]
   12118:	b29a      	uxth	r2, r3
   1211a:	f64c 037c 	movw	r3, #51324	; 0xc87c
   1211e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12122:	801a      	strh	r2, [r3, #0]
    desired_pitch = climb_pitch_pgain * (err + climb_pitch_igain * climb_pitch_sum_err);
   12124:	f240 5364 	movw	r3, #1380	; 0x564
   12128:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1212c:	681a      	ldr	r2, [r3, #0]
   1212e:	f64c 039c 	movw	r3, #51356	; 0xc89c
   12132:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12136:	681b      	ldr	r3, [r3, #0]
   12138:	4610      	mov	r0, r2
   1213a:	4619      	mov	r1, r3
   1213c:	f006 f992 	bl	18464 <__aeabi_fmul>
   12140:	4603      	mov	r3, r0
   12142:	4618      	mov	r0, r3
   12144:	6879      	ldr	r1, [r7, #4]
   12146:	f006 f885 	bl	18254 <__addsf3>
   1214a:	4603      	mov	r3, r0
   1214c:	461a      	mov	r2, r3
   1214e:	f240 5360 	movw	r3, #1376	; 0x560
   12152:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12156:	681b      	ldr	r3, [r3, #0]
   12158:	4610      	mov	r0, r2
   1215a:	4619      	mov	r1, r3
   1215c:	f006 f982 	bl	18464 <__aeabi_fmul>
   12160:	4603      	mov	r3, r0
   12162:	461a      	mov	r2, r3
   12164:	f64c 0378 	movw	r3, #51320	; 0xc878
   12168:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1216c:	601a      	str	r2, [r3, #0]
    if (desired_pitch > max_pitch)
   1216e:	f64c 0378 	movw	r3, #51320	; 0xc878
   12172:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12176:	681a      	ldr	r2, [r3, #0]
   12178:	f240 5368 	movw	r3, #1384	; 0x568
   1217c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12180:	681b      	ldr	r3, [r3, #0]
   12182:	4610      	mov	r0, r2
   12184:	4619      	mov	r1, r3
   12186:	f006 fb29 	bl	187dc <__aeabi_fcmpgt>
   1218a:	4603      	mov	r3, r0
   1218c:	2b00      	cmp	r3, #0
   1218e:	d009      	beq.n	121a4 <climb_pid_run+0xcc>
      desired_pitch = max_pitch;
   12190:	f240 5368 	movw	r3, #1384	; 0x568
   12194:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12198:	681a      	ldr	r2, [r3, #0]
   1219a:	f64c 0378 	movw	r3, #51320	; 0xc878
   1219e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121a2:	601a      	str	r2, [r3, #0]
    if (desired_pitch < min_pitch)
   121a4:	f64c 0378 	movw	r3, #51320	; 0xc878
   121a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121ac:	681a      	ldr	r2, [r3, #0]
   121ae:	f240 536c 	movw	r3, #1388	; 0x56c
   121b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121b6:	681b      	ldr	r3, [r3, #0]
   121b8:	4610      	mov	r0, r2
   121ba:	4619      	mov	r1, r3
   121bc:	f006 faf0 	bl	187a0 <__aeabi_fcmplt>
   121c0:	4603      	mov	r3, r0
   121c2:	2b00      	cmp	r3, #0
   121c4:	d009      	beq.n	121da <climb_pid_run+0x102>
      desired_pitch = min_pitch;
   121c6:	f240 536c 	movw	r3, #1388	; 0x56c
   121ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
   121ce:	681a      	ldr	r2, [r3, #0]
   121d0:	f64c 0378 	movw	r3, #51320	; 0xc878
   121d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121d8:	601a      	str	r2, [r3, #0]
    climb_pitch_sum_err += err;
   121da:	f64c 039c 	movw	r3, #51356	; 0xc89c
   121de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121e2:	681b      	ldr	r3, [r3, #0]
   121e4:	4618      	mov	r0, r3
   121e6:	6879      	ldr	r1, [r7, #4]
   121e8:	f006 f834 	bl	18254 <__addsf3>
   121ec:	4603      	mov	r3, r0
   121ee:	461a      	mov	r2, r3
   121f0:	f64c 039c 	movw	r3, #51356	; 0xc89c
   121f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   121f8:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err > MAX_PITCH_CLIMB_SUM_ERR)
   121fa:	f64c 039c 	movw	r3, #51356	; 0xc89c
   121fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12202:	681b      	ldr	r3, [r3, #0]
   12204:	4618      	mov	r0, r3
   12206:	f04f 0100 	mov.w	r1, #0
   1220a:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   1220e:	f006 fae5 	bl	187dc <__aeabi_fcmpgt>
   12212:	4603      	mov	r3, r0
   12214:	2b00      	cmp	r3, #0
   12216:	d008      	beq.n	1222a <climb_pid_run+0x152>
      climb_pitch_sum_err = MAX_PITCH_CLIMB_SUM_ERR;
   12218:	f64c 039c 	movw	r3, #51356	; 0xc89c
   1221c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12220:	f04f 0200 	mov.w	r2, #0
   12224:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   12228:	601a      	str	r2, [r3, #0]
    if (climb_pitch_sum_err < - MAX_PITCH_CLIMB_SUM_ERR)
   1222a:	f64c 039c 	movw	r3, #51356	; 0xc89c
   1222e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12232:	681b      	ldr	r3, [r3, #0]
   12234:	4618      	mov	r0, r3
   12236:	f04f 0100 	mov.w	r1, #0
   1223a:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   1223e:	f006 faaf 	bl	187a0 <__aeabi_fcmplt>
   12242:	4603      	mov	r3, r0
   12244:	2b00      	cmp	r3, #0
   12246:	d100      	bne.n	1224a <climb_pid_run+0x172>
   12248:	e109      	b.n	1245e <climb_pid_run+0x386>
      climb_pitch_sum_err = - MAX_PITCH_CLIMB_SUM_ERR; 
   1224a:	f64c 039c 	movw	r3, #51356	; 0xc89c
   1224e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12252:	f04f 0200 	mov.w	r2, #0
   12256:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   1225a:	601a      	str	r2, [r3, #0]
   1225c:	e0ff      	b.n	1245e <climb_pid_run+0x386>
  } else { /* pitch almost constant */
    /* pitch offset for climb */
    pitch_of_vz = (desired_climb > 0) ? desired_climb * pitch_of_vz_pgain : 0.;
   1225e:	f64c 0390 	movw	r3, #51344	; 0xc890
   12262:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12266:	681b      	ldr	r3, [r3, #0]
   12268:	4618      	mov	r0, r3
   1226a:	f04f 0100 	mov.w	r1, #0
   1226e:	f006 fab5 	bl	187dc <__aeabi_fcmpgt>
   12272:	4603      	mov	r3, r0
   12274:	2b00      	cmp	r3, #0
   12276:	d010      	beq.n	1229a <climb_pid_run+0x1c2>
   12278:	f64c 0390 	movw	r3, #51344	; 0xc890
   1227c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12280:	681a      	ldr	r2, [r3, #0]
   12282:	f240 5354 	movw	r3, #1364	; 0x554
   12286:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1228a:	681b      	ldr	r3, [r3, #0]
   1228c:	4610      	mov	r0, r2
   1228e:	4619      	mov	r1, r3
   12290:	f006 f8e8 	bl	18464 <__aeabi_fmul>
   12294:	4603      	mov	r3, r0
   12296:	461a      	mov	r2, r3
   12298:	e001      	b.n	1229e <climb_pid_run+0x1c6>
   1229a:	f04f 0200 	mov.w	r2, #0
   1229e:	f64c 0388 	movw	r3, #51336	; 0xc888
   122a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122a6:	601a      	str	r2, [r3, #0]
    fgaz = climb_pgain * (err + climb_igain * climb_sum_err) + CLIMB_LEVEL_GAZ + CLIMB_GAZ_OF_CLIMB*desired_climb;
   122a8:	f64c 42cd 	movw	r2, #52429	; 0xcccd
   122ac:	f6c3 52cc 	movt	r2, #15820	; 0x3dcc
   122b0:	f64c 0398 	movw	r3, #51352	; 0xc898
   122b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   122b8:	681b      	ldr	r3, [r3, #0]
   122ba:	4610      	mov	r0, r2
   122bc:	4619      	mov	r1, r3
   122be:	f006 f8d1 	bl	18464 <__aeabi_fmul>
   122c2:	4603      	mov	r3, r0
   122c4:	4618      	mov	r0, r3
   122c6:	6879      	ldr	r1, [r7, #4]
   122c8:	f005 ffc4 	bl	18254 <__addsf3>
   122cc:	4603      	mov	r3, r0
   122ce:	461a      	mov	r2, r3
   122d0:	f24c 238f 	movw	r3, #49807	; 0xc28f
   122d4:	f6cb 43f5 	movt	r3, #48373	; 0xbcf5
   122d8:	4610      	mov	r0, r2
   122da:	4619      	mov	r1, r3
   122dc:	f006 f8c2 	bl	18464 <__aeabi_fmul>
   122e0:	4603      	mov	r3, r0
   122e2:	4618      	mov	r0, r3
   122e4:	f005 fc2a 	bl	17b3c <__aeabi_f2d>
   122e8:	4602      	mov	r2, r0
   122ea:	460b      	mov	r3, r1
   122ec:	4610      	mov	r0, r2
   122ee:	4619      	mov	r1, r3
   122f0:	a35d      	add	r3, pc, #372	; (adr r3, 12468 <climb_pid_run+0x390>)
   122f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   122f6:	f005 fac3 	bl	17880 <__adddf3>
   122fa:	4602      	mov	r2, r0
   122fc:	460b      	mov	r3, r1
   122fe:	4614      	mov	r4, r2
   12300:	461d      	mov	r5, r3
   12302:	f64c 0390 	movw	r3, #51344	; 0xc890
   12306:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1230a:	681b      	ldr	r3, [r3, #0]
   1230c:	4618      	mov	r0, r3
   1230e:	f005 fc15 	bl	17b3c <__aeabi_f2d>
   12312:	4602      	mov	r2, r0
   12314:	460b      	mov	r3, r1
   12316:	4610      	mov	r0, r2
   12318:	4619      	mov	r1, r3
   1231a:	a355      	add	r3, pc, #340	; (adr r3, 12470 <climb_pid_run+0x398>)
   1231c:	e9d3 2300 	ldrd	r2, r3, [r3]
   12320:	f005 fc60 	bl	17be4 <__aeabi_dmul>
   12324:	4602      	mov	r2, r0
   12326:	460b      	mov	r3, r1
   12328:	4620      	mov	r0, r4
   1232a:	4629      	mov	r1, r5
   1232c:	f005 faa8 	bl	17880 <__adddf3>
   12330:	4602      	mov	r2, r0
   12332:	460b      	mov	r3, r1
   12334:	4610      	mov	r0, r2
   12336:	4619      	mov	r1, r3
   12338:	f005 ff36 	bl	181a8 <__aeabi_d2f>
   1233c:	4603      	mov	r3, r0
   1233e:	603b      	str	r3, [r7, #0]
    climb_sum_err += err;
   12340:	f64c 0398 	movw	r3, #51352	; 0xc898
   12344:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12348:	681b      	ldr	r3, [r3, #0]
   1234a:	4618      	mov	r0, r3
   1234c:	6879      	ldr	r1, [r7, #4]
   1234e:	f005 ff81 	bl	18254 <__addsf3>
   12352:	4603      	mov	r3, r0
   12354:	461a      	mov	r2, r3
   12356:	f64c 0398 	movw	r3, #51352	; 0xc898
   1235a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1235e:	601a      	str	r2, [r3, #0]
    if (climb_sum_err > MAX_CLIMB_SUM_ERR) climb_sum_err = MAX_CLIMB_SUM_ERR;
   12360:	f64c 0398 	movw	r3, #51352	; 0xc898
   12364:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12368:	681b      	ldr	r3, [r3, #0]
   1236a:	4618      	mov	r0, r3
   1236c:	f04f 0100 	mov.w	r1, #0
   12370:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   12374:	f006 fa32 	bl	187dc <__aeabi_fcmpgt>
   12378:	4603      	mov	r3, r0
   1237a:	2b00      	cmp	r3, #0
   1237c:	d008      	beq.n	12390 <climb_pid_run+0x2b8>
   1237e:	f64c 0398 	movw	r3, #51352	; 0xc898
   12382:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12386:	f04f 0200 	mov.w	r2, #0
   1238a:	f2c4 22c8 	movt	r2, #17096	; 0x42c8
   1238e:	601a      	str	r2, [r3, #0]
    if (climb_sum_err < - MAX_CLIMB_SUM_ERR) climb_sum_err = - MAX_CLIMB_SUM_ERR;
   12390:	f64c 0398 	movw	r3, #51352	; 0xc898
   12394:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12398:	681b      	ldr	r3, [r3, #0]
   1239a:	4618      	mov	r0, r3
   1239c:	f04f 0100 	mov.w	r1, #0
   123a0:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   123a4:	f006 f9fc 	bl	187a0 <__aeabi_fcmplt>
   123a8:	4603      	mov	r3, r0
   123aa:	2b00      	cmp	r3, #0
   123ac:	d008      	beq.n	123c0 <climb_pid_run+0x2e8>
   123ae:	f64c 0398 	movw	r3, #51352	; 0xc898
   123b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   123b6:	f04f 0200 	mov.w	r2, #0
   123ba:	f2cc 22c8 	movt	r2, #49864	; 0xc2c8
   123be:	601a      	str	r2, [r3, #0]
    desired_gaz = TRIM_UPPRZ(fgaz * MAX_PPRZ);
   123c0:	6838      	ldr	r0, [r7, #0]
   123c2:	f04f 0100 	mov.w	r1, #0
   123c6:	f2c4 6116 	movt	r1, #17942	; 0x4616
   123ca:	f006 f84b 	bl	18464 <__aeabi_fmul>
   123ce:	4603      	mov	r3, r0
   123d0:	4618      	mov	r0, r3
   123d2:	f04f 0100 	mov.w	r1, #0
   123d6:	f006 f9e3 	bl	187a0 <__aeabi_fcmplt>
   123da:	4603      	mov	r3, r0
   123dc:	2b00      	cmp	r3, #0
   123de:	d001      	beq.n	123e4 <climb_pid_run+0x30c>
   123e0:	2200      	movs	r2, #0
   123e2:	e022      	b.n	1242a <climb_pid_run+0x352>
   123e4:	6838      	ldr	r0, [r7, #0]
   123e6:	f04f 0100 	mov.w	r1, #0
   123ea:	f2c4 6116 	movt	r1, #17942	; 0x4616
   123ee:	f006 f839 	bl	18464 <__aeabi_fmul>
   123f2:	4603      	mov	r3, r0
   123f4:	4618      	mov	r0, r3
   123f6:	f04f 0100 	mov.w	r1, #0
   123fa:	f2c4 6116 	movt	r1, #17942	; 0x4616
   123fe:	f006 f9ed 	bl	187dc <__aeabi_fcmpgt>
   12402:	4603      	mov	r3, r0
   12404:	2b00      	cmp	r3, #0
   12406:	d002      	beq.n	1240e <climb_pid_run+0x336>
   12408:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   1240c:	e00c      	b.n	12428 <climb_pid_run+0x350>
   1240e:	6838      	ldr	r0, [r7, #0]
   12410:	f04f 0100 	mov.w	r1, #0
   12414:	f2c4 6116 	movt	r1, #17942	; 0x4616
   12418:	f006 f824 	bl	18464 <__aeabi_fmul>
   1241c:	4603      	mov	r3, r0
   1241e:	4618      	mov	r0, r3
   12420:	f006 f9e6 	bl	187f0 <__aeabi_f2iz>
   12424:	4603      	mov	r3, r0
   12426:	b29b      	uxth	r3, r3
   12428:	b29a      	uxth	r2, r3
   1242a:	f64c 037c 	movw	r3, #51324	; 0xc87c
   1242e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12432:	801a      	strh	r2, [r3, #0]
    desired_pitch = nav_pitch + pitch_of_vz;
   12434:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12438:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1243c:	681a      	ldr	r2, [r3, #0]
   1243e:	f64c 0388 	movw	r3, #51336	; 0xc888
   12442:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12446:	681b      	ldr	r3, [r3, #0]
   12448:	4610      	mov	r0, r2
   1244a:	4619      	mov	r1, r3
   1244c:	f005 ff02 	bl	18254 <__addsf3>
   12450:	4603      	mov	r3, r0
   12452:	461a      	mov	r2, r3
   12454:	f64c 0378 	movw	r3, #51320	; 0xc878
   12458:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1245c:	601a      	str	r2, [r3, #0]
  }
}
   1245e:	3708      	adds	r7, #8
   12460:	46bd      	mov	sp, r7
   12462:	bdb0      	pop	{r4, r5, r7, pc}
   12464:	f3af 8000 	nop.w
   12468:	3d70a3d7 	.word	0x3d70a3d7
   1246c:	3fd3d70a 	.word	0x3fd3d70a
   12470:	9999999a 	.word	0x9999999a
   12474:	3fc99999 	.word	0x3fc99999

00012478 <altitude_pid_run>:

float altitude_pgain = ALTITUDE_PGAIN;


void altitude_pid_run(void) {
   12478:	b580      	push	{r7, lr}
   1247a:	b082      	sub	sp, #8
   1247c:	af00      	add	r7, sp, #0
  float err = estimator_z - desired_altitude;
   1247e:	f64c 3304 	movw	r3, #51972	; 0xcb04
   12482:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12486:	681a      	ldr	r2, [r3, #0]
   12488:	f240 5374 	movw	r3, #1396	; 0x574
   1248c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12490:	681b      	ldr	r3, [r3, #0]
   12492:	4610      	mov	r0, r2
   12494:	4619      	mov	r1, r3
   12496:	f005 fedb 	bl	18250 <__aeabi_fsub>
   1249a:	4603      	mov	r3, r0
   1249c:	607b      	str	r3, [r7, #4]
  desired_climb = pre_climb + altitude_pgain * err;
   1249e:	f240 5370 	movw	r3, #1392	; 0x570
   124a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   124a6:	681b      	ldr	r3, [r3, #0]
   124a8:	4618      	mov	r0, r3
   124aa:	6879      	ldr	r1, [r7, #4]
   124ac:	f005 ffda 	bl	18464 <__aeabi_fmul>
   124b0:	4603      	mov	r3, r0
   124b2:	461a      	mov	r2, r3
   124b4:	f64c 0394 	movw	r3, #51348	; 0xc894
   124b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124bc:	681b      	ldr	r3, [r3, #0]
   124be:	4610      	mov	r0, r2
   124c0:	4619      	mov	r1, r3
   124c2:	f005 fec7 	bl	18254 <__addsf3>
   124c6:	4603      	mov	r3, r0
   124c8:	461a      	mov	r2, r3
   124ca:	f64c 0390 	movw	r3, #51344	; 0xc890
   124ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124d2:	601a      	str	r2, [r3, #0]
  if (desired_climb < -CLIMB_MAX) desired_climb = -CLIMB_MAX;
   124d4:	f64c 0390 	movw	r3, #51344	; 0xc890
   124d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124dc:	681b      	ldr	r3, [r3, #0]
   124de:	4618      	mov	r0, r3
   124e0:	f04f 0100 	mov.w	r1, #0
   124e4:	f6cb 7180 	movt	r1, #49024	; 0xbf80
   124e8:	f006 f95a 	bl	187a0 <__aeabi_fcmplt>
   124ec:	4603      	mov	r3, r0
   124ee:	2b00      	cmp	r3, #0
   124f0:	d008      	beq.n	12504 <altitude_pid_run+0x8c>
   124f2:	f64c 0390 	movw	r3, #51344	; 0xc890
   124f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   124fa:	f04f 0200 	mov.w	r2, #0
   124fe:	f6cb 7280 	movt	r2, #49024	; 0xbf80
   12502:	601a      	str	r2, [r3, #0]
  if (desired_climb > CLIMB_MAX) desired_climb = CLIMB_MAX;
   12504:	f64c 0390 	movw	r3, #51344	; 0xc890
   12508:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1250c:	681b      	ldr	r3, [r3, #0]
   1250e:	4618      	mov	r0, r3
   12510:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   12514:	f006 f962 	bl	187dc <__aeabi_fcmpgt>
   12518:	4603      	mov	r3, r0
   1251a:	2b00      	cmp	r3, #0
   1251c:	d006      	beq.n	1252c <altitude_pid_run+0xb4>
   1251e:	f64c 0390 	movw	r3, #51344	; 0xc890
   12522:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12526:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   1252a:	601a      	str	r2, [r3, #0]
}
   1252c:	3708      	adds	r7, #8
   1252e:	46bd      	mov	sp, r7
   12530:	bd80      	pop	{r7, pc}
   12532:	bf00      	nop
   12534:	f3af 8000 	nop.w

00012538 <auto_nav>:
#define GROUND_ALT 125.
#define SECURITY_ALT 150.
#define MAX_DIST_FROM_HOME 500.
#ifdef NAV_C

static inline void auto_nav(void) {
   12538:	b5f0      	push	{r4, r5, r6, r7, lr}
   1253a:	b08b      	sub	sp, #44	; 0x2c
   1253c:	af00      	add	r7, sp, #0
        NextBlock()
    }

}
#else*/
if(nav_block == 0)
   1253e:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12542:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12546:	781b      	ldrb	r3, [r3, #0]
   12548:	2b00      	cmp	r3, #0
   1254a:	f040 8169 	bne.w	12820 <auto_nav+0x2e8>
{ // init
    
    if (nav_stage == 0) 
   1254e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12552:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12556:	781b      	ldrb	r3, [r3, #0]
   12558:	2b00      	cmp	r3, #0
   1255a:	d13c      	bne.n	125d6 <auto_nav+0x9e>
    {
	Label(while_1)
	nav_stage=0;
   1255c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12560:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12564:	2200      	movs	r2, #0
   12566:	701a      	strb	r2, [r3, #0]
	if (! (!(estimator_flight_time))) Goto(endwhile_2) 
   12568:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   1256c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12570:	881b      	ldrh	r3, [r3, #0]
   12572:	2b00      	cmp	r3, #0
   12574:	d000      	beq.n	12578 <auto_nav+0x40>
   12576:	e03d      	b.n	125f4 <auto_nav+0xbc>
	else NextStage(); 
   12578:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1257c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12580:	781b      	ldrb	r3, [r3, #0]
   12582:	3301      	adds	r3, #1
   12584:	b2da      	uxtb	r2, r3
   12586:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1258a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1258e:	701a      	strb	r2, [r3, #0]
   12590:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12594:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12598:	681a      	ldr	r2, [r3, #0]
   1259a:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   1259e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125a2:	601a      	str	r2, [r3, #0]
   125a4:	f64c 3300 	movw	r3, #51968	; 0xcb00
   125a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125ac:	681a      	ldr	r2, [r3, #0]
   125ae:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   125b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125b6:	601a      	str	r2, [r3, #0]
   125b8:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   125bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125c0:	2200      	movs	r2, #0
   125c2:	801a      	strh	r2, [r3, #0]
   125c4:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   125c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125cc:	f04f 0200 	mov.w	r2, #0
   125d0:	601a      	str	r2, [r3, #0]
   125d2:	f002 b883 	b.w	146dc <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   125d6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   125da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125de:	781b      	ldrb	r3, [r3, #0]
   125e0:	2b01      	cmp	r3, #1
   125e2:	d100      	bne.n	125e6 <auto_nav+0xae>
    {   Goto(while_1)}
   125e4:	e7ba      	b.n	1255c <auto_nav+0x24>
    else if (nav_stage == 2)
   125e6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   125ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125ee:	781b      	ldrb	r3, [r3, #0]
   125f0:	2b02      	cmp	r3, #2
   125f2:	d162      	bne.n	126ba <auto_nav+0x182>
    {
	Label(endwhile_2)
	nav_stage = 2;
   125f4:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   125f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   125fc:	2202      	movs	r2, #2
   125fe:	701a      	strb	r2, [r3, #0]
        if ((estimator_flight_time>8)) NextStage() else {
   12600:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   12604:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12608:	881b      	ldrh	r3, [r3, #0]
   1260a:	2b08      	cmp	r3, #8
   1260c:	d92e      	bls.n	1266c <auto_nav+0x134>
   1260e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12612:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12616:	781b      	ldrb	r3, [r3, #0]
   12618:	3301      	adds	r3, #1
   1261a:	b2da      	uxtb	r2, r3
   1261c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12620:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12624:	701a      	strb	r2, [r3, #0]
   12626:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1262a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1262e:	681a      	ldr	r2, [r3, #0]
   12630:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12634:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12638:	601a      	str	r2, [r3, #0]
   1263a:	f64c 3300 	movw	r3, #51968	; 0xcb00
   1263e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12642:	681a      	ldr	r2, [r3, #0]
   12644:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12648:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1264c:	601a      	str	r2, [r3, #0]
   1264e:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12652:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12656:	2200      	movs	r2, #0
   12658:	801a      	strh	r2, [r3, #0]
   1265a:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   1265e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12662:	f04f 0200 	mov.w	r2, #0
   12666:	601a      	str	r2, [r3, #0]
   12668:	f002 b838 	b.w	146dc <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   1266c:	f64c 038c 	movw	r3, #51340	; 0xc88c
   12670:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12674:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   12678:	f2c4 0296 	movt	r2, #16534	; 0x4096
   1267c:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   1267e:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12682:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12686:	2200      	movs	r2, #0
   12688:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.150000;
   1268a:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   1268e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12692:	f649 129a 	movw	r2, #39322	; 0x999a
   12696:	f6c3 6219 	movt	r2, #15897	; 0x3e19
   1269a:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_GAZ;
   1269c:	f24c 532d 	movw	r3, #50477	; 0xc52d
   126a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126a4:	2201      	movs	r2, #1
   126a6:	701a      	strb	r2, [r3, #0]
          nav_desired_gaz = TRIM_UPPRZ(0.800000*MAX_PPRZ);
   126a8:	f64c 03c8 	movw	r3, #51400	; 0xc8c8
   126ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126b0:	f44f 52f0 	mov.w	r2, #7680	; 0x1e00
   126b4:	801a      	strh	r2, [r3, #0]
        }
        return;
   126b6:	f002 b811 	b.w	146dc <auto_nav+0x21a4>
     }
     else if (nav_stage == 3)
   126ba:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   126be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126c2:	781b      	ldrb	r3, [r3, #0]
   126c4:	2b03      	cmp	r3, #3
   126c6:	d168      	bne.n	1279a <auto_nav+0x262>
     {
	nav_stage = 3;	
   126c8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   126cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126d0:	2203      	movs	r2, #3
   126d2:	701a      	strb	r2, [r3, #0]
        if ((estimator_z>SECURITY_ALT)) NextStage() else {
   126d4:	f64c 3304 	movw	r3, #51972	; 0xcb04
   126d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126dc:	681b      	ldr	r3, [r3, #0]
   126de:	4618      	mov	r0, r3
   126e0:	f04f 0100 	mov.w	r1, #0
   126e4:	f2c4 3116 	movt	r1, #17174	; 0x4316
   126e8:	f006 f878 	bl	187dc <__aeabi_fcmpgt>
   126ec:	4603      	mov	r3, r0
   126ee:	2b00      	cmp	r3, #0
   126f0:	d02e      	beq.n	12750 <auto_nav+0x218>
   126f2:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   126f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   126fa:	781b      	ldrb	r3, [r3, #0]
   126fc:	3301      	adds	r3, #1
   126fe:	b2da      	uxtb	r2, r3
   12700:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12704:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12708:	701a      	strb	r2, [r3, #0]
   1270a:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1270e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12712:	681a      	ldr	r2, [r3, #0]
   12714:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12718:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1271c:	601a      	str	r2, [r3, #0]
   1271e:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12722:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12726:	681a      	ldr	r2, [r3, #0]
   12728:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   1272c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12730:	601a      	str	r2, [r3, #0]
   12732:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12736:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1273a:	2200      	movs	r2, #0
   1273c:	801a      	strh	r2, [r3, #0]
   1273e:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12742:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12746:	f04f 0200 	mov.w	r2, #0
   1274a:	601a      	str	r2, [r3, #0]
   1274c:	f001 bfc6 	b.w	146dc <auto_nav+0x21a4>
          desired_course = RadOfDeg(QFU);
   12750:	f64c 038c 	movw	r3, #51340	; 0xc88c
   12754:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12758:	f64c 32e4 	movw	r2, #52196	; 0xcbe4
   1275c:	f2c4 0296 	movt	r2, #16534	; 0x4096
   12760:	601a      	str	r2, [r3, #0]
          auto_pitch = FALSE;
   12762:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12766:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1276a:	2200      	movs	r2, #0
   1276c:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   1276e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12772:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12776:	f04f 0200 	mov.w	r2, #0
   1277a:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_CLIMB;
   1277c:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12780:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12784:	2202      	movs	r2, #2
   12786:	701a      	strb	r2, [r3, #0]
          desired_climb = 8.000000;
   12788:	f64c 0390 	movw	r3, #51344	; 0xc890
   1278c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12790:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
   12794:	601a      	str	r2, [r3, #0]
        }
        return;
   12796:	f001 bfa1 	b.w	146dc <auto_nav+0x21a4>
     }
     else if (nav_stage == 4)
   1279a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1279e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127a2:	781b      	ldrb	r3, [r3, #0]
   127a4:	2b04      	cmp	r3, #4
   127a6:	f041 8799 	bne.w	146dc <auto_nav+0x21a4>
        NextBlock()
   127aa:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   127ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127b2:	781b      	ldrb	r3, [r3, #0]
   127b4:	3301      	adds	r3, #1
   127b6:	b2da      	uxtb	r2, r3
   127b8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   127bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127c0:	701a      	strb	r2, [r3, #0]
   127c2:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   127c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127ca:	2200      	movs	r2, #0
   127cc:	701a      	strb	r2, [r3, #0]
   127ce:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   127d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127d6:	2200      	movs	r2, #0
   127d8:	801a      	strh	r2, [r3, #0]
   127da:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   127de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127e2:	681a      	ldr	r2, [r3, #0]
   127e4:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   127e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127ec:	601a      	str	r2, [r3, #0]
   127ee:	f64c 3300 	movw	r3, #51968	; 0xcb00
   127f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   127f6:	681a      	ldr	r2, [r3, #0]
   127f8:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   127fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12800:	601a      	str	r2, [r3, #0]
   12802:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12806:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1280a:	2200      	movs	r2, #0
   1280c:	801a      	strh	r2, [r3, #0]
   1280e:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12812:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12816:	f04f 0200 	mov.w	r2, #0
   1281a:	601a      	str	r2, [r3, #0]
   1281c:	f001 bf5e 	b.w	146dc <auto_nav+0x21a4>
     else { }
}
else if (nav_block == 1) // two
   12820:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12824:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12828:	781b      	ldrb	r3, [r3, #0]
   1282a:	2b01      	cmp	r3, #1
   1282c:	f040 81bc 	bne.w	12ba8 <auto_nav+0x670>
{
    nav_block = 1;
   12830:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12834:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12838:	2201      	movs	r2, #1
   1283a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() 
   1283c:	f24c 5330 	movw	r3, #50480	; 0xc530
   12840:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12844:	781b      	ldrb	r3, [r3, #0]
   12846:	2b00      	cmp	r3, #0
   12848:	d007      	beq.n	1285a <auto_nav+0x322>
   1284a:	f24c 5330 	movw	r3, #50480	; 0xc530
   1284e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12852:	2200      	movs	r2, #0
   12854:	701a      	strb	r2, [r3, #0]
   12856:	2301      	movs	r3, #1
   12858:	e000      	b.n	1285c <auto_nav+0x324>
   1285a:	2300      	movs	r3, #0
   1285c:	2b00      	cmp	r3, #0
   1285e:	d034      	beq.n	128ca <auto_nav+0x392>
	{ GotoBlock(2) }
   12860:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12864:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12868:	2202      	movs	r2, #2
   1286a:	701a      	strb	r2, [r3, #0]
   1286c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12870:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12874:	2200      	movs	r2, #0
   12876:	701a      	strb	r2, [r3, #0]
   12878:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   1287c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12880:	2200      	movs	r2, #0
   12882:	801a      	strh	r2, [r3, #0]
   12884:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12888:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1288c:	681a      	ldr	r2, [r3, #0]
   1288e:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12892:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12896:	601a      	str	r2, [r3, #0]
   12898:	f64c 3300 	movw	r3, #51968	; 0xcb00
   1289c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128a0:	681a      	ldr	r2, [r3, #0]
   128a2:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   128a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128aa:	601a      	str	r2, [r3, #0]
   128ac:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   128b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128b4:	2200      	movs	r2, #0
   128b6:	801a      	strh	r2, [r3, #0]
   128b8:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   128bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128c0:	f04f 0200 	mov.w	r2, #0
   128c4:	601a      	str	r2, [r3, #0]
   128c6:	f001 bf09 	b.w	146dc <auto_nav+0x21a4>
    if(nav_stage == 0)
   128ca:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   128ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128d2:	781b      	ldrb	r3, [r3, #0]
   128d4:	2b00      	cmp	r3, #0
   128d6:	d12e      	bne.n	12936 <auto_nav+0x3fe>
    {
       Label(while_3)
       if (! (TRUE)) Goto(endwhile_4) else NextStage();
   128d8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   128dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128e0:	781b      	ldrb	r3, [r3, #0]
   128e2:	3301      	adds	r3, #1
   128e4:	b2da      	uxtb	r2, r3
   128e6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   128ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128ee:	701a      	strb	r2, [r3, #0]
   128f0:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   128f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   128f8:	681a      	ldr	r2, [r3, #0]
   128fa:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   128fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12902:	601a      	str	r2, [r3, #0]
   12904:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12908:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1290c:	681a      	ldr	r2, [r3, #0]
   1290e:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12912:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12916:	601a      	str	r2, [r3, #0]
   12918:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   1291c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12920:	2200      	movs	r2, #0
   12922:	801a      	strh	r2, [r3, #0]
   12924:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12928:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1292c:	f04f 0200 	mov.w	r2, #0
   12930:	601a      	str	r2, [r3, #0]
   12932:	f001 bed3 	b.w	146dc <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   12936:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1293a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1293e:	781b      	ldrb	r3, [r3, #0]
   12940:	2b01      	cmp	r3, #1
   12942:	d169      	bne.n	12a18 <auto_nav+0x4e0>
    {
	  nav_stage = 1;
   12944:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12948:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1294c:	2201      	movs	r2, #1
   1294e:	701a      	strb	r2, [r3, #0]
          if (approaching(1)) NextStageFrom(1) else {
   12950:	2001      	movs	r0, #1
   12952:	f001 fed1 	bl	146f8 <approaching>
   12956:	4603      	mov	r3, r0
   12958:	2b00      	cmp	r3, #0
   1295a:	d034      	beq.n	129c6 <auto_nav+0x48e>
   1295c:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12960:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12964:	2201      	movs	r2, #1
   12966:	701a      	strb	r2, [r3, #0]
   12968:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1296c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12970:	781b      	ldrb	r3, [r3, #0]
   12972:	3301      	adds	r3, #1
   12974:	b2da      	uxtb	r2, r3
   12976:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1297a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1297e:	701a      	strb	r2, [r3, #0]
   12980:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12984:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12988:	681a      	ldr	r2, [r3, #0]
   1298a:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   1298e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12992:	601a      	str	r2, [r3, #0]
   12994:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12998:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1299c:	681a      	ldr	r2, [r3, #0]
   1299e:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   129a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129a6:	601a      	str	r2, [r3, #0]
   129a8:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   129ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129b0:	2200      	movs	r2, #0
   129b2:	801a      	strh	r2, [r3, #0]
   129b4:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   129b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129bc:	f04f 0200 	mov.w	r2, #0
   129c0:	601a      	str	r2, [r3, #0]
   129c2:	f001 be8b 	b.w	146dc <auto_nav+0x21a4>
            fly_to(1);
   129c6:	2001      	movs	r0, #1
   129c8:	f001 ffca 	bl	14960 <fly_to>
            auto_pitch = FALSE;
   129cc:	f24c 532f 	movw	r3, #50479	; 0xc52f
   129d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129d4:	2200      	movs	r2, #0
   129d6:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   129d8:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   129dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129e0:	f04f 0200 	mov.w	r2, #0
   129e4:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   129e6:	f24c 532d 	movw	r3, #50477	; 0xc52d
   129ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   129ee:	2203      	movs	r2, #3
   129f0:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   129f2:	f240 5378 	movw	r3, #1400	; 0x578
   129f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129fa:	695a      	ldr	r2, [r3, #20]
   129fc:	f240 5374 	movw	r3, #1396	; 0x574
   12a00:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12a04:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12a06:	f64c 0394 	movw	r3, #51348	; 0xc894
   12a0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a0e:	f04f 0200 	mov.w	r2, #0
   12a12:	601a      	str	r2, [r3, #0]
          }
          return;
   12a14:	f001 be62 	b.w	146dc <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12a18:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12a1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a20:	781b      	ldrb	r3, [r3, #0]
   12a22:	2b02      	cmp	r3, #2
   12a24:	d169      	bne.n	12afa <auto_nav+0x5c2>
     {
	  nav_stage = 2;
   12a26:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12a2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a2e:	2202      	movs	r2, #2
   12a30:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   12a32:	2004      	movs	r0, #4
   12a34:	f001 fe60 	bl	146f8 <approaching>
   12a38:	4603      	mov	r3, r0
   12a3a:	2b00      	cmp	r3, #0
   12a3c:	d034      	beq.n	12aa8 <auto_nav+0x570>
   12a3e:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12a42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a46:	2204      	movs	r2, #4
   12a48:	701a      	strb	r2, [r3, #0]
   12a4a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12a4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a52:	781b      	ldrb	r3, [r3, #0]
   12a54:	3301      	adds	r3, #1
   12a56:	b2da      	uxtb	r2, r3
   12a58:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12a5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a60:	701a      	strb	r2, [r3, #0]
   12a62:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12a66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a6a:	681a      	ldr	r2, [r3, #0]
   12a6c:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a74:	601a      	str	r2, [r3, #0]
   12a76:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12a7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a7e:	681a      	ldr	r2, [r3, #0]
   12a80:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12a84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a88:	601a      	str	r2, [r3, #0]
   12a8a:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12a8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a92:	2200      	movs	r2, #0
   12a94:	801a      	strh	r2, [r3, #0]
   12a96:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12a9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12a9e:	f04f 0200 	mov.w	r2, #0
   12aa2:	601a      	str	r2, [r3, #0]
   12aa4:	f001 be1a 	b.w	146dc <auto_nav+0x21a4>
            fly_to(4);
   12aa8:	2004      	movs	r0, #4
   12aaa:	f001 ff59 	bl	14960 <fly_to>
            auto_pitch = FALSE;
   12aae:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12ab2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ab6:	2200      	movs	r2, #0
   12ab8:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12aba:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12abe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ac2:	f04f 0200 	mov.w	r2, #0
   12ac6:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12ac8:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ad0:	2203      	movs	r2, #3
   12ad2:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   12ad4:	f240 5378 	movw	r3, #1400	; 0x578
   12ad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12ade:	f240 5374 	movw	r3, #1396	; 0x574
   12ae2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12ae6:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12ae8:	f64c 0394 	movw	r3, #51348	; 0xc894
   12aec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12af0:	f04f 0200 	mov.w	r2, #0
   12af4:	601a      	str	r2, [r3, #0]
          }
          return;
   12af6:	f001 bdf1 	b.w	146dc <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12afa:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12afe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b02:	781b      	ldrb	r3, [r3, #0]
   12b04:	2b03      	cmp	r3, #3
   12b06:	d106      	bne.n	12b16 <auto_nav+0x5de>
      {
	  nav_stage = 3;
   12b08:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12b0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b10:	2203      	movs	r2, #3
   12b12:	701a      	strb	r2, [r3, #0]
          Goto(while_3)
   12b14:	e6e0      	b.n	128d8 <auto_nav+0x3a0>
      }
      else if (nav_stage == 4)
   12b16:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12b1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b1e:	781b      	ldrb	r3, [r3, #0]
   12b20:	2b04      	cmp	r3, #4
   12b22:	f041 85db 	bne.w	146dc <auto_nav+0x21a4>
      {
        Label(endwhile_4)
	nav_stage = 4;
   12b26:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b2e:	2204      	movs	r2, #4
   12b30:	701a      	strb	r2, [r3, #0]
        NextBlock()
   12b32:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12b36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b3a:	781b      	ldrb	r3, [r3, #0]
   12b3c:	3301      	adds	r3, #1
   12b3e:	b2da      	uxtb	r2, r3
   12b40:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12b44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b48:	701a      	strb	r2, [r3, #0]
   12b4a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12b4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b52:	2200      	movs	r2, #0
   12b54:	701a      	strb	r2, [r3, #0]
   12b56:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   12b5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b5e:	2200      	movs	r2, #0
   12b60:	801a      	strh	r2, [r3, #0]
   12b62:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12b66:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b6a:	681a      	ldr	r2, [r3, #0]
   12b6c:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12b70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b74:	601a      	str	r2, [r3, #0]
   12b76:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12b7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b7e:	681a      	ldr	r2, [r3, #0]
   12b80:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12b84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b88:	601a      	str	r2, [r3, #0]
   12b8a:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12b8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b92:	2200      	movs	r2, #0
   12b94:	801a      	strh	r2, [r3, #0]
   12b96:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12b9a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12b9e:	f04f 0200 	mov.w	r2, #0
   12ba2:	601a      	str	r2, [r3, #0]
   12ba4:	f001 bd9a 	b.w	146dc <auto_nav+0x21a4>
      }
      else { }
}
else if (nav_block == 2) // height
   12ba8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12bac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bb0:	781b      	ldrb	r3, [r3, #0]
   12bb2:	2b02      	cmp	r3, #2
   12bb4:	f040 8392 	bne.w	132dc <auto_nav+0xda4>
{
	nav_block = 2;
   12bb8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12bbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bc0:	2202      	movs	r2, #2
   12bc2:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(3) }
   12bc4:	f24c 5330 	movw	r3, #50480	; 0xc530
   12bc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bcc:	781b      	ldrb	r3, [r3, #0]
   12bce:	2b00      	cmp	r3, #0
   12bd0:	d007      	beq.n	12be2 <auto_nav+0x6aa>
   12bd2:	f24c 5330 	movw	r3, #50480	; 0xc530
   12bd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bda:	2200      	movs	r2, #0
   12bdc:	701a      	strb	r2, [r3, #0]
   12bde:	2301      	movs	r3, #1
   12be0:	e000      	b.n	12be4 <auto_nav+0x6ac>
   12be2:	2300      	movs	r3, #0
   12be4:	2b00      	cmp	r3, #0
   12be6:	d034      	beq.n	12c52 <auto_nav+0x71a>
   12be8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   12bec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bf0:	2203      	movs	r2, #3
   12bf2:	701a      	strb	r2, [r3, #0]
   12bf4:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12bf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12bfc:	2200      	movs	r2, #0
   12bfe:	701a      	strb	r2, [r3, #0]
   12c00:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   12c04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c08:	2200      	movs	r2, #0
   12c0a:	801a      	strh	r2, [r3, #0]
   12c0c:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12c10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c14:	681a      	ldr	r2, [r3, #0]
   12c16:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12c1a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c1e:	601a      	str	r2, [r3, #0]
   12c20:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12c24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c28:	681a      	ldr	r2, [r3, #0]
   12c2a:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12c2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c32:	601a      	str	r2, [r3, #0]
   12c34:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12c38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c3c:	2200      	movs	r2, #0
   12c3e:	801a      	strh	r2, [r3, #0]
   12c40:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12c44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c48:	f04f 0200 	mov.w	r2, #0
   12c4c:	601a      	str	r2, [r3, #0]
   12c4e:	f001 bd45 	b.w	146dc <auto_nav+0x21a4>
    
    if(nav_stage == 0)
   12c52:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12c56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c5a:	781b      	ldrb	r3, [r3, #0]
   12c5c:	2b00      	cmp	r3, #0
   12c5e:	d134      	bne.n	12cca <auto_nav+0x792>
    {
       Label(while_5)
       nav_stage = 0;
   12c60:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12c64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c68:	2200      	movs	r2, #0
   12c6a:	701a      	strb	r2, [r3, #0]
       if (! (TRUE)) Goto(endwhile_6) else NextStage();
   12c6c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12c70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c74:	781b      	ldrb	r3, [r3, #0]
   12c76:	3301      	adds	r3, #1
   12c78:	b2da      	uxtb	r2, r3
   12c7a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12c7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c82:	701a      	strb	r2, [r3, #0]
   12c84:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12c88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c8c:	681a      	ldr	r2, [r3, #0]
   12c8e:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12c92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12c96:	601a      	str	r2, [r3, #0]
   12c98:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12c9c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ca0:	681a      	ldr	r2, [r3, #0]
   12ca2:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12ca6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12caa:	601a      	str	r2, [r3, #0]
   12cac:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12cb0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cb4:	2200      	movs	r2, #0
   12cb6:	801a      	strh	r2, [r3, #0]
   12cb8:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12cbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cc0:	f04f 0200 	mov.w	r2, #0
   12cc4:	601a      	str	r2, [r3, #0]
   12cc6:	f001 bd09 	b.w	146dc <auto_nav+0x21a4>
    }
    else if(nav_stage == 1)
   12cca:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12cce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cd2:	781b      	ldrb	r3, [r3, #0]
   12cd4:	2b01      	cmp	r3, #1
   12cd6:	d169      	bne.n	12dac <auto_nav+0x874>
    {
         nav_stage =1;
   12cd8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12cdc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ce0:	2201      	movs	r2, #1
   12ce2:	701a      	strb	r2, [r3, #0]
          if (approaching(6)) NextStageFrom(6) else {
   12ce4:	2006      	movs	r0, #6
   12ce6:	f001 fd07 	bl	146f8 <approaching>
   12cea:	4603      	mov	r3, r0
   12cec:	2b00      	cmp	r3, #0
   12cee:	d034      	beq.n	12d5a <auto_nav+0x822>
   12cf0:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12cf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12cf8:	2206      	movs	r2, #6
   12cfa:	701a      	strb	r2, [r3, #0]
   12cfc:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12d00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d04:	781b      	ldrb	r3, [r3, #0]
   12d06:	3301      	adds	r3, #1
   12d08:	b2da      	uxtb	r2, r3
   12d0a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12d0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d12:	701a      	strb	r2, [r3, #0]
   12d14:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12d18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d1c:	681a      	ldr	r2, [r3, #0]
   12d1e:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12d22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d26:	601a      	str	r2, [r3, #0]
   12d28:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12d2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d30:	681a      	ldr	r2, [r3, #0]
   12d32:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12d36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d3a:	601a      	str	r2, [r3, #0]
   12d3c:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12d40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d44:	2200      	movs	r2, #0
   12d46:	801a      	strh	r2, [r3, #0]
   12d48:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12d4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d50:	f04f 0200 	mov.w	r2, #0
   12d54:	601a      	str	r2, [r3, #0]
   12d56:	f001 bcc1 	b.w	146dc <auto_nav+0x21a4>
            fly_to(6);
   12d5a:	2006      	movs	r0, #6
   12d5c:	f001 fe00 	bl	14960 <fly_to>
            auto_pitch = FALSE;
   12d60:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12d64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d68:	2200      	movs	r2, #0
   12d6a:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12d6c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12d70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d74:	f04f 0200 	mov.w	r2, #0
   12d78:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12d7a:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12d7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12d82:	2203      	movs	r2, #3
   12d84:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[6].a;
   12d86:	f240 5378 	movw	r3, #1400	; 0x578
   12d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   12d90:	f240 5374 	movw	r3, #1396	; 0x574
   12d94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12d98:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12d9a:	f64c 0394 	movw	r3, #51348	; 0xc894
   12d9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12da2:	f04f 0200 	mov.w	r2, #0
   12da6:	601a      	str	r2, [r3, #0]
          }
          return;
   12da8:	f001 bc98 	b.w	146dc <auto_nav+0x21a4>
     }
     else if (nav_stage == 2)
   12dac:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12db0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12db4:	781b      	ldrb	r3, [r3, #0]
   12db6:	2b02      	cmp	r3, #2
   12db8:	d169      	bne.n	12e8e <auto_nav+0x956>
     {
         nav_stage =2; 
   12dba:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12dbe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dc2:	2202      	movs	r2, #2
   12dc4:	701a      	strb	r2, [r3, #0]
         if (approaching(1)) NextStageFrom(1) else {
   12dc6:	2001      	movs	r0, #1
   12dc8:	f001 fc96 	bl	146f8 <approaching>
   12dcc:	4603      	mov	r3, r0
   12dce:	2b00      	cmp	r3, #0
   12dd0:	d034      	beq.n	12e3c <auto_nav+0x904>
   12dd2:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12dd6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dda:	2201      	movs	r2, #1
   12ddc:	701a      	strb	r2, [r3, #0]
   12dde:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12de2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12de6:	781b      	ldrb	r3, [r3, #0]
   12de8:	3301      	adds	r3, #1
   12dea:	b2da      	uxtb	r2, r3
   12dec:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12df0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12df4:	701a      	strb	r2, [r3, #0]
   12df6:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12dfa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12dfe:	681a      	ldr	r2, [r3, #0]
   12e00:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12e04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e08:	601a      	str	r2, [r3, #0]
   12e0a:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12e0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e12:	681a      	ldr	r2, [r3, #0]
   12e14:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12e18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e1c:	601a      	str	r2, [r3, #0]
   12e1e:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12e22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e26:	2200      	movs	r2, #0
   12e28:	801a      	strh	r2, [r3, #0]
   12e2a:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12e2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e32:	f04f 0200 	mov.w	r2, #0
   12e36:	601a      	str	r2, [r3, #0]
   12e38:	f001 bc50 	b.w	146dc <auto_nav+0x21a4>
            fly_to(1);
   12e3c:	2001      	movs	r0, #1
   12e3e:	f001 fd8f 	bl	14960 <fly_to>
            auto_pitch = FALSE;
   12e42:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12e46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e4a:	2200      	movs	r2, #0
   12e4c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12e4e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12e52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e56:	f04f 0200 	mov.w	r2, #0
   12e5a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12e5c:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12e60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e64:	2203      	movs	r2, #3
   12e66:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[1].a;
   12e68:	f240 5378 	movw	r3, #1400	; 0x578
   12e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e70:	695a      	ldr	r2, [r3, #20]
   12e72:	f240 5374 	movw	r3, #1396	; 0x574
   12e76:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12e7a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12e7c:	f64c 0394 	movw	r3, #51348	; 0xc894
   12e80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e84:	f04f 0200 	mov.w	r2, #0
   12e88:	601a      	str	r2, [r3, #0]
          }
          return;
   12e8a:	f001 bc27 	b.w	146dc <auto_nav+0x21a4>
      }
      else if (nav_stage == 3)
   12e8e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12e92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12e96:	781b      	ldrb	r3, [r3, #0]
   12e98:	2b03      	cmp	r3, #3
   12e9a:	d16f      	bne.n	12f7c <auto_nav+0xa44>
      {
	   nav_stage = 3;         
   12e9c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12ea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ea4:	2203      	movs	r2, #3
   12ea6:	701a      	strb	r2, [r3, #0]
           if (approaching(2)) NextStageFrom(2) else {
   12ea8:	2002      	movs	r0, #2
   12eaa:	f001 fc25 	bl	146f8 <approaching>
   12eae:	4603      	mov	r3, r0
   12eb0:	2b00      	cmp	r3, #0
   12eb2:	d034      	beq.n	12f1e <auto_nav+0x9e6>
   12eb4:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12eb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ebc:	2202      	movs	r2, #2
   12ebe:	701a      	strb	r2, [r3, #0]
   12ec0:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12ec4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ec8:	781b      	ldrb	r3, [r3, #0]
   12eca:	3301      	adds	r3, #1
   12ecc:	b2da      	uxtb	r2, r3
   12ece:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12ed2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ed6:	701a      	strb	r2, [r3, #0]
   12ed8:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12edc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ee0:	681a      	ldr	r2, [r3, #0]
   12ee2:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12ee6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12eea:	601a      	str	r2, [r3, #0]
   12eec:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12ef0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ef4:	681a      	ldr	r2, [r3, #0]
   12ef6:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12efa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12efe:	601a      	str	r2, [r3, #0]
   12f00:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12f04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f08:	2200      	movs	r2, #0
   12f0a:	801a      	strh	r2, [r3, #0]
   12f0c:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12f10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f14:	f04f 0200 	mov.w	r2, #0
   12f18:	601a      	str	r2, [r3, #0]
   12f1a:	f001 bbdf 	b.w	146dc <auto_nav+0x21a4>
            route_to(last_wp, 2);
   12f1e:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12f22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f26:	781b      	ldrb	r3, [r3, #0]
   12f28:	4618      	mov	r0, r3
   12f2a:	2102      	movs	r1, #2
   12f2c:	f001 fd3a 	bl	149a4 <route_to>
            auto_pitch = FALSE;
   12f30:	f24c 532f 	movw	r3, #50479	; 0xc52f
   12f34:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f38:	2200      	movs	r2, #0
   12f3a:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   12f3c:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   12f40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f44:	f04f 0200 	mov.w	r2, #0
   12f48:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   12f4a:	f24c 532d 	movw	r3, #50477	; 0xc52d
   12f4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f52:	2203      	movs	r2, #3
   12f54:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[2].a;
   12f56:	f240 5378 	movw	r3, #1400	; 0x578
   12f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f5e:	6a1a      	ldr	r2, [r3, #32]
   12f60:	f240 5374 	movw	r3, #1396	; 0x574
   12f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f68:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   12f6a:	f64c 0394 	movw	r3, #51348	; 0xc894
   12f6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f72:	f04f 0200 	mov.w	r2, #0
   12f76:	601a      	str	r2, [r3, #0]
          }
          return;
   12f78:	f001 bbb0 	b.w	146dc <auto_nav+0x21a4>
       }
       else if (nav_stage == 4)
   12f7c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12f80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f84:	781b      	ldrb	r3, [r3, #0]
   12f86:	2b04      	cmp	r3, #4
   12f88:	d169      	bne.n	1305e <auto_nav+0xb26>
       {
          nav_stage = 4;
   12f8a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12f8e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12f92:	2204      	movs	r2, #4
   12f94:	701a      	strb	r2, [r3, #0]
          if (approaching(3)) NextStageFrom(3) else {
   12f96:	2003      	movs	r0, #3
   12f98:	f001 fbae 	bl	146f8 <approaching>
   12f9c:	4603      	mov	r3, r0
   12f9e:	2b00      	cmp	r3, #0
   12fa0:	d034      	beq.n	1300c <auto_nav+0xad4>
   12fa2:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   12fa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12faa:	2203      	movs	r2, #3
   12fac:	701a      	strb	r2, [r3, #0]
   12fae:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12fb2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fb6:	781b      	ldrb	r3, [r3, #0]
   12fb8:	3301      	adds	r3, #1
   12fba:	b2da      	uxtb	r2, r3
   12fbc:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   12fc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fc4:	701a      	strb	r2, [r3, #0]
   12fc6:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   12fca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fce:	681a      	ldr	r2, [r3, #0]
   12fd0:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   12fd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fd8:	601a      	str	r2, [r3, #0]
   12fda:	f64c 3300 	movw	r3, #51968	; 0xcb00
   12fde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fe2:	681a      	ldr	r2, [r3, #0]
   12fe4:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   12fe8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12fec:	601a      	str	r2, [r3, #0]
   12fee:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   12ff2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   12ff6:	2200      	movs	r2, #0
   12ff8:	801a      	strh	r2, [r3, #0]
   12ffa:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   12ffe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13002:	f04f 0200 	mov.w	r2, #0
   13006:	601a      	str	r2, [r3, #0]
   13008:	f001 bb68 	b.w	146dc <auto_nav+0x21a4>
            fly_to(3);
   1300c:	2003      	movs	r0, #3
   1300e:	f001 fca7 	bl	14960 <fly_to>
            auto_pitch = FALSE;
   13012:	f24c 532f 	movw	r3, #50479	; 0xc52f
   13016:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1301a:	2200      	movs	r2, #0
   1301c:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   1301e:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13022:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13026:	f04f 0200 	mov.w	r2, #0
   1302a:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1302c:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13030:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13034:	2203      	movs	r2, #3
   13036:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[3].a;
   13038:	f240 5378 	movw	r3, #1400	; 0x578
   1303c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   13042:	f240 5374 	movw	r3, #1396	; 0x574
   13046:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1304a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1304c:	f64c 0394 	movw	r3, #51348	; 0xc894
   13050:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13054:	f04f 0200 	mov.w	r2, #0
   13058:	601a      	str	r2, [r3, #0]
          }
          return;
   1305a:	f001 bb3f 	b.w	146dc <auto_nav+0x21a4>
       }
       else if (nav_stage == 5)
   1305e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13062:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13066:	781b      	ldrb	r3, [r3, #0]
   13068:	2b05      	cmp	r3, #5
   1306a:	d169      	bne.n	13140 <auto_nav+0xc08>
       {
          nav_stage =5;
   1306c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13070:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13074:	2205      	movs	r2, #5
   13076:	701a      	strb	r2, [r3, #0]
          if (approaching(4)) NextStageFrom(4) else {
   13078:	2004      	movs	r0, #4
   1307a:	f001 fb3d 	bl	146f8 <approaching>
   1307e:	4603      	mov	r3, r0
   13080:	2b00      	cmp	r3, #0
   13082:	d034      	beq.n	130ee <auto_nav+0xbb6>
   13084:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   13088:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1308c:	2204      	movs	r2, #4
   1308e:	701a      	strb	r2, [r3, #0]
   13090:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13094:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13098:	781b      	ldrb	r3, [r3, #0]
   1309a:	3301      	adds	r3, #1
   1309c:	b2da      	uxtb	r2, r3
   1309e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   130a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130a6:	701a      	strb	r2, [r3, #0]
   130a8:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   130ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130b0:	681a      	ldr	r2, [r3, #0]
   130b2:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   130b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130ba:	601a      	str	r2, [r3, #0]
   130bc:	f64c 3300 	movw	r3, #51968	; 0xcb00
   130c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130c4:	681a      	ldr	r2, [r3, #0]
   130c6:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   130ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130ce:	601a      	str	r2, [r3, #0]
   130d0:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   130d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130d8:	2200      	movs	r2, #0
   130da:	801a      	strh	r2, [r3, #0]
   130dc:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   130e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130e4:	f04f 0200 	mov.w	r2, #0
   130e8:	601a      	str	r2, [r3, #0]
   130ea:	f001 baf7 	b.w	146dc <auto_nav+0x21a4>
            fly_to(4);
   130ee:	2004      	movs	r0, #4
   130f0:	f001 fc36 	bl	14960 <fly_to>
            auto_pitch = FALSE;
   130f4:	f24c 532f 	movw	r3, #50479	; 0xc52f
   130f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   130fc:	2200      	movs	r2, #0
   130fe:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   13100:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13104:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13108:	f04f 0200 	mov.w	r2, #0
   1310c:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   1310e:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13112:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13116:	2203      	movs	r2, #3
   13118:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[4].a;
   1311a:	f240 5378 	movw	r3, #1400	; 0x578
   1311e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13122:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   13124:	f240 5374 	movw	r3, #1396	; 0x574
   13128:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1312c:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1312e:	f64c 0394 	movw	r3, #51348	; 0xc894
   13132:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13136:	f04f 0200 	mov.w	r2, #0
   1313a:	601a      	str	r2, [r3, #0]
          }
          return;
   1313c:	f001 bace 	b.w	146dc <auto_nav+0x21a4>
       }
       else if (nav_stage == 6)
   13140:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13144:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13148:	781b      	ldrb	r3, [r3, #0]
   1314a:	2b06      	cmp	r3, #6
   1314c:	d16f      	bne.n	1322e <auto_nav+0xcf6>
       {
          nav_stage =6;
   1314e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13152:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13156:	2206      	movs	r2, #6
   13158:	701a      	strb	r2, [r3, #0]
          if (approaching(5)) NextStageFrom(5) else {
   1315a:	2005      	movs	r0, #5
   1315c:	f001 facc 	bl	146f8 <approaching>
   13160:	4603      	mov	r3, r0
   13162:	2b00      	cmp	r3, #0
   13164:	d034      	beq.n	131d0 <auto_nav+0xc98>
   13166:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   1316a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1316e:	2205      	movs	r2, #5
   13170:	701a      	strb	r2, [r3, #0]
   13172:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13176:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1317a:	781b      	ldrb	r3, [r3, #0]
   1317c:	3301      	adds	r3, #1
   1317e:	b2da      	uxtb	r2, r3
   13180:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13184:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13188:	701a      	strb	r2, [r3, #0]
   1318a:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1318e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13192:	681a      	ldr	r2, [r3, #0]
   13194:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13198:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1319c:	601a      	str	r2, [r3, #0]
   1319e:	f64c 3300 	movw	r3, #51968	; 0xcb00
   131a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131a6:	681a      	ldr	r2, [r3, #0]
   131a8:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   131ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131b0:	601a      	str	r2, [r3, #0]
   131b2:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   131b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131ba:	2200      	movs	r2, #0
   131bc:	801a      	strh	r2, [r3, #0]
   131be:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   131c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131c6:	f04f 0200 	mov.w	r2, #0
   131ca:	601a      	str	r2, [r3, #0]
   131cc:	f001 ba86 	b.w	146dc <auto_nav+0x21a4>
            route_to(last_wp, 5);
   131d0:	f64c 03ac 	movw	r3, #51372	; 0xc8ac
   131d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131d8:	781b      	ldrb	r3, [r3, #0]
   131da:	4618      	mov	r0, r3
   131dc:	2105      	movs	r1, #5
   131de:	f001 fbe1 	bl	149a4 <route_to>
            auto_pitch = FALSE;
   131e2:	f24c 532f 	movw	r3, #50479	; 0xc52f
   131e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131ea:	2200      	movs	r2, #0
   131ec:	701a      	strb	r2, [r3, #0]
            nav_pitch = 0.000000;
   131ee:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   131f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   131f6:	f04f 0200 	mov.w	r2, #0
   131fa:	601a      	str	r2, [r3, #0]
            vertical_mode = VERTICAL_MODE_AUTO_ALT;
   131fc:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13200:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13204:	2203      	movs	r2, #3
   13206:	701a      	strb	r2, [r3, #0]
            desired_altitude = waypoints[5].a;
   13208:	f240 5378 	movw	r3, #1400	; 0x578
   1320c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   13212:	f240 5374 	movw	r3, #1396	; 0x574
   13216:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1321a:	601a      	str	r2, [r3, #0]
            pre_climb = 0.;
   1321c:	f64c 0394 	movw	r3, #51348	; 0xc894
   13220:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13224:	f04f 0200 	mov.w	r2, #0
   13228:	601a      	str	r2, [r3, #0]
          }
          return;
   1322a:	f001 ba57 	b.w	146dc <auto_nav+0x21a4>
       }
       else if (nav_stage == 7)
   1322e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13232:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13236:	781b      	ldrb	r3, [r3, #0]
   13238:	2b07      	cmp	r3, #7
   1323a:	d106      	bne.n	1324a <auto_nav+0xd12>
       {
	   nav_stage =7;
   1323c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13240:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13244:	2207      	movs	r2, #7
   13246:	701a      	strb	r2, [r3, #0]
	   Goto(while_5)
   13248:	e50a      	b.n	12c60 <auto_nav+0x728>
	}
       
       else if (nav_stage == 8){
   1324a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1324e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13252:	781b      	ldrb	r3, [r3, #0]
   13254:	2b08      	cmp	r3, #8
   13256:	f041 8241 	bne.w	146dc <auto_nav+0x21a4>
	  Label(endwhile_6)
	  nav_stage =8;
   1325a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1325e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13262:	2208      	movs	r2, #8
   13264:	701a      	strb	r2, [r3, #0]
          NextBlock();
   13266:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   1326a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1326e:	781b      	ldrb	r3, [r3, #0]
   13270:	3301      	adds	r3, #1
   13272:	b2da      	uxtb	r2, r3
   13274:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13278:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1327c:	701a      	strb	r2, [r3, #0]
   1327e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13282:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13286:	2200      	movs	r2, #0
   13288:	701a      	strb	r2, [r3, #0]
   1328a:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   1328e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13292:	2200      	movs	r2, #0
   13294:	801a      	strh	r2, [r3, #0]
   13296:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1329a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1329e:	681a      	ldr	r2, [r3, #0]
   132a0:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   132a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132a8:	601a      	str	r2, [r3, #0]
   132aa:	f64c 3300 	movw	r3, #51968	; 0xcb00
   132ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132b2:	681a      	ldr	r2, [r3, #0]
   132b4:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   132b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132bc:	601a      	str	r2, [r3, #0]
   132be:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   132c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132c6:	2200      	movs	r2, #0
   132c8:	801a      	strh	r2, [r3, #0]
   132ca:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   132ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132d2:	f04f 0200 	mov.w	r2, #0
   132d6:	601a      	str	r2, [r3, #0]
   132d8:	f001 ba00 	b.w	146dc <auto_nav+0x21a4>
       }
       else { }
}
else if (nav_block == 3) // xyz
   132dc:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   132e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132e4:	781b      	ldrb	r3, [r3, #0]
   132e6:	2b03      	cmp	r3, #3
   132e8:	f040 8388 	bne.w	139fc <auto_nav+0x14c4>
{
    nav_block = 3;
   132ec:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   132f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   132f4:	2203      	movs	r2, #3
   132f6:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(4) }
   132f8:	f24c 5330 	movw	r3, #50480	; 0xc530
   132fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13300:	781b      	ldrb	r3, [r3, #0]
   13302:	2b00      	cmp	r3, #0
   13304:	d007      	beq.n	13316 <auto_nav+0xdde>
   13306:	f24c 5330 	movw	r3, #50480	; 0xc530
   1330a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1330e:	2200      	movs	r2, #0
   13310:	701a      	strb	r2, [r3, #0]
   13312:	2301      	movs	r3, #1
   13314:	e000      	b.n	13318 <auto_nav+0xde0>
   13316:	2300      	movs	r3, #0
   13318:	2b00      	cmp	r3, #0
   1331a:	d034      	beq.n	13386 <auto_nav+0xe4e>
   1331c:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13320:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13324:	2204      	movs	r2, #4
   13326:	701a      	strb	r2, [r3, #0]
   13328:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1332c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13330:	2200      	movs	r2, #0
   13332:	701a      	strb	r2, [r3, #0]
   13334:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13338:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1333c:	2200      	movs	r2, #0
   1333e:	801a      	strh	r2, [r3, #0]
   13340:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13344:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13348:	681a      	ldr	r2, [r3, #0]
   1334a:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   1334e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13352:	601a      	str	r2, [r3, #0]
   13354:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13358:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1335c:	681a      	ldr	r2, [r3, #0]
   1335e:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13362:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13366:	601a      	str	r2, [r3, #0]
   13368:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   1336c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13370:	2200      	movs	r2, #0
   13372:	801a      	strh	r2, [r3, #0]
   13374:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13378:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1337c:	f04f 0200 	mov.w	r2, #0
   13380:	601a      	str	r2, [r3, #0]
   13382:	f001 b9ab 	b.w	146dc <auto_nav+0x21a4>
    if(nav_stage == 0)
   13386:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1338a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1338e:	781b      	ldrb	r3, [r3, #0]
   13390:	2b00      	cmp	r3, #0
   13392:	f040 82ea 	bne.w	1396a <auto_nav+0x1432>
    {
        nav_stage = 0;
   13396:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1339a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1339e:	2200      	movs	r2, #0
   133a0:	701a      	strb	r2, [r3, #0]
        Goto3D(50)
   133a2:	f24c 532c 	movw	r3, #50476	; 0xc52c
   133a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133aa:	781b      	ldrb	r3, [r3, #0]
   133ac:	2b02      	cmp	r3, #2
   133ae:	f040 81a5 	bne.w	136fc <auto_nav+0x11c4>
   133b2:	f24c 6350 	movw	r3, #50768	; 0xc650
   133b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133ba:	88db      	ldrh	r3, [r3, #6]
   133bc:	84fb      	strh	r3, [r7, #38]	; 0x26
   133be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   133c2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   133c6:	dc04      	bgt.n	133d2 <auto_nav+0xe9a>
   133c8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   133cc:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   133d0:	da7e      	bge.n	134d0 <auto_nav+0xf98>
   133d2:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   133d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   133da:	681b      	ldr	r3, [r3, #0]
   133dc:	4618      	mov	r0, r3
   133de:	f004 fbad 	bl	17b3c <__aeabi_f2d>
   133e2:	4604      	mov	r4, r0
   133e4:	460d      	mov	r5, r1
   133e6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   133ea:	4618      	mov	r0, r3
   133ec:	f004 ffe6 	bl	183bc <__aeabi_i2f>
   133f0:	4603      	mov	r3, r0
   133f2:	4618      	mov	r0, r3
   133f4:	f04f 0100 	mov.w	r1, #0
   133f8:	f2c4 6116 	movt	r1, #17942	; 0x4616
   133fc:	f005 f8e6 	bl	185cc <__aeabi_fdiv>
   13400:	4603      	mov	r3, r0
   13402:	4618      	mov	r0, r3
   13404:	f004 fb9a 	bl	17b3c <__aeabi_f2d>
   13408:	4602      	mov	r2, r0
   1340a:	460b      	mov	r3, r1
   1340c:	4610      	mov	r0, r2
   1340e:	4619      	mov	r1, r3
   13410:	f04f 0200 	mov.w	r2, #0
   13414:	f04f 0300 	mov.w	r3, #0
   13418:	f2cc 0334 	movt	r3, #49204	; 0xc034
   1341c:	f004 fbe2 	bl	17be4 <__aeabi_dmul>
   13420:	4602      	mov	r2, r0
   13422:	460b      	mov	r3, r1
   13424:	4610      	mov	r0, r2
   13426:	4619      	mov	r1, r3
   13428:	f04f 0200 	mov.w	r2, #0
   1342c:	f04f 0300 	mov.w	r3, #0
   13430:	f004 fa26 	bl	17880 <__adddf3>
   13434:	4602      	mov	r2, r0
   13436:	460b      	mov	r3, r1
   13438:	4620      	mov	r0, r4
   1343a:	4629      	mov	r1, r5
   1343c:	f004 fa20 	bl	17880 <__adddf3>
   13440:	4602      	mov	r2, r0
   13442:	460b      	mov	r3, r1
   13444:	4610      	mov	r0, r2
   13446:	4619      	mov	r1, r3
   13448:	f004 feae 	bl	181a8 <__aeabi_d2f>
   1344c:	4602      	mov	r2, r0
   1344e:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   13452:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13456:	601a      	str	r2, [r3, #0]
   13458:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   1345c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13460:	681b      	ldr	r3, [r3, #0]
   13462:	4618      	mov	r0, r3
   13464:	f04f 0100 	mov.w	r1, #0
   13468:	f2c4 317a 	movt	r1, #17274	; 0x437a
   1346c:	f005 f9a2 	bl	187b4 <__aeabi_fcmple>
   13470:	4603      	mov	r3, r0
   13472:	2b00      	cmp	r3, #0
   13474:	d005      	beq.n	13482 <auto_nav+0xf4a>
   13476:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   1347a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1347e:	681a      	ldr	r2, [r3, #0]
   13480:	e003      	b.n	1348a <auto_nav+0xf52>
   13482:	f04f 0200 	mov.w	r2, #0
   13486:	f2c4 327a 	movt	r2, #17274	; 0x437a
   1348a:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   1348e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13492:	601a      	str	r2, [r3, #0]
   13494:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   13498:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1349c:	681b      	ldr	r3, [r3, #0]
   1349e:	4618      	mov	r0, r3
   134a0:	f04f 0100 	mov.w	r1, #0
   134a4:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   134a8:	f005 f98e 	bl	187c8 <__aeabi_fcmpge>
   134ac:	4603      	mov	r3, r0
   134ae:	2b00      	cmp	r3, #0
   134b0:	d005      	beq.n	134be <auto_nav+0xf86>
   134b2:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   134b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134ba:	681a      	ldr	r2, [r3, #0]
   134bc:	e003      	b.n	134c6 <auto_nav+0xf8e>
   134be:	f04f 0200 	mov.w	r2, #0
   134c2:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   134c6:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   134ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134ce:	601a      	str	r2, [r3, #0]
   134d0:	f24c 6350 	movw	r3, #50768	; 0xc650
   134d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134d8:	889b      	ldrh	r3, [r3, #4]
   134da:	84bb      	strh	r3, [r7, #36]	; 0x24
   134dc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   134e0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   134e4:	dc04      	bgt.n	134f0 <auto_nav+0xfb8>
   134e6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   134ea:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   134ee:	da7e      	bge.n	135ee <auto_nav+0x10b6>
   134f0:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   134f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   134f8:	681b      	ldr	r3, [r3, #0]
   134fa:	4618      	mov	r0, r3
   134fc:	f004 fb1e 	bl	17b3c <__aeabi_f2d>
   13500:	4604      	mov	r4, r0
   13502:	460d      	mov	r5, r1
   13504:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
   13508:	4618      	mov	r0, r3
   1350a:	f004 ff57 	bl	183bc <__aeabi_i2f>
   1350e:	4603      	mov	r3, r0
   13510:	4618      	mov	r0, r3
   13512:	f04f 0100 	mov.w	r1, #0
   13516:	f2c4 6116 	movt	r1, #17942	; 0x4616
   1351a:	f005 f857 	bl	185cc <__aeabi_fdiv>
   1351e:	4603      	mov	r3, r0
   13520:	4618      	mov	r0, r3
   13522:	f004 fb0b 	bl	17b3c <__aeabi_f2d>
   13526:	4602      	mov	r2, r0
   13528:	460b      	mov	r3, r1
   1352a:	4610      	mov	r0, r2
   1352c:	4619      	mov	r1, r3
   1352e:	f04f 0200 	mov.w	r2, #0
   13532:	f04f 0300 	mov.w	r3, #0
   13536:	f2cc 0334 	movt	r3, #49204	; 0xc034
   1353a:	f004 fb53 	bl	17be4 <__aeabi_dmul>
   1353e:	4602      	mov	r2, r0
   13540:	460b      	mov	r3, r1
   13542:	4610      	mov	r0, r2
   13544:	4619      	mov	r1, r3
   13546:	f04f 0200 	mov.w	r2, #0
   1354a:	f04f 0300 	mov.w	r3, #0
   1354e:	f004 f997 	bl	17880 <__adddf3>
   13552:	4602      	mov	r2, r0
   13554:	460b      	mov	r3, r1
   13556:	4620      	mov	r0, r4
   13558:	4629      	mov	r1, r5
   1355a:	f004 f991 	bl	17880 <__adddf3>
   1355e:	4602      	mov	r2, r0
   13560:	460b      	mov	r3, r1
   13562:	4610      	mov	r0, r2
   13564:	4619      	mov	r1, r3
   13566:	f004 fe1f 	bl	181a8 <__aeabi_d2f>
   1356a:	4602      	mov	r2, r0
   1356c:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   13570:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13574:	601a      	str	r2, [r3, #0]
   13576:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   1357a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1357e:	681b      	ldr	r3, [r3, #0]
   13580:	4618      	mov	r0, r3
   13582:	f04f 0100 	mov.w	r1, #0
   13586:	f2c4 317a 	movt	r1, #17274	; 0x437a
   1358a:	f005 f913 	bl	187b4 <__aeabi_fcmple>
   1358e:	4603      	mov	r3, r0
   13590:	2b00      	cmp	r3, #0
   13592:	d005      	beq.n	135a0 <auto_nav+0x1068>
   13594:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   13598:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1359c:	681a      	ldr	r2, [r3, #0]
   1359e:	e003      	b.n	135a8 <auto_nav+0x1070>
   135a0:	f04f 0200 	mov.w	r2, #0
   135a4:	f2c4 327a 	movt	r2, #17274	; 0x437a
   135a8:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   135ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135b0:	601a      	str	r2, [r3, #0]
   135b2:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   135b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135ba:	681b      	ldr	r3, [r3, #0]
   135bc:	4618      	mov	r0, r3
   135be:	f04f 0100 	mov.w	r1, #0
   135c2:	f2cc 317a 	movt	r1, #50042	; 0xc37a
   135c6:	f005 f8ff 	bl	187c8 <__aeabi_fcmpge>
   135ca:	4603      	mov	r3, r0
   135cc:	2b00      	cmp	r3, #0
   135ce:	d005      	beq.n	135dc <auto_nav+0x10a4>
   135d0:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   135d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135d8:	681a      	ldr	r2, [r3, #0]
   135da:	e003      	b.n	135e4 <auto_nav+0x10ac>
   135dc:	f04f 0200 	mov.w	r2, #0
   135e0:	f2cc 327a 	movt	r2, #50042	; 0xc37a
   135e4:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   135e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135ec:	601a      	str	r2, [r3, #0]
   135ee:	f24c 532d 	movw	r3, #50477	; 0xc52d
   135f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   135f6:	2203      	movs	r2, #3
   135f8:	701a      	strb	r2, [r3, #0]
   135fa:	f24c 6350 	movw	r3, #50768	; 0xc650
   135fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13602:	885b      	ldrh	r3, [r3, #2]
   13604:	847b      	strh	r3, [r7, #34]	; 0x22
   13606:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   1360a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
   1360e:	dc04      	bgt.n	1361a <auto_nav+0x10e2>
   13610:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   13614:	f513 7ff0 	cmn.w	r3, #480	; 0x1e0
   13618:	da70      	bge.n	136fc <auto_nav+0x11c4>
   1361a:	f240 5374 	movw	r3, #1396	; 0x574
   1361e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13622:	681b      	ldr	r3, [r3, #0]
   13624:	4618      	mov	r0, r3
   13626:	f004 fa89 	bl	17b3c <__aeabi_f2d>
   1362a:	4604      	mov	r4, r0
   1362c:	460d      	mov	r5, r1
   1362e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
   13632:	4618      	mov	r0, r3
   13634:	f004 fec2 	bl	183bc <__aeabi_i2f>
   13638:	4603      	mov	r3, r0
   1363a:	4618      	mov	r0, r3
   1363c:	f04f 0100 	mov.w	r1, #0
   13640:	f2c4 6116 	movt	r1, #17942	; 0x4616
   13644:	f004 ffc2 	bl	185cc <__aeabi_fdiv>
   13648:	4603      	mov	r3, r0
   1364a:	4618      	mov	r0, r3
   1364c:	f004 fa76 	bl	17b3c <__aeabi_f2d>
   13650:	4602      	mov	r2, r0
   13652:	460b      	mov	r3, r1
   13654:	f04f 0000 	mov.w	r0, #0
   13658:	f04f 0100 	mov.w	r1, #0
   1365c:	f004 f90e 	bl	1787c <__aeabi_dsub>
   13660:	4602      	mov	r2, r0
   13662:	460b      	mov	r3, r1
   13664:	4620      	mov	r0, r4
   13666:	4629      	mov	r1, r5
   13668:	f004 f90a 	bl	17880 <__adddf3>
   1366c:	4602      	mov	r2, r0
   1366e:	460b      	mov	r3, r1
   13670:	4610      	mov	r0, r2
   13672:	4619      	mov	r1, r3
   13674:	f004 fd98 	bl	181a8 <__aeabi_d2f>
   13678:	4602      	mov	r2, r0
   1367a:	f240 5374 	movw	r3, #1396	; 0x574
   1367e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13682:	601a      	str	r2, [r3, #0]
   13684:	f240 5374 	movw	r3, #1396	; 0x574
   13688:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1368c:	681b      	ldr	r3, [r3, #0]
   1368e:	4618      	mov	r0, r3
   13690:	f04f 0100 	mov.w	r1, #0
   13694:	f2c4 312f 	movt	r1, #17199	; 0x432f
   13698:	f005 f896 	bl	187c8 <__aeabi_fcmpge>
   1369c:	4603      	mov	r3, r0
   1369e:	2b00      	cmp	r3, #0
   136a0:	d005      	beq.n	136ae <auto_nav+0x1176>
   136a2:	f240 5374 	movw	r3, #1396	; 0x574
   136a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136aa:	681a      	ldr	r2, [r3, #0]
   136ac:	e003      	b.n	136b6 <auto_nav+0x117e>
   136ae:	f04f 0200 	mov.w	r2, #0
   136b2:	f2c4 322f 	movt	r2, #17199	; 0x432f
   136b6:	f240 5374 	movw	r3, #1396	; 0x574
   136ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136be:	601a      	str	r2, [r3, #0]
   136c0:	f240 5374 	movw	r3, #1396	; 0x574
   136c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136c8:	681b      	ldr	r3, [r3, #0]
   136ca:	4618      	mov	r0, r3
   136cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   136d0:	f2c4 3189 	movt	r1, #17289	; 0x4389
   136d4:	f005 f86e 	bl	187b4 <__aeabi_fcmple>
   136d8:	4603      	mov	r3, r0
   136da:	2b00      	cmp	r3, #0
   136dc:	d005      	beq.n	136ea <auto_nav+0x11b2>
   136de:	f240 5374 	movw	r3, #1396	; 0x574
   136e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136e6:	681a      	ldr	r2, [r3, #0]
   136e8:	e003      	b.n	136f2 <auto_nav+0x11ba>
   136ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   136ee:	f2c4 3289 	movt	r2, #17289	; 0x4389
   136f2:	f240 5374 	movw	r3, #1396	; 0x574
   136f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   136fa:	601a      	str	r2, [r3, #0]
   136fc:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13700:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13704:	681a      	ldr	r2, [r3, #0]
   13706:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   1370a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1370e:	681b      	ldr	r3, [r3, #0]
   13710:	4610      	mov	r0, r2
   13712:	4619      	mov	r1, r3
   13714:	f004 fd9c 	bl	18250 <__aeabi_fsub>
   13718:	4603      	mov	r3, r0
   1371a:	4618      	mov	r0, r3
   1371c:	f004 fa0e 	bl	17b3c <__aeabi_f2d>
   13720:	4604      	mov	r4, r0
   13722:	460d      	mov	r5, r1
   13724:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13728:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1372c:	681a      	ldr	r2, [r3, #0]
   1372e:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   13732:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13736:	681b      	ldr	r3, [r3, #0]
   13738:	4610      	mov	r0, r2
   1373a:	4619      	mov	r1, r3
   1373c:	f004 fd88 	bl	18250 <__aeabi_fsub>
   13740:	4603      	mov	r3, r0
   13742:	4618      	mov	r0, r3
   13744:	f004 f9fa 	bl	17b3c <__aeabi_f2d>
   13748:	4602      	mov	r2, r0
   1374a:	460b      	mov	r3, r1
   1374c:	4620      	mov	r0, r4
   1374e:	4629      	mov	r1, r5
   13750:	f002 fa12 	bl	15b78 <pp_atan2>
   13754:	4602      	mov	r2, r0
   13756:	460b      	mov	r3, r1
   13758:	4610      	mov	r0, r2
   1375a:	4619      	mov	r1, r3
   1375c:	f004 fd24 	bl	181a8 <__aeabi_d2f>
   13760:	4603      	mov	r3, r0
   13762:	61fb      	str	r3, [r7, #28]
   13764:	69f8      	ldr	r0, [r7, #28]
   13766:	f004 f9e9 	bl	17b3c <__aeabi_f2d>
   1376a:	4604      	mov	r4, r0
   1376c:	460d      	mov	r5, r1
   1376e:	f64c 3334 	movw	r3, #52020	; 0xcb34
   13772:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13776:	681b      	ldr	r3, [r3, #0]
   13778:	4618      	mov	r0, r3
   1377a:	f04f 0100 	mov.w	r1, #0
   1377e:	f2cc 2148 	movt	r1, #49736	; 0xc248
   13782:	f004 fe6f 	bl	18464 <__aeabi_fmul>
   13786:	4603      	mov	r3, r0
   13788:	4618      	mov	r0, r3
   1378a:	f004 f9d7 	bl	17b3c <__aeabi_f2d>
   1378e:	4602      	mov	r2, r0
   13790:	460b      	mov	r3, r1
   13792:	f04f 0000 	mov.w	r0, #0
   13796:	f04f 0100 	mov.w	r1, #0
   1379a:	f2c4 0114 	movt	r1, #16404	; 0x4014
   1379e:	f004 fb4b 	bl	17e38 <__aeabi_ddiv>
   137a2:	4602      	mov	r2, r0
   137a4:	460b      	mov	r3, r1
   137a6:	4620      	mov	r0, r4
   137a8:	4629      	mov	r1, r5
   137aa:	f004 f869 	bl	17880 <__adddf3>
   137ae:	4602      	mov	r2, r0
   137b0:	460b      	mov	r3, r1
   137b2:	4610      	mov	r0, r2
   137b4:	4619      	mov	r1, r3
   137b6:	f004 fcf7 	bl	181a8 <__aeabi_d2f>
   137ba:	4603      	mov	r3, r0
   137bc:	61bb      	str	r3, [r7, #24]
   137be:	f64c 03ec 	movw	r3, #51436	; 0xc8ec
   137c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   137c6:	681b      	ldr	r3, [r3, #0]
   137c8:	4618      	mov	r0, r3
   137ca:	f004 f9b7 	bl	17b3c <__aeabi_f2d>
   137ce:	4604      	mov	r4, r0
   137d0:	460d      	mov	r5, r1
   137d2:	69b8      	ldr	r0, [r7, #24]
   137d4:	f004 f9b2 	bl	17b3c <__aeabi_f2d>
   137d8:	4602      	mov	r2, r0
   137da:	460b      	mov	r3, r1
   137dc:	4610      	mov	r0, r2
   137de:	4619      	mov	r1, r3
   137e0:	a3b1      	add	r3, pc, #708	; (adr r3, 13aa8 <auto_nav+0x1570>)
   137e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   137e6:	f004 f84b 	bl	17880 <__adddf3>
   137ea:	4602      	mov	r2, r0
   137ec:	460b      	mov	r3, r1
   137ee:	4610      	mov	r0, r2
   137f0:	4619      	mov	r1, r3
   137f2:	f002 fa81 	bl	15cf8 <pp_sin>
   137f6:	4602      	mov	r2, r0
   137f8:	460b      	mov	r3, r1
   137fa:	4610      	mov	r0, r2
   137fc:	4619      	mov	r1, r3
   137fe:	f04f 0200 	mov.w	r2, #0
   13802:	f04f 0300 	mov.w	r3, #0
   13806:	f2c4 0349 	movt	r3, #16457	; 0x4049
   1380a:	f004 f9eb 	bl	17be4 <__aeabi_dmul>
   1380e:	4602      	mov	r2, r0
   13810:	460b      	mov	r3, r1
   13812:	4620      	mov	r0, r4
   13814:	4629      	mov	r1, r5
   13816:	f004 f833 	bl	17880 <__adddf3>
   1381a:	4602      	mov	r2, r0
   1381c:	460b      	mov	r3, r1
   1381e:	4610      	mov	r0, r2
   13820:	4619      	mov	r1, r3
   13822:	f004 fcc1 	bl	181a8 <__aeabi_d2f>
   13826:	4606      	mov	r6, r0
   13828:	f64c 03f0 	movw	r3, #51440	; 0xc8f0
   1382c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13830:	681b      	ldr	r3, [r3, #0]
   13832:	4618      	mov	r0, r3
   13834:	f004 f982 	bl	17b3c <__aeabi_f2d>
   13838:	4604      	mov	r4, r0
   1383a:	460d      	mov	r5, r1
   1383c:	69b8      	ldr	r0, [r7, #24]
   1383e:	f004 f97d 	bl	17b3c <__aeabi_f2d>
   13842:	4602      	mov	r2, r0
   13844:	460b      	mov	r3, r1
   13846:	4610      	mov	r0, r2
   13848:	4619      	mov	r1, r3
   1384a:	f002 fa55 	bl	15cf8 <pp_sin>
   1384e:	4602      	mov	r2, r0
   13850:	460b      	mov	r3, r1
   13852:	4610      	mov	r0, r2
   13854:	4619      	mov	r1, r3
   13856:	f04f 0200 	mov.w	r2, #0
   1385a:	f04f 0300 	mov.w	r3, #0
   1385e:	f2c4 0349 	movt	r3, #16457	; 0x4049
   13862:	f004 f9bf 	bl	17be4 <__aeabi_dmul>
   13866:	4602      	mov	r2, r0
   13868:	460b      	mov	r3, r1
   1386a:	4620      	mov	r0, r4
   1386c:	4629      	mov	r1, r5
   1386e:	f004 f807 	bl	17880 <__adddf3>
   13872:	4602      	mov	r2, r0
   13874:	460b      	mov	r3, r1
   13876:	4610      	mov	r0, r2
   13878:	4619      	mov	r1, r3
   1387a:	f004 fc95 	bl	181a8 <__aeabi_d2f>
   1387e:	4603      	mov	r3, r0
   13880:	4630      	mov	r0, r6
   13882:	4619      	mov	r1, r3
   13884:	f001 f81c 	bl	148c0 <fly_to_xy>
   13888:	69b8      	ldr	r0, [r7, #24]
   1388a:	f004 f957 	bl	17b3c <__aeabi_f2d>
   1388e:	4602      	mov	r2, r0
   13890:	460b      	mov	r3, r1
   13892:	a185      	add	r1, pc, #532	; (adr r1, 13aa8 <auto_nav+0x1570>)
   13894:	e9d1 0100 	ldrd	r0, r1, [r1]
   13898:	f003 fff0 	bl	1787c <__aeabi_dsub>
   1389c:	4602      	mov	r2, r0
   1389e:	460b      	mov	r3, r1
   138a0:	4610      	mov	r0, r2
   138a2:	4619      	mov	r1, r3
   138a4:	a382      	add	r3, pc, #520	; (adr r3, 13ab0 <auto_nav+0x1578>)
   138a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   138aa:	f004 fac5 	bl	17e38 <__aeabi_ddiv>
   138ae:	4602      	mov	r2, r0
   138b0:	460b      	mov	r3, r1
   138b2:	4610      	mov	r0, r2
   138b4:	4619      	mov	r1, r3
   138b6:	f04f 0200 	mov.w	r2, #0
   138ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   138be:	f2c4 0366 	movt	r3, #16486	; 0x4066
   138c2:	f004 f98f 	bl	17be4 <__aeabi_dmul>
   138c6:	4602      	mov	r2, r0
   138c8:	460b      	mov	r3, r1
   138ca:	4610      	mov	r0, r2
   138cc:	4619      	mov	r1, r3
   138ce:	f004 fc6b 	bl	181a8 <__aeabi_d2f>
   138d2:	4602      	mov	r2, r0
   138d4:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   138d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138dc:	601a      	str	r2, [r3, #0]
   138de:	e012      	b.n	13906 <auto_nav+0x13ce>
   138e0:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   138e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   138e8:	681b      	ldr	r3, [r3, #0]
   138ea:	4618      	mov	r0, r3
   138ec:	f04f 0100 	mov.w	r1, #0
   138f0:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   138f4:	f004 fcae 	bl	18254 <__addsf3>
   138f8:	4603      	mov	r3, r0
   138fa:	461a      	mov	r2, r3
   138fc:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13900:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13904:	601a      	str	r2, [r3, #0]
   13906:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1390a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1390e:	681b      	ldr	r3, [r3, #0]
   13910:	4618      	mov	r0, r3
   13912:	f04f 0100 	mov.w	r1, #0
   13916:	f004 ff43 	bl	187a0 <__aeabi_fcmplt>
   1391a:	4603      	mov	r3, r0
   1391c:	2b00      	cmp	r3, #0
   1391e:	d1df      	bne.n	138e0 <auto_nav+0x13a8>
   13920:	e012      	b.n	13948 <auto_nav+0x1410>
   13922:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13926:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1392a:	681b      	ldr	r3, [r3, #0]
   1392c:	4618      	mov	r0, r3
   1392e:	f04f 0100 	mov.w	r1, #0
   13932:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13936:	f004 fc8b 	bl	18250 <__aeabi_fsub>
   1393a:	4603      	mov	r3, r0
   1393c:	461a      	mov	r2, r3
   1393e:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13942:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13946:	601a      	str	r2, [r3, #0]
   13948:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1394c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13950:	681b      	ldr	r3, [r3, #0]
   13952:	4618      	mov	r0, r3
   13954:	f04f 0100 	mov.w	r1, #0
   13958:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1395c:	f004 ff34 	bl	187c8 <__aeabi_fcmpge>
   13960:	4603      	mov	r3, r0
   13962:	2b00      	cmp	r3, #0
   13964:	d1dd      	bne.n	13922 <auto_nav+0x13ea>
        return;
   13966:	f000 beb9 	b.w	146dc <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   1396a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1396e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13972:	781b      	ldrb	r3, [r3, #0]
   13974:	2b01      	cmp	r3, #1
   13976:	f040 86b1 	bne.w	146dc <auto_nav+0x21a4>
    {
        nav_stage = 1;
   1397a:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1397e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13982:	2201      	movs	r2, #1
   13984:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13986:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   1398a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1398e:	781b      	ldrb	r3, [r3, #0]
   13990:	3301      	adds	r3, #1
   13992:	b2da      	uxtb	r2, r3
   13994:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13998:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1399c:	701a      	strb	r2, [r3, #0]
   1399e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   139a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139a6:	2200      	movs	r2, #0
   139a8:	701a      	strb	r2, [r3, #0]
   139aa:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   139ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139b2:	2200      	movs	r2, #0
   139b4:	801a      	strh	r2, [r3, #0]
   139b6:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   139ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139be:	681a      	ldr	r2, [r3, #0]
   139c0:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   139c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139c8:	601a      	str	r2, [r3, #0]
   139ca:	f64c 3300 	movw	r3, #51968	; 0xcb00
   139ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139d2:	681a      	ldr	r2, [r3, #0]
   139d4:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   139d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139dc:	601a      	str	r2, [r3, #0]
   139de:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   139e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139e6:	2200      	movs	r2, #0
   139e8:	801a      	strh	r2, [r3, #0]
   139ea:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   139ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   139f2:	f04f 0200 	mov.w	r2, #0
   139f6:	601a      	str	r2, [r3, #0]
   139f8:	f000 be70 	b.w	146dc <auto_nav+0x21a4>
    }
    else { }
}
else if (nav_block == 4)
   139fc:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13a00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a04:	781b      	ldrb	r3, [r3, #0]
   13a06:	2b04      	cmp	r3, #4
   13a08:	f040 8202 	bne.w	13e10 <auto_nav+0x18d8>
{
    nav_block = 4;
   13a0c:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13a10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a14:	2204      	movs	r2, #4
   13a16:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(5) }
   13a18:	f24c 5330 	movw	r3, #50480	; 0xc530
   13a1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a20:	781b      	ldrb	r3, [r3, #0]
   13a22:	2b00      	cmp	r3, #0
   13a24:	d007      	beq.n	13a36 <auto_nav+0x14fe>
   13a26:	f24c 5330 	movw	r3, #50480	; 0xc530
   13a2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a2e:	2200      	movs	r2, #0
   13a30:	701a      	strb	r2, [r3, #0]
   13a32:	2301      	movs	r3, #1
   13a34:	e000      	b.n	13a38 <auto_nav+0x1500>
   13a36:	2300      	movs	r3, #0
   13a38:	2b00      	cmp	r3, #0
   13a3a:	d03d      	beq.n	13ab8 <auto_nav+0x1580>
   13a3c:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13a40:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a44:	2205      	movs	r2, #5
   13a46:	701a      	strb	r2, [r3, #0]
   13a48:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13a4c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a50:	2200      	movs	r2, #0
   13a52:	701a      	strb	r2, [r3, #0]
   13a54:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13a58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a5c:	2200      	movs	r2, #0
   13a5e:	801a      	strh	r2, [r3, #0]
   13a60:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13a64:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a68:	681a      	ldr	r2, [r3, #0]
   13a6a:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13a6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a72:	601a      	str	r2, [r3, #0]
   13a74:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13a78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a7c:	681a      	ldr	r2, [r3, #0]
   13a7e:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13a82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a86:	601a      	str	r2, [r3, #0]
   13a88:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13a8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a90:	2200      	movs	r2, #0
   13a92:	801a      	strh	r2, [r3, #0]
   13a94:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13a98:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13a9c:	f04f 0200 	mov.w	r2, #0
   13aa0:	601a      	str	r2, [r3, #0]
   13aa2:	f000 be1b 	b.w	146dc <auto_nav+0x21a4>
   13aa6:	bf00      	nop
   13aa8:	54442d18 	.word	0x54442d18
   13aac:	3ff921fb 	.word	0x3ff921fb
   13ab0:	54442d18 	.word	0x54442d18
   13ab4:	400921fb 	.word	0x400921fb
    if(nav_stage == 0)
   13ab8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13abc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ac0:	781b      	ldrb	r3, [r3, #0]
   13ac2:	2b00      	cmp	r3, #0
   13ac4:	f040 815b 	bne.w	13d7e <auto_nav+0x1846>
    {
        nav_stage = 0;
   13ac8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13acc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ad0:	2200      	movs	r2, #0
   13ad2:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13ad4:	f24c 532f 	movw	r3, #50479	; 0xc52f
   13ad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13adc:	2200      	movs	r2, #0
   13ade:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13ae0:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13ae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ae8:	f04f 0200 	mov.w	r2, #0
   13aec:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13aee:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13af2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13af6:	2203      	movs	r2, #3
   13af8:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[0].a;
   13afa:	f240 5378 	movw	r3, #1400	; 0x578
   13afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b02:	689a      	ldr	r2, [r3, #8]
   13b04:	f240 5374 	movw	r3, #1396	; 0x574
   13b08:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b0c:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13b0e:	f64c 0394 	movw	r3, #51348	; 0xc894
   13b12:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b16:	f04f 0200 	mov.w	r2, #0
   13b1a:	601a      	str	r2, [r3, #0]
        Circle(0, 150);
   13b1c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13b20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b24:	681a      	ldr	r2, [r3, #0]
   13b26:	f240 5378 	movw	r3, #1400	; 0x578
   13b2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b2e:	685b      	ldr	r3, [r3, #4]
   13b30:	4610      	mov	r0, r2
   13b32:	4619      	mov	r1, r3
   13b34:	f004 fb8c 	bl	18250 <__aeabi_fsub>
   13b38:	4603      	mov	r3, r0
   13b3a:	4618      	mov	r0, r3
   13b3c:	f003 fffe 	bl	17b3c <__aeabi_f2d>
   13b40:	4604      	mov	r4, r0
   13b42:	460d      	mov	r5, r1
   13b44:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13b48:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b4c:	681a      	ldr	r2, [r3, #0]
   13b4e:	f240 5378 	movw	r3, #1400	; 0x578
   13b52:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13b56:	681b      	ldr	r3, [r3, #0]
   13b58:	4610      	mov	r0, r2
   13b5a:	4619      	mov	r1, r3
   13b5c:	f004 fb78 	bl	18250 <__aeabi_fsub>
   13b60:	4603      	mov	r3, r0
   13b62:	4618      	mov	r0, r3
   13b64:	f003 ffea 	bl	17b3c <__aeabi_f2d>
   13b68:	4602      	mov	r2, r0
   13b6a:	460b      	mov	r3, r1
   13b6c:	4620      	mov	r0, r4
   13b6e:	4629      	mov	r1, r5
   13b70:	f002 f802 	bl	15b78 <pp_atan2>
   13b74:	4602      	mov	r2, r0
   13b76:	460b      	mov	r3, r1
   13b78:	4610      	mov	r0, r2
   13b7a:	4619      	mov	r1, r3
   13b7c:	f004 fb14 	bl	181a8 <__aeabi_d2f>
   13b80:	4603      	mov	r3, r0
   13b82:	617b      	str	r3, [r7, #20]
   13b84:	6978      	ldr	r0, [r7, #20]
   13b86:	f003 ffd9 	bl	17b3c <__aeabi_f2d>
   13b8a:	4604      	mov	r4, r0
   13b8c:	460d      	mov	r5, r1
   13b8e:	f64c 3334 	movw	r3, #52020	; 0xcb34
   13b92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13b96:	681b      	ldr	r3, [r3, #0]
   13b98:	4618      	mov	r0, r3
   13b9a:	f04f 0100 	mov.w	r1, #0
   13b9e:	f2cc 3116 	movt	r1, #49942	; 0xc316
   13ba2:	f004 fc5f 	bl	18464 <__aeabi_fmul>
   13ba6:	4603      	mov	r3, r0
   13ba8:	4618      	mov	r0, r3
   13baa:	f003 ffc7 	bl	17b3c <__aeabi_f2d>
   13bae:	4602      	mov	r2, r0
   13bb0:	460b      	mov	r3, r1
   13bb2:	f04f 0000 	mov.w	r0, #0
   13bb6:	f04f 0100 	mov.w	r1, #0
   13bba:	f2c4 0114 	movt	r1, #16404	; 0x4014
   13bbe:	f004 f93b 	bl	17e38 <__aeabi_ddiv>
   13bc2:	4602      	mov	r2, r0
   13bc4:	460b      	mov	r3, r1
   13bc6:	4620      	mov	r0, r4
   13bc8:	4629      	mov	r1, r5
   13bca:	f003 fe59 	bl	17880 <__adddf3>
   13bce:	4602      	mov	r2, r0
   13bd0:	460b      	mov	r3, r1
   13bd2:	4610      	mov	r0, r2
   13bd4:	4619      	mov	r1, r3
   13bd6:	f004 fae7 	bl	181a8 <__aeabi_d2f>
   13bda:	4603      	mov	r3, r0
   13bdc:	613b      	str	r3, [r7, #16]
   13bde:	f240 5378 	movw	r3, #1400	; 0x578
   13be2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13be6:	681b      	ldr	r3, [r3, #0]
   13be8:	4618      	mov	r0, r3
   13bea:	f003 ffa7 	bl	17b3c <__aeabi_f2d>
   13bee:	4604      	mov	r4, r0
   13bf0:	460d      	mov	r5, r1
   13bf2:	6938      	ldr	r0, [r7, #16]
   13bf4:	f003 ffa2 	bl	17b3c <__aeabi_f2d>
   13bf8:	4602      	mov	r2, r0
   13bfa:	460b      	mov	r3, r1
   13bfc:	4610      	mov	r0, r2
   13bfe:	4619      	mov	r1, r3
   13c00:	a3af      	add	r3, pc, #700	; (adr r3, 13ec0 <auto_nav+0x1988>)
   13c02:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c06:	f003 fe3b 	bl	17880 <__adddf3>
   13c0a:	4602      	mov	r2, r0
   13c0c:	460b      	mov	r3, r1
   13c0e:	4610      	mov	r0, r2
   13c10:	4619      	mov	r1, r3
   13c12:	f002 f871 	bl	15cf8 <pp_sin>
   13c16:	4602      	mov	r2, r0
   13c18:	460b      	mov	r3, r1
   13c1a:	4610      	mov	r0, r2
   13c1c:	4619      	mov	r1, r3
   13c1e:	a3aa      	add	r3, pc, #680	; (adr r3, 13ec8 <auto_nav+0x1990>)
   13c20:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c24:	f003 ffde 	bl	17be4 <__aeabi_dmul>
   13c28:	4602      	mov	r2, r0
   13c2a:	460b      	mov	r3, r1
   13c2c:	4620      	mov	r0, r4
   13c2e:	4629      	mov	r1, r5
   13c30:	f003 fe26 	bl	17880 <__adddf3>
   13c34:	4602      	mov	r2, r0
   13c36:	460b      	mov	r3, r1
   13c38:	4610      	mov	r0, r2
   13c3a:	4619      	mov	r1, r3
   13c3c:	f004 fab4 	bl	181a8 <__aeabi_d2f>
   13c40:	4606      	mov	r6, r0
   13c42:	f240 5378 	movw	r3, #1400	; 0x578
   13c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13c4a:	685b      	ldr	r3, [r3, #4]
   13c4c:	4618      	mov	r0, r3
   13c4e:	f003 ff75 	bl	17b3c <__aeabi_f2d>
   13c52:	4604      	mov	r4, r0
   13c54:	460d      	mov	r5, r1
   13c56:	6938      	ldr	r0, [r7, #16]
   13c58:	f003 ff70 	bl	17b3c <__aeabi_f2d>
   13c5c:	4602      	mov	r2, r0
   13c5e:	460b      	mov	r3, r1
   13c60:	4610      	mov	r0, r2
   13c62:	4619      	mov	r1, r3
   13c64:	f002 f848 	bl	15cf8 <pp_sin>
   13c68:	4602      	mov	r2, r0
   13c6a:	460b      	mov	r3, r1
   13c6c:	4610      	mov	r0, r2
   13c6e:	4619      	mov	r1, r3
   13c70:	a395      	add	r3, pc, #596	; (adr r3, 13ec8 <auto_nav+0x1990>)
   13c72:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c76:	f003 ffb5 	bl	17be4 <__aeabi_dmul>
   13c7a:	4602      	mov	r2, r0
   13c7c:	460b      	mov	r3, r1
   13c7e:	4620      	mov	r0, r4
   13c80:	4629      	mov	r1, r5
   13c82:	f003 fdfd 	bl	17880 <__adddf3>
   13c86:	4602      	mov	r2, r0
   13c88:	460b      	mov	r3, r1
   13c8a:	4610      	mov	r0, r2
   13c8c:	4619      	mov	r1, r3
   13c8e:	f004 fa8b 	bl	181a8 <__aeabi_d2f>
   13c92:	4603      	mov	r3, r0
   13c94:	4630      	mov	r0, r6
   13c96:	4619      	mov	r1, r3
   13c98:	f000 fe12 	bl	148c0 <fly_to_xy>
   13c9c:	6938      	ldr	r0, [r7, #16]
   13c9e:	f003 ff4d 	bl	17b3c <__aeabi_f2d>
   13ca2:	4602      	mov	r2, r0
   13ca4:	460b      	mov	r3, r1
   13ca6:	a186      	add	r1, pc, #536	; (adr r1, 13ec0 <auto_nav+0x1988>)
   13ca8:	e9d1 0100 	ldrd	r0, r1, [r1]
   13cac:	f003 fde6 	bl	1787c <__aeabi_dsub>
   13cb0:	4602      	mov	r2, r0
   13cb2:	460b      	mov	r3, r1
   13cb4:	4610      	mov	r0, r2
   13cb6:	4619      	mov	r1, r3
   13cb8:	a385      	add	r3, pc, #532	; (adr r3, 13ed0 <auto_nav+0x1998>)
   13cba:	e9d3 2300 	ldrd	r2, r3, [r3]
   13cbe:	f004 f8bb 	bl	17e38 <__aeabi_ddiv>
   13cc2:	4602      	mov	r2, r0
   13cc4:	460b      	mov	r3, r1
   13cc6:	4610      	mov	r0, r2
   13cc8:	4619      	mov	r1, r3
   13cca:	f04f 0200 	mov.w	r2, #0
   13cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13cd2:	f2c4 0366 	movt	r3, #16486	; 0x4066
   13cd6:	f003 ff85 	bl	17be4 <__aeabi_dmul>
   13cda:	4602      	mov	r2, r0
   13cdc:	460b      	mov	r3, r1
   13cde:	4610      	mov	r0, r2
   13ce0:	4619      	mov	r1, r3
   13ce2:	f004 fa61 	bl	181a8 <__aeabi_d2f>
   13ce6:	4602      	mov	r2, r0
   13ce8:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13cec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13cf0:	601a      	str	r2, [r3, #0]
   13cf2:	e012      	b.n	13d1a <auto_nav+0x17e2>
   13cf4:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13cf8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13cfc:	681b      	ldr	r3, [r3, #0]
   13cfe:	4618      	mov	r0, r3
   13d00:	f04f 0100 	mov.w	r1, #0
   13d04:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13d08:	f004 faa4 	bl	18254 <__addsf3>
   13d0c:	4603      	mov	r3, r0
   13d0e:	461a      	mov	r2, r3
   13d10:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13d14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d18:	601a      	str	r2, [r3, #0]
   13d1a:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13d1e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d22:	681b      	ldr	r3, [r3, #0]
   13d24:	4618      	mov	r0, r3
   13d26:	f04f 0100 	mov.w	r1, #0
   13d2a:	f004 fd39 	bl	187a0 <__aeabi_fcmplt>
   13d2e:	4603      	mov	r3, r0
   13d30:	2b00      	cmp	r3, #0
   13d32:	d1df      	bne.n	13cf4 <auto_nav+0x17bc>
   13d34:	e012      	b.n	13d5c <auto_nav+0x1824>
   13d36:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13d3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d3e:	681b      	ldr	r3, [r3, #0]
   13d40:	4618      	mov	r0, r3
   13d42:	f04f 0100 	mov.w	r1, #0
   13d46:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13d4a:	f004 fa81 	bl	18250 <__aeabi_fsub>
   13d4e:	4603      	mov	r3, r0
   13d50:	461a      	mov	r2, r3
   13d52:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13d56:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d5a:	601a      	str	r2, [r3, #0]
   13d5c:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   13d60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d64:	681b      	ldr	r3, [r3, #0]
   13d66:	4618      	mov	r0, r3
   13d68:	f04f 0100 	mov.w	r1, #0
   13d6c:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   13d70:	f004 fd2a 	bl	187c8 <__aeabi_fcmpge>
   13d74:	4603      	mov	r3, r0
   13d76:	2b00      	cmp	r3, #0
   13d78:	d1dd      	bne.n	13d36 <auto_nav+0x17fe>
        return;
   13d7a:	f000 bcaf 	b.w	146dc <auto_nav+0x21a4>
    }
    else if (nav_stage == 1)
   13d7e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13d82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d86:	781b      	ldrb	r3, [r3, #0]
   13d88:	2b01      	cmp	r3, #1
   13d8a:	f040 84a7 	bne.w	146dc <auto_nav+0x21a4>
    {
        nav_stage =1;
   13d8e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13d92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13d96:	2201      	movs	r2, #1
   13d98:	701a      	strb	r2, [r3, #0]
        NextBlock()
   13d9a:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13d9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13da2:	781b      	ldrb	r3, [r3, #0]
   13da4:	3301      	adds	r3, #1
   13da6:	b2da      	uxtb	r2, r3
   13da8:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13dac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13db0:	701a      	strb	r2, [r3, #0]
   13db2:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13db6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dba:	2200      	movs	r2, #0
   13dbc:	701a      	strb	r2, [r3, #0]
   13dbe:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13dc2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dc6:	2200      	movs	r2, #0
   13dc8:	801a      	strh	r2, [r3, #0]
   13dca:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13dce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dd2:	681a      	ldr	r2, [r3, #0]
   13dd4:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13dd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ddc:	601a      	str	r2, [r3, #0]
   13dde:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13de2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13de6:	681a      	ldr	r2, [r3, #0]
   13de8:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13dec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13df0:	601a      	str	r2, [r3, #0]
   13df2:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13df6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13dfa:	2200      	movs	r2, #0
   13dfc:	801a      	strh	r2, [r3, #0]
   13dfe:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13e02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e06:	f04f 0200 	mov.w	r2, #0
   13e0a:	601a      	str	r2, [r3, #0]
   13e0c:	f000 bc66 	b.w	146dc <auto_nav+0x21a4>
    }
    else {}
}
else if (nav_block == 5)
   13e10:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13e14:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e18:	781b      	ldrb	r3, [r3, #0]
   13e1a:	2b05      	cmp	r3, #5
   13e1c:	f040 845e 	bne.w	146dc <auto_nav+0x21a4>
{
    nav_block = 5;
   13e20:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13e24:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e28:	2205      	movs	r2, #5
   13e2a:	701a      	strb	r2, [r3, #0]
    if RcEvent1() { GotoBlock(1) }
   13e2c:	f24c 5330 	movw	r3, #50480	; 0xc530
   13e30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e34:	781b      	ldrb	r3, [r3, #0]
   13e36:	2b00      	cmp	r3, #0
   13e38:	d007      	beq.n	13e4a <auto_nav+0x1912>
   13e3a:	f24c 5330 	movw	r3, #50480	; 0xc530
   13e3e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e42:	2200      	movs	r2, #0
   13e44:	701a      	strb	r2, [r3, #0]
   13e46:	2301      	movs	r3, #1
   13e48:	e000      	b.n	13e4c <auto_nav+0x1914>
   13e4a:	2300      	movs	r3, #0
   13e4c:	2b00      	cmp	r3, #0
   13e4e:	d043      	beq.n	13ed8 <auto_nav+0x19a0>
   13e50:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   13e54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e58:	2201      	movs	r2, #1
   13e5a:	701a      	strb	r2, [r3, #0]
   13e5c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13e60:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e64:	2200      	movs	r2, #0
   13e66:	701a      	strb	r2, [r3, #0]
   13e68:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   13e6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e70:	2200      	movs	r2, #0
   13e72:	801a      	strh	r2, [r3, #0]
   13e74:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13e78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e7c:	681a      	ldr	r2, [r3, #0]
   13e7e:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13e82:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e86:	601a      	str	r2, [r3, #0]
   13e88:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13e8c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e90:	681a      	ldr	r2, [r3, #0]
   13e92:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13e96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13e9a:	601a      	str	r2, [r3, #0]
   13e9c:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13ea0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ea4:	2200      	movs	r2, #0
   13ea6:	801a      	strh	r2, [r3, #0]
   13ea8:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13eac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13eb0:	f04f 0200 	mov.w	r2, #0
   13eb4:	601a      	str	r2, [r3, #0]
   13eb6:	f000 bc11 	b.w	146dc <auto_nav+0x21a4>
   13eba:	bf00      	nop
   13ebc:	f3af 8000 	nop.w
   13ec0:	54442d18 	.word	0x54442d18
   13ec4:	3ff921fb 	.word	0x3ff921fb
   13ec8:	00000000 	.word	0x00000000
   13ecc:	4062c000 	.word	0x4062c000
   13ed0:	54442d18 	.word	0x54442d18
   13ed4:	400921fb 	.word	0x400921fb
    if(nav_stage == 0) {
   13ed8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13edc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13ee0:	781b      	ldrb	r3, [r3, #0]
   13ee2:	2b00      	cmp	r3, #0
   13ee4:	d133      	bne.n	13f4e <auto_nav+0x1a16>
       Label(while_7) 
       nav_stage = 0;
   13ee6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13eea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13eee:	2200      	movs	r2, #0
   13ef0:	701a      	strb	r2, [r3, #0]
      if (! (TRUE)) Goto(endwhile_8) else NextStage();}
   13ef2:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13ef6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13efa:	781b      	ldrb	r3, [r3, #0]
   13efc:	3301      	adds	r3, #1
   13efe:	b2da      	uxtb	r2, r3
   13f00:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13f04:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f08:	701a      	strb	r2, [r3, #0]
   13f0a:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13f0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f12:	681a      	ldr	r2, [r3, #0]
   13f14:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   13f18:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f1c:	601a      	str	r2, [r3, #0]
   13f1e:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13f22:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f26:	681a      	ldr	r2, [r3, #0]
   13f28:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   13f2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f30:	601a      	str	r2, [r3, #0]
   13f32:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   13f36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f3a:	2200      	movs	r2, #0
   13f3c:	801a      	strh	r2, [r3, #0]
   13f3e:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   13f42:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f46:	f04f 0200 	mov.w	r2, #0
   13f4a:	601a      	str	r2, [r3, #0]
   13f4c:	e3c6      	b.n	146dc <auto_nav+0x21a4>
     
    else if (nav_stage == 1)
   13f4e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13f52:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f56:	781b      	ldrb	r3, [r3, #0]
   13f58:	2b01      	cmp	r3, #1
   13f5a:	f040 81b5 	bne.w	142c8 <auto_nav+0x1d90>
    {
        nav_stage =1;
   13f5e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   13f62:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f66:	2201      	movs	r2, #1
   13f68:	701a      	strb	r2, [r3, #0]
        auto_pitch = FALSE;
   13f6a:	f24c 532f 	movw	r3, #50479	; 0xc52f
   13f6e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f72:	2200      	movs	r2, #0
   13f74:	701a      	strb	r2, [r3, #0]
        nav_pitch = 0.000000;
   13f76:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   13f7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f7e:	f04f 0200 	mov.w	r2, #0
   13f82:	601a      	str	r2, [r3, #0]
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
   13f84:	f24c 532d 	movw	r3, #50477	; 0xc52d
   13f88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13f8c:	2203      	movs	r2, #3
   13f8e:	701a      	strb	r2, [r3, #0]
        desired_altitude = waypoints[1].a;
   13f90:	f240 5378 	movw	r3, #1400	; 0x578
   13f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13f98:	695a      	ldr	r2, [r3, #20]
   13f9a:	f240 5374 	movw	r3, #1396	; 0x574
   13f9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fa2:	601a      	str	r2, [r3, #0]
        pre_climb = 0.;
   13fa4:	f64c 0394 	movw	r3, #51348	; 0xc894
   13fa8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fac:	f04f 0200 	mov.w	r2, #0
   13fb0:	601a      	str	r2, [r3, #0]
        Circle(1, 100);
   13fb2:	f64c 3300 	movw	r3, #51968	; 0xcb00
   13fb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fba:	681a      	ldr	r2, [r3, #0]
   13fbc:	f240 5378 	movw	r3, #1400	; 0x578
   13fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fc4:	691b      	ldr	r3, [r3, #16]
   13fc6:	4610      	mov	r0, r2
   13fc8:	4619      	mov	r1, r3
   13fca:	f004 f941 	bl	18250 <__aeabi_fsub>
   13fce:	4603      	mov	r3, r0
   13fd0:	4618      	mov	r0, r3
   13fd2:	f003 fdb3 	bl	17b3c <__aeabi_f2d>
   13fd6:	4604      	mov	r4, r0
   13fd8:	460d      	mov	r5, r1
   13fda:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   13fde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   13fe2:	681a      	ldr	r2, [r3, #0]
   13fe4:	f240 5378 	movw	r3, #1400	; 0x578
   13fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13fec:	68db      	ldr	r3, [r3, #12]
   13fee:	4610      	mov	r0, r2
   13ff0:	4619      	mov	r1, r3
   13ff2:	f004 f92d 	bl	18250 <__aeabi_fsub>
   13ff6:	4603      	mov	r3, r0
   13ff8:	4618      	mov	r0, r3
   13ffa:	f003 fd9f 	bl	17b3c <__aeabi_f2d>
   13ffe:	4602      	mov	r2, r0
   14000:	460b      	mov	r3, r1
   14002:	4620      	mov	r0, r4
   14004:	4629      	mov	r1, r5
   14006:	f001 fdb7 	bl	15b78 <pp_atan2>
   1400a:	4602      	mov	r2, r0
   1400c:	460b      	mov	r3, r1
   1400e:	4610      	mov	r0, r2
   14010:	4619      	mov	r1, r3
   14012:	f004 f8c9 	bl	181a8 <__aeabi_d2f>
   14016:	4603      	mov	r3, r0
   14018:	60fb      	str	r3, [r7, #12]
   1401a:	68f8      	ldr	r0, [r7, #12]
   1401c:	f003 fd8e 	bl	17b3c <__aeabi_f2d>
   14020:	4604      	mov	r4, r0
   14022:	460d      	mov	r5, r1
   14024:	f64c 3334 	movw	r3, #52020	; 0xcb34
   14028:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1402c:	681b      	ldr	r3, [r3, #0]
   1402e:	4618      	mov	r0, r3
   14030:	f04f 0100 	mov.w	r1, #0
   14034:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   14038:	f004 fa14 	bl	18464 <__aeabi_fmul>
   1403c:	4603      	mov	r3, r0
   1403e:	4618      	mov	r0, r3
   14040:	f003 fd7c 	bl	17b3c <__aeabi_f2d>
   14044:	4602      	mov	r2, r0
   14046:	460b      	mov	r3, r1
   14048:	f04f 0000 	mov.w	r0, #0
   1404c:	f04f 0100 	mov.w	r1, #0
   14050:	f2c4 0114 	movt	r1, #16404	; 0x4014
   14054:	f003 fef0 	bl	17e38 <__aeabi_ddiv>
   14058:	4602      	mov	r2, r0
   1405a:	460b      	mov	r3, r1
   1405c:	4620      	mov	r0, r4
   1405e:	4629      	mov	r1, r5
   14060:	f003 fc0e 	bl	17880 <__adddf3>
   14064:	4602      	mov	r2, r0
   14066:	460b      	mov	r3, r1
   14068:	4610      	mov	r0, r2
   1406a:	4619      	mov	r1, r3
   1406c:	f004 f89c 	bl	181a8 <__aeabi_d2f>
   14070:	4603      	mov	r3, r0
   14072:	60bb      	str	r3, [r7, #8]
   14074:	f240 5378 	movw	r3, #1400	; 0x578
   14078:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1407c:	68db      	ldr	r3, [r3, #12]
   1407e:	4618      	mov	r0, r3
   14080:	f003 fd5c 	bl	17b3c <__aeabi_f2d>
   14084:	4604      	mov	r4, r0
   14086:	460d      	mov	r5, r1
   14088:	68b8      	ldr	r0, [r7, #8]
   1408a:	f003 fd57 	bl	17b3c <__aeabi_f2d>
   1408e:	4602      	mov	r2, r0
   14090:	460b      	mov	r3, r1
   14092:	4610      	mov	r0, r2
   14094:	4619      	mov	r1, r3
   14096:	a388      	add	r3, pc, #544	; (adr r3, 142b8 <auto_nav+0x1d80>)
   14098:	e9d3 2300 	ldrd	r2, r3, [r3]
   1409c:	f003 fbf0 	bl	17880 <__adddf3>
   140a0:	4602      	mov	r2, r0
   140a2:	460b      	mov	r3, r1
   140a4:	4610      	mov	r0, r2
   140a6:	4619      	mov	r1, r3
   140a8:	f001 fe26 	bl	15cf8 <pp_sin>
   140ac:	4602      	mov	r2, r0
   140ae:	460b      	mov	r3, r1
   140b0:	4610      	mov	r0, r2
   140b2:	4619      	mov	r1, r3
   140b4:	f04f 0200 	mov.w	r2, #0
   140b8:	f04f 0300 	mov.w	r3, #0
   140bc:	f2c4 0359 	movt	r3, #16473	; 0x4059
   140c0:	f003 fd90 	bl	17be4 <__aeabi_dmul>
   140c4:	4602      	mov	r2, r0
   140c6:	460b      	mov	r3, r1
   140c8:	4620      	mov	r0, r4
   140ca:	4629      	mov	r1, r5
   140cc:	f003 fbd8 	bl	17880 <__adddf3>
   140d0:	4602      	mov	r2, r0
   140d2:	460b      	mov	r3, r1
   140d4:	4610      	mov	r0, r2
   140d6:	4619      	mov	r1, r3
   140d8:	f004 f866 	bl	181a8 <__aeabi_d2f>
   140dc:	4606      	mov	r6, r0
   140de:	f240 5378 	movw	r3, #1400	; 0x578
   140e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   140e6:	691b      	ldr	r3, [r3, #16]
   140e8:	4618      	mov	r0, r3
   140ea:	f003 fd27 	bl	17b3c <__aeabi_f2d>
   140ee:	4604      	mov	r4, r0
   140f0:	460d      	mov	r5, r1
   140f2:	68b8      	ldr	r0, [r7, #8]
   140f4:	f003 fd22 	bl	17b3c <__aeabi_f2d>
   140f8:	4602      	mov	r2, r0
   140fa:	460b      	mov	r3, r1
   140fc:	4610      	mov	r0, r2
   140fe:	4619      	mov	r1, r3
   14100:	f001 fdfa 	bl	15cf8 <pp_sin>
   14104:	4602      	mov	r2, r0
   14106:	460b      	mov	r3, r1
   14108:	4610      	mov	r0, r2
   1410a:	4619      	mov	r1, r3
   1410c:	f04f 0200 	mov.w	r2, #0
   14110:	f04f 0300 	mov.w	r3, #0
   14114:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14118:	f003 fd64 	bl	17be4 <__aeabi_dmul>
   1411c:	4602      	mov	r2, r0
   1411e:	460b      	mov	r3, r1
   14120:	4620      	mov	r0, r4
   14122:	4629      	mov	r1, r5
   14124:	f003 fbac 	bl	17880 <__adddf3>
   14128:	4602      	mov	r2, r0
   1412a:	460b      	mov	r3, r1
   1412c:	4610      	mov	r0, r2
   1412e:	4619      	mov	r1, r3
   14130:	f004 f83a 	bl	181a8 <__aeabi_d2f>
   14134:	4603      	mov	r3, r0
   14136:	4630      	mov	r0, r6
   14138:	4619      	mov	r1, r3
   1413a:	f000 fbc1 	bl	148c0 <fly_to_xy>
   1413e:	68b8      	ldr	r0, [r7, #8]
   14140:	f003 fcfc 	bl	17b3c <__aeabi_f2d>
   14144:	4602      	mov	r2, r0
   14146:	460b      	mov	r3, r1
   14148:	a15b      	add	r1, pc, #364	; (adr r1, 142b8 <auto_nav+0x1d80>)
   1414a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1414e:	f003 fb95 	bl	1787c <__aeabi_dsub>
   14152:	4602      	mov	r2, r0
   14154:	460b      	mov	r3, r1
   14156:	4610      	mov	r0, r2
   14158:	4619      	mov	r1, r3
   1415a:	a359      	add	r3, pc, #356	; (adr r3, 142c0 <auto_nav+0x1d88>)
   1415c:	e9d3 2300 	ldrd	r2, r3, [r3]
   14160:	f003 fe6a 	bl	17e38 <__aeabi_ddiv>
   14164:	4602      	mov	r2, r0
   14166:	460b      	mov	r3, r1
   14168:	4610      	mov	r0, r2
   1416a:	4619      	mov	r1, r3
   1416c:	f04f 0200 	mov.w	r2, #0
   14170:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   14174:	f2c4 0366 	movt	r3, #16486	; 0x4066
   14178:	f003 fd34 	bl	17be4 <__aeabi_dmul>
   1417c:	4602      	mov	r2, r0
   1417e:	460b      	mov	r3, r1
   14180:	4610      	mov	r0, r2
   14182:	4619      	mov	r1, r3
   14184:	f004 f810 	bl	181a8 <__aeabi_d2f>
   14188:	4602      	mov	r2, r0
   1418a:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1418e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14192:	601a      	str	r2, [r3, #0]
   14194:	e012      	b.n	141bc <auto_nav+0x1c84>
   14196:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1419a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1419e:	681b      	ldr	r3, [r3, #0]
   141a0:	4618      	mov	r0, r3
   141a2:	f04f 0100 	mov.w	r1, #0
   141a6:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   141aa:	f004 f853 	bl	18254 <__addsf3>
   141ae:	4603      	mov	r3, r0
   141b0:	461a      	mov	r2, r3
   141b2:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   141b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   141ba:	601a      	str	r2, [r3, #0]
   141bc:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   141c0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   141c4:	681b      	ldr	r3, [r3, #0]
   141c6:	4618      	mov	r0, r3
   141c8:	f04f 0100 	mov.w	r1, #0
   141cc:	f004 fae8 	bl	187a0 <__aeabi_fcmplt>
   141d0:	4603      	mov	r3, r0
   141d2:	2b00      	cmp	r3, #0
   141d4:	d1df      	bne.n	14196 <auto_nav+0x1c5e>
   141d6:	e012      	b.n	141fe <auto_nav+0x1cc6>
   141d8:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   141dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   141e0:	681b      	ldr	r3, [r3, #0]
   141e2:	4618      	mov	r0, r3
   141e4:	f04f 0100 	mov.w	r1, #0
   141e8:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   141ec:	f004 f830 	bl	18250 <__aeabi_fsub>
   141f0:	4603      	mov	r3, r0
   141f2:	461a      	mov	r2, r3
   141f4:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   141f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   141fc:	601a      	str	r2, [r3, #0]
   141fe:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14202:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14206:	681b      	ldr	r3, [r3, #0]
   14208:	4618      	mov	r0, r3
   1420a:	f04f 0100 	mov.w	r1, #0
   1420e:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14212:	f004 fad9 	bl	187c8 <__aeabi_fcmpge>
   14216:	4603      	mov	r3, r0
   14218:	2b00      	cmp	r3, #0
   1421a:	d1dd      	bne.n	141d8 <auto_nav+0x1ca0>
        if (Qdr(0)) NextStage();
   1421c:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14220:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14224:	681b      	ldr	r3, [r3, #0]
   14226:	4618      	mov	r0, r3
   14228:	f04f 0100 	mov.w	r1, #0
   1422c:	f004 fad6 	bl	187dc <__aeabi_fcmpgt>
   14230:	4603      	mov	r3, r0
   14232:	2b00      	cmp	r3, #0
   14234:	d100      	bne.n	14238 <auto_nav+0x1d00>
        return;
   14236:	e251      	b.n	146dc <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   14238:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1423c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14240:	681b      	ldr	r3, [r3, #0]
   14242:	4618      	mov	r0, r3
   14244:	f04f 0100 	mov.w	r1, #0
   14248:	f2c4 1120 	movt	r1, #16672	; 0x4120
   1424c:	f004 faa8 	bl	187a0 <__aeabi_fcmplt>
   14250:	4603      	mov	r3, r0
   14252:	2b00      	cmp	r3, #0
   14254:	d100      	bne.n	14258 <auto_nav+0x1d20>
        return;
   14256:	e241      	b.n	146dc <auto_nav+0x21a4>
        nav_pitch = 0.000000;
        vertical_mode = VERTICAL_MODE_AUTO_ALT;
        desired_altitude = waypoints[1].a;
        pre_climb = 0.;
        Circle(1, 100);
        if (Qdr(0)) NextStage();
   14258:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1425c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14260:	781b      	ldrb	r3, [r3, #0]
   14262:	3301      	adds	r3, #1
   14264:	b2da      	uxtb	r2, r3
   14266:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   1426a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1426e:	701a      	strb	r2, [r3, #0]
   14270:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14274:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14278:	681a      	ldr	r2, [r3, #0]
   1427a:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   1427e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14282:	601a      	str	r2, [r3, #0]
   14284:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14288:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1428c:	681a      	ldr	r2, [r3, #0]
   1428e:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   14292:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14296:	601a      	str	r2, [r3, #0]
   14298:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   1429c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142a0:	2200      	movs	r2, #0
   142a2:	801a      	strh	r2, [r3, #0]
   142a4:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   142a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142ac:	f04f 0200 	mov.w	r2, #0
   142b0:	601a      	str	r2, [r3, #0]
   142b2:	e213      	b.n	146dc <auto_nav+0x21a4>
   142b4:	f3af 8000 	nop.w
   142b8:	54442d18 	.word	0x54442d18
   142bc:	3ff921fb 	.word	0x3ff921fb
   142c0:	54442d18 	.word	0x54442d18
   142c4:	400921fb 	.word	0x400921fb
        return;
    }
    else if (nav_stage == 2)
   142c8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   142cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142d0:	781b      	ldrb	r3, [r3, #0]
   142d2:	2b02      	cmp	r3, #2
   142d4:	f040 81ad 	bne.w	14632 <auto_nav+0x20fa>
    {
         nav_stage = 2;
   142d8:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   142dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142e0:	2202      	movs	r2, #2
   142e2:	701a      	strb	r2, [r3, #0]
          auto_pitch = FALSE;
   142e4:	f24c 532f 	movw	r3, #50479	; 0xc52f
   142e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142ec:	2200      	movs	r2, #0
   142ee:	701a      	strb	r2, [r3, #0]
          nav_pitch = 0.000000;
   142f0:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   142f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   142f8:	f04f 0200 	mov.w	r2, #0
   142fc:	601a      	str	r2, [r3, #0]
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
   142fe:	f24c 532d 	movw	r3, #50477	; 0xc52d
   14302:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14306:	2203      	movs	r2, #3
   14308:	701a      	strb	r2, [r3, #0]
          desired_altitude = waypoints[4].a;
   1430a:	f240 5378 	movw	r3, #1400	; 0x578
   1430e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14312:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   14314:	f240 5374 	movw	r3, #1396	; 0x574
   14318:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1431c:	601a      	str	r2, [r3, #0]
          pre_climb = 0.;
   1431e:	f64c 0394 	movw	r3, #51348	; 0xc894
   14322:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14326:	f04f 0200 	mov.w	r2, #0
   1432a:	601a      	str	r2, [r3, #0]
          Circle(4, 100);
   1432c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14330:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14334:	681a      	ldr	r2, [r3, #0]
   14336:	f240 5378 	movw	r3, #1400	; 0x578
   1433a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1433e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14340:	4610      	mov	r0, r2
   14342:	4619      	mov	r1, r3
   14344:	f003 ff84 	bl	18250 <__aeabi_fsub>
   14348:	4603      	mov	r3, r0
   1434a:	4618      	mov	r0, r3
   1434c:	f003 fbf6 	bl	17b3c <__aeabi_f2d>
   14350:	4604      	mov	r4, r0
   14352:	460d      	mov	r5, r1
   14354:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14358:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1435c:	681a      	ldr	r2, [r3, #0]
   1435e:	f240 5378 	movw	r3, #1400	; 0x578
   14362:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14368:	4610      	mov	r0, r2
   1436a:	4619      	mov	r1, r3
   1436c:	f003 ff70 	bl	18250 <__aeabi_fsub>
   14370:	4603      	mov	r3, r0
   14372:	4618      	mov	r0, r3
   14374:	f003 fbe2 	bl	17b3c <__aeabi_f2d>
   14378:	4602      	mov	r2, r0
   1437a:	460b      	mov	r3, r1
   1437c:	4620      	mov	r0, r4
   1437e:	4629      	mov	r1, r5
   14380:	f001 fbfa 	bl	15b78 <pp_atan2>
   14384:	4602      	mov	r2, r0
   14386:	460b      	mov	r3, r1
   14388:	4610      	mov	r0, r2
   1438a:	4619      	mov	r1, r3
   1438c:	f003 ff0c 	bl	181a8 <__aeabi_d2f>
   14390:	4603      	mov	r3, r0
   14392:	607b      	str	r3, [r7, #4]
   14394:	6878      	ldr	r0, [r7, #4]
   14396:	f003 fbd1 	bl	17b3c <__aeabi_f2d>
   1439a:	4604      	mov	r4, r0
   1439c:	460d      	mov	r5, r1
   1439e:	f64c 3334 	movw	r3, #52020	; 0xcb34
   143a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   143a6:	681b      	ldr	r3, [r3, #0]
   143a8:	4618      	mov	r0, r3
   143aa:	f04f 0100 	mov.w	r1, #0
   143ae:	f2cc 21c8 	movt	r1, #49864	; 0xc2c8
   143b2:	f004 f857 	bl	18464 <__aeabi_fmul>
   143b6:	4603      	mov	r3, r0
   143b8:	4618      	mov	r0, r3
   143ba:	f003 fbbf 	bl	17b3c <__aeabi_f2d>
   143be:	4602      	mov	r2, r0
   143c0:	460b      	mov	r3, r1
   143c2:	f04f 0000 	mov.w	r0, #0
   143c6:	f04f 0100 	mov.w	r1, #0
   143ca:	f2c4 0114 	movt	r1, #16404	; 0x4014
   143ce:	f003 fd33 	bl	17e38 <__aeabi_ddiv>
   143d2:	4602      	mov	r2, r0
   143d4:	460b      	mov	r3, r1
   143d6:	4620      	mov	r0, r4
   143d8:	4629      	mov	r1, r5
   143da:	f003 fa51 	bl	17880 <__adddf3>
   143de:	4602      	mov	r2, r0
   143e0:	460b      	mov	r3, r1
   143e2:	4610      	mov	r0, r2
   143e4:	4619      	mov	r1, r3
   143e6:	f003 fedf 	bl	181a8 <__aeabi_d2f>
   143ea:	4603      	mov	r3, r0
   143ec:	603b      	str	r3, [r7, #0]
   143ee:	f240 5378 	movw	r3, #1400	; 0x578
   143f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   143f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   143f8:	4618      	mov	r0, r3
   143fa:	f003 fb9f 	bl	17b3c <__aeabi_f2d>
   143fe:	4604      	mov	r4, r0
   14400:	460d      	mov	r5, r1
   14402:	6838      	ldr	r0, [r7, #0]
   14404:	f003 fb9a 	bl	17b3c <__aeabi_f2d>
   14408:	4602      	mov	r2, r0
   1440a:	460b      	mov	r3, r1
   1440c:	4610      	mov	r0, r2
   1440e:	4619      	mov	r1, r3
   14410:	a3b5      	add	r3, pc, #724	; (adr r3, 146e8 <auto_nav+0x21b0>)
   14412:	e9d3 2300 	ldrd	r2, r3, [r3]
   14416:	f003 fa33 	bl	17880 <__adddf3>
   1441a:	4602      	mov	r2, r0
   1441c:	460b      	mov	r3, r1
   1441e:	4610      	mov	r0, r2
   14420:	4619      	mov	r1, r3
   14422:	f001 fc69 	bl	15cf8 <pp_sin>
   14426:	4602      	mov	r2, r0
   14428:	460b      	mov	r3, r1
   1442a:	4610      	mov	r0, r2
   1442c:	4619      	mov	r1, r3
   1442e:	f04f 0200 	mov.w	r2, #0
   14432:	f04f 0300 	mov.w	r3, #0
   14436:	f2c4 0359 	movt	r3, #16473	; 0x4059
   1443a:	f003 fbd3 	bl	17be4 <__aeabi_dmul>
   1443e:	4602      	mov	r2, r0
   14440:	460b      	mov	r3, r1
   14442:	4620      	mov	r0, r4
   14444:	4629      	mov	r1, r5
   14446:	f003 fa1b 	bl	17880 <__adddf3>
   1444a:	4602      	mov	r2, r0
   1444c:	460b      	mov	r3, r1
   1444e:	4610      	mov	r0, r2
   14450:	4619      	mov	r1, r3
   14452:	f003 fea9 	bl	181a8 <__aeabi_d2f>
   14456:	4606      	mov	r6, r0
   14458:	f240 5378 	movw	r3, #1400	; 0x578
   1445c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14462:	4618      	mov	r0, r3
   14464:	f003 fb6a 	bl	17b3c <__aeabi_f2d>
   14468:	4604      	mov	r4, r0
   1446a:	460d      	mov	r5, r1
   1446c:	6838      	ldr	r0, [r7, #0]
   1446e:	f003 fb65 	bl	17b3c <__aeabi_f2d>
   14472:	4602      	mov	r2, r0
   14474:	460b      	mov	r3, r1
   14476:	4610      	mov	r0, r2
   14478:	4619      	mov	r1, r3
   1447a:	f001 fc3d 	bl	15cf8 <pp_sin>
   1447e:	4602      	mov	r2, r0
   14480:	460b      	mov	r3, r1
   14482:	4610      	mov	r0, r2
   14484:	4619      	mov	r1, r3
   14486:	f04f 0200 	mov.w	r2, #0
   1448a:	f04f 0300 	mov.w	r3, #0
   1448e:	f2c4 0359 	movt	r3, #16473	; 0x4059
   14492:	f003 fba7 	bl	17be4 <__aeabi_dmul>
   14496:	4602      	mov	r2, r0
   14498:	460b      	mov	r3, r1
   1449a:	4620      	mov	r0, r4
   1449c:	4629      	mov	r1, r5
   1449e:	f003 f9ef 	bl	17880 <__adddf3>
   144a2:	4602      	mov	r2, r0
   144a4:	460b      	mov	r3, r1
   144a6:	4610      	mov	r0, r2
   144a8:	4619      	mov	r1, r3
   144aa:	f003 fe7d 	bl	181a8 <__aeabi_d2f>
   144ae:	4603      	mov	r3, r0
   144b0:	4630      	mov	r0, r6
   144b2:	4619      	mov	r1, r3
   144b4:	f000 fa04 	bl	148c0 <fly_to_xy>
   144b8:	6838      	ldr	r0, [r7, #0]
   144ba:	f003 fb3f 	bl	17b3c <__aeabi_f2d>
   144be:	4602      	mov	r2, r0
   144c0:	460b      	mov	r3, r1
   144c2:	a189      	add	r1, pc, #548	; (adr r1, 146e8 <auto_nav+0x21b0>)
   144c4:	e9d1 0100 	ldrd	r0, r1, [r1]
   144c8:	f003 f9d8 	bl	1787c <__aeabi_dsub>
   144cc:	4602      	mov	r2, r0
   144ce:	460b      	mov	r3, r1
   144d0:	4610      	mov	r0, r2
   144d2:	4619      	mov	r1, r3
   144d4:	a386      	add	r3, pc, #536	; (adr r3, 146f0 <auto_nav+0x21b8>)
   144d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   144da:	f003 fcad 	bl	17e38 <__aeabi_ddiv>
   144de:	4602      	mov	r2, r0
   144e0:	460b      	mov	r3, r1
   144e2:	4610      	mov	r0, r2
   144e4:	4619      	mov	r1, r3
   144e6:	f04f 0200 	mov.w	r2, #0
   144ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   144ee:	f2c4 0366 	movt	r3, #16486	; 0x4066
   144f2:	f003 fb77 	bl	17be4 <__aeabi_dmul>
   144f6:	4602      	mov	r2, r0
   144f8:	460b      	mov	r3, r1
   144fa:	4610      	mov	r0, r2
   144fc:	4619      	mov	r1, r3
   144fe:	f003 fe53 	bl	181a8 <__aeabi_d2f>
   14502:	4602      	mov	r2, r0
   14504:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14508:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1450c:	601a      	str	r2, [r3, #0]
   1450e:	e012      	b.n	14536 <auto_nav+0x1ffe>
   14510:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14514:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14518:	681b      	ldr	r3, [r3, #0]
   1451a:	4618      	mov	r0, r3
   1451c:	f04f 0100 	mov.w	r1, #0
   14520:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14524:	f003 fe96 	bl	18254 <__addsf3>
   14528:	4603      	mov	r3, r0
   1452a:	461a      	mov	r2, r3
   1452c:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14530:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14534:	601a      	str	r2, [r3, #0]
   14536:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1453a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1453e:	681b      	ldr	r3, [r3, #0]
   14540:	4618      	mov	r0, r3
   14542:	f04f 0100 	mov.w	r1, #0
   14546:	f004 f92b 	bl	187a0 <__aeabi_fcmplt>
   1454a:	4603      	mov	r3, r0
   1454c:	2b00      	cmp	r3, #0
   1454e:	d1df      	bne.n	14510 <auto_nav+0x1fd8>
   14550:	e012      	b.n	14578 <auto_nav+0x2040>
   14552:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14556:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1455a:	681b      	ldr	r3, [r3, #0]
   1455c:	4618      	mov	r0, r3
   1455e:	f04f 0100 	mov.w	r1, #0
   14562:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   14566:	f003 fe73 	bl	18250 <__aeabi_fsub>
   1456a:	4603      	mov	r3, r0
   1456c:	461a      	mov	r2, r3
   1456e:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   14572:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14576:	601a      	str	r2, [r3, #0]
   14578:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1457c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14580:	681b      	ldr	r3, [r3, #0]
   14582:	4618      	mov	r0, r3
   14584:	f04f 0100 	mov.w	r1, #0
   14588:	f2c4 31b4 	movt	r1, #17332	; 0x43b4
   1458c:	f004 f91c 	bl	187c8 <__aeabi_fcmpge>
   14590:	4603      	mov	r3, r0
   14592:	2b00      	cmp	r3, #0
   14594:	d1dd      	bne.n	14552 <auto_nav+0x201a>
          if (Qdr(180)) NextStage();
   14596:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   1459a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1459e:	681b      	ldr	r3, [r3, #0]
   145a0:	4618      	mov	r0, r3
   145a2:	f04f 0100 	mov.w	r1, #0
   145a6:	f2c4 3134 	movt	r1, #17204	; 0x4334
   145aa:	f004 f917 	bl	187dc <__aeabi_fcmpgt>
   145ae:	4603      	mov	r3, r0
   145b0:	2b00      	cmp	r3, #0
   145b2:	d100      	bne.n	145b6 <auto_nav+0x207e>
          return;
   145b4:	e092      	b.n	146dc <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   145b6:	f64c 03bc 	movw	r3, #51388	; 0xc8bc
   145ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145be:	681b      	ldr	r3, [r3, #0]
   145c0:	4618      	mov	r0, r3
   145c2:	f04f 0100 	mov.w	r1, #0
   145c6:	f2c4 313e 	movt	r1, #17214	; 0x433e
   145ca:	f004 f8e9 	bl	187a0 <__aeabi_fcmplt>
   145ce:	4603      	mov	r3, r0
   145d0:	2b00      	cmp	r3, #0
   145d2:	d100      	bne.n	145d6 <auto_nav+0x209e>
          return;
   145d4:	e082      	b.n	146dc <auto_nav+0x21a4>
          nav_pitch = 0.000000;
          vertical_mode = VERTICAL_MODE_AUTO_ALT;
          desired_altitude = waypoints[4].a;
          pre_climb = 0.;
          Circle(4, 100);
          if (Qdr(180)) NextStage();
   145d6:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   145da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145de:	781b      	ldrb	r3, [r3, #0]
   145e0:	3301      	adds	r3, #1
   145e2:	b2da      	uxtb	r2, r3
   145e4:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   145e8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145ec:	701a      	strb	r2, [r3, #0]
   145ee:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   145f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   145f6:	681a      	ldr	r2, [r3, #0]
   145f8:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   145fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14600:	601a      	str	r2, [r3, #0]
   14602:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14606:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1460a:	681a      	ldr	r2, [r3, #0]
   1460c:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   14610:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14614:	601a      	str	r2, [r3, #0]
   14616:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   1461a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1461e:	2200      	movs	r2, #0
   14620:	801a      	strh	r2, [r3, #0]
   14622:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   14626:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1462a:	f04f 0200 	mov.w	r2, #0
   1462e:	601a      	str	r2, [r3, #0]
   14630:	e054      	b.n	146dc <auto_nav+0x21a4>
          return;
    }
    else if (nav_stage == 3) 
   14632:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14636:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1463a:	781b      	ldrb	r3, [r3, #0]
   1463c:	2b03      	cmp	r3, #3
   1463e:	d106      	bne.n	1464e <auto_nav+0x2116>
    {
	  nav_stage = 3;
   14640:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14644:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14648:	2203      	movs	r2, #3
   1464a:	701a      	strb	r2, [r3, #0]
          Goto(while_7)
   1464c:	e44b      	b.n	13ee6 <auto_nav+0x19ae>
    }
    else if (nav_stage == 4)
   1464e:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14652:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14656:	781b      	ldrb	r3, [r3, #0]
   14658:	2b04      	cmp	r3, #4
   1465a:	d13f      	bne.n	146dc <auto_nav+0x21a4>
    {
	Label(endwhile_8)
	nav_stage = 4;
   1465c:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14660:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14664:	2204      	movs	r2, #4
   14666:	701a      	strb	r2, [r3, #0]
        NextBlock()
   14668:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   1466c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14670:	781b      	ldrb	r3, [r3, #0]
   14672:	3301      	adds	r3, #1
   14674:	b2da      	uxtb	r2, r3
   14676:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   1467a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1467e:	701a      	strb	r2, [r3, #0]
   14680:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14684:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14688:	2200      	movs	r2, #0
   1468a:	701a      	strb	r2, [r3, #0]
   1468c:	f64c 03b6 	movw	r3, #51382	; 0xc8b6
   14690:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14694:	2200      	movs	r2, #0
   14696:	801a      	strh	r2, [r3, #0]
   14698:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1469c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146a0:	681a      	ldr	r2, [r3, #0]
   146a2:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   146a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146aa:	601a      	str	r2, [r3, #0]
   146ac:	f64c 3300 	movw	r3, #51968	; 0xcb00
   146b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146b4:	681a      	ldr	r2, [r3, #0]
   146b6:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   146ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146be:	601a      	str	r2, [r3, #0]
   146c0:	f64c 03b4 	movw	r3, #51380	; 0xc8b4
   146c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146c8:	2200      	movs	r2, #0
   146ca:	801a      	strh	r2, [r3, #0]
   146cc:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
   146d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   146d4:	f04f 0200 	mov.w	r2, #0
   146d8:	601a      	str	r2, [r3, #0]
   146da:	bf00      	nop
    else { }
}
else { }

//#endif
}
   146dc:	372c      	adds	r7, #44	; 0x2c
   146de:	46bd      	mov	sp, r7
   146e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   146e2:	bf00      	nop
   146e4:	f3af 8000 	nop.w
   146e8:	54442d18 	.word	0x54442d18
   146ec:	3ff921fb 	.word	0x3ff921fb
   146f0:	54442d18 	.word	0x54442d18
   146f4:	400921fb 	.word	0x400921fb

000146f8 <approaching>:
const uint8_t nb_waypoint = NB_WAYPOINT;

struct point waypoints[NB_WAYPOINT+1] = WAYPOINTS;

static float carrot;
static bool_t approaching(uint8_t wp) {
   146f8:	b590      	push	{r4, r7, lr}
   146fa:	b087      	sub	sp, #28
   146fc:	af00      	add	r7, sp, #0
   146fe:	4603      	mov	r3, r0
   14700:	71fb      	strb	r3, [r7, #7]
  float pw_x = waypoints[wp].x - estimator_x;
   14702:	79f9      	ldrb	r1, [r7, #7]
   14704:	f240 5278 	movw	r2, #1400	; 0x578
   14708:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1470c:	460b      	mov	r3, r1
   1470e:	005b      	lsls	r3, r3, #1
   14710:	440b      	add	r3, r1
   14712:	009b      	lsls	r3, r3, #2
   14714:	4413      	add	r3, r2
   14716:	681a      	ldr	r2, [r3, #0]
   14718:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   1471c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14720:	681b      	ldr	r3, [r3, #0]
   14722:	4610      	mov	r0, r2
   14724:	4619      	mov	r1, r3
   14726:	f003 fd93 	bl	18250 <__aeabi_fsub>
   1472a:	4603      	mov	r3, r0
   1472c:	617b      	str	r3, [r7, #20]
  float pw_y = waypoints[wp].y - estimator_y;
   1472e:	79f9      	ldrb	r1, [r7, #7]
   14730:	f240 5278 	movw	r2, #1400	; 0x578
   14734:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14738:	460b      	mov	r3, r1
   1473a:	005b      	lsls	r3, r3, #1
   1473c:	440b      	add	r3, r1
   1473e:	009b      	lsls	r3, r3, #2
   14740:	4413      	add	r3, r2
   14742:	3304      	adds	r3, #4
   14744:	681a      	ldr	r2, [r3, #0]
   14746:	f64c 3300 	movw	r3, #51968	; 0xcb00
   1474a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1474e:	681b      	ldr	r3, [r3, #0]
   14750:	4610      	mov	r0, r2
   14752:	4619      	mov	r1, r3
   14754:	f003 fd7c 	bl	18250 <__aeabi_fsub>
   14758:	4603      	mov	r3, r0
   1475a:	613b      	str	r3, [r7, #16]
  float scal_prod;//changes for PowerPc Fev-06

  dist2_to_wp = pw_x*pw_x + pw_y *pw_y;
   1475c:	6978      	ldr	r0, [r7, #20]
   1475e:	6979      	ldr	r1, [r7, #20]
   14760:	f003 fe80 	bl	18464 <__aeabi_fmul>
   14764:	4603      	mov	r3, r0
   14766:	461c      	mov	r4, r3
   14768:	6938      	ldr	r0, [r7, #16]
   1476a:	6939      	ldr	r1, [r7, #16]
   1476c:	f003 fe7a 	bl	18464 <__aeabi_fmul>
   14770:	4603      	mov	r3, r0
   14772:	4620      	mov	r0, r4
   14774:	4619      	mov	r1, r3
   14776:	f003 fd6d 	bl	18254 <__addsf3>
   1477a:	4603      	mov	r3, r0
   1477c:	461a      	mov	r2, r3
   1477e:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   14782:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14786:	601a      	str	r2, [r3, #0]
  carrot = CARROT * estimator_hspeed_mod;
   14788:	f64c 3334 	movw	r3, #52020	; 0xcb34
   1478c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14790:	681b      	ldr	r3, [r3, #0]
   14792:	4618      	mov	r0, r3
   14794:	f04f 0100 	mov.w	r1, #0
   14798:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
   1479c:	f003 fe62 	bl	18464 <__aeabi_fmul>
   147a0:	4603      	mov	r3, r0
   147a2:	461a      	mov	r2, r3
   147a4:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   147a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147ac:	601a      	str	r2, [r3, #0]
  carrot = (carrot < 40 ? 40 : carrot);
   147ae:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   147b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147b6:	681b      	ldr	r3, [r3, #0]
   147b8:	4618      	mov	r0, r3
   147ba:	f04f 0100 	mov.w	r1, #0
   147be:	f2c4 2120 	movt	r1, #16928	; 0x4220
   147c2:	f003 ffed 	bl	187a0 <__aeabi_fcmplt>
   147c6:	4603      	mov	r3, r0
   147c8:	2b00      	cmp	r3, #0
   147ca:	d004      	beq.n	147d6 <approaching+0xde>
   147cc:	f04f 0200 	mov.w	r2, #0
   147d0:	f2c4 2220 	movt	r2, #16928	; 0x4220
   147d4:	e004      	b.n	147e0 <approaching+0xe8>
   147d6:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   147da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147de:	681a      	ldr	r2, [r3, #0]
   147e0:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   147e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147e8:	601a      	str	r2, [r3, #0]
  if (dist2_to_wp < carrot*carrot)
   147ea:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   147ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147f2:	681a      	ldr	r2, [r3, #0]
   147f4:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   147f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   147fc:	681b      	ldr	r3, [r3, #0]
   147fe:	4610      	mov	r0, r2
   14800:	4619      	mov	r1, r3
   14802:	f003 fe2f 	bl	18464 <__aeabi_fmul>
   14806:	4603      	mov	r3, r0
   14808:	461a      	mov	r2, r3
   1480a:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   1480e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14812:	681b      	ldr	r3, [r3, #0]
   14814:	4610      	mov	r0, r2
   14816:	4619      	mov	r1, r3
   14818:	f003 ffe0 	bl	187dc <__aeabi_fcmpgt>
   1481c:	4603      	mov	r3, r0
   1481e:	2b00      	cmp	r3, #0
   14820:	d001      	beq.n	14826 <approaching+0x12e>
    return TRUE;
   14822:	2301      	movs	r3, #1
   14824:	e048      	b.n	148b8 <approaching+0x1c0>

  scal_prod = (waypoints[wp].x - last_x) * pw_x + (waypoints[wp].y - last_y) * pw_y;
   14826:	79f9      	ldrb	r1, [r7, #7]
   14828:	f240 5278 	movw	r2, #1400	; 0x578
   1482c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14830:	460b      	mov	r3, r1
   14832:	005b      	lsls	r3, r3, #1
   14834:	440b      	add	r3, r1
   14836:	009b      	lsls	r3, r3, #2
   14838:	4413      	add	r3, r2
   1483a:	681a      	ldr	r2, [r3, #0]
   1483c:	f64c 03a4 	movw	r3, #51364	; 0xc8a4
   14840:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14844:	681b      	ldr	r3, [r3, #0]
   14846:	4610      	mov	r0, r2
   14848:	4619      	mov	r1, r3
   1484a:	f003 fd01 	bl	18250 <__aeabi_fsub>
   1484e:	4603      	mov	r3, r0
   14850:	4618      	mov	r0, r3
   14852:	6979      	ldr	r1, [r7, #20]
   14854:	f003 fe06 	bl	18464 <__aeabi_fmul>
   14858:	4603      	mov	r3, r0
   1485a:	461c      	mov	r4, r3
   1485c:	79f9      	ldrb	r1, [r7, #7]
   1485e:	f240 5278 	movw	r2, #1400	; 0x578
   14862:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14866:	460b      	mov	r3, r1
   14868:	005b      	lsls	r3, r3, #1
   1486a:	440b      	add	r3, r1
   1486c:	009b      	lsls	r3, r3, #2
   1486e:	4413      	add	r3, r2
   14870:	3304      	adds	r3, #4
   14872:	681a      	ldr	r2, [r3, #0]
   14874:	f64c 03a8 	movw	r3, #51368	; 0xc8a8
   14878:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1487c:	681b      	ldr	r3, [r3, #0]
   1487e:	4610      	mov	r0, r2
   14880:	4619      	mov	r1, r3
   14882:	f003 fce5 	bl	18250 <__aeabi_fsub>
   14886:	4603      	mov	r3, r0
   14888:	4618      	mov	r0, r3
   1488a:	6939      	ldr	r1, [r7, #16]
   1488c:	f003 fdea 	bl	18464 <__aeabi_fmul>
   14890:	4603      	mov	r3, r0
   14892:	4620      	mov	r0, r4
   14894:	4619      	mov	r1, r3
   14896:	f003 fcdd 	bl	18254 <__addsf3>
   1489a:	4603      	mov	r3, r0
   1489c:	60fb      	str	r3, [r7, #12]
  
  return (scal_prod < 0);
   1489e:	2301      	movs	r3, #1
   148a0:	461c      	mov	r4, r3
   148a2:	68f8      	ldr	r0, [r7, #12]
   148a4:	f04f 0100 	mov.w	r1, #0
   148a8:	f003 ff7a 	bl	187a0 <__aeabi_fcmplt>
   148ac:	4603      	mov	r3, r0
   148ae:	2b00      	cmp	r3, #0
   148b0:	d101      	bne.n	148b6 <approaching+0x1be>
   148b2:	2300      	movs	r3, #0
   148b4:	461c      	mov	r4, r3
   148b6:	b2e3      	uxtb	r3, r4
}
   148b8:	4618      	mov	r0, r3
   148ba:	371c      	adds	r7, #28
   148bc:	46bd      	mov	sp, r7
   148be:	bd90      	pop	{r4, r7, pc}

000148c0 <fly_to_xy>:

static inline void fly_to_xy(float x, float y) 
{ 
   148c0:	b5b0      	push	{r4, r5, r7, lr}
   148c2:	b082      	sub	sp, #8
   148c4:	af00      	add	r7, sp, #0
   148c6:	6078      	str	r0, [r7, #4]
   148c8:	6039      	str	r1, [r7, #0]
  desired_x = x;
   148ca:	f64c 03c0 	movw	r3, #51392	; 0xc8c0
   148ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148d2:	687a      	ldr	r2, [r7, #4]
   148d4:	601a      	str	r2, [r3, #0]
  desired_y = y;
   148d6:	f64c 03c4 	movw	r3, #51396	; 0xc8c4
   148da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148de:	683a      	ldr	r2, [r7, #0]
   148e0:	601a      	str	r2, [r3, #0]
  desired_course = M_PI/2.-atan2(y - estimator_y, x - estimator_x);
   148e2:	f64c 3300 	movw	r3, #51968	; 0xcb00
   148e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   148ea:	681b      	ldr	r3, [r3, #0]
   148ec:	6838      	ldr	r0, [r7, #0]
   148ee:	4619      	mov	r1, r3
   148f0:	f003 fcae 	bl	18250 <__aeabi_fsub>
   148f4:	4603      	mov	r3, r0
   148f6:	4618      	mov	r0, r3
   148f8:	f003 f920 	bl	17b3c <__aeabi_f2d>
   148fc:	4604      	mov	r4, r0
   148fe:	460d      	mov	r5, r1
   14900:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14904:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14908:	681b      	ldr	r3, [r3, #0]
   1490a:	6878      	ldr	r0, [r7, #4]
   1490c:	4619      	mov	r1, r3
   1490e:	f003 fc9f 	bl	18250 <__aeabi_fsub>
   14912:	4603      	mov	r3, r0
   14914:	4618      	mov	r0, r3
   14916:	f003 f911 	bl	17b3c <__aeabi_f2d>
   1491a:	4602      	mov	r2, r0
   1491c:	460b      	mov	r3, r1
   1491e:	4620      	mov	r0, r4
   14920:	4629      	mov	r1, r5
   14922:	f001 f929 	bl	15b78 <pp_atan2>
   14926:	4602      	mov	r2, r0
   14928:	460b      	mov	r3, r1
   1492a:	a10b      	add	r1, pc, #44	; (adr r1, 14958 <fly_to_xy+0x98>)
   1492c:	e9d1 0100 	ldrd	r0, r1, [r1]
   14930:	f002 ffa4 	bl	1787c <__aeabi_dsub>
   14934:	4602      	mov	r2, r0
   14936:	460b      	mov	r3, r1
   14938:	4610      	mov	r0, r2
   1493a:	4619      	mov	r1, r3
   1493c:	f003 fc34 	bl	181a8 <__aeabi_d2f>
   14940:	4602      	mov	r2, r0
   14942:	f64c 038c 	movw	r3, #51340	; 0xc88c
   14946:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1494a:	601a      	str	r2, [r3, #0]
}
   1494c:	3708      	adds	r7, #8
   1494e:	46bd      	mov	sp, r7
   14950:	bdb0      	pop	{r4, r5, r7, pc}
   14952:	bf00      	nop
   14954:	f3af 8000 	nop.w
   14958:	54442d18 	.word	0x54442d18
   1495c:	3ff921fb 	.word	0x3ff921fb

00014960 <fly_to>:

static void fly_to(uint8_t wp) { 
   14960:	b580      	push	{r7, lr}
   14962:	b082      	sub	sp, #8
   14964:	af00      	add	r7, sp, #0
   14966:	4603      	mov	r3, r0
   14968:	71fb      	strb	r3, [r7, #7]
  fly_to_xy(waypoints[wp].x, waypoints[wp].y);
   1496a:	79f9      	ldrb	r1, [r7, #7]
   1496c:	f240 5278 	movw	r2, #1400	; 0x578
   14970:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14974:	460b      	mov	r3, r1
   14976:	005b      	lsls	r3, r3, #1
   14978:	440b      	add	r3, r1
   1497a:	009b      	lsls	r3, r3, #2
   1497c:	4413      	add	r3, r2
   1497e:	6818      	ldr	r0, [r3, #0]
   14980:	79f9      	ldrb	r1, [r7, #7]
   14982:	f240 5278 	movw	r2, #1400	; 0x578
   14986:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1498a:	460b      	mov	r3, r1
   1498c:	005b      	lsls	r3, r3, #1
   1498e:	440b      	add	r3, r1
   14990:	009b      	lsls	r3, r3, #2
   14992:	4413      	add	r3, r2
   14994:	3304      	adds	r3, #4
   14996:	681b      	ldr	r3, [r3, #0]
   14998:	4619      	mov	r1, r3
   1499a:	f7ff ff91 	bl	148c0 <fly_to_xy>
}
   1499e:	3708      	adds	r7, #8
   149a0:	46bd      	mov	sp, r7
   149a2:	bd80      	pop	{r7, pc}

000149a4 <route_to>:

static float alpha, leg;
static void route_to(uint8_t _last_wp, uint8_t wp) 
{
   149a4:	b5b0      	push	{r4, r5, r7, lr}
   149a6:	b088      	sub	sp, #32
   149a8:	af00      	add	r7, sp, #0
   149aa:	4602      	mov	r2, r0
   149ac:	460b      	mov	r3, r1
   149ae:	71fa      	strb	r2, [r7, #7]
   149b0:	71bb      	strb	r3, [r7, #6]
  float last_wp_x = waypoints[_last_wp].x;
   149b2:	79f9      	ldrb	r1, [r7, #7]
   149b4:	f240 5278 	movw	r2, #1400	; 0x578
   149b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   149bc:	460b      	mov	r3, r1
   149be:	005b      	lsls	r3, r3, #1
   149c0:	440b      	add	r3, r1
   149c2:	009b      	lsls	r3, r3, #2
   149c4:	4413      	add	r3, r2
   149c6:	681b      	ldr	r3, [r3, #0]
   149c8:	61fb      	str	r3, [r7, #28]
  float last_wp_y = waypoints[_last_wp].y;
   149ca:	79f9      	ldrb	r1, [r7, #7]
   149cc:	f240 5278 	movw	r2, #1400	; 0x578
   149d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   149d4:	460b      	mov	r3, r1
   149d6:	005b      	lsls	r3, r3, #1
   149d8:	440b      	add	r3, r1
   149da:	009b      	lsls	r3, r3, #2
   149dc:	4413      	add	r3, r2
   149de:	3304      	adds	r3, #4
   149e0:	681b      	ldr	r3, [r3, #0]
   149e2:	61bb      	str	r3, [r7, #24]
  float leg_x = waypoints[wp].x - last_wp_x;
   149e4:	79b9      	ldrb	r1, [r7, #6]
   149e6:	f240 5278 	movw	r2, #1400	; 0x578
   149ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
   149ee:	460b      	mov	r3, r1
   149f0:	005b      	lsls	r3, r3, #1
   149f2:	440b      	add	r3, r1
   149f4:	009b      	lsls	r3, r3, #2
   149f6:	4413      	add	r3, r2
   149f8:	681b      	ldr	r3, [r3, #0]
   149fa:	4618      	mov	r0, r3
   149fc:	69f9      	ldr	r1, [r7, #28]
   149fe:	f003 fc27 	bl	18250 <__aeabi_fsub>
   14a02:	4603      	mov	r3, r0
   14a04:	617b      	str	r3, [r7, #20]
  float leg_y = waypoints[wp].y - last_wp_y;
   14a06:	79b9      	ldrb	r1, [r7, #6]
   14a08:	f240 5278 	movw	r2, #1400	; 0x578
   14a0c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a10:	460b      	mov	r3, r1
   14a12:	005b      	lsls	r3, r3, #1
   14a14:	440b      	add	r3, r1
   14a16:	009b      	lsls	r3, r3, #2
   14a18:	4413      	add	r3, r2
   14a1a:	3304      	adds	r3, #4
   14a1c:	681b      	ldr	r3, [r3, #0]
   14a1e:	4618      	mov	r0, r3
   14a20:	69b9      	ldr	r1, [r7, #24]
   14a22:	f003 fc15 	bl	18250 <__aeabi_fsub>
   14a26:	4603      	mov	r3, r0
   14a28:	613b      	str	r3, [r7, #16]
  float leg2 = leg_x * leg_x + leg_y * leg_y;
   14a2a:	6978      	ldr	r0, [r7, #20]
   14a2c:	6979      	ldr	r1, [r7, #20]
   14a2e:	f003 fd19 	bl	18464 <__aeabi_fmul>
   14a32:	4603      	mov	r3, r0
   14a34:	461c      	mov	r4, r3
   14a36:	6938      	ldr	r0, [r7, #16]
   14a38:	6939      	ldr	r1, [r7, #16]
   14a3a:	f003 fd13 	bl	18464 <__aeabi_fmul>
   14a3e:	4603      	mov	r3, r0
   14a40:	4620      	mov	r0, r4
   14a42:	4619      	mov	r1, r3
   14a44:	f003 fc06 	bl	18254 <__addsf3>
   14a48:	4603      	mov	r3, r0
   14a4a:	60fb      	str	r3, [r7, #12]
  alpha = ((estimator_x - last_wp_x) * leg_x + (estimator_y - last_wp_y) * leg_y) / leg2;
   14a4c:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14a50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a54:	681b      	ldr	r3, [r3, #0]
   14a56:	4618      	mov	r0, r3
   14a58:	69f9      	ldr	r1, [r7, #28]
   14a5a:	f003 fbf9 	bl	18250 <__aeabi_fsub>
   14a5e:	4603      	mov	r3, r0
   14a60:	4618      	mov	r0, r3
   14a62:	6979      	ldr	r1, [r7, #20]
   14a64:	f003 fcfe 	bl	18464 <__aeabi_fmul>
   14a68:	4603      	mov	r3, r0
   14a6a:	461c      	mov	r4, r3
   14a6c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14a70:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14a74:	681b      	ldr	r3, [r3, #0]
   14a76:	4618      	mov	r0, r3
   14a78:	69b9      	ldr	r1, [r7, #24]
   14a7a:	f003 fbe9 	bl	18250 <__aeabi_fsub>
   14a7e:	4603      	mov	r3, r0
   14a80:	4618      	mov	r0, r3
   14a82:	6939      	ldr	r1, [r7, #16]
   14a84:	f003 fcee 	bl	18464 <__aeabi_fmul>
   14a88:	4603      	mov	r3, r0
   14a8a:	4620      	mov	r0, r4
   14a8c:	4619      	mov	r1, r3
   14a8e:	f003 fbe1 	bl	18254 <__addsf3>
   14a92:	4603      	mov	r3, r0
   14a94:	4618      	mov	r0, r3
   14a96:	68f9      	ldr	r1, [r7, #12]
   14a98:	f003 fd98 	bl	185cc <__aeabi_fdiv>
   14a9c:	4603      	mov	r3, r0
   14a9e:	461a      	mov	r2, r3
   14aa0:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14aa4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14aa8:	601a      	str	r2, [r3, #0]
  alpha = Max(alpha, 0.);
   14aaa:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14aae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ab2:	681b      	ldr	r3, [r3, #0]
   14ab4:	4618      	mov	r0, r3
   14ab6:	f04f 0100 	mov.w	r1, #0
   14aba:	f003 fe85 	bl	187c8 <__aeabi_fcmpge>
   14abe:	4603      	mov	r3, r0
   14ac0:	2b00      	cmp	r3, #0
   14ac2:	d005      	beq.n	14ad0 <route_to+0x12c>
   14ac4:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14ac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14acc:	681a      	ldr	r2, [r3, #0]
   14ace:	e001      	b.n	14ad4 <route_to+0x130>
   14ad0:	f04f 0200 	mov.w	r2, #0
   14ad4:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14ad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14adc:	601a      	str	r2, [r3, #0]
  leg = sqrt(leg2);
   14ade:	68f8      	ldr	r0, [r7, #12]
   14ae0:	f003 f82c 	bl	17b3c <__aeabi_f2d>
   14ae4:	4602      	mov	r2, r0
   14ae6:	460b      	mov	r3, r1
   14ae8:	4610      	mov	r0, r2
   14aea:	4619      	mov	r1, r3
   14aec:	f001 f9f4 	bl	15ed8 <pp_sqrt>
   14af0:	4602      	mov	r2, r0
   14af2:	460b      	mov	r3, r1
   14af4:	4610      	mov	r0, r2
   14af6:	4619      	mov	r1, r3
   14af8:	f003 fb56 	bl	181a8 <__aeabi_d2f>
   14afc:	4602      	mov	r2, r0
   14afe:	f64c 03e8 	movw	r3, #51432	; 0xc8e8
   14b02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b06:	601a      	str	r2, [r3, #0]
  alpha += Max(carrot / leg, 0.); /* carrot computed in approaching() */
   14b08:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14b0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b10:	681b      	ldr	r3, [r3, #0]
   14b12:	4618      	mov	r0, r3
   14b14:	f003 f812 	bl	17b3c <__aeabi_f2d>
   14b18:	4604      	mov	r4, r0
   14b1a:	460d      	mov	r5, r1
   14b1c:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   14b20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b24:	681a      	ldr	r2, [r3, #0]
   14b26:	f64c 03e8 	movw	r3, #51432	; 0xc8e8
   14b2a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b2e:	681b      	ldr	r3, [r3, #0]
   14b30:	4610      	mov	r0, r2
   14b32:	4619      	mov	r1, r3
   14b34:	f003 fd4a 	bl	185cc <__aeabi_fdiv>
   14b38:	4603      	mov	r3, r0
   14b3a:	4618      	mov	r0, r3
   14b3c:	f04f 0100 	mov.w	r1, #0
   14b40:	f003 fe42 	bl	187c8 <__aeabi_fcmpge>
   14b44:	4603      	mov	r3, r0
   14b46:	2b00      	cmp	r3, #0
   14b48:	d014      	beq.n	14b74 <route_to+0x1d0>
   14b4a:	f64c 03e0 	movw	r3, #51424	; 0xc8e0
   14b4e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b52:	681a      	ldr	r2, [r3, #0]
   14b54:	f64c 03e8 	movw	r3, #51432	; 0xc8e8
   14b58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b5c:	681b      	ldr	r3, [r3, #0]
   14b5e:	4610      	mov	r0, r2
   14b60:	4619      	mov	r1, r3
   14b62:	f003 fd33 	bl	185cc <__aeabi_fdiv>
   14b66:	4603      	mov	r3, r0
   14b68:	4618      	mov	r0, r3
   14b6a:	f002 ffe7 	bl	17b3c <__aeabi_f2d>
   14b6e:	4602      	mov	r2, r0
   14b70:	460b      	mov	r3, r1
   14b72:	e003      	b.n	14b7c <route_to+0x1d8>
   14b74:	f04f 0200 	mov.w	r2, #0
   14b78:	f04f 0300 	mov.w	r3, #0
   14b7c:	4620      	mov	r0, r4
   14b7e:	4629      	mov	r1, r5
   14b80:	f002 fe7e 	bl	17880 <__adddf3>
   14b84:	4602      	mov	r2, r0
   14b86:	460b      	mov	r3, r1
   14b88:	4610      	mov	r0, r2
   14b8a:	4619      	mov	r1, r3
   14b8c:	f003 fb0c 	bl	181a8 <__aeabi_d2f>
   14b90:	4602      	mov	r2, r0
   14b92:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14b96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14b9a:	601a      	str	r2, [r3, #0]
  alpha = Min(1., alpha);
   14b9c:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14ba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ba4:	681b      	ldr	r3, [r3, #0]
   14ba6:	4618      	mov	r0, r3
   14ba8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   14bac:	f003 fe0c 	bl	187c8 <__aeabi_fcmpge>
   14bb0:	4603      	mov	r3, r0
   14bb2:	2b00      	cmp	r3, #0
   14bb4:	d002      	beq.n	14bbc <route_to+0x218>
   14bb6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
   14bba:	e004      	b.n	14bc6 <route_to+0x222>
   14bbc:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14bc0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bc4:	681a      	ldr	r2, [r3, #0]
   14bc6:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14bca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bce:	601a      	str	r2, [r3, #0]
  fly_to_xy(last_wp_x + alpha*leg_x, last_wp_y + alpha*leg_y);
   14bd0:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14bd4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bd8:	681b      	ldr	r3, [r3, #0]
   14bda:	4618      	mov	r0, r3
   14bdc:	6979      	ldr	r1, [r7, #20]
   14bde:	f003 fc41 	bl	18464 <__aeabi_fmul>
   14be2:	4603      	mov	r3, r0
   14be4:	4618      	mov	r0, r3
   14be6:	69f9      	ldr	r1, [r7, #28]
   14be8:	f003 fb34 	bl	18254 <__addsf3>
   14bec:	4603      	mov	r3, r0
   14bee:	461c      	mov	r4, r3
   14bf0:	f64c 03e4 	movw	r3, #51428	; 0xc8e4
   14bf4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14bf8:	681b      	ldr	r3, [r3, #0]
   14bfa:	4618      	mov	r0, r3
   14bfc:	6939      	ldr	r1, [r7, #16]
   14bfe:	f003 fc31 	bl	18464 <__aeabi_fmul>
   14c02:	4603      	mov	r3, r0
   14c04:	4618      	mov	r0, r3
   14c06:	69b9      	ldr	r1, [r7, #24]
   14c08:	f003 fb24 	bl	18254 <__addsf3>
   14c0c:	4603      	mov	r3, r0
   14c0e:	4620      	mov	r0, r4
   14c10:	4619      	mov	r1, r3
   14c12:	f7ff fe55 	bl	148c0 <fly_to_xy>
}
   14c16:	3720      	adds	r7, #32
   14c18:	46bd      	mov	sp, r7
   14c1a:	bdb0      	pop	{r4, r5, r7, pc}

00014c1c <compute_dist2_to_home>:
  float last_alt = waypoints[_last_wp].a;
  desired_altitude = last_alt + alpha * (waypoints[wp].a - last_alt);
  pre_climb = NOMINAL_AIRSPEED * (waypoints[wp].a - last_alt) / leg;
}*/

static inline void compute_dist2_to_home(void) {
   14c1c:	b590      	push	{r4, r7, lr}
   14c1e:	b083      	sub	sp, #12
   14c20:	af00      	add	r7, sp, #0
  float ph_x = waypoints[WP_HOME].x - estimator_x;
   14c22:	f240 5378 	movw	r3, #1400	; 0x578
   14c26:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c2a:	681a      	ldr	r2, [r3, #0]
   14c2c:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   14c30:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c34:	681b      	ldr	r3, [r3, #0]
   14c36:	4610      	mov	r0, r2
   14c38:	4619      	mov	r1, r3
   14c3a:	f003 fb09 	bl	18250 <__aeabi_fsub>
   14c3e:	4603      	mov	r3, r0
   14c40:	607b      	str	r3, [r7, #4]
  float ph_y = waypoints[WP_HOME].y - estimator_y;
   14c42:	f240 5378 	movw	r3, #1400	; 0x578
   14c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14c4a:	685a      	ldr	r2, [r3, #4]
   14c4c:	f64c 3300 	movw	r3, #51968	; 0xcb00
   14c50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c54:	681b      	ldr	r3, [r3, #0]
   14c56:	4610      	mov	r0, r2
   14c58:	4619      	mov	r1, r3
   14c5a:	f003 faf9 	bl	18250 <__aeabi_fsub>
   14c5e:	4603      	mov	r3, r0
   14c60:	603b      	str	r3, [r7, #0]
  dist2_to_home = ph_x*ph_x + ph_y *ph_y;
   14c62:	6878      	ldr	r0, [r7, #4]
   14c64:	6879      	ldr	r1, [r7, #4]
   14c66:	f003 fbfd 	bl	18464 <__aeabi_fmul>
   14c6a:	4603      	mov	r3, r0
   14c6c:	461c      	mov	r4, r3
   14c6e:	6838      	ldr	r0, [r7, #0]
   14c70:	6839      	ldr	r1, [r7, #0]
   14c72:	f003 fbf7 	bl	18464 <__aeabi_fmul>
   14c76:	4603      	mov	r3, r0
   14c78:	4620      	mov	r0, r4
   14c7a:	4619      	mov	r1, r3
   14c7c:	f003 faea 	bl	18254 <__addsf3>
   14c80:	4603      	mov	r3, r0
   14c82:	461a      	mov	r2, r3
   14c84:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   14c88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c8c:	601a      	str	r2, [r3, #0]
  too_far_from_home = dist2_to_home > (MAX_DIST_FROM_HOME*MAX_DIST_FROM_HOME);
   14c8e:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   14c92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14c96:	681b      	ldr	r3, [r3, #0]
   14c98:	2201      	movs	r2, #1
   14c9a:	4614      	mov	r4, r2
   14c9c:	4618      	mov	r0, r3
   14c9e:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   14ca2:	f6c4 0174 	movt	r1, #18548	; 0x4874
   14ca6:	f003 fd99 	bl	187dc <__aeabi_fcmpgt>
   14caa:	4603      	mov	r3, r0
   14cac:	2b00      	cmp	r3, #0
   14cae:	d101      	bne.n	14cb4 <compute_dist2_to_home+0x98>
   14cb0:	2300      	movs	r3, #0
   14cb2:	461c      	mov	r4, r3
   14cb4:	b2e3      	uxtb	r3, r4
   14cb6:	461a      	mov	r2, r3
   14cb8:	f64c 03dc 	movw	r3, #51420	; 0xc8dc
   14cbc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cc0:	701a      	strb	r2, [r3, #0]
}
   14cc2:	370c      	adds	r7, #12
   14cc4:	46bd      	mov	sp, r7
   14cc6:	bd90      	pop	{r4, r7, pc}

00014cc8 <nav_home>:

void nav_home(void) {
   14cc8:	b580      	push	{r7, lr}
   14cca:	af00      	add	r7, sp, #0
  //Circle(WP_HOME, 50); /* FIXME: radius should be defined elsewhere */
  nav_pitch = 0.; /* Nominal speed */ 
   14ccc:	f64c 03cc 	movw	r3, #51404	; 0xc8cc
   14cd0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14cd4:	f04f 0200 	mov.w	r2, #0
   14cd8:	601a      	str	r2, [r3, #0]
  vertical_mode = VERTICAL_MODE_AUTO_ALT;
   14cda:	f24c 532d 	movw	r3, #50477	; 0xc52d
   14cde:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14ce2:	2203      	movs	r2, #3
   14ce4:	701a      	strb	r2, [r3, #0]
  desired_altitude = GROUND_ALT+50;
   14ce6:	f240 5374 	movw	r3, #1396	; 0x574
   14cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14cee:	f04f 0200 	mov.w	r2, #0
   14cf2:	f2c4 322f 	movt	r2, #17199	; 0x432f
   14cf6:	601a      	str	r2, [r3, #0]
  compute_dist2_to_home();
   14cf8:	f7ff ff90 	bl	14c1c <compute_dist2_to_home>
  dist2_to_wp = dist2_to_home;
   14cfc:	f64c 03d8 	movw	r3, #51416	; 0xc8d8
   14d00:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d04:	681a      	ldr	r2, [r3, #0]
   14d06:	f64c 03d4 	movw	r3, #51412	; 0xc8d4
   14d0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d0e:	601a      	str	r2, [r3, #0]
}
   14d10:	bd80      	pop	{r7, pc}
   14d12:	bf00      	nop

00014d14 <nav_update>:

void nav_update(void) {
   14d14:	b580      	push	{r7, lr}
   14d16:	af00      	add	r7, sp, #0
  compute_dist2_to_home();
   14d18:	f7ff ff80 	bl	14c1c <compute_dist2_to_home>

  auto_nav();
   14d1c:	f7fd fc0c 	bl	12538 <auto_nav>
}
   14d20:	bd80      	pop	{r7, pc}
   14d22:	bf00      	nop

00014d24 <nav_init>:


void nav_init(void) {
   14d24:	b480      	push	{r7}
   14d26:	af00      	add	r7, sp, #0
  nav_block = 0;
   14d28:	f64c 03a1 	movw	r3, #51361	; 0xc8a1
   14d2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d30:	2200      	movs	r2, #0
   14d32:	701a      	strb	r2, [r3, #0]
  nav_stage = 0;
   14d34:	f64c 03a0 	movw	r3, #51360	; 0xc8a0
   14d38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d3c:	2200      	movs	r2, #0
   14d3e:	701a      	strb	r2, [r3, #0]
}
   14d40:	46bd      	mov	sp, r7
   14d42:	f85d 7b04 	ldr.w	r7, [sp], #4
   14d46:	4770      	bx	lr

00014d48 <uart0_transmit>:

static uint8_t           tx_head1; /* next free in buf */
static volatile uint8_t  tx_tail1; /* next char to send */
static uint8_t           tx_buf1[ TX_BUF_SIZE ];

void uart0_transmit( unsigned char data ) {
   14d48:	b480      	push	{r7}
   14d4a:	b083      	sub	sp, #12
   14d4c:	af00      	add	r7, sp, #0
   14d4e:	4603      	mov	r3, r0
   14d50:	71fb      	strb	r3, [r7, #7]
  if (UCSR0B & _BV(TXCIE)) {
   14d52:	f242 030a 	movw	r3, #8202	; 0x200a
   14d56:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14d5a:	781b      	ldrb	r3, [r3, #0]
   14d5c:	b2db      	uxtb	r3, r3
   14d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14d62:	2b00      	cmp	r3, #0
   14d64:	d028      	beq.n	14db8 <uart0_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail0 == tx_head0 + 1) { /* BUF_SIZE = 256 */
   14d66:	f64c 03f5 	movw	r3, #51445	; 0xc8f5
   14d6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d6e:	781b      	ldrb	r3, [r3, #0]
   14d70:	b2db      	uxtb	r3, r3
   14d72:	461a      	mov	r2, r3
   14d74:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14d78:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d7c:	781b      	ldrb	r3, [r3, #0]
   14d7e:	3301      	adds	r3, #1
   14d80:	429a      	cmp	r2, r3
   14d82:	d100      	bne.n	14d86 <uart0_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14d84:	e02c      	b.n	14de0 <uart0_transmit+0x98>
    }
    tx_buf0[tx_head0] = data;
   14d86:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14d8a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d8e:	781b      	ldrb	r3, [r3, #0]
   14d90:	461a      	mov	r2, r3
   14d92:	f64c 03f8 	movw	r3, #51448	; 0xc8f8
   14d96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14d9a:	79f9      	ldrb	r1, [r7, #7]
   14d9c:	5499      	strb	r1, [r3, r2]
    tx_head0++; /* BUF_SIZE = 256 */
   14d9e:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14da2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14da6:	781b      	ldrb	r3, [r3, #0]
   14da8:	3301      	adds	r3, #1
   14daa:	b2da      	uxtb	r2, r3
   14dac:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14db0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14db4:	701a      	strb	r2, [r3, #0]
   14db6:	e013      	b.n	14de0 <uart0_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR0 = data;
   14db8:	f242 030c 	movw	r3, #8204	; 0x200c
   14dbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dc0:	79fa      	ldrb	r2, [r7, #7]
   14dc2:	701a      	strb	r2, [r3, #0]
    sbi(UCSR0B, TXCIE);
   14dc4:	f242 030a 	movw	r3, #8202	; 0x200a
   14dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dcc:	f242 020a 	movw	r2, #8202	; 0x200a
   14dd0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14dd4:	7812      	ldrb	r2, [r2, #0]
   14dd6:	b2d2      	uxtb	r2, r2
   14dd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14ddc:	b2d2      	uxtb	r2, r2
   14dde:	701a      	strb	r2, [r3, #0]
  }
}
   14de0:	370c      	adds	r7, #12
   14de2:	46bd      	mov	sp, r7
   14de4:	f85d 7b04 	ldr.w	r7, [sp], #4
   14de8:	4770      	bx	lr
   14dea:	bf00      	nop

00014dec <uart1_transmit>:

void uart1_transmit( unsigned char data ) {
   14dec:	b480      	push	{r7}
   14dee:	b083      	sub	sp, #12
   14df0:	af00      	add	r7, sp, #0
   14df2:	4603      	mov	r3, r0
   14df4:	71fb      	strb	r3, [r7, #7]
  if (UCSR1B & _BV(TXCIE)) {
   14df6:	f242 039a 	movw	r3, #8346	; 0x209a
   14dfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14dfe:	781b      	ldrb	r3, [r3, #0]
   14e00:	b2db      	uxtb	r3, r3
   14e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14e06:	2b00      	cmp	r3, #0
   14e08:	d028      	beq.n	14e5c <uart1_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail1 == tx_head1 + 1) { /* BUF_SIZE = 256 */
   14e0a:	f64c 13f9 	movw	r3, #51705	; 0xc9f9
   14e0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e12:	781b      	ldrb	r3, [r3, #0]
   14e14:	b2db      	uxtb	r3, r3
   14e16:	461a      	mov	r2, r3
   14e18:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14e1c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e20:	781b      	ldrb	r3, [r3, #0]
   14e22:	3301      	adds	r3, #1
   14e24:	429a      	cmp	r2, r3
   14e26:	d100      	bne.n	14e2a <uart1_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   14e28:	e02c      	b.n	14e84 <uart1_transmit+0x98>
    }
    tx_buf1[tx_head1] = data;
   14e2a:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14e2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e32:	781b      	ldrb	r3, [r3, #0]
   14e34:	461a      	mov	r2, r3
   14e36:	f64c 13fc 	movw	r3, #51708	; 0xc9fc
   14e3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e3e:	79f9      	ldrb	r1, [r7, #7]
   14e40:	5499      	strb	r1, [r3, r2]
    tx_head1++; /* BUF_SIZE = 256 */
   14e42:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14e46:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e4a:	781b      	ldrb	r3, [r3, #0]
   14e4c:	3301      	adds	r3, #1
   14e4e:	b2da      	uxtb	r2, r3
   14e50:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14e54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14e58:	701a      	strb	r2, [r3, #0]
   14e5a:	e013      	b.n	14e84 <uart1_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR1 = data;
   14e5c:	f242 039c 	movw	r3, #8348	; 0x209c
   14e60:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e64:	79fa      	ldrb	r2, [r7, #7]
   14e66:	701a      	strb	r2, [r3, #0]
    sbi(UCSR1B, TXCIE);
   14e68:	f242 039a 	movw	r3, #8346	; 0x209a
   14e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14e70:	f242 029a 	movw	r2, #8346	; 0x209a
   14e74:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14e78:	7812      	ldrb	r2, [r2, #0]
   14e7a:	b2d2      	uxtb	r2, r2
   14e7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14e80:	b2d2      	uxtb	r2, r2
   14e82:	701a      	strb	r2, [r3, #0]
  }
}
   14e84:	370c      	adds	r7, #12
   14e86:	46bd      	mov	sp, r7
   14e88:	f85d 7b04 	ldr.w	r7, [sp], #4
   14e8c:	4770      	bx	lr
   14e8e:	bf00      	nop

00014e90 <uart0_print_string>:


void uart0_print_string(const uint8_t* s) {
   14e90:	b580      	push	{r7, lr}
   14e92:	b084      	sub	sp, #16
   14e94:	af00      	add	r7, sp, #0
   14e96:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   14e98:	2300      	movs	r3, #0
   14e9a:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   14e9c:	e009      	b.n	14eb2 <uart0_print_string+0x22>
    uart0_transmit(s[i]);
   14e9e:	7bfb      	ldrb	r3, [r7, #15]
   14ea0:	687a      	ldr	r2, [r7, #4]
   14ea2:	4413      	add	r3, r2
   14ea4:	781b      	ldrb	r3, [r3, #0]
   14ea6:	4618      	mov	r0, r3
   14ea8:	f7ff ff4e 	bl	14d48 <uart0_transmit>
    i++;
   14eac:	7bfb      	ldrb	r3, [r7, #15]
   14eae:	3301      	adds	r3, #1
   14eb0:	73fb      	strb	r3, [r7, #15]
}


void uart0_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   14eb2:	7bfb      	ldrb	r3, [r7, #15]
   14eb4:	687a      	ldr	r2, [r7, #4]
   14eb6:	4413      	add	r3, r2
   14eb8:	781b      	ldrb	r3, [r3, #0]
   14eba:	2b00      	cmp	r3, #0
   14ebc:	d1ef      	bne.n	14e9e <uart0_print_string+0xe>
    uart0_transmit(s[i]);
    i++;
  }
}
   14ebe:	3710      	adds	r7, #16
   14ec0:	46bd      	mov	sp, r7
   14ec2:	bd80      	pop	{r7, pc}

00014ec4 <uart0_print_hex>:

void uart0_print_hex(const uint8_t c) {
   14ec4:	b590      	push	{r4, r7, lr}
   14ec6:	b089      	sub	sp, #36	; 0x24
   14ec8:	af00      	add	r7, sp, #0
   14eca:	4603      	mov	r3, r0
   14ecc:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   14ece:	f648 2370 	movw	r3, #35440	; 0x8a70
   14ed2:	f2c0 0301 	movt	r3, #1
   14ed6:	f107 040c 	add.w	r4, r7, #12
   14eda:	6818      	ldr	r0, [r3, #0]
   14edc:	6859      	ldr	r1, [r3, #4]
   14ede:	689a      	ldr	r2, [r3, #8]
   14ee0:	68db      	ldr	r3, [r3, #12]
   14ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   14ee4:	79fb      	ldrb	r3, [r7, #7]
   14ee6:	091b      	lsrs	r3, r3, #4
   14ee8:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   14eea:	79fb      	ldrb	r3, [r7, #7]
   14eec:	f003 030f 	and.w	r3, r3, #15
   14ef0:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
    high = 15;
   14ef2:	230f      	movs	r3, #15
   14ef4:	77fb      	strb	r3, [r7, #31]
    low = 15;
   14ef6:	230f      	movs	r3, #15
   14ef8:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */
    uart0_transmit(hex[high]);
   14efa:	7ffb      	ldrb	r3, [r7, #31]
   14efc:	f107 0220 	add.w	r2, r7, #32
   14f00:	4413      	add	r3, r2
   14f02:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14f06:	4618      	mov	r0, r3
   14f08:	f7ff ff1e 	bl	14d48 <uart0_transmit>
  uart0_transmit(hex[low]);
   14f0c:	7fbb      	ldrb	r3, [r7, #30]
   14f0e:	f107 0220 	add.w	r2, r7, #32
   14f12:	4413      	add	r3, r2
   14f14:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   14f18:	4618      	mov	r0, r3
   14f1a:	f7ff ff15 	bl	14d48 <uart0_transmit>
}
   14f1e:	3724      	adds	r7, #36	; 0x24
   14f20:	46bd      	mov	sp, r7
   14f22:	bd90      	pop	{r4, r7, pc}

00014f24 <__vector_20>:


SIGNAL(SIG_UART0_TRANS) {
   14f24:	b480      	push	{r7}
   14f26:	af00      	add	r7, sp, #0
  if (tx_head0 == tx_tail0) {
   14f28:	f64c 03f4 	movw	r3, #51444	; 0xc8f4
   14f2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f30:	781a      	ldrb	r2, [r3, #0]
   14f32:	f64c 03f5 	movw	r3, #51445	; 0xc8f5
   14f36:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f3a:	781b      	ldrb	r3, [r3, #0]
   14f3c:	b2db      	uxtb	r3, r3
   14f3e:	429a      	cmp	r2, r3
   14f40:	d10e      	bne.n	14f60 <__vector_20+0x3c>
    /* Nothing more to send */
    cbi(UCSR0B, TXCIE); /* disable interrupt */
   14f42:	f242 030a 	movw	r3, #8202	; 0x200a
   14f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f4a:	f242 020a 	movw	r2, #8202	; 0x200a
   14f4e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14f52:	7812      	ldrb	r2, [r2, #0]
   14f54:	b2d2      	uxtb	r2, r2
   14f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14f5a:	b2d2      	uxtb	r2, r2
   14f5c:	701a      	strb	r2, [r3, #0]
   14f5e:	e01d      	b.n	14f9c <__vector_20+0x78>
  } else {
    UDR0 = tx_buf0[tx_tail0];
   14f60:	f242 030c 	movw	r3, #8204	; 0x200c
   14f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14f68:	f64c 02f5 	movw	r2, #51445	; 0xc8f5
   14f6c:	f2c2 0204 	movt	r2, #8196	; 0x2004
   14f70:	7812      	ldrb	r2, [r2, #0]
   14f72:	b2d2      	uxtb	r2, r2
   14f74:	4611      	mov	r1, r2
   14f76:	f64c 02f8 	movw	r2, #51448	; 0xc8f8
   14f7a:	f2c2 0204 	movt	r2, #8196	; 0x2004
   14f7e:	5c52      	ldrb	r2, [r2, r1]
   14f80:	701a      	strb	r2, [r3, #0]
    tx_tail0++; /* warning tx_buf_len is 256 */
   14f82:	f64c 03f5 	movw	r3, #51445	; 0xc8f5
   14f86:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f8a:	781b      	ldrb	r3, [r3, #0]
   14f8c:	b2db      	uxtb	r3, r3
   14f8e:	3301      	adds	r3, #1
   14f90:	b2da      	uxtb	r2, r3
   14f92:	f64c 03f5 	movw	r3, #51445	; 0xc8f5
   14f96:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14f9a:	701a      	strb	r2, [r3, #0]
  }
}
   14f9c:	46bd      	mov	sp, r7
   14f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
   14fa2:	4770      	bx	lr

00014fa4 <__vector_32>:

SIGNAL(SIG_UART1_TRANS) {
   14fa4:	b480      	push	{r7}
   14fa6:	af00      	add	r7, sp, #0
  if (tx_head1 == tx_tail1) {
   14fa8:	f64c 13f8 	movw	r3, #51704	; 0xc9f8
   14fac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14fb0:	781a      	ldrb	r2, [r3, #0]
   14fb2:	f64c 13f9 	movw	r3, #51705	; 0xc9f9
   14fb6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   14fba:	781b      	ldrb	r3, [r3, #0]
   14fbc:	b2db      	uxtb	r3, r3
   14fbe:	429a      	cmp	r2, r3
   14fc0:	d10e      	bne.n	14fe0 <__vector_32+0x3c>
    /* Nothing more to send */
    cbi(UCSR1B, TXCIE); /* disable interrupt */
   14fc2:	f242 039a 	movw	r3, #8346	; 0x209a
   14fc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fca:	f242 029a 	movw	r2, #8346	; 0x209a
   14fce:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14fd2:	7812      	ldrb	r2, [r2, #0]
   14fd4:	b2d2      	uxtb	r2, r2
   14fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14fda:	b2d2      	uxtb	r2, r2
   14fdc:	701a      	strb	r2, [r3, #0]
   14fde:	e01d      	b.n	1501c <__vector_32+0x78>
  } else {
    UDR1 = tx_buf1[tx_tail1];
   14fe0:	f242 039c 	movw	r3, #8348	; 0x209c
   14fe4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   14fe8:	f64c 12f9 	movw	r2, #51705	; 0xc9f9
   14fec:	f2c2 0204 	movt	r2, #8196	; 0x2004
   14ff0:	7812      	ldrb	r2, [r2, #0]
   14ff2:	b2d2      	uxtb	r2, r2
   14ff4:	4611      	mov	r1, r2
   14ff6:	f64c 12fc 	movw	r2, #51708	; 0xc9fc
   14ffa:	f2c2 0204 	movt	r2, #8196	; 0x2004
   14ffe:	5c52      	ldrb	r2, [r2, r1]
   15000:	701a      	strb	r2, [r3, #0]
    tx_tail1++; /* warning tx_buf_len is 256 */
   15002:	f64c 13f9 	movw	r3, #51705	; 0xc9f9
   15006:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1500a:	781b      	ldrb	r3, [r3, #0]
   1500c:	b2db      	uxtb	r3, r3
   1500e:	3301      	adds	r3, #1
   15010:	b2da      	uxtb	r2, r3
   15012:	f64c 13f9 	movw	r3, #51705	; 0xc9f9
   15016:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1501a:	701a      	strb	r2, [r3, #0]
  }
}
   1501c:	46bd      	mov	sp, r7
   1501e:	f85d 7b04 	ldr.w	r7, [sp], #4
   15022:	4770      	bx	lr

00015024 <uart0_init>:

void uart0_init( void ) {
   15024:	b480      	push	{r7}
   15026:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR0H = 0; 
   15028:	f242 0390 	movw	r3, #8336	; 0x2090
   1502c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15030:	2200      	movs	r2, #0
   15032:	701a      	strb	r2, [r3, #0]
  UBRR0L = 25; // 38.4
   15034:	f242 0309 	movw	r3, #8201	; 0x2009
   15038:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1503c:	2219      	movs	r2, #25
   1503e:	701a      	strb	r2, [r3, #0]
  // UBRR0L = 103; //9600
  /* single speed */ 
  UCSR0A = 0; 
   15040:	f242 030b 	movw	r3, #8203	; 0x200b
   15044:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15048:	2200      	movs	r2, #0
   1504a:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR0B = _BV(RXEN) | _BV(TXEN);
   1504c:	f242 030a 	movw	r3, #8202	; 0x200a
   15050:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15054:	2218      	movs	r2, #24
   15056:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR0C = _BV(UCSZ1) | _BV(UCSZ0);
   15058:	f242 0395 	movw	r3, #8341	; 0x2095
   1505c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15060:	2206      	movs	r2, #6
   15062:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR0B, RXCIE ); 
   15064:	f242 030a 	movw	r3, #8202	; 0x200a
   15068:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1506c:	f242 020a 	movw	r2, #8202	; 0x200a
   15070:	f2c2 0200 	movt	r2, #8192	; 0x2000
   15074:	7812      	ldrb	r2, [r2, #0]
   15076:	b2d2      	uxtb	r2, r2
   15078:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1507c:	b2d2      	uxtb	r2, r2
   1507e:	701a      	strb	r2, [r3, #0]
}
   15080:	46bd      	mov	sp, r7
   15082:	f85d 7b04 	ldr.w	r7, [sp], #4
   15086:	4770      	bx	lr

00015088 <uart1_init>:

void uart1_init( void ) {
   15088:	b480      	push	{r7}
   1508a:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRR1H = 0; 
   1508c:	f242 0398 	movw	r3, #8344	; 0x2098
   15090:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15094:	2200      	movs	r2, #0
   15096:	701a      	strb	r2, [r3, #0]
  UBRR1L = 25; // 38.4
   15098:	f242 0399 	movw	r3, #8345	; 0x2099
   1509c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150a0:	2219      	movs	r2, #25
   150a2:	701a      	strb	r2, [r3, #0]
  // UBRR1L = 103; //9600


  /* single speed */ 
  UCSR1A = 0; 
   150a4:	f242 039b 	movw	r3, #8347	; 0x209b
   150a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150ac:	2200      	movs	r2, #0
   150ae:	701a      	strb	r2, [r3, #0]
  /* Enable receiver and transmitter */ 
  UCSR1B = _BV(RXEN) | _BV(TXEN);
   150b0:	f242 039a 	movw	r3, #8346	; 0x209a
   150b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150b8:	2218      	movs	r2, #24
   150ba:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSR1C = _BV(UCSZ1) | _BV(UCSZ0);
   150bc:	f242 039d 	movw	r3, #8349	; 0x209d
   150c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150c4:	2206      	movs	r2, #6
   150c6:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi(UCSR1B, RXCIE ); 
   150c8:	f242 039a 	movw	r3, #8346	; 0x209a
   150cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   150d0:	f242 029a 	movw	r2, #8346	; 0x209a
   150d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   150d8:	7812      	ldrb	r2, [r2, #0]
   150da:	b2d2      	uxtb	r2, r2
   150dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
   150e0:	b2d2      	uxtb	r2, r2
   150e2:	701a      	strb	r2, [r3, #0]
}
   150e4:	46bd      	mov	sp, r7
   150e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   150ea:	4770      	bx	lr
   150ec:	0000      	movs	r0, r0
	...

000150f0 <estimator_init>:
  estimator_theta_dot = theta_dot; \
}

inline void estimator_update_lls( void );

void estimator_init( void ) {
   150f0:	b480      	push	{r7}
   150f2:	af00      	add	r7, sp, #0

  EstimatorSetPos (0., 0., 0.);
   150f4:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   150f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   150fc:	f04f 0200 	mov.w	r2, #0
   15100:	601a      	str	r2, [r3, #0]
   15102:	f64c 3300 	movw	r3, #51968	; 0xcb00
   15106:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1510a:	f04f 0200 	mov.w	r2, #0
   1510e:	601a      	str	r2, [r3, #0]
   15110:	f64c 3304 	movw	r3, #51972	; 0xcb04
   15114:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15118:	f04f 0200 	mov.w	r2, #0
   1511c:	601a      	str	r2, [r3, #0]

  EstimatorSetAtt (0., 0., 0);
   1511e:	f64c 3308 	movw	r3, #51976	; 0xcb08
   15122:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15126:	f04f 0200 	mov.w	r2, #0
   1512a:	601a      	str	r2, [r3, #0]
   1512c:	f64c 330c 	movw	r3, #51980	; 0xcb0c
   15130:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15134:	f04f 0200 	mov.w	r2, #0
   15138:	601a      	str	r2, [r3, #0]
   1513a:	f64c 3310 	movw	r3, #51984	; 0xcb10
   1513e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15142:	f04f 0200 	mov.w	r2, #0
   15146:	601a      	str	r2, [r3, #0]

  EstimatorSetSpeedPol ( 0., 0., 0.);
   15148:	f64c 3334 	movw	r3, #52020	; 0xcb34
   1514c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15150:	f04f 0200 	mov.w	r2, #0
   15154:	601a      	str	r2, [r3, #0]
   15156:	f64c 3338 	movw	r3, #52024	; 0xcb38
   1515a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1515e:	f04f 0200 	mov.w	r2, #0
   15162:	601a      	str	r2, [r3, #0]
   15164:	f64c 331c 	movw	r3, #51996	; 0xcb1c
   15168:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1516c:	f04f 0200 	mov.w	r2, #0
   15170:	601a      	str	r2, [r3, #0]

  EstimatorSetRotSpeed (0., 0., 0.);
   15172:	f64c 3320 	movw	r3, #52000	; 0xcb20
   15176:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1517a:	f04f 0200 	mov.w	r2, #0
   1517e:	601a      	str	r2, [r3, #0]
   15180:	f64c 3324 	movw	r3, #52004	; 0xcb24
   15184:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15188:	f04f 0200 	mov.w	r2, #0
   1518c:	601a      	str	r2, [r3, #0]
   1518e:	f64c 3328 	movw	r3, #52008	; 0xcb28
   15192:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15196:	f04f 0200 	mov.w	r2, #0
   1519a:	601a      	str	r2, [r3, #0]

  estimator_flight_time = 0;
   1519c:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   151a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151a4:	2200      	movs	r2, #0
   151a6:	801a      	strh	r2, [r3, #0]

  estimator_rad_of_ir = ir_rad_of_ir;
   151a8:	f240 5348 	movw	r3, #1352	; 0x548
   151ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151b0:	681a      	ldr	r2, [r3, #0]
   151b2:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   151b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151ba:	601a      	str	r2, [r3, #0]
}
   151bc:	46bd      	mov	sp, r7
   151be:	f85d 7b04 	ldr.w	r7, [sp], #4
   151c2:	4770      	bx	lr

000151c4 <estimator_update_state_infrared>:

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
   151c4:	b580      	push	{r7, lr}
   151c6:	b082      	sub	sp, #8
   151c8:	af00      	add	r7, sp, #0
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   151ca:	f240 533c 	movw	r3, #1340	; 0x53c
   151ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151d2:	781b      	ldrb	r3, [r3, #0]
    estimator_rad_of_ir : ir_rad_of_ir;
   151d4:	2b01      	cmp	r3, #1
   151d6:	d105      	bne.n	151e4 <estimator_update_state_infrared+0x20>
   151d8:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   151dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151e0:	681b      	ldr	r3, [r3, #0]
   151e2:	e004      	b.n	151ee <estimator_update_state_infrared+0x2a>
   151e4:	f240 5348 	movw	r3, #1352	; 0x548
   151e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   151ec:	681b      	ldr	r3, [r3, #0]
}

#define EstimatorIrGainIsCorrect() (TRUE)

void estimator_update_state_infrared( void ) {
  float rad_of_ir = (ir_estim_mode == IR_ESTIM_MODE_ON && EstimatorIrGainIsCorrect()) ? 
   151ee:	607b      	str	r3, [r7, #4]
    estimator_rad_of_ir : ir_rad_of_ir;
  estimator_phi  = rad_of_ir * ir_roll;
   151f0:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   151f4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   151f8:	881b      	ldrh	r3, [r3, #0]
   151fa:	b21b      	sxth	r3, r3
   151fc:	4618      	mov	r0, r3
   151fe:	f003 f8dd 	bl	183bc <__aeabi_i2f>
   15202:	4603      	mov	r3, r0
   15204:	4618      	mov	r0, r3
   15206:	6879      	ldr	r1, [r7, #4]
   15208:	f003 f92c 	bl	18464 <__aeabi_fmul>
   1520c:	4603      	mov	r3, r0
   1520e:	461a      	mov	r2, r3
   15210:	f64c 3308 	movw	r3, #51976	; 0xcb08
   15214:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15218:	601a      	str	r2, [r3, #0]

  estimator_theta = rad_of_ir * ir_pitch;
   1521a:	f24c 73ea 	movw	r3, #51178	; 0xc7ea
   1521e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15222:	881b      	ldrh	r3, [r3, #0]
   15224:	b21b      	sxth	r3, r3
   15226:	4618      	mov	r0, r3
   15228:	f003 f8c8 	bl	183bc <__aeabi_i2f>
   1522c:	4603      	mov	r3, r0
   1522e:	4618      	mov	r0, r3
   15230:	6879      	ldr	r1, [r7, #4]
   15232:	f003 f917 	bl	18464 <__aeabi_fmul>
   15236:	4603      	mov	r3, r0
   15238:	461a      	mov	r2, r3
   1523a:	f64c 3310 	movw	r3, #51984	; 0xcb10
   1523e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15242:	601a      	str	r2, [r3, #0]
}
   15244:	3708      	adds	r7, #8
   15246:	46bd      	mov	sp, r7
   15248:	bd80      	pop	{r7, pc}
   1524a:	bf00      	nop

0001524c <estimator_update_ir_estim>:
#define RHO 0.999 /* The higher, the slower the estimation is changing */

#define g 9.81


void estimator_update_ir_estim( void ) {
   1524c:	b5b0      	push	{r4, r5, r7, lr}
   1524e:	b084      	sub	sp, #16
   15250:	af00      	add	r7, sp, #0
  static bool_t initialized = FALSE;
  static float sum_xy, sum_xx;
  float absphi;
  float init_ir2;

  if (initialized) 
   15252:	f64c 3348 	movw	r3, #52040	; 0xcb48
   15256:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1525a:	781b      	ldrb	r3, [r3, #0]
   1525c:	2b00      	cmp	r3, #0
   1525e:	f000 81e8 	beq.w	15632 <estimator_update_ir_estim+0x3e6>
  {
    float dt = gps_ftow - last_t;
   15262:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   15266:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1526a:	681a      	ldr	r2, [r3, #0]
   1526c:	f64c 334c 	movw	r3, #52044	; 0xcb4c
   15270:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15274:	681b      	ldr	r3, [r3, #0]
   15276:	4610      	mov	r0, r2
   15278:	4619      	mov	r1, r3
   1527a:	f002 ffe9 	bl	18250 <__aeabi_fsub>
   1527e:	4603      	mov	r3, r0
   15280:	60bb      	str	r3, [r7, #8]
    if (dt > 0.1) { // Against division by zero
   15282:	68b8      	ldr	r0, [r7, #8]
   15284:	f002 fc5a 	bl	17b3c <__aeabi_f2d>
   15288:	4602      	mov	r2, r0
   1528a:	460b      	mov	r3, r1
   1528c:	4610      	mov	r0, r2
   1528e:	4619      	mov	r1, r3
   15290:	a385      	add	r3, pc, #532	; (adr r3, 154a8 <estimator_update_ir_estim+0x25c>)
   15292:	e9d3 2300 	ldrd	r2, r3, [r3]
   15296:	f002 ff35 	bl	18104 <__aeabi_dcmpgt>
   1529a:	4603      	mov	r3, r0
   1529c:	2b00      	cmp	r3, #0
   1529e:	d100      	bne.n	152a2 <estimator_update_ir_estim+0x56>
   152a0:	e219      	b.n	156d6 <estimator_update_ir_estim+0x48a>
      float phi = (estimator_hspeed_dir - last_hspeed_dir); 
   152a2:	f64c 3338 	movw	r3, #52024	; 0xcb38
   152a6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152aa:	681a      	ldr	r2, [r3, #0]
   152ac:	f64c 3350 	movw	r3, #52048	; 0xcb50
   152b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   152b4:	681b      	ldr	r3, [r3, #0]
   152b6:	4610      	mov	r0, r2
   152b8:	4619      	mov	r1, r3
   152ba:	f002 ffc9 	bl	18250 <__aeabi_fsub>
   152be:	4603      	mov	r3, r0
   152c0:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   152c2:	e013      	b.n	152ec <estimator_update_ir_estim+0xa0>
   152c4:	68f8      	ldr	r0, [r7, #12]
   152c6:	f002 fc39 	bl	17b3c <__aeabi_f2d>
   152ca:	4602      	mov	r2, r0
   152cc:	460b      	mov	r3, r1
   152ce:	4610      	mov	r0, r2
   152d0:	4619      	mov	r1, r3
   152d2:	a377      	add	r3, pc, #476	; (adr r3, 154b0 <estimator_update_ir_estim+0x264>)
   152d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   152d8:	f002 fad0 	bl	1787c <__aeabi_dsub>
   152dc:	4602      	mov	r2, r0
   152de:	460b      	mov	r3, r1
   152e0:	4610      	mov	r0, r2
   152e2:	4619      	mov	r1, r3
   152e4:	f002 ff60 	bl	181a8 <__aeabi_d2f>
   152e8:	4603      	mov	r3, r0
   152ea:	60fb      	str	r3, [r7, #12]
   152ec:	68f8      	ldr	r0, [r7, #12]
   152ee:	f002 fc25 	bl	17b3c <__aeabi_f2d>
   152f2:	4602      	mov	r2, r0
   152f4:	460b      	mov	r3, r1
   152f6:	4610      	mov	r0, r2
   152f8:	4619      	mov	r1, r3
   152fa:	a36f      	add	r3, pc, #444	; (adr r3, 154b8 <estimator_update_ir_estim+0x26c>)
   152fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   15300:	f002 ff00 	bl	18104 <__aeabi_dcmpgt>
   15304:	4603      	mov	r3, r0
   15306:	2b00      	cmp	r3, #0
   15308:	d1dc      	bne.n	152c4 <estimator_update_ir_estim+0x78>
   1530a:	e013      	b.n	15334 <estimator_update_ir_estim+0xe8>
   1530c:	68f8      	ldr	r0, [r7, #12]
   1530e:	f002 fc15 	bl	17b3c <__aeabi_f2d>
   15312:	4602      	mov	r2, r0
   15314:	460b      	mov	r3, r1
   15316:	4610      	mov	r0, r2
   15318:	4619      	mov	r1, r3
   1531a:	a365      	add	r3, pc, #404	; (adr r3, 154b0 <estimator_update_ir_estim+0x264>)
   1531c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15320:	f002 faae 	bl	17880 <__adddf3>
   15324:	4602      	mov	r2, r0
   15326:	460b      	mov	r3, r1
   15328:	4610      	mov	r0, r2
   1532a:	4619      	mov	r1, r3
   1532c:	f002 ff3c 	bl	181a8 <__aeabi_d2f>
   15330:	4603      	mov	r3, r0
   15332:	60fb      	str	r3, [r7, #12]
   15334:	68f8      	ldr	r0, [r7, #12]
   15336:	f002 fc01 	bl	17b3c <__aeabi_f2d>
   1533a:	4602      	mov	r2, r0
   1533c:	460b      	mov	r3, r1
   1533e:	4610      	mov	r0, r2
   15340:	4619      	mov	r1, r3
   15342:	a35f      	add	r3, pc, #380	; (adr r3, 154c0 <estimator_update_ir_estim+0x274>)
   15344:	e9d3 2300 	ldrd	r2, r3, [r3]
   15348:	f002 febe 	bl	180c8 <__aeabi_dcmplt>
   1534c:	4603      	mov	r3, r0
   1534e:	2b00      	cmp	r3, #0
   15350:	d1dc      	bne.n	1530c <estimator_update_ir_estim+0xc0>
      phi = phi/dt*NOMINAL_AIRSPEED/g; /* tan linearized */
   15352:	68f8      	ldr	r0, [r7, #12]
   15354:	68b9      	ldr	r1, [r7, #8]
   15356:	f003 f939 	bl	185cc <__aeabi_fdiv>
   1535a:	4603      	mov	r3, r0
   1535c:	4618      	mov	r0, r3
   1535e:	f002 fbed 	bl	17b3c <__aeabi_f2d>
   15362:	4602      	mov	r2, r0
   15364:	460b      	mov	r3, r1
   15366:	4610      	mov	r0, r2
   15368:	4619      	mov	r1, r3
   1536a:	f04f 0200 	mov.w	r2, #0
   1536e:	f04f 0300 	mov.w	r3, #0
   15372:	f2c4 0324 	movt	r3, #16420	; 0x4024
   15376:	f002 fc35 	bl	17be4 <__aeabi_dmul>
   1537a:	4602      	mov	r2, r0
   1537c:	460b      	mov	r3, r1
   1537e:	4610      	mov	r0, r2
   15380:	4619      	mov	r1, r3
   15382:	a351      	add	r3, pc, #324	; (adr r3, 154c8 <estimator_update_ir_estim+0x27c>)
   15384:	e9d3 2300 	ldrd	r2, r3, [r3]
   15388:	f002 fd56 	bl	17e38 <__aeabi_ddiv>
   1538c:	4602      	mov	r2, r0
   1538e:	460b      	mov	r3, r1
   15390:	4610      	mov	r0, r2
   15392:	4619      	mov	r1, r3
   15394:	f002 ff08 	bl	181a8 <__aeabi_d2f>
   15398:	4603      	mov	r3, r0
   1539a:	60fb      	str	r3, [r7, #12]
      NORM_RAD_ANGLE(phi);
   1539c:	e013      	b.n	153c6 <estimator_update_ir_estim+0x17a>
   1539e:	68f8      	ldr	r0, [r7, #12]
   153a0:	f002 fbcc 	bl	17b3c <__aeabi_f2d>
   153a4:	4602      	mov	r2, r0
   153a6:	460b      	mov	r3, r1
   153a8:	4610      	mov	r0, r2
   153aa:	4619      	mov	r1, r3
   153ac:	a340      	add	r3, pc, #256	; (adr r3, 154b0 <estimator_update_ir_estim+0x264>)
   153ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   153b2:	f002 fa63 	bl	1787c <__aeabi_dsub>
   153b6:	4602      	mov	r2, r0
   153b8:	460b      	mov	r3, r1
   153ba:	4610      	mov	r0, r2
   153bc:	4619      	mov	r1, r3
   153be:	f002 fef3 	bl	181a8 <__aeabi_d2f>
   153c2:	4603      	mov	r3, r0
   153c4:	60fb      	str	r3, [r7, #12]
   153c6:	68f8      	ldr	r0, [r7, #12]
   153c8:	f002 fbb8 	bl	17b3c <__aeabi_f2d>
   153cc:	4602      	mov	r2, r0
   153ce:	460b      	mov	r3, r1
   153d0:	4610      	mov	r0, r2
   153d2:	4619      	mov	r1, r3
   153d4:	a338      	add	r3, pc, #224	; (adr r3, 154b8 <estimator_update_ir_estim+0x26c>)
   153d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   153da:	f002 fe93 	bl	18104 <__aeabi_dcmpgt>
   153de:	4603      	mov	r3, r0
   153e0:	2b00      	cmp	r3, #0
   153e2:	d1dc      	bne.n	1539e <estimator_update_ir_estim+0x152>
   153e4:	e013      	b.n	1540e <estimator_update_ir_estim+0x1c2>
   153e6:	68f8      	ldr	r0, [r7, #12]
   153e8:	f002 fba8 	bl	17b3c <__aeabi_f2d>
   153ec:	4602      	mov	r2, r0
   153ee:	460b      	mov	r3, r1
   153f0:	4610      	mov	r0, r2
   153f2:	4619      	mov	r1, r3
   153f4:	a32e      	add	r3, pc, #184	; (adr r3, 154b0 <estimator_update_ir_estim+0x264>)
   153f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   153fa:	f002 fa41 	bl	17880 <__adddf3>
   153fe:	4602      	mov	r2, r0
   15400:	460b      	mov	r3, r1
   15402:	4610      	mov	r0, r2
   15404:	4619      	mov	r1, r3
   15406:	f002 fecf 	bl	181a8 <__aeabi_d2f>
   1540a:	4603      	mov	r3, r0
   1540c:	60fb      	str	r3, [r7, #12]
   1540e:	68f8      	ldr	r0, [r7, #12]
   15410:	f002 fb94 	bl	17b3c <__aeabi_f2d>
   15414:	4602      	mov	r2, r0
   15416:	460b      	mov	r3, r1
   15418:	4610      	mov	r0, r2
   1541a:	4619      	mov	r1, r3
   1541c:	a328      	add	r3, pc, #160	; (adr r3, 154c0 <estimator_update_ir_estim+0x274>)
   1541e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15422:	f002 fe51 	bl	180c8 <__aeabi_dcmplt>
   15426:	4603      	mov	r3, r0
   15428:	2b00      	cmp	r3, #0
   1542a:	d1dc      	bne.n	153e6 <estimator_update_ir_estim+0x19a>
      estimator_ir = (float)ir_roll;
   1542c:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   15430:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15434:	881b      	ldrh	r3, [r3, #0]
   15436:	b21b      	sxth	r3, r3
   15438:	4618      	mov	r0, r3
   1543a:	f002 ffbf 	bl	183bc <__aeabi_i2f>
   1543e:	4602      	mov	r2, r0
   15440:	f64c 3340 	movw	r3, #52032	; 0xcb40
   15444:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15448:	601a      	str	r2, [r3, #0]
      estimator_rad = phi;
   1544a:	f64c 3344 	movw	r3, #52036	; 0xcb44
   1544e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15452:	68fa      	ldr	r2, [r7, #12]
   15454:	601a      	str	r2, [r3, #0]
      absphi = fabs(phi);
   15456:	68f8      	ldr	r0, [r7, #12]
   15458:	f04f 0100 	mov.w	r1, #0
   1545c:	f003 f9a0 	bl	187a0 <__aeabi_fcmplt>
   15460:	4603      	mov	r3, r0
   15462:	2b00      	cmp	r3, #0
   15464:	d003      	beq.n	1546e <estimator_update_ir_estim+0x222>
   15466:	68fb      	ldr	r3, [r7, #12]
   15468:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   1546c:	e000      	b.n	15470 <estimator_update_ir_estim+0x224>
   1546e:	68fb      	ldr	r3, [r7, #12]
   15470:	607b      	str	r3, [r7, #4]
      if (absphi < 1.0 && absphi > 0.05 && (- ir_contrast/2 < ir_roll && ir_roll < ir_contrast/2)) {
   15472:	6878      	ldr	r0, [r7, #4]
   15474:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   15478:	f003 f992 	bl	187a0 <__aeabi_fcmplt>
   1547c:	4603      	mov	r3, r0
   1547e:	2b00      	cmp	r3, #0
   15480:	d100      	bne.n	15484 <estimator_update_ir_estim+0x238>
   15482:	e128      	b.n	156d6 <estimator_update_ir_estim+0x48a>
   15484:	6878      	ldr	r0, [r7, #4]
   15486:	f002 fb59 	bl	17b3c <__aeabi_f2d>
   1548a:	4602      	mov	r2, r0
   1548c:	460b      	mov	r3, r1
   1548e:	4610      	mov	r0, r2
   15490:	4619      	mov	r1, r3
   15492:	a30f      	add	r3, pc, #60	; (adr r3, 154d0 <estimator_update_ir_estim+0x284>)
   15494:	e9d3 2300 	ldrd	r2, r3, [r3]
   15498:	f002 fe34 	bl	18104 <__aeabi_dcmpgt>
   1549c:	4603      	mov	r3, r0
   1549e:	2b00      	cmp	r3, #0
   154a0:	d11a      	bne.n	154d8 <estimator_update_ir_estim+0x28c>
   154a2:	e118      	b.n	156d6 <estimator_update_ir_estim+0x48a>
   154a4:	f3af 8000 	nop.w
   154a8:	9999999a 	.word	0x9999999a
   154ac:	3fb99999 	.word	0x3fb99999
   154b0:	54442d18 	.word	0x54442d18
   154b4:	401921fb 	.word	0x401921fb
   154b8:	54442d18 	.word	0x54442d18
   154bc:	400921fb 	.word	0x400921fb
   154c0:	54442d18 	.word	0x54442d18
   154c4:	c00921fb 	.word	0xc00921fb
   154c8:	51eb851f 	.word	0x51eb851f
   154cc:	40239eb8 	.word	0x40239eb8
   154d0:	9999999a 	.word	0x9999999a
   154d4:	3fa99999 	.word	0x3fa99999
   154d8:	f240 5340 	movw	r3, #1344	; 0x540
   154dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   154e0:	881b      	ldrh	r3, [r3, #0]
   154e2:	b21b      	sxth	r3, r3
   154e4:	425b      	negs	r3, r3
   154e6:	0fda      	lsrs	r2, r3, #31
   154e8:	4413      	add	r3, r2
   154ea:	105b      	asrs	r3, r3, #1
   154ec:	461a      	mov	r2, r3
   154ee:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   154f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   154f6:	881b      	ldrh	r3, [r3, #0]
   154f8:	b21b      	sxth	r3, r3
   154fa:	429a      	cmp	r2, r3
   154fc:	f280 8098 	bge.w	15630 <estimator_update_ir_estim+0x3e4>
   15500:	f240 5340 	movw	r3, #1344	; 0x540
   15504:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15508:	881b      	ldrh	r3, [r3, #0]
   1550a:	b21b      	sxth	r3, r3
   1550c:	0fda      	lsrs	r2, r3, #31
   1550e:	4413      	add	r3, r2
   15510:	105b      	asrs	r3, r3, #1
   15512:	b29a      	uxth	r2, r3
   15514:	f24c 73e8 	movw	r3, #51176	; 0xc7e8
   15518:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1551c:	881b      	ldrh	r3, [r3, #0]
   1551e:	b212      	sxth	r2, r2
   15520:	b21b      	sxth	r3, r3
   15522:	429a      	cmp	r2, r3
   15524:	f340 8084 	ble.w	15630 <estimator_update_ir_estim+0x3e4>
	sum_xy = estimator_rad * estimator_ir + RHO * sum_xy;
   15528:	f64c 3344 	movw	r3, #52036	; 0xcb44
   1552c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15530:	681a      	ldr	r2, [r3, #0]
   15532:	f64c 3340 	movw	r3, #52032	; 0xcb40
   15536:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1553a:	681b      	ldr	r3, [r3, #0]
   1553c:	4610      	mov	r0, r2
   1553e:	4619      	mov	r1, r3
   15540:	f002 ff90 	bl	18464 <__aeabi_fmul>
   15544:	4603      	mov	r3, r0
   15546:	4618      	mov	r0, r3
   15548:	f002 faf8 	bl	17b3c <__aeabi_f2d>
   1554c:	4604      	mov	r4, r0
   1554e:	460d      	mov	r5, r1
   15550:	f64c 3354 	movw	r3, #52052	; 0xcb54
   15554:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15558:	681b      	ldr	r3, [r3, #0]
   1555a:	4618      	mov	r0, r3
   1555c:	f002 faee 	bl	17b3c <__aeabi_f2d>
   15560:	4602      	mov	r2, r0
   15562:	460b      	mov	r3, r1
   15564:	4610      	mov	r0, r2
   15566:	4619      	mov	r1, r3
   15568:	a367      	add	r3, pc, #412	; (adr r3, 15708 <estimator_update_ir_estim+0x4bc>)
   1556a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1556e:	f002 fb39 	bl	17be4 <__aeabi_dmul>
   15572:	4602      	mov	r2, r0
   15574:	460b      	mov	r3, r1
   15576:	4620      	mov	r0, r4
   15578:	4629      	mov	r1, r5
   1557a:	f002 f981 	bl	17880 <__adddf3>
   1557e:	4602      	mov	r2, r0
   15580:	460b      	mov	r3, r1
   15582:	4610      	mov	r0, r2
   15584:	4619      	mov	r1, r3
   15586:	f002 fe0f 	bl	181a8 <__aeabi_d2f>
   1558a:	4602      	mov	r2, r0
   1558c:	f64c 3354 	movw	r3, #52052	; 0xcb54
   15590:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15594:	601a      	str	r2, [r3, #0]
	sum_xx = estimator_ir * estimator_ir + RHO * sum_xx;
   15596:	f64c 3340 	movw	r3, #52032	; 0xcb40
   1559a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1559e:	681a      	ldr	r2, [r3, #0]
   155a0:	f64c 3340 	movw	r3, #52032	; 0xcb40
   155a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155a8:	681b      	ldr	r3, [r3, #0]
   155aa:	4610      	mov	r0, r2
   155ac:	4619      	mov	r1, r3
   155ae:	f002 ff59 	bl	18464 <__aeabi_fmul>
   155b2:	4603      	mov	r3, r0
   155b4:	4618      	mov	r0, r3
   155b6:	f002 fac1 	bl	17b3c <__aeabi_f2d>
   155ba:	4604      	mov	r4, r0
   155bc:	460d      	mov	r5, r1
   155be:	f64c 3358 	movw	r3, #52056	; 0xcb58
   155c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   155c6:	681b      	ldr	r3, [r3, #0]
   155c8:	4618      	mov	r0, r3
   155ca:	f002 fab7 	bl	17b3c <__aeabi_f2d>
   155ce:	4602      	mov	r2, r0
   155d0:	460b      	mov	r3, r1
   155d2:	4610      	mov	r0, r2
   155d4:	4619      	mov	r1, r3
   155d6:	a34c      	add	r3, pc, #304	; (adr r3, 15708 <estimator_update_ir_estim+0x4bc>)
   155d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   155dc:	f002 fb02 	bl	17be4 <__aeabi_dmul>
   155e0:	4602      	mov	r2, r0
   155e2:	460b      	mov	r3, r1
   155e4:	4620      	mov	r0, r4
   155e6:	4629      	mov	r1, r5
   155e8:	f002 f94a 	bl	17880 <__adddf3>
   155ec:	4602      	mov	r2, r0
   155ee:	460b      	mov	r3, r1
   155f0:	4610      	mov	r0, r2
   155f2:	4619      	mov	r1, r3
   155f4:	f002 fdd8 	bl	181a8 <__aeabi_d2f>
   155f8:	4602      	mov	r2, r0
   155fa:	f64c 3358 	movw	r3, #52056	; 0xcb58
   155fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15602:	601a      	str	r2, [r3, #0]
	else if (result > IR_RAD_OF_IR_MAX_VALUE)
	  estimator_rad_of_ir = IR_RAD_OF_IR_MAX_VALUE;
	else
	  estimator_rad_of_ir = result;
#else
	  estimator_rad_of_ir = sum_xy / sum_xx;
   15604:	f64c 3354 	movw	r3, #52052	; 0xcb54
   15608:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1560c:	681a      	ldr	r2, [r3, #0]
   1560e:	f64c 3358 	movw	r3, #52056	; 0xcb58
   15612:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15616:	681b      	ldr	r3, [r3, #0]
   15618:	4610      	mov	r0, r2
   1561a:	4619      	mov	r1, r3
   1561c:	f002 ffd6 	bl	185cc <__aeabi_fdiv>
   15620:	4603      	mov	r3, r0
   15622:	461a      	mov	r2, r3
   15624:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   15628:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1562c:	601a      	str	r2, [r3, #0]
   1562e:	e052      	b.n	156d6 <estimator_update_ir_estim+0x48a>
   15630:	e051      	b.n	156d6 <estimator_update_ir_estim+0x48a>
#endif
      }
    } 
  } else {
    initialized = TRUE;
   15632:	f64c 3348 	movw	r3, #52040	; 0xcb48
   15636:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1563a:	2201      	movs	r2, #1
   1563c:	701a      	strb	r2, [r3, #0]
    init_ir2 = ir_contrast;
   1563e:	f240 5340 	movw	r3, #1344	; 0x540
   15642:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15646:	881b      	ldrh	r3, [r3, #0]
   15648:	b21b      	sxth	r3, r3
   1564a:	4618      	mov	r0, r3
   1564c:	f002 feb6 	bl	183bc <__aeabi_i2f>
   15650:	4603      	mov	r3, r0
   15652:	603b      	str	r3, [r7, #0]
    init_ir2 = init_ir2*init_ir2;
   15654:	6838      	ldr	r0, [r7, #0]
   15656:	6839      	ldr	r1, [r7, #0]
   15658:	f002 ff04 	bl	18464 <__aeabi_fmul>
   1565c:	4603      	mov	r3, r0
   1565e:	603b      	str	r3, [r7, #0]
    sum_xy = INIT_WEIGHT * estimator_rad_of_ir * init_ir2;
   15660:	f64c 333c 	movw	r3, #52028	; 0xcb3c
   15664:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15668:	681b      	ldr	r3, [r3, #0]
   1566a:	4618      	mov	r0, r3
   1566c:	f002 fa66 	bl	17b3c <__aeabi_f2d>
   15670:	4602      	mov	r2, r0
   15672:	460b      	mov	r3, r1
   15674:	4610      	mov	r0, r2
   15676:	4619      	mov	r1, r3
   15678:	f04f 0200 	mov.w	r2, #0
   1567c:	f04f 0300 	mov.w	r3, #0
   15680:	f2c4 0359 	movt	r3, #16473	; 0x4059
   15684:	f002 faae 	bl	17be4 <__aeabi_dmul>
   15688:	4602      	mov	r2, r0
   1568a:	460b      	mov	r3, r1
   1568c:	4614      	mov	r4, r2
   1568e:	461d      	mov	r5, r3
   15690:	6838      	ldr	r0, [r7, #0]
   15692:	f002 fa53 	bl	17b3c <__aeabi_f2d>
   15696:	4602      	mov	r2, r0
   15698:	460b      	mov	r3, r1
   1569a:	4620      	mov	r0, r4
   1569c:	4629      	mov	r1, r5
   1569e:	f002 faa1 	bl	17be4 <__aeabi_dmul>
   156a2:	4602      	mov	r2, r0
   156a4:	460b      	mov	r3, r1
   156a6:	4610      	mov	r0, r2
   156a8:	4619      	mov	r1, r3
   156aa:	f002 fd7d 	bl	181a8 <__aeabi_d2f>
   156ae:	4602      	mov	r2, r0
   156b0:	f64c 3354 	movw	r3, #52052	; 0xcb54
   156b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156b8:	601a      	str	r2, [r3, #0]
    sum_xx = INIT_WEIGHT * init_ir2;
   156ba:	6838      	ldr	r0, [r7, #0]
   156bc:	f04f 0100 	mov.w	r1, #0
   156c0:	f2c4 21c8 	movt	r1, #17096	; 0x42c8
   156c4:	f002 fece 	bl	18464 <__aeabi_fmul>
   156c8:	4603      	mov	r3, r0
   156ca:	461a      	mov	r2, r3
   156cc:	f64c 3358 	movw	r3, #52056	; 0xcb58
   156d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156d4:	601a      	str	r2, [r3, #0]
  }

  last_hspeed_dir = estimator_hspeed_dir;
   156d6:	f64c 3338 	movw	r3, #52024	; 0xcb38
   156da:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156de:	681a      	ldr	r2, [r3, #0]
   156e0:	f64c 3350 	movw	r3, #52048	; 0xcb50
   156e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156e8:	601a      	str	r2, [r3, #0]
  last_t = gps_ftow;
   156ea:	f24c 63b8 	movw	r3, #50872	; 0xc6b8
   156ee:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156f2:	681a      	ldr	r2, [r3, #0]
   156f4:	f64c 334c 	movw	r3, #52044	; 0xcb4c
   156f8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   156fc:	601a      	str	r2, [r3, #0]
}
   156fe:	3710      	adds	r7, #16
   15700:	46bd      	mov	sp, r7
   15702:	bdb0      	pop	{r4, r5, r7, pc}
   15704:	f3af 8000 	nop.w
   15708:	d916872b 	.word	0xd916872b
   1570c:	3feff7ce 	.word	0x3feff7ce

00015710 <estimator_update_state_gps>:


void estimator_update_state_gps( void ) {
   15710:	b580      	push	{r7, lr}
   15712:	af00      	add	r7, sp, #0
  if (GPS_FIX_VALID(gps_mode)) {
   15714:	f24c 63dc 	movw	r3, #50908	; 0xc6dc
   15718:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1571c:	781b      	ldrb	r3, [r3, #0]
   1571e:	f003 0320 	and.w	r3, r3, #32
   15722:	2b00      	cmp	r3, #0
   15724:	d044      	beq.n	157b0 <estimator_update_state_gps+0xa0>
    EstimatorSetPos(gps_east, gps_north, gps_falt);
   15726:	f24c 63d4 	movw	r3, #50900	; 0xc6d4
   1572a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1572e:	681a      	ldr	r2, [r3, #0]
   15730:	f64c 23fc 	movw	r3, #51964	; 0xcafc
   15734:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15738:	601a      	str	r2, [r3, #0]
   1573a:	f24c 63d8 	movw	r3, #50904	; 0xc6d8
   1573e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15742:	681a      	ldr	r2, [r3, #0]
   15744:	f64c 3300 	movw	r3, #51968	; 0xcb00
   15748:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1574c:	601a      	str	r2, [r3, #0]
   1574e:	f24c 63bc 	movw	r3, #50876	; 0xc6bc
   15752:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15756:	681a      	ldr	r2, [r3, #0]
   15758:	f64c 3304 	movw	r3, #51972	; 0xcb04
   1575c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15760:	601a      	str	r2, [r3, #0]
    EstimatorSetSpeedPol(gps_fspeed, gps_fcourse, gps_fclimb);
   15762:	f24c 63c0 	movw	r3, #50880	; 0xc6c0
   15766:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1576a:	681a      	ldr	r2, [r3, #0]
   1576c:	f64c 3334 	movw	r3, #52020	; 0xcb34
   15770:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15774:	601a      	str	r2, [r3, #0]
   15776:	f24c 63c8 	movw	r3, #50888	; 0xc6c8
   1577a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1577e:	681a      	ldr	r2, [r3, #0]
   15780:	f64c 3338 	movw	r3, #52024	; 0xcb38
   15784:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15788:	601a      	str	r2, [r3, #0]
   1578a:	f24c 63c4 	movw	r3, #50884	; 0xc6c4
   1578e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15792:	681a      	ldr	r2, [r3, #0]
   15794:	f64c 331c 	movw	r3, #51996	; 0xcb1c
   15798:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1579c:	601a      	str	r2, [r3, #0]
    
    if (estimator_flight_time)
   1579e:	f64c 332c 	movw	r3, #52012	; 0xcb2c
   157a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157a6:	881b      	ldrh	r3, [r3, #0]
   157a8:	2b00      	cmp	r3, #0
   157aa:	d001      	beq.n	157b0 <estimator_update_state_gps+0xa0>
      estimator_update_ir_estim();
   157ac:	f7ff fd4e 	bl	1524c <estimator_update_ir_estim>
  }
}
   157b0:	bd80      	pop	{r7, pc}
   157b2:	bf00      	nop

000157b4 <estimator_propagate_state>:

void estimator_propagate_state( void ) {
   157b4:	b480      	push	{r7}
   157b6:	af00      	add	r7, sp, #0
  
}
   157b8:	46bd      	mov	sp, r7
   157ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   157be:	4770      	bx	lr

000157c0 <inflight_calib>:
/* Please DO NOT EDIT */

#ifndef INFLIGHT_CALIB_H
#define INFLIGHT_CALIB_H 

void inflight_calib(bool_t mode_changed) {
   157c0:	b5b0      	push	{r4, r5, r7, lr}
   157c2:	b082      	sub	sp, #8
   157c4:	af00      	add	r7, sp, #0
   157c6:	4603      	mov	r3, r0
   157c8:	71fb      	strb	r3, [r7, #7]
  if (pprz_mode == PPRZ_MODE_AUTO1) {
   157ca:	f24c 532c 	movw	r3, #50476	; 0xc52c
   157ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157d2:	781b      	ldrb	r3, [r3, #0]
   157d4:	2b01      	cmp	r3, #1
   157d6:	f040 80e0 	bne.w	1599a <inflight_calib+0x1da>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   157da:	f64c 335c 	movw	r3, #52060	; 0xcb5c
   157de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   157e2:	781b      	ldrb	r3, [r3, #0]
   157e4:	2b02      	cmp	r3, #2
   157e6:	d168      	bne.n	158ba <inflight_calib+0xfa>
      static int16_t ir_pitch_neutral_init;
      if (mode_changed) {
   157e8:	79fb      	ldrb	r3, [r7, #7]
   157ea:	2b00      	cmp	r3, #0
   157ec:	d013      	beq.n	15816 <inflight_calib+0x56>
        ir_pitch_neutral_init = ir_pitch_neutral;
   157ee:	f240 5344 	movw	r3, #1348	; 0x544
   157f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   157f6:	881a      	ldrh	r2, [r3, #0]
   157f8:	f64c 3362 	movw	r3, #52066	; 0xcb62
   157fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15800:	801a      	strh	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   15802:	f24c 6350 	movw	r3, #50768	; 0xc650
   15806:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1580a:	895a      	ldrh	r2, [r3, #10]
   1580c:	f64c 335e 	movw	r3, #52062	; 0xcb5e
   15810:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15814:	801a      	strh	r2, [r3, #0]
      }
      ir_pitch_neutral = ParamValInt16(ir_pitch_neutral_init, 60.000000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   15816:	f24c 6350 	movw	r3, #50768	; 0xc650
   1581a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1581e:	895b      	ldrh	r3, [r3, #10]
   15820:	b21a      	sxth	r2, r3
   15822:	f64c 335e 	movw	r3, #52062	; 0xcb5e
   15826:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1582a:	881b      	ldrh	r3, [r3, #0]
   1582c:	b21b      	sxth	r3, r3
   1582e:	1ad3      	subs	r3, r2, r3
   15830:	4618      	mov	r0, r3
   15832:	f002 fdc3 	bl	183bc <__aeabi_i2f>
   15836:	4603      	mov	r3, r0
   15838:	4618      	mov	r0, r3
   1583a:	f002 f97f 	bl	17b3c <__aeabi_f2d>
   1583e:	4602      	mov	r2, r0
   15840:	460b      	mov	r3, r1
   15842:	4610      	mov	r0, r2
   15844:	4619      	mov	r1, r3
   15846:	f04f 0200 	mov.w	r2, #0
   1584a:	f04f 0300 	mov.w	r3, #0
   1584e:	f2c4 034e 	movt	r3, #16462	; 0x404e
   15852:	f002 f9c7 	bl	17be4 <__aeabi_dmul>
   15856:	4602      	mov	r2, r0
   15858:	460b      	mov	r3, r1
   1585a:	4610      	mov	r0, r2
   1585c:	4619      	mov	r1, r3
   1585e:	f04f 0200 	mov.w	r2, #0
   15862:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15866:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   1586a:	f002 fae5 	bl	17e38 <__aeabi_ddiv>
   1586e:	4602      	mov	r2, r0
   15870:	460b      	mov	r3, r1
   15872:	4610      	mov	r0, r2
   15874:	4619      	mov	r1, r3
   15876:	f002 fc4f 	bl	18118 <__aeabi_d2iz>
   1587a:	4603      	mov	r3, r0
   1587c:	b29b      	uxth	r3, r3
   1587e:	b29a      	uxth	r2, r3
   15880:	f64c 3362 	movw	r3, #52066	; 0xcb62
   15884:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15888:	881b      	ldrh	r3, [r3, #0]
   1588a:	b29b      	uxth	r3, r3
   1588c:	4413      	add	r3, r2
   1588e:	b29b      	uxth	r3, r3
   15890:	b29a      	uxth	r2, r3
   15892:	f240 5344 	movw	r3, #1348	; 0x544
   15896:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1589a:	801a      	strh	r2, [r3, #0]
      slider_1_val = (float)ir_pitch_neutral;
   1589c:	f240 5344 	movw	r3, #1348	; 0x544
   158a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158a4:	881b      	ldrh	r3, [r3, #0]
   158a6:	b21b      	sxth	r3, r3
   158a8:	4618      	mov	r0, r3
   158aa:	f002 fd87 	bl	183bc <__aeabi_i2f>
   158ae:	4602      	mov	r2, r0
   158b0:	f24c 5338 	movw	r3, #50488	; 0xc538
   158b4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158b8:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   158ba:	f64c 335c 	movw	r3, #52060	; 0xcb5c
   158be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158c2:	781b      	ldrb	r3, [r3, #0]
   158c4:	2b02      	cmp	r3, #2
   158c6:	d168      	bne.n	1599a <inflight_calib+0x1da>
      static int16_t ir_roll_neutral_init;
      if (mode_changed) {
   158c8:	79fb      	ldrb	r3, [r7, #7]
   158ca:	2b00      	cmp	r3, #0
   158cc:	d013      	beq.n	158f6 <inflight_calib+0x136>
        ir_roll_neutral_init = ir_roll_neutral;
   158ce:	f240 5342 	movw	r3, #1346	; 0x542
   158d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   158d6:	881a      	ldrh	r2, [r3, #0]
   158d8:	f64c 3364 	movw	r3, #52068	; 0xcb64
   158dc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158e0:	801a      	strh	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   158e2:	f24c 6350 	movw	r3, #50768	; 0xc650
   158e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158ea:	899a      	ldrh	r2, [r3, #12]
   158ec:	f64c 3360 	movw	r3, #52064	; 0xcb60
   158f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158f4:	801a      	strh	r2, [r3, #0]
      }
      ir_roll_neutral = ParamValInt16(ir_roll_neutral_init, -60.000000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   158f6:	f24c 6350 	movw	r3, #50768	; 0xc650
   158fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   158fe:	899b      	ldrh	r3, [r3, #12]
   15900:	b21a      	sxth	r2, r3
   15902:	f64c 3360 	movw	r3, #52064	; 0xcb60
   15906:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1590a:	881b      	ldrh	r3, [r3, #0]
   1590c:	b21b      	sxth	r3, r3
   1590e:	1ad3      	subs	r3, r2, r3
   15910:	4618      	mov	r0, r3
   15912:	f002 fd53 	bl	183bc <__aeabi_i2f>
   15916:	4603      	mov	r3, r0
   15918:	4618      	mov	r0, r3
   1591a:	f002 f90f 	bl	17b3c <__aeabi_f2d>
   1591e:	4602      	mov	r2, r0
   15920:	460b      	mov	r3, r1
   15922:	4610      	mov	r0, r2
   15924:	4619      	mov	r1, r3
   15926:	f04f 0200 	mov.w	r2, #0
   1592a:	f04f 0300 	mov.w	r3, #0
   1592e:	f2cc 034e 	movt	r3, #49230	; 0xc04e
   15932:	f002 f957 	bl	17be4 <__aeabi_dmul>
   15936:	4602      	mov	r2, r0
   15938:	460b      	mov	r3, r1
   1593a:	4610      	mov	r0, r2
   1593c:	4619      	mov	r1, r3
   1593e:	f04f 0200 	mov.w	r2, #0
   15942:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15946:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   1594a:	f002 fa75 	bl	17e38 <__aeabi_ddiv>
   1594e:	4602      	mov	r2, r0
   15950:	460b      	mov	r3, r1
   15952:	4610      	mov	r0, r2
   15954:	4619      	mov	r1, r3
   15956:	f002 fbdf 	bl	18118 <__aeabi_d2iz>
   1595a:	4603      	mov	r3, r0
   1595c:	b29b      	uxth	r3, r3
   1595e:	b29a      	uxth	r2, r3
   15960:	f64c 3364 	movw	r3, #52068	; 0xcb64
   15964:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15968:	881b      	ldrh	r3, [r3, #0]
   1596a:	b29b      	uxth	r3, r3
   1596c:	4413      	add	r3, r2
   1596e:	b29b      	uxth	r3, r3
   15970:	b29a      	uxth	r2, r3
   15972:	f240 5342 	movw	r3, #1346	; 0x542
   15976:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1597a:	801a      	strh	r2, [r3, #0]
      slider_2_val = (float)ir_roll_neutral;
   1597c:	f240 5342 	movw	r3, #1346	; 0x542
   15980:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15984:	881b      	ldrh	r3, [r3, #0]
   15986:	b21b      	sxth	r3, r3
   15988:	4618      	mov	r0, r3
   1598a:	f002 fd17 	bl	183bc <__aeabi_i2f>
   1598e:	4602      	mov	r2, r0
   15990:	f24c 533c 	movw	r3, #50492	; 0xc53c
   15994:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15998:	601a      	str	r2, [r3, #0]
    }
  }
  if (pprz_mode == PPRZ_MODE_AUTO2) {
   1599a:	f24c 532c 	movw	r3, #50476	; 0xc52c
   1599e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159a2:	781b      	ldrb	r3, [r3, #0]
   159a4:	2b02      	cmp	r3, #2
   159a6:	f040 80da 	bne.w	15b5e <inflight_calib+0x39e>
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   159aa:	f64c 335c 	movw	r3, #52060	; 0xcb5c
   159ae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159b2:	781b      	ldrb	r3, [r3, #0]
   159b4:	2b02      	cmp	r3, #2
   159b6:	d165      	bne.n	15a84 <inflight_calib+0x2c4>
      static float course_pgain_init;
      if (mode_changed) {
   159b8:	79fb      	ldrb	r3, [r7, #7]
   159ba:	2b00      	cmp	r3, #0
   159bc:	d013      	beq.n	159e6 <inflight_calib+0x226>
        course_pgain_init = course_pgain;
   159be:	f240 5358 	movw	r3, #1368	; 0x558
   159c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
   159c6:	681a      	ldr	r2, [r3, #0]
   159c8:	f64c 3368 	movw	r3, #52072	; 0xcb68
   159cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159d0:	601a      	str	r2, [r3, #0]
        slider1_init = from_fbw.channels[RADIO_GAIN1];
   159d2:	f24c 6350 	movw	r3, #50768	; 0xc650
   159d6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159da:	895a      	ldrh	r2, [r3, #10]
   159dc:	f64c 335e 	movw	r3, #52062	; 0xcb5e
   159e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159e4:	801a      	strh	r2, [r3, #0]
      }
      course_pgain = ParamValFloat(course_pgain_init, 0.100000, from_fbw.channels[RADIO_GAIN1], slider1_init);
   159e6:	f64c 3368 	movw	r3, #52072	; 0xcb68
   159ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   159ee:	681b      	ldr	r3, [r3, #0]
   159f0:	4618      	mov	r0, r3
   159f2:	f002 f8a3 	bl	17b3c <__aeabi_f2d>
   159f6:	4604      	mov	r4, r0
   159f8:	460d      	mov	r5, r1
   159fa:	f24c 6350 	movw	r3, #50768	; 0xc650
   159fe:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a02:	895b      	ldrh	r3, [r3, #10]
   15a04:	b21a      	sxth	r2, r3
   15a06:	f64c 335e 	movw	r3, #52062	; 0xcb5e
   15a0a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a0e:	881b      	ldrh	r3, [r3, #0]
   15a10:	b21b      	sxth	r3, r3
   15a12:	1ad3      	subs	r3, r2, r3
   15a14:	4618      	mov	r0, r3
   15a16:	f002 fcd1 	bl	183bc <__aeabi_i2f>
   15a1a:	4603      	mov	r3, r0
   15a1c:	4618      	mov	r0, r3
   15a1e:	f002 f88d 	bl	17b3c <__aeabi_f2d>
   15a22:	4602      	mov	r2, r0
   15a24:	460b      	mov	r3, r1
   15a26:	4610      	mov	r0, r2
   15a28:	4619      	mov	r1, r3
   15a2a:	a34f      	add	r3, pc, #316	; (adr r3, 15b68 <inflight_calib+0x3a8>)
   15a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15a30:	f002 f8d8 	bl	17be4 <__aeabi_dmul>
   15a34:	4602      	mov	r2, r0
   15a36:	460b      	mov	r3, r1
   15a38:	4610      	mov	r0, r2
   15a3a:	4619      	mov	r1, r3
   15a3c:	f04f 0200 	mov.w	r2, #0
   15a40:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15a44:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15a48:	f002 f9f6 	bl	17e38 <__aeabi_ddiv>
   15a4c:	4602      	mov	r2, r0
   15a4e:	460b      	mov	r3, r1
   15a50:	4620      	mov	r0, r4
   15a52:	4629      	mov	r1, r5
   15a54:	f001 ff14 	bl	17880 <__adddf3>
   15a58:	4602      	mov	r2, r0
   15a5a:	460b      	mov	r3, r1
   15a5c:	4610      	mov	r0, r2
   15a5e:	4619      	mov	r1, r3
   15a60:	f002 fba2 	bl	181a8 <__aeabi_d2f>
   15a64:	4602      	mov	r2, r0
   15a66:	f240 5358 	movw	r3, #1368	; 0x558
   15a6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a6e:	601a      	str	r2, [r3, #0]
      slider_1_val = (float)course_pgain;
   15a70:	f240 5358 	movw	r3, #1368	; 0x558
   15a74:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15a78:	681a      	ldr	r2, [r3, #0]
   15a7a:	f24c 5338 	movw	r3, #50488	; 0xc538
   15a7e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a82:	601a      	str	r2, [r3, #0]
    }
    if (inflight_calib_mode == IF_CALIB_MODE_UP) {
   15a84:	f64c 335c 	movw	r3, #52060	; 0xcb5c
   15a88:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15a8c:	781b      	ldrb	r3, [r3, #0]
   15a8e:	2b02      	cmp	r3, #2
   15a90:	d165      	bne.n	15b5e <inflight_calib+0x39e>
      static float max_roll_init;
      if (mode_changed) {
   15a92:	79fb      	ldrb	r3, [r7, #7]
   15a94:	2b00      	cmp	r3, #0
   15a96:	d013      	beq.n	15ac0 <inflight_calib+0x300>
        max_roll_init = max_roll;
   15a98:	f240 535c 	movw	r3, #1372	; 0x55c
   15a9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15aa0:	681a      	ldr	r2, [r3, #0]
   15aa2:	f64c 336c 	movw	r3, #52076	; 0xcb6c
   15aa6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15aaa:	601a      	str	r2, [r3, #0]
        slider2_init = from_fbw.channels[RADIO_GAIN2];
   15aac:	f24c 6350 	movw	r3, #50768	; 0xc650
   15ab0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ab4:	899a      	ldrh	r2, [r3, #12]
   15ab6:	f64c 3360 	movw	r3, #52064	; 0xcb60
   15aba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15abe:	801a      	strh	r2, [r3, #0]
      }
      max_roll = ParamValFloat(max_roll_init, -0.200000, from_fbw.channels[RADIO_GAIN2], slider2_init);
   15ac0:	f64c 336c 	movw	r3, #52076	; 0xcb6c
   15ac4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ac8:	681b      	ldr	r3, [r3, #0]
   15aca:	4618      	mov	r0, r3
   15acc:	f002 f836 	bl	17b3c <__aeabi_f2d>
   15ad0:	4604      	mov	r4, r0
   15ad2:	460d      	mov	r5, r1
   15ad4:	f24c 6350 	movw	r3, #50768	; 0xc650
   15ad8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15adc:	899b      	ldrh	r3, [r3, #12]
   15ade:	b21a      	sxth	r2, r3
   15ae0:	f64c 3360 	movw	r3, #52064	; 0xcb60
   15ae4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15ae8:	881b      	ldrh	r3, [r3, #0]
   15aea:	b21b      	sxth	r3, r3
   15aec:	1ad3      	subs	r3, r2, r3
   15aee:	4618      	mov	r0, r3
   15af0:	f002 fc64 	bl	183bc <__aeabi_i2f>
   15af4:	4603      	mov	r3, r0
   15af6:	4618      	mov	r0, r3
   15af8:	f002 f820 	bl	17b3c <__aeabi_f2d>
   15afc:	4602      	mov	r2, r0
   15afe:	460b      	mov	r3, r1
   15b00:	4610      	mov	r0, r2
   15b02:	4619      	mov	r1, r3
   15b04:	a31a      	add	r3, pc, #104	; (adr r3, 15b70 <inflight_calib+0x3b0>)
   15b06:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b0a:	f002 f86b 	bl	17be4 <__aeabi_dmul>
   15b0e:	4602      	mov	r2, r0
   15b10:	460b      	mov	r3, r1
   15b12:	4610      	mov	r0, r2
   15b14:	4619      	mov	r1, r3
   15b16:	f04f 0200 	mov.w	r2, #0
   15b1a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   15b1e:	f2c4 03c2 	movt	r3, #16578	; 0x40c2
   15b22:	f002 f989 	bl	17e38 <__aeabi_ddiv>
   15b26:	4602      	mov	r2, r0
   15b28:	460b      	mov	r3, r1
   15b2a:	4620      	mov	r0, r4
   15b2c:	4629      	mov	r1, r5
   15b2e:	f001 fea7 	bl	17880 <__adddf3>
   15b32:	4602      	mov	r2, r0
   15b34:	460b      	mov	r3, r1
   15b36:	4610      	mov	r0, r2
   15b38:	4619      	mov	r1, r3
   15b3a:	f002 fb35 	bl	181a8 <__aeabi_d2f>
   15b3e:	4602      	mov	r2, r0
   15b40:	f240 535c 	movw	r3, #1372	; 0x55c
   15b44:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b48:	601a      	str	r2, [r3, #0]
      slider_2_val = (float)max_roll;
   15b4a:	f240 535c 	movw	r3, #1372	; 0x55c
   15b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15b52:	681a      	ldr	r2, [r3, #0]
   15b54:	f24c 533c 	movw	r3, #50492	; 0xc53c
   15b58:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15b5c:	601a      	str	r2, [r3, #0]
    }
  }
}
   15b5e:	3708      	adds	r7, #8
   15b60:	46bd      	mov	sp, r7
   15b62:	bdb0      	pop	{r4, r5, r7, pc}
   15b64:	f3af 8000 	nop.w
   15b68:	9999999a 	.word	0x9999999a
   15b6c:	3fb99999 	.word	0x3fb99999
   15b70:	9999999a 	.word	0x9999999a
   15b74:	bfc99999 	.word	0xbfc99999

00015b78 <pp_atan2>:
 *
 */
#include <math.h>

double pp_atan2(double x, double y)
{
   15b78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   15b7c:	b08e      	sub	sp, #56	; 0x38
   15b7e:	af00      	add	r7, sp, #0
   15b80:	e9c7 0102 	strd	r0, r1, [r7, #8]
   15b84:	e9c7 2300 	strd	r2, r3, [r7]
	double coeff_1 = M_PI/4;
   15b88:	a357      	add	r3, pc, #348	; (adr r3, 15ce8 <pp_atan2+0x170>)
   15b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b8e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double coeff_2 = 3*coeff_1;
   15b92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15b96:	f04f 0200 	mov.w	r2, #0
   15b9a:	f04f 0300 	mov.w	r3, #0
   15b9e:	f2c4 0308 	movt	r3, #16392	; 0x4008
   15ba2:	f002 f81f 	bl	17be4 <__aeabi_dmul>
   15ba6:	4602      	mov	r2, r0
   15ba8:	460b      	mov	r3, r1
   15baa:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double abs_y = fabs(y)+1e-10;
   15bae:	e9d7 0100 	ldrd	r0, r1, [r7]
   15bb2:	f04f 0200 	mov.w	r2, #0
   15bb6:	f04f 0300 	mov.w	r3, #0
   15bba:	f002 fa85 	bl	180c8 <__aeabi_dcmplt>
   15bbe:	4603      	mov	r3, r0
   15bc0:	2b00      	cmp	r3, #0
   15bc2:	d009      	beq.n	15bd8 <pp_atan2+0x60>
   15bc4:	a14a      	add	r1, pc, #296	; (adr r1, 15cf0 <pp_atan2+0x178>)
   15bc6:	e9d1 0100 	ldrd	r0, r1, [r1]
   15bca:	e9d7 2300 	ldrd	r2, r3, [r7]
   15bce:	f001 fe55 	bl	1787c <__aeabi_dsub>
   15bd2:	4602      	mov	r2, r0
   15bd4:	460b      	mov	r3, r1
   15bd6:	e008      	b.n	15bea <pp_atan2+0x72>
   15bd8:	e9d7 0100 	ldrd	r0, r1, [r7]
   15bdc:	a344      	add	r3, pc, #272	; (adr r3, 15cf0 <pp_atan2+0x178>)
   15bde:	e9d3 2300 	ldrd	r2, r3, [r3]
   15be2:	f001 fe4d 	bl	17880 <__adddf3>
   15be6:	4602      	mov	r2, r0
   15be8:	460b      	mov	r3, r1
   15bea:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle, r;
	if(x>0)
   15bee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15bf2:	f04f 0200 	mov.w	r2, #0
   15bf6:	f04f 0300 	mov.w	r3, #0
   15bfa:	f002 fa83 	bl	18104 <__aeabi_dcmpgt>
   15bfe:	4603      	mov	r3, r0
   15c00:	2b00      	cmp	r3, #0
   15c02:	d02a      	beq.n	15c5a <pp_atan2+0xe2>
	{
		r = (x - abs_y)/(x + abs_y);
   15c04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15c08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15c0c:	f001 fe36 	bl	1787c <__aeabi_dsub>
   15c10:	4602      	mov	r2, r0
   15c12:	460b      	mov	r3, r1
   15c14:	4690      	mov	r8, r2
   15c16:	4699      	mov	r9, r3
   15c18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15c1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15c20:	f001 fe2e 	bl	17880 <__adddf3>
   15c24:	4602      	mov	r2, r0
   15c26:	460b      	mov	r3, r1
   15c28:	4640      	mov	r0, r8
   15c2a:	4649      	mov	r1, r9
   15c2c:	f002 f904 	bl	17e38 <__aeabi_ddiv>
   15c30:	4602      	mov	r2, r0
   15c32:	460b      	mov	r3, r1
   15c34:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_1 - coeff_1*r;
   15c38:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15c3c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15c40:	f001 ffd0 	bl	17be4 <__aeabi_dmul>
   15c44:	4602      	mov	r2, r0
   15c46:	460b      	mov	r3, r1
   15c48:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15c4c:	f001 fe16 	bl	1787c <__aeabi_dsub>
   15c50:	4602      	mov	r2, r0
   15c52:	460b      	mov	r3, r1
   15c54:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   15c58:	e029      	b.n	15cae <pp_atan2+0x136>
	}
	else
	{
		r = (x + abs_y)/(abs_y - x);
   15c5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   15c5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15c62:	f001 fe0d 	bl	17880 <__adddf3>
   15c66:	4602      	mov	r2, r0
   15c68:	460b      	mov	r3, r1
   15c6a:	4690      	mov	r8, r2
   15c6c:	4699      	mov	r9, r3
   15c6e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15c72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   15c76:	f001 fe01 	bl	1787c <__aeabi_dsub>
   15c7a:	4602      	mov	r2, r0
   15c7c:	460b      	mov	r3, r1
   15c7e:	4640      	mov	r0, r8
   15c80:	4649      	mov	r1, r9
   15c82:	f002 f8d9 	bl	17e38 <__aeabi_ddiv>
   15c86:	4602      	mov	r2, r0
   15c88:	460b      	mov	r3, r1
   15c8a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = coeff_2 - coeff_1*r;
   15c8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15c92:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15c96:	f001 ffa5 	bl	17be4 <__aeabi_dmul>
   15c9a:	4602      	mov	r2, r0
   15c9c:	460b      	mov	r3, r1
   15c9e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   15ca2:	f001 fdeb 	bl	1787c <__aeabi_dsub>
   15ca6:	4602      	mov	r2, r0
   15ca8:	460b      	mov	r3, r1
   15caa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}
	if(y<0)
   15cae:	e9d7 0100 	ldrd	r0, r1, [r7]
   15cb2:	f04f 0200 	mov.w	r2, #0
   15cb6:	f04f 0300 	mov.w	r3, #0
   15cba:	f002 fa05 	bl	180c8 <__aeabi_dcmplt>
   15cbe:	4603      	mov	r3, r0
   15cc0:	2b00      	cmp	r3, #0
   15cc2:	d004      	beq.n	15cce <pp_atan2+0x156>
		return (-angle);
   15cc4:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   15cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15cc8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15ccc:	e001      	b.n	15cd2 <pp_atan2+0x15a>
	else
		return angle;
   15cce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
   15cd2:	4622      	mov	r2, r4
   15cd4:	462b      	mov	r3, r5
}
   15cd6:	4610      	mov	r0, r2
   15cd8:	4619      	mov	r1, r3
   15cda:	3738      	adds	r7, #56	; 0x38
   15cdc:	46bd      	mov	sp, r7
   15cde:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   15ce2:	bf00      	nop
   15ce4:	f3af 8000 	nop.w
   15ce8:	54442d18 	.word	0x54442d18
   15cec:	3fe921fb 	.word	0x3fe921fb
   15cf0:	d9d7bdbb 	.word	0xd9d7bdbb
   15cf4:	3ddb7cdf 	.word	0x3ddb7cdf

00015cf8 <pp_sin>:
 * Range: -pi/2 <= x <= pi/2
 * Precision: +/- .000,000,005
 */
 
double pp_sin(double x)
{
   15cf8:	b5b0      	push	{r4, r5, r7, lr}
   15cfa:	b08c      	sub	sp, #48	; 0x30
   15cfc:	af00      	add	r7, sp, #0
   15cfe:	e9c7 0100 	strd	r0, r1, [r7]
	double xi, y, q, q2;
	int sign;

	xi = x; sign = 1;
   15d02:	e9d7 2300 	ldrd	r2, r3, [r7]
   15d06:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15d0a:	2301      	movs	r3, #1
   15d0c:	627b      	str	r3, [r7, #36]	; 0x24
	while (xi < -1.57079632679489661923) xi += 6.28318530717958647692;
   15d0e:	e00a      	b.n	15d26 <pp_sin+0x2e>
   15d10:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d14:	a35a      	add	r3, pc, #360	; (adr r3, 15e80 <pp_sin+0x188>)
   15d16:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d1a:	f001 fdb1 	bl	17880 <__adddf3>
   15d1e:	4602      	mov	r2, r0
   15d20:	460b      	mov	r3, r1
   15d22:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15d26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d2a:	a357      	add	r3, pc, #348	; (adr r3, 15e88 <pp_sin+0x190>)
   15d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d30:	f002 f9ca 	bl	180c8 <__aeabi_dcmplt>
   15d34:	4603      	mov	r3, r0
   15d36:	2b00      	cmp	r3, #0
   15d38:	d1ea      	bne.n	15d10 <pp_sin+0x18>
	while (xi > 4.71238898038468985769) xi -= 6.28318530717958647692;
   15d3a:	e00a      	b.n	15d52 <pp_sin+0x5a>
   15d3c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d40:	a34f      	add	r3, pc, #316	; (adr r3, 15e80 <pp_sin+0x188>)
   15d42:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d46:	f001 fd99 	bl	1787c <__aeabi_dsub>
   15d4a:	4602      	mov	r2, r0
   15d4c:	460b      	mov	r3, r1
   15d4e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15d52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d56:	a34e      	add	r3, pc, #312	; (adr r3, 15e90 <pp_sin+0x198>)
   15d58:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d5c:	f002 f9d2 	bl	18104 <__aeabi_dcmpgt>
   15d60:	4603      	mov	r3, r0
   15d62:	2b00      	cmp	r3, #0
   15d64:	d1ea      	bne.n	15d3c <pp_sin+0x44>
	if (xi > 1.57079632679489661923) {
   15d66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d6a:	a34b      	add	r3, pc, #300	; (adr r3, 15e98 <pp_sin+0x1a0>)
   15d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d70:	f002 f9c8 	bl	18104 <__aeabi_dcmpgt>
   15d74:	4603      	mov	r3, r0
   15d76:	2b00      	cmp	r3, #0
   15d78:	d00d      	beq.n	15d96 <pp_sin+0x9e>
		xi -= 3.141592653589793238462643;
   15d7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d7e:	a348      	add	r3, pc, #288	; (adr r3, 15ea0 <pp_sin+0x1a8>)
   15d80:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d84:	f001 fd7a 	bl	1787c <__aeabi_dsub>
   15d88:	4602      	mov	r2, r0
   15d8a:	460b      	mov	r3, r1
   15d8c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		sign = -1;
   15d90:	f04f 33ff 	mov.w	r3, #4294967295
   15d94:	627b      	str	r3, [r7, #36]	; 0x24
	}
	q = xi / 1.57079632679; q2 = q * q;
   15d96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d9a:	a343      	add	r3, pc, #268	; (adr r3, 15ea8 <pp_sin+0x1b0>)
   15d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15da0:	f002 f84a 	bl	17e38 <__aeabi_ddiv>
   15da4:	4602      	mov	r2, r0
   15da6:	460b      	mov	r3, r1
   15da8:	e9c7 2306 	strd	r2, r3, [r7, #24]
   15dac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15db0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15db4:	f001 ff16 	bl	17be4 <__aeabi_dmul>
   15db8:	4602      	mov	r2, r0
   15dba:	460b      	mov	r3, r1
   15dbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	y = ((((.00015148419  * q2
   15dc0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   15dc4:	a33a      	add	r3, pc, #232	; (adr r3, 15eb0 <pp_sin+0x1b8>)
   15dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   15dca:	f001 ff0b 	bl	17be4 <__aeabi_dmul>
   15dce:	4602      	mov	r2, r0
   15dd0:	460b      	mov	r3, r1
	      - .00467376557) * q2
   15dd2:	4610      	mov	r0, r2
   15dd4:	4619      	mov	r1, r3
   15dd6:	a338      	add	r3, pc, #224	; (adr r3, 15eb8 <pp_sin+0x1c0>)
   15dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ddc:	f001 fd4e 	bl	1787c <__aeabi_dsub>
   15de0:	4602      	mov	r2, r0
   15de2:	460b      	mov	r3, r1
   15de4:	4610      	mov	r0, r2
   15de6:	4619      	mov	r1, r3
   15de8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15dec:	f001 fefa 	bl	17be4 <__aeabi_dmul>
   15df0:	4602      	mov	r2, r0
   15df2:	460b      	mov	r3, r1
	      + .07968967928) * q2
   15df4:	4610      	mov	r0, r2
   15df6:	4619      	mov	r1, r3
   15df8:	a331      	add	r3, pc, #196	; (adr r3, 15ec0 <pp_sin+0x1c8>)
   15dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
   15dfe:	f001 fd3f 	bl	17880 <__adddf3>
   15e02:	4602      	mov	r2, r0
   15e04:	460b      	mov	r3, r1
   15e06:	4610      	mov	r0, r2
   15e08:	4619      	mov	r1, r3
   15e0a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15e0e:	f001 fee9 	bl	17be4 <__aeabi_dmul>
   15e12:	4602      	mov	r2, r0
   15e14:	460b      	mov	r3, r1
	      - .64596371106) * q2
   15e16:	4610      	mov	r0, r2
   15e18:	4619      	mov	r1, r3
   15e1a:	a32b      	add	r3, pc, #172	; (adr r3, 15ec8 <pp_sin+0x1d0>)
   15e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e20:	f001 fd2c 	bl	1787c <__aeabi_dsub>
   15e24:	4602      	mov	r2, r0
   15e26:	460b      	mov	r3, r1
   15e28:	4610      	mov	r0, r2
   15e2a:	4619      	mov	r1, r3
   15e2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15e30:	f001 fed8 	bl	17be4 <__aeabi_dmul>
   15e34:	4602      	mov	r2, r0
   15e36:	460b      	mov	r3, r1
	      +1.57079631847) * q;
   15e38:	4610      	mov	r0, r2
   15e3a:	4619      	mov	r1, r3
   15e3c:	a324      	add	r3, pc, #144	; (adr r3, 15ed0 <pp_sin+0x1d8>)
   15e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e42:	f001 fd1d 	bl	17880 <__adddf3>
   15e46:	4602      	mov	r2, r0
   15e48:	460b      	mov	r3, r1
	if (xi > 1.57079632679489661923) {
		xi -= 3.141592653589793238462643;
		sign = -1;
	}
	q = xi / 1.57079632679; q2 = q * q;
	y = ((((.00015148419  * q2
   15e4a:	4610      	mov	r0, r2
   15e4c:	4619      	mov	r1, r3
   15e4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15e52:	f001 fec7 	bl	17be4 <__aeabi_dmul>
   15e56:	4602      	mov	r2, r0
   15e58:	460b      	mov	r3, r1
   15e5a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	      - .00467376557) * q2
	      + .07968967928) * q2
	      - .64596371106) * q2
	      +1.57079631847) * q;
	return(sign < 0? -y : y);
   15e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15e60:	2b00      	cmp	r3, #0
   15e62:	da04      	bge.n	15e6e <pp_sin+0x176>
   15e64:	68bc      	ldr	r4, [r7, #8]
   15e66:	68fb      	ldr	r3, [r7, #12]
   15e68:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   15e6c:	e001      	b.n	15e72 <pp_sin+0x17a>
   15e6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
   15e72:	4622      	mov	r2, r4
   15e74:	462b      	mov	r3, r5
}
   15e76:	4610      	mov	r0, r2
   15e78:	4619      	mov	r1, r3
   15e7a:	3730      	adds	r7, #48	; 0x30
   15e7c:	46bd      	mov	sp, r7
   15e7e:	bdb0      	pop	{r4, r5, r7, pc}
   15e80:	54442d18 	.word	0x54442d18
   15e84:	401921fb 	.word	0x401921fb
   15e88:	54442d18 	.word	0x54442d18
   15e8c:	bff921fb 	.word	0xbff921fb
   15e90:	7f3321d2 	.word	0x7f3321d2
   15e94:	4012d97c 	.word	0x4012d97c
   15e98:	54442d18 	.word	0x54442d18
   15e9c:	3ff921fb 	.word	0x3ff921fb
   15ea0:	54442d18 	.word	0x54442d18
   15ea4:	400921fb 	.word	0x400921fb
   15ea8:	5443d6f4 	.word	0x5443d6f4
   15eac:	3ff921fb 	.word	0x3ff921fb
   15eb0:	48a890af 	.word	0x48a890af
   15eb4:	3f23daf7 	.word	0x3f23daf7
   15eb8:	645b6d0e 	.word	0x645b6d0e
   15ebc:	3f7324cc 	.word	0x3f7324cc
   15ec0:	f65619a5 	.word	0xf65619a5
   15ec4:	3fb4668a 	.word	0x3fb4668a
   15ec8:	16acf9cd 	.word	0x16acf9cd
   15ecc:	3fe4abbc 	.word	0x3fe4abbc
   15ed0:	520817f7 	.word	0x520817f7
   15ed4:	3ff921fb 	.word	0x3ff921fb

00015ed8 <pp_sqrt>:

#define SQRT_PRECISION 5
double pp_sqrt(double n)
{
   15ed8:	b480      	push	{r7}
   15eda:	b083      	sub	sp, #12
   15edc:	af00      	add	r7, sp, #0
   15ede:	e9c7 0100 	strd	r0, r1, [r7]
	/* perform the computation */
	for(i = 0; i < SQRT_PRECISION; i++)
		x = (x + n / x) / 2;
	return x;
#endif
}
   15ee2:	4610      	mov	r0, r2
   15ee4:	4619      	mov	r1, r3
   15ee6:	370c      	adds	r7, #12
   15ee8:	46bd      	mov	sp, r7
   15eea:	f85d 7b04 	ldr.w	r7, [sp], #4
   15eee:	4770      	bx	lr

00015ef0 <fbw_adc_buf_channel>:

uint16_t fbw_adc_samples[ FBW_NB_ADC ];

static struct fbw_adc_buf* buffers[FBW_NB_ADC];

void fbw_adc_buf_channel(uint8_t adc_channel, struct fbw_adc_buf* s) {
   15ef0:	b480      	push	{r7}
   15ef2:	b083      	sub	sp, #12
   15ef4:	af00      	add	r7, sp, #0
   15ef6:	4603      	mov	r3, r0
   15ef8:	6039      	str	r1, [r7, #0]
   15efa:	71fb      	strb	r3, [r7, #7]
  buffers[adc_channel] = s;
   15efc:	79fa      	ldrb	r2, [r7, #7]
   15efe:	f64c 3380 	movw	r3, #52096	; 0xcb80
   15f02:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f06:	6839      	ldr	r1, [r7, #0]
   15f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   15f0c:	370c      	adds	r7, #12
   15f0e:	46bd      	mov	sp, r7
   15f10:	f85d 7b04 	ldr.w	r7, [sp], #4
   15f14:	4770      	bx	lr
   15f16:	bf00      	nop

00015f18 <fbw_adc_init>:

void 
fbw_adc_init( void )
{
   15f18:	b480      	push	{r7}
   15f1a:	b083      	sub	sp, #12
   15f1c:	af00      	add	r7, sp, #0
  uint8_t i;
  /* Ensure that our port is for input with no pull-ups */
  ANALOG_PORT 	= 0x00;
   15f1e:	f242 0315 	movw	r3, #8213	; 0x2015
   15f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f26:	2200      	movs	r2, #0
   15f28:	701a      	strb	r2, [r3, #0]
  ANALOG_PORT_DIR	= 0x00;
   15f2a:	f242 0314 	movw	r3, #8212	; 0x2014
   15f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f32:	2200      	movs	r2, #0
   15f34:	701a      	strb	r2, [r3, #0]

  /* Select our external voltage ref */
  ADMUX		= ANALOG_VREF;
   15f36:	f242 0307 	movw	r3, #8199	; 0x2007
   15f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f3e:	22c0      	movs	r2, #192	; 0xc0
   15f40:	701a      	strb	r2, [r3, #0]

  /* Select out clock, turn on the ADC interrupt and start conversion */
  ADCSRA = 0
   15f42:	f242 0306 	movw	r3, #8198	; 0x2006
   15f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f4a:	22cf      	movs	r2, #207	; 0xcf
   15f4c:	701a      	strb	r2, [r3, #0]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15f4e:	2300      	movs	r3, #0
   15f50:	71fb      	strb	r3, [r7, #7]
   15f52:	e00a      	b.n	15f6a <fbw_adc_init+0x52>
    buffers[i] = (struct fbw_adc_buf*)0;
   15f54:	79fa      	ldrb	r2, [r7, #7]
   15f56:	f64c 3380 	movw	r3, #52096	; 0xcb80
   15f5a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f5e:	2100      	movs	r1, #0
   15f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    | _BV(ADEN )
    | _BV(ADIE )
    | _BV(ADSC );

  /* Init to 0 (usefull ?) */
  for(i = 0; i < FBW_NB_ADC; i++)
   15f64:	79fb      	ldrb	r3, [r7, #7]
   15f66:	3301      	adds	r3, #1
   15f68:	71fb      	strb	r3, [r7, #7]
   15f6a:	79fb      	ldrb	r3, [r7, #7]
   15f6c:	2b07      	cmp	r3, #7
   15f6e:	d9f1      	bls.n	15f54 <fbw_adc_init+0x3c>
    buffers[i] = (struct fbw_adc_buf*)0;
}
   15f70:	370c      	adds	r7, #12
   15f72:	46bd      	mov	sp, r7
   15f74:	f85d 7b04 	ldr.w	r7, [sp], #4
   15f78:	4770      	bx	lr
   15f7a:	bf00      	nop

00015f7c <__vector_34>:
#ifdef PAPABENCH_SINGLE
	SIGNAL(SIG_SPM_READY)
#else
	SIGNAL( SIG_INPUT_CAPTURE1 )
#endif
{
   15f7c:	b480      	push	{r7}
   15f7e:	b083      	sub	sp, #12
   15f80:	af00      	add	r7, sp, #0
  uint16_t		this;
  uint16_t		width;
  static uint8_t		state;
  static uint8_t		sync_start;

  this		= ICR1;
   15f82:	f242 0326 	movw	r3, #8230	; 0x2026
   15f86:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15f8a:	881b      	ldrh	r3, [r3, #0]
   15f8c:	80fb      	strh	r3, [r7, #6]
  width		= this - last;
   15f8e:	f64c 33dc 	movw	r3, #52188	; 0xcbdc
   15f92:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15f96:	881b      	ldrh	r3, [r3, #0]
   15f98:	88fa      	ldrh	r2, [r7, #6]
   15f9a:	1ad3      	subs	r3, r2, r3
   15f9c:	80bb      	strh	r3, [r7, #4]
  last		= this;
   15f9e:	f64c 33dc 	movw	r3, #52188	; 0xcbdc
   15fa2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15fa6:	88fa      	ldrh	r2, [r7, #6]
   15fa8:	801a      	strh	r2, [r3, #0]
  
  if( state == 0 ) {
   15faa:	f64c 33de 	movw	r3, #52190	; 0xcbde
   15fae:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15fb2:	781b      	ldrb	r3, [r3, #0]
   15fb4:	2b00      	cmp	r3, #0
   15fb6:	d11e      	bne.n	15ff6 <__vector_34+0x7a>
    uint8_t	end = TCNT2;
   15fb8:	f242 0324 	movw	r3, #8228	; 0x2024
   15fbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   15fc0:	781b      	ldrb	r3, [r3, #0]
   15fc2:	70fb      	strb	r3, [r7, #3]
    uint8_t diff = (end - sync_start);
   15fc4:	f64c 33df 	movw	r3, #52191	; 0xcbdf
   15fc8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15fcc:	781b      	ldrb	r3, [r3, #0]
   15fce:	78fa      	ldrb	r2, [r7, #3]
   15fd0:	1ad3      	subs	r3, r2, r3
   15fd2:	70bb      	strb	r3, [r7, #2]
    sync_start = end;
   15fd4:	f64c 33df 	movw	r3, #52191	; 0xcbdf
   15fd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15fdc:	78fa      	ldrb	r2, [r7, #3]
   15fde:	701a      	strb	r2, [r3, #0]

    /* The frame period of the mc3030 seems to be 25ms. 
     * One pulse lasts from 1.05ms to 2.150ms.
     * Sync pulse is at least 7ms : (7000*CLOCK)/1024 = 109
     */
    if( diff > (uint8_t)(((uint32_t)(7000ul*CLOCK))/1024ul) ) {
   15fe0:	78bb      	ldrb	r3, [r7, #2]
   15fe2:	2b6d      	cmp	r3, #109	; 0x6d
   15fe4:	d906      	bls.n	15ff4 <__vector_34+0x78>
      state = 1;
   15fe6:	f64c 33de 	movw	r3, #52190	; 0xcbde
   15fea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   15fee:	2201      	movs	r2, #1
   15ff0:	701a      	strb	r2, [r3, #0]
   15ff2:	e053      	b.n	1609c <__vector_34+0x120>
   15ff4:	e052      	b.n	1609c <__vector_34+0x120>
    }
  } 
  else {
    /* Read a data pulses */
    if( width < 700ul*CLOCK || width > 2300ul*CLOCK)
   15ff6:	88bb      	ldrh	r3, [r7, #4]
   15ff8:	f5b3 5f2f 	cmp.w	r3, #11200	; 0x2bc0
   15ffc:	d304      	bcc.n	16008 <__vector_34+0x8c>
   15ffe:	88ba      	ldrh	r2, [r7, #4]
   16000:	f648 73c0 	movw	r3, #36800	; 0x8fc0
   16004:	429a      	cmp	r2, r3
   16006:	d911      	bls.n	1602c <__vector_34+0xb0>
      RestartPpmCycle();
   16008:	f64c 33de 	movw	r3, #52190	; 0xcbde
   1600c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16010:	2200      	movs	r2, #0
   16012:	701a      	strb	r2, [r3, #0]
   16014:	f242 0324 	movw	r3, #8228	; 0x2024
   16018:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1601c:	781b      	ldrb	r3, [r3, #0]
   1601e:	b2da      	uxtb	r2, r3
   16020:	f64c 33df 	movw	r3, #52191	; 0xcbdf
   16024:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16028:	701a      	strb	r2, [r3, #0]
   1602a:	e038      	b.n	1609e <__vector_34+0x122>
    ppm_pulses[state - 1] = width;
   1602c:	f64c 33de 	movw	r3, #52190	; 0xcbde
   16030:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16034:	781b      	ldrb	r3, [r3, #0]
   16036:	1e5a      	subs	r2, r3, #1
   16038:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   1603c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16040:	88b9      	ldrh	r1, [r7, #4]
   16042:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (state >= PPM_NB_PULSES) {
   16046:	f64c 33de 	movw	r3, #52190	; 0xcbde
   1604a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1604e:	781b      	ldrb	r3, [r3, #0]
   16050:	2b08      	cmp	r3, #8
   16052:	d917      	bls.n	16084 <__vector_34+0x108>
      ppm_valid	= 1;
   16054:	f64c 33db 	movw	r3, #52187	; 0xcbdb
   16058:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1605c:	2201      	movs	r2, #1
   1605e:	701a      	strb	r2, [r3, #0]
      RestartPpmCycle();
   16060:	f64c 33de 	movw	r3, #52190	; 0xcbde
   16064:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16068:	2200      	movs	r2, #0
   1606a:	701a      	strb	r2, [r3, #0]
   1606c:	f242 0324 	movw	r3, #8228	; 0x2024
   16070:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16074:	781b      	ldrb	r3, [r3, #0]
   16076:	b2da      	uxtb	r2, r3
   16078:	f64c 33df 	movw	r3, #52191	; 0xcbdf
   1607c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16080:	701a      	strb	r2, [r3, #0]
   16082:	e00c      	b.n	1609e <__vector_34+0x122>
    } else 
      state++;
   16084:	f64c 33de 	movw	r3, #52190	; 0xcbde
   16088:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1608c:	781b      	ldrb	r3, [r3, #0]
   1608e:	3301      	adds	r3, #1
   16090:	b2da      	uxtb	r2, r3
   16092:	f64c 33de 	movw	r3, #52190	; 0xcbde
   16096:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1609a:	701a      	strb	r2, [r3, #0]
  }
  return;
   1609c:	bf00      	nop
}
   1609e:	370c      	adds	r7, #12
   160a0:	46bd      	mov	sp, r7
   160a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   160a6:	4770      	bx	lr

000160a8 <last_radio_from_ppm>:

/* Copy from the ppm receiving buffer to the buffer sent to mcu0 */
void last_radio_from_ppm() {
   160a8:	b590      	push	{r4, r7, lr}
   160aa:	b083      	sub	sp, #12
   160ac:	af00      	add	r7, sp, #0
  LastRadioFromPpm()
   160ae:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   160b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160b6:	881b      	ldrh	r3, [r3, #0]
   160b8:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   160bc:	b29b      	uxth	r3, r3
   160be:	80fb      	strh	r3, [r7, #6]
   160c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   160c4:	4618      	mov	r0, r3
   160c6:	f002 f979 	bl	183bc <__aeabi_i2f>
   160ca:	4603      	mov	r3, r0
   160cc:	4618      	mov	r0, r3
   160ce:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   160d2:	f002 f9c7 	bl	18464 <__aeabi_fmul>
   160d6:	4603      	mov	r3, r0
   160d8:	4618      	mov	r0, r3
   160da:	f002 fb89 	bl	187f0 <__aeabi_f2iz>
   160de:	4603      	mov	r3, r0
   160e0:	b29a      	uxth	r2, r3
   160e2:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   160e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160ea:	801a      	strh	r2, [r3, #0]
   160ec:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   160f0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   160f4:	881b      	ldrh	r3, [r3, #0]
   160f6:	b21b      	sxth	r3, r3
   160f8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   160fc:	dd07      	ble.n	1610e <last_radio_from_ppm+0x66>
   160fe:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16102:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16106:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1610a:	801a      	strh	r2, [r3, #0]
   1610c:	e00d      	b.n	1612a <last_radio_from_ppm+0x82>
   1610e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16112:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16116:	881b      	ldrh	r3, [r3, #0]
   16118:	b21b      	sxth	r3, r3
   1611a:	2b00      	cmp	r3, #0
   1611c:	da05      	bge.n	1612a <last_radio_from_ppm+0x82>
   1611e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16122:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16126:	2200      	movs	r2, #0
   16128:	801a      	strh	r2, [r3, #0]
   1612a:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   1612e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16132:	885b      	ldrh	r3, [r3, #2]
   16134:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16138:	b29b      	uxth	r3, r3
   1613a:	80fb      	strh	r3, [r7, #6]
   1613c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16140:	4618      	mov	r0, r3
   16142:	f002 f93b 	bl	183bc <__aeabi_i2f>
   16146:	4603      	mov	r3, r0
   16148:	4618      	mov	r0, r3
   1614a:	f002 fb51 	bl	187f0 <__aeabi_f2iz>
   1614e:	4603      	mov	r3, r0
   16150:	b29a      	uxth	r2, r3
   16152:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16156:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1615a:	805a      	strh	r2, [r3, #2]
   1615c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16160:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16164:	885b      	ldrh	r3, [r3, #2]
   16166:	b21b      	sxth	r3, r3
   16168:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1616c:	dd07      	ble.n	1617e <last_radio_from_ppm+0xd6>
   1616e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16172:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16176:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1617a:	805a      	strh	r2, [r3, #2]
   1617c:	e00f      	b.n	1619e <last_radio_from_ppm+0xf6>
   1617e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16182:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16186:	885b      	ldrh	r3, [r3, #2]
   16188:	b21b      	sxth	r3, r3
   1618a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1618e:	da06      	bge.n	1619e <last_radio_from_ppm+0xf6>
   16190:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16194:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16198:	f64d 2280 	movw	r2, #55936	; 0xda80
   1619c:	805a      	strh	r2, [r3, #2]
   1619e:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   161a2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161a6:	889b      	ldrh	r3, [r3, #4]
   161a8:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   161ac:	b29b      	uxth	r3, r3
   161ae:	80fb      	strh	r3, [r7, #6]
   161b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   161b4:	4618      	mov	r0, r3
   161b6:	f002 f901 	bl	183bc <__aeabi_i2f>
   161ba:	4603      	mov	r3, r0
   161bc:	4618      	mov	r0, r3
   161be:	f002 fb17 	bl	187f0 <__aeabi_f2iz>
   161c2:	4603      	mov	r3, r0
   161c4:	b29a      	uxth	r2, r3
   161c6:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   161ca:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161ce:	809a      	strh	r2, [r3, #4]
   161d0:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   161d4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161d8:	889b      	ldrh	r3, [r3, #4]
   161da:	b21b      	sxth	r3, r3
   161dc:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   161e0:	dd07      	ble.n	161f2 <last_radio_from_ppm+0x14a>
   161e2:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   161e6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161ea:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   161ee:	809a      	strh	r2, [r3, #4]
   161f0:	e00f      	b.n	16212 <last_radio_from_ppm+0x16a>
   161f2:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   161f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   161fa:	889b      	ldrh	r3, [r3, #4]
   161fc:	b21b      	sxth	r3, r3
   161fe:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16202:	da06      	bge.n	16212 <last_radio_from_ppm+0x16a>
   16204:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16208:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1620c:	f64d 2280 	movw	r2, #55936	; 0xda80
   16210:	809a      	strh	r2, [r3, #4]
   16212:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   16216:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1621a:	88db      	ldrh	r3, [r3, #6]
   1621c:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16220:	b29b      	uxth	r3, r3
   16222:	80fb      	strh	r3, [r7, #6]
   16224:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16228:	4618      	mov	r0, r3
   1622a:	f002 f8c7 	bl	183bc <__aeabi_i2f>
   1622e:	4603      	mov	r3, r0
   16230:	4618      	mov	r0, r3
   16232:	f002 fadd 	bl	187f0 <__aeabi_f2iz>
   16236:	4603      	mov	r3, r0
   16238:	b29a      	uxth	r2, r3
   1623a:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1623e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16242:	80da      	strh	r2, [r3, #6]
   16244:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16248:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1624c:	88db      	ldrh	r3, [r3, #6]
   1624e:	b21b      	sxth	r3, r3
   16250:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16254:	dd07      	ble.n	16266 <last_radio_from_ppm+0x1be>
   16256:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1625a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1625e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16262:	80da      	strh	r2, [r3, #6]
   16264:	e00f      	b.n	16286 <last_radio_from_ppm+0x1de>
   16266:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1626a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1626e:	88db      	ldrh	r3, [r3, #6]
   16270:	b21b      	sxth	r3, r3
   16272:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16276:	da06      	bge.n	16286 <last_radio_from_ppm+0x1de>
   16278:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1627c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16280:	f64d 2280 	movw	r2, #55936	; 0xda80
   16284:	80da      	strh	r2, [r3, #6]
   16286:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   1628a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1628e:	891b      	ldrh	r3, [r3, #8]
   16290:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16294:	b29b      	uxth	r3, r3
   16296:	80fb      	strh	r3, [r7, #6]
   16298:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1629c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162a0:	891b      	ldrh	r3, [r3, #8]
   162a2:	b21b      	sxth	r3, r3
   162a4:	4618      	mov	r0, r3
   162a6:	f002 f889 	bl	183bc <__aeabi_i2f>
   162aa:	4604      	mov	r4, r0
   162ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   162b0:	4618      	mov	r0, r3
   162b2:	f002 f883 	bl	183bc <__aeabi_i2f>
   162b6:	4603      	mov	r3, r0
   162b8:	4618      	mov	r0, r3
   162ba:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   162be:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   162c2:	f002 f8cf 	bl	18464 <__aeabi_fmul>
   162c6:	4603      	mov	r3, r0
   162c8:	4620      	mov	r0, r4
   162ca:	4619      	mov	r1, r3
   162cc:	f001 ffc2 	bl	18254 <__addsf3>
   162d0:	4603      	mov	r3, r0
   162d2:	4618      	mov	r0, r3
   162d4:	f002 fa8c 	bl	187f0 <__aeabi_f2iz>
   162d8:	4603      	mov	r3, r0
   162da:	b29a      	uxth	r2, r3
   162dc:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   162e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162e4:	811a      	strh	r2, [r3, #8]
   162e6:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   162ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   162ee:	895b      	ldrh	r3, [r3, #10]
   162f0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   162f4:	b29b      	uxth	r3, r3
   162f6:	80fb      	strh	r3, [r7, #6]
   162f8:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   162fc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16300:	895b      	ldrh	r3, [r3, #10]
   16302:	b21b      	sxth	r3, r3
   16304:	4618      	mov	r0, r3
   16306:	f002 f859 	bl	183bc <__aeabi_i2f>
   1630a:	4604      	mov	r4, r0
   1630c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16310:	4618      	mov	r0, r3
   16312:	f002 f853 	bl	183bc <__aeabi_i2f>
   16316:	4603      	mov	r3, r0
   16318:	4618      	mov	r0, r3
   1631a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1631e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16322:	f002 f89f 	bl	18464 <__aeabi_fmul>
   16326:	4603      	mov	r3, r0
   16328:	4620      	mov	r0, r4
   1632a:	4619      	mov	r1, r3
   1632c:	f001 ff92 	bl	18254 <__addsf3>
   16330:	4603      	mov	r3, r0
   16332:	4618      	mov	r0, r3
   16334:	f002 fa5c 	bl	187f0 <__aeabi_f2iz>
   16338:	4603      	mov	r3, r0
   1633a:	b29a      	uxth	r2, r3
   1633c:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16340:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16344:	815a      	strh	r2, [r3, #10]
   16346:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   1634a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1634e:	899b      	ldrh	r3, [r3, #12]
   16350:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16354:	b29b      	uxth	r3, r3
   16356:	80fb      	strh	r3, [r7, #6]
   16358:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1635c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16360:	899b      	ldrh	r3, [r3, #12]
   16362:	b21b      	sxth	r3, r3
   16364:	4618      	mov	r0, r3
   16366:	f002 f829 	bl	183bc <__aeabi_i2f>
   1636a:	4604      	mov	r4, r0
   1636c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16370:	4618      	mov	r0, r3
   16372:	f002 f823 	bl	183bc <__aeabi_i2f>
   16376:	4603      	mov	r3, r0
   16378:	4618      	mov	r0, r3
   1637a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1637e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16382:	f002 f86f 	bl	18464 <__aeabi_fmul>
   16386:	4603      	mov	r3, r0
   16388:	4620      	mov	r0, r4
   1638a:	4619      	mov	r1, r3
   1638c:	f001 ff62 	bl	18254 <__addsf3>
   16390:	4603      	mov	r3, r0
   16392:	4618      	mov	r0, r3
   16394:	f002 fa2c 	bl	187f0 <__aeabi_f2iz>
   16398:	4603      	mov	r3, r0
   1639a:	b29a      	uxth	r2, r3
   1639c:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   163a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163a4:	819a      	strh	r2, [r3, #12]
   163a6:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   163aa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163ae:	89db      	ldrh	r3, [r3, #14]
   163b0:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   163b4:	b29b      	uxth	r3, r3
   163b6:	80fb      	strh	r3, [r7, #6]
   163b8:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   163bc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   163c0:	89db      	ldrh	r3, [r3, #14]
   163c2:	b21b      	sxth	r3, r3
   163c4:	4618      	mov	r0, r3
   163c6:	f001 fff9 	bl	183bc <__aeabi_i2f>
   163ca:	4604      	mov	r4, r0
   163cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   163d0:	4618      	mov	r0, r3
   163d2:	f001 fff3 	bl	183bc <__aeabi_i2f>
   163d6:	4603      	mov	r3, r0
   163d8:	4618      	mov	r0, r3
   163da:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   163de:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   163e2:	f002 f83f 	bl	18464 <__aeabi_fmul>
   163e6:	4603      	mov	r3, r0
   163e8:	4620      	mov	r0, r4
   163ea:	4619      	mov	r1, r3
   163ec:	f001 ff32 	bl	18254 <__addsf3>
   163f0:	4603      	mov	r3, r0
   163f2:	4618      	mov	r0, r3
   163f4:	f002 f9fc 	bl	187f0 <__aeabi_f2iz>
   163f8:	4603      	mov	r3, r0
   163fa:	b29a      	uxth	r2, r3
   163fc:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16400:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16404:	81da      	strh	r2, [r3, #14]
   16406:	f64c 33a0 	movw	r3, #52128	; 0xcba0
   1640a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1640e:	8a1b      	ldrh	r3, [r3, #16]
   16410:	f5a3 43c8 	sub.w	r3, r3, #25600	; 0x6400
   16414:	b29b      	uxth	r3, r3
   16416:	80fb      	strh	r3, [r7, #6]
   16418:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1641c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16420:	8a1b      	ldrh	r3, [r3, #16]
   16422:	b21b      	sxth	r3, r3
   16424:	4618      	mov	r0, r3
   16426:	f001 ffc9 	bl	183bc <__aeabi_i2f>
   1642a:	4604      	mov	r4, r0
   1642c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
   16430:	4618      	mov	r0, r3
   16432:	f001 ffc3 	bl	183bc <__aeabi_i2f>
   16436:	4603      	mov	r3, r0
   16438:	4618      	mov	r0, r3
   1643a:	f64c 41cd 	movw	r1, #52429	; 0xcccd
   1643e:	f6c3 51cc 	movt	r1, #15820	; 0x3dcc
   16442:	f002 f80f 	bl	18464 <__aeabi_fmul>
   16446:	4603      	mov	r3, r0
   16448:	4620      	mov	r0, r4
   1644a:	4619      	mov	r1, r3
   1644c:	f001 ff02 	bl	18254 <__addsf3>
   16450:	4603      	mov	r3, r0
   16452:	4618      	mov	r0, r3
   16454:	f002 f9cc 	bl	187f0 <__aeabi_f2iz>
   16458:	4603      	mov	r3, r0
   1645a:	b29a      	uxth	r2, r3
   1645c:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16460:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16464:	821a      	strh	r2, [r3, #16]
   16466:	f64c 33e0 	movw	r3, #52192	; 0xcbe0
   1646a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1646e:	781b      	ldrb	r3, [r3, #0]
   16470:	3301      	adds	r3, #1
   16472:	b2da      	uxtb	r2, r3
   16474:	f64c 33e0 	movw	r3, #52192	; 0xcbe0
   16478:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1647c:	701a      	strb	r2, [r3, #0]
   1647e:	f64c 33e0 	movw	r3, #52192	; 0xcbe0
   16482:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16486:	781b      	ldrb	r3, [r3, #0]
   16488:	2b0a      	cmp	r3, #10
   1648a:	f040 8101 	bne.w	16690 <last_radio_from_ppm+0x5e8>
   1648e:	f64c 33e0 	movw	r3, #52192	; 0xcbe0
   16492:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16496:	2200      	movs	r2, #0
   16498:	701a      	strb	r2, [r3, #0]
   1649a:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1649e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164a2:	891a      	ldrh	r2, [r3, #8]
   164a4:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   164a8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164ac:	811a      	strh	r2, [r3, #8]
   164ae:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   164b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164b6:	2200      	movs	r2, #0
   164b8:	811a      	strh	r2, [r3, #8]
   164ba:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   164be:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164c2:	891b      	ldrh	r3, [r3, #8]
   164c4:	b21b      	sxth	r3, r3
   164c6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   164ca:	dd07      	ble.n	164dc <last_radio_from_ppm+0x434>
   164cc:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   164d0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   164d8:	811a      	strh	r2, [r3, #8]
   164da:	e00f      	b.n	164fc <last_radio_from_ppm+0x454>
   164dc:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   164e0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164e4:	891b      	ldrh	r3, [r3, #8]
   164e6:	b21b      	sxth	r3, r3
   164e8:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   164ec:	da06      	bge.n	164fc <last_radio_from_ppm+0x454>
   164ee:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   164f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   164f6:	f64d 2280 	movw	r2, #55936	; 0xda80
   164fa:	811a      	strh	r2, [r3, #8]
   164fc:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16500:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16504:	895a      	ldrh	r2, [r3, #10]
   16506:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1650a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1650e:	815a      	strh	r2, [r3, #10]
   16510:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16514:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16518:	2200      	movs	r2, #0
   1651a:	815a      	strh	r2, [r3, #10]
   1651c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16520:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16524:	895b      	ldrh	r3, [r3, #10]
   16526:	b21b      	sxth	r3, r3
   16528:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1652c:	dd07      	ble.n	1653e <last_radio_from_ppm+0x496>
   1652e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16532:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16536:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1653a:	815a      	strh	r2, [r3, #10]
   1653c:	e00f      	b.n	1655e <last_radio_from_ppm+0x4b6>
   1653e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16542:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16546:	895b      	ldrh	r3, [r3, #10]
   16548:	b21b      	sxth	r3, r3
   1654a:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   1654e:	da06      	bge.n	1655e <last_radio_from_ppm+0x4b6>
   16550:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16554:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16558:	f64d 2280 	movw	r2, #55936	; 0xda80
   1655c:	815a      	strh	r2, [r3, #10]
   1655e:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16562:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16566:	899a      	ldrh	r2, [r3, #12]
   16568:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1656c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16570:	819a      	strh	r2, [r3, #12]
   16572:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16576:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1657a:	2200      	movs	r2, #0
   1657c:	819a      	strh	r2, [r3, #12]
   1657e:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16582:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16586:	899b      	ldrh	r3, [r3, #12]
   16588:	b21b      	sxth	r3, r3
   1658a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1658e:	dd07      	ble.n	165a0 <last_radio_from_ppm+0x4f8>
   16590:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16594:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16598:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   1659c:	819a      	strh	r2, [r3, #12]
   1659e:	e00f      	b.n	165c0 <last_radio_from_ppm+0x518>
   165a0:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   165a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165a8:	899b      	ldrh	r3, [r3, #12]
   165aa:	b21b      	sxth	r3, r3
   165ac:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   165b0:	da06      	bge.n	165c0 <last_radio_from_ppm+0x518>
   165b2:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   165b6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165ba:	f64d 2280 	movw	r2, #55936	; 0xda80
   165be:	819a      	strh	r2, [r3, #12]
   165c0:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   165c4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165c8:	89da      	ldrh	r2, [r3, #14]
   165ca:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   165ce:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165d2:	81da      	strh	r2, [r3, #14]
   165d4:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   165d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165dc:	2200      	movs	r2, #0
   165de:	81da      	strh	r2, [r3, #14]
   165e0:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   165e4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165e8:	89db      	ldrh	r3, [r3, #14]
   165ea:	b21b      	sxth	r3, r3
   165ec:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   165f0:	dd07      	ble.n	16602 <last_radio_from_ppm+0x55a>
   165f2:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   165f6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   165fa:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   165fe:	81da      	strh	r2, [r3, #14]
   16600:	e00f      	b.n	16622 <last_radio_from_ppm+0x57a>
   16602:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16606:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1660a:	89db      	ldrh	r3, [r3, #14]
   1660c:	b21b      	sxth	r3, r3
   1660e:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16612:	da06      	bge.n	16622 <last_radio_from_ppm+0x57a>
   16614:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16618:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1661c:	f64d 2280 	movw	r2, #55936	; 0xda80
   16620:	81da      	strh	r2, [r3, #14]
   16622:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   16626:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1662a:	8a1a      	ldrh	r2, [r3, #16]
   1662c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16630:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16634:	821a      	strh	r2, [r3, #16]
   16636:	f64c 33c8 	movw	r3, #52168	; 0xcbc8
   1663a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1663e:	2200      	movs	r2, #0
   16640:	821a      	strh	r2, [r3, #16]
   16642:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16646:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1664a:	8a1b      	ldrh	r3, [r3, #16]
   1664c:	b21b      	sxth	r3, r3
   1664e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   16652:	dd07      	ble.n	16664 <last_radio_from_ppm+0x5bc>
   16654:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16658:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1665c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16660:	821a      	strh	r2, [r3, #16]
   16662:	e00f      	b.n	16684 <last_radio_from_ppm+0x5dc>
   16664:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16668:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1666c:	8a1b      	ldrh	r3, [r3, #16]
   1666e:	b21b      	sxth	r3, r3
   16670:	f513 5f16 	cmn.w	r3, #9600	; 0x2580
   16674:	da06      	bge.n	16684 <last_radio_from_ppm+0x5dc>
   16676:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   1667a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1667e:	f64d 2280 	movw	r2, #55936	; 0xda80
   16682:	821a      	strh	r2, [r3, #16]
   16684:	f64c 33da 	movw	r3, #52186	; 0xcbda
   16688:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1668c:	2201      	movs	r2, #1
   1668e:	701a      	strb	r2, [r3, #0]
}
   16690:	370c      	adds	r7, #12
   16692:	46bd      	mov	sp, r7
   16694:	bd90      	pop	{r4, r7, pc}
   16696:	bf00      	nop

00016698 <spi_reset>:
volatile bool_t spi_was_interrupted = FALSE;

static volatile uint8_t idx_buf = 0;
static volatile uint8_t xor_in, xor_out;

void spi_reset(void) {
   16698:	b480      	push	{r7}
   1669a:	af00      	add	r7, sp, #0
  idx_buf = 0;
   1669c:	f64c 4314 	movw	r3, #52244	; 0xcc14
   166a0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166a4:	2200      	movs	r2, #0
   166a6:	701a      	strb	r2, [r3, #0]
  xor_in = 0;
   166a8:	f64c 4315 	movw	r3, #52245	; 0xcc15
   166ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166b0:	2200      	movs	r2, #0
   166b2:	701a      	strb	r2, [r3, #0]
  xor_out = ((uint8_t*)&to_mega128)[idx_buf];
   166b4:	f64c 4314 	movw	r3, #52244	; 0xcc14
   166b8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166bc:	781b      	ldrb	r3, [r3, #0]
   166be:	b2db      	uxtb	r3, r3
   166c0:	461a      	mov	r2, r3
   166c2:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   166c6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166ca:	4413      	add	r3, r2
   166cc:	781a      	ldrb	r2, [r3, #0]
   166ce:	f64c 4316 	movw	r3, #52246	; 0xcc16
   166d2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166d6:	701a      	strb	r2, [r3, #0]
  SPDR = xor_out;
   166d8:	f242 030f 	movw	r3, #8207	; 0x200f
   166dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   166e0:	f64c 4216 	movw	r2, #52246	; 0xcc16
   166e4:	f2c2 0204 	movt	r2, #8196	; 0x2004
   166e8:	7812      	ldrb	r2, [r2, #0]
   166ea:	b2d2      	uxtb	r2, r2
   166ec:	701a      	strb	r2, [r3, #0]
  mega128_receive_valid = FALSE;
   166ee:	f64c 4312 	movw	r3, #52242	; 0xcc12
   166f2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   166f6:	2200      	movs	r2, #0
   166f8:	701a      	strb	r2, [r3, #0]
}
   166fa:	46bd      	mov	sp, r7
   166fc:	f85d 7b04 	ldr.w	r7, [sp], #4
   16700:	4770      	bx	lr
   16702:	bf00      	nop

00016704 <fbw_spi_init>:

void fbw_spi_init(void) {
   16704:	b480      	push	{r7}
   16706:	af00      	add	r7, sp, #0
  to_mega128.status = 0;
   16708:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   1670c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16710:	2200      	movs	r2, #0
   16712:	74da      	strb	r2, [r3, #19]
  to_mega128.nb_err = 0;
   16714:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   16718:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1671c:	2200      	movs	r2, #0
   1671e:	751a      	strb	r2, [r3, #20]

  /* set it pin output */
  //  IT_DDR |= _BV(IT_PIN);

  /* set MISO pin output */
  SPI_DDR |= _BV(SPI_MISO_PIN);
   16720:	f242 0317 	movw	r3, #8215	; 0x2017
   16724:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16728:	f242 0217 	movw	r2, #8215	; 0x2017
   1672c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16730:	7812      	ldrb	r2, [r2, #0]
   16732:	b2d2      	uxtb	r2, r2
   16734:	f042 0210 	orr.w	r2, r2, #16
   16738:	b2d2      	uxtb	r2, r2
   1673a:	701a      	strb	r2, [r3, #0]
  /* enable SPI, slave, MSB first, sck idle low */
  SPCR = _BV(SPE);
   1673c:	f242 030d 	movw	r3, #8205	; 0x200d
   16740:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16744:	2240      	movs	r2, #64	; 0x40
   16746:	701a      	strb	r2, [r3, #0]
  /* enable interrupt */
  SPCR |= _BV(SPIE);
   16748:	f242 030d 	movw	r3, #8205	; 0x200d
   1674c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16750:	f242 020d 	movw	r2, #8205	; 0x200d
   16754:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16758:	7812      	ldrb	r2, [r2, #0]
   1675a:	b2d2      	uxtb	r2, r2
   1675c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16760:	b2d2      	uxtb	r2, r2
   16762:	701a      	strb	r2, [r3, #0]
}
   16764:	46bd      	mov	sp, r7
   16766:	f85d 7b04 	ldr.w	r7, [sp], #4
   1676a:	4770      	bx	lr
   1676c:	0000      	movs	r0, r0
	...

00016770 <timer_init>:
 * running at Clk/1024.  For 16 Mhz clock, this will be every
 * 16384 microseconds, or 61 Hz.
 */
static inline void
timer_init( void )
{
   16770:	b480      	push	{r7}
   16772:	af00      	add	r7, sp, #0
  /* Timer1 @ Clk/1: System clock, ppm and servos pulses */
  TCCR1A		= 0x00;
   16774:	f242 032f 	movw	r3, #8239	; 0x202f
   16778:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1677c:	2200      	movs	r2, #0
   1677e:	701a      	strb	r2, [r3, #0]
  TCCR1B		= 0x01;
   16780:	f242 032e 	movw	r3, #8238	; 0x202e
   16784:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16788:	2201      	movs	r2, #1
   1678a:	701a      	strb	r2, [r3, #0]
  
  /* Timer2 @ Clk/1024: Periodic clock            */
  TCCR2		= 0x07;
   1678c:	f242 0325 	movw	r3, #8229	; 0x2025
   16790:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16794:	2207      	movs	r2, #7
   16796:	701a      	strb	r2, [r3, #0]
}
   16798:	46bd      	mov	sp, r7
   1679a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1679e:	4770      	bx	lr

000167a0 <ppm_init>:
 *
 * JR might be rising edge clocked; set that as an option
 */
static inline void
ppm_init( void )
{
   167a0:	b480      	push	{r7}
   167a2:	af00      	add	r7, sp, #0
#if   PPM_RX_TYPE == RXFUTABA
  cbi( TCCR1B, ICES1 );
   167a4:	f242 032e 	movw	r3, #8238	; 0x202e
   167a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167ac:	f242 022e 	movw	r2, #8238	; 0x202e
   167b0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   167b4:	7812      	ldrb	r2, [r2, #0]
   167b6:	b2d2      	uxtb	r2, r2
   167b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   167bc:	b2d2      	uxtb	r2, r2
   167be:	701a      	strb	r2, [r3, #0]
#else
#	error "ppm.h: Unknown receiver type in PPM_RX_TYPE"
#endif

  /* No noise cancelation */
  sbi( TCCR1B, ICNC1 );
   167c0:	f242 032e 	movw	r3, #8238	; 0x202e
   167c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167c8:	f242 022e 	movw	r2, #8238	; 0x202e
   167cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   167d0:	7812      	ldrb	r2, [r2, #0]
   167d2:	b2d2      	uxtb	r2, r2
   167d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   167d8:	b2d2      	uxtb	r2, r2
   167da:	701a      	strb	r2, [r3, #0]
  
  /* Set ICP to input, no internal pull up */
  cbi( PPM_DDR, PPM_PIN);
   167dc:	f242 0317 	movw	r3, #8215	; 0x2017
   167e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   167e4:	f242 0217 	movw	r2, #8215	; 0x2017
   167e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   167ec:	7812      	ldrb	r2, [r2, #0]
   167ee:	b2d2      	uxtb	r2, r2
   167f0:	f022 0201 	bic.w	r2, r2, #1
   167f4:	b2d2      	uxtb	r2, r2
   167f6:	701a      	strb	r2, [r3, #0]
  
  /* Enable interrupt on input capture */
  sbi( TIMSK, TICIE1 );
   167f8:	f242 0337 	movw	r3, #8247	; 0x2037
   167fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16800:	f242 0237 	movw	r2, #8247	; 0x2037
   16804:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16808:	7812      	ldrb	r2, [r2, #0]
   1680a:	b2d2      	uxtb	r2, r2
   1680c:	f042 0220 	orr.w	r2, r2, #32
   16810:	b2d2      	uxtb	r2, r2
   16812:	701a      	strb	r2, [r3, #0]
}
   16814:	46bd      	mov	sp, r7
   16816:	f85d 7b04 	ldr.w	r7, [sp], #4
   1681a:	4770      	bx	lr

0001681c <to_autopilot_from_last_radio>:
/*   uart_transmit('\n'); */
/* } */


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
   1681c:	b580      	push	{r7, lr}
   1681e:	b082      	sub	sp, #8
   16820:	af00      	add	r7, sp, #0
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   16822:	2300      	movs	r3, #0
   16824:	71fb      	strb	r3, [r7, #7]
   16826:	e010      	b.n	1684a <to_autopilot_from_last_radio+0x2e>
     to_mega128.channels[i] = last_radio[i];
   16828:	79fa      	ldrb	r2, [r7, #7]
   1682a:	79f9      	ldrb	r1, [r7, #7]
   1682c:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16830:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16834:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   16838:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   1683c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16840:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


/* Prepare data to be sent to mcu0 */
void to_autopilot_from_last_radio (void) {
  uint8_t i;
  for(i = 0; i < RADIO_CTL_NB; i++)
   16844:	79fb      	ldrb	r3, [r7, #7]
   16846:	3301      	adds	r3, #1
   16848:	71fb      	strb	r3, [r7, #7]
   1684a:	79fb      	ldrb	r3, [r7, #7]
   1684c:	2b08      	cmp	r3, #8
   1684e:	d9eb      	bls.n	16828 <to_autopilot_from_last_radio+0xc>
     to_mega128.channels[i] = last_radio[i];
  to_mega128.status = (radio_ok ? _BV(STATUS_RADIO_OK) : 0);
   16850:	f64c 43a4 	movw	r3, #52388	; 0xcca4
   16854:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16858:	781b      	ldrb	r3, [r3, #0]
   1685a:	2b00      	cmp	r3, #0
   1685c:	bf0c      	ite	eq
   1685e:	2300      	moveq	r3, #0
   16860:	2301      	movne	r3, #1
   16862:	b2db      	uxtb	r3, r3
   16864:	461a      	mov	r2, r3
   16866:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   1686a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1686e:	74da      	strb	r2, [r3, #19]
  to_mega128.status |= (radio_really_lost ? _BV(RADIO_REALLY_LOST) : 0);
   16870:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   16874:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16878:	7cdb      	ldrb	r3, [r3, #19]
   1687a:	b2da      	uxtb	r2, r3
   1687c:	f64c 43a6 	movw	r3, #52390	; 0xcca6
   16880:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16884:	781b      	ldrb	r3, [r3, #0]
   16886:	2b00      	cmp	r3, #0
   16888:	d001      	beq.n	1688e <to_autopilot_from_last_radio+0x72>
   1688a:	2302      	movs	r3, #2
   1688c:	e000      	b.n	16890 <to_autopilot_from_last_radio+0x74>
   1688e:	2300      	movs	r3, #0
   16890:	4313      	orrs	r3, r2
   16892:	b2db      	uxtb	r3, r3
   16894:	b2da      	uxtb	r2, r3
   16896:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   1689a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1689e:	74da      	strb	r2, [r3, #19]
  if (last_radio_contains_avg_channels) {
   168a0:	f64c 33da 	movw	r3, #52186	; 0xcbda
   168a4:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168a8:	781b      	ldrb	r3, [r3, #0]
   168aa:	2b00      	cmp	r3, #0
   168ac:	d012      	beq.n	168d4 <to_autopilot_from_last_radio+0xb8>
    to_mega128.status |= _BV(AVERAGED_CHANNELS_SENT);
   168ae:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   168b2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168b6:	7cdb      	ldrb	r3, [r3, #19]
   168b8:	f043 0304 	orr.w	r3, r3, #4
   168bc:	b2da      	uxtb	r2, r3
   168be:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   168c2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168c6:	74da      	strb	r2, [r3, #19]
    last_radio_contains_avg_channels = FALSE;
   168c8:	f64c 33da 	movw	r3, #52186	; 0xcbda
   168cc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168d0:	2200      	movs	r2, #0
   168d2:	701a      	strb	r2, [r3, #0]
  }
  to_mega128.ppm_cpt = last_ppm_cpt;
   168d4:	f64c 43a8 	movw	r3, #52392	; 0xcca8
   168d8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168dc:	781a      	ldrb	r2, [r3, #0]
   168de:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   168e2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168e6:	749a      	strb	r2, [r3, #18]
#ifndef CTL_BRD_V1_1
  to_mega128.vsupply = VoltageOfAdc(vsupply_adc_buf.sum/AV_NB_SAMPLE) * 10;
   168e8:	f64c 4318 	movw	r3, #52248	; 0xcc18
   168ec:	f2c2 0304 	movt	r3, #8196	; 0x2004
   168f0:	881b      	ldrh	r3, [r3, #0]
   168f2:	4618      	mov	r0, r3
   168f4:	f001 f910 	bl	17b18 <__aeabi_i2d>
   168f8:	4602      	mov	r2, r0
   168fa:	460b      	mov	r3, r1
   168fc:	4610      	mov	r0, r2
   168fe:	4619      	mov	r1, r3
   16900:	a31b      	add	r3, pc, #108	; (adr r3, 16970 <to_autopilot_from_last_radio+0x154>)
   16902:	e9d3 2300 	ldrd	r2, r3, [r3]
   16906:	f001 f96d 	bl	17be4 <__aeabi_dmul>
   1690a:	4602      	mov	r2, r0
   1690c:	460b      	mov	r3, r1
   1690e:	4610      	mov	r0, r2
   16910:	4619      	mov	r1, r3
   16912:	f04f 0200 	mov.w	r2, #0
   16916:	f04f 0300 	mov.w	r3, #0
   1691a:	f2c4 0340 	movt	r3, #16448	; 0x4040
   1691e:	f001 fa8b 	bl	17e38 <__aeabi_ddiv>
   16922:	4602      	mov	r2, r0
   16924:	460b      	mov	r3, r1
   16926:	4610      	mov	r0, r2
   16928:	4619      	mov	r1, r3
   1692a:	a313      	add	r3, pc, #76	; (adr r3, 16978 <to_autopilot_from_last_radio+0x15c>)
   1692c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16930:	f000 ffa6 	bl	17880 <__adddf3>
   16934:	4602      	mov	r2, r0
   16936:	460b      	mov	r3, r1
   16938:	4610      	mov	r0, r2
   1693a:	4619      	mov	r1, r3
   1693c:	f04f 0200 	mov.w	r2, #0
   16940:	f04f 0300 	mov.w	r3, #0
   16944:	f2c4 0324 	movt	r3, #16420	; 0x4024
   16948:	f001 f94c 	bl	17be4 <__aeabi_dmul>
   1694c:	4602      	mov	r2, r0
   1694e:	460b      	mov	r3, r1
   16950:	4610      	mov	r0, r2
   16952:	4619      	mov	r1, r3
   16954:	f001 fc08 	bl	18168 <__aeabi_d2uiz>
   16958:	4603      	mov	r3, r0
   1695a:	b2da      	uxtb	r2, r3
   1695c:	f64c 33fc 	movw	r3, #52220	; 0xcbfc
   16960:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16964:	755a      	strb	r2, [r3, #21]
#else
  to_mega128.vsupply = 0;
#endif
}
   16966:	3708      	adds	r7, #8
   16968:	46bd      	mov	sp, r7
   1696a:	bd80      	pop	{r7, pc}
   1696c:	f3af 8000 	nop.w
   16970:	1eb851ec 	.word	0x1eb851ec
   16974:	3f91eb85 	.word	0x3f91eb85
   16978:	020c49ba 	.word	0x020c49ba
   1697c:	3fb6872b 	.word	0x3fb6872b

00016980 <send_data_to_autopilot_task>:

void send_data_to_autopilot_task(void)
{
   16980:	b580      	push	{r7, lr}
   16982:	af00      	add	r7, sp, #0
	//vPrintString("S_2 send_data_to_autopilot_task start! \n\r"); //SunnyBeike

    // modified by wanbo
   if ( !SpiIsSelected() && spi_was_interrupted ) 
   16984:	f242 0316 	movw	r3, #8214	; 0x2016
   16988:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1698c:	781b      	ldrb	r3, [r3, #0]
   1698e:	b2db      	uxtb	r3, r3
   16990:	f003 0304 	and.w	r3, r3, #4
   16994:	2b00      	cmp	r3, #0
   16996:	d011      	beq.n	169bc <send_data_to_autopilot_task+0x3c>
   16998:	f64c 4313 	movw	r3, #52243	; 0xcc13
   1699c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169a0:	781b      	ldrb	r3, [r3, #0]
   169a2:	b2db      	uxtb	r3, r3
   169a4:	2b00      	cmp	r3, #0
   169a6:	d009      	beq.n	169bc <send_data_to_autopilot_task+0x3c>
   {
      spi_was_interrupted = FALSE;
   169a8:	f64c 4313 	movw	r3, #52243	; 0xcc13
   169ac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   169b0:	2200      	movs	r2, #0
   169b2:	701a      	strb	r2, [r3, #0]
      to_autopilot_from_last_radio();
   169b4:	f7ff ff32 	bl	1681c <to_autopilot_from_last_radio>
      spi_reset();
   169b8:	f7ff fe6e 	bl	16698 <spi_reset>
   }
	//vPrintString("S_2 send_data_to_autopilot_task end! \n\r"); //SunnyBeike

}
   169bc:	bd80      	pop	{r7, pc}
   169be:	bf00      	nop

000169c0 <fbw_init>:
	static uint8_t _1Hz;
	static uint8_t _20Hz;
#endif
*/

void fbw_init(void) {
   169c0:	b580      	push	{r7, lr}
   169c2:	af00      	add	r7, sp, #0
  uart_init_tx();
   169c4:	f000 fb68 	bl	17098 <uart_init_tx>
  uart_print_string("FBW Booting $Id: main.c,v 1.3 2008/10/22 19:41:19 casse Exp $\n\r");
   169c8:	f648 2094 	movw	r0, #35476	; 0x8a94
   169cc:	f2c0 0001 	movt	r0, #1
   169d0:	f000 fc40 	bl	17254 <uart_print_string>

#ifndef CTL_BRD_V1_1
  fbw_adc_init();
   169d4:	f7ff faa0 	bl	15f18 <fbw_adc_init>
  fbw_adc_buf_channel(3, &vsupply_adc_buf);
   169d8:	2003      	movs	r0, #3
   169da:	f64c 4118 	movw	r1, #52248	; 0xcc18
   169de:	f2c2 0104 	movt	r1, #8196	; 0x2004
   169e2:	f7ff fa85 	bl	15ef0 <fbw_adc_buf_channel>
  fbw_adc_buf_channel(6, &vservos_adc_buf);
   169e6:	2006      	movs	r0, #6
   169e8:	f64c 415c 	movw	r1, #52316	; 0xcc5c
   169ec:	f2c2 0104 	movt	r1, #8196	; 0x2004
   169f0:	f7ff fa7e 	bl	15ef0 <fbw_adc_buf_channel>
#endif
  timer_init();
   169f4:	f7ff febc 	bl	16770 <timer_init>
  servo_init();
   169f8:	f000 f8fa 	bl	16bf0 <servo_init>
  ppm_init();
   169fc:	f7ff fed0 	bl	167a0 <ppm_init>
  fbw_spi_init();
   16a00:	f7ff fe80 	bl	16704 <fbw_spi_init>
  //sei(); //FN
}
   16a04:	bd80      	pop	{r7, pc}
   16a06:	bf00      	nop

00016a08 <test_ppm_task>:
  return 0;
}
#endif
*/
void test_ppm_task(void)
{
   16a08:	b580      	push	{r7, lr}
   16a0a:	af00      	add	r7, sp, #0
	//vPrintString("S_1 test_ppm_task start! \n\r"); //SunnyBeike
    // modified by wanbo
    if( ppm_valid ) 
   16a0c:	f64c 33db 	movw	r3, #52187	; 0xcbdb
   16a10:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a14:	781b      	ldrb	r3, [r3, #0]
   16a16:	b2db      	uxtb	r3, r3
   16a18:	2b00      	cmp	r3, #0
   16a1a:	d04c      	beq.n	16ab6 <test_ppm_task+0xae>
    {
      ppm_valid = FALSE;
   16a1c:	f64c 33db 	movw	r3, #52187	; 0xcbdb
   16a20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a24:	2200      	movs	r2, #0
   16a26:	701a      	strb	r2, [r3, #0]
      ppm_cpt++;
   16a28:	f64c 43a7 	movw	r3, #52391	; 0xcca7
   16a2c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a30:	781b      	ldrb	r3, [r3, #0]
   16a32:	3301      	adds	r3, #1
   16a34:	b2da      	uxtb	r2, r3
   16a36:	f64c 43a7 	movw	r3, #52391	; 0xcca7
   16a3a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a3e:	701a      	strb	r2, [r3, #0]
      radio_ok = TRUE;
   16a40:	f64c 43a4 	movw	r3, #52388	; 0xcca4
   16a44:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a48:	2201      	movs	r2, #1
   16a4a:	701a      	strb	r2, [r3, #0]
      radio_really_lost = FALSE;
   16a4c:	f64c 43a6 	movw	r3, #52390	; 0xcca6
   16a50:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a54:	2200      	movs	r2, #0
   16a56:	701a      	strb	r2, [r3, #0]
      time_since_last_ppm = 0;
   16a58:	f64c 43a2 	movw	r3, #52386	; 0xcca2
   16a5c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a60:	2200      	movs	r2, #0
   16a62:	801a      	strh	r2, [r3, #0]
      last_radio_from_ppm();
   16a64:	f7ff fb20 	bl	160a8 <last_radio_from_ppm>
      if (last_radio_contains_avg_channels) 
   16a68:	f64c 33da 	movw	r3, #52186	; 0xcbda
   16a6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a70:	781b      	ldrb	r3, [r3, #0]
   16a72:	2b00      	cmp	r3, #0
   16a74:	d011      	beq.n	16a9a <test_ppm_task+0x92>
      {
	mode = MODE_OF_PPRZ(last_radio[RADIO_MODE]);
   16a76:	f64c 33b4 	movw	r3, #52148	; 0xcbb4
   16a7a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a7e:	891b      	ldrh	r3, [r3, #8]
   16a80:	b21b      	sxth	r3, r3
   16a82:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
   16a86:	bfb4      	ite	lt
   16a88:	2300      	movlt	r3, #0
   16a8a:	2301      	movge	r3, #1
   16a8c:	b2db      	uxtb	r3, r3
   16a8e:	461a      	mov	r2, r3
   16a90:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16a94:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16a98:	701a      	strb	r2, [r3, #0]
      }
      if (mode == MODE_MANUAL) 
   16a9a:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16a9e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16aa2:	781b      	ldrb	r3, [r3, #0]
   16aa4:	2b00      	cmp	r3, #0
   16aa6:	d11a      	bne.n	16ade <test_ppm_task+0xd6>
      {
	servo_set(last_radio);
   16aa8:	f64c 30b4 	movw	r0, #52148	; 0xcbb4
   16aac:	f2c2 0004 	movt	r0, #8196	; 0x2004
   16ab0:	f000 f97c 	bl	16dac <servo_set>
   16ab4:	e013      	b.n	16ade <test_ppm_task+0xd6>
      }
    } 
    else if (mode == MODE_MANUAL && radio_really_lost) 
   16ab6:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16aba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16abe:	781b      	ldrb	r3, [r3, #0]
   16ac0:	2b00      	cmp	r3, #0
   16ac2:	d10c      	bne.n	16ade <test_ppm_task+0xd6>
   16ac4:	f64c 43a6 	movw	r3, #52390	; 0xcca6
   16ac8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16acc:	781b      	ldrb	r3, [r3, #0]
   16ace:	2b00      	cmp	r3, #0
   16ad0:	d005      	beq.n	16ade <test_ppm_task+0xd6>
    {
      mode = MODE_AUTO;
   16ad2:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16ad6:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ada:	2201      	movs	r2, #1
   16adc:	701a      	strb	r2, [r3, #0]
    }
    if (time_since_last_ppm >= STALLED_TIME) 
   16ade:	f64c 43a2 	movw	r3, #52386	; 0xcca2
   16ae2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ae6:	881b      	ldrh	r3, [r3, #0]
   16ae8:	2b1d      	cmp	r3, #29
   16aea:	d905      	bls.n	16af8 <test_ppm_task+0xf0>
    {
      radio_ok = FALSE;
   16aec:	f64c 43a4 	movw	r3, #52388	; 0xcca4
   16af0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16af4:	2200      	movs	r2, #0
   16af6:	701a      	strb	r2, [r3, #0]
    }
    if (time_since_last_ppm >= REALLY_STALLED_TIME) 
   16af8:	f64c 43a2 	movw	r3, #52386	; 0xcca2
   16afc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b00:	881b      	ldrh	r3, [r3, #0]
   16b02:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   16b06:	d305      	bcc.n	16b14 <test_ppm_task+0x10c>
    {
      radio_really_lost = TRUE;
   16b08:	f64c 43a6 	movw	r3, #52390	; 0xcca6
   16b0c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b10:	2201      	movs	r2, #1
   16b12:	701a      	strb	r2, [r3, #0]
    }
	//vPrintString("S_1 test_ppm_task end! \n\r"); //SunnyBeike

}
   16b14:	bd80      	pop	{r7, pc}
   16b16:	bf00      	nop

00016b18 <check_failsafe_task>:
void check_failsafe_task(void)
{
   16b18:	b580      	push	{r7, lr}
   16b1a:	af00      	add	r7, sp, #0
	//vPrintString("S_9 check_failsafe_task start! \n\r"); //SunnyBeike
    //modified by wanbo
    if ((mode == MODE_MANUAL && !radio_ok) || (mode == MODE_AUTO && !mega128_ok)) 
   16b1c:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16b20:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b24:	781b      	ldrb	r3, [r3, #0]
   16b26:	2b00      	cmp	r3, #0
   16b28:	d106      	bne.n	16b38 <check_failsafe_task+0x20>
   16b2a:	f64c 43a4 	movw	r3, #52388	; 0xcca4
   16b2e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b32:	781b      	ldrb	r3, [r3, #0]
   16b34:	2b00      	cmp	r3, #0
   16b36:	d00d      	beq.n	16b54 <check_failsafe_task+0x3c>
   16b38:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16b3c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b40:	781b      	ldrb	r3, [r3, #0]
   16b42:	2b01      	cmp	r3, #1
   16b44:	d10c      	bne.n	16b60 <check_failsafe_task+0x48>
   16b46:	f64c 43a5 	movw	r3, #52389	; 0xcca5
   16b4a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b4e:	781b      	ldrb	r3, [r3, #0]
   16b50:	2b00      	cmp	r3, #0
   16b52:	d105      	bne.n	16b60 <check_failsafe_task+0x48>
    {
      servo_set(failsafe);
   16b54:	f648 2080 	movw	r0, #35456	; 0x8a80
   16b58:	f2c0 0001 	movt	r0, #1
   16b5c:	f000 f926 	bl	16dac <servo_set>
    }
	//vPrintString("S_9 check_failsafe_task end! \n\r"); //SunnyBeike
}
   16b60:	bd80      	pop	{r7, pc}
   16b62:	bf00      	nop

00016b64 <check_mega128_values_task>:
void check_mega128_values_task(void)
{
   16b64:	b580      	push	{r7, lr}
   16b66:	af00      	add	r7, sp, #0
	//vPrintString("S_8 check_mega128_values_task start! \n\r"); //SunnyBeike
// modified by wanbo
     if ( !SpiIsSelected() && spi_was_interrupted ) 
   16b68:	f242 0316 	movw	r3, #8214	; 0x2016
   16b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16b70:	781b      	ldrb	r3, [r3, #0]
   16b72:	b2db      	uxtb	r3, r3
   16b74:	f003 0304 	and.w	r3, r3, #4
   16b78:	2b00      	cmp	r3, #0
   16b7a:	d028      	beq.n	16bce <check_mega128_values_task+0x6a>
   16b7c:	f64c 4313 	movw	r3, #52243	; 0xcc13
   16b80:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b84:	781b      	ldrb	r3, [r3, #0]
   16b86:	b2db      	uxtb	r3, r3
   16b88:	2b00      	cmp	r3, #0
   16b8a:	d020      	beq.n	16bce <check_mega128_values_task+0x6a>
     {
         if (mega128_receive_valid)
   16b8c:	f64c 4312 	movw	r3, #52242	; 0xcc12
   16b90:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16b94:	781b      	ldrb	r3, [r3, #0]
   16b96:	b2db      	uxtb	r3, r3
   16b98:	2b00      	cmp	r3, #0
   16b9a:	d018      	beq.n	16bce <check_mega128_values_task+0x6a>
         { 
             time_since_last_mega128 = 0;
   16b9c:	f64c 43a1 	movw	r3, #52385	; 0xcca1
   16ba0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ba4:	2200      	movs	r2, #0
   16ba6:	701a      	strb	r2, [r3, #0]
             mega128_ok = TRUE;
   16ba8:	f64c 43a5 	movw	r3, #52389	; 0xcca5
   16bac:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bb0:	2201      	movs	r2, #1
   16bb2:	701a      	strb	r2, [r3, #0]
             if (mode == MODE_AUTO)
   16bb4:	f64c 43a0 	movw	r3, #52384	; 0xcca0
   16bb8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bbc:	781b      	ldrb	r3, [r3, #0]
   16bbe:	2b01      	cmp	r3, #1
   16bc0:	d105      	bne.n	16bce <check_mega128_values_task+0x6a>
                 servo_set(from_mega128.channels);
   16bc2:	f64c 30e4 	movw	r0, #52196	; 0xcbe4
   16bc6:	f2c2 0004 	movt	r0, #8196	; 0x2004
   16bca:	f000 f8ef 	bl	16dac <servo_set>
         }
     }
     if (time_since_last_mega128 == STALLED_TIME) 
   16bce:	f64c 43a1 	movw	r3, #52385	; 0xcca1
   16bd2:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16bd6:	781b      	ldrb	r3, [r3, #0]
   16bd8:	2b1e      	cmp	r3, #30
   16bda:	d105      	bne.n	16be8 <check_mega128_values_task+0x84>
     {
         mega128_ok = FALSE;
   16bdc:	f64c 43a5 	movw	r3, #52389	; 0xcca5
   16be0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16be4:	2200      	movs	r2, #0
   16be6:	701a      	strb	r2, [r3, #0]
     }
	//vPrintString("S_8 check_mega128_values_task end! \n\r"); //SunnyBeike
}
   16be8:	bd80      	pop	{r7, pc}
   16bea:	bf00      	nop
   16bec:	f3af 8000 	nop.w

00016bf0 <servo_init>:
 *
 * Ideally, you can use two decade counters to drive 20 servos.
 */
void
servo_init( void )
{
   16bf0:	b480      	push	{r7}
   16bf2:	b083      	sub	sp, #12
   16bf4:	af00      	add	r7, sp, #0
  uint8_t			i;

  /* Configure the reset and clock lines */
  _4017_RESET_DDR |= _BV(_4017_RESET_PIN);
   16bf6:	f242 0311 	movw	r3, #8209	; 0x2011
   16bfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16bfe:	f242 0211 	movw	r2, #8209	; 0x2011
   16c02:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16c06:	7812      	ldrb	r2, [r2, #0]
   16c08:	b2d2      	uxtb	r2, r2
   16c0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16c0e:	b2d2      	uxtb	r2, r2
   16c10:	701a      	strb	r2, [r3, #0]
  _4017_CLOCK_DDR |= _BV(_4017_CLOCK_PIN);
   16c12:	f242 0317 	movw	r3, #8215	; 0x2017
   16c16:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c1a:	f242 0217 	movw	r2, #8215	; 0x2017
   16c1e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16c22:	7812      	ldrb	r2, [r2, #0]
   16c24:	b2d2      	uxtb	r2, r2
   16c26:	f042 0202 	orr.w	r2, r2, #2
   16c2a:	b2d2      	uxtb	r2, r2
   16c2c:	701a      	strb	r2, [r3, #0]

  /* Reset the decade counter */
  sbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16c2e:	f242 0312 	movw	r3, #8210	; 0x2012
   16c32:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c36:	f242 0212 	movw	r2, #8210	; 0x2012
   16c3a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16c3e:	7812      	ldrb	r2, [r2, #0]
   16c40:	b2d2      	uxtb	r2, r2
   16c42:	f062 027f 	orn	r2, r2, #127	; 0x7f
   16c46:	b2d2      	uxtb	r2, r2
   16c48:	701a      	strb	r2, [r3, #0]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );
   16c4a:	f242 0318 	movw	r3, #8216	; 0x2018
   16c4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c52:	f242 0218 	movw	r2, #8216	; 0x2018
   16c56:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16c5a:	7812      	ldrb	r2, [r2, #0]
   16c5c:	b2d2      	uxtb	r2, r2
   16c5e:	f022 0202 	bic.w	r2, r2, #2
   16c62:	b2d2      	uxtb	r2, r2
   16c64:	701a      	strb	r2, [r3, #0]

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16c66:	2300      	movs	r3, #0
   16c68:	71fb      	strb	r3, [r7, #7]
   16c6a:	e00b      	b.n	16c84 <servo_init+0x94>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
   16c6c:	79fa      	ldrb	r2, [r7, #7]
   16c6e:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16c72:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16c76:	f645 51c0 	movw	r1, #24000	; 0x5dc0
   16c7a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

  /* Lower the regular servo line */
  cbi( _4017_CLOCK_PORT, _4017_CLOCK_PIN );

  /* Set all servos at their midpoints */
  for( i=0 ; i < _4017_NB_CHANNELS ; i++ )
   16c7e:	79fb      	ldrb	r3, [r7, #7]
   16c80:	3301      	adds	r3, #1
   16c82:	71fb      	strb	r3, [r7, #7]
   16c84:	79fb      	ldrb	r3, [r7, #7]
   16c86:	2b09      	cmp	r3, #9
   16c88:	d9f0      	bls.n	16c6c <servo_init+0x7c>
    //    servo_widths[i] = SERVO_MIN;
    servo_widths[i] = (SERVO_MIN+SERVO_MAX)/2;
	
  /* Set servos to go off some long time from now */
  SERVO_OCR	= 32768ul;
   16c8a:	f242 032a 	movw	r3, #8234	; 0x202a
   16c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16c92:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   16c96:	801a      	strh	r2, [r3, #0]

  /*
   * Configure output compare to toggle the output bits.
   */
  TCCR1A |=  _BV(SERVO_COM0 );
   16c98:	f242 032f 	movw	r3, #8239	; 0x202f
   16c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ca0:	f242 022f 	movw	r2, #8239	; 0x202f
   16ca4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16ca8:	7812      	ldrb	r2, [r2, #0]
   16caa:	b2d2      	uxtb	r2, r2
   16cac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16cb0:	b2d2      	uxtb	r2, r2
   16cb2:	701a      	strb	r2, [r3, #0]
	
  /* Clear the interrupt flags in case they are set */
  TIFR = _BV(SERVO_FLAG);
   16cb4:	f242 0336 	movw	r3, #8246	; 0x2036
   16cb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16cbc:	2210      	movs	r2, #16
   16cbe:	701a      	strb	r2, [r3, #0]

  /* Unassert the decade counter reset to start it running */
  cbi( _4017_RESET_PORT, _4017_RESET_PIN );
   16cc0:	f242 0312 	movw	r3, #8210	; 0x2012
   16cc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16cc8:	f242 0212 	movw	r2, #8210	; 0x2012
   16ccc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16cd0:	7812      	ldrb	r2, [r2, #0]
   16cd2:	b2d2      	uxtb	r2, r2
   16cd4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   16cd8:	b2d2      	uxtb	r2, r2
   16cda:	701a      	strb	r2, [r3, #0]

  /* Enable our output compare interrupts */
  TIMSK |= _BV(SERVO_ENABLE );
   16cdc:	f242 0337 	movw	r3, #8247	; 0x2037
   16ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   16ce4:	f242 0237 	movw	r2, #8247	; 0x2037
   16ce8:	f2c2 0200 	movt	r2, #8192	; 0x2000
   16cec:	7812      	ldrb	r2, [r2, #0]
   16cee:	b2d2      	uxtb	r2, r2
   16cf0:	f042 0210 	orr.w	r2, r2, #16
   16cf4:	b2d2      	uxtb	r2, r2
   16cf6:	701a      	strb	r2, [r3, #0]
}
   16cf8:	370c      	adds	r7, #12
   16cfa:	46bd      	mov	sp, r7
   16cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
   16d00:	4770      	bx	lr
   16d02:	bf00      	nop

00016d04 <servo_set_one>:

  servo++;
}
#endif

void servo_set_one(uint8_t servo, uint16_t value_us) {
   16d04:	b480      	push	{r7}
   16d06:	b083      	sub	sp, #12
   16d08:	af00      	add	r7, sp, #0
   16d0a:	4602      	mov	r2, r0
   16d0c:	460b      	mov	r3, r1
   16d0e:	71fa      	strb	r2, [r7, #7]
   16d10:	80bb      	strh	r3, [r7, #4]
  servo_widths[servo] = ChopServo(CLOCK*value_us);
   16d12:	79f9      	ldrb	r1, [r7, #7]
   16d14:	88bb      	ldrh	r3, [r7, #4]
   16d16:	011b      	lsls	r3, r3, #4
   16d18:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16d1c:	d308      	bcc.n	16d30 <servo_set_one+0x2c>
   16d1e:	88bb      	ldrh	r3, [r7, #4]
   16d20:	011b      	lsls	r3, r3, #4
   16d22:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16d26:	bf28      	it	cs
   16d28:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16d2c:	b29a      	uxth	r2, r3
   16d2e:	e001      	b.n	16d34 <servo_set_one+0x30>
   16d30:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16d34:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16d38:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d3c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
   16d40:	370c      	adds	r7, #12
   16d42:	46bd      	mov	sp, r7
   16d44:	f85d 7b04 	ldr.w	r7, [sp], #4
   16d48:	4770      	bx	lr
   16d4a:	bf00      	nop

00016d4c <servo_transmit>:

void 
servo_transmit(void) {
   16d4c:	b580      	push	{r7, lr}
   16d4e:	b082      	sub	sp, #8
   16d50:	af00      	add	r7, sp, #0
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);
   16d52:	2000      	movs	r0, #0
   16d54:	f000 f9e6 	bl	17124 <uart_transmit>
   16d58:	2000      	movs	r0, #0
   16d5a:	f000 f9e3 	bl	17124 <uart_transmit>

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16d5e:	2300      	movs	r3, #0
   16d60:	71fb      	strb	r3, [r7, #7]
   16d62:	e01a      	b.n	16d9a <servo_transmit+0x4e>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
   16d64:	79fa      	ldrb	r2, [r7, #7]
   16d66:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16d6a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d6e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16d72:	0a1b      	lsrs	r3, r3, #8
   16d74:	b29b      	uxth	r3, r3
   16d76:	b2db      	uxtb	r3, r3
   16d78:	4618      	mov	r0, r3
   16d7a:	f000 f9d3 	bl	17124 <uart_transmit>
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
   16d7e:	79fa      	ldrb	r2, [r7, #7]
   16d80:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16d84:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16d88:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   16d8c:	b2db      	uxtb	r3, r3
   16d8e:	4618      	mov	r0, r3
   16d90:	f000 f9c8 	bl	17124 <uart_transmit>
servo_transmit(void) {
  uint8_t servo;
	//vPrintString("S_10 servo_transmit start! \n\r"); //SunnyBeike
  uart_transmit((uint8_t)0); uart_transmit((uint8_t)0);

  for(servo = 0; servo < _4017_NB_CHANNELS; servo++) {
   16d94:	79fb      	ldrb	r3, [r7, #7]
   16d96:	3301      	adds	r3, #1
   16d98:	71fb      	strb	r3, [r7, #7]
   16d9a:	79fb      	ldrb	r3, [r7, #7]
   16d9c:	2b09      	cmp	r3, #9
   16d9e:	d9e1      	bls.n	16d64 <servo_transmit+0x18>
    uart_transmit((uint8_t)(servo_widths[servo] >> 8));
    uart_transmit((uint8_t)(servo_widths[servo] & 0xff));
  }
  uart_transmit((uint8_t)'\n');
   16da0:	200a      	movs	r0, #10
   16da2:	f000 f9bf 	bl	17124 <uart_transmit>
	//vPrintString("S_10 servo_transmit end! \n\r"); //SunnyBeike
}
   16da6:	3708      	adds	r7, #8
   16da8:	46bd      	mov	sp, r7
   16daa:	bd80      	pop	{r7, pc}

00016dac <servo_set>:
 *
 * defines how servos react to radio control or autopilot channels
 *
 */

void servo_set(const pprz_t values[]) {
   16dac:	b5b0      	push	{r4, r5, r7, lr}
   16dae:	b084      	sub	sp, #16
   16db0:	af00      	add	r7, sp, #0
   16db2:	6078      	str	r0, [r7, #4]
  ServoSet(values); /*Generated from airframe.xml */
   16db4:	687b      	ldr	r3, [r7, #4]
   16db6:	330a      	adds	r3, #10
   16db8:	881b      	ldrh	r3, [r3, #0]
   16dba:	b21b      	sxth	r3, r3
   16dbc:	005b      	lsls	r3, r3, #1
   16dbe:	4618      	mov	r0, r3
   16dc0:	f000 feaa 	bl	17b18 <__aeabi_i2d>
   16dc4:	4602      	mov	r2, r0
   16dc6:	460b      	mov	r3, r1
   16dc8:	4610      	mov	r0, r2
   16dca:	4619      	mov	r1, r3
   16dcc:	a3a6      	add	r3, pc, #664	; (adr r3, 17068 <servo_set+0x2bc>)
   16dce:	e9d3 2300 	ldrd	r2, r3, [r3]
   16dd2:	f000 ff07 	bl	17be4 <__aeabi_dmul>
   16dd6:	4602      	mov	r2, r0
   16dd8:	460b      	mov	r3, r1
   16dda:	4610      	mov	r0, r2
   16ddc:	4619      	mov	r1, r3
   16dde:	f001 f99b 	bl	18118 <__aeabi_d2iz>
   16de2:	4603      	mov	r3, r0
   16de4:	b29b      	uxth	r3, r3
   16de6:	b29b      	uxth	r3, r3
   16de8:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16dec:	81fb      	strh	r3, [r7, #14]
   16dee:	89fb      	ldrh	r3, [r7, #14]
   16df0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16df4:	d307      	bcc.n	16e06 <servo_set+0x5a>
   16df6:	89fb      	ldrh	r3, [r7, #14]
   16df8:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16dfc:	bf28      	it	cs
   16dfe:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16e02:	b29a      	uxth	r2, r3
   16e04:	e001      	b.n	16e0a <servo_set+0x5e>
   16e06:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16e0a:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16e0e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16e12:	80da      	strh	r2, [r3, #6]
   16e14:	687b      	ldr	r3, [r7, #4]
   16e16:	881b      	ldrh	r3, [r3, #0]
   16e18:	b21b      	sxth	r3, r3
   16e1a:	005b      	lsls	r3, r3, #1
   16e1c:	4618      	mov	r0, r3
   16e1e:	f000 fe7b 	bl	17b18 <__aeabi_i2d>
   16e22:	4602      	mov	r2, r0
   16e24:	460b      	mov	r3, r1
   16e26:	4610      	mov	r0, r2
   16e28:	4619      	mov	r1, r3
   16e2a:	a38f      	add	r3, pc, #572	; (adr r3, 17068 <servo_set+0x2bc>)
   16e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16e30:	f000 fed8 	bl	17be4 <__aeabi_dmul>
   16e34:	4602      	mov	r2, r0
   16e36:	460b      	mov	r3, r1
   16e38:	4610      	mov	r0, r2
   16e3a:	4619      	mov	r1, r3
   16e3c:	f001 f96c 	bl	18118 <__aeabi_d2iz>
   16e40:	4603      	mov	r3, r0
   16e42:	b29b      	uxth	r3, r3
   16e44:	b29b      	uxth	r3, r3
   16e46:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
   16e4a:	81fb      	strh	r3, [r7, #14]
   16e4c:	89fb      	ldrh	r3, [r7, #14]
   16e4e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16e52:	d307      	bcc.n	16e64 <servo_set+0xb8>
   16e54:	89fb      	ldrh	r3, [r7, #14]
   16e56:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16e5a:	bf28      	it	cs
   16e5c:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16e60:	b29a      	uxth	r2, r3
   16e62:	e001      	b.n	16e68 <servo_set+0xbc>
   16e64:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16e68:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16e6c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16e70:	825a      	strh	r2, [r3, #18]
   16e72:	687b      	ldr	r3, [r7, #4]
   16e74:	3304      	adds	r3, #4
   16e76:	881b      	ldrh	r3, [r3, #0]
   16e78:	b21b      	sxth	r3, r3
   16e7a:	4618      	mov	r0, r3
   16e7c:	f000 fe4c 	bl	17b18 <__aeabi_i2d>
   16e80:	4602      	mov	r2, r0
   16e82:	460b      	mov	r3, r1
   16e84:	4610      	mov	r0, r2
   16e86:	4619      	mov	r1, r3
   16e88:	a379      	add	r3, pc, #484	; (adr r3, 17070 <servo_set+0x2c4>)
   16e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   16e8e:	f000 fea9 	bl	17be4 <__aeabi_dmul>
   16e92:	4602      	mov	r2, r0
   16e94:	460b      	mov	r3, r1
   16e96:	4610      	mov	r0, r2
   16e98:	4619      	mov	r1, r3
   16e9a:	f001 f93d 	bl	18118 <__aeabi_d2iz>
   16e9e:	4603      	mov	r3, r0
   16ea0:	b29b      	uxth	r3, r3
   16ea2:	b29b      	uxth	r3, r3
   16ea4:	f503 43bf 	add.w	r3, r3, #24448	; 0x5f80
   16ea8:	3320      	adds	r3, #32
   16eaa:	81fb      	strh	r3, [r7, #14]
   16eac:	89fb      	ldrh	r3, [r7, #14]
   16eae:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16eb2:	d307      	bcc.n	16ec4 <servo_set+0x118>
   16eb4:	89fb      	ldrh	r3, [r7, #14]
   16eb6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16eba:	bf28      	it	cs
   16ebc:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16ec0:	b29a      	uxth	r2, r3
   16ec2:	e001      	b.n	16ec8 <servo_set+0x11c>
   16ec4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16ec8:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16ecc:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16ed0:	819a      	strh	r2, [r3, #12]
   16ed2:	687b      	ldr	r3, [r7, #4]
   16ed4:	885b      	ldrh	r3, [r3, #2]
   16ed6:	81bb      	strh	r3, [r7, #12]
   16ed8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16edc:	2b00      	cmp	r3, #0
   16ede:	dd06      	ble.n	16eee <servo_set+0x142>
   16ee0:	f04f 0400 	mov.w	r4, #0
   16ee4:	f04f 0500 	mov.w	r5, #0
   16ee8:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16eec:	e002      	b.n	16ef4 <servo_set+0x148>
   16eee:	a562      	add	r5, pc, #392	; (adr r5, 17078 <servo_set+0x2cc>)
   16ef0:	e9d5 4500 	ldrd	r4, r5, [r5]
   16ef4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16ef8:	4618      	mov	r0, r3
   16efa:	f000 fe0d 	bl	17b18 <__aeabi_i2d>
   16efe:	4602      	mov	r2, r0
   16f00:	460b      	mov	r3, r1
   16f02:	4620      	mov	r0, r4
   16f04:	4629      	mov	r1, r5
   16f06:	f000 fe6d 	bl	17be4 <__aeabi_dmul>
   16f0a:	4602      	mov	r2, r0
   16f0c:	460b      	mov	r3, r1
   16f0e:	4610      	mov	r0, r2
   16f10:	4619      	mov	r1, r3
   16f12:	a35b      	add	r3, pc, #364	; (adr r3, 17080 <servo_set+0x2d4>)
   16f14:	e9d3 2300 	ldrd	r2, r3, [r3]
   16f18:	f000 fe64 	bl	17be4 <__aeabi_dmul>
   16f1c:	4602      	mov	r2, r0
   16f1e:	460b      	mov	r3, r1
   16f20:	4610      	mov	r0, r2
   16f22:	4619      	mov	r1, r3
   16f24:	f001 f8f8 	bl	18118 <__aeabi_d2iz>
   16f28:	4603      	mov	r3, r0
   16f2a:	b29b      	uxth	r3, r3
   16f2c:	b29b      	uxth	r3, r3
   16f2e:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
   16f32:	81fb      	strh	r3, [r7, #14]
   16f34:	89fb      	ldrh	r3, [r7, #14]
   16f36:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16f3a:	d307      	bcc.n	16f4c <servo_set+0x1a0>
   16f3c:	89fb      	ldrh	r3, [r7, #14]
   16f3e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16f42:	bf28      	it	cs
   16f44:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16f48:	b29a      	uxth	r2, r3
   16f4a:	e001      	b.n	16f50 <servo_set+0x1a4>
   16f4c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16f50:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16f54:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16f58:	801a      	strh	r2, [r3, #0]
   16f5a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16f5e:	2b00      	cmp	r3, #0
   16f60:	dd03      	ble.n	16f6a <servo_set+0x1be>
   16f62:	a545      	add	r5, pc, #276	; (adr r5, 17078 <servo_set+0x2cc>)
   16f64:	e9d5 4500 	ldrd	r4, r5, [r5]
   16f68:	e005      	b.n	16f76 <servo_set+0x1ca>
   16f6a:	f04f 0400 	mov.w	r4, #0
   16f6e:	f04f 0500 	mov.w	r5, #0
   16f72:	f6c3 75f0 	movt	r5, #16368	; 0x3ff0
   16f76:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   16f7a:	4618      	mov	r0, r3
   16f7c:	f000 fdcc 	bl	17b18 <__aeabi_i2d>
   16f80:	4602      	mov	r2, r0
   16f82:	460b      	mov	r3, r1
   16f84:	4620      	mov	r0, r4
   16f86:	4629      	mov	r1, r5
   16f88:	f000 fe2c 	bl	17be4 <__aeabi_dmul>
   16f8c:	4602      	mov	r2, r0
   16f8e:	460b      	mov	r3, r1
   16f90:	4610      	mov	r0, r2
   16f92:	4619      	mov	r1, r3
   16f94:	a33c      	add	r3, pc, #240	; (adr r3, 17088 <servo_set+0x2dc>)
   16f96:	e9d3 2300 	ldrd	r2, r3, [r3]
   16f9a:	f000 fe23 	bl	17be4 <__aeabi_dmul>
   16f9e:	4602      	mov	r2, r0
   16fa0:	460b      	mov	r3, r1
   16fa2:	4610      	mov	r0, r2
   16fa4:	4619      	mov	r1, r3
   16fa6:	f001 f8b7 	bl	18118 <__aeabi_d2iz>
   16faa:	4603      	mov	r3, r0
   16fac:	b29b      	uxth	r3, r3
   16fae:	b29b      	uxth	r3, r3
   16fb0:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
   16fb4:	3320      	adds	r3, #32
   16fb6:	81fb      	strh	r3, [r7, #14]
   16fb8:	89fb      	ldrh	r3, [r7, #14]
   16fba:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   16fbe:	d307      	bcc.n	16fd0 <servo_set+0x224>
   16fc0:	89fb      	ldrh	r3, [r7, #14]
   16fc2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   16fc6:	bf28      	it	cs
   16fc8:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   16fcc:	b29a      	uxth	r2, r3
   16fce:	e001      	b.n	16fd4 <servo_set+0x228>
   16fd0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   16fd4:	f64c 43ac 	movw	r3, #52396	; 0xccac
   16fd8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   16fdc:	809a      	strh	r2, [r3, #4]
   16fde:	687b      	ldr	r3, [r7, #4]
   16fe0:	3306      	adds	r3, #6
   16fe2:	881b      	ldrh	r3, [r3, #0]
   16fe4:	b21b      	sxth	r3, r3
   16fe6:	4618      	mov	r0, r3
   16fe8:	f000 fd96 	bl	17b18 <__aeabi_i2d>
   16fec:	4604      	mov	r4, r0
   16fee:	460d      	mov	r5, r1
   16ff0:	687b      	ldr	r3, [r7, #4]
   16ff2:	3302      	adds	r3, #2
   16ff4:	881b      	ldrh	r3, [r3, #0]
   16ff6:	b21b      	sxth	r3, r3
   16ff8:	4618      	mov	r0, r3
   16ffa:	f000 fd8d 	bl	17b18 <__aeabi_i2d>
   16ffe:	4602      	mov	r2, r0
   17000:	460b      	mov	r3, r1
   17002:	4620      	mov	r0, r4
   17004:	4629      	mov	r1, r5
   17006:	f000 fc3b 	bl	17880 <__adddf3>
   1700a:	4602      	mov	r2, r0
   1700c:	460b      	mov	r3, r1
   1700e:	4610      	mov	r0, r2
   17010:	4619      	mov	r1, r3
   17012:	a31f      	add	r3, pc, #124	; (adr r3, 17090 <servo_set+0x2e4>)
   17014:	e9d3 2300 	ldrd	r2, r3, [r3]
   17018:	f000 fde4 	bl	17be4 <__aeabi_dmul>
   1701c:	4602      	mov	r2, r0
   1701e:	460b      	mov	r3, r1
   17020:	4610      	mov	r0, r2
   17022:	4619      	mov	r1, r3
   17024:	f001 f878 	bl	18118 <__aeabi_d2iz>
   17028:	4603      	mov	r3, r0
   1702a:	b29b      	uxth	r3, r3
   1702c:	b29b      	uxth	r3, r3
   1702e:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
   17032:	3320      	adds	r3, #32
   17034:	81fb      	strh	r3, [r7, #14]
   17036:	89fb      	ldrh	r3, [r7, #14]
   17038:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   1703c:	d307      	bcc.n	1704e <servo_set+0x2a2>
   1703e:	89fb      	ldrh	r3, [r7, #14]
   17040:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
   17044:	bf28      	it	cs
   17046:	f44f 43fa 	movcs.w	r3, #32000	; 0x7d00
   1704a:	b29a      	uxth	r2, r3
   1704c:	e001      	b.n	17052 <servo_set+0x2a6>
   1704e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
   17052:	f64c 43ac 	movw	r3, #52396	; 0xccac
   17056:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1705a:	81da      	strh	r2, [r3, #14]
}
   1705c:	3710      	adds	r7, #16
   1705e:	46bd      	mov	sp, r7
   17060:	bdb0      	pop	{r4, r5, r7, pc}
   17062:	bf00      	nop
   17064:	f3af 8000 	nop.w
   17068:	aaaa9ef0 	.word	0xaaaa9ef0
   1706c:	3feaaaaa 	.word	0x3feaaaaa
   17070:	fc96473e 	.word	0xfc96473e
   17074:	3fdfc962 	.word	0x3fdfc962
   17078:	51eb851f 	.word	0x51eb851f
   1707c:	3fe51eb8 	.word	0x3fe51eb8
   17080:	9999999a 	.word	0x9999999a
   17084:	bfe19999 	.word	0xbfe19999
   17088:	aaaa9ef0 	.word	0xaaaa9ef0
   1708c:	bfe0aaaa 	.word	0xbfe0aaaa
   17090:	eeeed77a 	.word	0xeeeed77a
   17094:	bfdeeeee 	.word	0xbfdeeeee

00017098 <uart_init_tx>:
 * UART Baud rate generation settings:
 *
 * With 16.0 MHz clock,UBRR=25  => 38400 baud
 *
 */
void uart_init_tx( void ) {
   17098:	b480      	push	{r7}
   1709a:	af00      	add	r7, sp, #0
  /* Baudrate is 38.4k */
  UBRRH = 0; 
   1709c:	f242 0320 	movw	r3, #8224	; 0x2020
   170a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   170a4:	2200      	movs	r2, #0
   170a6:	701a      	strb	r2, [r3, #0]
  UBRRL = 25; 
   170a8:	f242 0309 	movw	r3, #8201	; 0x2009
   170ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
   170b0:	2219      	movs	r2, #25
   170b2:	701a      	strb	r2, [r3, #0]
  /* single speed */ 
  UCSRA = 0; 
   170b4:	f242 030b 	movw	r3, #8203	; 0x200b
   170b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   170bc:	2200      	movs	r2, #0
   170be:	701a      	strb	r2, [r3, #0]
  /* Enable transmitter */ 
  UCSRB = _BV(TXEN); 
   170c0:	f242 030a 	movw	r3, #8202	; 0x200a
   170c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   170c8:	2208      	movs	r2, #8
   170ca:	701a      	strb	r2, [r3, #0]
  /* Set frame format: 8data, 1stop bit */ 
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0); 
   170cc:	f242 0320 	movw	r3, #8224	; 0x2020
   170d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
   170d4:	2286      	movs	r2, #134	; 0x86
   170d6:	701a      	strb	r2, [r3, #0]
}
   170d8:	46bd      	mov	sp, r7
   170da:	f85d 7b04 	ldr.w	r7, [sp], #4
   170de:	4770      	bx	lr

000170e0 <uart_init_rx>:

void uart_init_rx() {
   170e0:	b480      	push	{r7}
   170e2:	af00      	add	r7, sp, #0
  /* Enable receiver               */ 
  UCSRB |= _BV(RXEN); 
   170e4:	f242 030a 	movw	r3, #8202	; 0x200a
   170e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   170ec:	f242 020a 	movw	r2, #8202	; 0x200a
   170f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   170f4:	7812      	ldrb	r2, [r2, #0]
   170f6:	b2d2      	uxtb	r2, r2
   170f8:	f042 0210 	orr.w	r2, r2, #16
   170fc:	b2d2      	uxtb	r2, r2
   170fe:	701a      	strb	r2, [r3, #0]
  /* Enable uart receive interrupt */
  sbi( UCSRB, RXCIE ); 
   17100:	f242 030a 	movw	r3, #8202	; 0x200a
   17104:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17108:	f242 020a 	movw	r2, #8202	; 0x200a
   1710c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   17110:	7812      	ldrb	r2, [r2, #0]
   17112:	b2d2      	uxtb	r2, r2
   17114:	f062 027f 	orn	r2, r2, #127	; 0x7f
   17118:	b2d2      	uxtb	r2, r2
   1711a:	701a      	strb	r2, [r3, #0]
}
   1711c:	46bd      	mov	sp, r7
   1711e:	f85d 7b04 	ldr.w	r7, [sp], #4
   17122:	4770      	bx	lr

00017124 <uart_transmit>:

void uart_transmit( unsigned char data ) {
   17124:	b480      	push	{r7}
   17126:	b083      	sub	sp, #12
   17128:	af00      	add	r7, sp, #0
   1712a:	4603      	mov	r3, r0
   1712c:	71fb      	strb	r3, [r7, #7]
  if (UCSRB & _BV(TXCIE)) {
   1712e:	f242 030a 	movw	r3, #8202	; 0x200a
   17132:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17136:	781b      	ldrb	r3, [r3, #0]
   17138:	b2db      	uxtb	r3, r3
   1713a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   1713e:	2b00      	cmp	r3, #0
   17140:	d028      	beq.n	17194 <uart_transmit+0x70>
    /* we are waiting for the last char to be sent : buffering */
    if (tx_tail == tx_head + 1) { /* BUF_SIZE = 256 */
   17142:	f64c 43c1 	movw	r3, #52417	; 0xccc1
   17146:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1714a:	781b      	ldrb	r3, [r3, #0]
   1714c:	b2db      	uxtb	r3, r3
   1714e:	461a      	mov	r2, r3
   17150:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   17154:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17158:	781b      	ldrb	r3, [r3, #0]
   1715a:	3301      	adds	r3, #1
   1715c:	429a      	cmp	r2, r3
   1715e:	d100      	bne.n	17162 <uart_transmit+0x3e>
      /* Buffer is full (almost, but tx_head = tx_tail means "empty" */
      return;
   17160:	e02c      	b.n	171bc <uart_transmit+0x98>
    }
    tx_buf[tx_head] = data;
   17162:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   17166:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1716a:	781b      	ldrb	r3, [r3, #0]
   1716c:	461a      	mov	r2, r3
   1716e:	f64c 43c4 	movw	r3, #52420	; 0xccc4
   17172:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17176:	79f9      	ldrb	r1, [r7, #7]
   17178:	5499      	strb	r1, [r3, r2]
    tx_head++; /* BUF_SIZE = 256 */
   1717a:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   1717e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17182:	781b      	ldrb	r3, [r3, #0]
   17184:	3301      	adds	r3, #1
   17186:	b2da      	uxtb	r2, r3
   17188:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   1718c:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17190:	701a      	strb	r2, [r3, #0]
   17192:	e013      	b.n	171bc <uart_transmit+0x98>
  } else { /* Channel is free: just send */
    UDR = data;
   17194:	f242 030c 	movw	r3, #8204	; 0x200c
   17198:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1719c:	79fa      	ldrb	r2, [r7, #7]
   1719e:	701a      	strb	r2, [r3, #0]
    sbi(UCSRB, TXCIE);
   171a0:	f242 030a 	movw	r3, #8202	; 0x200a
   171a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   171a8:	f242 020a 	movw	r2, #8202	; 0x200a
   171ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
   171b0:	7812      	ldrb	r2, [r2, #0]
   171b2:	b2d2      	uxtb	r2, r2
   171b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   171b8:	b2d2      	uxtb	r2, r2
   171ba:	701a      	strb	r2, [r3, #0]
  }
}
   171bc:	370c      	adds	r7, #12
   171be:	46bd      	mov	sp, r7
   171c0:	f85d 7b04 	ldr.w	r7, [sp], #4
   171c4:	4770      	bx	lr
   171c6:	bf00      	nop

000171c8 <uart_print_hex>:

void uart_print_hex ( uint8_t c ) {
   171c8:	b590      	push	{r4, r7, lr}
   171ca:	b089      	sub	sp, #36	; 0x24
   171cc:	af00      	add	r7, sp, #0
   171ce:	4603      	mov	r3, r0
   171d0:	71fb      	strb	r3, [r7, #7]
  const uint8_t hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', 
   171d2:	f648 23d4 	movw	r3, #35540	; 0x8ad4
   171d6:	f2c0 0301 	movt	r3, #1
   171da:	f107 040c 	add.w	r4, r7, #12
   171de:	6818      	ldr	r0, [r3, #0]
   171e0:	6859      	ldr	r1, [r3, #4]
   171e2:	689a      	ldr	r2, [r3, #8]
   171e4:	68db      	ldr	r3, [r3, #12]
   171e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
  uint8_t high = (c & 0xF0)>>4;
   171e8:	79fb      	ldrb	r3, [r7, #7]
   171ea:	091b      	lsrs	r3, r3, #4
   171ec:	77fb      	strb	r3, [r7, #31]
  uint8_t low  = c & 0x0F;
   171ee:	79fb      	ldrb	r3, [r7, #7]
   171f0:	f003 030f 	and.w	r3, r3, #15
   171f4:	77bb      	strb	r3, [r7, #30]
    /*
    *Added by SunnyBeike
    * */
        high = 15;
   171f6:	230f      	movs	r3, #15
   171f8:	77fb      	strb	r3, [r7, #31]
        low = 15;
   171fa:	230f      	movs	r3, #15
   171fc:	77bb      	strb	r3, [r7, #30]
    /*
    *End
    * */

    uart_transmit(hex[high]);
   171fe:	7ffb      	ldrb	r3, [r7, #31]
   17200:	f107 0220 	add.w	r2, r7, #32
   17204:	4413      	add	r3, r2
   17206:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   1720a:	4618      	mov	r0, r3
   1720c:	f7ff ff8a 	bl	17124 <uart_transmit>
  uart_transmit(hex[low]);
   17210:	7fbb      	ldrb	r3, [r7, #30]
   17212:	f107 0220 	add.w	r2, r7, #32
   17216:	4413      	add	r3, r2
   17218:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   1721c:	4618      	mov	r0, r3
   1721e:	f7ff ff81 	bl	17124 <uart_transmit>
} 
   17222:	3724      	adds	r7, #36	; 0x24
   17224:	46bd      	mov	sp, r7
   17226:	bd90      	pop	{r4, r7, pc}

00017228 <uart_print_hex16>:

void uart_print_hex16 ( uint16_t c ) {
   17228:	b580      	push	{r7, lr}
   1722a:	b084      	sub	sp, #16
   1722c:	af00      	add	r7, sp, #0
   1722e:	4603      	mov	r3, r0
   17230:	80fb      	strh	r3, [r7, #6]
  uint8_t high = (uint8_t)(c>>8);
   17232:	88fb      	ldrh	r3, [r7, #6]
   17234:	0a1b      	lsrs	r3, r3, #8
   17236:	b29b      	uxth	r3, r3
   17238:	73fb      	strb	r3, [r7, #15]
  uint8_t low  = (uint8_t)(c);
   1723a:	88fb      	ldrh	r3, [r7, #6]
   1723c:	73bb      	strb	r3, [r7, #14]
  uart_print_hex(high);
   1723e:	7bfb      	ldrb	r3, [r7, #15]
   17240:	4618      	mov	r0, r3
   17242:	f7ff ffc1 	bl	171c8 <uart_print_hex>
  uart_print_hex(low);
   17246:	7bbb      	ldrb	r3, [r7, #14]
   17248:	4618      	mov	r0, r3
   1724a:	f7ff ffbd 	bl	171c8 <uart_print_hex>
}
   1724e:	3710      	adds	r7, #16
   17250:	46bd      	mov	sp, r7
   17252:	bd80      	pop	{r7, pc}

00017254 <uart_print_string>:

void uart_print_string(const uint8_t* s) {
   17254:	b580      	push	{r7, lr}
   17256:	b084      	sub	sp, #16
   17258:	af00      	add	r7, sp, #0
   1725a:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
   1725c:	2300      	movs	r3, #0
   1725e:	73fb      	strb	r3, [r7, #15]
  while (s[i]) {
   17260:	e009      	b.n	17276 <uart_print_string+0x22>
    uart_transmit(s[i]);
   17262:	7bfb      	ldrb	r3, [r7, #15]
   17264:	687a      	ldr	r2, [r7, #4]
   17266:	4413      	add	r3, r2
   17268:	781b      	ldrb	r3, [r3, #0]
   1726a:	4618      	mov	r0, r3
   1726c:	f7ff ff5a 	bl	17124 <uart_transmit>
    i++;
   17270:	7bfb      	ldrb	r3, [r7, #15]
   17272:	3301      	adds	r3, #1
   17274:	73fb      	strb	r3, [r7, #15]
  uart_print_hex(low);
}

void uart_print_string(const uint8_t* s) {
  uint8_t i = 0;
  while (s[i]) {
   17276:	7bfb      	ldrb	r3, [r7, #15]
   17278:	687a      	ldr	r2, [r7, #4]
   1727a:	4413      	add	r3, r2
   1727c:	781b      	ldrb	r3, [r3, #0]
   1727e:	2b00      	cmp	r3, #0
   17280:	d1ef      	bne.n	17262 <uart_print_string+0xe>
    uart_transmit(s[i]);
    i++;
  }
}
   17282:	3710      	adds	r7, #16
   17284:	46bd      	mov	sp, r7
   17286:	bd80      	pop	{r7, pc}

00017288 <SIG_UART_TRANS>:

SIGNAL(SIG_UART_TRANS) {
   17288:	b480      	push	{r7}
   1728a:	af00      	add	r7, sp, #0
  if (tx_head == tx_tail) {
   1728c:	f64c 43c0 	movw	r3, #52416	; 0xccc0
   17290:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17294:	781a      	ldrb	r2, [r3, #0]
   17296:	f64c 43c1 	movw	r3, #52417	; 0xccc1
   1729a:	f2c2 0304 	movt	r3, #8196	; 0x2004
   1729e:	781b      	ldrb	r3, [r3, #0]
   172a0:	b2db      	uxtb	r3, r3
   172a2:	429a      	cmp	r2, r3
   172a4:	d10e      	bne.n	172c4 <SIG_UART_TRANS+0x3c>
    /* Nothing more to send */
    cbi(UCSRB, TXCIE); /* disable interrupt */
   172a6:	f242 030a 	movw	r3, #8202	; 0x200a
   172aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
   172ae:	f242 020a 	movw	r2, #8202	; 0x200a
   172b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   172b6:	7812      	ldrb	r2, [r2, #0]
   172b8:	b2d2      	uxtb	r2, r2
   172ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   172be:	b2d2      	uxtb	r2, r2
   172c0:	701a      	strb	r2, [r3, #0]
   172c2:	e01d      	b.n	17300 <SIG_UART_TRANS+0x78>
  } else {
    UDR = tx_buf[tx_tail];
   172c4:	f242 030c 	movw	r3, #8204	; 0x200c
   172c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   172cc:	f64c 42c1 	movw	r2, #52417	; 0xccc1
   172d0:	f2c2 0204 	movt	r2, #8196	; 0x2004
   172d4:	7812      	ldrb	r2, [r2, #0]
   172d6:	b2d2      	uxtb	r2, r2
   172d8:	4611      	mov	r1, r2
   172da:	f64c 42c4 	movw	r2, #52420	; 0xccc4
   172de:	f2c2 0204 	movt	r2, #8196	; 0x2004
   172e2:	5c52      	ldrb	r2, [r2, r1]
   172e4:	701a      	strb	r2, [r3, #0]
    tx_tail++; /* warning tx_buf_len is 256 */
   172e6:	f64c 43c1 	movw	r3, #52417	; 0xccc1
   172ea:	f2c2 0304 	movt	r3, #8196	; 0x2004
   172ee:	781b      	ldrb	r3, [r3, #0]
   172f0:	b2db      	uxtb	r3, r3
   172f2:	3301      	adds	r3, #1
   172f4:	b2da      	uxtb	r2, r3
   172f6:	f64c 43c1 	movw	r3, #52417	; 0xccc1
   172fa:	f2c2 0304 	movt	r3, #8196	; 0x2004
   172fe:	701a      	strb	r2, [r3, #0]
  }
}
   17300:	46bd      	mov	sp, r7
   17302:	f85d 7b04 	ldr.w	r7, [sp], #4
   17306:	4770      	bx	lr

00017308 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
   17308:	b580      	push	{r7, lr}
   1730a:	b082      	sub	sp, #8
   1730c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   1730e:	2010      	movs	r0, #16
   17310:	2101      	movs	r1, #1
   17312:	f7e9 fd55 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
   17316:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1731a:	f2c4 0001 	movt	r0, #16385	; 0x4001
   1731e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   17322:	2201      	movs	r2, #1
   17324:	f7ea f85c 	bl	13e0 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
   17328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   1732c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   1732e:	2310      	movs	r3, #16
   17330:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17332:	2303      	movs	r3, #3
   17334:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   17336:	1d3b      	adds	r3, r7, #4
   17338:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1733c:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17340:	4619      	mov	r1, r3
   17342:	f7e9 ff11 	bl	1168 <GPIO_Init>
}
   17346:	3708      	adds	r7, #8
   17348:	46bd      	mov	sp, r7
   1734a:	bd80      	pop	{r7, pc}

0001734c <init_button>:

void init_button(void)
{
   1734c:	b580      	push	{r7, lr}
   1734e:	b082      	sub	sp, #8
   17350:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   17352:	2004      	movs	r0, #4
   17354:	2101      	movs	r1, #1
   17356:	f7e9 fd33 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
   1735a:	2301      	movs	r3, #1
   1735c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   1735e:	2304      	movs	r3, #4
   17360:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17362:	2303      	movs	r3, #3
   17364:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
   17366:	1d3b      	adds	r3, r7, #4
   17368:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1736c:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17370:	4619      	mov	r1, r3
   17372:	f7e9 fef9 	bl	1168 <GPIO_Init>
}
   17376:	3708      	adds	r7, #8
   17378:	46bd      	mov	sp, r7
   1737a:	bd80      	pop	{r7, pc}

0001737c <enable_button_interrupts>:

void enable_button_interrupts(void)
{
   1737c:	b580      	push	{r7, lr}
   1737e:	b084      	sub	sp, #16
   17380:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   17382:	2001      	movs	r0, #1
   17384:	2101      	movs	r1, #1
   17386:	f7e9 fd1b 	bl	dc0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
   1738a:	2000      	movs	r0, #0
   1738c:	2100      	movs	r1, #0
   1738e:	f7ea f91f 	bl	15d0 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
   17392:	2301      	movs	r3, #1
   17394:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
   17396:	2300      	movs	r3, #0
   17398:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
   1739a:	2308      	movs	r3, #8
   1739c:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
   1739e:	2301      	movs	r3, #1
   173a0:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
   173a2:	f107 0308 	add.w	r3, r7, #8
   173a6:	4618      	mov	r0, r3
   173a8:	f7ea fe18 	bl	1fdc <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
   173ac:	2306      	movs	r3, #6
   173ae:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
   173b0:	230f      	movs	r3, #15
   173b2:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
   173b4:	230f      	movs	r3, #15
   173b6:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   173b8:	2301      	movs	r3, #1
   173ba:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   173bc:	1d3b      	adds	r3, r7, #4
   173be:	4618      	mov	r0, r3
   173c0:	f7ea ff46 	bl	2250 <NVIC_Init>
}
   173c4:	3710      	adds	r7, #16
   173c6:	46bd      	mov	sp, r7
   173c8:	bd80      	pop	{r7, pc}
   173ca:	bf00      	nop

000173cc <init_rs232>:

void init_rs232(void)
{
   173cc:	b580      	push	{r7, lr}
   173ce:	b086      	sub	sp, #24
   173d0:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
   173d2:	2005      	movs	r0, #5
   173d4:	2101      	movs	r1, #1
   173d6:	f7e9 fcf3 	bl	dc0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   173da:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   173de:	2101      	movs	r1, #1
   173e0:	f7e9 fd16 	bl	e10 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
   173e4:	2308      	movs	r3, #8
   173e6:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
   173e8:	2304      	movs	r3, #4
   173ea:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   173ec:	1d3b      	adds	r3, r7, #4
   173ee:	f44f 6000 	mov.w	r0, #2048	; 0x800
   173f2:	f2c4 0001 	movt	r0, #16385	; 0x4001
   173f6:	4619      	mov	r1, r3
   173f8:	f7e9 feb6 	bl	1168 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   173fc:	2304      	movs	r3, #4
   173fe:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   17400:	2303      	movs	r3, #3
   17402:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   17404:	2318      	movs	r3, #24
   17406:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
   17408:	1d3b      	adds	r3, r7, #4
   1740a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   1740e:	f2c4 0001 	movt	r0, #16385	; 0x4001
   17412:	4619      	mov	r1, r3
   17414:	f7e9 fea8 	bl	1168 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
   17418:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   1741c:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   1741e:	2300      	movs	r3, #0
   17420:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
   17422:	2300      	movs	r3, #0
   17424:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
   17426:	2300      	movs	r3, #0
   17428:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
   1742a:	2300      	movs	r3, #0
   1742c:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   1742e:	230c      	movs	r3, #12
   17430:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
   17432:	f107 0308 	add.w	r3, r7, #8
   17436:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   1743a:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1743e:	4619      	mov	r1, r3
   17440:	f7ea f97a 	bl	1738 <USART_Init>
    USART_Cmd(USART2, ENABLE);
   17444:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17448:	f2c4 0000 	movt	r0, #16384	; 0x4000
   1744c:	2101      	movs	r1, #1
   1744e:	f7ea fa91 	bl	1974 <USART_Cmd>
}
   17452:	3718      	adds	r7, #24
   17454:	46bd      	mov	sp, r7
   17456:	bd80      	pop	{r7, pc}

00017458 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
   17458:	b580      	push	{r7, lr}
   1745a:	b082      	sub	sp, #8
   1745c:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
   1745e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17462:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17466:	f240 7127 	movw	r1, #1831	; 0x727
   1746a:	2200      	movs	r2, #0
   1746c:	f7ea faa2 	bl	19b4 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
   17470:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   17474:	f2c4 0000 	movt	r0, #16384	; 0x4000
   17478:	f240 5125 	movw	r1, #1317	; 0x525
   1747c:	2201      	movs	r2, #1
   1747e:	f7ea fa99 	bl	19b4 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   17482:	2326      	movs	r3, #38	; 0x26
   17484:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   17486:	2300      	movs	r3, #0
   17488:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   1748a:	2301      	movs	r3, #1
   1748c:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
   1748e:	1d3b      	adds	r3, r7, #4
   17490:	4618      	mov	r0, r3
   17492:	f7ea fedd 	bl	2250 <NVIC_Init>
}
   17496:	3708      	adds	r7, #8
   17498:	46bd      	mov	sp, r7
   1749a:	bd80      	pop	{r7, pc}

0001749c <enable_rs232>:

void enable_rs232(void)
{
   1749c:	b580      	push	{r7, lr}
   1749e:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
   174a0:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   174a4:	f2c4 0000 	movt	r0, #16384	; 0x4000
   174a8:	2101      	movs	r1, #1
   174aa:	f7ea fa63 	bl	1974 <USART_Cmd>
}
   174ae:	bd80      	pop	{r7, pc}

000174b0 <send_byte>:

void send_byte(uint8_t b)
{
   174b0:	b580      	push	{r7, lr}
   174b2:	b082      	sub	sp, #8
   174b4:	af00      	add	r7, sp, #0
   174b6:	4603      	mov	r3, r0
   174b8:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
   174ba:	bf00      	nop
   174bc:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   174c0:	f2c4 0000 	movt	r0, #16384	; 0x4000
   174c4:	2180      	movs	r1, #128	; 0x80
   174c6:	f7ea fcc1 	bl	1e4c <USART_GetFlagStatus>
   174ca:	4603      	mov	r3, r0
   174cc:	2b00      	cmp	r3, #0
   174ce:	d0f5      	beq.n	174bc <send_byte+0xc>
    
    GPIOC->ODR ^= 0x00001000;
   174d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   174d4:	f2c4 0301 	movt	r3, #16385	; 0x4001
   174d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   174dc:	f2c4 0201 	movt	r2, #16385	; 0x4001
   174e0:	68d2      	ldr	r2, [r2, #12]
   174e2:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
   174e6:	60da      	str	r2, [r3, #12]

    USART_SendData(USART2, b);
   174e8:	79fb      	ldrb	r3, [r7, #7]
   174ea:	b29b      	uxth	r3, r3
   174ec:	f44f 4088 	mov.w	r0, #17408	; 0x4400
   174f0:	f2c4 0000 	movt	r0, #16384	; 0x4000
   174f4:	4619      	mov	r1, r3
   174f6:	f7ea fb5d 	bl	1bb4 <USART_SendData>
}
   174fa:	3708      	adds	r7, #8
   174fc:	46bd      	mov	sp, r7
   174fe:	bd80      	pop	{r7, pc}

00017500 <send_num>:
/**
 *  can print a num which is smaller than 10
 */

void send_num(uint8_t b)
{
   17500:	b580      	push	{r7, lr}
   17502:	b082      	sub	sp, #8
   17504:	af00      	add	r7, sp, #0
   17506:	4603      	mov	r3, r0
   17508:	71fb      	strb	r3, [r7, #7]
    send_byte(b+'0'); 
   1750a:	79fb      	ldrb	r3, [r7, #7]
   1750c:	3330      	adds	r3, #48	; 0x30
   1750e:	b2db      	uxtb	r3, r3
   17510:	4618      	mov	r0, r3
   17512:	f7ff ffcd 	bl	174b0 <send_byte>
}
   17516:	3708      	adds	r7, #8
   17518:	46bd      	mov	sp, r7
   1751a:	bd80      	pop	{r7, pc}

0001751c <vPrintString>:
 * print a string
 *
 * */

void vPrintString( const char * string)
{
   1751c:	b580      	push	{r7, lr}
   1751e:	b084      	sub	sp, #16
   17520:	af00      	add	r7, sp, #0
   17522:	6078      	str	r0, [r7, #4]
    int i = 0;
   17524:	2300      	movs	r3, #0
   17526:	60fb      	str	r3, [r7, #12]
    while(string[i] != '\0')
   17528:	e009      	b.n	1753e <vPrintString+0x22>
    {
        send_byte(string[i]);
   1752a:	68fb      	ldr	r3, [r7, #12]
   1752c:	687a      	ldr	r2, [r7, #4]
   1752e:	4413      	add	r3, r2
   17530:	781b      	ldrb	r3, [r3, #0]
   17532:	4618      	mov	r0, r3
   17534:	f7ff ffbc 	bl	174b0 <send_byte>
        i++;
   17538:	68fb      	ldr	r3, [r7, #12]
   1753a:	3301      	adds	r3, #1
   1753c:	60fb      	str	r3, [r7, #12]
 * */

void vPrintString( const char * string)
{
    int i = 0;
    while(string[i] != '\0')
   1753e:	68fb      	ldr	r3, [r7, #12]
   17540:	687a      	ldr	r2, [r7, #4]
   17542:	4413      	add	r3, r2
   17544:	781b      	ldrb	r3, [r3, #0]
   17546:	2b00      	cmp	r3, #0
   17548:	d1ef      	bne.n	1752a <vPrintString+0xe>
    {
        send_byte(string[i]);
        i++;
    }
}
   1754a:	3710      	adds	r7, #16
   1754c:	46bd      	mov	sp, r7
   1754e:	bd80      	pop	{r7, pc}

00017550 <vPrintNumber>:
/*
 * print a number which is less than 10
 *
 * */
void vPrintNumber( const long c_num)
{
   17550:	b580      	push	{r7, lr}
   17552:	b08a      	sub	sp, #40	; 0x28
   17554:	af00      	add	r7, sp, #0
   17556:	6078      	str	r0, [r7, #4]
    char time[15], tmp;
    unsigned int i, count = 0;
   17558:	2300      	movs	r3, #0
   1755a:	623b      	str	r3, [r7, #32]
    long num = c_num;
   1755c:	687b      	ldr	r3, [r7, #4]
   1755e:	61fb      	str	r3, [r7, #28]

    if(num == 0)
   17560:	69fb      	ldr	r3, [r7, #28]
   17562:	2b00      	cmp	r3, #0
   17564:	d106      	bne.n	17574 <vPrintNumber+0x24>
    {
        vPrintString("0\n\r");
   17566:	f648 20e4 	movw	r0, #35556	; 0x8ae4
   1756a:	f2c0 0001 	movt	r0, #1
   1756e:	f7ff ffd5 	bl	1751c <vPrintString>
   17572:	e062      	b.n	1763a <vPrintNumber+0xea>
    }
    else
    {
        // transform long into char * 
        while( num  )
   17574:	e024      	b.n	175c0 <vPrintNumber+0x70>
        {
            time[count] = num%10 +'0';
   17576:	69f9      	ldr	r1, [r7, #28]
   17578:	f246 6367 	movw	r3, #26215	; 0x6667
   1757c:	f2c6 6366 	movt	r3, #26214	; 0x6666
   17580:	fb83 2301 	smull	r2, r3, r3, r1
   17584:	109a      	asrs	r2, r3, #2
   17586:	17cb      	asrs	r3, r1, #31
   17588:	1ad2      	subs	r2, r2, r3
   1758a:	4613      	mov	r3, r2
   1758c:	009b      	lsls	r3, r3, #2
   1758e:	4413      	add	r3, r2
   17590:	005b      	lsls	r3, r3, #1
   17592:	1aca      	subs	r2, r1, r3
   17594:	b2d3      	uxtb	r3, r2
   17596:	3330      	adds	r3, #48	; 0x30
   17598:	b2da      	uxtb	r2, r3
   1759a:	f107 010c 	add.w	r1, r7, #12
   1759e:	6a3b      	ldr	r3, [r7, #32]
   175a0:	440b      	add	r3, r1
   175a2:	701a      	strb	r2, [r3, #0]
            count ++;
   175a4:	6a3b      	ldr	r3, [r7, #32]
   175a6:	3301      	adds	r3, #1
   175a8:	623b      	str	r3, [r7, #32]
            num /= 10;
   175aa:	69fa      	ldr	r2, [r7, #28]
   175ac:	f246 6367 	movw	r3, #26215	; 0x6667
   175b0:	f2c6 6366 	movt	r3, #26214	; 0x6666
   175b4:	fb83 1302 	smull	r1, r3, r3, r2
   175b8:	1099      	asrs	r1, r3, #2
   175ba:	17d3      	asrs	r3, r2, #31
   175bc:	1acb      	subs	r3, r1, r3
   175be:	61fb      	str	r3, [r7, #28]
        vPrintString("0\n\r");
    }
    else
    {
        // transform long into char * 
        while( num  )
   175c0:	69fb      	ldr	r3, [r7, #28]
   175c2:	2b00      	cmp	r3, #0
   175c4:	d1d7      	bne.n	17576 <vPrintNumber+0x26>
            time[count] = num%10 +'0';
            count ++;
            num /= 10;

        }
        time[count] = '\0';
   175c6:	f107 020c 	add.w	r2, r7, #12
   175ca:	6a3b      	ldr	r3, [r7, #32]
   175cc:	4413      	add	r3, r2
   175ce:	2200      	movs	r2, #0
   175d0:	701a      	strb	r2, [r3, #0]

        // reverse
        for( i = 0; i < count/2; ++i )
   175d2:	2300      	movs	r3, #0
   175d4:	627b      	str	r3, [r7, #36]	; 0x24
   175d6:	e020      	b.n	1761a <vPrintNumber+0xca>
        {
            tmp = time[i];
   175d8:	f107 020c 	add.w	r2, r7, #12
   175dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   175de:	4413      	add	r3, r2
   175e0:	781b      	ldrb	r3, [r3, #0]
   175e2:	76fb      	strb	r3, [r7, #27]
            time[i] = time[count-1-i];
   175e4:	6a3a      	ldr	r2, [r7, #32]
   175e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   175e8:	1ad3      	subs	r3, r2, r3
   175ea:	3b01      	subs	r3, #1
   175ec:	f107 0228 	add.w	r2, r7, #40	; 0x28
   175f0:	4413      	add	r3, r2
   175f2:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
   175f6:	f107 010c 	add.w	r1, r7, #12
   175fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   175fc:	440b      	add	r3, r1
   175fe:	701a      	strb	r2, [r3, #0]
            time[count-1-i] = tmp;
   17600:	6a3a      	ldr	r2, [r7, #32]
   17602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17604:	1ad3      	subs	r3, r2, r3
   17606:	3b01      	subs	r3, #1
   17608:	f107 0128 	add.w	r1, r7, #40	; 0x28
   1760c:	440b      	add	r3, r1
   1760e:	7efa      	ldrb	r2, [r7, #27]
   17610:	f803 2c1c 	strb.w	r2, [r3, #-28]

        }
        time[count] = '\0';

        // reverse
        for( i = 0; i < count/2; ++i )
   17614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17616:	3301      	adds	r3, #1
   17618:	627b      	str	r3, [r7, #36]	; 0x24
   1761a:	6a3b      	ldr	r3, [r7, #32]
   1761c:	085a      	lsrs	r2, r3, #1
   1761e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17620:	429a      	cmp	r2, r3
   17622:	d8d9      	bhi.n	175d8 <vPrintNumber+0x88>
            tmp = time[i];
            time[i] = time[count-1-i];
            time[count-1-i] = tmp;

        }
        vPrintString(time);
   17624:	f107 030c 	add.w	r3, r7, #12
   17628:	4618      	mov	r0, r3
   1762a:	f7ff ff77 	bl	1751c <vPrintString>
        vPrintString("\n\r");
   1762e:	f648 20e8 	movw	r0, #35560	; 0x8ae8
   17632:	f2c0 0001 	movt	r0, #1
   17636:	f7ff ff71 	bl	1751c <vPrintString>
    }
}
   1763a:	3728      	adds	r7, #40	; 0x28
   1763c:	46bd      	mov	sp, r7
   1763e:	bd80      	pop	{r7, pc}

00017640 <vStartTask>:
extern portBASE_TYPE xSensorOfTask[NUMBEROFTASK];
extern portBASE_TYPE xActuatorOfTask[NUMBEROFTASK];

// init program to start all task when system init
void vStartTask()
{
   17640:	b580      	push	{r7, lr}
   17642:	b084      	sub	sp, #16
   17644:	af00      	add	r7, sp, #0
    portBASE_TYPE i;
    xEventHandle pxEvent;
    struct eventData null_data;

    for( i = 0; i < NUMBEROFTASK; ++i )
   17646:	2300      	movs	r3, #0
   17648:	60fb      	str	r3, [r7, #12]
   1764a:	e01f      	b.n	1768c <vStartTask+0x4c>
    {
        // set the deadline of task as the second deadline of task period
        pxEvent = pxEventCreate(xActuatorOfTask[i], xPeriodOfTask[i]*2, xPeriodOfTask[i], &null_data);
   1764c:	f240 0390 	movw	r3, #144	; 0x90
   17650:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17654:	68fa      	ldr	r2, [r7, #12]
   17656:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1765a:	f240 0328 	movw	r3, #40	; 0x28
   1765e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17662:	68fa      	ldr	r2, [r7, #12]
   17664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   17668:	0059      	lsls	r1, r3, #1
   1766a:	f240 0328 	movw	r3, #40	; 0x28
   1766e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17672:	68fa      	ldr	r2, [r7, #12]
   17674:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   17678:	463b      	mov	r3, r7
   1767a:	f7eb fb4b 	bl	2d14 <pxEventGenericCreate>
   1767e:	60b8      	str	r0, [r7, #8]
        vEventSend( pxEvent );   
   17680:	68b8      	ldr	r0, [r7, #8]
   17682:	f7eb fedf 	bl	3444 <vEventGenericSend>
{
    portBASE_TYPE i;
    xEventHandle pxEvent;
    struct eventData null_data;

    for( i = 0; i < NUMBEROFTASK; ++i )
   17686:	68fb      	ldr	r3, [r7, #12]
   17688:	3301      	adds	r3, #1
   1768a:	60fb      	str	r3, [r7, #12]
   1768c:	68fb      	ldr	r3, [r7, #12]
   1768e:	2b0c      	cmp	r3, #12
   17690:	dddc      	ble.n	1764c <vStartTask+0xc>
    {
        // set the deadline of task as the second deadline of task period
        pxEvent = pxEventCreate(xActuatorOfTask[i], xPeriodOfTask[i]*2, xPeriodOfTask[i], &null_data);
        vEventSend( pxEvent );   
    }
}
   17692:	3710      	adds	r7, #16
   17694:	46bd      	mov	sp, r7
   17696:	bd80      	pop	{r7, pc}

00017698 <vEventInterrupt>:

void vEventInterrupt(void * pvParameters)
{
   17698:	b580      	push	{r7, lr}
   1769a:	b082      	sub	sp, #8
   1769c:	af00      	add	r7, sp, #0
   1769e:	6078      	str	r0, [r7, #4]
    vSemaphoreCreateBinary( xInterruptSemaphore );
   176a0:	2001      	movs	r0, #1
   176a2:	2100      	movs	r1, #0
   176a4:	2203      	movs	r2, #3
   176a6:	f7ec fe07 	bl	42b8 <xQueueGenericCreate>
   176aa:	4602      	mov	r2, r0
   176ac:	f64c 53d4 	movw	r3, #52692	; 0xcdd4
   176b0:	f2c2 0304 	movt	r3, #8196	; 0x2004
   176b4:	601a      	str	r2, [r3, #0]
   176b6:	f64c 53d4 	movw	r3, #52692	; 0xcdd4
   176ba:	f2c2 0304 	movt	r3, #8196	; 0x2004
   176be:	681b      	ldr	r3, [r3, #0]
   176c0:	2b00      	cmp	r3, #0
   176c2:	d00a      	beq.n	176da <vEventInterrupt+0x42>
   176c4:	f64c 53d4 	movw	r3, #52692	; 0xcdd4
   176c8:	f2c2 0304 	movt	r3, #8196	; 0x2004
   176cc:	681b      	ldr	r3, [r3, #0]
   176ce:	4618      	mov	r0, r3
   176d0:	2100      	movs	r1, #0
   176d2:	2200      	movs	r2, #0
   176d4:	2300      	movs	r3, #0
   176d6:	f7ec fe7d 	bl	43d4 <xQueueGenericSend>
    xSemaphoreTake(xInterruptSemaphore, portMAX_DELAY);
   176da:	f64c 53d4 	movw	r3, #52692	; 0xcdd4
   176de:	f2c2 0304 	movt	r3, #8196	; 0x2004
   176e2:	681b      	ldr	r3, [r3, #0]
   176e4:	4618      	mov	r0, r3
   176e6:	2100      	movs	r1, #0
   176e8:	f04f 32ff 	mov.w	r2, #4294967295
   176ec:	2300      	movs	r3, #0
   176ee:	f7ec ff37 	bl	4560 <xQueueGenericReceive>
    while(1)
    {
        //xSemaphoreTake(xInterruptSemaphore, portMAX_DELAY);
        if(xIsExecutableEventArrive())
   176f2:	f7eb fa33 	bl	2b5c <xIsExecutableEventArrive>
   176f6:	4603      	mov	r3, r0
   176f8:	2b00      	cmp	r3, #0
   176fa:	d00a      	beq.n	17712 <vEventInterrupt+0x7a>
        {
            xSemaphoreGive( xBinarySemaphore[0] );
   176fc:	f241 3354 	movw	r3, #4948	; 0x1354
   17700:	f2c2 0300 	movt	r3, #8192	; 0x2000
   17704:	681b      	ldr	r3, [r3, #0]
   17706:	4618      	mov	r0, r3
   17708:	2100      	movs	r1, #0
   1770a:	2200      	movs	r2, #0
   1770c:	2300      	movs	r3, #0
   1770e:	f7ec fe61 	bl	43d4 <xQueueGenericSend>
        }
        taskYIELD();
   17712:	f7ee fa99 	bl	5c48 <vPortYieldFromISR>
    }
   17716:	e7ec      	b.n	176f2 <vEventInterrupt+0x5a>

00017718 <main>:
}

#define SERVANT_STACK_SIZE 128 
int main(void)
{
   17718:	b580      	push	{r7, lr}
   1771a:	b086      	sub	sp, #24
   1771c:	af04      	add	r7, sp, #16
    init_led();
   1771e:	f7ff fdf3 	bl	17308 <init_led>
    init_rs232();
   17722:	f7ff fe53 	bl	173cc <init_rs232>
    enable_rs232_interrupts();
   17726:	f7ff fe97 	bl	17458 <enable_rs232_interrupts>
    enable_rs232();
   1772a:	f7ff feb7 	bl	1749c <enable_rs232>
    vSemaphoreInitialise();
   1772e:	f7eb fef1 	bl	3514 <vSemaphoreInitialise>
    vContextInit();
   17732:	f7eb ff2f 	bl	3594 <vContextInit>
    vInitialiseEventLists();  
   17736:	f7eb f9ad 	bl	2a94 <vInitialiseEventLists>
    vStartTask();
   1773a:	f7ff ff81 	bl	17640 <vStartTask>
    PapabenchInit();
   1773e:	f7ec fab7 	bl	3cb0 <PapabenchInit>
    portBASE_TYPE i,j;
    portBASE_TYPE flag = 0;
   17742:	2300      	movs	r3, #0
   17744:	607b      	str	r3, [r7, #4]

    xTaskCreate( vR_Servant, "R-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 2, &xTaskOfHandle[0]);
   17746:	2302      	movs	r3, #2
   17748:	9300      	str	r3, [sp, #0]
   1774a:	f64c 53c4 	movw	r3, #52676	; 0xcdc4
   1774e:	f2c2 0304 	movt	r3, #8196	; 0x2004
   17752:	9301      	str	r3, [sp, #4]
   17754:	2300      	movs	r3, #0
   17756:	9302      	str	r3, [sp, #8]
   17758:	2300      	movs	r3, #0
   1775a:	9303      	str	r3, [sp, #12]
   1775c:	f643 30cd 	movw	r0, #15309	; 0x3bcd
   17760:	f2c0 0000 	movt	r0, #0
   17764:	f648 21ec 	movw	r1, #35564	; 0x8aec
   17768:	f2c0 0101 	movt	r1, #1
   1776c:	2280      	movs	r2, #128	; 0x80
   1776e:	2300      	movs	r3, #0
   17770:	f7ed f942 	bl	49f8 <xTaskGenericCreate>
    xTaskCreate( vSensor, "I-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 2, &xTaskOfHandle[1]);
   17774:	2302      	movs	r3, #2
   17776:	9300      	str	r3, [sp, #0]
   17778:	4b2f      	ldr	r3, [pc, #188]	; (17838 <main+0x120>)
   1777a:	9301      	str	r3, [sp, #4]
   1777c:	2300      	movs	r3, #0
   1777e:	9302      	str	r3, [sp, #8]
   17780:	2300      	movs	r3, #0
   17782:	9303      	str	r3, [sp, #12]
   17784:	f643 0079 	movw	r0, #14457	; 0x3879
   17788:	f2c0 0000 	movt	r0, #0
   1778c:	f648 21f8 	movw	r1, #35576	; 0x8af8
   17790:	f2c0 0101 	movt	r1, #1
   17794:	2280      	movs	r2, #128	; 0x80
   17796:	2300      	movs	r3, #0
   17798:	f7ed f92e 	bl	49f8 <xTaskGenericCreate>
    xTaskCreate( vServant, "C-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 2, &xTaskOfHandle[2]);
   1779c:	2302      	movs	r3, #2
   1779e:	9300      	str	r3, [sp, #0]
   177a0:	4b26      	ldr	r3, [pc, #152]	; (1783c <main+0x124>)
   177a2:	9301      	str	r3, [sp, #4]
   177a4:	2300      	movs	r3, #0
   177a6:	9302      	str	r3, [sp, #8]
   177a8:	2300      	movs	r3, #0
   177aa:	9303      	str	r3, [sp, #12]
   177ac:	f643 1075 	movw	r0, #14709	; 0x3975
   177b0:	f2c0 0000 	movt	r0, #0
   177b4:	f648 3104 	movw	r1, #35588	; 0x8b04
   177b8:	f2c0 0101 	movt	r1, #1
   177bc:	2280      	movs	r2, #128	; 0x80
   177be:	2300      	movs	r3, #0
   177c0:	f7ed f91a 	bl	49f8 <xTaskGenericCreate>
    xTaskCreate( vActuator, "O-Servant", SERVANT_STACK_SIZE, NULL,tskIDLE_PRIORITY + 2, &xTaskOfHandle[3]);
   177c4:	2302      	movs	r3, #2
   177c6:	9300      	str	r3, [sp, #0]
   177c8:	4b1d      	ldr	r3, [pc, #116]	; (17840 <main+0x128>)
   177ca:	9301      	str	r3, [sp, #4]
   177cc:	2300      	movs	r3, #0
   177ce:	9302      	str	r3, [sp, #8]
   177d0:	2300      	movs	r3, #0
   177d2:	9303      	str	r3, [sp, #12]
   177d4:	f643 20c5 	movw	r0, #15045	; 0x3ac5
   177d8:	f2c0 0000 	movt	r0, #0
   177dc:	f648 3110 	movw	r1, #35600	; 0x8b10
   177e0:	f2c0 0101 	movt	r1, #1
   177e4:	2280      	movs	r2, #128	; 0x80
   177e6:	2300      	movs	r3, #0
   177e8:	f7ed f906 	bl	49f8 <xTaskGenericCreate>
    xTaskCreate( vEventInterrupt, "event", SERVANT_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, NULL );
   177ec:	2301      	movs	r3, #1
   177ee:	9300      	str	r3, [sp, #0]
   177f0:	2300      	movs	r3, #0
   177f2:	9301      	str	r3, [sp, #4]
   177f4:	2300      	movs	r3, #0
   177f6:	9302      	str	r3, [sp, #8]
   177f8:	2300      	movs	r3, #0
   177fa:	9303      	str	r3, [sp, #12]
   177fc:	f247 6099 	movw	r0, #30361	; 0x7699
   17800:	f2c0 0001 	movt	r0, #1
   17804:	f648 311c 	movw	r1, #35612	; 0x8b1c
   17808:	f2c0 0101 	movt	r1, #1
   1780c:	2280      	movs	r2, #128	; 0x80
   1780e:	2300      	movs	r3, #0
   17810:	f7ed f8f2 	bl	49f8 <xTaskGenericCreate>

    xSemaphoreGive(xBinarySemaphore[0]);
   17814:	f241 3354 	movw	r3, #4948	; 0x1354
   17818:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1781c:	681b      	ldr	r3, [r3, #0]
   1781e:	4618      	mov	r0, r3
   17820:	2100      	movs	r1, #0
   17822:	2200      	movs	r2, #0
   17824:	2300      	movs	r3, #0
   17826:	f7ec fdd5 	bl	43d4 <xQueueGenericSend>
    vTaskStartScheduler();
   1782a:	f7ed fc63 	bl	50f4 <vTaskStartScheduler>

    return 0;
   1782e:	2300      	movs	r3, #0
}
   17830:	4618      	mov	r0, r3
   17832:	3708      	adds	r7, #8
   17834:	46bd      	mov	sp, r7
   17836:	bd80      	pop	{r7, pc}
   17838:	2004cdc8 	.word	0x2004cdc8
   1783c:	2004cdcc 	.word	0x2004cdcc
   17840:	2004cdd0 	.word	0x2004cdd0

00017844 <myTraceCreate>:

void myTraceCreate      (){
   17844:	b480      	push	{r7}
   17846:	af00      	add	r7, sp, #0
}
   17848:	46bd      	mov	sp, r7
   1784a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1784e:	4770      	bx	lr

00017850 <myTraceSwitchedIn>:

void myTraceSwitchedIn  (){
   17850:	b480      	push	{r7}
   17852:	af00      	add	r7, sp, #0
}
   17854:	46bd      	mov	sp, r7
   17856:	f85d 7b04 	ldr.w	r7, [sp], #4
   1785a:	4770      	bx	lr

0001785c <myTraceSwitchedOut>:

void myTraceSwitchedOut	(){
   1785c:	b480      	push	{r7}
   1785e:	af00      	add	r7, sp, #0
}
   17860:	46bd      	mov	sp, r7
   17862:	f85d 7b04 	ldr.w	r7, [sp], #4
   17866:	4770      	bx	lr

00017868 <vApplicationTickHook>:
 /*
 * if there is any task need to be triggered at this time,
 * tick hook function would send semaphore to them.
 * */
void vApplicationTickHook( void )
{
   17868:	b480      	push	{r7}
   1786a:	af00      	add	r7, sp, #0
    //xSemaphoreGive( xInterruptSemaphore );
}
   1786c:	46bd      	mov	sp, r7
   1786e:	f85d 7b04 	ldr.w	r7, [sp], #4
   17872:	4770      	bx	lr

00017874 <__aeabi_drsub>:
   17874:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   17878:	e002      	b.n	17880 <__adddf3>
   1787a:	bf00      	nop

0001787c <__aeabi_dsub>:
   1787c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00017880 <__adddf3>:
   17880:	b530      	push	{r4, r5, lr}
   17882:	ea4f 0441 	mov.w	r4, r1, lsl #1
   17886:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1788a:	ea94 0f05 	teq	r4, r5
   1788e:	bf08      	it	eq
   17890:	ea90 0f02 	teqeq	r0, r2
   17894:	bf1f      	itttt	ne
   17896:	ea54 0c00 	orrsne.w	ip, r4, r0
   1789a:	ea55 0c02 	orrsne.w	ip, r5, r2
   1789e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   178a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   178a6:	f000 80e2 	beq.w	17a6e <__adddf3+0x1ee>
   178aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   178ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   178b2:	bfb8      	it	lt
   178b4:	426d      	neglt	r5, r5
   178b6:	dd0c      	ble.n	178d2 <__adddf3+0x52>
   178b8:	442c      	add	r4, r5
   178ba:	ea80 0202 	eor.w	r2, r0, r2
   178be:	ea81 0303 	eor.w	r3, r1, r3
   178c2:	ea82 0000 	eor.w	r0, r2, r0
   178c6:	ea83 0101 	eor.w	r1, r3, r1
   178ca:	ea80 0202 	eor.w	r2, r0, r2
   178ce:	ea81 0303 	eor.w	r3, r1, r3
   178d2:	2d36      	cmp	r5, #54	; 0x36
   178d4:	bf88      	it	hi
   178d6:	bd30      	pophi	{r4, r5, pc}
   178d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   178dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   178e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   178e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   178e8:	d002      	beq.n	178f0 <__adddf3+0x70>
   178ea:	4240      	negs	r0, r0
   178ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   178f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   178f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   178f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   178fc:	d002      	beq.n	17904 <__adddf3+0x84>
   178fe:	4252      	negs	r2, r2
   17900:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   17904:	ea94 0f05 	teq	r4, r5
   17908:	f000 80a7 	beq.w	17a5a <__adddf3+0x1da>
   1790c:	f1a4 0401 	sub.w	r4, r4, #1
   17910:	f1d5 0e20 	rsbs	lr, r5, #32
   17914:	db0d      	blt.n	17932 <__adddf3+0xb2>
   17916:	fa02 fc0e 	lsl.w	ip, r2, lr
   1791a:	fa22 f205 	lsr.w	r2, r2, r5
   1791e:	1880      	adds	r0, r0, r2
   17920:	f141 0100 	adc.w	r1, r1, #0
   17924:	fa03 f20e 	lsl.w	r2, r3, lr
   17928:	1880      	adds	r0, r0, r2
   1792a:	fa43 f305 	asr.w	r3, r3, r5
   1792e:	4159      	adcs	r1, r3
   17930:	e00e      	b.n	17950 <__adddf3+0xd0>
   17932:	f1a5 0520 	sub.w	r5, r5, #32
   17936:	f10e 0e20 	add.w	lr, lr, #32
   1793a:	2a01      	cmp	r2, #1
   1793c:	fa03 fc0e 	lsl.w	ip, r3, lr
   17940:	bf28      	it	cs
   17942:	f04c 0c02 	orrcs.w	ip, ip, #2
   17946:	fa43 f305 	asr.w	r3, r3, r5
   1794a:	18c0      	adds	r0, r0, r3
   1794c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   17950:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17954:	d507      	bpl.n	17966 <__adddf3+0xe6>
   17956:	f04f 0e00 	mov.w	lr, #0
   1795a:	f1dc 0c00 	rsbs	ip, ip, #0
   1795e:	eb7e 0000 	sbcs.w	r0, lr, r0
   17962:	eb6e 0101 	sbc.w	r1, lr, r1
   17966:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1796a:	d31b      	bcc.n	179a4 <__adddf3+0x124>
   1796c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   17970:	d30c      	bcc.n	1798c <__adddf3+0x10c>
   17972:	0849      	lsrs	r1, r1, #1
   17974:	ea5f 0030 	movs.w	r0, r0, rrx
   17978:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1797c:	f104 0401 	add.w	r4, r4, #1
   17980:	ea4f 5244 	mov.w	r2, r4, lsl #21
   17984:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   17988:	f080 809a 	bcs.w	17ac0 <__adddf3+0x240>
   1798c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   17990:	bf08      	it	eq
   17992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17996:	f150 0000 	adcs.w	r0, r0, #0
   1799a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1799e:	ea41 0105 	orr.w	r1, r1, r5
   179a2:	bd30      	pop	{r4, r5, pc}
   179a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   179a8:	4140      	adcs	r0, r0
   179aa:	eb41 0101 	adc.w	r1, r1, r1
   179ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   179b2:	f1a4 0401 	sub.w	r4, r4, #1
   179b6:	d1e9      	bne.n	1798c <__adddf3+0x10c>
   179b8:	f091 0f00 	teq	r1, #0
   179bc:	bf04      	itt	eq
   179be:	4601      	moveq	r1, r0
   179c0:	2000      	moveq	r0, #0
   179c2:	fab1 f381 	clz	r3, r1
   179c6:	bf08      	it	eq
   179c8:	3320      	addeq	r3, #32
   179ca:	f1a3 030b 	sub.w	r3, r3, #11
   179ce:	f1b3 0220 	subs.w	r2, r3, #32
   179d2:	da0c      	bge.n	179ee <__adddf3+0x16e>
   179d4:	320c      	adds	r2, #12
   179d6:	dd08      	ble.n	179ea <__adddf3+0x16a>
   179d8:	f102 0c14 	add.w	ip, r2, #20
   179dc:	f1c2 020c 	rsb	r2, r2, #12
   179e0:	fa01 f00c 	lsl.w	r0, r1, ip
   179e4:	fa21 f102 	lsr.w	r1, r1, r2
   179e8:	e00c      	b.n	17a04 <__adddf3+0x184>
   179ea:	f102 0214 	add.w	r2, r2, #20
   179ee:	bfd8      	it	le
   179f0:	f1c2 0c20 	rsble	ip, r2, #32
   179f4:	fa01 f102 	lsl.w	r1, r1, r2
   179f8:	fa20 fc0c 	lsr.w	ip, r0, ip
   179fc:	bfdc      	itt	le
   179fe:	ea41 010c 	orrle.w	r1, r1, ip
   17a02:	4090      	lslle	r0, r2
   17a04:	1ae4      	subs	r4, r4, r3
   17a06:	bfa2      	ittt	ge
   17a08:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   17a0c:	4329      	orrge	r1, r5
   17a0e:	bd30      	popge	{r4, r5, pc}
   17a10:	ea6f 0404 	mvn.w	r4, r4
   17a14:	3c1f      	subs	r4, #31
   17a16:	da1c      	bge.n	17a52 <__adddf3+0x1d2>
   17a18:	340c      	adds	r4, #12
   17a1a:	dc0e      	bgt.n	17a3a <__adddf3+0x1ba>
   17a1c:	f104 0414 	add.w	r4, r4, #20
   17a20:	f1c4 0220 	rsb	r2, r4, #32
   17a24:	fa20 f004 	lsr.w	r0, r0, r4
   17a28:	fa01 f302 	lsl.w	r3, r1, r2
   17a2c:	ea40 0003 	orr.w	r0, r0, r3
   17a30:	fa21 f304 	lsr.w	r3, r1, r4
   17a34:	ea45 0103 	orr.w	r1, r5, r3
   17a38:	bd30      	pop	{r4, r5, pc}
   17a3a:	f1c4 040c 	rsb	r4, r4, #12
   17a3e:	f1c4 0220 	rsb	r2, r4, #32
   17a42:	fa20 f002 	lsr.w	r0, r0, r2
   17a46:	fa01 f304 	lsl.w	r3, r1, r4
   17a4a:	ea40 0003 	orr.w	r0, r0, r3
   17a4e:	4629      	mov	r1, r5
   17a50:	bd30      	pop	{r4, r5, pc}
   17a52:	fa21 f004 	lsr.w	r0, r1, r4
   17a56:	4629      	mov	r1, r5
   17a58:	bd30      	pop	{r4, r5, pc}
   17a5a:	f094 0f00 	teq	r4, #0
   17a5e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   17a62:	bf06      	itte	eq
   17a64:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   17a68:	3401      	addeq	r4, #1
   17a6a:	3d01      	subne	r5, #1
   17a6c:	e74e      	b.n	1790c <__adddf3+0x8c>
   17a6e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17a72:	bf18      	it	ne
   17a74:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   17a78:	d029      	beq.n	17ace <__adddf3+0x24e>
   17a7a:	ea94 0f05 	teq	r4, r5
   17a7e:	bf08      	it	eq
   17a80:	ea90 0f02 	teqeq	r0, r2
   17a84:	d005      	beq.n	17a92 <__adddf3+0x212>
   17a86:	ea54 0c00 	orrs.w	ip, r4, r0
   17a8a:	bf04      	itt	eq
   17a8c:	4619      	moveq	r1, r3
   17a8e:	4610      	moveq	r0, r2
   17a90:	bd30      	pop	{r4, r5, pc}
   17a92:	ea91 0f03 	teq	r1, r3
   17a96:	bf1e      	ittt	ne
   17a98:	2100      	movne	r1, #0
   17a9a:	2000      	movne	r0, #0
   17a9c:	bd30      	popne	{r4, r5, pc}
   17a9e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   17aa2:	d105      	bne.n	17ab0 <__adddf3+0x230>
   17aa4:	0040      	lsls	r0, r0, #1
   17aa6:	4149      	adcs	r1, r1
   17aa8:	bf28      	it	cs
   17aaa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   17aae:	bd30      	pop	{r4, r5, pc}
   17ab0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   17ab4:	bf3c      	itt	cc
   17ab6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   17aba:	bd30      	popcc	{r4, r5, pc}
   17abc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17ac0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   17ac4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17ac8:	f04f 0000 	mov.w	r0, #0
   17acc:	bd30      	pop	{r4, r5, pc}
   17ace:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   17ad2:	bf1a      	itte	ne
   17ad4:	4619      	movne	r1, r3
   17ad6:	4610      	movne	r0, r2
   17ad8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   17adc:	bf1c      	itt	ne
   17ade:	460b      	movne	r3, r1
   17ae0:	4602      	movne	r2, r0
   17ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17ae6:	bf06      	itte	eq
   17ae8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   17aec:	ea91 0f03 	teqeq	r1, r3
   17af0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   17af4:	bd30      	pop	{r4, r5, pc}
   17af6:	bf00      	nop

00017af8 <__aeabi_ui2d>:
   17af8:	f090 0f00 	teq	r0, #0
   17afc:	bf04      	itt	eq
   17afe:	2100      	moveq	r1, #0
   17b00:	4770      	bxeq	lr
   17b02:	b530      	push	{r4, r5, lr}
   17b04:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17b08:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17b0c:	f04f 0500 	mov.w	r5, #0
   17b10:	f04f 0100 	mov.w	r1, #0
   17b14:	e750      	b.n	179b8 <__adddf3+0x138>
   17b16:	bf00      	nop

00017b18 <__aeabi_i2d>:
   17b18:	f090 0f00 	teq	r0, #0
   17b1c:	bf04      	itt	eq
   17b1e:	2100      	moveq	r1, #0
   17b20:	4770      	bxeq	lr
   17b22:	b530      	push	{r4, r5, lr}
   17b24:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17b28:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17b2c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   17b30:	bf48      	it	mi
   17b32:	4240      	negmi	r0, r0
   17b34:	f04f 0100 	mov.w	r1, #0
   17b38:	e73e      	b.n	179b8 <__adddf3+0x138>
   17b3a:	bf00      	nop

00017b3c <__aeabi_f2d>:
   17b3c:	0042      	lsls	r2, r0, #1
   17b3e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   17b42:	ea4f 0131 	mov.w	r1, r1, rrx
   17b46:	ea4f 7002 	mov.w	r0, r2, lsl #28
   17b4a:	bf1f      	itttt	ne
   17b4c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   17b50:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17b54:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   17b58:	4770      	bxne	lr
   17b5a:	f092 0f00 	teq	r2, #0
   17b5e:	bf14      	ite	ne
   17b60:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   17b64:	4770      	bxeq	lr
   17b66:	b530      	push	{r4, r5, lr}
   17b68:	f44f 7460 	mov.w	r4, #896	; 0x380
   17b6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   17b70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17b74:	e720      	b.n	179b8 <__adddf3+0x138>
   17b76:	bf00      	nop

00017b78 <__aeabi_ul2d>:
   17b78:	ea50 0201 	orrs.w	r2, r0, r1
   17b7c:	bf08      	it	eq
   17b7e:	4770      	bxeq	lr
   17b80:	b530      	push	{r4, r5, lr}
   17b82:	f04f 0500 	mov.w	r5, #0
   17b86:	e00a      	b.n	17b9e <__aeabi_l2d+0x16>

00017b88 <__aeabi_l2d>:
   17b88:	ea50 0201 	orrs.w	r2, r0, r1
   17b8c:	bf08      	it	eq
   17b8e:	4770      	bxeq	lr
   17b90:	b530      	push	{r4, r5, lr}
   17b92:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   17b96:	d502      	bpl.n	17b9e <__aeabi_l2d+0x16>
   17b98:	4240      	negs	r0, r0
   17b9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17b9e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   17ba2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   17ba6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   17baa:	f43f aedc 	beq.w	17966 <__adddf3+0xe6>
   17bae:	f04f 0203 	mov.w	r2, #3
   17bb2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17bb6:	bf18      	it	ne
   17bb8:	3203      	addne	r2, #3
   17bba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   17bbe:	bf18      	it	ne
   17bc0:	3203      	addne	r2, #3
   17bc2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   17bc6:	f1c2 0320 	rsb	r3, r2, #32
   17bca:	fa00 fc03 	lsl.w	ip, r0, r3
   17bce:	fa20 f002 	lsr.w	r0, r0, r2
   17bd2:	fa01 fe03 	lsl.w	lr, r1, r3
   17bd6:	ea40 000e 	orr.w	r0, r0, lr
   17bda:	fa21 f102 	lsr.w	r1, r1, r2
   17bde:	4414      	add	r4, r2
   17be0:	e6c1      	b.n	17966 <__adddf3+0xe6>
   17be2:	bf00      	nop

00017be4 <__aeabi_dmul>:
   17be4:	b570      	push	{r4, r5, r6, lr}
   17be6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17bea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17bee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17bf2:	bf1d      	ittte	ne
   17bf4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17bf8:	ea94 0f0c 	teqne	r4, ip
   17bfc:	ea95 0f0c 	teqne	r5, ip
   17c00:	f000 f8de 	bleq	17dc0 <__aeabi_dmul+0x1dc>
   17c04:	442c      	add	r4, r5
   17c06:	ea81 0603 	eor.w	r6, r1, r3
   17c0a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   17c0e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   17c12:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   17c16:	bf18      	it	ne
   17c18:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   17c1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17c20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   17c24:	d038      	beq.n	17c98 <__aeabi_dmul+0xb4>
   17c26:	fba0 ce02 	umull	ip, lr, r0, r2
   17c2a:	f04f 0500 	mov.w	r5, #0
   17c2e:	fbe1 e502 	umlal	lr, r5, r1, r2
   17c32:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   17c36:	fbe0 e503 	umlal	lr, r5, r0, r3
   17c3a:	f04f 0600 	mov.w	r6, #0
   17c3e:	fbe1 5603 	umlal	r5, r6, r1, r3
   17c42:	f09c 0f00 	teq	ip, #0
   17c46:	bf18      	it	ne
   17c48:	f04e 0e01 	orrne.w	lr, lr, #1
   17c4c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   17c50:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   17c54:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   17c58:	d204      	bcs.n	17c64 <__aeabi_dmul+0x80>
   17c5a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   17c5e:	416d      	adcs	r5, r5
   17c60:	eb46 0606 	adc.w	r6, r6, r6
   17c64:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   17c68:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   17c6c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   17c70:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   17c74:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   17c78:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17c7c:	bf88      	it	hi
   17c7e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17c82:	d81e      	bhi.n	17cc2 <__aeabi_dmul+0xde>
   17c84:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   17c88:	bf08      	it	eq
   17c8a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   17c8e:	f150 0000 	adcs.w	r0, r0, #0
   17c92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17c96:	bd70      	pop	{r4, r5, r6, pc}
   17c98:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   17c9c:	ea46 0101 	orr.w	r1, r6, r1
   17ca0:	ea40 0002 	orr.w	r0, r0, r2
   17ca4:	ea81 0103 	eor.w	r1, r1, r3
   17ca8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   17cac:	bfc2      	ittt	gt
   17cae:	ebd4 050c 	rsbsgt	r5, r4, ip
   17cb2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17cb6:	bd70      	popgt	{r4, r5, r6, pc}
   17cb8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17cbc:	f04f 0e00 	mov.w	lr, #0
   17cc0:	3c01      	subs	r4, #1
   17cc2:	f300 80ab 	bgt.w	17e1c <__aeabi_dmul+0x238>
   17cc6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   17cca:	bfde      	ittt	le
   17ccc:	2000      	movle	r0, #0
   17cce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   17cd2:	bd70      	pople	{r4, r5, r6, pc}
   17cd4:	f1c4 0400 	rsb	r4, r4, #0
   17cd8:	3c20      	subs	r4, #32
   17cda:	da35      	bge.n	17d48 <__aeabi_dmul+0x164>
   17cdc:	340c      	adds	r4, #12
   17cde:	dc1b      	bgt.n	17d18 <__aeabi_dmul+0x134>
   17ce0:	f104 0414 	add.w	r4, r4, #20
   17ce4:	f1c4 0520 	rsb	r5, r4, #32
   17ce8:	fa00 f305 	lsl.w	r3, r0, r5
   17cec:	fa20 f004 	lsr.w	r0, r0, r4
   17cf0:	fa01 f205 	lsl.w	r2, r1, r5
   17cf4:	ea40 0002 	orr.w	r0, r0, r2
   17cf8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   17cfc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   17d00:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17d04:	fa21 f604 	lsr.w	r6, r1, r4
   17d08:	eb42 0106 	adc.w	r1, r2, r6
   17d0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17d10:	bf08      	it	eq
   17d12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17d16:	bd70      	pop	{r4, r5, r6, pc}
   17d18:	f1c4 040c 	rsb	r4, r4, #12
   17d1c:	f1c4 0520 	rsb	r5, r4, #32
   17d20:	fa00 f304 	lsl.w	r3, r0, r4
   17d24:	fa20 f005 	lsr.w	r0, r0, r5
   17d28:	fa01 f204 	lsl.w	r2, r1, r4
   17d2c:	ea40 0002 	orr.w	r0, r0, r2
   17d30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17d34:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   17d38:	f141 0100 	adc.w	r1, r1, #0
   17d3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17d40:	bf08      	it	eq
   17d42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17d46:	bd70      	pop	{r4, r5, r6, pc}
   17d48:	f1c4 0520 	rsb	r5, r4, #32
   17d4c:	fa00 f205 	lsl.w	r2, r0, r5
   17d50:	ea4e 0e02 	orr.w	lr, lr, r2
   17d54:	fa20 f304 	lsr.w	r3, r0, r4
   17d58:	fa01 f205 	lsl.w	r2, r1, r5
   17d5c:	ea43 0302 	orr.w	r3, r3, r2
   17d60:	fa21 f004 	lsr.w	r0, r1, r4
   17d64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17d68:	fa21 f204 	lsr.w	r2, r1, r4
   17d6c:	ea20 0002 	bic.w	r0, r0, r2
   17d70:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   17d74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   17d78:	bf08      	it	eq
   17d7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   17d7e:	bd70      	pop	{r4, r5, r6, pc}
   17d80:	f094 0f00 	teq	r4, #0
   17d84:	d10f      	bne.n	17da6 <__aeabi_dmul+0x1c2>
   17d86:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   17d8a:	0040      	lsls	r0, r0, #1
   17d8c:	eb41 0101 	adc.w	r1, r1, r1
   17d90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17d94:	bf08      	it	eq
   17d96:	3c01      	subeq	r4, #1
   17d98:	d0f7      	beq.n	17d8a <__aeabi_dmul+0x1a6>
   17d9a:	ea41 0106 	orr.w	r1, r1, r6
   17d9e:	f095 0f00 	teq	r5, #0
   17da2:	bf18      	it	ne
   17da4:	4770      	bxne	lr
   17da6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   17daa:	0052      	lsls	r2, r2, #1
   17dac:	eb43 0303 	adc.w	r3, r3, r3
   17db0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   17db4:	bf08      	it	eq
   17db6:	3d01      	subeq	r5, #1
   17db8:	d0f7      	beq.n	17daa <__aeabi_dmul+0x1c6>
   17dba:	ea43 0306 	orr.w	r3, r3, r6
   17dbe:	4770      	bx	lr
   17dc0:	ea94 0f0c 	teq	r4, ip
   17dc4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17dc8:	bf18      	it	ne
   17dca:	ea95 0f0c 	teqne	r5, ip
   17dce:	d00c      	beq.n	17dea <__aeabi_dmul+0x206>
   17dd0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17dd4:	bf18      	it	ne
   17dd6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17dda:	d1d1      	bne.n	17d80 <__aeabi_dmul+0x19c>
   17ddc:	ea81 0103 	eor.w	r1, r1, r3
   17de0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17de4:	f04f 0000 	mov.w	r0, #0
   17de8:	bd70      	pop	{r4, r5, r6, pc}
   17dea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17dee:	bf06      	itte	eq
   17df0:	4610      	moveq	r0, r2
   17df2:	4619      	moveq	r1, r3
   17df4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17df8:	d019      	beq.n	17e2e <__aeabi_dmul+0x24a>
   17dfa:	ea94 0f0c 	teq	r4, ip
   17dfe:	d102      	bne.n	17e06 <__aeabi_dmul+0x222>
   17e00:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   17e04:	d113      	bne.n	17e2e <__aeabi_dmul+0x24a>
   17e06:	ea95 0f0c 	teq	r5, ip
   17e0a:	d105      	bne.n	17e18 <__aeabi_dmul+0x234>
   17e0c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   17e10:	bf1c      	itt	ne
   17e12:	4610      	movne	r0, r2
   17e14:	4619      	movne	r1, r3
   17e16:	d10a      	bne.n	17e2e <__aeabi_dmul+0x24a>
   17e18:	ea81 0103 	eor.w	r1, r1, r3
   17e1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   17e20:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17e24:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   17e28:	f04f 0000 	mov.w	r0, #0
   17e2c:	bd70      	pop	{r4, r5, r6, pc}
   17e2e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   17e32:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   17e36:	bd70      	pop	{r4, r5, r6, pc}

00017e38 <__aeabi_ddiv>:
   17e38:	b570      	push	{r4, r5, r6, lr}
   17e3a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   17e3e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   17e42:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   17e46:	bf1d      	ittte	ne
   17e48:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   17e4c:	ea94 0f0c 	teqne	r4, ip
   17e50:	ea95 0f0c 	teqne	r5, ip
   17e54:	f000 f8a7 	bleq	17fa6 <__aeabi_ddiv+0x16e>
   17e58:	eba4 0405 	sub.w	r4, r4, r5
   17e5c:	ea81 0e03 	eor.w	lr, r1, r3
   17e60:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17e64:	ea4f 3101 	mov.w	r1, r1, lsl #12
   17e68:	f000 8088 	beq.w	17f7c <__aeabi_ddiv+0x144>
   17e6c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   17e70:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   17e74:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   17e78:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   17e7c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   17e80:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   17e84:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   17e88:	ea4f 2600 	mov.w	r6, r0, lsl #8
   17e8c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   17e90:	429d      	cmp	r5, r3
   17e92:	bf08      	it	eq
   17e94:	4296      	cmpeq	r6, r2
   17e96:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   17e9a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   17e9e:	d202      	bcs.n	17ea6 <__aeabi_ddiv+0x6e>
   17ea0:	085b      	lsrs	r3, r3, #1
   17ea2:	ea4f 0232 	mov.w	r2, r2, rrx
   17ea6:	1ab6      	subs	r6, r6, r2
   17ea8:	eb65 0503 	sbc.w	r5, r5, r3
   17eac:	085b      	lsrs	r3, r3, #1
   17eae:	ea4f 0232 	mov.w	r2, r2, rrx
   17eb2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   17eb6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   17eba:	ebb6 0e02 	subs.w	lr, r6, r2
   17ebe:	eb75 0e03 	sbcs.w	lr, r5, r3
   17ec2:	bf22      	ittt	cs
   17ec4:	1ab6      	subcs	r6, r6, r2
   17ec6:	4675      	movcs	r5, lr
   17ec8:	ea40 000c 	orrcs.w	r0, r0, ip
   17ecc:	085b      	lsrs	r3, r3, #1
   17ece:	ea4f 0232 	mov.w	r2, r2, rrx
   17ed2:	ebb6 0e02 	subs.w	lr, r6, r2
   17ed6:	eb75 0e03 	sbcs.w	lr, r5, r3
   17eda:	bf22      	ittt	cs
   17edc:	1ab6      	subcs	r6, r6, r2
   17ede:	4675      	movcs	r5, lr
   17ee0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   17ee4:	085b      	lsrs	r3, r3, #1
   17ee6:	ea4f 0232 	mov.w	r2, r2, rrx
   17eea:	ebb6 0e02 	subs.w	lr, r6, r2
   17eee:	eb75 0e03 	sbcs.w	lr, r5, r3
   17ef2:	bf22      	ittt	cs
   17ef4:	1ab6      	subcs	r6, r6, r2
   17ef6:	4675      	movcs	r5, lr
   17ef8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   17efc:	085b      	lsrs	r3, r3, #1
   17efe:	ea4f 0232 	mov.w	r2, r2, rrx
   17f02:	ebb6 0e02 	subs.w	lr, r6, r2
   17f06:	eb75 0e03 	sbcs.w	lr, r5, r3
   17f0a:	bf22      	ittt	cs
   17f0c:	1ab6      	subcs	r6, r6, r2
   17f0e:	4675      	movcs	r5, lr
   17f10:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   17f14:	ea55 0e06 	orrs.w	lr, r5, r6
   17f18:	d018      	beq.n	17f4c <__aeabi_ddiv+0x114>
   17f1a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   17f1e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   17f22:	ea4f 1606 	mov.w	r6, r6, lsl #4
   17f26:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   17f2a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   17f2e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   17f32:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   17f36:	d1c0      	bne.n	17eba <__aeabi_ddiv+0x82>
   17f38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17f3c:	d10b      	bne.n	17f56 <__aeabi_ddiv+0x11e>
   17f3e:	ea41 0100 	orr.w	r1, r1, r0
   17f42:	f04f 0000 	mov.w	r0, #0
   17f46:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   17f4a:	e7b6      	b.n	17eba <__aeabi_ddiv+0x82>
   17f4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   17f50:	bf04      	itt	eq
   17f52:	4301      	orreq	r1, r0
   17f54:	2000      	moveq	r0, #0
   17f56:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   17f5a:	bf88      	it	hi
   17f5c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   17f60:	f63f aeaf 	bhi.w	17cc2 <__aeabi_dmul+0xde>
   17f64:	ebb5 0c03 	subs.w	ip, r5, r3
   17f68:	bf04      	itt	eq
   17f6a:	ebb6 0c02 	subseq.w	ip, r6, r2
   17f6e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   17f72:	f150 0000 	adcs.w	r0, r0, #0
   17f76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   17f7a:	bd70      	pop	{r4, r5, r6, pc}
   17f7c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   17f80:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   17f84:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   17f88:	bfc2      	ittt	gt
   17f8a:	ebd4 050c 	rsbsgt	r5, r4, ip
   17f8e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   17f92:	bd70      	popgt	{r4, r5, r6, pc}
   17f94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   17f98:	f04f 0e00 	mov.w	lr, #0
   17f9c:	3c01      	subs	r4, #1
   17f9e:	e690      	b.n	17cc2 <__aeabi_dmul+0xde>
   17fa0:	ea45 0e06 	orr.w	lr, r5, r6
   17fa4:	e68d      	b.n	17cc2 <__aeabi_dmul+0xde>
   17fa6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   17faa:	ea94 0f0c 	teq	r4, ip
   17fae:	bf08      	it	eq
   17fb0:	ea95 0f0c 	teqeq	r5, ip
   17fb4:	f43f af3b 	beq.w	17e2e <__aeabi_dmul+0x24a>
   17fb8:	ea94 0f0c 	teq	r4, ip
   17fbc:	d10a      	bne.n	17fd4 <__aeabi_ddiv+0x19c>
   17fbe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   17fc2:	f47f af34 	bne.w	17e2e <__aeabi_dmul+0x24a>
   17fc6:	ea95 0f0c 	teq	r5, ip
   17fca:	f47f af25 	bne.w	17e18 <__aeabi_dmul+0x234>
   17fce:	4610      	mov	r0, r2
   17fd0:	4619      	mov	r1, r3
   17fd2:	e72c      	b.n	17e2e <__aeabi_dmul+0x24a>
   17fd4:	ea95 0f0c 	teq	r5, ip
   17fd8:	d106      	bne.n	17fe8 <__aeabi_ddiv+0x1b0>
   17fda:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   17fde:	f43f aefd 	beq.w	17ddc <__aeabi_dmul+0x1f8>
   17fe2:	4610      	mov	r0, r2
   17fe4:	4619      	mov	r1, r3
   17fe6:	e722      	b.n	17e2e <__aeabi_dmul+0x24a>
   17fe8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   17fec:	bf18      	it	ne
   17fee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   17ff2:	f47f aec5 	bne.w	17d80 <__aeabi_dmul+0x19c>
   17ff6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   17ffa:	f47f af0d 	bne.w	17e18 <__aeabi_dmul+0x234>
   17ffe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   18002:	f47f aeeb 	bne.w	17ddc <__aeabi_dmul+0x1f8>
   18006:	e712      	b.n	17e2e <__aeabi_dmul+0x24a>

00018008 <__gedf2>:
   18008:	f04f 3cff 	mov.w	ip, #4294967295
   1800c:	e006      	b.n	1801c <__cmpdf2+0x4>
   1800e:	bf00      	nop

00018010 <__ledf2>:
   18010:	f04f 0c01 	mov.w	ip, #1
   18014:	e002      	b.n	1801c <__cmpdf2+0x4>
   18016:	bf00      	nop

00018018 <__cmpdf2>:
   18018:	f04f 0c01 	mov.w	ip, #1
   1801c:	f84d cd04 	str.w	ip, [sp, #-4]!
   18020:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   18024:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18028:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1802c:	bf18      	it	ne
   1802e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   18032:	d01b      	beq.n	1806c <__cmpdf2+0x54>
   18034:	b001      	add	sp, #4
   18036:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1803a:	bf0c      	ite	eq
   1803c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   18040:	ea91 0f03 	teqne	r1, r3
   18044:	bf02      	ittt	eq
   18046:	ea90 0f02 	teqeq	r0, r2
   1804a:	2000      	moveq	r0, #0
   1804c:	4770      	bxeq	lr
   1804e:	f110 0f00 	cmn.w	r0, #0
   18052:	ea91 0f03 	teq	r1, r3
   18056:	bf58      	it	pl
   18058:	4299      	cmppl	r1, r3
   1805a:	bf08      	it	eq
   1805c:	4290      	cmpeq	r0, r2
   1805e:	bf2c      	ite	cs
   18060:	17d8      	asrcs	r0, r3, #31
   18062:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   18066:	f040 0001 	orr.w	r0, r0, #1
   1806a:	4770      	bx	lr
   1806c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   18070:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18074:	d102      	bne.n	1807c <__cmpdf2+0x64>
   18076:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1807a:	d107      	bne.n	1808c <__cmpdf2+0x74>
   1807c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   18080:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18084:	d1d6      	bne.n	18034 <__cmpdf2+0x1c>
   18086:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1808a:	d0d3      	beq.n	18034 <__cmpdf2+0x1c>
   1808c:	f85d 0b04 	ldr.w	r0, [sp], #4
   18090:	4770      	bx	lr
   18092:	bf00      	nop

00018094 <__aeabi_cdrcmple>:
   18094:	4684      	mov	ip, r0
   18096:	4610      	mov	r0, r2
   18098:	4662      	mov	r2, ip
   1809a:	468c      	mov	ip, r1
   1809c:	4619      	mov	r1, r3
   1809e:	4663      	mov	r3, ip
   180a0:	e000      	b.n	180a4 <__aeabi_cdcmpeq>
   180a2:	bf00      	nop

000180a4 <__aeabi_cdcmpeq>:
   180a4:	b501      	push	{r0, lr}
   180a6:	f7ff ffb7 	bl	18018 <__cmpdf2>
   180aa:	2800      	cmp	r0, #0
   180ac:	bf48      	it	mi
   180ae:	f110 0f00 	cmnmi.w	r0, #0
   180b2:	bd01      	pop	{r0, pc}

000180b4 <__aeabi_dcmpeq>:
   180b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   180b8:	f7ff fff4 	bl	180a4 <__aeabi_cdcmpeq>
   180bc:	bf0c      	ite	eq
   180be:	2001      	moveq	r0, #1
   180c0:	2000      	movne	r0, #0
   180c2:	f85d fb08 	ldr.w	pc, [sp], #8
   180c6:	bf00      	nop

000180c8 <__aeabi_dcmplt>:
   180c8:	f84d ed08 	str.w	lr, [sp, #-8]!
   180cc:	f7ff ffea 	bl	180a4 <__aeabi_cdcmpeq>
   180d0:	bf34      	ite	cc
   180d2:	2001      	movcc	r0, #1
   180d4:	2000      	movcs	r0, #0
   180d6:	f85d fb08 	ldr.w	pc, [sp], #8
   180da:	bf00      	nop

000180dc <__aeabi_dcmple>:
   180dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   180e0:	f7ff ffe0 	bl	180a4 <__aeabi_cdcmpeq>
   180e4:	bf94      	ite	ls
   180e6:	2001      	movls	r0, #1
   180e8:	2000      	movhi	r0, #0
   180ea:	f85d fb08 	ldr.w	pc, [sp], #8
   180ee:	bf00      	nop

000180f0 <__aeabi_dcmpge>:
   180f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   180f4:	f7ff ffce 	bl	18094 <__aeabi_cdrcmple>
   180f8:	bf94      	ite	ls
   180fa:	2001      	movls	r0, #1
   180fc:	2000      	movhi	r0, #0
   180fe:	f85d fb08 	ldr.w	pc, [sp], #8
   18102:	bf00      	nop

00018104 <__aeabi_dcmpgt>:
   18104:	f84d ed08 	str.w	lr, [sp, #-8]!
   18108:	f7ff ffc4 	bl	18094 <__aeabi_cdrcmple>
   1810c:	bf34      	ite	cc
   1810e:	2001      	movcc	r0, #1
   18110:	2000      	movcs	r0, #0
   18112:	f85d fb08 	ldr.w	pc, [sp], #8
   18116:	bf00      	nop

00018118 <__aeabi_d2iz>:
   18118:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1811c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   18120:	d215      	bcs.n	1814e <__aeabi_d2iz+0x36>
   18122:	d511      	bpl.n	18148 <__aeabi_d2iz+0x30>
   18124:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   18128:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1812c:	d912      	bls.n	18154 <__aeabi_d2iz+0x3c>
   1812e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18132:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18136:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1813a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1813e:	fa23 f002 	lsr.w	r0, r3, r2
   18142:	bf18      	it	ne
   18144:	4240      	negne	r0, r0
   18146:	4770      	bx	lr
   18148:	f04f 0000 	mov.w	r0, #0
   1814c:	4770      	bx	lr
   1814e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   18152:	d105      	bne.n	18160 <__aeabi_d2iz+0x48>
   18154:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   18158:	bf08      	it	eq
   1815a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1815e:	4770      	bx	lr
   18160:	f04f 0000 	mov.w	r0, #0
   18164:	4770      	bx	lr
   18166:	bf00      	nop

00018168 <__aeabi_d2uiz>:
   18168:	004a      	lsls	r2, r1, #1
   1816a:	d211      	bcs.n	18190 <__aeabi_d2uiz+0x28>
   1816c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   18170:	d211      	bcs.n	18196 <__aeabi_d2uiz+0x2e>
   18172:	d50d      	bpl.n	18190 <__aeabi_d2uiz+0x28>
   18174:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   18178:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1817c:	d40e      	bmi.n	1819c <__aeabi_d2uiz+0x34>
   1817e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18182:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18186:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1818a:	fa23 f002 	lsr.w	r0, r3, r2
   1818e:	4770      	bx	lr
   18190:	f04f 0000 	mov.w	r0, #0
   18194:	4770      	bx	lr
   18196:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1819a:	d102      	bne.n	181a2 <__aeabi_d2uiz+0x3a>
   1819c:	f04f 30ff 	mov.w	r0, #4294967295
   181a0:	4770      	bx	lr
   181a2:	f04f 0000 	mov.w	r0, #0
   181a6:	4770      	bx	lr

000181a8 <__aeabi_d2f>:
   181a8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   181ac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   181b0:	bf24      	itt	cs
   181b2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   181b6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   181ba:	d90d      	bls.n	181d8 <__aeabi_d2f+0x30>
   181bc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   181c0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   181c4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   181c8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   181cc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   181d0:	bf08      	it	eq
   181d2:	f020 0001 	biceq.w	r0, r0, #1
   181d6:	4770      	bx	lr
   181d8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   181dc:	d121      	bne.n	18222 <__aeabi_d2f+0x7a>
   181de:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   181e2:	bfbc      	itt	lt
   181e4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   181e8:	4770      	bxlt	lr
   181ea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   181ee:	ea4f 5252 	mov.w	r2, r2, lsr #21
   181f2:	f1c2 0218 	rsb	r2, r2, #24
   181f6:	f1c2 0c20 	rsb	ip, r2, #32
   181fa:	fa10 f30c 	lsls.w	r3, r0, ip
   181fe:	fa20 f002 	lsr.w	r0, r0, r2
   18202:	bf18      	it	ne
   18204:	f040 0001 	orrne.w	r0, r0, #1
   18208:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1820c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   18210:	fa03 fc0c 	lsl.w	ip, r3, ip
   18214:	ea40 000c 	orr.w	r0, r0, ip
   18218:	fa23 f302 	lsr.w	r3, r3, r2
   1821c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   18220:	e7cc      	b.n	181bc <__aeabi_d2f+0x14>
   18222:	ea7f 5362 	mvns.w	r3, r2, asr #21
   18226:	d107      	bne.n	18238 <__aeabi_d2f+0x90>
   18228:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1822c:	bf1e      	ittt	ne
   1822e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   18232:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   18236:	4770      	bxne	lr
   18238:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1823c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18240:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18244:	4770      	bx	lr
   18246:	bf00      	nop

00018248 <__aeabi_frsub>:
   18248:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1824c:	e002      	b.n	18254 <__addsf3>
   1824e:	bf00      	nop

00018250 <__aeabi_fsub>:
   18250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00018254 <__addsf3>:
   18254:	0042      	lsls	r2, r0, #1
   18256:	bf1f      	itttt	ne
   18258:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   1825c:	ea92 0f03 	teqne	r2, r3
   18260:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   18264:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18268:	d06a      	beq.n	18340 <__addsf3+0xec>
   1826a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1826e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   18272:	bfc1      	itttt	gt
   18274:	18d2      	addgt	r2, r2, r3
   18276:	4041      	eorgt	r1, r0
   18278:	4048      	eorgt	r0, r1
   1827a:	4041      	eorgt	r1, r0
   1827c:	bfb8      	it	lt
   1827e:	425b      	neglt	r3, r3
   18280:	2b19      	cmp	r3, #25
   18282:	bf88      	it	hi
   18284:	4770      	bxhi	lr
   18286:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1828a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1828e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18292:	bf18      	it	ne
   18294:	4240      	negne	r0, r0
   18296:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1829a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1829e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   182a2:	bf18      	it	ne
   182a4:	4249      	negne	r1, r1
   182a6:	ea92 0f03 	teq	r2, r3
   182aa:	d03f      	beq.n	1832c <__addsf3+0xd8>
   182ac:	f1a2 0201 	sub.w	r2, r2, #1
   182b0:	fa41 fc03 	asr.w	ip, r1, r3
   182b4:	eb10 000c 	adds.w	r0, r0, ip
   182b8:	f1c3 0320 	rsb	r3, r3, #32
   182bc:	fa01 f103 	lsl.w	r1, r1, r3
   182c0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   182c4:	d502      	bpl.n	182cc <__addsf3+0x78>
   182c6:	4249      	negs	r1, r1
   182c8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   182cc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   182d0:	d313      	bcc.n	182fa <__addsf3+0xa6>
   182d2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   182d6:	d306      	bcc.n	182e6 <__addsf3+0x92>
   182d8:	0840      	lsrs	r0, r0, #1
   182da:	ea4f 0131 	mov.w	r1, r1, rrx
   182de:	f102 0201 	add.w	r2, r2, #1
   182e2:	2afe      	cmp	r2, #254	; 0xfe
   182e4:	d251      	bcs.n	1838a <__addsf3+0x136>
   182e6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   182ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   182ee:	bf08      	it	eq
   182f0:	f020 0001 	biceq.w	r0, r0, #1
   182f4:	ea40 0003 	orr.w	r0, r0, r3
   182f8:	4770      	bx	lr
   182fa:	0049      	lsls	r1, r1, #1
   182fc:	eb40 0000 	adc.w	r0, r0, r0
   18300:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   18304:	f1a2 0201 	sub.w	r2, r2, #1
   18308:	d1ed      	bne.n	182e6 <__addsf3+0x92>
   1830a:	fab0 fc80 	clz	ip, r0
   1830e:	f1ac 0c08 	sub.w	ip, ip, #8
   18312:	ebb2 020c 	subs.w	r2, r2, ip
   18316:	fa00 f00c 	lsl.w	r0, r0, ip
   1831a:	bfaa      	itet	ge
   1831c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   18320:	4252      	neglt	r2, r2
   18322:	4318      	orrge	r0, r3
   18324:	bfbc      	itt	lt
   18326:	40d0      	lsrlt	r0, r2
   18328:	4318      	orrlt	r0, r3
   1832a:	4770      	bx	lr
   1832c:	f092 0f00 	teq	r2, #0
   18330:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   18334:	bf06      	itte	eq
   18336:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1833a:	3201      	addeq	r2, #1
   1833c:	3b01      	subne	r3, #1
   1833e:	e7b5      	b.n	182ac <__addsf3+0x58>
   18340:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18344:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18348:	bf18      	it	ne
   1834a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1834e:	d021      	beq.n	18394 <__addsf3+0x140>
   18350:	ea92 0f03 	teq	r2, r3
   18354:	d004      	beq.n	18360 <__addsf3+0x10c>
   18356:	f092 0f00 	teq	r2, #0
   1835a:	bf08      	it	eq
   1835c:	4608      	moveq	r0, r1
   1835e:	4770      	bx	lr
   18360:	ea90 0f01 	teq	r0, r1
   18364:	bf1c      	itt	ne
   18366:	2000      	movne	r0, #0
   18368:	4770      	bxne	lr
   1836a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1836e:	d104      	bne.n	1837a <__addsf3+0x126>
   18370:	0040      	lsls	r0, r0, #1
   18372:	bf28      	it	cs
   18374:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   18378:	4770      	bx	lr
   1837a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1837e:	bf3c      	itt	cc
   18380:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   18384:	4770      	bxcc	lr
   18386:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1838a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1838e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18392:	4770      	bx	lr
   18394:	ea7f 6222 	mvns.w	r2, r2, asr #24
   18398:	bf16      	itet	ne
   1839a:	4608      	movne	r0, r1
   1839c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   183a0:	4601      	movne	r1, r0
   183a2:	0242      	lsls	r2, r0, #9
   183a4:	bf06      	itte	eq
   183a6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   183aa:	ea90 0f01 	teqeq	r0, r1
   183ae:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   183b2:	4770      	bx	lr

000183b4 <__aeabi_ui2f>:
   183b4:	f04f 0300 	mov.w	r3, #0
   183b8:	e004      	b.n	183c4 <__aeabi_i2f+0x8>
   183ba:	bf00      	nop

000183bc <__aeabi_i2f>:
   183bc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   183c0:	bf48      	it	mi
   183c2:	4240      	negmi	r0, r0
   183c4:	ea5f 0c00 	movs.w	ip, r0
   183c8:	bf08      	it	eq
   183ca:	4770      	bxeq	lr
   183cc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   183d0:	4601      	mov	r1, r0
   183d2:	f04f 0000 	mov.w	r0, #0
   183d6:	e01c      	b.n	18412 <__aeabi_l2f+0x2a>

000183d8 <__aeabi_ul2f>:
   183d8:	ea50 0201 	orrs.w	r2, r0, r1
   183dc:	bf08      	it	eq
   183de:	4770      	bxeq	lr
   183e0:	f04f 0300 	mov.w	r3, #0
   183e4:	e00a      	b.n	183fc <__aeabi_l2f+0x14>
   183e6:	bf00      	nop

000183e8 <__aeabi_l2f>:
   183e8:	ea50 0201 	orrs.w	r2, r0, r1
   183ec:	bf08      	it	eq
   183ee:	4770      	bxeq	lr
   183f0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   183f4:	d502      	bpl.n	183fc <__aeabi_l2f+0x14>
   183f6:	4240      	negs	r0, r0
   183f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   183fc:	ea5f 0c01 	movs.w	ip, r1
   18400:	bf02      	ittt	eq
   18402:	4684      	moveq	ip, r0
   18404:	4601      	moveq	r1, r0
   18406:	2000      	moveq	r0, #0
   18408:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   1840c:	bf08      	it	eq
   1840e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   18412:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   18416:	fabc f28c 	clz	r2, ip
   1841a:	3a08      	subs	r2, #8
   1841c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   18420:	db10      	blt.n	18444 <__aeabi_l2f+0x5c>
   18422:	fa01 fc02 	lsl.w	ip, r1, r2
   18426:	4463      	add	r3, ip
   18428:	fa00 fc02 	lsl.w	ip, r0, r2
   1842c:	f1c2 0220 	rsb	r2, r2, #32
   18430:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   18434:	fa20 f202 	lsr.w	r2, r0, r2
   18438:	eb43 0002 	adc.w	r0, r3, r2
   1843c:	bf08      	it	eq
   1843e:	f020 0001 	biceq.w	r0, r0, #1
   18442:	4770      	bx	lr
   18444:	f102 0220 	add.w	r2, r2, #32
   18448:	fa01 fc02 	lsl.w	ip, r1, r2
   1844c:	f1c2 0220 	rsb	r2, r2, #32
   18450:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   18454:	fa21 f202 	lsr.w	r2, r1, r2
   18458:	eb43 0002 	adc.w	r0, r3, r2
   1845c:	bf08      	it	eq
   1845e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   18462:	4770      	bx	lr

00018464 <__aeabi_fmul>:
   18464:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18468:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1846c:	bf1e      	ittt	ne
   1846e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   18472:	ea92 0f0c 	teqne	r2, ip
   18476:	ea93 0f0c 	teqne	r3, ip
   1847a:	d06f      	beq.n	1855c <__aeabi_fmul+0xf8>
   1847c:	441a      	add	r2, r3
   1847e:	ea80 0c01 	eor.w	ip, r0, r1
   18482:	0240      	lsls	r0, r0, #9
   18484:	bf18      	it	ne
   18486:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1848a:	d01e      	beq.n	184ca <__aeabi_fmul+0x66>
   1848c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   18490:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   18494:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   18498:	fba0 3101 	umull	r3, r1, r0, r1
   1849c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   184a0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   184a4:	bf3e      	ittt	cc
   184a6:	0049      	lslcc	r1, r1, #1
   184a8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   184ac:	005b      	lslcc	r3, r3, #1
   184ae:	ea40 0001 	orr.w	r0, r0, r1
   184b2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   184b6:	2afd      	cmp	r2, #253	; 0xfd
   184b8:	d81d      	bhi.n	184f6 <__aeabi_fmul+0x92>
   184ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   184be:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   184c2:	bf08      	it	eq
   184c4:	f020 0001 	biceq.w	r0, r0, #1
   184c8:	4770      	bx	lr
   184ca:	f090 0f00 	teq	r0, #0
   184ce:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   184d2:	bf08      	it	eq
   184d4:	0249      	lsleq	r1, r1, #9
   184d6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   184da:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   184de:	3a7f      	subs	r2, #127	; 0x7f
   184e0:	bfc2      	ittt	gt
   184e2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   184e6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   184ea:	4770      	bxgt	lr
   184ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   184f0:	f04f 0300 	mov.w	r3, #0
   184f4:	3a01      	subs	r2, #1
   184f6:	dc5d      	bgt.n	185b4 <__aeabi_fmul+0x150>
   184f8:	f112 0f19 	cmn.w	r2, #25
   184fc:	bfdc      	itt	le
   184fe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   18502:	4770      	bxle	lr
   18504:	f1c2 0200 	rsb	r2, r2, #0
   18508:	0041      	lsls	r1, r0, #1
   1850a:	fa21 f102 	lsr.w	r1, r1, r2
   1850e:	f1c2 0220 	rsb	r2, r2, #32
   18512:	fa00 fc02 	lsl.w	ip, r0, r2
   18516:	ea5f 0031 	movs.w	r0, r1, rrx
   1851a:	f140 0000 	adc.w	r0, r0, #0
   1851e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   18522:	bf08      	it	eq
   18524:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   18528:	4770      	bx	lr
   1852a:	f092 0f00 	teq	r2, #0
   1852e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   18532:	bf02      	ittt	eq
   18534:	0040      	lsleq	r0, r0, #1
   18536:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1853a:	3a01      	subeq	r2, #1
   1853c:	d0f9      	beq.n	18532 <__aeabi_fmul+0xce>
   1853e:	ea40 000c 	orr.w	r0, r0, ip
   18542:	f093 0f00 	teq	r3, #0
   18546:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1854a:	bf02      	ittt	eq
   1854c:	0049      	lsleq	r1, r1, #1
   1854e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   18552:	3b01      	subeq	r3, #1
   18554:	d0f9      	beq.n	1854a <__aeabi_fmul+0xe6>
   18556:	ea41 010c 	orr.w	r1, r1, ip
   1855a:	e78f      	b.n	1847c <__aeabi_fmul+0x18>
   1855c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18560:	ea92 0f0c 	teq	r2, ip
   18564:	bf18      	it	ne
   18566:	ea93 0f0c 	teqne	r3, ip
   1856a:	d00a      	beq.n	18582 <__aeabi_fmul+0x11e>
   1856c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   18570:	bf18      	it	ne
   18572:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   18576:	d1d8      	bne.n	1852a <__aeabi_fmul+0xc6>
   18578:	ea80 0001 	eor.w	r0, r0, r1
   1857c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   18580:	4770      	bx	lr
   18582:	f090 0f00 	teq	r0, #0
   18586:	bf17      	itett	ne
   18588:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   1858c:	4608      	moveq	r0, r1
   1858e:	f091 0f00 	teqne	r1, #0
   18592:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   18596:	d014      	beq.n	185c2 <__aeabi_fmul+0x15e>
   18598:	ea92 0f0c 	teq	r2, ip
   1859c:	d101      	bne.n	185a2 <__aeabi_fmul+0x13e>
   1859e:	0242      	lsls	r2, r0, #9
   185a0:	d10f      	bne.n	185c2 <__aeabi_fmul+0x15e>
   185a2:	ea93 0f0c 	teq	r3, ip
   185a6:	d103      	bne.n	185b0 <__aeabi_fmul+0x14c>
   185a8:	024b      	lsls	r3, r1, #9
   185aa:	bf18      	it	ne
   185ac:	4608      	movne	r0, r1
   185ae:	d108      	bne.n	185c2 <__aeabi_fmul+0x15e>
   185b0:	ea80 0001 	eor.w	r0, r0, r1
   185b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   185b8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   185bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   185c0:	4770      	bx	lr
   185c2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   185c6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   185ca:	4770      	bx	lr

000185cc <__aeabi_fdiv>:
   185cc:	f04f 0cff 	mov.w	ip, #255	; 0xff
   185d0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   185d4:	bf1e      	ittt	ne
   185d6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   185da:	ea92 0f0c 	teqne	r2, ip
   185de:	ea93 0f0c 	teqne	r3, ip
   185e2:	d069      	beq.n	186b8 <__aeabi_fdiv+0xec>
   185e4:	eba2 0203 	sub.w	r2, r2, r3
   185e8:	ea80 0c01 	eor.w	ip, r0, r1
   185ec:	0249      	lsls	r1, r1, #9
   185ee:	ea4f 2040 	mov.w	r0, r0, lsl #9
   185f2:	d037      	beq.n	18664 <__aeabi_fdiv+0x98>
   185f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   185f8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   185fc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   18600:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18604:	428b      	cmp	r3, r1
   18606:	bf38      	it	cc
   18608:	005b      	lslcc	r3, r3, #1
   1860a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   1860e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   18612:	428b      	cmp	r3, r1
   18614:	bf24      	itt	cs
   18616:	1a5b      	subcs	r3, r3, r1
   18618:	ea40 000c 	orrcs.w	r0, r0, ip
   1861c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   18620:	bf24      	itt	cs
   18622:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   18626:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1862a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   1862e:	bf24      	itt	cs
   18630:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   18634:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   18638:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1863c:	bf24      	itt	cs
   1863e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   18642:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   18646:	011b      	lsls	r3, r3, #4
   18648:	bf18      	it	ne
   1864a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   1864e:	d1e0      	bne.n	18612 <__aeabi_fdiv+0x46>
   18650:	2afd      	cmp	r2, #253	; 0xfd
   18652:	f63f af50 	bhi.w	184f6 <__aeabi_fmul+0x92>
   18656:	428b      	cmp	r3, r1
   18658:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1865c:	bf08      	it	eq
   1865e:	f020 0001 	biceq.w	r0, r0, #1
   18662:	4770      	bx	lr
   18664:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   18668:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1866c:	327f      	adds	r2, #127	; 0x7f
   1866e:	bfc2      	ittt	gt
   18670:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   18674:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   18678:	4770      	bxgt	lr
   1867a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1867e:	f04f 0300 	mov.w	r3, #0
   18682:	3a01      	subs	r2, #1
   18684:	e737      	b.n	184f6 <__aeabi_fmul+0x92>
   18686:	f092 0f00 	teq	r2, #0
   1868a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1868e:	bf02      	ittt	eq
   18690:	0040      	lsleq	r0, r0, #1
   18692:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   18696:	3a01      	subeq	r2, #1
   18698:	d0f9      	beq.n	1868e <__aeabi_fdiv+0xc2>
   1869a:	ea40 000c 	orr.w	r0, r0, ip
   1869e:	f093 0f00 	teq	r3, #0
   186a2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   186a6:	bf02      	ittt	eq
   186a8:	0049      	lsleq	r1, r1, #1
   186aa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   186ae:	3b01      	subeq	r3, #1
   186b0:	d0f9      	beq.n	186a6 <__aeabi_fdiv+0xda>
   186b2:	ea41 010c 	orr.w	r1, r1, ip
   186b6:	e795      	b.n	185e4 <__aeabi_fdiv+0x18>
   186b8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   186bc:	ea92 0f0c 	teq	r2, ip
   186c0:	d108      	bne.n	186d4 <__aeabi_fdiv+0x108>
   186c2:	0242      	lsls	r2, r0, #9
   186c4:	f47f af7d 	bne.w	185c2 <__aeabi_fmul+0x15e>
   186c8:	ea93 0f0c 	teq	r3, ip
   186cc:	f47f af70 	bne.w	185b0 <__aeabi_fmul+0x14c>
   186d0:	4608      	mov	r0, r1
   186d2:	e776      	b.n	185c2 <__aeabi_fmul+0x15e>
   186d4:	ea93 0f0c 	teq	r3, ip
   186d8:	d104      	bne.n	186e4 <__aeabi_fdiv+0x118>
   186da:	024b      	lsls	r3, r1, #9
   186dc:	f43f af4c 	beq.w	18578 <__aeabi_fmul+0x114>
   186e0:	4608      	mov	r0, r1
   186e2:	e76e      	b.n	185c2 <__aeabi_fmul+0x15e>
   186e4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   186e8:	bf18      	it	ne
   186ea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   186ee:	d1ca      	bne.n	18686 <__aeabi_fdiv+0xba>
   186f0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   186f4:	f47f af5c 	bne.w	185b0 <__aeabi_fmul+0x14c>
   186f8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   186fc:	f47f af3c 	bne.w	18578 <__aeabi_fmul+0x114>
   18700:	e75f      	b.n	185c2 <__aeabi_fmul+0x15e>
   18702:	bf00      	nop

00018704 <__gesf2>:
   18704:	f04f 3cff 	mov.w	ip, #4294967295
   18708:	e006      	b.n	18718 <__cmpsf2+0x4>
   1870a:	bf00      	nop

0001870c <__lesf2>:
   1870c:	f04f 0c01 	mov.w	ip, #1
   18710:	e002      	b.n	18718 <__cmpsf2+0x4>
   18712:	bf00      	nop

00018714 <__cmpsf2>:
   18714:	f04f 0c01 	mov.w	ip, #1
   18718:	f84d cd04 	str.w	ip, [sp, #-4]!
   1871c:	ea4f 0240 	mov.w	r2, r0, lsl #1
   18720:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18724:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18728:	bf18      	it	ne
   1872a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1872e:	d011      	beq.n	18754 <__cmpsf2+0x40>
   18730:	b001      	add	sp, #4
   18732:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   18736:	bf18      	it	ne
   18738:	ea90 0f01 	teqne	r0, r1
   1873c:	bf58      	it	pl
   1873e:	ebb2 0003 	subspl.w	r0, r2, r3
   18742:	bf88      	it	hi
   18744:	17c8      	asrhi	r0, r1, #31
   18746:	bf38      	it	cc
   18748:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   1874c:	bf18      	it	ne
   1874e:	f040 0001 	orrne.w	r0, r0, #1
   18752:	4770      	bx	lr
   18754:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18758:	d102      	bne.n	18760 <__cmpsf2+0x4c>
   1875a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   1875e:	d105      	bne.n	1876c <__cmpsf2+0x58>
   18760:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   18764:	d1e4      	bne.n	18730 <__cmpsf2+0x1c>
   18766:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   1876a:	d0e1      	beq.n	18730 <__cmpsf2+0x1c>
   1876c:	f85d 0b04 	ldr.w	r0, [sp], #4
   18770:	4770      	bx	lr
   18772:	bf00      	nop

00018774 <__aeabi_cfrcmple>:
   18774:	4684      	mov	ip, r0
   18776:	4608      	mov	r0, r1
   18778:	4661      	mov	r1, ip
   1877a:	e7ff      	b.n	1877c <__aeabi_cfcmpeq>

0001877c <__aeabi_cfcmpeq>:
   1877c:	b50f      	push	{r0, r1, r2, r3, lr}
   1877e:	f7ff ffc9 	bl	18714 <__cmpsf2>
   18782:	2800      	cmp	r0, #0
   18784:	bf48      	it	mi
   18786:	f110 0f00 	cmnmi.w	r0, #0
   1878a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0001878c <__aeabi_fcmpeq>:
   1878c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18790:	f7ff fff4 	bl	1877c <__aeabi_cfcmpeq>
   18794:	bf0c      	ite	eq
   18796:	2001      	moveq	r0, #1
   18798:	2000      	movne	r0, #0
   1879a:	f85d fb08 	ldr.w	pc, [sp], #8
   1879e:	bf00      	nop

000187a0 <__aeabi_fcmplt>:
   187a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   187a4:	f7ff ffea 	bl	1877c <__aeabi_cfcmpeq>
   187a8:	bf34      	ite	cc
   187aa:	2001      	movcc	r0, #1
   187ac:	2000      	movcs	r0, #0
   187ae:	f85d fb08 	ldr.w	pc, [sp], #8
   187b2:	bf00      	nop

000187b4 <__aeabi_fcmple>:
   187b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   187b8:	f7ff ffe0 	bl	1877c <__aeabi_cfcmpeq>
   187bc:	bf94      	ite	ls
   187be:	2001      	movls	r0, #1
   187c0:	2000      	movhi	r0, #0
   187c2:	f85d fb08 	ldr.w	pc, [sp], #8
   187c6:	bf00      	nop

000187c8 <__aeabi_fcmpge>:
   187c8:	f84d ed08 	str.w	lr, [sp, #-8]!
   187cc:	f7ff ffd2 	bl	18774 <__aeabi_cfrcmple>
   187d0:	bf94      	ite	ls
   187d2:	2001      	movls	r0, #1
   187d4:	2000      	movhi	r0, #0
   187d6:	f85d fb08 	ldr.w	pc, [sp], #8
   187da:	bf00      	nop

000187dc <__aeabi_fcmpgt>:
   187dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   187e0:	f7ff ffc8 	bl	18774 <__aeabi_cfrcmple>
   187e4:	bf34      	ite	cc
   187e6:	2001      	movcc	r0, #1
   187e8:	2000      	movcs	r0, #0
   187ea:	f85d fb08 	ldr.w	pc, [sp], #8
   187ee:	bf00      	nop

000187f0 <__aeabi_f2iz>:
   187f0:	ea4f 0240 	mov.w	r2, r0, lsl #1
   187f4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   187f8:	d30f      	bcc.n	1881a <__aeabi_f2iz+0x2a>
   187fa:	f04f 039e 	mov.w	r3, #158	; 0x9e
   187fe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   18802:	d90d      	bls.n	18820 <__aeabi_f2iz+0x30>
   18804:	ea4f 2300 	mov.w	r3, r0, lsl #8
   18808:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1880c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   18810:	fa23 f002 	lsr.w	r0, r3, r2
   18814:	bf18      	it	ne
   18816:	4240      	negne	r0, r0
   18818:	4770      	bx	lr
   1881a:	f04f 0000 	mov.w	r0, #0
   1881e:	4770      	bx	lr
   18820:	f112 0f61 	cmn.w	r2, #97	; 0x61
   18824:	d101      	bne.n	1882a <__aeabi_f2iz+0x3a>
   18826:	0242      	lsls	r2, r0, #9
   18828:	d105      	bne.n	18836 <__aeabi_f2iz+0x46>
   1882a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   1882e:	bf08      	it	eq
   18830:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   18834:	4770      	bx	lr
   18836:	f04f 0000 	mov.w	r0, #0
   1883a:	4770      	bx	lr

0001883c <memcpy>:
   1883c:	2a0f      	cmp	r2, #15
   1883e:	b4f0      	push	{r4, r5, r6, r7}
   18840:	d945      	bls.n	188ce <memcpy+0x92>
   18842:	ea40 0301 	orr.w	r3, r0, r1
   18846:	079b      	lsls	r3, r3, #30
   18848:	d145      	bne.n	188d6 <memcpy+0x9a>
   1884a:	f1a2 0710 	sub.w	r7, r2, #16
   1884e:	460c      	mov	r4, r1
   18850:	4603      	mov	r3, r0
   18852:	093f      	lsrs	r7, r7, #4
   18854:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   18858:	3610      	adds	r6, #16
   1885a:	6825      	ldr	r5, [r4, #0]
   1885c:	3310      	adds	r3, #16
   1885e:	3410      	adds	r4, #16
   18860:	f843 5c10 	str.w	r5, [r3, #-16]
   18864:	f854 5c0c 	ldr.w	r5, [r4, #-12]
   18868:	f843 5c0c 	str.w	r5, [r3, #-12]
   1886c:	f854 5c08 	ldr.w	r5, [r4, #-8]
   18870:	f843 5c08 	str.w	r5, [r3, #-8]
   18874:	f854 5c04 	ldr.w	r5, [r4, #-4]
   18878:	f843 5c04 	str.w	r5, [r3, #-4]
   1887c:	42b3      	cmp	r3, r6
   1887e:	d1ec      	bne.n	1885a <memcpy+0x1e>
   18880:	1c7b      	adds	r3, r7, #1
   18882:	f002 0c0f 	and.w	ip, r2, #15
   18886:	f1bc 0f03 	cmp.w	ip, #3
   1888a:	ea4f 1303 	mov.w	r3, r3, lsl #4
   1888e:	4419      	add	r1, r3
   18890:	4403      	add	r3, r0
   18892:	d922      	bls.n	188da <memcpy+0x9e>
   18894:	460e      	mov	r6, r1
   18896:	461d      	mov	r5, r3
   18898:	4664      	mov	r4, ip
   1889a:	f856 7b04 	ldr.w	r7, [r6], #4
   1889e:	3c04      	subs	r4, #4
   188a0:	2c03      	cmp	r4, #3
   188a2:	f845 7b04 	str.w	r7, [r5], #4
   188a6:	d8f8      	bhi.n	1889a <memcpy+0x5e>
   188a8:	f1ac 0404 	sub.w	r4, ip, #4
   188ac:	f002 0203 	and.w	r2, r2, #3
   188b0:	f024 0403 	bic.w	r4, r4, #3
   188b4:	3404      	adds	r4, #4
   188b6:	4423      	add	r3, r4
   188b8:	4421      	add	r1, r4
   188ba:	b132      	cbz	r2, 188ca <memcpy+0x8e>
   188bc:	440a      	add	r2, r1
   188be:	f811 4b01 	ldrb.w	r4, [r1], #1
   188c2:	4291      	cmp	r1, r2
   188c4:	f803 4b01 	strb.w	r4, [r3], #1
   188c8:	d1f9      	bne.n	188be <memcpy+0x82>
   188ca:	bcf0      	pop	{r4, r5, r6, r7}
   188cc:	4770      	bx	lr
   188ce:	4603      	mov	r3, r0
   188d0:	2a00      	cmp	r2, #0
   188d2:	d1f3      	bne.n	188bc <memcpy+0x80>
   188d4:	e7f9      	b.n	188ca <memcpy+0x8e>
   188d6:	4603      	mov	r3, r0
   188d8:	e7f0      	b.n	188bc <memcpy+0x80>
   188da:	4662      	mov	r2, ip
   188dc:	2a00      	cmp	r2, #0
   188de:	d1ed      	bne.n	188bc <memcpy+0x80>
   188e0:	e7f3      	b.n	188ca <memcpy+0x8e>
   188e2:	bf00      	nop

000188e4 <memset>:
   188e4:	0783      	lsls	r3, r0, #30
   188e6:	b4f0      	push	{r4, r5, r6, r7}
   188e8:	d048      	beq.n	1897c <memset+0x98>
   188ea:	1e54      	subs	r4, r2, #1
   188ec:	2a00      	cmp	r2, #0
   188ee:	d043      	beq.n	18978 <memset+0x94>
   188f0:	b2cd      	uxtb	r5, r1
   188f2:	4603      	mov	r3, r0
   188f4:	e002      	b.n	188fc <memset+0x18>
   188f6:	2c00      	cmp	r4, #0
   188f8:	d03e      	beq.n	18978 <memset+0x94>
   188fa:	4614      	mov	r4, r2
   188fc:	f803 5b01 	strb.w	r5, [r3], #1
   18900:	f013 0f03 	tst.w	r3, #3
   18904:	f104 32ff 	add.w	r2, r4, #4294967295
   18908:	d1f5      	bne.n	188f6 <memset+0x12>
   1890a:	2c03      	cmp	r4, #3
   1890c:	d92d      	bls.n	1896a <memset+0x86>
   1890e:	b2cd      	uxtb	r5, r1
   18910:	2c0f      	cmp	r4, #15
   18912:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   18916:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1891a:	d918      	bls.n	1894e <memset+0x6a>
   1891c:	f1a4 0710 	sub.w	r7, r4, #16
   18920:	f103 0610 	add.w	r6, r3, #16
   18924:	461a      	mov	r2, r3
   18926:	093f      	lsrs	r7, r7, #4
   18928:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   1892c:	6015      	str	r5, [r2, #0]
   1892e:	3210      	adds	r2, #16
   18930:	f842 5c0c 	str.w	r5, [r2, #-12]
   18934:	f842 5c08 	str.w	r5, [r2, #-8]
   18938:	f842 5c04 	str.w	r5, [r2, #-4]
   1893c:	42b2      	cmp	r2, r6
   1893e:	d1f5      	bne.n	1892c <memset+0x48>
   18940:	f004 040f 	and.w	r4, r4, #15
   18944:	3701      	adds	r7, #1
   18946:	2c03      	cmp	r4, #3
   18948:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   1894c:	d90d      	bls.n	1896a <memset+0x86>
   1894e:	461e      	mov	r6, r3
   18950:	4622      	mov	r2, r4
   18952:	3a04      	subs	r2, #4
   18954:	f846 5b04 	str.w	r5, [r6], #4
   18958:	2a03      	cmp	r2, #3
   1895a:	d8fa      	bhi.n	18952 <memset+0x6e>
   1895c:	1f22      	subs	r2, r4, #4
   1895e:	f004 0403 	and.w	r4, r4, #3
   18962:	f022 0203 	bic.w	r2, r2, #3
   18966:	3204      	adds	r2, #4
   18968:	4413      	add	r3, r2
   1896a:	b12c      	cbz	r4, 18978 <memset+0x94>
   1896c:	b2c9      	uxtb	r1, r1
   1896e:	441c      	add	r4, r3
   18970:	f803 1b01 	strb.w	r1, [r3], #1
   18974:	42a3      	cmp	r3, r4
   18976:	d1fb      	bne.n	18970 <memset+0x8c>
   18978:	bcf0      	pop	{r4, r5, r6, r7}
   1897a:	4770      	bx	lr
   1897c:	4614      	mov	r4, r2
   1897e:	4603      	mov	r3, r0
   18980:	e7c3      	b.n	1890a <memset+0x26>
   18982:	bf00      	nop

00018984 <strncpy>:
   18984:	ea40 0301 	orr.w	r3, r0, r1
   18988:	079b      	lsls	r3, r3, #30
   1898a:	b470      	push	{r4, r5, r6}
   1898c:	d12b      	bne.n	189e6 <strncpy+0x62>
   1898e:	2a03      	cmp	r2, #3
   18990:	bf84      	itt	hi
   18992:	460b      	movhi	r3, r1
   18994:	4605      	movhi	r5, r0
   18996:	d926      	bls.n	189e6 <strncpy+0x62>
   18998:	4619      	mov	r1, r3
   1899a:	f853 4b04 	ldr.w	r4, [r3], #4
   1899e:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   189a2:	ea26 0604 	bic.w	r6, r6, r4
   189a6:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   189aa:	d105      	bne.n	189b8 <strncpy+0x34>
   189ac:	3a04      	subs	r2, #4
   189ae:	f845 4b04 	str.w	r4, [r5], #4
   189b2:	2a03      	cmp	r2, #3
   189b4:	4619      	mov	r1, r3
   189b6:	d8ef      	bhi.n	18998 <strncpy+0x14>
   189b8:	b19a      	cbz	r2, 189e2 <strncpy+0x5e>
   189ba:	780c      	ldrb	r4, [r1, #0]
   189bc:	3a01      	subs	r2, #1
   189be:	1c6b      	adds	r3, r5, #1
   189c0:	702c      	strb	r4, [r5, #0]
   189c2:	b13c      	cbz	r4, 189d4 <strncpy+0x50>
   189c4:	b16a      	cbz	r2, 189e2 <strncpy+0x5e>
   189c6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   189ca:	3a01      	subs	r2, #1
   189cc:	f803 4b01 	strb.w	r4, [r3], #1
   189d0:	2c00      	cmp	r4, #0
   189d2:	d1f7      	bne.n	189c4 <strncpy+0x40>
   189d4:	b12a      	cbz	r2, 189e2 <strncpy+0x5e>
   189d6:	441a      	add	r2, r3
   189d8:	2100      	movs	r1, #0
   189da:	f803 1b01 	strb.w	r1, [r3], #1
   189de:	4293      	cmp	r3, r2
   189e0:	d1fb      	bne.n	189da <strncpy+0x56>
   189e2:	bc70      	pop	{r4, r5, r6}
   189e4:	4770      	bx	lr
   189e6:	4605      	mov	r5, r0
   189e8:	e7e6      	b.n	189b8 <strncpy+0x34>
   189ea:	bf00      	nop

000189ec <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
   189ec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
   189ee:	e003      	b.n	189f8 <LoopCopyDataInit>

000189f0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
   189f0:	4b0a      	ldr	r3, [pc, #40]	; (18a1c <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
   189f2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
   189f4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
   189f6:	3104      	adds	r1, #4

000189f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   189f8:	4809      	ldr	r0, [pc, #36]	; (18a20 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
   189fa:	4b0a      	ldr	r3, [pc, #40]	; (18a24 <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
   189fc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
   189fe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
   18a00:	d3f6      	bcc.n	189f0 <CopyDataInit>
	ldr	r2, =_sbss
   18a02:	4a09      	ldr	r2, [pc, #36]	; (18a28 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
   18a04:	e002      	b.n	18a0c <LoopFillZerobss>

00018a06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
   18a06:	2300      	movs	r3, #0
	str	r3, [r2], #4
   18a08:	f842 3b04 	str.w	r3, [r2], #4

00018a0c <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
   18a0c:	4b07      	ldr	r3, [pc, #28]	; (18a2c <LoopFillZerobss+0x20>)
	cmp	r2, r3
   18a0e:	429a      	cmp	r2, r3
	bcc	FillZerobss
   18a10:	d3f9      	bcc.n	18a06 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
   18a12:	f7e7 fc93 	bl	33c <SystemInit>
/* Call the application's entry point.*/
	bl	main
   18a16:	f7fe fe7f 	bl	17718 <main>
	bx	lr    
   18a1a:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
   18a1c:	00018b24 	.word	0x00018b24
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
   18a20:	20000000 	.word	0x20000000
	ldr	r3, =_edata
   18a24:	200005d8 	.word	0x200005d8
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
   18a28:	200005d8 	.word	0x200005d8
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
   18a2c:	2004cdd8 	.word	0x2004cdd8

00018a30 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
   18a30:	e7fe      	b.n	18a30 <ADC1_2_IRQHandler>
   18a32:	0000      	movs	r0, r0
   18a34:	65532d52 	.word	0x65532d52
   18a38:	6e617672 	.word	0x6e617672
   18a3c:	000d0a74 	.word	0x000d0a74
   18a40:	454c4449 	.word	0x454c4449
   18a44:	00000000 	.word	0x00000000

00018a48 <ulKernelPriority>:
   18a48:	0000007f                                ....

00018a4c <heapSTRUCT_SIZE>:
   18a4c:	00010010                                         ..

00018a4e <version>:
   18a4e:	3d5a0001                                         ..

00018a50 <utm_east0>:
   18a50:	00093d5a                                Z=..

00018a54 <utm_north0>:
   18a54:	005875e6                                .uX.

00018a58 <climb_pgain>:
   18a58:	bcf5c28f                                ....

00018a5c <climb_igain>:
   18a5c:	3dcccccd                                ...=

00018a60 <level_gaz>:
   18a60:	3e9eb852                                R..>

00018a64 <nav_east0>:
   18a64:	00093d5a                                Z=..

00018a68 <nav_north0>:
   18a68:	005875e6                                .uX.

00018a6c <nb_waypoint>:
   18a6c:	00000007 33323130 37363534 42413938     ....0123456789AB
   18a7c:	46454443                                CDEF

00018a80 <failsafe>:
	...
   18a94:	20574246 746f6f42 20676e69 3a644924     FBW Booting $Id:
   18aa4:	69616d20 2c632e6e 2e312076 30322033      main.c,v 1.3 20
   18ab4:	312f3830 32322f30 3a393120 313a3134     08/10/22 19:41:1
   18ac4:	61632039 20657373 20707845 000d0a24     9 casse Exp $...
   18ad4:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   18ae4:	000d0a30 00000d0a 65532d52 6e617672     0.......R-Servan
   18af4:	00000074 65532d49 6e617672 00000074     t...I-Servant...
   18b04:	65532d43 6e617672 00000074 65532d4f     C-Servant...O-Se
   18b14:	6e617672 00000074 6e657665 00000074     rvant...event...
